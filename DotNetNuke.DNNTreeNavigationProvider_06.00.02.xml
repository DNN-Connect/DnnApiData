<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<root file="DotNetNuke.DNNTreeNavigationProvider.dll" version="06.00.02" generated="2017-06-18 20:45:13Z" generationTime="1.359324">
  <namespace name="DotNetNuke.NavigationControl">
    <class name="DNNTreeNavigationProvider">
      <declaration><![CDATA[public class DNNTreeNavigationProvider : NavigationProvider]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DNNTreeNavigationProvider()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="Bind">
          <declaration><![CDATA[public override void Bind(DNNNodeCollection objNodes)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="252" sc="9" el="351" ec="10">DNNTreeNavigationProvider.cs</location>
            <body hash="a7c0e2bb7ed8531a444bf627e0403328"><![CDATA[{
            TreeNode objTreeItem;
            if (IndicateChildren == false)
            {
                IndicateChildImageSub = "";
                IndicateChildImageRoot = "";
                IndicateChildImageExpandedSub = "";
                IndicateChildImageExpandedRoot = "";
            }
            if (!String.IsNullOrEmpty(CSSNodeSelectedRoot) && CSSNodeSelectedRoot == CSSNodeSelectedSub)
            {
                Tree.DefaultNodeCssClassSelected = CSSNodeSelectedRoot; //set on parent, thus decreasing overall payload
            }
            foreach (DNNNode objNode in objNodes)
            {
                if (objNode.Level == 0) //root Tree
                {
                    int intIndex = Tree.TreeNodes.Import(objNode, true);
                    objTreeItem = Tree.TreeNodes[intIndex];
                    if (objNode.Enabled == false)
                    {
                        objTreeItem.ClickAction = eClickAction.Expand;
                    }
                    if (!String.IsNullOrEmpty(CSSNodeRoot))
                    {
                        objTreeItem.CssClass = CSSNodeRoot;
                    }
                    if (!String.IsNullOrEmpty(CSSNodeHoverRoot))
                    {
                        objTreeItem.CSSClassHover = CSSNodeHoverRoot;
                    }
                    if (String.IsNullOrEmpty(Tree.DefaultNodeCssClassSelected) && !String.IsNullOrEmpty(CSSNodeSelectedRoot))
                    {
                        objTreeItem.CSSClassSelected = CSSNodeSelectedRoot;
                    }
                    objTreeItem.CSSIcon = " "; //< ignore for root...???
                    if (objNode.BreadCrumb)
                    {
                        objTreeItem.CssClass = CSSBreadCrumbRoot;
                    }
                }
                else
                {
                    try
                    {
                        TreeNode objParent = Tree.TreeNodes.FindNode(objNode.ParentNode.ID);
                        if (objParent == null) //POD
                        {
                            objParent = Tree.TreeNodes[Tree.TreeNodes.Import(objNode.ParentNode.Clone(), true)];
                        }
                        objTreeItem = objParent.TreeNodes.FindNode(objNode.ID);
                        if (objTreeItem == null) //POD
                        {
                            objTreeItem = objParent.TreeNodes[objParent.TreeNodes.Import(objNode.Clone(), true)];
                        }
                        if (objNode.Enabled == false)
                        {
                            objTreeItem.ClickAction = eClickAction.Expand;
                        }
                        if (!String.IsNullOrEmpty(CSSNodeHover))
                        {
                            objTreeItem.CSSClassHover = CSSNodeHover;
                        }
                        if (String.IsNullOrEmpty(Tree.DefaultNodeCssClassSelected) && !String.IsNullOrEmpty(CSSNodeSelectedSub))
                        {
                            objTreeItem.CSSClassSelected = CSSNodeSelectedSub;
                        }
                        if (objNode.BreadCrumb)
                        {
                            objTreeItem.CssClass = CSSBreadCrumbSub;
                        }
                    }
                    catch
                    {
                        //throws exception if the parent tab has not been loaded ( may be related to user role security not allowing access to a parent tab )
                        objTreeItem = null;
                    }
                }
                if (!String.IsNullOrEmpty(objNode.Image))
                {
                    if (objNode.Image.StartsWith("~/images/"))
                    {
                        objNode.Image = objNode.Image.Replace("~/images/", PathSystemImage);
                    }
                    else if (!objNode.Image.Contains("://") && objNode.Image.StartsWith("/") == false && !String.IsNullOrEmpty(PathImage))
                    {
                        objNode.Image = PathImage + objNode.Image;
                    }
                    objTreeItem.Image = objNode.Image;
                }
                objTreeItem.ToolTip = objNode.ToolTip;

                //End Select
                if (objNode.Selected)
                {
                    Tree.SelectNode(objNode.ID);
                }
                Bind(objNode.DNNNodes);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="ClearNodes">
          <declaration><![CDATA[public override void ClearNodes()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="364" sc="9" el="366" ec="10">DNNTreeNavigationProvider.cs</location>
            <body hash="0d03be9599448515ce3460e96c843d77"><![CDATA[{
            Tree.TreeNodes.Clear();
        }]]></body>
          </codeblock>
        </method>
        <method name="DNNTree_NodeClick">
          <declaration><![CDATA[private void DNNTree_NodeClick(object source, DNNTreeNodeClickEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="354" sc="9" el="356" ec="10">DNNTreeNavigationProvider.cs</location>
            <body hash="1af6e3d70050b44c7d92b7836ee5e1d3"><![CDATA[{
            RaiseEvent_NodeClick(e.Node);
        }]]></body>
          </codeblock>
        </method>
        <method name="DNNTree_PopulateOnDemand">
          <declaration><![CDATA[private void DNNTree_PopulateOnDemand(object source, DNNTreeEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="359" sc="9" el="361" ec="10">DNNTreeNavigationProvider.cs</location>
            <body hash="edd593bde8a2140552b63529ccdf3b71"><![CDATA[{
            RaiseEvent_PopulateOnDemand(e.Node);
        }]]></body>
          </codeblock>
        </method>
        <method name="Initialize">
          <declaration><![CDATA[public override void Initialize()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="244" sc="9" el="249" ec="10">DNNTreeNavigationProvider.cs</location>
            <body hash="8e2045ff4512d227d274a8f4d1af7d4b"><![CDATA[{
            Tree = new DnnTree();
            Tree.ID = _controlID;
            Tree.NodeClick += DNNTree_NodeClick;
            Tree.PopulateOnDemand += DNNTree_PopulateOnDemand;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_controlID">
          <declaration><![CDATA[private string _controlID;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="ControlID">
          <declaration><![CDATA[public override string ControlID]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="121" sc="13" el="123" ec="14">DNNTreeNavigationProvider.cs</location>
            <body hash="5bee8b2cb13015627e6fe6f8cf3e6074"><![CDATA[{
                return _controlID;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="125" sc="13" el="127" ec="14">DNNTreeNavigationProvider.cs</location>
            <body hash="3951093f888b94e34f2e8ec84506b0d9"><![CDATA[{
                _controlID = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="CSSBreadCrumbRoot">
          <declaration><![CDATA[public override string CSSBreadCrumbRoot]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="CSSBreadCrumbSub">
          <declaration><![CDATA[public override string CSSBreadCrumbSub]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="CSSControl">
          <declaration><![CDATA[public override string CSSControl]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="137" sc="13" el="139" ec="14">DNNTreeNavigationProvider.cs</location>
            <body hash="145d2030304ec521fd97ff21ff91d9cb"><![CDATA[{
                return Tree.CssClass;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="141" sc="13" el="143" ec="14">DNNTreeNavigationProvider.cs</location>
            <body hash="0f66c54b1a1ed8b2d21ad55abad90663"><![CDATA[{
                Tree.CssClass = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="CSSIcon">
          <declaration><![CDATA[public override string CSSIcon]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="149" sc="13" el="151" ec="14">DNNTreeNavigationProvider.cs</location>
            <body hash="9f1ac965c204e7ae2ab1ade02f08a397"><![CDATA[{
                return Tree.DefaultIconCssClass;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="153" sc="13" el="155" ec="14">DNNTreeNavigationProvider.cs</location>
            <body hash="c374511716faaa4f6e9151988b920303"><![CDATA[{
                Tree.DefaultIconCssClass = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="CSSNode">
          <declaration><![CDATA[public override string CSSNode]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="161" sc="13" el="163" ec="14">DNNTreeNavigationProvider.cs</location>
            <body hash="5f1a1664a27c564defd30ec3639cf75c"><![CDATA[{
                return Tree.DefaultNodeCssClass;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="165" sc="13" el="167" ec="14">DNNTreeNavigationProvider.cs</location>
            <body hash="7e9f691c5f453897d72a17389f94ed14"><![CDATA[{
                Tree.DefaultNodeCssClass = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="CSSNodeHover">
          <declaration><![CDATA[public override string CSSNodeHover]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="177" sc="13" el="179" ec="14">DNNTreeNavigationProvider.cs</location>
            <body hash="faac5e8ab3a17f2eb5c022afbe645e01"><![CDATA[{
                return Tree.DefaultNodeCssClassOver;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="181" sc="13" el="183" ec="14">DNNTreeNavigationProvider.cs</location>
            <body hash="df243dbad8fc66027d6936236f023d09"><![CDATA[{
                Tree.DefaultNodeCssClassOver = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="CSSNodeHoverRoot">
          <declaration><![CDATA[public override string CSSNodeHoverRoot]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="CSSNodeHoverSub">
          <declaration><![CDATA[public override string CSSNodeHoverSub]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="CSSNodeRoot">
          <declaration><![CDATA[public override string CSSNodeRoot]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="CSSNodeSelectedRoot">
          <declaration><![CDATA[public override string CSSNodeSelectedRoot]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="CSSNodeSelectedSub">
          <declaration><![CDATA[public override string CSSNodeSelectedSub]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ForceDownLevel">
          <declaration><![CDATA[public override string ForceDownLevel]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="195" sc="13" el="197" ec="14">DNNTreeNavigationProvider.cs</location>
            <body hash="e14fe11d6e720cd92b698895df7ef4a6"><![CDATA[{
                return Tree.ForceDownLevel.ToString();
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="199" sc="13" el="201" ec="14">DNNTreeNavigationProvider.cs</location>
            <body hash="ce8b187e6f2af4f82f56d41b2d24e53d"><![CDATA[{
                Tree.ForceDownLevel = Convert.ToBoolean(value);
            }]]></body>
          </codeblock>
        </property>
        <property name="IndicateChildImageExpandedRoot">
          <declaration><![CDATA[public override string IndicateChildImageExpandedRoot]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="97" sc="13" el="99" ec="14">DNNTreeNavigationProvider.cs</location>
            <body hash="b18e87ca97aaf8dd643850c1276adb50"><![CDATA[{
                return Tree.ExpandedNodeImage;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="101" sc="13" el="103" ec="14">DNNTreeNavigationProvider.cs</location>
            <body hash="ca71941265fd77ba00fbcb1b10fac37a"><![CDATA[{
                Tree.ExpandedNodeImage = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="IndicateChildImageExpandedSub">
          <declaration><![CDATA[public override string IndicateChildImageExpandedSub]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="109" sc="13" el="111" ec="14">DNNTreeNavigationProvider.cs</location>
            <body hash="b18e87ca97aaf8dd643850c1276adb50"><![CDATA[{
                return Tree.ExpandedNodeImage;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="113" sc="13" el="115" ec="14">DNNTreeNavigationProvider.cs</location>
            <body hash="ca71941265fd77ba00fbcb1b10fac37a"><![CDATA[{
                Tree.ExpandedNodeImage = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="IndicateChildImageRoot">
          <declaration><![CDATA[public override string IndicateChildImageRoot]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="73" sc="13" el="75" ec="14">DNNTreeNavigationProvider.cs</location>
            <body hash="2d22e6084012b9d56faf186e92cdb6d4"><![CDATA[{
                return Tree.CollapsedNodeImage;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="77" sc="13" el="79" ec="14">DNNTreeNavigationProvider.cs</location>
            <body hash="49b494c232d14613c4dae87d0e34db78"><![CDATA[{
                Tree.CollapsedNodeImage = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="IndicateChildImageSub">
          <declaration><![CDATA[public override string IndicateChildImageSub]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="61" sc="13" el="63" ec="14">DNNTreeNavigationProvider.cs</location>
            <body hash="2d22e6084012b9d56faf186e92cdb6d4"><![CDATA[{
                return Tree.CollapsedNodeImage;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="65" sc="13" el="67" ec="14">DNNTreeNavigationProvider.cs</location>
            <body hash="49b494c232d14613c4dae87d0e34db78"><![CDATA[{
                Tree.CollapsedNodeImage = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="IndicateChildren">
          <declaration><![CDATA[public override bool IndicateChildren]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="NavigationControl">
          <declaration><![CDATA[public override Control NavigationControl]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="45" sc="13" el="47" ec="14">DNNTreeNavigationProvider.cs</location>
            <body hash="d55ccab7953fee24f1bb46703d3c6988"><![CDATA[{
                return Tree;
            }]]></body>
          </codeblock>
        </property>
        <property name="PathImage">
          <declaration><![CDATA[public override string PathImage]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="PathSystemImage">
          <declaration><![CDATA[public override string PathSystemImage]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="221" sc="13" el="223" ec="14">DNNTreeNavigationProvider.cs</location>
            <body hash="06b7131a5f7731d2a5ad3965ad2e1a4c"><![CDATA[{
                return Tree.SystemImagesPath;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="225" sc="13" el="227" ec="14">DNNTreeNavigationProvider.cs</location>
            <body hash="3b44e19b8495c14ee91648c0547dd7cb"><![CDATA[{
                Tree.SystemImagesPath = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="PathSystemScript">
          <declaration><![CDATA[public override string PathSystemScript]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="235" sc="13" el="237" ec="14">DNNTreeNavigationProvider.cs</location>
            <body hash="ca077e100c5ef68624eed114b7facc54"><![CDATA[{
                return Tree.TreeScriptPath;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="239" sc="13" el="240" ec="14">DNNTreeNavigationProvider.cs</location>
            <body hash="dcf329278ec483df0390d9bf53626976"><![CDATA[{
            }]]></body>
          </codeblock>
        </property>
        <property name="PopulateNodesFromClient">
          <declaration><![CDATA[public override bool PopulateNodesFromClient]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="209" sc="13" el="211" ec="14">DNNTreeNavigationProvider.cs</location>
            <body hash="40bf11fe4ab5153dec1b2eb55066b8f8"><![CDATA[{
                return Tree.PopulateNodesFromClient;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="213" sc="13" el="215" ec="14">DNNTreeNavigationProvider.cs</location>
            <body hash="c53c7809301c239ae3b0c72b51dece33"><![CDATA[{
                Tree.PopulateNodesFromClient = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="SupportsPopulateOnDemand">
          <declaration><![CDATA[public override bool SupportsPopulateOnDemand]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="53" sc="13" el="55" ec="14">DNNTreeNavigationProvider.cs</location>
            <body hash="f5368e81f663038061ec388beff126aa"><![CDATA[{
                return true;
            }]]></body>
          </codeblock>
        </property>
        <property name="Tree">
          <declaration><![CDATA[public DnnTree Tree]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="WorkImage">
          <declaration><![CDATA[public override string WorkImage]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="85" sc="13" el="87" ec="14">DNNTreeNavigationProvider.cs</location>
            <body hash="3dfaf9292b0bc63861f01fcb15410781"><![CDATA[{
                return Tree.WorkImage;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="89" sc="13" el="91" ec="14">DNNTreeNavigationProvider.cs</location>
            <body hash="1d31de7e9e8a09c5763677e2848c8888"><![CDATA[{
                Tree.WorkImage = value;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
</root>