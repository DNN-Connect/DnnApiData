<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<root file="Dnn.PersonaBar.Library.dll" version="01.01.00" generated="2017-08-10 12:34:52Z" generationTime="7.8119819">
  <namespace name="Dnn.PersonaBar.Library">
    <class name="Constants">
      <declaration><![CDATA[public static class Constants]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".cctor">
          <declaration><![CDATA[static Constants()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="22" sc="9" el="32" ec="72">Constants.cs</location>
            <body hash="472eef2ddab56d0170c1d576acccf01b"><![CDATA[public static readonly TimeSpan ThreeSeconds = TimeSpan.FromSeconds(3);
        public static readonly TimeSpan ThirtySeconds = TimeSpan.FromSeconds(30);
        public static readonly TimeSpan OneMinute = TimeSpan.FromMinutes(1);
        public static readonly TimeSpan FiveMinutes = TimeSpan.FromMinutes(5);
        public static readonly TimeSpan TenMinutes = TimeSpan.FromMinutes(10);
        public static readonly TimeSpan HalfHour = TimeSpan.FromMinutes(30);
        public static readonly TimeSpan OneHour = TimeSpan.FromHours(1);
        public static readonly TimeSpan FourHours = TimeSpan.FromHours(1);
        public static readonly TimeSpan TwelveHours = TimeSpan.FromHours(12);
        public static readonly TimeSpan OneDay = TimeSpan.FromDays(1);
        public static readonly TimeSpan OneWeek = TimeSpan.FromDays(7);]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
        <field name="AdminsRoleName">
          <declaration><![CDATA[public const string AdminsRoleName = "Administrators";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="AvatarHeight">
          <declaration><![CDATA[public const int AvatarHeight = 64;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="AvatarWidth">
          <declaration><![CDATA[public const int AvatarWidth = 64;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="FiveMinutes">
          <declaration><![CDATA[public static readonly TimeSpan FiveMinutes = TimeSpan.FromMinutes(5.0);]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="FourHours">
          <declaration><![CDATA[public static readonly TimeSpan FourHours = TimeSpan.FromHours(1.0);]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="HalfHour">
          <declaration><![CDATA[public static readonly TimeSpan HalfHour = TimeSpan.FromMinutes(30.0);]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="OneDay">
          <declaration><![CDATA[public static readonly TimeSpan OneDay = TimeSpan.FromDays(1.0);]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="OneHour">
          <declaration><![CDATA[public static readonly TimeSpan OneHour = TimeSpan.FromHours(1.0);]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="OneMinute">
          <declaration><![CDATA[public static readonly TimeSpan OneMinute = TimeSpan.FromMinutes(1.0);]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="OneWeek">
          <declaration><![CDATA[public static readonly TimeSpan OneWeek = TimeSpan.FromDays(7.0);]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="PersonaBarModulesPath">
          <declaration><![CDATA[public const string PersonaBarModulesPath = "~/DesktopModules/admin/Dnn.PersonaBar/Modules/";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="PersonaBarRelativePath">
          <declaration><![CDATA[public const string PersonaBarRelativePath = "~/DesktopModules/admin/Dnn.PersonaBar/";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="SharedResources">
          <declaration><![CDATA[public const string SharedResources = "~/DesktopModules/admin/Dnn.PersonaBar//App_LocalResources/SharedResources.resx";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="TenMinutes">
          <declaration><![CDATA[public static readonly TimeSpan TenMinutes = TimeSpan.FromMinutes(10.0);]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ThirtySeconds">
          <declaration><![CDATA[public static readonly TimeSpan ThirtySeconds = TimeSpan.FromSeconds(30.0);]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ThreeSeconds">
          <declaration><![CDATA[public static readonly TimeSpan ThreeSeconds = TimeSpan.FromSeconds(3.0);]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="TwelveHours">
          <declaration><![CDATA[public static readonly TimeSpan TwelveHours = TimeSpan.FromHours(12.0);]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="HttpRequestMessageExtensions">
      <declaration><![CDATA[public static class HttpRequestMessageExtensions]]></declaration>
      <documentation>
        <summary>
 Extends the HttpRequestMessage collection
 </summary>
      </documentation>
      <constructors>
      </constructors>
      <methods>
        <method name="GetCookie">
          <declaration><![CDATA[public static string GetCookie(this HttpRequestMessage request, string cookieName)]]></declaration>
          <documentation>
            <summary>
 Retrieves an individual cookie from the cookies collection
 </summary>
 <param name="request"></param>
 <param name="cookieName"></param>
 <returns></returns></documentation>
          <codeblock>
            <location sl="91" sc="9" el="97" ec="10">HttpRequestMessageExtensions.cs</location>
            <body hash="9ee2cde7e2614accda6d975455e4a1a1"><![CDATA[{
            CookieHeaderValue cookie = request.Headers.GetCookies(cookieName).FirstOrDefault();
            if (cookie != null)
                return cookie[cookieName].Value;

            return null;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetHeader">
          <declaration><![CDATA[public static string GetHeader(this HttpRequestMessage request, string key)]]></declaration>
          <documentation>
            <summary>
 Returns an individual HTTP Header value
 </summary>
 <param name="request"></param>
 <param name="key"></param>
 <returns></returns></documentation>
          <codeblock>
            <location sl="76" sc="9" el="82" ec="10">HttpRequestMessageExtensions.cs</location>
            <body hash="79f8bfd900480cc4b115bbbfee9e2b9b"><![CDATA[{
            IEnumerable<string> keys = null;
            if (!request.Headers.TryGetValues(key, out keys))
                return null;

            return keys.First();
        }]]></body>
          </codeblock>
        </method>
        <method name="GetQueryString">
          <declaration><![CDATA[public static string GetQueryString(this HttpRequestMessage request, string key)]]></declaration>
          <documentation>
            <summary>
 Returns an individual querystring value
 </summary>
 <param name="request"></param>
 <param name="key"></param>
 <returns></returns></documentation>
          <codeblock>
            <location sl="37" sc="9" el="48" ec="10">HttpRequestMessageExtensions.cs</location>
            <body hash="0ea5acc6c2a80cee94aab3e1f9880924"><![CDATA[{
            // IEnumerable<KeyValuePair<string,string>> - right!
            var queryStrings = request.GetQueryNameValuePairs();
            if (queryStrings == null)
                return null;

            var match = queryStrings.FirstOrDefault(kv => string.Compare(kv.Key, key, true) == 0);
            if (string.IsNullOrEmpty(match.Value))
                return null;

            return match.Value;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetQueryStringAsInteger">
          <declaration><![CDATA[public static int GetQueryStringAsInteger(this HttpRequestMessage request, string key)]]></declaration>
          <documentation>
            <summary>
 Returns an individual querystring value as integer.
 </summary>
 <param name="request"></param>
 <param name="key"></param>
 <returns></returns></documentation>
          <codeblock>
            <location sl="57" sc="9" el="67" ec="10">HttpRequestMessageExtensions.cs</location>
            <body hash="04d54a8274919cabbc218d3e05380f81"><![CDATA[{
            // IEnumerable<KeyValuePair<string,string>> - right!
            var value = request.GetQueryString(key);
            int intValue;
            if (!string.IsNullOrEmpty(value) && int.TryParse(value, out intValue))
            {
                return intValue;
            }

            return -1;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetQueryStrings">
          <declaration><![CDATA[public static Dictionary<string, string> GetQueryStrings(this HttpRequestMessage request)]]></declaration>
          <documentation>
            <summary>
 Returns a dictionary of QueryStrings that's easier to work with
 than GetQueryNameValuePairs KevValuePairs collection.

 If you need to pull a few single values use GetQueryString instead.
 </summary>
 <param name="request"></param>
 <returns></returns></documentation>
          <codeblock>
            <location sl="25" sc="9" el="28" ec="10">HttpRequestMessageExtensions.cs</location>
            <body hash="9df294dfc2941cf185dbb79df5dc5d9a"><![CDATA[{
            return request.GetQueryNameValuePairs()
                          .ToDictionary(kv => kv.Key, kv => kv.Value, StringComparer.OrdinalIgnoreCase);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="PersonaBarApiController">
      <declaration><![CDATA[public abstract class PersonaBarApiController : DnnApiController]]></declaration>
      <documentation>
        <summary>
 The base class for persona bar api.
 </summary>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[protected PersonaBarApiController()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="PortalId">
          <declaration><![CDATA[public int PortalId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="10" sc="32" el="10" ec="55">PersonaBarApiController.cs</location>
            <body hash="a1bf437237569da872902854e091814d"><![CDATA[PortalSettings.PortalI]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="ServiceScope">
      <declaration><![CDATA[public enum ServiceScope]]></declaration>
      <documentation>
        <summary>

 </summary>
      </documentation>
      <constructors>
      </constructors>
      <methods>
      </methods>
      <fields>
        <field name="Admin">
          <declaration><![CDATA[public const ServiceScope Admin = 1;]]></declaration>
          <documentation>
            <summary>
 the service only available for admin users.
 </summary>
          </documentation>
        </field>
        <field name="Host">
          <declaration><![CDATA[public const ServiceScope Host = 2;]]></declaration>
          <documentation>
            <summary>
 the service only available for host users.
 </summary>
          </documentation>
        </field>
        <field name="Regular">
          <declaration><![CDATA[public const ServiceScope Regular = 0;]]></declaration>
          <documentation>
            <summary>
 the service available for all users.
 </summary>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="Dnn.PersonaBar.Library.AppEvents">
    <class name="EventsController">
      <declaration><![CDATA[public class EventsController : ServiceLocator<IEventsController, EventsController>, IEventsController]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public EventsController()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
        <constructor name=".cctor">
          <declaration><![CDATA[static EventsController()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="21" sc="9" el="23" ec="64">AppEvents\EventsController.cs</location>
            <body hash="877a09d6982a59dec52e6cd3f899e685"><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof (EventsController));

        private static readonly object LockThis = new object();]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="ApplicationEndEvent">
          <declaration><![CDATA[public void ApplicationEndEvent()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="64" sc="9" el="77" ec="10">AppEvents\EventsController.cs</location>
            <body hash="181ab5cbd3bc26d4c35fef8b658b728d"><![CDATA[{
            GetEventsImplements<IAppEvents>().ForEach(instance =>
            {
                try
                {
                    instance.ApplicationEnd();
                }
                catch (Exception e)
                {
                    Logger.ErrorFormat("{0}.ApplicationEnd threw an exception.  {1}\r\n{2}",
                        instance.GetType().FullName, e.Message, e.StackTrace);
                }
            });
        }]]></body>
          </codeblock>
        </method>
        <method name="ApplicationStartEvent">
          <declaration><![CDATA[public void ApplicationStartEvent()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="38" sc="9" el="61" ec="10">AppEvents\EventsController.cs</location>
            <body hash="1399302e831920621043d175e5260f90"><![CDATA[{
            lock (LockThis)
            {
                if (_isInitialized)
                {
                    throw new InvalidOperationException("ApplicationStartEvent cannot be called more than once");
                }

                _isInitialized = true;
            }

            GetEventsImplements<IAppEvents>().ForEach(instance =>
            {
                try
                {
                    instance.ApplicationBegin();
                }
                catch (Exception e)
                {
                    Logger.ErrorFormat("{0}.ApplicationStart threw an exception.  {1}\r\n{2}",
                        instance.GetType().FullName, e.Message, e.StackTrace);
                }
            });
        }]]></body>
          </codeblock>
        </method>
        <method name="GetAllEventTypes">
          <declaration><![CDATA[private static IEnumerable<Type> GetAllEventTypes<T>() where T : class]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="109" sc="9" el="118" ec="10">AppEvents\EventsController.cs</location>
            <body hash="80c3e5feeed2f6e3e8262554d80dbeee"><![CDATA[{
            var typeLocator = new TypeLocator();
            return typeLocator.GetAllMatchingTypes(
                t => t != null &&
                     t.IsClass &&
                     !t.IsAbstract &&
                     t.IsVisible &&
                     typeof (T).IsAssignableFrom(t) &&
                     (IgnoreVersionMatchCheck(t) || VersionMatched(t)));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetEventsImplements">
          <declaration><![CDATA[private static IEnumerable<T> GetEventsImplements<T>() where T : class]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="GetFactory">
          <declaration><![CDATA[protected override Func<IEventsController> GetFactory()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="29" sc="9" el="31" ec="10">AppEvents\EventsController.cs</location>
            <body hash="79e2b51d43604c88c5ffe6ee851335a8"><![CDATA[{
            return () => new EventsController();
        }]]></body>
          </codeblock>
        </method>
        <method name="IgnoreVersionMatchCheck">
          <declaration><![CDATA[private static bool IgnoreVersionMatchCheck(Type type)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="121" sc="9" el="123" ec="10">AppEvents\EventsController.cs</location>
            <body hash="49825f445c075e86e9a971ae8c860a19"><![CDATA[{
            return type.GetCustomAttributes(true).Any(a => a is IgnoreVersionMatchCheckAttribute);
        }]]></body>
          </codeblock>
        </method>
        <method name="VersionMatched">
          <declaration><![CDATA[private static bool VersionMatched(Type t)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="126" sc="9" el="141" ec="10">AppEvents\EventsController.cs</location>
            <body hash="fa65b880f21f0dd846ca027e7ce188e2"><![CDATA[{
            var currentVersion = Assembly.GetExecutingAssembly().GetName().Version;
            var typeVersion = t.Assembly.GetName().Version;

            var matched = currentVersion.Major == typeVersion.Major &&
                   currentVersion.Minor == typeVersion.Minor &&
                   currentVersion.Build == typeVersion.Build;

            if (!matched)
            {
                Logger.InfoFormat("Type \"{0}\"'s version ({1}) doesn't match current version({2}) so ignored", 
                    t.FullName, typeVersion, currentVersion);
            }

            return matched;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_isInitialized">
          <declaration><![CDATA[private static bool _isInitialized;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="LockThis">
          <declaration><![CDATA[private static readonly object LockThis = new object();]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Logger">
          <declaration><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof(EventsController));]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="IAppEvents">
      <declaration><![CDATA[public interface IAppEvents]]></declaration>
      <documentation>
        <summary>
 This interface defines methods that need to be called at various points during
 the application lifecycle. All modules that need to have any housekeeping applied
 during these events, need to create a concrete class that extends this interface.
 The main application start event will enumerate these (through reflection) and
 call the related methods in these classes
 </summary>
      </documentation>
      <constructors>
      </constructors>
      <methods>
        <method name="ApplicationBegin">
          <declaration><![CDATA[void ApplicationBegin();]]></declaration>
          <documentation>
            <summary>
 Method called after the application starts to perform any required startup actions by the implemetor.
 </summary>
 <remarks>This method must not used multi-threading and must perform it's task as fast as possible.</remarks></documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="ApplicationEnd">
          <declaration><![CDATA[void ApplicationEnd();]]></declaration>
          <documentation>
            <summary>
 Method called before the application stops to perform any required shutdown actions by the implemetor.
 </summary>
 <remarks>This method must not used multi-threading and must perform it's task as fast as possible.</remarks></documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="IEventsController">
      <declaration><![CDATA[public interface IEventsController]]></declaration>
      <documentation>
      </documentation>
      <constructors>
      </constructors>
      <methods>
        <method name="ApplicationEndEvent">
          <declaration><![CDATA[void ApplicationEndEvent();]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="ApplicationStartEvent">
          <declaration><![CDATA[void ApplicationStartEvent();]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="ISkinEvents">
      <declaration><![CDATA[public interface ISkinEvents]]></declaration>
      <documentation>
        <summary>
 This interface defines methods that need to be called in skins lifecycle.
 </summary>
      </documentation>
      <constructors>
      </constructors>
      <methods>
        <method name="Init">
          <declaration><![CDATA[void Init(SkinEventArgs e);]]></declaration>
          <documentation>
            <summary>
 call durgin skin skin event.
 </summary>
 <param name="e"></param></documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="Load">
          <declaration><![CDATA[void Load(SkinEventArgs e);]]></declaration>
          <documentation>
            <summary>
 call durgin skin load event.
 </summary>
 <param name="e"></param></documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="PreRender">
          <declaration><![CDATA[void PreRender(SkinEventArgs e);]]></declaration>
          <documentation>
            <summary>
 call durgin skin pre render event.
 </summary>
 <param name="e"></param></documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="UnLoad">
          <declaration><![CDATA[void UnLoad(SkinEventArgs e);]]></declaration>
          <documentation>
            <summary>
 call durgin skin unload event.
 </summary>
 <param name="e"></param></documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="Dnn.PersonaBar.Library.AppEvents.Attributes">
    <class name="IgnoreVersionMatchCheckAttribute">
      <declaration><![CDATA[public class IgnoreVersionMatchCheckAttribute : Attribute]]></declaration>
      <documentation>
        <summary>
 Attribute to be used to decorate IAppLifecycleEvent implementors.
 This will ignore the version match check that is performed to avoid load IAppLifecycleEvent implementors
 on assembly with a version different from the version of Evoq.Library
 </summary>
 <remarks>This has been added as workaround for microservices module and a jira (CONTENT-6958) has been
 created to review if the version match check can be removed in the future</remarks></documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public IgnoreVersionMatchCheckAttribute()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="Dnn.PersonaBar.Library.Attributes">
    <class name="AdvancedPermissionAttribute">
      <declaration><![CDATA[public class AdvancedPermissionAttribute : AuthorizeAttributeBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public AdvancedPermissionAttribute()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="GetMenuByIdentifier">
          <declaration><![CDATA[private MenuItem GetMenuByIdentifier()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="37" sc="9" el="44" ec="10">Attributes\AdvancedPermissionAttribute.cs</location>
            <body hash="18564176f58799355c4f7aecb3ff025e"><![CDATA[{
            if (string.IsNullOrEmpty(MenuName))
            {
                return null;
            }

            return PersonaBarRepository.Instance.GetMenuItem(MenuName);
        }]]></body>
          </codeblock>
        </method>
        <method name="IsAuthorized">
          <declaration><![CDATA[public override bool IsAuthorized(AuthFilterContext context)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="24" sc="9" el="34" ec="10">Attributes\AdvancedPermissionAttribute.cs</location>
            <body hash="d904173f2c11fe0c8f13bc132ee897c3"><![CDATA[{
            var menuItem = GetMenuByIdentifier();
            var portalSettings = PortalSettings.Current;

            if (menuItem == null || portalSettings == null)
            {
                return false;
            }

            return MenuPermissionController.HasMenuPermission(portalSettings.PortalId, menuItem, Permission);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="MenuName">
          <declaration><![CDATA[public string MenuName]]></declaration>
          <documentation>
            <summary>
 The menu identifier.
 </summary>
          </documentation>
          <codeblock>
            <location sl="16" sc="34" el="16" ec="38">Attributes\AdvancedPermissionAttribute.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="16" sc="39" el="16" ec="43">Attributes\AdvancedPermissionAttribute.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Permission">
          <declaration><![CDATA[public string Permission]]></declaration>
          <documentation>
            <summary>
 The permission key.
 </summary>
          </documentation>
          <codeblock>
            <location sl="21" sc="36" el="21" ec="40">Attributes\AdvancedPermissionAttribute.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="21" sc="41" el="21" ec="45">Attributes\AdvancedPermissionAttribute.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="MenuPermissionAttribute">
      <declaration><![CDATA[public class MenuPermissionAttribute : AuthorizeAttributeBase, IOverrideDefaultAuthLevel]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public MenuPermissionAttribute()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="GetMenuByIdentifier">
          <declaration><![CDATA[private MenuItem GetMenuByIdentifier()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="96" sc="9" el="103" ec="10">Attributes\MenuPermissionAttribute.cs</location>
            <body hash="18564176f58799355c4f7aecb3ff025e"><![CDATA[{
            if (string.IsNullOrEmpty(MenuName))
            {
                return null;
            }

            return PersonaBarRepository.Instance.GetMenuItem(MenuName);
        }]]></body>
          </codeblock>
        </method>
        <method name="IsAuthorized">
          <declaration><![CDATA[public override bool IsAuthorized(AuthFilterContext context)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="34" sc="9" el="93" ec="10">Attributes\MenuPermissionAttribute.cs</location>
            <body hash="1afe2a09faa4f7d9648dfe80a7dd0ab1"><![CDATA[{
            var authenticated = Thread.CurrentPrincipal.Identity.IsAuthenticated;
            var portalSettings = PortalSettings.Current;
            var currentUser = UserController.Instance.GetCurrentUserInfo();

            var administratorRoleName = Constants.AdminsRoleName;
            if (portalSettings != null)
            {
                administratorRoleName = portalSettings.AdministratorRoleName;
            }

            var isHost = currentUser.IsSuperUser;
            var isAdmin = currentUser.IsInRole(administratorRoleName);
            var isRegular = currentUser.UserID > 0;

            if (authenticated && isHost)
            {
                return true;
            }

            //when there have excluded roles defined, and current user in the role. the service call will failed.
            if (!string.IsNullOrEmpty(Exclude))
            {
                foreach (var roleName in Exclude.Split(';'))
                {
                    var cleanRoleName = roleName.Trim();
                    if (!string.IsNullOrEmpty(cleanRoleName))
                    {
                        if (currentUser.IsInRole(cleanRoleName))
                        {
                            return false;
                        }
                    }
                }
            }

            var menuItem = GetMenuByIdentifier();
            if (menuItem != null && portalSettings != null)
            {
                //if supported extension defined, then will check the menu permission.
                return PersonaBarController.Instance.IsVisible(portalSettings, portalSettings.UserInfo, menuItem);
            }

            //when menu identifier not defined, will check the service scope permission.
            switch (Scope)
            {
                case ServiceScope.Admin:
                    return authenticated && isAdmin;
                case ServiceScope.Regular:
                    if (portalSettings != null)
                    {
                        //if user have ability on any persona bar menus, then need allow to request api.
                        return PersonaBarController.Instance.GetMenu(portalSettings, portalSettings.UserInfo).AllItems.Count > 0;
                    }
                    
                    return isAdmin || isRegular;
                default:
                    return false;
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="Exclude">
          <declaration><![CDATA[public string Exclude]]></declaration>
          <documentation>
            <summary>
 The Roles which need exclude from permissions, when user in the role will receive 401 exception.
 If need set multiple roles, put semicolon(;) between role names.
 </summary>
          </documentation>
          <codeblock>
            <location sl="31" sc="33" el="31" ec="37">Attributes\MenuPermissionAttribute.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="31" sc="38" el="31" ec="42">Attributes\MenuPermissionAttribute.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="MenuName">
          <declaration><![CDATA[public string MenuName]]></declaration>
          <documentation>
            <summary>
 The menu identifier which decide the api whether can requested.
 For example, if this value set to "Pages", the user who have access to pages module can request api.
 Users who don't have permissions to Pages module, will not available to request the api.
 </summary>
          </documentation>
          <codeblock>
            <location sl="25" sc="34" el="25" ec="38">Attributes\MenuPermissionAttribute.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="25" sc="39" el="25" ec="43">Attributes\MenuPermissionAttribute.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Scope">
          <declaration><![CDATA[public ServiceScope Scope]]></declaration>
          <documentation>
            <summary>
 The default service scope when <see cref="P:Dnn.PersonaBar.Library.Attributes.MenuPermissionAttribute.MenuName" /> is not defined.
 </summary>
          </documentation>
          <codeblock>
            <location sl="18" sc="37" el="18" ec="41">Attributes\MenuPermissionAttribute.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="18" sc="42" el="18" ec="46">Attributes\MenuPermissionAttribute.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="Dnn.PersonaBar.Library.Common">
    <class name="IocUtil">
      <declaration><![CDATA[public class IocUtil]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public IocUtil()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
        <constructor name=".cctor">
          <declaration><![CDATA[static IocUtil()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="17" sc="9" el="17" ec="97">Common\IocUtil.cs</location>
            <body hash="fa44cac88af62d1801cfa72db7287484"><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof (IocUtil))]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="GetInstance">
          <declaration><![CDATA[public static TContract GetInstance<TContract>(string name = null) where TContract : class]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="96" sc="9" el="110" ec="10">Common\IocUtil.cs</location>
            <body hash="db5a94a631dd4db4d1d760352dfcfed8"><![CDATA[{
            if (!string.IsNullOrEmpty(name))
            {
                name += "." + typeof(TContract).FullName;
            }

            var instance = GetInstanceLocal<TContract>(name);
            if (instance == null)
            {
                Logger.WarnFormat("No instance of type '{0}' and name '{1}' is registered in the IOC container.",
                                  typeof (TContract).FullName, name ?? "<empty>");
            }

            return instance;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetInstanceContracts">
          <declaration><![CDATA[public static IEnumerable<TContract> GetInstanceContracts<TContract>() where TContract : class]]></declaration>
          <documentation>
            <summary>
 Retrieves a concrete implementation of the given interface/contract.
 </summary>
 <typeparam name="TContract">Contract interface for the component to get a concrete implementation of.</typeparam>
 <returns>A concrete implementation of the given interface (or null if none is registered).</returns></documentation>
          <codeblock>
            <location sl="127" sc="9" el="130" ec="10">Common\IocUtil.cs</location>
            <body hash="b6bb6caf13158ccf53a8397f85cda752"><![CDATA[{
            var instances = ComponentFactory.GetComponents<TContract>();
            return instances.Values;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetInstanceLocal">
          <declaration><![CDATA[private static TContract GetInstanceLocal<TContract>(string name) where TContract : class]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="114" sc="9" el="118" ec="10">Common\IocUtil.cs</location>
            <body hash="dd3a9c932a3c232f477718bfcf97b6fa"><![CDATA[{
            return string.IsNullOrEmpty(name)
                ? ComponentFactory.GetComponent<TContract>()
                : ComponentFactory.GetComponent<TContract>(name);
        }]]></body>
          </codeblock>
        </method>
        <method name="RegisterComponent">
          <declaration><![CDATA[public static bool RegisterComponent<TContract, TConcrete>(string name = null) where TContract : class where TConcrete : class, new()]]></declaration>
          <documentation>
            <summary>
 Register a component into the IOC container for later instantiation.
 </summary>
 <typeparam name="TContract">Contract interface for the component to registr with the IOC container.</typeparam>
 <typeparam name="TConcrete">Concrete implementation class (must have apublic default constructor).</typeparam>
 <param name="name">Optional name for the contract. Useful when more than once class implements the same contract.</param>
 <returns>True if the component was created; false if it was already created in the system.</returns>
 <remarks>This helper creates a singleton instance for the contract.</remarks></documentation>
          <codeblock>
            <location sl="32" sc="9" el="57" ec="10">Common\IocUtil.cs</location>
            <body hash="957e4968bf8cd9032e57e275a8ef94c2"><![CDATA[{
            try
            {
                if (!string.IsNullOrEmpty(name))
                {
                    name += "." + typeof (TContract).FullName;
                }

                var component = GetInstanceLocal<TContract>(name);

                if (component != null)
                    return false;

                if (string.IsNullOrEmpty(name))
                    ComponentFactory.RegisterComponent<TContract, TConcrete>();
                else
                    ComponentFactory.RegisterComponent<TContract, TConcrete>(name);

                return true;
            }
            catch (Exception e)
            {
                Logger.Error(e);
                return false;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="RegisterComponentInstance">
          <declaration><![CDATA[public static bool RegisterComponentInstance<TContract>(string name, object instance) where TContract : class]]></declaration>
          <documentation>
            <summary>
 Register a specific instance into the IOC container for later use.
 </summary>
 <typeparam name="TContract">Contract interface for the component to registr with the IOC container.</typeparam>
 <param name="name">Name for the contract. Useful when more than once class implements the same contract. Pass as null when unused.</param>
 <param name="instance">Concrete implementation class (must have apublic default constructor).</param>
 <returns>True if the component was created; false if it was already created in the system.</returns></documentation>
          <codeblock>
            <location sl="68" sc="9" el="92" ec="10">Common\IocUtil.cs</location>
            <body hash="673671df2d8825288ac0c2361c471a1c"><![CDATA[{
            try
            {
                if (!string.IsNullOrEmpty(name))
                {
                    name += "." + typeof(TContract).FullName;
                }

                var component = GetInstanceLocal<TContract>(name);
                if (component != null)
                    return false;

                if (string.IsNullOrEmpty(name))
                    ComponentFactory.RegisterComponentInstance<TContract>(instance);
                else
                    ComponentFactory.RegisterComponentInstance<TContract>(name, instance);

                return true;
            }
            catch (Exception e)
            {
                Logger.Error(e);
                return false;
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="Logger">
          <declaration><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof(IocUtil));]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="Utilities">
      <declaration><![CDATA[public class Utilities]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public Utilities()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
        <constructor name=".cctor">
          <declaration><![CDATA[static Utilities()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="47" sc="9" el="48" ec="118">Common\Utilities.cs</location>
            <body hash="d837af70e7c8c2bac4644537fa2d049d"><![CDATA[private static readonly Regex HtmlEntitiesPatternRegex =
            new Regex(HtmlEntitiesPattern, RegexOptions.Compiled | RegexOptions.IgnoreCase, TimeSpan.FromSeconds(2));]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="FixDoublEntityEncoding">
          <declaration><![CDATA[public static string FixDoublEntityEncoding(string document)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="51" sc="9" el="55" ec="10">Common\Utilities.cs</location>
            <body hash="2b0e2428e9adf8700ccd66acc70f1f59"><![CDATA[{
            return string.IsNullOrEmpty(document)
                       ? document
                       : HtmlEntitiesPatternRegex.Replace(document, "&$1;");
        }]]></body>
          </codeblock>
        </method>
        <method name="GetProfileAvatar">
          <declaration><![CDATA[public static string GetProfileAvatar(UserInfo user, int width = 64, int height = 64, bool showSuperUsers = true)]]></declaration>
          <documentation>
            <summary>
 Returns a relative URL for the user profile image while removing that of the deleted and super users
 </summary>
 <param name="user">user info</param>
 <param name="width">width in pixel</param>
 <param name="height">height in pixel</param>
 <param name="showSuperUsers">true if want show super users user profile picture, false otherwise</param>
 <returns>relative user profile picture url</returns>
 <returns></returns></documentation>
          <codeblock>
            <location sl="27" sc="9" el="30" ec="10">Common\Utilities.cs</location>
            <body hash="045f441300f6be06ea844e0cc64498f9"><![CDATA[{
            var userId = user != null && user.UserID > 0 && !user.IsDeleted && (showSuperUsers || !user.IsSuperUser) ? user.UserID : 0;
            return UserController.Instance.GetUserProfilePictureUrl(userId, width, height);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetProfileAvatar">
          <declaration><![CDATA[public static string GetProfileAvatar(int userId)]]></declaration>
          <documentation>
            <summary>
 Get User's standard Profile avatar. The Url is resolved to current portal
 </summary>
 <param name="userId">user Id</param>
 <returns>user profile picture url</returns></documentation>
          <codeblock>
            <location sl="38" sc="9" el="41" ec="10">Common\Utilities.cs</location>
            <body hash="e74414a2953ba3702b83cb8ad198ce0d"><![CDATA[{
            var url = UserController.Instance.GetUserProfilePictureUrl(userId, Constants.AvatarWidth, Constants.AvatarHeight);
            return Globals.ResolveUrl(url);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="HtmlEntitiesPattern">
          <declaration><![CDATA[private const string HtmlEntitiesPattern = "&amp;([a-z]{2,10}|#\\d{1,10}|#x[0-9a-f]{1,8});";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="HtmlEntitiesPatternRegex">
          <declaration><![CDATA[private static readonly Regex HtmlEntitiesPatternRegex = new Regex("&amp;([a-z]{2,10}|#\\d{1,10}|#x[0-9a-f]{1,8});", RegexOptions.IgnoreCase | RegexOptions.Compiled, TimeSpan.FromSeconds(2.0));]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="Dnn.PersonaBar.Library.Containers">
    <class name="IPersonaBarContainer">
      <declaration><![CDATA[public interface IPersonaBarContainer]]></declaration>
      <documentation>
        <summary>
 Persona Bar Container.
 </summary>
      </documentation>
      <constructors>
      </constructors>
      <methods>
        <method name="FilterMenu">
          <declaration><![CDATA[void FilterMenu(PersonaBarMenu menu);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="GetConfiguration">
          <declaration><![CDATA[IDictionary<string, object> GetConfiguration();]]></declaration>
          <documentation>
            <summary>
 Get Persona Bar Settings.
 </summary>
 <returns></returns></documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="Initialize">
          <declaration><![CDATA[void Initialize(UserControl personaBarControl);]]></declaration>
          <documentation>
            <summary>
 Initialize the persona bar container.
 </summary>
 <param name="personaBarControl">The Persona Bar Container control.</param></documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="Visible">
          <declaration><![CDATA[bool Visible]]></declaration>
          <documentation>
            <summary>
 Indicate whether persona bar is available.
 </summary>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="PersonaBarContainer">
      <declaration><![CDATA[public class PersonaBarContainer : IPersonaBarContainer]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public PersonaBarContainer()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="ClearInstance">
          <declaration><![CDATA[public static void ClearInstance()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="47" sc="9" el="49" ec="10">Containers\PersonaBarContainer.cs</location>
            <body hash="cf92900df6a2b9620c0ca74a1fe0a5ca"><![CDATA[{
            _instance = null;
        }]]></body>
          </codeblock>
        </method>
        <method name="FilterMenu">
          <declaration><![CDATA[public virtual void FilterMenu(PersonaBarMenu menu)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="70" sc="9" el="72" ec="10">Containers\PersonaBarContainer.cs</location>
            <body hash="4a8f06184b6087940b8e4519251d0924"><![CDATA[{
            
        }]]></body>
          </codeblock>
        </method>
        <method name="GetBeaconUrl">
          <declaration><![CDATA[private static string GetBeaconUrl()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="111" sc="9" el="115" ec="10">Containers\PersonaBarContainer.cs</location>
            <body hash="5e7d6c81ec71f206b39893e66eeb16c3"><![CDATA[{
            var beaconService = BeaconService.Instance;
            var user = UserController.Instance.GetCurrentUserInfo();
            return beaconService.GetBeaconEndpoint() + beaconService.GetBeaconQuery(user);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetConfigration">
          <declaration><![CDATA[private IDictionary<string, object> GetConfigration(PortalSettings portalSettings)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="79" sc="9" el="108" ec="10">Containers\PersonaBarContainer.cs</location>
            <body hash="9f9e173d5e6c79ae3ec70fdc2fad7910"><![CDATA[{
            var settings = new Dictionary<string, object>();
            var user = portalSettings.UserInfo;
            var portalId = portalSettings.PortalId;

            var menuStructure = PersonaBarController.Instance.GetMenu(portalSettings, user);

            settings.Add("applicationPath", Globals.ApplicationPath);
            settings.Add("buildNumber", Host.CrmVersion.ToString(CultureInfo.InvariantCulture));
            settings.Add("userId", user.UserID);
            settings.Add("avatarUrl", Globals.ResolveUrl(Utilities.GetProfileAvatar(user)));
            settings.Add("culture", Thread.CurrentThread.CurrentUICulture.Name);
            settings.Add("logOff", Globals.NavigateURL("Logoff"));
            settings.Add("visible", Visible);
            settings.Add("userMode", portalSettings.UserMode.ToString());
            settings.Add("userSettings", PersonaBarUserSettingsController.Instance.GetPersonaBarUserSettings());
            settings.Add("menuStructure", JObject.FromObject(menuStructure));
            settings.Add("sku", DotNetNukeContext.Current.Application.SKU);
            settings.Add("debugMode", HttpContext.Current != null && HttpContext.Current.IsDebuggingEnabled);
            settings.Add("portalId", portalId);
            if (BeaconService.Instance.IsBeaconEnabledForPersonaBar())
            {
                settings.Add("beaconUrl", GetBeaconUrl());
            }

            var customModules = new List<string>() { "serversummary" };
            settings.Add("customModules", customModules);

            return settings;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetConfiguration">
          <declaration><![CDATA[public virtual IDictionary<string, object> GetConfiguration()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="63" sc="9" el="67" ec="10">Containers\PersonaBarContainer.cs</location>
            <body hash="2bef6ce218a0aba778790e9c3840144c"><![CDATA[{
            var portalSettings = PortalSettings.Current;

            return GetConfigration(portalSettings);
        }]]></body>
          </codeblock>
        </method>
        <method name="Initialize">
          <declaration><![CDATA[public virtual void Initialize(UserControl personaBarControl)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="58" sc="9" el="60" ec="10">Containers\PersonaBarContainer.cs</location>
            <body hash="4a8f06184b6087940b8e4519251d0924"><![CDATA[{
            
        }]]></body>
          </codeblock>
        </method>
        <method name="SetInstance">
          <declaration><![CDATA[public static void SetInstance(IPersonaBarContainer instance, bool overwrite = false)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="39" sc="9" el="44" ec="10">Containers\PersonaBarContainer.cs</location>
            <body hash="22afa4dc8749fa435aa37b0f5919d87c"><![CDATA[{
            if (_instance == null || overwrite)
            {
                _instance = instance;
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_instance">
          <declaration><![CDATA[private static IPersonaBarContainer _instance;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="Instance">
          <declaration><![CDATA[public static IPersonaBarContainer Instance]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="28" sc="13" el="35" ec="14">Containers\PersonaBarContainer.cs</location>
            <body hash="a7a0e4afea34d9107bd34dc3a19dcdf8"><![CDATA[{
                if (_instance == null)
                {
                    _instance = new PersonaBarContainer();
                }

                return _instance;
            }]]></body>
          </codeblock>
        </property>
        <property name="Visible">
          <declaration><![CDATA[public virtual bool Visible]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="55" sc="40" el="55" ec="44">Containers\PersonaBarContainer.cs</location>
            <body hash="f8354de67d79a99e880000c5f3cae57d"><![CDATA[tru]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="Dnn.PersonaBar.Library.Controllers">
    <class name="IExtensionController">
      <declaration><![CDATA[public interface IExtensionController]]></declaration>
      <documentation>
      </documentation>
      <constructors>
      </constructors>
      <methods>
        <method name="GetPath">
          <declaration><![CDATA[string GetPath(PersonaBarExtension extension);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="GetSettings">
          <declaration><![CDATA[IDictionary<string, object> GetSettings(PersonaBarExtension extension);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="Visible">
          <declaration><![CDATA[bool Visible(PersonaBarExtension extension);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="IMenuItemController">
      <declaration><![CDATA[public interface IMenuItemController]]></declaration>
      <documentation>
      </documentation>
      <constructors>
      </constructors>
      <methods>
        <method name="GetSettings">
          <declaration><![CDATA[IDictionary<string, object> GetSettings(MenuItem menuItem);]]></declaration>
          <documentation>
            <summary>
 get menu settings.
 </summary>
 <param name="menuItem"></param>
 <returns></returns></documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="UpdateParameters">
          <declaration><![CDATA[void UpdateParameters(MenuItem menuItem);]]></declaration>
          <documentation>
            <summary>
 Update menu item parameters.
 </summary>
 <param name="menuItem"></param></documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="Visible">
          <declaration><![CDATA[bool Visible(MenuItem menuItem);]]></declaration>
          <documentation>
            <summary>
 whether the menu item visible in current context.
 </summary>
 <param name="menuItem"></param>
 <returns></returns></documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="IPersonaBarController">
      <declaration><![CDATA[public interface IPersonaBarController]]></declaration>
      <documentation>
        <summary>
 Interface responsible to manage the PersonaBar structure by User's Roles and Sku
 </summary>
      </documentation>
      <constructors>
      </constructors>
      <methods>
        <method name="GetMenu">
          <declaration><![CDATA[PersonaBarMenu GetMenu(PortalSettings portalSettings, UserInfo userInfo);]]></declaration>
          <documentation>
            <summary>
 Gets the menu structure of the persona bar
 </summary>
 <param name="portalSettings"></param>
 <param name="userInfo">the user that will be used to filter the menu</param>
 <returns>Persona bar menu structure for the user</returns></documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="IsVisible">
          <declaration><![CDATA[bool IsVisible(PortalSettings portalSettings, UserInfo user, MenuItem menuItem);]]></declaration>
          <documentation>
            <summary>
 Whether the menu item is visible.
 </summary>
 <param name="portalSettings">Portal Settings.</param>
 <param name="user">User Info.</param>
 <param name="menuItem">The menu item.</param>
 <returns></returns></documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="IPersonaBarUserSettingsController">
      <declaration><![CDATA[public interface IPersonaBarUserSettingsController]]></declaration>
      <documentation>
      </documentation>
      <constructors>
      </constructors>
      <methods>
        <method name="GetPersonaBarUserSettings">
          <declaration><![CDATA[UserSettings GetPersonaBarUserSettings();]]></declaration>
          <documentation>
            <summary>
 Gets the PersonaBar user settings
 </summary>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="UpdatePersonaBarUserSettings">
          <declaration><![CDATA[void UpdatePersonaBarUserSettings(UserSettings settings, int userId, int portalId);]]></declaration>
          <documentation>
            <summary>
 Updates the PersonaBar user settings
 </summary>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="PersonaBarController">
      <declaration><![CDATA[public class PersonaBarController : ServiceLocator<IPersonaBarController, PersonaBarController>, IPersonaBarController]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public PersonaBarController()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="28" sc="9" el="31" ec="10">Controllers\PersonaBarController.cs</location>
            <body hash="3c484abb68712b7205f5c9e3ffbd0940"><![CDATA[public PersonaBarController()
        {
            _personaBarRepository = PersonaBarRepository.Instance;
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".cctor">
          <declaration><![CDATA[static PersonaBarController()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="24" sc="9" el="24" ec="107">Controllers\PersonaBarController.cs</location>
            <body hash="8c6a03d4d659a4566db0732f8cf9848f"><![CDATA[private static readonly DnnLogger Logger = DnnLogger.GetClassLogger(typeof(PersonaBarController))]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="AddPermissions">
          <declaration><![CDATA[private void AddPermissions(MenuItem menuItem, IDictionary<string, object> settings)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="121" sc="9" el="149" ec="10">Controllers\PersonaBarController.cs</location>
            <body hash="ffa3cfce20b3dd73c4ed0540592d733f"><![CDATA[{
            var user = UserController.Instance.GetCurrentUserInfo();
            var portalSettings = PortalSettings.Current;
            if (!settings.ContainsKey("isAdmin") && portalSettings != null)
            {
                settings.Add("isAdmin", user.IsInRole(portalSettings.AdministratorRoleName));
            }

            if (!settings.ContainsKey("isHost"))
            {
                settings.Add("isHost", user.IsSuperUser);
            }

            if (!settings.ContainsKey("permissions") && portalSettings != null)
            {
                var menuPermissions = MenuPermissionController.GetPermissions(menuItem.MenuId)
                    .Where(p => p.MenuId == menuItem.MenuId);
                var portalId = portalSettings.PortalId;
                var permissions = new Dictionary<string, bool>();
                foreach (var permission in menuPermissions)
                {
                    var key = permission.PermissionKey;
                    var hasPermission = MenuPermissionController.HasMenuPermission(portalId, menuItem, key);
                    permissions.Add(key, hasPermission);
                }

                settings.Add("permissions", permissions);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetFactory">
          <declaration><![CDATA[protected override Func<IPersonaBarController> GetFactory()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="175" sc="9" el="177" ec="10">Controllers\PersonaBarController.cs</location>
            <body hash="fbc771dcf0d471583891bcd94748906d"><![CDATA[{
            return () => new PersonaBarController();
        }]]></body>
          </codeblock>
        </method>
        <method name="GetMenu">
          <declaration><![CDATA[public PersonaBarMenu GetMenu(PortalSettings portalSettings, UserInfo user)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="34" sc="9" el="49" ec="10">Controllers\PersonaBarController.cs</location>
            <body hash="0ee2e52a0e77a89157acf23438237613"><![CDATA[{
            try
            {
                var personaBarMenu = _personaBarRepository.GetMenu();
                var filteredMenu = new PersonaBarMenu();
                GetPersonaBarMenuWithPermissionCheck(portalSettings, user, filteredMenu.MenuItems, personaBarMenu.MenuItems);

                PersonaBarContainer.Instance.FilterMenu(filteredMenu);
                return filteredMenu;
            }
            catch (Exception e)
            {
                DotNetNuke.Services.Exceptions.Exceptions.LogException(e);
                return new PersonaBarMenu();
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetMenuItemController">
          <declaration><![CDATA[private IMenuItemController GetMenuItemController(MenuItem menuItem)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="152" sc="9" el="172" ec="10">Controllers\PersonaBarController.cs</location>
            <body hash="3ac5627747fe794a701f71249d8c7f09"><![CDATA[{
            var identifier = menuItem.Identifier;
            var controller = menuItem.Controller;

            if (string.IsNullOrEmpty(controller))
            {
                return null;
            }

            try
            {
                var cacheKey = $"PersonaBarMenuController_{identifier}";
                return Reflection.CreateObject(controller, cacheKey) as IMenuItemController;
            }
            catch (Exception ex)
            {
                Logger.Error(ex);
                return null;
            }
            
        }]]></body>
          </codeblock>
        </method>
        <method name="GetMenuSettings">
          <declaration><![CDATA[private string GetMenuSettings(MenuItem menuItem)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="113" sc="9" el="118" ec="10">Controllers\PersonaBarController.cs</location>
            <body hash="38fc8b81952890e6656d158929a67901"><![CDATA[{
            var menuController = GetMenuItemController(menuItem);
            var settings = menuController?.GetSettings(menuItem) ?? new Dictionary<string, object>();
            AddPermissions(menuItem, settings);
            return JsonConvert.SerializeObject(settings);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPersonaBarMenuWithPermissionCheck">
          <declaration><![CDATA[private bool GetPersonaBarMenuWithPermissionCheck(PortalSettings portalSettings, UserInfo user, IList<MenuItem> filterItems, IList<MenuItem> menuItems)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="67" sc="9" el="104" ec="10">Controllers\PersonaBarController.cs</location>
            <body hash="b29916267a80d251d1fcf7c118e05687"><![CDATA[{
            var menuFiltered = false;
            foreach (var menuItem in menuItems)
            {
                if (!IsVisible(portalSettings, user, menuItem))
                {
                    menuFiltered = true;
                    continue;
                }

                var cloneItem = new MenuItem()
                {
                    MenuId = menuItem.MenuId,
                    Identifier = menuItem.Identifier,
                    ModuleName = menuItem.ModuleName,
                    FolderName = menuItem.FolderName,
                    Controller = menuItem.Controller,
                    ResourceKey = menuItem.ResourceKey,
                    Path = menuItem.Path,
                    Link = menuItem.Link,
                    CssClass = menuItem.CssClass,
                    AllowHost = menuItem.AllowHost,
                    Order = menuItem.Order,
                    ParentId = menuItem.ParentId
                };
                
                UpdateParamters(cloneItem);
                cloneItem.Settings = GetMenuSettings(menuItem);

                var filtered = GetPersonaBarMenuWithPermissionCheck(portalSettings, user, cloneItem.Children, menuItem.Children);
                if (!filtered || cloneItem.Children.Count > 0)
                {
                    filterItems.Add(cloneItem);
                }
            }

            return menuFiltered;
        }]]></body>
          </codeblock>
        </method>
        <method name="IsVisible">
          <declaration><![CDATA[public bool IsVisible(PortalSettings portalSettings, UserInfo user, MenuItem menuItem)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="52" sc="9" el="64" ec="10">Controllers\PersonaBarController.cs</location>
            <body hash="a82a097c37b56096af1b806a49f366eb"><![CDATA[{
            var visible = menuItem.Enabled
                   && !(user.IsSuperUser && !menuItem.AllowHost)
                   && MenuPermissionController.CanView(portalSettings.PortalId, menuItem);

            if (visible)
            {
                var menuController = GetMenuItemController(menuItem);
                visible = menuController == null || menuController.Visible(menuItem);
            }

            return visible;
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateParamters">
          <declaration><![CDATA[private void UpdateParamters(MenuItem menuItem)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="107" sc="9" el="110" ec="10">Controllers\PersonaBarController.cs</location>
            <body hash="43213d7a0d12fa8fa0907cac4ca10b9d"><![CDATA[{
            var menuController = GetMenuItemController(menuItem);
            menuController?.UpdateParameters(menuItem);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_personaBarRepository">
          <declaration><![CDATA[private readonly IPersonaBarRepository _personaBarRepository;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Logger">
          <declaration><![CDATA[private static readonly DnnLogger Logger = DnnLogger.GetClassLogger(typeof(PersonaBarController));]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="PersonaBarUserSettingsController">
      <declaration><![CDATA[public class PersonaBarUserSettingsController : ServiceLocator<IPersonaBarUserSettingsController, PersonaBarUserSettingsController>, IPersonaBarUserSettingsController]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public PersonaBarUserSettingsController()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="FixDate">
          <declaration><![CDATA[private static DateTime FixDate(DateTime date)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="64" sc="9" el="71" ec="10">Controllers\PersonaBarUserSettingsController.cs</location>
            <body hash="ce261971e69a2a73c85df162f4ea76df"><![CDATA[{
            if (date == DateTime.MinValue || date == DateTime.MaxValue)
            {
                return DateTime.Today;
            }

            return date;
        }]]></body>
          </codeblock>
        </method>
        <method name="FixUserSettingsDates">
          <declaration><![CDATA[private static void FixUserSettingsDates(UserSettings userSettings)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="55" sc="9" el="61" ec="10">Controllers\PersonaBarUserSettingsController.cs</location>
            <body hash="3107999d145697e2cf49756f12f917af"><![CDATA[{
            if (userSettings != null)
            {
                userSettings.StartDate = FixDate(userSettings.StartDate);
                userSettings.EndDate = FixDate(userSettings.EndDate);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetDefaultSettings">
          <declaration><![CDATA[private static UserSettings GetDefaultSettings()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="41" sc="9" el="52" ec="10">Controllers\PersonaBarUserSettingsController.cs</location>
            <body hash="23ebf8a58e74116b9dad748578049557"><![CDATA[{
            return new UserSettings
                {
                    Period = "Week", //TODO Set Default AnalyticPeriod
                    ComparativeTerm = "1 w",
                    ExpandPersonaBar = false,
                    ExpandTasksPane = true,
                    Legends = new string[] {},
                    StartDate = DateTime.Today,
                    EndDate = DateTime.Today
                };
        }]]></body>
          </codeblock>
        </method>
        <method name="GetFactory">
          <declaration><![CDATA[protected override Func<IPersonaBarUserSettingsController> GetFactory()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="76" sc="9" el="78" ec="10">Controllers\PersonaBarUserSettingsController.cs</location>
            <body hash="d57dc3f632267957e517ee5f2c2d9ccc"><![CDATA[{
            return () => new PersonaBarUserSettingsController();
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPersonaBarUserSettings">
          <declaration><![CDATA[public UserSettings GetPersonaBarUserSettings()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="31" sc="9" el="35" ec="10">Controllers\PersonaBarUserSettingsController.cs</location>
            <body hash="328b9757f87bab5d6e124255b5dd298e"><![CDATA[{
            var settings = (UserSettings) Personalization.GetProfile(ContainerName, UserSettingsKey);
            FixUserSettingsDates(settings);
            return settings ?? GetDefaultSettings();
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdatePersonaBarUserSettings">
          <declaration><![CDATA[public void UpdatePersonaBarUserSettings(UserSettings settings, int userId, int portalId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="22" sc="9" el="28" ec="10">Controllers\PersonaBarUserSettingsController.cs</location>
            <body hash="c5876a033fccc7d2e6af792b4891d326"><![CDATA[{
            var controller = new PersonalizationController();
            var personalizationInfo = controller.LoadProfile(userId, portalId);
            FixUserSettingsDates(settings);
            Personalization.SetProfile(personalizationInfo, ContainerName, UserSettingsKey, settings);
            controller.SaveProfile(personalizationInfo);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="ContainerName">
          <declaration><![CDATA[private const string ContainerName = "AdminPersonaBar";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="UserSettingsKey">
          <declaration><![CDATA[private const string UserSettingsKey = "UserSettings";]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="TabsController">
      <declaration><![CDATA[public class TabsController]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public TabsController()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="ApplySort">
          <declaration><![CDATA[private static IEnumerable<TabDto> ApplySort(IEnumerable<TabDto> items, int sortOrder)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="446" sc="9" el="456" ec="10">Controllers\TabsController.cs</location>
            <body hash="67de9d3be00ec455ca85b31e22f35f57"><![CDATA[{
            switch (sortOrder)
            {
                case 1: // sort by a-z
                    return items.OrderBy(item => item.Name).ToList();
                case 2: // sort by z-a
                    return items.OrderByDescending(item => item.Name).ToList();
                default: // no sort
                    return items;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="FilterTabsByRole">
          <declaration><![CDATA[private List<int> FilterTabsByRole(IList<TabInfo> tabs, string roles, bool disabledNotSelectable)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="228" sc="9" el="252" ec="10">Controllers\TabsController.cs</location>
            <body hash="401dce979de33fa1f874fafe16f5b06b"><![CDATA[{
            var filterTabs = new List<int>();
            if (!string.IsNullOrEmpty(roles))
            {
                var roleList = roles.Split(new[] {';'}, StringSplitOptions.RemoveEmptyEntries).Select(int.Parse);

                filterTabs.AddRange(
                    tabs.Where(
                        t =>
                            t.TabPermissions.Cast<TabPermissionInfo>()
                                .Any(
                                    p =>
                                        roleList.Contains(p.RoleID) && p.UserID == Null.NullInteger &&
                                        p.PermissionKey == "VIEW" && p.AllowAccess)).ToList()
                        .Where(t => !disabledNotSelectable || !t.DisableLink)
                        .Select(t => t.TabID)
                    );
            }
            else
            {
                filterTabs.AddRange(tabs.Where(t => !disabledNotSelectable || !t.DisableLink).Select(t => t.TabID));
            }

            return filterTabs;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetDescendantsForTabs">
          <declaration><![CDATA[private IEnumerable<TabDto> GetDescendantsForTabs(IEnumerable<int> tabIds, IEnumerable<TabDto> tabs, int selectedTabId, int portalId, string cultureCode, bool isMultiLanguage)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="287" sc="9" el="315" ec="10">Controllers\TabsController.cs</location>
            <body hash="8f50c38b41b441f4db5cbdd1d7610793"><![CDATA[{
            var enumerable = tabIds as int[] ?? tabIds.ToArray();
            if (tabs == null || tabIds == null || !enumerable.Any()) return tabs;
            var tabDtos = tabs as List<TabDto> ?? tabs.ToList();
            var tabId = enumerable.First();
            if (selectedTabId != tabId)
            {
                if (!tabDtos.Exists(x => Convert.ToInt32(x.TabId) == tabId))
                {
                    return GetDescendantsForTabs(enumerable.Except(new List<int> {tabId}), tabDtos, selectedTabId,
                        portalId, cultureCode, isMultiLanguage);
                }
                tabDtos.First(x => Convert.ToInt32(x.TabId) == tabId).ChildTabs =
                    GetTabsDescendants(portalId, tabId, cultureCode,
                        isMultiLanguage).ToList();
                tabDtos.First(x => Convert.ToInt32(x.TabId) == tabId).IsOpen = true;
                tabDtos.First(x => Convert.ToInt32(x.TabId) == tabId).ChildTabs =
                    GetDescendantsForTabs(enumerable.Except(new List<int> {tabId}),
                        tabDtos.First(x => Convert.ToInt32(x.TabId) == tabId).ChildTabs, selectedTabId,
                        portalId, cultureCode, isMultiLanguage).ToList();
            }
            else
            {

                tabDtos.First(x => Convert.ToInt32(x.TabId) == tabId).CheckedState =
                    NodeCheckedState.Checked;
            }
            return tabDtos;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetExportableTabs">
          <declaration><![CDATA[private TabCollection GetExportableTabs(TabCollection tabs)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="384" sc="9" el="387" ec="10">Controllers\TabsController.cs</location>
            <body hash="c467180a09f3f0e172cd3620b5c7b7d8"><![CDATA[{
            var exportableTabs = tabs.Where(kvp => !kvp.Value.IsSystem).Select(kvp => kvp.Value);
            return new TabCollection(exportableTabs);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetNodeIcon">
          <declaration><![CDATA[private string GetNodeIcon(TabInfo tab, out string toolTip)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="390" sc="9" el="417" ec="10">Controllers\TabsController.cs</location>
            <body hash="b852fba6116e3e8f316bb0914dfa4a3b"><![CDATA[{
            if (PortalSettings.HomeTabId == tab.TabID)
            {
                toolTip = Localization.GetString("lblHome", LocalResourcesFile);
                return IconHome;
            }

            if (IsSecuredTab(tab))
            {
                if (IsAdminTab(tab))
                {
                    toolTip = Localization.GetString("lblAdminOnly", LocalResourcesFile);
                    return AdminOnlyIcon;
                }

                if (IsRegisteredUserTab(tab))
                {
                    toolTip = Localization.GetString("lblRegistered", LocalResourcesFile);
                    return RegisteredUsersIcon;
                }

                toolTip = Localization.GetString("lblSecure", LocalResourcesFile);
                return SecuredIcon;
            }

            toolTip = Localization.GetString("lblEveryone", LocalResourcesFile);
            return AllUsersIcon;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPortalTabs">
          <declaration><![CDATA[public TabDto GetPortalTabs(UserInfo userInfo, int portalId, string cultureCode, bool isMultiLanguage, bool excludeAdminTabs = true, string roles = "", bool disabledNotSelectable = false, int sortOrder = 0, int selectedTabId = -1, string validateTab = "", bool includeHostPages = false, bool includeDisabled = false)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="60" sc="9" el="134" ec="10">Controllers\TabsController.cs</location>
            <body hash="ccaad507ad12438a46fe36100d3ac01c"><![CDATA[{
            var portalInfo = PortalController.Instance.GetPortal(portalId);

            var rootNode = new TabDto
            {
                Name = portalInfo.PortalName,
                ImageUrl = IconPortal,
                TabId = Null.NullInteger.ToString(CultureInfo.InvariantCulture),
                ChildTabs = new List<TabDto>(),
                HasChildren = true
            };
            List<TabInfo> tabs = new List<TabInfo>();
            
            cultureCode = string.IsNullOrEmpty(cultureCode) ? portalInfo.CultureCode : cultureCode;
            if (portalId > -1)
            {
                tabs =
                    TabController.GetPortalTabs(
                        isMultiLanguage
                            ? TabController.GetTabsBySortOrder(portalId, portalInfo.DefaultLanguage, true)
                            : TabController.GetTabsBySortOrder(portalId, cultureCode, true), Null.NullInteger, false,
                        "<" + Localization.GetString("None_Specified") + ">", true, false, true, true, false)
                        .Where(t => (!t.DisableLink || includeDisabled) && !t.IsSystem)
                        .ToList();

                if (userInfo.IsSuperUser && includeHostPages)
                {
                    tabs.AddRange(
                        TabController.Instance.GetTabsByPortal(-1)
                            .AsList()
                            .Where(t => !t.IsDeleted && !t.DisableLink && !t.IsSystem)
                            .ToList());
                }
            }
            else
            {
                if (userInfo.IsSuperUser)
                {
                    tabs = TabController.Instance.GetTabsByPortal(-1).AsList().Where(t => !t.IsDeleted && !t.DisableLink && !t.IsSystem).ToList();
                }
            }

            tabs = excludeAdminTabs
                ? tabs.Where(tab => tab.Level == 0 && tab.TabID != portalInfo.AdminTabId).ToList()
                : tabs.Where(tab => tab.Level == 0).ToList();
            
            if (!string.IsNullOrEmpty(validateTab))
            {
                tabs = ValidateModuleInTab(tabs, validateTab).ToList();
            }
            var filterTabs = FilterTabsByRole(tabs, roles, disabledNotSelectable);
            rootNode.HasChildren = tabs.Count > 0;
            foreach (var tab in tabs)
            {
                string tooltip;
                var nodeIcon = GetNodeIcon(tab, out tooltip);
                var node = new TabDto
                {
                    Name = tab.LocalizedTabName, //$"{tab.TabName} {GetNodeStatusIcon(tab)}",
                    TabId = tab.TabID.ToString(CultureInfo.InvariantCulture),
                    ImageUrl = nodeIcon,
                    Tooltip = tooltip,
                    ParentTabId = tab.ParentId,
                    HasChildren = tab.HasChildren,
                    Selectable = filterTabs.Contains(tab.TabID),
                    ChildTabs = new List<TabDto>()
                };
                rootNode.ChildTabs.Add(node);
            }
            rootNode.ChildTabs = ApplySort(rootNode.ChildTabs, sortOrder).ToList();

            return selectedTabId > -1
                ? MarkSelectedTab(rootNode, selectedTabId, portalInfo, cultureCode, isMultiLanguage, validateTab)
                : rootNode;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetTabByCulture">
          <declaration><![CDATA[private TabDto GetTabByCulture(int tabId, int portalId, Locale locale)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="318" sc="9" el="336" ec="10">Controllers\TabsController.cs</location>
            <body hash="10151885f38db8ba20c3a2a4a23d3b68"><![CDATA[{
            var tab = TabController.Instance.GetTabByCulture(tabId, portalId, locale);
            if (TabPermissionController.CanViewPage(tab))
            {
                string tooltip;
                var nodeIcon = GetNodeIcon(tab, out tooltip);
                return new TabDto
                {
                    Name = tab.TabName, //$"{tab.TabName} {GetNodeStatusIcon(tab)}",
                    TabId = tab.TabID.ToString(CultureInfo.InvariantCulture),
                    ImageUrl = nodeIcon,
                    Tooltip = tooltip,
                    ParentTabId = tab.ParentId,
                    HasChildren = tab.HasChildren,
                    ChildTabs = new List<TabDto>()
                };
            }
            return null;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetTabByCulture">
          <declaration><![CDATA[public TabDto GetTabByCulture(int tabId, int portalId, string cultureCode)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="339" sc="9" el="344" ec="10">Controllers\TabsController.cs</location>
            <body hash="b9338ffdc6febf7f38bf0a07a812d69a"><![CDATA[{
            cultureCode = string.IsNullOrEmpty(cultureCode) ? PortalController.Instance.GetPortal(portalId).CultureCode : cultureCode;

            var locale = LocaleController.Instance.GetLocale(cultureCode);
            return GetTabByCulture(tabId, portalId, locale);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetTabsDescendants">
          <declaration><![CDATA[public IEnumerable<TabDto> GetTabsDescendants(int portalId, int parentId, string cultureCode, bool isMultiLanguage, string roles = "", bool disabledNotSelectable = false, int sortOrder = 0, string validateTab = "", bool includeHostPages = false, bool includeDisabled = false)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="347" sc="9" el="381" ec="10">Controllers\TabsController.cs</location>
            <body hash="fd0fbc8dbeceabf5274fc07894cf4587"><![CDATA[{
            var descendants = new List<TabDto>();
            cultureCode = string.IsNullOrEmpty(cultureCode) ? PortalController.Instance.GetPortal(portalId).CultureCode : cultureCode;

            var tabs =
                GetExportableTabs(TabController.Instance.GetTabsByPortal(portalId)
                    .WithCulture(cultureCode, true))
                    .WithParentId(parentId)
                    .Where(TabPermissionController.CanViewPage).ToList();


            if (!string.IsNullOrEmpty(validateTab))
            {
                tabs = ValidateModuleInTab(tabs, validateTab).ToList();
            }

            var filterTabs = FilterTabsByRole(tabs, roles, disabledNotSelectable);
            foreach (var tab in tabs.Where(x => x.ParentId == parentId))
            {
                string tooltip;
                var nodeIcon = GetNodeIcon(tab, out tooltip);
                var node = new TabDto
                {
                    Name = tab.TabName, //$"{tab.TabName} {GetNodeStatusIcon(tab)}",
                    TabId = tab.TabID.ToString(CultureInfo.InvariantCulture),
                    ImageUrl = nodeIcon,
                    Tooltip = tooltip,
                    ParentTabId = tab.ParentId,
                    HasChildren = tab.HasChildren,
                    Selectable = filterTabs.Contains(tab.TabID)
                };
                descendants.Add(node);
            }
            return ApplySort(descendants, sortOrder);
        }]]></body>
          </codeblock>
        </method>
        <method name="IsAdminTab">
          <declaration><![CDATA[private bool IsAdminTab(TabInfo tab)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="420" sc="9" el="425" ec="10">Controllers\TabsController.cs</location>
            <body hash="0355d71320a252ee192413ed282415ab"><![CDATA[{
            var perms = tab.TabPermissions;
            return
                perms.Cast<TabPermissionInfo>()
                    .All(perm => perm.RoleName == PortalSettings.AdministratorRoleName || !perm.AllowAccess);
        }]]></body>
          </codeblock>
        </method>
        <method name="IsRegisteredUserTab">
          <declaration><![CDATA[private bool IsRegisteredUserTab(TabInfo tab)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="428" sc="9" el="433" ec="10">Controllers\TabsController.cs</location>
            <body hash="911246516dbe960eb1b6d78d5df72475"><![CDATA[{
            var perms = tab.TabPermissions;
            return
                perms.Cast<TabPermissionInfo>()
                    .Any(perm => perm.RoleName == PortalSettings.RegisteredRoleName && perm.AllowAccess);
        }]]></body>
          </codeblock>
        </method>
        <method name="IsSecuredTab">
          <declaration><![CDATA[private static bool IsSecuredTab(TabInfo tab)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="436" sc="9" el="441" ec="10">Controllers\TabsController.cs</location>
            <body hash="254a43aa6871b641de85b06fff6034b4"><![CDATA[{
            var perms = tab.TabPermissions;
            return
                perms.Cast<TabPermissionInfo>()
                    .All(perm => perm.RoleName != Globals.glbRoleAllUsersName || !perm.AllowAccess);
        }]]></body>
          </codeblock>
        </method>
        <method name="MarkSelectedTab">
          <declaration><![CDATA[private TabDto MarkSelectedTab(TabDto rootNode, int selectedTabId, PortalInfo portalInfo, string cultureCode, bool isMultiLanguage, string validateTab)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="256" sc="9" el="282" ec="10">Controllers\TabsController.cs</location>
            <body hash="16f35a07812631857664ed31e2f76bd7"><![CDATA[{
            var tempTabs = new List<int>();
            cultureCode = string.IsNullOrEmpty(cultureCode) ? portalInfo.CultureCode : cultureCode;
            var locale = LocaleController.Instance.GetLocale(cultureCode);
            var selectedTab = GetTabByCulture(selectedTabId, portalInfo.PortalID, locale);
            if (selectedTab != null)
            {
                tempTabs.Add(Convert.ToInt32(selectedTab.TabId));
                if (selectedTab.ParentTabId > Null.NullInteger)
                {
                    var parentTab = selectedTab;
                    do
                    {
                        parentTab = GetTabByCulture(parentTab.ParentTabId, portalInfo.PortalID, locale);
                        if (parentTab != null) tempTabs.Add(Convert.ToInt32(parentTab.TabId));
                    } while (parentTab != null && parentTab.ParentTabId > Null.NullInteger);
                }
            }
            tempTabs.Reverse();
            rootNode.ChildTabs = GetDescendantsForTabs(tempTabs, rootNode.ChildTabs, selectedTabId, portalInfo.PortalID,
                cultureCode, isMultiLanguage).ToList();
            if (!string.IsNullOrEmpty(validateTab))
            {
                rootNode.ChildTabs = ValidateModuleInTab(rootNode.ChildTabs, validateTab).ToList();
            }
            return rootNode;
        }]]></body>
          </codeblock>
        </method>
        <method name="SearchPortalTabs">
          <declaration><![CDATA[public TabDto SearchPortalTabs(UserInfo userInfo, string searchText, int portalId, string roles = "", bool disabledNotSelectable = false, int sortOrder = 0, string validateTab = "", bool includeHostPages = false, bool includeDisabled = false)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="137" sc="9" el="212" ec="10">Controllers\TabsController.cs</location>
            <body hash="3c4e47a19691c4ada5614cc8ce174835"><![CDATA[{
            var rootNode = new TabDto
            {
                Name = PortalSettings.PortalName,
                ImageUrl = IconPortal,
                TabId = Null.NullInteger.ToString(CultureInfo.InvariantCulture),
                ChildTabs = new List<TabDto>(),
                HasChildren = true
            };
            Func<TabInfo, bool> searchFunc;
            if (string.IsNullOrEmpty(searchText))
            {
                searchFunc = page => true;
            }
            else
            {
                searchFunc =
                    page => page.LocalizedTabName.IndexOf(searchText, StringComparison.InvariantCultureIgnoreCase) > -1;
            }
            var tabs = new List<TabInfo>();
            if (portalId > -1)
            {
                tabs =
                    TabController.Instance.GetTabsByPortal(portalId)
                        .Where(
                            tab =>
                                (includeDisabled || !tab.Value.DisableLink) &&
                                (tab.Value.TabType == TabType.Normal) &&
                                searchFunc(tab.Value) &&
                                !tab.Value.IsSystem
                                && TabPermissionController.CanViewPage(tab.Value))
                        .Select(tab => tab.Value).ToList();

                if (userInfo.IsSuperUser && includeHostPages)
                {
                    tabs.AddRange(TabController.Instance.GetTabsByPortal(-1).Where(tab => !tab.Value.DisableLink && searchFunc(tab.Value) && !tab.Value.IsSystem)
                    .OrderBy(tab => tab.Value.TabOrder)
                    .Select(tab => tab.Value)
                    .ToList());
                }
            }
            else
            {
                if (userInfo.IsSuperUser)
                {
                    tabs = TabController.Instance.GetTabsByPortal(-1).Where(tab => !tab.Value.DisableLink && searchFunc(tab.Value) && !tab.Value.IsSystem)
                    .OrderBy(tab => tab.Value.TabOrder)
                    .Select(tab => tab.Value)
                    .ToList();
                }
            }

            var filterTabs = FilterTabsByRole(tabs, roles, disabledNotSelectable);
            rootNode.HasChildren = tabs.Any();
            foreach (var tab in tabs)
            {
                string tooltip;
                var nodeIcon = GetNodeIcon(tab, out tooltip);
                var node = new TabDto
                {
                    Name = tab.LocalizedTabName,
                    TabId = tab.TabID.ToString(CultureInfo.InvariantCulture),
                    ImageUrl = nodeIcon,
                    ParentTabId = tab.ParentId,
                    HasChildren = false,
                    Selectable = filterTabs.Contains(tab.TabID)
                };
                rootNode.ChildTabs.Add(node);
            }
            rootNode.ChildTabs = ApplySort(rootNode.ChildTabs, sortOrder).ToList();
            if (!string.IsNullOrEmpty(validateTab))
            {
                rootNode.ChildTabs = ValidateModuleInTab(rootNode.ChildTabs, validateTab).ToList();
            }
            return rootNode;
        }]]></body>
          </codeblock>
        </method>
        <method name="ValidateModuleInTab">
          <declaration><![CDATA[private IEnumerable<TabDto> ValidateModuleInTab(IEnumerable<TabDto> tabs, string validateTab)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="215" sc="9" el="221" ec="10">Controllers\TabsController.cs</location>
            <body hash="aa6b0a12a8fd5d2d737164cfdec7124e"><![CDATA[{
            return tabs.Where(
                tab =>
                    (Convert.ToInt32(tab.TabId) > 0 &&
                     Globals.ValidateModuleInTab(Convert.ToInt32(tab.TabId), validateTab)) ||
                    Convert.ToInt32(tab.TabId) == Null.NullInteger);
        }]]></body>
          </codeblock>
        </method>
        <method name="ValidateModuleInTab">
          <declaration><![CDATA[private IEnumerable<TabInfo> ValidateModuleInTab(IEnumerable<TabInfo> tabs, string validateTab)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="223" sc="9" el="225" ec="10">Controllers\TabsController.cs</location>
            <body hash="6973f8617552038247b06a53c46b8b43"><![CDATA[{
            return tabs.Where(tab =>(tab.TabID > 0 && Globals.ValidateModuleInTab(tab.TabID, validateTab)) || tab.TabID == Null.NullInteger);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="AdminOnlyIcon">
          <declaration><![CDATA[private string AdminOnlyIcon]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="45" sc="41" el="45" ec="116">Controllers\TabsController.cs</location>
            <body hash="b88c09f9c9077b0239c14e38f365fed9"><![CDATA[Globals.ResolveUrl("~/DesktopModules/Admin/Tabs/images/Icon_UserAdmin.png"]]></body>
          </codeblock>
        </property>
        <property name="AllUsersIcon">
          <declaration><![CDATA[private string AllUsersIcon]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="51" sc="40" el="51" ec="114">Controllers\TabsController.cs</location>
            <body hash="c779ce13ec6a86cd99acabb12140ffb2"><![CDATA[Globals.ResolveUrl("~/DesktopModules/Admin/Tabs/images/Icon_Everyone.png"]]></body>
          </codeblock>
        </property>
        <property name="IconHome">
          <declaration><![CDATA[private string IconHome]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="41" sc="36" el="41" ec="106">Controllers\TabsController.cs</location>
            <body hash="ee4f9eddbfceb206e473bd65a98883f6"><![CDATA[Globals.ResolveUrl("~/DesktopModules/Admin/Tabs/images/Icon_Home.png"]]></body>
          </codeblock>
        </property>
        <property name="IconPortal">
          <declaration><![CDATA[private string IconPortal]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="43" sc="38" el="43" ec="110">Controllers\TabsController.cs</location>
            <body hash="a426fb8c83d13fd91ae57066d9cec6fd"><![CDATA[Globals.ResolveUrl("~/DesktopModules/Admin/Tabs/images/Icon_Portal.png"]]></body>
          </codeblock>
        </property>
        <property name="LocalResourcesFile">
          <declaration><![CDATA[public string LocalResourcesFile]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="55" sc="45" el="55" ec="127">Controllers\TabsController.cs</location>
            <body hash="2077b824307d36fb78fc85c8a85b54bd"><![CDATA[Path.Combine("~/DesktopModules/admin/Dnn.PersonaBar/App_LocalResources/Tabs.resx"]]></body>
          </codeblock>
        </property>
        <property name="PortalSettings">
          <declaration><![CDATA[private PortalSettings PortalSettings]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="53" sc="50" el="53" ec="102">Controllers\TabsController.cs</location>
            <body hash="9a9acd53c40c448eb883c37aefbb294b"><![CDATA[PortalController.Instance.GetCurrentPortalSettings(]]></body>
          </codeblock>
        </property>
        <property name="RegisteredUsersIcon">
          <declaration><![CDATA[private string RegisteredUsersIcon]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="47" sc="47" el="47" ec="117">Controllers\TabsController.cs</location>
            <body hash="f8c73fb137a4a1ac13bb9d9d5e5b7527"><![CDATA[Globals.ResolveUrl("~/DesktopModules/Admin/Tabs/images/Icon_User.png"]]></body>
          </codeblock>
        </property>
        <property name="SecuredIcon">
          <declaration><![CDATA[private string SecuredIcon]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="49" sc="39" el="49" ec="115">Controllers\TabsController.cs</location>
            <body hash="ac32cb1a1c488140a2f33b2b99efc4c9"><![CDATA[Globals.ResolveUrl("~/DesktopModules/Admin/Tabs/images/Icon_UserSecure.png"]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="Dnn.PersonaBar.Library.Data">
    <class name="DataService">
      <declaration><![CDATA[public class DataService : IDataService]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DataService()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
        <constructor name=".cctor">
          <declaration><![CDATA[static DataService()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="9" sc="9" el="9" ec="119">Data\DataService.cs</location>
            <body hash="a3a84fe09d3fcb430507ea495ff38445"><![CDATA[protected static readonly DotNetNuke.Data.DataProvider DataProvider = DotNetNuke.Data.DataProvider.Instance()]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="DeletePersonaBarExtension">
          <declaration><![CDATA[public void DeletePersonaBarExtension(string identifier)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="37" sc="9" el="39" ec="10">Data\DataService.cs</location>
            <body hash="fe760b2fd32e53d5942165706acbbe2a"><![CDATA[{
            DataProvider.ExecuteNonQuery("PersonaBar_DeletePersonaBarExtension", identifier);
        }]]></body>
          </codeblock>
        </method>
        <method name="DeletePersonaBarMenuByIdentifier">
          <declaration><![CDATA[public void DeletePersonaBarMenuByIdentifier(string identifier)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="25" sc="9" el="27" ec="10">Data\DataService.cs</location>
            <body hash="6d74647191d6e69340ac0cd50c21a25a"><![CDATA[{
            DataProvider.ExecuteNonQuery("PersonaBar_DeletePersonaBarMenuByIdentifier", identifier);
        }]]></body>
          </codeblock>
        </method>
        <method name="DeletePersonaBarPermission">
          <declaration><![CDATA[public void DeletePersonaBarPermission(int permissionId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="85" sc="9" el="87" ec="10">Data\DataService.cs</location>
            <body hash="0936beee772c3cddad921336fd536b60"><![CDATA[{
            DataProvider.ExecuteNonQuery("PersonaBar_DeletePersonaBarPermission", permissionId);
        }]]></body>
          </codeblock>
        </method>
        <method name="DeletePersonbaBarMenuPermissionsById">
          <declaration><![CDATA[public void DeletePersonbaBarMenuPermissionsById(int menuPermissionId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="74" sc="9" el="76" ec="10">Data\DataService.cs</location>
            <body hash="0ed4b3623c32ad44d7f71809a1faa8ca"><![CDATA[{
            DataProvider.ExecuteNonQuery("PersonaBar_DeletePersonaBarMenuPermissionById", menuPermissionId);
        }]]></body>
          </codeblock>
        </method>
        <method name="DeletePersonbaBarMenuPermissionsByMenuId">
          <declaration><![CDATA[public void DeletePersonbaBarMenuPermissionsByMenuId(int portalId, int menuId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="69" sc="9" el="71" ec="10">Data\DataService.cs</location>
            <body hash="b9daee9c5af12e612faf876f60326e69"><![CDATA[{
            DataProvider.ExecuteNonQuery("PersonaBar_DeletePersonaBarMenuPermissionsByMenuId", portalId, menuId);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPersonaBarExtensions">
          <declaration><![CDATA[public IDataReader GetPersonaBarExtensions()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="42" sc="9" el="44" ec="10">Data\DataService.cs</location>
            <body hash="945a16640b1103e2b97ee4f376a95ee5"><![CDATA[{
            return DataProvider.ExecuteReader("PersonaBar_GetPersonaBarExtensions");
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPersonaBarMenu">
          <declaration><![CDATA[public IDataReader GetPersonaBarMenu()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="20" sc="9" el="22" ec="10">Data\DataService.cs</location>
            <body hash="108d4d2262ed960308e530c4cdbbe7e5"><![CDATA[{
            return DataProvider.ExecuteReader("PersonaBar_GetPersonaBarMenu");
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPersonaBarMenuDefaultPermissions">
          <declaration><![CDATA[public string GetPersonaBarMenuDefaultPermissions(int menuId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="52" sc="9" el="54" ec="10">Data\DataService.cs</location>
            <body hash="1df144d5fdae8856817add389198105a"><![CDATA[{
            return DataProvider.ExecuteScalar<string>("PersonaBar_GetPersonaBarMenuDefaultPermissions", menuId);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPersonaBarPermissions">
          <declaration><![CDATA[public IDataReader GetPersonaBarPermissions()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="90" sc="9" el="92" ec="10">Data\DataService.cs</location>
            <body hash="a68a3941eff68f9c65b9fd28e16101ad"><![CDATA[{
            return DataProvider.ExecuteReader("PersonaBar_GetPersonaBarPermissions");
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPersonbaBarMenuPermissionsByPortal">
          <declaration><![CDATA[public IDataReader GetPersonbaBarMenuPermissionsByPortal(int portalId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="64" sc="9" el="66" ec="10">Data\DataService.cs</location>
            <body hash="69747c63f109d8d2da0ddd7110e1a274"><![CDATA[{
            return DataProvider.ExecuteReader("PersonaBar_GetPersonaBarMenuPermissionsByPortal", portalId);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetRoleNull">
          <declaration><![CDATA[private object GetRoleNull(int roleId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="100" sc="9" el="104" ec="10">Data\DataService.cs</location>
            <body hash="c15fdb221e13e0d97459e8b99cce12e9"><![CDATA[{
            if (roleId.ToString() == "-4")
                return DBNull.Value;
            return (object)roleId;
        }]]></body>
          </codeblock>
        </method>
        <method name="SavePersonaBarExtension">
          <declaration><![CDATA[public int SavePersonaBarExtension(string identifier, int menuId, string folderName, string controller, string container, string path, int order, bool enabled, int currentUserId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="31" sc="9" el="34" ec="10">Data\DataService.cs</location>
            <body hash="71907116c82d0acb617d10ee26537e97"><![CDATA[{
            return DataProvider.ExecuteScalar<int>("PersonaBar_SavePersonaBarExtension", identifier, menuId, folderName,
                controller, container, path, order, enabled, currentUserId);
        }]]></body>
          </codeblock>
        </method>
        <method name="SavePersonaBarMenu">
          <declaration><![CDATA[public int SavePersonaBarMenu(string identifier, string moduleName, string folderName, string controller, string resourceKey, string path, string link, string cssClass, int parentId, int order, bool allowHost, bool enabled, int currentUserId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="13" sc="9" el="17" ec="10">Data\DataService.cs</location>
            <body hash="bca2a22c57f644932362f59f436f0d97"><![CDATA[{
            return DataProvider.ExecuteScalar<int>("PersonaBar_SavePersonaBarMenu", identifier, moduleName, folderName, controller, resourceKey, path,
                Null.GetNull(link, DBNull.Value), Null.GetNull(cssClass, DBNull.Value),
                Null.GetNull(parentId, DBNull.Value), order, allowHost, enabled, currentUserId);
        }]]></body>
          </codeblock>
        </method>
        <method name="SavePersonaBarMenuDefaultPermissions">
          <declaration><![CDATA[public int SavePersonaBarMenuDefaultPermissions(int menuId, string roleNames)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="47" sc="9" el="49" ec="10">Data\DataService.cs</location>
            <body hash="d25d2c14c193e29e12f6981227b77685"><![CDATA[{
            return DataProvider.ExecuteScalar<int>("PersonaBar_SavePersonaBarMenuDefaultPermissions", menuId, roleNames);
        }]]></body>
          </codeblock>
        </method>
        <method name="SavePersonaBarMenuPermission">
          <declaration><![CDATA[public int SavePersonaBarMenuPermission(int portalId, int menuId, int permissionId, int roleId, int userId, bool allowAccees, int currentUserId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="58" sc="9" el="61" ec="10">Data\DataService.cs</location>
            <body hash="cbcdddf73182ef6e82bc19257c3d9ac9"><![CDATA[{
            return DataProvider.ExecuteScalar<int>("PersonaBar_SavePersonaBarMenuPermission", DataProvider.GetNull(portalId), menuId, permissionId,
                GetRoleNull(roleId), DataProvider.GetNull(userId), allowAccees, currentUserId);
        }]]></body>
          </codeblock>
        </method>
        <method name="SavePersonaBarPermission">
          <declaration><![CDATA[public int SavePersonaBarPermission(int menuId, string permissionKey, string permissionName, int currentUserId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="79" sc="9" el="82" ec="10">Data\DataService.cs</location>
            <body hash="40019f00c0c89dc54eb0d985798f33da"><![CDATA[{
            return DataProvider.ExecuteScalar<int>("PersonaBar_SavePersonaBarPermission", 
                Null.GetNull(menuId, DBNull.Value), permissionKey, permissionName, currentUserId);
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateMenuController">
          <declaration><![CDATA[public void UpdateMenuController(string identifier, string controller)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="95" sc="9" el="97" ec="10">Data\DataService.cs</location>
            <body hash="47e98304f8c1f67e7394ccb79b754565"><![CDATA[{
            DataProvider.ExecuteNonQuery("PersonaBar_UpdateMenuController", identifier, controller);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="DataProvider">
          <declaration><![CDATA[protected static readonly DataProvider DataProvider = DataProvider.Instance();]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="IDataService">
      <declaration><![CDATA[public interface IDataService]]></declaration>
      <documentation>
      </documentation>
      <constructors>
      </constructors>
      <methods>
        <method name="DeletePersonaBarExtension">
          <declaration><![CDATA[void DeletePersonaBarExtension(string identifier);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="DeletePersonaBarMenuByIdentifier">
          <declaration><![CDATA[void DeletePersonaBarMenuByIdentifier(string identifier);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="DeletePersonaBarPermission">
          <declaration><![CDATA[void DeletePersonaBarPermission(int permissionId);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="DeletePersonbaBarMenuPermissionsById">
          <declaration><![CDATA[void DeletePersonbaBarMenuPermissionsById(int menuPermissionId);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="DeletePersonbaBarMenuPermissionsByMenuId">
          <declaration><![CDATA[void DeletePersonbaBarMenuPermissionsByMenuId(int portalId, int menuId);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="GetPersonaBarExtensions">
          <declaration><![CDATA[IDataReader GetPersonaBarExtensions();]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="GetPersonaBarMenu">
          <declaration><![CDATA[IDataReader GetPersonaBarMenu();]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="GetPersonaBarMenuDefaultPermissions">
          <declaration><![CDATA[string GetPersonaBarMenuDefaultPermissions(int menuId);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="GetPersonaBarPermissions">
          <declaration><![CDATA[IDataReader GetPersonaBarPermissions();]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="GetPersonbaBarMenuPermissionsByPortal">
          <declaration><![CDATA[IDataReader GetPersonbaBarMenuPermissionsByPortal(int portalId);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="SavePersonaBarExtension">
          <declaration><![CDATA[int SavePersonaBarExtension(string identifier, int menuId, string folderName, string controller, string container, string path, int order, bool enabled, int currentUserId);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="SavePersonaBarMenu">
          <declaration><![CDATA[int SavePersonaBarMenu(string identifier, string moduleName, string folderName, string controller, string resourceKey, string path, string link, string cssClass, int parentId, int order, bool allowHost, bool enabled, int currentUserId);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="SavePersonaBarMenuDefaultPermissions">
          <declaration><![CDATA[int SavePersonaBarMenuDefaultPermissions(int menuId, string roleNames);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="SavePersonaBarMenuPermission">
          <declaration><![CDATA[int SavePersonaBarMenuPermission(int portalId, int menuId, int permissionId, int roleId, int userId, bool allowAccees, int currentUserId);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="SavePersonaBarPermission">
          <declaration><![CDATA[int SavePersonaBarPermission(int menuId, string permissionKey, string permissionName, int currentUserId);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="UpdateMenuController">
          <declaration><![CDATA[void UpdateMenuController(string identifier, string controller);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="Dnn.PersonaBar.Library.DTO">
    <class name="Permission">
      <declaration><![CDATA[public class Permission]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public Permission()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="AllowAccess">
          <declaration><![CDATA[public bool AllowAccess]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="28" sc="35" el="28" ec="39">Dto\Permission.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="28" sc="40" el="28" ec="44">Dto\Permission.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="FullControl">
          <declaration><![CDATA[public bool FullControl]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="22" sc="35" el="22" ec="39">Dto\Permission.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="22" sc="40" el="22" ec="44">Dto\Permission.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="PermissionId">
          <declaration><![CDATA[public int PermissionId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="16" sc="35" el="16" ec="39">Dto\Permission.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="16" sc="40" el="16" ec="44">Dto\Permission.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="PermissionName">
          <declaration><![CDATA[public string PermissionName]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="19" sc="40" el="19" ec="44">Dto\Permission.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="19" sc="45" el="19" ec="49">Dto\Permission.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="View">
          <declaration><![CDATA[public bool View]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="25" sc="28" el="25" ec="32">Dto\Permission.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="25" sc="33" el="25" ec="37">Dto\Permission.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="Permissions">
      <declaration><![CDATA[public abstract class Permissions]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[protected Permissions() : this(false)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="27" sc="35" el="29" ec="10">Dto\Permissions.cs</location>
            <body hash="45d00aa90e63adc723b931aaf9f38643"><![CDATA[this(false)
        {            
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[protected Permissions(bool needDefinitions)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="31" sc="9" el="42" ec="10">Dto\Permissions.cs</location>
            <body hash="f87f5c587bbbcd628a79c7a33ad422ff"><![CDATA[protected Permissions(bool needDefinitions)
        {
            RolePermissions = new List<RolePermission>();
            UserPermissions = new List<UserPermission>();

            if (needDefinitions)
            {
                PermissionDefinitions = new List<Permission>();
                this.LoadPermissionDefinitions();
                this.EnsureDefaultRoles();
            }
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="LoadPermissionDefinitions">
          <declaration><![CDATA[protected abstract void LoadPermissionDefinitions();]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="PermissionDefinitions">
          <declaration><![CDATA[public IList<Permission> PermissionDefinitions]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="18" sc="58" el="18" ec="62">Dto\Permissions.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="18" sc="63" el="18" ec="67">Dto\Permissions.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="RolePermissions">
          <declaration><![CDATA[public IList<RolePermission> RolePermissions]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="21" sc="56" el="21" ec="60">Dto\Permissions.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="21" sc="61" el="21" ec="65">Dto\Permissions.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="UserPermissions">
          <declaration><![CDATA[public IList<UserPermission> UserPermissions]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="24" sc="56" el="24" ec="60">Dto\Permissions.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="24" sc="61" el="24" ec="65">Dto\Permissions.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="RolePermission">
      <declaration><![CDATA[public class RolePermission]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public RolePermission()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="31" sc="9" el="34" ec="10">Dto\RolePermission.cs</location>
            <body hash="c0776026c30c116938bdae4a9b2b4d67"><![CDATA[public RolePermission()
        {
            Permissions = new List<Permission>();
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="IsDefault">
          <declaration><![CDATA[public bool IsDefault]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="29" sc="33" el="29" ec="37">Dto\RolePermission.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="29" sc="38" el="29" ec="42">Dto\RolePermission.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Locked">
          <declaration><![CDATA[public bool Locked]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="26" sc="30" el="26" ec="34">Dto\RolePermission.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="26" sc="35" el="26" ec="39">Dto\RolePermission.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Permissions">
          <declaration><![CDATA[public IList<Permission> Permissions]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="23" sc="48" el="23" ec="52">Dto\RolePermission.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="23" sc="53" el="23" ec="57">Dto\RolePermission.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="RoleId">
          <declaration><![CDATA[public int RoleId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="17" sc="29" el="17" ec="33">Dto\RolePermission.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="17" sc="34" el="17" ec="38">Dto\RolePermission.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="RoleName">
          <declaration><![CDATA[public string RoleName]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="20" sc="34" el="20" ec="38">Dto\RolePermission.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="20" sc="39" el="20" ec="43">Dto\RolePermission.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="UserPermission">
      <declaration><![CDATA[public class UserPermission]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public UserPermission()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="25" sc="9" el="28" ec="10">Dto\UserPermission.cs</location>
            <body hash="8717bfa76ee0e68ed2ac71bb672498bd"><![CDATA[public UserPermission()
        {
            Permissions = new List<Permission>();
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="DisplayName">
          <declaration><![CDATA[public string DisplayName]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="20" sc="37" el="20" ec="41">Dto\UserPermission.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="20" sc="42" el="20" ec="46">Dto\UserPermission.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Permissions">
          <declaration><![CDATA[public IList<Permission> Permissions]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="23" sc="48" el="23" ec="52">Dto\UserPermission.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="23" sc="53" el="23" ec="57">Dto\UserPermission.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="UserId">
          <declaration><![CDATA[public int UserId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="17" sc="29" el="17" ec="33">Dto\UserPermission.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="17" sc="34" el="17" ec="38">Dto\UserPermission.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="UserSettings">
      <declaration><![CDATA[public class UserSettings]]></declaration>
      <documentation>
        <summary>
 Persona Bar User Settings
 </summary>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public UserSettings()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="ActiveIdentifier">
          <declaration><![CDATA[public string ActiveIdentifier]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="26" sc="42" el="26" ec="46">Dto\UserSettings.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="26" sc="47" el="26" ec="51">Dto\UserSettings.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ActivePath">
          <declaration><![CDATA[public string ActivePath]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="23" sc="36" el="23" ec="40">Dto\UserSettings.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="23" sc="41" el="23" ec="45">Dto\UserSettings.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ComparativeTerm">
          <declaration><![CDATA[public string ComparativeTerm]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="32" sc="41" el="32" ec="45">Dto\UserSettings.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="32" sc="46" el="32" ec="50">Dto\UserSettings.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="EndDate">
          <declaration><![CDATA[public DateTime EndDate]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="35" sc="35" el="35" ec="39">Dto\UserSettings.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="35" sc="40" el="35" ec="44">Dto\UserSettings.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ExpandPersonaBar">
          <declaration><![CDATA[public bool ExpandPersonaBar]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="20" sc="39" el="20" ec="43">Dto\UserSettings.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="20" sc="44" el="20" ec="48">Dto\UserSettings.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ExpandTasksPane">
          <declaration><![CDATA[public bool ExpandTasksPane]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="29" sc="39" el="29" ec="43">Dto\UserSettings.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="29" sc="44" el="29" ec="48">Dto\UserSettings.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Legends">
          <declaration><![CDATA[public string[] Legends]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="38" sc="35" el="38" ec="39">Dto\UserSettings.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="38" sc="40" el="38" ec="44">Dto\UserSettings.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Period">
          <declaration><![CDATA[public string Period]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="41" sc="32" el="41" ec="36">Dto\UserSettings.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="41" sc="37" el="41" ec="41">Dto\UserSettings.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="StartDate">
          <declaration><![CDATA[public DateTime StartDate]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="44" sc="37" el="44" ec="41">Dto\UserSettings.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="44" sc="42" el="44" ec="46">Dto\UserSettings.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="Dnn.PersonaBar.Library.DTO.Tabs">
    <class name="LocaleInfoDto">
      <declaration><![CDATA[public class LocaleInfoDto]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public LocaleInfoDto(string cultureCode)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="8" sc="9" el="14" ec="10">Dto\Tabs\LocaleInfoDto.cs</location>
            <body hash="20448ae3472f7bc629d9d9406c11d2e6"><![CDATA[public LocaleInfoDto(string cultureCode)
        {
            CultureCode = cultureCode;
            Icon = string.IsNullOrEmpty(cultureCode)
                ? "/images/Flags/none.gif"
                : $"/images/Flags/{cultureCode}.gif";
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="CultureCode">
          <declaration><![CDATA[public string CultureCode]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="16" sc="37" el="16" ec="41">Dto\Tabs\LocaleInfoDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
        </property>
        <property name="Icon">
          <declaration><![CDATA[public string Icon]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="17" sc="30" el="17" ec="34">Dto\Tabs\LocaleInfoDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="NodeCheckedState">
      <declaration><![CDATA[public enum NodeCheckedState]]></declaration>
      <documentation>
      </documentation>
      <constructors>
      </constructors>
      <methods>
      </methods>
      <fields>
        <field name="Checked">
          <declaration><![CDATA[public const NodeCheckedState Checked = 0;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Partial">
          <declaration><![CDATA[public const NodeCheckedState Partial = 2;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="UnChecked">
          <declaration><![CDATA[public const NodeCheckedState UnChecked = 1;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="TabDto">
      <declaration><![CDATA[public class TabDto]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public TabDto()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="31" sc="9" el="36" ec="10">Dto\Tabs\TabDto.cs</location>
            <body hash="cf7cee794f019ca2523469ed26476987"><![CDATA[public TabDto()
        {
            CheckedState= NodeCheckedState.UnChecked;
            IsOpen = false;
            Selectable = true;
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="CheckedState">
          <declaration><![CDATA[public NodeCheckedState CheckedState]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="53" sc="48" el="53" ec="52">Dto\Tabs\TabDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="53" sc="53" el="53" ec="57">Dto\Tabs\TabDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ChildTabs">
          <declaration><![CDATA[public IList<TabDto> ChildTabs]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="55" sc="42" el="55" ec="46">Dto\Tabs\TabDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="55" sc="47" el="55" ec="51">Dto\Tabs\TabDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="HasChildren">
          <declaration><![CDATA[public bool HasChildren]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="47" sc="36" el="47" ec="40">Dto\Tabs\TabDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="47" sc="41" el="47" ec="45">Dto\Tabs\TabDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ImageUrl">
          <declaration><![CDATA[public string ImageUrl]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="41" sc="34" el="41" ec="38">Dto\Tabs\TabDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="41" sc="39" el="41" ec="43">Dto\Tabs\TabDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="IsOpen">
          <declaration><![CDATA[public bool IsOpen]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="49" sc="30" el="49" ec="34">Dto\Tabs\TabDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="49" sc="35" el="49" ec="39">Dto\Tabs\TabDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Name">
          <declaration><![CDATA[public string Name]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="37" sc="30" el="37" ec="34">Dto\Tabs\TabDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="37" sc="35" el="37" ec="39">Dto\Tabs\TabDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ParentTabId">
          <declaration><![CDATA[public int ParentTabId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="45" sc="34" el="45" ec="38">Dto\Tabs\TabDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="45" sc="39" el="45" ec="43">Dto\Tabs\TabDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Selectable">
          <declaration><![CDATA[public bool Selectable]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="51" sc="34" el="51" ec="38">Dto\Tabs\TabDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="51" sc="39" el="51" ec="43">Dto\Tabs\TabDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="TabId">
          <declaration><![CDATA[public string TabId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="39" sc="31" el="39" ec="35">Dto\Tabs\TabDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="39" sc="36" el="39" ec="40">Dto\Tabs\TabDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Tooltip">
          <declaration><![CDATA[public string Tooltip]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="43" sc="33" el="43" ec="37">Dto\Tabs\TabDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="43" sc="38" el="43" ec="42">Dto\Tabs\TabDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="Dnn.PersonaBar.Library.Helper">
    <class name="IPermissionGridApi">
      <declaration><![CDATA[public interface IPermissionGridApi]]></declaration>
      <documentation>
      </documentation>
      <constructors>
      </constructors>
      <methods>
        <method name="GetRoles">
          <declaration><![CDATA[HttpResponseMessage GetRoles();]]></declaration>
          <documentation>
            <summary>
 Returns all roles/role groups info
 </summary>
 <returns></returns></documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="PermissionHelper">
      <declaration><![CDATA[public static class PermissionHelper]]></declaration>
      <documentation>
      </documentation>
      <constructors>
      </constructors>
      <methods>
        <method name="AddRolePermission">
          <declaration><![CDATA[public static void AddRolePermission(this Permissions dto, PermissionInfoBase permissionInfo)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="48" sc="9" el="69" ec="10">Helper\PermissionHelper.cs</location>
            <body hash="089324456b3cc7dba0108be5d800443a"><![CDATA[{
            var rolePermission = dto.RolePermissions.FirstOrDefault(p => p.RoleId == permissionInfo.RoleID);
            if (rolePermission == null)
            {
                rolePermission = new RolePermission
                                    {
                                        RoleId = permissionInfo.RoleID,
                                        RoleName = permissionInfo.RoleName
                                    };
                dto.RolePermissions.Add(rolePermission);
            }

            if (rolePermission.Permissions.All(p => p.PermissionId != permissionInfo.PermissionID))
            {
                rolePermission.Permissions.Add(new Permission
                                                    {
                                                        PermissionId = permissionInfo.PermissionID,
                                                        PermissionName = permissionInfo.PermissionName,
                                                        AllowAccess = permissionInfo.AllowAccess
                                                    });
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="AddUserPermission">
          <declaration><![CDATA[public static void AddUserPermission(this Permissions dto, PermissionInfoBase permissionInfo)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="24" sc="9" el="45" ec="10">Helper\PermissionHelper.cs</location>
            <body hash="5285bd5806e971bf86a89990832bd496"><![CDATA[{
            var userPermission = dto.UserPermissions.FirstOrDefault(p => p.UserId == permissionInfo.UserID);
            if (userPermission == null)
            {
                userPermission = new UserPermission
                                    {
                                        UserId = permissionInfo.UserID,
                                        DisplayName = permissionInfo.DisplayName
                                    };
                dto.UserPermissions.Add(userPermission);
            }

            if (userPermission.Permissions.All(p => p.PermissionId != permissionInfo.PermissionID))
            {
                userPermission.Permissions.Add(new Permission
                                                    {
                                                        PermissionId = permissionInfo.PermissionID,
                                                        PermissionName = permissionInfo.PermissionName,
                                                        AllowAccess = permissionInfo.AllowAccess
                                                    });
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="EnsureDefaultRoles">
          <declaration><![CDATA[public static void EnsureDefaultRoles(this Permissions dto)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="72" sc="9" el="79" ec="10">Helper\PermissionHelper.cs</location>
            <body hash="1742780b7e4821bcb9dd5d2aa3322e95"><![CDATA[{
            //Administrators Role always has implicit permissions, then it should be always in
            dto.EnsureRole(RoleController.Instance.GetRoleById(PortalSettings.Current.PortalId, PortalSettings.Current.AdministratorRoleId), true, true);
            
            //Show also default roles
            dto.EnsureRole(RoleController.Instance.GetRoleById(PortalSettings.Current.PortalId, PortalSettings.Current.RegisteredRoleId), false, true);
            dto.EnsureRole(new RoleInfo { RoleID = Int32.Parse(Globals.glbRoleAllUsers), RoleName = Globals.glbRoleAllUsersName }, false, true);
        }]]></body>
          </codeblock>
        </method>
        <method name="EnsureRole">
          <declaration><![CDATA[public static void EnsureRole(this Permissions dto, RoleInfo role)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="82" sc="9" el="84" ec="10">Helper\PermissionHelper.cs</location>
            <body hash="3e4bdf473aa4979a42ce711774b2cc90"><![CDATA[{
            dto.EnsureRole(role, false);
        }]]></body>
          </codeblock>
        </method>
        <method name="EnsureRole">
          <declaration><![CDATA[public static void EnsureRole(this Permissions dto, RoleInfo role, bool locked)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="87" sc="9" el="89" ec="10">Helper\PermissionHelper.cs</location>
            <body hash="7e25ab13cb9d50f14937343ffea50772"><![CDATA[{
            dto.EnsureRole(role, locked, false);
        }]]></body>
          </codeblock>
        </method>
        <method name="EnsureRole">
          <declaration><![CDATA[public static void EnsureRole(this Permissions dto, RoleInfo role, bool locked, bool isDefault)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="92" sc="9" el="103" ec="10">Helper\PermissionHelper.cs</location>
            <body hash="439a5f8083fa2af34a51fc60e4ed1f9f"><![CDATA[{
            if (dto.RolePermissions.All(r => r.RoleId != role.RoleID))
            {
                dto.RolePermissions.Add(new RolePermission
                                            {
                                                RoleId = role.RoleID,
                                                RoleName = role.RoleName,
                                                Locked = locked,
                                                IsDefault = isDefault
                                            });
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetRoles">
          <declaration><![CDATA[public static object GetRoles(int portalId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="116" sc="9" el="137" ec="10">Helper\PermissionHelper.cs</location>
            <body hash="0f97811dea39c7bd46ee92755e2d0d80"><![CDATA[{
            var data = new { Groups = new List<object>(), Roles = new List<object>() };

            //retreive role groups info
            data.Groups.Add(new { GroupId = -2, Name = "AllRoles" });
            data.Groups.Add(new { GroupId = -1, Name = "GlobalRoles", Selected = true });

            foreach (RoleGroupInfo group in RoleController.GetRoleGroups(portalId))
            {
                data.Groups.Add(new { GroupId = group.RoleGroupID, Name = group.RoleGroupName });
            }

            //retreive roles info
            data.Roles.Add(new { RoleID = Int32.Parse(Globals.glbRoleUnauthUser), GroupId = -1, RoleName = Globals.glbRoleUnauthUserName });
            data.Roles.Add(new { RoleID = Int32.Parse(Globals.glbRoleAllUsers), GroupId = -1, RoleName = Globals.glbRoleAllUsersName });
            foreach (RoleInfo role in RoleController.Instance.GetRoles(portalId).OrderBy(r => r.RoleName))
            {
                data.Roles.Add(new { GroupId = role.RoleGroupID, RoleId = role.RoleID, Name = role.RoleName });
            }

            return data;
        }]]></body>
          </codeblock>
        </method>
        <method name="IsFullControl">
          <declaration><![CDATA[public static bool IsFullControl(PermissionInfo permissionInfo)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="106" sc="9" el="108" ec="10">Helper\PermissionHelper.cs</location>
            <body hash="d0fbab31c6e8a46672167b736b9c4df1"><![CDATA[{
            return (permissionInfo.PermissionKey == "EDIT") && PermissionProvider.Instance().SupportsFullControl();
        }]]></body>
          </codeblock>
        </method>
        <method name="IsViewPermisison">
          <declaration><![CDATA[public static bool IsViewPermisison(PermissionInfo permissionInfo)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="111" sc="9" el="113" ec="10">Helper\PermissionHelper.cs</location>
            <body hash="21a91747401112cf6645551235e2cdeb"><![CDATA[{
            return (permissionInfo.PermissionKey == "VIEW");
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="Dnn.PersonaBar.Library.Model">
    <class name="MenuItem">
      <declaration><![CDATA[public class MenuItem : IHydratable]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private IList<MenuItem> <Children>k__BackingField = new List<MenuItem>();]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="111" sc="57" el="111" ec="77">Model\MenuItem.cs</location>
            <body hash="18bed54fc9090b7b47248d563fea9bca"><![CDATA[new List<MenuItem>(]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="Fill">
          <declaration><![CDATA[public void Fill(IDataReader dr)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="114" sc="9" el="128" ec="10">Model\MenuItem.cs</location>
            <body hash="5396dc64e7d949783b87c3d850fae5aa"><![CDATA[{
            MenuId = Convert.ToInt32(dr["MenuId"]);
            Identifier = dr["Identifier"].ToString();
            ModuleName = dr["ModuleName"].ToString();
            FolderName = Null.SetNullString(dr["FolderName"]);
            Controller = dr["Controller"].ToString();
            ResourceKey = dr["ResourceKey"].ToString();
            Path = dr["Path"].ToString();
            Link = dr["Link"].ToString();
            CssClass = dr["CssClass"].ToString();
            AllowHost = Convert.ToBoolean(dr["AllowHost"]);
            Enabled = Convert.ToBoolean(dr["Enabled"]);
            ParentId = Null.SetNullInteger(dr["ParentId"]);
            Order = Null.SetNullInteger(dr["Order"]);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_parent">
          <declaration><![CDATA[private string _parent;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="AllowHost">
          <declaration><![CDATA[public bool AllowHost]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="57" sc="33" el="57" ec="37">Model\MenuItem.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="57" sc="38" el="57" ec="42">Model\MenuItem.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Children">
          <declaration><![CDATA[public IList<MenuItem> Children]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="111" sc="43" el="111" ec="47">Model\MenuItem.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="111" sc="48" el="111" ec="52">Model\MenuItem.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Controller">
          <declaration><![CDATA[public string Controller]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="36" sc="36" el="36" ec="40">Model\MenuItem.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="36" sc="41" el="36" ec="45">Model\MenuItem.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="CssClass">
          <declaration><![CDATA[public string CssClass]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="48" sc="34" el="48" ec="38">Model\MenuItem.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="48" sc="39" el="48" ec="43">Model\MenuItem.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="DisplayName">
          <declaration><![CDATA[public string DisplayName]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="89" sc="13" el="104" ec="14">Model\MenuItem.cs</location>
            <body hash="251fdb675aface846e23d07573348607"><![CDATA[{
                var resourcesPath = System.IO.Path.Combine(Constants.PersonaBarModulesPath, Identifier, "App_LocalResources", ModuleName + ".resx");
                var displayName = Localization.GetString(ResourceKey, resourcesPath);
                if (string.IsNullOrEmpty(displayName))
                {
                    resourcesPath = System.IO.Path.Combine(Constants.PersonaBarRelativePath, "App_LocalResources", "PersonaBar.resx");
                    displayName = Localization.GetString(ResourceKey, resourcesPath);
                }

                if (string.IsNullOrEmpty(displayName))
                {
                    displayName = ResourceKey;
                }

                return displayName;
            }]]></body>
          </codeblock>
        </property>
        <property name="Enabled">
          <declaration><![CDATA[public bool Enabled]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="60" sc="31" el="60" ec="35">Model\MenuItem.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="60" sc="36" el="60" ec="40">Model\MenuItem.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="FolderName">
          <declaration><![CDATA[public string FolderName]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="33" sc="36" el="33" ec="40">Model\MenuItem.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="33" sc="41" el="33" ec="45">Model\MenuItem.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Identifier">
          <declaration><![CDATA[public string Identifier]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="27" sc="36" el="27" ec="40">Model\MenuItem.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="27" sc="41" el="27" ec="45">Model\MenuItem.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="KeyID">
          <declaration><![CDATA[public int KeyID]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Link">
          <declaration><![CDATA[public string Link]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="45" sc="30" el="45" ec="34">Model\MenuItem.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="45" sc="35" el="45" ec="39">Model\MenuItem.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="MenuId">
          <declaration><![CDATA[public int MenuId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="24" sc="29" el="24" ec="33">Model\MenuItem.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="24" sc="34" el="24" ec="38">Model\MenuItem.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ModuleName">
          <declaration><![CDATA[public string ModuleName]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="30" sc="36" el="30" ec="40">Model\MenuItem.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="30" sc="41" el="30" ec="45">Model\MenuItem.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Order">
          <declaration><![CDATA[public int Order]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="54" sc="28" el="54" ec="32">Model\MenuItem.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="54" sc="33" el="54" ec="37">Model\MenuItem.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Parent">
          <declaration><![CDATA[public string Parent]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="66" sc="13" el="82" ec="14">Model\MenuItem.cs</location>
            <body hash="b2cd2ebb0da66a1247c6f189633504f1"><![CDATA[{
                if (ParentId == Null.NullInteger)
                {
                    return string.Empty;
                }

                if (string.IsNullOrEmpty(_parent))
                {
                    var parentItem = PersonaBarRepository.Instance.GetMenuItem(ParentId);
                    if (parentItem != null)
                    {
                        _parent = parentItem.Identifier;
                    }
                }

                return _parent;
            }]]></body>
          </codeblock>
        </property>
        <property name="ParentId">
          <declaration><![CDATA[public int ParentId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="51" sc="31" el="51" ec="35">Model\MenuItem.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="51" sc="36" el="51" ec="40">Model\MenuItem.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Path">
          <declaration><![CDATA[public string Path]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="42" sc="30" el="42" ec="34">Model\MenuItem.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="42" sc="35" el="42" ec="39">Model\MenuItem.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ResourceKey">
          <declaration><![CDATA[public string ResourceKey]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="39" sc="37" el="39" ec="41">Model\MenuItem.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="39" sc="42" el="39" ec="46">Model\MenuItem.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Settings">
          <declaration><![CDATA[public string Settings]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="108" sc="34" el="108" ec="38">Model\MenuItem.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="108" sc="39" el="108" ec="43">Model\MenuItem.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="MenuPermissionInfo">
      <declaration><![CDATA[public class MenuPermissionInfo : PermissionInfoBase, IHydratable]]></declaration>
      <documentation>-----------------------------------------------------------------------------
 Project	 : DotNetNuke
 Namespace: DotNetNuke.Security.Permissions
 Class	 : MenuPermissionInfo
 -----------------------------------------------------------------------------
 <summary>
 MenuPermissionInfo provides the Entity Layer for Module Permissions
 </summary>
 -----------------------------------------------------------------------------</documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public MenuPermissionInfo()]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 Constructs a new MenuPermissionInfo
 </summary>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="62" sc="9" el="66" ec="10">Model\MenuPermissionInfo.cs</location>
            <body hash="316ca8e6557b7d9e734f42a264a83a0e"><![CDATA[public MenuPermissionInfo()
        {
            _menuPermissionId = Null.NullInteger;
            _menuId = Null.NullInteger;
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[public MenuPermissionInfo(PermissionInfo permission) : this()]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 Constructs a new MenuPermissionInfo
 </summary>
 <param name="permission">A PermissionInfo object</param>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="74" sc="64" el="81" ec="10">Model\MenuPermissionInfo.cs</location>
            <body hash="ce233d6a23344cd6ba8636d20472a1c8"><![CDATA[this()
        {
            ModuleDefID = Null.NullInteger;
            PermissionCode = "PERSONABAR_MENU";
            PermissionID = permission.PermissionId;
            PermissionKey = permission.PermissionKey;
            PermissionName = permission.PermissionName;
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="Equals">
          <declaration><![CDATA[public bool Equals(MenuPermissionInfo other)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 Compares if two MenuPermissionInfo objects are equivalent/equal
 </summary>
 <param name="other">a ModulePermissionObject</param>
 <returns>true if the permissions being passed represents the same permission
 in the current object
 </returns>
 <remarks>
 This function is needed to prevent adding duplicates to the ModulePermissionCollection.
 ModulePermissionCollection.Contains will use this method to check if a given permission
 is already included in the collection.
 </remarks>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="184" sc="9" el="194" ec="10">Model\MenuPermissionInfo.cs</location>
            <body hash="48b220ef9da9d78f2fe8df2b5dbd9136"><![CDATA[{
            if (ReferenceEquals(null, other))
            {
                return false;
            }
            if (ReferenceEquals(this, other))
            {
                return true;
            }
            return (AllowAccess == other.AllowAccess) && (MenuId == other.MenuId) && (RoleID == other.RoleID) && (PermissionID == other.PermissionID);
        }]]></body>
          </codeblock>
        </method>
        <method name="Equals">
          <declaration><![CDATA[public override bool Equals(object obj)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 Compares if two MenuPermissionInfo objects are equivalent/equal
 </summary>
 <param name="obj">a ModulePermissionObject</param>
 <returns>true if the permissions being passed represents the same permission
 in the current object
 </returns>
 <remarks>
 This function is needed to prevent adding duplicates to the ModulePermissionCollection.
 ModulePermissionCollection.Contains will use this method to check if a given permission
 is already included in the collection.
 </remarks>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="211" sc="9" el="225" ec="10">Model\MenuPermissionInfo.cs</location>
            <body hash="60c73d5734e159e623c461cb2a2a1433"><![CDATA[{
            if (ReferenceEquals(null, obj))
            {
                return false;
            }
            if (ReferenceEquals(this, obj))
            {
                return true;
            }
            if (obj.GetType() != typeof (MenuPermissionInfo))
            {
                return false;
            }
            return Equals((MenuPermissionInfo) obj);
        }]]></body>
          </codeblock>
        </method>
        <method name="Fill">
          <declaration><![CDATA[public void Fill(IDataReader dr)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 Fills a MenuPermissionInfo from a Data Reader
 </summary>
 <param name="dr">The Data Reader to use</param>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="139" sc="9" el="144" ec="10">Model\MenuPermissionInfo.cs</location>
            <body hash="66eeae130e7d238edce9a5a7f94968ad"><![CDATA[{
            base.FillInternal(dr);
            MenuPermissionId = Null.SetNullInteger(dr["MenuPermissionId"]);
            MenuId = Null.SetNullInteger(dr["MenuId"]);
            PortalId = Null.SetNullInteger(dr["PortalId"]);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetHashCode">
          <declaration><![CDATA[public override int GetHashCode()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="228" sc="9" el="233" ec="10">Model\MenuPermissionInfo.cs</location>
            <body hash="08d1ac984f1ccc12ecc396becf55e703"><![CDATA[{
            unchecked
            {
                return (_menuId * 397) ^ _menuPermissionId;
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_menuId">
          <declaration><![CDATA[private int _menuId;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_menuPermissionId">
          <declaration><![CDATA[private int _menuPermissionId;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="KeyID">
          <declaration><![CDATA[public int KeyID]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 Gets and sets the Key ID
 </summary>
 <returns>An Integer</returns>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="156" sc="13" el="158" ec="14">Model\MenuPermissionInfo.cs</location>
            <body hash="1d9c74664bcbae880a77e7d4b794acac"><![CDATA[{
                return MenuPermissionId;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="160" sc="13" el="162" ec="14">Model\MenuPermissionInfo.cs</location>
            <body hash="1bd0e611e7673cf78dc78a458cbab60c"><![CDATA[{
                MenuPermissionId = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="MenuId">
          <declaration><![CDATA[public int MenuId]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 Gets and sets the Module ID
 </summary>
 <returns>An Integer</returns>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="116" sc="13" el="118" ec="14">Model\MenuPermissionInfo.cs</location>
            <body hash="49549ee502453e9d63a745bc3782bc1c"><![CDATA[{
                return _menuId;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="120" sc="13" el="122" ec="14">Model\MenuPermissionInfo.cs</location>
            <body hash="6ed743d2191c379ac582948b242217c9"><![CDATA[{
                _menuId = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="MenuPermissionId">
          <declaration><![CDATA[public int MenuPermissionId]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 Gets and sets the Module Permission ID
 </summary>
 <returns>An Integer</returns>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="97" sc="13" el="99" ec="14">Model\MenuPermissionInfo.cs</location>
            <body hash="ee4a638ca2dc7e2f612cb81fbafffcad"><![CDATA[{
                return _menuPermissionId;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="101" sc="13" el="103" ec="14">Model\MenuPermissionInfo.cs</location>
            <body hash="97611c99576e6ff0d6c0b4333064d97a"><![CDATA[{
                _menuPermissionId = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="PortalId">
          <declaration><![CDATA[public int PortalId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="126" sc="31" el="126" ec="35">Model\MenuPermissionInfo.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="126" sc="36" el="126" ec="40">Model\MenuPermissionInfo.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="PermissionInfo">
      <declaration><![CDATA[public class PermissionInfo : BaseEntityInfo, IHydratable]]></declaration>
      <documentation>-----------------------------------------------------------------------------
 Project	 : DotNetNuke
 Namespace: DotNetNuke.Security.Permissions
 Class	 : MenuPermissionInfo
 -----------------------------------------------------------------------------
 <summary>
 MenuPermissionInfo provides the Entity Layer for Module Permissions
 </summary>
 -----------------------------------------------------------------------------</documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public PermissionInfo()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="Fill">
          <declaration><![CDATA[public void Fill(IDataReader dr)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 Fills a MenuPermissionInfo from a Data Reader
 </summary>
 <param name="dr">The Data Reader to use</param>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="72" sc="9" el="80" ec="10">Model\PermissionInfo.cs</location>
            <body hash="de643fc1afc0564b421a9b191f74cea5"><![CDATA[{
            base.FillInternal(dr);

            
            PermissionId = Null.SetNullInteger(dr["PermissionId"]);
            MenuId = Null.SetNullInteger(dr["MenuId"]);
            PermissionKey = Null.SetNullString(dr["PermissionKey"]);
            PermissionName = Null.SetNullString(dr["PermissionName"]);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="KeyID">
          <declaration><![CDATA[public int KeyID]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 Gets and sets the Key ID
 </summary>
 <returns>An Integer</returns>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="92" sc="13" el="94" ec="14">Model\PermissionInfo.cs</location>
            <body hash="6ba45204c908810230b82f02cf9a34c7"><![CDATA[{
                return PermissionId;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="96" sc="13" el="98" ec="14">Model\PermissionInfo.cs</location>
            <body hash="36b7a898bf038f4a7ffeaae0d442aef0"><![CDATA[{
                PermissionId = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="MenuId">
          <declaration><![CDATA[public int MenuId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="53" sc="29" el="53" ec="33">Model\PermissionInfo.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="53" sc="34" el="53" ec="38">Model\PermissionInfo.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="PermissionId">
          <declaration><![CDATA[public int PermissionId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="50" sc="35" el="50" ec="39">Model\PermissionInfo.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="50" sc="40" el="50" ec="44">Model\PermissionInfo.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="PermissionKey">
          <declaration><![CDATA[public string PermissionKey]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="56" sc="39" el="56" ec="43">Model\PermissionInfo.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="56" sc="44" el="56" ec="48">Model\PermissionInfo.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="PermissionName">
          <declaration><![CDATA[public string PermissionName]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="59" sc="40" el="59" ec="44">Model\PermissionInfo.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="59" sc="45" el="59" ec="49">Model\PermissionInfo.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="PersonaBarExtension">
      <declaration><![CDATA[public class PersonaBarExtension : IHydratable]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public PersonaBarExtension()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="Fill">
          <declaration><![CDATA[public void Fill(IDataReader dr)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="46" sc="9" el="56" ec="10">Model\PersonaBarExtension.cs</location>
            <body hash="8009c50adf34938da3cbee8923d4f28e"><![CDATA[{
            ExtensionId = Convert.ToInt32(dr["ExtensionId"]);
            Identifier = dr["Identifier"].ToString();
            FolderName = Null.SetNullString(dr["FolderName"]);
            MenuId = Convert.ToInt32(dr["MenuId"]);
            Controller = dr["Controller"].ToString();
            Container = dr["Container"].ToString();
            Path = dr["Path"].ToString();
            Order = Null.SetNullInteger(dr["Order"]);
            Enabled = Convert.ToBoolean(dr["Enabled"]);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="Container">
          <declaration><![CDATA[public string Container]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="34" sc="35" el="34" ec="39">Model\PersonaBarExtension.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="34" sc="40" el="34" ec="44">Model\PersonaBarExtension.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Controller">
          <declaration><![CDATA[public string Controller]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="31" sc="36" el="31" ec="40">Model\PersonaBarExtension.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="31" sc="41" el="31" ec="45">Model\PersonaBarExtension.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Enabled">
          <declaration><![CDATA[public bool Enabled]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="43" sc="31" el="43" ec="35">Model\PersonaBarExtension.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="43" sc="36" el="43" ec="40">Model\PersonaBarExtension.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ExtensionId">
          <declaration><![CDATA[public int ExtensionId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="19" sc="34" el="19" ec="38">Model\PersonaBarExtension.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="19" sc="39" el="19" ec="43">Model\PersonaBarExtension.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="FolderName">
          <declaration><![CDATA[public string FolderName]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="28" sc="36" el="28" ec="40">Model\PersonaBarExtension.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="28" sc="41" el="28" ec="45">Model\PersonaBarExtension.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Identifier">
          <declaration><![CDATA[public string Identifier]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="22" sc="36" el="22" ec="40">Model\PersonaBarExtension.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="22" sc="41" el="22" ec="45">Model\PersonaBarExtension.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="KeyID">
          <declaration><![CDATA[public int KeyID]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="MenuId">
          <declaration><![CDATA[public int MenuId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="25" sc="29" el="25" ec="33">Model\PersonaBarExtension.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="25" sc="34" el="25" ec="38">Model\PersonaBarExtension.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Order">
          <declaration><![CDATA[public int Order]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="40" sc="28" el="40" ec="32">Model\PersonaBarExtension.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="40" sc="33" el="40" ec="37">Model\PersonaBarExtension.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Path">
          <declaration><![CDATA[public string Path]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="37" sc="30" el="37" ec="34">Model\PersonaBarExtension.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="37" sc="35" el="37" ec="39">Model\PersonaBarExtension.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="PersonaBarMenu">
      <declaration><![CDATA[public class PersonaBarMenu]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private IList<MenuItem> <MenuItems>k__BackingField = new List<MenuItem>();]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="19" sc="58" el="19" ec="78">Model\PersonaBarMenu.cs</location>
            <body hash="18bed54fc9090b7b47248d563fea9bca"><![CDATA[new List<MenuItem>(]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="FillAllItems">
          <declaration><![CDATA[private void FillAllItems(IList<MenuItem> allItems, IList<MenuItem> menuItems)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="37" sc="9" el="43" ec="10">Model\PersonaBarMenu.cs</location>
            <body hash="865710b60c73da72559660fc86ea6d2c"><![CDATA[{
            foreach (var menu in menuItems)
            {
                allItems.Add(menu);
                FillAllItems(allItems, menu.Children);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_allItems">
          <declaration><![CDATA[private IList<MenuItem> _allItems;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="AllItems">
          <declaration><![CDATA[internal IList<MenuItem> AllItems]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="25" sc="13" el="33" ec="14">Model\PersonaBarMenu.cs</location>
            <body hash="a45f14cc63f3ffc88468d1567f70aa8f"><![CDATA[{
                if (_allItems == null)
                {
                    _allItems = new List<MenuItem>();
                    FillAllItems(_allItems, MenuItems);
                }

                return _allItems;
            }]]></body>
          </codeblock>
        </property>
        <property name="MenuItems">
          <declaration><![CDATA[public IList<MenuItem> MenuItems]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="19" sc="44" el="19" ec="48">Model\PersonaBarMenu.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="19" sc="49" el="19" ec="53">Model\PersonaBarMenu.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="Dnn.PersonaBar.Library.Permissions">
    <class name="CompareMenuPermissions">
      <declaration><![CDATA[internal class CompareMenuPermissions : IComparer]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public CompareMenuPermissions()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="Compare">
          <declaration><![CDATA[public int Compare(object x, object y)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="35" sc="9" el="37" ec="10">Permissions\CompareMenuPermissions.cs</location>
            <body hash="5b328f6d3213de7b23867c34fd276ad5"><![CDATA[{
            return ((MenuPermissionInfo) x).MenuPermissionId.CompareTo(((MenuPermissionInfo) y).MenuPermissionId);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="MenuPermissionCollection">
      <declaration><![CDATA[public class MenuPermissionCollection : CollectionBase]]></declaration>
      <documentation>-----------------------------------------------------------------------------</documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public MenuPermissionCollection()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="39" sc="9" el="41" ec="10">Permissions\MenuPermissionCollection.cs</location>
            <body hash="216035f440f1753e12c49cbdc7cbb557"><![CDATA[public MenuPermissionCollection()
        {
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[public MenuPermissionCollection(IList<MenuPermissionInfo> menuPermissions)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="43" sc="9" el="46" ec="10">Permissions\MenuPermissionCollection.cs</location>
            <body hash="4524c8135ca5586db6023482311e98fd"><![CDATA[public MenuPermissionCollection(IList<MenuPermissionInfo> menuPermissions)
        {
            AddRange(menuPermissions);
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[public MenuPermissionCollection(MenuPermissionCollection permissions)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="48" sc="9" el="51" ec="10">Permissions\MenuPermissionCollection.cs</location>
            <body hash="3e686cc69630b1fa50674819909fdbf8"><![CDATA[public MenuPermissionCollection(MenuPermissionCollection permissions)
        {
            AddRange(permissions);
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[public MenuPermissionCollection(ArrayList menuPermissions, int menuId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="53" sc="9" el="62" ec="10">Permissions\MenuPermissionCollection.cs</location>
            <body hash="7f94ff797bcf9f7b50814e8017c97230"><![CDATA[public MenuPermissionCollection(ArrayList menuPermissions, int menuId)
        {
            foreach (MenuPermissionInfo permission in menuPermissions)
            {
                if (permission.MenuId == menuId)
                {
                    Add(permission);
                }
            }
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="Add">
          <declaration><![CDATA[public int Add(MenuPermissionInfo value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="77" sc="9" el="79" ec="10">Permissions\MenuPermissionCollection.cs</location>
            <body hash="159c8b2f05fc30858504bc9b38381129"><![CDATA[{
            return List.Add(value);
        }]]></body>
          </codeblock>
        </method>
        <method name="Add">
          <declaration><![CDATA[public int Add(MenuPermissionInfo value, bool checkForDuplicates)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="82" sc="9" el="110" ec="10">Permissions\MenuPermissionCollection.cs</location>
            <body hash="875fe53d3c3dbc1366676abf7446a2de"><![CDATA[{
            int id = Null.NullInteger;
            if (!checkForDuplicates)
            {
                id = Add(value);
            }
            else
            {
                bool isMatch = false;
                foreach (MenuPermissionInfo permission in List)
                {
                    if (permission.PortalId == value.PortalId
                            && permission.MenuId == value.MenuId
                            && permission.PermissionID == value.PermissionID 
                            && permission.UserID == value.UserID 
                            && permission.RoleID == value.RoleID)
                    {
                        isMatch = true;
                        break;
                    }
                }
                if (!isMatch)
                {
                    id = Add(value);
                }
            }

            return id;
        }]]></body>
          </codeblock>
        </method>
        <method name="AddRange">
          <declaration><![CDATA[public void AddRange(ArrayList menuPermissions)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="113" sc="9" el="115" ec="10">Permissions\MenuPermissionCollection.cs</location>
            <body hash="a2dbd1823bf926efea111211c3b30c7d"><![CDATA[{
            AddRange(menuPermissions.Cast<MenuPermissionInfo>().ToList());
        }]]></body>
          </codeblock>
        </method>
        <method name="AddRange">
          <declaration><![CDATA[public void AddRange(IList<MenuPermissionInfo> menuPermissions)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="118" sc="9" el="123" ec="10">Permissions\MenuPermissionCollection.cs</location>
            <body hash="d63a5b3817504d6b177eeffaa26ebc98"><![CDATA[{
            foreach (MenuPermissionInfo permission in menuPermissions)
            {
                Add(permission);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="AddRange">
          <declaration><![CDATA[public void AddRange(MenuPermissionCollection menuPermissions)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="126" sc="9" el="131" ec="10">Permissions\MenuPermissionCollection.cs</location>
            <body hash="d63a5b3817504d6b177eeffaa26ebc98"><![CDATA[{
            foreach (MenuPermissionInfo permission in menuPermissions)
            {
                Add(permission);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="CompareTo">
          <declaration><![CDATA[public bool CompareTo(MenuPermissionCollection menuPermissionCollection)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="134" sc="9" el="150" ec="10">Permissions\MenuPermissionCollection.cs</location>
            <body hash="b408d20ade808706717186f41d7c974f"><![CDATA[{
            if (menuPermissionCollection.Count != Count)
            {
                return false;
            }
            InnerList.Sort(new CompareMenuPermissions());
            menuPermissionCollection.InnerList.Sort(new CompareMenuPermissions());
            for (int i = 0; i <= Count - 1; i++)
            {
                if (menuPermissionCollection[i].MenuPermissionId != this[i].MenuPermissionId 
                    || menuPermissionCollection[i].AllowAccess != this[i].AllowAccess)
                {
                    return false;
                }
            }
            return true;
        }]]></body>
          </codeblock>
        </method>
        <method name="Contains">
          <declaration><![CDATA[public bool Contains(MenuPermissionInfo value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="153" sc="9" el="155" ec="10">Permissions\MenuPermissionCollection.cs</location>
            <body hash="d20c32a5e63365068d301ea922657cde"><![CDATA[{
            return List.Contains(value);
        }]]></body>
          </codeblock>
        </method>
        <method name="IndexOf">
          <declaration><![CDATA[public int IndexOf(MenuPermissionInfo value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="158" sc="9" el="160" ec="10">Permissions\MenuPermissionCollection.cs</location>
            <body hash="f4423ee35eb0ad36d01cb102b34e7dd2"><![CDATA[{
            return List.IndexOf(value);
        }]]></body>
          </codeblock>
        </method>
        <method name="Insert">
          <declaration><![CDATA[public void Insert(int index, MenuPermissionInfo value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="163" sc="9" el="165" ec="10">Permissions\MenuPermissionCollection.cs</location>
            <body hash="29d857179ece5d364c408e998bc9afb6"><![CDATA[{
            List.Insert(index, value);
        }]]></body>
          </codeblock>
        </method>
        <method name="Remove">
          <declaration><![CDATA[public void Remove(MenuPermissionInfo value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="168" sc="9" el="170" ec="10">Permissions\MenuPermissionCollection.cs</location>
            <body hash="5f06fe14d0312ed42ccd87d3bd3fa13e"><![CDATA[{
            List.Remove(value);
        }]]></body>
          </codeblock>
        </method>
        <method name="Remove">
          <declaration><![CDATA[public void Remove(int permissionId, int roleId, int userId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="173" sc="9" el="182" ec="10">Permissions\MenuPermissionCollection.cs</location>
            <body hash="2acc4d7597ff63833e0801d9c8c685f3"><![CDATA[{
            foreach (PermissionInfoBase permission in List)
            {
                if (permission.PermissionID == permissionId && permission.UserID == userId && permission.RoleID == roleId)
                {
                    List.Remove(permission);
                    break;
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="ToList">
          <declaration><![CDATA[public List<PermissionInfoBase> ToList()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="185" sc="9" el="192" ec="10">Permissions\MenuPermissionCollection.cs</location>
            <body hash="6765df5e81fdb792b50881f8ba0f5d30"><![CDATA[{
            var list = new List<PermissionInfoBase>();
            foreach (PermissionInfoBase permission in List)
            {
                list.Add(permission);
            }
            return list;
        }]]></body>
          </codeblock>
        </method>
        <method name="ToString">
          <declaration><![CDATA[public string ToString(string key)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="195" sc="9" el="197" ec="10">Permissions\MenuPermissionCollection.cs</location>
            <body hash="81743b9ae3a34e7185c2147ca253bb45"><![CDATA[{
            return PermissionController.BuildPermissions(List, key);
        }]]></body>
          </codeblock>
        </method>
        <method name="Where">
          <declaration><![CDATA[public IEnumerable<MenuPermissionInfo> Where(Func<MenuPermissionInfo, bool> predicate)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="200" sc="9" el="202" ec="10">Permissions\MenuPermissionCollection.cs</location>
            <body hash="f8378da07b8616e3f5cca5bca6a82afb"><![CDATA[{
            return this.Cast<MenuPermissionInfo>().Where(predicate);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="Item">
          <declaration><![CDATA[public MenuPermissionInfo this[int index]]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="67" sc="13" el="69" ec="14">Permissions\MenuPermissionCollection.cs</location>
            <body hash="a17e43a82ff68cfa6ec12ae6f6fd1af6"><![CDATA[{
                return (MenuPermissionInfo) List[index];
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="71" sc="13" el="73" ec="14">Permissions\MenuPermissionCollection.cs</location>
            <body hash="317ffc941817052353a1a004fbfa9af4"><![CDATA[{
                List[index] = value;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="MenuPermissionController">
      <declaration><![CDATA[public class MenuPermissionController]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public MenuPermissionController()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
        <constructor name=".cctor">
          <declaration><![CDATA[static MenuPermissionController()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="45" sc="9" el="49" ec="79">Permissions\MenuPermissionController.cs</location>
            <body hash="e1a54f4aeca2cc686a3e1ab131dcd0f5"><![CDATA[private static readonly DnnLogger Logger = DnnLogger.GetClassLogger(typeof(MenuPermissionController));
        
        private static readonly IDataService DataService = new DataService();
        private static readonly object ThreadLocker = new object();
        private static readonly object DefaultPermissionLocker = new object();]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="CanView">
          <declaration><![CDATA[public static bool CanView(int portalId, MenuItem menu)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="62" sc="9" el="64" ec="10">Permissions\MenuPermissionController.cs</location>
            <body hash="6d42e6bb6b06203aee9a80fb5fd1b0aa"><![CDATA[{
            return HasMenuPermission(GetMenuPermissions(portalId, menu.MenuId), ViewPermissionKey);
        }]]></body>
          </codeblock>
        </method>
        <method name="ClearCache">
          <declaration><![CDATA[private static void ClearCache(int portalId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="344" sc="9" el="354" ec="10">Permissions\MenuPermissionController.cs</location>
            <body hash="b7f70c23069cdfe645af45192b6d3ebc"><![CDATA[{
            if (portalId > Null.NullInteger)
            {
                var cacheKey = GetCacheKey(portalId);
                DataCache.RemoveCache(cacheKey);
            }
            else
            {
                DataCache.RemoveCache(PersonaBarPermissionsCacheKey);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteMenuPermissions">
          <declaration><![CDATA[public static void DeleteMenuPermissions(int portalId, MenuItem menu)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="67" sc="9" el="70" ec="10">Permissions\MenuPermissionController.cs</location>
            <body hash="c8ec0cb6240efcd6d378a90b4d7d639c"><![CDATA[{
            DataService.DeletePersonbaBarMenuPermissionsByMenuId(portalId, menu.MenuId);
            ClearCache(portalId);
        }]]></body>
          </codeblock>
        </method>
        <method name="DeletePersonaBarPermission">
          <declaration><![CDATA[public static void DeletePersonaBarPermission(int menuId, string permissionKey)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="205" sc="9" el="214" ec="10">Permissions\MenuPermissionController.cs</location>
            <body hash="3f99f51e39e1496d93ddf4928603c5fd"><![CDATA[{
            var permission = GetAllPermissions().FirstOrDefault(p => p.MenuId == menuId && p.PermissionKey == permissionKey);

            if (permission != null)
            {
                DataService.DeletePersonaBarPermission(permission.PermissionId);
            }

            ClearCache(Null.NullInteger);
        }]]></body>
          </codeblock>
        </method>
        <method name="EnsureMenuDefaultPermissions">
          <declaration><![CDATA[private static void EnsureMenuDefaultPermissions(int portalId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="231" sc="9" el="268" ec="10">Permissions\MenuPermissionController.cs</location>
            <body hash="d9075c8bad4875a657d364dc2235b551"><![CDATA[{
            try
            {
                var permissionInitialized = PermissionAlreadyInitialized(portalId);
                if (!permissionInitialized)
                {
                    lock (DefaultPermissionLocker)
                    {
                        permissionInitialized = PermissionAlreadyInitialized(portalId);
                        if (!permissionInitialized)
                        {
                            var menuItems = PersonaBarRepository.Instance.GetMenu().AllItems;
                            foreach (var menuItem in menuItems)
                            {
                                var defaultPermissions = PersonaBarRepository.Instance.GetMenuDefaultPermissions(menuItem.MenuId);
                                if (!string.IsNullOrEmpty(defaultPermissions))
                                {
                                    foreach (var roleName in defaultPermissions.Split(','))
                                    {
                                        if (!string.IsNullOrEmpty(roleName.Trim()))
                                        {
                                            SaveMenuDefaultPermissions(portalId, menuItem, roleName.Trim(), true);
                                        }
                                    }
                                }
                            }

                            SetPermissionIntialized(portalId);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Logger.Error(ex);
            }

        }]]></body>
          </codeblock>
        </method>
        <method name="GetAllPermissions">
          <declaration><![CDATA[private static IList<PermissionInfo> GetAllPermissions()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="362" sc="9" el="366" ec="10">Permissions\MenuPermissionController.cs</location>
            <body hash="ac7f12ade22c4443662e4fe47cc9929c"><![CDATA[{
            var cacheItemArgs = new CacheItemArgs(PersonaBarPermissionsCacheKey, 20, CacheItemPriority.AboveNormal);
            return CBO.GetCachedObject<IList<PermissionInfo>>(cacheItemArgs, c =>
                CBO.FillCollection<PermissionInfo>(DataService.GetPersonaBarPermissions()));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetCacheKey">
          <declaration><![CDATA[private static string GetCacheKey(int portalId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="357" sc="9" el="359" ec="10">Permissions\MenuPermissionController.cs</location>
            <body hash="aaa569e637fda1ad99778aec551fca1b"><![CDATA[{
            return string.Format(PersonaBarMenuPermissionsCacheKey, portalId);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetMenuPermissions">
          <declaration><![CDATA[public static MenuPermissionCollection GetMenuPermissions(int portalId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="73" sc="9" el="109" ec="10">Permissions\MenuPermissionController.cs</location>
            <body hash="d8ba64d8d4a7eeb9faf5a11cfaab735c"><![CDATA[{
            var cacheKey = GetCacheKey(portalId);
            var permissions = DataCache.GetCache<MenuPermissionCollection>(cacheKey);
            if (permissions == null)
            {
                lock (ThreadLocker)
                {
                    permissions = DataCache.GetCache<MenuPermissionCollection>(cacheKey);
                    if (permissions == null)
                    {
                        permissions = new MenuPermissionCollection();
                        EnsureMenuDefaultPermissions(portalId);
                        var reader = DataService.GetPersonbaBarMenuPermissionsByPortal(portalId);
                        try
                        {
                            while (reader.Read())
                            {
                                var permissionInfo = CBO.FillObject<MenuPermissionInfo>(reader, false);
                                permissions.Add(permissionInfo, true);
                            }

                            DataCache.SetCache(cacheKey, permissions);
                        }
                        catch (Exception ex)
                        {
                            Logger.Error(ex);
                        }
                        finally
                        {
                            CBO.CloseDataReader(reader, true);
                        }
                    }
                }
            }

            return permissions;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetMenuPermissions">
          <declaration><![CDATA[public static MenuPermissionCollection GetMenuPermissions(int portalId, string identifier)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="112" sc="9" el="120" ec="10">Permissions\MenuPermissionController.cs</location>
            <body hash="a87270814a3d3f9b255849adc65d225e"><![CDATA[{
            var menu = PersonaBarRepository.Instance.GetMenuItem(identifier);
            if (menu == null)
            {
                return null;
            }

            return GetMenuPermissions(portalId, menu.MenuId);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetMenuPermissions">
          <declaration><![CDATA[public static MenuPermissionCollection GetMenuPermissions(int portalId, int menuId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="123" sc="9" el="128" ec="10">Permissions\MenuPermissionController.cs</location>
            <body hash="35b4a043db7dde745f8d02c3e975f833"><![CDATA[{
            var permissions = GetMenuPermissions(portalId)
                    .Cast<MenuPermissionInfo>()
                    .Where(p => p.MenuId == menuId && (p.PortalId == Null.NullInteger || p.PortalId == portalId)).ToList();
            return new MenuPermissionCollection(permissions);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPermissions">
          <declaration><![CDATA[public static IList<PermissionInfo> GetPermissions(int menuId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="173" sc="9" el="177" ec="10">Permissions\MenuPermissionController.cs</location>
            <body hash="733f8f846a3e1db3c10b20c224f95597"><![CDATA[{
            return GetAllPermissions()
                .Where(p => p.MenuId == Null.NullInteger || p.MenuId == menuId)
                .ToList();
        }]]></body>
          </codeblock>
        </method>
        <method name="HasMenuPermission">
          <declaration><![CDATA[public static bool HasMenuPermission(int portalId, MenuItem menu, string permissionKey)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="131" sc="9" el="133" ec="10">Permissions\MenuPermissionController.cs</location>
            <body hash="c00dcdb6cb651c626ba02e2dabe7f54c"><![CDATA[{
            return HasMenuPermission(GetMenuPermissions(portalId, menu.MenuId), permissionKey);
        }]]></body>
          </codeblock>
        </method>
        <method name="HasMenuPermission">
          <declaration><![CDATA[public static bool HasMenuPermission(MenuPermissionCollection menuPermissions, string permissionKey)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="136" sc="9" el="154" ec="10">Permissions\MenuPermissionController.cs</location>
            <body hash="f2e95f6441e42162d8f1ed60d18a1a26"><![CDATA[{
            bool hasPermission = Null.NullBoolean;
            if (permissionKey.Contains(","))
            {
                foreach (string permission in permissionKey.Split(','))
                {
                    if (PortalSecurity.IsInRoles(menuPermissions.ToString(permission)))
                    {
                        hasPermission = true;
                        break;
                    }
                }
            }
            else
            {
                hasPermission = PortalSecurity.IsInRoles(menuPermissions.ToString(permissionKey));
            }
            return hasPermission;
        }]]></body>
          </codeblock>
        </method>
        <method name="PermissionAlreadyInitialized">
          <declaration><![CDATA[public static bool PermissionAlreadyInitialized(int portalId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="217" sc="9" el="219" ec="10">Permissions\MenuPermissionController.cs</location>
            <body hash="1aa380d401537ecca4012b176b7098b7"><![CDATA[{
            return PortalController.Instance.GetPortalSettings(portalId).ContainsKey(PermissionInitializedKey);
        }]]></body>
          </codeblock>
        </method>
        <method name="SaveMenuDefaultPermissions">
          <declaration><![CDATA[public static void SaveMenuDefaultPermissions(int portalId, MenuItem menuItem, string roleName)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="180" sc="9" el="182" ec="10">Permissions\MenuPermissionController.cs</location>
            <body hash="ef3c8b0ca3672c73f5a3c19e3151ace3"><![CDATA[{
            SaveMenuDefaultPermissions(portalId, menuItem, roleName, false);
        }]]></body>
          </codeblock>
        </method>
        <method name="SaveMenuDefaultPermissions">
          <declaration><![CDATA[private static void SaveMenuDefaultPermissions(int portalId, MenuItem menuItem, string roleName, bool ignoreExists)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="271" sc="9" el="341" ec="10">Permissions\MenuPermissionController.cs</location>
            <body hash="757f463398ac0d50e4e6e55e66c2ac44"><![CDATA[{
            try
            {
                var defaultPermissions = roleName.Split(new[] {'|'}, StringSplitOptions.RemoveEmptyEntries).ToList();
                if (defaultPermissions.Count > 1)
                {
                    roleName = defaultPermissions[0];
                }
                defaultPermissions.RemoveAt(0);
                var administratorRole = PortalController.Instance.GetPortal(portalId).AdministratorRoleName;

                var nullRoleId = Convert.ToInt32(Globals.glbRoleNothing);
                var permissions = GetPermissions(menuItem.MenuId)
                    .Where(p => p.MenuId == Null.NullInteger 
                                    || roleName == administratorRole
                                    || defaultPermissions.Contains(p.PermissionKey));

                var roleId = nullRoleId;
                switch (roleName)
                {
                    case Globals.glbRoleUnauthUserName:
                        roleId = Convert.ToInt32(Globals.glbRoleUnauthUser);
                        break;
                    case Globals.glbRoleAllUsersName:
                        roleId = Convert.ToInt32(Globals.glbRoleAllUsers);
                        break;
                    default:
                        var role = RoleController.Instance.GetRoleByName(portalId, roleName);
                        if (role != null && role.IsSystemRole)
                        {
                            roleId = role.RoleID;
                        }
                        else if(role != null)
                        {
                            Logger.Error($"Role \"{roleName}\" in portal \"{portalId}\" doesn't marked as system role, will ignore add this default permission to {menuItem.Identifier}.");
                        }
                        break;
                }

                if (roleId > nullRoleId)
                {
                    if (!ignoreExists)
                    {
                        var menuPermissions = GetMenuPermissions(portalId, menuItem.MenuId);
                        permissions =
                            permissions.Where(
                                x =>
                                    !menuPermissions.ToList()
                                        .Exists(y => y.PermissionID == x.PermissionId && y.RoleID == roleId));
                    }
                    foreach (var permission in permissions)
                    {
                        var menuPermissionInfo = new MenuPermissionInfo
                        {
                            MenuPermissionId = Null.NullInteger,
                            MenuId = menuItem.MenuId,
                            PermissionID = permission.PermissionId,
                            RoleID = roleId,
                            UserID = Null.NullInteger,
                            AllowAccess = true
                        };

                        SaveMenuPermissions(portalId, menuItem, menuPermissionInfo);
                    }
                }
            }
            catch (Exception ex)
            {
                Logger.Error(ex);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="SaveMenuPermissions">
          <declaration><![CDATA[public static void SaveMenuPermissions(int portalId, MenuItem menu, MenuPermissionInfo permissionInfo)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="157" sc="9" el="170" ec="10">Permissions\MenuPermissionController.cs</location>
            <body hash="43cbb43a900476909861df5a3a6ff226"><![CDATA[{
            var user = UserController.Instance.GetCurrentUserInfo();

            permissionInfo.MenuPermissionId = DataService.SavePersonaBarMenuPermission(
                portalId, 
                menu.MenuId, 
                permissionInfo.PermissionID,
                permissionInfo.RoleID, 
                permissionInfo.UserID, 
                permissionInfo.AllowAccess, 
                user.UserID);

            ClearCache(portalId);
        }]]></body>
          </codeblock>
        </method>
        <method name="SavePersonaBarPermission">
          <declaration><![CDATA[public static void SavePersonaBarPermission(string menuIdentifier, string permissionKey, string permissionName)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="185" sc="9" el="193" ec="10">Permissions\MenuPermissionController.cs</location>
            <body hash="a1dd3e6c19a3b7337a800397d80ce021"><![CDATA[{
            var menu = PersonaBarRepository.Instance.GetMenuItem(menuIdentifier);
            if (menu == null)
            {
                return;
            }

            SavePersonaBarPermission(menu.MenuId, permissionKey, permissionName);
        }]]></body>
          </codeblock>
        </method>
        <method name="SavePersonaBarPermission">
          <declaration><![CDATA[public static void SavePersonaBarPermission(int menuId, string permissionKey, string permissionName)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="196" sc="9" el="202" ec="10">Permissions\MenuPermissionController.cs</location>
            <body hash="3f408c3f2bd0e26b3579bd8e6215527e"><![CDATA[{
            var user = UserController.Instance.GetCurrentUserInfo();

            DataService.SavePersonaBarPermission(menuId, permissionKey, permissionName, user.UserID);

            ClearCache(Null.NullInteger);
        }]]></body>
          </codeblock>
        </method>
        <method name="SetPermissionIntialized">
          <declaration><![CDATA[private static void SetPermissionIntialized(int portalId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="226" sc="9" el="228" ec="10">Permissions\MenuPermissionController.cs</location>
            <body hash="a075b7fc88bd3672639faeb24065350b"><![CDATA[{
            PortalController.UpdatePortalSetting(portalId, PermissionInitializedKey, "Y");
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="DataService">
          <declaration><![CDATA[private static readonly IDataService DataService = new DataService();]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="DefaultPermissionLocker">
          <declaration><![CDATA[private static readonly object DefaultPermissionLocker = new object();]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Logger">
          <declaration><![CDATA[private static readonly DnnLogger Logger = DnnLogger.GetClassLogger(typeof(MenuPermissionController));]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="PermissionInitializedKey">
          <declaration><![CDATA[private const string PermissionInitializedKey = "PersonaBarMenuPermissionsInitialized";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="PersonaBarMenuPermissionsCacheKey">
          <declaration><![CDATA[private const string PersonaBarMenuPermissionsCacheKey = "PersonaBarMenuPermissions{0}";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="PersonaBarPermissionsCacheKey">
          <declaration><![CDATA[private const string PersonaBarPermissionsCacheKey = "PersonaBarPermissions";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ThreadLocker">
          <declaration><![CDATA[private static readonly object ThreadLocker = new object();]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ViewPermissionKey">
          <declaration><![CDATA[private const string ViewPermissionKey = "VIEW";]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="Dnn.PersonaBar.Library.Repository">
    <class name="IPersonaBarExtensionRepository">
      <declaration><![CDATA[public interface IPersonaBarExtensionRepository]]></declaration>
      <documentation>
        <summary>
 Interface responsible for persona bar extensions.
 </summary>
      </documentation>
      <constructors>
      </constructors>
      <methods>
        <method name="DeleteExtension">
          <declaration><![CDATA[void DeleteExtension(PersonaBarExtension extension);]]></declaration>
          <documentation>
            <summary>
 delete extension.
 </summary>
 <param name="extension"></param></documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="DeleteExtension">
          <declaration><![CDATA[void DeleteExtension(string identifier);]]></declaration>
          <documentation>
            <summary>
 delete extension.
 </summary>
 <param name="identifier"></param></documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="GetExtensions">
          <declaration><![CDATA[IList<PersonaBarExtension> GetExtensions();]]></declaration>
          <documentation>
            <summary>
 get persona bar extensions.
 </summary>
 <returns></returns></documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="GetExtensions">
          <declaration><![CDATA[IList<PersonaBarExtension> GetExtensions(int menuId);]]></declaration>
          <documentation>
            <summary>
 get persona bar extensions for menu.
 </summary>
 <returns></returns></documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="SaveExtension">
          <declaration><![CDATA[void SaveExtension(PersonaBarExtension extension);]]></declaration>
          <documentation>
            <summary>
 save extension.
 </summary>
 <param name="extension"></param></documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="IPersonaBarRepository">
      <declaration><![CDATA[public interface IPersonaBarRepository]]></declaration>
      <documentation>
        <summary>
 Interface responsible to get the Persona Bar menu structure from the data layer
 </summary>
      </documentation>
      <constructors>
      </constructors>
      <methods>
        <method name="DeleteMenuItem">
          <declaration><![CDATA[void DeleteMenuItem(string identifier);]]></declaration>
          <documentation>
            <summary>
 remove a menu item.
 </summary>
 <param name="identifier"></param></documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="GetMenu">
          <declaration><![CDATA[PersonaBarMenu GetMenu();]]></declaration>
          <documentation>
            <summary>
 Gets the menu structure of the persona bar
 </summary>
 <returns>Persona bar menu structure</returns></documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="GetMenuDefaultPermissions">
          <declaration><![CDATA[string GetMenuDefaultPermissions(int menuId);]]></declaration>
          <documentation>
            <summary>
 Get a menu item's default allowed permissions.
 </summary>
 <param name="menuId"></param>
 <returns></returns></documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="GetMenuItem">
          <declaration><![CDATA[MenuItem GetMenuItem(string identifier);]]></declaration>
          <documentation>
            <summary>
 Get the menu item by identifier.
 </summary>
 <param name="identifier"></param>
 <returns></returns></documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="GetMenuItem">
          <declaration><![CDATA[MenuItem GetMenuItem(int menuId);]]></declaration>
          <documentation>
            <summary>
 Get the menu item by menu id.
 </summary>
 <param name="menuId"></param>
 <returns></returns></documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="SaveMenuDefaultPermissions">
          <declaration><![CDATA[void SaveMenuDefaultPermissions(MenuItem menuItem, string roleNames);]]></declaration>
          <documentation>
            <summary>
 Save a menu item's default allowed permissions.
 </summary>
 <param name="menuItem"></param>
 <param name="roleNames"></param></documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="SaveMenuItem">
          <declaration><![CDATA[void SaveMenuItem(MenuItem item);]]></declaration>
          <documentation>
            <summary>
 Save menu item info.
 </summary>
 <param name="item"></param></documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="UpdateMenuController">
          <declaration><![CDATA[void UpdateMenuController(string identifier, string controller);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="PersonaBarExtensionRepository">
      <declaration><![CDATA[public class PersonaBarExtensionRepository : ServiceLocator<IPersonaBarExtensionRepository, PersonaBarExtensionRepository>, IPersonaBarExtensionRepository]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private readonly IDataService _dataService = new DataService();]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="21" sc="9" el="21" ec="72">Repository\PersonaBarExtensionRepository.cs</location>
            <body hash="d603703ac2d5777f2435af9162c7455d"><![CDATA[private readonly IDataService _dataService = new DataService()]]></body>
          </codeblock>
        </constructor>
        <constructor name=".cctor">
          <declaration><![CDATA[static PersonaBarExtensionRepository()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="23" sc="9" el="23" ec="68">Repository\PersonaBarExtensionRepository.cs</location>
            <body hash="fa1afcc9b9a47aeb30c601b46d0d8537"><![CDATA[private static readonly object ThreadLocker = new object()]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="ClearCache">
          <declaration><![CDATA[private void ClearCache()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="27" sc="9" el="29" ec="10">Repository\PersonaBarExtensionRepository.cs</location>
            <body hash="6e6dee90878c23a65c2f0c4284880872"><![CDATA[{
            DataCache.RemoveCache(PersonaBarExtensionsCacheKey);
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteExtension">
          <declaration><![CDATA[public void DeleteExtension(PersonaBarExtension extension)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="54" sc="9" el="56" ec="10">Repository\PersonaBarExtensionRepository.cs</location>
            <body hash="9a439b085a5f17fd3c9ea572f01bd120"><![CDATA[{
            DeleteExtension(extension.Identifier);
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteExtension">
          <declaration><![CDATA[public void DeleteExtension(string identifier)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="59" sc="9" el="63" ec="10">Repository\PersonaBarExtensionRepository.cs</location>
            <body hash="3c162af5c79ba747f860406696968b9d"><![CDATA[{
            _dataService.DeletePersonaBarExtension(identifier);

            ClearCache();
        }]]></body>
          </codeblock>
        </method>
        <method name="GetExtensions">
          <declaration><![CDATA[public IList<PersonaBarExtension> GetExtensions()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="66" sc="9" el="84" ec="10">Repository\PersonaBarExtensionRepository.cs</location>
            <body hash="17195ce92946694832277c5b670f8c1c"><![CDATA[{
            var extensions = DataCache.GetCache<IList<PersonaBarExtension>>(PersonaBarExtensionsCacheKey);
            if (extensions == null)
            {
                lock (ThreadLocker)
                {
                    extensions = DataCache.GetCache<IList<PersonaBarExtension>>(PersonaBarExtensionsCacheKey);
                    if (extensions == null)
                    {
                        extensions = CBO.FillCollection<PersonaBarExtension>(_dataService.GetPersonaBarExtensions())
                            .OrderBy(e => e.Order).ToList();

                        DataCache.SetCache(PersonaBarExtensionsCacheKey, extensions);
                    }
                }
            }

            return extensions;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetExtensions">
          <declaration><![CDATA[public IList<PersonaBarExtension> GetExtensions(int menuId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="87" sc="9" el="89" ec="10">Repository\PersonaBarExtensionRepository.cs</location>
            <body hash="9e321be4e7803eebe39ee2248524b33e"><![CDATA[{
            return GetExtensions().Where(t => t.MenuId == menuId).ToList();
        }]]></body>
          </codeblock>
        </method>
        <method name="GetFactory">
          <declaration><![CDATA[protected override Func<IPersonaBarExtensionRepository> GetFactory()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="32" sc="9" el="34" ec="10">Repository\PersonaBarExtensionRepository.cs</location>
            <body hash="a652e6fc22a14d78bbd76f851a295da3"><![CDATA[{
            return () => new PersonaBarExtensionRepository();
        }]]></body>
          </codeblock>
        </method>
        <method name="SaveExtension">
          <declaration><![CDATA[public void SaveExtension(PersonaBarExtension extension)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="37" sc="9" el="51" ec="10">Repository\PersonaBarExtensionRepository.cs</location>
            <body hash="c8cf91df04cb0740865e2d56d07aa350"><![CDATA[{
            _dataService.SavePersonaBarExtension(
                extension.Identifier,
                extension.MenuId,
                extension.FolderName,
                extension.Controller,
                extension.Container,
                extension.Path,
                extension.Order,
                extension.Enabled,
                UserController.Instance.GetCurrentUserInfo().UserID
                );

            ClearCache();
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_dataService">
          <declaration><![CDATA[private readonly IDataService _dataService = new DataService();]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="PersonaBarExtensionsCacheKey">
          <declaration><![CDATA[private const string PersonaBarExtensionsCacheKey = "PersonaBarExtensions";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ThreadLocker">
          <declaration><![CDATA[private static readonly object ThreadLocker = new object();]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="PersonaBarRepository">
      <declaration><![CDATA[public class PersonaBarRepository : ServiceLocator<IPersonaBarRepository, PersonaBarRepository>, IPersonaBarRepository]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private readonly IDataService _dataService = new DataService();]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="20" sc="9" el="20" ec="72">Repository\PersonaBarRepository.cs</location>
            <body hash="d603703ac2d5777f2435af9162c7455d"><![CDATA[private readonly IDataService _dataService = new DataService()]]></body>
          </codeblock>
        </constructor>
        <constructor name=".cctor">
          <declaration><![CDATA[static PersonaBarRepository()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="22" sc="9" el="22" ec="68">Repository\PersonaBarRepository.cs</location>
            <body hash="fa1afcc9b9a47aeb30c601b46d0d8537"><![CDATA[private static readonly object ThreadLocker = new object()]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="ClearCache">
          <declaration><![CDATA[private void ClearCache()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="117" sc="9" el="119" ec="10">Repository\PersonaBarRepository.cs</location>
            <body hash="496917e092041a5159b8c8ba28af3e28"><![CDATA[{
            DataCache.RemoveCache(PersonaBarMenuCacheKey);
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteMenuItem">
          <declaration><![CDATA[public void DeleteMenuItem(string identifier)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="86" sc="9" el="90" ec="10">Repository\PersonaBarRepository.cs</location>
            <body hash="4fe872e04bfba9a701219913e30ed4ff"><![CDATA[{
            _dataService.DeletePersonaBarMenuByIdentifier(identifier);

            ClearCache();
        }]]></body>
          </codeblock>
        </method>
        <method name="GetFactory">
          <declaration><![CDATA[protected override Func<IPersonaBarRepository> GetFactory()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="122" sc="9" el="124" ec="10">Repository\PersonaBarRepository.cs</location>
            <body hash="cefc70e0d6c6a7d96dadb4054edfb995"><![CDATA[{
            return () => new PersonaBarRepository();
        }]]></body>
          </codeblock>
        </method>
        <method name="GetMenu">
          <declaration><![CDATA[public PersonaBarMenu GetMenu()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="25" sc="9" el="50" ec="10">Repository\PersonaBarRepository.cs</location>
            <body hash="c5af80647ab50ad41fc37c64a7796fc1"><![CDATA[{
            var menu = DataCache.GetCache<PersonaBarMenu>(PersonaBarMenuCacheKey);
            if (menu == null)
            {
                lock (ThreadLocker)
                {
                    menu = DataCache.GetCache<PersonaBarMenu>(PersonaBarMenuCacheKey);
                    if (menu == null)
                    {
                        menu = new PersonaBarMenu();
                        var menuItems = CBO.FillCollection<MenuItem>(_dataService.GetPersonaBarMenu())
                            .OrderBy(m => m.Order).ToList();

                        foreach (var menuItem in menuItems.Where(m => m.ParentId == Null.NullInteger))
                        {
                            menu.MenuItems.Add(menuItem);
                            InjectMenuItems(menuItem, menuItems);
                        }

                        DataCache.SetCache(PersonaBarMenuCacheKey, menu);
                    }
                }
            }

            return menu;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetMenuDefaultPermissions">
          <declaration><![CDATA[public string GetMenuDefaultPermissions(int menuId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="93" sc="9" el="95" ec="10">Repository\PersonaBarRepository.cs</location>
            <body hash="38ab84bfb4718ec0ef79ec0b04b258bf"><![CDATA[{
            return _dataService.GetPersonaBarMenuDefaultPermissions(menuId);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetMenuItem">
          <declaration><![CDATA[public MenuItem GetMenuItem(string identifier)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="53" sc="9" el="55" ec="10">Repository\PersonaBarRepository.cs</location>
            <body hash="5673377b5d6508b9b4697201bc003ee9"><![CDATA[{
            return GetMenu().AllItems.FirstOrDefault(m => m.Identifier.Equals(identifier, StringComparison.InvariantCultureIgnoreCase));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetMenuItem">
          <declaration><![CDATA[public MenuItem GetMenuItem(int menuId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="58" sc="9" el="60" ec="10">Repository\PersonaBarRepository.cs</location>
            <body hash="a84f8c01cc729e620d3e129eeb24ce32"><![CDATA[{
            return GetMenu().AllItems.FirstOrDefault(m => m.MenuId == menuId);
        }]]></body>
          </codeblock>
        </method>
        <method name="InjectMenuItems">
          <declaration><![CDATA[private void InjectMenuItems(MenuItem parent, IList<MenuItem> menuItems)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="108" sc="9" el="114" ec="10">Repository\PersonaBarRepository.cs</location>
            <body hash="a10e449de37100fe8dce427f9a811565"><![CDATA[{
            foreach (var menuItem in menuItems.Where(m => m.ParentId == parent.MenuId))
            {
                parent.Children.Add(menuItem);
                InjectMenuItems(menuItem, menuItems);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="SaveMenuDefaultPermissions">
          <declaration><![CDATA[public void SaveMenuDefaultPermissions(MenuItem menuItem, string roleNames)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="98" sc="9" el="100" ec="10">Repository\PersonaBarRepository.cs</location>
            <body hash="8960b68afe18f9de855e792f9d2ada8e"><![CDATA[{
            _dataService.SavePersonaBarMenuDefaultPermissions(menuItem.MenuId, roleNames);
        }]]></body>
          </codeblock>
        </method>
        <method name="SaveMenuItem">
          <declaration><![CDATA[public void SaveMenuItem(MenuItem item)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="63" sc="9" el="83" ec="10">Repository\PersonaBarRepository.cs</location>
            <body hash="20dc325c7a5b97451a143893f23879f7"><![CDATA[{
            var user = UserController.Instance.GetCurrentUserInfo();

            item.MenuId = _dataService.SavePersonaBarMenu(
                item.Identifier,
                item.ModuleName,
                item.FolderName,
                item.Controller,
                item.ResourceKey,
                item.Path,
                item.Link,
                item.CssClass,
                item.ParentId,
                item.Order,
                item.AllowHost,
                item.Enabled,
                user.UserID
            );

            ClearCache();
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateMenuController">
          <declaration><![CDATA[public void UpdateMenuController(string identifier, string controller)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="103" sc="9" el="105" ec="10">Repository\PersonaBarRepository.cs</location>
            <body hash="36ccbdd2bfedf79b96e1fea3d83529ee"><![CDATA[{
            _dataService.UpdateMenuController(identifier, controller);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_dataService">
          <declaration><![CDATA[private readonly IDataService _dataService = new DataService();]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="PersonaBarMenuCacheKey">
          <declaration><![CDATA[private const string PersonaBarMenuCacheKey = "PersonaBarMenu";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ThreadLocker">
          <declaration><![CDATA[private static readonly object ThreadLocker = new object();]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
</root>