<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<root file="DotNetNuke.Website.Deprecated.dll" version="09.01.01" generated="2017-08-10 13:32:49Z" generationTime="6.5819402">
  <namespace name="">
    <class name="&lt;PrivateImplementationDetails&gt;">
      <declaration><![CDATA[internal sealed class <PrivateImplementationDetails>]]></declaration>
      <documentation>
      </documentation>
      <constructors>
      </constructors>
      <methods>
        <method name="ComputeStringHash">
          <declaration><![CDATA[internal static uint ComputeStringHash(string s)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="DotNetNuke.Modules.Admin.FileManager">
    <class name="WebUpload">
      <declaration><![CDATA[public class WebUpload : PortalModuleBase]]></declaration>
      <documentation>-----------------------------------------------------------------------------
 Project	 : DotNetNuke
 Class	 : WebUpload
 -----------------------------------------------------------------------------
 <summary>
 Supplies the functionality for uploading files to the Portal
 </summary>
 <remarks>
 </remarks>
 -----------------------------------------------------------------------------</documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public WebUpload()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
        <constructor name=".cctor">
          <declaration><![CDATA[static WebUpload()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="62" sc="6" el="62" ec="96">admin\ControlPanel\WebUpload.ascx.cs</location>
            <body hash="1baca7ffd3bb543df50615a2ce8ac903"><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof (WebUpload))]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="CheckSecurity">
          <declaration><![CDATA[private void CheckSecurity()]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 This routine checks the Access Security
 </summary>
 <remarks>
 </remarks>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="185" sc="9" el="190" ec="10">admin\ControlPanel\WebUpload.ascx.cs</location>
            <body hash="4ce7348e67f1ab67a37d6027dfe22b45"><![CDATA[{
            if (!ModulePermissionController.HasModulePermission(ModuleConfiguration.ModulePermissions, "CONTENT,EDIT") && !UserController.Instance.GetCurrentUserInfo().IsInRole("Administrators"))
            {
                Response.Redirect(Globals.NavigateURL("Access Denied"), true);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="cmdAdd_Click">
          <declaration><![CDATA[private void cmdAdd_Click(object sender, EventArgs e)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 The cmdAdd_Click runs when the Add Button is clicked
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks>
 </remarks>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="317" sc="9" el="387" ec="10">admin\ControlPanel\WebUpload.ascx.cs</location>
            <body hash="254980c8cafa6d569a562a004db7d63e"><![CDATA[{
            try
            {
                CheckSecurity();
                var strMessage = "";

                var postedFile = cmdBrowse.PostedFile;

                //Get localized Strings
                Localization.GetString("InvalidExt", LocalResourceFile);
                var strFileName = Path.GetFileName(postedFile.FileName);
                if (!String.IsNullOrEmpty(postedFile.FileName))
                {
                    switch (FileType)
                    {
                        case UploadType.File: //content files
                            try
                            {
                                var folder = FolderManager.Instance.GetFolder(ddlFolders.SelectedItemValueAsInt);
                                var fileManager = Services.FileSystem.FileManager.Instance;
                                var file = fileManager.AddFile(folder, strFileName, postedFile.InputStream, true, true, postedFile.ContentType);
                                if (chkUnzip.Checked && file.Extension == "zip")
                                {
                                    fileManager.UnzipFile(file, folder);
                                }
                            }
                            catch (PermissionsNotMetException exc)
                            {
                                Logger.Warn(exc);
                                strMessage += "<br />" + string.Format(Localization.GetString("InsufficientFolderPermission"), ddlFolders.SelectedItemValueAsInt);
                            }
                            catch (NoSpaceAvailableException exc)
                            {
                                Logger.Warn(exc);
                                strMessage += "<br />" + string.Format(Localization.GetString("DiskSpaceExceeded"), strFileName);
                            }
                            catch (InvalidFileExtensionException exc)
                            {
                                Logger.Warn(exc);
                                strMessage += "<br />" + string.Format(Localization.GetString("RestrictedFileType"), strFileName, Host.AllowedExtensionWhitelist.ToDisplayString());
                            }
                            catch (Exception exc)
                            {
                                Logger.Error(exc);
                                strMessage += "<br />" + string.Format(Localization.GetString("SaveFileError"), strFileName);
                            }
                            break;
                    }
                }
                else
                {
                    strMessage = Localization.GetString("NoFile", LocalResourceFile);
                }
                if (phPaLogs.Controls.Count > 0)
                {
                    tblLogs.Visible = true;
                }
                else if (String.IsNullOrEmpty(strMessage))
                {
                    Skin.AddModuleMessage(this, String.Format(Localization.GetString("FileUploadSuccess", LocalResourceFile), strFileName), ModuleMessage.ModuleMessageType.GreenSuccess);
                }
                else
                {
                    lblMessage.Text = strMessage;
                }
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="cmdReturn_Click">
          <declaration><![CDATA[private void cmdReturn_Click(object sender, EventArgs e)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 The cmdReturn_Click runs when the Return Button is clicked
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks>
 </remarks>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="399" sc="9" el="401" ec="10">admin\ControlPanel\WebUpload.ascx.cs</location>
            <body hash="b969d3703b3969c563d8a0ded511edd4"><![CDATA[{
            Response.Redirect(ReturnURL(), true);
        }]]></body>
          </codeblock>
        </method>
        <method name="LoadFolders">
          <declaration><![CDATA[private void LoadFolders()]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 This routine populates the Folder List Drop Down
 There is no reference to permissions here as all folders should be available to the admin.
 </summary>
 <remarks>
 </remarks>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="201" sc="9" el="218" ec="10">admin\ControlPanel\WebUpload.ascx.cs</location>
            <body hash="c922e2a311bb48db3420ecdcff0185f9"><![CDATA[{
            var user = UserController.Instance.GetCurrentUserInfo();

            var folders = FolderManager.Instance.GetFolders(FolderPortalID, "ADD", user.UserID);
            ddlFolders.Services.Parameters.Add("permission", "ADD");
            if (!String.IsNullOrEmpty(DestinationFolder))
            {
                ddlFolders.SelectedFolder = folders.SingleOrDefault(f => f.FolderPath == DestinationFolder);
            }
            else
            {
                var rootFolder = folders.SingleOrDefault(f => f.FolderPath == "");
                if (rootFolder != null)
                {
                    ddlFolders.SelectedItem = new ListItem() { Text = DynamicSharedConstants.RootFolder, Value = rootFolder.FolderID.ToString() };
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="243" sc="9" el="248" ec="10">admin\ControlPanel\WebUpload.ascx.cs</location>
            <body hash="3387e4a1b0626ad2895fa11a98d637bd"><![CDATA[{
            base.OnInit(e);

            //Customise the Control Title
            ModuleConfiguration.ModuleTitle = Localization.GetString("UploadType" + FileType, LocalResourceFile);
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 The Page_Load runs when the page loads
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks>
 </remarks>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="260" sc="9" el="305" ec="10">admin\ControlPanel\WebUpload.ascx.cs</location>
            <body hash="90d3235d88a6a9a8be506f3ec379ea4a"><![CDATA[{
            base.OnLoad(e);

            cmdAdd.Click += cmdAdd_Click;
            cmdReturn1.Click += cmdReturn_Click;
            cmdReturn2.Click += cmdReturn_Click;

            try
            {
                CheckSecurity();

                //Get localized Strings
                string strHost = Localization.GetString("HostRoot", LocalResourceFile);
                string strPortal = Localization.GetString("PortalRoot", LocalResourceFile);

                maxSizeWarningLabel.Text = String.Format(Localization.GetString("FileSizeRestriction", LocalResourceFile), (Config.GetMaxUploadSize()/(1024 *1024)));

                if (!Page.IsPostBack)
                {
                    cmdAdd.Text = Localization.GetString("UploadType" + FileType, LocalResourceFile);
                    if (FileType == UploadType.File)
                    {
                        foldersRow.Visible = true;
                        rootRow.Visible = true;
                        unzipRow.Visible = true;

                        if (IsHostMenu)
                        {
                            lblRootType.Text = strHost + ":";
                            lblRootFolder.Text = RootFolder;
                        }
                        else
                        {
                            lblRootType.Text = strPortal + ":";
                            lblRootFolder.Text = RootFolder;
                        }
                        LoadFolders();
                    }
                    chkUnzip.Checked = false;
                }
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="ReturnURL">
          <declaration><![CDATA[public string ReturnURL()]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 This routine determines the Return Url
 </summary>
 <remarks>
 </remarks>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="232" sc="9" el="240" ec="10">admin\ControlPanel\WebUpload.ascx.cs</location>
            <body hash="9914f657956fbaa9f2d75c81c1e622e4"><![CDATA[{
            int TabID = PortalSettings.HomeTabId;

            if (Request.Params["rtab"] != null)
            {
                TabID = int.Parse(Request.Params["rtab"]);
            }
            return Globals.NavigateURL(TabID);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_DestinationFolder">
          <declaration><![CDATA[private string _DestinationFolder;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_FileType">
          <declaration><![CDATA[private UploadType _FileType;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_FileTypeName">
          <declaration><![CDATA[private string _FileTypeName;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_RootFolder">
          <declaration><![CDATA[private string _RootFolder;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_UploadRoles">
          <declaration><![CDATA[private string _UploadRoles;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkUnzip">
          <declaration><![CDATA[protected CheckBox chkUnzip;]]></declaration>
          <documentation>
            <summary>
 chkUnzip control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="cmdAdd">
          <declaration><![CDATA[protected LinkButton cmdAdd;]]></declaration>
          <documentation>
            <summary>
 cmdAdd control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="cmdBrowse">
          <declaration><![CDATA[protected HtmlInputFile cmdBrowse;]]></declaration>
          <documentation>
            <summary>
 cmdBrowse control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="cmdReturn1">
          <declaration><![CDATA[protected LinkButton cmdReturn1;]]></declaration>
          <documentation>
            <summary>
 cmdReturn1 control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="cmdReturn2">
          <declaration><![CDATA[protected LinkButton cmdReturn2;]]></declaration>
          <documentation>
            <summary>
 cmdReturn2 control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="ddlFolders">
          <declaration><![CDATA[protected DnnFolderDropDownList ddlFolders;]]></declaration>
          <documentation>
            <summary>
 ddlFolders control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="foldersRow">
          <declaration><![CDATA[protected HtmlGenericControl foldersRow;]]></declaration>
          <documentation>
            <summary>
 foldersRow control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="Label1">
          <declaration><![CDATA[protected LabelControl Label1;]]></declaration>
          <documentation>
            <summary>
 Label1 control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="lblLogTitle">
          <declaration><![CDATA[protected Label lblLogTitle;]]></declaration>
          <documentation>
            <summary>
 lblLogTitle control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="lblMessage">
          <declaration><![CDATA[protected Label lblMessage;]]></declaration>
          <documentation>
            <summary>
 lblMessage control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="lblRootFolder">
          <declaration><![CDATA[protected Label lblRootFolder;]]></declaration>
          <documentation>
            <summary>
 lblRootFolder control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="lblRootType">
          <declaration><![CDATA[protected Label lblRootType;]]></declaration>
          <documentation>
            <summary>
 lblRootType control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="Logger">
          <declaration><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof(WebUpload));]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="maxSizeWarningLabel">
          <declaration><![CDATA[protected Label maxSizeWarningLabel;]]></declaration>
          <documentation>
            <summary>
 maxSizeWarningLabel control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="phPaLogs">
          <declaration><![CDATA[protected PlaceHolder phPaLogs;]]></declaration>
          <documentation>
            <summary>
 phPaLogs control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="plBrowse">
          <declaration><![CDATA[protected LabelControl plBrowse;]]></declaration>
          <documentation>
            <summary>
 plBrowse control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="plFolder">
          <declaration><![CDATA[protected LabelControl plFolder;]]></declaration>
          <documentation>
            <summary>
 plFolder control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="rootRow">
          <declaration><![CDATA[protected HtmlGenericControl rootRow;]]></declaration>
          <documentation>
            <summary>
 rootRow control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="tblLogs">
          <declaration><![CDATA[protected HtmlGenericControl tblLogs;]]></declaration>
          <documentation>
            <summary>
 tblLogs control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="unzipRow">
          <declaration><![CDATA[protected HtmlGenericControl unzipRow;]]></declaration>
          <documentation>
            <summary>
 unzipRow control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
      </fields>
      <properties>
        <property name="DestinationFolder">
          <declaration><![CDATA[public string DestinationFolder]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="78" sc="13" el="88" ec="14">admin\ControlPanel\WebUpload.ascx.cs</location>
            <body hash="b4cd55f7ba522dd19cde020267a34f62"><![CDATA[{
                if (_DestinationFolder == null)
                {
                    _DestinationFolder = string.Empty;
                    if ((Request.QueryString["dest"] != null))
                    {
                        _DestinationFolder = Globals.QueryStringDecode(Request.QueryString["dest"]);
                    }
                }
                return PathUtils.Instance.RemoveTrailingSlash(_DestinationFolder.Replace("\\", "/"));
            }]]></body>
          </codeblock>
        </property>
        <property name="FileType">
          <declaration><![CDATA[public UploadType FileType]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="94" sc="13" el="107" ec="14">admin\ControlPanel\WebUpload.ascx.cs</location>
            <body hash="5e6522e7248ff06d81b2e8d34f3726ff"><![CDATA[{
                _FileType = UploadType.File;
                if ((Request.QueryString["ftype"] != null))
                {
					//The select statement ensures that the parameter can be converted to UploadType
                    switch (Request.QueryString["ftype"].ToLower())
                    {
                        case "file":
                            _FileType = (UploadType) Enum.Parse(typeof (UploadType), Request.QueryString["ftype"]);
                            break;
                    }
                }
                return _FileType;
            }]]></body>
          </codeblock>
        </property>
        <property name="FileTypeName">
          <declaration><![CDATA[public string FileTypeName]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="113" sc="13" el="119" ec="14">admin\ControlPanel\WebUpload.ascx.cs</location>
            <body hash="0a1ad6b96c91a2966be3c83effe58a40"><![CDATA[{
                if (_FileTypeName == null)
                {
                    _FileTypeName = Localization.GetString(FileType.ToString(), LocalResourceFile);
                }
                return _FileTypeName;
            }]]></body>
          </codeblock>
        </property>
        <property name="FolderPortalID">
          <declaration><![CDATA[public int FolderPortalID]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="125" sc="13" el="134" ec="14">admin\ControlPanel\WebUpload.ascx.cs</location>
            <body hash="424dd61fc0294012893c6e3e7d2721b8"><![CDATA[{
                if (IsHostMenu)
                {
                    return Null.NullInteger;
                }
                else
                {
                    return PortalId;
                }
            }]]></body>
          </codeblock>
        </property>
        <property name="RootFolder">
          <declaration><![CDATA[public string RootFolder]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="140" sc="13" el="153" ec="14">admin\ControlPanel\WebUpload.ascx.cs</location>
            <body hash="e82531366dc2e7952811d8a76f78a2ee"><![CDATA[{
                if (_RootFolder == null)
                {
                    if (IsHostMenu)
                    {
                        _RootFolder = Globals.HostMapPath;
                    }
                    else
                    {
                        _RootFolder = PortalSettings.HomeDirectoryMapPath;
                    }
                }
                return _RootFolder;
            }]]></body>
          </codeblock>
        </property>
        <property name="UploadRoles">
          <declaration><![CDATA[public string UploadRoles]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="159" sc="13" el="170" ec="14">admin\ControlPanel\WebUpload.ascx.cs</location>
            <body hash="29a97da10a76754ab9328a8c39a764da"><![CDATA[{
                if (_UploadRoles == null)
                {
                    _UploadRoles = string.Empty;

                    if (Convert.ToString(Settings["uploadroles"]) != null)
                    {
                        _UploadRoles = Convert.ToString(Settings["uploadroles"]);
                    }
                }
                return _UploadRoles;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="DotNetNuke.UI.ControlPanel">
    <class name="AddModule">
      <declaration><![CDATA[public class AddModule : UserControlBase, IDnnRibbonBarTool]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private bool _enabled = true;]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="67" sc="9" el="67" ec="38">admin\ControlPanel\AddModule.ascx.cs</location>
            <body hash="8c38b322a6bb9890a7f1d5e0e8ebf5a2"><![CDATA[private bool _enabled = true]]></body>
          </codeblock>
        </constructor>
        <constructor name=".cctor">
          <declaration><![CDATA[static AddModule()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="66" sc="3" el="66" ec="93">admin\ControlPanel\AddModule.ascx.cs</location>
            <body hash="62f4d59a0048b9c64f79f5f31f3e63f2"><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof (AddModule))]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="AddModulePermission">
          <declaration><![CDATA[private static ModulePermissionInfo AddModulePermission(ModuleInfo objModule, PermissionInfo permission, int roleId, int userId, bool allowAccess)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="413" sc="9" el="431" ec="10">admin\ControlPanel\AddModule.ascx.cs</location>
            <body hash="e1171324da0c06fa7b84494bd4fcd1da"><![CDATA[{
            var objModulePermission = new ModulePermissionInfo
            {
                ModuleID = objModule.ModuleID,
                PermissionID = permission.PermissionID,
                RoleID = roleId,
                UserID = userId,
                PermissionKey = permission.PermissionKey,
                AllowAccess = allowAccess
            };

            // add the permission to the collection
            if (!objModule.ModulePermissions.Contains(objModulePermission))
            {
                objModule.ModulePermissions.Add(objModulePermission);
            }

            return objModulePermission;
        }]]></body>
          </codeblock>
        </method>
        <method name="AddNewOrExisting_OnClick">
          <declaration><![CDATA[protected void AddNewOrExisting_OnClick(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="107" sc="3" el="109" ec="4">admin\ControlPanel\AddModule.ascx.cs</location>
            <body hash="d3d351fe58d062d795183cc0e0ebd08d"><![CDATA[{
			LoadAllLists();
		}]]></body>
          </codeblock>
        </method>
        <method name="CanAddModuleToPage">
          <declaration><![CDATA[public bool CanAddModuleToPage()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="892" sc="9" el="899" ec="10">admin\ControlPanel\AddModule.ascx.cs</location>
            <body hash="51ae5246ca0399759086f85a829fa22f"><![CDATA[{
            if (HttpContext.Current == null)
            {
                return false;
            }
            //If we are not in an edit page
            return (string.IsNullOrEmpty(HttpContext.Current.Request.QueryString["mid"])) && (string.IsNullOrEmpty(HttpContext.Current.Request.QueryString["ctl"]));
        }]]></body>
          </codeblock>
        </method>
        <method name="CategoryListSelectedIndexChanged">
          <declaration><![CDATA[private void CategoryListSelectedIndexChanged(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="206" sc="3" el="208" ec="4">admin\ControlPanel\AddModule.ascx.cs</location>
            <body hash="292f4bffe185821c4833c365178e591a"><![CDATA[{
			LoadModuleList();
		}]]></body>
          </codeblock>
        </method>
        <method name="CmdAddModuleClick">
          <declaration><![CDATA[protected void CmdAddModuleClick(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="211" sc="3" el="321" ec="4">admin\ControlPanel\AddModule.ascx.cs</location>
            <body hash="78e9abe73b0d6b2ef0dacfa5856ae535"><![CDATA[{
			if (TabPermissionController.CanAddContentToPage() && CanAddModuleToPage())
			{
				int permissionType;
				try
				{
					permissionType = int.Parse(VisibilityLst.SelectedValue);
				}
				catch (Exception exc)
				{
					Logger.Error(exc);

					permissionType = 0;
				}

				int position = -1;
				switch (PositionLst.SelectedValue)
				{
					case "TOP":
						position = 0;
						break;
					case "ABOVE":
						if (!string.IsNullOrEmpty(PaneModulesLst.SelectedValue))
						{
							try
							{
								position = int.Parse(PaneModulesLst.SelectedValue) - 1;
							}
							catch (Exception exc)
							{
								Logger.Error(exc);

								position = -1;
							}
						}
						else
						{
							position = 0;
						}
						break;
					case "BELOW":
						if (!string.IsNullOrEmpty(PaneModulesLst.SelectedValue))
						{
							try
							{
								position = int.Parse(PaneModulesLst.SelectedValue) + 1;
							}
							catch (Exception exc)
							{
								Logger.Error(exc);

								position = -1;
							}
						}
						else
						{
							position = -1;
						}
						break;
					case "BOTTOM":
						position = -1;
						break;
				}

				int moduleLstID;
				try
				{
					moduleLstID = int.Parse(ModuleLst.SelectedValue);
				}
				catch (Exception exc)
				{
					Logger.Error(exc);

					moduleLstID = -1;
				}

				if ((moduleLstID > -1))
				{
					if ((AddExistingModule.Checked))
					{
						int pageID;
						try
						{
							pageID = int.Parse(PageLst.SelectedValue);
						}
						catch (Exception exc)
						{
							Logger.Error(exc);

							pageID = -1;
						}

						if ((pageID > -1))
						{
							DoAddExistingModule(moduleLstID, pageID, PaneLst.SelectedValue, position, "", chkCopyModule.Checked);
						}
					}
					else
					{
						DoAddNewModule(Title.Text, moduleLstID, PaneLst.SelectedValue, position, permissionType, "");
					}
				}

				//set view mode to edit after add module.
				if (PortalSettings.UserMode != PortalSettings.Mode.Edit)
				{
					Personalization.SetProfile("Usability", "UserMode" + PortalSettings.PortalId, "EDIT");
				}
				Response.Redirect(Request.RawUrl, true);
			}
		}]]></body>
          </codeblock>
        </method>
        <method name="CmdConfirmAddModuleClick">
          <declaration><![CDATA[private void CmdConfirmAddModuleClick(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="195" sc="9" el="197" ec="10">admin\ControlPanel\AddModule.ascx.cs</location>
            <body hash="71a03a421b2cf22047b462cf38015537"><![CDATA[{
            CmdAddModuleClick(sender, e);
        }]]></body>
          </codeblock>
        </method>
        <method name="DoAddExistingModule">
          <declaration><![CDATA[private void DoAddExistingModule(int moduleId, int tabId, string paneName, int position, string align, bool cloneModule)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="434" sc="9" el="542" ec="10">admin\ControlPanel\AddModule.ascx.cs</location>
            <body hash="fd2ae58cd783dedf573288da5dc57718"><![CDATA[{
            ModuleInfo moduleInfo = ModuleController.Instance.GetModule(moduleId, tabId, false);

            int userID = -1;
            if (Request.IsAuthenticated)
            {
                UserInfo user = UserController.Instance.GetCurrentUserInfo();
                if (((user != null)))
                {
                    userID = user.UserID;
                }
            }

            if ((moduleInfo != null))
            {
                // Is this from a site other than our own? (i.e., is the user requesting "module sharing"?)
                var remote = moduleInfo.PortalID != PortalSettings.Current.PortalId;
                if (remote)
                {
                    switch (moduleInfo.DesktopModule.Shareable)
                    {
                        case ModuleSharing.Unsupported:
                            // Should never happen since the module should not be listed in the first place.
                            throw new ApplicationException(string.Format("Module '{0}' does not support Shareable and should not be listed in Add Existing Module from a different source site",
                                                                         moduleInfo.DesktopModule.FriendlyName));
                        case ModuleSharing.Supported:
                            break;
                        default:
                        case ModuleSharing.Unknown:
                            break;
                    }
                }

                // clone the module object ( to avoid creating an object reference to the data cache )
                ModuleInfo newModule = moduleInfo.Clone();

                newModule.UniqueId = Guid.NewGuid(); // Cloned Module requires a different uniqueID
                newModule.TabModuleID = Null.NullInteger;
                newModule.TabID = PortalSettings.Current.ActiveTab.TabID;
                newModule.ModuleOrder = position;
                newModule.PaneName = paneName;
                newModule.Alignment = align;

                if ((cloneModule))
                {
                    newModule.ModuleID = Null.NullInteger;
                    
                    //copy module settings and tab module settings
                    newModule.ModuleSettings.Clear();
                    foreach (var key in moduleInfo.ModuleSettings.Keys)
                    {
                        newModule.ModuleSettings.Add(key, moduleInfo.ModuleSettings[key]);
                    }

                    newModule.TabModuleSettings.Clear();
                    foreach (var key in moduleInfo.TabModuleSettings.Keys)
                    {
                        newModule.TabModuleSettings.Add(key, moduleInfo.TabModuleSettings[key]);
                    }

                    //reset the module id
                    newModule.ModuleID = ModuleController.Instance.AddModule(newModule);

                    if (!string.IsNullOrEmpty(newModule.DesktopModule.BusinessControllerClass))
                    {
                        object objObject = Reflection.CreateObject(newModule.DesktopModule.BusinessControllerClass, newModule.DesktopModule.BusinessControllerClass);
                        if (objObject is IPortable)
                        {
                            string content = Convert.ToString(((IPortable)objObject).ExportModule(moduleId));
                            if (!string.IsNullOrEmpty(content))
                            {
                                ((IPortable)objObject).ImportModule(newModule.ModuleID, content, newModule.DesktopModule.Version, userID);
                            }
                        }
                    }
                }
                else
                {
                    //copy tab module settings
                    newModule.TabModuleSettings.Clear();
                    foreach (var key in moduleInfo.TabModuleSettings.Keys)
                    {
                        newModule.TabModuleSettings.Add(key, moduleInfo.TabModuleSettings[key]);
                    }

                    ModuleController.Instance.AddModule(newModule);
                }

                if (remote)
                {
                    //Ensure the Portal Admin has View rights
                    var permissionController = new PermissionController();
                    ArrayList arrSystemModuleViewPermissions = permissionController.GetPermissionByCodeAndKey("SYSTEM_MODULE_DEFINITION", "VIEW");
                    AddModulePermission(newModule,
                                    (PermissionInfo)arrSystemModuleViewPermissions[0],
                                    PortalSettings.Current.AdministratorRoleId,
                                    Null.NullInteger,
                                    true);

                    //Set PortalID correctly
                    newModule.OwnerPortalID = newModule.PortalID;
                    newModule.PortalID = PortalSettings.Current.PortalId;
                    ModulePermissionController.SaveModulePermissions(newModule);
                }

                //Add Event Log
                EventLogController.Instance.AddLog(newModule, PortalSettings.Current, userID, "", EventLogController.EventLogType.MODULE_CREATED);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="DoAddNewModule">
          <declaration><![CDATA[private static void DoAddNewModule(string title, int desktopModuleId, string paneName, int position, int permissionType, string align)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="545" sc="9" el="609" ec="10">admin\ControlPanel\AddModule.ascx.cs</location>
            <body hash="5a97836052fba4b843907641c189838c"><![CDATA[{
            try
            {
                DesktopModuleInfo desktopModule;
                if (!DesktopModuleController.GetDesktopModules(PortalSettings.Current.PortalId).TryGetValue(desktopModuleId, out desktopModule))
                {
                    throw new ArgumentException("desktopModuleId");
                }
            }
            catch (Exception ex)
            {
                Exceptions.LogException(ex);
            }

            foreach (ModuleDefinitionInfo objModuleDefinition in
                ModuleDefinitionController.GetModuleDefinitionsByDesktopModuleID(desktopModuleId).Values)
            {
                var objModule = new ModuleInfo();
                objModule.Initialize(PortalSettings.Current.ActiveTab.PortalID);

                objModule.PortalID = PortalSettings.Current.ActiveTab.PortalID;
                objModule.TabID = PortalSettings.Current.ActiveTab.TabID;
                objModule.ModuleOrder = position;
                objModule.ModuleTitle = string.IsNullOrEmpty(title) ? objModuleDefinition.FriendlyName : title;
                objModule.PaneName = paneName;
                objModule.ModuleDefID = objModuleDefinition.ModuleDefID;
                if (objModuleDefinition.DefaultCacheTime > 0)
                {
                    objModule.CacheTime = objModuleDefinition.DefaultCacheTime;
                    if (PortalSettings.Current.DefaultModuleId > Null.NullInteger && PortalSettings.Current.DefaultTabId > Null.NullInteger)
                    {
                        ModuleInfo defaultModule = ModuleController.Instance.GetModule(PortalSettings.Current.DefaultModuleId, PortalSettings.Current.DefaultTabId, true);
                        if ((defaultModule != null))
                        {
                            objModule.CacheTime = defaultModule.CacheTime;
                        }
                    }
                }

                ModuleController.Instance.InitialModulePermission(objModule, objModule.TabID, permissionType);

                if (PortalSettings.Current.ContentLocalizationEnabled)
                {
                    Locale defaultLocale = LocaleController.Instance.GetDefaultLocale(PortalSettings.Current.PortalId);
                    //check whether original tab is exists, if true then set culture code to default language,
                    //otherwise set culture code to current.
                    if (TabController.Instance.GetTabByCulture(objModule.TabID, PortalSettings.Current.PortalId, defaultLocale) != null)
                    {
                        objModule.CultureCode = defaultLocale.Code;
                    }
                    else
                    {
                        objModule.CultureCode = PortalSettings.Current.CultureCode;
                    }
                }
                else
                {
                    objModule.CultureCode = Null.NullString;
                }
                objModule.AllTabs = false;
                objModule.Alignment = align;

                ModuleController.Instance.AddModule(objModule);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetCurrentPortalsGroup">
          <declaration><![CDATA[private IEnumerable<PortalInfo> GetCurrentPortalsGroup()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="612" sc="9" el="628" ec="10">admin\ControlPanel\AddModule.ascx.cs</location>
            <body hash="89ae70a5893835f6914bb7482d3ebd6f"><![CDATA[{
            var groups = PortalGroupController.Instance.GetPortalGroups().ToArray();

            var result = (from @group in groups
                          select PortalGroupController.Instance.GetPortalsByGroup(@group.PortalGroupId)
                              into portals
                              where portals.Any(x => x.PortalID == PortalSettings.Current.PortalId)
                              select portals.ToArray()).FirstOrDefault();

            // Are we in a group of one?
            if (result == null || result.Length == 0)
            {
                result = new[] { PortalController.Instance.GetPortal(PortalSettings.Current.PortalId) };
            }

            return result;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetIsPortable">
          <declaration><![CDATA[private static bool GetIsPortable(string moduleID, string tabID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="631" sc="9" el="653" ec="10">admin\ControlPanel\AddModule.ascx.cs</location>
            <body hash="5681b327794d2e156e06fd7eccbe50ea"><![CDATA[{
            bool isPortable = false;
            int parsedModuleID;
            int parsedTabID;

            bool validModuleID = int.TryParse(moduleID, out parsedModuleID);
            bool validTabID = int.TryParse(tabID, out parsedTabID);

            if ((validModuleID && validTabID))
            {
                ModuleInfo moduleInfo = ModuleController.Instance.GetModule(parsedModuleID, parsedTabID, false);
                if (((moduleInfo != null)))
                {
                    DesktopModuleInfo moduleDesktopInfo = moduleInfo.DesktopModule;
                    if (((moduleDesktopInfo != null)))
                    {
                        isPortable = moduleDesktopInfo.IsPortable;
                    }
                }
            }

            return isPortable;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetString">
          <declaration><![CDATA[protected string GetString(string key)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="656" sc="9" el="658" ec="10">admin\ControlPanel\AddModule.ascx.cs</location>
            <body hash="fdb9cfd70aff46a9da06e018de02d9c8"><![CDATA[{
            return Localization.GetString(key, LocalResourceFile);
        }]]></body>
          </codeblock>
        </method>
        <method name="LoadAllLists">
          <declaration><![CDATA[private void LoadAllLists()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="661" sc="3" el="670" ec="4">admin\ControlPanel\AddModule.ascx.cs</location>
            <body hash="8fc7e4e28e163b05d81f6a765a1c11dd"><![CDATA[{
		    LoadSiteList();
			LoadCategoryList();
			LoadPageList();
			LoadModuleList();
			LoadVisibilityList();
			LoadPaneList();
			LoadPositionList();
			LoadPaneModulesList();
		}]]></body>
          </codeblock>
        </method>
        <method name="LoadCategoryList">
          <declaration><![CDATA[private void LoadCategoryList()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="673" sc="9" el="685" ec="10">admin\ControlPanel\AddModule.ascx.cs</location>
            <body hash="53f8e76700592c8a1facc276be6a1b78"><![CDATA[{
            CategoryListPanel.Visible = !AddExistingModule.Checked;

            ITermController termController = Util.GetTermController();
            CategoryList.DataSource = termController.GetTermsByVocabulary("Module_Categories").OrderBy(t => t.Weight).Where(t => t.Name != "< None >").ToList();
            CategoryList.DataBind();
            //CategoryList.Items.Add(new ListItem(Localization.GetString("AllCategories", LocalResourceFile), "All"));
            CategoryList.AddItem(Localization.GetString("AllCategories", LocalResourceFile), "All");
            if (!IsPostBack)
            {
                CategoryList.Select("Common", false);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="LoadModuleList">
          <declaration><![CDATA[private void LoadModuleList()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="688" sc="9" el="715" ec="10">admin\ControlPanel\AddModule.ascx.cs</location>
            <body hash="084e6490efc9cff209b59f5d0dba41d4"><![CDATA[{
            if (AddExistingModule.Checked)
            {
                //Get list of modules for the selected tab
                if (!string.IsNullOrEmpty(PageLst.SelectedValue))
                {
                    var tabId = int.Parse(PageLst.SelectedValue);
                    if (tabId >= 0)
                    {
                        ModuleLst.BindTabModulesByTabID(tabId);
                    }
                    if ((ModuleLst.ItemCount > 0))
                    {
                        chkCopyModule.Visible = true;
                        SetCopyModuleMessage(GetIsPortable(ModuleLst.SelectedValue, PageLst.SelectedValue));
                    }
                }
            }
            else
            {
                ModuleLst.Filter = CategoryList.SelectedValue == "All"
                                        ? (kvp => true)
                                         : (Func<KeyValuePair<string, PortalDesktopModuleInfo>, bool>)(kvp => kvp.Value.DesktopModule.Category == CategoryList.SelectedValue);
                ModuleLst.BindAllPortalDesktopModules();
            }

            ModuleLst.Enabled = ModuleLst.ItemCount > 0;
        }]]></body>
          </codeblock>
        </method>
        <method name="LoadPageList">
          <declaration><![CDATA[private void LoadPageList()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="718" sc="3" el="746" ec="4">admin\ControlPanel\AddModule.ascx.cs</location>
            <body hash="3208cb7dff743e476f9e3d6ec65febc1"><![CDATA[{
			PageListPanel.Visible = AddExistingModule.Checked;
			TitlePanel.Enabled = !AddExistingModule.Checked;
			chkCopyModule.Visible = AddExistingModule.Checked;

			if ((AddExistingModule.Checked))
			{
				chkCopyModule.Text = Localization.GetString("CopyModuleDefault.Text", LocalResourceFile);
			}

	        var portalSettings = SelectedPortalSettings;

	        PageLst.Items.Clear();

            if (PageListPanel.Visible)
            {
                PageLst.DataValueField = "TabID";
				PageLst.DataTextField = "IndentedTabName";
                if(PortalSettings.PortalId == SelectedPortalSettings.PortalId)
                {
                    PageLst.DataSource = TabController.GetPortalTabs(portalSettings.PortalId, portalSettings.ActiveTab.TabID, true, string.Empty, true, false, false, false, true);
                }
                else
                {
                    PageLst.DataSource = TabController.GetPortalTabs(portalSettings.PortalId, Null.NullInteger, true, string.Empty, true, false, false, false, true);
                }
				PageLst.DataBind();
			}
		}]]></body>
          </codeblock>
        </method>
        <method name="LoadPaneList">
          <declaration><![CDATA[private void LoadPaneList()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="749" sc="9" el="757" ec="10">admin\ControlPanel\AddModule.ascx.cs</location>
            <body hash="dd939d8473c5fa024ac252a98d8d46a7"><![CDATA[{
            PaneLst.Items.Clear();
            PaneLst.DataSource = PortalSettings.Current.ActiveTab.Panes;
            PaneLst.DataBind();
            if ((PortalSettings.Current.ActiveTab.Panes.Contains(Globals.glbDefaultPane)))
            {
                PaneLst.SelectedValue = Globals.glbDefaultPane;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="LoadPaneModulesList">
          <declaration><![CDATA[private void LoadPaneModulesList()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="760" sc="9" el="811" ec="10">admin\ControlPanel\AddModule.ascx.cs</location>
            <body hash="782d4474ff8b6b79b41ae5ad2ffae286"><![CDATA[{
            var items = new Dictionary<string, string> { { string.Empty, string.Empty } };

            foreach (ModuleInfo m in PortalSettings.Current.ActiveTab.Modules)
            {
                //if user is allowed to view module and module is not deleted
                if (ModulePermissionController.CanViewModule(m) && !m.IsDeleted)
                {
                    //modules which are displayed on all tabs should not be displayed on the Admin or Super tabs
                    if (!m.AllTabs || !PortalSettings.Current.ActiveTab.IsSuperTab)
                    {
                        if (m.PaneName == PaneLst.SelectedValue)
                        {
                            int moduleOrder = m.ModuleOrder;

                            while (items.ContainsKey(moduleOrder.ToString()) || moduleOrder == 0)
                            {
                                moduleOrder++;
                            }
                            items.Add(moduleOrder.ToString(), m.ModuleTitle);
                        }
                    }
                }
            }

            PaneModulesLst.Enabled = true;
            PaneModulesLst.Items.Clear();
            PaneModulesLst.DataValueField = "key";
            PaneModulesLst.DataTextField = "value";
            PaneModulesLst.DataSource = items;
            PaneModulesLst.DataBind();

            if ((PaneModulesLst.Items.Count <= 1))
            {
                var listItem = PositionLst.FindItemByValue("ABOVE");
                if (((listItem != null)))
                {
                    PositionLst.Items.Remove(listItem);
                }
                listItem = PositionLst.FindItemByValue("BELOW");
                if (((listItem != null)))
                {
                    PositionLst.Items.Remove(listItem);
                }
                PaneModulesLst.Enabled = false;
            }

            if ((PositionLst.SelectedValue == "TOP" || PositionLst.SelectedValue == "BOTTOM"))
            {
                PaneModulesLst.Enabled = false;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="LoadPositionList">
          <declaration><![CDATA[private void LoadPositionList()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="814" sc="9" el="829" ec="10">admin\ControlPanel\AddModule.ascx.cs</location>
            <body hash="75cb782e51e4eabfa0805a47584929a1"><![CDATA[{
            var items = new Dictionary<string, string>
							{
								{"TOP", GetString("Top")},
								{"ABOVE", GetString("Above")},
								{"BELOW", GetString("Below")},
								{"BOTTOM", GetString("Bottom")}
							};

            PositionLst.Items.Clear();
            PositionLst.DataValueField = "key";
            PositionLst.DataTextField = "value";
            PositionLst.DataSource = items;
            PositionLst.DataBind();
            PositionLst.SelectedValue = "BOTTOM";
        }]]></body>
          </codeblock>
        </method>
        <method name="LoadSiteList">
          <declaration><![CDATA[private void LoadSiteList()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="832" sc="9" el="849" ec="10">admin\ControlPanel\AddModule.ascx.cs</location>
            <body hash="6f5f64a354cb418a44ae535592f44e38"><![CDATA[{
            // Is there more than one site in this group?
            var multipleSites = GetCurrentPortalsGroup().Count() > 1;

            SiteListPanel.Visible = multipleSites && AddExistingModule.Checked;

            if (SiteListPanel.Visible)
            {
                // Get a list of portals in this SiteGroup.
                var portals = PortalController.Instance.GetPortals().Cast<PortalInfo>().ToArray();

                SiteList.DataSource = portals.Select(
                    x => new {Value = x.PortalID, Name = x.PortalName, GroupID = x.PortalGroupID}).ToList();
                SiteList.DataTextField = "Name";
                SiteList.DataValueField = "Value";
                SiteList.DataBind();
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="LoadVisibilityList">
          <declaration><![CDATA[private void LoadVisibilityList()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="852" sc="3" el="864" ec="4">admin\ControlPanel\AddModule.ascx.cs</location>
            <body hash="659fb5904d8f8933450b2962590a4a16"><![CDATA[{
			VisibilityLst.Enabled = !AddExistingModule.Checked;
			if ((VisibilityLst.Enabled))
			{
				var items = new Dictionary<string, string> {{"0", GetString("PermissionView")}, {"1", GetString("PermissionEdit")}};

				VisibilityLst.Items.Clear();
				VisibilityLst.DataValueField = "key";
				VisibilityLst.DataTextField = "value";
				VisibilityLst.DataSource = items;
				VisibilityLst.DataBind();
			}
		}]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="128" sc="3" el="192" ec="4">admin\ControlPanel\AddModule.ascx.cs</location>
            <body hash="0c3d08fbe37d705c6bc78122628b9184"><![CDATA[{
			base.OnLoad(e);

            // Is there more than one site in this group?
            var multipleSites = GetCurrentPortalsGroup().Count() > 1;
            ClientAPI.RegisterClientVariable(Page, "moduleSharing", multipleSites.ToString().ToLowerInvariant(), true);

            ServicesFramework.Instance.RequestAjaxAntiForgerySupport();

            cmdAddModule.Click += CmdAddModuleClick;
			AddNewModule.CheckedChanged += AddNewOrExisting_OnClick;
			AddExistingModule.CheckedChanged += AddNewOrExisting_OnClick;
            SiteList.SelectedIndexChanged += SiteList_SelectedIndexChanged;
			CategoryList.SelectedIndexChanged += CategoryListSelectedIndexChanged;
			PageLst.SelectedIndexChanged += PageLstSelectedIndexChanged;
			PaneLst.SelectedIndexChanged += PaneLstSelectedIndexChanged;
			PositionLst.SelectedIndexChanged += PositionLstSelectedIndexChanged;

            try
			{
				if ((Visible))
				{
					cmdAddModule.Enabled = Enabled;
					AddExistingModule.Enabled = Enabled;
					AddNewModule.Enabled = Enabled;
					Title.Enabled = Enabled;
					PageLst.Enabled = Enabled;
					ModuleLst.Enabled = Enabled;
					VisibilityLst.Enabled = Enabled;
					PaneLst.Enabled = Enabled;
					PositionLst.Enabled = Enabled;
					PaneModulesLst.Enabled = Enabled;

					UserInfo objUser = UserController.Instance.GetCurrentUserInfo();
					if ((objUser != null))
					{
						if (objUser.IsSuperUser)
						{
                            var objModule = ModuleController.Instance.GetModuleByDefinition(-1, "Extensions");
							if (objModule != null)
							{
								var strURL = Globals.NavigateURL(objModule.TabID, true);
								hlMoreExtensions.NavigateUrl = strURL + "#moreExtensions";
							}
							else
							{
								hlMoreExtensions.Enabled = false;
							}
							hlMoreExtensions.Text = GetString("hlMoreExtensions");
							hlMoreExtensions.Visible = true;
						}
					}
				}

				if ((!IsPostBack && Visible && Enabled))
				{
				    AddNewModule.Checked = true;
					LoadAllLists();
				}
			}
			catch (Exception exc)
			{
				Exceptions.ProcessModuleLoadException(this, exc);
			}
		}]]></body>
          </codeblock>
        </method>
        <method name="PageLstSelectedIndexChanged">
          <declaration><![CDATA[protected void PageLstSelectedIndexChanged(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="118" sc="3" el="120" ec="4">admin\ControlPanel\AddModule.ascx.cs</location>
            <body hash="292f4bffe185821c4833c365178e591a"><![CDATA[{
			LoadModuleList();
		}]]></body>
          </codeblock>
        </method>
        <method name="PaneLstSelectedIndexChanged">
          <declaration><![CDATA[protected void PaneLstSelectedIndexChanged(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="112" sc="3" el="115" ec="4">admin\ControlPanel\AddModule.ascx.cs</location>
            <body hash="50b02ba8e1bbd3c670045f4771ae58b4"><![CDATA[{
			LoadPositionList();
			LoadPaneModulesList();
		}]]></body>
          </codeblock>
        </method>
        <method name="PositionLstSelectedIndexChanged">
          <declaration><![CDATA[protected void PositionLstSelectedIndexChanged(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="123" sc="3" el="125" ec="4">admin\ControlPanel\AddModule.ascx.cs</location>
            <body hash="03670b4c9377757a3dd87e4f69ad6305"><![CDATA[{
			PaneModulesLst.Enabled = PositionLst.SelectedValue == "ABOVE" || PositionLst.SelectedValue == "BELOW";
		}]]></body>
          </codeblock>
        </method>
        <method name="SetCopyModuleMessage">
          <declaration><![CDATA[private void SetCopyModuleMessage(bool isPortable)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="875" sc="9" el="886" ec="10">admin\ControlPanel\AddModule.ascx.cs</location>
            <body hash="aa6497dac6f414c88ff625fa6036a145"><![CDATA[{
            if ((isPortable))
            {
                chkCopyModule.Text = Localization.GetString("CopyModuleWcontent", LocalResourceFile);
                chkCopyModule.ToolTip = Localization.GetString("CopyModuleWcontent.ToolTip", LocalResourceFile);
            }
            else
            {
                chkCopyModule.Text = Localization.GetString("CopyModuleWOcontent", LocalResourceFile);
                chkCopyModule.ToolTip = Localization.GetString("CopyModuleWOcontent.ToolTip", LocalResourceFile);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="SiteList_SelectedIndexChanged">
          <declaration><![CDATA[private void SiteList_SelectedIndexChanged(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="200" sc="9" el="203" ec="10">admin\ControlPanel\AddModule.ascx.cs</location>
            <body hash="0d5eb10433731285f1472851fb7df662"><![CDATA[{
            LoadModuleList();
            LoadPageList();
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_enabled">
          <declaration><![CDATA[private bool _enabled = true;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="AddExistingModule">
          <declaration><![CDATA[protected RadioButton AddExistingModule;]]></declaration>
          <documentation>
            <summary>
 AddExistingModule control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="AddNewModule">
          <declaration><![CDATA[protected RadioButton AddNewModule;]]></declaration>
          <documentation>
            <summary>
 AddNewModule control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="CategoryList">
          <declaration><![CDATA[protected DnnComboBox CategoryList;]]></declaration>
          <documentation>
            <summary>
 CategoryList control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="CategoryListLbl">
          <declaration><![CDATA[protected Label CategoryListLbl;]]></declaration>
          <documentation>
            <summary>
 CategoryListLbl control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="CategoryListPanel">
          <declaration><![CDATA[protected Panel CategoryListPanel;]]></declaration>
          <documentation>
            <summary>
 CategoryListPanel control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="chkCopyModule">
          <declaration><![CDATA[protected CheckBox chkCopyModule;]]></declaration>
          <documentation>
            <summary>
 chkCopyModule control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="cmdAddModule">
          <declaration><![CDATA[protected LinkButton cmdAddModule;]]></declaration>
          <documentation>
            <summary>
 cmdAddModule control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="hlMoreExtensions">
          <declaration><![CDATA[protected HyperLink hlMoreExtensions;]]></declaration>
          <documentation>
            <summary>
 hlMoreExtensions control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="Label1">
          <declaration><![CDATA[protected Label Label1;]]></declaration>
          <documentation>
            <summary>
 Label1 control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="Label2">
          <declaration><![CDATA[protected Label Label2;]]></declaration>
          <documentation>
            <summary>
 Label2 control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="Logger">
          <declaration><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof(AddModule));]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ModuleLst">
          <declaration><![CDATA[protected DnnModuleComboBox ModuleLst;]]></declaration>
          <documentation>
            <summary>
 ModuleLst control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="ModuleLstLbl">
          <declaration><![CDATA[protected Label ModuleLstLbl;]]></declaration>
          <documentation>
            <summary>
 ModuleLstLbl control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="PageListLbl">
          <declaration><![CDATA[protected Label PageListLbl;]]></declaration>
          <documentation>
            <summary>
 PageListLbl control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="PageListPanel">
          <declaration><![CDATA[protected Panel PageListPanel;]]></declaration>
          <documentation>
            <summary>
 PageListPanel control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="PageLst">
          <declaration><![CDATA[protected DnnComboBox PageLst;]]></declaration>
          <documentation>
            <summary>
 PageLst control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="PaneLst">
          <declaration><![CDATA[protected DnnComboBox PaneLst;]]></declaration>
          <documentation>
            <summary>
 PaneLst control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="PaneLstLbl">
          <declaration><![CDATA[protected Label PaneLstLbl;]]></declaration>
          <documentation>
            <summary>
 PaneLstLbl control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="PaneModulesLst">
          <declaration><![CDATA[protected DnnComboBox PaneModulesLst;]]></declaration>
          <documentation>
            <summary>
 PaneModulesLst control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="PaneModulesLstLbl">
          <declaration><![CDATA[protected Label PaneModulesLstLbl;]]></declaration>
          <documentation>
            <summary>
 PaneModulesLstLbl control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="PositionLst">
          <declaration><![CDATA[protected DnnComboBox PositionLst;]]></declaration>
          <documentation>
            <summary>
 PositionLst control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="PositionLstLbl">
          <declaration><![CDATA[protected Label PositionLstLbl;]]></declaration>
          <documentation>
            <summary>
 PositionLstLbl control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="SiteLbl">
          <declaration><![CDATA[protected Label SiteLbl;]]></declaration>
          <documentation>
            <summary>
 SiteLbl control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="SiteList">
          <declaration><![CDATA[protected DnnComboBox SiteList;]]></declaration>
          <documentation>
            <summary>
 SiteList control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="SiteListPanel">
          <declaration><![CDATA[protected Panel SiteListPanel;]]></declaration>
          <documentation>
            <summary>
 SiteListPanel control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="Title">
          <declaration><![CDATA[protected TextBox Title;]]></declaration>
          <documentation>
            <summary>
 Title control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="TitleLbl">
          <declaration><![CDATA[protected Label TitleLbl;]]></declaration>
          <documentation>
            <summary>
 TitleLbl control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="TitlePanel">
          <declaration><![CDATA[protected Panel TitlePanel;]]></declaration>
          <documentation>
            <summary>
 TitlePanel control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="UpdateAddModule">
          <declaration><![CDATA[protected UpdatePanel UpdateAddModule;]]></declaration>
          <documentation>
            <summary>
 UpdateAddModule control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="VisibilityLst">
          <declaration><![CDATA[protected DnnComboBox VisibilityLst;]]></declaration>
          <documentation>
            <summary>
 VisibilityLst control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="VisibilityLstLbl">
          <declaration><![CDATA[protected Label VisibilityLstLbl;]]></declaration>
          <documentation>
            <summary>
 VisibilityLstLbl control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
      </fields>
      <properties>
        <property name="Enabled">
          <declaration><![CDATA[public bool Enabled]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="342" sc="4" el="344" ec="5">admin\ControlPanel\AddModule.ascx.cs</location>
            <body hash="948a964841b3f41716ec24f5f68a15eb"><![CDATA[{
				return _enabled && CanAddModuleToPage();
			}]]></body>
          </codeblock>
          <codeblock>
            <location sl="346" sc="4" el="348" ec="5">admin\ControlPanel\AddModule.ascx.cs</location>
            <body hash="a89017f54e31ee38e56fba273e3b59ce"><![CDATA[{
				_enabled = value;
			}]]></body>
          </codeblock>
        </property>
        <property name="LocalResourceFile">
          <declaration><![CDATA[private string LocalResourceFile]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="869" sc="13" el="871" ec="14">admin\ControlPanel\AddModule.ascx.cs</location>
            <body hash="a61fe5ae6a6c71e43aff88d04c647666"><![CDATA[{
                return string.Format("{0}/{1}/{2}.ascx.resx", TemplateSourceDirectory, Localization.LocalResourceDirectory, GetType().BaseType.Name);
            }]]></body>
          </codeblock>
        </property>
        <property name="SelectedModule">
          <declaration><![CDATA[protected DesktopModuleInfo SelectedModule]]></declaration>
          <documentation>
            <summary>The currently-selected module.</summary>
          </documentation>
          <codeblock>
            <location sl="367" sc="10" el="405" ec="11">admin\ControlPanel\AddModule.ascx.cs</location>
            <body hash="94973f6597ac4cc89fd06e84d030430f"><![CDATA[{
                if (AddExistingModule.Checked)
                {
                    var tabId = -1;
                    if (!string.IsNullOrEmpty(PageLst.SelectedValue))
                        tabId = int.Parse(PageLst.SelectedValue);

                    if (tabId < 0)
                        tabId = PortalSettings.Current.ActiveTab.TabID;

                    if (!string.IsNullOrEmpty(ModuleLst.SelectedValue))
                    {
                        var moduleId = int.Parse(ModuleLst.SelectedValue);
                        if (moduleId >= 0)
                        {
                            return ModuleController.Instance.GetModule(moduleId, tabId, false).DesktopModule;
                        }
                    }
                }
                else
                {
                    var portalId = -1;

                    if (SiteListPanel.Visible) portalId = int.Parse(SiteList.SelectedValue);

                    if (portalId < 0) portalId = PortalSettings.Current.PortalId;

                    if (!string.IsNullOrEmpty(ModuleLst.SelectedValue))
                    {
                        var moduleId = int.Parse(ModuleLst.SelectedValue);
                        if (moduleId >= 0)
                        {
                            return DesktopModuleController.GetDesktopModule(moduleId, portalId);
                        }
                    }
                }

                return null;
	        }]]></body>
          </codeblock>
        </property>
        <property name="SelectedPortalSettings">
          <declaration><![CDATA[private PortalSettings SelectedPortalSettings]]></declaration>
          <documentation>
            <summary>
 Return the <see cref="T:DotNetNuke.Entities.Portals.PortalSettings" /> for the selected portal (from the Site list), unless
 the site list is not visible or there are no other sites in our site group, in which case
 it returns the PortalSettings for the current portal.
 </summary>
          </documentation>
          <codeblock>
            <location sl="77" sc="13" el="100" ec="14">admin\ControlPanel\AddModule.ascx.cs</location>
            <body hash="2b888b6079e26b68b57c7b460469fd06"><![CDATA[{
                var portalSettings = PortalSettings.Current;

                try
                {
                    if (SiteListPanel.Visible && SiteList.SelectedItem != null)
                    {
                        if (!string.IsNullOrEmpty(SiteList.SelectedItem.Value))
                        {
                            var selectedPortalId = int.Parse(SiteList.SelectedItem.Value);
                            if (PortalSettings.PortalId != selectedPortalId)
                            {
                                portalSettings = new PortalSettings(int.Parse(SiteList.SelectedItem.Value));
                            }
                        }
                    }
                }
                catch (Exception)
                {
                    portalSettings = PortalSettings.Current;
                }

                return portalSettings;
            }]]></body>
          </codeblock>
        </property>
        <property name="ToolName">
          <declaration><![CDATA[public string ToolName]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="354" sc="4" el="356" ec="5">admin\ControlPanel\AddModule.ascx.cs</location>
            <body hash="25d0d943091c5e1a4ac3425df166b4bd"><![CDATA[{
				return "QuickAddModule";
			}]]></body>
          </codeblock>
          <codeblock>
            <location sl="358" sc="4" el="359" ec="67">admin\ControlPanel\AddModule.ascx.cs</location>
            <body hash="a60e09c9c0a16e3f8956940a5d55efbc"><![CDATA[{
				throw new NotSupportedException("Set ToolName not supported");]]></body>
          </codeblock>
        </property>
        <property name="Visible">
          <declaration><![CDATA[public override bool Visible]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="330" sc="4" el="332" ec="5">admin\ControlPanel\AddModule.ascx.cs</location>
            <body hash="53e712cdfbc61a90539e6a9780bd04b9"><![CDATA[{
				return base.Visible && TabPermissionController.CanAddContentToPage();
			}]]></body>
          </codeblock>
          <codeblock>
            <location sl="334" sc="4" el="336" ec="5">admin\ControlPanel\AddModule.ascx.cs</location>
            <body hash="816238808b008019fa832830e6bf87ac"><![CDATA[{
				base.Visible = value;
			}]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="AddPage">
      <declaration><![CDATA[public class AddPage : UserControl, IDnnRibbonBarTool]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public AddPage()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="CmdAddPageClick">
          <declaration><![CDATA[protected void CmdAddPageClick(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="82" sc="9" el="126" ec="10">admin\ControlPanel\AddPage.ascx.cs</location>
            <body hash="2afdb92114ec8b29af4c0e71cefd5753"><![CDATA[{
            int selectedTabID = Int32.Parse(PageLst.SelectedValue);
            TabInfo selectedTab = TabController.Instance.GetTab(selectedTabID, PortalSettings.ActiveTab.PortalID, false);
            var tabLocation = (TabRelativeLocation) Enum.Parse(typeof (TabRelativeLocation), LocationLst.SelectedValue);
            TabInfo newTab = RibbonBarManager.InitTabInfoObject(selectedTab, tabLocation);

            newTab.TabName = Name.Text;
            newTab.IsVisible = IncludeInMenu.Checked;

            string errMsg = string.Empty;
            try
            {
				RibbonBarManager.SaveTabInfoObject(newTab, selectedTab, tabLocation, TemplateLst.SelectedValue);
            }
            catch (DotNetNukeException ex)
            {
                Exceptions.LogException(ex);
                errMsg = (ex.ErrorCode != DotNetNukeErrorCode.NotSet) ? GetString("Err." + ex.ErrorCode) : ex.Message;
            }
            catch (Exception ex)
            {
                Exceptions.LogException(ex);
                errMsg = ex.Message;
            }

            //Clear the Tab's Cached modules
            DataCache.ClearModuleCache(PortalSettings.ActiveTab.TabID);

            //Update Cached Tabs as TabPath may be needed before cache is cleared
            TabInfo tempTab;
            if (TabController.Instance.GetTabsByPortal(PortalSettings.ActiveTab.PortalID).TryGetValue(newTab.TabID, out tempTab))
            {
                tempTab.TabPath = newTab.TabPath;
            }

            if ((string.IsNullOrEmpty(errMsg)))
            {
                Response.Redirect(Globals.NavigateURL(newTab.TabID));
            }
            else
            {
                errMsg = string.Format("<p>{0}</p><p>{1}</p>", GetString("Err.Header"), errMsg);
                Web.UI.Utilities.RegisterAlertOnPageLoad(this, new MessageWindowParameters(errMsg) { Title = GetString("Err.Title")});
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetString">
          <declaration><![CDATA[private string GetString(string key)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="251" sc="9" el="253" ec="10">admin\ControlPanel\AddPage.ascx.cs</location>
            <body hash="fdb9cfd70aff46a9da06e018de02d9c8"><![CDATA[{
            return Localization.GetString(key, LocalResourceFile);
        }]]></body>
          </codeblock>
        </method>
        <method name="LoadAllLists">
          <declaration><![CDATA[private void LoadAllLists()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="191" sc="9" el="195" ec="10">admin\ControlPanel\AddPage.ascx.cs</location>
            <body hash="d2bf7a722ffdfda2c2d320605f028b43"><![CDATA[{
            LoadLocationList();
            LoadTemplateList();
            LoadPageList();
        }]]></body>
          </codeblock>
        </method>
        <method name="LoadLocationList">
          <declaration><![CDATA[private void LoadLocationList()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="218" sc="9" el="231" ec="10">admin\ControlPanel\AddPage.ascx.cs</location>
            <body hash="6fe697a9175d97ae2c79c76ec1318879"><![CDATA[{
            LocationLst.ClearSelection();
            LocationLst.Items.Clear();

            //LocationLst.Items.Add(new ListItem(GetString("Before"), "BEFORE"));
            //LocationLst.Items.Add(new ListItem(GetString("After"), "AFTER"));
            //LocationLst.Items.Add(new ListItem(GetString("Child"), "CHILD"));

            LocationLst.AddItem(GetString("Before"), "BEFORE");
            LocationLst.AddItem(GetString("After"), "AFTER");
            LocationLst.AddItem(GetString("Child"), "CHILD");

            LocationLst.SelectedIndex = (!PortalSecurity.IsInRole("Administrators")) ? 2 : 1;
        }]]></body>
          </codeblock>
        </method>
        <method name="LoadPageList">
          <declaration><![CDATA[private void LoadPageList()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="234" sc="9" el="248" ec="10">admin\ControlPanel\AddPage.ascx.cs</location>
            <body hash="801903983bf2a33d53c72da4b9897e1d"><![CDATA[{
            PageLst.ClearSelection();
            PageLst.Items.Clear();

            PageLst.DataTextField = "IndentedTabName";
            PageLst.DataValueField = "TabID";
            PageLst.DataSource = RibbonBarManager.GetPagesList();
            PageLst.DataBind();

            var item = PageLst.FindItemByValue(PortalSettings.ActiveTab.TabID.ToString());
            if (((item != null)))
            {
                item.Selected = true;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="LoadTemplateList">
          <declaration><![CDATA[private void LoadTemplateList()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="198" sc="9" el="215" ec="10">admin\ControlPanel\AddPage.ascx.cs</location>
            <body hash="b670278d5977b5278408c2e0d81c1445"><![CDATA[{
            TemplateLst.ClearSelection();
            TemplateLst.Items.Clear();

            //Get Templates Folder
            ArrayList templateFiles = Globals.GetFileList(PortalSettings.PortalId, "page.template", false, "Templates/");
            foreach (FileItem dnnFile in templateFiles)
            {
                var item = new DnnComboBoxItem(dnnFile.Text.Replace(".page.template", ""), dnnFile.Value);
                TemplateLst.Items.Add(item);
                if (item.Text == "Default")
                {
                    item.Selected = true;
                }
            }

            TemplateLst.InsertItem(0, GetString("NoTemplate"), "");
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="51" sc="9" el="79" ec="10">admin\ControlPanel\AddPage.ascx.cs</location>
            <body hash="040a0d56e9180e2a8cfc92301767dbd1"><![CDATA[{
            base.OnLoad(e);

            cmdAddPage.Click += CmdAddPageClick;

            try
            {
                if (PortalSettings.Pages < PortalSettings.PageQuota || UserController.Instance.GetCurrentUserInfo().IsSuperUser || PortalSettings.PageQuota == 0)
                {
                    cmdAddPage.Enabled = true;
                }
                else
                {
                    cmdAddPage.Enabled = false;
                    cmdAddPage.ToolTip = Localization.GetString("ExceededQuota", LocalResourceFile);
                }
                if (!IsPostBack)
                {
                    if ((Visible))
                    {
                        LoadAllLists();
                    }
                }
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_newTabObject">
          <declaration><![CDATA[private TabInfo _newTabObject;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdAddPage">
          <declaration><![CDATA[protected LinkButton cmdAddPage;]]></declaration>
          <documentation>
            <summary>
 cmdAddPage control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="IncludeInMenu">
          <declaration><![CDATA[protected CheckBox IncludeInMenu;]]></declaration>
          <documentation>
            <summary>
 IncludeInMenu control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="LocationLst">
          <declaration><![CDATA[protected DnnComboBox LocationLst;]]></declaration>
          <documentation>
            <summary>
 LocationLst control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="Name">
          <declaration><![CDATA[protected TextBox Name;]]></declaration>
          <documentation>
            <summary>
 Name control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="NameLbl">
          <declaration><![CDATA[protected Label NameLbl;]]></declaration>
          <documentation>
            <summary>
 NameLbl control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="PageLst">
          <declaration><![CDATA[protected DnnComboBox PageLst;]]></declaration>
          <documentation>
            <summary>
 PageLst control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="TemplateLst">
          <declaration><![CDATA[protected DnnComboBox TemplateLst;]]></declaration>
          <documentation>
            <summary>
 TemplateLst control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
      </fields>
      <properties>
        <property name="LocalResourceFile">
          <declaration><![CDATA[private string LocalResourceFile]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="177" sc="13" el="179" ec="14">admin\ControlPanel\AddPage.ascx.cs</location>
            <body hash="a61fe5ae6a6c71e43aff88d04c647666"><![CDATA[{
                return string.Format("{0}/{1}/{2}.ascx.resx", TemplateSourceDirectory, Localization.LocalResourceDirectory, GetType().BaseType.Name);
            }]]></body>
          </codeblock>
        </property>
        <property name="NewTabObject">
          <declaration><![CDATA[protected TabInfo NewTabObject]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="165" sc="13" el="171" ec="14">admin\ControlPanel\AddPage.ascx.cs</location>
            <body hash="afeb279350b5e6f769a555e9b54e05e5"><![CDATA[{
                if (((_newTabObject == null)))
                {
                    _newTabObject = RibbonBarManager.InitTabInfoObject(PortalSettings.ActiveTab);
                }
                return _newTabObject;
            }]]></body>
          </codeblock>
        </property>
        <property name="PortalSettings">
          <declaration><![CDATA[private static PortalSettings PortalSettings]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="185" sc="13" el="187" ec="14">admin\ControlPanel\AddPage.ascx.cs</location>
            <body hash="de88f44ddad615520ed6ac528455cb0e"><![CDATA[{
                return PortalSettings.Current;
            }]]></body>
          </codeblock>
        </property>
        <property name="ToolName">
          <declaration><![CDATA[public string ToolName]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="147" sc="13" el="149" ec="14">admin\ControlPanel\AddPage.ascx.cs</location>
            <body hash="a0cd1c5470d651ec1d6306bf89ab81d8"><![CDATA[{
                return "QuickAddPage";
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="151" sc="13" el="152" ec="79">admin\ControlPanel\AddPage.ascx.cs</location>
            <body hash="755076bde14d40545acdcf766db94b6f"><![CDATA[{
                throw new NotSupportedException("Set ToolName not supported");]]></body>
          </codeblock>
        </property>
        <property name="Visible">
          <declaration><![CDATA[public override bool Visible]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="135" sc="13" el="137" ec="14">admin\ControlPanel\AddPage.ascx.cs</location>
            <body hash="49d547b44ea15e5bbbbf5628206d67f9"><![CDATA[{
                return base.Visible && TabPermissionController.CanAddPage();
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="139" sc="13" el="141" ec="14">admin\ControlPanel\AddPage.ascx.cs</location>
            <body hash="607b1334eefa383f12b217e98f4e49e3"><![CDATA[{
                base.Visible = value;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="SwitchSite">
      <declaration><![CDATA[public class SwitchSite : UserControl, IDnnRibbonBarTool]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public SwitchSite()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="CmdSwitchClick">
          <declaration><![CDATA[protected void CmdSwitchClick(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="65" sc="9" el="87" ec="10">admin\ControlPanel\SwitchSite.ascx.cs</location>
            <body hash="ad598a2282788fba2ff5e581a6dc80cc"><![CDATA[{
            try
            {
                if ((!string.IsNullOrEmpty(SitesLst.SelectedValue)))
                {
                    int selectedPortalID = int.Parse(SitesLst.SelectedValue);
                    var portalAliases = PortalAliasController.Instance.GetPortalAliasesByPortalId(selectedPortalID).ToList();

                    if ((portalAliases.Count > 0 && (portalAliases[0] != null)))
                    {
                        Response.Redirect(Globals.AddHTTP(((PortalAliasInfo) portalAliases[0]).HTTPAlias));
                    }
                }
            }
            catch(ThreadAbortException)
            {
              //Do nothing we are not logging ThreadAbortxceptions caused by redirects      
            }
            catch (Exception ex)
            {
                Exceptions.LogException(ex);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="LoadPortalsList">
          <declaration><![CDATA[private void LoadPortalsList()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="126" sc="9" el="139" ec="10">admin\ControlPanel\SwitchSite.ascx.cs</location>
            <body hash="ab6a59a5ffad5a6dd0f0d5e019232d8a"><![CDATA[{
            var portals = PortalController.Instance.GetPortals();

            SitesLst.ClearSelection();
            SitesLst.Items.Clear();

            SitesLst.DataSource = portals;
            SitesLst.DataTextField = "PortalName";
            SitesLst.DataValueField = "PortalID";
            SitesLst.DataBind();

            //SitesLst.Items.Insert(0, new ListItem(string.Empty));
            SitesLst.InsertItem(0, string.Empty, string.Empty);
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="46" sc="9" el="62" ec="10">admin\ControlPanel\SwitchSite.ascx.cs</location>
            <body hash="79f8fcd4632c50dee6c07360ab17dfb2"><![CDATA[{
            base.OnLoad(e);

            cmdSwitch.Click += CmdSwitchClick;

            try
            {
                if (Visible && !IsPostBack)
                {
                    LoadPortalsList();
                }
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="cmdSwitch">
          <declaration><![CDATA[protected LinkButton cmdSwitch;]]></declaration>
          <documentation>
            <summary>
 cmdSwitch control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="SitesLst">
          <declaration><![CDATA[protected DnnComboBox SitesLst;]]></declaration>
          <documentation>
            <summary>
 SitesLst control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
      </fields>
      <properties>
        <property name="ToolName">
          <declaration><![CDATA[public string ToolName]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="112" sc="13" el="114" ec="14">admin\ControlPanel\SwitchSite.ascx.cs</location>
            <body hash="de3cdcfbec8bae6e42e26cb15002d453"><![CDATA[{
                return "QuickSwitchSite";
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="116" sc="13" el="117" ec="79">admin\ControlPanel\SwitchSite.ascx.cs</location>
            <body hash="755076bde14d40545acdcf766db94b6f"><![CDATA[{
                throw new NotSupportedException("Set ToolName not supported");]]></body>
          </codeblock>
        </property>
        <property name="Visible">
          <declaration><![CDATA[public override bool Visible]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="96" sc="13" el="102" ec="14">admin\ControlPanel\SwitchSite.ascx.cs</location>
            <body hash="abcc680af2dafa6a56c2beed9cab558e"><![CDATA[{
                if ((PortalSettings.Current.UserId == Null.NullInteger))
                {
                    return false;
                }
                return PortalSettings.Current.UserInfo.IsSuperUser && base.Visible;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="104" sc="13" el="106" ec="14">admin\ControlPanel\SwitchSite.ascx.cs</location>
            <body hash="607b1334eefa383f12b217e98f4e49e3"><![CDATA[{
                base.Visible = value;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="UpdatePage">
      <declaration><![CDATA[public class UpdatePage : UserControl, IDnnRibbonBarTool]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public UpdatePage()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="CmdUpdateClick">
          <declaration><![CDATA[protected void CmdUpdateClick(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="78" sc="9" el="138" ec="10">admin\ControlPanel\UpdatePage.ascx.cs</location>
            <body hash="ba437fae4e88b2421fa841a312c07363"><![CDATA[{
            if ((TabPermissionController.CanManagePage()))
            {
                TabInfo selectedTab = null;
                if ((!string.IsNullOrEmpty(PageLst.SelectedValue)))
                {
                    int selectedTabID = Int32.Parse(PageLst.SelectedValue);
                    selectedTab = TabController.Instance.GetTab(selectedTabID, PortalSettings.ActiveTab.PortalID, false);
                }

                TabRelativeLocation tabLocation = TabRelativeLocation.NOTSET;
                if ((!string.IsNullOrEmpty(LocationLst.SelectedValue)))
                {
                    tabLocation = (TabRelativeLocation) Enum.Parse(typeof (TabRelativeLocation), LocationLst.SelectedValue);
                }

                TabInfo tab = CurrentTab;

                tab.TabName = Name.Text;
                tab.IsVisible = IncludeInMenu.Checked;
                tab.DisableLink = IsDisabled.Checked;
                tab.IsSecure = IsSecure.Checked;
                tab.SkinSrc = SkinLst.SelectedValue;

                string errMsg = "";
                try
                {
                    RibbonBarManager.SaveTabInfoObject(tab, selectedTab, tabLocation, null);
                }
                catch (DotNetNukeException ex)
                {
                    Exceptions.LogException(ex);
                    errMsg = (ex.ErrorCode != DotNetNukeErrorCode.NotSet) ? GetString("Err." + ex.ErrorCode) : ex.Message;
                }
                catch (Exception ex)
                {
                    Exceptions.LogException(ex);
                    errMsg = ex.Message;
                }

                //Clear the Tab's Cached modules
                DataCache.ClearModuleCache(PortalSettings.ActiveTab.TabID);

                //Update Cached Tabs as TabPath may be needed before cache is cleared
                TabInfo tempTab;
                if (TabController.Instance.GetTabsByPortal(PortalSettings.ActiveTab.PortalID).TryGetValue(tab.TabID, out tempTab))
                {
                    tempTab.TabPath = tab.TabPath;
                }

                if ((string.IsNullOrEmpty(errMsg)))
                {
                    Response.Redirect(Globals.NavigateURL(tab.TabID));
                }
                else
                {
                    errMsg = string.Format("<p>{0}</p><p>{1}</p>", GetString("Err.Header"), errMsg);
                    Web.UI.Utilities.RegisterAlertOnPageLoad(this, new MessageWindowParameters(errMsg) { Title = GetString("Err.Title") });
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="FormatSkinName">
          <declaration><![CDATA[private static string FormatSkinName(string strSkinFolder, string strSkinFile)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="308" sc="9" el="322" ec="10">admin\ControlPanel\UpdatePage.ascx.cs</location>
            <body hash="120b841041cc1b1b76848801ea29bb84"><![CDATA[{
            if (strSkinFolder.ToLower() == "_default")
            {
                return strSkinFile;
            }
            switch (strSkinFile.ToLower())
            {
                case "skin":
                case "container":
                case "default":
                    return strSkinFolder;
                default:
                    return strSkinFolder + " - " + strSkinFile;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetSeparatorItem">
          <declaration><![CDATA[private RadComboBoxItem GetSeparatorItem()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="303" sc="9" el="305" ec="10">admin\ControlPanel\UpdatePage.ascx.cs</location>
            <body hash="b69821b1f05f7d463169d60917f37e5b"><![CDATA[{
            return new RadComboBoxItem(GetString("SkinLstSeparator"), string.Empty) {CssClass = "SkinLstSeparator", Enabled = false};
        }]]></body>
          </codeblock>
        </method>
        <method name="GetString">
          <declaration><![CDATA[private string GetString(string key)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="358" sc="9" el="360" ec="10">admin\ControlPanel\UpdatePage.ascx.cs</location>
            <body hash="fdb9cfd70aff46a9da06e018de02d9c8"><![CDATA[{
            return Localization.GetString(key, LocalResourceFile);
        }]]></body>
          </codeblock>
        </method>
        <method name="IsParentTab">
          <declaration><![CDATA[private bool IsParentTab(TabInfo tab, int parentTabId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="363" sc="3" el="374" ec="4">admin\ControlPanel\UpdatePage.ascx.cs</location>
            <body hash="2f3cb1fbfc15f0c0396ab5bbad9c2fc7"><![CDATA[{
			while (tab != null)
			{
				if (tab.TabID == parentTabId)
				{
					return true;
				}
                tab = tab.ParentId != Null.NullInteger ? TabController.Instance.GetTab(tab.ParentId, tab.PortalID, false) : null;
			}

			return false;
		}]]></body>
          </codeblock>
        </method>
        <method name="LoadAllLists">
          <declaration><![CDATA[private void LoadAllLists()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="204" sc="9" el="214" ec="10">admin\ControlPanel\UpdatePage.ascx.cs</location>
            <body hash="fa3a8381870b0fe8e2a14b700ea10103"><![CDATA[{
            LocationLst.Enabled = RibbonBarManager.CanMovePage();
            PageLst.Enabled = RibbonBarManager.CanMovePage();
            if ((LocationLst.Enabled))
            {
                LoadLocationList();
                LoadPageList();
            }

            LoadSkinList();
        }]]></body>
          </codeblock>
        </method>
        <method name="LoadLocationList">
          <declaration><![CDATA[private void LoadLocationList()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="325" sc="9" el="340" ec="10">admin\ControlPanel\UpdatePage.ascx.cs</location>
            <body hash="9e9da1a4bb65ec875c7cc3595afb8aa9"><![CDATA[{
            LocationLst.ClearSelection();
            LocationLst.Items.Clear();

            //LocationLst.Items.Add(new ListItem(GetString("NoLocationSelection"), ""));
            //LocationLst.Items.Add(new ListItem(GetString("Before"), "BEFORE"));
            //LocationLst.Items.Add(new ListItem(GetString("After"), "AFTER"));
            //LocationLst.Items.Add(new ListItem(GetString("Child"), "CHILD"));

            LocationLst.AddItem(GetString("NoLocationSelection"), "");
            LocationLst.AddItem(GetString("Before"), "BEFORE");
            LocationLst.AddItem(GetString("After"), "AFTER");
            LocationLst.AddItem(GetString("Child"), "CHILD");

            LocationLst.SelectedIndex = 0;
        }]]></body>
          </codeblock>
        </method>
        <method name="LoadPageList">
          <declaration><![CDATA[private void LoadPageList()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="343" sc="9" el="355" ec="10">admin\ControlPanel\UpdatePage.ascx.cs</location>
            <body hash="e73cc397dc2d8be98b4adf4e33198a6a"><![CDATA[{
            PageLst.ClearSelection();
            PageLst.Items.Clear();

            PageLst.DataTextField = "IndentedTabName";
            PageLst.DataValueField = "TabID";
            PageLst.DataSource = RibbonBarManager.GetPagesList().Where(t => !IsParentTab(t, CurrentTab.TabID));
            PageLst.DataBind();

            //PageLst.Items.Insert(0, new ListItem(GetString("NoPageSelection"), string.Empty));
            PageLst.InsertItem(0, GetString("NoPageSelection"), string.Empty);
            PageLst.SelectedIndex = 0;
        }]]></body>
          </codeblock>
        </method>
        <method name="LoadSkinList">
          <declaration><![CDATA[private void LoadSkinList()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="217" sc="9" el="300" ec="10">admin\ControlPanel\UpdatePage.ascx.cs</location>
            <body hash="d6bc9f73bced180bccece98fbe00e578"><![CDATA[{
            SkinLst.ClearSelection();
            SkinLst.Items.Clear();
            SkinLst.Items.Add(new RadComboBoxItem(GetString("DefaultSkin"), string.Empty));

            // load portal skins
            var portalSkinsHeader = new RadComboBoxItem(GetString("PortalSkins"), string.Empty) {Enabled = false, CssClass = "SkinListHeader"};
            SkinLst.Items.Add(portalSkinsHeader);

            string[] arrFolders;
            string[] arrFiles;
            string strLastFolder = "";
            string strRoot = PortalSettings.HomeDirectoryMapPath + SkinController.RootSkin;
            if (Directory.Exists(strRoot))
            {
                arrFolders = Directory.GetDirectories(strRoot);
                foreach (string strFolder in arrFolders)
                {
                    arrFiles = Directory.GetFiles(strFolder, "*.ascx");
                    foreach (string strFile in arrFiles)
                    {
                        string folder = strFolder.Substring(strFolder.LastIndexOf("\\") + 1);
                        if (strLastFolder != folder)
                        {
                            if (!string.IsNullOrEmpty(strLastFolder))
                            {
                                SkinLst.Items.Add(GetSeparatorItem());
                            }
                            strLastFolder = folder;
                        }
                        SkinLst.Items.Add(new RadComboBoxItem(FormatSkinName(folder, Path.GetFileNameWithoutExtension(strFile)),
                                                              "[L]" + SkinController.RootSkin + "/" + folder + "/" + Path.GetFileName(strFile)));
                    }
                }
            }

            //No portal skins added, remove the header
            if ((SkinLst.Items.Count == 2))
            {
                SkinLst.Items.Remove(1);
            }

            //load host skins
            var hostSkinsHeader = new RadComboBoxItem(GetString("HostSkins"), string.Empty) {Enabled = false, CssClass = "SkinListHeader"};
            SkinLst.Items.Add(hostSkinsHeader);

            strRoot = Globals.HostMapPath + SkinController.RootSkin;
            if (Directory.Exists(strRoot))
            {
                arrFolders = Directory.GetDirectories(strRoot);
                foreach (string strFolder in arrFolders)
                {
                    if (!strFolder.EndsWith(Globals.glbHostSkinFolder))
                    {
                        arrFiles = Directory.GetFiles(strFolder, "*.ascx");
                        foreach (string strFile in arrFiles)
                        {
                            string folder = strFolder.Substring(strFolder.LastIndexOf("\\") + 1);
                            if (strLastFolder != folder)
                            {
                                if (!string.IsNullOrEmpty(strLastFolder))
                                {
                                    SkinLst.Items.Add(GetSeparatorItem());
                                }
                                strLastFolder = folder;
                            }
                            SkinLst.Items.Add(new RadComboBoxItem(FormatSkinName(folder, Path.GetFileNameWithoutExtension(strFile)),
                                                                  "[G]" + SkinController.RootSkin + "/" + folder + "/" + Path.GetFileName(strFile)));
                        }
                    }
                }
            }

            //Set the selected item
            SkinLst.SelectedIndex = 0;
            if ((!string.IsNullOrEmpty(CurrentTab.SkinSrc)))
            {
                RadComboBoxItem selectItem = SkinLst.FindItemByValue(CurrentTab.SkinSrc);
                if (((selectItem != null)))
                {
                    selectItem.Selected = true;
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="53" sc="9" el="75" ec="10">admin\ControlPanel\UpdatePage.ascx.cs</location>
            <body hash="b7e348633e9dc9b9854565408568a80d"><![CDATA[{
            base.OnLoad(e);

            cmdUpdate.Click += CmdUpdateClick;

            try
            {
                if (Visible && !IsPostBack)
                {
                    Name.Text = CurrentTab.TabName;
                    IncludeInMenu.Checked = CurrentTab.IsVisible;
                    IsDisabled.Checked = CurrentTab.DisableLink;
                    IsSecurePanel.Visible = PortalSettings.SSLEnabled;
                    IsSecure.Enabled = PortalSettings.SSLEnabled;
                    IsSecure.Checked = CurrentTab.IsSecure;
                    LoadAllLists();
                }
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_currentTab">
          <declaration><![CDATA[private TabInfo _currentTab;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdUpdate">
          <declaration><![CDATA[protected LinkButton cmdUpdate;]]></declaration>
          <documentation>
            <summary>
 cmdUpdate control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="DisabledLbl">
          <declaration><![CDATA[protected Label DisabledLbl;]]></declaration>
          <documentation>
            <summary>
 DisabledLbl control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="IncludeInMenu">
          <declaration><![CDATA[protected CheckBox IncludeInMenu;]]></declaration>
          <documentation>
            <summary>
 IncludeInMenu control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="IncludeInMenuLbl">
          <declaration><![CDATA[protected Label IncludeInMenuLbl;]]></declaration>
          <documentation>
            <summary>
 IncludeInMenuLbl control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="IsDisabled">
          <declaration><![CDATA[protected CheckBox IsDisabled;]]></declaration>
          <documentation>
            <summary>
 IsDisabled control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="IsSecure">
          <declaration><![CDATA[protected CheckBox IsSecure;]]></declaration>
          <documentation>
            <summary>
 IsSecure control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="IsSecureLbl">
          <declaration><![CDATA[protected DnnFieldLabel IsSecureLbl;]]></declaration>
          <documentation>
            <summary>
 IsSecureLbl control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="IsSecurePanel">
          <declaration><![CDATA[protected Panel IsSecurePanel;]]></declaration>
          <documentation>
            <summary>
 IsSecurePanel control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="LocationLst">
          <declaration><![CDATA[protected DnnComboBox LocationLst;]]></declaration>
          <documentation>
            <summary>
 LocationLst control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="Name">
          <declaration><![CDATA[protected TextBox Name;]]></declaration>
          <documentation>
            <summary>
 Name control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="PageLst">
          <declaration><![CDATA[protected DnnComboBox PageLst;]]></declaration>
          <documentation>
            <summary>
 PageLst control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="SkinLbl">
          <declaration><![CDATA[protected Label SkinLbl;]]></declaration>
          <documentation>
            <summary>
 SkinLbl control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="SkinLst">
          <declaration><![CDATA[protected DnnComboBox SkinLst;]]></declaration>
          <documentation>
            <summary>
 SkinLst control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
      </fields>
      <properties>
        <property name="CurrentTab">
          <declaration><![CDATA[private TabInfo CurrentTab]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="177" sc="13" el="184" ec="14">admin\ControlPanel\UpdatePage.ascx.cs</location>
            <body hash="94239ce0cf7bd5723b837a30cec5aeb2"><![CDATA[{
                //Weird - but the activetab has different skin src value than getting from the db
                if (((_currentTab == null)))
                {
                    _currentTab = TabController.Instance.GetTab(PortalSettings.ActiveTab.TabID, PortalSettings.ActiveTab.PortalID, false);
                }
                return _currentTab;
            }]]></body>
          </codeblock>
        </property>
        <property name="LocalResourceFile">
          <declaration><![CDATA[private string LocalResourceFile]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="190" sc="13" el="192" ec="14">admin\ControlPanel\UpdatePage.ascx.cs</location>
            <body hash="a61fe5ae6a6c71e43aff88d04c647666"><![CDATA[{
                return string.Format("{0}/{1}/{2}.ascx.resx", TemplateSourceDirectory, Localization.LocalResourceDirectory, GetType().BaseType.Name);
            }]]></body>
          </codeblock>
        </property>
        <property name="PortalSettings">
          <declaration><![CDATA[private static PortalSettings PortalSettings]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="198" sc="13" el="200" ec="14">admin\ControlPanel\UpdatePage.ascx.cs</location>
            <body hash="de88f44ddad615520ed6ac528455cb0e"><![CDATA[{
                return PortalSettings.Current;
            }]]></body>
          </codeblock>
        </property>
        <property name="ToolName">
          <declaration><![CDATA[public string ToolName]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="159" sc="13" el="161" ec="14">admin\ControlPanel\UpdatePage.ascx.cs</location>
            <body hash="5c484926e423fe4f1599e127fbff2f59"><![CDATA[{
                return "QuickUpdatePage";
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="163" sc="13" el="164" ec="79">admin\ControlPanel\UpdatePage.ascx.cs</location>
            <body hash="755076bde14d40545acdcf766db94b6f"><![CDATA[{
                throw new NotSupportedException("Set ToolName not supported");]]></body>
          </codeblock>
        </property>
        <property name="Visible">
          <declaration><![CDATA[public override bool Visible]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="147" sc="13" el="149" ec="14">admin\ControlPanel\UpdatePage.ascx.cs</location>
            <body hash="9c61b362283d9945c5fdd4ed0fc06d30"><![CDATA[{
                return base.Visible && TabPermissionController.CanManagePage();
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="151" sc="13" el="153" ec="14">admin\ControlPanel\UpdatePage.ascx.cs</location>
            <body hash="607b1334eefa383f12b217e98f4e49e3"><![CDATA[{
                base.Visible = value;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="DotNetNuke.UI.ControlPanels">
    <class name="ControlBar">
      <declaration><![CDATA[public class ControlBar : ControlPanelBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private readonly IList<string> _adminCommonTabs = new List<string>]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="64" sc="9" el="77" ec="108">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="d8e710080a44f818abb39ffe7e295248"><![CDATA[private readonly IList<string> _adminCommonTabs = new List<string> { "Site Settings", 
                                                                            "Security Roles", 
                                                                            "User Accounts", 
                                                                            "File Management" };

        private readonly IList<string> _hostCommonTabs = new List<string> { "Host Settings",
                                                                            "Site Management",
                                                                            "File Management",
                                                                            "Extensions",
                                                                            "Dashboard",
                                                                            "Health Monitoring",
                                                                            "Technical Support",
                                                                            "Knowledge Base",
                                                                            "Software and Documentation" };]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="ActiveTabHasChildren">
          <declaration><![CDATA[protected virtual bool ActiveTabHasChildren()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="759" sc="9" el="768" ec="10">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="63c9db313912affc2acf9b9abd861858"><![CDATA[{
            var children = TabController.GetTabsByParent(PortalSettings.ActiveTab.TabID, PortalSettings.ActiveTab.PortalID);

            if ((children == null) || children.Count < 1)
            {
                return false;
            }

            return true;
        }]]></body>
          </codeblock>
        </method>
        <method name="AutoSetUserMode">
          <declaration><![CDATA[private void AutoSetUserMode()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="850" sc="9" el="887" ec="10">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="e34a365f6703a62222ff3cff8d624a9d"><![CDATA[{
            int tabId = PortalSettings.ActiveTab.TabID;
            int portalId = PortalSettings.Current.PortalId;
            string pageId = string.Format("{0}:{1}", portalId, tabId);

            HttpCookie cookie = Request.Cookies["StayInEditMode"];
            if (cookie != null && cookie.Value == "YES")
            {
                if (PortalSettings.Current.UserMode != PortalSettings.Mode.Edit)
                {
                    SetUserMode("EDIT");
                    SetLastPageHistory(pageId);
                    Response.Redirect(Request.RawUrl, true);
                    
                }

                return;
            }

            string lastPageId = GetLastPageHistory();
	        var isShowAsCustomError = Request.QueryString.AllKeys.Contains("aspxerrorpath");

			if (lastPageId != pageId && !isShowAsCustomError)
            {
                // navigate between pages
                if (PortalSettings.Current.UserMode != PortalSettings.Mode.View)
                {
                    SetUserMode("VIEW");
                    SetLastPageHistory(pageId);
                    Response.Redirect(Request.RawUrl, true);
                }
            }

	        if (!isShowAsCustomError)
	        {
		        SetLastPageHistory(pageId);
	        }
        }]]></body>
          </codeblock>
        </method>
        <method name="BindLanguagesList">
          <declaration><![CDATA[private void BindLanguagesList()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="920" sc="3" el="937" ec="4">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="d1372a3f56029c004686d91154a7256b"><![CDATA[{
            if (ShowSwitchLanguagesPanel())
            {
                const string FlagImageUrlFormatString = "~/images/Flags/{0}.gif";
                foreach (var lang in LoadLanguagesList())
                {
                    var item = new DnnComboBoxItem(lang[0], lang[1]);
                    item.ImageUrl = string.Format(FlagImageUrlFormatString, item.Value);
                    if (lang[2] == "true")
                    {
                        item.Selected = true;
                    }

                    controlBar_SwitchLanguage.Items.Add(item);
                }

            }
		}]]></body>
          </codeblock>
        </method>
        <method name="BindPortalsList">
          <declaration><![CDATA[private void BindPortalsList()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="912" sc="3" el="917" ec="4">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="5531de994ae822ee351b70b1470e113d"><![CDATA[{
			foreach (var portal in LoadPortalsList())
			{
				controlBar_SwitchSite.Items.Add(new DnnComboBoxItem(portal[0], portal[1]));
			}
		}]]></body>
          </codeblock>
        </method>
        <method name="BuildToolUrl">
          <declaration><![CDATA[protected string BuildToolUrl(string toolName, bool isHostTool, string moduleFriendlyName, string controlKey, string navigateUrl, bool showAsPopUp)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="295" sc="9" el="379" ec="10">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="3e3835dd8ea3a69413749569d8ff2211"><![CDATA[{
            if (isHostTool && !UserController.Instance.GetCurrentUserInfo().IsSuperUser)
            {
                return "javascript:void(0);";
            }

            if (!string.IsNullOrEmpty(navigateUrl))
            {
                return navigateUrl;
            }

            string returnValue = "javascript:void(0);";
            switch (toolName)
            {
                case "PageSettings":
                    if (TabPermissionController.CanManagePage())
                    {
                        returnValue = Globals.NavigateURL(PortalSettings.ActiveTab.TabID, "Tab", "action=edit&activeTab=settingTab");
                    }
                    break;
                case "CopyPage":
                    if (TabPermissionController.CanCopyPage())
                    {
                        returnValue = Globals.NavigateURL(PortalSettings.ActiveTab.TabID, "Tab", "action=copy&activeTab=copyTab");
                    }
                    break;
                case "DeletePage":
                    if (TabPermissionController.CanDeletePage())
                    {
                        returnValue = Globals.NavigateURL(PortalSettings.ActiveTab.TabID, "Tab", "action=delete");
                    }
                    break;
                case "PageTemplate":
                    if (TabPermissionController.CanManagePage())
                    {
                        returnValue = Globals.NavigateURL(PortalSettings.ActiveTab.TabID, "Tab", "action=edit&activeTab=advancedTab");
                    }
                    break;
                case "PageLocalization":
                    if (TabPermissionController.CanManagePage())
                    {
                        returnValue = Globals.NavigateURL(PortalSettings.ActiveTab.TabID, "Tab", "action=edit&activeTab=localizationTab");
                    }
                    break;
                case "PagePermission":
                    if (TabPermissionController.CanAdminPage())
                    {
                        returnValue = Globals.NavigateURL(PortalSettings.ActiveTab.TabID, "Tab", "action=edit&activeTab=permissionsTab");
                    }
                    break;
                case "ImportPage":
                    if (TabPermissionController.CanImportPage())
                    {
                        returnValue = Globals.NavigateURL(PortalSettings.ActiveTab.TabID, "ImportTab");
                    }
                    break;
                case "ExportPage":
                    if (TabPermissionController.CanExportPage())
                    {
                        returnValue = Globals.NavigateURL(PortalSettings.ActiveTab.TabID, "ExportTab");
                    }
                    break;
                case "NewPage":
                    if (TabPermissionController.CanAddPage())
                    {
                        returnValue = Globals.NavigateURL("Tab", "activeTab=settingTab");
                    }
                    break;
                case "PublishPage":
                    if (TabPermissionController.CanAdminPage())
                    {
                        returnValue = Globals.NavigateURL(PortalSettings.ActiveTab.TabID);
                    }
                    break;
                default:
                    if (!string.IsNullOrEmpty(moduleFriendlyName))
                    {
                        var additionalParams = new List<string>();
                        returnValue = GetTabURL(additionalParams, toolName, isHostTool, 
                                                moduleFriendlyName, controlKey, showAsPopUp);
                    }
                    break;
            }
            return returnValue;
        }]]></body>
          </codeblock>
        </method>
        <method name="CheckedWhenInLayoutMode">
          <declaration><![CDATA[protected string CheckedWhenInLayoutMode()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="722" sc="9" el="724" ec="10">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="04e2d80179fa95f51b3463d028fce420"><![CDATA[{
            return UserMode == PortalSettings.Mode.Layout ? "checked='checked'" : string.Empty;
        }]]></body>
          </codeblock>
        </method>
        <method name="CheckedWhenStayInEditMode">
          <declaration><![CDATA[protected string CheckedWhenStayInEditMode()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="727" sc="9" el="741" ec="10">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="0bbf71905f5a1797d22462dc2a7c914f"><![CDATA[{
            string checkboxState = string.Empty;
            var cookie = Request.Cookies["StayInEditMode"];
            if(cookie != null && cookie.Value == "YES")
            {
                checkboxState = "checked='checked'";
            }

            if(UserMode == PortalSettings.Mode.Layout)
            {
                checkboxState += " disabled='disabled'";
            }

            return checkboxState;
        }]]></body>
          </codeblock>
        </method>
        <method name="CheckPageQuota">
          <declaration><![CDATA[protected bool CheckPageQuota()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="184" sc="9" el="187" ec="10">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="c7ee650a4b9464a0f7c278b016bee685"><![CDATA[{
            UserInfo objUser = UserController.Instance.GetCurrentUserInfo();
            return (objUser != null && objUser.IsSuperUser) || PortalSettings.PageQuota == 0 || PortalSettings.Pages < PortalSettings.PageQuota;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetAdminAdvancedMenu">
          <declaration><![CDATA[protected string GetAdminAdvancedMenu()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="563" sc="9" el="573" ec="10">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="69751b5ef74a90a8b34f8b1350709bb9"><![CDATA[{
            var tabs = AdminAdvancedTabs;
            var sb = new StringBuilder();
            foreach (var tab in tabs)
            {
                var hideBookmark = AdminBookmarkItems.Contains(tab.TabName);
                sb.Append(GetMenuItem(tab, false, hideBookmark));
            }

            return sb.ToString();
        }]]></body>
          </codeblock>
        </method>
        <method name="GetAdminBaseMenu">
          <declaration><![CDATA[protected string GetAdminBaseMenu()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="550" sc="9" el="560" ec="10">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="fe455e4f817a7ecd19a41c0d36b1d668"><![CDATA[{
            var tabs = AdminBaseTabs;
            var sb = new StringBuilder();
            foreach(var tab in tabs)
            {
                var hideBookmark = AdminBookmarkItems.Contains(tab.TabName);
                sb.Append(GetMenuItem(tab, false, hideBookmark));
            }

            return sb.ToString();
        }]]></body>
          </codeblock>
        </method>
        <method name="GetAdminTabs">
          <declaration><![CDATA[private void GetAdminTabs()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1066" sc="9" el="1085" ec="10">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="15ecba60080a82e2e564f095c7d8546e"><![CDATA[{
            var adminTab = TabController.GetTabByTabPath(PortalSettings.PortalId, "//Admin", string.Empty);
            _adminTabs = TabController.GetTabsByParent(adminTab, PortalSettings.PortalId).OrderBy(t => t.LocalizedTabName).ToList();

            _adminBaseTabs = new List<TabInfo>();
            _adminAdvancedTabs = new List<TabInfo>();

            foreach (var tabInfo in _adminTabs)
            {
                if (IsCommonTab(tabInfo))
                {
                    _adminBaseTabs.Add(tabInfo);
                }
                else
                {
                    _adminAdvancedTabs.Add(tabInfo);
                }
            }

        }]]></body>
          </codeblock>
        </method>
        <method name="GetBeaconUrl">
          <declaration><![CDATA[protected string GetBeaconUrl()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1104" sc="9" el="1109" ec="10">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="800bc9330f3109f6f188ede4643d742d"><![CDATA[{
            var beaconService = BeaconService.Instance;
            var user = UserController.Instance.GetCurrentUserInfo();
            var path = PortalSettings.ActiveTab.TabPath;
            return beaconService.GetBeaconUrl(user, path);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetBookmarkItems">
          <declaration><![CDATA[protected string GetBookmarkItems(string title)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="603" sc="9" el="618" ec="10">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="b8407b882c13f1666779683a2b2f5cfa"><![CDATA[{
            var isHostTool = title == "host";
            var bookmarkItems = isHostTool ? HostBookmarkItems : AdminBookmarkItems;
            
            if(bookmarkItems != null && bookmarkItems.Any())
            {
                var sb = new StringBuilder();
                foreach(var itemKey in bookmarkItems)
                {
                    sb.Append(GetMenuItem(itemKey, isHostTool, true));
                }
                return sb.ToString();
            }

            return string.Empty;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetButtonConfirmHeader">
          <declaration><![CDATA[protected string GetButtonConfirmHeader(string toolName)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="626" sc="9" el="628" ec="10">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="fce2bae22a23c53a158013dd9a3e38b8"><![CDATA[{
            return ClientAPI.GetSafeJSString(Localization.GetString("Tool." + toolName + ".ConfirmHeader", LocalResourceFile));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetButtonConfirmMessage">
          <declaration><![CDATA[protected string GetButtonConfirmMessage(string toolName)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="621" sc="9" el="623" ec="10">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="0b8cface0f4f0d8a63e91463a4cf57bf"><![CDATA[{
            return ClientAPI.GetSafeJSString(Localization.GetString("Tool."+toolName+".ConfirmText", LocalResourceFile));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetCurrentPortalsGroup">
          <declaration><![CDATA[private static IEnumerable<PortalInfo> GetCurrentPortalsGroup()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="831" sc="9" el="847" ec="10">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="89ae70a5893835f6914bb7482d3ebd6f"><![CDATA[{
            var groups = PortalGroupController.Instance.GetPortalGroups().ToArray();

            var result = (from @group in groups
                          select PortalGroupController.Instance.GetPortalsByGroup(@group.PortalGroupId)
                              into portals
                              where portals.Any(x => x.PortalID == PortalSettings.Current.PortalId)
                              select portals.ToArray()).FirstOrDefault();

            // Are we in a group of one?
            if (result == null || result.Length == 0)
            {
                result = new[] { PortalController.Instance.GetPortal(PortalSettings.Current.PortalId) };
            }

            return result;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetEditButtonLabel">
          <declaration><![CDATA[protected string GetEditButtonLabel()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="754" sc="9" el="756" ec="10">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="ee89ab701930d4e4607f7bd265c9c421"><![CDATA[{
            return UserMode == PortalSettings.Mode.Edit ? GetString("Tool.CloseEditMode.Text") : GetString("Tool.EditThisPage.Text");
        }]]></body>
          </codeblock>
        </method>
        <method name="GetHostAdvancedMenu">
          <declaration><![CDATA[protected string GetHostAdvancedMenu()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="590" sc="9" el="600" ec="10">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="6bf7b1731af5f7fa625dab99e33052cf"><![CDATA[{
            var tabs = HostAdvancedTabs;
            var sb = new StringBuilder();
            foreach (var tab in tabs)
            {
                var hideBookmark = HostBookmarkItems.Contains(tab.TabName);
                sb.Append(GetMenuItem(tab, false, hideBookmark));
            }

            return sb.ToString();
        }]]></body>
          </codeblock>
        </method>
        <method name="GetHostBaseMenu">
          <declaration><![CDATA[protected string GetHostBaseMenu()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="576" sc="9" el="587" ec="10">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="127d2587ba1695e8c779ba51d5c4946a"><![CDATA[{
            var tabs = HostBaseTabs;
            
            var sb = new StringBuilder();
            foreach (var tab in tabs)
            {
                var hideBookmark = HostBookmarkItems.Contains(tab.TabName);
                sb.Append(GetMenuItem(tab, false, hideBookmark));
            }

            return sb.ToString();
        }]]></body>
          </codeblock>
        </method>
        <method name="GetHostTabs">
          <declaration><![CDATA[private void GetHostTabs()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1035" sc="9" el="1063" ec="10">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="96eb836e5932257aef665ea0f05b0187"><![CDATA[{
            var hostTab = TabController.GetTabByTabPath(Null.NullInteger, "//Host", string.Empty);
            var hosts = TabController.GetTabsByParent(hostTab, -1);

            var professionalTab = TabController.Instance.GetTabByName("Professional Features", -1);
            var professionalTabs = professionalTab != null
                ? TabController.GetTabsByParent(professionalTab.TabID, -1)
                : new List<TabInfo>();

            _hostTabs = new List<TabInfo>();
            _hostTabs.AddRange(hosts);
            _hostTabs.AddRange(professionalTabs);
            _hostTabs = _hostTabs.OrderBy(t => t.LocalizedTabName).ToList();

            _hostBaseTabs = new List<TabInfo>();
            _hostAdvancedTabs = new List<TabInfo>();

            foreach (var tabInfo in _hostTabs)
            {
                if (IsCommonTab(tabInfo, true))
                {
                    _hostBaseTabs.Add(tabInfo);
                }
                else
                {
                    _hostAdvancedTabs.Add(tabInfo);
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetLastPageHistory">
          <declaration><![CDATA[private string GetLastPageHistory()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="895" sc="9" el="901" ec="10">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="649c2a5e817a30bd21df43025cc8e29e"><![CDATA[{
            var cookie = Request.Cookies["LastPageId"];
            if (cookie != null)
                return cookie.Value;

            return "NEW";
        }]]></body>
          </codeblock>
        </method>
        <method name="GetMenuItem">
          <declaration><![CDATA[protected string GetMenuItem(string tabName, bool isHostTool)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="468" sc="9" el="488" ec="10">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="a2eee3ad3005566cf7339c9b36318ab0"><![CDATA[{
            if (isHostTool && !UserController.Instance.GetCurrentUserInfo().IsSuperUser)
            {
                return string.Empty;
            }

            List<TabInfo> tabList;
            if(isHostTool)
            {
                if(_hostTabs == null) GetHostTabs();
                tabList = _hostTabs;
            }
            else
            {
                if(_adminTabs == null) GetAdminTabs();
                tabList = _adminTabs;
            }

            var tab = tabList?.SingleOrDefault(t => t.TabName == tabName);
            return GetMenuItem(tab);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetMenuItem">
          <declaration><![CDATA[protected string GetMenuItem(string tabName, bool isHostTool, bool isRemoveBookmark, bool isHideBookmark = false)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="491" sc="9" el="511" ec="10">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="18e27acfbc4ecd8ca2b3ecda75f1d034"><![CDATA[{
            if (isHostTool && !UserController.Instance.GetCurrentUserInfo().IsSuperUser)
            {
                return string.Empty;
            }

            List<TabInfo> tabList;
            if (isHostTool)
            {
                if (_hostTabs == null) GetHostTabs();
                tabList = _hostTabs;
            }
            else
            {
                if (_adminTabs == null) GetAdminTabs();
                tabList = _adminTabs;
            }

            var tab = tabList?.SingleOrDefault(t => t.TabName == tabName);
            return GetMenuItem(tab, isRemoveBookmark, isHideBookmark);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetMenuItem">
          <declaration><![CDATA[protected string GetMenuItem(TabInfo tab, bool isRemoveBookmark = false, bool isHideBookmark = false)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="514" sc="9" el="546" ec="10">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="098eb48c32f7d4d0ed73029953194fa5"><![CDATA[{
            if (tab == null) return string.Empty;
            if (tab.IsVisible && !tab.IsDeleted && !tab.DisableLink)
            {
                string name = !string.IsNullOrEmpty(tab.LocalizedTabName) ? tab.LocalizedTabName : tab.Title;
	            var linkClass = DotNetNukeContext.Current.Application.Name == "DNNCORP.CE" && tab.FullUrl.Contains("ProfessionalFeatures") ? "class=\"PE\"" : string.Empty;
                if (!isRemoveBookmark)
                {
                    if(!isHideBookmark)
						return string.Format("<li data-tabname=\"{3}\"><a href=\"{0}\" {4}>{1}</a><a href=\"javascript:void(0)\" class=\"bookmark\" title=\"{2}\"><span></span></a></li>",
                                             tab.FullUrl,
                                             name,
                                             ClientAPI.GetSafeJSString(GetString("Tool.AddToBookmarks.ToolTip")),
                                             ClientAPI.GetSafeJSString(tab.TabName),
											 linkClass);
                    else
						return string.Format("<li data-tabname=\"{3}\"><a href=\"{0}\" {4}>{1}</a><a href=\"javascript:void(0)\" class=\"bookmark hideBookmark\" data-title=\"{2}\"><span></span></a></li>",
                                            tab.FullUrl,
                                            name,
                                            ClientAPI.GetSafeJSString(GetString("Tool.AddToBookmarks.ToolTip")),
                                            ClientAPI.GetSafeJSString(tab.TabName),
											linkClass);
                }

                return string.Format("<li data-tabname=\"{3}\"><a href=\"{0}\" {4}>{1}</a><a href=\"javascript:void(0)\" class=\"removeBookmark\" title=\"{2}\"><span></span></a></li>",
                                        tab.FullUrl,
                                        name,
                                        ClientAPI.GetSafeJSString(GetString("Tool.RemoveFromBookmarks.ToolTip")),
                                        ClientAPI.GetSafeJSString(tab.TabName),
										linkClass);
            }
            return string.Empty;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetModeForAttribute">
          <declaration><![CDATA[protected string GetModeForAttribute()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="749" sc="9" el="751" ec="10">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="df6a6915c625fffafddc7effca21ce49"><![CDATA[{
            return UserMode.ToString().ToUpperInvariant();
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPublishActionText">
          <declaration><![CDATA[protected string GetPublishActionText()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="448" sc="9" el="452" ec="10">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="bf7d742916d0b0d24a0dc68b683742b9"><![CDATA[{
            return TabPublishingController.Instance.IsTabPublished(TabController.CurrentPage.TabID, PortalSettings.PortalId)
                    ? ClientAPI.GetSafeJSString(GetString("Tool.UnpublishPage.Text"))
                    : ClientAPI.GetSafeJSString(GetString("Tool.PublishPage.Text"));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPublishConfirmHeader">
          <declaration><![CDATA[protected string GetPublishConfirmHeader()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="462" sc="9" el="466" ec="10">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="a89f3b6ca7204a01aa3b4658730ce2cb"><![CDATA[{
            return TabPublishingController.Instance.IsTabPublished(TabController.CurrentPage.TabID, PortalSettings.PortalId)
                    ? GetButtonConfirmHeader("UnpublishPage")
                    : GetButtonConfirmHeader("PublishPage");
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPublishConfirmText">
          <declaration><![CDATA[protected string GetPublishConfirmText()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="455" sc="9" el="459" ec="10">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="fb72277f4a411b0223ef957a568e3506"><![CDATA[{
            return TabPublishingController.Instance.IsTabPublished(TabController.CurrentPage.TabID, PortalSettings.PortalId)
                    ? GetButtonConfirmMessage("UnpublishPage")
                    : GetButtonConfirmMessage("PublishPage");
        }]]></body>
          </codeblock>
        </method>
        <method name="GetString">
          <declaration><![CDATA[protected string GetString(string key)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="289" sc="9" el="291" ec="10">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="fdb9cfd70aff46a9da06e018de02d9c8"><![CDATA[{
            return Localization.GetString(key, LocalResourceFile);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetTabPublishing">
          <declaration><![CDATA[protected string GetTabPublishing()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="443" sc="9" el="445" ec="10">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="a212eb85c9e53ee59f201e606025eda0"><![CDATA[{
            return TabPublishingController.Instance.IsTabPublished(TabController.CurrentPage.TabID, PortalSettings.PortalId) ? "true" : "false";
        }]]></body>
          </codeblock>
        </method>
        <method name="GetTabURL">
          <declaration><![CDATA[protected string GetTabURL(List<string> additionalParams, string toolName, bool isHostTool, string moduleFriendlyName, string controlKey, bool showAsPopUp)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="383" sc="9" el="412" ec="10">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="94a28c0e071ed6c4180076376826ec39"><![CDATA[{
            int portalId = isHostTool ? Null.NullInteger : PortalSettings.PortalId;

            string strURL = string.Empty;

            if (additionalParams == null)
            {
                additionalParams = new List<string>();
            }

            var moduleInfo = ModuleController.Instance.GetModuleByDefinition(portalId, moduleFriendlyName);

            if (moduleInfo != null)
            {
                bool isHostPage = portalId == Null.NullInteger;
                if (!string.IsNullOrEmpty(controlKey))
                {
                    additionalParams.Insert(0, "mid=" + moduleInfo.ModuleID);
                    if (showAsPopUp && PortalSettings.EnablePopUps)
                    {
                        additionalParams.Add("popUp=true");
                    }
                }

                string currentCulture = System.Threading.Thread.CurrentThread.CurrentCulture.Name;
                strURL = Globals.NavigateURL(moduleInfo.TabID, isHostPage, PortalSettings, controlKey, currentCulture, additionalParams.ToArray());
            }

            return strURL;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetTabURL">
          <declaration><![CDATA[protected string GetTabURL(string tabName, bool isHostTool)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="415" sc="3" el="417" ec="4">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="a2dd06878ba47ab74b9507f7187dacc5"><![CDATA[{
			return GetTabURL(tabName, isHostTool, null);
		}]]></body>
          </codeblock>
        </method>
        <method name="GetTabURL">
          <declaration><![CDATA[protected string GetTabURL(string tabName, bool isHostTool, int? parentId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="420" sc="9" el="428" ec="10">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="b292622d1ecfc67a9ae6d26653409ea0"><![CDATA[{
            if (isHostTool && !UserController.Instance.GetCurrentUserInfo().IsSuperUser)
            {
                return "javascript:void(0);";
            }

            int portalId = isHostTool ? Null.NullInteger : PortalSettings.PortalId;
            return GetTabURL(tabName, portalId, parentId);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetTabURL">
          <declaration><![CDATA[protected string GetTabURL(string tabName, int portalId, int? parentId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="431" sc="9" el="440" ec="10">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="691fcc3d48e6ab2c470ccdf95c52983e"><![CDATA[{
            var tab = parentId.HasValue ? TabController.Instance.GetTabByName(tabName, portalId, parentId.Value) : TabController.Instance.GetTabByName(tabName, portalId);

            if (tab != null)
            {
                return tab.FullUrl;
            }

            return string.Empty;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetUpgradeIndicator">
          <declaration><![CDATA[protected string GetUpgradeIndicator()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="190" sc="9" el="205" ec="10">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="6487e84cd4cfca6d45f34fecb5e8639d"><![CDATA[{
            UserInfo objUser = UserController.Instance.GetCurrentUserInfo();
           
            if (objUser != null && objUser.IsSuperUser)
            {
                var upgradeIndicator = ControlBarController.Instance.GetUpgradeIndicator(DotNetNukeContext.Current.Application.Version,
                    Request.IsLocal, Request.IsSecureConnection);
                if (upgradeIndicator == null)
                {
                    return String.Empty;
                }
                return GetUpgradeIndicatorButton(upgradeIndicator);
            }

            return string.Empty;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetUpgradeIndicatorButton">
          <declaration><![CDATA[private string GetUpgradeIndicatorButton(UpgradeIndicatorViewModel upgradeIndicator)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="224" sc="9" el="227" ec="10">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="8832ba80a1709f847def9a695371d11a"><![CDATA[{            
            return string.Format("<a id=\"{0}\" href=\"#\" onclick=\"{1}\" class=\"{2}\"><img src=\"{3}\" alt=\"{4}\" title=\"{5}\"/></a>",
                upgradeIndicator.ID, upgradeIndicator.WebAction, upgradeIndicator.CssClass, ResolveClientUrl(upgradeIndicator.ImageUrl), upgradeIndicator.AltText, upgradeIndicator.ToolTip);
        }]]></body>
          </codeblock>
        </method>
        <method name="IsCommonTab">
          <declaration><![CDATA[private bool IsCommonTab(TabInfo tab, bool isHost = false)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1088" sc="9" el="1097" ec="10">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="fcfe8d083e58a9c6b73ef4e86282e727"><![CDATA[{
            if (tab.TabSettings.ContainsKey("ControlBar_CommonTab") &&
                tab.TabSettings["ControlBar_CommonTab"].ToString() == "Y")
            {
                return true;
            }


            return isHost ? _hostCommonTabs.Contains(tab.TabName) : _adminCommonTabs.Contains(tab.TabName);
        }]]></body>
          </codeblock>
        </method>
        <method name="IsLanguageModuleInstalled">
          <declaration><![CDATA[protected bool IsLanguageModuleInstalled()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="771" sc="9" el="773" ec="10">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="c1c1f8b254417ae646135c6c885d1e6a"><![CDATA[{
            return DesktopModuleController.GetDesktopModuleByFriendlyName("Languages") != null;
        }]]></body>
          </codeblock>
        </method>
        <method name="LoadCategoryList">
          <declaration><![CDATA[private void LoadCategoryList()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="788" sc="9" el="799" ec="10">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="5b9ed5b5685fa8ec577c434bab76c676"><![CDATA[{
            ITermController termController = Util.GetTermController();
            var terms = termController.GetTermsByVocabulary("Module_Categories").OrderBy(t => t.Weight).Where(t => t.Name != "< None >").ToList();
            var allTerm = new Term("All", Localization.GetString("AllCategories", LocalResourceFile));
            terms.Add(allTerm);
            CategoryList.DataSource = terms;
            CategoryList.DataBind();
            if (!IsPostBack)
            {
                CategoryList.Select(!String.IsNullOrEmpty(BookmarkedModuleKeys) ? BookmarkModuleCategory : "All", false);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="LoadCustomMenuItems">
          <declaration><![CDATA[private void LoadCustomMenuItems()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="208" sc="9" el="221" ec="10">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="eff577764500e98e0fb75893ccb5444f"><![CDATA[{
            foreach (var menuItem in ControlBarController.Instance.GetCustomMenuItems())
            {
                var liElement = new HtmlGenericControl("li");                
                liElement.Attributes.Add("id", menuItem.ID + "_tab");

                var control = Page.LoadControl(menuItem.Source);
                control.ID = menuItem.ID;
                            
                liElement.Controls.Add(control);
                
                CustomMenuItems.Controls.Add(liElement);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="LoadLanguagesList">
          <declaration><![CDATA[protected IEnumerable<string[]> LoadLanguagesList()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="655" sc="9" el="692" ec="10">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="62372b3958482c619d0ac44f12428955"><![CDATA[{
            var result = new List<string[]>();

            if (PortalSettings.AllowUserUICulture)
            {
                if(CurrentUICulture  == null)
                {
                    object oCulture = Personalization.GetProfile("Usability", "UICulture");
                    
                    if (oCulture != null)
                    {
                        CurrentUICulture = oCulture.ToString();
                    }
                    else
                    {
                        var l = new Localization();
                        CurrentUICulture = l.CurrentUICulture;
                        SetLanguage(true, CurrentUICulture);
                    }
                }
                

                IEnumerable<ListItem> cultureListItems = Localization.LoadCultureInListItems(CultureDropDownTypes.NativeName, CurrentUICulture, "", false);
                foreach (var cultureItem in cultureListItems)
                {
                    var selected = cultureItem.Value == CurrentUICulture ? "true" : "false";
                    string[] p = new string[]
                                     {
                                         cultureItem.Text,
                                         cultureItem.Value,
                                         selected
                                     };
                    result.Add(p);
                }
            }

            return result;
        }]]></body>
          </codeblock>
        </method>
        <method name="LoadPaneList">
          <declaration><![CDATA[protected IEnumerable<string[]> LoadPaneList()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="245" sc="9" el="285" ec="10">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="8c8c57e75d392020b27a280a17bb7fb3"><![CDATA[{
            ArrayList panes = PortalSettings.Current.ActiveTab.Panes;
            var resultPanes = new List<string[]>();

            if(panes.Count < 4 )
            {
                foreach (var p in panes)
                {
                    var topPane = new[]{
                        string.Format(GetString("Pane.AddTop.Text"), p),
                        p.ToString(),
                        "TOP"
                    };

                    var botPane = new[]{
                        string.Format(GetString("Pane.AddBottom.Text"), p),
                        p.ToString(),
                        "BOTTOM"
                    };

                    resultPanes.Add(topPane);
                    resultPanes.Add(botPane);
                }
            }
            else
            {
                foreach (var p in panes)
                {

                    var botPane = new[]{
                        string.Format(GetString("Pane.Add.Text"), p),
                        p.ToString(),
                        "BOTTOM"
                    };
                   
                    resultPanes.Add(botPane);
                }
            }

            return resultPanes;
        }]]></body>
          </codeblock>
        </method>
        <method name="LoadPortalsList">
          <declaration><![CDATA[protected IEnumerable<string[]> LoadPortalsList()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="631" sc="9" el="652" ec="10">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="e96327462b95d1bc08c2776481af34eb"><![CDATA[{
            var portals = PortalController.Instance.GetPortals();

            var result = new List<string[]>();
            foreach (var portal in portals)
            {
                var pi = portal as PortalInfo;

                if (pi != null)
                {
                    string[] p =
                    {
                        pi.PortalName,
                        pi.PortalID.ToString("D")
                    };

                    result.Add(p);
                }
            }

            return result;
        }]]></body>
          </codeblock>
        </method>
        <method name="LoadSiteList">
          <declaration><![CDATA[private bool LoadSiteList()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="802" sc="9" el="817" ec="10">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="065cfd2eccc9ae9c1fe02fbc2e54dd52"><![CDATA[{
            // Is there more than one site in this group?
            var multipleSites = GetCurrentPortalsGroup().Count() > 1;
            if (multipleSites)
            {
                PageList.Services.GetTreeMethod = "ItemListService/GetPagesInPortalGroup";
                PageList.Services.GetNodeDescendantsMethod = "ItemListService/GetPageDescendantsInPortalGroup";
                PageList.Services.SearchTreeMethod = "ItemListService/SearchPagesInPortalGroup";
                PageList.Services.GetTreeWithNodeMethod = "ItemListService/GetTreePathForPageInPortalGroup";
                PageList.Services.SortTreeMethod = "ItemListService/SortPagesInPortalGroup";
            }

            PageList.UndefinedItem = new ListItem(DynamicSharedConstants.Unspecified, string.Empty);
            PageList.OnClientSelectionChanged.Add("dnn.controlBar.ControlBar_Module_PageList_Changed");
            return multipleSites;
        }]]></body>
          </codeblock>
        </method>
        <method name="LoadVisibilityList">
          <declaration><![CDATA[private void LoadVisibilityList()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="820" sc="9" el="828" ec="10">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="ee9514b24d2b91f857b947a27669a8ab"><![CDATA[{ 
            var items = new Dictionary<string, string> { { "0", GetString("PermissionView") }, { "1", GetString("PermissionEdit") } };

            VisibilityLst.Items.Clear();
            VisibilityLst.DataValueField = "key";
            VisibilityLst.DataTextField = "value";
            VisibilityLst.DataSource = items;
            VisibilityLst.DataBind();
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="121" sc="9" el="134" ec="10">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="00a3718334e39b9d7d263d3e116dfcef"><![CDATA[{
            base.OnInit(e);

            //page will be null if the control panel initial twice, it will be removed in the second time.
            if (Page != null)
            {
                ID = "ControlBar";

                FileUploader = new DnnFileUpload {ID = "fileUploader", SupportHost = false};
                Page.Form.Controls.Add(FileUploader);

                LoadCustomMenuItems();
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="137" sc="9" el="177" ec="4">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="61d95f7d6c874e32a200f48d11deec60"><![CDATA[{           
            base.OnLoad(e);

            if (PortalSettings.EnablePopUps && Host.EnableModuleOnLineHelp)
            {
                helpLink.Text = string.Format(@"<li><a href=""{0}"">{1}</a></li>", UrlUtils.PopUpUrl(Host.HelpURL, this, PortalSettings, false, false), GetString("Tool.Help.ToolTip"));
            }
            else if (Host.EnableModuleOnLineHelp)
            {
                helpLink.Text = string.Format(@"<li><a href=""{0}"" target=""_blank"">{1}</a></li>", Host.HelpURL, GetString("Tool.Help.ToolTip"));
            }

            LoginUrl = ResolveClientUrl(@"~/Login.aspx");

            if (ControlPanel.Visible && IncludeInControlHierarchy)
            {
                ClientResourceManager.RegisterStyleSheet(Page, "~/admin/ControlPanel/ControlBar.css", FileOrder.Css.ResourceCss);
                JavaScript.RequestRegistration(CommonJs.DnnPlugins);
                ClientResourceManager.RegisterScript(Page, "~/resources/shared/scripts/dnn.controlBar.js");

                // Is there more than one site in this group?
                var multipleSites = GetCurrentPortalsGroup().Count() > 1;
                ClientAPI.RegisterClientVariable(Page, "moduleSharing", multipleSites.ToString().ToLowerInvariant(), true);
            }

            ServicesFramework.Instance.RequestAjaxAntiForgerySupport();
            var multipleSite = false;

            conrolbar_logo.ImageUrl = ControlBarController.Instance.GetControlBarLogoURL();
            if (!IsPostBack)
            {
                LoadCategoryList();
                multipleSite = LoadSiteList();
                LoadVisibilityList();
                AutoSetUserMode();
	            BindPortalsList();
	            BindLanguagesList();
            }

            LoadTabModuleMessage = multipleSite ? GetString("LoadingTabModuleCE.Text") : GetString("LoadingTabModule.Text");
		}]]></body>
          </codeblock>
        </method>
        <method name="PreviewPopup">
          <declaration><![CDATA[protected string PreviewPopup()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="230" sc="3" el="242" ec="4">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="e1c34fc2b127819e1c69921678c82dd4"><![CDATA[{
			var previewUrl = string.Format("{0}/Default.aspx?ctl={1}&previewTab={2}&TabID={2}", 
										Globals.AddHTTP(PortalSettings.PortalAlias.HTTPAlias), 
										"MobilePreview",
										PortalSettings.ActiveTab.TabID);

			if(PortalSettings.EnablePopUps)
			{
				return UrlUtils.PopUpUrl(previewUrl, this, PortalSettings, true, false, 660, 800);
			}

            return string.Format("location.href = \"{0}\"", previewUrl);
		}]]></body>
          </codeblock>
        </method>
        <method name="SetLanguage">
          <declaration><![CDATA[private void SetLanguage(bool update, string currentCulture)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="904" sc="9" el="909" ec="10">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="7482ef6aae1575fc7201570519345524"><![CDATA[{
            if (update)
            {
                Personalization.SetProfile("Usability", "UICulture", currentCulture);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="SetLastPageHistory">
          <declaration><![CDATA[private void SetLastPageHistory(string pageId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="890" sc="9" el="892" ec="10">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="70a12db5f2df804064baa9a361d05cac"><![CDATA[{
            Response.Cookies.Add(new HttpCookie("LastPageId", pageId) { Path = !string.IsNullOrEmpty(Globals.ApplicationPath) ? Globals.ApplicationPath : "/" });
        }]]></body>
          </codeblock>
        </method>
        <method name="ShowSwitchLanguagesPanel">
          <declaration><![CDATA[protected bool ShowSwitchLanguagesPanel()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="695" sc="9" el="719" ec="10">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="c1cf4c0455021c7083eeeb7433264d65"><![CDATA[{
             if (PortalSettings.AllowUserUICulture && PortalSettings.ContentLocalizationEnabled)
             {
                 if (CurrentUICulture == null)
                 {
                     object oCulture = Personalization.GetProfile("Usability", "UICulture");

                     if (oCulture != null)
                     {
                         CurrentUICulture = oCulture.ToString();
                     }
                     else
                     {
                         var l = new Localization();
                         CurrentUICulture = l.CurrentUICulture;
                     }
                 }

                 IEnumerable<ListItem> cultureListItems = Localization.LoadCultureInListItems(CultureDropDownTypes.NativeName, CurrentUICulture, "", false);
                 return cultureListItems.Count() > 1;
             }

            return false;

        }]]></body>
          </codeblock>
        </method>
        <method name="SpecialClassWhenNotInViewMode">
          <declaration><![CDATA[protected string SpecialClassWhenNotInViewMode()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="744" sc="9" el="746" ec="10">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="634b90e6be71c61a71f26e72a133dd4f"><![CDATA[{
            return UserMode == PortalSettings.Mode.View ? string.Empty : "controlBar_editPageInEditMode";
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_adminAdvancedTabs">
          <declaration><![CDATA[private List<TabInfo> _adminAdvancedTabs;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_adminBaseTabs">
          <declaration><![CDATA[private List<TabInfo> _adminBaseTabs;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_adminBookmarkItems">
          <declaration><![CDATA[private List<string> _adminBookmarkItems;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_adminCommonTabs">
          <declaration><![CDATA[private readonly IList<string> _adminCommonTabs = new List<string>]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_adminTabs">
          <declaration><![CDATA[private List<TabInfo> _adminTabs;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_hostAdvancedTabs">
          <declaration><![CDATA[private List<TabInfo> _hostAdvancedTabs;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_hostBaseTabs">
          <declaration><![CDATA[private List<TabInfo> _hostBaseTabs;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_hostBookmarkItems">
          <declaration><![CDATA[private List<string> _hostBookmarkItems;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_hostCommonTabs">
          <declaration><![CDATA[private readonly IList<string> _hostCommonTabs = new List<string>]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_hostTabs">
          <declaration><![CDATA[private List<TabInfo> _hostTabs;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="CategoryList">
          <declaration><![CDATA[protected DnnComboBox CategoryList;]]></declaration>
          <documentation>
            <summary>
 CategoryList control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="conrolbar_logo">
          <declaration><![CDATA[protected Image conrolbar_logo;]]></declaration>
          <documentation>
            <summary>
 conrolbar_logo control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="controlBar_SwitchLanguage">
          <declaration><![CDATA[protected DnnComboBox controlBar_SwitchLanguage;]]></declaration>
          <documentation>
            <summary>
 controlBar_SwitchLanguage control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="controlBar_SwitchSite">
          <declaration><![CDATA[protected DnnComboBox controlBar_SwitchSite;]]></declaration>
          <documentation>
            <summary>
 controlBar_SwitchSite control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="ControlPanel">
          <declaration><![CDATA[protected Panel ControlPanel;]]></declaration>
          <documentation>
            <summary>
 ControlPanel control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="CustomMenuItems">
          <declaration><![CDATA[protected HtmlGenericControl CustomMenuItems;]]></declaration>
          <documentation>
            <summary>
 CustomMenuItems control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="FileUploader">
          <declaration><![CDATA[protected DnnFileUpload FileUploader;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="helpLink">
          <declaration><![CDATA[protected Literal helpLink;]]></declaration>
          <documentation>
            <summary>
 helpLink control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="PageList">
          <declaration><![CDATA[protected DnnPageDropDownList PageList;]]></declaration>
          <documentation>
            <summary>
 PageList control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="VisibilityLst">
          <declaration><![CDATA[protected DnnComboBox VisibilityLst;]]></declaration>
          <documentation>
            <summary>
 VisibilityLst control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
      </fields>
      <properties>
        <property name="AdminAdvancedTabs">
          <declaration><![CDATA[protected List<TabInfo> AdminAdvancedTabs]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1001" sc="13" el="1007" ec="14">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="e7899031575e1f68507da7b72de7c227"><![CDATA[{
                if (_adminAdvancedTabs == null)
                {
                    GetAdminTabs();
                }
                return _adminAdvancedTabs;
            }]]></body>
          </codeblock>
        </property>
        <property name="AdminBaseTabs">
          <declaration><![CDATA[protected List<TabInfo> AdminBaseTabs]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="989" sc="13" el="995" ec="14">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="12f7458fc222216c0487b41367d98527"><![CDATA[{
                if (_adminBaseTabs == null)
                {
                    GetAdminTabs();
                }
                return _adminBaseTabs;
            }]]></body>
          </codeblock>
        </property>
        <property name="AdminBookmarkItems">
          <declaration><![CDATA[protected List<string> AdminBookmarkItems]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="947" sc="13" el="958" ec="14">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="90b4d6db04403c75a4b9bfd143e69ef9"><![CDATA[{
                if (_adminBookmarkItems == null)
                {
                    var bookmarkItems = Personalization.GetProfile("ControlBar", "admin" + PortalSettings.PortalId);

                    _adminBookmarkItems = bookmarkItems != null 
                                                ? bookmarkItems.ToString().Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries).ToList() 
                                                : new List<string>();
                }

                return _adminBookmarkItems;
            }]]></body>
          </codeblock>
        </property>
        <property name="BookmarkedModuleKeys">
          <declaration><![CDATA[protected string BookmarkedModuleKeys]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="98" sc="13" el="105" ec="14">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="722d224ae24128939269ce121e018cdf"><![CDATA[{
                var bookmarkModules = Personalization.GetProfile("ControlBar", "module" + PortalSettings.PortalId);
                if (bookmarkModules == null)
                {
                    return string.Empty;
                }
                return bookmarkModules.ToString();
            }]]></body>
          </codeblock>
        </property>
        <property name="BookmarkModuleCategory">
          <declaration><![CDATA[protected string BookmarkModuleCategory]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="90" sc="13" el="92" ec="14">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="565f8b52a6103b3b91f21b265b47dd2d"><![CDATA[{
                return ControlBarController.Instance.GetBookmarkCategory(PortalSettings.PortalId);
            }]]></body>
          </codeblock>
        </property>
        <property name="CurrentUICulture">
          <declaration><![CDATA[protected string CurrentUICulture]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="81" sc="45" el="81" ec="49">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="81" sc="50" el="81" ec="54">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="HostAdvancedTabs">
          <declaration><![CDATA[protected List<TabInfo> HostAdvancedTabs]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1025" sc="13" el="1031" ec="14">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="6d86c8f9b494b21449af27f17d221837"><![CDATA[{
                if (_hostAdvancedTabs == null)
                {
                    GetHostTabs();
                }
                return _hostAdvancedTabs;
            }]]></body>
          </codeblock>
        </property>
        <property name="HostBaseTabs">
          <declaration><![CDATA[protected List<TabInfo> HostBaseTabs]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1013" sc="13" el="1019" ec="14">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="40b14b0a8d96cb9b293052ca0b74827c"><![CDATA[{
                if (_hostBaseTabs == null)
                {
                    GetHostTabs();
                }
                return _hostBaseTabs;
            }]]></body>
          </codeblock>
        </property>
        <property name="HostBookmarkItems">
          <declaration><![CDATA[protected List<string> HostBookmarkItems]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="965" sc="13" el="976" ec="14">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="bea4b39ce940b491c3eeb7482448bf7a"><![CDATA[{
                if(_hostBookmarkItems == null)
                {
                    var bookmarkItems = Personalization.GetProfile("ControlBar", "host" + PortalSettings.PortalId);

                    _hostBookmarkItems = bookmarkItems != null 
                                            ? bookmarkItems.ToString().Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries).ToList() 
                                            : new List<string>();
                }

                return _hostBookmarkItems;
            }]]></body>
          </codeblock>
        </property>
        <property name="IncludeInControlHierarchy">
          <declaration><![CDATA[public override bool IncludeInControlHierarchy]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="113" sc="13" el="115" ec="14">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="e7cc16b1f7b9e1d432277ecc0e8314d8"><![CDATA[{
                return base.IncludeInControlHierarchy && (IsPageAdmin() || IsModuleAdmin());
            }]]></body>
          </codeblock>
        </property>
        <property name="IsBeaconEnabled">
          <declaration><![CDATA[protected bool IsBeaconEnabled]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1114" sc="13" el="1117" ec="14">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="f35104a1ac370685599e02db14ee763d"><![CDATA[{
                var user = UserController.Instance.GetCurrentUserInfo();
                return BeaconService.Instance.IsBeaconEnabledForControlBar(user);
            }]]></body>
          </codeblock>
        </property>
        <property name="IsDockable">
          <declaration><![CDATA[public override bool IsDockable]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="108" sc="43" el="108" ec="47">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="108" sc="48" el="108" ec="52">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="LoadTabModuleMessage">
          <declaration><![CDATA[protected string LoadTabModuleMessage]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="85" sc="49" el="85" ec="53">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="85" sc="54" el="85" ec="58">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="LocalResourceFile">
          <declaration><![CDATA[private new string LocalResourceFile]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="782" sc="13" el="784" ec="14">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="78f20764ac2a009b5d1a0f7390211cb7"><![CDATA[{
                return string.Format("{0}/{1}/{2}.ascx.resx", TemplateSourceDirectory, Localization.LocalResourceDirectory, GetType().BaseType?.Name);
            }]]></body>
          </codeblock>
        </property>
        <property name="LoginUrl">
          <declaration><![CDATA[protected string LoginUrl]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="83" sc="37" el="83" ec="41">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="83" sc="42" el="83" ec="46">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="RibbonBar">
      <declaration><![CDATA[public class RibbonBar : ControlPanelBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public RibbonBar()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="ddlMode_SelectedIndexChanged">
          <declaration><![CDATA[protected void ddlMode_SelectedIndexChanged(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="342" sc="3" el="349" ec="4">admin\ControlPanel\RibbonBar.ascx.cs</location>
            <body hash="320175ee0dc6c071880f6f57a6daa270"><![CDATA[{
			if (Page.IsCallback)
			{
				return;
			}
			SetMode(true);
			Response.Redirect(Request.RawUrl, true);
		}]]></body>
          </codeblock>
        </method>
        <method name="ddlUICulture_SelectedIndexChanged">
          <declaration><![CDATA[private void ddlUICulture_SelectedIndexChanged(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="352" sc="3" el="359" ec="4">admin\ControlPanel\RibbonBar.ascx.cs</location>
            <body hash="1ad723039b827d4e3c4978280cf2a3bf"><![CDATA[{
			if (Page.IsCallback)
			{
				return;
			}
			SetLanguage(true);
			Response.Redirect(Request.RawUrl, true);
		}]]></body>
          </codeblock>
        </method>
        <method name="DetermineNodesToInclude">
          <declaration><![CDATA[protected void DetermineNodesToInclude(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="159" sc="9" el="166" ec="10">admin\ControlPanel\RibbonBar.ascx.cs</location>
            <body hash="d5b7dd7a0a5fceae1f9818adce019476"><![CDATA[{
            var skinObject = (Web.DDRMenu.SkinObject)sender;
            string admin = StripLocalizationPrefix(Localization.GetString("//Admin.String", Localization.GlobalResourceFile)).Trim();
            string host = StripLocalizationPrefix(Localization.GetString("//Host.String", Localization.GlobalResourceFile)).Trim();

            skinObject.IncludeNodes = admin + ", " + host;

        }]]></body>
          </codeblock>
        </method>
        <method name="GetButtonConfirmMessage">
          <declaration><![CDATA[protected string GetButtonConfirmMessage(string toolName)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="129" sc="9" el="156" ec="10">admin\ControlPanel\RibbonBar.ascx.cs</location>
            <body hash="cfc84d2fd193339ed36fa02a64844e45"><![CDATA[{
            if (toolName == "DeletePage")
            {
                return ClientAPI.GetSafeJSString(Localization.GetString("Tool.DeletePage.Confirm", LocalResourceFile));
            }

            if (toolName == "CopyPermissionsToChildren")
            {
                if (PortalSecurity.IsInRole("Administrators"))
                {
                    return ClientAPI.GetSafeJSString(Localization.GetString("Tool.CopyPermissionsToChildren.Confirm", LocalResourceFile));
                }

                return ClientAPI.GetSafeJSString(Localization.GetString("Tool.CopyPermissionsToChildrenPageEditor.Confirm", LocalResourceFile));
            }

            if (toolName == "CopyDesignToChildren")
            {
                if (PortalSecurity.IsInRole("Administrators"))
                {
                    return ClientAPI.GetSafeJSString(Localization.GetString("Tool.CopyDesignToChildren.Confirm", LocalResourceFile));
                }

                return ClientAPI.GetSafeJSString(Localization.GetString("Tool.CopyDesignToChildrenPageEditor.Confirm", LocalResourceFile));
            }

            return string.Empty;
        }]]></body>
          </codeblock>
        </method>
        <method name="Localize">
          <declaration><![CDATA[private void Localize()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="68" sc="9" el="78" ec="10">admin\ControlPanel\RibbonBar.ascx.cs</location>
            <body hash="23c8ac363a0c2a4dff4a3b89edea248b"><![CDATA[{

            Control ctrl = AdminPanel.FindControl("SiteNewPage");
            if (((ctrl != null) && ctrl is DnnRibbonBarTool))
            {
                var toolCtrl = (DnnRibbonBarTool)ctrl;
                toolCtrl.Text = Localization.GetString("SiteNewPage", LocalResourceFile);
                toolCtrl.ToolTip = Localization.GetString("SiteNewPage.ToolTip", LocalResourceFile);
            }

        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="185" sc="9" el="189" ec="10">admin\ControlPanel\RibbonBar.ascx.cs</location>
            <body hash="e4522bd0e3103cda674ce675bf57d7ef"><![CDATA[{
            base.OnInit(e);

            ID = "RibbonBar";
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="192" sc="9" el="339" ec="4">admin\ControlPanel\RibbonBar.ascx.cs</location>
            <body hash="ced35773288ab87eb7e4bcacd7d31910"><![CDATA[{
            base.OnLoad(e);

			ddlMode.SelectedIndexChanged += ddlMode_SelectedIndexChanged;
			ddlUICulture.SelectedIndexChanged += ddlUICulture_SelectedIndexChanged;

            try
            {
                AdminPanel.Visible = false;
                AdvancedToolsPanel.Visible = false;

                if (ControlPanel.Visible && IncludeInControlHierarchy)
                {
                    ClientResourceManager.RegisterStyleSheet(this.Page, "~/admin/ControlPanel/module.css");
                    ClientResourceManager.RegisterScript(this.Page, "~/Resources/ControlPanel/ControlPanel.debug.js");
                }

				JavaScript.RequestRegistration(CommonJs.DnnPlugins);

                Control copyPageButton = CurrentPagePanel.FindControl("CopyPage");
                if ((copyPageButton != null))
                {
                    copyPageButton.Visible = LocaleController.Instance.IsDefaultLanguage(LocaleController.Instance.GetCurrentLocale(PortalSettings.PortalId).Code);
                }


                if ((Request.IsAuthenticated))
                {
                    UserInfo user = UserController.Instance.GetCurrentUserInfo();
                    if (((user != null)))
                    {
                        bool isAdmin = user.IsInRole(PortalSettings.Current.AdministratorRoleName);
                        AdminPanel.Visible = isAdmin;
                    }
                }

				if (IsPageAdmin())
				{
					ControlPanel.Visible = true;
					BodyPanel.Visible = true;

                    if ((DotNetNukeContext.Current.Application.Name == "DNNCORP.CE"))
                    {
                        //Hide Support icon in CE
                        AdminPanel.FindControl("SupportTickets").Visible = false;
                    }
                    else
                    {
                        //Show PE/XE tools
                        AdvancedToolsPanel.Visible = true;
                    }

                    Localize();

					if (!Page.IsPostBack)
					{
						UserInfo objUser = UserController.Instance.GetCurrentUserInfo();
						if ((objUser != null))
						{
							if (objUser.IsSuperUser)
							{
								hypMessage.ImageUrl = Upgrade.UpgradeIndicator(DotNetNukeContext.Current.Application.Version, Request.IsLocal, Request.IsSecureConnection);
								if (!string.IsNullOrEmpty(hypMessage.ImageUrl))
								{
									hypMessage.ToolTip = Localization.GetString("hypUpgrade.Text", LocalResourceFile);
									hypMessage.NavigateUrl = Upgrade.UpgradeRedirect();
								}
							}
							else
							{
								if (PortalSecurity.IsInRole(PortalSettings.AdministratorRoleName) && Host.DisplayCopyright)
								{
									hypMessage.ImageUrl = "~/images/branding/iconbar_logo.png";
									hypMessage.ToolTip = DotNetNukeContext.Current.Application.Description;
									hypMessage.NavigateUrl = Localization.GetString("hypMessageUrl.Text", LocalResourceFile);
								}
								else
								{
									hypMessage.Visible = false;
								}

                                if (!TabPermissionController.CanAddContentToPage())
                                {
                                    CommonTasksPanel.Visible = false;
                                }
							}
							if (PortalSettings.AllowUserUICulture)
							{
								object oCulture = DotNetNuke.Services.Personalization.Personalization.GetProfile("Usability", "UICulture");
								string currentCulture;
								if (oCulture != null)
								{
									currentCulture = oCulture.ToString();
								}
								else
								{
									Localization l = new Localization();
									currentCulture = l.CurrentUICulture;
								}
								//Localization.LoadCultureDropDownList(ddlUICulture, CultureDropDownTypes.NativeName, currentCulture);
                                IEnumerable<ListItem> cultureListItems = Localization.LoadCultureInListItems(CultureDropDownTypes.NativeName, currentCulture, "", false);
                                foreach (var cultureItem in cultureListItems)
                                {
                                    ddlUICulture.AddItem(cultureItem.Text, cultureItem.Value);
                                }

                                var selectedCultureItem = ddlUICulture.FindItemByValue(currentCulture);
                                if (selectedCultureItem != null)
                                {
                                    selectedCultureItem.Selected = true;
                                }

								//only show language selector if more than one language
								if (ddlUICulture.Items.Count > 1)
								{
									lblUILanguage.Visible = true;
									ddlUICulture.Visible = true;

									if (oCulture == null)
									{
										SetLanguage(true);
									}
								}
							}
						}
						SetMode(false);
					}
				}
				else if (IsModuleAdmin())
				{
					ControlPanel.Visible = true;
					BodyPanel.Visible = false;
					adminMenus.Visible = false;
					if (!Page.IsPostBack)
					{
						SetMode(false);
					}
				}
				else
				{
					ControlPanel.Visible = false;
				}
			}
			catch (Exception exc)
			{
				Exceptions.ProcessModuleLoadException(this, exc);
			}
		}]]></body>
          </codeblock>
        </method>
        <method name="PreviewPopup">
          <declaration><![CDATA[protected string PreviewPopup()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="366" sc="3" el="380" ec="4">admin\ControlPanel\RibbonBar.ascx.cs</location>
            <body hash="4bd7daad4b69db14b5443532c6ada479"><![CDATA[{
			var previewUrl = string.Format("{0}/Default.aspx?ctl={1}&previewTab={2}&TabID={2}", 
										Globals.AddHTTP(PortalSettings.PortalAlias.HTTPAlias), 
										"MobilePreview",
										PortalSettings.ActiveTab.TabID);

			if(PortalSettings.EnablePopUps)
			{
				return UrlUtils.PopUpUrl(previewUrl, this, PortalSettings, true, false, 660, 800);
			}
			else
			{
				return string.Format("location.href = \"{0}\"", previewUrl);
			}
		}]]></body>
          </codeblock>
        </method>
        <method name="RemoveModeDropDownItem">
          <declaration><![CDATA[private void RemoveModeDropDownItem(string value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="112" sc="9" el="118" ec="10">admin\ControlPanel\RibbonBar.ascx.cs</location>
            <body hash="a7dd0fd76cb28f1e36b5154f62d679a8"><![CDATA[{
            var item = ddlMode.FindItemByValue(value);
            if (item != null)
            {
                ddlMode.Items.Remove(item);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="SetLanguage">
          <declaration><![CDATA[private void SetLanguage(bool update)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="121" sc="3" el="126" ec="4">admin\ControlPanel\RibbonBar.ascx.cs</location>
            <body hash="64bbe0ef57a99bd1f8a73829a7032cc6"><![CDATA[{
			if (update)
			{
				DotNetNuke.Services.Personalization.Personalization.SetProfile("Usability", "UICulture", ddlUICulture.SelectedValue);
			}
		}]]></body>
          </codeblock>
        </method>
        <method name="SetMode">
          <declaration><![CDATA[private void SetMode(bool update)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="81" sc="9" el="109" ec="10">admin\ControlPanel\RibbonBar.ascx.cs</location>
            <body hash="4f33d6cbf608fe0f2b9ddee5c2fea168"><![CDATA[{
            if (update)
            {
                SetUserMode(ddlMode.SelectedValue);
            }

            if (!TabPermissionController.CanAddContentToPage())
            {
                RemoveModeDropDownItem("LAYOUT");
            }

            if (!(new PreviewProfileController().GetProfilesByPortal(this.PortalSettings.PortalId).Count > 0))
            {
                RemoveModeDropDownItem("PREVIEW");
            }

            switch (UserMode)
            {
                case PortalSettings.Mode.View:
                    ddlMode.FindItemByValue("VIEW").Selected = true;
                    break;
                case PortalSettings.Mode.Edit:
                    ddlMode.FindItemByValue("EDIT").Selected = true;
                    break;
                case PortalSettings.Mode.Layout:
                    ddlMode.FindItemByValue("LAYOUT").Selected = true;
                    break;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="StripLocalizationPrefix">
          <declaration><![CDATA[private string StripLocalizationPrefix(string s)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="169" sc="9" el="178" ec="10">admin\ControlPanel\RibbonBar.ascx.cs</location>
            <body hash="d0865f1d9e15510978173ed763b3c898"><![CDATA[{
            const string prefix = "[L]";

            if (s.StartsWith(prefix))
            {
                return s.Substring(prefix.Length);
            }

            return s;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="AddMod">
          <declaration><![CDATA[protected AddModule AddMod;]]></declaration>
          <documentation>
            <summary>
 AddMod control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="AddPage">
          <declaration><![CDATA[protected AddPage AddPage;]]></declaration>
          <documentation>
            <summary>
 AddPage control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="adminMenus">
          <declaration><![CDATA[protected SkinObject adminMenus;]]></declaration>
          <documentation>
            <summary>
 adminMenus control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="AdminPanel">
          <declaration><![CDATA[protected Panel AdminPanel;]]></declaration>
          <documentation>
            <summary>
 AdminPanel control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="AdvancedToolsPanel">
          <declaration><![CDATA[protected Panel AdvancedToolsPanel;]]></declaration>
          <documentation>
            <summary>
 AdvancedToolsPanel control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="BodyPanel">
          <declaration><![CDATA[protected HtmlGenericControl BodyPanel;]]></declaration>
          <documentation>
            <summary>
 BodyPanel control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="ClearCache">
          <declaration><![CDATA[protected DnnRibbonBarTool ClearCache;]]></declaration>
          <documentation>
            <summary>
 ClearCache control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="CommonTasksPanel">
          <declaration><![CDATA[protected Panel CommonTasksPanel;]]></declaration>
          <documentation>
            <summary>
 CommonTasksPanel control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="ControlPanel">
          <declaration><![CDATA[protected Panel ControlPanel;]]></declaration>
          <documentation>
            <summary>
 ControlPanel control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="CopyDesignToChildren">
          <declaration><![CDATA[protected DnnRibbonBarTool CopyDesignToChildren;]]></declaration>
          <documentation>
            <summary>
 CopyDesignToChildren control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="CopyPage">
          <declaration><![CDATA[protected DnnRibbonBarTool CopyPage;]]></declaration>
          <documentation>
            <summary>
 CopyPage control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="CopyPermissionsToChildren">
          <declaration><![CDATA[protected DnnRibbonBarTool CopyPermissionsToChildren;]]></declaration>
          <documentation>
            <summary>
 CopyPermissionsToChildren control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="CurrentPagePanel">
          <declaration><![CDATA[protected Panel CurrentPagePanel;]]></declaration>
          <documentation>
            <summary>
 CurrentPagePanel control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="CurrentTabActions">
          <declaration><![CDATA[protected DnnLiteral CurrentTabActions;]]></declaration>
          <documentation>
            <summary>
 CurrentTabActions control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="CurrentTabAddPage">
          <declaration><![CDATA[protected DnnLiteral CurrentTabAddPage;]]></declaration>
          <documentation>
            <summary>
 CurrentTabAddPage control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="CurrentTabCopyToChildren">
          <declaration><![CDATA[protected DnnLiteral CurrentTabCopyToChildren;]]></declaration>
          <documentation>
            <summary>
 CurrentTabCopyToChildren control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="CurrentTabEditPage">
          <declaration><![CDATA[protected DnnLiteral CurrentTabEditPage;]]></declaration>
          <documentation>
            <summary>
 CurrentTabEditPage control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="CurrentTabHelp">
          <declaration><![CDATA[protected DnnLiteral CurrentTabHelp;]]></declaration>
          <documentation>
            <summary>
 CurrentTabHelp control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="ddlMode">
          <declaration><![CDATA[protected DnnComboBox ddlMode;]]></declaration>
          <documentation>
            <summary>
 ddlMode control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="ddlUICulture">
          <declaration><![CDATA[protected DnnComboBox ddlUICulture;]]></declaration>
          <documentation>
            <summary>
 ddlUICulture control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="DeletePage">
          <declaration><![CDATA[protected DnnRibbonBarTool DeletePage;]]></declaration>
          <documentation>
            <summary>
 DeletePage control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="EditCurrentSettings">
          <declaration><![CDATA[protected DnnRibbonBarTool EditCurrentSettings;]]></declaration>
          <documentation>
            <summary>
 EditCurrentSettings control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="EditPage">
          <declaration><![CDATA[protected UpdatePage EditPage;]]></declaration>
          <documentation>
            <summary>
 EditPage control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="ExportPage">
          <declaration><![CDATA[protected DnnRibbonBarTool ExportPage;]]></declaration>
          <documentation>
            <summary>
 ExportPage control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="Help">
          <declaration><![CDATA[protected DnnRibbonBarTool Help;]]></declaration>
          <documentation>
            <summary>
 Help control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="hypMessage">
          <declaration><![CDATA[protected HyperLink hypMessage;]]></declaration>
          <documentation>
            <summary>
 hypMessage control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="ImpersonateUser">
          <declaration><![CDATA[protected DnnRibbonBarTool ImpersonateUser;]]></declaration>
          <documentation>
            <summary>
 ImpersonateUser control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="ImportPage">
          <declaration><![CDATA[protected DnnRibbonBarTool ImportPage;]]></declaration>
          <documentation>
            <summary>
 ImportPage control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="IntegrityChecker">
          <declaration><![CDATA[protected DnnRibbonBarTool IntegrityChecker;]]></declaration>
          <documentation>
            <summary>
 IntegrityChecker control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="lblMode">
          <declaration><![CDATA[protected Label lblMode;]]></declaration>
          <documentation>
            <summary>
 lblMode control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="lblUILanguage">
          <declaration><![CDATA[protected Label lblUILanguage;]]></declaration>
          <documentation>
            <summary>
 lblUILanguage control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="NewPage">
          <declaration><![CDATA[protected DnnRibbonBarTool NewPage;]]></declaration>
          <documentation>
            <summary>
 NewPage control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="NewRole">
          <declaration><![CDATA[protected DnnRibbonBarTool NewRole;]]></declaration>
          <documentation>
            <summary>
 NewRole control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="NewUser">
          <declaration><![CDATA[protected DnnRibbonBarTool NewUser;]]></declaration>
          <documentation>
            <summary>
 NewUser control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="RecycleApp">
          <declaration><![CDATA[protected DnnRibbonBarTool RecycleApp;]]></declaration>
          <documentation>
            <summary>
 RecycleApp control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="SiteTabManage">
          <declaration><![CDATA[protected DnnLiteral SiteTabManage;]]></declaration>
          <documentation>
            <summary>
 SiteTabManage control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="SupportTickets">
          <declaration><![CDATA[protected DnnRibbonBarTool SupportTickets;]]></declaration>
          <documentation>
            <summary>
 SupportTickets control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="SwitchSite">
          <declaration><![CDATA[protected SwitchSite SwitchSite;]]></declaration>
          <documentation>
            <summary>
 SwitchSite control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="SystemTabSwitchSite">
          <declaration><![CDATA[protected DnnLiteral SystemTabSwitchSite;]]></declaration>
          <documentation>
            <summary>
 SystemTabSwitchSite control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="SystemTabTools">
          <declaration><![CDATA[protected DnnLiteral SystemTabTools;]]></declaration>
          <documentation>
            <summary>
 SystemTabTools control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="UploadFile">
          <declaration><![CDATA[protected DnnRibbonBarTool UploadFile;]]></declaration>
          <documentation>
            <summary>
 UploadFile control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="WebServerManager">
          <declaration><![CDATA[protected DnnRibbonBarTool WebServerManager;]]></declaration>
          <documentation>
            <summary>
 WebServerManager control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
      </fields>
      <properties>
        <property name="IncludeInControlHierarchy">
          <declaration><![CDATA[public override bool IncludeInControlHierarchy]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="59" sc="13" el="61" ec="14">admin\ControlPanel\RibbonBar.ascx.cs</location>
            <body hash="e7cc16b1f7b9e1d432277ecc0e8314d8"><![CDATA[{
                return base.IncludeInControlHierarchy && (IsPageAdmin() || IsModuleAdmin());
            }]]></body>
          </codeblock>
        </property>
        <property name="IsDockable">
          <declaration><![CDATA[public override bool IsDockable]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="54" sc="43" el="54" ec="47">admin\ControlPanel\RibbonBar.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="54" sc="48" el="54" ec="52">admin\ControlPanel\RibbonBar.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
</root>