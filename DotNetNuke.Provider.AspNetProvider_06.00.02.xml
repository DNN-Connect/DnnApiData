<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<root file="DotNetNuke.Provider.AspNetProvider.dll" version="06.00.02" generated="2017-06-18 20:44:50Z" generationTime="1.8102953">
  <namespace name="DotNetNuke.Security.Membership">
    <class name="AspNetMembershipProvider">
      <declaration><![CDATA[public class AspNetMembershipProvider : MembershipProvider]]></declaration>
      <documentation>-----------------------------------------------------------------------------
 Project:    DotNetNuke
 Namespace:  DotNetNuke.Security.Membership
 Class:      AspNetMembershipProvider
 -----------------------------------------------------------------------------
 <summary>
 The AspNetMembershipProvider overrides the default MembershipProvider to provide
 an AspNet Membership Component (MemberRole) implementation
 </summary>
 <remarks>
 </remarks>
 <history>
     [cnurse]	12/09/2005	created
 </history>
 -----------------------------------------------------------------------------</documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public AspNetMembershipProvider()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="66" sc="9" el="85" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="7fe94838accdc425c822374793858fe4"><![CDATA[public AspNetMembershipProvider()
        {
            _dataProvider = DataProvider.Instance();
            if (_dataProvider == null)
            {
				//get the provider configuration based on the type
                var defaultprovider = DotNetNuke.Data.DataProvider.Instance().DefaultProviderName;
                const string dataProviderNamespace = "DotNetNuke.Security.Membership.Data";
                if (defaultprovider == "SqlDataProvider")
                {
                    _dataProvider = new SqlDataProvider();
                }
                else
                {
                    var providerType = dataProviderNamespace + "." + defaultprovider;
                    _dataProvider = (DataProvider) Reflection.CreateObject(providerType, providerType, true);
                }
                ComponentFactory.RegisterComponentInstance<DataProvider>(_dataProvider);
            }
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="AutoUnlockUser">
          <declaration><![CDATA[private bool AutoUnlockUser(MembershipUser aspNetUser)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="224" sc="9" el="237" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="1198f5bd99b0e873981b64268e214a4a"><![CDATA[{
            if (Host.AutoAccountUnlockDuration != 0)
            {
                if (aspNetUser.LastLockoutDate < DateTime.Now.AddMinutes(-1*Host.AutoAccountUnlockDuration))
                {
					//Unlock user in Data Store
                    if (aspNetUser.UnlockUser())
                    {
                        return true;
                    }
                }
            }
            return false;
        }]]></body>
          </codeblock>
        </method>
        <method name="ChangePassword">
          <declaration><![CDATA[public override bool ChangePassword(UserInfo user, string oldPassword, string newPassword)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 ChangePassword attempts to change the users password
 </summary>
 <remarks>
 </remarks>
 <param name="user">The user to update.</param>
 <param name="oldPassword">The old password.</param>
 <param name="newPassword">The new password.</param>
 <returns>A Boolean indicating success or failure.</returns>
 <history>
     [cnurse]	12/13/2005	created
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="583" sc="9" el="606" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="2ba647f3f8fb43d91718992f1e1af55d"><![CDATA[{
            bool retValue = false;
            MembershipUser aspnetUser = GetMembershipUser(user);
            if (oldPassword == Null.NullString)
            {
                aspnetUser.UnlockUser();
                oldPassword = aspnetUser.GetPassword();
            }
            retValue = aspnetUser.ChangePassword(oldPassword, newPassword);
            if (retValue && PasswordRetrievalEnabled && !RequiresQuestionAndAnswer)
            {
                string confirmPassword = aspnetUser.GetPassword();
                if (confirmPassword == newPassword)
                {
                    user.Membership.Password = confirmPassword;
                    retValue = true;
                }
                else
                {
                    retValue = false;
                }
            }
            return retValue;
        }]]></body>
          </codeblock>
        </method>
        <method name="ChangePasswordQuestionAndAnswer">
          <declaration><![CDATA[public override bool ChangePasswordQuestionAndAnswer(UserInfo user, string password, string passwordQuestion, string passwordAnswer)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 ChangePasswordQuestionAndAnswer attempts to change the users password Question
 and PasswordAnswer
 </summary>
 <remarks>
 </remarks>
 <param name="user">The user to update.</param>
 <param name="password">The password.</param>
 <param name="passwordQuestion">The new password question.</param>
 <param name="passwordAnswer">The new password answer.</param>
 <returns>A Boolean indicating success or failure.</returns>
 <history>
     [cnurse]	02/08/2006	created
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="625" sc="9" el="634" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="7a1660939239d7a69ac2ead5aca58818"><![CDATA[{
            bool retValue = false;
            MembershipUser aspnetUser = GetMembershipUser(user);
            if (password == Null.NullString)
            {
                password = aspnetUser.GetPassword();
            }
            retValue = aspnetUser.ChangePasswordQuestionAndAnswer(password, passwordQuestion, passwordAnswer);
            return retValue;
        }]]></body>
          </codeblock>
        </method>
        <method name="CreateDNNUser">
          <declaration><![CDATA[private UserCreateStatus CreateDNNUser(ref UserInfo user)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 CreateDNNUser persists the DNN User information to the Database
 </summary>
 <remarks>
 </remarks>
 <param name="user">The user to persist to the Data Store.</param>
 <returns>The UserId of the newly created user.</returns>
 <history>
     [cnurse]	12/13/2005	created
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="252" sc="9" el="285" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="258e39566a9b181d2bb7cc4e62ecb264"><![CDATA[{
            var objSecurity = new PortalSecurity();
            string userName = objSecurity.InputFilter(user.Username, PortalSecurity.FilterFlag.NoScripting | PortalSecurity.FilterFlag.NoAngleBrackets | PortalSecurity.FilterFlag.NoMarkup);
            string email = objSecurity.InputFilter(user.Email, PortalSecurity.FilterFlag.NoScripting | PortalSecurity.FilterFlag.NoAngleBrackets | PortalSecurity.FilterFlag.NoMarkup);
            string lastName = objSecurity.InputFilter(user.LastName, PortalSecurity.FilterFlag.NoScripting | PortalSecurity.FilterFlag.NoAngleBrackets | PortalSecurity.FilterFlag.NoMarkup);
            string firstName = objSecurity.InputFilter(user.FirstName, PortalSecurity.FilterFlag.NoScripting | PortalSecurity.FilterFlag.NoAngleBrackets | PortalSecurity.FilterFlag.NoMarkup);
            UserCreateStatus createStatus = UserCreateStatus.Success;
            string displayName = objSecurity.InputFilter(user.DisplayName, PortalSecurity.FilterFlag.NoScripting | PortalSecurity.FilterFlag.NoAngleBrackets | PortalSecurity.FilterFlag.NoMarkup);
            bool updatePassword = user.Membership.UpdatePassword;
            bool isApproved = user.Membership.Approved;
            try
            {
                user.UserID =
                    Convert.ToInt32(_dataProvider.AddUser(user.PortalID,
                                                         userName,
                                                         firstName,
                                                         lastName,
                                                         user.AffiliateID,
                                                         user.IsSuperUser,
                                                         email,
                                                         displayName,
                                                         updatePassword,
                                                         isApproved,
                                                         UserController.GetCurrentUserInfo().UserID));
            }
            catch (Exception ex)
            {
				//Clear User (duplicate User information)
                Exceptions.LogException(ex);
                user = null;
                createStatus = UserCreateStatus.ProviderError;
            }
            return createStatus;
        }]]></body>
          </codeblock>
        </method>
        <method name="CreateMemberhipUser">
          <declaration><![CDATA[private UserCreateStatus CreateMemberhipUser(UserInfo user)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 CreateMemberhipUser persists the User as an AspNet MembershipUser to the AspNet
 Data Store
 </summary>
 <remarks>
 </remarks>
 <param name="user">The user to persist to the Data Store.</param>
 <returns>A UserCreateStatus enumeration indicating success or reason for failure.</returns>
 <history>
     [cnurse]	12/13/2005	created
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="301" sc="9" el="359" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="05b5719a376bd733940b5bc1ba43b185"><![CDATA[{
            var objSecurity = new PortalSecurity();
            string userName = objSecurity.InputFilter(user.Username, PortalSecurity.FilterFlag.NoScripting | PortalSecurity.FilterFlag.NoAngleBrackets | PortalSecurity.FilterFlag.NoMarkup);
            string email = objSecurity.InputFilter(user.Email, PortalSecurity.FilterFlag.NoScripting | PortalSecurity.FilterFlag.NoAngleBrackets | PortalSecurity.FilterFlag.NoMarkup);
            MembershipCreateStatus objStatus = MembershipCreateStatus.Success;
            MembershipUser objMembershipUser;
            if (MembershipProviderConfig.RequiresQuestionAndAnswer)
            {
                objMembershipUser = System.Web.Security.Membership.CreateUser(userName,
                                                                              user.Membership.Password,
                                                                              email,
                                                                              user.Membership.PasswordQuestion,
                                                                              user.Membership.PasswordAnswer,
                                                                              true,
                                                                              out objStatus);
            }
            else
            {
                objMembershipUser = System.Web.Security.Membership.CreateUser(userName, user.Membership.Password, email, null, null, true, out objStatus);
            }
            UserCreateStatus createStatus = UserCreateStatus.Success;
            switch (objStatus)
            {
                case MembershipCreateStatus.DuplicateEmail:
                    createStatus = UserCreateStatus.DuplicateEmail;
                    break;
                case MembershipCreateStatus.DuplicateProviderUserKey:
                    createStatus = UserCreateStatus.DuplicateProviderUserKey;
                    break;
                case MembershipCreateStatus.DuplicateUserName:
                    createStatus = UserCreateStatus.DuplicateUserName;
                    break;
                case MembershipCreateStatus.InvalidAnswer:
                    createStatus = UserCreateStatus.InvalidAnswer;
                    break;
                case MembershipCreateStatus.InvalidEmail:
                    createStatus = UserCreateStatus.InvalidEmail;
                    break;
                case MembershipCreateStatus.InvalidPassword:
                    createStatus = UserCreateStatus.InvalidPassword;
                    break;
                case MembershipCreateStatus.InvalidProviderUserKey:
                    createStatus = UserCreateStatus.InvalidProviderUserKey;
                    break;
                case MembershipCreateStatus.InvalidQuestion:
                    createStatus = UserCreateStatus.InvalidQuestion;
                    break;
                case MembershipCreateStatus.InvalidUserName:
                    createStatus = UserCreateStatus.InvalidUserName;
                    break;
                case MembershipCreateStatus.ProviderError:
                    createStatus = UserCreateStatus.ProviderError;
                    break;
                case MembershipCreateStatus.UserRejected:
                    createStatus = UserCreateStatus.UserRejected;
                    break;
            }
            return createStatus;
        }]]></body>
          </codeblock>
        </method>
        <method name="CreateUser">
          <declaration><![CDATA[public override UserCreateStatus CreateUser(ref UserInfo user)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 CreateUser persists a User to the Data Store
 </summary>
 <remarks>
 </remarks>
 <param name="user">The user to persist to the Data Store.</param>
 <returns>A UserCreateStatus enumeration indicating success or reason for failure.</returns>
 <history>
     [cnurse]	12/13/2005	created
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="649" sc="9" el="719" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="04b60666c775cbe943b3b4a9fed47a9b"><![CDATA[{
            UserCreateStatus createStatus;
            try
            {
                //check if username exists in database for any portal
                UserInfo objVerifyUser = GetUserByUserName(Null.NullInteger, user.Username);
                if (objVerifyUser != null)
                {
                    if (objVerifyUser.IsSuperUser)
                    {
						//the username belongs to an existing super user
                        createStatus = UserCreateStatus.UserAlreadyRegistered;
                    }
                    else
                    {
						//the username exists so we should now verify the password
                        if (ValidateUser(objVerifyUser.PortalID, user.Username, user.Membership.Password))
                        {
                            //check if user exists for the portal specified
                            objVerifyUser = GetUserByUserName(user.PortalID, user.Username);
                            if (objVerifyUser != null)
                            {
								//the user is already registered for this portal
                                createStatus = UserCreateStatus.UserAlreadyRegistered;
                            }
                            else
                            {
								//the user does not exist in this portal - add them
                                createStatus = UserCreateStatus.AddUserToPortal;
                            }
                        }
                        else
                        {
							//not the same person - prevent registration
                            createStatus = UserCreateStatus.UsernameAlreadyExists;
                        }
                    }
                }
                else
                {
					//the user does not exist
                    createStatus = UserCreateStatus.AddUser;
                }
				
                //If new user - add to aspnet membership
                if (createStatus == UserCreateStatus.AddUser)
                {
                    createStatus = CreateMemberhipUser(user);
                }
				
                //If asp user has been successfully created or we are adding a existing user
                //to a new portal 
                if (createStatus == UserCreateStatus.Success || createStatus == UserCreateStatus.AddUserToPortal)
                {
					//Create the DNN User Record
                    createStatus = CreateDNNUser(ref user);
                    if (createStatus == UserCreateStatus.Success)
                    {
						//Persist the Profile to the Data Store
                        ProfileController.UpdateUserProfile(user);
                    }
                }
                
            }
            catch (Exception exc) //an unexpected error occurred
            {
                Exceptions.LogException(exc);
                createStatus = UserCreateStatus.UnexpectedError;
            }
            return createStatus;
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteMembershipUser">
          <declaration><![CDATA[private bool DeleteMembershipUser(UserInfo user)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 DeleteMembershipUser deletes the User as an AspNet MembershipUser from the AspNet
 Data Store
 </summary>
 <remarks>
 </remarks>
 <param name="user">The user to delete from the Data Store.</param>
 <returns>A Boolean indicating success or failure.</returns>
 <history>
     [cnurse]	12/22/2005	created
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="375" sc="9" el="388" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="dfd0feabe51977ea82d348bd0edb2cad"><![CDATA[{
            bool retValue = true;
            try
            {
                System.Web.Security.Membership.DeleteUser(user.Username, true);
            }
            catch (Exception exc)
            {
                DnnLog.Error(exc);

                retValue = false;
            }
            return retValue;
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteUser">
          <declaration><![CDATA[public override bool DeleteUser(UserInfo user)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 DeleteUser deletes a single User from the Data Store
 </summary>
 <remarks>
 </remarks>
 <param name="user">The user to delete from the Data Store.</param>
 <returns>A Boolean indicating success or failure.</returns>
 <history>
     [cnurse]	12/13/2005	created
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="734" sc="9" el="756" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="518db6d7606b9233d21eda6a45aa1ecb"><![CDATA[{
            bool retValue = true;
            IDataReader dr = null;
            try
            {
                dr = _dataProvider.GetRolesByUser(user.UserID, user.PortalID);
                while (dr.Read())
                {
                    _dataProvider.DeleteUserRole(user.UserID, Convert.ToInt32(dr["RoleId"]));
                }
                _dataProvider.DeleteUserPortal(user.UserID, user.PortalID);
            }
            catch (Exception ex)
            {
                Exceptions.LogException(ex);
                retValue = false;
            }
            finally
            {
                CBO.CloseDataReader(dr, true);
            }
            return retValue;
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteUsersOnline">
          <declaration><![CDATA[public override void DeleteUsersOnline(int timeWindow)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 Deletes all UserOnline inof from the database that has activity outside of the
 time window
 </summary>
 <remarks>
 </remarks>
 <param name="timeWindow">Time Window in Minutes</param>
 <history>
     [cnurse]	03/15/2006	created
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="812" sc="9" el="814" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="a967af12f5937ad5d0204c61e3eb9da4"><![CDATA[{
            _dataProvider.DeleteUsersOnline(timeWindow);
        }]]></body>
          </codeblock>
        </method>
        <method name="FillUserMembership">
          <declaration><![CDATA[private void FillUserMembership(MembershipUser aspNetUser, UserInfo user)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 Builds a UserMembership object from an AspNet MembershipUser
 </summary>
 <remarks>
 </remarks>
 <param name="aspNetUser">The MembershipUser object to use to fill the DNN UserMembership.</param>
 <param name="user">The use need to fill</param>
 <history>
 	[cnurse]	12/10/2005	created
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="403" sc="9" el="426" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="4ae3815dcf2bb7135c7c59bbb0df0732"><![CDATA[{
			//Fill Membership Property
            if (aspNetUser != null)
            {
                if (user.Membership == null)
                {
                    user.Membership = new UserMembership(user);
                }
                user.Membership.CreatedDate = aspNetUser.CreationDate;
                user.Membership.LastActivityDate = aspNetUser.LastActivityDate;
                user.Membership.LastLockoutDate = aspNetUser.LastLockoutDate;
                user.Membership.LastLoginDate = aspNetUser.LastLoginDate;
                user.Membership.LastPasswordChangeDate = aspNetUser.LastPasswordChangedDate;
                user.Membership.LockedOut = aspNetUser.IsLockedOut;
                user.Membership.PasswordQuestion = aspNetUser.PasswordQuestion;
                user.Membership.IsDeleted = user.IsDeleted;

                if (user.IsSuperUser)
                {
					//For superusers the Approved info is stored in aspnet membership
                    user.Membership.Approved = aspNetUser.IsApproved;
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GeneratePassword">
          <declaration><![CDATA[public override string GeneratePassword()]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 Generates a new random password (Length = Minimum Length + 4)
 </summary>
 <returns>A String</returns>
 <history>
     [cnurse]	03/08/2006	created
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="826" sc="9" el="828" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="e2b12e74e1174c0d66358e3faf1cd1e3"><![CDATA[{
            return GeneratePassword(MinPasswordLength + 4);
        }]]></body>
          </codeblock>
        </method>
        <method name="GeneratePassword">
          <declaration><![CDATA[public override string GeneratePassword(int length)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 Generates a new random password
 </summary>
 <param name="length">The length of password to generate.</param>
 <returns>A String</returns>
 <history>
     [cnurse]	03/08/2006	created
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="841" sc="9" el="843" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="72b8e2bff4da81ad9de71e8ca92b8225"><![CDATA[{
            return System.Web.Security.Membership.GeneratePassword(length, MinNonAlphanumericCharacters);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetCacheKey">
          <declaration><![CDATA[private string GetCacheKey(string userName)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="459" sc="9" el="461" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="d82b8d2ba3eaa80fc8bc2a87b93890d7"><![CDATA[{
            return String.Format("MembershipUser_{0}", userName);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetDeletedUsers">
          <declaration><![CDATA[public override ArrayList GetDeletedUsers(int portalId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="906" sc="9" el="908" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="5a992a9aeee82d93c2cf4d554095054a"><![CDATA[{
            return UserController.FillUserCollection(portalId, _dataProvider.GetDeletedUsers(portalId));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetMembershipUser">
          <declaration><![CDATA[private MembershipUser GetMembershipUser(UserInfo user)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 Gets an AspNet MembershipUser from the DataStore
 </summary>
 <param name="user">The user to get from the Data Store.</param>
 <returns>The User as a AspNet MembershipUser object</returns>
 <history>
     [cnurse]	12/10/2005	created
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="439" sc="9" el="441" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="098e7ea2cfdda0c80483a283967262e3"><![CDATA[{
            return GetMembershipUser(user.Username);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetMembershipUser">
          <declaration><![CDATA[private MembershipUser GetMembershipUser(string userName)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 Gets an AspNet MembershipUser from the DataStore
 </summary>
 <param name="userName">The name of the user.</param>
 <returns>The User as a AspNet MembershipUser object</returns>
 <history>
     [cnurse]	04/25/2006	created
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="454" sc="9" el="456" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="cc2f3bf717f4fe5993b2d461ed7476f7"><![CDATA[{
            return CBO.GetCachedObject<MembershipUser>(new CacheItemArgs(GetCacheKey(userName), DataCache.UserCacheTimeOut, DataCache.UserCachePriority, userName), GetMembershipUserCallBack);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetMembershipUserCallBack">
          <declaration><![CDATA[private static object GetMembershipUserCallBack(CacheItemArgs cacheItemArgs)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="464" sc="9" el="468" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="92d0f5c6e59ed3827d9f720460713789"><![CDATA[{
            string userName = cacheItemArgs.ParamList[0].ToString();

            return System.Web.Security.Membership.GetUser(userName);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetOnlineUsers">
          <declaration><![CDATA[public override ArrayList GetOnlineUsers(int portalId)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 Gets a collection of Online Users
 </summary>
 <param name="portalId">The Id of the Portal</param>
 <returns>An ArrayList of UserInfo objects</returns>
 <history>
     [cnurse]	03/15/2006	created
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="856" sc="9" el="859" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="914ad6c2402c4ed68591ef203b9ac97c"><![CDATA[{
            int totalRecords = 0;
            return UserController.FillUserCollection(portalId, _dataProvider.GetOnlineUsers(portalId), ref totalRecords);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPassword">
          <declaration><![CDATA[public override string GetPassword(UserInfo user, string passwordAnswer)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 Gets the Current Password Information for the User
 </summary>
 <remarks>
 </remarks>
 <param name="user">The user to delete from the Data Store.</param>
 <param name="passwordAnswer">The answer to the Password Question, ues to confirm the user
 has the right to obtain the password.</param>
 <returns>A String</returns>
 <history>
     [cnurse]	12/10/2005	created
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="876" sc="9" el="893" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="9d259b35c80f92aa2d633f3cfe478449"><![CDATA[{
            string retValue = "";
            bool unLocked = true;
            MembershipUser aspnetUser = GetMembershipUser(user);
            if (aspnetUser.IsLockedOut)
            {
                unLocked = AutoUnlockUser(aspnetUser);
            }
            if (RequiresQuestionAndAnswer)
            {
                retValue = aspnetUser.GetPassword(passwordAnswer);
            }
            else
            {
                retValue = aspnetUser.GetPassword();
            }
            return retValue;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetTotalRecords">
          <declaration><![CDATA[private static int GetTotalRecords(ref IDataReader dr)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 The GetTotalRecords method gets the number of Records returned.
 </summary>
 <param name="dr">An <see cref="T:System.Data.IDataReader" /> containing the Total no of records</param>
 <returns>An Integer</returns>
 <history>
 	[cnurse]	03/30/2006	Created
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="481" sc="9" el="497" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="e736ef0c0e4f40007376b58a0e6cd518"><![CDATA[{
            int total = 0;
            if (dr.Read())
            {
                try
                {
                    total = Convert.ToInt32(dr["TotalRecords"]);
                }
                catch (Exception exc)
                {
                    DnnLog.Error(exc);

                    total = -1;
                }
            }
            return total;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetUnAuthorizedUsers">
          <declaration><![CDATA[public override ArrayList GetUnAuthorizedUsers(int portalId, bool includeDeleted, bool superUsersOnly)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="896" sc="9" el="898" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="1c48eda833631a11947b4a047b71be5e"><![CDATA[{
            return UserController.FillUserCollection(portalId, _dataProvider.GetUnAuthorizedUsers(portalId, includeDeleted, superUsersOnly));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetUnAuthorizedUsers">
          <declaration><![CDATA[public override ArrayList GetUnAuthorizedUsers(int portalId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="901" sc="9" el="903" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="c5e6119070495707ad583d73759cb83b"><![CDATA[{
            return GetUnAuthorizedUsers(portalId, false, false);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetUnAuthorizedUsers">
          <deprecation>Deprecated in 5.1 as Ishydrated is no longer supported</deprecation>
          <declaration><![CDATA[public override ArrayList GetUnAuthorizedUsers(int portalId, bool isHydrated)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1429" sc="9" el="1431" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="31de372f523301100c67dfb818ae8b3d"><![CDATA[{
            return GetUnAuthorizedUsers(portalId);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetUser">
          <declaration><![CDATA[public override UserInfo GetUser(int portalId, int userId)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 GetUserByUserName retrieves a User from the DataStore
 </summary>
 <remarks>
 </remarks>
 <param name="portalId">The Id of the Portal</param>
 <param name="userId">The id of the user being retrieved from the Data Store.</param>
 <returns>The User as a UserInfo object</returns>
 <history>
     [cnurse]	12/10/2005	created
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="924" sc="9" el="928" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="99046748dfd9af8867c5ca2a7491b979"><![CDATA[{
            IDataReader dr = _dataProvider.GetUser(portalId, userId);
            UserInfo objUserInfo = UserController.FillUserInfo(portalId, dr, true);
            return objUserInfo;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetUser">
          <deprecation>Deprecated in 5.1 as Ishydrated is no longer supported</deprecation>
          <declaration><![CDATA[public override UserInfo GetUser(int portalId, int userId, bool isHydrated)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1435" sc="9" el="1437" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="1e8e22f98f0d15e356f8aaeb364ebdb3"><![CDATA[{
            return GetUser(portalId, userId);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetUserByAuthToken">
          <declaration><![CDATA[private UserInfo GetUserByAuthToken(int portalId, string userToken, string authType)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 GetUserByAuthToken retrieves a User from the DataStore using an Authentication Token
 </summary>
 <remarks>
 </remarks>
 <param name="portalId">The Id of the Portal</param>
 <param name="userToken">The authentication token of the user being retrieved from the Data Store.</param>
 <param name="authType">The type of Authentication Used</param>
 <returns>The User as a UserInfo object</returns>
 <history>
     [cnurse]	07/09/2007	created
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="514" sc="9" el="518" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="15d96a17106e078c373382a049b395e7"><![CDATA[{
            IDataReader dr = _dataProvider.GetUserByAuthToken(portalId, userToken, authType);
            UserInfo objUserInfo = UserController.FillUserInfo(portalId, dr, true);
            return objUserInfo;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetUserByUserName">
          <declaration><![CDATA[public override UserInfo GetUserByUserName(int portalId, string username)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 GetUserByUserName retrieves a User from the DataStore
 </summary>
 <remarks>
 </remarks>
 <param name="portalId">The Id of the Portal</param>
 <param name="username">The username of the user being retrieved from the Data Store.</param>
 <returns>The User as a UserInfo object</returns>
 <history>
     [cnurse]	12/10/2005	created
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="944" sc="9" el="948" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="fc76fef2ae9770b90cae93b7b074b35e"><![CDATA[{
            IDataReader dr = _dataProvider.GetUserByUsername(portalId, username);
            UserInfo objUserInfo = UserController.FillUserInfo(portalId, dr, true);
            return objUserInfo;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetUserByUserName">
          <deprecation>Deprecated in 5.1 as Ishydrated is no longer supported</deprecation>
          <declaration><![CDATA[public override UserInfo GetUserByUserName(int portalId, string username, bool isHydrated)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1441" sc="9" el="1443" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="05e1e31c8316b3d783770293a38e9e1c"><![CDATA[{
            return GetUserByUserName(portalId, username);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetUserCountByPortal">
          <declaration><![CDATA[public override int GetUserCountByPortal(int portalId)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 GetUserCountByPortal gets the number of users in the portal
 </summary>
 <remarks>
 </remarks>
 <param name="portalId">The Id of the Portal</param>
 <returns>The no of users</returns>
 <history>
     [cnurse]	05/01/2006	created
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="963" sc="9" el="965" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="f8fb54ae221691f10d50bd5a18998ee4"><![CDATA[{
            return _dataProvider.GetUserCountByPortal(portalId);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetUserMembership">
          <declaration><![CDATA[public override void GetUserMembership(ref UserInfo user)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 GetUserMembership retrieves the UserMembership information from the Data Store
 </summary>
 <remarks>
 </remarks>
 <param name="user">The user whose Membership information we are retrieving.</param>
 <history>
     [cnurse]	12/13/2005	created
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="979" sc="9" el="990" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="73427478b282e6fc587ce2cc50e331ab"><![CDATA[{
            MembershipUser aspnetUser = null;

            //Get AspNet MembershipUser
            aspnetUser = GetMembershipUser(user);

            //Fill Membership Property
            FillUserMembership(aspnetUser, user);

            //Get Online Status
            user.Membership.IsOnLine = IsUserOnline(user);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetUsers">
          <declaration><![CDATA[public override ArrayList GetUsers(int portalId, int pageIndex, int pageSize, ref int totalRecords, bool includeDeleted, bool superUsersOnly)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 GetUsers gets all the users of the portal
 </summary>
 <remarks>If all records are required, (ie no paging) set pageSize = -1</remarks>
 <param name="portalId">The Id of the Portal</param>
 <param name="pageIndex">The page of records to return.</param>
 <param name="pageSize">The size of the page</param>
 <param name="totalRecords">The total no of records that satisfy the criteria.</param>
 <param name="includeDeleted">Include deleted users.</param>
 <param name="superUsersOnly">Only select super users.</param>
 <returns>An ArrayList of UserInfo objects.</returns>
 <history>
     [cnurse]	12/14/2005	created
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="1009" sc="9" el="1017" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="e093953ebbccc091532a647831d5e133"><![CDATA[{
            if (pageIndex == -1)
            {
                pageIndex = 0;
                pageSize = int.MaxValue;
            }

            return UserController.FillUserCollection(portalId, _dataProvider.GetAllUsers(portalId, pageIndex, pageSize, includeDeleted, superUsersOnly), ref totalRecords);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetUsers">
          <declaration><![CDATA[public override ArrayList GetUsers(int portalId, int pageIndex, int pageSize, ref int totalRecords)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1020" sc="9" el="1022" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="fafe5efef0483479ec7f78dad9c4ab02"><![CDATA[{
            return GetUsers(portalId, pageIndex, pageSize, ref totalRecords, false, false);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetUsers">
          <deprecation>Deprecated in 5.1 as Ishydrated is no longer supported</deprecation>
          <declaration><![CDATA[public override ArrayList GetUsers(int portalId, bool isHydrated, int pageIndex, int pageSize, ref int totalRecords)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1447" sc="9" el="1449" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="baf0be1dd9219c51ee642d98f2cf7e76"><![CDATA[{
            return GetUsers(portalId, pageIndex, pageSize, ref totalRecords);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetUsersByEmail">
          <declaration><![CDATA[public override ArrayList GetUsersByEmail(int portalId, string emailToMatch, int pageIndex, int pageSize, ref int totalRecords, bool includeDeleted, bool superUsersOnly)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 GetUsersByEmail gets all the users of the portal whose email matches a provided
 filter expression
 </summary>
 <remarks>If all records are required, (ie no paging) set pageSize = -1</remarks>
 <param name="portalId">The Id of the Portal</param>
 <param name="emailToMatch">The email address to use to find a match.</param>
 <param name="pageIndex">The page of records to return.</param>
 <param name="pageSize">The size of the page</param>
 <param name="totalRecords">The total no of records that satisfy the criteria.</param>
 <param name="includeDeleted">Include deleted users.</param>
 <param name="superUsersOnly">Only select super users.</param>
 <returns>An ArrayList of UserInfo objects.</returns>
 <history>
     [cnurse]	12/14/2005	created
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="1043" sc="9" el="1051" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="fcff8d5c4f12d57e3c0abb35be792622"><![CDATA[{
            if (pageIndex == -1)
            {
                pageIndex = 0;
                pageSize = int.MaxValue;
            }

            return UserController.FillUserCollection(portalId, _dataProvider.GetUsersByEmail(portalId, emailToMatch, pageIndex, pageSize, includeDeleted, superUsersOnly), ref totalRecords);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetUsersByEmail">
          <declaration><![CDATA[public override ArrayList GetUsersByEmail(int portalId, string emailToMatch, int pageIndex, int pageSize, ref int totalRecords)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1054" sc="9" el="1056" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="12d221842f249502c6e2b9335d41c06d"><![CDATA[{
            return GetUsersByEmail(portalId, emailToMatch, pageIndex, pageSize, ref totalRecords, false, false);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetUsersByEmail">
          <deprecation>Deprecated in 5.1 as Ishydrated is no longer supported</deprecation>
          <declaration><![CDATA[public override ArrayList GetUsersByEmail(int portalId, bool isHydrated, string emailToMatch, int pageIndex, int pageSize, ref int totalRecords)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1453" sc="9" el="1455" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="b5e62c440cdb64c77a78431471180bb4"><![CDATA[{
            return GetUsersByEmail(portalId, emailToMatch, pageIndex, pageSize, ref totalRecords);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetUsersByProfileProperty">
          <declaration><![CDATA[public override ArrayList GetUsersByProfileProperty(int portalId, string propertyName, string propertyValue, int pageIndex, int pageSize, ref int totalRecords, bool includeDeleted, bool superUsersOnly)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 GetUsersByProfileProperty gets all the users of the portal whose profile matches
 the profile property pased as a parameter
 </summary>
 <remarks>
 </remarks>
 <param name="portalId">The Id of the Portal</param>
 <param name="propertyName">The name of the property being matched.</param>
 <param name="propertyValue">The value of the property being matched.</param>
 <param name="pageIndex">The page of records to return.</param>
 <param name="pageSize">The size of the page</param>
 <param name="totalRecords">The total no of records that satisfy the criteria.</param>
 <param name="includeDeleted">Include deleted users.</param>
 <param name="superUsersOnly">Only select super users.</param>
 <returns>An ArrayList of UserInfo objects.</returns>
 <history>
     [cnurse]	02/01/2006	created
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="1113" sc="9" el="1121" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="21cc224a061e75fcdd46b0e119bbc693"><![CDATA[{
            if (pageIndex == -1)
            {
                pageIndex = 0;
                pageSize = int.MaxValue;
            }

            return UserController.FillUserCollection(portalId, _dataProvider.GetUsersByProfileProperty(portalId, propertyName, propertyValue, pageIndex, pageSize, includeDeleted, superUsersOnly), ref totalRecords);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetUsersByProfileProperty">
          <declaration><![CDATA[public override ArrayList GetUsersByProfileProperty(int portalId, string propertyName, string propertyValue, int pageIndex, int pageSize, ref int totalRecords)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1124" sc="9" el="1126" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="c2477b8f7c59ea8de8f7d031ffb0a840"><![CDATA[{
            return GetUsersByProfileProperty(portalId, propertyName, propertyValue, pageIndex, pageSize, ref totalRecords, false, false);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetUsersByProfileProperty">
          <deprecation>Deprecated in 5.1 as Ishydrated is no longer supported</deprecation>
          <declaration><![CDATA[public override ArrayList GetUsersByProfileProperty(int portalId, bool isHydrated, string propertyName, string propertyValue, int pageIndex, int pageSize, ref int totalRecords)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1465" sc="9" el="1467" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="dcbcd29df25747d2c138f34217cac4b4"><![CDATA[{
            return GetUsersByProfileProperty(portalId, propertyName, propertyValue, pageIndex, pageSize, ref totalRecords);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetUsersByUserName">
          <declaration><![CDATA[public override ArrayList GetUsersByUserName(int portalId, string userNameToMatch, int pageIndex, int pageSize, ref int totalRecords, bool includeDeleted, bool superUsersOnly)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 GetUsersByUserName gets all the users of the portal whose username matches a provided
 filter expression
 </summary>
 <remarks>If all records are required, (ie no paging) set pageSize = -1</remarks>
 <param name="portalId">The Id of the Portal</param>
 <param name="userNameToMatch">The username to use to find a match.</param>
 <param name="pageIndex">The page of records to return.</param>
 <param name="pageSize">The size of the page</param>
 <param name="totalRecords">The total no of records that satisfy the criteria.</param>
 <param name="includeDeleted">Include deleted users.</param>
 <param name="superUsersOnly">Only select super users.</param>
 <returns>An ArrayList of UserInfo objects.</returns>
 <history>
     [cnurse]	12/14/2005	created
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="1077" sc="9" el="1085" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="60284610a13ad8d35205ce4cf3adff8d"><![CDATA[{
            if (pageIndex == -1)
            {
                pageIndex = 0;
                pageSize = int.MaxValue;
            }

            return UserController.FillUserCollection(portalId, _dataProvider.GetUsersByUsername(portalId, userNameToMatch, pageIndex, pageSize, includeDeleted, superUsersOnly), ref totalRecords);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetUsersByUserName">
          <declaration><![CDATA[public override ArrayList GetUsersByUserName(int portalId, string userNameToMatch, int pageIndex, int pageSize, ref int totalRecords)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1088" sc="9" el="1090" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="c7fcac6e5f9007bb8cfe05be78b014c4"><![CDATA[{
            return GetUsersByUserName(portalId, userNameToMatch, pageIndex, pageSize, ref totalRecords, false, false);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetUsersByUserName">
          <deprecation>Deprecated in 5.1 as Ishydrated is no longer supported</deprecation>
          <declaration><![CDATA[public override ArrayList GetUsersByUserName(int portalId, bool isHydrated, string userNameToMatch, int pageIndex, int pageSize, ref int totalRecords)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1459" sc="9" el="1461" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="4b5edcfc6868582541d2a52d9d0b5fd3"><![CDATA[{
            return GetUsersByUserName(portalId, userNameToMatch, pageIndex, pageSize, ref totalRecords);
        }]]></body>
          </codeblock>
        </method>
        <method name="IsUserOnline">
          <declaration><![CDATA[public override bool IsUserOnline(UserInfo user)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 Gets whether the user in question is online
 </summary>
 <remarks>
 </remarks>
 <param name="user">The user.</param>
 <returns>A Boolean indicating whether the user is online.</returns>
 <history>
     [cnurse]	03/14/2006	created
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="1141" sc="9" el="1163" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="93037fed131a1d860b3e7aa08e67abd5"><![CDATA[{
            bool isOnline = false;
            var objUsersOnline = new UserOnlineController();
            if (objUsersOnline.IsEnabled())
            {
                Hashtable userList = objUsersOnline.GetUserList();
                var onlineUser = (OnlineUserInfo) userList[user.UserID.ToString()];
                if (onlineUser != null)
                {
                    isOnline = true;
                }
                else
                {
					//Next try the Database
                    onlineUser = (OnlineUserInfo) CBO.FillObject(_dataProvider.GetOnlineUser(user.UserID), typeof (OnlineUserInfo));
                    if (onlineUser != null)
                    {
                        isOnline = true;
                    }
                }
            }
            return isOnline;
        }]]></body>
          </codeblock>
        </method>
        <method name="RemoveUser">
          <declaration><![CDATA[public override bool RemoveUser(UserInfo user)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="777" sc="9" el="797" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="86c83d9d306d8d75d7a03805877745a4"><![CDATA[{
            bool retValue = true;

            try
            {
                _dataProvider.RemoveUser(user.UserID, user.PortalID);
                //Prior to removing membership, ensure user is not present in any other portal
                UserInfo otherUser = GetUserByUserName(Null.NullInteger, user.Username);
                if (otherUser == null)
                {
                    DeleteMembershipUser(user);
                }   
            }
            catch (Exception ex)
            {
                Exceptions.LogException(ex);
                retValue = false;
            }

            return retValue;
        }]]></body>
          </codeblock>
        </method>
        <method name="ResetPassword">
          <declaration><![CDATA[public override string ResetPassword(UserInfo user, string passwordAnswer)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 ResetPassword resets a user's password and returns the newly created password
 </summary>
 <remarks>
 </remarks>
 <param name="user">The user to update.</param>
 <param name="passwordAnswer">The answer to the user's password Question.</param>
 <returns>The new Password.</returns>
 <history>
     [cnurse]	02/08/2006	created
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="1179" sc="9" el="1194" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="30fbf55a5a871894df44de58a7d936cf"><![CDATA[{
            string retValue = "";

            //Get AspNet MembershipUser
            MembershipUser aspnetUser = GetMembershipUser(user);

            if (RequiresQuestionAndAnswer)
            {
                retValue = aspnetUser.ResetPassword(passwordAnswer);
            }
            else
            {
                retValue = aspnetUser.ResetPassword();
            }
            return retValue;
        }]]></body>
          </codeblock>
        </method>
        <method name="RestoreUser">
          <declaration><![CDATA[public override bool RestoreUser(UserInfo user)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="759" sc="9" el="774" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="93ef2fd9d2bd5df04184f7978750b516"><![CDATA[{
            var retValue = true;

            try
            {
                _dataProvider.RestoreUser(user.UserID, user.PortalID);
            }
            catch (Exception ex)
            {

                Exceptions.LogException(ex);
                retValue = false;
            }

            return retValue;
        }]]></body>
          </codeblock>
        </method>
        <method name="UnLockUser">
          <declaration><![CDATA[public override bool UnLockUser(UserInfo user)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 Unlocks the User's Account
 </summary>
 <remarks>
 </remarks>
 <param name="user">The user whose account is being Unlocked.</param>
 <returns>True if successful, False if unsuccessful.</returns>
 <history>
     [cnurse]	12/13/2005	created
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="1209" sc="9" el="1213" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="a46bc3783db31baceb6c5ffc4451d0ca"><![CDATA[{
            MembershipUser objMembershipUser;
            objMembershipUser = System.Web.Security.Membership.GetUser(user.Username);
            return objMembershipUser.UnlockUser();
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateUser">
          <declaration><![CDATA[public override void UpdateUser(UserInfo user)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 UpdateUser persists a user to the Data Store
 </summary>
 <remarks>
 </remarks>
 <param name="user">The user to persist to the Data Store.</param>
 <history>
     [cnurse]	12/13/2005	created
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="1227" sc="9" el="1259" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="f4f85d213e813139ea8601ff03abc006"><![CDATA[{
            var objSecurity = new PortalSecurity();
            string firstName = objSecurity.InputFilter(user.FirstName, PortalSecurity.FilterFlag.NoScripting | PortalSecurity.FilterFlag.NoAngleBrackets | PortalSecurity.FilterFlag.NoMarkup);
            string lastName = objSecurity.InputFilter(user.LastName, PortalSecurity.FilterFlag.NoScripting | PortalSecurity.FilterFlag.NoAngleBrackets | PortalSecurity.FilterFlag.NoMarkup);
            string email = objSecurity.InputFilter(user.Email, PortalSecurity.FilterFlag.NoScripting | PortalSecurity.FilterFlag.NoAngleBrackets | PortalSecurity.FilterFlag.NoMarkup);
            string displayName = objSecurity.InputFilter(user.DisplayName, PortalSecurity.FilterFlag.NoScripting | PortalSecurity.FilterFlag.NoAngleBrackets | PortalSecurity.FilterFlag.NoMarkup);
            bool updatePassword = user.Membership.UpdatePassword;
            bool isApproved = user.Membership.Approved;
            if (String.IsNullOrEmpty(displayName))
            {
                displayName = firstName + " " + lastName;
            }
			
            //Persist the Membership to the Data Store
            UpdateUserMembership(user);
			
			//Persist the DNN User to the Database
            _dataProvider.UpdateUser(user.UserID,
                                    user.PortalID,
                                    firstName,
                                    lastName,
                                    email,
                                    displayName,
                                    updatePassword,
                                    isApproved,
                                    user.RefreshRoles,
                                    user.LastIPAddress,
                                    user.IsDeleted,
                                    UserController.GetCurrentUserInfo().UserID);
            
			//Persist the Profile to the Data Store
			ProfileController.UpdateUserProfile(user);
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateUserMembership">
          <declaration><![CDATA[private void UpdateUserMembership(UserInfo user)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 UpdateUserMembership persists a user's Membership to the Data Store
 </summary>
 <remarks>
 </remarks>
 <param name="user">The user to persist to the Data Store.</param>
 <history>
     [cnurse]	12/13/2005	created
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="532" sc="9" el="547" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="bced2b7fcef04b9905d08c2be212bec9"><![CDATA[{
            var objSecurity = new PortalSecurity();
            string email = objSecurity.InputFilter(user.Email, PortalSecurity.FilterFlag.NoScripting | PortalSecurity.FilterFlag.NoAngleBrackets | PortalSecurity.FilterFlag.NoMarkup);

            //Persist the Membership Properties to the AspNet Data Store
            MembershipUser objMembershipUser;
            objMembershipUser = System.Web.Security.Membership.GetUser(user.Username);
            objMembershipUser.Email = email;
            objMembershipUser.LastActivityDate = DateTime.Now;
            if (user.IsSuperUser)
            {
                objMembershipUser.IsApproved = user.Membership.Approved;
            }
            System.Web.Security.Membership.UpdateUser(objMembershipUser);
			DataCache.RemoveCache(GetCacheKey(user.Username));
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateUsersOnline">
          <declaration><![CDATA[public override void UpdateUsersOnline(Hashtable userList)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 Updates UserOnline info
 time window
 </summary>
 <param name="userList">List of users to update</param>
 <history>
     [cnurse]	03/15/2006	created
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="1272" sc="9" el="1274" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="aa2c11a028d7b925215b8cdb790d7ba7"><![CDATA[{
            _dataProvider.UpdateUsersOnline(userList);
        }]]></body>
          </codeblock>
        </method>
        <method name="UserLogin">
          <declaration><![CDATA[public override UserInfo UserLogin(int portalId, string username, string password, string verificationCode, ref UserLoginStatus loginStatus)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 UserLogin attempts to log the user in, and returns the User if successful
 </summary>
 <remarks>
 </remarks>
 <param name="portalId">The Id of the Portal the user belongs to</param>
 <param name="username">The user name of the User attempting to log in</param>
 <param name="password">The password of the User attempting to log in</param>
 <param name="verificationCode">The verification code of the User attempting to log in</param>
 <param name="loginStatus">An enumerated value indicating the login status.</param>
 <returns>The User as a UserInfo object</returns>
 <history>
     [cnurse]	12/10/2005	created
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="1293" sc="9" el="1295" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="2778f950ec9b8d79bcceb31bbd30d9c7"><![CDATA[{
            return UserLogin(portalId, username, password, "DNN", verificationCode, ref loginStatus);
        }]]></body>
          </codeblock>
        </method>
        <method name="UserLogin">
          <declaration><![CDATA[public override UserInfo UserLogin(int portalId, string username, string password, string authType, string verificationCode, ref UserLoginStatus loginStatus)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 UserLogin attempts to log the user in, and returns the User if successful
 </summary>
 <remarks>
 </remarks>
 <param name="portalId">The Id of the Portal the user belongs to</param>
 <param name="username">The user name of the User attempting to log in</param>
 <param name="password">The password of the User attempting to log in (may not be used by all Auth types)</param>
 <param name="authType">The type of Authentication Used</param>
 <param name="verificationCode">The verification code of the User attempting to log in</param>
 <param name="loginStatus">An enumerated value indicating the login status.</param>
 <returns>The User as a UserInfo object</returns>
 <history>
     [cnurse]	07/09/2007	created
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="1315" sc="9" el="1425" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="af5cfa6730bf4793ac1e043250097c14"><![CDATA[{
            //For now, we are going to ignore the possibility that the User may exist in the 
            //Global Data Store but not in the Local DataStore ie. A shared Global Data Store

            //Initialise Login Status to Failure
            loginStatus = UserLoginStatus.LOGIN_FAILURE;

            DataCache.ClearUserCache(portalId, username);
            DataCache.ClearCache(GetCacheKey(username));

            //Get a light-weight (unhydrated) DNN User from the Database, we will hydrate it later if neccessary
            UserInfo user;
            if (authType == "DNN")
            {
                user = GetUserByUserName(portalId, username);
            }
            else
            {
                user = GetUserByAuthToken(portalId, username, authType);
            }
            if (user != null && !user.IsDeleted)
            {
                //Get AspNet MembershipUser
                MembershipUser aspnetUser = null;
                aspnetUser = GetMembershipUser(user);

                //Fill Membership Property from AspNet MembershipUser
                FillUserMembership(aspnetUser, user);

                //Check if the User is Locked Out (and unlock if AutoUnlock has expired)
                if (aspnetUser.IsLockedOut)
                {
                    if (AutoUnlockUser(aspnetUser))
                    {
						//Unlock User
                        user.Membership.LockedOut = false;
                    }
                    else
                    {
                        loginStatus = UserLoginStatus.LOGIN_USERLOCKEDOUT;
                    }
                }
				
                //Check in a verified situation whether the user is Approved
                if (user.Membership.Approved == false && user.IsSuperUser == false)
                {
					//Check Verification code
                    if (verificationCode == (portalId + "-" + user.UserID))
                    {
						//Approve User
                        user.Membership.Approved = true;

                        //Persist to Data Store
                        UpdateUser(user);
                    }
                    else
                    {
                        loginStatus = UserLoginStatus.LOGIN_USERNOTAPPROVED;
                    }
                }
				
                //Verify User Credentials
                bool bValid = false;
                if (loginStatus != UserLoginStatus.LOGIN_USERLOCKEDOUT && loginStatus != UserLoginStatus.LOGIN_USERNOTAPPROVED)
                {
                    if (authType == "DNN")
                    {
                        if (user.IsSuperUser)
                        {
                            if (ValidateUser(Null.NullInteger, username, password))
                            {
                                loginStatus = UserLoginStatus.LOGIN_SUPERUSER;
                                bValid = true;
                            }
                        }
                        else
                        {
                            if (ValidateUser(portalId, username, password))
                            {
                                loginStatus = UserLoginStatus.LOGIN_SUCCESS;
                                bValid = true;
                            }
                        }
                    }
                    else
                    {
                        if (user.IsSuperUser)
                        {
                            loginStatus = UserLoginStatus.LOGIN_SUPERUSER;
                            bValid = true;
                        }
                        else
                        {
                            loginStatus = UserLoginStatus.LOGIN_SUCCESS;
                            bValid = true;
                        }
                    }
                }
                if (!bValid)
                {
					//Clear the user object
                    user = null;
                }
            }
            else
            {
				//Clear the user object
                user = null;
            }
            return user;
        }]]></body>
          </codeblock>
        </method>
        <method name="ValidateUser">
          <declaration><![CDATA[private bool ValidateUser(int portalId, string username, string password)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 Validates the users credentials against the Data Store
 </summary>
 <remarks>
 </remarks>
 <param name="portalId">The Id of the Portal the user belongs to</param>
 <param name="username">The user name of the User attempting to log in</param>
 <param name="password">The password of the User attempting to log in</param>
 <returns>A Boolean result</returns>
 <history>
     [cnurse]	12/12/2005	created
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="564" sc="9" el="566" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="4fdc7757845612fd0b19d4a204bb404b"><![CDATA[{
            return System.Web.Security.Membership.ValidateUser(username, password);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_dataProvider">
          <declaration><![CDATA[private readonly DotNetNuke.Security.Membership.Data.DataProvider _dataProvider;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="CanEditProviderProperties">
          <declaration><![CDATA[public override bool CanEditProviderProperties]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="90" sc="13" el="92" ec="14">AspNetMembershipProvider.cs</location>
            <body hash="479cced518a49e9e626d5350fca9bbad"><![CDATA[{
                return false;
            }]]></body>
          </codeblock>
        </property>
        <property name="MaxInvalidPasswordAttempts">
          <declaration><![CDATA[public override int MaxInvalidPasswordAttempts]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="98" sc="13" el="100" ec="14">AspNetMembershipProvider.cs</location>
            <body hash="e3431dbcfd66fd7f229364cc7a75388d"><![CDATA[{
                return System.Web.Security.Membership.MaxInvalidPasswordAttempts;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="102" sc="13" el="103" ec="127">AspNetMembershipProvider.cs</location>
            <body hash="e34a0151f6ff7a9c932085e433cf8e63"><![CDATA[{
                throw new NotSupportedException("Provider properties for AspNetMembershipProvider must be set in web.config");]]></body>
          </codeblock>
        </property>
        <property name="MinNonAlphanumericCharacters">
          <declaration><![CDATA[public override int MinNonAlphanumericCharacters]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="110" sc="13" el="112" ec="14">AspNetMembershipProvider.cs</location>
            <body hash="5b4905b9428575a54ea806922363f9a5"><![CDATA[{
                return System.Web.Security.Membership.MinRequiredNonAlphanumericCharacters;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="114" sc="13" el="115" ec="127">AspNetMembershipProvider.cs</location>
            <body hash="e34a0151f6ff7a9c932085e433cf8e63"><![CDATA[{
                throw new NotSupportedException("Provider properties for AspNetMembershipProvider must be set in web.config");]]></body>
          </codeblock>
        </property>
        <property name="MinPasswordLength">
          <declaration><![CDATA[public override int MinPasswordLength]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="122" sc="13" el="124" ec="14">AspNetMembershipProvider.cs</location>
            <body hash="9988477858c5bd99cb8a95536b65656f"><![CDATA[{
                return System.Web.Security.Membership.MinRequiredPasswordLength;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="126" sc="13" el="127" ec="127">AspNetMembershipProvider.cs</location>
            <body hash="e34a0151f6ff7a9c932085e433cf8e63"><![CDATA[{
                throw new NotSupportedException("Provider properties for AspNetMembershipProvider must be set in web.config");]]></body>
          </codeblock>
        </property>
        <property name="PasswordAttemptWindow">
          <declaration><![CDATA[public override int PasswordAttemptWindow]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="134" sc="13" el="136" ec="14">AspNetMembershipProvider.cs</location>
            <body hash="6fa0d3ce182f10e6f2fe7aa028909e9e"><![CDATA[{
                return System.Web.Security.Membership.PasswordAttemptWindow;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="138" sc="13" el="139" ec="127">AspNetMembershipProvider.cs</location>
            <body hash="e34a0151f6ff7a9c932085e433cf8e63"><![CDATA[{
                throw new NotSupportedException("Provider properties for AspNetMembershipProvider must be set in web.config");]]></body>
          </codeblock>
        </property>
        <property name="PasswordFormat">
          <declaration><![CDATA[public override PasswordFormat PasswordFormat]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="146" sc="13" el="156" ec="14">AspNetMembershipProvider.cs</location>
            <body hash="197a5919638e7ae3cc2e164536960512"><![CDATA[{
                switch (System.Web.Security.Membership.Provider.PasswordFormat)
                {
                    case MembershipPasswordFormat.Encrypted:
                        return PasswordFormat.Encrypted;
                    case MembershipPasswordFormat.Hashed:
                        return PasswordFormat.Hashed;
                    default:
                        return PasswordFormat.Clear;
                }
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="158" sc="13" el="159" ec="127">AspNetMembershipProvider.cs</location>
            <body hash="e34a0151f6ff7a9c932085e433cf8e63"><![CDATA[{
                throw new NotSupportedException("Provider properties for AspNetMembershipProvider must be set in web.config");]]></body>
          </codeblock>
        </property>
        <property name="PasswordResetEnabled">
          <declaration><![CDATA[public override bool PasswordResetEnabled]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="166" sc="13" el="168" ec="14">AspNetMembershipProvider.cs</location>
            <body hash="4c816cc0c4e30d521acd0cd6153a0d68"><![CDATA[{
                return System.Web.Security.Membership.EnablePasswordReset;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="170" sc="13" el="171" ec="127">AspNetMembershipProvider.cs</location>
            <body hash="e34a0151f6ff7a9c932085e433cf8e63"><![CDATA[{
                throw new NotSupportedException("Provider properties for AspNetMembershipProvider must be set in web.config");]]></body>
          </codeblock>
        </property>
        <property name="PasswordRetrievalEnabled">
          <declaration><![CDATA[public override bool PasswordRetrievalEnabled]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="178" sc="13" el="180" ec="14">AspNetMembershipProvider.cs</location>
            <body hash="80394f128860adc77147af98996ac06f"><![CDATA[{
                return System.Web.Security.Membership.EnablePasswordRetrieval;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="182" sc="13" el="183" ec="127">AspNetMembershipProvider.cs</location>
            <body hash="e34a0151f6ff7a9c932085e433cf8e63"><![CDATA[{
                throw new NotSupportedException("Provider properties for AspNetMembershipProvider must be set in web.config");]]></body>
          </codeblock>
        </property>
        <property name="PasswordStrengthRegularExpression">
          <declaration><![CDATA[public override string PasswordStrengthRegularExpression]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="202" sc="13" el="204" ec="14">AspNetMembershipProvider.cs</location>
            <body hash="23ab89dde896acf81129095bca5f6a00"><![CDATA[{
                return System.Web.Security.Membership.PasswordStrengthRegularExpression;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="206" sc="13" el="207" ec="127">AspNetMembershipProvider.cs</location>
            <body hash="e34a0151f6ff7a9c932085e433cf8e63"><![CDATA[{
                throw new NotSupportedException("Provider properties for AspNetMembershipProvider must be set in web.config");]]></body>
          </codeblock>
        </property>
        <property name="RequiresQuestionAndAnswer">
          <declaration><![CDATA[public override bool RequiresQuestionAndAnswer]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="190" sc="13" el="192" ec="14">AspNetMembershipProvider.cs</location>
            <body hash="4fcaef82aa4476a007bb75f7036d374b"><![CDATA[{
                return System.Web.Security.Membership.RequiresQuestionAndAnswer;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="194" sc="13" el="195" ec="127">AspNetMembershipProvider.cs</location>
            <body hash="e34a0151f6ff7a9c932085e433cf8e63"><![CDATA[{
                throw new NotSupportedException("Provider properties for AspNetMembershipProvider must be set in web.config");]]></body>
          </codeblock>
        </property>
        <property name="RequiresUniqueEmail">
          <declaration><![CDATA[public override bool RequiresUniqueEmail]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="214" sc="13" el="216" ec="14">AspNetMembershipProvider.cs</location>
            <body hash="bd7908565370533d2ce264e5c7f6961b"><![CDATA[{
                return System.Web.Security.Membership.Provider.RequiresUniqueEmail;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="218" sc="13" el="219" ec="127">AspNetMembershipProvider.cs</location>
            <body hash="e34a0151f6ff7a9c932085e433cf8e63"><![CDATA[{
                throw new NotSupportedException("Provider properties for AspNetMembershipProvider must be set in web.config");]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
</root>