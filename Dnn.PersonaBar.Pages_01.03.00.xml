<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<root file="Dnn.PersonaBar.Pages.dll" version="01.03.00" generated="2017-08-10 13:08:28Z" generationTime="9.9353944">
  <namespace name="Dnn.PersonaBar.Pages.Components">
    <class name="BulkPagesController">
      <declaration><![CDATA[public class BulkPagesController : ServiceLocator<IBulkPagesController, BulkPagesController>, IBulkPagesController]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public BulkPagesController()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
        <constructor name=".cctor">
          <declaration><![CDATA[static BulkPagesController()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="22" sc="9" el="22" ec="97">Components\BulkPagesController.cs</location>
            <body hash="1793bcad89e5122140100c0fcf9e8d80"><![CDATA[private static readonly Regex TabNameRegex = new Regex(">*(.*)", RegexOptions.Compiled)]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="AddBulkPages">
          <declaration><![CDATA[public BulkPageResponse AddBulkPages(BulkPage page)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="26" sc="9" el="96" ec="10">Components\BulkPagesController.cs</location>
            <body hash="33003a1922a0e52a49844b32546f7ece"><![CDATA[{
            var portalSettings = PortalController.Instance.GetCurrentPortalSettings();
            var portalId = portalSettings.PortalId;
            var response = new BulkPageResponse();
            var parentId = page.ParentId;
            var rootTab = TabController.Instance.GetTab(parentId, portalId, true);

            var strValue = page.BulkPages;
            strValue = strValue.Replace("\r", "\n").Replace("\n\n", "\n").Trim();

            string invalidType;
            if (!TabController.IsValidTabName(strValue, out invalidType))
            {
                throw new BulkPagesException("bulkPages", string.Format(Localization.GetString(invalidType), strValue));
            }

            if (page.StartDate.HasValue && page.EndDate.HasValue && page.StartDate > page.EndDate)
            {
                throw new BulkPagesException("endDate", Localization.GetString("StartDateAfterEndDate"));
            }

            var pages = strValue.Split('\n');
            var tabs = new List<TabInfo>();

            foreach (var strLine in pages)
            {
                var tab = new TabInfo
                    {
                        TabName = TabNameRegex.Replace(strLine, "${1}"),
                        Level = strLine.LastIndexOf(">", StringComparison.Ordinal) + 1,
                        KeyWords = page.Keywords,
                        StartDate = page.StartDate ?? Null.NullDate,
                        EndDate = page.EndDate ?? Null.NullDate,
                        IsVisible = page.IncludeInMenu
                };
                tab.Terms.AddRange(TermHelper.ToTabTerms(page.Tags, portalId));
                tabs.Add(tab);
            }

            var currentIndex = -1;
            var bulkPageItems = new List<BulkPageResponseItem>();
            foreach (var oTab in tabs)
            {
                currentIndex += 1;

                try
                {
                    string errorMessage = null;
                    if (oTab.Level == 0)
                    {
                        oTab.TabID = CreateTabFromParent(rootTab, oTab, parentId, out errorMessage);
                    }
                    else
                    {
                        var parentTabId = GetParentTabId(tabs, currentIndex, oTab.Level - 1);
                        if (parentTabId != Null.NullInteger)
                        {
                            oTab.TabID = CreateTabFromParent(rootTab, oTab, parentTabId, out errorMessage);
                        }
                    }
                    bulkPageItems.Add(ToBulkPageResponseItem(oTab, errorMessage));
                }
                catch (Exception ex)
                {
                    throw new DotNetNukeException("Unable to process page.", ex, DotNetNukeErrorCode.DeserializePanesFailed);
                }
            }
            response.Pages = bulkPageItems;

            return response;
        }]]></body>
          </codeblock>
        </method>
        <method name="ApplyDefaultTabTemplate">
          <declaration><![CDATA[private void ApplyDefaultTabTemplate(TabInfo tab)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="250" sc="9" el="269" ec="10">Components\BulkPagesController.cs</location>
            <body hash="8394388dab65bfb60fac368a9f510ad8"><![CDATA[{
            var portalSettings = PortalController.Instance.GetCurrentPortalSettings();
            var templateFile = Path.Combine(portalSettings.HomeDirectoryMapPath, "Templates\\" + DefaultPageTemplate);

            if (!File.Exists(templateFile))
            {
                return;
            }

            var xmlDoc = new XmlDocument();
            try
            {
                xmlDoc.Load(templateFile);
                TabController.DeserializePanes(xmlDoc.SelectSingleNode("//portal/tabs/tab/panes"), tab.PortalID, tab.TabID, PortalTemplateModuleAction.Ignore, new Hashtable());
            }
            catch (Exception ex)
            {
                throw new DotNetNukeException("Unable to process page template.", ex, DotNetNukeErrorCode.DeserializePanesFailed);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="CreateTabFromParent">
          <declaration><![CDATA[private int CreateTabFromParent(TabInfo objRoot, TabInfo oTab, int parentId, out string errorMessage)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="110" sc="9" el="228" ec="10">Components\BulkPagesController.cs</location>
            <body hash="1de2521eb2b8e07a22def41067cc2251"><![CDATA[{
            var portalSettings = PortalController.Instance.GetCurrentPortalSettings();
            var tab = new TabInfo
            {
                PortalID = portalSettings.PortalId,
                TabName = oTab.TabName,
                ParentId = parentId,
                Title = "",
                Description = "",
                KeyWords = oTab.KeyWords,
                IsVisible = oTab.IsVisible,
                DisableLink = false,
                IconFile = "",
                IconFileLarge = "",
                IsDeleted = false,
                Url = "",
                SkinSrc = "",
                ContainerSrc = "",
                CultureCode = Null.NullString,
                StartDate = oTab.StartDate,
                EndDate = oTab.EndDate
            };

            tab.Terms.AddRange(oTab.Terms);

            if (objRoot != null)
            {
                // TODO: To be retrieved once the parent tab  is selected?
                //tab.IsVisible = objRoot.IsVisible;
                tab.DisableLink = objRoot.DisableLink;
                tab.SkinSrc = objRoot.SkinSrc;
                tab.ContainerSrc = objRoot.ContainerSrc;
            }

            if (portalSettings.ContentLocalizationEnabled)
            {
                tab.CultureCode = LocaleController.Instance.GetDefaultLocale(tab.PortalID).Code;
            }

            var parentTab = TabController.Instance.GetTab(parentId, -1, false);

            if (parentTab != null)
            {
                tab.PortalID = parentTab.PortalID;
                tab.ParentId = parentTab.TabID;
            }
            else
            {
                //return Null.NullInteger;
                tab.PortalID = portalSettings.PortalId;
                tab.ParentId = Null.NullInteger;
            }

            tab.TabPath = Globals.GenerateTabPath(tab.ParentId, tab.TabName);

            //Check for invalid
            string invalidType;
            if (!TabController.IsValidTabName(tab.TabName, out invalidType))
            {
                errorMessage = string.Format(Localization.GetString(invalidType), tab.TabName);
                return Null.NullInteger;
            }

            //Validate Tab Path
            if (!IsValidTabPath(tab, tab.TabPath, out errorMessage))
            {
                return Null.NullInteger;
            }

            //Inherit permissions from parent
            tab.TabPermissions.Clear();
            if (tab.PortalID != Null.NullInteger && objRoot != null)
            {
                tab.TabPermissions.AddRange(objRoot.TabPermissions);
            }
            else if (tab.PortalID != Null.NullInteger)
            {
                //Give admin full permission
                ArrayList permissions = PermissionController.GetPermissionsByTab();

                foreach (PermissionInfo permission in permissions)
                {
                    var newTabPermission = new TabPermissionInfo
                    {
                        PermissionID = permission.PermissionID,
                        PermissionKey = permission.PermissionKey,
                        PermissionName = permission.PermissionName,
                        AllowAccess = true,
                        RoleID = portalSettings.AdministratorRoleId
                    };
                    tab.TabPermissions.Add(newTabPermission);
                }
            }

            //Inherit other information from Parent
            if (objRoot != null)
            {
                // TODO: To be retrieved once the parent tab  is selected?
                //tab.Terms.Clear();
                //tab.StartDate = objRoot.StartDate;
                //tab.EndDate = objRoot.EndDate;
                tab.RefreshInterval = objRoot.RefreshInterval;
                tab.SiteMapPriority = objRoot.SiteMapPriority;
                tab.PageHeadText = objRoot.PageHeadText;
                tab.IsSecure = objRoot.IsSecure;
                tab.PermanentRedirect = objRoot.PermanentRedirect;
            }

            tab.TabID = TabController.Instance.AddTab(tab);
            ApplyDefaultTabTemplate(tab);

            //create localized tabs if content localization is enabled
            if (portalSettings.ContentLocalizationEnabled)
            {
                TabController.Instance.CreateLocalizedCopies(tab);
            }

            return tab.TabID;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetFactory">
          <declaration><![CDATA[protected override Func<IBulkPagesController> GetFactory()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="308" sc="9" el="310" ec="10">Components\BulkPagesController.cs</location>
            <body hash="31a90c7926ced0681f4703bc033a2e76"><![CDATA[{
            return () => new BulkPagesController();
        }]]></body>
          </codeblock>
        </method>
        <method name="GetParentTabId">
          <declaration><![CDATA[private static int GetParentTabId(List<TabInfo> lstTabs, int currentIndex, int parentLevel)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="231" sc="9" el="247" ec="10">Components\BulkPagesController.cs</location>
            <body hash="9765ea9ed0b2aacbf58948e4658aa467"><![CDATA[{
            var oParent = lstTabs[0];

            for (var i = 0; i < lstTabs.Count; i++)
            {
                if (i == currentIndex)
                {
                    return oParent.TabID;
                }
                if (lstTabs[i].Level == parentLevel)
                {
                    oParent = lstTabs[i];
                }
            }

            return Null.NullInteger;
        }]]></body>
          </codeblock>
        </method>
        <method name="IsValidTabPath">
          <declaration><![CDATA[private bool IsValidTabPath(TabInfo tab, string newTabPath, out string errorMessage)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="272" sc="9" el="305" ec="10">Components\BulkPagesController.cs</location>
            <body hash="395220a4aabc9b46e05fcab7790597b2"><![CDATA[{
            var valid = true;
            errorMessage = null;

            //get default culture if the tab's culture is null
            var cultureCode = tab.CultureCode;
            if (string.IsNullOrEmpty(cultureCode))
            {
                var portalSettings = PortalController.Instance.GetCurrentPortalSettings();
                cultureCode = portalSettings.DefaultLanguage;
            }

            //Validate Tab Path
            var tabId = TabController.GetTabByTabPath(tab.PortalID, newTabPath, cultureCode);
            if (tabId != Null.NullInteger && tabId != tab.TabID)
            {
                var existingTab = TabController.Instance.GetTab(tabId, tab.PortalID, false);
                if (existingTab != null && existingTab.IsDeleted)
                    errorMessage = Localization.GetString("TabRecycled");
                else
                    errorMessage = Localization.GetString("TabExists");

                valid = false;
            }

            //check whether have conflict between tab path and portal alias.
            if (TabController.IsDuplicateWithPortalAlias(tab.PortalID, newTabPath))
            {
                errorMessage = Localization.GetString("PathDuplicateWithAlias");
                valid = false;
            }

            return valid;
        }]]></body>
          </codeblock>
        </method>
        <method name="ToBulkPageResponseItem">
          <declaration><![CDATA[private static BulkPageResponseItem ToBulkPageResponseItem(TabInfo tab, string error)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="99" sc="9" el="107" ec="10">Components\BulkPagesController.cs</location>
            <body hash="cfc992c3e79573719504b424a2d21b76"><![CDATA[{
            return new BulkPageResponseItem
            {
                TabId = tab.TabID,
                ErrorMessage = error,
                Status = (error == null && tab.TabID > 0) ? 0 : 1,
                PageName = tab.TabName
            };
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="DefaultPageTemplate">
          <declaration><![CDATA[private const string DefaultPageTemplate = "Default.page.template";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="TabNameRegex">
          <declaration><![CDATA[private static readonly Regex TabNameRegex = new Regex(">*(.*)", RegexOptions.Compiled);]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="Converters">
      <declaration><![CDATA[public static class Converters]]></declaration>
      <documentation>
      </documentation>
      <constructors>
      </constructors>
      <methods>
        <method name="AllowIndex">
          <declaration><![CDATA[private static bool AllowIndex(TabInfo tab)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="175" sc="9" el="178" ec="10">Components\Converters.cs</location>
            <body hash="b04da5f78eb2aad4908f66f9509fe93a"><![CDATA[{
            bool allowIndex;
            return !tab.TabSettings.ContainsKey("AllowIndex") || !bool.TryParse(tab.TabSettings["AllowIndex"].ToString(), out allowIndex) || allowIndex;
        }]]></body>
          </codeblock>
        </method>
        <method name="CacheDuration">
          <declaration><![CDATA[private static int? CacheDuration(TabInfo tab)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="139" sc="9" el="149" ec="10">Components\Converters.cs</location>
            <body hash="b5b5f9883299abe68236c95dede94eba"><![CDATA[{
            int i;
            var duration = (int?)null;

            if (tab.TabSettings["CacheDuration"] != null && int.TryParse((string) tab.TabSettings["CacheDuration"], out i))
            {
                duration = i;
            }

            return duration;
        }]]></body>
          </codeblock>
        </method>
        <method name="CacheIncludeExclude">
          <declaration><![CDATA[private static bool? CacheIncludeExclude(TabInfo tab)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="152" sc="9" el="154" ec="10">Components\Converters.cs</location>
            <body hash="45b0dc03a25751b47b2cbb74fdd41e4a"><![CDATA[{
            return tab.TabSettings["CacheIncludeExclude"] != null ? (string)tab.TabSettings["CacheIncludeExclude"] == "1" : (bool?)null;
        }]]></body>
          </codeblock>
        </method>
        <method name="ConvertToModuleItem">
          <declaration><![CDATA[public static ModuleItem ConvertToModuleItem(ModuleInfo module)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="34" sc="76" el="40" ec="10">Components\Converters.cs</location>
            <body hash="7a85ed036743615a1e4b146938f9a10a"><![CDATA[new ModuleItem
        {
            Id = module.ModuleID,
            Title = module.ModuleTitle,
            FriendlyName = module.DesktopModule.FriendlyName,
            EditSettingUrl = GetModuleEditSettingUrl(module)
        }]]></body>
          </codeblock>
        </method>
        <method name="ConvertToPageItem">
          <declaration><![CDATA[public static T ConvertToPageItem<T>(TabInfo tab, IEnumerable<TabInfo> portalTabs) where T : PageItem, new()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="18" sc="9" el="32" ec="10">Components\Converters.cs</location>
            <body hash="258c80069b50a83cdc36fcca9879d791"><![CDATA[{
            return new T
            {
                Id = tab.TabID,
                Name = tab.LocalizedTabName,
                Url = tab.FullUrl,
                ChildrenCount = portalTabs?.Count(ct => ct.ParentId == tab.TabID) ?? 0,
                Status = GetTabStatus(tab),
                ParentId = tab.ParentId,
                Level = tab.Level,
                IsSpecial = TabController.IsSpecialTab(tab.TabID, PortalSettings.Current),
                TabPath = tab.TabPath.Replace("//", "/"),
                PageType = GetPageType(tab.Url)
        };
        }]]></body>
          </codeblock>
        </method>
        <method name="ConvertToPageSettings">
          <declaration><![CDATA[public static T ConvertToPageSettings<T>(TabInfo tab) where T : PageSettings, new()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="48" sc="9" el="110" ec="10">Components\Converters.cs</location>
            <body hash="020900d77d0124084e427d6ee1f83173"><![CDATA[{
            if (tab == null)
            {
                return null;
            }

            var pageManagementController = PageManagementController.Instance;

            var description = !string.IsNullOrEmpty(tab.Description) ? tab.Description : PortalSettings.Current.Description;
            var keywords = !string.IsNullOrEmpty(tab.KeyWords) ? tab.KeyWords : PortalSettings.Current.KeyWords;
            var pageType = GetPageType(tab.Url);
            
            var file = GetFileRedirection(tab.Url);
            var fileId = file?.FileId;
            var fileUrl = file?.Folder;
            var fileName = file?.FileName;

            return new T
            {
                TabId = tab.TabID,
                Name = tab.TabName,
                AbsoluteUrl = tab.FullUrl,
                LocalizedName = tab.LocalizedTabName,
                Title = tab.Title,
                Description = description,
                Keywords = keywords,
                Tags = string.Join(",", from t in tab.Terms select t.Name),
                Alias = PortalSettings.Current.PortalAlias.HTTPAlias,
                Url = pageManagementController.GetTabUrl(tab),
                ExternalRedirection = pageType == "url" ? tab.Url : null,
                FileIdRedirection = pageType == "file" ? fileId : null,
                FileFolderPathRedirection = pageType == "file" ? fileUrl : null,
                FileNameRedirection = pageType == "file" ? fileName : null,
                ExistingTabRedirection = pageType == "tab" ? tab.Url : null,
                Created = pageManagementController.GetCreatedInfo(tab),
                Hierarchy = pageManagementController.GetTabHierarchy(tab),
                Status = GetTabStatus(tab),
                PageType = pageType,
                CreatedOnDate = tab.CreatedOnDate,
                IncludeInMenu = tab.IsVisible,
                DisableLink = tab.DisableLink,
                CustomUrlEnabled = !tab.IsSuperTab && (Config.GetFriendlyUrlProvider() == "advanced"),
                StartDate = tab.StartDate != Null.NullDate ? tab.StartDate : (DateTime?) null,
                EndDate = tab.EndDate != Null.NullDate ? tab.EndDate : (DateTime?) null,
                IsSecure = tab.IsSecure,
                AllowIndex = AllowIndex(tab),
                CacheProvider = (string)tab.TabSettings["CacheProvider"],
                CacheDuration = CacheDuration(tab),
                CacheIncludeExclude = CacheIncludeExclude(tab),
                CacheIncludeVaryBy = (string)tab.TabSettings["IncludeVaryBy"],
                CacheExcludeVaryBy = (string)tab.TabSettings["ExcludeVaryBy"],
                CacheMaxVaryByCount = MaxVaryByCount(tab),
                PageHeadText = tab.PageHeadText,
                SiteMapPriority = tab.SiteMapPriority,
                PermanentRedirect = tab.PermanentRedirect,
                LinkNewWindow = LinkNewWindow(tab),
                PageStyleSheet = (string)tab.TabSettings["CustomStylesheet"],
                ThemeName = GetThemeNameFromSkinSrc(tab.SkinSrc),
                SkinSrc = tab.SkinSrc,
                ContainerSrc = tab.ContainerSrc,
                HasChild = pageManagementController.TabHasChildren(tab)
            };
        }]]></body>
          </codeblock>
        </method>
        <method name="GetFileRedirection">
          <declaration><![CDATA[private static IFileInfo GetFileRedirection(string tabUrl)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="124" sc="9" el="136" ec="10">Components\Converters.cs</location>
            <body hash="efba42c100f23f2cfac81af848bda0ed"><![CDATA[{
            if (tabUrl == null || !tabUrl.StartsWith("FileId="))
            {
                return null;
            }

            int fileRedirectionId;
            if (int.TryParse(tabUrl.Substring(7), out fileRedirectionId))
            {
                return FileManager.Instance.GetFile(fileRedirectionId);
            }
            return null;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetModuleEditSettingUrl">
          <declaration><![CDATA[private static string GetModuleEditSettingUrl(ModuleInfo module)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="43" sc="9" el="45" ec="10">Components\Converters.cs</location>
            <body hash="a8859838c89c96837ebc92e57222f9ad"><![CDATA[{
            return Globals.NavigateURL(module.TabID, PortalSettings.Current, "Module", "ModuleId=" + module.ModuleID);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPageType">
          <declaration><![CDATA[private static string GetPageType(string tabUrl)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="181" sc="9" el="183" ec="10">Components\Converters.cs</location>
            <body hash="49d923ed6e5689520321ce6cffc7fe92"><![CDATA[{
            return Globals.GetURLType(tabUrl).ToString().ToLower();
        }]]></body>
          </codeblock>
        </method>
        <method name="GetTabStatus">
          <declaration><![CDATA[private static string GetTabStatus(TabInfo tab)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="187" sc="9" el="194" ec="10">Components\Converters.cs</location>
            <body hash="4dcbd9c76ad5ef00ba181d6d48ec9124"><![CDATA[{
            if (tab.DisableLink)
            {
                return "Disabled";
            }

            return tab.IsVisible ? "Visible" : "Hidden";
        }]]></body>
          </codeblock>
        </method>
        <method name="GetThemeNameFromSkinSrc">
          <declaration><![CDATA[private static string GetThemeNameFromSkinSrc(string skinSrc)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="113" sc="9" el="121" ec="10">Components\Converters.cs</location>
            <body hash="6a4fcb61247c980ffc1245e5ae6675e7"><![CDATA[{
            if (string.IsNullOrWhiteSpace(skinSrc))
            {
                return null;
            }
            var themeController = ThemesController.Instance;
            var layout = themeController.GetThemeFile(PortalSettings.Current, skinSrc, ThemeType.Skin);
            return layout?.ThemeName;
        }]]></body>
          </codeblock>
        </method>
        <method name="LinkNewWindow">
          <declaration><![CDATA[private static bool LinkNewWindow(TabInfo tab)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="157" sc="9" el="159" ec="10">Components\Converters.cs</location>
            <body hash="16128b6213ed87cdbbdf4042dce46e78"><![CDATA[{
            return tab.TabSettings["LinkNewWindow"] != null && (string)tab.TabSettings["LinkNewWindow"] == "True";
        }]]></body>
          </codeblock>
        </method>
        <method name="MaxVaryByCount">
          <declaration><![CDATA[private static int? MaxVaryByCount(TabInfo tab)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="162" sc="9" el="172" ec="10">Components\Converters.cs</location>
            <body hash="e779d68ae36b8772bb4a9093a3930bee"><![CDATA[{
            int i;
            var maxVaryBy = (int?)null;

            if (tab.TabSettings["MaxVaryByCount"] != null && int.TryParse((string)tab.TabSettings["MaxVaryByCount"], out i))
            {
                maxVaryBy = i;
            }

            return maxVaryBy;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DefaultPortalThemeController">
      <declaration><![CDATA[public class DefaultPortalThemeController : ServiceLocator<IDefaultPortalThemeController, DefaultPortalThemeController>, IDefaultPortalThemeController]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DefaultPortalThemeController()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="GetDefaultPortalContainer">
          <declaration><![CDATA[public string GetDefaultPortalContainer()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="11" sc="9" el="15" ec="10">Components\DefaultPortalThemeController.cs</location>
            <body hash="369fce96a5742f51ad0e98f83205a506"><![CDATA[{
            var portalSettings = PortalSettings.Current;
            if (portalSettings == null) return null;
            return PortalController.GetPortalSetting("DefaultPortalContainer", portalSettings.PortalId, Host.DefaultPortalSkin, portalSettings.CultureCode);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetDefaultPortalLayout">
          <declaration><![CDATA[public string GetDefaultPortalLayout()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="18" sc="9" el="22" ec="10">Components\DefaultPortalThemeController.cs</location>
            <body hash="b67f54b362898aa698774e139a09e0f3"><![CDATA[{
            var portalSettings = PortalSettings.Current;
            if (portalSettings == null) return null;
            return PortalController.GetPortalSetting("DefaultPortalSkin", portalSettings.PortalId, Host.DefaultPortalSkin, portalSettings.CultureCode);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetFactory">
          <declaration><![CDATA[protected override Func<IDefaultPortalThemeController> GetFactory()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="25" sc="9" el="27" ec="10">Components\DefaultPortalThemeController.cs</location>
            <body hash="4816de47dfde77478e2270a9a6699d55"><![CDATA[{
            return () => new DefaultPortalThemeController();
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="IBulkPagesController">
      <declaration><![CDATA[public interface IBulkPagesController]]></declaration>
      <documentation>
      </documentation>
      <constructors>
      </constructors>
      <methods>
        <method name="AddBulkPages">
          <declaration><![CDATA[BulkPageResponse AddBulkPages(BulkPage page);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="IDefaultPortalThemeController">
      <declaration><![CDATA[public interface IDefaultPortalThemeController]]></declaration>
      <documentation>
        <summary>
 Theme controller
 </summary>
      </documentation>
      <constructors>
      </constructors>
      <methods>
        <method name="GetDefaultPortalContainer">
          <declaration><![CDATA[string GetDefaultPortalContainer();]]></declaration>
          <documentation>
            <summary>
 Returns the default current portal container
 </summary>
 <returns></returns></documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="GetDefaultPortalLayout">
          <declaration><![CDATA[string GetDefaultPortalLayout();]]></declaration>
          <documentation>
            <summary>
 Returns the default current portal layout
 </summary>
 <returns></returns></documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="IPageManagementController">
      <declaration><![CDATA[public interface IPageManagementController]]></declaration>
      <documentation>
      </documentation>
      <constructors>
      </constructors>
      <methods>
        <method name="GetCreatedInfo">
          <declaration><![CDATA[string GetCreatedInfo(TabInfo tab);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="GetTabHierarchy">
          <declaration><![CDATA[string GetTabHierarchy(TabInfo tab);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="GetTabUrl">
          <declaration><![CDATA[string GetTabUrl(TabInfo tab);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="TabHasChildren">
          <declaration><![CDATA[bool TabHasChildren(TabInfo tabInfo);]]></declaration>
          <documentation>
            <summary>
 Returns true if tab has children, false otherwise
 </summary>
 <param name="tabInfo">Tab info object</param>
 <returns>Returns true if tab has children, false otherwise</returns></documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="IPagesController">
      <declaration><![CDATA[public interface IPagesController]]></declaration>
      <documentation>
      </documentation>
      <constructors>
      </constructors>
      <methods>
        <method name="CleanTabUrl">
          <declaration><![CDATA[string CleanTabUrl(string url);]]></declaration>
          <documentation>
            <summary>
 Returns a clean tab relative url based on Advanced Management Url settings
 </summary>
 <param name="url">Url not cleaned, this could containes blank space or invalid characters</param>
 <returns>Cleaned Url</returns></documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="CopyPermissionsToDescendantPages">
          <declaration><![CDATA[void CopyPermissionsToDescendantPages(int pageId);]]></declaration>
          <documentation>
            <summary>
 Copy the current page permissions to all descendant pages
 </summary>
 <param name="pageId">page identifier</param></documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="CopyThemeToDescendantPages">
          <declaration><![CDATA[void CopyThemeToDescendantPages(int pageId, Theme theme);]]></declaration>
          <documentation>
            <summary>
 Copy the given theme to all descendant pages
 </summary>
 <param name="pageId">page identifier</param>
 <param name="theme">Theme</param></documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="CreateCustomUrl">
          <declaration><![CDATA[PageUrlResult CreateCustomUrl(SeoUrl dto);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="DeleteCustomUrl">
          <declaration><![CDATA[PageUrlResult DeleteCustomUrl(UrlIdDto dto);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="DeletePage">
          <declaration><![CDATA[void DeletePage(PageItem page);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="DeleteTabModule">
          <declaration><![CDATA[void DeleteTabModule(int pageId, int moduleId);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="EditModeForPage">
          <declaration><![CDATA[void EditModeForPage(int pageId, int userId);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="GetDefaultSettings">
          <declaration><![CDATA[PageSettings GetDefaultSettings();]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="GetModules">
          <declaration><![CDATA[IEnumerable<ModuleInfo> GetModules(int pageId);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="GetPageHierarchy">
          <declaration><![CDATA[List<int> GetPageHierarchy(int pageId);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="GetPageList">
          <declaration><![CDATA[IEnumerable<TabInfo> GetPageList(int parentId = -1, string searchKey = "");]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="GetPageSettings">
          <declaration><![CDATA[PageSettings GetPageSettings(int pageId);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="GetPageUrls">
          <declaration><![CDATA[IEnumerable<Url> GetPageUrls(int tabId);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="GetPermissionsData">
          <declaration><![CDATA[PagePermissions GetPermissionsData(int pageId);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="IsValidTabPath">
          <declaration><![CDATA[bool IsValidTabPath(TabInfo tab, string newTabPath, out string errorMessage);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="MovePage">
          <declaration><![CDATA[TabInfo MovePage(PageMoveRequest request);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="SavePageDetails">
          <declaration><![CDATA[TabInfo SavePageDetails(PageSettings pageSettings);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="UpdateCustomUrl">
          <declaration><![CDATA[PageUrlResult UpdateCustomUrl(SeoUrl dto);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="IPageUrlsController">
      <declaration><![CDATA[public interface IPageUrlsController]]></declaration>
      <documentation>
      </documentation>
      <constructors>
      </constructors>
      <methods>
        <method name="CreateCustomUrl">
          <declaration><![CDATA[PageUrlResult CreateCustomUrl(SaveUrlDto dto, TabInfo tab);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="DeleteCustomUrl">
          <declaration><![CDATA[PageUrlResult DeleteCustomUrl(int id, TabInfo tab);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="GetPageUrls">
          <declaration><![CDATA[IEnumerable<Url> GetPageUrls(TabInfo tab, int portalId);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="UpdateCustomUrl">
          <declaration><![CDATA[PageUrlResult UpdateCustomUrl(SaveUrlDto dto, TabInfo tab);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="ITemplateController">
      <declaration><![CDATA[public interface ITemplateController]]></declaration>
      <documentation>
      </documentation>
      <constructors>
      </constructors>
      <methods>
        <method name="CreatePageFromTemplate">
          <declaration><![CDATA[void CreatePageFromTemplate(int templateId, TabInfo tab, int portalId);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="GetDefaultTemplateId">
          <declaration><![CDATA[int GetDefaultTemplateId(IEnumerable<Template> templates);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="GetTemplates">
          <declaration><![CDATA[IEnumerable<Template> GetTemplates();]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="SaveAsTemplate">
          <declaration><![CDATA[string SaveAsTemplate(PageTemplate template);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="Localization">
      <declaration><![CDATA[public class Localization]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public Localization()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="GetString">
          <declaration><![CDATA[public static string GetString(string key)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="11" sc="9" el="13" ec="10">Components\Localization.cs</location>
            <body hash="307ace03196200e4ac6cfcf3c379bae9"><![CDATA[{
            return DotNetNuke.Services.Localization.Localization.GetString(key, LocalResourcesFile);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="LocalResourcesFile">
          <declaration><![CDATA[private static string LocalResourcesFile]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="8" sc="53" el="8" ec="150">Components\Localization.cs</location>
            <body hash="55b5e8fa73688d45a9867c928bb4815c"><![CDATA[Path.Combine(Constants.PersonaBarRelativePath, "Modules/Dnn.Pages/App_LocalResources/Pages.resx"]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="PageManagementController">
      <declaration><![CDATA[public class PageManagementController : ServiceLocator<IPageManagementController, PageManagementController>, IPageManagementController]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public PageManagementController()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="38" sc="9" el="41" ec="10">Components\PageManagementController.cs</location>
            <body hash="ea7ed6936c790cbf18e8beca9b47673c"><![CDATA[public PageManagementController()
        {
            _tabController = TabController.Instance;
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".cctor">
          <declaration><![CDATA[static PageManagementController()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="35" sc="9" el="35" ec="73">Components\PageManagementController.cs</location>
            <body hash="870c822ec391a31b91773a4812e9f65b"><![CDATA[public static string PageDateTimeFormat = "yyyy-MM-dd hh:mm tt"]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="GetCreatedInfo">
          <declaration><![CDATA[public string GetCreatedInfo(TabInfo tab)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="47" sc="9" el="56" ec="10">Components\PageManagementController.cs</location>
            <body hash="b3fa433cd0387812a00a60fcf195d56d"><![CDATA[{
            var createdBy = tab.CreatedByUser(PortalSettings.Current.PortalId);
            var displayName = Localization.GetString("System");
            if (createdBy != null)
            {
                displayName = createdBy.DisplayName;
            }

            return displayName;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetFactory">
          <declaration><![CDATA[protected override Func<IPageManagementController> GetFactory()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="109" sc="9" el="111" ec="10">Components\PageManagementController.cs</location>
            <body hash="b57ee0c59d5aa24427e8c337bb857b35"><![CDATA[{
            return () => new PageManagementController();
        }]]></body>
          </codeblock>
        </method>
        <method name="GetTabHierarchy">
          <declaration><![CDATA[public string GetTabHierarchy(TabInfo tab)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="65" sc="9" el="68" ec="10">Components\PageManagementController.cs</location>
            <body hash="282112222285f159cf73016fa963b634"><![CDATA[{
            _tabController.PopulateBreadCrumbs(ref tab);
            return tab.BreadCrumbs.Count == 1 ? string.Empty : string.Join(" > ", from t in tab.BreadCrumbs.Cast<TabInfo>().Take(tab.BreadCrumbs.Count - 1) select t.LocalizedTabName);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetTabUrl">
          <declaration><![CDATA[public string GetTabUrl(TabInfo tab)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="71" sc="9" el="105" ec="10">Components\PageManagementController.cs</location>
            <body hash="38d5cfb85998c07d4fb92fabf60b4d08"><![CDATA[{
            var url = string.Empty;

            if (tab.IsSuperTab || (Config.GetFriendlyUrlProvider() != "advanced"))
            {
                return url;
            }

            if (tab.TabUrls.Count > 0)
            {
                var tabUrl = tab.TabUrls.SingleOrDefault(t => t.IsSystem && t.HttpStatus == "200" && t.SeqNum == 0);

                if (tabUrl != null)
                {
                    url = tabUrl.Url;
                }
            }

            if (string.IsNullOrEmpty(url) && tab.TabID > -1 && !tab.IsSuperTab)
            {
                var friendlyUrlSettings = new FriendlyUrlSettings(PortalSettings.Current.PortalId);
                var baseUrl = Globals.AddHTTP(PortalSettings.Current.PortalAlias.HTTPAlias) + "/Default.aspx?TabId=" + tab.TabID;
                var path = AdvancedFriendlyUrlProvider.ImprovedFriendlyUrl(tab,
                                                                            baseUrl,
                                                                            Globals.glbDefaultPage,
                                                                            PortalSettings.Current.PortalAlias.HTTPAlias,
                                                                            false, //dnndev-27493 :we want any custom Urls that apply
                                                                            friendlyUrlSettings,
                                                                            Guid.Empty);

                url = path.Replace(Globals.AddHTTP(PortalSettings.Current.PortalAlias.HTTPAlias), "");
            }

            return url;
        }]]></body>
          </codeblock>
        </method>
        <method name="TabHasChildren">
          <declaration><![CDATA[public bool TabHasChildren(TabInfo tabInfo)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="59" sc="9" el="62" ec="10">Components\PageManagementController.cs</location>
            <body hash="4e2803b50f8513110ea02df42b1f5f3e"><![CDATA[{
            var children = TabController.GetTabsByParent(tabInfo.TabID, tabInfo.PortalID);
            return children != null && children.Count >= 1;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_tabController">
          <declaration><![CDATA[private readonly ITabController _tabController;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="PageDateTimeFormat">
          <declaration><![CDATA[public static string PageDateTimeFormat = "yyyy-MM-dd hh:mm tt";]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="PagesController">
      <declaration><![CDATA[public class PagesController : ServiceLocator<IPagesController, PagesController>]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public PagesController()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="GetFactory">
          <declaration><![CDATA[protected override Func<IPagesController> GetFactory()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="30" sc="9" el="32" ec="10">Components\PagesController.cs</location>
            <body hash="7a64f7070f1f166074cf8c15ef7d50fe"><![CDATA[{
            return () => new PagesControllerImpl();
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="PagesControllerImpl">
      <declaration><![CDATA[public class PagesControllerImpl : IPagesController]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public PagesControllerImpl()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="62" sc="9" el="69" ec="10">Components\PagesControllerImpl.cs</location>
            <body hash="f9d29e869f77e22f068a5e7f382e1aa2"><![CDATA[public PagesControllerImpl()
        {
            _tabController = TabController.Instance;
            _moduleController = ModuleController.Instance;
            _pageUrlsController = PageUrlsController.Instance;
            _templateController = TemplateController.Instance;
            _defaultPortalThemeController = DefaultPortalThemeController.Instance;
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".cctor">
          <declaration><![CDATA[static PagesControllerImpl()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="60" sc="9" el="60" ec="104">Components\PagesControllerImpl.cs</location>
            <body hash="9e70611acee5998a57ec063f2a07a18b"><![CDATA[private static readonly IList<string> TabSettingKeys = new List<string> { "CustomStylesheet" }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="AddTab">
          <declaration><![CDATA[public virtual int AddTab(PageSettings pageSettings)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="380" sc="9" el="422" ec="10">Components\PagesControllerImpl.cs</location>
            <body hash="1c9ac0cc61e49b8fd4ba9a55762eec7b"><![CDATA[{
            var portalSettings = PortalController.Instance.GetCurrentPortalSettings();
            var portalId = portalSettings.PortalId;
            var tab = new TabInfo { PortalID = portalId };
            UpdateTabInfoFromPageSettings(tab, pageSettings);

            if (portalSettings.ContentLocalizationEnabled)
            {
                tab.CultureCode = portalSettings.CultureCode;
            }

            SavePagePermissions(tab, pageSettings.Permissions);

            var tabId = _tabController.AddTab(tab);
            tab = _tabController.GetTab(tabId, portalId);
                        
            CreateOrUpdateContentItem(tab);

            if (pageSettings.TemplateTabId > 0)
            {
                CopyContentFromSourceTab(tab, pageSettings.TemplateTabId);
            }

            if (pageSettings.TemplateId > 0)
            {
                try
                {
                    _templateController.CreatePageFromTemplate(pageSettings.TemplateId, tab, portalId);
                }
                catch (PageException)
                {
                    _tabController.DeleteTab(tab.TabID, portalId);
                    throw;
                }
            }

            SaveTabUrl(tab, pageSettings);

            MovePageIfNeeded(pageSettings, tab);

            _tabController.ClearCache(portalId);
            return tab.TabID;
        }]]></body>
          </codeblock>
        </method>
        <method name="CleanTabUrl">
          <declaration><![CDATA[public string CleanTabUrl(string url)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="734" sc="9" el="752" ec="10">Components\PagesControllerImpl.cs</location>
            <body hash="4a180358e11c3deafc17745c62eaf812"><![CDATA[{
            if (string.IsNullOrEmpty(url))
            {
                return url;
            }

            var urlPath = url.TrimStart('/');
            bool modified;

            var portalSettings = PortalController.Instance.GetCurrentPortalSettings();
            var friendlyUrlSettings = new FriendlyUrlSettings(portalSettings.PortalId);
            urlPath = UrlRewriterUtils.CleanExtension(urlPath, friendlyUrlSettings, string.Empty);

            //Clean Url
            var options = UrlRewriterUtils.ExtendOptionsForCustomURLs(UrlRewriterUtils.GetOptionsFromSettings(friendlyUrlSettings));
            urlPath = FriendlyUrlController.CleanNameForUrl(urlPath, options, out modified);

            return '/' + urlPath;
        }]]></body>
          </codeblock>
        </method>
        <method name="CopyContentFromSourceTab">
          <declaration><![CDATA[public void CopyContentFromSourceTab(TabInfo tab, int sourceTabId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1037" sc="9" el="1048" ec="10">Components\PagesControllerImpl.cs</location>
            <body hash="a81f49f3845a13c971a62d048705f377"><![CDATA[{
            var sourceTab = _tabController.GetTab(sourceTabId, tab.PortalID);
            if (sourceTab == null || sourceTab.IsDeleted)
            {
                return;
            }
            //Copy Properties
            CopySourceTabProperties(tab, sourceTab);

            //Copy Modules
            CopyModulesFromSourceTab(tab, sourceTab);
        }]]></body>
          </codeblock>
        </method>
        <method name="CopyModulesFromSourceTab">
          <declaration><![CDATA[private void CopyModulesFromSourceTab(TabInfo tab, TabInfo sourceTab)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1073" sc="9" el="1136" ec="10">Components\PagesControllerImpl.cs</location>
            <body hash="5e3dce01aaa1494cb9cea4c5da6e26ea"><![CDATA[{
            foreach (var module in sourceTab.ChildModules.Values)
            {
                if (module.IsDeleted || module.AllTabs)
                {
                    continue;
                }

                var newModule = module.Clone();

                newModule.TabID = tab.TabID;
                newModule.DefaultLanguageGuid = Null.NullGuid;
                newModule.CultureCode = tab.CultureCode;
                newModule.VersionGuid = Guid.NewGuid();
                newModule.LocalizedVersionGuid = Guid.NewGuid();

                newModule.ModuleID = Null.NullInteger;
                _moduleController.InitialModulePermission(newModule, newModule.TabID, 0);
                newModule.InheritViewPermissions = module.InheritViewPermissions;

                newModule.ModuleID = _moduleController.AddModule(newModule);

                //Copy each setting to the new TabModule instance
                foreach (DictionaryEntry setting in module.ModuleSettings)
                {
                    _moduleController.UpdateModuleSetting(newModule.ModuleID, Convert.ToString(setting.Key), Convert.ToString(setting.Value));
                }

                foreach (DictionaryEntry setting in module.TabModuleSettings)
                {
                    _moduleController.UpdateTabModuleSetting(newModule.TabModuleID, Convert.ToString(setting.Key), Convert.ToString(setting.Value));
                }

                //copy permissions from source module
                foreach (ModulePermissionInfo permission in module.ModulePermissions)
                {
                    newModule.ModulePermissions.Add(new ModulePermissionInfo
                    {
                        ModuleID = newModule.ModuleID,
                        PermissionID = permission.PermissionID,
                        RoleID = permission.RoleID,
                        UserID = permission.UserID,
                        PermissionKey = permission.PermissionKey,
                        AllowAccess = permission.AllowAccess
                    }, true);
                }

                ModulePermissionController.SaveModulePermissions(newModule);

                if (!string.IsNullOrEmpty(newModule.DesktopModule.BusinessControllerClass))
                {
                    var moduleBizClass = Reflection.CreateObject(newModule.DesktopModule.BusinessControllerClass, newModule.DesktopModule.BusinessControllerClass) as IPortable;
                    if (moduleBizClass != null)
                    {
                        var content = Convert.ToString(moduleBizClass.ExportModule(module.ModuleID));
                        if (!string.IsNullOrEmpty(content))
                        {
                            content = XmlUtils.RemoveInvalidXmlCharacters(content);
                            moduleBizClass.ImportModule(newModule.ModuleID, content, newModule.DesktopModule.Version, UserController.Instance.GetCurrentUserInfo().UserID);
                        }
                    }
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="CopyPermissionsToDescendantPages">
          <declaration><![CDATA[public void CopyPermissionsToDescendantPages(int pageId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="768" sc="9" el="783" ec="10">Components\PagesControllerImpl.cs</location>
            <body hash="fbc3613d95831dfe56cd21ca82790ad9"><![CDATA[{
            var portalSettings = PortalController.Instance.GetCurrentPortalSettings();
            var portalId = portalSettings.PortalId;
            var tab = _tabController.GetTab(pageId, portalId, false);
            if (tab == null)
            {
                throw new PageNotFoundException();
            }

            if (!TabPermissionController.CanManagePage(tab) || tab.IsSuperTab)
            {
                throw new PermissionsNotMetException(tab.TabID, Localization.GetString("CannotCopyPermissionsToDescendantPages"));
            }

            TabController.CopyPermissionsToChildren(tab, tab.TabPermissions);
        }]]></body>
          </codeblock>
        </method>
        <method name="CopySourceTabProperties">
          <declaration><![CDATA[private void CopySourceTabProperties(TabInfo tab, TabInfo sourceTab)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1051" sc="9" el="1070" ec="10">Components\PagesControllerImpl.cs</location>
            <body hash="a5f47d0dca79f91da2100b23dee617a6"><![CDATA[{
            var portalSettings = PortalController.Instance.GetCurrentPortalSettings();
            tab.SkinSrc = sourceTab.SkinSrc.Equals(portalSettings.DefaultPortalSkin, StringComparison.InvariantCultureIgnoreCase) ? string.Empty : sourceTab.SkinSrc;
            tab.ContainerSrc = sourceTab.ContainerSrc;
            tab.IconFile = sourceTab.IconFile;
            tab.IconFileLarge = sourceTab.IconFileLarge;
            tab.PageHeadText = sourceTab.PageHeadText;
            tab.RefreshInterval = sourceTab.RefreshInterval;

            _tabController.UpdateTab(tab);

            //update need tab settings.
            foreach (var key in TabSettingKeys)
            {
                if (sourceTab.TabSettings.ContainsKey(key))
                {
                    _tabController.UpdateTabSetting(tab.TabID, key, Convert.ToString(sourceTab.TabSettings[key]));
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="CopyThemeToDescendantPages">
          <declaration><![CDATA[public void CopyThemeToDescendantPages(int pageId, Theme theme)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="755" sc="9" el="765" ec="10">Components\PagesControllerImpl.cs</location>
            <body hash="36e6a2c8053558fad183debcdbb1f1a5"><![CDATA[{
            var portalSettings = PortalController.Instance.GetCurrentPortalSettings();
            var portalId = portalSettings.PortalId;
            var tab = _tabController.GetTab(pageId, portalId, false);
            if (tab == null)
            {
                throw new PageNotFoundException();
            }

            TabController.CopyDesignToChildren(tab, theme.SkinSrc, theme.ContainerSrc);
        }]]></body>
          </codeblock>
        </method>
        <method name="CreateCustomUrl">
          <declaration><![CDATA[public PageUrlResult CreateCustomUrl(SeoUrl dto)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="809" sc="9" el="812" ec="10">Components\PagesControllerImpl.cs</location>
            <body hash="f06b5feacee3f6e3dae71b1477af94d7"><![CDATA[{
            var portalSettings = PortalController.Instance.GetCurrentPortalSettings();
            return _pageUrlsController.CreateCustomUrl(dto.SaveUrl, _tabController.GetTab(dto.TabId, portalSettings.PortalId, false));
        }]]></body>
          </codeblock>
        </method>
        <method name="CreateOrUpdateContentItem">
          <declaration><![CDATA[public void CreateOrUpdateContentItem(TabInfo tab)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="847" sc="9" el="870" ec="10">Components\PagesControllerImpl.cs</location>
            <body hash="018bb6418e9a7d3a9d7cfb82e35d6656"><![CDATA[{
            var contentController = Util.GetContentController();
            tab.Content = String.IsNullOrEmpty(tab.Title) ? tab.TabName : tab.Title;
            tab.Indexed = false;

            if (tab.ContentItemId != Null.NullInteger)
            {
                contentController.UpdateContentItem(tab);
                return;
            }

            var typeController = new ContentTypeController();
            var contentType =
                (from t in typeController.GetContentTypes()
                 where t.ContentType == "Tab"
                 select t).SingleOrDefault();


            if (contentType != null)
            {
                tab.ContentTypeId = contentType.ContentTypeId;
            }
            contentController.AddContentItem(tab);
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteCustomUrl">
          <declaration><![CDATA[public PageUrlResult DeleteCustomUrl(UrlIdDto dto)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="821" sc="9" el="824" ec="10">Components\PagesControllerImpl.cs</location>
            <body hash="5f49dbfa990a3ba6a3ab85821cb41bd7"><![CDATA[{
            var portalSettings = PortalController.Instance.GetCurrentPortalSettings();
            return _pageUrlsController.DeleteCustomUrl(dto.Id, _tabController.GetTab(dto.TabId, portalSettings.PortalId, false));
        }]]></body>
          </codeblock>
        </method>
        <method name="DeletePage">
          <declaration><![CDATA[public void DeletePage(PageItem page)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="177" sc="9" el="190" ec="10">Components\PagesControllerImpl.cs</location>
            <body hash="f37fbfb4b65738381ccfc3fb8f39dd65"><![CDATA[{
            var portalSettings = PortalController.Instance.GetCurrentPortalSettings();
            var tab = TabController.Instance.GetTab(page.Id, portalSettings.PortalId);
            if (tab == null)
            {
                throw new PageNotFoundException();
            }

            if (TabPermissionController.CanDeletePage(tab))
            {
                TabController.Instance.SoftDeleteTab(tab.TabID, portalSettings);
            }

        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteTabModule">
          <declaration><![CDATA[public void DeleteTabModule(int pageId, int moduleId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1012" sc="9" el="1033" ec="10">Components\PagesControllerImpl.cs</location>
            <body hash="35c4f3f40e29e655d30659f465577c71"><![CDATA[{
            var portalSettings = PortalController.Instance.GetCurrentPortalSettings();
            var tab = _tabController.GetTab(pageId, portalSettings.PortalId);
            if (tab == null)
            {
                throw new PageModuleNotFoundException();
            }

            var tabModule = _moduleController.GetModule(moduleId, pageId, false);
            if (tabModule == null)
            {
                throw new PageModuleNotFoundException();
            }

            if (!TabPermissionController.CanAddContentToPage(tab))
            {
                throw new SecurityException("You do not have permission to delete module on this page");
            }

            _moduleController.DeleteTabModule(pageId, moduleId, true);
            _moduleController.ClearCache(pageId);
        }]]></body>
          </codeblock>
        </method>
        <method name="EditModeForPage">
          <declaration><![CDATA[public void EditModeForPage(int pageId, int userId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="193" sc="9" el="209" ec="10">Components\PagesControllerImpl.cs</location>
            <body hash="f4a2da32c5046b6a512f8a6ee958755b"><![CDATA[{
            var portalSettings = PortalController.Instance.GetCurrentPortalSettings();
            var newCookie = new HttpCookie("LastPageId", $"{portalSettings.PortalId}:{pageId}")
            {
                Path = (!string.IsNullOrEmpty(Globals.ApplicationPath) ? Globals.ApplicationPath : "/")
            };
            HttpContext.Current.Response.Cookies.Add(newCookie);

            if (portalSettings.UserMode != PortalSettings.Mode.Edit)
            {
                var personalizationController = new PersonalizationController();
                var personalization = personalizationController.LoadProfile(userId, portalSettings.PortalId);
                personalization.Profile["Usability:UserMode" + portalSettings.PortalId] = "EDIT";
                personalization.IsModified = true;
                personalizationController.SaveProfile(personalization);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetContainerSrc">
          <declaration><![CDATA[private string GetContainerSrc(PageSettings pageSettings)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="565" sc="9" el="574" ec="10">Components\PagesControllerImpl.cs</location>
            <body hash="90bc6610d5011a42b8f6a7e729901c76"><![CDATA[{
            var defaultContainer = _defaultPortalThemeController.GetDefaultPortalContainer();
            if (pageSettings.ContainerSrc != null && 
                pageSettings.ContainerSrc.Equals(defaultContainer,
                StringComparison.InvariantCultureIgnoreCase))
            {
                return null;
            }
            return pageSettings.ContainerSrc;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetDefaultSettings">
          <declaration><![CDATA[public virtual PageSettings GetDefaultSettings()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="966" sc="9" el="976" ec="10">Components\PagesControllerImpl.cs</location>
            <body hash="e4bb567075acba2105c88f7444c18cd3"><![CDATA[{
            var pageSettings = new PageSettings
            {
                Templates = _templateController.GetTemplates(),
                Permissions = GetPermissionsData(0)
            };

            pageSettings.TemplateId = _templateController.GetDefaultTemplateId(pageSettings.Templates);
               
            return pageSettings;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetExternalUrlRedirection">
          <declaration><![CDATA[private static string GetExternalUrlRedirection(string url)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="604" sc="9" el="611" ec="10">Components\PagesControllerImpl.cs</location>
            <body hash="375b555f0c4f5b077a0b086a0ee1e7b2"><![CDATA[{
            if (url == null)
            {
                return null;
            }

            return url.ToLower() == "http://" ? "" : Globals.AddHTTP(url);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetInternalUrl">
          <declaration><![CDATA[private string GetInternalUrl(PageSettings pageSettings)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="589" sc="9" el="601" ec="10">Components\PagesControllerImpl.cs</location>
            <body hash="0aebc54da8e9aefc3492ac24f7abfd2c"><![CDATA[{
            switch (pageSettings.PageType)
            {
                case "tab":
                    return pageSettings.ExistingTabRedirection;
                case "url":
                    return GetExternalUrlRedirection(pageSettings.ExternalRedirection);
                case "file":
                    return "FileId=" + pageSettings.FileIdRedirection;
                default:
                    return null;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetKeyWords">
          <declaration><![CDATA[private string GetKeyWords(PageSettings pageSettings)]]></declaration>
          <documentation>
            <summary>
 If the tab keywords is equal to the portal keywords
 we store null so the system will serve the portal keywords instead
 </summary>
 <param name="pageSettings"></param>
 <returns>Tab Keywords value to be stored</returns></documentation>
          <codeblock>
            <location sl="633" sc="9" el="637" ec="10">Components\PagesControllerImpl.cs</location>
            <body hash="0c12b24f2290a9c542f7afa1e9c75a4b"><![CDATA[{
            var portalSettings = PortalController.Instance.GetCurrentPortalSettings();
            return pageSettings.Keywords != portalSettings.KeyWords
                ? pageSettings.Keywords : null;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetLocales">
          <declaration><![CDATA[protected IOrderedEnumerable<KeyValuePair<int, string>> GetLocales(int portalId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="826" sc="9" el="829" ec="10">Components\PagesControllerImpl.cs</location>
            <body hash="869938ed88256999f7a8e0ddeaa712f0"><![CDATA[{
            var locales = new Lazy<Dictionary<string, Locale>>(() => LocaleController.Instance.GetLocales(portalId));
            return locales.Value.Values.Select(local => new KeyValuePair<int, string>(local.KeyID, local.EnglishName)).OrderBy(x => x.Value);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetModules">
          <declaration><![CDATA[public IEnumerable<ModuleInfo> GetModules(int pageId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="295" sc="9" el="298" ec="10">Components\PagesControllerImpl.cs</location>
            <body hash="4ba739011b5155134c7f07c4ee132bae"><![CDATA[{
            var tabModules = _moduleController.GetTabModules(pageId);
            return tabModules.Values.Where(m => !m.IsDeleted && !m.AllTabs);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPageDetails">
          <declaration><![CDATA[private TabInfo GetPageDetails(int pageId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="283" sc="9" el="292" ec="10">Components\PagesControllerImpl.cs</location>
            <body hash="2a39971e5f473338d911f1f293b8b7f5"><![CDATA[{
            var portalSettings = PortalController.Instance.GetCurrentPortalSettings();
            var tab = TabController.Instance.GetTab(pageId, portalSettings.PortalId);
            if (tab == null)
            {
                throw new PageNotFoundException();
            }

            return tab;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPageHierarchy">
          <declaration><![CDATA[public List<int> GetPageHierarchy(int pageId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="112" sc="9" el="131" ec="10">Components\PagesControllerImpl.cs</location>
            <body hash="cc339ee6d43c743eb73064877df0569b"><![CDATA[{
            var portalSettings = PortalController.Instance.GetCurrentPortalSettings();
            var tab = TabController.Instance.GetTab(pageId, portalSettings.PortalId);
            if (tab == null)
            {
                throw new PageNotFoundException();
            }

            var paths = new List<int> { tab.TabID };
            while (tab.ParentId != Null.NullInteger)
            {
                tab = TabController.Instance.GetTab(tab.ParentId, portalSettings.PortalId);
                if (tab != null)
                {
                    paths.Insert(0, tab.TabID);
                }
            }

            return paths;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPageList">
          <declaration><![CDATA[public IEnumerable<TabInfo> GetPageList(int parentId = -1, string searchKey = "")]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="265" sc="9" el="280" ec="10">Components\PagesControllerImpl.cs</location>
            <body hash="fd0d9852ce3a75472cb1f2bdedf684b4"><![CDATA[{
            var portalSettings = PortalController.Instance.GetCurrentPortalSettings();
            var adminTabId = portalSettings.AdminTabId;

            var tabs = TabController.GetPortalTabs(portalSettings.PortalId, adminTabId, false, true, false, true);
            var pages = from t in tabs
                        where (t.ParentId != adminTabId || t.ParentId == Null.NullInteger) &&
                                !t.IsSystem &&
                                    ((string.IsNullOrEmpty(searchKey) && (t.ParentId == parentId))
                                        || (!string.IsNullOrEmpty(searchKey) &&
                                                (t.TabName.IndexOf(searchKey, StringComparison.InvariantCultureIgnoreCase) > Null.NullInteger
                                                    || t.LocalizedTabName.IndexOf(searchKey, StringComparison.InvariantCultureIgnoreCase) > Null.NullInteger)))
                        select t;

            return pages;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPageSettings">
          <declaration><![CDATA[public PageSettings GetPageSettings(int pageId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="794" sc="9" el="806" ec="10">Components\PagesControllerImpl.cs</location>
            <body hash="301bd63cd2cc172fbd253f12cd73cd2d"><![CDATA[{
            var tab = GetPageDetails(pageId);
            var portalSettings = PortalController.Instance.GetCurrentPortalSettings();
            var page = Converters.ConvertToPageSettings<PageSettings>(tab);
            page.Modules = GetModules(page.TabId).Select(Converters.ConvertToModuleItem);
            page.PageUrls = GetPageUrls(page.TabId);
            page.Permissions = GetPermissionsData(pageId);
            page.SiteAliases = GetSiteAliases(portalSettings.PortalId);
            page.PrimaryAliasId = GetPrimaryAliasId(portalSettings.PortalId, portalSettings.CultureCode);
            page.Locales = GetLocales(portalSettings.PortalId);
            page.HasParent = tab.ParentId > -1;
            return page;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPageUrls">
          <declaration><![CDATA[public IEnumerable<Url> GetPageUrls(int tabId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="786" sc="9" el="791" ec="10">Components\PagesControllerImpl.cs</location>
            <body hash="f2e78ea53dcdfb1398abff27ea3d8f12"><![CDATA[{
            var tab = GetPageDetails(tabId);
            var portalSettings = PortalController.Instance.GetCurrentPortalSettings();
            var portalId = portalSettings.PortalId;
            return _pageUrlsController.GetPageUrls(tab, portalId);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPermissionsData">
          <declaration><![CDATA[public PagePermissions GetPermissionsData(int pageId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="979" sc="9" el="1009" ec="10">Components\PagesControllerImpl.cs</location>
            <body hash="efa3262945430a633afdbc05225fd557"><![CDATA[{
            var permissions = new PagePermissions(true);
            if (pageId > 0)
            {
                var portalSettings = PortalController.Instance.GetCurrentPortalSettings();
                var tab = TabController.Instance.GetTab(pageId, portalSettings.PortalId);
                if (tab != null)
                {
                    foreach (TabPermissionInfo permission in tab.TabPermissions)
                    {
                        if (permission.UserID != Null.NullInteger)
                        {
                            permissions.AddUserPermission(permission);
                        }
                        else
                        {
                            permissions.AddRolePermission(permission);
                        }
                    }

                    permissions.RolePermissions =
                        permissions.RolePermissions.OrderByDescending(p => p.Locked)
                            .ThenByDescending(p => p.IsDefault)
                            .ThenBy(p => p.RoleName)
                            .ToList();
                    permissions.UserPermissions = permissions.UserPermissions.OrderBy(p => p.DisplayName).ToList();
                }
            }
            
            return permissions;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPrimaryAliasId">
          <declaration><![CDATA[protected int? GetPrimaryAliasId(int portalId, string cultureCode)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="837" sc="9" el="844" ec="10">Components\PagesControllerImpl.cs</location>
            <body hash="1cd165b07d45c05b6ac117ad0bccd2f1"><![CDATA[{
            var aliases = PortalAliasController.Instance.GetPortalAliasesByPortalId(portalId);
            var primary = aliases.Where(a => a.IsPrimary
                                && (a.CultureCode == cultureCode || String.IsNullOrEmpty(a.CultureCode)))
                            .OrderByDescending(a => a.CultureCode)
                            .FirstOrDefault();
            return primary == null ? (int?)null : primary.KeyID;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetSiteAliases">
          <declaration><![CDATA[protected IEnumerable<KeyValuePair<int, string>> GetSiteAliases(int portalId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="831" sc="9" el="834" ec="10">Components\PagesControllerImpl.cs</location>
            <body hash="e222a5799fb9ccb46a1c1ef5f4d1ef03"><![CDATA[{
            var aliases = PortalAliasController.Instance.GetPortalAliasesByPortalId(portalId);
            return aliases.Select(alias => new KeyValuePair<int, string>(alias.KeyID, alias.HTTPAlias)).OrderBy(x => x.Value);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetSkinSrc">
          <declaration><![CDATA[private string GetSkinSrc(PageSettings pageSettings)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="577" sc="9" el="586" ec="10">Components\PagesControllerImpl.cs</location>
            <body hash="d11019a3bd33d7ef656610a4dbffa0de"><![CDATA[{
            var defaultSkin = _defaultPortalThemeController.GetDefaultPortalLayout();
            if (pageSettings.SkinSrc != null && 
                pageSettings.SkinSrc.Equals(defaultSkin,
                StringComparison.InvariantCultureIgnoreCase))
            {
                return null;
            }
            return pageSettings.SkinSrc;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetTabDescription">
          <declaration><![CDATA[private string GetTabDescription(PageSettings pageSettings)]]></declaration>
          <documentation>
            <summary>
 If the tab description is equal to the portal description
 we store null so the system will serve the portal description instead
 </summary>
 <param name="pageSettings"></param>
 <returns>Tab Description value to be stored</returns></documentation>
          <codeblock>
            <location sl="620" sc="9" el="624" ec="10">Components\PagesControllerImpl.cs</location>
            <body hash="cd67c39689973d619d867b3c2808df58"><![CDATA[{
            var portalSettings = PortalController.Instance.GetCurrentPortalSettings();
            return pageSettings.Description != portalSettings.Description
                ? pageSettings.Description : null;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetTemplateParentId">
          <declaration><![CDATA[protected virtual int GetTemplateParentId(int portalId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="342" sc="9" el="344" ec="10">Components\PagesControllerImpl.cs</location>
            <body hash="66d1556c72f6bd5174d7f15b8895e972"><![CDATA[{
            return Null.NullInteger;
        }]]></body>
          </codeblock>
        </method>
        <method name="HasAdminPermissions">
          <declaration><![CDATA[private static bool HasAdminPermissions(PagePermissions permissions)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="958" sc="9" el="963" ec="10">Components\PagesControllerImpl.cs</location>
            <body hash="4571b660e8ba3268ce0cfd38c0b792b0"><![CDATA[{
            var portalSettings = PortalController.Instance.GetCurrentPortalSettings();
            return permissions.RolePermissions != null && (bool) permissions.RolePermissions?.Any(permission =>
                permission.RoleId == portalSettings.AdministratorRoleId &&
                permission.Permissions.Count != 0);
        }]]></body>
          </codeblock>
        </method>
        <method name="IsChild">
          <declaration><![CDATA[private bool IsChild(int portalId, int tabId, int parentId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="239" sc="9" el="262" ec="10">Components\PagesControllerImpl.cs</location>
            <body hash="3c70bdde2c37e082ae9687b44a68f8b8"><![CDATA[{
            if (parentId == Null.NullInteger)
            {
                return false;
            }

            if (tabId == parentId)
            {
                return true;
            }

            var tab = TabController.Instance.GetTab(parentId, portalId);
            while (tab != null && tab.ParentId != Null.NullInteger)
            {
                if (tab.ParentId == tabId)
                {
                    return true;
                }

                tab = TabController.Instance.GetTab(tab.ParentId, portalId);
            }

            return false;
        }]]></body>
          </codeblock>
        </method>
        <method name="IsValidTabPath">
          <declaration><![CDATA[public bool IsValidTabPath(TabInfo tab, string newTabPath, out string errorMessage)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="72" sc="9" el="109" ec="10">Components\PagesControllerImpl.cs</location>
            <body hash="e1d1decdb4da6104023f06afe0e879a7"><![CDATA[{
            var portalSettings = PortalController.Instance.GetCurrentPortalSettings();
            var valid = true;
            errorMessage = string.Empty;

            //get default culture if the tab's culture is null
            var cultureCode = tab != null ? tab.CultureCode : string.Empty;
            if (string.IsNullOrEmpty(cultureCode))
            {
                cultureCode = portalSettings.DefaultLanguage;
            }

            //Validate Tab Path
            var tabId = TabController.GetTabByTabPath(portalSettings.PortalId, newTabPath, cultureCode);
            if (tabId != Null.NullInteger && (tab == null || tabId != tab.TabID))
            {
                var existingTab = _tabController.GetTab(tabId, portalSettings.PortalId, false);
                if (existingTab != null && existingTab.IsDeleted)
                {
                    errorMessage = "TabRecycled";
                }
                else
                {
                    errorMessage = "TabExists";
                }

                valid = false;
            }

            //check whether have conflict between tab path and portal alias.
            if (TabController.IsDuplicateWithPortalAlias(portalSettings.PortalId, newTabPath))
            {
                errorMessage = "PathDuplicateWithAlias";
                valid = false;
            }

            return valid;
        }]]></body>
          </codeblock>
        </method>
        <method name="MovePage">
          <declaration><![CDATA[public TabInfo MovePage(PageMoveRequest request)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="135" sc="9" el="174" ec="10">Components\PagesControllerImpl.cs</location>
            <body hash="ac6847c5e0919486e56e4fe8a6f88f81"><![CDATA[{
            var portalSettings = PortalController.Instance.GetCurrentPortalSettings();
            var tab = TabController.Instance.GetTab(request.PageId, portalSettings.PortalId);
            if (tab == null)
            {                
                throw new PageNotFoundException();
            }

            if (tab.ParentId != request.ParentId)
            {
                string errorMessage;

                if (!IsValidTabPath(tab, Globals.GenerateTabPath(request.ParentId, tab.TabName), out errorMessage))
                {
                    throw new PageException(errorMessage);
                }
            }

            switch (request.Action)
            {
                case "before":
                    TabController.Instance.MoveTabBefore(tab, request.RelatedPageId);
                    break;
                case "after":
                    TabController.Instance.MoveTabAfter(tab, request.RelatedPageId);
                    break;
                case "parent":
                    //avoid move tab into its child page
                    if (IsChild(portalSettings.PortalId, tab.TabID, request.ParentId))
                    {
                        throw new PageException("DragInvalid");
                    }

                    TabController.Instance.MoveTabToParent(tab, request.ParentId);
                    break;
            }

            //as tab's parent may changed, url need refresh.
            return TabController.Instance.GetTab(request.PageId, portalSettings.PortalId);            
        }]]></body>
          </codeblock>
        </method>
        <method name="MovePageIfNeeded">
          <declaration><![CDATA[private void MovePageIfNeeded(PageSettings pageSettings, TabInfo tab)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="425" sc="9" el="437" ec="10">Components\PagesControllerImpl.cs</location>
            <body hash="1df77c30648556fe104889b654da708b"><![CDATA[{
            if (pageSettings.ParentId.HasValue)
            {
                var request = new PageMoveRequest
                {
                    Action = "parent",
                    PageId = tab.TabID,
                    ParentId = pageSettings.ParentId.Value
                };

                MovePage(request);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="NoLocked">
          <declaration><![CDATA[private static Func<RolePermission, bool> NoLocked()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="952" sc="9" el="955" ec="10">Components\PagesControllerImpl.cs</location>
            <body hash="e7ab2bffd5d25132bce9b157fb5cb410"><![CDATA[{
            var portalSettings = PortalController.Instance.GetCurrentPortalSettings();
            return r => !(r.Locked && r.RoleId != portalSettings.AdministratorRoleId);
        }]]></body>
          </codeblock>
        </method>
        <method name="SavePageDetails">
          <declaration><![CDATA[public TabInfo SavePageDetails(PageSettings pageSettings)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="212" sc="9" el="236" ec="10">Components\PagesControllerImpl.cs</location>
            <body hash="2816ecb0bfec04a3aabbd4e9e4d6de57"><![CDATA[{
            var portalSettings = PortalController.Instance.GetCurrentPortalSettings();
            TabInfo tab = null;
            if (pageSettings.TabId > 0)
            {
                tab = TabController.Instance.GetTab(pageSettings.TabId, portalSettings.PortalId);
                if (tab == null)
                {
                    throw new PageNotFoundException();
                }
            }

            string errorMessage;
            string field;
            if (!ValidatePageSettingsData(pageSettings, tab, out field, out errorMessage))
            {
                throw new PageValidationException(field, errorMessage);
            }

            var tabId = pageSettings.TabId <= 0
                ? AddTab(pageSettings)
                : UpdateTab(tab, pageSettings);

            return TabController.Instance.GetTab(tabId, portalSettings.PortalId);
        }]]></body>
          </codeblock>
        </method>
        <method name="SavePagePermissions">
          <declaration><![CDATA[public void SavePagePermissions(TabInfo tab, PagePermissions permissions)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="887" sc="9" el="949" ec="10">Components\PagesControllerImpl.cs</location>
            <body hash="6fed25caebee0097ac3ef67e45a7ffd1"><![CDATA[{
            var portalSettings = PortalController.Instance.GetCurrentPortalSettings();

            tab.TabPermissions.Clear();

            //add default permissions for administrators if needed
            if (!HasAdminPermissions(permissions))
            {
                //add default permissions
                var permissionsList = PermissionController.GetPermissionsByTab();
                foreach (var permissionInfo in permissionsList)
                {
                    var editPermisison = (PermissionInfo)permissionInfo;
                    var permission = new TabPermissionInfo(editPermisison)
                    {
                        RoleID = portalSettings.AdministratorRoleId,
                        AllowAccess = true,
                        RoleName = portalSettings.AdministratorRoleName
                    };
                    tab.TabPermissions.Add(permission);
                }
            }

            //add role permissions
            if (permissions.RolePermissions != null)
            {
                foreach (var rolePermission in permissions.RolePermissions.Where(NoLocked()))
                {
                    foreach (var permission in rolePermission.Permissions)
                    {
                        tab.TabPermissions.Add(new TabPermissionInfo
                        {
                            PermissionID = permission.PermissionId,
                            RoleID = rolePermission.RoleId,
                            UserID = Null.NullInteger,
                            AllowAccess = permission.AllowAccess
                        });
                    }
                }
            }


            //add user permissions
            if (permissions.UserPermissions != null)
            {
                foreach (var userPermission in permissions.UserPermissions)
                {
                    foreach (var permission in userPermission.Permissions)
                    {
                        int roleId;
                        int.TryParse(Globals.glbRoleNothing, out roleId);

                        tab.TabPermissions.Add(new TabPermissionInfo
                        {
                            PermissionID = permission.PermissionId,
                            RoleID = roleId,
                            UserID = userPermission.UserId,
                            AllowAccess = permission.AllowAccess
                        });
                    }
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="SaveTabUrl">
          <declaration><![CDATA[public void SaveTabUrl(TabInfo tab, PageSettings pageSettings)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="640" sc="9" el="731" ec="10">Components\PagesControllerImpl.cs</location>
            <body hash="8e3c2c08e95f83988481ebb47820b073"><![CDATA[{
            if (!pageSettings.CustomUrlEnabled)
            {
                return;
            }

            if (tab.IsSuperTab)
            {
                return;
            }

            var url = pageSettings.Url;
            var tabUrl = tab.TabUrls.SingleOrDefault(t => t.IsSystem
                                                          && t.HttpStatus == "200"
                                                          && t.SeqNum == 0);

            var portalSettings = PortalController.Instance.GetCurrentPortalSettings();
            if (!String.IsNullOrEmpty(url) && url != "/")
            {
                url = CleanTabUrl(url);

                string currentUrl = String.Empty;
                var friendlyUrlSettings = new FriendlyUrlSettings(portalSettings.PortalId);
                if (tab.TabID > -1)
                {
                    var baseUrl = Globals.AddHTTP(portalSettings.PortalAlias.HTTPAlias) + "/Default.aspx?TabId=" + tab.TabID;
                    var path = AdvancedFriendlyUrlProvider.ImprovedFriendlyUrl(tab,
                        baseUrl,
                        Globals.glbDefaultPage,
                        portalSettings.PortalAlias.HTTPAlias,
                        false,
                        friendlyUrlSettings,
                        Guid.Empty);

                    currentUrl = path.Replace(Globals.AddHTTP(portalSettings.PortalAlias.HTTPAlias), "");
                }

                if (url == currentUrl)
                {
                    return;
                }

                if (tabUrl == null)
                {
                    //Add new custom url
                    tabUrl = new TabUrlInfo
                    {
                        TabId = tab.TabID,
                        SeqNum = 0,
                        PortalAliasId = -1,
                        PortalAliasUsage = PortalAliasUsageType.Default,
                        QueryString = String.Empty,
                        Url = url,
                        HttpStatus = "200",
                        CultureCode = String.Empty,
                        IsSystem = true
                    };
                    //Save url
                    _tabController.SaveTabUrl(tabUrl, portalSettings.PortalId, true);
                }
                else
                {
                    //Change the original 200 url to a redirect
                    tabUrl.HttpStatus = "301";
                    tabUrl.SeqNum = tab.TabUrls.Max(t => t.SeqNum) + 1;
                    _tabController.SaveTabUrl(tabUrl, portalSettings.PortalId, true);

                    //Add new custom url
                    tabUrl.Url = url;
                    tabUrl.HttpStatus = "200";
                    tabUrl.SeqNum = 0;
                    _tabController.SaveTabUrl(tabUrl, portalSettings.PortalId, true);
                }


                //Delete any redirects to the same url
                foreach (var redirecturl in _tabController.GetTabUrls(tab.TabID, tab.PortalID))
                {
                    if (redirecturl.Url == url && redirecturl.HttpStatus != "200")
                    {
                        _tabController.DeleteTabUrl(redirecturl, tab.PortalID, true);
                    }
                }
            }
            else
            {
                if (tabUrl != null)
                {
                    _tabController.DeleteTabUrl(tabUrl, portalSettings.PortalId, true);
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateCustomUrl">
          <declaration><![CDATA[public PageUrlResult UpdateCustomUrl(SeoUrl dto)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="815" sc="9" el="818" ec="10">Components\PagesControllerImpl.cs</location>
            <body hash="2041c8336fd35b36b51429edda5e92ad"><![CDATA[{
            var portalSettings = PortalController.Instance.GetCurrentPortalSettings();
            return _pageUrlsController.UpdateCustomUrl(dto.SaveUrl, _tabController.GetTab(dto.TabId, portalSettings.PortalId, false));
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateTab">
          <declaration><![CDATA[public int UpdateTab(TabInfo tab, PageSettings pageSettings)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="873" sc="9" el="884" ec="10">Components\PagesControllerImpl.cs</location>
            <body hash="12f5222808a772c00e6e8673521a3d59"><![CDATA[{
            UpdateTabInfoFromPageSettings(tab, pageSettings);
            SavePagePermissions(tab, pageSettings.Permissions);

            _tabController.UpdateTab(tab);

            CreateOrUpdateContentItem(tab);

            SaveTabUrl(tab, pageSettings);
            
            return tab.TabID;
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateTabInfoFromPageSettings">
          <declaration><![CDATA[protected virtual void UpdateTabInfoFromPageSettings(TabInfo tab, PageSettings pageSettings)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="440" sc="9" el="562" ec="10">Components\PagesControllerImpl.cs</location>
            <body hash="6c4cf1d5030838fc40c46c839746d963"><![CDATA[{
            tab.TabName = pageSettings.Name;
            tab.TabPath = Globals.GenerateTabPath(tab.ParentId, tab.TabName);
            tab.Title = pageSettings.Title;
            tab.Description = GetTabDescription(pageSettings);
            tab.KeyWords = GetKeyWords(pageSettings);
            tab.IsVisible = pageSettings.IncludeInMenu;
            tab.DisableLink = pageSettings.DisableLink;

            tab.StartDate = pageSettings.StartDate ?? Null.NullDate;
            tab.EndDate = pageSettings.EndDate ?? Null.NullDate;

            tab.IsSecure = pageSettings.IsSecure;
            tab.TabSettings["AllowIndex"] = pageSettings.AllowIndex;

            tab.SiteMapPriority = pageSettings.SiteMapPriority;
            tab.PageHeadText = pageSettings.PageHeadText;

            tab.PermanentRedirect = pageSettings.PermanentRedirect;
            tab.Url = GetInternalUrl(pageSettings);
            
            tab.TabSettings["CacheProvider"] = pageSettings.CacheProvider;
            if (pageSettings.CacheProvider != null)
            {
                tab.TabSettings["CacheDuration"] = pageSettings.CacheDuration;
                if (pageSettings.CacheIncludeExclude.HasValue)
                {
                    if (pageSettings.CacheIncludeExclude.Value)
                    {
                        tab.TabSettings["CacheIncludeExclude"] = "1";
                        tab.TabSettings["IncludeVaryBy"] = null;
                        tab.TabSettings["ExcludeVaryBy"] = pageSettings.CacheExcludeVaryBy;
                    }
                    else
                    {
                        tab.TabSettings["CacheIncludeExclude"] = "0";
                        tab.TabSettings["IncludeVaryBy"] = pageSettings.CacheIncludeVaryBy;
                        tab.TabSettings["ExcludeVaryBy"] = null;
                    }
                    tab.TabSettings["MaxVaryByCount"] = pageSettings.CacheMaxVaryByCount;               
                }                
            }

            else
            {
                tab.TabSettings["CacheDuration"] = null;
                tab.TabSettings["CacheIncludeExclude"] = null;
                tab.TabSettings["IncludeVaryBy"] = null;
                tab.TabSettings["ExcludeVaryBy"] = null;
                tab.TabSettings["MaxVaryByCount"] = null;
            }

            tab.TabSettings["LinkNewWindow"] = pageSettings.LinkNewWindow;
            tab.TabSettings["CustomStylesheet"] = pageSettings.PageStyleSheet;

            // Tab Skin
            tab.SkinSrc = GetSkinSrc(pageSettings);
            tab.ContainerSrc = GetContainerSrc(pageSettings);

            if (pageSettings.PageType == "template")
            {
                tab.ParentId = GetTemplateParentId(tab.PortalID);
                tab.IsSystem = true;
            }

            tab.Terms.Clear();
            if (!string.IsNullOrEmpty(pageSettings.Tags))
            {
                tab.Terms.Clear();
                var termController = new TermController();
                var vocabularyController = Util.GetVocabularyController();
                var vocabulary = (vocabularyController.GetVocabularies()
                                    .Cast<Vocabulary>()
                                    .Where(v => v.Name == PageTagsVocabulary))
                                    .SingleOrDefault();

                int vocabularyId;
                if (vocabulary == null)
                {
                    var scopeType = Util.GetScopeTypeController().GetScopeTypes().SingleOrDefault(s => s.ScopeType == "Portal");
                    if (scopeType == null)
                    {
                        throw new Exception("Can't create default vocabulary as scope type 'Portal' can't finded.");
                    }

                    vocabularyId = vocabularyController.AddVocabulary(
                        new Vocabulary(PageTagsVocabulary, string.Empty, VocabularyType.Simple)
                        {
                            ScopeTypeId = scopeType.ScopeTypeId,
                            ScopeId = tab.PortalID
                        });
                }
                else
                {
                    vocabularyId = vocabulary.VocabularyId;
                }

                //get all terms info
                var allTerms = new List<Term>();
                var vocabularies = from v in vocabularyController.GetVocabularies()
                                   where (v.ScopeType.ScopeType == "Portal" && v.ScopeId == tab.PortalID && !v.Name.Equals("Tags", StringComparison.InvariantCultureIgnoreCase))
                                   select v;
                foreach (var v in vocabularies)
                {
                    allTerms.AddRange(termController.GetTermsByVocabulary(v.VocabularyId));
                }

                foreach (var tag in pageSettings.Tags.Trim().Split(','))
                {
                    if (!string.IsNullOrEmpty(tag))
                    {
                        var term = allTerms.FirstOrDefault(t => t.Name.Equals(tag, StringComparison.InvariantCultureIgnoreCase));
                        if (term == null)
                        {
                            var termId = termController.AddTerm(new Term(tag, string.Empty, vocabularyId));
                            term = termController.GetTerm(termId);
                        }

                        tab.Terms.Add(term);
                    }
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="ValidatePageSettingsData">
          <declaration><![CDATA[protected virtual bool ValidatePageSettingsData(PageSettings pageSettings, TabInfo tab, out string invalidField, out string errorMessage)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="301" sc="9" el="339" ec="10">Components\PagesControllerImpl.cs</location>
            <body hash="43b5020c184ed2c06723dae04f8a1e01"><![CDATA[{
            errorMessage = string.Empty;
            invalidField = string.Empty;

            var isValid = !string.IsNullOrEmpty(pageSettings.Name) && TabController.IsValidTabName(pageSettings.Name, out errorMessage);
            if (!isValid)
            {
                invalidField = pageSettings.PageType == "template" ? "templateName" : "name";
                if (string.IsNullOrEmpty(errorMessage))
                {
                    errorMessage = "EmptyTabName";
                }
                return false;
            }

            var parentId = tab?.ParentId ?? Null.NullInteger;
            if (pageSettings.PageType == "template")
            {
                var portalSettings = PortalController.Instance.GetCurrentPortalSettings();
                parentId = GetTemplateParentId(tab?.PortalID ?? portalSettings.PortalId);
            }

            isValid = IsValidTabPath(tab, Globals.GenerateTabPath(parentId, pageSettings.Name), out errorMessage);
            if (!isValid)
            {
                invalidField = pageSettings.PageType == "template" ? "templateName" : "name";
                errorMessage = (pageSettings.PageType == "template" ? "templates_" : "") + errorMessage;
                return false;
            }

            if (pageSettings.StartDate.HasValue && pageSettings.EndDate.HasValue && pageSettings.StartDate > pageSettings.EndDate)
            {
                errorMessage = "StartDateAfterEndDate";
                invalidField = "endDate";
                return false;
            }

            return ValidatePageUrlSettings(pageSettings, tab, ref invalidField, ref errorMessage);
        }]]></body>
          </codeblock>
        </method>
        <method name="ValidatePageUrlSettings">
          <declaration><![CDATA[private bool ValidatePageUrlSettings(PageSettings pageSettings, TabInfo tab, ref string invalidField, ref string errorMessage)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="347" sc="9" el="377" ec="10">Components\PagesControllerImpl.cs</location>
            <body hash="338619c4a99da36e989ddc3c03662755"><![CDATA[{
            var portalSettings = PortalController.Instance.GetCurrentPortalSettings();
            var urlPath = !string.IsNullOrEmpty(pageSettings.Url) ? pageSettings.Url.TrimStart('/') : string.Empty;

            if (string.IsNullOrEmpty(urlPath))
            {
                return true;
            }

            bool modified;
            //Clean Url
            var options = UrlRewriterUtils.ExtendOptionsForCustomURLs(UrlRewriterUtils.GetOptionsFromSettings(new FriendlyUrlSettings(portalSettings.PortalId)));
            urlPath = FriendlyUrlController.CleanNameForUrl(urlPath, options, out modified);
            if (modified)
            {
                errorMessage = "UrlPathCleaned";
                invalidField = "url";
                return false;
            }

            //Validate for uniqueness
            FriendlyUrlController.ValidateUrl(urlPath, tab?.TabID ?? Null.NullInteger, portalSettings, out modified);
            if (modified)
            {
                errorMessage = "UrlPathNotUnique";
                invalidField = "url";
                return false;
            }

            return true;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_defaultPortalThemeController">
          <declaration><![CDATA[private readonly IDefaultPortalThemeController _defaultPortalThemeController;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_moduleController">
          <declaration><![CDATA[private readonly IModuleController _moduleController;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_pageUrlsController">
          <declaration><![CDATA[private readonly IPageUrlsController _pageUrlsController;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_tabController">
          <declaration><![CDATA[private readonly ITabController _tabController;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_templateController">
          <declaration><![CDATA[private readonly ITemplateController _templateController;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="PageTagsVocabulary">
          <declaration><![CDATA[public const string PageTagsVocabulary = "PageTags";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="TabSettingKeys">
          <declaration><![CDATA[private static readonly IList<string> TabSettingKeys = new List<string>]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="PageUrlsController">
      <declaration><![CDATA[public class PageUrlsController : ServiceLocator<IPageUrlsController, PageUrlsController>, IPageUrlsController]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public PageUrlsController()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="AddUrlToList">
          <declaration><![CDATA[private void AddUrlToList(List<Url> tabs, int portalId, int id, PortalAliasInfo alias, Locale urlLocale, string path, string queryString, int statusCode, bool isSystem, FriendlyUrlSettings friendlyUrlSettings, int? lastModifiedByUserId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="385" sc="9" el="406" ec="10">Components\PageUrlsController.cs</location>
            <body hash="5fcbc697963f026aec128de851077ca5"><![CDATA[{
            var userName = "";
            if (lastModifiedByUserId.HasValue)
            {
                userName = UserController.Instance.GetUser(portalId, lastModifiedByUserId.Value)?.DisplayName;
            }

            tabs.Add(new Url
            {
                Id = id,
                SiteAlias = new KeyValuePair<int, string>(alias.KeyID, alias.HTTPAlias),
                Path = path,
                PathWithNoExtension = GetCleanPath(path, friendlyUrlSettings),
                QueryString = queryString,
                Locale = (urlLocale != null) ? new KeyValuePair<int, string>(urlLocale.KeyID, urlLocale.EnglishName)
                                             : new KeyValuePair<int, string>(-1, ""),
                StatusCode = StatusCodes.SingleOrDefault(kv => kv.Key == statusCode),
                SiteAliasUsage = (int)PortalAliasUsageType.ChildPagesInherit,
                IsSystem = isSystem,
                UserName = userName
            });
        }]]></body>
          </codeblock>
        </method>
        <method name="CreateCustomUrl">
          <declaration><![CDATA[public PageUrlResult CreateCustomUrl(SaveUrlDto dto, TabInfo tab)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="34" sc="9" el="127" ec="10">Components\PageUrlsController.cs</location>
            <body hash="8b9663408a67d6266ce9e513d14e42dc"><![CDATA[{
            var portalSettings = PortalController.Instance.GetCurrentPortalSettings();
            var urlPath = dto.Path.ValueOrEmpty().TrimStart('/');
            bool modified;
            //Clean Url
            var options = UrlRewriterUtils.ExtendOptionsForCustomURLs(UrlRewriterUtils.GetOptionsFromSettings(new FriendlyUrlSettings(portalSettings.PortalId)));

            urlPath = FriendlyUrlController.CleanNameForUrl(urlPath, options, out modified);
            if (modified)
            {
                return new PageUrlResult {
                    Success = false,
                    ErrorMessage = Localization.GetString("CustomUrlPathCleaned.Error"),
                    SuggestedUrlPath = "/" + urlPath
                };
            }

            //Validate for uniqueness
            urlPath = FriendlyUrlController.ValidateUrl(urlPath, -1, portalSettings, out modified);
            if (modified)
            {
                return new PageUrlResult {
                    Success = false,
                    ErrorMessage = Localization.GetString("UrlPathNotUnique.Error"),
                    SuggestedUrlPath = "/" + urlPath
                };
            }

            if (tab.TabUrls.Any(u => u.Url.ToLowerInvariant() == dto.Path.ValueOrEmpty().ToLowerInvariant()
                                     && (u.PortalAliasId == dto.SiteAliasKey || u.PortalAliasId == -1)))
            {
                return new PageUrlResult {
                    Success = false,
                    ErrorMessage = Localization.GetString("DuplicateUrl.Error")
                };
            }

            var seqNum = (tab.TabUrls.Count > 0) ? tab.TabUrls.Max(t => t.SeqNum) + 1 : 1;
            var portalLocales = LocaleController.Instance.GetLocales(portalSettings.PortalId);
            var cultureCode = portalLocales.Where(l => l.Value.KeyID == dto.LocaleKey)
                                .Select(l => l.Value.Code)
                                .SingleOrDefault();

            var portalAliasUsage = (PortalAliasUsageType)dto.SiteAliasUsage;
            if (portalAliasUsage == PortalAliasUsageType.Default)
            {
                var alias = PortalAliasController.Instance.GetPortalAliasesByPortalId(portalSettings.PortalId)
                                                        .SingleOrDefault(a => a.PortalAliasID == dto.SiteAliasKey);

                if (string.IsNullOrEmpty(cultureCode) || alias == null)
                {
                    return new PageUrlResult
                    {
                        Success = false,
                        ErrorMessage = Localization.GetString("InvalidRequest.Error")
                    };
                }
            }
            else
            {
                var cultureAlias = PortalAliasController.Instance.GetPortalAliasesByPortalId(portalSettings.PortalId)
                                                            .FirstOrDefault(a => a.CultureCode == cultureCode);

                if (portalLocales.Count > 1 && !portalSettings.ContentLocalizationEnabled && (string.IsNullOrEmpty(cultureCode) || cultureAlias == null))
                {
                    return new PageUrlResult
                    {
                        Success = false,
                        ErrorMessage = Localization.GetString("InvalidRequest.Error")
                    };
                }
            }

            var tabUrl = new TabUrlInfo
            {
                TabId = tab.TabID,
                SeqNum = seqNum,
                PortalAliasId = dto.SiteAliasKey,
                PortalAliasUsage = portalAliasUsage,
                QueryString = dto.QueryString.ValueOrEmpty(),
                Url = dto.Path.ValueOrEmpty(),
                CultureCode = cultureCode,
                HttpStatus = dto.StatusCodeKey.ToString(CultureInfo.InvariantCulture),
                IsSystem = false
            };

            TabController.Instance.SaveTabUrl(tabUrl, portalSettings.PortalId, true);

            return new PageUrlResult
            {
                Success = true,
                Id = seqNum // returns Id of the created Url
            };
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteCustomUrl">
          <declaration><![CDATA[public PageUrlResult DeleteCustomUrl(int id, TabInfo tab)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="230" sc="9" el="240" ec="10">Components\PageUrlsController.cs</location>
            <body hash="3dab956b378938e6df17a367abe71834"><![CDATA[{
            var portalSettings = PortalController.Instance.GetCurrentPortalSettings();
            var tabUrl = tab.TabUrls.SingleOrDefault(u => u.SeqNum == id);

            TabController.Instance.DeleteTabUrl(tabUrl, portalSettings.PortalId, true);

            return new PageUrlResult
            {
                Success = true
            };
        }]]></body>
          </codeblock>
        </method>
        <method name="GetCleanPath">
          <declaration><![CDATA[private string GetCleanPath(string path, FriendlyUrlSettings friendlyUrlSettings)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="420" sc="9" el="430" ec="10">Components\PageUrlsController.cs</location>
            <body hash="f27251e7929379ec3903b4f538529d6c"><![CDATA[{
            if (string.IsNullOrEmpty(path))
            {
                return path;
            }

            var urlPath = path.TrimStart('/');
            urlPath = UrlRewriterUtils.CleanExtension(urlPath, friendlyUrlSettings, string.Empty);

            return string.Format("/{0}", urlPath);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetFactory">
          <declaration><![CDATA[protected override Func<IPageUrlsController> GetFactory()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="440" sc="9" el="442" ec="10">Components\PageUrlsController.cs</location>
            <body hash="2a11ade4d12f88bf2a66b1459ce3b539"><![CDATA[{
            return () => new PageUrlsController();
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPageUrls">
          <declaration><![CDATA[public IEnumerable<Url> GetPageUrls(TabInfo tab, int portalId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="23" sc="9" el="31" ec="10">Components\PageUrlsController.cs</location>
            <body hash="da58e0802a66c2f2fa185548ce316e61"><![CDATA[{
            
            var locales = new Lazy<Dictionary<string, Locale>>(() => LocaleController.Instance.GetLocales(portalId));
            var customUrls = GetSortedUrls(tab, portalId, locales, 1, true, false);
            var automaticUrls = GetSortedUrls(tab, portalId, locales, 1, true, true).ToList();

            automaticUrls.AddRange(customUrls);
            return automaticUrls;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetSortedUrls">
          <declaration><![CDATA[private IEnumerable<Url> GetSortedUrls(TabInfo tab, int portalId, Lazy<Dictionary<string, Locale>> locales, int sortColumn, bool sortOrder, bool isSystem)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="243" sc="9" el="382" ec="10">Components\PageUrlsController.cs</location>
            <body hash="63c900d76dcb0dd91efcbd37800abec0"><![CDATA[{
            var friendlyUrlSettings = new FriendlyUrlSettings(tab.PortalID);
            var tabs = new List<Url>();

            if (isSystem)
            {
                //Add generated urls
                foreach (var alias in PortalAliasController.Instance.GetPortalAliasesByPortalId(portalId))
                {
                    var urlLocale = locales.Value.Values.FirstOrDefault(local => local.Code == alias.CultureCode);

                    /*var isRedirected = tab.TabUrls.Any(u => u.HttpStatus == "200"
                                                            && u.CultureCode == ((urlLocale != null) ? urlLocale.Code : String.Empty))
                                            || alias.PortalAliasID != PrimaryAliasId;*/

                    bool isRedirected = false;
                    var isCustom200Urls = tab.TabUrls.Any(u => u.HttpStatus == "200");//are there any custom Urls for this tab?
                    var baseUrl = Globals.AddHTTP(alias.HTTPAlias) + "/Default.aspx?TabId=" + tab.TabID;
                    if (urlLocale != null) baseUrl += "&language=" + urlLocale.Code;
                    string customPath = null;
                    if (isCustom200Urls)
                    {
                        //get the friendlyUrl, including custom Urls
                        customPath = AdvancedFriendlyUrlProvider.ImprovedFriendlyUrl(tab,
                                                                                baseUrl,
                                                                                Globals.glbDefaultPage,
                                                                                alias.HTTPAlias,
                                                                                false,
                                                                                friendlyUrlSettings,
                                                                                Guid.Empty);

                        customPath = customPath.Replace(Globals.AddHTTP(alias.HTTPAlias), "");
                    }
                    //get the friendlyUrl and ignore and custom Urls
                    var path = AdvancedFriendlyUrlProvider.ImprovedFriendlyUrl(tab,
                                                                                baseUrl,
                                                                                Globals.glbDefaultPage,
                                                                                alias.HTTPAlias,
                                                                                true,
                                                                                friendlyUrlSettings,
                                                                                Guid.Empty);

                    path = path.Replace(Globals.AddHTTP(alias.HTTPAlias), "");
                    int status = 200;
                    if (customPath != null && (string.Compare(customPath, path, StringComparison.InvariantCultureIgnoreCase) != 0))
                    {
                        //difference in custom/standard URL, so standard is 301
                        status = 301;
                        isRedirected = true;
                    }
                    //AddUrlToList(tabs, -1, alias, urlLocale, path, String.Empty, (isRedirected) ? 301 : 200);
                    //27139 : only show primary aliases in the tab grid (gets too confusing otherwise)
                    if (alias.IsPrimary) //alias was provided to FriendlyUrlCall, so will always get the correct canonical Url back
                        AddUrlToList(tabs, portalId, -1, alias, urlLocale, path, String.Empty, status, isSystem, friendlyUrlSettings, null);

                    //Add url with diacritics
                    isRedirected = friendlyUrlSettings.RedirectUnfriendly;
                    bool replacedDiacritic;
                    string asciiTabPath = TabPathHelper.ReplaceDiacritics(tab.TabPath, out replacedDiacritic).Replace("//", "/");
                    if (replacedDiacritic)
                    {
                        if (friendlyUrlSettings.AutoAsciiConvert)
                        {
                            if (friendlyUrlSettings.ReplaceSpaceWith != FriendlyUrlSettings.ReplaceSpaceWithNothing)
                            {
                                path = path.Replace(friendlyUrlSettings.ReplaceSpaceWith, String.Empty);
                            }
                            path = path.Replace(asciiTabPath, tab.TabPath.Replace("//", "/"));
                            AddUrlToList(tabs, portalId, -1, alias, urlLocale, path, String.Empty, (isRedirected) ? 301 : 200, isSystem, friendlyUrlSettings, null);
                        }
                    }
                    else
                    {
                        //Add url with space
                        if (tab.TabName.Contains(" ") && friendlyUrlSettings.ReplaceSpaceWith != FriendlyUrlSettings.ReplaceSpaceWithNothing)
                        {
                            path = path.Replace(friendlyUrlSettings.ReplaceSpaceWith, String.Empty);
                            if (customPath != null && string.Compare(customPath, path, StringComparison.InvariantCultureIgnoreCase) != 0)
                            {
                                AddUrlToList(tabs, portalId, -1, alias, urlLocale, path, String.Empty, (isRedirected) ? 301 : 200, isSystem, friendlyUrlSettings, null);
                            }
                        }

                    }
                }
            }

            foreach (var url in tab.TabUrls.Where(u => u.IsSystem == isSystem).OrderBy(u => u.SeqNum))
            {
                int statusCode;
                int.TryParse(url.HttpStatus, out statusCode);

                //27133 : Only show a custom URL 
                if (url.PortalAliasUsage == PortalAliasUsageType.Default)
                {
                    var aliases = PortalAliasController.Instance.GetPortalAliasesByPortalId(portalId);
                    var alias = aliases.FirstOrDefault(primary => primary.IsPrimary == true);
                    if (alias == null)
                    {
                        //if no primary alias just get first in list, need to use something
                        alias = aliases.FirstOrDefault(a => a.PortalID == portalId);
                    }
                    if (alias != null)
                    {
                        var urlLocale = locales.Value.Values.FirstOrDefault(local => local.Code == alias.CultureCode);
                        AddUrlToList(tabs, portalId, url.SeqNum, alias, urlLocale, url.Url, url.QueryString, statusCode, isSystem, friendlyUrlSettings, url.LastModifiedByUserId);
                    }
                }
                else
                {
                    var urlLocale = locales.Value.Values.FirstOrDefault(local => local.Code == url.CultureCode);
                    var alias = PortalAliasController.Instance.GetPortalAliasesByPortalId(portalId)
                        .SingleOrDefault(p => p.PortalAliasID == url.PortalAliasId);

                    AddUrlToList(tabs, portalId, url.SeqNum, alias, urlLocale, url.Url, url.QueryString, statusCode, isSystem, friendlyUrlSettings, url.LastModifiedByUserId);
                }
            }

            var pairComparer = new KeyValuePairComparer();
            switch ((SortingFields)sortColumn)
            {
                case SortingFields.Url:
                case SortingFields.None:
                    return sortOrder ?
                        tabs.OrderBy(url => url.SiteAlias, pairComparer).ThenBy(url => url.Path) :
                        tabs.OrderByDescending(url => url.SiteAlias, pairComparer).ThenByDescending(url => url.Path);
                case SortingFields.Locale:
                    return sortOrder ?
                        tabs.OrderBy(url => url.Locale, pairComparer) :
                        tabs.OrderByDescending(url => url.Locale, pairComparer);
                case SortingFields.Status:
                    return sortOrder ?
                        tabs.OrderBy(url => url.StatusCode, pairComparer) :
                        tabs.OrderByDescending(url => url.StatusCode, pairComparer);
                default:
                    return sortOrder ?
                        tabs.OrderBy(url => url.SiteAlias, pairComparer).ThenBy(url => url.Path) :
                        tabs.OrderByDescending(url => url.SiteAlias, pairComparer).ThenByDescending(url => url.Path);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateCustomUrl">
          <declaration><![CDATA[public PageUrlResult UpdateCustomUrl(SaveUrlDto dto, TabInfo tab)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="130" sc="9" el="227" ec="10">Components\PageUrlsController.cs</location>
            <body hash="8d38028dadfa876d0b5357a42c165696"><![CDATA[{
            var portalSettings = PortalController.Instance.GetCurrentPortalSettings();
            var urlPath = dto.Path.ValueOrEmpty().TrimStart('/');
            bool modified;
            //Clean Url
            var options =
                UrlRewriterUtils.ExtendOptionsForCustomURLs(
                    UrlRewriterUtils.GetOptionsFromSettings(new FriendlyUrlSettings(portalSettings.PortalId)));

            //now clean the path
            urlPath = FriendlyUrlController.CleanNameForUrl(urlPath, options, out modified);
            if (modified)
            {
                return new PageUrlResult
                    {
                        Success = false,
                        ErrorMessage = Localization.GetString("CustomUrlPathCleaned.Error"),
                        SuggestedUrlPath = "/" + urlPath
                    };
            }

            //Validate for uniqueness
            urlPath = FriendlyUrlController.ValidateUrl(urlPath, -1, portalSettings, out modified);
            if (modified)
            {
                return new PageUrlResult
                    {
                        Success = false,
                        ErrorMessage = Localization.GetString("UrlPathNotUnique.Error"),
                        SuggestedUrlPath = "/" + urlPath
                    };
            }

            var cultureCode = LocaleController.Instance.GetLocales(portalSettings.PortalId)
                .Where(l => l.Value.KeyID == dto.LocaleKey)
                .Select(l => l.Value.Code)
                .SingleOrDefault();

            if (dto.StatusCodeKey.ToString(CultureInfo.InvariantCulture) == "200")
            {
                //We need to check if we are updating a current url or creating a new 200
                var tabUrl = tab.TabUrls.SingleOrDefault(t => t.SeqNum == dto.Id
                                                              && t.HttpStatus == "200");
                if (tabUrl == null)
                {
                    //Just create Url
                    tabUrl = new TabUrlInfo
                    {
                        TabId = tab.TabID,
                        SeqNum = dto.Id,
                        PortalAliasId = dto.SiteAliasKey,
                        PortalAliasUsage = (PortalAliasUsageType)dto.SiteAliasUsage,
                        QueryString = dto.QueryString.ValueOrEmpty(),
                        Url = dto.Path.ValueOrEmpty(),
                        CultureCode = cultureCode,
                        HttpStatus = dto.StatusCodeKey.ToString(CultureInfo.InvariantCulture),
                        IsSystem = dto.IsSystem // false
                    };
                    TabController.Instance.SaveTabUrl(tabUrl, portalSettings.PortalId, true);
                }
                else
                {
                    //Change the original 200 url to a redirect
                    tabUrl.HttpStatus = "301";
                    tabUrl.SeqNum = dto.Id;
                    TabController.Instance.SaveTabUrl(tabUrl, portalSettings.PortalId, true);

                    //Add new custom url
                    tabUrl.Url = dto.Path.ValueOrEmpty();
                    tabUrl.HttpStatus = "200";
                    tabUrl.SeqNum = tab.TabUrls.Max(t => t.SeqNum) + 1;
                    TabController.Instance.SaveTabUrl(tabUrl, portalSettings.PortalId, true);
                }
            }
            else
            {
                //Just update the url
                var tabUrl = new TabUrlInfo
                {
                    TabId = tab.TabID,
                    SeqNum = dto.Id,
                    PortalAliasId = dto.SiteAliasKey,
                    PortalAliasUsage = (PortalAliasUsageType)dto.SiteAliasUsage,
                    QueryString = dto.QueryString.ValueOrEmpty(),
                    Url = dto.Path.ValueOrEmpty(),
                    CultureCode = cultureCode,
                    HttpStatus = dto.StatusCodeKey.ToString(CultureInfo.InvariantCulture),
                    IsSystem = dto.IsSystem // false
                };
                TabController.Instance.SaveTabUrl(tabUrl, portalSettings.PortalId, true);
            }


            return new PageUrlResult
            {
                Success = true
            };
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="StatusCodes">
          <declaration><![CDATA[protected IEnumerable<KeyValuePair<int, string>> StatusCodes]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="411" sc="13" el="417" ec="14">Components\PageUrlsController.cs</location>
            <body hash="86a0f3953c060e8aaafd5ff31b820145"><![CDATA[{
                return new[]
                {
                    new KeyValuePair<int, string>(200, "Active (200)"),
                    new KeyValuePair<int, string>(301, "Redirect (301)")
                };
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="TemplateController">
      <declaration><![CDATA[public class TemplateController : ServiceLocator<ITemplateController, TemplateController>, ITemplateController]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public TemplateController()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="28" sc="9" el="31" ec="10">Components\TemplateController.cs</location>
            <body hash="0a4be0faa3f18588e14be15537fa2212"><![CDATA[public TemplateController()
        {
            _tabController = TabController.Instance;
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="CreatePageFromTemplate">
          <declaration><![CDATA[public void CreatePageFromTemplate(int templateId, TabInfo tab, int portalId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="152" sc="9" el="211" ec="10">Components\TemplateController.cs</location>
            <body hash="7c62501e1fb1646906bbcb815fecfbc9"><![CDATA[{
            // create the page from a template
            if (templateId != Null.NullInteger)
            {
                var xmlDoc = new XmlDocument();
                try
                {
                    // open the XML file
                    var fileId = Convert.ToInt32(templateId);
                    var templateFile = FileManager.Instance.GetFile(fileId);
                    xmlDoc.Load(FileManager.Instance.GetFileContent(templateFile));
                }
                catch (Exception ex)
                {
                    DotNetNuke.Services.Exceptions.Exceptions.LogException(ex);
                    throw new PageException(Localization.GetString("BadTemplate"));
                }
                TabController.DeserializePanes(xmlDoc.SelectSingleNode("//portal/tabs/tab/panes"), tab.PortalID, tab.TabID, PortalTemplateModuleAction.Ignore, new Hashtable());
                //save tab permissions
                RibbonBarManager.DeserializeTabPermissions(xmlDoc.SelectNodes("//portal/tabs/tab/tabpermissions/permission"), tab);

                var tabIndex = 0;
                var exceptions = string.Empty;
                // ReSharper disable once PossibleNullReferenceException
                foreach (XmlNode tabNode in xmlDoc.SelectSingleNode("//portal/tabs").ChildNodes)
                {
                    //Create second tab onward tabs. Note first tab is already created above.
                    if (tabIndex > 0)
                    {
                        try
                        {
                            TabController.DeserializeTab(tabNode, null, portalId, PortalTemplateModuleAction.Replace);
                        }
                        catch (Exception ex)
                        {
                            DotNetNuke.Services.Exceptions.Exceptions.LogException(ex);
                            exceptions += string.Format("Template Tab # {0}. Error {1}<br/>", tabIndex + 1, ex.Message);
                        }
                    }
                    else
                    {
                        if (string.IsNullOrEmpty(tab.SkinSrc) && !String.IsNullOrEmpty(XmlUtils.GetNodeValue(tabNode, "skinsrc", "")))
                        {
                            tab.SkinSrc = XmlUtils.GetNodeValue(tabNode, "skinsrc", "");
                        }
                        if (string.IsNullOrEmpty(tab.ContainerSrc) && !String.IsNullOrEmpty(XmlUtils.GetNodeValue(tabNode, "containersrc", "")))
                        {
                            tab.ContainerSrc = XmlUtils.GetNodeValue(tabNode, "containersrc", "");
                        }
                        TabController.Instance.UpdateTab(tab);
                    }
                    tabIndex++;
                }

                if (!string.IsNullOrEmpty(exceptions))
                {
                    throw new PageException(exceptions);
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="CreateTemplateFolder">
          <declaration><![CDATA[private static IFolderInfo CreateTemplateFolder()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="83" sc="9" el="85" ec="10">Components\TemplateController.cs</location>
            <body hash="7f9eccba9804c9bc5ef7c87b03890139"><![CDATA[{
            return FolderManager.Instance.AddFolder(PortalSettings.Current.PortalId, TemplatesFolderPath);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetDefaultTemplateId">
          <declaration><![CDATA[public int GetDefaultTemplateId(IEnumerable<Template> templates)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="141" sc="9" el="149" ec="10">Components\TemplateController.cs</location>
            <body hash="a35aa62b256636b1669bb6f3f814b8d7"><![CDATA[{
            var firstOrDefault = templates.FirstOrDefault(t => t.Id == "Default");
            if (firstOrDefault != null)
            {
                return firstOrDefault.Value;
            }

            return Null.NullInteger;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetFactory">
          <declaration><![CDATA[protected override Func<ITemplateController> GetFactory()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="97" sc="9" el="99" ec="10">Components\TemplateController.cs</location>
            <body hash="00915d38aec42e604c0d977b514ac871"><![CDATA[{
            return () => new TemplateController();
        }]]></body>
          </codeblock>
        </method>
        <method name="GetTemplateFolder">
          <declaration><![CDATA[private static IFolderInfo GetTemplateFolder()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="78" sc="9" el="80" ec="10">Components\TemplateController.cs</location>
            <body hash="b531cca2fd2f51f1da4330b648248423"><![CDATA[{
            return FolderManager.Instance.GetFolder(PortalSettings.Current.PortalId, TemplatesFolderPath);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetTemplates">
          <declaration><![CDATA[public IEnumerable<Template> GetTemplates()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="104" sc="9" el="109" ec="10">Components\TemplateController.cs</location>
            <body hash="2b45ddbda37019fcde625e39aea922e9"><![CDATA[{
            var portalSettings = PortalController.Instance.GetCurrentPortalSettings();
            var templateFolder = FolderManager.Instance.GetFolder(portalSettings.PortalId, TemplatesFolderPath);
           
            return LoadTemplates(portalSettings.PortalId, templateFolder);
        }]]></body>
          </codeblock>
        </method>
        <method name="LoadTemplates">
          <declaration><![CDATA[private IEnumerable<Template> LoadTemplates(int portalId, IFolderInfo templateFolder)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="112" sc="9" el="138" ec="10">Components\TemplateController.cs</location>
            <body hash="ad0e681a27758a9334db3fb0efc3447b"><![CDATA[{
            var templates = new List<Template>();
            if (templateFolder == null)
            {
                return templates;
            }

            templates.Add(new Template
            {
                Id = Localization.GetString("None_Specified"),
                Value = Null.NullInteger
            });

            var files = Globals.GetFileList(portalId, "page.template", false, templateFolder.FolderPath);
            foreach (FileItem file in files)
            {
                int i;
                int.TryParse(file.Value, out i);
                templates.Add(new Template
                {
                    Id = file.Text.Replace(".page.template", ""),
                    Value = i
                });
            }

            return templates;
        }]]></body>
          </codeblock>
        </method>
        <method name="SaveAsTemplate">
          <declaration><![CDATA[public string SaveAsTemplate(PageTemplate template)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="34" sc="9" el="76" ec="10">Components\TemplateController.cs</location>
            <body hash="e5caaeb40be5d3333a486088761d106b"><![CDATA[{
            string filename;
            try {
                var folder = GetTemplateFolder();

                if (folder == null)
                {
                    folder = CreateTemplateFolder();
                }

                filename = folder.FolderPath + template.Name + ".page.template";
                filename = filename.Replace("/", "\\");

                var xmlTemplate = new XmlDocument();
                var nodePortal = xmlTemplate.AppendChild(xmlTemplate.CreateElement("portal"));
                nodePortal.Attributes?.Append(XmlUtils.CreateAttribute(xmlTemplate, "version", "3.0"));

                //Add template description
                var node = xmlTemplate.CreateElement("description");
                node.InnerXml = HttpUtility.HtmlEncode(template.Description);
                nodePortal.AppendChild(node);

                //Serialize tabs
                var nodeTabs = nodePortal.AppendChild(xmlTemplate.CreateElement("tabs"));
                SerializeTab(template, xmlTemplate, nodeTabs);
           
                //add file to Files table
                using (var fileContent = new MemoryStream(Encoding.UTF8.GetBytes(xmlTemplate.OuterXml)))
                {
                    FileManager.Instance.AddFile(folder, template.Name + ".page.template", fileContent, true, false, "application/octet-stream");
                }
            }
            catch (DotNetNuke.Services.FileSystem.PermissionsNotMetException)
            {
                throw new TemplateException("Error accessing to the templates folder.");
            }
            catch (Exception)
            {
                throw new TemplateException("Error accessing to the templates folder.");
            }

            return filename;
        }]]></body>
          </codeblock>
        </method>
        <method name="SerializeTab">
          <declaration><![CDATA[private void SerializeTab(PageTemplate template, XmlDocument xmlTemplate, XmlNode nodeTabs)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="88" sc="9" el="94" ec="10">Components\TemplateController.cs</location>
            <body hash="9485b849ec9fb62d2de5952700f0cb49"><![CDATA[{
            var portalSettings = PortalController.Instance.GetCurrentPortalSettings();
            var tab = _tabController.GetTab(template.TabId, portalSettings.PortalId, false);
            var xmlTab = new XmlDocument();
            var nodeTab = TabController.SerializeTab(xmlTab, tab, template.IncludeContent);
            nodeTabs.AppendChild(xmlTemplate.ImportNode(nodeTab, true));
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_tabController">
          <declaration><![CDATA[private readonly ITabController _tabController;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="TemplatesFolderPath">
          <declaration><![CDATA[private const string TemplatesFolderPath = "Templates/";]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="TermHelper">
      <declaration><![CDATA[public class TermHelper]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public TermHelper()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="ToTabTerms">
          <declaration><![CDATA[public static List<Term> ToTabTerms(string pageSettingsTags, int tabPortalId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="16" sc="9" el="79" ec="10">Components\TermHelper.cs</location>
            <body hash="2a8371505aa20acfc7d84607602186f0"><![CDATA[{
            var terms = new List<Term>();

            if (string.IsNullOrEmpty(pageSettingsTags))
            {
                return terms;
            }

            var termController = new TermController();
            var vocabularyController = Util.GetVocabularyController();
            var vocabulary = (vocabularyController.GetVocabularies()
                                .Cast<Vocabulary>()
                                .Where(v => v.Name == PageTagsVocabulary))
                                .SingleOrDefault();

            var vocabularyId = Null.NullInteger;
            if (vocabulary == null)
            {
                var scopeType = Util.GetScopeTypeController().GetScopeTypes().SingleOrDefault(s => s.ScopeType == "Portal");
                if (scopeType == null)
                {
                    throw new Exception("Can't create default vocabulary as scope type 'Portal' can't finded.");
                }

                vocabularyId = vocabularyController.AddVocabulary(
                    new Vocabulary(PageTagsVocabulary, string.Empty, VocabularyType.Simple)
                    {
                        ScopeTypeId = scopeType.ScopeTypeId,
                        ScopeId = tabPortalId
                    });
            }
            else
            {
                vocabularyId = vocabulary.VocabularyId;
            }

            //get all terms info
            var allTerms = new List<Term>();
            var vocabularies = from v in vocabularyController.GetVocabularies()
                               where (v.ScopeType.ScopeType == "Portal" && v.ScopeId == tabPortalId && !v.Name.Equals("Tags", StringComparison.InvariantCultureIgnoreCase))
                               select v;
            foreach (var v in vocabularies)
            {
                allTerms.AddRange(termController.GetTermsByVocabulary(v.VocabularyId));
            }

            foreach (var tag in pageSettingsTags.Trim().Split(','))
            {
                if (!string.IsNullOrEmpty(tag))
                {
                    var term = allTerms.FirstOrDefault(t => t.Name.Equals(tag, StringComparison.InvariantCultureIgnoreCase));
                    if (term == null)
                    {
                        var termId = termController.AddTerm(new Term(tag, string.Empty, vocabularyId));
                        term = termController.GetTerm(termId);
                    }

                    terms.Add(term);
                }
            }


            return terms;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="PageTagsVocabulary">
          <declaration><![CDATA[public const string PageTagsVocabulary = "PageTags";]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="XssCleaner">
      <declaration><![CDATA[public static class XssCleaner]]></declaration>
      <documentation>
      </documentation>
      <constructors>
      </constructors>
      <methods>
        <method name="Clean">
          <declaration><![CDATA[public static void Clean(this PageSettings input)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="9" sc="9" el="20" ec="10">Components\XssCleaner.cs</location>
            <body hash="9ee478b2ba18cdd7d88594848592a56a"><![CDATA[{
            input.Title = Clean(input.Title);
            input.Description = Clean(input.Description);
            input.Name = Clean(input.Name);
            input.Keywords = Clean(input.Keywords);
            input.Tags = Clean(input.Tags);
            input.Url = Clean(input.Url);
            input.PageType = Clean(input.PageType);
            input.Alias = Clean(input.Alias);
            input.LocalizedName = Clean(input.LocalizedName);
            input.PageStyleSheet = Clean(input.PageStyleSheet);
        }]]></body>
          </codeblock>
        </method>
        <method name="Clean">
          <declaration><![CDATA[public static void Clean(this BulkPage input)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="23" sc="9" el="27" ec="10">Components\XssCleaner.cs</location>
            <body hash="aee8f68c9f29c1487bcb7c20593466a1"><![CDATA[{
            input.BulkPages = Clean(input.BulkPages);
            input.Keywords = Clean(input.Keywords);
            input.Tags = Clean(input.Tags);
        }]]></body>
          </codeblock>
        </method>
        <method name="Clean">
          <declaration><![CDATA[public static void Clean(this PageTemplate input)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="30" sc="9" el="33" ec="10">Components\XssCleaner.cs</location>
            <body hash="541cdd0a8513e5f8d3d8c91ec1a1a22d"><![CDATA[{
            input.Description = Clean(input.Description);
            input.Name = Clean(input.Name);
        }]]></body>
          </codeblock>
        </method>
        <method name="Clean">
          <declaration><![CDATA[public static string Clean(string input, PortalSecurity.FilterFlag filterFlag = PortalSecurity.FilterFlag.NoMarkup)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="37" sc="9" el="40" ec="10">Components\XssCleaner.cs</location>
            <body hash="2ace19cdebcde45bac426428f77efcde"><![CDATA[{
            var ps = new PortalSecurity();
            return ps.InputFilter(input, filterFlag);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="Dnn.PersonaBar.Pages.Components.Dto">
    <class name="PageUrlResult">
      <declaration><![CDATA[public class PageUrlResult]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public PageUrlResult()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="ErrorMessage">
          <declaration><![CDATA[public string ErrorMessage]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="6" sc="38" el="6" ec="42">Components\Dto\PageUrlResult.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="6" sc="43" el="6" ec="47">Components\Dto\PageUrlResult.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Id">
          <declaration><![CDATA[public int? Id]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="8" sc="26" el="8" ec="30">Components\Dto\PageUrlResult.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="8" sc="31" el="8" ec="35">Components\Dto\PageUrlResult.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Success">
          <declaration><![CDATA[public bool Success]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="5" sc="31" el="5" ec="35">Components\Dto\PageUrlResult.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="5" sc="36" el="5" ec="40">Components\Dto\PageUrlResult.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="SuggestedUrlPath">
          <declaration><![CDATA[public string SuggestedUrlPath]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="7" sc="42" el="7" ec="46">Components\Dto\PageUrlResult.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="7" sc="47" el="7" ec="51">Components\Dto\PageUrlResult.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="Template">
      <declaration><![CDATA[public class Template]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public Template()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="Id">
          <declaration><![CDATA[public string Id]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="5" sc="28" el="5" ec="32">Components\Dto\Template.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="5" sc="33" el="5" ec="37">Components\Dto\Template.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Value">
          <declaration><![CDATA[public int Value]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="6" sc="28" el="6" ec="32">Components\Dto\Template.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="6" sc="33" el="6" ec="37">Components\Dto\Template.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="UrlIdDto">
      <declaration><![CDATA[public class UrlIdDto]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public UrlIdDto()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="Id">
          <declaration><![CDATA[public int Id]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="6" sc="25" el="6" ec="29">Components\Dto\UrlIdDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="6" sc="30" el="6" ec="34">Components\Dto\UrlIdDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="TabId">
          <declaration><![CDATA[public int TabId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="5" sc="28" el="5" ec="32">Components\Dto\UrlIdDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="5" sc="33" el="5" ec="37">Components\Dto\UrlIdDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="Dnn.PersonaBar.Pages.Components.Exceptions">
    <class name="BulkPagesException">
      <declaration><![CDATA[public class BulkPagesException : Exception]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public BulkPagesException(string field, string message) : base(message)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="9" sc="67" el="12" ec="10">Components\Exceptions\BulkPagesException.cs</location>
            <body hash="05839da79ad40890e25d00c3c11072bd"><![CDATA[base(message)
        {
            Field = field;
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="Field">
          <declaration><![CDATA[public string Field]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="7" sc="31" el="7" ec="35">Components\Exceptions\BulkPagesException.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="7" sc="36" el="7" ec="40">Components\Exceptions\BulkPagesException.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="PageException">
      <declaration><![CDATA[public class PageException : Exception]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public PageException(string message) : base(message)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="7" sc="47" el="9" ec="10">Components\Exceptions\PageException.cs</location>
            <body hash="e875ff17a3e358cc55d78617129d923f"><![CDATA[base(message)
        {
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="PageModuleNotFoundException">
      <declaration><![CDATA[public class PageModuleNotFoundException : Exception]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public PageModuleNotFoundException()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="PageNotFoundException">
      <declaration><![CDATA[public class PageNotFoundException : Exception]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public PageNotFoundException()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="PageValidationException">
      <declaration><![CDATA[public class PageValidationException : Exception]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public PageValidationException(string field, string message) : base(message)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="9" sc="72" el="12" ec="10">Components\Exceptions\PageValidationException.cs</location>
            <body hash="05839da79ad40890e25d00c3c11072bd"><![CDATA[base(message)
        {
            Field = field;
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="Field">
          <declaration><![CDATA[public string Field]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="7" sc="31" el="7" ec="35">Components\Exceptions\PageValidationException.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="7" sc="36" el="7" ec="40">Components\Exceptions\PageValidationException.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="TemplateException">
      <declaration><![CDATA[public class TemplateException : Exception]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public TemplateException(string message) : base(message)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="7" sc="51" el="9" ec="10">Components\Exceptions\TemplateException.cs</location>
            <body hash="e875ff17a3e358cc55d78617129d923f"><![CDATA[base(message)
        {
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="Dnn.PersonaBar.Pages.Components.Security">
    <class name="ISecurityService">
      <declaration><![CDATA[public interface ISecurityService]]></declaration>
      <documentation>
      </documentation>
      <constructors>
      </constructors>
      <methods>
        <method name="CanAddPage">
          <declaration><![CDATA[bool CanAddPage(int tabId);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="CanAdminPage">
          <declaration><![CDATA[bool CanAdminPage(int tabId);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="CanCopyPage">
          <declaration><![CDATA[bool CanCopyPage(int tabId);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="CanDeletePage">
          <declaration><![CDATA[bool CanDeletePage(int tabId);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="CanExportPage">
          <declaration><![CDATA[bool CanExportPage(int tabId);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="CanManagePage">
          <declaration><![CDATA[bool CanManagePage(int tabId);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="CanSavePageDetails">
          <declaration><![CDATA[bool CanSavePageDetails(PageSettings pageSettings);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="GetCurrentPagePermissions">
          <declaration><![CDATA[JObject GetCurrentPagePermissions();]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="IsPageAdminUser">
          <declaration><![CDATA[bool IsPageAdminUser();]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="IsVisible">
          <declaration><![CDATA[bool IsVisible(MenuItem menuItem);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="SecurityService">
      <declaration><![CDATA[public class SecurityService : ISecurityService]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public SecurityService()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="18" sc="9" el="21" ec="10">Components\Security\SecurityService.cs</location>
            <body hash="538379d3d40662fee1240a94e2dbf3df"><![CDATA[public SecurityService()
        {
            _tabController = TabController.Instance;
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="CanAddPage">
          <declaration><![CDATA[public virtual bool CanAddPage(int tabId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="93" sc="9" el="95" ec="10">Components\Security\SecurityService.cs</location>
            <body hash="0b74926ae2d83658f131d75fe3a5363f"><![CDATA[{
            return CanAdminPage(tabId) || TabPermissionController.CanAddPage(GetTabById(tabId));
        }]]></body>
          </codeblock>
        </method>
        <method name="CanAdminPage">
          <declaration><![CDATA[public virtual bool CanAdminPage(int tabId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="78" sc="9" el="80" ec="10">Components\Security\SecurityService.cs</location>
            <body hash="c6dfbf8492ea9afd801f3b6fd8d67e81"><![CDATA[{
            return IsPageAdminUser() || TabPermissionController.CanAdminPage(GetTabById(tabId));
        }]]></body>
          </codeblock>
        </method>
        <method name="CanCopyPage">
          <declaration><![CDATA[public virtual bool CanCopyPage(int tabId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="98" sc="9" el="100" ec="10">Components\Security\SecurityService.cs</location>
            <body hash="7d81f8c92ab3c7666ef7b7d461648ff4"><![CDATA[{
            return CanAdminPage(tabId) || TabPermissionController.CanCopyPage(GetTabById(tabId));
        }]]></body>
          </codeblock>
        </method>
        <method name="CanDeletePage">
          <declaration><![CDATA[public virtual bool CanDeletePage(int tabId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="88" sc="9" el="90" ec="10">Components\Security\SecurityService.cs</location>
            <body hash="97c9e0d4c4f707193618c50a4770649a"><![CDATA[{
            return CanAdminPage(tabId) || TabPermissionController.CanDeletePage(GetTabById(tabId));
        }]]></body>
          </codeblock>
        </method>
        <method name="CanExportPage">
          <declaration><![CDATA[public virtual bool CanExportPage(int tabId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="103" sc="9" el="105" ec="10">Components\Security\SecurityService.cs</location>
            <body hash="1734c0d1f0a2949fc6e546414b58dba5"><![CDATA[{
            return CanAdminPage(tabId) || TabPermissionController.CanExportPage(GetTabById(tabId));
        }]]></body>
          </codeblock>
        </method>
        <method name="CanManagePage">
          <declaration><![CDATA[public virtual bool CanManagePage(int tabId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="83" sc="9" el="85" ec="10">Components\Security\SecurityService.cs</location>
            <body hash="63a120cc09a7350e226c39f524242694"><![CDATA[{
            return CanAdminPage(tabId) || TabPermissionController.CanManagePage(GetTabById(tabId));
        }]]></body>
          </codeblock>
        </method>
        <method name="CanSavePageDetails">
          <declaration><![CDATA[public virtual bool CanSavePageDetails(PageSettings pageSettings)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="108" sc="9" el="124" ec="10">Components\Security\SecurityService.cs</location>
            <body hash="f5177c16e25ab6fdee182023cb2ecb67"><![CDATA[{
            var tabId = pageSettings.TabId;
            var pageType = pageSettings.PageType;
            var parentId = pageSettings.ParentId ?? 0;
            var creatingPage = parentId > 0 && tabId <= 0 && pageType == "normal";
            var updatingPage = tabId > 0 && pageType == "normal";
            var creatingTemplate = tabId <= 0 && pageSettings.TemplateTabId > 0 && pageType == "template";
            var duplicatingPage = tabId <= 0 && pageSettings.TemplateTabId > 0 && pageType == "normal";

            return (
                IsPageAdminUser() ||
                creatingPage && CanAddPage(parentId) ||
                creatingTemplate && CanExportPage(pageSettings.TemplateTabId) ||
                updatingPage && CanManagePage(tabId) ||
                duplicatingPage && CanCopyPage(pageSettings.TemplateTabId)
            );
        }]]></body>
          </codeblock>
        </method>
        <method name="GetCurrentPagePermissions">
          <declaration><![CDATA[public virtual JObject GetCurrentPagePermissions()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="61" sc="9" el="75" ec="10">Components\Security\SecurityService.cs</location>
            <body hash="ffc086e98379d85f28317148cfeecb7e"><![CDATA[{
            var permissions = new JObject
            {
                {"addContentToPage", TabPermissionController.CanAddContentToPage()},
                {"addPage", TabPermissionController.CanAddPage()},
                {"adminPage", TabPermissionController.CanAdminPage()},
                {"copyPage", TabPermissionController.CanCopyPage()},
                {"deletePage", TabPermissionController.CanDeletePage()},
                {"exportPage", TabPermissionController.CanExportPage()},
                {"importPage", TabPermissionController.CanImportPage()},
                {"managePage", TabPermissionController.CanManagePage()}
            };

            return permissions;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetTabById">
          <declaration><![CDATA[private TabInfo GetTabById(int pageId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="127" sc="9" el="130" ec="10">Components\Security\SecurityService.cs</location>
            <body hash="25ae55c68086fe2ab4b2bc0d33cbf572"><![CDATA[{
            var portalSettings = PortalController.Instance.GetCurrentPortalSettings();
            return pageId <= 0 ? null : _tabController.GetTab(pageId, portalSettings.PortalId, false);
        }]]></body>
          </codeblock>
        </method>
        <method name="IsPageAdmin">
          <declaration><![CDATA[private bool IsPageAdmin()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="49" sc="9" el="58" ec="10">Components\Security\SecurityService.cs</location>
            <body hash="b6741d1c845c81f421efed0f84bb57e4"><![CDATA[{
            return //TabPermissionController.CanAddContentToPage() ||
                    TabPermissionController.CanAddPage()
                    || TabPermissionController.CanAdminPage()
                    || TabPermissionController.CanCopyPage()
                    || TabPermissionController.CanDeletePage()
                    || TabPermissionController.CanExportPage()
                    || TabPermissionController.CanImportPage()
                    || TabPermissionController.CanManagePage();
        }]]></body>
          </codeblock>
        </method>
        <method name="IsPageAdminUser">
          <declaration><![CDATA[public virtual bool IsPageAdminUser()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="38" sc="9" el="41" ec="10">Components\Security\SecurityService.cs</location>
            <body hash="d4c78a0d5351d270343f678a4a02cf22"><![CDATA[{
            var user = UserController.Instance.GetCurrentUserInfo();
            return user.IsSuperUser || user.IsInRole(PortalSettings.Current?.AdministratorRoleName);
        }]]></body>
          </codeblock>
        </method>
        <method name="IsVisible">
          <declaration><![CDATA[public virtual bool IsVisible(MenuItem menuItem)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="44" sc="9" el="46" ec="10">Components\Security\SecurityService.cs</location>
            <body hash="c19d936435574868aceb21ec33527d47"><![CDATA[{
            return IsPageAdminUser() || IsPageAdmin();
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_tabController">
          <declaration><![CDATA[private readonly ITabController _tabController;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="Instance">
          <declaration><![CDATA[public static ISecurityService Instance]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="26" sc="13" el="34" ec="14">Components\Security\SecurityService.cs</location>
            <body hash="833e4de20f020d743cdca09e8ad4f2b0"><![CDATA[{
                var controller = ComponentFactory.GetComponent<ISecurityService>("SecurityService");
                if (controller == null)
                {
                    ComponentFactory.RegisterComponent<ISecurityService, SecurityService>("SecurityService");
                }

                return ComponentFactory.GetComponent<ISecurityService>("SecurityService");
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="Dnn.PersonaBar.Pages.MenuControllers">
    <class name="PagesMenuController">
      <declaration><![CDATA[public class PagesMenuController : IMenuItemController]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public PagesMenuController()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="32" sc="9" el="35" ec="10">MenuControllers\PagesMenuController.cs</location>
            <body hash="b920b43f824aa3c5396c4b4196706be7"><![CDATA[public PagesMenuController()
        {
            _securityService = SecurityService.Instance;
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="GetSettings">
          <declaration><![CDATA[public IDictionary<string, object> GetSettings(MenuItem menuItem)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="48" sc="9" el="58" ec="10">MenuControllers\PagesMenuController.cs</location>
            <body hash="4c54ce877ec0ec52e48f662abd531f52"><![CDATA[{
            var settings = new Dictionary<string, object>
            {
                {"isSuperUser", _securityService.IsPageAdminUser()},
                {"portalName", PortalSettings.Current.PortalName},
                {"currentPagePermissions", _securityService.GetCurrentPagePermissions()},
                {"currentPageName", PortalSettings.Current?.ActiveTab?.TabName }
            };

            return settings;
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateParameters">
          <declaration><![CDATA[public void UpdateParameters(MenuItem menuItem)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="38" sc="9" el="40" ec="10">MenuControllers\PagesMenuController.cs</location>
            <body hash="4a8f06184b6087940b8e4519251d0924"><![CDATA[{
            
        }]]></body>
          </codeblock>
        </method>
        <method name="Visible">
          <declaration><![CDATA[public bool Visible(MenuItem menuItem)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="43" sc="9" el="45" ec="10">MenuControllers\PagesMenuController.cs</location>
            <body hash="539030f4e73a4fe86717d2bb9d241a48"><![CDATA[{
            return _securityService.IsVisible(menuItem);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_securityService">
          <declaration><![CDATA[private readonly ISecurityService _securityService;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="Dnn.PersonaBar.Pages.Services">
    <class name="PagesController">
      <declaration><![CDATA[public class PagesController : PersonaBarApiController]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public PagesController()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="61" sc="9" el="72" ec="10">Services\PagesController.cs</location>
            <body hash="c1e1dd6157d673c1255e700c5b8e8743"><![CDATA[public PagesController()
        {
            _pagesController = Components.PagesController.Instance;
            _themesController = ThemesController.Instance;
            _bulkPagesController = BulkPagesController.Instance;
            _templateController = TemplateController.Instance;
            _defaultPortalThemeController = DefaultPortalThemeController.Instance;

            _tabController = TabController.Instance;
            _localeController = LocaleController.Instance;
            _securityService = SecurityService.Instance;
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".cctor">
          <declaration><![CDATA[static PagesController()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="48" sc="9" el="48" ec="104">Services\PagesController.cs</location>
            <body hash="bbb3112845b2bf13cfb5665d9435d7b0"><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof(PagesController))]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="AddMissingLanguages">
          <declaration><![CDATA[public HttpResponseMessage AddMissingLanguages([FromUri] int tabId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="519" sc="9" el="536" ec="10">Services\PagesController.cs</location>
            <body hash="ddd0a437198dcd2f3c0ca2562495c033"><![CDATA[{
            try
            {
                if (!_securityService.CanManagePage(tabId))
                {
                    return GetForbiddenResponse();
                }

                _tabController.AddMissingLanguages(PortalId, tabId);
                _tabController.ClearCache(PortalId);
                return Request.CreateResponse(HttpStatusCode.OK, new { Success = true });
            }
            catch (Exception ex)
            {
                Logger.Error(ex);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, ex.ToString());
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="AddTranslationSubmittedNotification">
          <declaration><![CDATA[private void AddTranslationSubmittedNotification(TabInfo tabInfo, UserInfo translator, string comment)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1120" sc="9" el="1140" ec="10">Services\PagesController.cs</location>
            <body hash="e90fa154ac1bbe755917a1de6b059a7b"><![CDATA[{
            var notificationsController = NotificationsController.Instance;
            var notificationType = notificationsController.GetNotificationType("TranslationSubmitted");
            var subject = LocalizeString("NewContentMessage.Subject");
            var body = string.Format(LocalizeString("NewContentMessage.Body"),
                tabInfo.TabName,
                Globals.NavigateURL(tabInfo.TabID, false, PortalSettings, Null.NullString, tabInfo.CultureCode),
                comment);

            var sender = UserController.GetUserById(PortalSettings.PortalId, PortalSettings.AdministratorId);
            var notification = new Notification
            {
                NotificationTypeID = notificationType.NotificationTypeId,
                Subject = subject,
                Body = body,
                IncludeDismissAction = true,
                SenderUserID = sender.UserID
            };

            notificationsController.SendNotification(notification, PortalSettings.PortalId, null, new List<UserInfo> { translator });
        }]]></body>
          </codeblock>
        </method>
        <method name="CopyPermissionsToDescendantPages">
          <declaration><![CDATA[public HttpResponseMessage CopyPermissionsToDescendantPages(CopyPermissionsRequest copyPermissions)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="281" sc="9" el="300" ec="10">Services\PagesController.cs</location>
            <body hash="c1b70d9c32efdc0719269d79adc716ba"><![CDATA[{
            if (!_securityService.CanAdminPage(copyPermissions.PageId))
            {
                return GetForbiddenResponse();
            }

            try
            {
                _pagesController.CopyPermissionsToDescendantPages(copyPermissions.PageId);
                return Request.CreateResponse(HttpStatusCode.OK, new {Status = 0});
            }
            catch (PageNotFoundException)
            {
                return Request.CreateResponse(HttpStatusCode.NotFound);
            }
            catch (PermissionsNotMetException)
            {
                return Request.CreateResponse(HttpStatusCode.Forbidden);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="CopyThemeToDescendantPages">
          <declaration><![CDATA[public HttpResponseMessage CopyThemeToDescendantPages(CopyThemeRequest copyTheme)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="268" sc="9" el="276" ec="10">Services\PagesController.cs</location>
            <body hash="2c76ea75db821e561738383be9d1b75e"><![CDATA[{
            if (!_securityService.CanManagePage(copyTheme.PageId))
            {
                return GetForbiddenResponse();
            }

            _pagesController.CopyThemeToDescendantPages(copyTheme.PageId, copyTheme.Theme);
            return Request.CreateResponse(HttpStatusCode.OK, new {Status = 0});
        }]]></body>
          </codeblock>
        </method>
        <method name="CreateCustomUrl">
          <declaration><![CDATA[public HttpResponseMessage CreateCustomUrl(SeoUrl dto)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="102" sc="9" el="115" ec="10">Services\PagesController.cs</location>
            <body hash="36e7b76214045490153a0bd65d1779ea"><![CDATA[{
            if (!_securityService.CanManagePage(dto.TabId))
            {
                return GetForbiddenResponse();
            }

            var result = _pagesController.CreateCustomUrl(dto);

            return Request.CreateResponse(HttpStatusCode.OK,
                                new
                                {
                                    result.Id, result.Success, result.ErrorMessage, result.SuggestedUrlPath
                                });
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteCustomUrl">
          <declaration><![CDATA[public HttpResponseMessage DeleteCustomUrl(UrlIdDto dto)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="140" sc="9" el="154" ec="10">Services\PagesController.cs</location>
            <body hash="6817c4441b2e1b0cf98b82903895caa4"><![CDATA[{
            if (!_securityService.CanManagePage(dto.TabId))
            {
                return GetForbiddenResponse();
            }

            _pagesController.DeleteCustomUrl(dto);

            var response = new
            {
                Success = true
            };

            return Request.CreateResponse(HttpStatusCode.OK, response);
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteModule">
          <declaration><![CDATA[public HttpResponseMessage DeleteModule(int tabModuleId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="665" sc="9" el="689" ec="10">Services\PagesController.cs</location>
            <body hash="380e8a569efa4ac6000c67baa7f2820f"><![CDATA[{
            try
            {
                var module = ModuleController.Instance.GetTabModule(tabModuleId);
                if (!_securityService.CanManagePage(module.TabID))
                {
                    return GetForbiddenResponse();
                }

                var moduleController = ModuleController.Instance;
                var moduleInfo = moduleController.GetTabModule(tabModuleId);
                if (moduleInfo == null)
                {
                    return Request.CreateErrorResponse(HttpStatusCode.BadRequest, "InvalidTabModule");
                }

                moduleController.DeleteTabModule(moduleInfo.TabID, moduleInfo.ModuleID, false);
                return Request.CreateResponse(HttpStatusCode.OK, new { Success = true });
            }
            catch (Exception ex)
            {
                Logger.Error(ex);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, ex.ToString());
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="DeletePage">
          <declaration><![CDATA[public HttpResponseMessage DeletePage(PageItem page)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="227" sc="9" el="243" ec="10">Services\PagesController.cs</location>
            <body hash="957176a998d50873c6a05d2f50ac23ef"><![CDATA[{
            if (!_securityService.CanDeletePage(page.Id))
            {
                return GetForbiddenResponse();
            }

            try
            {
                _pagesController.DeletePage(page);
                return Request.CreateResponse(HttpStatusCode.OK, new {Status = 0});
            }
            catch (PageNotFoundException)
            {

                return Request.CreateResponse(HttpStatusCode.NotFound);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="DeletePageModule">
          <declaration><![CDATA[public HttpResponseMessage DeletePageModule(PageModuleItem module)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="248" sc="9" el="263" ec="10">Services\PagesController.cs</location>
            <body hash="4fdfcf1e469946fef281992688b10173"><![CDATA[{
            if (!_securityService.CanManagePage(module.PageId))
            {
                return GetForbiddenResponse();
            }

            try
            {
                _pagesController.DeleteTabModule(module.PageId, module.ModuleId);
                return Request.CreateResponse(HttpStatusCode.OK, new {Status = 0});
            }
            catch (PageModuleNotFoundException)
            {
                return Request.CreateResponse(HttpStatusCode.NotFound);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="DisableTabVersioningAndWorkflow">
          <declaration><![CDATA[private static void DisableTabVersioningAndWorkflow(TabInfo tab)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1104" sc="9" el="1117" ec="10">Services\PagesController.cs</location>
            <body hash="44c41e397f6a5cb0339140d24a14b941"><![CDATA[{
            var tabVersionSettings = TabVersionSettings.Instance;
            var tabWorkflowSettings = TabWorkflowSettings.Instance;

            if (tabVersionSettings.IsVersioningEnabled(tab.PortalID))
            {
                tabVersionSettings.SetEnabledVersioningForTab(tab.TabID, false);
            }

            if (tabWorkflowSettings.IsWorkflowEnabled(tab.PortalID))
            {
                tabWorkflowSettings.SetWorkflowEnabled(tab.PortalID, tab.TabID, false);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="EditModeForPage">
          <declaration><![CDATA[public HttpResponseMessage EditModeForPage(int id)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="305" sc="9" el="313" ec="10">Services\PagesController.cs</location>
            <body hash="a2164b373a87c2cf419c525a25462f35"><![CDATA[{
            if (!_securityService.CanManagePage(id))
            {
                return GetForbiddenResponse();
            }

            _pagesController.EditModeForPage(id, UserInfo.UserID);
            return Request.CreateResponse(HttpStatusCode.OK);
        }]]></body>
          </codeblock>
        </method>
        <method name="EnableTabVersioningAndWorkflow">
          <declaration><![CDATA[private static void EnableTabVersioningAndWorkflow(TabInfo tab)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1088" sc="9" el="1101" ec="10">Services\PagesController.cs</location>
            <body hash="38cbadc08bc058ba75617c3ebb5794be"><![CDATA[{
            var tabVersionSettings = TabVersionSettings.Instance;
            var tabWorkflowSettings = TabWorkflowSettings.Instance;

            if (tabVersionSettings.IsVersioningEnabled(tab.PortalID))
            {
                tabVersionSettings.SetEnabledVersioningForTab(tab.TabID, true);
            }

            if (tabWorkflowSettings.IsWorkflowEnabled(tab.PortalID))
            {
                tabWorkflowSettings.SetWorkflowEnabled(tab.PortalID, tab.TabID, true);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetCacheProviderList">
          <declaration><![CDATA[public HttpResponseMessage GetCacheProviderList()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="356" sc="9" el="359" ec="10">Services\PagesController.cs</location>
            <body hash="aeaebd094c44321c431b18fad98a0905"><![CDATA[{
            var providers = from p in OutputCachingProvider.GetProviderList() select p.Key;
            return Request.CreateResponse(HttpStatusCode.OK, providers);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetContentLocalizationEnabled">
          <declaration><![CDATA[public HttpResponseMessage GetContentLocalizationEnabled()]]></declaration>
          <documentation>
            <summary>
 Gets ContentLocalizationEnabled
 </summary>
 <returns></returns></documentation>
          <codeblock>
            <location sl="698" sc="9" el="712" ec="10">Services\PagesController.cs</location>
            <body hash="61571101ca25d6e270a3352d6bdef9ae"><![CDATA[{
            try
            {
                if (!TabPermissionController.CanManagePage())
                {
                    return GetForbiddenResponse();
                }
                return Request.CreateResponse(HttpStatusCode.OK, new { Success = true, PortalSettings.ContentLocalizationEnabled });
            }
            catch (Exception ex)
            {
                Logger.Error(ex);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, ex.ToString());
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetDefaultPortalTheme">
          <declaration><![CDATA[private string GetDefaultPortalTheme()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1148" sc="9" el="1156" ec="10">Services\PagesController.cs</location>
            <body hash="4108ed9e3209451196e98518988f0120"><![CDATA[{
            var layoutSrc = _defaultPortalThemeController.GetDefaultPortalLayout();
            if (string.IsNullOrWhiteSpace(layoutSrc))
            {
                return null;
            }
            var layout = _themesController.GetThemeFile(PortalSettings.Current, layoutSrc, ThemeType.Skin);
            return layout?.ThemeName;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetDefaultSettings">
          <declaration><![CDATA[public HttpResponseMessage GetDefaultSettings()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="349" sc="9" el="352" ec="10">Services\PagesController.cs</location>
            <body hash="9f0a214204ba58cd5bc394e1d5f8ae33"><![CDATA[{
            var settings = _pagesController.GetDefaultSettings();
            return Request.CreateResponse(HttpStatusCode.OK, settings);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetForbiddenResponse">
          <declaration><![CDATA[private HttpResponseMessage GetForbiddenResponse()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1143" sc="9" el="1145" ec="10">Services\PagesController.cs</location>
            <body hash="6953a31c58b9c11cfeaf93a54b3b2cc7"><![CDATA[{
            return Request.CreateResponse(HttpStatusCode.Forbidden, new { Message = "The user is not allowed to access this method." });
        }]]></body>
          </codeblock>
        </method>
        <method name="GetLocalizedTab">
          <declaration><![CDATA[private TabInfo GetLocalizedTab(int tabId, string cultureCode)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1159" sc="9" el="1174" ec="10">Services\PagesController.cs</location>
            <body hash="bd4e3bf13ddbe180f7d49c761c2b03b3"><![CDATA[{
            var currentTab = _tabController.GetTab(tabId, PortalId, false);

            //Unique id of default language page
            var uniqueId = currentTab.DefaultLanguageGuid != Null.NullGuid
                ? currentTab.DefaultLanguageGuid
                : currentTab.UniqueId;

            // get all non admin pages and not deleted
            var allPages = _tabController.GetTabsByPortal(PortalId).Values.Where(
                t => t.TabID != PortalSettings.AdminTabId && (Null.IsNull(t.ParentId) || t.ParentId != PortalSettings.AdminTabId));
            allPages = allPages.Where(t => t.IsDeleted == false);
            // get all localized pages of current page
            var tabInfos = allPages as IList<TabInfo> ?? allPages.ToList();
            return tabInfos.SingleOrDefault(t => (t.DefaultLanguageGuid == uniqueId || t.UniqueId == uniqueId) && t.CultureCode == cultureCode);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetNonLocalizedPages">
          <declaration><![CDATA[private DnnPagesDto GetNonLocalizedPages(int tabId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="735" sc="9" el="909" ec="10">Services\PagesController.cs</location>
            <body hash="8b937ff2f304e16ad0d3fc2d0099d8f3"><![CDATA[{
            var currentTab = _tabController.GetTab(tabId, PortalId, false);

            //Unique id of default language page
            var uniqueId = currentTab.DefaultLanguageGuid != Null.NullGuid
                ? currentTab.DefaultLanguageGuid
                : currentTab.UniqueId;

            // get all non admin pages and not deleted
            var allPages = _tabController.GetTabsByPortal(PortalId).Values.Where(
                t => t.TabID != PortalSettings.AdminTabId && (Null.IsNull(t.ParentId) || t.ParentId != PortalSettings.AdminTabId));
            allPages = allPages.Where(t => t.IsDeleted == false);
            // get all localized pages of current page
            var tabInfos = allPages as IList<TabInfo> ?? allPages.ToList();
            var localizedPages = tabInfos.Where(
                t => t.DefaultLanguageGuid == uniqueId || t.UniqueId == uniqueId).OrderBy(t => t.DefaultLanguageGuid).ToList();
            Dictionary<string, TabInfo> localizedTabs = null;

            // we are going to build up a list of locales
            // this is a bit more involved, since we want the default language to be first.
            // also, we do not want to add any locales the user has no access to
            var locales = new List<LocaleInfoDto>();
            var localeController = new LocaleController();
            var localeDict = localeController.GetLocales(PortalId);
            if (localeDict.Count == 0)
            {
                locales.Add(new LocaleInfoDto(""));
            }
            else
            {
                if (localizedPages.Count == 1 && localizedPages.First().CultureCode == "")
                {
                    // locale neutral page
                    locales.Add(new LocaleInfoDto(""));
                }
                else if (localizedPages.Count == 1 && localizedPages.First().CultureCode != PortalSettings.DefaultLanguage)
                {
                    var first = localizedPages.First();
                    locales.Add(new LocaleInfoDto(first.CultureCode));
                    //localizedTabs = new Dictionary<string, TabInfo> { { first.CultureCode, first } };
                }
                else
                {
                    //force sort order, so first add default language
                    locales.Add(new LocaleInfoDto(PortalSettings.DefaultLanguage));

                    // build up a list of localized tabs.
                    // depending on whether or not the selected page is in the default langauge
                    // we will add the localized tabs from the current page
                    // or from the defaultlanguage page
                    if (currentTab.CultureCode == PortalSettings.DefaultLanguage)
                    {
                        localizedTabs = currentTab.LocalizedTabs;
                    }
                    else
                    {
                        // selected page is not in default language
                        // add localizedtabs from defaultlanguage page
                        if (currentTab.DefaultLanguageTab != null)
                        {
                            localizedTabs = currentTab.DefaultLanguageTab.LocalizedTabs;
                        }
                    }

                    if (localizedTabs != null)
                    {
                        // only add locales from tabs the user has at least view permissions to.
                        // we will handle the edit permissions at a later stage
                        locales.AddRange(
                            from localizedTab in localizedTabs
                            where TabPermissionController.CanViewPage(localizedTab.Value)
                            select new LocaleInfoDto(localizedTab.Value.CultureCode));
                    }
                }
            }

            var dnnPages = new DnnPagesDto(locales)
            {
                HasMissingLanguages = _tabController.HasMissingLanguages(PortalId, tabId)
            };

            // filter the list of localized pages to only those that have a culture we want to see
            var viewableLocalizedPages = localizedPages.Where(
                localizedPage => locales.Find(locale => locale.CultureCode == localizedPage.CultureCode) != null).ToList();

            foreach (var tabInfo in viewableLocalizedPages)
            {
                var localTabInfo = tabInfo;
                var dnnPage = dnnPages.Page(localTabInfo.CultureCode);
                if (!TabPermissionController.CanViewPage(tabInfo))
                {
                    dnnPages.RemoveLocale(localTabInfo.CultureCode);
                    dnnPages.Pages.Remove(dnnPage);
                    break;
                }
                dnnPage.TabId = localTabInfo.TabID;
                dnnPage.TabName = localTabInfo.TabName;
                dnnPage.Title = localTabInfo.Title;
                dnnPage.Description = localTabInfo.Description;
                dnnPage.Path = localTabInfo.TabPath.Substring(0, localTabInfo.TabPath.LastIndexOf("//", StringComparison.Ordinal)).Replace("//", "");
                dnnPage.HasChildren = (_tabController.GetTabsByPortal(PortalId).WithParentId(tabInfo.TabID).Count != 0);
                dnnPage.CanAdminPage = TabPermissionController.CanAdminPage(tabInfo);
                dnnPage.CanViewPage = TabPermissionController.CanViewPage(tabInfo);
                dnnPage.LocalResourceFile = LocalResourceFile;
                dnnPage.PageUrl = Globals.NavigateURL(localTabInfo.TabID, false, PortalSettings, "", localTabInfo.CultureCode);

                // calculate position in the form of 1.3.2...
                var siblingTabs = tabInfos.Where(t => t.ParentId == localTabInfo.ParentId && t.CultureCode == localTabInfo.CultureCode || t.CultureCode == null).OrderBy(t => t.TabOrder).ToList();
                dnnPage.Position = (siblingTabs.IndexOf(localTabInfo) + 1).ToString(CultureInfo.InvariantCulture);
                var parentTabId = localTabInfo.ParentId;
                while (parentTabId > 0)
                {
                    var parentTab = tabInfos.Single(t => t.TabID == parentTabId);
                    var id = parentTabId;
                    siblingTabs = tabInfos.Where(t => t.ParentId == id && t.CultureCode == localTabInfo.CultureCode || t.CultureCode == null).OrderBy(t => t.TabOrder).ToList();
                    dnnPage.Position = (siblingTabs.IndexOf(localTabInfo) + 1).ToString(CultureInfo.InvariantCulture) + "." + dnnPage.Position;
                    parentTabId = parentTab.ParentId;
                }

                dnnPage.DefaultLanguageGuid = localTabInfo.DefaultLanguageGuid;
                dnnPage.IsTranslated = localTabInfo.IsTranslated;
                dnnPage.IsPublished = _tabController.IsTabPublished(localTabInfo);
                // generate modules information
                var moduleController = ModuleController.Instance;
                foreach (var moduleInfo in moduleController.GetTabModules(localTabInfo.TabID).Values)
                {
                    var guid = moduleInfo.DefaultLanguageGuid == Null.NullGuid ? moduleInfo.UniqueId : moduleInfo.DefaultLanguageGuid;

                    var dnnModules = dnnPages.Module(guid); // modules of each language
                    var dnnModule = dnnModules.Module(localTabInfo.CultureCode);
                    // detect error : 2 modules with same uniqueId on the same page
                    dnnModule.LocalResourceFile = LocalResourceFile;
                    if (dnnModule.TabModuleId > 0)
                    {
                        dnnModule.ErrorDuplicateModule = true;
                        dnnPages.ErrorExists = true;
                        continue;
                    }

                    dnnModule.ModuleTitle = moduleInfo.ModuleTitle;
                    dnnModule.DefaultLanguageGuid = moduleInfo.DefaultLanguageGuid;
                    dnnModule.TabId = localTabInfo.TabID;
                    dnnModule.TabModuleId = moduleInfo.TabModuleID;
                    dnnModule.ModuleId = moduleInfo.ModuleID;
                    dnnModule.CanAdminModule = ModulePermissionController.CanAdminModule(moduleInfo);
                    dnnModule.CanViewModule = ModulePermissionController.CanViewModule(moduleInfo);
                    dnnModule.IsDeleted = moduleInfo.IsDeleted;
                    if (moduleInfo.DefaultLanguageGuid != Null.NullGuid)
                    {
                        var defaultLanguageModule = moduleController.GetModuleByUniqueID(moduleInfo.DefaultLanguageGuid);
                        if (defaultLanguageModule != null)
                        {
                            dnnModule.DefaultModuleId = defaultLanguageModule.ModuleID;
                            if (defaultLanguageModule.ParentTab.UniqueId != moduleInfo.ParentTab.DefaultLanguageGuid)
                                dnnModule.DefaultTabName = defaultLanguageModule.ParentTab.TabName;
                        }
                    }
                    dnnModule.SetModuleInfoHelp();
                    dnnModule.IsTranslated = moduleInfo.IsTranslated;
                    dnnModule.IsLocalized = moduleInfo.IsLocalized;

                    dnnModule.IsShared = _tabController.GetTabsByModuleID(moduleInfo.ModuleID).Values.Count(t => t.CultureCode == moduleInfo.CultureCode) > 1;

                    // detect error : the default language module is on an other page
                    dnnModule.ErrorDefaultOnOtherTab = moduleInfo.DefaultLanguageGuid != Null.NullGuid && moduleInfo.DefaultLanguageModule == null;

                    // detect error : different culture on tab and module
                    dnnModule.ErrorCultureOfModuleNotCultureOfTab = moduleInfo.CultureCode != localTabInfo.CultureCode;

                    dnnPages.ErrorExists |= dnnModule.ErrorDefaultOnOtherTab || dnnModule.ErrorCultureOfModuleNotCultureOfTab;
                }
            }

            return dnnPages;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPageDetails">
          <declaration><![CDATA[public HttpResponseMessage GetPageDetails(int pageId)]]></declaration>
          <documentation>GET: api/Pages/GetPageDetails
 <summary>
 Get detail of a page
 </summary>
 <param name="pageId"></param>
 <returns></returns></documentation>
          <codeblock>
            <location sl="82" sc="9" el="97" ec="10">Services\PagesController.cs</location>
            <body hash="59137f96a3b73b202b010a3f18ebb51d"><![CDATA[{
            if (!_securityService.CanManagePage(pageId))
            {
                return GetForbiddenResponse();
            }

            try
            {
                var page = _pagesController.GetPageSettings(pageId);
                return Request.CreateResponse(HttpStatusCode.OK, page);
            }
            catch (PageNotFoundException)
            {
                return Request.CreateResponse(HttpStatusCode.NotFound, new {Message = "Page doesn't exists."});
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPageHierarchy">
          <declaration><![CDATA[public HttpResponseMessage GetPageHierarchy(int pageId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="180" sc="9" el="195" ec="10">Services\PagesController.cs</location>
            <body hash="1cb16b9e660466a0c91a8249ff4136d2"><![CDATA[{
            if (!_securityService.IsPageAdminUser())
            {
                return GetForbiddenResponse();
            }

            try
            {
                var paths = _pagesController.GetPageHierarchy(pageId);
                return Request.CreateResponse(HttpStatusCode.OK, paths);
            }
            catch (PageNotFoundException)
            {
                return Request.CreateResponse(HttpStatusCode.NotFound);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPageList">
          <declaration><![CDATA[public HttpResponseMessage GetPageList(int parentId = -1, string searchKey = "")]]></declaration>
          <documentation>GET: api/Pages/GetPageList
 <summary>

 </summary>
 <param name="parentId"></param>
 <param name="searchKey"></param>
 <returns></returns></documentation>
          <codeblock>
            <location sl="165" sc="9" el="176" ec="10">Services\PagesController.cs</location>
            <body hash="bd02105fa2dfa634820b5dd367798f77"><![CDATA[{
            if (!_securityService.IsPageAdminUser())
            {
                return GetForbiddenResponse();
            }

            var adminTabId = PortalSettings.AdminTabId;
            var tabs = TabController.GetPortalTabs(PortalSettings.PortalId, adminTabId, false, true, false, true);
            var pages = from p in _pagesController.GetPageList(parentId, searchKey)
                select Converters.ConvertToPageItem<PageItem>(p, tabs);
            return Request.CreateResponse(HttpStatusCode.OK, pages);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPageUrlPreview">
          <declaration><![CDATA[public HttpResponseMessage GetPageUrlPreview(string url)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="363" sc="9" el="366" ec="10">Services\PagesController.cs</location>
            <body hash="0f03a00c8dea68f95140515b35836566"><![CDATA[{
            var cleanedUrl = _pagesController.CleanTabUrl(url);
            return Request.CreateResponse(HttpStatusCode.OK, new {Url = cleanedUrl});
        }]]></body>
          </codeblock>
        </method>
        <method name="GetTabLocalization">
          <declaration><![CDATA[public HttpResponseMessage GetTabLocalization(int tabId)]]></declaration>
          <documentation>
            <summary>
 Gets the view data that used to be in the old ControlBar's localization tab
 under Page Settings ( /{page}/ctl/Tab/action/edit/activeTab/settingTab ).
 </summary>
 <param name="tabId">The ID of the tab to get localization for.</param>
 <returns></returns></documentation>
          <codeblock>
            <location sl="585" sc="9" el="607" ec="10">Services\PagesController.cs</location>
            <body hash="48f8dadabad1bb48f83ef6fd397c6edb"><![CDATA[{
            try
            {
                if (!_securityService.CanManagePage(tabId))
                {
                    return GetForbiddenResponse();
                }

                var currentTab = _tabController.GetTab(tabId, PortalId, false);
                var locales = new List<LocaleInfoDto>();
                var pages = new DnnPagesDto(locales);
                if (!currentTab.IsNeutralCulture)
                {
                    pages = GetNonLocalizedPages(tabId);
                }
                return Request.CreateResponse(HttpStatusCode.OK, pages);
            }
            catch (Exception ex)
            {
                Logger.Error(ex);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, ex.ToString());
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetThemeFiles">
          <declaration><![CDATA[public HttpResponseMessage GetThemeFiles(string themeName)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="387" sc="9" el="396" ec="10">Services\PagesController.cs</location>
            <body hash="abd9a27acc2673e2198d4a5636f04ad1"><![CDATA[{
            const ThemeLevel level = ThemeLevel.Global | ThemeLevel.Site;
            var themeLayout = _themesController.GetLayouts(PortalSettings, level).FirstOrDefault(t => t.PackageName.Equals(themeName, StringComparison.InvariantCultureIgnoreCase));
            var themeContainer = _themesController.GetContainers(PortalSettings, level).FirstOrDefault(t => t.PackageName.Equals(themeName, StringComparison.InvariantCultureIgnoreCase));

            return Request.CreateResponse(HttpStatusCode.OK, new {
                layouts = themeLayout == null ? new List<ThemeFileInfo>() : _themesController.GetThemeFiles(PortalSettings, themeLayout),
                containers = themeContainer == null ? new List<ThemeFileInfo>() : _themesController.GetThemeFiles(PortalSettings, themeContainer)
            });
        }]]></body>
          </codeblock>
        </method>
        <method name="GetThemes">
          <declaration><![CDATA[public HttpResponseMessage GetThemes()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="370" sc="9" el="383" ec="10">Services\PagesController.cs</location>
            <body hash="528a0b22cb7ecbb8f6e2b2381ca1e31d"><![CDATA[{
            var themes = _themesController.GetLayouts(PortalSettings, ThemeLevel.Global | ThemeLevel.Site);
            var defaultPortalThemeName = GetDefaultPortalTheme();
            var defaultPortalLayout = _defaultPortalThemeController.GetDefaultPortalLayout();
            var defaultPortalContainer = _defaultPortalThemeController.GetDefaultPortalContainer();

            return Request.CreateResponse(HttpStatusCode.OK, new
            {
                themes,
                defaultPortalThemeName,
                defaultPortalLayout,
                defaultPortalContainer
            });
        }]]></body>
          </codeblock>
        </method>
        <method name="LocalizeString">
          <declaration><![CDATA[private static string LocalizeString(string key)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="720" sc="9" el="722" ec="10">Services\PagesController.cs</location>
            <body hash="a8bf2d8c7551e822ac0fa56cec12cd2b"><![CDATA[{
            return DotNetNuke.Services.Localization.Localization.GetString(key, LocalResourceFile);
        }]]></body>
          </codeblock>
        </method>
        <method name="MakePageNeutral">
          <declaration><![CDATA[public HttpResponseMessage MakePageNeutral([FromUri] int tabId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="460" sc="9" el="482" ec="10">Services\PagesController.cs</location>
            <body hash="2f71de75484defb3b91e26222368730e"><![CDATA[{
            try
            {
                if (!_securityService.CanManagePage(tabId))
                {
                    return GetForbiddenResponse();
                }

                if (_tabController.GetTabsByPortal(PortalId).WithParentId(tabId).Count > 0)
                {
                    return Request.CreateErrorResponse(HttpStatusCode.BadRequest, LocalizeString("MakeNeutral.ErrorMessage"));
                }

                var defaultLocale = _localeController.GetDefaultLocale(PortalId);
                _tabController.ConvertTabToNeutralLanguage(PortalId, tabId, defaultLocale.Code, true);
                return Request.CreateResponse(HttpStatusCode.OK, new { Success = true });
            }
            catch (Exception ex)
            {
                Logger.Error(ex);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, ex.ToString());
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="MakePageTranslatable">
          <declaration><![CDATA[public HttpResponseMessage MakePageTranslatable([FromUri] int tabId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="488" sc="9" el="513" ec="10">Services\PagesController.cs</location>
            <body hash="c690e026c6ca109de331bfdb61c2aa3c"><![CDATA[{
            try
            {
                if (!_securityService.CanManagePage(tabId))
                {
                    return GetForbiddenResponse();
                }

                var currentTab = _tabController.GetTab(tabId, PortalId, false);
                if (currentTab == null)
                {
                    return Request.CreateErrorResponse(HttpStatusCode.BadRequest, "InvalidTab");
                }

                var defaultLocale = _localeController.GetDefaultLocale(PortalId);
                _tabController.LocalizeTab(currentTab, defaultLocale, true);
                _tabController.AddMissingLanguages(PortalId, tabId);
                _tabController.ClearCache(PortalId);
                return Request.CreateResponse(HttpStatusCode.OK, new { Success = true });
            }
            catch (Exception ex)
            {
                Logger.Error(ex);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, ex.ToString());
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="MovePage">
          <declaration><![CDATA[public HttpResponseMessage MovePage(PageMoveRequest request)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="200" sc="9" el="222" ec="10">Services\PagesController.cs</location>
            <body hash="96230f5b809dc06ef8a5903d49343bc4"><![CDATA[{
            if (!_securityService.IsPageAdminUser())
            {
                return GetForbiddenResponse();
            }

            try
            {
                var tab = _pagesController.MovePage(request);
                var tabs = TabController.GetPortalTabs(PortalSettings.PortalId, Null.NullInteger, false, true, false,
                    true);
                var pageItem = Converters.ConvertToPageItem<PageItem>(tab, tabs);
                return Request.CreateResponse(HttpStatusCode.OK, new {Status = 0, Page = pageItem});
            }
            catch (PageNotFoundException)
            {
                return Request.CreateResponse(HttpStatusCode.NotFound);
            }
            catch (PageException ex)
            {
                return Request.CreateResponse(HttpStatusCode.OK, new {Status = 1, ex.Message});
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="NotifyTranslators">
          <declaration><![CDATA[public HttpResponseMessage NotifyTranslators(TranslatorsComment comment)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="542" sc="9" el="574" ec="10">Services\PagesController.cs</location>
            <body hash="f79a08a6239fc74b8ba258f5f86a7fc9"><![CDATA[{
            try
            {
                if (!_securityService.CanManagePage(comment.TabId))
                {
                    return GetForbiddenResponse();
                }

                // loop through all localized version of this page
                var currentTab = _tabController.GetTab(comment.TabId, PortalId, false);
                foreach (var localizedTab in currentTab.LocalizedTabs.Values)
                {
                    var users = new Dictionary<int, UserInfo>();

                    //Give default translators for this language and administrators permissions
                    _tabController.GiveTranslatorRoleEditRights(localizedTab, users);

                    //Send Messages to all the translators of new content
                    foreach (var translator in users.Values.Where(user => user.UserID != PortalSettings.AdministratorId))
                    {
                        AddTranslationSubmittedNotification(localizedTab, translator, comment.Text);
                    }
                }

                var msgToUser = LocalizeString("TranslationMessageConfirmMessage.Text");
                return Request.CreateResponse(HttpStatusCode.OK, new { Success = true, Message = msgToUser });
            }
            catch (Exception ex)
            {
                Logger.Error(ex);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, ex.ToString());
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="RestoreModule">
          <declaration><![CDATA[public HttpResponseMessage RestoreModule(int tabModuleId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="635" sc="9" el="659" ec="10">Services\PagesController.cs</location>
            <body hash="9530c3197d37fa2304abade1c07eb8cd"><![CDATA[{
            try
            {
                var module = ModuleController.Instance.GetTabModule(tabModuleId);
                if (!_securityService.CanManagePage(module.TabID))
                {
                    return GetForbiddenResponse();
                }

                var moduleController = ModuleController.Instance;
                var moduleInfo = moduleController.GetTabModule(tabModuleId);
                if (moduleInfo == null)
                {
                    return Request.CreateErrorResponse(HttpStatusCode.BadRequest, "InvalidTabModule");
                }

                moduleController.RestoreModule(moduleInfo);
                return Request.CreateResponse(HttpStatusCode.OK, new { Success = true });
            }
            catch (Exception ex)
            {
                Logger.Error(ex);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, ex.ToString());
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="SaveBulkPages">
          <declaration><![CDATA[public HttpResponseMessage SaveBulkPages(BulkPage bulkPage)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="401" sc="9" el="422" ec="10">Services\PagesController.cs</location>
            <body hash="541a9fb6cbf8ea010eb0c874001d163d"><![CDATA[{
            if (!_securityService.IsPageAdminUser())
            {
                return GetForbiddenResponse();
            }

            try
            {
                bulkPage.Clean();
                var bulkPageResponse = _bulkPagesController.AddBulkPages(bulkPage);

                return Request.CreateResponse(HttpStatusCode.OK, new
                {
                    Status = 0,
                    Response = bulkPageResponse
                });
            }
            catch (PageValidationException ex)
            {
                return Request.CreateResponse(HttpStatusCode.OK, new { Status = 1, ex.Field, ex.Message });
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="SaveNonLocalizedPages">
          <declaration><![CDATA[private void SaveNonLocalizedPages(DnnPagesRequest pages)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="912" sc="9" el="1085" ec="10">Services\PagesController.cs</location>
            <body hash="e58abe916fd98f8be98bf6c58a663895"><![CDATA[{
            // check all pages
            foreach (var page in pages.Pages)
            {
                var tabInfo = _tabController.GetTab(page.TabId, PortalId, true);
                if (tabInfo != null &&
                    (tabInfo.TabName != page.TabName ||
                     tabInfo.Title != page.Title ||
                     tabInfo.Description != page.Description))
                {
                    tabInfo.TabName = page.TabName;
                    tabInfo.Title = page.Title;
                    tabInfo.Description = page.Description;
                    _tabController.UpdateTab(tabInfo);
                }
            }

            var tabsToPublish = new List<TabInfo>();
            var moduleTranslateOverrides = new Dictionary<int, bool>();
            var moduleController = ModuleController.Instance;

            // manage all actions we need to take for all modules on all pages
            foreach (var modulesCollection in pages.Modules)
            {
                foreach (var moduleDto in modulesCollection.Modules)
                {
                    var tabModule = moduleController.GetTabModule(moduleDto.TabModuleId);
                    if (tabModule != null)
                    {
                        if (tabModule.ModuleTitle != moduleDto.ModuleTitle)
                        {
                            tabModule.ModuleTitle = moduleDto.ModuleTitle;
                            moduleController.UpdateModule(tabModule);
                        }

                        if (tabModule.DefaultLanguageGuid != Null.NullGuid &&
                            tabModule.IsLocalized != moduleDto.IsLocalized)
                        {
                            var locale = _localeController.GetLocale(tabModule.CultureCode);
                            if (moduleDto.IsLocalized)
                                moduleController.LocalizeModule(tabModule, locale);
                            else
                                moduleController.DeLocalizeModule(tabModule);
                        }

                        bool moduleTranslateOverride;
                        moduleTranslateOverrides.TryGetValue(tabModule.TabID, out moduleTranslateOverride);

                        if (!moduleTranslateOverride && tabModule.IsTranslated != moduleDto.IsTranslated)
                        {
                            moduleController.UpdateTranslationStatus(tabModule, moduleDto.IsTranslated);
                        }
                    }
                    else if (moduleDto.CopyModule)
                    {
                        // find the first existing module on the line
                        foreach (var moduleToCopyFrom in modulesCollection.Modules)
                        {
                            if (moduleToCopyFrom.ModuleId > 0)
                            {
                                var toTabInfo = GetLocalizedTab(moduleToCopyFrom.TabId, moduleDto.CultureCode);
                                var miCopy = moduleController.GetTabModule(moduleToCopyFrom.TabModuleId);
                                if (miCopy.DefaultLanguageGuid == Null.NullGuid)
                                {
                                    // default
                                    DisableTabVersioningAndWorkflow(toTabInfo);
                                    moduleController.CopyModule(miCopy, toTabInfo, Null.NullString, true);
                                    EnableTabVersioningAndWorkflow(toTabInfo);
                                    var localizedModule = moduleController.GetModule(miCopy.ModuleID, toTabInfo.TabID, false);
                                    moduleController.LocalizeModule(localizedModule, LocaleController.Instance.GetLocale(localizedModule.CultureCode));
                                }
                                else
                                {
                                    var miCopyDefault = moduleController.GetModuleByUniqueID(miCopy.DefaultLanguageGuid);
                                    moduleController.CopyModule(miCopyDefault, toTabInfo, Null.NullString, true);
                                }

                                if (moduleDto == modulesCollection.Modules.First())
                                {
                                    // default language
                                    var miDefault = moduleController.GetModule(miCopy.ModuleID, pages.Pages.First().TabId, false);
                                    foreach (var page in pages.Pages.Skip(1))
                                    {
                                        var moduleInfo = moduleController.GetModule(miCopy.ModuleID, page.TabId, false);
                                        if (moduleInfo != null)
                                        {
                                            if (miDefault != null)
                                            {
                                                moduleInfo.DefaultLanguageGuid = miDefault.UniqueId;
                                            }
                                            moduleController.UpdateModule(moduleInfo);
                                        }
                                    }
                                }

                                break;
                            }
                        }
                    }
                }
            }

            foreach (var page in pages.Pages)
            {
                var tabInfo = _tabController.GetTab(page.TabId, PortalId, true);
                if (tabInfo != null)
                {
                    var moduleTranslateOverride = false;
                    if (!tabInfo.IsDefaultLanguage)
                    {
                        if (tabInfo.IsTranslated != page.IsTranslated)
                        {
                            _tabController.UpdateTranslationStatus(tabInfo, page.IsTranslated);
                            if (page.IsTranslated)
                            {
                                moduleTranslateOverride = true;
                                var tabModules = moduleController.GetTabModules(tabInfo.TabID)
                                    .Where(moduleKvp =>
                                        moduleKvp.Value.DefaultLanguageModule != null &&
                                        moduleKvp.Value.LocalizedVersionGuid != moduleKvp.Value.DefaultLanguageModule.LocalizedVersionGuid);

                                foreach (var moduleKvp in tabModules)
                                {
                                    moduleController.UpdateTranslationStatus(moduleKvp.Value, true);
                                }
                            }
                        }

                        if (page.IsPublished)
                        {
                            tabsToPublish.Add(tabInfo);
                        }
                    }

                    moduleTranslateOverrides.Add(page.TabId, moduleTranslateOverride);
                }
            }

            // if we have tabs to publish, do it.
            // marks all modules as translated, marks page as translated
            foreach (var tabInfo in tabsToPublish)
            {
                //First mark all modules as translated
                foreach (var module in moduleController.GetTabModules(tabInfo.TabID).Values)
                {
                    moduleController.UpdateTranslationStatus(module, true);
                }

                //Second mark tab as translated
                _tabController.UpdateTranslationStatus(tabInfo, true);

                //Third publish Tab (update Permissions)
                _tabController.PublishTab(tabInfo);
            }

            // manage translated status of tab. In order to do that, we need to check if all modules on the page are translated
            var tabTranslatedStatus = true;
            foreach (var page in pages.Pages)
            {
                var tabInfo = _tabController.GetTab(page.TabId, PortalId, true);
                if (tabInfo != null)
                {
                    if (tabInfo.ChildModules.Any(moduleKvp => !moduleKvp.Value.IsTranslated))
                    {
                        tabTranslatedStatus = false;
                    }

                    if (tabTranslatedStatus && !tabInfo.IsTranslated)
                    {
                        _tabController.UpdateTranslationStatus(tabInfo, true);
                    }
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="SavePageAsTemplate">
          <declaration><![CDATA[public HttpResponseMessage SavePageAsTemplate(PageTemplate pageTemplate)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="427" sc="9" el="449" ec="10">Services\PagesController.cs</location>
            <body hash="9f5244642d8a7aab744de0d551889c23"><![CDATA[{
            if (!_securityService.CanExportPage(pageTemplate.TabId))
            {
                return GetForbiddenResponse();
            }

            try
            {
                pageTemplate.Clean();
                var templateFilename = _templateController.SaveAsTemplate(pageTemplate);
                var response = string.Format(Localization.GetString("ExportedMessage"), templateFilename);

                return Request.CreateResponse(HttpStatusCode.OK, new
                {
                    Status = 0,
                    Response = response
                });
            }
            catch (TemplateException ex)
            {
                return Request.CreateResponse(HttpStatusCode.OK, new { Status = 1, ex.Message });
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="SavePageDetails">
          <declaration><![CDATA[public HttpResponseMessage SavePageDetails(PageSettings pageSettings)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="318" sc="9" el="345" ec="10">Services\PagesController.cs</location>
            <body hash="b95575147e80b0301642801ac35ee86c"><![CDATA[{
            if (!_securityService.CanSavePageDetails(pageSettings))
            {
                return GetForbiddenResponse();
            }

            try
            {
                pageSettings.Clean();
                var tab = _pagesController.SavePageDetails(pageSettings);
                var tabs = TabController.GetPortalTabs(PortalSettings.PortalId, Null.NullInteger, false, true, false,
                    true);

                return Request.CreateResponse(HttpStatusCode.OK, new
                {
                    Status = 0,
                    Page = Converters.ConvertToPageItem<PageItem>(tab, tabs)
                });
            }
            catch (PageNotFoundException)
            {
                return Request.CreateResponse(HttpStatusCode.NotFound, new {Message = "Page doesn't exists."});
            }
            catch (PageValidationException ex)
            {
                return Request.CreateResponse(HttpStatusCode.OK, new {Status = 1, ex.Field, ex.Message});
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateCustomUrl">
          <declaration><![CDATA[public HttpResponseMessage UpdateCustomUrl(SeoUrl dto)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="120" sc="9" el="135" ec="10">Services\PagesController.cs</location>
            <body hash="125489755cd5e8de252640f55836677f"><![CDATA[{
            if (!_securityService.CanManagePage(dto.TabId))
            {
                return GetForbiddenResponse();
            }

            var result = _pagesController.UpdateCustomUrl(dto);
            
            return Request.CreateResponse(HttpStatusCode.OK, new
            {
                result.Id,
                result.Success,
                result.ErrorMessage,
                result.SuggestedUrlPath
            });
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateTabLocalization">
          <declaration><![CDATA[public HttpResponseMessage UpdateTabLocalization(DnnPagesRequest request)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="613" sc="9" el="629" ec="10">Services\PagesController.cs</location>
            <body hash="e6af71d82d931d85d4a0463ef496e3a8"><![CDATA[{
            try
            {
                if (request.Pages.Any(x => x.TabId > 0 && !_securityService.CanManagePage(x.TabId)))
                {
                    return GetForbiddenResponse();
                }

                SaveNonLocalizedPages(request);
                return Request.CreateResponse(HttpStatusCode.OK, new { Success = true });
            }
            catch (Exception ex)
            {
                Logger.Error(ex);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, ex.ToString());
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_bulkPagesController">
          <declaration><![CDATA[private readonly IBulkPagesController _bulkPagesController;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_defaultPortalThemeController">
          <declaration><![CDATA[private readonly IDefaultPortalThemeController _defaultPortalThemeController;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_localeController">
          <declaration><![CDATA[private readonly ILocaleController _localeController;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_pagesController">
          <declaration><![CDATA[private readonly IPagesController _pagesController;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_securityService">
          <declaration><![CDATA[private readonly ISecurityService _securityService;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_tabController">
          <declaration><![CDATA[private readonly ITabController _tabController;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_templateController">
          <declaration><![CDATA[private readonly ITemplateController _templateController;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_themesController">
          <declaration><![CDATA[private readonly IThemesController _themesController;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="LocalResourceFile">
          <declaration><![CDATA[private const string LocalResourceFile = "~/DesktopModules/admin/Dnn.PersonaBar/Modules/Dnn.Pages/App_LocalResources/Pages.resx";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Logger">
          <declaration><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof(PagesController));]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="Dnn.PersonaBar.Pages.Services.Dto">
    <class name="BulkPage">
      <declaration><![CDATA[public class BulkPage]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public BulkPage()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="BulkPages">
          <declaration><![CDATA[public string BulkPages]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="10" sc="35" el="10" ec="39">Services\Dto\BulkPage.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="10" sc="40" el="10" ec="44">Services\Dto\BulkPage.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="EndDate">
          <declaration><![CDATA[public DateTime? EndDate]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="28" sc="36" el="28" ec="40">Services\Dto\BulkPage.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="28" sc="41" el="28" ec="45">Services\Dto\BulkPage.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="IncludeInMenu">
          <declaration><![CDATA[public bool IncludeInMenu]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="22" sc="37" el="22" ec="41">Services\Dto\BulkPage.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="22" sc="42" el="22" ec="46">Services\Dto\BulkPage.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Keywords">
          <declaration><![CDATA[public string Keywords]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="16" sc="34" el="16" ec="38">Services\Dto\BulkPage.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="16" sc="39" el="16" ec="43">Services\Dto\BulkPage.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ParentId">
          <declaration><![CDATA[public int ParentId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="13" sc="31" el="13" ec="35">Services\Dto\BulkPage.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="13" sc="36" el="13" ec="40">Services\Dto\BulkPage.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="StartDate">
          <declaration><![CDATA[public DateTime? StartDate]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="25" sc="38" el="25" ec="42">Services\Dto\BulkPage.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="25" sc="43" el="25" ec="47">Services\Dto\BulkPage.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Tags">
          <declaration><![CDATA[public string Tags]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="19" sc="30" el="19" ec="34">Services\Dto\BulkPage.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="19" sc="35" el="19" ec="39">Services\Dto\BulkPage.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="BulkPageResponse">
      <declaration><![CDATA[public class BulkPageResponse]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public BulkPageResponse()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="OverallStatus">
          <declaration><![CDATA[public int OverallStatus]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="10" sc="36" el="10" ec="40">Services\Dto\BulkPageResponse.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="10" sc="41" el="10" ec="45">Services\Dto\BulkPageResponse.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Pages">
          <declaration><![CDATA[public IEnumerable<BulkPageResponseItem> Pages]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="13" sc="58" el="13" ec="62">Services\Dto\BulkPageResponse.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="13" sc="63" el="13" ec="67">Services\Dto\BulkPageResponse.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="BulkPageResponseItem">
      <declaration><![CDATA[public class BulkPageResponseItem]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public BulkPageResponseItem()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="ErrorMessage">
          <declaration><![CDATA[public string ErrorMessage]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="18" sc="38" el="18" ec="42">Services\Dto\BulkPageResponseItem.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="18" sc="43" el="18" ec="47">Services\Dto\BulkPageResponseItem.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="PageName">
          <declaration><![CDATA[public string PageName]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="9" sc="34" el="9" ec="38">Services\Dto\BulkPageResponseItem.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="9" sc="39" el="9" ec="43">Services\Dto\BulkPageResponseItem.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Status">
          <declaration><![CDATA[public int Status]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="12" sc="29" el="12" ec="33">Services\Dto\BulkPageResponseItem.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="12" sc="34" el="12" ec="38">Services\Dto\BulkPageResponseItem.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="TabId">
          <declaration><![CDATA[public int TabId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="15" sc="28" el="15" ec="32">Services\Dto\BulkPageResponseItem.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="15" sc="33" el="15" ec="37">Services\Dto\BulkPageResponseItem.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="CopyPermissionsRequest">
      <declaration><![CDATA[public class CopyPermissionsRequest]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public CopyPermissionsRequest()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="PageId">
          <declaration><![CDATA[public int PageId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="9" sc="29" el="9" ec="33">Services\Dto\CopyPermissionsRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="9" sc="34" el="9" ec="38">Services\Dto\CopyPermissionsRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="CopyThemeRequest">
      <declaration><![CDATA[public class CopyThemeRequest]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public CopyThemeRequest()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="PageId">
          <declaration><![CDATA[public int PageId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="9" sc="29" el="9" ec="33">Services\Dto\CopyThemeRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="9" sc="34" el="9" ec="38">Services\Dto\CopyThemeRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Theme">
          <declaration><![CDATA[public Theme Theme]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="12" sc="30" el="12" ec="34">Services\Dto\CopyThemeRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="12" sc="35" el="12" ec="39">Services\Dto\CopyThemeRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnModuleDto">
      <declaration><![CDATA[public class DnnModuleDto]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnModuleDto()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="LocalizeString">
          <declaration><![CDATA[private string LocalizeString(string localizationKey)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="144" sc="9" el="146" ec="10">Services\Dto\DnnModuleDto.cs</location>
            <body hash="54b4b0b02571e46a5c83a312cc3d8ec7"><![CDATA[{
            return Localization.GetString(localizationKey, LocalResourceFile) ?? "";
        }]]></body>
          </codeblock>
        </method>
        <method name="SetModuleInfoHelp">
          <declaration><![CDATA[public void SetModuleInfoHelp()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="48" sc="9" el="67" ec="10">Services\Dto\DnnModuleDto.cs</location>
            <body hash="750a34c72caf7977ff83d34eb8fc277b"><![CDATA[{
            var returnValue = "";
            var moduleInfo = ModuleController.Instance.GetModule(ModuleId, Null.NullInteger, true);
            if (moduleInfo != null)
            {
                if (moduleInfo.IsDeleted)
                {
                    returnValue = LocalizeString("ModuleDeleted.Text");
                }
                else
                {
                    returnValue = ModulePermissionController.CanAdminModule(moduleInfo)
                        ? string.Format(LocalizeString("ModuleInfo.Text"),
                                moduleInfo.ModuleDefinition.FriendlyName, moduleInfo.ModuleTitle, moduleInfo.PaneName)
                        : LocalizeString("ModuleInfoForNonAdmins.Text");
                }
            }

            ModuleInfoHelp = returnValue;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="CanAdminModule">
          <declaration><![CDATA[public bool CanAdminModule]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="38" sc="38" el="38" ec="42">Services\Dto\DnnModuleDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="38" sc="43" el="38" ec="47">Services\Dto\DnnModuleDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="CanViewModule">
          <declaration><![CDATA[public bool CanViewModule]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="35" sc="37" el="35" ec="41">Services\Dto\DnnModuleDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="35" sc="42" el="35" ec="46">Services\Dto\DnnModuleDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="CopyModule">
          <declaration><![CDATA[public bool CopyModule]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="26" sc="34" el="26" ec="38">Services\Dto\DnnModuleDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="26" sc="39" el="26" ec="43">Services\Dto\DnnModuleDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="CultureCode">
          <declaration><![CDATA[public string CultureCode]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="14" sc="37" el="14" ec="41">Services\Dto\DnnModuleDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="14" sc="42" el="14" ec="46">Services\Dto\DnnModuleDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="DefaultLanguageGuid">
          <declaration><![CDATA[public Guid DefaultLanguageGuid]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="15" sc="43" el="15" ec="47">Services\Dto\DnnModuleDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="15" sc="48" el="15" ec="52">Services\Dto\DnnModuleDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="DefaultModuleId">
          <declaration><![CDATA[public int DefaultModuleId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="19" sc="38" el="19" ec="42">Services\Dto\DnnModuleDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="19" sc="43" el="19" ec="47">Services\Dto\DnnModuleDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="DefaultTabName">
          <declaration><![CDATA[public string DefaultTabName]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="20" sc="40" el="20" ec="44">Services\Dto\DnnModuleDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="20" sc="45" el="20" ec="49">Services\Dto\DnnModuleDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ErrorCultureOfModuleNotCultureOfTab">
          <declaration><![CDATA[public bool ErrorCultureOfModuleNotCultureOfTab]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="29" sc="59" el="29" ec="63">Services\Dto\DnnModuleDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="29" sc="64" el="29" ec="68">Services\Dto\DnnModuleDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ErrorDefaultOnOtherTab">
          <declaration><![CDATA[public bool ErrorDefaultOnOtherTab]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="28" sc="46" el="28" ec="50">Services\Dto\DnnModuleDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="28" sc="51" el="28" ec="55">Services\Dto\DnnModuleDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ErrorDuplicateModule">
          <declaration><![CDATA[public bool ErrorDuplicateModule]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="27" sc="44" el="27" ec="48">Services\Dto\DnnModuleDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="27" sc="49" el="27" ec="53">Services\Dto\DnnModuleDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ErrorToolTip">
          <declaration><![CDATA[public string ErrorToolTip]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="123" sc="13" el="140" ec="14">Services\Dto\DnnModuleDto.cs</location>
            <body hash="0c70092e905934d2fd4bdba92f8049a7"><![CDATA[{
                if (ErrorDefaultOnOtherTab)
                {
                    return "Default module on other tab";
                }

                if (ErrorCultureOfModuleNotCultureOfTab)
                {
                    return "Culture of module # culture of tab";
                }

                if (ErrorDuplicateModule)
                {
                    return "Duplicate module";
                }

                return "";
            }]]></body>
          </codeblock>
        </property>
        <property name="ErrorVisible">
          <declaration><![CDATA[public bool ErrorVisible]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="118" sc="37" el="118" ec="122">Services\Dto\DnnModuleDto.cs</location>
            <body hash="7c6bf6af6aa6d07a17f9ca84d4a1233b"><![CDATA[ErrorDefaultOnOtherTab || ErrorCultureOfModuleNotCultureOfTab || ErrorDuplicateModul]]></body>
          </codeblock>
        </property>
        <property name="Exist">
          <declaration><![CDATA[public bool Exist]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="45" sc="30" el="45" ec="45">Services\Dto\DnnModuleDto.cs</location>
            <body hash="bdd246dfc0ceb6726930fdbe1d8b1e07"><![CDATA[TabModuleId > ]]></body>
          </codeblock>
        </property>
        <property name="IsDeleted">
          <declaration><![CDATA[public bool IsDeleted]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="25" sc="33" el="25" ec="37">Services\Dto\DnnModuleDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="25" sc="38" el="25" ec="42">Services\Dto\DnnModuleDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="IsLocalized">
          <declaration><![CDATA[public bool IsLocalized]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="23" sc="35" el="23" ec="39">Services\Dto\DnnModuleDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="23" sc="40" el="23" ec="44">Services\Dto\DnnModuleDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="IsShared">
          <declaration><![CDATA[public bool IsShared]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="24" sc="32" el="24" ec="36">Services\Dto\DnnModuleDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="24" sc="37" el="24" ec="41">Services\Dto\DnnModuleDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="IsTranslated">
          <declaration><![CDATA[public bool IsTranslated]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="22" sc="36" el="22" ec="40">Services\Dto\DnnModuleDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="22" sc="41" el="22" ec="45">Services\Dto\DnnModuleDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="LocalizedTooltip">
          <declaration><![CDATA[public string LocalizedTooltip]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="99" sc="13" el="115" ec="14">Services\Dto\DnnModuleDto.cs</location>
            <body hash="a4fc07d6e9fd65ae752045f6f14858a6"><![CDATA[{
                if (CultureCode == null || DefaultLanguageGuid == Null.NullGuid)
                {
                    return "";
                }

                var pageName = "";
                if (DefaultTabName != null)
                    pageName = " / " + DefaultTabName;

                if (ModuleId == DefaultModuleId)
                {
                    return string.Format(LocalizeString("ReferenceDefault.Text"), pageName);
                }

                return string.Format(LocalizeString("Detached.Text"), pageName);
            }]]></body>
          </codeblock>
        </property>
        <property name="LocalizedVisible">
          <declaration><![CDATA[public bool LocalizedVisible]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="43" sc="41" el="43" ec="117">Services\Dto\DnnModuleDto.cs</location>
            <body hash="ca61be29403a34e6979b6d636d210a2b"><![CDATA[!ErrorVisible && CultureCode != null && DefaultLanguageGuid != Null.NullGui]]></body>
          </codeblock>
        </property>
        <property name="LocalResourceFile">
          <declaration><![CDATA[public string LocalResourceFile]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="32" sc="43" el="32" ec="47">Services\Dto\DnnModuleDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="32" sc="48" el="32" ec="52">Services\Dto\DnnModuleDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ModuleId">
          <declaration><![CDATA[public int ModuleId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="18" sc="31" el="18" ec="35">Services\Dto\DnnModuleDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="18" sc="36" el="18" ec="40">Services\Dto\DnnModuleDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ModuleInfoHelp">
          <declaration><![CDATA[public string ModuleInfoHelp]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="21" sc="40" el="21" ec="44">Services\Dto\DnnModuleDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="21" sc="45" el="21" ec="49">Services\Dto\DnnModuleDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ModuleTitle">
          <declaration><![CDATA[public string ModuleTitle]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="13" sc="37" el="13" ec="41">Services\Dto\DnnModuleDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="13" sc="42" el="13" ec="46">Services\Dto\DnnModuleDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="TabId">
          <declaration><![CDATA[public int TabId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="16" sc="28" el="16" ec="32">Services\Dto\DnnModuleDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="16" sc="33" el="16" ec="37">Services\Dto\DnnModuleDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="TabModuleId">
          <declaration><![CDATA[public int TabModuleId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="17" sc="34" el="17" ec="38">Services\Dto\DnnModuleDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="17" sc="39" el="17" ec="43">Services\Dto\DnnModuleDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="TranslatedTooltip">
          <declaration><![CDATA[public string TranslatedTooltip]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="72" sc="13" el="93" ec="14">Services\Dto\DnnModuleDto.cs</location>
            <body hash="93c35a722e48da6221e84e7e236666ec"><![CDATA[{
                if (CultureCode == null)
                    return "";
                if (DefaultLanguageGuid == Null.NullGuid)
                {
                    return "";
                }
                var pageName = "";
                if (DefaultTabName != null)
                    pageName = " / " + DefaultTabName;

                if (ModuleId == DefaultModuleId)
                {
                    return string.Format(LocalizeString("Reference.Text"), pageName);
                }
                if (IsTranslated)
                {
                    return string.Format(LocalizeString("Translated.Text"), pageName);

                }
                return string.Format(LocalizeString("NotTranslated.Text"), pageName);
            }]]></body>
          </codeblock>
        </property>
        <property name="TranslatedVisible">
          <declaration><![CDATA[public bool TranslatedVisible]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="40" sc="42" el="41" ec="112">Services\Dto\DnnModuleDto.cs</location>
            <body hash="1b176f7d7caf4771868af23c82c3da6e"><![CDATA[!ErrorVisible && CultureCode != null
                                         && DefaultLanguageGuid != Null.NullGuid && ModuleId != DefaultModuleId]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnModulesDto">
      <declaration><![CDATA[public class DnnModulesDto]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnModulesDto(IEnumerable<string> locales)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="14" sc="9" el="21" ec="10">Services\Dto\DnnModulesDto.cs</location>
            <body hash="22fb6e7d8addea9a931620875e73c383"><![CDATA[public DnnModulesDto(IEnumerable<string> locales)
        {
            Modules = new List<DnnModuleDto>(); // one module for each language
            foreach (var locale in locales)
            {
                Modules.Add(new DnnModuleDto {CultureCode = locale});
            }
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="Module">
          <declaration><![CDATA[public DnnModuleDto Module(string locale)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="24" sc="9" el="26" ec="10">Services\Dto\DnnModulesDto.cs</location>
            <body hash="c547c887419a15f635de6e92a9f398d5"><![CDATA[{
            return Modules.Single(mo => mo.CultureCode == locale);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="Modules">
          <declaration><![CDATA[public List<DnnModuleDto> Modules]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="12" sc="45" el="12" ec="49">Services\Dto\DnnModulesDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
        </property>
        <property name="UniqueId">
          <declaration><![CDATA[public Guid UniqueId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="11" sc="32" el="11" ec="36">Services\Dto\DnnModulesDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="11" sc="37" el="11" ec="41">Services\Dto\DnnModulesDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnModulesRequest">
      <declaration><![CDATA[public class DnnModulesRequest]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnModulesRequest()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="Modules">
          <declaration><![CDATA[public List<DnnModuleDto> Modules]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="9" sc="45" el="9" ec="49">Services\Dto\DnnModulesRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="9" sc="50" el="9" ec="54">Services\Dto\DnnModulesRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="UniqueId">
          <declaration><![CDATA[public Guid UniqueId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="8" sc="32" el="8" ec="36">Services\Dto\DnnModulesRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="8" sc="37" el="8" ec="41">Services\Dto\DnnModulesRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnPageDto">
      <declaration><![CDATA[public class DnnPageDto]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnPageDto()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="IsLanguagePublished">
          <declaration><![CDATA[private static bool IsLanguagePublished(int portalId, string code)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="56" sc="9" el="64" ec="10">Services\Dto\DnnPageDto.cs</location>
            <body hash="85a358451dff1917ac45c49badd7cfd0"><![CDATA[{
            var isPublished = Null.NullBoolean;
            Locale enabledLanguage;
            if (LocaleController.Instance.GetLocales(portalId).TryGetValue(code, out enabledLanguage))
            {
                isPublished = enabledLanguage.IsPublished;
            }
            return isPublished;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="CanAdminPage">
          <declaration><![CDATA[public bool CanAdminPage]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="29" sc="36" el="29" ec="40">Services\Dto\DnnPageDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="29" sc="41" el="29" ec="45">Services\Dto\DnnPageDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="CanViewPage">
          <declaration><![CDATA[public bool CanViewPage]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="26" sc="35" el="26" ec="39">Services\Dto\DnnPageDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="26" sc="40" el="26" ec="44">Services\Dto\DnnPageDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="CultureCode">
          <declaration><![CDATA[public string CultureCode]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="16" sc="37" el="16" ec="41">Services\Dto\DnnPageDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="16" sc="42" el="16" ec="46">Services\Dto\DnnPageDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Default">
          <declaration><![CDATA[public bool Default]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="38" sc="32" el="38" ec="68">Services\Dto\DnnPageDto.cs</location>
            <body hash="dc9fd254736dbc93008a922d1c9d9f62"><![CDATA[DefaultLanguageGuid == Null.NullGui]]></body>
          </codeblock>
        </property>
        <property name="DefaultLanguageGuid">
          <declaration><![CDATA[public Guid DefaultLanguageGuid]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="17" sc="43" el="17" ec="47">Services\Dto\DnnPageDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="17" sc="48" el="17" ec="52">Services\Dto\DnnPageDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Description">
          <declaration><![CDATA[public string Description]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="15" sc="37" el="15" ec="41">Services\Dto\DnnPageDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="15" sc="42" el="15" ec="46">Services\Dto\DnnPageDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="HasChildren">
          <declaration><![CDATA[public bool HasChildren]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="22" sc="35" el="22" ec="39">Services\Dto\DnnPageDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="22" sc="40" el="22" ec="44">Services\Dto\DnnPageDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="IsPublished">
          <declaration><![CDATA[public bool IsPublished]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="19" sc="35" el="19" ec="39">Services\Dto\DnnPageDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="19" sc="40" el="19" ec="44">Services\Dto\DnnPageDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="IsTranslated">
          <declaration><![CDATA[public bool IsTranslated]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="18" sc="36" el="18" ec="40">Services\Dto\DnnPageDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="18" sc="41" el="18" ec="45">Services\Dto\DnnPageDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="LanguageStatus">
          <declaration><![CDATA[public string LanguageStatus]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="43" sc="13" el="52" ec="14">Services\Dto\DnnPageDto.cs</location>
            <body hash="901e8d8b2888851e79b39b2e8e79409f"><![CDATA[{
                var portalSettings = PortalController.Instance.GetCurrentPortalSettings();

                if (CultureCode == portalSettings.DefaultLanguage)
                    return Localization.GetString("Default.Text", LocalResourceFile);

                return IsLanguagePublished(portalSettings.PortalId, CultureCode)
                    ? ""
                    : Localization.GetString("NotActive.Text", LocalResourceFile);
            }]]></body>
          </codeblock>
        </property>
        <property name="LocalResourceFile">
          <declaration><![CDATA[public string LocalResourceFile]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="32" sc="43" el="32" ec="47">Services\Dto\DnnPageDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="32" sc="48" el="32" ec="52">Services\Dto\DnnPageDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="PageUrl">
          <declaration><![CDATA[public string PageUrl]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="23" sc="33" el="23" ec="37">Services\Dto\DnnPageDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="23" sc="38" el="23" ec="42">Services\Dto\DnnPageDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Path">
          <declaration><![CDATA[public string Path]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="21" sc="30" el="21" ec="34">Services\Dto\DnnPageDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="21" sc="35" el="21" ec="39">Services\Dto\DnnPageDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Position">
          <declaration><![CDATA[public string Position]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="20" sc="34" el="20" ec="38">Services\Dto\DnnPageDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="20" sc="39" el="20" ec="43">Services\Dto\DnnPageDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="PublishedVisible">
          <declaration><![CDATA[public bool PublishedVisible]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="36" sc="41" el="36" ec="65">Services\Dto\DnnPageDto.cs</location>
            <body hash="f9645580b248bc547c549ea4cd9aeb98"><![CDATA[!Default && IsTranslate]]></body>
          </codeblock>
        </property>
        <property name="TabId">
          <declaration><![CDATA[public int TabId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="12" sc="28" el="12" ec="32">Services\Dto\DnnPageDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="12" sc="33" el="12" ec="37">Services\Dto\DnnPageDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="TabName">
          <declaration><![CDATA[public string TabName]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="13" sc="33" el="13" ec="37">Services\Dto\DnnPageDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="13" sc="38" el="13" ec="42">Services\Dto\DnnPageDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Title">
          <declaration><![CDATA[public string Title]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="14" sc="31" el="14" ec="35">Services\Dto\DnnPageDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="14" sc="36" el="14" ec="40">Services\Dto\DnnPageDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="TranslatedVisible">
          <declaration><![CDATA[public bool TranslatedVisible]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="34" sc="42" el="34" ec="69">Services\Dto\DnnPageDto.cs</location>
            <body hash="34a1356f371a704ce10b226959887041"><![CDATA[!Default && TabName != nul]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnPagesDto">
      <declaration><![CDATA[public class DnnPagesDto]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnPagesDto(IList<LocaleInfoDto> locales)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="18" sc="9" el="27" ec="10">Services\Dto\DnnPagesDto.cs</location>
            <body hash="3469dc221695a7c0539e18d13027e24d"><![CDATA[public DnnPagesDto(IList<LocaleInfoDto> locales)
        {
            Locales = locales;
            Pages = new List<DnnPageDto>(); // one of each language
            Modules = new List<DnnModulesDto>(); // one for each module on the page
            foreach (var locale in locales)
            {
                Pages.Add(new DnnPageDto { CultureCode = locale.CultureCode });
            }
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="Error1">
          <declaration><![CDATA[public bool Error1(int moduleId, Guid uniqueId, string cultureCode)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="47" sc="9" el="50" ec="10">Services\Dto\DnnPagesDto.cs</location>
            <body hash="227414df0346ab7112db2e73e1aebb8c"><![CDATA[{
            return Modules.Any(dm => dm.UniqueId != uniqueId &&
                                     dm.Modules.Any(mm => mm.ModuleId == moduleId && mm.CultureCode != cultureCode));
        }]]></body>
          </codeblock>
        </method>
        <method name="Module">
          <declaration><![CDATA[public DnnModulesDto Module(Guid uniqueId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="35" sc="9" el="44" ec="10">Services\Dto\DnnPagesDto.cs</location>
            <body hash="1cfe7175e965a161ed66e4dd657d3b6c"><![CDATA[{
            var m = Modules.SingleOrDefault(dm => dm.UniqueId == uniqueId);
            if (m == null)
            {
                m = new DnnModulesDto(Locales.Select(l => l.CultureCode)) { UniqueId = uniqueId };
                Modules.Add(m);
            }
            return m;

        }]]></body>
          </codeblock>
        </method>
        <method name="Page">
          <declaration><![CDATA[public DnnPageDto Page(string locale)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="30" sc="9" el="32" ec="10">Services\Dto\DnnPagesDto.cs</location>
            <body hash="03098a24a1343029b7e828714f54fd68"><![CDATA[{
            return Pages.Single(pa => pa.CultureCode == locale);
        }]]></body>
          </codeblock>
        </method>
        <method name="RemoveLocale">
          <declaration><![CDATA[public void RemoveLocale(string cultureCode)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="53" sc="9" el="56" ec="10">Services\Dto\DnnPagesDto.cs</location>
            <body hash="7321fcd6144074bb2e2189302331e364"><![CDATA[{
            var locale = Locales.FirstOrDefault(l => l.CultureCode == cultureCode);
            if (locale != null) Locales.Remove(locale);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="ErrorExists">
          <declaration><![CDATA[public bool ErrorExists]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="13" sc="35" el="13" ec="39">Services\Dto\DnnPagesDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="13" sc="40" el="13" ec="44">Services\Dto\DnnPagesDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="HasMissingLanguages">
          <declaration><![CDATA[public bool HasMissingLanguages]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="12" sc="43" el="12" ec="47">Services\Dto\DnnPagesDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="12" sc="48" el="12" ec="52">Services\Dto\DnnPagesDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Locales">
          <declaration><![CDATA[public IList<LocaleInfoDto> Locales]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="14" sc="47" el="14" ec="51">Services\Dto\DnnPagesDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
        </property>
        <property name="Modules">
          <declaration><![CDATA[public IList<DnnModulesDto> Modules]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="16" sc="47" el="16" ec="51">Services\Dto\DnnPagesDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
        </property>
        <property name="Pages">
          <declaration><![CDATA[public IList<DnnPageDto> Pages]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="15" sc="42" el="15" ec="46">Services\Dto\DnnPagesDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnPagesRequest">
      <declaration><![CDATA[public class DnnPagesRequest]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnPagesRequest()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="ErrorExists">
          <declaration><![CDATA[public bool ErrorExists]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="9" sc="35" el="9" ec="39">Services\Dto\DnnPagesRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="9" sc="40" el="9" ec="44">Services\Dto\DnnPagesRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="HasMissingLanguages">
          <declaration><![CDATA[public bool HasMissingLanguages]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="8" sc="43" el="8" ec="47">Services\Dto\DnnPagesRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="8" sc="48" el="8" ec="52">Services\Dto\DnnPagesRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Locales">
          <declaration><![CDATA[public IList<LocaleInfoDto> Locales]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="10" sc="47" el="10" ec="51">Services\Dto\DnnPagesRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="10" sc="52" el="10" ec="56">Services\Dto\DnnPagesRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Modules">
          <declaration><![CDATA[public IList<DnnModulesRequest> Modules]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="12" sc="51" el="12" ec="55">Services\Dto\DnnPagesRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="12" sc="56" el="12" ec="60">Services\Dto\DnnPagesRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Pages">
          <declaration><![CDATA[public IList<DnnPageDto> Pages]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="11" sc="42" el="11" ec="46">Services\Dto\DnnPagesRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="11" sc="47" el="11" ec="51">Services\Dto\DnnPagesRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="ModuleItem">
      <declaration><![CDATA[public class ModuleItem]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public ModuleItem()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="EditSettingUrl">
          <declaration><![CDATA[public string EditSettingUrl]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="18" sc="40" el="18" ec="44">Services\Dto\ModuleItem.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="18" sc="45" el="18" ec="49">Services\Dto\ModuleItem.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="FriendlyName">
          <declaration><![CDATA[public string FriendlyName]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="15" sc="38" el="15" ec="42">Services\Dto\ModuleItem.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="15" sc="43" el="15" ec="47">Services\Dto\ModuleItem.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Id">
          <declaration><![CDATA[public int Id]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="9" sc="25" el="9" ec="29">Services\Dto\ModuleItem.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="9" sc="30" el="9" ec="34">Services\Dto\ModuleItem.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Title">
          <declaration><![CDATA[public string Title]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="12" sc="31" el="12" ec="35">Services\Dto\ModuleItem.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="12" sc="36" el="12" ec="40">Services\Dto\ModuleItem.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="PageFolderTemplate">
      <declaration><![CDATA[public class PageFolderTemplate]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public PageFolderTemplate()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="Key">
          <declaration><![CDATA[public int Key]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="13" sc="26" el="13" ec="30">Services\Dto\PageFolderTemplate.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="13" sc="31" el="13" ec="35">Services\Dto\PageFolderTemplate.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Value">
          <declaration><![CDATA[public string Value]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="16" sc="31" el="16" ec="35">Services\Dto\PageFolderTemplate.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="16" sc="36" el="16" ec="40">Services\Dto\PageFolderTemplate.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="PageItem">
      <declaration><![CDATA[public class PageItem]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public PageItem()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="ChildrenCount">
          <declaration><![CDATA[public int ChildrenCount]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="15" sc="36" el="15" ec="40">Services\Dto\PageItem.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="15" sc="41" el="15" ec="45">Services\Dto\PageItem.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Id">
          <declaration><![CDATA[public int Id]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="9" sc="25" el="9" ec="29">Services\Dto\PageItem.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="9" sc="30" el="9" ec="34">Services\Dto\PageItem.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="IsSpecial">
          <declaration><![CDATA[public bool IsSpecial]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="33" sc="33" el="33" ec="37">Services\Dto\PageItem.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="33" sc="38" el="33" ec="42">Services\Dto\PageItem.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Level">
          <declaration><![CDATA[public int Level]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="27" sc="28" el="27" ec="32">Services\Dto\PageItem.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="27" sc="33" el="27" ec="37">Services\Dto\PageItem.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Name">
          <declaration><![CDATA[public string Name]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="12" sc="30" el="12" ec="34">Services\Dto\PageItem.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="12" sc="35" el="12" ec="39">Services\Dto\PageItem.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="PageType">
          <declaration><![CDATA[public string PageType]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="36" sc="34" el="36" ec="38">Services\Dto\PageItem.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="36" sc="39" el="36" ec="43">Services\Dto\PageItem.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ParentId">
          <declaration><![CDATA[public int ParentId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="24" sc="31" el="24" ec="35">Services\Dto\PageItem.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="24" sc="36" el="24" ec="40">Services\Dto\PageItem.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Status">
          <declaration><![CDATA[public string Status]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="21" sc="32" el="21" ec="36">Services\Dto\PageItem.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="21" sc="37" el="21" ec="41">Services\Dto\PageItem.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="TabPath">
          <declaration><![CDATA[public string TabPath]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="30" sc="33" el="30" ec="37">Services\Dto\PageItem.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="30" sc="38" el="30" ec="42">Services\Dto\PageItem.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Url">
          <declaration><![CDATA[public string Url]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="18" sc="29" el="18" ec="33">Services\Dto\PageItem.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="18" sc="34" el="18" ec="38">Services\Dto\PageItem.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="PageModuleItem">
      <declaration><![CDATA[public class PageModuleItem]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public PageModuleItem()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="ModuleId">
          <declaration><![CDATA[public int ModuleId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="12" sc="31" el="12" ec="35">Services\Dto\PageModuleItem.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="12" sc="36" el="12" ec="40">Services\Dto\PageModuleItem.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="PageId">
          <declaration><![CDATA[public int PageId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="9" sc="29" el="9" ec="33">Services\Dto\PageModuleItem.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="9" sc="34" el="9" ec="38">Services\Dto\PageModuleItem.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="PageMoveRequest">
      <declaration><![CDATA[public class PageMoveRequest]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public PageMoveRequest()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="Action">
          <declaration><![CDATA[public string Action]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="11" sc="32" el="11" ec="36">Services\Dto\PageMoveRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="11" sc="37" el="11" ec="41">Services\Dto\PageMoveRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="PageId">
          <declaration><![CDATA[public int PageId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="5" sc="29" el="5" ec="33">Services\Dto\PageMoveRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="5" sc="34" el="5" ec="38">Services\Dto\PageMoveRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ParentId">
          <declaration><![CDATA[public int ParentId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="9" sc="31" el="9" ec="35">Services\Dto\PageMoveRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="9" sc="36" el="9" ec="40">Services\Dto\PageMoveRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="RelatedPageId">
          <declaration><![CDATA[public int RelatedPageId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="7" sc="36" el="7" ec="40">Services\Dto\PageMoveRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="7" sc="41" el="7" ec="45">Services\Dto\PageMoveRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="PagePermissions">
      <declaration><![CDATA[public class PagePermissions : Permissions]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public PagePermissions(bool needDefinitions) : base(needDefinitions)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="11" sc="56" el="17" ec="10">Services\Dto\PagePermissions.cs</location>
            <body hash="9a177de36741a799e25cc9458ccb4e94"><![CDATA[base(needDefinitions)
        {
            foreach (var role in PermissionProvider.Instance().ImplicitRolesForPages(PortalSettings.Current.PortalId))
            {
                this.EnsureRole(role, true, true);
            }
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="LoadPermissionDefinitions">
          <declaration><![CDATA[protected override void LoadPermissionDefinitions()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="20" sc="9" el="31" ec="10">Services\Dto\PagePermissions.cs</location>
            <body hash="87eb73c89f837482e4db26319116198c"><![CDATA[{
            foreach (PermissionInfo permission in PermissionController.GetPermissionsByTab())
            {
                PermissionDefinitions.Add(new Permission
                {
                    PermissionId = permission.PermissionID,
                    PermissionName = permission.PermissionName,
                    FullControl = PermissionHelper.IsFullControl(permission),
                    View = PermissionHelper.IsViewPermisison(permission)
                });
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="PageSettings">
      <declaration><![CDATA[public class PageSettings]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public PageSettings()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="AbsoluteUrl">
          <declaration><![CDATA[public string AbsoluteUrl]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="19" sc="37" el="19" ec="41">Services\Dto\PageSettings.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="19" sc="42" el="19" ec="46">Services\Dto\PageSettings.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Alias">
          <declaration><![CDATA[public string Alias]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="40" sc="31" el="40" ec="35">Services\Dto\PageSettings.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="40" sc="36" el="40" ec="40">Services\Dto\PageSettings.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="AllowIndex">
          <declaration><![CDATA[public bool AllowIndex]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="88" sc="34" el="88" ec="38">Services\Dto\PageSettings.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="88" sc="39" el="88" ec="43">Services\Dto\PageSettings.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="CacheDuration">
          <declaration><![CDATA[public int? CacheDuration]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="94" sc="37" el="94" ec="41">Services\Dto\PageSettings.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="94" sc="42" el="94" ec="46">Services\Dto\PageSettings.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="CacheExcludeVaryBy">
          <declaration><![CDATA[public string CacheExcludeVaryBy]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="103" sc="44" el="103" ec="48">Services\Dto\PageSettings.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="103" sc="49" el="103" ec="53">Services\Dto\PageSettings.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="CacheIncludeExclude">
          <declaration><![CDATA[public bool? CacheIncludeExclude]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="97" sc="44" el="97" ec="48">Services\Dto\PageSettings.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="97" sc="49" el="97" ec="53">Services\Dto\PageSettings.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="CacheIncludeVaryBy">
          <declaration><![CDATA[public string CacheIncludeVaryBy]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="100" sc="44" el="100" ec="48">Services\Dto\PageSettings.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="100" sc="49" el="100" ec="53">Services\Dto\PageSettings.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="CacheMaxVaryByCount">
          <declaration><![CDATA[public int? CacheMaxVaryByCount]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="106" sc="43" el="106" ec="47">Services\Dto\PageSettings.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="106" sc="48" el="106" ec="52">Services\Dto\PageSettings.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="CacheProvider">
          <declaration><![CDATA[public string CacheProvider]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="91" sc="39" el="91" ec="43">Services\Dto\PageSettings.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="91" sc="44" el="91" ec="48">Services\Dto\PageSettings.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ContainerSrc">
          <declaration><![CDATA[public string ContainerSrc]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="130" sc="38" el="130" ec="42">Services\Dto\PageSettings.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="130" sc="43" el="130" ec="47">Services\Dto\PageSettings.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Created">
          <declaration><![CDATA[public string Created]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="52" sc="33" el="52" ec="37">Services\Dto\PageSettings.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="52" sc="38" el="52" ec="42">Services\Dto\PageSettings.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="CreatedOnDate">
          <declaration><![CDATA[public DateTime CreatedOnDate]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="55" sc="41" el="55" ec="45">Services\Dto\PageSettings.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="55" sc="46" el="55" ec="50">Services\Dto\PageSettings.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="CustomUrlEnabled">
          <declaration><![CDATA[public bool CustomUrlEnabled]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="64" sc="40" el="64" ec="44">Services\Dto\PageSettings.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="64" sc="45" el="64" ec="49">Services\Dto\PageSettings.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Description">
          <declaration><![CDATA[public string Description]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="31" sc="37" el="31" ec="41">Services\Dto\PageSettings.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="31" sc="42" el="31" ec="46">Services\Dto\PageSettings.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="DisableLink">
          <declaration><![CDATA[public bool DisableLink]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="49" sc="35" el="49" ec="39">Services\Dto\PageSettings.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="49" sc="40" el="49" ec="44">Services\Dto\PageSettings.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="EndDate">
          <declaration><![CDATA[public DateTime? EndDate]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="73" sc="36" el="73" ec="40">Services\Dto\PageSettings.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="73" sc="41" el="73" ec="45">Services\Dto\PageSettings.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ExistingTabRedirection">
          <declaration><![CDATA[public string ExistingTabRedirection]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="145" sc="48" el="145" ec="52">Services\Dto\PageSettings.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="145" sc="53" el="145" ec="57">Services\Dto\PageSettings.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ExternalRedirection">
          <declaration><![CDATA[public string ExternalRedirection]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="133" sc="45" el="133" ec="49">Services\Dto\PageSettings.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="133" sc="50" el="133" ec="54">Services\Dto\PageSettings.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="FileFolderPathRedirection">
          <declaration><![CDATA[public string FileFolderPathRedirection]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="142" sc="51" el="142" ec="55">Services\Dto\PageSettings.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="142" sc="56" el="142" ec="60">Services\Dto\PageSettings.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="FileIdRedirection">
          <declaration><![CDATA[public int? FileIdRedirection]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="136" sc="41" el="136" ec="45">Services\Dto\PageSettings.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="136" sc="46" el="136" ec="50">Services\Dto\PageSettings.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="FileNameRedirection">
          <declaration><![CDATA[public string FileNameRedirection]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="139" sc="45" el="139" ec="49">Services\Dto\PageSettings.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="139" sc="50" el="139" ec="54">Services\Dto\PageSettings.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="HasChild">
          <declaration><![CDATA[public bool HasChild]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="61" sc="32" el="61" ec="36">Services\Dto\PageSettings.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="61" sc="37" el="61" ec="41">Services\Dto\PageSettings.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="HasParent">
          <declaration><![CDATA[public bool HasParent]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="154" sc="33" el="154" ec="37">Services\Dto\PageSettings.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="154" sc="38" el="154" ec="42">Services\Dto\PageSettings.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Hierarchy">
          <declaration><![CDATA[public string Hierarchy]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="58" sc="35" el="58" ec="39">Services\Dto\PageSettings.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="58" sc="40" el="58" ec="44">Services\Dto\PageSettings.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="IncludeInMenu">
          <declaration><![CDATA[public bool IncludeInMenu]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="46" sc="37" el="46" ec="41">Services\Dto\PageSettings.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="46" sc="42" el="46" ec="46">Services\Dto\PageSettings.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="IsSecure">
          <declaration><![CDATA[public bool IsSecure]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="85" sc="32" el="85" ec="36">Services\Dto\PageSettings.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="85" sc="37" el="85" ec="41">Services\Dto\PageSettings.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Keywords">
          <declaration><![CDATA[public string Keywords]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="34" sc="34" el="34" ec="38">Services\Dto\PageSettings.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="34" sc="39" el="34" ec="43">Services\Dto\PageSettings.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="LinkNewWindow">
          <declaration><![CDATA[public bool LinkNewWindow]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="118" sc="37" el="118" ec="41">Services\Dto\PageSettings.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="118" sc="42" el="118" ec="46">Services\Dto\PageSettings.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Locales">
          <declaration><![CDATA[public IOrderedEnumerable<KeyValuePair<int, string>> Locales]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="152" sc="72" el="152" ec="76">Services\Dto\PageSettings.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="152" sc="77" el="152" ec="81">Services\Dto\PageSettings.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="LocalizedName">
          <declaration><![CDATA[public string LocalizedName]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="25" sc="39" el="25" ec="43">Services\Dto\PageSettings.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="25" sc="44" el="25" ec="48">Services\Dto\PageSettings.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Modules">
          <declaration><![CDATA[public IEnumerable<ModuleItem> Modules]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="79" sc="50" el="79" ec="54">Services\Dto\PageSettings.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="79" sc="55" el="79" ec="59">Services\Dto\PageSettings.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Name">
          <declaration><![CDATA[public string Name]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="16" sc="30" el="16" ec="34">Services\Dto\PageSettings.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="16" sc="35" el="16" ec="39">Services\Dto\PageSettings.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="PageHeadText">
          <declaration><![CDATA[public string PageHeadText]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="109" sc="38" el="109" ec="42">Services\Dto\PageSettings.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="109" sc="43" el="109" ec="47">Services\Dto\PageSettings.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="PageStyleSheet">
          <declaration><![CDATA[public string PageStyleSheet]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="121" sc="40" el="121" ec="44">Services\Dto\PageSettings.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="121" sc="45" el="121" ec="49">Services\Dto\PageSettings.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="PageType">
          <declaration><![CDATA[public string PageType]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="67" sc="34" el="67" ec="38">Services\Dto\PageSettings.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="67" sc="39" el="67" ec="43">Services\Dto\PageSettings.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="PageUrls">
          <declaration><![CDATA[public IEnumerable<Url> PageUrls]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="82" sc="44" el="82" ec="48">Services\Dto\PageSettings.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="82" sc="49" el="82" ec="53">Services\Dto\PageSettings.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ParentId">
          <declaration><![CDATA[public int? ParentId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="166" sc="32" el="166" ec="36">Services\Dto\PageSettings.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="166" sc="37" el="166" ec="41">Services\Dto\PageSettings.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="PermanentRedirect">
          <declaration><![CDATA[public bool PermanentRedirect]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="115" sc="41" el="115" ec="45">Services\Dto\PageSettings.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="115" sc="46" el="115" ec="50">Services\Dto\PageSettings.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Permissions">
          <declaration><![CDATA[public PagePermissions Permissions]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="76" sc="46" el="76" ec="50">Services\Dto\PageSettings.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="76" sc="51" el="76" ec="55">Services\Dto\PageSettings.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="PrimaryAliasId">
          <declaration><![CDATA[public int? PrimaryAliasId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="150" sc="38" el="150" ec="42">Services\Dto\PageSettings.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="150" sc="43" el="150" ec="47">Services\Dto\PageSettings.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="SiteAliases">
          <declaration><![CDATA[public IEnumerable<KeyValuePair<int, string>> SiteAliases]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="148" sc="69" el="148" ec="73">Services\Dto\PageSettings.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="148" sc="74" el="148" ec="78">Services\Dto\PageSettings.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="SiteMapPriority">
          <declaration><![CDATA[public float SiteMapPriority]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="112" sc="40" el="112" ec="44">Services\Dto\PageSettings.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="112" sc="45" el="112" ec="49">Services\Dto\PageSettings.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="SkinSrc">
          <declaration><![CDATA[public string SkinSrc]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="127" sc="33" el="127" ec="37">Services\Dto\PageSettings.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="127" sc="38" el="127" ec="42">Services\Dto\PageSettings.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="StartDate">
          <declaration><![CDATA[public DateTime? StartDate]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="70" sc="38" el="70" ec="42">Services\Dto\PageSettings.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="70" sc="43" el="70" ec="47">Services\Dto\PageSettings.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Status">
          <declaration><![CDATA[public string Status]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="22" sc="32" el="22" ec="36">Services\Dto\PageSettings.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="22" sc="37" el="22" ec="41">Services\Dto\PageSettings.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="TabId">
          <declaration><![CDATA[public int TabId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="13" sc="28" el="13" ec="32">Services\Dto\PageSettings.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="13" sc="33" el="13" ec="37">Services\Dto\PageSettings.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Tags">
          <declaration><![CDATA[public string Tags]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="37" sc="30" el="37" ec="34">Services\Dto\PageSettings.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="37" sc="35" el="37" ec="39">Services\Dto\PageSettings.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="TemplateId">
          <declaration><![CDATA[public int TemplateId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="163" sc="33" el="163" ec="37">Services\Dto\PageSettings.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="163" sc="38" el="163" ec="42">Services\Dto\PageSettings.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Templates">
          <declaration><![CDATA[public IEnumerable<Template> Templates]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="160" sc="50" el="160" ec="54">Services\Dto\PageSettings.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="160" sc="55" el="160" ec="59">Services\Dto\PageSettings.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="TemplateTabId">
          <declaration><![CDATA[public int TemplateTabId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="157" sc="36" el="157" ec="40">Services\Dto\PageSettings.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="157" sc="41" el="157" ec="45">Services\Dto\PageSettings.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ThemeName">
          <declaration><![CDATA[public string ThemeName]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="124" sc="35" el="124" ec="39">Services\Dto\PageSettings.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="124" sc="40" el="124" ec="44">Services\Dto\PageSettings.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Title">
          <declaration><![CDATA[public string Title]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="28" sc="31" el="28" ec="35">Services\Dto\PageSettings.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="28" sc="36" el="28" ec="40">Services\Dto\PageSettings.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Url">
          <declaration><![CDATA[public string Url]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="43" sc="29" el="43" ec="33">Services\Dto\PageSettings.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="43" sc="34" el="43" ec="38">Services\Dto\PageSettings.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="PageTemplate">
      <declaration><![CDATA[public class PageTemplate]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public PageTemplate()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="Description">
          <declaration><![CDATA[public string Description]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="12" sc="37" el="12" ec="41">Services\Dto\PageTemplate.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="12" sc="42" el="12" ec="46">Services\Dto\PageTemplate.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="IncludeContent">
          <declaration><![CDATA[public bool IncludeContent]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="15" sc="38" el="15" ec="42">Services\Dto\PageTemplate.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="15" sc="43" el="15" ec="47">Services\Dto\PageTemplate.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Name">
          <declaration><![CDATA[public string Name]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="9" sc="30" el="9" ec="34">Services\Dto\PageTemplate.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="9" sc="35" el="9" ec="39">Services\Dto\PageTemplate.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="TabId">
          <declaration><![CDATA[public int TabId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="18" sc="28" el="18" ec="32">Services\Dto\PageTemplate.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="18" sc="33" el="18" ec="37">Services\Dto\PageTemplate.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="SeoUrl">
      <declaration><![CDATA[public class SeoUrl]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public SeoUrl()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="SaveUrl">
          <declaration><![CDATA[public SaveUrlDto SaveUrl]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="17" sc="37" el="17" ec="41">Services\Dto\SeoUrl.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="17" sc="42" el="17" ec="46">Services\Dto\SeoUrl.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="TabId">
          <declaration><![CDATA[public int TabId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="14" sc="28" el="14" ec="32">Services\Dto\SeoUrl.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="14" sc="33" el="14" ec="37">Services\Dto\SeoUrl.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="Theme">
      <declaration><![CDATA[public class Theme]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public Theme()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="ContainerSrc">
          <declaration><![CDATA[public string ContainerSrc]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="12" sc="38" el="12" ec="42">Services\Dto\Theme.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="12" sc="43" el="12" ec="47">Services\Dto\Theme.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="SkinSrc">
          <declaration><![CDATA[public string SkinSrc]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="9" sc="33" el="9" ec="37">Services\Dto\Theme.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="9" sc="38" el="9" ec="42">Services\Dto\Theme.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="TranslatorsComment">
      <declaration><![CDATA[public class TranslatorsComment]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public TranslatorsComment()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="TabId">
          <declaration><![CDATA[public int TabId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="8" sc="28" el="8" ec="32">Services\Dto\TranslatorsComment.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="8" sc="33" el="8" ec="37">Services\Dto\TranslatorsComment.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Text">
          <declaration><![CDATA[public string Text]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="9" sc="30" el="9" ec="34">Services\Dto\TranslatorsComment.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="9" sc="35" el="9" ec="39">Services\Dto\TranslatorsComment.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="Url">
      <declaration><![CDATA[public class Url]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public Url()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="Id">
          <declaration><![CDATA[public int Id]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="10" sc="25" el="10" ec="29">Services\Dto\Url.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="10" sc="30" el="10" ec="34">Services\Dto\Url.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="IsSystem">
          <declaration><![CDATA[public bool IsSystem]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="25" sc="32" el="25" ec="36">Services\Dto\Url.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="25" sc="37" el="25" ec="41">Services\Dto\Url.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Locale">
          <declaration><![CDATA[public KeyValuePair<int, string> Locale]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="19" sc="51" el="19" ec="55">Services\Dto\Url.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="19" sc="56" el="19" ec="60">Services\Dto\Url.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Path">
          <declaration><![CDATA[public string Path]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="14" sc="30" el="14" ec="34">Services\Dto\Url.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="14" sc="35" el="14" ec="39">Services\Dto\Url.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="PathWithNoExtension">
          <declaration><![CDATA[public string PathWithNoExtension]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="15" sc="45" el="15" ec="49">Services\Dto\Url.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="15" sc="50" el="15" ec="54">Services\Dto\Url.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="QueryString">
          <declaration><![CDATA[public string QueryString]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="17" sc="37" el="17" ec="41">Services\Dto\Url.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="17" sc="42" el="17" ec="46">Services\Dto\Url.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="SiteAlias">
          <declaration><![CDATA[public KeyValuePair<int, string> SiteAlias]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="12" sc="54" el="12" ec="58">Services\Dto\Url.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="12" sc="59" el="12" ec="63">Services\Dto\Url.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="SiteAliasUsage">
          <declaration><![CDATA[public int SiteAliasUsage]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="23" sc="37" el="23" ec="41">Services\Dto\Url.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="23" sc="42" el="23" ec="46">Services\Dto\Url.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="StatusCode">
          <declaration><![CDATA[public KeyValuePair<int, string> StatusCode]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="21" sc="55" el="21" ec="59">Services\Dto\Url.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="21" sc="60" el="21" ec="64">Services\Dto\Url.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="UserName">
          <declaration><![CDATA[public string UserName]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="27" sc="34" el="27" ec="38">Services\Dto\Url.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="27" sc="39" el="27" ec="43">Services\Dto\Url.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
</root>