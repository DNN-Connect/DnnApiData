<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<root file="Dnn.Modules.Languages.dll" version="08.00.01" generated="2017-06-19 22:49:05Z" generationTime="8.2976339">
  <namespace name="Dnn.Modules.Languages">
    <class name="CLControl">
      <declaration><![CDATA[public class CLControl : UserControl]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public CLControl()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="205" sc="9" el="208" ec="10">CLControl.ascx.cs</location>
            <body hash="b8f346fafa3f593aff1645331f729108"><![CDATA[public CLControl()
        {
            enablePageEdit = false;
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="BindAll">
          <declaration><![CDATA[public void BindAll(int tabID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="213" sc="9" el="383" ec="10">CLControl.ascx.cs</location>
            <body hash="4cf845c307b972ad6d23d329fafffb10"><![CDATA[{
            TabID = tabID;
            var currentTab = TabController.Instance.GetTab(tabID, PortalSettings.PortalId, false);

            //Unique id of default language page
            var uniqueId = currentTab.DefaultLanguageGuid != Null.NullGuid ? currentTab.DefaultLanguageGuid : currentTab.UniqueId;

            // get all non admin pages and not deleted
            var allPages = TabController.Instance.GetTabsByPortal(PortalSettings.PortalId).Values.Where(t => t.TabID != PortalSettings.AdminTabId && (Null.IsNull(t.ParentId) || t.ParentId != PortalSettings.AdminTabId));
            allPages = allPages.Where(t => t.IsDeleted == false);
            // get all localized pages of current page
            var tabInfos = allPages as IList<TabInfo> ?? allPages.ToList();
            var localizedPages = tabInfos.Where(t => t.DefaultLanguageGuid == uniqueId || t.UniqueId == uniqueId).OrderBy(t => t.DefaultLanguageGuid).ToList();
            Dictionary<string, TabInfo> localizedTabs = null;

            // we are going to build up a list of locales
            // this is a bit more involved, since we want the default language to be first.
            // also, we do not want to add any locales the user has no access to
            var locales = new List<string>();
            var localeController = new LocaleController();
            var localeDict = localeController.GetLocales(PortalSettings.PortalId);
            if (localeDict.Count > 0)
            {
                if (localizedPages.Count() == 1 && localizedPages.First().CultureCode == "")
                {
                    // locale neutral page
                    locales.Add("");
                }
                else if (localizedPages.Count() == 1 && localizedPages.First().CultureCode != PortalSettings.DefaultLanguage)
                {
                    locales.Add(localizedPages.First().CultureCode);
                    localizedTabs = new Dictionary<string, TabInfo>();
                    localizedTabs.Add(localizedPages.First().CultureCode, localizedPages.First());
                }
                else
                {

                    //force sort order, so first add default language
                    locales.Add(PortalSettings.DefaultLanguage);

                    // build up a list of localized tabs.
                    // depending on whether or not the selected page is in the default langauge
                    // we will add the localized tabs from the current page
                    // or from the defaultlanguage page
                    if (currentTab.CultureCode == PortalSettings.DefaultLanguage)
                    {
                        localizedTabs = currentTab.LocalizedTabs;
                    }
                    else
                    {
                        // selected page is not in default language
                        // add localizedtabs from defaultlanguage page
                        if (currentTab.DefaultLanguageTab != null)
                        {
                            localizedTabs = currentTab.DefaultLanguageTab.LocalizedTabs;
                        }
                    }

                    if (localizedTabs != null)
                    {
                        // only add locales from tabs the user has at least view permissions to. 
                        // we will handle the edit permissions at a later stage
                        locales.AddRange(from localizedTab in localizedTabs where TabPermissionController.CanViewPage(localizedTab.Value) select localizedTab.Value.CultureCode);
                    }


                }
            }
            else
            {
                locales.Add("");
            }

            Data = new DnnPages(locales);

            // filter the list of localized pages to only those that have a culture we want to see
            var viewableLocalizedPages = localizedPages.Where(localizedPage => locales.Find(locale => locale == localizedPage.CultureCode) != null).ToList();
            if (viewableLocalizedPages.Count() > 4)
            {
                mainContainer.Attributes.Add("class", "container RadGrid RadGrid_Default overflow");
            }

            foreach (var tabInfo in viewableLocalizedPages)
            {
                var localTabInfo = tabInfo;
                var dnnPage = Data.Page(localTabInfo.CultureCode);
                if (!TabPermissionController.CanViewPage(tabInfo))
                {
                    Data.RemoveLocale(localTabInfo.CultureCode);
                    Data.Pages.Remove(dnnPage);
                    break;
                }
                dnnPage.TabID = localTabInfo.TabID;
                dnnPage.TabName = localTabInfo.TabName;
                dnnPage.Title = localTabInfo.Title;
                dnnPage.Description = localTabInfo.Description;
                dnnPage.Path = localTabInfo.TabPath.Substring(0, localTabInfo.TabPath.LastIndexOf("//", StringComparison.Ordinal)).Replace("//", "");
                dnnPage.HasChildren = (TabController.Instance.GetTabsByPortal(PortalSettings.PortalId).WithParentId(tabInfo.TabID).Count != 0);
                dnnPage.CanAdminPage = TabPermissionController.CanAdminPage(tabInfo);
                dnnPage.CanViewPage = TabPermissionController.CanViewPage(tabInfo);
                dnnPage.LocalResourceFile = LocalResourceFile;

                // calculate position in the form of 1.3.2...
                var SiblingTabs = tabInfos.Where(t => t.ParentId == localTabInfo.ParentId && t.CultureCode == localTabInfo.CultureCode || t.CultureCode == null).OrderBy(t => t.TabOrder).ToList();
                dnnPage.Position = (SiblingTabs.IndexOf(localTabInfo) + 1).ToString(CultureInfo.InvariantCulture);
                int ParentTabId = localTabInfo.ParentId;
                while (ParentTabId > 0)
                {
                    TabInfo ParentTab = tabInfos.Single(t => t.TabID == ParentTabId);
                    int id = ParentTabId;
                    SiblingTabs = tabInfos.Where(t => t.ParentId == id && t.CultureCode == localTabInfo.CultureCode || t.CultureCode == null).OrderBy(t => t.TabOrder).ToList();
                    dnnPage.Position = (SiblingTabs.IndexOf(localTabInfo) + 1).ToString(CultureInfo.InvariantCulture) + "." + dnnPage.Position;
                    ParentTabId = ParentTab.ParentId;
                }

                dnnPage.DefaultLanguageGuid = localTabInfo.DefaultLanguageGuid;
                dnnPage.IsTranslated = localTabInfo.IsTranslated;
                dnnPage.IsPublished = TabController.Instance.IsTabPublished(localTabInfo);
                // generate modules information
                foreach (var moduleInfo in ModuleController.Instance.GetTabModules(localTabInfo.TabID).Values)
                {
                    var guid = moduleInfo.DefaultLanguageGuid == Null.NullGuid ? moduleInfo.UniqueId : moduleInfo.DefaultLanguageGuid;

                    var dnnModules = Data.Module(guid); // modules of each language
                    var dnnModule = dnnModules.Module(localTabInfo.CultureCode);
                    // detect error : 2 modules with same uniqueId on the same page
                    dnnModule.LocalResourceFile = LocalResourceFile;
                    if (dnnModule.TabModuleID > 0)
                    {
                        dnnModule.ErrorDuplicateModule = true;
                        ErrorExists = true;
                        continue;
                    }

                    dnnModule.ModuleTitle = moduleInfo.ModuleTitle;
                    dnnModule.DefaultLanguageGuid = moduleInfo.DefaultLanguageGuid;
                    dnnModule.TabId = localTabInfo.TabID;
                    dnnModule.TabModuleID = moduleInfo.TabModuleID;
                    dnnModule.ModuleID = moduleInfo.ModuleID;
                    dnnModule.CanAdminModule = ModulePermissionController.CanAdminModule(moduleInfo);
                    dnnModule.CanViewModule = ModulePermissionController.CanViewModule(moduleInfo);
                    dnnModule.IsDeleted = moduleInfo.IsDeleted;
                    if (moduleInfo.DefaultLanguageGuid != Null.NullGuid)
                    {
                        ModuleInfo defaultLanguageModule = ModuleController.Instance.GetModuleByUniqueID(moduleInfo.DefaultLanguageGuid);
                        if (defaultLanguageModule != null)
                        {
                            dnnModule.DefaultModuleID = defaultLanguageModule.ModuleID;
                            if (defaultLanguageModule.ParentTab.UniqueId != moduleInfo.ParentTab.DefaultLanguageGuid)
                                dnnModule.DefaultTabName = defaultLanguageModule.ParentTab.TabName;
                        }
                    }
                    dnnModule.IsTranslated = moduleInfo.IsTranslated;
                    dnnModule.IsLocalized = moduleInfo.IsLocalized;

                    dnnModule.IsShared = TabController.Instance.GetTabsByModuleID(moduleInfo.ModuleID).Values.Count(t => t.CultureCode == moduleInfo.CultureCode) > 1;

                    // detect error : the default language module is on an other page
                    dnnModule.ErrorDefaultOnOtherTab = moduleInfo.DefaultLanguageGuid != Null.NullGuid && moduleInfo.DefaultLanguageModule == null;

                    // detect error : different culture on tab and module
                    dnnModule.ErrorCultureOfModuleNotCultureOfTab = moduleInfo.CultureCode != localTabInfo.CultureCode;

                    ErrorExists = ErrorExists || dnnModule.ErrorDefaultOnOtherTab || dnnModule.ErrorCultureOfModuleNotCultureOfTab;
                }
            }

            rDnnModules.DataSource = Data.Modules;
            rDnnModules.DataBind();

        }]]></body>
          </codeblock>
        </method>
        <method name="BuildSettingsURL">
          <declaration><![CDATA[protected string BuildSettingsURL(int tabId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="170" sc="9" el="178" ec="10">CLControl.ascx.cs</location>
            <body hash="8aefe3e5796df67b56fc3fb08fbf884f"><![CDATA[{
            string url = Globals.NavigateURL(tabId, "Tab", "action=edit&activeTab=settingTab");
            if (PortalSettings != null && PortalSettings.EnablePopUps)
            {
                url = UrlUtils.PopUpUrl(url, null, PortalSettings, false, false);
            }

            return url;
        }]]></body>
          </codeblock>
        </method>
        <method name="cmdDeleteModule">
          <declaration><![CDATA[protected void cmdDeleteModule(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="101" sc="9" el="111" ec="10">CLControl.ascx.cs</location>
            <body hash="42c5d82590834efb40e2d0d39539c4c5"><![CDATA[{
            if ((sender) is LinkButton)
            {
                var cmdDeleteModule = (LinkButton)sender;
                var tabModuleId = int.Parse(cmdDeleteModule.CommandArgument);
                var moduleInfo = ModuleController.Instance.GetTabModule(tabModuleId);
                ModuleController.Instance.DeleteTabModule(moduleInfo.TabID, moduleInfo.ModuleID, false);
                Response.Redirect(Request.RawUrl, false);
            }

        }]]></body>
          </codeblock>
        </method>
        <method name="cmdDeleteTranslatedPage">
          <declaration><![CDATA[protected void cmdDeleteTranslatedPage(object sender, EventArgs eventArgs)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="89" sc="9" el="98" ec="10">CLControl.ascx.cs</location>
            <body hash="dd62f7506046bff6270cce6efd2f259b"><![CDATA[{
            if ((sender) is LinkButton)
            {
                var cmdDeleteTranslation = (LinkButton)sender;
                var args = cmdDeleteTranslation.CommandArgument.Split('|');
                int tabId = int.Parse(args[0]);
                TabController.Instance.DeleteTab(tabId, PortalSettings.PortalId);
                Response.Redirect(Request.RawUrl, false);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="cmdRestoreModule">
          <declaration><![CDATA[protected void cmdRestoreModule(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="114" sc="9" el="123" ec="10">CLControl.ascx.cs</location>
            <body hash="4e0720a9c369075237805dfcc12291e3"><![CDATA[{
            if ((sender) is LinkButton)
            {
                var cmdRestoreModule = (LinkButton)sender;
                var tabModuleId = int.Parse(cmdRestoreModule.CommandArgument);
                var moduleInfo = ModuleController.Instance.GetTabModule(tabModuleId);
                ModuleController.Instance.RestoreModule(moduleInfo);
                Response.Redirect(Request.RawUrl, false);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="CultureName">
          <declaration><![CDATA[protected string CultureName(object cultureCode)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="160" sc="9" el="167" ec="10">CLControl.ascx.cs</location>
            <body hash="2992b1987e6e62a85ac7aeb22faba0f8"><![CDATA[{
            string returnValue = "Neutral Language";
            if (cultureCode != null)
            {
                returnValue = new CultureInfo((string)cultureCode).NativeName;
            }
            return returnValue;
        }]]></body>
          </codeblock>
        </method>
        <method name="DeletedClass">
          <declaration><![CDATA[protected string DeletedClass(bool isDeleted)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="193" sc="9" el="195" ec="10">CLControl.ascx.cs</location>
            <body hash="dd1ca758b9ab54e0c62022e0388894ea"><![CDATA[{
            return isDeleted ? "moduleDeleted" : "";
        }]]></body>
          </codeblock>
        </method>
        <method name="DisableTabVersioningAndWorkflow">
          <declaration><![CDATA[private static void DisableTabVersioningAndWorkflow(TabInfo tab)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="690" sc="9" el="699" ec="10">CLControl.ascx.cs</location>
            <body hash="8f2f769749a2ac287cb826e04992bf76"><![CDATA[{
            if (TabVersionSettings.Instance.IsVersioningEnabled(tab.PortalID))
            {
                TabVersionSettings.Instance.SetEnabledVersioningForTab(tab.TabID, false);
            }
            if (TabWorkflowSettings.Instance.IsWorkflowEnabled(tab.PortalID))
            {
                TabWorkflowSettings.Instance.SetWorkflowEnabled(tab.PortalID, tab.TabID, false);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="EnableTabVersioningAndWorkflow">
          <declaration><![CDATA[private static void EnableTabVersioningAndWorkflow(TabInfo tab)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="678" sc="9" el="687" ec="10">CLControl.ascx.cs</location>
            <body hash="03551cd5b2d72377e7393e2798c6b395"><![CDATA[{
            if (TabVersionSettings.Instance.IsVersioningEnabled(tab.PortalID))
            {
                TabVersionSettings.Instance.SetEnabledVersioningForTab(tab.TabID, true);
            }
            if (TabWorkflowSettings.Instance.IsWorkflowEnabled(tab.PortalID))
            {
                TabWorkflowSettings.Instance.SetWorkflowEnabled(tab.PortalID, tab.TabID, true);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="FixLocalizationErrors">
          <declaration><![CDATA[public void FixLocalizationErrors(int tabId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="648" sc="9" el="671" ec="10">CLControl.ascx.cs</location>
            <body hash="a7f02c6ec75e0c35306c7e8bfdca7106"><![CDATA[{

            BindAll(tabId);
            foreach (var dnnModules in Data.Modules)
            {
                foreach (var dnnModule in dnnModules.Modules)
                {
                    if (dnnModule.ErrorDefaultOnOtherTab) //the default language module is on an other page
                    {

                    }
                    else if (dnnModule.ErrorCultureOfModuleNotCultureOfTab)
                    { // # culture tab and module
                        ModuleInfo moduleInfo = ModuleController.Instance.GetTabModule(dnnModule.TabModuleID);
                        moduleInfo.CultureCode = dnnModule.CultureCode;
                        ModuleController.Instance.UpdateModule(moduleInfo);
                    }
                    else if (dnnModule.ErrorDuplicateModule) // duplicate
                    {
                        ModuleController.Instance.DeleteTabModule(dnnModule.TabId, dnnModule.ModuleID, true);
                    }
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetModuleInfo">
          <declaration><![CDATA[protected string GetModuleInfo(object moduleID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="132" sc="9" el="157" ec="10">CLControl.ascx.cs</location>
            <body hash="e76e8ec78bbf247c0c1c54b24deff0f8"><![CDATA[{
            string returnValue = "";
            if (moduleID != null)
            {
                var moduleInfo = ModuleController.Instance.GetModule((int)moduleID, Null.NullInteger, true);
                if (moduleInfo != null)
                {
                    if (moduleInfo.IsDeleted)
                    {
                        returnValue = LocalizeString("ModuleDeleted.Text");
                    }
                    else
                    {
                        if (ModulePermissionController.CanAdminModule(moduleInfo))
                        {
                            returnValue = string.Format(LocalizeString("ModuleInfo.Text"), moduleInfo.ModuleDefinition.FriendlyName, moduleInfo.ModuleTitle, moduleInfo.PaneName);
                        }
                        else
                        {
                            returnValue = LocalizeString("ModuleInfoForNonAdmins.Text");
                        }
                    }
                }
            }
            return returnValue;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetModuleTitleHint">
          <declaration><![CDATA[protected string GetModuleTitleHint(bool isDeleted)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="126" sc="9" el="128" ec="10">CLControl.ascx.cs</location>
            <body hash="fec11009991c9ee711a2670e2644fe60"><![CDATA[{
            return LocalizeString(isDeleted ? "ModuleDeleted.Text" : "ModuleTitle.Text");
        }]]></body>
          </codeblock>
        </method>
        <method name="LocalizeString">
          <declaration><![CDATA[protected string LocalizeString(string key)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="73" sc="9" el="75" ec="10">CLControl.ascx.cs</location>
            <body hash="fdb9cfd70aff46a9da06e018de02d9c8"><![CDATA[{
            return Localization.GetString(key, LocalResourceFile);
        }]]></body>
          </codeblock>
        </method>
        <method name="Page_Load">
          <declaration><![CDATA[protected void Page_Load(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="707" sc="9" el="711" ec="10">CLControl.ascx.cs</location>
            <body hash="50b7be9a7f001137a7ebf42c7e4b0e17"><![CDATA[{
            ClientResourceManager.RegisterStyleSheet(Page, "~/DesktopModules/Admin/Languages/CLTools.css");
            dummyGrid.Attributes.Add("style", "display:none");

        }]]></body>
          </codeblock>
        </method>
        <method name="PublishVisible">
          <declaration><![CDATA[protected bool PublishVisible(string code)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="181" sc="9" el="190" ec="10">CLControl.ascx.cs</location>
            <body hash="a733ed755ceb89780b77300d9119f4ea"><![CDATA[{

            bool isPublished = Null.NullBoolean;
            Locale enabledLanguage;
            if (LocaleController.Instance.GetLocales(PortalSettings.PortalId).TryGetValue(code, out enabledLanguage))
            {
                isPublished = enabledLanguage.IsPublished && (enabledLanguage.Code != PortalSettings.DefaultLanguage);
            }
            return isPublished;
        }]]></body>
          </codeblock>
        </method>
        <method name="rDnnModules_ItemDataBound">
          <declaration><![CDATA[protected void rDnnModules_ItemDataBound(object sender, RepeaterItemEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="715" sc="9" el="745" ec="10">CLControl.ascx.cs</location>
            <body hash="695d7b7d400b2417c4c494f12780752a"><![CDATA[{
            RepeaterItem item = e.Item;
            if (e.Item.ItemType == ListItemType.Header)
            {
                var rDnnPage = (Repeater)item.FindControl("rDnnPage");
                rDnnPage.DataSource = Data.Pages;
                rDnnPage.DataBind();

                var rHeader = (Repeater)item.FindControl("rHeader");
                rHeader.DataSource = Data.Pages;
                rHeader.DataBind();

                var rColHeader = (Repeater)item.FindControl("rColHeader");
                rColHeader.DataSource = Data.Pages;
                rColHeader.DataBind();

            }
            else if (e.Item.ItemType == ListItemType.Footer)
            {
                var rFooter = (Repeater)item.FindControl("rFooter");
                rFooter.DataSource = Data.Pages;
                rFooter.DataBind();
            }
            else if (item.ItemType == ListItemType.Item || item.ItemType == ListItemType.AlternatingItem)
            {
                var rDnnModule = (Repeater)item.FindControl("rDnnModule");
                var dnnModules = (DnnModules)item.DataItem;
                rDnnModule.DataSource = dnnModules.Modules;
                rDnnModule.DataBind();
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="SaveData">
          <declaration><![CDATA[public void SaveData()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="386" sc="9" el="645" ec="10">CLControl.ascx.cs</location>
            <body hash="05ec89f88e1a4257d8a2509300ae344b"><![CDATA[{

            // pages actions
            var rDnnPage = (Repeater)Globals.FindControlRecursiveDown(rDnnModules, "rDnnPage");
            var tabsToPublish = new List<TabInfo>();
            var moduleTranslateOverrides = new Dictionary<int, bool>();

            foreach (RepeaterItem repeaterItem in rDnnPage.Items)
            {
                var tbTabName = (TextBox)repeaterItem.FindControl("tbTabName");
                var tabName = tbTabName.Text;
                var tbTabTitle = (TextBox)repeaterItem.FindControl("tbTitle");
                var tabTitle = tbTabTitle.Text;
                var tbTabDescription = (TextBox)repeaterItem.FindControl("tbDescription");
                var tabDescription = tbTabDescription.Text;

                var hfTabId = (HiddenField)repeaterItem.FindControl("hfTabID");
                int tabID;
                var ConvertSuccess = int.TryParse(hfTabId.Value, out tabID);
                if (!ConvertSuccess)
                {
                    tabID = -1;
                }
                if (tabID > 0)
                {
                    var tabInfo = TabController.Instance.GetTab(tabID, PortalSettings.PortalId, true);
                    var updateTab = false;
                    if (tabInfo.TabName != tabName)
                    {
                        tabInfo.TabName = tabName;
                        updateTab = true;
                    }
                    if (tabInfo.Title != tabTitle)
                    {
                        tabInfo.Title = tabTitle;
                        updateTab = true;
                    }
                    if (tabInfo.Description != tabDescription)
                    {
                        tabInfo.Description = tabDescription;
                        updateTab = true;
                    }
                    if (updateTab)
                    {
                        TabController.Instance.UpdateTab(tabInfo);
                    }

                }

            }


            // manage all actions we need to take for all modules on all pages
            foreach (RepeaterItem repeaterItem in rDnnModules.Items)
            {
                var rDnnModule = (Repeater)repeaterItem.FindControl("rDnnModule");
                foreach (RepeaterItem riDnnModule in rDnnModule.Items)
                {
                    var hfTabModuleID = (HiddenField)riDnnModule.FindControl("hfTabModuleID");
                    int tabModuleID = int.Parse(hfTabModuleID.Value);
                    if (tabModuleID > 0)
                    {
                        var tbModuleTitle = (TextBox)riDnnModule.FindControl("tbModuleTitle");
                        var moduleTitle = tbModuleTitle.Text;
                        var cbLocalized = (CheckBox)riDnnModule.FindControl("cbLocalized");
                        var moduleLocalized = cbLocalized.Checked;
                        var cbTranslated = (CheckBox)riDnnModule.FindControl("cbTranslated");
                        var moduleTranslated = cbTranslated.Checked;
                        var tabModule = ModuleController.Instance.GetTabModule(tabModuleID);
                        if (tabModule.ModuleTitle != moduleTitle)
                        {
                            tabModule.ModuleTitle = moduleTitle;
                            ModuleController.Instance.UpdateModule(tabModule);
                        }
                        if (tabModule.DefaultLanguageGuid != Null.NullGuid && tabModule.IsLocalized != moduleLocalized)
                        {
                            var locale = LocaleController.Instance.GetLocale(tabModule.CultureCode);
                            if (moduleLocalized)
                                ModuleController.Instance.LocalizeModule(tabModule, locale);
                            else
                                ModuleController.Instance.DeLocalizeModule(tabModule);
                        }

                        bool moduleTranslateOverride;
                        moduleTranslateOverrides.TryGetValue(tabModule.TabID, out moduleTranslateOverride);

                        if (!moduleTranslateOverride && tabModule.IsTranslated != moduleTranslated)
                        {
                            ModuleController.Instance.UpdateTranslationStatus(tabModule, moduleTranslated);
                        }

                    }
                    else
                    {
                        var cbAddModule = (CheckBox)riDnnModule.FindControl("cbAddModule");
                        if (cbAddModule.Checked)
                        {
                            // find the first existing module on the line
                            foreach (RepeaterItem riCopy in rDnnModule.Items)
                            {
                                var hfTabModuleIDCopy = (HiddenField)riCopy.FindControl("hfTabModuleID");
                                int tabModuleIDCopy = int.Parse(hfTabModuleIDCopy.Value);
                                if (tabModuleIDCopy > 0)
                                {
                                    ModuleInfo miCopy = ModuleController.Instance.GetTabModule(tabModuleIDCopy);
                                    if (miCopy.DefaultLanguageGuid == Null.NullGuid)
                                    { // default 
                                        var hfTabID = (HiddenField)rDnnPage.Items[riDnnModule.ItemIndex].FindControl("hfTabID");
                                        var tabId = int.Parse(hfTabID.Value);
                                        var toTabInfo = TabController.Instance.GetTab(tabId, PortalSettings.PortalId, false);

                                        DisableTabVersioningAndWorkflow(toTabInfo);
                                        ModuleController.Instance.CopyModule(miCopy, toTabInfo, Null.NullString, true);
                                        EnableTabVersioningAndWorkflow(toTabInfo);
                                        var localizedModule = ModuleController.Instance.GetModule(miCopy.ModuleID, tabId, false);
                                        ModuleController.Instance.LocalizeModule(localizedModule, LocaleController.Instance.GetLocale(localizedModule.CultureCode));
                                    }
                                    else
                                    {
                                        var miCopyDefault = ModuleController.Instance.GetModuleByUniqueID(miCopy.DefaultLanguageGuid);
                                        var hfTabID = (HiddenField)rDnnPage.Items[riDnnModule.ItemIndex].FindControl("hfTabID");
                                        var tabId = int.Parse(hfTabID.Value);
                                        var toTabInfo = TabController.Instance.GetTab(tabId, PortalSettings.PortalId, false);
                                        ModuleController.Instance.CopyModule(miCopyDefault, toTabInfo, Null.NullString, true);
                                    }

                                    if (riDnnModule.ItemIndex == 0)
                                    { // default language
                                        ModuleInfo miDefault = null;
                                        foreach (RepeaterItem ri in rDnnPage.Items)
                                        {
                                            var hfTabID = (HiddenField)ri.FindControl("hfTabID");
                                            int tabID = int.Parse(hfTabID.Value);
                                            if (ri.ItemIndex == 0)
                                            {
                                                miDefault = ModuleController.Instance.GetModule(miCopy.ModuleID, tabID, false);
                                            }
                                            else
                                            {
                                                ModuleInfo moduleInfo = ModuleController.Instance.GetModule(miCopy.ModuleID, tabID, false);
                                                if (moduleInfo != null)
                                                {
                                                    if (miDefault != null)
                                                    {
                                                        moduleInfo.DefaultLanguageGuid = miDefault.UniqueId;
                                                    }
                                                    ModuleController.Instance.UpdateModule(moduleInfo);
                                                }
                                            }
                                        }
                                    }

                                    break;
                                }

                            }

                        }
                    }
                }
            }

            var rFooter = (Repeater)Globals.FindControlRecursiveDown(rDnnModules, "rFooter");
            foreach (RepeaterItem repeaterItem in rFooter.Items)
            {
                var moduleTranslateOverride = false;

                var cbTranslated = (CheckBox)repeaterItem.FindControl("cbTranslated");
                var tabTranslated = cbTranslated.Checked;
                var cbPublish = (CheckBox)repeaterItem.FindControl("cbPublish");

                var hfTabId = (HiddenField)repeaterItem.FindControl("hfTabID");
                int tabID;
                var ConvertSuccess = int.TryParse(hfTabId.Value, out tabID);
                if (!ConvertSuccess)
                {
                    tabID = -1;
                }
                if (tabID > 0)
                {
                    var tabInfo = TabController.Instance.GetTab(tabID, PortalSettings.PortalId, true);
                    if (!tabInfo.IsDefaultLanguage)
                    {
                        if (tabInfo.IsTranslated != tabTranslated)
                        {
                            TabController.Instance.UpdateTranslationStatus(tabInfo, tabTranslated);

                            if (tabTranslated)
                            {
                                moduleTranslateOverride = true;

                                var tabModules = ModuleController.Instance.GetTabModules(tabInfo.TabID);
                                foreach (
                                    var moduleKVP in
                                        tabModules.Where(
                                            moduleKVP =>
                                            moduleKVP.Value.DefaultLanguageModule != null && moduleKVP.Value.LocalizedVersionGuid != moduleKVP.Value.DefaultLanguageModule.LocalizedVersionGuid))
                                {
                                    ModuleController.Instance.UpdateTranslationStatus(moduleKVP.Value, true);
                                }
                            }
                        }
                        if (cbPublish.Checked)
                        {
                            tabsToPublish.Add(tabInfo);
                        }
                    }
                }
                moduleTranslateOverrides.Add(tabID, moduleTranslateOverride);
            }

            // if we have tabs to publish, do it.
            // marks all modules as translated, marks page as translated
            foreach (var tabInfo in tabsToPublish)
            {
                //First mark all modules as translated
                foreach (ModuleInfo m in ModuleController.Instance.GetTabModules(tabInfo.TabID).Values)
                {
                    ModuleController.Instance.UpdateTranslationStatus(m, true);
                }

                //First mark tab as translated
                TabController.Instance.UpdateTranslationStatus(tabInfo, true);

                //Next publish Tab (update Permissions)
                TabController.Instance.PublishTab(tabInfo);
            }

            // manage translated status of tab. In order to do that, we need to check if all modules on the page are translated
            var tabTranslatedStatus = true;
            foreach (RepeaterItem repeaterItem in rDnnPage.Items)
            {
                var hfTabId = (HiddenField)repeaterItem.FindControl("hfTabID");
                int tabID;
                var ConvertSuccess = int.TryParse(hfTabId.Value, out tabID);
                if (!ConvertSuccess)
                {
                    tabID = -1;
                }
                if (tabID > 0)
                {
                    var tabInfo = TabController.Instance.GetTab(tabID, PortalSettings.PortalId, true);
                    if (tabInfo != null)
                    {
                        if (tabInfo.ChildModules.Any(moduleKVP => !moduleKVP.Value.IsTranslated))
                        {
                            tabTranslatedStatus = false;
                        }

                        if (tabTranslatedStatus && !tabInfo.IsTranslated)
                        {
                            TabController.Instance.UpdateTranslationStatus(tabInfo, true);
                        }
                    }
                }

            }


        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_localResourceFile">
          <declaration><![CDATA[private string _localResourceFile;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="dummyGrid">
          <declaration><![CDATA[protected DnnGrid dummyGrid;]]></declaration>
          <documentation>
            <summary>
 dummyGrid control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="mainContainer">
          <declaration><![CDATA[protected HtmlGenericControl mainContainer;]]></declaration>
          <documentation>
            <summary>
 mainContainer control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="rDnnModules">
          <declaration><![CDATA[protected Repeater rDnnModules;]]></declaration>
          <documentation>
            <summary>
 rDnnModules control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
      </fields>
      <properties>
        <property name="Data">
          <declaration><![CDATA[protected CLControl.DnnPages Data]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="78" sc="35" el="78" ec="39">CLControl.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="78" sc="40" el="78" ec="44">CLControl.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="enablePageEdit">
          <declaration><![CDATA[public bool enablePageEdit]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="210" sc="38" el="210" ec="42">CLControl.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="210" sc="43" el="210" ec="47">CLControl.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ErrorExists">
          <declaration><![CDATA[public bool ErrorExists]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="201" sc="35" el="201" ec="39">CLControl.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="201" sc="40" el="201" ec="44">CLControl.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="LocalResourceFile">
          <declaration><![CDATA[protected string LocalResourceFile]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="53" sc="13" el="66" ec="14">CLControl.ascx.cs</location>
            <body hash="ab8678ebb7b68a5772acd55f902e2060"><![CDATA[{
                string fileRoot;
                if (string.IsNullOrEmpty(_localResourceFile))
                {
                    fileRoot = TemplateSourceDirectory + "/" + Localization.LocalResourceDirectory + "/" + "CLTools.ascx";
                }
                else
                {
                    fileRoot = _localResourceFile;
                }
                _localResourceFile = fileRoot;

                return fileRoot;
            }]]></body>
          </codeblock>
        </property>
        <property name="PortalSettings">
          <declaration><![CDATA[protected PortalSettings PortalSettings]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="83" sc="13" el="85" ec="14">CLControl.ascx.cs</location>
            <body hash="5ab4f2f069ec3680a0fc11e1d9f2b05e"><![CDATA[{
                return PortalController.Instance.GetCurrentPortalSettings();
            }]]></body>
          </codeblock>
        </property>
        <property name="TabID">
          <declaration><![CDATA[public int TabID]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="203" sc="28" el="203" ec="32">CLControl.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="203" sc="33" el="203" ec="37">CLControl.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="EditLanguage">
      <declaration><![CDATA[public class EditLanguage : PortalModuleBase]]></declaration>
      <documentation>-----------------------------------------------------------------------------
 <summary>
   The EditLanguage ModuleUserControlBase is used to edit a Language
 </summary>
 <remarks>
 </remarks>
 -----------------------------------------------------------------------------</documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public EditLanguage()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="BindLanguage">
          <declaration><![CDATA[private void BindLanguage()]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   This routine Binds the Language
 </summary>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="87" sc="9" el="134" ec="10">EditLanguage.ascx.cs</location>
            <body hash="cc7162b408fe9169cd49b963209fc83f"><![CDATA[{
            languageLanguageLabel.Visible = (Language != null);
            languageComboBox.Visible = Language == null;
            languageComboBox.IncludeNoneSpecified = false;
            languageComboBox.HideLanguagesList = LocaleController.Instance.GetLocales(Null.NullInteger);
            languageComboBox.DataBind();

            fallbackLanguageLabel.Visible = !UserInfo.IsSuperUser;
            fallBackComboBox.Visible = UserInfo.IsSuperUser;
            fallBackComboBox.IncludeNoneSpecified = true;
            if (Language != null)
            {
                var hideLanguagesList = new Dictionary<string, Locale>();
                hideLanguagesList.Add(Language.Code, Language);
                fallBackComboBox.HideLanguagesList = hideLanguagesList;
            }
            fallBackComboBox.DataBind();
            if (!IsPostBack && Language != null)
            {
                fallbackLanguageLabel.Language = Language.Fallback;
                languageLanguageLabel.Language = Language.Code;
                languageComboBox.SetLanguage(Language.Code);
                fallBackComboBox.SetLanguage(Language.Fallback);
            }

            if (Language == null || Language.Code == PortalSettings.DefaultLanguage)
            {
                translatorsRow.Visible = false;
            }
            else
            {
                string defaultRoles = PortalController.GetPortalSetting(string.Format("DefaultTranslatorRoles-{0}", Language.Code), PortalId, "Administrators");

                translatorRoles.SelectedRoleNames = new ArrayList(defaultRoles.Split(';'));

                translatorsRow.Visible = true;
            }

            bool isEnabled = Null.NullBoolean;
            if (!IsAddMode)
            {
                Locale enabledLanguage = null;
                isEnabled = LocaleController.Instance.GetLocales(ModuleContext.PortalId).TryGetValue(Language.Code, out enabledLanguage);
            }

            cmdDelete.Visible = (UserInfo.IsSuperUser && !IsAddMode && !isEnabled && !Language.IsPublished && LocaleController.Instance.CanDeleteLanguage(Language.LanguageId) &&
                                 Language.Code.ToLowerInvariant() != "en-us");
        }]]></body>
          </codeblock>
        </method>
        <method name="cmdCancel_Click">
          <declaration><![CDATA[protected void cmdCancel_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="161" sc="9" el="171" ec="10">EditLanguage.ascx.cs</location>
            <body hash="dc8ebfaa7193a54158a3d6e7bddfbf4c"><![CDATA[{
            try
            {
                Response.Redirect(Globals.NavigateURL(), true);
                //Module failed to load
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="cmdDelete_Click">
          <declaration><![CDATA[protected void cmdDelete_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="174" sc="9" el="184" ec="10">EditLanguage.ascx.cs</location>
            <body hash="655a7d5bbcb0e59b2ffcc157dfa56c7a"><![CDATA[{
            try
            {
                Localization.DeleteLanguage(Language);
                Response.Redirect(Globals.NavigateURL(), true);
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="cmdUpdate_Click">
          <declaration><![CDATA[protected void cmdUpdate_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="187" sc="9" el="237" ec="10">EditLanguage.ascx.cs</location>
            <body hash="f4644cf048b6ce9df5f2ce4b728944e7"><![CDATA[{
            try
            {
                if (UserInfo.IsSuperUser)
                {
                    //Update Language
                    if (Language == null)
                    {
                        _Language = LocaleController.Instance.GetLocale(languageComboBox.SelectedValue);
                        if (_Language == null)
                        {
                            _Language = new Locale();
                            Language.Code = languageComboBox.SelectedValue;
                        }
                    }
                    Language.Fallback = fallBackComboBox.SelectedValue;
                    Language.Text = CultureInfo.GetCultureInfo(Language.Code).NativeName;
                    Localization.SaveLanguage(Language);
                }

                if (!IsLanguageEnabled(Language.Code))
                {
                    //Add language to portal
                    Localization.AddLanguageToPortal(PortalId, Language.LanguageId, true);
                }

                string roles = Null.NullString;
                if (IsAddMode)
                {
                    roles = string.Format("Administrators;{0}", string.Format("Translator ({0})", Language.Code));
                }
                else
                {
                    foreach (string role in translatorRoles.SelectedRoleNames)
                    {
                        roles += role + ";";
                    }

                    roles = roles.TrimEnd(';');
                }

                PortalController.UpdatePortalSetting(PortalId, string.Format("DefaultTranslatorRoles-{0}", Language.Code), roles);

                Response.Redirect(Globals.NavigateURL(), true);
                //Module failed to load
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="IsLanguageEnabled">
          <declaration><![CDATA[private bool IsLanguageEnabled(string Code)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="137" sc="9" el="140" ec="10">EditLanguage.ascx.cs</location>
            <body hash="f4275d9a76c06be9fb4540b8ad9e1e76"><![CDATA[{
            Locale enabledLanguage = null;
            return LocaleController.Instance.GetLocales(ModuleContext.PortalId).TryGetValue(Code, out enabledLanguage);
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="147" sc="9" el="152" ec="10">EditLanguage.ascx.cs</location>
            <body hash="2ae926cfea7ba6bcfb88cf081c59dbd1"><![CDATA[{
            base.OnInit(e);
            cmdCancel.Click += cmdCancel_Click;
            cmdDelete.Click += cmdDelete_Click;
            cmdUpdate.Click += cmdUpdate_Click;
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="155" sc="9" el="158" ec="10">EditLanguage.ascx.cs</location>
            <body hash="75d51a1058d8659b742162c0f82e5194"><![CDATA[{
            ClientAPI.AddButtonConfirm(cmdDelete, Localization.GetString("DeleteItem"));
            BindLanguage();
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_Language">
          <declaration><![CDATA[private Locale _Language;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdCancel">
          <declaration><![CDATA[protected LinkButton cmdCancel;]]></declaration>
          <documentation>
            <summary>
 cmdCancel control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="cmdDelete">
          <declaration><![CDATA[protected LinkButton cmdDelete;]]></declaration>
          <documentation>
            <summary>
 cmdDelete control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="cmdUpdate">
          <declaration><![CDATA[protected LinkButton cmdUpdate;]]></declaration>
          <documentation>
            <summary>
 cmdUpdate control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="fallBackComboBox">
          <declaration><![CDATA[protected DnnLanguageComboBox fallBackComboBox;]]></declaration>
          <documentation>
            <summary>
 fallBackComboBox control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="fallBackLabel">
          <declaration><![CDATA[protected UserControl fallBackLabel;]]></declaration>
          <documentation>
            <summary>
 fallBackLabel control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="fallbackLanguageLabel">
          <declaration><![CDATA[protected DnnLanguageLabel fallbackLanguageLabel;]]></declaration>
          <documentation>
            <summary>
 fallbackLanguageLabel control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="languageComboBox">
          <declaration><![CDATA[protected DnnLanguageComboBox languageComboBox;]]></declaration>
          <documentation>
            <summary>
 languageComboBox control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="languageLabel">
          <declaration><![CDATA[protected UserControl languageLabel;]]></declaration>
          <documentation>
            <summary>
 languageLabel control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="languageLanguageLabel">
          <declaration><![CDATA[protected DnnLanguageLabel languageLanguageLabel;]]></declaration>
          <documentation>
            <summary>
 languageLanguageLabel control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="translatorRoles">
          <declaration><![CDATA[protected RolesSelectionGrid translatorRoles;]]></declaration>
          <documentation>
            <summary>
 translatorRoles control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="translatorsLabel">
          <declaration><![CDATA[protected UserControl translatorsLabel;]]></declaration>
          <documentation>
            <summary>
 translatorsLabel control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="translatorsRow">
          <declaration><![CDATA[protected HtmlGenericControl translatorsRow;]]></declaration>
          <documentation>
            <summary>
 translatorsRow control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
      </fields>
      <properties>
        <property name="IsAddMode">
          <declaration><![CDATA[protected bool IsAddMode]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="60" sc="13" el="62" ec="14">EditLanguage.ascx.cs</location>
            <body hash="d18bd32268ff58f3ee1074a5dcde1fbf"><![CDATA[{
                return string.IsNullOrEmpty(Request.QueryString["locale"]);
            }]]></body>
          </codeblock>
        </property>
        <property name="Language">
          <declaration><![CDATA[protected Locale Language]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="68" sc="13" el="74" ec="14">EditLanguage.ascx.cs</location>
            <body hash="3878a1eb030ef4d0ea6d5fcb215ff711"><![CDATA[{
                if (!IsAddMode)
                {
                    _Language = LocaleController.Instance.GetLocale(int.Parse(Request.QueryString["locale"]));
                }
                return _Language;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="EnableLocalizedContent">
      <declaration><![CDATA[public class EnableLocalizedContent : PortalModuleBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private string _PortalDefault = "";]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="64" sc="9" el="65" ec="36">EnableLocalizedContent.ascx.cs</location>
            <body hash="c158f8321aae921f51633f7b391a4ee6"><![CDATA[private string _PortalDefault = "";
        private int timeout = 3600;]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="cancelButton_Click">
          <declaration><![CDATA[protected void cancelButton_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="217" sc="9" el="220" ec="10">EnableLocalizedContent.ascx.cs</location>
            <body hash="12091b898df24e32047dde687180d34a"><![CDATA[{
            //Redirect to refresh page (and skinobjects)
            Response.Redirect(Globals.NavigateURL(), true);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPages">
          <declaration><![CDATA[private IEnumerable<TabInfo> GetPages(int portalId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="169" sc="9" el="175" ec="10">EnableLocalizedContent.ascx.cs</location>
            <body hash="cd0cb99cd6906da8f3d150da16f84165"><![CDATA[{
            return (from kvp in TabController.Instance.GetTabsByPortal(portalId)
                                      where !kvp.Value.TabPath.StartsWith("//Admin")
                                            && !kvp.Value.IsDeleted 
                                            && !kvp.Value.IsSystem
                                      select kvp.Value);
        }]]></body>
          </codeblock>
        </method>
        <method name="IsDefaultLanguage">
          <declaration><![CDATA[protected bool IsDefaultLanguage(string code)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="82" sc="9" el="85" ec="10">EnableLocalizedContent.ascx.cs</location>
            <body hash="564ed78b885a9e499900206099ac7c28"><![CDATA[{
            return code == PortalDefault;

        }]]></body>
          </codeblock>
        </method>
        <method name="IsLanguageEnabled">
          <declaration><![CDATA[protected bool IsLanguageEnabled(string Code)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="88" sc="9" el="91" ec="10">EnableLocalizedContent.ascx.cs</location>
            <body hash="4471231d7d04a2d26236f853076da32b"><![CDATA[{
            Locale enabledLanguage;
            return LocaleController.Instance.GetLocales(ModuleContext.PortalId).TryGetValue(Code, out enabledLanguage);
        }]]></body>
          </codeblock>
        </method>
        <method name="KeepConnectionAlive">
          <declaration><![CDATA[private void KeepConnectionAlive()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="105" sc="9" el="108" ec="10">EnableLocalizedContent.ascx.cs</location>
            <body hash="3e9713888be471cd5cfa337bb6dc9a44"><![CDATA[{
            Response.Write(' ');
            Response.Flush();
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="181" sc="9" el="187" ec="10">EnableLocalizedContent.ascx.cs</location>
            <body hash="728c9c6a015180d30e815b2223c7b01f"><![CDATA[{
            base.OnInit(e);
            cancelButton.Click += cancelButton_Click;
            updateButton.Click += updateButton_Click;

            LocalResourceFile = Localization.GetResourceFile(this, "EnableLocalizedContent.ascx");
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="190" sc="9" el="214" ec="10">EnableLocalizedContent.ascx.cs</location>
            <body hash="a89f629c9ee85cc5779d8d9c2cf9f43b"><![CDATA[{
            base.OnLoad(e);
            
            //Set AJAX timeout to 1 hr for large sites
            AJAX.GetScriptManager(Page).AsyncPostBackTimeout = timeout;

            _PortalDefault = PortalSettings.DefaultLanguage;
            defaultLanguageLabel.Language = PortalSettings.DefaultLanguage;
            defaultLanguageLabel.Visible = true;

            if (!IsPostBack)
            {
                //Do not display SelectedFilesCount progress indicator.
                pageCreationProgressArea.ProgressIndicators &= ~ProgressIndicators.SelectedFilesCount;
            }
            
            pageCreationProgressArea.ProgressIndicators &=  ~ProgressIndicators.TimeEstimated;
            pageCreationProgressArea.ProgressIndicators &=  ~ProgressIndicators.TransferSpeed;

            pageCreationProgressArea.Localization.Total = Localization.GetString("TotalLanguages", LocalResourceFile);
            pageCreationProgressArea.Localization.TotalFiles = Localization.GetString("TotalPages", LocalResourceFile);
            pageCreationProgressArea.Localization.Uploaded = Localization.GetString("TotalProgress", LocalResourceFile);
            pageCreationProgressArea.Localization.UploadedFiles = Localization.GetString("Progress", LocalResourceFile);
            pageCreationProgressArea.Localization.CurrentFileName = Localization.GetString("Processing", LocalResourceFile);
        }]]></body>
          </codeblock>
        </method>
        <method name="ProcessLanguage">
          <declaration><![CDATA[private void ProcessLanguage(IEnumerable<TabInfo> pageList, Locale locale, int languageCount, int totalLanguages)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="111" sc="9" el="166" ec="10">EnableLocalizedContent.ascx.cs</location>
            <body hash="85c0c534a12eccbae39c0e1adb37ab19"><![CDATA[{
            RadProgressContext progress = RadProgressContext.Current;

            progress.Speed = "N/A";
            progress.PrimaryTotal = totalLanguages;
            progress.PrimaryValue = languageCount;
            

            int total = pageList.Count();
            if (total == 0)
            {
                progress.SecondaryTotal = 0;
                progress.SecondaryValue = 0;
                progress.SecondaryPercent = 100;
            }

            for (int i = 0; i < total ; i++)
            {
                TabInfo currentTab = pageList.ElementAt(i);
                int stepNo = i + 1;

                progress.SecondaryTotal = total;
                progress.SecondaryValue = stepNo;
                float secondaryPercent = ((float) stepNo/(float) total) * 100;
                progress.SecondaryPercent = Convert.ToInt32(secondaryPercent);
                float primaryPercent = ((((float)languageCount + ((float)stepNo / (float)total)) / (float)totalLanguages)) * 100;
                progress.PrimaryPercent = Convert.ToInt32(primaryPercent);
                
                progress.CurrentOperationText = string.Format(Localization.GetString("ProcessingPage", LocalResourceFile), locale.Code, stepNo, total, currentTab.TabName);

                if (!Response.IsClientConnected)
                {
                    //clear cache
                    DataCache.ClearPortalCache(PortalId, true);

                    //Cancel button was clicked or the browser was closed, so stop processing
                    break;
                }

                progress.TimeEstimated = (total - stepNo)*100;

                if (locale.Code == PortalDefault)
                {
                    TabController.Instance.LocalizeTab(currentTab, locale, true);
                }
                else
                {
                    TabController.Instance.CreateLocalizedCopy(currentTab, locale, false);
                }

                if (i % 10 == 0)
                {
                    KeepConnectionAlive();
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="PublishLanguage">
          <declaration><![CDATA[private void PublishLanguage(string cultureCode, bool publish)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="94" sc="9" el="102" ec="10">EnableLocalizedContent.ascx.cs</location>
            <body hash="616b21923373735ef44dc7487606ffaa"><![CDATA[{
            Dictionary<string, Locale> enabledLanguages = LocaleController.Instance.GetLocales(PortalId);
            Locale enabledlanguage;
            if (enabledLanguages.TryGetValue(cultureCode, out enabledlanguage))
            {
                enabledlanguage.IsPublished = publish;
                LocaleController.Instance.UpdatePortalLocale(enabledlanguage);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="updateButton_Click">
          <declaration><![CDATA[protected void updateButton_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="223" sc="9" el="269" ec="10">EnableLocalizedContent.ascx.cs</location>
            <body hash="f227f5ebab1c83a0e9288d9ac7ca1f00"><![CDATA[{
            // Set RedirectLocation header before make any Write/Flush to keep connection alive
            // This prevents "Cannot redirect after HTTP headers have been sent" error
            Response.RedirectLocation = Globals.NavigateURL();

            int languageCount = LocaleController.Instance.GetLocales(PortalSettings.PortalId).Count;

            var pageList = GetPages(PortalId);

            int scriptTimeOut = Server.ScriptTimeout;
            Server.ScriptTimeout = timeout;

            int languageCounter = 0;
            if (chkAllPagesTranslatable.Checked)
            {
                ProcessLanguage(pageList, LocaleController.Instance.GetLocale(PortalDefault), languageCounter, languageCount);
            }
            PublishLanguage(PortalDefault, true);

            PortalController.UpdatePortalSetting(PortalId, "ContentLocalizationEnabled", "True");

            // populate other languages
            var defaultLanguage = PortalController.Instance.GetCurrentPortalSettings().DefaultLanguage;
            foreach (Locale locale in LocaleController.Instance.GetLocales(PortalSettings.PortalId).Values)
            {
                if (!IsDefaultLanguage(locale.Code))
                {
                    languageCounter += 1;
                    pageList = GetPages(PortalId).Where(p => p.CultureCode == defaultLanguage);
                        
                    //add translator role
                    Localization.AddTranslatorRole(PortalId, locale);

                    //populate pages
                    ProcessLanguage(pageList, locale, languageCounter, languageCount);

                    //Map special pages
                    PortalController.Instance.MapLocalizedSpecialPages(PortalSettings.PortalId, locale.Code);
                }
            }
            //Restore Script Timeout
            Server.ScriptTimeout = scriptTimeOut;
            //clear portal cache
            DataCache.ClearPortalCache(PortalId, true);
            //'Redirect to refresh page (and skinobjects)
            Response.End();
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_PortalDefault">
          <declaration><![CDATA[private string _PortalDefault = "";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="AllPagesTranslatable">
          <declaration><![CDATA[protected UserControl AllPagesTranslatable;]]></declaration>
          <documentation>
            <summary>
 AllPagesTranslatable control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="cancelButton">
          <declaration><![CDATA[protected LinkButton cancelButton;]]></declaration>
          <documentation>
            <summary>
 cancelButton control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="chkAllPagesTranslatable">
          <declaration><![CDATA[protected CheckBox chkAllPagesTranslatable;]]></declaration>
          <documentation>
            <summary>
 chkAllPagesTranslatable control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="defaultLanguageLabel">
          <declaration><![CDATA[protected DnnLanguageLabel defaultLanguageLabel;]]></declaration>
          <documentation>
            <summary>
 defaultLanguageLabel control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="headerLabel">
          <declaration><![CDATA[protected Label headerLabel;]]></declaration>
          <documentation>
            <summary>
 headerLabel control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="pageCreationProgressArea">
          <declaration><![CDATA[protected DnnProgressArea pageCreationProgressArea;]]></declaration>
          <documentation>
            <summary>
 pageCreationProgressArea control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="progressManager">
          <declaration><![CDATA[protected DnnProgressManager progressManager;]]></declaration>
          <documentation>
            <summary>
 progressManager control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="scriptBlock">
          <declaration><![CDATA[protected DnnScriptBlock scriptBlock;]]></declaration>
          <documentation>
            <summary>
 scriptBlock control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="siteDefaultLabel">
          <declaration><![CDATA[protected UserControl siteDefaultLabel;]]></declaration>
          <documentation>
            <summary>
 siteDefaultLabel control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="timeout">
          <declaration><![CDATA[private int timeout = 3600;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="updateButton">
          <declaration><![CDATA[protected LinkButton updateButton;]]></declaration>
          <documentation>
            <summary>
 updateButton control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
      </fields>
      <properties>
        <property name="PortalDefault">
          <declaration><![CDATA[protected string PortalDefault]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="72" sc="13" el="74" ec="14">EnableLocalizedContent.ascx.cs</location>
            <body hash="5ee6653431547d6f2fb5a94283702c47"><![CDATA[{
                return _PortalDefault;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="LanguageEditor">
      <declaration><![CDATA[public class LanguageEditor : PortalModuleBase, IActionable]]></declaration>
      <documentation>-----------------------------------------------------------------------------
 <summary>
   Manages translations for Resource files
 </summary>
 <remarks>
 </remarks>
 -----------------------------------------------------------------------------</documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public LanguageEditor()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
        <constructor name=".cctor">
          <declaration><![CDATA[static LanguageEditor()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="61" sc="9" el="61" ec="103">LanguageEditor.ascx.cs</location>
            <body hash="70b31212fcbcc02e0abba92a2151d966"><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof(LanguageEditor))]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="AddResourceKey">
          <declaration><![CDATA[private XmlNode AddResourceKey(XmlDocument resourceDoc, string resourceKey)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="158" sc="9" el="170" ec="10">LanguageEditor.ascx.cs</location>
            <body hash="100c92f9052d7b5c8c8808cd1d64ea82"><![CDATA[{
            XmlNode nodeData = null;
            XmlAttribute attr = null;

            // missing entry
            nodeData = resourceDoc.CreateElement("data");
            attr = resourceDoc.CreateAttribute("name");
            attr.Value = resourceKey;
            nodeData.Attributes.Append(attr);
            resourceDoc.SelectSingleNode("//root").AppendChild(nodeData);

            return nodeData.AppendChild(resourceDoc.CreateElement("value"));
        }]]></body>
          </codeblock>
        </method>
        <method name="BindGrid">
          <declaration><![CDATA[private void BindGrid(bool reBind)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   Loads Resource information into the datagrid
 </summary>
 <remarks>
 </remarks>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="180" sc="9" el="240" ec="10">LanguageEditor.ascx.cs</location>
            <body hash="d690d68cd1e70b9955349fd101b1505f"><![CDATA[{
            Hashtable EditTable = null;
            Hashtable DefaultTable = null;

            EditTable = LoadFile(rbMode.SelectedValue, "Edit");
            DefaultTable = LoadFile(rbMode.SelectedValue, "Default");

            lblResourceFile.Text = Path.GetFileName(ResourceFile(Locale, rbMode.SelectedValue).Replace(Globals.ApplicationMapPath, ""));
            lblFolder.Text = ResourceFile(Locale, rbMode.SelectedValue).Replace(Globals.ApplicationMapPath, "").Replace("\\" + lblResourceFile.Text, "");

            // check edit table
            // if empty, just use default
            if (EditTable.Count == 0)
            {
                EditTable = DefaultTable;
            }
            else
            {
                //remove obsolete keys
                var ToBeDeleted = new ArrayList();
                foreach (string key in EditTable.Keys)
                {
                    if (!DefaultTable.Contains(key))
                    {
                        ToBeDeleted.Add(key);
                    }
                }
                if (ToBeDeleted.Count > 0)
                {
                    DotNetNuke.UI.Skins.Skin.AddModuleMessage(this, Localization.GetString("Obsolete", LocalResourceFile), ModuleMessage.ModuleMessageType.YellowWarning);
                    foreach (string key in ToBeDeleted)
                    {
                        EditTable.Remove(key);
                    }
                }

                //add missing keys
                foreach (string key in DefaultTable.Keys)
                {
                    if (!EditTable.Contains(key))
                    {
                        EditTable.Add(key, DefaultTable[key]);
                    }
                    else
                    {
                        // Update default value
                        var p = (Pair)EditTable[key];
                        p.Second = ((Pair)DefaultTable[key]).First;
                        EditTable[key] = p;
                    }
                }
            }

            var s = new SortedList(EditTable);

            resourcesGrid.DataSource = s;
            if (reBind)
            {
                resourcesGrid.DataBind();
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="chkHighlight_CheckedChanged">
          <declaration><![CDATA[private void chkHighlight_CheckedChanged(object sender, EventArgs e)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   Rebinds the grid
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks>
 </remarks>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="565" sc="9" el="577" ec="10">LanguageEditor.ascx.cs</location>
            <body hash="f1355720cb4f92644b336590dc9eacc1"><![CDATA[{
            try
            {
                Personalization.SetProfile("LanguageEditor", "HighLight" + PortalSettings.PortalId, chkHighlight.Checked.ToString());
                BindGrid(true);
                //Module failed to load
            }
            catch (Exception exc)
            {
                Logger.Error(exc);
				DotNetNuke.UI.Skins.Skin.AddModuleMessage(this, Localization.GetString("Save.ErrorMessage", LocalResourceFile), ModuleMessage.ModuleMessageType.YellowWarning);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="cmdCancel_Click">
          <declaration><![CDATA[protected void cmdCancel_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="580" sc="9" el="582" ec="10">LanguageEditor.ascx.cs</location>
            <body hash="50dd0865bc16a940b0b2529b9cff1341"><![CDATA[{
            Response.Redirect(Globals.NavigateURL());
        }]]></body>
          </codeblock>
        </method>
        <method name="cmdDelete_Click">
          <declaration><![CDATA[private void cmdDelete_Click(object sender, EventArgs e)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   Deletes the localized file for a given locale
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks>
   System Default file cannot be deleted
 </remarks>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="595" sc="9" el="631" ec="10">LanguageEditor.ascx.cs</location>
            <body hash="b90184ec9802c338f392ac6d577a2532"><![CDATA[{
            try
            {
                if (Locale == Localization.SystemLocale && rbMode.SelectedValue == "System")
                {
					DotNetNuke.UI.Skins.Skin.AddModuleMessage(this, Localization.GetString("Delete.ErrorMessage", LocalResourceFile), ModuleMessage.ModuleMessageType.YellowWarning);
                }
                else
                {
                    try
                    {
                        if (File.Exists(ResourceFile(Locale, rbMode.SelectedValue)))
                        {
                            File.SetAttributes(ResourceFile(Locale, rbMode.SelectedValue), FileAttributes.Normal);
                            File.Delete(ResourceFile(Locale, rbMode.SelectedValue));
							DotNetNuke.UI.Skins.Skin.AddModuleMessage(this,
                                                           string.Format(Localization.GetString("Deleted", LocalResourceFile), ResourceFile(Locale, rbMode.SelectedValue)),
                                                           ModuleMessage.ModuleMessageType.GreenSuccess);

                            BindGrid(true);

                            //Clear the resource file lookup dictionary as we have removed a file
                            DataCache.RemoveCache(DataCache.ResourceFileLookupDictionaryCacheKey);
                        }
                    }
                    catch
                    {
						DotNetNuke.UI.Skins.Skin.AddModuleMessage(this, Localization.GetString("Save.ErrorMessage", LocalResourceFile), ModuleMessage.ModuleMessageType.YellowWarning);
                    }
                }
                //Module failed to load
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="cmdUpdate_Click">
          <declaration><![CDATA[private void cmdUpdate_Click(object sender, EventArgs e)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   Updates all values from the datagrid
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks>
 </remarks>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="643" sc="9" el="776" ec="10">LanguageEditor.ascx.cs</location>
            <body hash="fe13fd7e26ea155205b6674914004749"><![CDATA[{
            XmlNode node = null;
            XmlNode parent = null;
            var resDoc = new XmlDocument();
            var defDoc = new XmlDocument();
            string filename = null;

            try
            {
                filename = ResourceFile(Locale, rbMode.SelectedValue);
                if (!File.Exists(filename))
                {
                    // load system default
                    resDoc.Load(ResourceFile(Localization.SystemLocale, "System"));
                }
                else
                {
                    resDoc.Load(filename);
                }
                defDoc.Load(ResourceFile(Localization.SystemLocale, "System"));

                //store all changed resources
                var changedResources = new Dictionary<string, string>();

                // only items different from default will be saved
                foreach (GridDataItem di in resourcesGrid.Items)
                {
                    if ((di.ItemType == GridItemType.Item || di.ItemType == GridItemType.AlternatingItem))
                    {
                        var resourceKey = (Label)di.FindControl("resourceKey");
                        var txtValue = (TextBox)di.FindControl("txtValue");
                        var txtDefault = (TextBox)di.FindControl("txtDefault");

                        node = resDoc.SelectSingleNode(GetResourceKeyXPath(resourceKey.Text) + "/value");

                        switch (rbMode.SelectedValue)
                        {
                            case "System":
                                // this will save all items
                                if (node == null)
                                {
                                    node = AddResourceKey(resDoc, resourceKey.Text);
                                }
                                node.InnerXml = Server.HtmlEncode(txtValue.Text);
                                if (txtValue.Text != txtDefault.Text) changedResources.Add(resourceKey.Text, txtValue.Text); 
                                break;
                            case "Host":
                            case "Portal":
                                // only items different from default will be saved

                                if (txtValue.Text != txtDefault.Text)
                                {
                                    if (node == null)
                                    {
                                        node = AddResourceKey(resDoc, resourceKey.Text);
                                    }
                                    node.InnerXml = Server.HtmlEncode(txtValue.Text);
                                    changedResources.Add(resourceKey.Text, txtValue.Text);
                                }
                                else if ((node != null))
                                {
                                    // remove item = default
                                    resDoc.SelectSingleNode("//root").RemoveChild(node.ParentNode);
                                }
                                break;
                        }
                    }
                }

                // remove obsolete keys
                foreach (XmlNode node_loopVariable in resDoc.SelectNodes("//root/data"))
                {
                    node = node_loopVariable;
                    if (defDoc.SelectSingleNode(GetResourceKeyXPath(node.Attributes["name"].Value)) == null)
                    {
                        parent = node.ParentNode;
                        parent.RemoveChild(node);
                    }
                }
                // remove duplicate keys
                foreach (XmlNode node_loopVariable in resDoc.SelectNodes("//root/data"))
                {
                    node = node_loopVariable;
                    if (resDoc.SelectNodes(GetResourceKeyXPath(node.Attributes["name"].Value)).Count > 1)
                    {
                        parent = node.ParentNode;
                        parent.RemoveChild(node);
                    }
                }

                switch (rbMode.SelectedValue)
                {
                    case "System":
                        resDoc.Save(filename);
                        break;
                    case "Host":
                    case "Portal":
                        if (resDoc.SelectNodes("//root/data").Count > 0)
                        {
                            // there's something to save
                            resDoc.Save(filename);
                        }
                        else
                        {
                            // nothing to be saved, if file exists delete
                            if (File.Exists(filename))
                            {
                                File.Delete(filename);
                            }
                        }
                        break;
                }
                string selectedFile = SelectedResourceFile.Replace(Server.MapPath(Globals.ApplicationPath + "/"), "");
                if (changedResources.Count > 0)
                {
                    string values = string.Join("; ", changedResources.Select(x => x.Key + "=" + x.Value).ToArray());
                    var log = new LogInfo {LogTypeKey = EventLogController.EventLogType.ADMIN_ALERT.ToString()};
                    log.LogProperties.Add(new LogDetailInfo(Localization.GetString("ResourceUpdated", LocalResourceFile), ResourceFile(Locale, rbMode.SelectedValue)));
                    log.LogProperties.Add(new LogDetailInfo("Updated Values", values));
                    LogController.Instance.AddLog(log);
                }
				DotNetNuke.UI.Skins.Skin.AddModuleMessage(this,
                                string.Format(Localization.GetString("Updated", LocalResourceFile), ResourceFile(Locale, rbMode.SelectedValue)),
                                ModuleMessage.ModuleMessageType.GreenSuccess);

                BindGrid(true);
            }
            catch (Exception exc)
            {
                Logger.Error(exc);

				DotNetNuke.UI.Skins.Skin.AddModuleMessage(this, Localization.GetString("Save.ErrorMessage", LocalResourceFile), ModuleMessage.ModuleMessageType.YellowWarning);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="ExpandDefault">
          <declaration><![CDATA[protected bool ExpandDefault(Pair p)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   Configures the initial visibility status of the default label
 </summary>
 <param name="p"></param>
 <returns></returns>
 <remarks>
 </remarks>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="419" sc="9" el="421" ec="10">LanguageEditor.ascx.cs</location>
            <body hash="80aad99775c8ee95287943cafeb56000"><![CDATA[{
            return p.Second.ToString().Length < 150;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetResourceKeyXPath">
          <declaration><![CDATA[private static string GetResourceKeyXPath(string resourceKeyName)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="154" sc="9" el="156" ec="10">LanguageEditor.ascx.cs</location>
            <body hash="84ea89c10905d2df3c99a3789ce455b8"><![CDATA[{
            return "//root/data[@name=" + XmlUtils.XPathLiteral(resourceKeyName) + "]";
        }]]></body>
          </codeblock>
        </method>
        <method name="GetResxDirectories">
          <declaration><![CDATA[private void GetResxDirectories(string path, RadTreeNodeEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="891" sc="9" el="902" ec="10">LanguageEditor.ascx.cs</location>
            <body hash="d10e7a19239bcb5632cb95a589bd25f2"><![CDATA[{
            foreach (string folder in Directory.GetDirectories(path))
            {
                var folderInfo = new DirectoryInfo(folder);
                var node = new RadTreeNode { Value = folderInfo.FullName, Text = folderInfo.Name, ExpandMode = TreeNodeExpandMode.ServerSideCallBack };

                if (HasLocalResources(folderInfo.FullName))
                {
                    e.Node.Nodes.Add(node);
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetResxFiles">
          <declaration><![CDATA[private void GetResxFiles(string path, RadTreeNodeEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="927" sc="9" el="940" ec="10">LanguageEditor.ascx.cs</location>
            <body hash="0b992c60b579aab94294a01dfd0552fe"><![CDATA[{
            foreach (string file in Directory.GetFiles(path, "*.resx"))
            {
                var fileInfo = new FileInfo(file);
                var match = FileInfoRegex.Match(fileInfo.Name);

                if (match.Success && match.Groups[1].Value.ToLowerInvariant() != "en-us")
                {
                    continue;
                }
                var node = new RadTreeNode { Value = fileInfo.FullName, Text = fileInfo.Name.Replace(".resx", "") };
                e.Node.Nodes.Add(node);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="HasLocalResources">
          <declaration><![CDATA[private bool HasLocalResources(string path)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="905" sc="9" el="924" ec="10">LanguageEditor.ascx.cs</location>
            <body hash="ad2de1ae6a1fe2f1598b58b18b49b549"><![CDATA[{
            var folderInfo = new DirectoryInfo(path);

            if (path.ToLowerInvariant().EndsWith(Localization.LocalResourceDirectory))
            {
                return true;
            }

            bool hasResources = false;
            foreach (string folder in Directory.GetDirectories(path))
            {
                if ((File.GetAttributes(folder) & FileAttributes.ReparsePoint) != FileAttributes.ReparsePoint)
                {
                    folderInfo = new DirectoryInfo(folder);
                    hasResources = hasResources || HasLocalResources(folderInfo.FullName);
                }
            }
            return hasResources || folderInfo.GetFiles("*.resx").Length > 0;

        }]]></body>
          </codeblock>
        </method>
        <method name="LoadFile">
          <declaration><![CDATA[private Hashtable LoadFile(string mode, string type)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   Loads resources from file
 </summary>
 <param name="mode">Active editor mode</param>
 <param name="type">Resource being loaded (edit or default)</param>
 <returns></returns>
 <remarks>
   Depending on the editor mode, resources will be overrided using default DNN schema.
   "Edit" resources will only load selected file.
   When loading "Default" resources (to be used on the editor as helpers) fallback resource
   chain will be used in order for the editor to be able to correctly see what
   is the current default value for the any key. This process depends on the current active
   editor mode:
   - System: when editing system base resources on en-US needs to be loaded
   - Host: base en-US, and base locale especific resource
   - Portal: base en-US, host override for en-US, base locale especific resource, and host override
   for locale
 </remarks>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="292" sc="9" el="337" ec="10">LanguageEditor.ascx.cs</location>
            <body hash="1edefa09211887ed930e6c9652659e60"><![CDATA[{
            string file = null;
            var ht = new Hashtable();

            switch (type)
            {
                case "Edit":
                    // Only load resources from the file being edited
                    file = ResourceFile(Locale, mode);
                    ht = LoadResource(ht, file);
                    break;
                case "Default":
                    // Load system default
                    file = ResourceFile(Localization.SystemLocale, "System");
                    ht = LoadResource(ht, file);

                    switch (mode)
                    {
                        case "Host":
                            // Load base file for selected locale
                            file = ResourceFile(Locale, "System");
                            ht = LoadResource(ht, file);
                            break;
                        case "Portal":
                            //Load host override for default locale
                            file = ResourceFile(Localization.SystemLocale, "Host");
                            ht = LoadResource(ht, file);

                            if (Locale != Localization.SystemLocale)
                            {
                                // Load base file for locale
                                file = ResourceFile(Locale, "System");
                                ht = LoadResource(ht, file);

                                //Load host override for selected locale
                                file = ResourceFile(Locale, "Host");
                                ht = LoadResource(ht, file);
                            }
                            break;
                    }

                    break;
            }

            return ht;
        }]]></body>
          </codeblock>
        </method>
        <method name="LoadResource">
          <declaration><![CDATA[private Hashtable LoadResource(Hashtable ht, string filepath)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   Loads resources from file into the HastTable
 </summary>
 <param name="ht">Current resources HashTable</param>
 <param name="filepath">Resources file</param>
 <returns>Base table updated with new resources </returns>
 <remarks>
   Returned hashtable uses resourcekey as key.
   Value contains a Pair object where:
   First=&gt;value to be edited
   Second=&gt;default value
 </remarks>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="354" sc="9" el="388" ec="10">LanguageEditor.ascx.cs</location>
            <body hash="808447b95b0590053c771b6f5f9c2cce"><![CDATA[{
            var d = new XmlDocument();
            bool xmlLoaded = false;
            try
            {
                d.Load(filepath);
                xmlLoaded = true;
                //exc As Exception
            }
            catch
            {
                xmlLoaded = false;
            }
            if (xmlLoaded)
            {
                XmlNode n = null;
                foreach (XmlNode n_loopVariable in d.SelectNodes("root/data"))
                {
                    n = n_loopVariable;
                    if (n.NodeType != XmlNodeType.Comment)
                    {
                        string val = n.SelectSingleNode("value").InnerXml;
                        if (ht[n.Attributes["name"].Value] == null)
                        {
                            ht.Add(n.Attributes["name"].Value, new Pair(val, val));
                        }
                        else
                        {
                            ht[n.Attributes["name"].Value] = new Pair(val, val);
                        }
                    }
                }
            }
            return ht;
        }]]></body>
          </codeblock>
        </method>
        <method name="LoadRootNodes">
          <declaration><![CDATA[private void LoadRootNodes()]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   Initializes ResourceFile treeView
 </summary>
 <remarks>
 </remarks>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="250" sc="9" el="269" ec="10">LanguageEditor.ascx.cs</location>
            <body hash="0dfefe58acd6af61a5000a9dde070115"><![CDATA[{
            var node = new RadTreeNode();
            node.Text = LocalizeString("LocalResources");
            node.Value = "Local Resources";
            node.ExpandMode = TreeNodeExpandMode.ServerSideCallBack;
            resourceFiles.Nodes.Add(node);

            node = new RadTreeNode();
            node.Text = LocalizeString("GlobalResources");
            node.Value = "Global Resources";
            node.ExpandMode = TreeNodeExpandMode.ServerSideCallBack;
            resourceFiles.Nodes.Add(node);

            node = new RadTreeNode();
            node.Text = LocalizeString("SiteTemplates");
            node.Value = "Site Templates";
            node.ExpandMode = TreeNodeExpandMode.ServerSideCallBack;
            resourceFiles.Nodes.Add(node);

        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="450" sc="9" el="467" ec="10">LanguageEditor.ascx.cs</location>
            <body hash="e387b42da50520631001aae125986f0e"><![CDATA[{
            base.OnInit(e);

            chkHighlight.CheckedChanged += chkHighlight_CheckedChanged;
            cmdCancel.Click += cmdCancel_Click;
            cmdDelete.Click += cmdDelete_Click;
            cmdUpdate.Click += cmdUpdate_Click;
            rbMode.SelectedIndexChanged += rbMode_SelectedIndexChanged;
            resourceFiles.NodeClick += resourceFiles_NodeClick;
            resourceFiles.NodeExpand += resourceFiles_NodeExpand;
            resourcesGrid.ItemDataBound += resourcesGrid_ItemDataBound;
            resourcesGrid.NeedDataSource += resourcesGrid_NeedDataSource;

            resourcesGrid.AllowPaging = UsePaging;
            resourcesGrid.PageSize = PageSize;
            resourcesGrid.ScreenRowNumber = PageSize;
            resourcesGrid.MasterTableView.NoMasterRecordsText = Localization.GetString("NoRecords", LocalResourceFile);
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   Loads suported locales and shows default values
 </summary>
 <param name="e"></param>
 <remarks>
 </remarks>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="478" sc="9" el="553" ec="10">LanguageEditor.ascx.cs</location>
            <body hash="0ead7ba9b35c80292ec17fddff5eaf2e"><![CDATA[{
            base.OnLoad(e);

            try
            {
                if (!Page.IsPostBack)
                {
                    ClientAPI.AddButtonConfirm(cmdDelete, Localization.GetString("DeleteItem"));

                    // init tree
                    LoadRootNodes();

                    Locale language = LocaleController.Instance.GetLocale(Locale);

                    if (language == null)
                    {
                        throw new ModuleLoadException(string.Format(Localization.GetString("InvalidLocale.ErrorMessage", LocalResourceFile), Locale));
                    }

                    languageLabel.Language = language.Code;

                    if (UserInfo.IsSuperUser)
                    {
                        string mode = Request.QueryString["mode"];
                        if (!string.IsNullOrEmpty(mode) && (rbMode.Items.FindByValue(mode) != null))
                        {
                            rbMode.SelectedValue = mode;
                        }
                        else
                        {
                            rbMode.SelectedValue = "Host";
                        }
                    }
                    else
                    {
                        rbMode.SelectedValue = "Portal";
                        rowMode.Visible = false;
                    }

                    string PersonalHighlight = Convert.ToString(Personalization.GetProfile("LanguageEditor", "HighLight" + PortalId));
                    string highlight = Request.QueryString["highlight"];
                    if (!string.IsNullOrEmpty(highlight) && highlight.ToLower() == "true")
                    {
                        chkHighlight.Checked = true;
                    }
                    else
                    {
                        if (!string.IsNullOrEmpty(PersonalHighlight))
                        {
                            chkHighlight.Checked = Convert.ToBoolean(PersonalHighlight);
                        }
                    }

                    if (!string.IsNullOrEmpty(Request.QueryString["resourcefile"]))
                    {
                        SelectedResourceFile = Server.MapPath("~/" + Globals.QueryStringDecode(Request.QueryString["resourcefile"]));
                    }
                    else
                    {
                        SelectedResourceFile = Server.MapPath(Localization.GlobalResourceFile);
                    }

                    if (!string.IsNullOrEmpty(Request.QueryString["message"]))
                    {
						DotNetNuke.UI.Skins.Skin.AddModuleMessage(this, Localization.GetString(Request.QueryString["message"], LocalResourceFile), ModuleMessage.ModuleMessageType.GreenSuccess);
                    }

                    BindGrid(!IsPostBack);
                }
                //Module failed to load
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OpenFullEditor">
          <declaration><![CDATA[protected string OpenFullEditor(string name)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   Builds the url for the lang. html editor control
 </summary>
 <param name="name"></param>
 <returns></returns>
 <remarks>
 </remarks>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="433" sc="9" el="443" ec="10">LanguageEditor.ascx.cs</location>
            <body hash="f593da55df23c7b6d73aa366a88d4a18"><![CDATA[{
            string file = null;
            file = SelectedResourceFile.Replace(Server.MapPath(Globals.ApplicationPath + "/"), "");
            return EditUrl("Name",
                           name,
                           "EditResourceKey",
                           "Locale=" + Locale,
                           "ResourceFile=" + Globals.QueryStringEncode(file.Replace("\\", "/")),
                           "Mode=" + rbMode.SelectedValue,
                           "Highlight=" + chkHighlight.Checked.ToString().ToLower());
        }]]></body>
          </codeblock>
        </method>
        <method name="rbMode_SelectedIndexChanged">
          <declaration><![CDATA[private void rbMode_SelectedIndexChanged(object sender, EventArgs e)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   Rebinds the grid
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks>
 </remarks>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="788" sc="9" el="798" ec="10">LanguageEditor.ascx.cs</location>
            <body hash="9cc9aa79a5c15d094bb24e1d74ff9fa4"><![CDATA[{
            try
            {
                Personalization.SetProfile("LanguageEditor", "Mode" + PortalSettings.PortalId, rbMode.SelectedValue);
                BindGrid(true);
            }
            catch
            {
				DotNetNuke.UI.Skins.Skin.AddModuleMessage(this, Localization.GetString("Save.ErrorMessage", LocalResourceFile), ModuleMessage.ModuleMessageType.YellowWarning);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="ResourceFile">
          <declaration><![CDATA[private string ResourceFile(string language, string mode)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   Returns the resource file name for a given resource and language
 </summary>
 <param name="language">Language Name.</param>
 <param name="mode">Identifies the resource being searched (System, Host, Portal)</param>
 <returns>Localized File Name</returns>
 <remarks>
 </remarks>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="401" sc="9" el="403" ec="10">LanguageEditor.ascx.cs</location>
            <body hash="7f791a18118ff889bad6e4a7aceb8022"><![CDATA[{
            return Localization.GetResourceFileName(SelectedResourceFile, language, mode, PortalId);
        }]]></body>
          </codeblock>
        </method>
        <method name="resourceFiles_NodeClick">
          <declaration><![CDATA[protected void resourceFiles_NodeClick(object sender, RadTreeNodeEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="801" sc="9" el="822" ec="10">LanguageEditor.ascx.cs</location>
            <body hash="e9cdb7242bf3f4f64df536d1fc2adab2"><![CDATA[{
            try
            {
                if (e.Node.Nodes.Count == 0)
                {
                    SelectedResourceFile = e.Node.Value;
                    try
                    {
                        BindGrid(true);
                    }
                    catch
                    {
						DotNetNuke.UI.Skins.Skin.AddModuleMessage(this, Localization.GetString("Save.ErrorMessage", LocalResourceFile), ModuleMessage.ModuleMessageType.YellowWarning);
                    }
                }
                //Module failed to load
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="resourceFiles_NodeExpand">
          <declaration><![CDATA[protected void resourceFiles_NodeExpand(object sender, RadTreeNodeEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="825" sc="9" el="888" ec="10">LanguageEditor.ascx.cs</location>
            <body hash="69b52d221e96cede585da1e51803f2fa"><![CDATA[{
            RadTreeNode node = default(RadTreeNode);
            switch (e.Node.Value)
            {
                case "Local Resources":
                    node = new RadTreeNode();
                    node.Text = "Admin";
                    node.Value = Server.MapPath("~/Admin");
                    node.ExpandMode = TreeNodeExpandMode.ServerSideCallBack;
                    e.Node.Nodes.Add(node);
                    node = new RadTreeNode();
                    node.Text = "Controls";
                    node.Value = Server.MapPath("~/Controls");
                    node.ExpandMode = TreeNodeExpandMode.ServerSideCallBack;
                    e.Node.Nodes.Add(node);
                    node = new RadTreeNode();
                    node.Text = "DesktopModules";
                    node.Value = Server.MapPath("~/DesktopModules");
                    node.ExpandMode = TreeNodeExpandMode.ServerSideCallBack;
                    e.Node.Nodes.Add(node);
                    node = new RadTreeNode();
                    node.Text = "Install";
                    node.Value = Server.MapPath("~/Install");
                    node.ExpandMode = TreeNodeExpandMode.ServerSideCallBack;
                    e.Node.Nodes.Add(node);
                    node = new RadTreeNode();
                    node.Text = "Providers";
                    node.Value = Server.MapPath("~/Providers");
                    node.ExpandMode = TreeNodeExpandMode.ServerSideCallBack;
                    e.Node.Nodes.Add(node);

                    if (HasLocalResources(Path.Combine(Globals.HostMapPath, "Skins")))
                    {
                        node = new RadTreeNode();
                        node.Text = LocalizeString("HostSkins");
                        node.Value = Path.Combine(Globals.HostMapPath, "Skins");
                        node.ExpandMode = TreeNodeExpandMode.ServerSideCallBack;
                        e.Node.Nodes.Add(node);
                    }

                    string portalSkinFolder = Path.Combine(PortalSettings.HomeSystemDirectoryMapPath, "Skins");
                    if (Directory.Exists(portalSkinFolder) && (PortalSettings.ActiveTab.ParentId == PortalSettings.AdminTabId))
                    {
                        node = new RadTreeNode();
                        node.Text = LocalizeString("PortalSkins");
                        node.Value = Path.Combine(PortalSettings.HomeSystemDirectoryMapPath, "Skins");
                        node.ExpandMode = TreeNodeExpandMode.ServerSideCallBack;
                        e.Node.Nodes.Add(node);
                    }
                    break;
                case "Global Resources":
                    GetResxFiles(Server.MapPath("~/App_GlobalResources"), e);
                    break;
                case "Site Templates":
                    GetResxFiles(Server.MapPath("~/Portals/_default"), e);
                    break;
                default:
                    GetResxDirectories(e.Node.Value, e);
                    GetResxFiles(e.Node.Value, e);
                    break;
            }

            e.Node.Expanded = true;
        }]]></body>
          </codeblock>
        </method>
        <method name="resourcesGrid_ItemDataBound">
          <declaration><![CDATA[protected void resourcesGrid_ItemDataBound(object sender, GridItemEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="943" sc="9" el="991" ec="10">LanguageEditor.ascx.cs</location>
            <body hash="064eabf0578c9d4c9f238405be6240d9"><![CDATA[{
            try
            {
                if (e.Item.ItemType == GridItemType.AlternatingItem || e.Item.ItemType == GridItemType.Item)
                {
                    HyperLink c = null;
                    c = (HyperLink)e.Item.FindControl("lnkEdit");
                    if ((c != null))
                    {
                        ClientAPI.AddButtonConfirm(c, Localization.GetString("SaveWarning", LocalResourceFile));
                    }

                    var p = (Pair)((DictionaryEntry)e.Item.DataItem).Value;

                    var t = (TextBox)e.Item.FindControl("txtValue");
                    var d = (TextBox)e.Item.FindControl("txtDefault");

                    if (p.First.ToString() == p.Second.ToString() && chkHighlight.Checked && !string.IsNullOrEmpty(p.Second.ToString()))
                    {
                        t.CssClass = "Pending";
                    }
                    int length = p.First.ToString().Length;
                    if (p.Second.ToString().Length > length)
                    {
                        length = p.Second.ToString().Length;
                    }
                    if (length > 30)
                    {
                        int height = 18 * (length / 30);
                        if (height > 108)
                        {
                            height = 108;
                        }
                        t.Height = new Unit(height);
                        t.TextMode = TextBoxMode.MultiLine;
                        d.Height = new Unit(height);
                        d.TextMode = TextBoxMode.MultiLine;
                        d.CssClass += " dnnTextArea";
                    }
                    t.Text = Server.HtmlDecode(p.First.ToString());
                    d.Text = Server.HtmlDecode(p.Second.ToString());
                }
                //Module failed to load
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="resourcesGrid_NeedDataSource">
          <declaration><![CDATA[protected void resourcesGrid_NeedDataSource(object source, GridNeedDataSourceEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="994" sc="9" el="996" ec="10">LanguageEditor.ascx.cs</location>
            <body hash="fc1dd5c44855d73a94dbbf257949e714"><![CDATA[{
            BindGrid(false);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="chkHighlight">
          <declaration><![CDATA[protected CheckBox chkHighlight;]]></declaration>
          <documentation>
            <summary>
 chkHighlight control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="cmdCancel">
          <declaration><![CDATA[protected LinkButton cmdCancel;]]></declaration>
          <documentation>
            <summary>
 cmdCancel control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="cmdDelete">
          <declaration><![CDATA[protected LinkButton cmdDelete;]]></declaration>
          <documentation>
            <summary>
 cmdDelete control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="cmdUpdate">
          <declaration><![CDATA[protected LinkButton cmdUpdate;]]></declaration>
          <documentation>
            <summary>
 cmdUpdate control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="highlightLabel">
          <declaration><![CDATA[protected UserControl highlightLabel;]]></declaration>
          <documentation>
            <summary>
 highlightLabel control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="languageLabel">
          <declaration><![CDATA[protected DnnLanguageLabel languageLabel;]]></declaration>
          <documentation>
            <summary>
 languageLabel control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="lblFolder">
          <declaration><![CDATA[protected Label lblFolder;]]></declaration>
          <documentation>
            <summary>
 lblFolder control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="lblResourceFile">
          <declaration><![CDATA[protected Label lblResourceFile;]]></declaration>
          <documentation>
            <summary>
 lblResourceFile control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="Logger">
          <declaration><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof(LanguageEditor));]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plEditingLanguage">
          <declaration><![CDATA[protected UserControl plEditingLanguage;]]></declaration>
          <documentation>
            <summary>
 plEditingLanguage control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="plFolder">
          <declaration><![CDATA[protected UserControl plFolder;]]></declaration>
          <documentation>
            <summary>
 plFolder control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="plMode">
          <declaration><![CDATA[protected UserControl plMode;]]></declaration>
          <documentation>
            <summary>
 plMode control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="plResources">
          <declaration><![CDATA[protected UserControl plResources;]]></declaration>
          <documentation>
            <summary>
 plResources control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="plSelected">
          <declaration><![CDATA[protected UserControl plSelected;]]></declaration>
          <documentation>
            <summary>
 plSelected control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="rbMode">
          <declaration><![CDATA[protected RadioButtonList rbMode;]]></declaration>
          <documentation>
            <summary>
 rbMode control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="resourceFiles">
          <declaration><![CDATA[protected DnnTreeView resourceFiles;]]></declaration>
          <documentation>
            <summary>
 resourceFiles control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="resourcesGrid">
          <declaration><![CDATA[protected DnnGrid resourcesGrid;]]></declaration>
          <documentation>
            <summary>
 resourcesGrid control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="rowMode">
          <declaration><![CDATA[protected HtmlGenericControl rowMode;]]></declaration>
          <documentation>
            <summary>
 rowMode control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
      </fields>
      <properties>
        <property name="Locale">
          <declaration><![CDATA[protected string Locale]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="85" sc="13" el="94" ec="14">LanguageEditor.ascx.cs</location>
            <body hash="21a7c61a67e7cd9c2cc7de05b1ce4e19"><![CDATA[{
                string _Locale = Null.NullString;

                if (!string.IsNullOrEmpty(Request.QueryString["locale"]))
                {
                    _Locale = Request.QueryString["locale"];
                }

                return _Locale;
            }]]></body>
          </codeblock>
        </property>
        <property name="ModuleActions">
          <declaration><![CDATA[public ModuleActionCollection ModuleActions]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1005" sc="13" el="1007" ec="14">LanguageEditor.ascx.cs</location>
            <body hash="7409d6d55919619a76ff7c16577b0a06"><![CDATA[{
                return new ModuleActionCollection();
            }]]></body>
          </codeblock>
        </property>
        <property name="PageSize">
          <declaration><![CDATA[protected int PageSize]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="100" sc="13" el="113" ec="14">LanguageEditor.ascx.cs</location>
            <body hash="10c1361d0d35bff7c4964356eafd9e65"><![CDATA[{
                int _PageSize = 1000;
                if (Settings["PageSize"] != null)
                {
                    _PageSize = Convert.ToInt32(Settings["PageSize"]);

                    //Make sure Page Size is not invalid
                    if (_PageSize < 1)
                    {
                        _PageSize = 1000;
                    }
                }
                return _PageSize;
            }]]></body>
          </codeblock>
        </property>
        <property name="SelectedResourceFile">
          <declaration><![CDATA[private string SelectedResourceFile]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   Saves / Gets the selected resource file being edited in viewstate
 </summary>
 <returns></returns>
 <remarks>
 </remarks>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="144" sc="13" el="146" ec="14">LanguageEditor.ascx.cs</location>
            <body hash="29c0b8d31ae5b0c7687bcdcae83fbc31"><![CDATA[{
                return ViewState["SelectedResourceFile"].ToString();
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="148" sc="13" el="150" ec="14">LanguageEditor.ascx.cs</location>
            <body hash="4179fa865dd2654e7dd0c2127034cedb"><![CDATA[{
                ViewState["SelectedResourceFile"] = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="UsePaging">
          <declaration><![CDATA[protected bool UsePaging]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="119" sc="13" el="126" ec="14">LanguageEditor.ascx.cs</location>
            <body hash="0f8e18adbe7a8b920932d380f47544b5"><![CDATA[{
                bool _UsePaging = false;
                if (Settings["UsePaging"] != null)
                {
                    _UsePaging = Convert.ToBoolean(Settings["UsePaging"]);
                }
                return _UsePaging;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="LanguageEditorExt">
      <declaration><![CDATA[public class LanguageEditorExt : PortalModuleBase]]></declaration>
      <documentation>-----------------------------------------------------------------------------
 <summary>
 Manages translations for Resource files
 </summary>
 <remarks>
 </remarks>
 -----------------------------------------------------------------------------</documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public LanguageEditorExt()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="cmdCancel_Click">
          <declaration><![CDATA[private void cmdCancel_Click(object sender, EventArgs e)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 Returns to language editor control
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks>
 </remarks>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="260" sc="9" el="269" ec="10">LanguageEditorExt.ascx.cs</location>
            <body hash="2805bfefe0434ea794b5d1ffb9ed634e"><![CDATA[{
            try
            {
                Response.Redirect(ReturnUrl, true);
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="cmdUpdate_Click">
          <declaration><![CDATA[private void cmdUpdate_Click(object sender, EventArgs e)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 Saves the translation to the resource file
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks>
 </remarks>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="281" sc="9" el="392" ec="10">LanguageEditorExt.ascx.cs</location>
            <body hash="2c72d819c40052c4f6995edbf90fb27c"><![CDATA[{
            XmlNode node;
            XmlNode nodeData;
            XmlNode parent;
            XmlAttribute attr;
            var resDoc = new XmlDocument();
            string filename;
            bool IsNewFile = false;
            try
            {
                if (String.IsNullOrEmpty(teContent.Text))
                {
					DotNetNuke.UI.Skins.Skin.AddModuleMessage(this, Localization.GetString("RequiredField.ErrorMessage", LocalResourceFile), ModuleMessage.ModuleMessageType.YellowWarning);
                    return;
                }
                filename = ResourceFile(_locale, _mode);
                if (!File.Exists(filename))
                {
					//load system default
                    resDoc.Load(ResourceFile(Localization.SystemLocale, "System"));
                    IsNewFile = true;
                }
                else
                {
                    resDoc.Load(filename);
                }
                switch (_mode)
                {
                    case "System":
                        node = resDoc.SelectSingleNode("//root/data[@name='" + lblName.Text + "']/value");
                        if (node == null)
                        {
							//missing entry
                            nodeData = resDoc.CreateElement("data");
                            attr = resDoc.CreateAttribute("name");
                            attr.Value = lblName.Text;
                            nodeData.Attributes.Append(attr);
                            resDoc.SelectSingleNode("//root").AppendChild(nodeData);

                            node = nodeData.AppendChild(resDoc.CreateElement("value"));
                        }
                        node.InnerXml = teContent.Text;

                        resDoc.Save(filename);
                        break;
                    case "Host":
                    case "Portal":
                        if (IsNewFile)
                        {
                            if (teContent.Text != lblDefault.Text)
                            {
                                foreach (XmlNode n in resDoc.SelectNodes("//root/data"))
                                {
                                    parent = n.ParentNode;
                                    parent.RemoveChild(n);
                                }
                                nodeData = resDoc.CreateElement("data");
                                attr = resDoc.CreateAttribute("name");
                                attr.Value = lblName.Text;
                                nodeData.Attributes.Append(attr);
                                resDoc.SelectSingleNode("//root").AppendChild(nodeData);

                                node = nodeData.AppendChild(resDoc.CreateElement("value"));
                                node.InnerXml = teContent.Text;

                                resDoc.Save(filename);
                            }
                        }
                        else
                        {
                            node = resDoc.SelectSingleNode("//root/data[@name='" + lblName.Text + "']/value");
                            if (teContent.Text != lblDefault.Text)
                            {
                                if (node == null)
                                {
                                    nodeData = resDoc.CreateElement("data");
                                    attr = resDoc.CreateAttribute("name");
                                    attr.Value = lblName.Text;
                                    nodeData.Attributes.Append(attr);
                                    resDoc.SelectSingleNode("//root").AppendChild(nodeData);

                                    node = nodeData.AppendChild(resDoc.CreateElement("value"));
                                }
                                node.InnerXml = teContent.Text;
                            }
                            else if (node != null)
                            {
								//remove item = default
                                resDoc.SelectSingleNode("//root").RemoveChild(node.ParentNode);
                            }
                            if (resDoc.SelectNodes("//root/data").Count > 0)
                            {
								//there's something to save
                                resDoc.Save(filename);
                            }
                            else if (File.Exists(filename))
                            {
								//nothing to be saved, if file exists delete
                                File.Delete(filename);
                            }
                        }
                        break;
                }
                Response.Redirect(ReturnUrl, true);
            }
            catch (Exception) //Module failed to load
            {
				DotNetNuke.UI.Skins.Skin.AddModuleMessage(this, Localization.GetString("Save.ErrorMessage", LocalResourceFile), ModuleMessage.ModuleMessageType.YellowWarning);
            }
			
			#endregion
        }]]></body>
          </codeblock>
        </method>
        <method name="LoadFile">
          <declaration><![CDATA[private string LoadFile(string mode, string type)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 Loads resources from file
 </summary>
 <param name="mode">Active editor mode</param>
 <param name="type">Resource being loaded (edit or default)</param>
 <returns></returns>
 <remarks>
 Depending on the editor mode, resources will be overrided using default DNN schema.
 "Edit" resources will only load selected file.
 When loading "Default" resources (to be used on the editor as helpers) fallback resource
 chain will be used in order for the editor to be able to correctly see what
 is the current default value for the any key. This process depends on the current active
 editor mode:
 - System: when editing system base resources on en-US needs to be loaded
 - Host: base en-US, and base locale especific resource
 - Portal: base en-US, host override for en-US, base locale especific resource, and host override
 for locale
 </remarks>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="90" sc="9" el="154" ec="10">LanguageEditorExt.ascx.cs</location>
            <body hash="84600e3b873e19a40453b1bbb340ee75"><![CDATA[{
            string file;
            string t = "";
            string temp;
            switch (type)
            {
                case "Edit":
                    //Only load resources from the file being edited
                    file = ResourceFile(_locale, mode);
                    temp = LoadResource(file);
                    if (temp != null)
                    {
                        t = temp;
                    }
                    break;
                case "Default":
                    //Load system default
                    file = ResourceFile(Localization.SystemLocale, "System");
                    t = LoadResource(file);
                    switch (mode)
                    {
                        case "Host":
                            if (_locale != Localization.SystemLocale)
                            {
								//Load base file for selected locale
                                file = ResourceFile(_locale, "System");
                                temp = LoadResource(file);
                                if (temp != null)
                                {
                                    t = temp;
                                }
                            }
                            break;
                        case "Portal":
                            //Load host override for default locale
                            file = ResourceFile(Localization.SystemLocale, "Host");
                            temp = LoadResource(file);
                            if (temp != null)
                            {
                                t = temp;
                            }
                            if (_locale != Localization.SystemLocale)
                            {
								//Load base file for locale
                                file = ResourceFile(_locale, "System");
                                temp = LoadResource(file);
                                if (temp != null)
                                {
                                    t = temp;
                                }
								
								//Load host override for selected locale
                                file = ResourceFile(_locale, "Host");
                                temp = LoadResource(file);
                                if (temp != null)
                                {
                                    t = temp;
                                }
                            }
                            break;
                    }
                    break;
            }
            return t;
        }]]></body>
          </codeblock>
        </method>
        <method name="LoadResource">
          <declaration><![CDATA[private string LoadResource(string filepath)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 Loads resource from file
 </summary>
 <param name="filepath">Resources file</param>
 <returns>Resource value</returns>
 <remarks>
 </remarks>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="166" sc="9" el="188" ec="10">LanguageEditorExt.ascx.cs</location>
            <body hash="bed2dff9bf9db1c71921559befbd376f"><![CDATA[{
            var d = new XmlDocument();
            bool xmlLoaded;
            string ret = null;
            try
            {
                d.Load(filepath);
                xmlLoaded = true;
            }
            catch
            {
                xmlLoaded = false;
            }
            if (xmlLoaded)
            {
                var node = d.SelectSingleNode("//root/data[@name='" + lblName.Text + "']/value");
                if (node != null)
                {
                    ret = node.InnerXml;
                }
            }
            return ret;
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 Loads resource file and default data
 </summary>
 <param name="e"></param>
 <remarks>
 </remarks>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="218" sc="9" el="248" ec="10">LanguageEditorExt.ascx.cs</location>
            <body hash="e5f9a98a271fa3357f4c8ce5a3f15d99"><![CDATA[{
            base.OnLoad(e);

            cmdCancel.Click += cmdCancel_Click;
            cmdUpdate.Click += cmdUpdate_Click;

            try
            {
                _resfile = Globals.QueryStringDecode(Request.QueryString["resourcefile"]);
                _locale = Request.QueryString["locale"];
                _mode = Request.QueryString["mode"];
                _highlight = Request.QueryString["highlight"];
                lblName.Text = Request.QueryString["name"];
                lblFile.Text = ResourceFile(_locale, _mode).Replace(Globals.ApplicationMapPath, "").Replace("\\", "/");
                if (!Page.IsPostBack)
                {
                    var defaultValue = LoadFile(_mode, "Default");
                    var editValue = LoadFile(_mode, "Edit");
                    if (string.IsNullOrEmpty(editValue))
                    {
                        editValue = defaultValue;
                    }
                    teContent.Text = editValue;
                    lblDefault.Text = Server.HtmlDecode(defaultValue);
                }
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="ResourceFile">
          <declaration><![CDATA[private string ResourceFile(string language, string mode)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 Returns the resource file name for a given resource and language
 </summary>
 <param name="language"></param>
 <param name="mode">Identifies the resource being searched (System, Host, Portal)</param>
 <returns>Localized File Name</returns>
 <remarks>
 </remarks>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="201" sc="9" el="203" ec="10">LanguageEditorExt.ascx.cs</location>
            <body hash="d739d8dc4033c729ef173297e704d42d"><![CDATA[{
            return Localization.GetResourceFileName(Server.MapPath("~\\" + _resfile), language, mode, PortalId);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_highlight">
          <declaration><![CDATA[private string _highlight;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_locale">
          <declaration><![CDATA[private string _locale;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_mode">
          <declaration><![CDATA[private string _mode;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_resfile">
          <declaration><![CDATA[private string _resfile;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdCancel">
          <declaration><![CDATA[protected LinkButton cmdCancel;]]></declaration>
          <documentation>
            <summary>
 cmdCancel control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="cmdUpdate">
          <declaration><![CDATA[protected LinkButton cmdUpdate;]]></declaration>
          <documentation>
            <summary>
 cmdUpdate control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="lblDefault">
          <declaration><![CDATA[protected Label lblDefault;]]></declaration>
          <documentation>
            <summary>
 lblDefault control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="lblFile">
          <declaration><![CDATA[protected Label lblFile;]]></declaration>
          <documentation>
            <summary>
 lblFile control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="lblName">
          <declaration><![CDATA[protected Label lblName;]]></declaration>
          <documentation>
            <summary>
 lblName control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="plDefault">
          <declaration><![CDATA[protected UserControl plDefault;]]></declaration>
          <documentation>
            <summary>
 plDefault control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="plFile">
          <declaration><![CDATA[protected UserControl plFile;]]></declaration>
          <documentation>
            <summary>
 plFile control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="plName">
          <declaration><![CDATA[protected UserControl plName;]]></declaration>
          <documentation>
            <summary>
 plName control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="teContent">
          <declaration><![CDATA[protected TextEditor teContent;]]></declaration>
          <documentation>
            <summary>
 teContent control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
      </fields>
      <properties>
        <property name="ReturnUrl">
          <declaration><![CDATA[protected string ReturnUrl]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="60" sc="13" el="62" ec="14">LanguageEditorExt.ascx.cs</location>
            <body hash="185aba02f28944fad45c9a8a88524fca"><![CDATA[{
                return ModuleContext.NavigateUrl(TabId, "", true, "ctl=Editor", "mid=" + ModuleId, "Locale=" + _locale, "ResourceFile=" + Globals.QueryStringEncode(_resfile), "Mode=" + _mode, "Highlight=" + _highlight);
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="LanguageEnabler">
      <declaration><![CDATA[public class LanguageEnabler : PortalModuleBase]]></declaration>
      <documentation>-----------------------------------------------------------------------------
 <summary>
   Manage languages for the portal
 </summary>
 <remarks>
 </remarks>
 -----------------------------------------------------------------------------</documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private string _PortalDefault = "";]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="65" sc="9" el="65" ec="44">LanguageEnabler.ascx.cs</location>
            <body hash="c7ba1329442c4492137b602350719f42"><![CDATA[private string _PortalDefault = ""]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="AddMissing_Click">
          <declaration><![CDATA[protected void AddMissing_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="837" sc="9" el="842" ec="10">LanguageEnabler.ascx.cs</location>
            <body hash="b79660418b73467e9b67ff5a7564f097"><![CDATA[{
            TabController.Instance.AddMissingLanguages(PortalId, ddlPages.SelectedPage.TabID);

            BindCLControl();

        }]]></body>
          </codeblock>
        </method>
        <method name="BindCLControl">
          <declaration><![CDATA[protected void BindCLControl()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="258" sc="9" el="293" ec="10">LanguageEnabler.ascx.cs</location>
            <body hash="f40c7ca44a5a3700bec88c331ac08c1e"><![CDATA[{
            NeutralMessage.Visible = false;
            MakeTranslatable.Visible = false;
            MakeNeutral.Visible = false;
            cmdUpdate.Visible = false;
            AddMissing.Visible = false;
            var tabInfo = ddlPages.SelectedPage;
            if (tabInfo != null)
            {
                if (String.IsNullOrEmpty(tabInfo.CultureCode))
                {
                    CLControl1.Visible = false;
                    if (UserInfo.IsSuperUser || UserInfo.IsInRole("Administrators"))
                    {
                        MakeTranslatable.Visible = true;
                    }
                    NeutralMessage.Visible = true;
                }
                else
                {
                    CLControl1.Visible = true;
                    CLControl1.enablePageEdit = true;
                    CLControl1.BindAll(tabInfo.TabID);
                    cmdUpdate.Visible = true;

                    if (UserInfo.IsSuperUser || UserInfo.IsInRole("Administrators"))
                    {
                        // only show "Convert to neutral" if page has no child pages
                    MakeNeutral.Visible = (TabController.Instance.GetTabsByPortal(PortalId).WithParentId(tabInfo.TabID).Count == 0);

                        // only show "add missing languages" if not all languages are available
                        AddMissing.Visible = TabController.Instance.HasMissingLanguages(PortalId, tabInfo.TabID);
                    }
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="BindDefaultLanguageSelector">
          <declaration><![CDATA[private void BindDefaultLanguageSelector()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="92" sc="9" el="95" ec="10">LanguageEnabler.ascx.cs</location>
            <body hash="b973a1899c45e7a9a348940dfa35af0f"><![CDATA[{
            languagesComboBox.DataBind();
            languagesComboBox.SetLanguage(PortalDefault);
        }]]></body>
          </codeblock>
        </method>
        <method name="BindGrid">
          <declaration><![CDATA[private void BindGrid()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="98" sc="9" el="101" ec="10">LanguageEnabler.ascx.cs</location>
            <body hash="cc39316c037d69c4ac02488e4783f356"><![CDATA[{
            //languagesGrid.DataSource = LocaleController.Instance.GetLocales(Null.NullInteger).Values;
            languagesGrid.DataBind();
        }]]></body>
          </codeblock>
        </method>
        <method name="BuildConfirmationJS">
          <declaration><![CDATA[protected string BuildConfirmationJS(string controlName, string confirmResource)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="231" sc="9" el="255" ec="10">LanguageEnabler.ascx.cs</location>
            <body hash="efb4271e5287b6ef7c4b0ce7b07ef16e"><![CDATA[{

            string s = "";
            foreach (GridDataItem dataItem in languagesGrid.MasterTableView.Items)
            {
                var control = dataItem.FindControl(controlName);
                var button = control as LinkButton;
                if (button != null)
                {
                    if (button.Visible)
                    {
                        int languageId = int.Parse(button.CommandArgument);
                        Locale localeToDelete = LocaleController.Instance.GetLocale(languageId);
                        s += string.Format(@"$('#{0}').dnnConfirm({{text: '{1}', yesText: '{2}', noText: '{3}', title: '{4}'}});",
                            button.ClientID,
                            string.Format(Localization.GetSafeJSString(confirmResource, LocalResourceFile), localeToDelete.Code),
                            Localization.GetSafeJSString("Yes.Text", Localization.SharedResourceFile),
                            Localization.GetSafeJSString("No.Text", Localization.SharedResourceFile),
                            Localization.GetSafeJSString("Confirm.Text", Localization.SharedResourceFile)
                            );
                    }
                }
            }
            return s;
        }]]></body>
          </codeblock>
        </method>
        <method name="CanEnableDisable">
          <declaration><![CDATA[protected bool CanEnableDisable(string code)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="113" sc="9" el="124" ec="10">LanguageEnabler.ascx.cs</location>
            <body hash="44f9b98d13f51eedde5fab0cd25e6126"><![CDATA[{
            bool canEnable;
            if (IsLanguageEnabled(code))
            {
                canEnable = !IsDefaultLanguage(code) && !IsLanguagePublished(code);
            }
            else
            {
                canEnable = !IsDefaultLanguage(code);
            }
            return canEnable;
        }]]></body>
          </codeblock>
        </method>
        <method name="CanLocalize">
          <declaration><![CDATA[protected bool CanLocalize(string code)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="127" sc="9" el="133" ec="10">LanguageEnabler.ascx.cs</location>
            <body hash="ed333ea740d19c8e0565d1a3c22b06a3"><![CDATA[{

            int defaultPageCount = GetLocalizedPages(PortalSettings.DefaultLanguage, false).Count;
            int currentPageCount = GetLocalizedPages(code, false).Count;

            return PortalSettings.ContentLocalizationEnabled && IsLanguageEnabled(code) && !IsDefaultLanguage(code) && (currentPageCount < defaultPageCount);
        }]]></body>
          </codeblock>
        </method>
        <method name="cmdDeleteTranslation_Click">
          <declaration><![CDATA[protected void cmdDeleteTranslation_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="720" sc="9" el="746" ec="10">LanguageEnabler.ascx.cs</location>
            <body hash="8caa45d43c1cbfc43ca467f26309b9e7"><![CDATA[{
            try
            {
                if ((sender) is LinkButton)
                {
                    var cmdDeleteTranslation = (LinkButton)sender;
                    int languageId = int.Parse(cmdDeleteTranslation.CommandArgument);
                    Locale locale = LocaleController.Instance.GetLocale(languageId);

                    TabController.Instance.DeleteTranslatedTabs(PortalId, locale.Code, false);

                    PortalController.Instance.RemovePortalLocalization(PortalId, locale.Code, false);

                    LocaleController.Instance.PublishLanguage(PortalId, locale.Code, false);


                    DataCache.ClearPortalCache(PortalId, true);

                    //Redirect to refresh page (and skinobjects)
                    Response.Redirect(Globals.NavigateURL(), true);
                }
            }
            catch (Exception ex)
            {
                Exceptions.ProcessModuleLoadException(this, ex);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="cmdDisableLocalization_Click">
          <declaration><![CDATA[protected void cmdDisableLocalization_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="749" sc="9" el="777" ec="10">LanguageEnabler.ascx.cs</location>
            <body hash="0747c129f86f6c7ae5680f0a123c9c9a"><![CDATA[{
            try
            {
                foreach (Locale locale in LocaleController.Instance.GetLocales(PortalSettings.PortalId).Values)
                {
                    if (!IsDefaultLanguage(locale.Code))
                    {

                        LocaleController.Instance.PublishLanguage(PortalId, locale.Code, false);
                        TabController.Instance.DeleteTranslatedTabs(PortalId, locale.Code, false);
                        PortalController.Instance.RemovePortalLocalization(PortalId, locale.Code, false);

                    }
                }

                TabController.Instance.EnsureNeutralLanguage(PortalId, PortalDefault, false);

                PortalController.UpdatePortalSetting(PortalId, "ContentLocalizationEnabled", "False");

                DataCache.ClearPortalCache(PortalId, true);


                Response.Redirect(Globals.NavigateURL(), true);
            }
            catch (Exception ex)
            {
                Exceptions.ProcessModuleLoadException(this, ex);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="cmdFix_Click">
          <declaration><![CDATA[protected void cmdFix_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="804" sc="9" el="807" ec="10">LanguageEnabler.ascx.cs</location>
            <body hash="815b8bb74272e98b8bf22b323729fba7"><![CDATA[{
            CLControl1.FixLocalizationErrors(ddlPages.SelectedPage.TabID);
            BindCLControl();
        }]]></body>
          </codeblock>
        </method>
        <method name="cmdUpdate_Click">
          <declaration><![CDATA[protected void cmdUpdate_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="798" sc="9" el="801" ec="10">LanguageEnabler.ascx.cs</location>
            <body hash="73ba7a20c28ea2a3200f09542d09a709"><![CDATA[{
            CLControl1.SaveData();
            BindCLControl();
        }]]></body>
          </codeblock>
        </method>
        <method name="ddlPages_SelectedIndexChanged">
          <declaration><![CDATA[protected void ddlPages_SelectedIndexChanged(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="780" sc="9" el="790" ec="10">LanguageEnabler.ascx.cs</location>
            <body hash="b659d34753b397e31fc9cf6110f2fcf1"><![CDATA[{
            if (ddlPages.SelectedPage != null)
            {
                var pageCookie = new HttpCookie(PageSelectorCookieName, ddlPages.SelectedPage.TabID.ToString(CultureInfo.InvariantCulture) )
                {
                    Path = (!string.IsNullOrEmpty(Globals.ApplicationPath) ? Globals.ApplicationPath : "/")
                };
                Response.Cookies.Add(pageCookie);
            }
            BindCLControl();
        }]]></body>
          </codeblock>
        </method>
        <method name="enabledCheckbox_CheckChanged">
          <declaration><![CDATA[protected void enabledCheckbox_CheckChanged(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="470" sc="9" el="540" ec="10">LanguageEnabler.ascx.cs</location>
            <body hash="25e73078f9ece54eaf7cf4223309e246"><![CDATA[{
            try
            {
                if ((sender) is CheckBox)
                {
                    var enabledCheckbox = (CheckBox)sender;
                    GridDataItem item = (GridDataItem)enabledCheckbox.NamingContainer;
                    DnnLanguageLabel code = item.FindControl("translationStatusLabel") as DnnLanguageLabel;
                    Locale locale = LocaleController.Instance.GetLocale(code.Language);
                    Locale defaultLocale = LocaleController.Instance.GetDefaultLocale(PortalId);

                    Dictionary<string, Locale> enabledLanguages = LocaleController.Instance.GetLocales(PortalId);

                    var localizedTabs = PortalSettings.ContentLocalizationEnabled ?
                        TabController.Instance.GetTabsByPortal(PortalId).WithCulture(locale.Code, false).AsList() : new List<TabInfo>();

                    var redirectUrl = string.Empty;
                    if (enabledCheckbox.Enabled)
                    {
                        // do not touch default language
                        if (enabledCheckbox.Checked)
                        {
                            if (!enabledLanguages.ContainsKey(locale.Code))
                            {
                                //Add language to portal
                                Localization.AddLanguageToPortal(PortalId, locale.LanguageId, true);
                            }

                            //restore the tabs and modules
                            foreach (var tab in localizedTabs)
                            {
                                TabController.Instance.RestoreTab(tab, PortalSettings);
                                ModuleController.Instance.GetTabModules(tab.TabID).Values.ToList().ForEach(ModuleController.Instance.RestoreModule);
                            }
                        }
                        else
                        {
                            //remove language from portal
                            Localization.RemoveLanguageFromPortal(PortalId, locale.LanguageId);

                            //if the disable language is current language, should redirect to default language.
                            if (locale.Code.Equals(Thread.CurrentThread.CurrentUICulture.ToString(), StringComparison.InvariantCultureIgnoreCase))
                            {
                                redirectUrl = Globals.NavigateURL(PortalSettings.ActiveTab.TabID,
                                                                    PortalSettings.ActiveTab.IsSuperTab,
                                                                    PortalSettings, "", defaultLocale.Code);
                            }

                            //delete the tabs in this language
                            foreach (var tab in localizedTabs)
                            {
                                tab.DefaultLanguageGuid = Guid.Empty;
                                TabController.Instance.SoftDeleteTab(tab.TabID, PortalSettings);
                            }
                        }
                    }

                    //Redirect to refresh page (and skinobjects)
                    if (string.IsNullOrEmpty(redirectUrl))
                    {
                        redirectUrl = Globals.NavigateURL();
                    }

                    Response.Redirect(redirectUrl, true);
                }
            }
            catch (Exception ex)
            {
                Exceptions.ProcessModuleLoadException(this, ex);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetEditKeysUrl">
          <declaration><![CDATA[protected string GetEditKeysUrl(string code, string mode)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="141" sc="9" el="143" ec="10">LanguageEnabler.ascx.cs</location>
            <body hash="5775377e8250502e7aae1ed11f924e6a"><![CDATA[{
            return ModuleContext.NavigateUrl(TabId, "Editor", false, string.Format("mid={0}", ModuleId), string.Format("locale={0}", code), string.Format("mode={0}", mode));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetEditUrl">
          <declaration><![CDATA[protected string GetEditUrl(string id)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="136" sc="9" el="138" ec="10">LanguageEnabler.ascx.cs</location>
            <body hash="6dab74992c791196e18893c44449b2bc"><![CDATA[{
            return ModuleContext.NavigateUrl(TabId, "Edit", false, string.Format("mid={0}", ModuleId), string.Format("locale={0}", id));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetLocalizablePages">
          <declaration><![CDATA[protected string GetLocalizablePages(string code)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="156" sc="9" el="166" ec="10">LanguageEnabler.ascx.cs</location>
            <body hash="6ac2f349ebc3eb75b99d472aafa12bc5"><![CDATA[{
            int count = 0;
            foreach (KeyValuePair<int, TabInfo> t in GetLocalizedPages(code, false))
            {
                if (!t.Value.IsDeleted)
                {
                    count++;
                }
            }
            return count.ToString(CultureInfo.CurrentUICulture);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetLocalizedPages">
          <declaration><![CDATA[private TabCollection GetLocalizedPages(string code, bool includeNeutral)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="104" sc="9" el="106" ec="10">LanguageEnabler.ascx.cs</location>
            <body hash="54e1db738b4dbab03b78e76cc7075480"><![CDATA[{
            return TabController.Instance.GetTabsByPortal(PortalId).WithCulture(code, includeNeutral);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetLocalizedPages">
          <declaration><![CDATA[protected string GetLocalizedPages(string code)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="146" sc="9" el="153" ec="10">LanguageEnabler.ascx.cs</location>
            <body hash="56181e4fba085ebc751c5852911f220d"><![CDATA[{
            string status = "";
            if (!IsDefaultLanguage(code) && IsLocalized(code))
            {
                status = GetLocalizedPages(code, false).Count(t => !t.Value.IsDeleted).ToString(CultureInfo.CurrentUICulture);
            }
            return status;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetLocalizedStatus">
          <declaration><![CDATA[protected string GetLocalizedStatus(string code)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="169" sc="9" el="178" ec="10">LanguageEnabler.ascx.cs</location>
            <body hash="538c0ed20a62d814f6ecaa9de136cfe4"><![CDATA[{
            string status = "";
            if (!IsDefaultLanguage(code) && IsLocalized(code))
            {
                int defaultPageCount = GetLocalizedPages(PortalSettings.DefaultLanguage, false).Count;
                int currentPageCount = GetLocalizedPages(code, false).Count;
                status = string.Format("{0:#0%}", currentPageCount / (float)defaultPageCount);
            }
            return status;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetTranslatedPages">
          <declaration><![CDATA[protected string GetTranslatedPages(string code)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="181" sc="9" el="189" ec="10">LanguageEnabler.ascx.cs</location>
            <body hash="fb3f93ad24be33c51d686d16d4bf7f78"><![CDATA[{
            string status = "";
            if (!IsDefaultLanguage(code) && IsLocalized(code))
            {
                int translatedCount = (from t in TabController.Instance.GetTabsByPortal(PortalId).WithCulture(code, false).Values where t.IsTranslated && !t.IsDeleted select t).Count();
                status = translatedCount.ToString(CultureInfo.InvariantCulture);
            }
            return status;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetTranslatedStatus">
          <declaration><![CDATA[protected string GetTranslatedStatus(string code)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="192" sc="9" el="201" ec="10">LanguageEnabler.ascx.cs</location>
            <body hash="5c5e660ddfedf3b9d931ca386cb8c1ef"><![CDATA[{
            string status = "";
            if (!IsDefaultLanguage(code) && IsLocalized(code))
            {
                int localizedCount = GetLocalizedPages(code, false).Count;
                int translatedCount = (from t in TabController.Instance.GetTabsByPortal(PortalId).WithCulture(code, false).Values where t.IsTranslated select t).Count();
                status = string.Format("{0:#0%}", translatedCount / (float)localizedCount);
            }
            return status;
        }]]></body>
          </codeblock>
        </method>
        <method name="IsDefaultLanguage">
          <declaration><![CDATA[protected bool IsDefaultLanguage(string code)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="204" sc="9" el="206" ec="10">LanguageEnabler.ascx.cs</location>
            <body hash="e2ebbdb5789af30e5928518887efd915"><![CDATA[{
            return code == PortalDefault;
        }]]></body>
          </codeblock>
        </method>
        <method name="IsLanguageEnabled">
          <declaration><![CDATA[protected bool IsLanguageEnabled(string Code)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="209" sc="9" el="212" ec="10">LanguageEnabler.ascx.cs</location>
            <body hash="4471231d7d04a2d26236f853076da32b"><![CDATA[{
            Locale enabledLanguage;
            return LocaleController.Instance.GetLocales(ModuleContext.PortalId).TryGetValue(Code, out enabledLanguage);
        }]]></body>
          </codeblock>
        </method>
        <method name="IsLanguagePublished">
          <declaration><![CDATA[protected bool IsLanguagePublished(string Code)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="215" sc="9" el="223" ec="10">LanguageEnabler.ascx.cs</location>
            <body hash="2d42e2c19f4e8f632d0d4f432857333e"><![CDATA[{
            bool isPublished = Null.NullBoolean;
            Locale enabledLanguage;
            if (LocaleController.Instance.GetLocales(ModuleContext.PortalId).TryGetValue(Code, out enabledLanguage))
            {
                isPublished = enabledLanguage.IsPublished;
            }
            return isPublished;
        }]]></body>
          </codeblock>
        </method>
        <method name="IsLocalized">
          <declaration><![CDATA[protected bool IsLocalized(string code)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="226" sc="9" el="228" ec="10">LanguageEnabler.ascx.cs</location>
            <body hash="3fd3399ddd783e87366e4551bd47183f"><![CDATA[{
            return (code != PortalDefault && GetLocalizedPages(code, false).Count > 0);
        }]]></body>
          </codeblock>
        </method>
        <method name="languagesComboBox_ModeChanged">
          <declaration><![CDATA[protected void languagesComboBox_ModeChanged(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="543" sc="9" el="545" ec="10">LanguageEnabler.ascx.cs</location>
            <body hash="5ca0c54f5858c01e98857e89a2e22add"><![CDATA[{
            BindGrid();
        }]]></body>
          </codeblock>
        </method>
        <method name="languagesGrid_ItemDataBound">
          <declaration><![CDATA[protected void languagesGrid_ItemDataBound(object sender, GridItemEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="548" sc="9" el="614" ec="10">LanguageEnabler.ascx.cs</location>
            <body hash="a4d70170f500a882088283d91e54cd95"><![CDATA[{
            var gridItem = e.Item as GridDataItem;
            if (gridItem != null)
            {
                var locale = gridItem.DataItem as Locale;
                if (locale != null)
                {
                    var localizeLinkAlt = gridItem.FindControl("localizeLinkAlt") as HyperLink;
                    if (localizeLinkAlt != null)
                    {
                        localizeLinkAlt.NavigateUrl = ModuleContext.NavigateUrl(ModuleContext.TabId,
                                                                            "LocalizePages",
                                                                            false,
                                                                            "mid=" + ModuleContext.ModuleId,
                                                                            "locale=" + locale.Code);
                    }
                    var localizeLink = gridItem.FindControl("localizeLink") as HyperLink;
                    if (localizeLink != null)
                    {
                        CultureDropDownTypes DisplayType;
                        string _ViewType = Convert.ToString(Personalization.GetProfile("LanguageDisplayMode", "ViewType" + PortalId));
                        switch (_ViewType)
                        {
                            case "NATIVE":
                                DisplayType = CultureDropDownTypes.NativeName;
                                break;
                            case "ENGLISH":
                                DisplayType = CultureDropDownTypes.EnglishName;
                                break;
                            default:
                                DisplayType = CultureDropDownTypes.DisplayName;
                                break;
                        }

                        localizeLink.NavigateUrl = ModuleContext.NavigateUrl(ModuleContext.TabId,
                                                                            "LocalizePages",
                                                                            false,
                                                                            "mid=" + ModuleContext.ModuleId,
                                                                            "locale=" + locale.Code);

                        var enabledCheckbox = gridItem.FindControl("enabledCheckbox") as CheckBox;
                        if (enabledCheckbox != null)
                        {
                            enabledCheckbox.Checked = IsLanguageEnabled(locale.Code);

                            if (enabledCheckbox.Checked)
                            {
                                string msg = String.Format(LocalizeString("Disable.Confirm"), Localization.GetLocaleName(locale.Code, DisplayType));
                                enabledCheckbox.Attributes.Add("onclick", "if (!confirm('" + Localization.GetSafeJSString(msg) + "')) return false;");
                            }
                        }

                        var publishedCheckbox = gridItem.FindControl("publishedCheckbox") as CheckBox;
                        if (publishedCheckbox != null)
                        {
                            publishedCheckbox.Checked = IsLanguagePublished(locale.Code);

                            if (publishedCheckbox.Checked)
                            {
                                string msg = String.Format(LocalizeString("Unpublish.Confirm"), Localization.GetLocaleName(locale.Code, DisplayType));
                                publishedCheckbox.Attributes.Add("onclick", "if (!confirm('" + Localization.GetSafeJSString(msg) + "')) return false;");
                            }
                        }
                    }
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="LanguagesGrid_NeedDataSource">
          <declaration><![CDATA[protected void LanguagesGrid_NeedDataSource(object sender, GridNeedDataSourceEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="793" sc="9" el="795" ec="10">LanguageEnabler.ascx.cs</location>
            <body hash="3bad4b025989b92fb8ab5c4482945928"><![CDATA[{
            languagesGrid.DataSource = LocaleController.Instance.GetLocales(Null.NullInteger).Values;
        }]]></body>
          </codeblock>
        </method>
        <method name="languagesGrid_PreRender">
          <declaration><![CDATA[protected void languagesGrid_PreRender(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="617" sc="9" el="626" ec="10">LanguageEnabler.ascx.cs</location>
            <body hash="e5f9ca0637b65bf0dccd44efcdcbbc44"><![CDATA[{
            foreach (GridColumn column in languagesGrid.Columns)
            {
                if ((column.UniqueName == "ContentLocalization"))
                {
                    column.Visible = PortalSettings.ContentLocalizationEnabled;
                }
            }
            languagesGrid.Rebind();
        }]]></body>
          </codeblock>
        </method>
        <method name="MakeNeutral_Click">
          <declaration><![CDATA[protected void MakeNeutral_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="820" sc="9" el="834" ec="10">LanguageEnabler.ascx.cs</location>
            <body hash="6575dea12511064fd792e132b3582eba"><![CDATA[{
            var tab = ddlPages.SelectedPage;
            if (TabController.Instance.GetTabsByPortal(PortalId).WithParentId(tab.TabID).Count == 0)
            {
                var defaultLocale = LocaleController.Instance.GetDefaultLocale(PortalId);

                TabController.Instance.ConvertTabToNeutralLanguage(PortalId, tab.TabID, defaultLocale.Code, true);

                BindCLControl();
            }
            else
            {
				DotNetNuke.UI.Skins.Skin.AddModuleMessage(this, Localization.GetString("ChildrenExistWhenConvertingToNeutral", LocalResourceFile), ModuleMessage.ModuleMessageType.YellowWarning);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="MakeTranslatable_Click">
          <declaration><![CDATA[protected void MakeTranslatable_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="810" sc="9" el="817" ec="10">LanguageEnabler.ascx.cs</location>
            <body hash="c3d0f74457d44f0b9a6ae561d8c0d1fc"><![CDATA[{
            var tab = ddlPages.SelectedPage;
            var defaultLocale = LocaleController.Instance.GetDefaultLocale(PortalId);
            TabController.Instance.LocalizeTab(tab, defaultLocale, false);
            TabController.Instance.AddMissingLanguages(PortalId, tab.TabID);
            TabController.Instance.ClearCache(PortalId);
            BindCLControl();
        }]]></body>
          </codeblock>
        </method>
        <method name="MarkAllPagesTranslated">
          <declaration><![CDATA[protected void MarkAllPagesTranslated(object sender, EventArgs eventArgs)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="666" sc="9" el="678" ec="10">LanguageEnabler.ascx.cs</location>
            <body hash="e0d42be2138785e47ff4417f5301cb53"><![CDATA[{
            var cmdTranslateAll = (LinkButton)sender;
            int languageId = int.Parse(cmdTranslateAll.CommandArgument);
            var locale = new LocaleController().GetLocale(languageId);

            var nonTranslated = (from t in TabController.Instance.GetTabsByPortal(PortalId).WithCulture(locale.Code, false).Values where !t.IsTranslated && !t.IsDeleted select t);
            foreach (TabInfo page in nonTranslated)
            {
                page.LocalizedVersionGuid = page.DefaultLanguageTab.LocalizedVersionGuid;
                TabController.Instance.UpdateTab(page);
            }
            BindGrid();
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="300" sc="9" el="312" ec="10">LanguageEnabler.ascx.cs</location>
            <body hash="574dfa6cd0a227c1549d0e4a922ad683"><![CDATA[{
            base.OnInit(e);

            languagesComboBox.ModeChanged += languagesComboBox_ModeChanged;
            languagesGrid.ItemDataBound += languagesGrid_ItemDataBound;
            languagesGrid.PreRender += languagesGrid_PreRender;
            updateButton.Click += updateButton_Click;
            cmdDisableLocalization.Click += cmdDisableLocalization_Click;
            cmdEnableLocalizedContent.NavigateUrl = ModuleContext.NavigateUrl(ModuleContext.TabId, "EnableContent", false, "mid=" + ModuleContext.ModuleId);

            AJAX.RegisterScriptManager();
            JavaScript.RequestRegistration(CommonJs.jQuery);
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="315" sc="9" el="406" ec="10">LanguageEnabler.ascx.cs</location>
            <body hash="5fd6e72f865fd42dc327c13256a17ddf"><![CDATA[{
            base.OnLoad(e);

            Locale enabledLanguage;
            LocaleController.Instance.GetLocales(ModuleContext.PortalId).TryGetValue("en-US", out enabledLanguage);

            DotNetNuke.Framework.JavaScriptLibraries.JavaScript.RequestRegistration(CommonJs.DnnPlugins);
            DotNetNuke.Framework.ServicesFramework.Instance.RequestAjaxScriptSupport();
            DotNetNuke.Framework.ServicesFramework.Instance.RequestAjaxAntiForgerySupport();

            try
            {
                _PortalDefault = PortalSettings.DefaultLanguage;
                if (!Page.IsPostBack)
                {
                    BindDefaultLanguageSelector();
                    BindGrid();
                    chkBrowser.Checked = ModuleContext.PortalSettings.EnableBrowserLanguage;
                    chkUserCulture.Checked = ModuleContext.PortalSettings.AllowUserUICulture;

                    urlRow.Visible = !PortalSettings.Current.ContentLocalizationEnabled;
                    chkUrl.Checked = ModuleContext.PortalSettings.EnableUrlLanguage;

                }

                if (!UserInfo.IsSuperUser && ModulePermissionController.CanAdminModule(ModuleConfiguration))
                {
					DotNetNuke.UI.Skins.Skin.AddModuleMessage(this, LocalizeString("HostOnlyMessage"), ModuleMessage.ModuleMessageType.BlueInfo);
                }

                systemDefaultLanguageLabel.Language = Localization.SystemLocale;

                addLanguageLink.Visible = UserInfo.IsSuperUser;
                addLanguageLink.NavigateUrl = ModuleContext.EditUrl("Edit");

                createLanguagePackLink.Visible = UserInfo.IsSuperUser;
                createLanguagePackLink.NavigateUrl = ModuleContext.EditUrl("PackageWriter");

                verifyLanguageResourcesLink.Visible = UserInfo.IsSuperUser;
                verifyLanguageResourcesLink.NavigateUrl = ModuleContext.EditUrl("Verify");

                installLanguagePackLink.Visible = UserInfo.IsSuperUser;
                installLanguagePackLink.NavigateUrl = Util.InstallURL(ModuleContext.TabId, "");

                installAvailableLanguagePackLink.Visible = UserInfo.IsSuperUser;
                var tab = TabController.Instance.GetTabByName("Extensions", Null.NullInteger);
                installAvailableLanguagePackLink.NavigateUrl = string.Format("{0}#availableExtensions", tab.FullUrl);

                if (!ModulePermissionController.CanAdminModule(ModuleConfiguration))
                {
                    tabLanguages.Visible = Convert.ToBoolean(ModuleContext.Settings["ShowLanguages"]);
                    tabSettings.Visible = Convert.ToBoolean(ModuleContext.Settings["ShowSettings"]);
                    PanelLanguages.Visible = tabLanguages.Visible;
                    panelSettings.Visible = tabSettings.Visible;

                    // only show CL tab if other tabs are visible. We are still going to show the CL Panel though
                    TabStrips.Visible = tabSettings.Visible || tabSettings.Visible;
                }

                if (PortalSettings.ContentLocalizationEnabled)
                {
                    defaultLanguageLabel.Language = PortalSettings.DefaultLanguage;
                    defaultLanguageLabel.Visible = true;
                    languagesComboBox.Visible = false;
                    cmdEnableLocalizedContent.Visible = false;
                    cmdDisableLocalization.Visible = true;
                    defaultPortalMessage.Text = LocalizeString("PortalDefaultPublished.Text");
                    enabledPublishedPlaceHolder.Visible = true;
                    if (!Page.IsPostBack)
                    {
                        SetSelectedPage();
                        ddlPages_SelectedIndexChanged(null, null);
                    }
                }
                else
                {
                    defaultLanguageLabel.Visible = false;
                    languagesComboBox.Visible = true;
                    cmdEnableLocalizedContent.Visible = Host.EnableContentLocalization;
                    cmdDisableLocalization.Visible = false;
                    defaultPortalMessage.Text = LocalizeString("PortalDefaultEnabled.Text");
                    enabledPublishedPlaceHolder.Visible = false;
                    tabContentLocalization.Visible = false;
                    panelContentLocalization.Visible = false;
                }

            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="publishedCheckbox_CheckChanged">
          <declaration><![CDATA[protected void publishedCheckbox_CheckChanged(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="629" sc="9" el="652" ec="10">LanguageEnabler.ascx.cs</location>
            <body hash="4c3b110ea4a29bbd14eb030a2252e073"><![CDATA[{
            try
            {
                if ((sender) is CheckBox)
                {
                    var publishedCheckbox = (CheckBox)sender;
                    GridDataItem item = (GridDataItem)publishedCheckbox.NamingContainer;
                    DnnLanguageLabel code = item.FindControl("translationStatusLabel") as DnnLanguageLabel;
                    Locale locale = LocaleController.Instance.GetLocale(code.Language);

                    if (publishedCheckbox.Enabled)
                    {
                        LocaleController.Instance.PublishLanguage(PortalId, locale.Code, publishedCheckbox.Checked);
                    }

                    //Redirect to refresh page (and skinobjects)
                    Response.Redirect(Globals.NavigateURL(), true);
                }
            }
            catch (Exception ex)
            {
                Exceptions.ProcessModuleLoadException(this, ex);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="PublishPages">
          <declaration><![CDATA[protected void PublishPages(object sender, EventArgs eventArgs)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="655" sc="9" el="663" ec="10">LanguageEnabler.ascx.cs</location>
            <body hash="9ccde48b041df0ac140808f5c23d6576"><![CDATA[{
            var cmdPublishPages = (LinkButton)sender;
            int languageId = int.Parse(cmdPublishPages.CommandArgument);
            var locale = new LocaleController().GetLocale(languageId);
            LocaleController.Instance.PublishLanguage(PortalId, locale.Code, true);
            
            //Redirect to refresh page (and skinObjects)
            Response.Redirect(Globals.NavigateURL(), true);
        }]]></body>
          </codeblock>
        </method>
        <method name="SetSelectedPage">
          <declaration><![CDATA[private void SetSelectedPage()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="409" sc="9" el="467" ec="10">LanguageEnabler.ascx.cs</location>
            <body hash="e85fba529d5515d7d2621ee2fbae2f97"><![CDATA[{
            string CultureCode = LocaleController.Instance.GetCurrentLocale(PortalId).Code;
            // try to set the selected item in the page dropdown.
            // if we have a cookie value for language x, we also try to select the right page
            // if the language switched to y
            if (Request.Cookies[PageSelectorCookieName] != null)
            {
                int selectedPage;
                TabInfo tabInfo = null;
                bool goodValue = int.TryParse(Request.Cookies[PageSelectorCookieName].Value, out selectedPage);
                if (goodValue)
                {
                    tabInfo = TabController.Instance.GetTab(selectedPage, PortalId, false);
                    if (tabInfo.IsDeleted)
                    {
                        tabInfo = null;
                        Response.Cookies.Remove(PageSelectorCookieName);
                    }
                }
                if (tabInfo == null)
                {
                    tabInfo = TabController.Instance.GetTab(PortalSettings.HomeTabId, PortalId, false);
                }
                goodValue = (tabInfo != null);
                if (goodValue)
                {
                    if (tabInfo.CultureCode == CultureCode)
                    {
                        ddlPages.SelectedPage = tabInfo;
                    }
                    else
                    {
                        if (tabInfo.DefaultLanguageTab != null)
                        {
                            if (tabInfo.DefaultLanguageTab.CultureCode == CultureCode)
                            {
                                ddlPages.SelectedPage = tabInfo;
                            }
                            else
                            {
                                foreach (var tabKV in tabInfo.DefaultLanguageTab.LocalizedTabs.Where(tabKV => tabKV.Value.CultureCode == CultureCode))
                                {
                                    ddlPages.SelectedPage = tabKV.Value;
                                    break;
                                }
                            }
                        }
                        else if (tabInfo.LocalizedTabs != null)
                        {
                            foreach (var tabKV in tabInfo.LocalizedTabs.Where(tabKV => tabKV.Value.CultureCode == CultureCode))
                            {
                                ddlPages.SelectedPage = tabKV.Value;
                                break;
                            }
                        }
                    }
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="updateButton_Click">
          <declaration><![CDATA[protected void updateButton_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="681" sc="9" el="717" ec="10">LanguageEnabler.ascx.cs</location>
            <body hash="f3156f480fdc07e9be6abde04f7f4f18"><![CDATA[{
            PortalController.UpdatePortalSetting(ModuleContext.PortalId, "EnableBrowserLanguage", chkBrowser.Checked.ToString());
            PortalController.UpdatePortalSetting(ModuleContext.PortalId, "AllowUserUICulture", chkUserCulture.Checked.ToString());

            // if contentlocalization is enabled, default language cannot be changed
            if (!PortalSettings.ContentLocalizationEnabled)
            {
                // first check whether or not portal default language has changed
                string newDefaultLanguage = languagesComboBox.SelectedValue;
                if (newDefaultLanguage != PortalSettings.DefaultLanguage)
                {
                    var needToRemoveOldDefaultLanguage = LocaleController.Instance.GetLocales(PortalId).Count == 1;
                    var OldDefaultLanguage = LocaleController.Instance.GetLocale(PortalDefault);
                    if (!IsLanguageEnabled(newDefaultLanguage))
                    {
                        var language = LocaleController.Instance.GetLocale(newDefaultLanguage);
                        Localization.AddLanguageToPortal(ModuleContext.PortalId, language.LanguageId, true);
                    }

                    // update portal default language
                    var portal = PortalController.Instance.GetPortal(PortalId);
                    portal.DefaultLanguage = newDefaultLanguage;
                    PortalController.Instance.UpdatePortalInfo(portal);

                    _PortalDefault = newDefaultLanguage;

                    if (needToRemoveOldDefaultLanguage)
                    {
                        Localization.RemoveLanguageFromPortal(PortalId, OldDefaultLanguage.LanguageId);
                    }
                }

                PortalController.UpdatePortalSetting(ModuleContext.PortalId, "EnableUrlLanguage", chkUrl.Checked.ToString());
            }
            BindDefaultLanguageSelector();
            BindGrid();
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_PortalDefault">
          <declaration><![CDATA[private string _PortalDefault = "";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="addLanguageLink">
          <declaration><![CDATA[protected HyperLink addLanguageLink;]]></declaration>
          <documentation>
            <summary>
 addLanguageLink control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="AddMissing">
          <declaration><![CDATA[protected LinkButton AddMissing;]]></declaration>
          <documentation>
            <summary>
 AddMissing control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="allowUserCulture">
          <declaration><![CDATA[protected LabelControl allowUserCulture;]]></declaration>
          <documentation>
            <summary>
 allowUserCulture control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="chkBrowser">
          <declaration><![CDATA[protected CheckBox chkBrowser;]]></declaration>
          <documentation>
            <summary>
 chkBrowser control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="chkUrl">
          <declaration><![CDATA[protected CheckBox chkUrl;]]></declaration>
          <documentation>
            <summary>
 chkUrl control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="chkUserCulture">
          <declaration><![CDATA[protected CheckBox chkUserCulture;]]></declaration>
          <documentation>
            <summary>
 chkUserCulture control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="CLControl1">
          <declaration><![CDATA[protected CLControl CLControl1;]]></declaration>
          <documentation>
            <summary>
 CLControl1 control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="cmdDisableLocalization">
          <declaration><![CDATA[protected LinkButton cmdDisableLocalization;]]></declaration>
          <documentation>
            <summary>
 cmdDisableLocalization control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="cmdEnableLocalizedContent">
          <declaration><![CDATA[protected HyperLink cmdEnableLocalizedContent;]]></declaration>
          <documentation>
            <summary>
 cmdEnableLocalizedContent control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="cmdUpdate">
          <declaration><![CDATA[protected LinkButton cmdUpdate;]]></declaration>
          <documentation>
            <summary>
 cmdUpdate control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="createLanguagePackLink">
          <declaration><![CDATA[protected HyperLink createLanguagePackLink;]]></declaration>
          <documentation>
            <summary>
 createLanguagePackLink control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="ddlPages">
          <declaration><![CDATA[protected DnnPageDropDownList ddlPages;]]></declaration>
          <documentation>
            <summary>
 ddlPages control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="defaultLanguageLabel">
          <declaration><![CDATA[protected DnnLanguageLabel defaultLanguageLabel;]]></declaration>
          <documentation>
            <summary>
 defaultLanguageLabel control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="defaultPortalLabel">
          <declaration><![CDATA[protected Label defaultPortalLabel;]]></declaration>
          <documentation>
            <summary>
 defaultPortalLabel control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="defaultPortalMessage">
          <declaration><![CDATA[protected Label defaultPortalMessage;]]></declaration>
          <documentation>
            <summary>
 defaultPortalMessage control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="detectBrowserLable">
          <declaration><![CDATA[protected LabelControl detectBrowserLable;]]></declaration>
          <documentation>
            <summary>
 detectBrowserLable control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="enabledPublishedLabel">
          <declaration><![CDATA[protected Label enabledPublishedLabel;]]></declaration>
          <documentation>
            <summary>
 enabledPublishedLabel control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="enabledPublishedMessage">
          <declaration><![CDATA[protected Label enabledPublishedMessage;]]></declaration>
          <documentation>
            <summary>
 enabledPublishedMessage control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="enabledPublishedPlaceHolder">
          <declaration><![CDATA[protected PlaceHolder enabledPublishedPlaceHolder;]]></declaration>
          <documentation>
            <summary>
 enabledPublishedPlaceHolder control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="installAvailableLanguagePackLink">
          <declaration><![CDATA[protected HyperLink installAvailableLanguagePackLink;]]></declaration>
          <documentation>
            <summary>
 installAvailableLanguagePackLink control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="installLanguagePackLink">
          <declaration><![CDATA[protected HyperLink installLanguagePackLink;]]></declaration>
          <documentation>
            <summary>
 installLanguagePackLink control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="languagesComboBox">
          <declaration><![CDATA[protected DnnLanguageComboBox languagesComboBox;]]></declaration>
          <documentation>
            <summary>
 languagesComboBox control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="languagesGrid">
          <declaration><![CDATA[protected DnnGrid languagesGrid;]]></declaration>
          <documentation>
            <summary>
 languagesGrid control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="litNeutralMessage">
          <declaration><![CDATA[protected Label litNeutralMessage;]]></declaration>
          <documentation>
            <summary>
 litNeutralMessage control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="MakeNeutral">
          <declaration><![CDATA[protected LinkButton MakeNeutral;]]></declaration>
          <documentation>
            <summary>
 MakeNeutral control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="MakeTranslatable">
          <declaration><![CDATA[protected LinkButton MakeTranslatable;]]></declaration>
          <documentation>
            <summary>
 MakeTranslatable control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="NeutralMessage">
          <declaration><![CDATA[protected HtmlGenericControl NeutralMessage;]]></declaration>
          <documentation>
            <summary>
 NeutralMessage control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="panelContentLocalization">
          <declaration><![CDATA[protected HtmlGenericControl panelContentLocalization;]]></declaration>
          <documentation>
            <summary>
 panelContentLocalization control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="PanelLanguages">
          <declaration><![CDATA[protected HtmlGenericControl PanelLanguages;]]></declaration>
          <documentation>
            <summary>
 PanelLanguages control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="panelSettings">
          <declaration><![CDATA[protected HtmlGenericControl panelSettings;]]></declaration>
          <documentation>
            <summary>
 panelSettings control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="plPage">
          <declaration><![CDATA[protected LabelControl plPage;]]></declaration>
          <documentation>
            <summary>
 plPage control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="plUrl">
          <declaration><![CDATA[protected LabelControl plUrl;]]></declaration>
          <documentation>
            <summary>
 plUrl control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="siteDefaultLabel">
          <declaration><![CDATA[protected LabelControl siteDefaultLabel;]]></declaration>
          <documentation>
            <summary>
 siteDefaultLabel control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="systemDefaultLabel">
          <declaration><![CDATA[protected LabelControl systemDefaultLabel;]]></declaration>
          <documentation>
            <summary>
 systemDefaultLabel control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="systemDefaultLanguageLabel">
          <declaration><![CDATA[protected DnnLanguageLabel systemDefaultLanguageLabel;]]></declaration>
          <documentation>
            <summary>
 systemDefaultLanguageLabel control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="tabContentLocalization">
          <declaration><![CDATA[protected HtmlGenericControl tabContentLocalization;]]></declaration>
          <documentation>
            <summary>
 tabContentLocalization control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="tabLanguages">
          <declaration><![CDATA[protected HtmlGenericControl tabLanguages;]]></declaration>
          <documentation>
            <summary>
 tabLanguages control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="tabSettings">
          <declaration><![CDATA[protected HtmlGenericControl tabSettings;]]></declaration>
          <documentation>
            <summary>
 tabSettings control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="TabStrips">
          <declaration><![CDATA[protected HtmlGenericControl TabStrips;]]></declaration>
          <documentation>
            <summary>
 TabStrips control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="updateButton">
          <declaration><![CDATA[protected LinkButton updateButton;]]></declaration>
          <documentation>
            <summary>
 updateButton control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="urlRow">
          <declaration><![CDATA[protected HtmlGenericControl urlRow;]]></declaration>
          <documentation>
            <summary>
 urlRow control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="verifyLanguageResourcesLink">
          <declaration><![CDATA[protected HyperLink verifyLanguageResourcesLink;]]></declaration>
          <documentation>
            <summary>
 verifyLanguageResourcesLink control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
      </fields>
      <properties>
        <property name="PageSelectorCookieName">
          <declaration><![CDATA[private string PageSelectorCookieName]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="70" sc="13" el="72" ec="14">LanguageEnabler.ascx.cs</location>
            <body hash="c74b1636e0aae48abcb7384d5e9e0d28"><![CDATA[{
                return string.Format("Languages_Page_{0}_{1}", PortalId, CultureInfo.CurrentUICulture.Name);
            }]]></body>
          </codeblock>
        </property>
        <property name="PortalDefault">
          <declaration><![CDATA[protected string PortalDefault]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="82" sc="13" el="84" ec="14">LanguageEnabler.ascx.cs</location>
            <body hash="5ee6653431547d6f2fb5a94283702c47"><![CDATA[{
                return _PortalDefault;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="LanguagePackWriter">
      <declaration><![CDATA[public class LanguagePackWriter : PortalModuleBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private bool _IsPackCreated = true;]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="49" sc="9" el="50" ec="52">LanguagePackWriter.ascx.cs</location>
            <body hash="5a8a319a70ee8def4794422de22aacdf"><![CDATA[private bool _IsPackCreated = true;
        private string _Manifest = Null.NullString;]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="cmdCancel_Click">
          <declaration><![CDATA[private void cmdCancel_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="421" sc="9" el="430" ec="10">LanguagePackWriter.ascx.cs</location>
            <body hash="aefa0f4ce605ac93b7e2dd625769391d"><![CDATA[{
            try
            {
                Response.Redirect(Globals.NavigateURL());
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="cmdCreate_Click">
          <declaration><![CDATA[private void cmdCreate_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="356" sc="9" el="418" ec="10">LanguagePackWriter.ascx.cs</location>
            <body hash="558407fad1511ee11b15f226dc2302eb"><![CDATA[{
            _IsPackCreated = true;
            try
            {
                switch (rbPackType.SelectedValue)
                {
                    case "Core":
                        CreateCorePackage(true);
                        break;
                    case "Module":
                        foreach (ListItem moduleItem in lstItems.Items)
                        {
                            if (moduleItem.Selected)
                            {
								//Get the Module
                                DesktopModuleInfo desktopModule = DesktopModuleController.GetDesktopModule(int.Parse(moduleItem.Value), Null.NullInteger);
                                CreateModulePackage(desktopModule, true);
                            }
                        }

                        break;
                    case "Provider":
                        foreach (ListItem providerItem in lstItems.Items)
                        {
                            if (providerItem.Selected)
                            {
								//Get the Provider
                                PackageInfo provider = PackageController.Instance.GetExtensionPackage(Null.NullInteger, p => p.PackageID == int.Parse(providerItem.Value));
                                CreateProviderPackage(provider, true);
                            }
                        }

                        break;
                    case "AuthSystem":
                        foreach (ListItem authItem in lstItems.Items)
                        {
                            if (authItem.Selected)
                            {
								//Get the AuthSystem
                                PackageInfo authSystem = PackageController.Instance.GetExtensionPackage(Null.NullInteger, p => p.PackageID ==int.Parse(authItem.Value));
                                CreateAuthSystemPackage(authSystem, true);
                            }
                        }

                        break;
                    case "Full":
                        CreateFullPackage();
                        break;
                }
                if (_IsPackCreated)
                {
					DotNetNuke.UI.Skins.Skin.AddModuleMessage(this, String.Format(Localization.GetString("Success", LocalResourceFile), PortalSettings.PortalAlias.HTTPAlias), ModuleMessage.ModuleMessageType.GreenSuccess);
                }
                else
                {
					DotNetNuke.UI.Skins.Skin.AddModuleMessage(this, Localization.GetString("Failure", LocalResourceFile), ModuleMessage.ModuleMessageType.YellowWarning);
                }
            }
            catch (Exception ex)
            {
                Exceptions.ProcessModuleLoadException(this, ex);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="CreateAuthSystemPackage">
          <declaration><![CDATA[private void CreateAuthSystemPackage(PackageInfo authPackage, bool createZip)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="62" sc="9" el="74" ec="10">LanguagePackWriter.ascx.cs</location>
            <body hash="2a477ad9ac518bb8a43d49f6bdb1bb60"><![CDATA[{
            var Package = new PackageInfo();
            Package.Name = authPackage.Name;
            Package.FriendlyName = authPackage.FriendlyName;
            Package.Version = authPackage.Version;
            Package.License = Util.PACKAGE_NoLicense;

            string fileName = Path.Combine(BasePath, "ResourcePack." + Package.Name);

            AuthenticationInfo authSystem = AuthenticationController.GetAuthenticationServiceByPackageID(authPackage.PackageID);
            string authPath = authSystem.LoginControlSrc.Substring(0, authSystem.LoginControlSrc.LastIndexOf("/"));
            CreatePackage(Package, authPackage.PackageID, authPath.Replace("/", "\\"), fileName, createZip);
        }]]></body>
          </codeblock>
        </method>
        <method name="CreateCorePackage">
          <declaration><![CDATA[private void CreateCorePackage(bool createZip)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="77" sc="9" el="87" ec="10">LanguagePackWriter.ascx.cs</location>
            <body hash="47da06f2dc99013db601b9868b9d6863"><![CDATA[{
            var Package = new PackageInfo();
            Package.Name = Globals.CleanFileName(txtFileName.Text);
            Package.FriendlyName = Package.Name;
            Package.Version = DotNetNukeContext.Current.Application.Version;
            Package.License = Util.PACKAGE_NoLicense;

            string fileName = Path.Combine(BasePath, "ResourcePack." + Package.Name);

            CreatePackage(Package, -2, "", fileName, createZip);
        }]]></body>
          </codeblock>
        </method>
        <method name="CreateFullPackage">
          <declaration><![CDATA[private void CreateFullPackage()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="90" sc="9" el="135" ec="10">LanguagePackWriter.ascx.cs</location>
            <body hash="7870105fc6efcf378c1d04a68f506772"><![CDATA[{
            Locale language = LocaleController.Instance.GetLocale(cboLanguage.SelectedValue);
            var Package = new PackageInfo();
            Package.Name = Globals.CleanFileName(txtFileName.Text);
            Package.Version = DotNetNukeContext.Current.Application.Version;
            Package.License = Util.PACKAGE_NoLicense;
            Package.PackageType = "CoreLanguagePack";

            _Files = new Dictionary<string, InstallFile>();
            CreateCorePackage(false);
            foreach (DesktopModuleInfo desktopModule in DesktopModuleController.GetDesktopModules(Null.NullInteger).Values)
            {
                if (!desktopModule.FolderName.StartsWith("Admin/"))
                {
                    CreateModulePackage(desktopModule, false);
                }
            }
            foreach (PackageInfo provider in PackageController.Instance.GetExtensionPackages(Null.NullInteger, p => p.PackageType =="Provider"))
            {
                CreateProviderPackage(provider, false);
            }
            foreach (PackageInfo authSystem in PackageController.Instance.GetExtensionPackages(Null.NullInteger, p => p.PackageType =="Auth_System"))
            {
                CreateAuthSystemPackage(authSystem, false);
            }
            foreach (PackageInfo library in PackageController.Instance.GetExtensionPackages(Null.NullInteger, p => p.PackageType == "Library" || p.PackageType == "EvoqConnector"))
            {
                //only generate if a folder name is known for the library
                if (library.FolderName != null)
                {
                    CreateLibraryPackage(library, false);
                }
            }
        
            string fileName = Path.Combine(BasePath, "ResourcePack." + Package.Name);
            fileName = fileName + "." + Package.Version.ToString(3) + "." + language.Code + ".zip";

			packageWriter = PackageWriterFactory.GetWriter(Package) as DotNetNuke.Services.Installer.Writers.LanguagePackWriter;
            packageWriter.Language = language;
            packageWriter.BasePath = "";
            foreach (KeyValuePair<string, InstallFile> kvp in _Files)
            {
                packageWriter.Files.Add(kvp.Key, kvp.Value);
            }
            packageWriter.CreatePackage(fileName, Package.Name + " " + language.Text + ".dnn", _Manifest, true);
        }]]></body>
          </codeblock>
        </method>
        <method name="CreateLibraryPackage">
          <declaration><![CDATA[private void CreateLibraryPackage(PackageInfo library, bool createZip)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="138" sc="9" el="149" ec="10">LanguagePackWriter.ascx.cs</location>
            <body hash="ca58e3d875aa5212aad008361d74dfd9"><![CDATA[{
            var Package = new PackageInfo();
            Package.Name = library.Name;
            Package.FriendlyName = library.FriendlyName;
            Package.Version = library.Version;
            Package.License = Util.PACKAGE_NoLicense;

            string fileName = Path.Combine(BasePath, "ResourcePack" + Package.Name);

           
            CreatePackage(Package, library.PackageID, library.FolderName, fileName, createZip);
        }]]></body>
          </codeblock>
        </method>
        <method name="CreateModulePackage">
          <declaration><![CDATA[private void CreateModulePackage(DesktopModuleInfo desktopModule, bool createZip)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="152" sc="9" el="164" ec="10">LanguagePackWriter.ascx.cs</location>
            <body hash="692585b23ad839e56ed9e4c38af9e4bf"><![CDATA[{
            PackageInfo modulePackage = PackageController.Instance.GetExtensionPackage(Null.NullInteger, p => p.PackageID == desktopModule.PackageID);

            var Package = new PackageInfo();
            Package.Name = modulePackage.Name;
            Package.FriendlyName = modulePackage.FriendlyName;
            Package.Version = modulePackage.Version;
            Package.License = Util.PACKAGE_NoLicense;

            string fileName = Path.Combine(BasePath, "ResourcePack." + Package.Name);

            CreatePackage(Package, modulePackage.PackageID, Path.Combine("DesktopModules\\", desktopModule.FolderName), fileName, createZip);
        }]]></body>
          </codeblock>
        </method>
        <method name="CreatePackage">
          <declaration><![CDATA[private void CreatePackage(PackageInfo package, int dependentPackageID, string basePath, string fileName, bool createZip)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="167" sc="9" el="215" ec="10">LanguagePackWriter.ascx.cs</location>
            <body hash="df8f8acbadf83dc4715c4dcf76d6715d"><![CDATA[{
            string manifest;

            Locale language = LocaleController.Instance.GetLocale(cboLanguage.SelectedValue);
            var languagePack = new LanguagePackInfo();
            languagePack.LanguageID = language.LanguageId;
            languagePack.DependentPackageID = dependentPackageID;

            if (dependentPackageID == -2)
            {
                package.PackageType = "CoreLanguagePack";
            }
            else
            {
                package.PackageType = "ExtensionLanguagePack";
            }
            package.Name += " " + language.Text;
            package.FriendlyName += " " + language.Text;

			packageWriter = PackageWriterFactory.GetWriter(package) as DotNetNuke.Services.Installer.Writers.LanguagePackWriter;
            packageWriter.Language = language;
            packageWriter.LanguagePack = languagePack;
            packageWriter.BasePath = basePath;
            packageWriter.GetFiles(false);

            if (packageWriter.Files.Count > 0)
            {
                _IsPackCreated = true;
                if (createZip)
                {
                    manifest = packageWriter.WriteManifest(true);
                    fileName = fileName + "." + package.Version.ToString(3) + "." + language.Code + ".zip";
                    packageWriter.CreatePackage(fileName, package.Name + ".dnn", manifest, true);
                }
                else if (!_Manifest.Contains(string.Format(@"package name=""{0}""", package.Name)))
                {
                    packageWriter.BasePath = "";
                    _Manifest += packageWriter.WriteManifest(true);
                    foreach (KeyValuePair<string, InstallFile> kvp in packageWriter.Files)
                    {
                        _Files[kvp.Key] = kvp.Value;
                    }
                }
            }
            else
            {
                _IsPackCreated = false;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="CreateProviderPackage">
          <declaration><![CDATA[private void CreateProviderPackage(PackageInfo providerPackage, bool createZip)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="218" sc="9" el="257" ec="10">LanguagePackWriter.ascx.cs</location>
            <body hash="f710dc1d3bc3c4c561330d7255539f8a"><![CDATA[{
            var Package = new PackageInfo();
            Package.Name = providerPackage.Name;
            Package.FriendlyName = providerPackage.FriendlyName;
            Package.Version = providerPackage.Version;
            Package.License = Util.PACKAGE_NoLicense;

            string fileName = Path.Combine(BasePath, "ResourcePack." + Package.Name);

            //Get the provider "path"
            XmlDocument configDoc = Config.Load();
            string providerName = Package.Name;
            if (providerName.IndexOf(".") > Null.NullInteger)
            {
                providerName = providerName.Substring(providerName.IndexOf(".") + 1);
            }
            switch (providerName)
            {
                case "SchedulingProvider":
                    providerName = "DNNScheduler";
                    break;
                case "SearchIndexProvider":
                    providerName = "ModuleIndexProvider";
                    break;
                case "SearchProvider":
                    providerName = "SearchDataStoreProvider";
                    break;
            }
            XPathNavigator providerNavigator = configDoc.CreateNavigator().SelectSingleNode("/configuration/dotnetnuke/*/providers/add[@name='" + providerName + "']");
            if(providerNavigator == null)
            {
                providerNavigator = configDoc.CreateNavigator().SelectSingleNode("/configuration/dotnetnuke/*/providers/add[@name='" + Package.Name + "']");
            }

            if (providerNavigator != null)
            {
                string providerPath = providerNavigator.GetAttribute("providerPath", "");
                CreatePackage(Package, providerPackage.PackageID, providerPath.Substring(2, providerPath.Length - 2).Replace("/", "\\"), fileName, createZip);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="260" sc="9" el="275" ec="10">LanguagePackWriter.ascx.cs</location>
            <body hash="11121b79baf2b1efc3a82c729ae4e560"><![CDATA[{
            base.OnLoad(e);

            rbPackType.SelectedIndexChanged += rbPackType_SelectedIndexChanged;
            cmdCancel.Click += cmdCancel_Click;
            cmdCreate.Click += cmdCreate_Click;

            if (!Page.IsPostBack)
            {
                foreach (Locale language in LocaleController.Instance.GetLocales(Null.NullInteger).Values)
                {
                    cboLanguage.AddItem(language.Text, language.Code);
                }
                rowitems.Visible = false;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="rbPackType_SelectedIndexChanged">
          <declaration><![CDATA[private void rbPackType_SelectedIndexChanged(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="278" sc="9" el="353" ec="10">LanguagePackWriter.ascx.cs</location>
            <body hash="2fd3bf3e2ecd0bc4de240ef3ab5fc534"><![CDATA[{
            pnlLogs.Visible = false;
            switch (rbPackType.SelectedValue)
            {
                case "Core":
                    rowitems.Visible = false;
                    txtFileName.Text = "Core";
                    lblFilenameFix.Text = Server.HtmlEncode(".<version>.<locale>.zip");
                    rowFileName.Visible = true;
                    break;
                case "Module":
                    rowitems.Visible = true;
                    lstItems.Items.Clear();
                    lstItems.ClearSelection();
                    foreach (DesktopModuleInfo objDM in DesktopModuleController.GetDesktopModules(Null.NullInteger).Values)
                    {
                        if (!objDM.FolderName.StartsWith("Admin/"))
                        {
                            if (Null.IsNull(objDM.Version))
                            {
                                lstItems.Items.Add(new ListItem(objDM.FriendlyName, objDM.DesktopModuleID.ToString()));
                            }
                            else
                            {
                                lstItems.Items.Add(new ListItem(objDM.FriendlyName + " [" + objDM.Version + "]", objDM.DesktopModuleID.ToString()));
                            }
                        }
                    }

                    lblItems.Text = Localization.GetString("SelectModules", LocalResourceFile);
                    rowFileName.Visible = false;
                    break;
                case "Provider":
                    rowitems.Visible = true;
                    lstItems.Items.Clear();
                    lstItems.ClearSelection();
                    foreach (PackageInfo objPackage in PackageController.Instance.GetExtensionPackages(Null.NullInteger, p => p.PackageType == "Provider"))
                    {
                        if (Null.IsNull(objPackage.Version))
                        {
                            lstItems.Items.Add(new ListItem(objPackage.FriendlyName, objPackage.PackageID.ToString()));
                        }
                        else
                        {
                            lstItems.Items.Add(new ListItem(objPackage.FriendlyName + " [" + Globals.FormatVersion(objPackage.Version) + "]", objPackage.PackageID.ToString()));
                        }
                    }

                    rowFileName.Visible = false;
                    break;
                case "AuthSystem":
                    rowitems.Visible = true;
                    lstItems.Items.Clear();
                    lstItems.ClearSelection();
                    foreach (PackageInfo objPackage in PackageController.Instance.GetExtensionPackages(Null.NullInteger, p => p.PackageType =="Auth_System"))
                    {
                        if (Null.IsNull(objPackage.Version))
                        {
                            lstItems.Items.Add(new ListItem(objPackage.FriendlyName, objPackage.PackageID.ToString()));
                        }
                        else
                        {
                            lstItems.Items.Add(new ListItem(objPackage.FriendlyName + " [" + Globals.FormatVersion(objPackage.Version) + "]", objPackage.PackageID.ToString()));
                        }
                    }

                    rowFileName.Visible = false;
                    break;
                case "Full":
                    rowitems.Visible = false;
                    txtFileName.Text = "Full";
                    lblFilenameFix.Text = Server.HtmlEncode(".<version>.<locale>.zip");
                    rowFileName.Visible = true;
                    break;
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_Files">
          <declaration><![CDATA[private Dictionary<string, InstallFile> _Files;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_IsPackCreated">
          <declaration><![CDATA[private bool _IsPackCreated = true;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_Manifest">
          <declaration><![CDATA[private string _Manifest = Null.NullString;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cboLanguage">
          <declaration><![CDATA[protected DnnComboBox cboLanguage;]]></declaration>
          <documentation>
            <summary>
 cboLanguage control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="cmdCancel">
          <declaration><![CDATA[protected LinkButton cmdCancel;]]></declaration>
          <documentation>
            <summary>
 cmdCancel control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="cmdCreate">
          <declaration><![CDATA[protected LinkButton cmdCreate;]]></declaration>
          <documentation>
            <summary>
 cmdCreate control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="divLog">
          <declaration><![CDATA[protected HtmlGenericControl divLog;]]></declaration>
          <documentation>
            <summary>
 divLog control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="dshBasic">
          <declaration><![CDATA[protected UserControl dshBasic;]]></declaration>
          <documentation>
            <summary>
 dshBasic control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="hypLink">
          <declaration><![CDATA[protected HyperLink hypLink;]]></declaration>
          <documentation>
            <summary>
 hypLink control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="Label2">
          <declaration><![CDATA[protected Label Label2;]]></declaration>
          <documentation>
            <summary>
 Label2 control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="lblFilenameFix">
          <declaration><![CDATA[protected Label lblFilenameFix;]]></declaration>
          <documentation>
            <summary>
 lblFilenameFix control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="lblItems">
          <declaration><![CDATA[protected Label lblItems;]]></declaration>
          <documentation>
            <summary>
 lblItems control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="lblMessage">
          <declaration><![CDATA[protected Label lblMessage;]]></declaration>
          <documentation>
            <summary>
 lblMessage control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="lblName">
          <declaration><![CDATA[protected UserControl lblName;]]></declaration>
          <documentation>
            <summary>
 lblName control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="lbLocale">
          <declaration><![CDATA[protected UserControl lbLocale;]]></declaration>
          <documentation>
            <summary>
 lbLocale control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="lblType">
          <declaration><![CDATA[protected UserControl lblType;]]></declaration>
          <documentation>
            <summary>
 lblType control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="lstItems">
          <declaration><![CDATA[protected CheckBoxList lstItems;]]></declaration>
          <documentation>
            <summary>
 lstItems control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="packageWriter">
          <declaration><![CDATA[private LanguagePackWriter packageWriter;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="pnlLogs">
          <declaration><![CDATA[protected Panel pnlLogs;]]></declaration>
          <documentation>
            <summary>
 pnlLogs control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="rbPackType">
          <declaration><![CDATA[protected RadioButtonList rbPackType;]]></declaration>
          <documentation>
            <summary>
 rbPackType control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="rowFileName">
          <declaration><![CDATA[protected HtmlGenericControl rowFileName;]]></declaration>
          <documentation>
            <summary>
 rowFileName control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="rowitems">
          <declaration><![CDATA[protected HtmlGenericControl rowitems;]]></declaration>
          <documentation>
            <summary>
 rowitems control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="txtFileName">
          <declaration><![CDATA[protected TextBox txtFileName;]]></declaration>
          <documentation>
            <summary>
 txtFileName control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
      </fields>
      <properties>
        <property name="BasePath">
          <declaration><![CDATA[protected string BasePath]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="56" sc="13" el="58" ec="14">LanguagePackWriter.ascx.cs</location>
            <body hash="3f8669bd8f3a509771970b5de708a825"><![CDATA[{
                return Server.MapPath("~/Install/Language");
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="LanguageSettings">
      <declaration><![CDATA[public class LanguageSettings : ModuleSettingsBase]]></declaration>
      <documentation>-----------------------------------------------------------------------------
 Project	 : DotNetNuke
 Class	 : LanguageSettings
 -----------------------------------------------------------------------------
 <summary>
   Supplies LanguageSettings functionality for the Extensions module
 </summary>
 <remarks>
 </remarks>
 -----------------------------------------------------------------------------</documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public LanguageSettings()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="LoadSettings">
          <declaration><![CDATA[public override void LoadSettings()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="56" sc="9" el="79" ec="10">LanguageSettings.ascx.cs</location>
            <body hash="afc01f07daf5b4e4040c87f1579b59af"><![CDATA[{
            base.LoadSettings();

            valPageSize.MinimumValue = "1";
            valPageSize.MaximumValue = Int32.MaxValue.ToString();

            chkUsePaging.Checked = Convert.ToBoolean(ModuleContext.Settings["UsePaging"]);

            int _PageSize = 1000;
            //default page size
            if (Convert.ToInt32(ModuleContext.Settings["PageSize"]) == 0)
            {
                txtPageSize.Text = _PageSize.ToString();
            }
            else
            {
                txtPageSize.Text = Convert.ToString(ModuleContext.Settings["PageSize"]);
            }

            chkShowLanguages.Checked = Convert.ToBoolean(ModuleContext.Settings["ShowLanguages"]);
            chkShowSettings.Checked = Convert.ToBoolean(ModuleContext.Settings["ShowSettings"]);


        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateSettings">
          <declaration><![CDATA[public override void UpdateSettings()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="46" sc="9" el="53" ec="10">LanguageSettings.ascx.cs</location>
            <body hash="45f0148486162a6e56236855d5b18eb3"><![CDATA[{
            base.UpdateSettings();

            ModuleController.Instance.UpdateModuleSetting(ModuleContext.ModuleId, "UsePaging", chkUsePaging.Checked.ToString());
            ModuleController.Instance.UpdateModuleSetting(ModuleContext.ModuleId, "PageSize", txtPageSize.Text);
            ModuleController.Instance.UpdateModuleSetting(ModuleContext.ModuleId, "ShowLanguages", chkShowLanguages.Checked.ToString());
            ModuleController.Instance.UpdateModuleSetting(ModuleContext.ModuleId, "ShowSettings", chkShowSettings.Checked.ToString());
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="chkShowLanguages">
          <declaration><![CDATA[protected CheckBox chkShowLanguages;]]></declaration>
          <documentation>
            <summary>
 chkShowLanguages control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="chkShowSettings">
          <declaration><![CDATA[protected CheckBox chkShowSettings;]]></declaration>
          <documentation>
            <summary>
 chkShowSettings control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="chkUsePaging">
          <declaration><![CDATA[protected CheckBox chkUsePaging;]]></declaration>
          <documentation>
            <summary>
 chkUsePaging control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="plPageSize">
          <declaration><![CDATA[protected UserControl plPageSize;]]></declaration>
          <documentation>
            <summary>
 plPageSize control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="plShowLanguages">
          <declaration><![CDATA[protected UserControl plShowLanguages;]]></declaration>
          <documentation>
            <summary>
 plShowLanguages control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="plShowSettings">
          <declaration><![CDATA[protected UserControl plShowSettings;]]></declaration>
          <documentation>
            <summary>
 plShowSettings control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="plUsePaging">
          <declaration><![CDATA[protected UserControl plUsePaging;]]></declaration>
          <documentation>
            <summary>
 plUsePaging control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="txtPageSize">
          <declaration><![CDATA[protected TextBox txtPageSize;]]></declaration>
          <documentation>
            <summary>
 txtPageSize control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="valPageSize">
          <declaration><![CDATA[protected RangeValidator valPageSize;]]></declaration>
          <documentation>
            <summary>
 valPageSize control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="valPageSize2">
          <declaration><![CDATA[protected RequiredFieldValidator valPageSize2;]]></declaration>
          <documentation>
            <summary>
 valPageSize2 control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="LocalizePages">
      <declaration><![CDATA[public class LocalizePages : PortalModuleBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private string _PortalDefault = "";]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="66" sc="9" el="67" ec="36">LocalizePages.ascx.cs</location>
            <body hash="c158f8321aae921f51633f7b391a4ee6"><![CDATA[private string _PortalDefault = "";
        private int timeout = 3600;]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="cancelButton_Click">
          <declaration><![CDATA[protected void cancelButton_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="236" sc="9" el="239" ec="10">LocalizePages.ascx.cs</location>
            <body hash="12091b898df24e32047dde687180d34a"><![CDATA[{
            //Redirect to refresh page (and skinobjects)
            Response.Redirect(Globals.NavigateURL(), true);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetTabsToLocalize">
          <declaration><![CDATA[public List<TabInfo> GetTabsToLocalize(int portalId, string code)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="213" sc="9" el="233" ec="10">LocalizePages.ascx.cs</location>
            <body hash="9574c1eb497fd8c47454869d717cdb78"><![CDATA[{
            var results = new List<TabInfo>();
            var portalTabs = TabController.Instance.GetTabsByPortal(portalId);
            foreach (var kvp in portalTabs.Where(kvp => kvp.Value.CultureCode == PortalSettings.DefaultLanguage && !kvp.Value.IsDeleted))
            {
                if (kvp.Value.LocalizedTabs.Count == 0)
                {
                    results.Add(kvp.Value);
                }
                else
                {
                    bool tabLocalizedInCulture = kvp.Value.LocalizedTabs.Any(localizedTab => localizedTab.Value.CultureCode == code);
                    if (!tabLocalizedInCulture)
                    {
                        results.Add(kvp.Value);
                    }
                }
            }
            return results;

        }]]></body>
          </codeblock>
        </method>
        <method name="IsDefaultLanguage">
          <declaration><![CDATA[protected bool IsDefaultLanguage(string code)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="92" sc="9" el="94" ec="10">LocalizePages.ascx.cs</location>
            <body hash="e2ebbdb5789af30e5928518887efd915"><![CDATA[{
            return code == PortalDefault;
        }]]></body>
          </codeblock>
        </method>
        <method name="IsLanguageEnabled">
          <declaration><![CDATA[protected bool IsLanguageEnabled(string Code)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="97" sc="9" el="100" ec="10">LocalizePages.ascx.cs</location>
            <body hash="f4275d9a76c06be9fb4540b8ad9e1e76"><![CDATA[{
            Locale enabledLanguage = null;
            return LocaleController.Instance.GetLocales(ModuleContext.PortalId).TryGetValue(Code, out enabledLanguage);
        }]]></body>
          </codeblock>
        </method>
        <method name="KeepConnectionAlive">
          <declaration><![CDATA[private void KeepConnectionAlive()]]></declaration>
          <documentation>
            <summary>
 This Write/Flush is needed periodically to avoid issue in Azure.
 Azure Load Balancer silently dropping idle connections after 4 minutes.
 Sending some data from time to time to the client from server side,
 the Azure Load balancer doesn't kill the TCP connection
 </summary>
          </documentation>
          <codeblock>
            <location sl="161" sc="9" el="164" ec="10">LocalizePages.ascx.cs</location>
            <body hash="3e9713888be471cd5cfa337bb6dc9a44"><![CDATA[{
            Response.Write(' ');
            Response.Flush();
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="170" sc="9" el="176" ec="10">LocalizePages.ascx.cs</location>
            <body hash="d54a5b6c97452e177a157c9ca5bcdda3"><![CDATA[{
            base.OnInit(e);
            cancelButton.Click += cancelButton_Click;
            updateButton.Click += updateButton_Click;

            LocalResourceFile = Localization.GetResourceFile(this, "LocalizePages.ascx");
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="179" sc="9" el="210" ec="10">LocalizePages.ascx.cs</location>
            <body hash="5a543c32ca21bac96199d16e2923d230"><![CDATA[{
            base.OnLoad(e);

            //Set AJAX timeout to 1 hr for large sites
            AJAX.GetScriptManager(Page).AsyncPostBackTimeout = timeout;

            _PortalDefault = PortalSettings.DefaultLanguage;
            defaultLanguageLabel.Language = PortalSettings.DefaultLanguage;
            defaultLanguageLabel.Visible = true;

            if (!IsPostBack)
            {
                //Do not display SelectedFilesCount progress indicator.
                pageCreationProgressArea.ProgressIndicators &= ~ProgressIndicators.SelectedFilesCount;
            }
            pageCreationProgressArea.ProgressIndicators &=  ~ProgressIndicators.TimeEstimated;
            pageCreationProgressArea.ProgressIndicators &=  ~ProgressIndicators.TransferSpeed;

            pageCreationProgressArea.Localization.Total = Localization.GetString("TotalLanguages", LocalResourceFile);
            pageCreationProgressArea.Localization.TotalFiles = Localization.GetString("TotalPages", LocalResourceFile);
            pageCreationProgressArea.Localization.Uploaded = Localization.GetString("TotalProgress", LocalResourceFile);
            pageCreationProgressArea.Localization.UploadedFiles = Localization.GetString("Progress", LocalResourceFile);
            pageCreationProgressArea.Localization.CurrentFileName = Localization.GetString("Processing", LocalResourceFile);


            var pageList = GetTabsToLocalize(PortalId, Locale);
            PagesToLocalize.Text = pageList.Count.ToString(CultureInfo.InvariantCulture);
            if (pageList.Count == 0)
            {
                updateButton.Enabled = false;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="ProcessLanguage">
          <declaration><![CDATA[private void ProcessLanguage(List<TabInfo> pageList, Locale locale, int languageCount, int totalLanguages)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="103" sc="9" el="152" ec="10">LocalizePages.ascx.cs</location>
            <body hash="5f27e3587ea97c438c495b783541eb63"><![CDATA[{
            try
            {
                RadProgressContext progress = RadProgressContext.Current;

                progress.Speed = "N/A";
                progress.PrimaryTotal = totalLanguages;
                progress.PrimaryValue = languageCount;

                int total = pageList.Count;
                for (int i = 0; i <= total - 1; i++)
                {
                    TabInfo currentTab = pageList[i];
                    int stepNo = i + 1;

                    progress.SecondaryTotal = total;
                    progress.SecondaryValue = stepNo;
                    float secondaryPercent = ((float)stepNo / (float)total) * 100;
                    progress.SecondaryPercent = Convert.ToInt32(secondaryPercent);
                    float primaryPercent = ((((float)languageCount + ((float)stepNo / (float)total)) / (float)totalLanguages)) * 100;
                    progress.PrimaryPercent = Convert.ToInt32(primaryPercent);

                    progress.CurrentOperationText = string.Format(Localization.GetString("ProcessingPage", LocalResourceFile), locale.Code, stepNo, total, currentTab.TabName);

                    if (!Response.IsClientConnected)
                    {
                        //clear cache
                        DataCache.ClearPortalCache(PortalId, true);

                        //Cancel button was clicked or the browser was closed, so stop processing
                        break;
                    }

                    progress.TimeEstimated = (total - stepNo) * 100;

                    TabController.Instance.CreateLocalizedCopy(currentTab, locale, false);
                    
                    if ((i % 10) == 0)
                    {
                        KeepConnectionAlive();
                    }
                }
                PortalController.Instance.MapLocalizedSpecialPages(PortalId, locale.Code);

            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="updateButton_Click">
          <declaration><![CDATA[protected void updateButton_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="242" sc="9" el="269" ec="10">LocalizePages.ascx.cs</location>
            <body hash="0cc5bb2b533f8bb48b204ae1c98a5882"><![CDATA[{
            // Set RedirectLocation header before make any Write/Flush to keep connection alive
            // This prevents "Cannot redirect after HTTP headers have been sent" error
            Response.RedirectLocation = Globals.NavigateURL();

            var locale = LocaleController.Instance.GetLocale(Locale);
            List<TabInfo> pageList = GetTabsToLocalize(PortalId, Locale);

            int scriptTimeOut = Server.ScriptTimeout;
            Server.ScriptTimeout = timeout;

            //add translator role
            Localization.AddTranslatorRole(PortalId, locale);

            //populate pages
            ProcessLanguage(pageList, locale, 0, 1);

            //Map special pages
            PortalController.Instance.MapLocalizedSpecialPages(PortalSettings.PortalId, locale.Code);

            //clear cache
            DataCache.ClearPortalCache(PortalId, true);

            //Restore Script Timeout
            Server.ScriptTimeout = scriptTimeOut;
            //'Redirect to refresh page (and skinobjects)
            Response.End();
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_PortalDefault">
          <declaration><![CDATA[private string _PortalDefault = "";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cancelButton">
          <declaration><![CDATA[protected LinkButton cancelButton;]]></declaration>
          <documentation>
            <summary>
 cancelButton control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="defaultLanguageLabel">
          <declaration><![CDATA[protected DnnLanguageLabel defaultLanguageLabel;]]></declaration>
          <documentation>
            <summary>
 defaultLanguageLabel control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="headerLabel">
          <declaration><![CDATA[protected Label headerLabel;]]></declaration>
          <documentation>
            <summary>
 headerLabel control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="pageCreationProgressArea">
          <declaration><![CDATA[protected DnnProgressArea pageCreationProgressArea;]]></declaration>
          <documentation>
            <summary>
 pageCreationProgressArea control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="PagesToLocalize">
          <declaration><![CDATA[protected Label PagesToLocalize;]]></declaration>
          <documentation>
            <summary>
 PagesToLocalize control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="PagesToLocalizeLabel">
          <declaration><![CDATA[protected UserControl PagesToLocalizeLabel;]]></declaration>
          <documentation>
            <summary>
 PagesToLocalizeLabel control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="progressManager">
          <declaration><![CDATA[protected DnnProgressManager progressManager;]]></declaration>
          <documentation>
            <summary>
 progressManager control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="scriptBlock">
          <declaration><![CDATA[protected DnnScriptBlock scriptBlock;]]></declaration>
          <documentation>
            <summary>
 scriptBlock control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="siteDefaultLabel">
          <declaration><![CDATA[protected UserControl siteDefaultLabel;]]></declaration>
          <documentation>
            <summary>
 siteDefaultLabel control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="timeout">
          <declaration><![CDATA[private int timeout = 3600;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="updateButton">
          <declaration><![CDATA[protected LinkButton updateButton;]]></declaration>
          <documentation>
            <summary>
 updateButton control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
      </fields>
      <properties>
        <property name="Locale">
          <declaration><![CDATA[protected string Locale]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="82" sc="13" el="84" ec="14">LocalizePages.ascx.cs</location>
            <body hash="a8be88d622005345d70ef6bd13b40b83"><![CDATA[{
                return Request.QueryString["locale"];
            }]]></body>
          </codeblock>
        </property>
        <property name="PortalDefault">
          <declaration><![CDATA[protected string PortalDefault]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="74" sc="13" el="76" ec="14">LocalizePages.ascx.cs</location>
            <body hash="5ee6653431547d6f2fb5a94283702c47"><![CDATA[{
                return _PortalDefault;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="ResourceVerifier">
      <declaration><![CDATA[public class ResourceVerifier : PortalModuleBase]]></declaration>
      <documentation>
        <summary>
   Manages translations for Resource files
 </summary>
 <returns></returns>
 <remarks>
 </remarks></documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public ResourceVerifier()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="GetResourceFiles">
          <declaration><![CDATA[private static void GetResourceFiles(SortedList fileList, string path)]]></declaration>
          <documentation>
            <summary>
   Gets all system default resource files
 </summary>
 <param name="fileList">List of found resource files</param>
 <param name="path">Folder to search at</param>
 <remarks>
 </remarks></documentation>
          <codeblock>
            <location sl="62" sc="9" el="97" ec="10">ResourceVerifier.ascx.cs</location>
            <body hash="a89a34015f06bbfdac7ff7cdef3dd14b"><![CDATA[{
            var folders = Directory.GetDirectories(path);
            DirectoryInfo objFolder;

            foreach (var folder in folders)
            {
                objFolder = new DirectoryInfo(folder);

                bool resxFilesDirectory = (objFolder.Name.ToLowerInvariant() == Localization.LocalResourceDirectory.ToLowerInvariant()) ||
                                          (objFolder.Name.ToLowerInvariant() == Localization.ApplicationResourceDirectory.Replace("~/","").ToLowerInvariant()) ||
                                          (folder.ToLowerInvariant().EndsWith("\\portals\\_default"));

                if (resxFilesDirectory)
                {
                    // found local resource folder, add resources

                    foreach (string file in Directory.GetFiles(objFolder.FullName, "*.resx"))
                    {
                        var fileInfo = new FileInfo(file);
                        var match = FileInfoRegex.Match(fileInfo.Name);

                        if (match.Success && match.Groups[1].Value.ToLowerInvariant() != "en-us")
                        {
                            continue;
                        }

                        fileList.Add(fileInfo.FullName, fileInfo);
                    }

                }
                else
                {
                    GetResourceFiles(fileList, folder);
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="127" sc="9" el="384" ec="10">ResourceVerifier.ascx.cs</location>
            <body hash="fd7c41899c2a8b13878cd3323ec0f10b"><![CDATA[{
            base.OnLoad(e);

            cmdCancel.NavigateUrl = Globals.NavigateURL();

            try
            {
                var files = new SortedList();
                Dictionary<string, Locale> locales = LocaleController.Instance.GetLocales(Null.NullInteger);
                SectionHeadControl shc;

                GetResourceFiles(files, Server.MapPath("~\\"));

                //GetResourceFiles(files, Server.MapPath("~\\admin"));
                //GetResourceFiles(files, Server.MapPath("~\\controls"));
                //GetResourceFiles(files, Server.MapPath("~\\desktopmodules"));
                //GetResourceFiles(files, Server.MapPath("~\\providers"));
                //GetResourceFiles(files, Server.MapPath("~\\install"));
                //GetResourceFiles(files, Server.MapPath("~\\Portals\\_Default\\Skins"));
                //GetResourceFiles(files, Server.MapPath("~\\App_GlobalResources"));
                // Add global and shared resource files
                //files.Add(Server.MapPath(Localization.GlobalResourceFile), new FileInfo(Server.MapPath(Localization.GlobalResourceFile)));
                //files.Add(Server.MapPath(Localization.SharedResourceFile), new FileInfo(Server.MapPath(Localization.SharedResourceFile)));


                foreach (var locale in locales.Values)
                {
                    var languageLabel = new DnnLanguageLabel {Language = locale.Code};

                    var tableTop = new HtmlTable {ID = locale.Code};
                    var rowTop = new HtmlTableRow();
                    var cellTop = new HtmlTableCell();

                    var tableMissing = new HtmlTable {ID = "Missing" + locale.Code};
                    var tableEntries = new HtmlTable {ID = "Entry" + locale.Code};
                    var tableObsolete = new HtmlTable {ID = "Obsolete" + locale.Code};
                    var tableOld = new HtmlTable {ID = "Old" + locale.Code};
                    var tableDuplicate = new HtmlTable {ID = "Duplicate" + locale.Code};
                    var tableError = new HtmlTable {ID = "Error" + locale.Code};


                    foreach (DictionaryEntry file in files)
                    {
                        // check for existance
                        if (!File.Exists(ResourceFile(file.Key.ToString(), locale.Code)))
                        {
                            var row = new HtmlTableRow();
                            var cell = new HtmlTableCell {InnerText = ResourceFile(file.Key.ToString(), locale.Code).Replace(Server.MapPath("~"), "")};
                            cell.Attributes["Class"] = "Normal";
                            row.Cells.Add(cell);
                            tableMissing.Rows.Add(row);
                        }
                        else
                        {
                            var dsDef = new DataSet();
                            var dsRes = new DataSet();
                            DataTable dtDef;
                            DataTable dtRes;

                            try
                            {
                                dsDef.ReadXml(file.Key.ToString());
                            }
                            catch
                            {
                                var row = new HtmlTableRow();
                                var cell = new HtmlTableCell {InnerText = file.Key.ToString().Replace(Server.MapPath("~"), "")};
                                cell.Attributes["Class"] = "Normal";
                                row.Cells.Add(cell);
                                tableError.Rows.Add(row);
                                dsDef = null;
                            }
                            try
                            {
                                dsRes.ReadXml(ResourceFile(file.Key.ToString(), locale.Code));
                            }
                            catch
                            {
                                if (locale.Text != Localization.SystemLocale)
                                {
                                    var row = new HtmlTableRow();
                                    var cell = new HtmlTableCell {InnerText = ResourceFile(file.Key.ToString(), locale.Code).Replace(Server.MapPath("~"), "")};
                                    cell.Attributes["Class"] = "Normal";
                                    row.Cells.Add(cell);
                                    tableError.Rows.Add(row);
                                    dsRes = null;
                                }
                            }

                            if (dsRes != null && dsDef != null && dsRes.Tables["data"] != null && dsDef.Tables["data"] != null)
                            {
                                dtDef = dsDef.Tables["data"];
                                dtDef.TableName = "default";
                                dtRes = dsRes.Tables["data"].Copy();
                                dtRes.TableName = "localized";
                                dsDef.Tables.Add(dtRes);

                                // Check for duplicate entries in localized file
                                try
                                {
                                    // if this fails-> file contains duplicates
                                    var c = new UniqueConstraint("uniqueness", dtRes.Columns["name"]);
                                    dtRes.Constraints.Add(c);
                                    dtRes.Constraints.Remove("uniqueness");
                                }
                                catch
                                {
                                    var row = new HtmlTableRow();
                                    var cell = new HtmlTableCell {InnerText = ResourceFile(file.Key.ToString(), locale.Code).Replace(Server.MapPath("~"), "")};
                                    cell.Attributes["Class"] = "Normal";
                                    row.Cells.Add(cell);
                                    tableDuplicate.Rows.Add(row);
                                }

                                // Check for missing entries in localized file
                                try
                                {
                                    // if this fails-> some entries in System default file are not found in Resource file
                                    dsDef.Relations.Add("missing", dtRes.Columns["name"], dtDef.Columns["name"]);
                                }
                                catch
                                {
                                    var row = new HtmlTableRow();
                                    var cell = new HtmlTableCell {InnerText = ResourceFile(file.Key.ToString(), locale.Code).Replace(Server.MapPath("~"), "")};
                                    cell.Attributes["Class"] = "Normal";
                                    row.Cells.Add(cell);
                                    tableEntries.Rows.Add(row);
                                }
                                finally
                                {
                                    dsDef.Relations.Remove("missing");
                                }

                                // Check for obsolete entries in localized file
                                try
                                {
                                    // if this fails-> some entries in Resource File are not found in System default
                                    dsDef.Relations.Add("obsolete", dtDef.Columns["name"], dtRes.Columns["name"]);
                                }
                                catch
                                {
                                    var row = new HtmlTableRow();
                                    var cell = new HtmlTableCell {InnerText = ResourceFile(file.Key.ToString(), locale.Code).Replace(Server.MapPath("~"), "")};
                                    cell.Attributes["Class"] = "Normal";
                                    row.Cells.Add(cell);
                                    tableObsolete.Rows.Add(row);
                                }
                                finally
                                {
                                    dsDef.Relations.Remove("obsolete");
                                }

                                // Check older files
                                var resFile = new FileInfo(ResourceFile(file.Key.ToString(), locale.Code));
                                if (((FileInfo) file.Value).LastWriteTime > resFile.LastWriteTime)
                                {
                                    var row = new HtmlTableRow();
                                    var cell = new HtmlTableCell {InnerText = ResourceFile(file.Key.ToString(), locale.Code).Replace(Server.MapPath("~"), "")};
                                    cell.Attributes["Class"] = "Normal";
                                    row.Cells.Add(cell);
                                    tableOld.Rows.Add(row);
                                }
                            }
                        }
                    }

                    if (tableMissing.Rows.Count > 0)
                    {
                        // ------- Missing files
                        shc = (SectionHeadControl) LoadControl("~/controls/sectionheadcontrol.ascx");
                        shc.Section = "Missing" + locale.Code;
                        shc.IncludeRule = false;
                        shc.IsExpanded = false;
                        shc.CssClass = "SubHead";
                        shc.Text = Localization.GetString("MissingFiles", LocalResourceFile) + tableMissing.Rows.Count;
                        cellTop.Controls.Add(shc);
                        cellTop.Controls.Add(tableMissing);
                    }

                    if (tableDuplicate.Rows.Count > 0)
                    {
                        // ------- Duplicate keys
                        shc = (SectionHeadControl) LoadControl("~/controls/sectionheadcontrol.ascx");
                        shc.Section = "Duplicate" + locale.Code;
                        shc.IncludeRule = false;
                        shc.IsExpanded = false;
                        shc.CssClass = "SubHead";
                        shc.Text = Localization.GetString("DuplicateEntries", LocalResourceFile) + tableDuplicate.Rows.Count;
                        cellTop.Controls.Add(shc);
                        cellTop.Controls.Add(tableDuplicate);
                    }

                    if (tableEntries.Rows.Count > 0)
                    {
                        // ------- Missing entries
                        shc = (SectionHeadControl) LoadControl("~/controls/sectionheadcontrol.ascx");
                        shc.Section = "Entry" + locale.Code;
                        shc.IncludeRule = false;
                        shc.IsExpanded = false;
                        shc.CssClass = "SubHead";
                        shc.Text = Localization.GetString("MissingEntries", LocalResourceFile) + tableEntries.Rows.Count;
                        cellTop.Controls.Add(shc);
                        cellTop.Controls.Add(tableEntries);
                    }

                    if (tableObsolete.Rows.Count > 0)
                    {
                        // ------- Missing entries
                        shc = (SectionHeadControl) LoadControl("~/controls/sectionheadcontrol.ascx");
                        shc.Section = "Obsolete" + locale.Code;
                        shc.IncludeRule = false;
                        shc.IsExpanded = false;
                        shc.CssClass = "SubHead";
                        shc.Text = Localization.GetString("ObsoleteEntries", LocalResourceFile) + tableObsolete.Rows.Count;
                        cellTop.Controls.Add(shc);
                        cellTop.Controls.Add(tableObsolete);
                    }

                    if (tableOld.Rows.Count > 0)
                    {
                        // ------- Old files
                        shc = (SectionHeadControl) LoadControl("~/controls/sectionheadcontrol.ascx");
                        shc.Section = "Old" + locale.Code;
                        shc.IncludeRule = false;
                        shc.IsExpanded = false;
                        shc.CssClass = "SubHead";
                        shc.Text = Localization.GetString("OldFiles", LocalResourceFile) + tableOld.Rows.Count;
                        cellTop.Controls.Add(shc);
                        cellTop.Controls.Add(tableOld);
                    }

                    if (tableError.Rows.Count > 0)
                    {
                        // ------- Error files
                        shc = (SectionHeadControl) LoadControl("~/controls/sectionheadcontrol.ascx");
                        shc.Section = "Error" + locale.Code;
                        shc.IncludeRule = false;
                        shc.IsExpanded = false;
                        shc.CssClass = "SubHead";
                        shc.Text = Localization.GetString("ErrorFiles", LocalResourceFile) + tableError.Rows.Count;
                        cellTop.Controls.Add(shc);
                        cellTop.Controls.Add(tableError);
                    }

                    rowTop.Cells.Add(cellTop);
                    tableTop.Rows.Add(rowTop);

                    PlaceHolder1.Controls.Add(languageLabel);
                    PlaceHolder1.Controls.Add(tableTop);
                    PlaceHolder1.Controls.Add(new LiteralControl("<br>"));
                }
                //Module failed to load
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="ResourceFile">
          <declaration><![CDATA[private static string ResourceFile(string filename, string language)]]></declaration>
          <documentation>
            <summary>
   Returns the resource file name for a given locale
 </summary>
 <param name="filename">Resource file</param>
 <param name="language">Locale</param>
 <returns></returns>
 <remarks>
 </remarks></documentation>
          <codeblock>
            <location sl="108" sc="9" el="120" ec="10">ResourceVerifier.ascx.cs</location>
            <body hash="9fe67a2e6b2d2303c7a0cfb406b13c47"><![CDATA[{

            return Localization.GetResourceFileName(filename, language, "", Globals.GetPortalSettings().PortalId);

            //var resourcefilename = filename;

            //if (language != Localization.SystemLocale)
            //{
            //    resourcefilename = resourcefilename.Replace(".resx", "." + language + ".resx");
            //}

            //return resourcefilename;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="cmdCancel">
          <declaration><![CDATA[protected HyperLink cmdCancel;]]></declaration>
          <documentation>
            <summary>
 cmdCancel control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="PlaceHolder1">
          <declaration><![CDATA[protected PlaceHolder PlaceHolder1;]]></declaration>
          <documentation>
            <summary>
 PlaceHolder1 control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="TranslationStatus">
      <declaration><![CDATA[public class TranslationStatus : ModuleUserControlBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public TranslationStatus()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="delocalizeModuleButton_Click">
          <declaration><![CDATA[protected void delocalizeModuleButton_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="133" sc="9" el="135" ec="10">TranslationStatus.ascx.cs</location>
            <body hash="affcee15cd5c7b74e17f3872b45332ab"><![CDATA[{
            LocalizeSelectedItems(false, pagesTreeView.Nodes);
        }]]></body>
          </codeblock>
        </method>
        <method name="localizeModuleButton_Click">
          <declaration><![CDATA[protected void localizeModuleButton_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="138" sc="9" el="140" ec="10">TranslationStatus.ascx.cs</location>
            <body hash="2fffd640e4e55fd447449b99a31e514c"><![CDATA[{
            LocalizeSelectedItems(true, pagesTreeView.Nodes);
        }]]></body>
          </codeblock>
        </method>
        <method name="LocalizeSelectedItems">
          <declaration><![CDATA[private void LocalizeSelectedItems(bool localize, RadTreeNodeCollection nodes)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="74" sc="9" el="86" ec="10">TranslationStatus.ascx.cs</location>
            <body hash="e684dcc2b67ffcba04e02cfac21b42b1"><![CDATA[{
            foreach (RadTreeNode node in nodes)
            {
				dynamic moduleLocalization = node.FindControl("moduleLocalization");
                if (moduleLocalization != null)
                {
                    moduleLocalization.LocalizeSelectedItems(localize);

                    //Recursively call for child nodes
                    LocalizeSelectedItems(localize, node.Nodes);
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="markModuleTranslatedButton_Click">
          <declaration><![CDATA[protected void markModuleTranslatedButton_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="143" sc="9" el="145" ec="10">TranslationStatus.ascx.cs</location>
            <body hash="9d2053cbf00b6917e125f4b1ba66b3d4"><![CDATA[{
            MarkTranslatedSelectedItems(true, pagesTreeView.Nodes);
        }]]></body>
          </codeblock>
        </method>
        <method name="markModuleUnTranslatedButton_Click">
          <declaration><![CDATA[protected void markModuleUnTranslatedButton_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="148" sc="9" el="150" ec="10">TranslationStatus.ascx.cs</location>
            <body hash="81fa882aeec51830c12fabb950c67c41"><![CDATA[{
            MarkTranslatedSelectedItems(false, pagesTreeView.Nodes);
        }]]></body>
          </codeblock>
        </method>
        <method name="MarkTranslatedSelectedItems">
          <declaration><![CDATA[private void MarkTranslatedSelectedItems(bool translated, RadTreeNodeCollection nodes)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="89" sc="9" el="106" ec="10">TranslationStatus.ascx.cs</location>
            <body hash="78b5724091bf6324b4482cfa0599b446"><![CDATA[{
            foreach (RadTreeNode node in nodes)
            {
				dynamic moduleLocalization = node.FindControl("moduleLocalization");
				dynamic tabLocalization = node.FindControl("tabLocalization");
                if (moduleLocalization != null)
                {
                    moduleLocalization.MarkTranslatedSelectedItems(translated);
                }
                if (tabLocalization != null)
                {
                    tabLocalization.MarkTranslatedSelectedItems(translated);
                }

                //Recursively call for child nodes
                MarkTranslatedSelectedItems(translated, node.Nodes);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="111" sc="9" el="119" ec="10">TranslationStatus.ascx.cs</location>
            <body hash="3ebbdd4acb97b6df3dd266cf37e207a0"><![CDATA[{
            base.OnInit(e);

            delocalizeModuleButton.Click += delocalizeModuleButton_Click;
            localizeModuleButton.Click += localizeModuleButton_Click;
            markModuleTranslatedButton.Click += markModuleTranslatedButton_Click;
            markModuleUnTranslatedButton.Click += markModuleUnTranslatedButton_Click;
            pagesTreeView.NodeDataBound += pagesTreeView_NodeDataBound;
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="122" sc="9" el="130" ec="10">TranslationStatus.ascx.cs</location>
            <body hash="b73ff62991f346287f5755e6c8118377"><![CDATA[{
            base.OnLoad(e);

            pagesTreeView.DataSource = Tabs;
            if (!Page.IsPostBack)
            {
                pagesTreeView.DataBind();
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="pagesTreeView_NodeDataBound">
          <declaration><![CDATA[protected void pagesTreeView_NodeDataBound(object sender, RadTreeNodeEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="153" sc="9" el="168" ec="10">TranslationStatus.ascx.cs</location>
            <body hash="0ee1c27871531633231d63326b35301a"><![CDATA[{
            dynamic moduleLocalization = e.Node.FindControl("moduleLocalization");
			dynamic tabLocalization = e.Node.FindControl("tabLocalization");
            var boundTab = e.Node.DataItem as TabInfo;
            if (boundTab != null)
            {
                moduleLocalization.TabId = boundTab.TabID;
                tabLocalization.ToLocalizeTabId = boundTab.TabID;

                if (!Page.IsPostBack)
                {
                    moduleLocalization.DataBind();
                    tabLocalization.DataBind();
                }
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="delocalizeModuleButton">
          <declaration><![CDATA[protected CommandButton delocalizeModuleButton;]]></declaration>
          <documentation>
            <summary>
 delocalizeModuleButton control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="localizeModuleButton">
          <declaration><![CDATA[protected CommandButton localizeModuleButton;]]></declaration>
          <documentation>
            <summary>
 localizeModuleButton control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="markModuleTranslatedButton">
          <declaration><![CDATA[protected CommandButton markModuleTranslatedButton;]]></declaration>
          <documentation>
            <summary>
 markModuleTranslatedButton control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="markModuleUnTranslatedButton">
          <declaration><![CDATA[protected CommandButton markModuleUnTranslatedButton;]]></declaration>
          <documentation>
            <summary>
 markModuleUnTranslatedButton control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="pagesTreeView">
          <declaration><![CDATA[protected DnnTreeView pagesTreeView;]]></declaration>
          <documentation>
            <summary>
 pagesTreeView control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
      </fields>
      <properties>
        <property name="Language">
          <declaration><![CDATA[protected Locale Language]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="45" sc="13" el="47" ec="14">TranslationStatus.ascx.cs</location>
            <body hash="893c3cba37a086a0a8e7b345fd7a59bb"><![CDATA[{
                return LocaleController.Instance.GetLocale(Request.QueryString["locale"]);
            }]]></body>
          </codeblock>
        </property>
        <property name="Tabs">
          <declaration><![CDATA[protected List<TabInfo> Tabs]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="53" sc="13" el="66" ec="14">TranslationStatus.ascx.cs</location>
            <body hash="64c886e2ed68878cce9cb56e4c34bf98"><![CDATA[{
                var tabList = new List<TabInfo>();
                foreach (TabInfo t in
                    TabController.GetPortalTabs(TabController.GetTabsBySortOrder(ModuleContext.PortalId, Language.Code, false), Null.NullInteger, false, "", false, false, false, false, false))
                {
                    TabInfo newTab = t.Clone();
                    if (newTab.ParentId == Null.NullInteger)
                    {
                        newTab.ParentId = 0;
                    }
                    tabList.Add(newTab);
                }
                return tabList;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="Dnn.Modules.Languages.Components">
    <class name="LanguagesController">
      <declaration><![CDATA[public class LanguagesController : IUpgradeable]]></declaration>
      <documentation>
        <summary>

 </summary>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public LanguagesController()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="UpgradeModule">
          <declaration><![CDATA[public string UpgradeModule(string version)]]></declaration>
          <documentation>
            <summary>

 </summary>
 <param name="version"></param>
 <returns></returns></documentation>
          <codeblock>
            <location sl="40" sc="9" el="54" ec="10">Components\LanguagesController.cs</location>
            <body hash="67abc96a144fec1e91cc1f2ff9dacb31"><![CDATA[{
            try
            {
                switch (version)
                {
                    case "08.00.00":
                        break;
                }
                return "Success";
            }
            catch (Exception)
            {
                return "Failed";
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
</root>