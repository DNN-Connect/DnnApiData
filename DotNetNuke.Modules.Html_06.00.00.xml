<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<root file="DotNetNuke.Modules.Html.dll" version="06.00.00" generated="2017-06-18 19:44:47Z" generationTime="8.4620848">
  <namespace name="DotNetNuke.Modules.Html">
    <class name="DataProvider">
      <declaration><![CDATA[public abstract class DataProvider]]></declaration>
      <documentation>-----------------------------------------------------------------------------
 <summary>
   The DataProvider is an abstract class that provides the Data Access Layer for the HtmlText module
 </summary>
 <remarks>
 </remarks>
 <history>
 </history>
 -----------------------------------------------------------------------------</documentation>
      <constructors>
        <constructor name=".cctor">
          <declaration><![CDATA[static DataProvider()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="50" sc="9" el="52" ec="10">Components\DataProvider.cs</location>
            <body hash="e5f73e1b1ce4eaaec35d779c45a145da"><![CDATA[{
            CreateProvider();
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[protected DataProvider()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="AddHtmlText">
          <declaration><![CDATA[public abstract int AddHtmlText(int ModuleId, string Content, int StateID, bool IsPublished, int CreatedByUserID, int History);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="AddHtmlTextLog">
          <declaration><![CDATA[public abstract void AddHtmlTextLog(int ItemID, int StateID, string Comment, bool Approved, int CreatedByUserID);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="AddHtmlTextUser">
          <declaration><![CDATA[public abstract void AddHtmlTextUser(int ItemID, int StateID, int ModuleID, int TabID, int UserID);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="AddWorkflow">
          <declaration><![CDATA[public abstract int AddWorkflow(int PortalID, string WorkflowName, string Description, bool IsDeleted);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="AddWorkflowState">
          <declaration><![CDATA[public abstract int AddWorkflowState(int WorkflowID, string StateName, int Order, bool Notify, bool IsActive);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="AddWorkflowStatePermission">
          <declaration><![CDATA[public abstract int AddWorkflowStatePermission(int StateID, int permissionID, int roleID, bool allowAccess, int userID, int createdByUserID);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="CanDeleteWorkFlowState">
          <declaration><![CDATA[public abstract bool CanDeleteWorkFlowState(int StateID);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="CreateProvider">
          <declaration><![CDATA[private static void CreateProvider()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="56" sc="9" el="58" ec="10">Components\DataProvider.cs</location>
            <body hash="4f9c014651e030185aad63639a53fa3a"><![CDATA[{
            objProvider = (DataProvider) Reflection.CreateObject("data", "DotNetNuke.Modules.Html", "");
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteHtmlText">
          <declaration><![CDATA[public abstract void DeleteHtmlText(int ModuleID, int ItemID);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="DeleteHtmlTextUsers">
          <declaration><![CDATA[public abstract void DeleteHtmlTextUsers();]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="DeleteWorkflowState">
          <declaration><![CDATA[public abstract void DeleteWorkflowState(int StateID);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="DeleteWorkflowStatePermission">
          <declaration><![CDATA[public abstract void DeleteWorkflowStatePermission(int WorkflowStatePermissionID);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="DeleteWorkflowStatePermissionsByStateID">
          <declaration><![CDATA[public abstract void DeleteWorkflowStatePermissionsByStateID(int StateID);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="DeleteWorkflowStatePermissionsByUserID">
          <declaration><![CDATA[public abstract void DeleteWorkflowStatePermissionsByUserID(int userID);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="GetAllHtmlText">
          <declaration><![CDATA[public abstract IDataReader GetAllHtmlText(int ModuleID);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="GetHtmlText">
          <declaration><![CDATA[public abstract IDataReader GetHtmlText(int ModuleID, int ItemID);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="GetHtmlTextLog">
          <declaration><![CDATA[public abstract IDataReader GetHtmlTextLog(int ItemID);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="GetHtmlTextUser">
          <declaration><![CDATA[public abstract IDataReader GetHtmlTextUser(int UserID);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="GetPermissionsByStateID">
          <declaration><![CDATA[public abstract IDataReader GetPermissionsByStateID(int StateID);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="GetTopHtmlText">
          <declaration><![CDATA[public abstract IDataReader GetTopHtmlText(int ModuleID, bool IsPublished);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="GetWorkflow">
          <declaration><![CDATA[public abstract IDataReader GetWorkflow(int WorkflowID);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="GetWorkflows">
          <declaration><![CDATA[public abstract IDataReader GetWorkflows(int PortalID);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="GetWorkflowState">
          <declaration><![CDATA[public abstract IDataReader GetWorkflowState(int StateID);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="GetWorkflowStatePermission">
          <declaration><![CDATA[public abstract IDataReader GetWorkflowStatePermission(int WorkflowStatePermissionID);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="GetWorkflowStatePermissions">
          <declaration><![CDATA[public abstract IDataReader GetWorkflowStatePermissions();]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="GetWorkflowStatePermissionsByStateID">
          <declaration><![CDATA[public abstract IDataReader GetWorkflowStatePermissionsByStateID(int StateID);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="GetWorkflowStates">
          <declaration><![CDATA[public abstract IDataReader GetWorkflowStates(int WorkflowID);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="Instance">
          <declaration><![CDATA[public static DataProvider Instance()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="62" sc="9" el="64" ec="10">Components\DataProvider.cs</location>
            <body hash="a8ff2784d7f32133701ca948fca0b1cd"><![CDATA[{
            return objProvider;
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateHtmlText">
          <declaration><![CDATA[public abstract void UpdateHtmlText(int ItemID, string Content, int StateID, bool IsPublished, int LastModifiedByUserID);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="UpdateWorkflow">
          <declaration><![CDATA[public abstract void UpdateWorkflow(int WorkflowID, string WorkflowName, string Description, bool IsDeleted);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="UpdateWorkflowState">
          <declaration><![CDATA[public abstract void UpdateWorkflowState(int StateID, string StateName, int Order, bool Notify, bool IsActive);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="UpdateWorkflowStatePermission">
          <declaration><![CDATA[public abstract void UpdateWorkflowStatePermission(int WorkflowStatePermissionID, int StateID, int permissionID, int roleID, bool allowAccess, int userID, int lastModifiedByUserID);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="objProvider">
          <declaration><![CDATA[private static DataProvider objProvider;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="EditHtml">
      <declaration><![CDATA[public class EditHtml : PortalModuleBase]]></declaration>
      <documentation>
        <summary>
   The EditHtml PortalModuleBase is used to manage Html
 </summary>
 <remarks>
 </remarks>
 <history>
 </history></documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private readonly HtmlTextController _htmlTextController = new HtmlTextController();]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="61" sc="9" el="64" ec="77">EditHtml.ascx.cs</location>
            <body hash="17ed9e98021e59b3c29df685c5f64165"><![CDATA[private readonly HtmlTextController _htmlTextController = new HtmlTextController();
        private readonly HtmlTextLogController _htmlTextLogController = new HtmlTextLogController();
        private readonly WorkflowStateController _workflowStateController = new WorkflowStateController();
        private ModuleController _moduleController = new ModuleController();]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="DisplayContent">
          <declaration><![CDATA[private void DisplayContent(HtmlTextInfo htmlContent)]]></declaration>
          <documentation>
            <summary>
   Displays the html content in the preview section.
 </summary>
 <param name="htmlContent">Content of the HTML.</param></documentation>
          <codeblock>
            <location sl="211" sc="9" el="218" ec="10">EditHtml.ascx.cs</location>
            <body hash="d64ebc1c26d0c219ef3beae562206add"><![CDATA[{
            lblCurrentWorkflowInUse.Text = GetLocalizedString(htmlContent.WorkflowName);
            lblCurrentWorkflowState.Text = GetLocalizedString(htmlContent.StateName);
            lblCurrentVersion.Text = htmlContent.Version.ToString();
            txtContent.Text = FormatContent(htmlContent.Content);

            DisplayMasterLanguageContent();
        }]]></body>
          </codeblock>
        </method>
        <method name="DisplayHistory">
          <declaration><![CDATA[private void DisplayHistory(HtmlTextInfo htmlContent)]]></declaration>
          <documentation>
            <summary>
   Displays the history of an html content item in a grid in the preview section.
 </summary>
 <param name="htmlContent">Content of the HTML.</param></documentation>
          <codeblock>
            <location sl="162" sc="9" el="176" ec="10">EditHtml.ascx.cs</location>
            <body hash="3340c9e99de4c7032d02589dc187f591"><![CDATA[{
            dnnSitePanelEditHTMLHistory.Visible = CurrentWorkflowType != WorkflowType.DirectPublish;
            fsEditHtmlHistory.Visible = CurrentWorkflowType != WorkflowType.DirectPublish;

            if (((CurrentWorkflowType == WorkflowType.DirectPublish)))
            {
                return;
            }
            var htmlLogging = _htmlTextLogController.GetHtmlTextLog(htmlContent.ItemID);
            dgHistory.DataSource = htmlLogging;
            dgHistory.DataBind();

            dnnSitePanelEditHTMLHistory.Visible = htmlLogging.Count != 0;
            fsEditHtmlHistory.Visible = htmlLogging.Count != 0;
        }]]></body>
          </codeblock>
        </method>
        <method name="DisplayInitialContent">
          <declaration><![CDATA[private void DisplayInitialContent(WorkflowStateInfo firstState)]]></declaration>
          <documentation>
            <summary>
   Displays the initial content when a module is first added to the page.
 </summary>
 <param name="firstState">The first state.</param></documentation>
          <codeblock>
            <location sl="286" sc="9" el="303" ec="10">EditHtml.ascx.cs</location>
            <body hash="72206044612c2b51c1fd16da0bf0645b"><![CDATA[{
            txtContent.Text = GetLocalizedString("AddContent");
            litPreview.Text = GetLocalizedString("AddContent");
            lblCurrentWorkflowInUse.Text = firstState.WorkflowName;
            lblPreviewWorkflowInUse.Text = firstState.WorkflowName;
            divPreviewVersion.Visible = false;

            liVersions.Visible = false;

            dnnSitePanelEditHTMLHistory.Visible = false;
            fsEditHtmlHistory.Visible = false;

            divCurrentWorkflowState.Visible = false;
            divCurrentVersion.Visible = false;
            divPreviewWorkflowState.Visible = false;

            lblPreviewWorkflowState.Text = firstState.StateName;
        }]]></body>
          </codeblock>
        </method>
        <method name="DisplayLockedContent">
          <declaration><![CDATA[private void DisplayLockedContent(HtmlTextInfo htmlContent, HtmlTextInfo lastPublishedContent)]]></declaration>
          <documentation>
            <summary>
   Displays the content but hide the editor if editing is locked from the current user
 </summary>
 <param name="htmlContent">Content of the HTML.</param>
 <param name="lastPublishedContent">Last content of the published.</param></documentation>
          <codeblock>
            <location sl="253" sc="9" el="279" ec="10">EditHtml.ascx.cs</location>
            <body hash="85dc485f1c090f2c13d5619620d2589e"><![CDATA[{
            txtContent.Visible = false;
            cmdSave.Visible = false;
            //cmdPreview.Visible = false;
            divPublish.Visible = false;

            divSubmittedContent.Visible = true;

            lblCurrentWorkflowInUse.Text = GetLocalizedString(htmlContent.WorkflowName);
            lblCurrentWorkflowState.Text = GetLocalizedString(htmlContent.StateName);

            litCurrentContentPreview.Text = HtmlTextController.FormatHtmlText(ModuleId, htmlContent.Content, Settings);
            lblCurrentVersion.Text = htmlContent.Version.ToString();
            DisplayVersions();

            if ((lastPublishedContent != null))
            {
                DisplayPreview(lastPublishedContent);
                DisplayHistory(lastPublishedContent);
            }
            else
            {
                dnnSitePanelEditHTMLHistory.Visible = false;
                fsEditHtmlHistory.Visible = false;
                DisplayPreview(htmlContent.Content);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="DisplayMasterLanguageContent">
          <declaration><![CDATA[private void DisplayMasterLanguageContent()]]></declaration>
          <documentation>
            <summary>
   Displays the content of the master language if localized content is enabled.
 </summary>
          </documentation>
          <codeblock>
            <location sl="191" sc="9" el="204" ec="10">EditHtml.ascx.cs</location>
            <body hash="4a5f3adb705b601522c5f73aa2bad560"><![CDATA[{
            //Get master language
            var objModule = new ModuleController().GetModule(ModuleId, TabId);
            if (objModule.DefaultLanguageModule != null)
            {
                var masterContent = _htmlTextController.GetTopHtmlText(objModule.DefaultLanguageModule.ModuleID, false, WorkflowID);
                if (masterContent != null)
                {
                    placeMasterContent.Controls.Add(new LiteralControl(HtmlTextController.FormatHtmlText(objModule.DefaultLanguageModule.ModuleID, FormatContent(masterContent.Content), Settings)));
                }
            }

            liMaster.Visible = objModule.DefaultLanguageModule != null;
        }]]></body>
          </codeblock>
        </method>
        <method name="DisplayPreview">
          <declaration><![CDATA[private void DisplayPreview(HtmlTextInfo htmlContent)]]></declaration>
          <documentation>
            <summary>
   Displays the content preview in the preview section
 </summary>
 <param name="htmlContent">Content of the HTML.</param></documentation>
          <codeblock>
            <location sl="225" sc="9" el="231" ec="10">EditHtml.ascx.cs</location>
            <body hash="0a5838ea000175e6160b0b28e0d1317b"><![CDATA[{
            lblPreviewVersion.Text = htmlContent.Version.ToString();
            lblPreviewWorkflowInUse.Text = GetLocalizedString(htmlContent.WorkflowName);
            lblPreviewWorkflowState.Text = GetLocalizedString(htmlContent.StateName);
            litPreview.Text = HtmlTextController.FormatHtmlText(ModuleId, htmlContent.Content, Settings);
            DisplayHistory(htmlContent);
        }]]></body>
          </codeblock>
        </method>
        <method name="DisplayPreview">
          <declaration><![CDATA[private void DisplayPreview(string htmlContent)]]></declaration>
          <documentation>
            <summary>
   Displays the preview in the preview section
 </summary>
 <param name="htmlContent">Content of the HTML.</param></documentation>
          <codeblock>
            <location sl="238" sc="9" el="245" ec="10">EditHtml.ascx.cs</location>
            <body hash="2a54f6cdae1c9652a2e45af93254c126"><![CDATA[{
            litPreview.Text = HtmlTextController.FormatHtmlText(ModuleId, htmlContent, Settings);
            divPreviewVersion.Visible = false;
            divPreviewWorlflow.Visible = false;

            divPreviewWorkflowState.Visible = true;
            lblPreviewWorkflowState.Text = GetLocalizedString("EditPreviewState");
        }]]></body>
          </codeblock>
        </method>
        <method name="DisplayVersions">
          <declaration><![CDATA[private void DisplayVersions()]]></declaration>
          <documentation>
            <summary>
   Displays the versions of the html content in the versions section
 </summary>
          </documentation>
          <codeblock>
            <location sl="182" sc="9" el="185" ec="10">EditHtml.ascx.cs</location>
            <body hash="2e9fac47f8c4fdbccd8528709b55ffe4"><![CDATA[{
            dgVersions.DataSource = _htmlTextController.GetAllHtmlText(ModuleId);
            dgVersions.DataBind();
        }]]></body>
          </codeblock>
        </method>
        <method name="FormatContent">
          <declaration><![CDATA[private string FormatContent(string htmlContent)]]></declaration>
          <documentation>
            <summary>
   Formats the content to make it html safe.
 </summary>
 <param name="htmlContent">Content of the HTML.</param>
 <returns></returns></documentation>
          <codeblock>
            <location sl="315" sc="9" el="320" ec="10">EditHtml.ascx.cs</location>
            <body hash="82cba7451dbf01b98c555d1cb25be575"><![CDATA[{
            var strContent = HttpUtility.HtmlDecode(htmlContent);
            strContent = HtmlTextController.ManageRelativePaths(strContent, PortalSettings.HomeDirectory, "src", PortalId);
            strContent = HtmlTextController.ManageRelativePaths(strContent, PortalSettings.HomeDirectory, "background", PortalId);
            return HttpUtility.HtmlEncode(strContent);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetLastPublishedVersion">
          <declaration><![CDATA[private HtmlTextInfo GetLastPublishedVersion(int publishedStateID)]]></declaration>
          <documentation>
            <summary>
   Gets the last published version of this module
 </summary>
 <param name="publishedStateID">The published state ID.</param>
 <returns></returns></documentation>
          <codeblock>
            <location sl="368" sc="9" el="370" ec="10">EditHtml.ascx.cs</location>
            <body hash="c4f7b72c3c5f3cdb41e1a78894ba9df6"><![CDATA[{
            return (from version in _htmlTextController.GetAllHtmlText(ModuleId) where version.StateID == publishedStateID orderby version.Version descending select version).ToList()[0];
        }]]></body>
          </codeblock>
        </method>
        <method name="GetLatestHTMLContent">
          <declaration><![CDATA[private HtmlTextInfo GetLatestHTMLContent()]]></declaration>
          <documentation>
            <summary>
   Gets the latest html content of the module
 </summary>
 <returns></returns></documentation>
          <codeblock>
            <location sl="338" sc="9" el="350" ec="10">EditHtml.ascx.cs</location>
            <body hash="5f79ae915cecadfd656a4727294d00c2"><![CDATA[{
            var htmlContent = _htmlTextController.GetTopHtmlText(ModuleId, false, WorkflowID);
            if (htmlContent == null)
            {
                htmlContent = new HtmlTextInfo();
                htmlContent.ItemID = -1;
                htmlContent.StateID = _workflowStateController.GetFirstWorkflowStateID(WorkflowID);
                htmlContent.WorkflowID = WorkflowID;
                htmlContent.ModuleID = ModuleId;
            }

            return htmlContent;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetLocalizedString">
          <declaration><![CDATA[private string GetLocalizedString(string str)]]></declaration>
          <documentation>
            <summary>
   Gets the localized string from a resource file if it exists.
 </summary>
 <param name="str">The STR.</param>
 <returns></returns></documentation>
          <codeblock>
            <location sl="328" sc="9" el="331" ec="10">EditHtml.ascx.cs</location>
            <body hash="00fe3631fd7fa3a65269ddb389569131"><![CDATA[{
            var localizedString = Localization.GetString(str, LocalResourceFile);
            return (string.IsNullOrEmpty(localizedString) ? str : localizedString);
        }]]></body>
          </codeblock>
        </method>
        <method name="OnHistoryGridItemDataBound">
          <declaration><![CDATA[protected void OnHistoryGridItemDataBound(object sender, GridItemEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="521" sc="9" el="530" ec="10">EditHtml.ascx.cs</location>
            <body hash="b443d466d842c696dc6fec6ff46f5e71"><![CDATA[{
            var item = e.Item;

            if (item.ItemType == GridItemType.Item || item.ItemType == GridItemType.AlternatingItem || item.ItemType == GridItemType.SelectedItem)
            {
                //Localize columns
                item.Cells[2].Text = Localization.GetString(item.Cells[2].Text, LocalResourceFile);
                item.Cells[3].Text = Localization.GetString(item.Cells[3].Text, LocalResourceFile);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="377" sc="9" el="388" ec="10">EditHtml.ascx.cs</location>
            <body hash="d7390eecb0422461a7d965a97e50b4e7"><![CDATA[{
            base.OnInit(e);

            hlCancel.NavigateUrl = Globals.NavigateURL();

            cmdPreview.Click += OnPreviewClick;
            cmdSave.Click += OnSaveClick;
            dgHistory.ItemDataBound += OnHistoryGridItemDataBound;
            dgVersions.ItemCommand += OnVersionsGridItemCommand;
            dgVersions.ItemDataBound += OnVersionsGridItemDataBound;
            dgVersions.PageIndexChanged += OnVersionsGridPageIndexChanged;
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="391" sc="9" el="441" ec="10">EditHtml.ascx.cs</location>
            <body hash="bee3efdba44198a89f8e03bd67be267c"><![CDATA[{
            base.OnLoad(e);

            try
            {
                var htmlContentItemID = -1;
                var htmlContent = _htmlTextController.GetTopHtmlText(ModuleId, false, WorkflowID);

                if ((htmlContent != null))
                {
                    htmlContentItemID = htmlContent.ItemID;
                }

                if (!Page.IsPostBack)
                {
                    var workflowStates = _workflowStateController.GetWorkflowStates(WorkflowID);
                    var maxVersions = _htmlTextController.GetMaximumVersionHistory(PortalId);
                    var userCanEdit = UserInfo.IsSuperUser || PortalSecurity.IsInRole(PortalSettings.AdministratorRoleName) || UserInfo.UserID == LockedByUserID;

                    lblMaxVersions.Text = maxVersions.ToString();
                    dgVersions.PageSize = (maxVersions < 10 ? maxVersions : 10);

                    switch (workflowStates.Count)
                    {
                        case 1:
                            CurrentWorkflowType = WorkflowType.DirectPublish;
                            break;
                        case 2:
                            CurrentWorkflowType = WorkflowType.ContentStaging;
                            break;
                    }

                    if (htmlContentItemID != -1)
                    {
                        DisplayContent(htmlContent);
                        DisplayPreview(htmlContent);
                    }
                    else
                    {
                        DisplayInitialContent(workflowStates[0] as WorkflowStateInfo);
                    }

                    divPublish.Visible = CurrentWorkflowType != WorkflowType.DirectPublish;
                    DisplayVersions();
                }
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnPreviewClick">
          <declaration><![CDATA[protected void OnPreviewClick(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="509" sc="9" el="518" ec="10">EditHtml.ascx.cs</location>
            <body hash="b08160fbc0562996344870c039352c76"><![CDATA[{
            try
            {
                DisplayPreview(txtContent.Text);
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnSaveClick">
          <declaration><![CDATA[protected void OnSaveClick(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="444" sc="9" el="506" ec="10">EditHtml.ascx.cs</location>
            <body hash="49360171d8e1e86d3c06c59a088c070a"><![CDATA[{
            const bool redirect = true;

            try
            {
                // get content
                var htmlContent = GetLatestHTMLContent();

                var pac = new PortalAliasController();
                var aliases = from PortalAliasInfo pa in pac.GetPortalAliasByPortalID(PortalSettings.PortalId).Values select pa.HTTPAlias;
                htmlContent.Content = HtmlUtils.AbsoluteToRelativeUrls(txtContent.Text, aliases);

                var draftStateID = _workflowStateController.GetFirstWorkflowStateID(WorkflowID);
                var nextWorkflowStateID = _workflowStateController.GetNextWorkflowStateID(WorkflowID, htmlContent.StateID);
                var publishedStateID = _workflowStateController.GetLastWorkflowStateID(WorkflowID);
                var userCanUpdate = UserInfo.IsSuperUser || PortalSecurity.IsInRole(PortalSettings.AdministratorRoleName) || UserInfo.UserID == LockedByUserID;

                switch (CurrentWorkflowType)
                {
                    case WorkflowType.DirectPublish:
                        _htmlTextController.UpdateHtmlText(htmlContent, _htmlTextController.GetMaximumVersionHistory(PortalId));

                        break;
                    case WorkflowType.ContentStaging:
                        if (chkPublish.Checked)
                        {
                            //if it's already published set it to draft
                            if (htmlContent.StateID == publishedStateID)
                            {
                                htmlContent.StateID = draftStateID;
                            }
                            else
                            {
                                htmlContent.StateID = publishedStateID;
                                //here it's in published mode
                            }
                        }
                        else
                        {
                            //if it's already published set it back to draft
                            if ((htmlContent.StateID != draftStateID))
                            {
                                htmlContent.StateID = draftStateID;
                            }
                        }

                        _htmlTextController.UpdateHtmlText(htmlContent, _htmlTextController.GetMaximumVersionHistory(PortalId));
                        break;
                }
            }
            catch (Exception exc)
            {
                Exceptions.LogException(exc);
                UI.Skins.Skin.AddModuleMessage(Page, "Error occurred: ", exc.Message, ModuleMessage.ModuleMessageType.RedError);
                return;
            }

            // redirect back to portal
            if (redirect)
            {
                Response.Redirect(Globals.NavigateURL(), true);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnVersionsGridItemCommand">
          <declaration><![CDATA[protected void OnVersionsGridItemCommand(object source, GridCommandEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="533" sc="9" el="576" ec="10">EditHtml.ascx.cs</location>
            <body hash="0bd3d4247611e5b83c1560e292110179"><![CDATA[{
            try
            {
                var htmlContent = _htmlTextController.GetHtmlText(ModuleId, int.Parse(e.CommandArgument.ToString()));

                switch (e.CommandName.ToLower())
                {
                    case "remove":
                        _htmlTextController.DeleteHtmlText(ModuleId, htmlContent.ItemID);
                        break;
                    case "rollback":
                        htmlContent.ItemID = -1;
                        htmlContent.ModuleID = ModuleId;
                        htmlContent.WorkflowID = WorkflowID;
                        htmlContent.StateID = _workflowStateController.GetFirstWorkflowStateID(WorkflowID);
                        _htmlTextController.UpdateHtmlText(htmlContent, _htmlTextController.GetMaximumVersionHistory(PortalId));
                        break;
                    case "preview":
                        DisplayPreview(htmlContent);
                        break;
                }

                if ((e.CommandName.ToLower() != "preview"))
                {
                    var latestContent = _htmlTextController.GetTopHtmlText(ModuleId, false, WorkflowID);
                    if (latestContent == null)
                    {
                        DisplayInitialContent(_workflowStateController.GetWorkflowStates(WorkflowID)[0] as WorkflowStateInfo);
                    }
                    else
                    {
                        DisplayContent(latestContent);
                        DisplayPreview(latestContent);
                        DisplayVersions();
                    }
                }

                //Module failed to load
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnVersionsGridItemDataBound">
          <declaration><![CDATA[protected void OnVersionsGridItemDataBound(object sender, GridItemEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="579" sc="9" el="640" ec="10">EditHtml.ascx.cs</location>
            <body hash="39562b4a6802f50ef8cdb49ae444c5da"><![CDATA[{
            if ((e.Item.ItemType == GridItemType.Item || e.Item.ItemType == GridItemType.AlternatingItem || e.Item.ItemType == GridItemType.SelectedItem))
            {
                var item = e.Item as GridDataItem;
                var htmlContent = item.DataItem as HtmlTextInfo;
                var createdBy = "Default";

                if ((htmlContent.CreatedByUserID != -1))
                {
                    var createdByByUser = UserController.GetUserById(PortalId, htmlContent.CreatedByUserID);
                    if (createdByByUser != null)
                    {
                        createdBy = createdByByUser.DisplayName;
                    }                    
                }

                foreach (TableCell cell in item.Cells)
                {
                    foreach (Control cellControl in cell.Controls)
                    {
                        if (cellControl is ImageButton)
                        {
                            var imageButton = cellControl as ImageButton;
                            imageButton.CommandArgument = htmlContent.ItemID.ToString();
                            switch (imageButton.CommandName.ToLower())
                            {
                                case "rollback":
                                    //hide rollback for the first item
                                    if (dgVersions.CurrentPageIndex == 0)
                                    {
                                        if ((item.ItemIndex == 0))
                                        {
                                            imageButton.Visible = false;
                                            break;
                                        }
                                    }

                                    imageButton.Visible = true;

                                    break;
                                case "remove":
                                    var msg = GetLocalizedString("DeleteVersion.Confirm");
                                    msg =
                                        msg.Replace("[VERSION]", htmlContent.Version.ToString()).Replace("[STATE]", htmlContent.StateName).Replace("[DATECREATED]", htmlContent.CreatedOnDate.ToString())
                                            .Replace("[USERNAME]", createdBy);
                                    imageButton.OnClientClick = "return confirm(\"" + msg + "\");";
                                    //hide the delete button
                                    var showDelete = UserInfo.IsSuperUser || PortalSecurity.IsInRole(PortalSettings.AdministratorRoleName);

                                    if (!showDelete)
                                    {
                                        showDelete = htmlContent.IsPublished == false;
                                    }

                                    imageButton.Visible = showDelete;
                                    break;
                            }
                        }
                    }
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnVersionsGridPageIndexChanged">
          <declaration><![CDATA[protected void OnVersionsGridPageIndexChanged(object source, GridPageChangedEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="643" sc="9" el="645" ec="10">EditHtml.ascx.cs</location>
            <body hash="b0a6174351d2f482c86d6cf30e3f09d4"><![CDATA[{
            DisplayVersions();
        }]]></body>
          </codeblock>
        </method>
        <method name="UserCanReview">
          <declaration><![CDATA[private bool UserCanReview(HtmlTextInfo htmlContent)]]></declaration>
          <documentation>
            <summary>
   Returns whether or not the user has review permissions to this module
 </summary>
 <param name="htmlContent">Content of the HTML.</param>
 <returns></returns></documentation>
          <codeblock>
            <location sl="358" sc="9" el="360" ec="10">EditHtml.ascx.cs</location>
            <body hash="e39f332f006fdef33570007fb8376d15"><![CDATA[{
            return (htmlContent != null) && WorkflowStatePermissionController.HasWorkflowStatePermission(WorkflowStatePermissionController.GetWorkflowStatePermissions(htmlContent.StateID), "REVIEW");
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_htmlTextController">
          <declaration><![CDATA[private readonly HtmlTextController _htmlTextController = new HtmlTextController();]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_htmlTextLogController">
          <declaration><![CDATA[private readonly HtmlTextLogController _htmlTextLogController = new HtmlTextLogController();]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_moduleController">
          <declaration><![CDATA[private ModuleController _moduleController = new ModuleController();]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_workflowStateController">
          <declaration><![CDATA[private readonly WorkflowStateController _workflowStateController = new WorkflowStateController();]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkPublish">
          <declaration><![CDATA[protected CheckBox chkPublish;]]></declaration>
          <documentation>
            <summary>
 chkPublish control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="cmdPreview">
          <declaration><![CDATA[protected LinkButton cmdPreview;]]></declaration>
          <documentation>
            <summary>
 cmdPreview control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="cmdSave">
          <declaration><![CDATA[protected LinkButton cmdSave;]]></declaration>
          <documentation>
            <summary>
 cmdSave control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="dgHistory">
          <declaration><![CDATA[protected DnnGrid dgHistory;]]></declaration>
          <documentation>
            <summary>
 dgHistory control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="dgVersions">
          <declaration><![CDATA[protected DnnGrid dgVersions;]]></declaration>
          <documentation>
            <summary>
 dgVersions control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="Div1">
          <declaration><![CDATA[protected HtmlGenericControl Div1;]]></declaration>
          <documentation>
            <summary>
 Div1 control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="Div3">
          <declaration><![CDATA[protected HtmlGenericControl Div3;]]></declaration>
          <documentation>
            <summary>
 Div3 control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="divCurrentVersion">
          <declaration><![CDATA[protected HtmlGenericControl divCurrentVersion;]]></declaration>
          <documentation>
            <summary>
 divCurrentVersion control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="divCurrentWorkflowState">
          <declaration><![CDATA[protected HtmlGenericControl divCurrentWorkflowState;]]></declaration>
          <documentation>
            <summary>
 divCurrentWorkflowState control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="divPreviewVersion">
          <declaration><![CDATA[protected HtmlGenericControl divPreviewVersion;]]></declaration>
          <documentation>
            <summary>
 divPreviewVersion control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="divPreviewWorkflowState">
          <declaration><![CDATA[protected HtmlGenericControl divPreviewWorkflowState;]]></declaration>
          <documentation>
            <summary>
 divPreviewWorkflowState control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="divPreviewWorlflow">
          <declaration><![CDATA[protected HtmlGenericControl divPreviewWorlflow;]]></declaration>
          <documentation>
            <summary>
 divPreviewWorlflow control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="divPublish">
          <declaration><![CDATA[protected HtmlGenericControl divPublish;]]></declaration>
          <documentation>
            <summary>
 divPublish control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="divSubmittedContent">
          <declaration><![CDATA[protected HtmlGenericControl divSubmittedContent;]]></declaration>
          <documentation>
            <summary>
 divSubmittedContent control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="dnnSitePanelEditHTMLHistory">
          <declaration><![CDATA[protected HtmlGenericControl dnnSitePanelEditHTMLHistory;]]></declaration>
          <documentation>
            <summary>
 dnnSitePanelEditHTMLHistory control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="ehmContent">
          <declaration><![CDATA[protected HtmlGenericControl ehmContent;]]></declaration>
          <documentation>
            <summary>
 ehmContent control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="fsEditHtmlHistory">
          <declaration><![CDATA[protected HtmlGenericControl fsEditHtmlHistory;]]></declaration>
          <documentation>
            <summary>
 fsEditHtmlHistory control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="hlCancel">
          <declaration><![CDATA[protected HyperLink hlCancel;]]></declaration>
          <documentation>
            <summary>
 hlCancel control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="lblCurrentVersion">
          <declaration><![CDATA[protected Label lblCurrentVersion;]]></declaration>
          <documentation>
            <summary>
 lblCurrentVersion control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="lblCurrentWorkflowInUse">
          <declaration><![CDATA[protected Label lblCurrentWorkflowInUse;]]></declaration>
          <documentation>
            <summary>
 lblCurrentWorkflowInUse control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="lblCurrentWorkflowState">
          <declaration><![CDATA[protected Label lblCurrentWorkflowState;]]></declaration>
          <documentation>
            <summary>
 lblCurrentWorkflowState control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="lblMaxVersions">
          <declaration><![CDATA[protected Label lblMaxVersions;]]></declaration>
          <documentation>
            <summary>
 lblMaxVersions control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="lblPreviewVersion">
          <declaration><![CDATA[protected Label lblPreviewVersion;]]></declaration>
          <documentation>
            <summary>
 lblPreviewVersion control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="lblPreviewWorkflowInUse">
          <declaration><![CDATA[protected Label lblPreviewWorkflowInUse;]]></declaration>
          <documentation>
            <summary>
 lblPreviewWorkflowInUse control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="lblPreviewWorkflowState">
          <declaration><![CDATA[protected Label lblPreviewWorkflowState;]]></declaration>
          <documentation>
            <summary>
 lblPreviewWorkflowState control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="liCurrent">
          <declaration><![CDATA[protected HtmlGenericControl liCurrent;]]></declaration>
          <documentation>
            <summary>
 liCurrent control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="liMaster">
          <declaration><![CDATA[protected HtmlGenericControl liMaster;]]></declaration>
          <documentation>
            <summary>
 liMaster control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="litCurrentContentPreview">
          <declaration><![CDATA[protected Literal litCurrentContentPreview;]]></declaration>
          <documentation>
            <summary>
 litCurrentContentPreview control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="litPreview">
          <declaration><![CDATA[protected Literal litPreview;]]></declaration>
          <documentation>
            <summary>
 litPreview control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="liVersions">
          <declaration><![CDATA[protected HtmlGenericControl liVersions;]]></declaration>
          <documentation>
            <summary>
 liVersions control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="placeMasterContent">
          <declaration><![CDATA[protected PlaceHolder placeMasterContent;]]></declaration>
          <documentation>
            <summary>
 placeMasterContent control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="plActionOnSave">
          <declaration><![CDATA[protected UserControl plActionOnSave;]]></declaration>
          <documentation>
            <summary>
 plActionOnSave control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="plCurrentWorkflowInUse">
          <declaration><![CDATA[protected UserControl plCurrentWorkflowInUse;]]></declaration>
          <documentation>
            <summary>
 plCurrentWorkflowInUse control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="plCurrentWorkflowState">
          <declaration><![CDATA[protected UserControl plCurrentWorkflowState;]]></declaration>
          <documentation>
            <summary>
 plCurrentWorkflowState control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="plCurrentWorkVersion">
          <declaration><![CDATA[protected UserControl plCurrentWorkVersion;]]></declaration>
          <documentation>
            <summary>
 plCurrentWorkVersion control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="plMaxVersions">
          <declaration><![CDATA[protected UserControl plMaxVersions;]]></declaration>
          <documentation>
            <summary>
 plMaxVersions control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="plPreviewVersion">
          <declaration><![CDATA[protected UserControl plPreviewVersion;]]></declaration>
          <documentation>
            <summary>
 plPreviewVersion control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="plPreviewWorkflowInUse">
          <declaration><![CDATA[protected UserControl plPreviewWorkflowInUse;]]></declaration>
          <documentation>
            <summary>
 plPreviewWorkflowInUse control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="plPreviewWorkflowState">
          <declaration><![CDATA[protected UserControl plPreviewWorkflowState;]]></declaration>
          <documentation>
            <summary>
 plPreviewWorkflowState control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="txtContent">
          <declaration><![CDATA[protected TextEditor txtContent;]]></declaration>
          <documentation>
            <summary>
 txtContent control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
      </fields>
      <properties>
        <property name="CurrentWorkflowType">
          <declaration><![CDATA[private EditHtml.WorkflowType CurrentWorkflowType]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="138" sc="13" el="146" ec="14">EditHtml.ascx.cs</location>
            <body hash="dd5bff3f4680d452cd2176b0656e2391"><![CDATA[{
                var currentWorkflowType = default(WorkflowType);
                if (ViewState["_currentWorkflowType"] != null)
                {
                    currentWorkflowType = (WorkflowType) Enum.Parse(typeof (WorkflowType), ViewState["_currentWorkflowType"].ToString());
                }

                return currentWorkflowType;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="148" sc="13" el="150" ec="14">EditHtml.ascx.cs</location>
            <body hash="e89395c678b38c370ee1cc9cf18fa79e"><![CDATA[{
                ViewState["_currentWorkflowType"] = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="LockedByUserID">
          <declaration><![CDATA[private int LockedByUserID]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="103" sc="13" el="111" ec="14">EditHtml.ascx.cs</location>
            <body hash="f47c7aec85d86fb5159517c269f05934"><![CDATA[{
                var userID = -1;
                if ((Settings["Content_LockedBy"]) != null)
                {
                    userID = int.Parse(Settings["Content_LockedBy"].ToString());
                }

                return userID;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="113" sc="13" el="115" ec="14">EditHtml.ascx.cs</location>
            <body hash="daff6ab6c912eebdba8a3dc0071416c2"><![CDATA[{
                Settings["Content_LockedBy"] = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="TempContent">
          <declaration><![CDATA[private string TempContent]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="121" sc="13" el="128" ec="14">EditHtml.ascx.cs</location>
            <body hash="2df1c8923561fd489590a6305ace04d9"><![CDATA[{
                var content = "";
                if ((ViewState["TempContent"] != null))
                {
                    content = ViewState["TempContent"].ToString();
                }
                return content;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="130" sc="13" el="132" ec="14">EditHtml.ascx.cs</location>
            <body hash="7da4d770660cd53e8d995e3eb1e292e6"><![CDATA[{
                ViewState["TempContent"] = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="WorkflowID">
          <declaration><![CDATA[private int WorkflowID]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="83" sc="13" el="97" ec="14">EditHtml.ascx.cs</location>
            <body hash="d349e3071cb19ba6ed03dbd9cbf57458"><![CDATA[{
                int workflowID;

                if (ViewState["WorkflowID"] == null)
                {
                    workflowID = _htmlTextController.GetWorkflow(ModuleId, TabId, PortalId).Value;
                    ViewState.Add("WorkflowID", workflowID);
                }
                else
                {
                    workflowID = int.Parse(ViewState["WorkflowID"].ToString());
                }

                return workflowID;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="HtmlModule">
      <declaration><![CDATA[public class HtmlModule : PortalModuleBase, IActionable]]></declaration>
      <documentation>-----------------------------------------------------------------------------
 <summary>
   The HtmlModule Class provides the UI for displaying the Html
 </summary>
 <remarks>
 </remarks>
 <history>
 </history>
 -----------------------------------------------------------------------------</documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public HtmlModule()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="lblContent_UpdateLabel">
          <declaration><![CDATA[private void lblContent_UpdateLabel(object source, DNNLabelEditEventArgs e)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   lblContent_UpdateLabel allows for inline editing of content
 </summary>
 <remarks>
 </remarks>
 <history>
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="195" sc="9" el="233" ec="10">HtmlModule.ascx.cs</location>
            <body hash="e9cefbe68843a5c1f5bf116d65ee97a1"><![CDATA[{
            try
            {
                // verify security 
                if ((!new PortalSecurity().InputFilter(e.Text, PortalSecurity.FilterFlag.NoScripting).Equals(e.Text)))
                {
                    throw new SecurityException();
                }
                else if (EditorEnabled && IsEditable && PortalSettings.UserMode == PortalSettings.Mode.Edit)
                {
                    // get content
                    var objHTML = new HtmlTextController();
                    var objWorkflow = new WorkflowStateController();
                    HtmlTextInfo objContent = objHTML.GetTopHtmlText(ModuleId, false, WorkflowID);
                    if (objContent == null)
                    {
                        objContent = new HtmlTextInfo();
                        objContent.ItemID = -1;
                    }

                    // set content attributes
                    objContent.ModuleID = ModuleId;
                    objContent.Content = Server.HtmlEncode(e.Text);
                    objContent.WorkflowID = WorkflowID;
                    objContent.StateID = objWorkflow.GetFirstWorkflowStateID(WorkflowID);

                    // save the content
                    objHTML.UpdateHtmlText(objContent, objHTML.GetMaximumVersionHistory(PortalId));
                }
                else
                {
                    throw new SecurityException();
                }
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="ModuleAction_Click">
          <declaration><![CDATA[private void ModuleAction_Click(object sender, ActionEventArgs e)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   ModuleAction_Click handles all ModuleAction events raised from the action menu
 </summary>
 <remarks>
 </remarks>
 <history>
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="245" sc="9" el="276" ec="10">HtmlModule.ascx.cs</location>
            <body hash="79b8859780a0e40b335d467523dc8247"><![CDATA[{
            try
            {
                if (e.Action.CommandArgument == "publish")
                {
                    // verify security 
                    if (IsEditable && PortalSettings.UserMode == PortalSettings.Mode.Edit)
                    {
                        // get content
                        var objHTML = new HtmlTextController();
                        HtmlTextInfo objContent = objHTML.GetTopHtmlText(ModuleId, false, WorkflowID);

                        var objWorkflow = new WorkflowStateController();
                        if (objContent.StateID == objWorkflow.GetFirstWorkflowStateID(WorkflowID))
                        {
                            // publish content
                            objContent.StateID = objWorkflow.GetNextWorkflowStateID(objContent.WorkflowID, objContent.StateID);

                            // save the content
                            objHTML.UpdateHtmlText(objContent, objHTML.GetMaximumVersionHistory(PortalId));

                            // refresh page
                            Response.Redirect(Globals.NavigateURL(), true);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   Page_Init runs when the control is initialized
 </summary>
 <remarks>
 </remarks>
 <history>
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="74" sc="9" el="89" ec="10">HtmlModule.ascx.cs</location>
            <body hash="8b8033521d8db1ce817d655b6cd0667a"><![CDATA[{
            base.OnInit(e);
            lblContent.UpdateLabel += lblContent_UpdateLabel;
            EditorEnabled = PortalSettings.InlineEditorEnabled;
            try
            {
                WorkflowID = new HtmlTextController().GetWorkflow(ModuleId, TabId, PortalId).Value;

                //Add an Action Event Handler to the Skin
                AddActionHandler(ModuleAction_Click);
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   Page_Load runs when the control is loaded
 </summary>
 <remarks>
 </remarks>
 <history>
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="101" sc="9" el="183" ec="10">HtmlModule.ascx.cs</location>
            <body hash="448942cd95e66411a82a81078c947535"><![CDATA[{
            base.OnLoad(e);
            try
            {
                var objHTML = new HtmlTextController();

                // edit in place
                if (EditorEnabled && IsEditable && PortalSettings.UserMode == PortalSettings.Mode.Edit)
                {
                    EditorEnabled = true;
                }
                else
                {
                    EditorEnabled = false;
                }

                // get content
                HtmlTextInfo htmlTextInfo = null;
                string contentString = "";

                htmlTextInfo = objHTML.GetTopHtmlText(ModuleId, !IsEditable, WorkflowID);

                if ((htmlTextInfo != null))
                {
                    //don't decode yet (this is done in FormatHtmlText)
                    contentString = htmlTextInfo.Content;
                }
                else
                {
                    // get default content from resource file
                    if (!IsPostBack)
                    {
                        if (PortalSettings.UserMode == PortalSettings.Mode.Edit)
                        {
                            if (EditorEnabled)
                            {
                                contentString = Localization.GetString("AddContentFromToolBar.Text", LocalResourceFile);
                            }
                            else
                            {
                                contentString = Localization.GetString("AddContentFromActionMenu.Text", LocalResourceFile);
                            }
                        }
                        else
                        {
                            // hide the module if no content and in view mode
                            ContainerControl.Visible = false;
                        }
                    }
                }

                // token replace
                if (EditorEnabled && Settings["HtmlText_ReplaceTokens"] != null)
                {
                    EditorEnabled = !Convert.ToBoolean(Settings["HtmlText_ReplaceTokens"]);
                }

                // localize toolbar
                if (!IsPostBack)
                {
                    if (EditorEnabled)
                    {
                        foreach (DNNToolBarButton button in editorDnnToobar.Buttons)
                        {
                            button.ToolTip = Localization.GetString(button.ToolTip + ".ToolTip", LocalResourceFile);
                        }
                    }
                    else
                    {
                        editorDnnToobar.Visible = false;
                    }
                }

                lblContent.EditEnabled = EditorEnabled;

                // add content to module
                lblContent.Controls.Add(new LiteralControl(HtmlTextController.FormatHtmlText(ModuleId, contentString, Settings)));
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="editorDnnToobar">
          <declaration><![CDATA[protected DNNToolBar editorDnnToobar;]]></declaration>
          <documentation>
            <summary>
 editorDnnToobar control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="EditorEnabled">
          <declaration><![CDATA[private bool EditorEnabled;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblContent">
          <declaration><![CDATA[protected DNNLabelEdit lblContent;]]></declaration>
          <documentation>
            <summary>
 lblContent control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="tbBold">
          <declaration><![CDATA[protected DNNToolBarButton tbBold;]]></declaration>
          <documentation>
            <summary>
 tbBold control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="tbCancel">
          <declaration><![CDATA[protected DNNToolBarButton tbCancel;]]></declaration>
          <documentation>
            <summary>
 tbCancel control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="tbCreateLink">
          <declaration><![CDATA[protected DNNToolBarButton tbCreateLink;]]></declaration>
          <documentation>
            <summary>
 tbCreateLink control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="tbEdit">
          <declaration><![CDATA[protected DNNToolBarButton tbEdit;]]></declaration>
          <documentation>
            <summary>
 tbEdit control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="tbIndent">
          <declaration><![CDATA[protected DNNToolBarButton tbIndent;]]></declaration>
          <documentation>
            <summary>
 tbIndent control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="tbItalic">
          <declaration><![CDATA[protected DNNToolBarButton tbItalic;]]></declaration>
          <documentation>
            <summary>
 tbItalic control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="tbJustifyCenter">
          <declaration><![CDATA[protected DNNToolBarButton tbJustifyCenter;]]></declaration>
          <documentation>
            <summary>
 tbJustifyCenter control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="tbJustifyLeft">
          <declaration><![CDATA[protected DNNToolBarButton tbJustifyLeft;]]></declaration>
          <documentation>
            <summary>
 tbJustifyLeft control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="tbJustifyRight">
          <declaration><![CDATA[protected DNNToolBarButton tbJustifyRight;]]></declaration>
          <documentation>
            <summary>
 tbJustifyRight control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="tbOrderedList">
          <declaration><![CDATA[protected DNNToolBarButton tbOrderedList;]]></declaration>
          <documentation>
            <summary>
 tbOrderedList control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="tbOutdent">
          <declaration><![CDATA[protected DNNToolBarButton tbOutdent;]]></declaration>
          <documentation>
            <summary>
 tbOutdent control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="tbSave">
          <declaration><![CDATA[protected DNNToolBarButton tbSave;]]></declaration>
          <documentation>
            <summary>
 tbSave control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="tbUnderline">
          <declaration><![CDATA[protected DNNToolBarButton tbUnderline;]]></declaration>
          <documentation>
            <summary>
 tbUnderline control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="tbUnorderedList">
          <declaration><![CDATA[protected DNNToolBarButton tbUnorderedList;]]></declaration>
          <documentation>
            <summary>
 tbUnorderedList control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="WorkflowID">
          <declaration><![CDATA[private int WorkflowID;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="ModuleActions">
          <declaration><![CDATA[public ModuleActionCollection ModuleActions]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   ModuleActions is an interface property that returns the module actions collection for the module
 </summary>
 <remarks>
 </remarks>
 <history>
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="294" sc="13" el="382" ec="14">HtmlModule.ascx.cs</location>
            <body hash="6aa97f149364539045a2f22546801659"><![CDATA[{
                // add the Edit Text action
                var Actions = new ModuleActionCollection();
                Actions.Add(GetNextActionID(),
                            Localization.GetString(ModuleActionType.AddContent, LocalResourceFile),
                            ModuleActionType.AddContent,
                            "",
                            "",
                            EditUrl(),
                            false,
                            SecurityAccessLevel.Edit,
                            true,
                            false);

                // get the content
                var objHTML = new HtmlTextController();
                var objWorkflow = new WorkflowStateController();
                WorkflowID = objHTML.GetWorkflow(ModuleId, TabId, PortalId).Value;

                HtmlTextInfo objContent = objHTML.GetTopHtmlText(ModuleId, false, WorkflowID);
                if ((objContent != null))
                {
                    // if content is in the first state
                    if (objContent.StateID == objWorkflow.GetFirstWorkflowStateID(WorkflowID))
                    {
                        // if not direct publish workflow
                        if (objWorkflow.GetWorkflowStates(WorkflowID).Count > 1)
                        {
                            // add publish action
                            Actions.Add(GetNextActionID(),
                                        Localization.GetString("PublishContent.Action", LocalResourceFile),
                                        ModuleActionType.AddContent,
                                        "publish",
                                        "grant.gif",
                                        "",
                                        true,
                                        SecurityAccessLevel.Edit,
                                        true,
                                        false);
                        }
                    }
                    else
                    {
                        // if the content is not in the last state of the workflow then review is required
                        if (objContent.StateID != objWorkflow.GetLastWorkflowStateID(WorkflowID))
                        {
                            // if the user has permissions to review the content
                            if (WorkflowStatePermissionController.HasWorkflowStatePermission(WorkflowStatePermissionController.GetWorkflowStatePermissions(objContent.StateID), "REVIEW"))
                            {
                                // add approve and reject actions
                                Actions.Add(GetNextActionID(),
                                            Localization.GetString("ApproveContent.Action", LocalResourceFile),
                                            ModuleActionType.AddContent,
                                            "",
                                            "grant.gif",
                                            EditUrl("action", "approve", "Review"),
                                            false,
                                            SecurityAccessLevel.Edit,
                                            true,
                                            false);
                                Actions.Add(GetNextActionID(),
                                            Localization.GetString("RejectContent.Action", LocalResourceFile),
                                            ModuleActionType.AddContent,
                                            "",
                                            "deny.gif",
                                            EditUrl("action", "reject", "Review"),
                                            false,
                                            SecurityAccessLevel.Edit,
                                            true,
                                            false);
                            }
                        }
                    }
                }

                // add mywork to action menu
                Actions.Add(GetNextActionID(),
                            Localization.GetString("MyWork.Action", LocalResourceFile),
                            "MyWork.Action",
                            "",
                            "view.gif",
                            EditUrl("MyWork"),
                            false,
                            SecurityAccessLevel.Edit,
                            true,
                            false);

                return Actions;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="HtmlTextController">
      <declaration><![CDATA[public class HtmlTextController : ISearchable, IPortable, IUpgradeable]]></declaration>
      <documentation>-----------------------------------------------------------------------------
 Namespace:  DotNetNuke.Modules.Html
 Project:    DotNetNuke
 Class:      HtmlTextController
 -----------------------------------------------------------------------------
 <summary>
   The HtmlTextController is the Controller class for managing HtmlText information the HtmlText module
 </summary>
 <remarks>
 </remarks>
 <history>
 </history>
 -----------------------------------------------------------------------------</documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public HtmlTextController()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
        <constructor name=".cctor">
          <declaration><![CDATA[static HtmlTextController()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="73" sc="9" el="73" ec="102">Components\HtmlTextController.cs</location>
            <body hash="90c4ff4bf224525cc41c5fcdeb611106"><![CDATA[private static readonly MessagingController _messagingController = new MessagingController()]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="ClearModuleSettings">
          <declaration><![CDATA[private void ClearModuleSettings(ModuleInfo objModule)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="655" sc="9" el="661" ec="10">Components\HtmlTextController.cs</location>
            <body hash="b36fd47a2ad702e25bb440020eb32b71"><![CDATA[{
            var moduleController = new ModuleController();
            if (objModule.ModuleDefinition.FriendlyName == "Text/HTML")
            {
                moduleController.DeleteModuleSetting(objModule.ModuleID, "WorkFlowID");
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="CreateUserNotifications">
          <declaration><![CDATA[private void CreateUserNotifications(HtmlTextInfo objHtmlText)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   CreateUserNotifications creates HtmlTextUser records and optionally sends email notifications to participants in a Workflow
 </summary>
 <remarks>
 </remarks>
 <param name="objHtmlText">An HtmlTextInfo object</param>
 <history>
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="119" sc="9" el="260" ec="10">Components\HtmlTextController.cs</location>
            <body hash="be6289fddd1f1d54d2aa466d8209d2d5"><![CDATA[{
            var _htmlTextUserController = new HtmlTextUserController();
            HtmlTextUserInfo _htmlTextUser = null;
            UserInfo _user = null;

            // clean up old user notification records
            _htmlTextUserController.DeleteHtmlTextUsers();

            // ensure we have latest htmltext object loaded
            objHtmlText = GetHtmlText(objHtmlText.ModuleID, objHtmlText.ItemID);

            // build collection of users to notify
            var objWorkflow = new WorkflowStateController();
            var arrUsers = new ArrayList();

            // if not published
            if (objHtmlText.IsPublished == false)
            {
                arrUsers.Add(objHtmlText.CreatedByUserID); // include content owner 
            }

            // if not draft and not published
            if (objHtmlText.StateID != objWorkflow.GetFirstWorkflowStateID(objHtmlText.WorkflowID) && objHtmlText.IsPublished == false)
            {
                // get users from permissions for state
                var objRoles = new RoleController();
                foreach (WorkflowStatePermissionInfo permission in
                    WorkflowStatePermissionController.GetWorkflowStatePermissions(objHtmlText.StateID))
                {
                    if (permission.AllowAccess)
                    {
                        if (Null.IsNull(permission.UserID))
                        {
                            RoleInfo objRole = new RoleController().GetRole(permission.RoleID, objHtmlText.PortalID);
                            if ((objRole != null))
                            {
                                foreach (UserRoleInfo objUserRole in
                                    objRoles.GetUserRolesByRoleName(objHtmlText.PortalID, objRole.RoleName))
                                {
                                    if (!arrUsers.Contains(objUserRole.UserID))
                                    {
                                        arrUsers.Add(objUserRole.UserID);
                                    }
                                }
                            }
                        }
                        else
                        {
                            if (!arrUsers.Contains(permission.UserID))
                            {
                                arrUsers.Add(permission.UserID);
                            }
                        }
                    }
                }
            }

            // process notifications
            if (arrUsers.Count > 0 || (objHtmlText.IsPublished && objHtmlText.Notify))
            {
                // get tabid from module 
                var objModules = new ModuleController();
                ModuleInfo objModule = objModules.GetModule(objHtmlText.ModuleID);

                PortalSettings objPortalSettings = PortalController.GetCurrentPortalSettings();
                if (objPortalSettings != null)
                {
                    string strResourceFile = string.Format("{0}/DesktopModules/{1}/{2}/{3}",
                                                           Globals.ApplicationPath,
                                                           objModule.DesktopModule.FolderName,
                                                           Localization.LocalResourceDirectory,
                                                           Localization.LocalSharedResourceFile);
                    string strSubject = Localization.GetString("NotificationSubject", strResourceFile);
                    string strBody = Localization.GetString("NotificationBody", strResourceFile);
                    strBody = strBody.Replace("[URL]", Globals.NavigateURL(objModule.TabID));
                    strBody = strBody.Replace("[STATE]", objHtmlText.StateName);

                    // process user notification collection

                    foreach (int intUserID in arrUsers)
                    {
                        // create user notification record 
                        _htmlTextUser = new HtmlTextUserInfo();
                        _htmlTextUser.ItemID = objHtmlText.ItemID;
                        _htmlTextUser.StateID = objHtmlText.StateID;
                        _htmlTextUser.ModuleID = objHtmlText.ModuleID;
                        _htmlTextUser.TabID = objModule.TabID;
                        _htmlTextUser.UserID = intUserID;
                        _htmlTextUserController.AddHtmlTextUser(_htmlTextUser);

                        // send an email notification to a user if the state indicates to do so
                        if (objHtmlText.Notify)
                        {
                            _user = UserController.GetUserById(objHtmlText.PortalID, intUserID);
                            if ((_user != null))
                            {
                                var message = new Message();
                                message.FromUserID = objPortalSettings.AdministratorId;
                                message.ToUserID = _user.UserID;
                                message.Subject = strSubject;
                                message.Body = strBody;
                                message.Status = MessageStatusType.Unread;
                                _messagingController.SaveMessage(message);
                                try
                                {
                                    Services.Mail.Mail.SendEmail(objPortalSettings.Email, _user.Email, message.Subject, message.Body);
                                }
                                catch (Exception exc)
                                {
                                    Exceptions.LogException(exc);
                                }
                            }
                        }
                    }

                    // if published and the published state specifies to notify members of the workflow
                    if (objHtmlText.IsPublished && objHtmlText.Notify)
                    {
                        // send email notification to the author
                        _user = UserController.GetUserById(objHtmlText.PortalID, objHtmlText.CreatedByUserID);
                        if ((_user != null))
                        {
                            var message = new Message();
                            message.FromUserID = objPortalSettings.AdministratorId;
                            message.ToUserID = _user.UserID;
                            message.Subject = strSubject;
                            message.Body = strBody;
                            message.Status = MessageStatusType.Unread;
                            //_messagingController.SaveMessage(message);
                            try
                            {
                                Services.Mail.Mail.SendEmail(objPortalSettings.Email, objPortalSettings.Email, message.Subject, message.Body);
                            }
                            catch (Exception exc)
                            {
                                Exceptions.LogException(exc);
                            }
                        }
                    }
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteHtmlText">
          <declaration><![CDATA[public void DeleteHtmlText(int ModuleID, int ItemID)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   DeleteHtmlText deletes an HtmlTextInfo object for the Module and Item
 </summary>
 <remarks>
 </remarks>
 <param name="ModuleID">The ID of the Module</param>
 <param name="ItemID">The ID of the Item</param>
 <history>
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="274" sc="9" el="279" ec="10">Components\HtmlTextController.cs</location>
            <body hash="5f8d6332e38bb8d67f11274200809f2f"><![CDATA[{
            DataProvider.Instance().DeleteHtmlText(ModuleID, ItemID);

            // refresh output cache
            ModuleController.SynchronizeModule(ModuleID);
        }]]></body>
          </codeblock>
        </method>
        <method name="DeTokeniseLinks">
          <declaration><![CDATA[private string DeTokeniseLinks(string content, int portalId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="76" sc="9" el="88" ec="10">Components\HtmlTextController.cs</location>
            <body hash="6dbf0e93caca8a5a1adf42a42be97697"><![CDATA[{

            var portalController = new PortalController();
            var portal = portalController.GetPortal(portalId);
            var portalRoot = UrlUtils.Combine(Globals.ApplicationPath, portal.HomeDirectory);
            if (!portalRoot.StartsWith("/"))
            {
                portalRoot = "/" + portalRoot;
            }
            content = content.Replace(PortalRootToken, portalRoot);

            return content;
        }]]></body>
          </codeblock>
        </method>
        <method name="ExportModule">
          <declaration><![CDATA[public string ExportModule(int moduleId)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   ExportModule implements the IPortable ExportModule Interface
 </summary>
 <remarks>
 </remarks>
 <param name="moduleId">The Id of the module to be exported</param>
 <history>
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="736" sc="9" el="752" ec="10">Components\HtmlTextController.cs</location>
            <body hash="d23f6f10b85eb048d47985486ec33b4f"><![CDATA[{
            string xml = "";

            var moduleController = new ModuleController();
            ModuleInfo module = moduleController.GetModule(moduleId);
            int workflowID = GetWorkflow(moduleId, module.TabID, module.PortalID).Value;

            HtmlTextInfo content = GetTopHtmlText(moduleId, true, workflowID);
            if ((content != null))
            {
                xml += "<htmltext>";
                xml += "<content>" + XmlUtils.XMLEncode(TokeniseLinks(content.Content, module.PortalID)) + "</content>";
                xml += "</htmltext>";
            }

            return xml;
        }]]></body>
          </codeblock>
        </method>
        <method name="FormatHtmlText">
          <declaration><![CDATA[public static string FormatHtmlText(int ModuleId, string Content, Hashtable Settings)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   FormatHtmlText formats HtmlText content for display in the browser
 </summary>
 <remarks>
 </remarks>
 <param name="ModuleId">The Module ID</param>
 <param name="Content">The HtmlText Content</param>
 <param name="Settings">A Hashtable of Module Settings</param>
 <history>
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="294" sc="9" el="320" ec="10">Components\HtmlTextController.cs</location>
            <body hash="48884f1ca7eef5aa46778f2bc44d6617"><![CDATA[{
            PortalSettings objPortalSettings = PortalController.GetCurrentPortalSettings();

            // token replace
            bool blnReplaceTokens = false;
            if (!string.IsNullOrEmpty(Convert.ToString(Settings["HtmlText_ReplaceTokens"])))
            {
                blnReplaceTokens = Convert.ToBoolean(Settings["HtmlText_ReplaceTokens"]);
            }
            if (blnReplaceTokens)
            {
                var tr = new TokenReplace();
                tr.AccessingUser = UserController.GetCurrentUserInfo();
                tr.DebugMessages = objPortalSettings.UserMode != PortalSettings.Mode.View;
                tr.ModuleId = ModuleId;
                Content = tr.ReplaceEnvironmentTokens(Content);
            }

            // Html decode content
            Content = HttpUtility.HtmlDecode(Content);

            // manage relative paths
            Content = ManageRelativePaths(Content, objPortalSettings.HomeDirectory, "src", objPortalSettings.PortalId);
            Content = ManageRelativePaths(Content, objPortalSettings.HomeDirectory, "background", objPortalSettings.PortalId);

            return Content;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetAllHtmlText">
          <declaration><![CDATA[public List<HtmlTextInfo> GetAllHtmlText(int ModuleID)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   GetAllHtmlText gets a collection of HtmlTextInfo objects for the Module and Workflow
 </summary>
 <remarks>
 </remarks>
 <param name="ModuleID">The ID of the Module</param>
 <history>
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="333" sc="9" el="335" ec="10">Components\HtmlTextController.cs</location>
            <body hash="933ee12d353bbac5cbb927847a3b21a2"><![CDATA[{
            return CBO.FillCollection<HtmlTextInfo>(DataProvider.Instance().GetAllHtmlText(ModuleID));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetHtmlText">
          <declaration><![CDATA[public HtmlTextInfo GetHtmlText(int ModuleID, int ItemID)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   GetHtmlText gets the HtmlTextInfo object for the Module, Item, and Workflow
 </summary>
 <remarks>
 </remarks>
 <param name="ModuleID">The ID of the Module</param>
 <param name="ItemID">The ID of the Item</param>
 <history>
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="349" sc="9" el="351" ec="10">Components\HtmlTextController.cs</location>
            <body hash="30e92c7d7be226e431ba637d3840a9f3"><![CDATA[{
            return (HtmlTextInfo) (CBO.FillObject(DataProvider.Instance().GetHtmlText(ModuleID, ItemID), typeof (HtmlTextInfo)));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetMaximumVersionHistory">
          <declaration><![CDATA[public int GetMaximumVersionHistory(int PortalID)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   GetMaximumVersionHistory retrieves the maximum number of versions to store for a module
 </summary>
 <remarks>
 </remarks>
 <param name="PortalID">The ID of the Portal</param>
 <history>
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="674" sc="9" el="689" ec="10">Components\HtmlTextController.cs</location>
            <body hash="508e2ba73fef11a14ba71ff1507dc89d"><![CDATA[{
            int intMaximumVersionHistory = -1;

            // get from portal settings
            intMaximumVersionHistory = int.Parse(PortalController.GetPortalSetting("MaximumVersionHistory", PortalID, "-1"));

            // if undefined at portal level, set portal default
            if (intMaximumVersionHistory == -1)
            {
                intMaximumVersionHistory = 5;
                // default
                PortalController.UpdatePortalSetting(PortalID, "MaximumVersionHistory", intMaximumVersionHistory.ToString());
            }

            return intMaximumVersionHistory;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetSearchItems">
          <declaration><![CDATA[public SearchItemInfoCollection GetSearchItems(ModuleInfo ModInfo)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   GetSearchItems implements the ISearchable Interface
 </summary>
 <remarks>
 </remarks>
 <param name="ModInfo">The ModuleInfo for the module to be Indexed</param>
 <history>
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="810" sc="9" el="837" ec="10">Components\HtmlTextController.cs</location>
            <body hash="f7d3623769b634e2bf9fdd3301f39339"><![CDATA[{
            var objWorkflow = new WorkflowStateController();
            int WorkflowID = GetWorkflow(ModInfo.ModuleID, ModInfo.TabID, ModInfo.PortalID).Value;
            var SearchItemCollection = new SearchItemInfoCollection();
            HtmlTextInfo objContent = GetTopHtmlText(ModInfo.ModuleID, true, WorkflowID);

            if (objContent != null)
            {
                //content is encoded in the Database so Decode before Indexing
                string strContent = HttpUtility.HtmlDecode(objContent.Content);

                //Get the description string
                string strDescription = HtmlUtils.Shorten(HtmlUtils.Clean(strContent, false), MAX_DESCRIPTION_LENGTH, "...");

                var SearchItem = new SearchItemInfo(ModInfo.ModuleTitle,
                                                    strDescription,
                                                    objContent.LastModifiedByUserID,
                                                    objContent.LastModifiedOnDate,
                                                    ModInfo.ModuleID,
                                                    "",
                                                    strContent,
                                                    "",
                                                    Null.NullInteger);
                SearchItemCollection.Add(SearchItem);
            }

            return SearchItemCollection;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetTopHtmlText">
          <declaration><![CDATA[public HtmlTextInfo GetTopHtmlText(int ModuleID, bool IsPublished, int WorkflowID)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   GetTopHtmlText gets the most recent HtmlTextInfo object for the Module, Workflow, and State
 </summary>
 <remarks>
 </remarks>
 <param name="ModuleID">The ID of the Module</param>
 <param name="IsPublished">Whether the content has been published or not</param>
 <param name="WorkflowID">The Workflow ID</param>
 <history>
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="366" sc="9" el="392" ec="10">Components\HtmlTextController.cs</location>
            <body hash="28aa69bb4c23e2037ec8317b0505f5a7"><![CDATA[{
            var objHtmlText = (HtmlTextInfo) (CBO.FillObject(DataProvider.Instance().GetTopHtmlText(ModuleID, IsPublished), typeof (HtmlTextInfo)));
            if (objHtmlText != null)
            {
                // check if workflow has changed
                if (IsPublished == false && objHtmlText.WorkflowID != WorkflowID)
                {
                    // get proper state for workflow
                    var objWorkflow = new WorkflowStateController();
                    objHtmlText.WorkflowID = WorkflowID;
                    objHtmlText.WorkflowName = "[REPAIR_WORKFLOW]";
                    if (objHtmlText.IsPublished)
                    {
                        objHtmlText.StateID = objWorkflow.GetLastWorkflowStateID(WorkflowID);
                    }
                    else
                    {
                        objHtmlText.StateID = objWorkflow.GetFirstWorkflowStateID(WorkflowID);
                    }
                    // update object
                    UpdateHtmlText(objHtmlText, GetMaximumVersionHistory(objHtmlText.PortalID));
                    // get object again
                    objHtmlText = (HtmlTextInfo) (CBO.FillObject(DataProvider.Instance().GetTopHtmlText(ModuleID, IsPublished), typeof (HtmlTextInfo)));
                }
            }
            return objHtmlText;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetWorkflow">
          <declaration><![CDATA[public KeyValuePair<string, int> GetWorkflow(int ModuleId, int TabId, int PortalId)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   GetWorkFlow retrieves the currently active Workflow for the Portal
 </summary>
 <remarks>
 </remarks>
 <param name="ModuleId">The ID of the Module</param>
 <param name="TabId">The Tab ID</param>
 <param name="PortalId">The ID of the Portal</param>
 <history>
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="407" sc="9" el="454" ec="10">Components\HtmlTextController.cs</location>
            <body hash="7f0a94297d80a15ff7438fa610d91c32"><![CDATA[{
            int workFlowId = Null.NullInteger;
            string workFlowType = Null.NullString;

            // get from module settings
            var moduleController = new ModuleController();
            Hashtable settings = moduleController.GetModuleSettings(ModuleId);
            if (settings["WorkflowID"] != null)
            {
                workFlowId = Convert.ToInt32(settings["WorkflowID"]);
                workFlowType = "Module";
            }
            if (workFlowId == Null.NullInteger)
            {
                // if undefined at module level, get from tab settings
                settings = new TabController().GetTabSettings(TabId);
                if (settings["WorkflowID"] != null)
                {
                    workFlowId = Convert.ToInt32(settings["WorkflowID"]);
                    workFlowType = "Page";
                }
            }

            if (workFlowId == Null.NullInteger)
            {
                // if undefined at tab level, get from portal settings
                workFlowId = int.Parse(PortalController.GetPortalSetting("WorkflowID", PortalId, "-1"));
                workFlowType = "Site";
            }

            // if undefined at portal level, set portal default
            if (workFlowId == Null.NullInteger)
            {
                var objWorkflow = new WorkflowStateController();
                ArrayList arrWorkflows = objWorkflow.GetWorkflows(PortalId);
                foreach (WorkflowStateInfo objState in arrWorkflows)
                {
                    // use direct publish as default
                    if (Null.IsNull(objState.PortalID) && objState.WorkflowName == "Direct Publish")
                    {
                        workFlowId = objState.WorkflowID;
                        workFlowType = "Module";
                    }
                }
            }

            return new KeyValuePair<string, int>(workFlowType, workFlowId);
        }]]></body>
          </codeblock>
        </method>
        <method name="ImportModule">
          <declaration><![CDATA[public void ImportModule(int ModuleID, string Content, string Version, int UserId)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   ImportModule implements the IPortable ImportModule Interface
 </summary>
 <remarks>
 </remarks>
 <param name="ModuleID">The ID of the Module being imported</param>
 <param name="Content">The Content being imported</param>
 <param name="Version">The Version of the Module Content being imported</param>
 <param name="UserId">The UserID of the User importing the Content</param>
 <history>
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="768" sc="9" el="793" ec="10">Components\HtmlTextController.cs</location>
            <body hash="cd217a1f4356cc3ecf34ffafe7121aab"><![CDATA[{
            var moduleController = new ModuleController();
            ModuleInfo module = moduleController.GetModule(ModuleID);
            var workflowStateController = new WorkflowStateController();
            int workflowID = GetWorkflow(ModuleID, module.TabID, module.PortalID).Value;
            XmlNode xml = Globals.GetContent(Content, "htmltext");

            var htmlContent = new HtmlTextInfo();
            htmlContent.ModuleID = ModuleID;
            // convert Version to System.Version
            var objVersion = new Version(Version);
            if (objVersion >= new Version(5, 1, 0))
            {
                // current module content
                htmlContent.Content = DeTokeniseLinks(xml.SelectSingleNode("content").InnerText, module.PortalID);
            }
            else
            {
                // legacy module content
                htmlContent.Content = DeTokeniseLinks(xml.SelectSingleNode("desktophtml").InnerText, module.PortalID);
            }
            htmlContent.WorkflowID = workflowID;
            htmlContent.StateID = workflowStateController.GetFirstWorkflowStateID(workflowID);
            // import
            UpdateHtmlText(htmlContent, GetMaximumVersionHistory(module.PortalID));
        }]]></body>
          </codeblock>
        </method>
        <method name="ManageRelativePaths">
          <declaration><![CDATA[public static string ManageRelativePaths(string strHTML, string strUploadDirectory, string strToken, int intPortalID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="457" sc="9" el="521" ec="10">Components\HtmlTextController.cs</location>
            <body hash="24889a7dc83ae4f67a220203245c8a59"><![CDATA[{
            int P = 0;
            int R = 0;
            int S = 0;
            int tLen = 0;
            string strURL = null;
            var sbBuff = new StringBuilder("");

            if (!string.IsNullOrEmpty(strHTML))
            {
                tLen = strToken.Length + 2;
                string uploadDirectory = strUploadDirectory.ToLower();

                //find position of first occurrance:
                P = strHTML.IndexOf(strToken + "=\"", StringComparison.InvariantCultureIgnoreCase);
                while (P != -1)
                {
                    sbBuff.Append(strHTML.Substring(S, P - S + tLen));
                    //keep charactes left of URL
                    S = P + tLen;
                    //save startpos of URL
                    R = strHTML.IndexOf("\"", S);
                    //end of URL
                    if (R >= 0)
                    {
                        strURL = strHTML.Substring(S, R - S).ToLower();
                    }
                    else
                    {
                        strURL = strHTML.Substring(S).ToLower();
                    }

                    // if we are linking internally
                    if (strURL.Contains("://") == false)
                    {
                        // remove the leading portion of the path if the URL contains the upload directory structure
                        string strDirectory = uploadDirectory;
                        if (!strDirectory.EndsWith("/"))
                        {
                            strDirectory += "/";
                        }
                        if (strURL.IndexOf(strDirectory) != -1)
                        {
                            S = S + strURL.IndexOf(strDirectory) + strDirectory.Length;
                            strURL = strURL.Substring(strURL.IndexOf(strDirectory) + strDirectory.Length);
                        }
                        // add upload directory
                        if (strURL.StartsWith("/") == false)
                        {
                            sbBuff.Append(uploadDirectory);
                        }
                    }
                    //find position of next occurrance
                    P = strHTML.IndexOf(strToken + "=\"", S + strURL.Length + 2, StringComparison.InvariantCultureIgnoreCase);
                }

                if (S > -1)
                {
                    sbBuff.Append(strHTML.Substring(S));
                }
                //append characters of last URL and behind
            }

            return sbBuff.ToString();
        }]]></body>
          </codeblock>
        </method>
        <method name="TokeniseLinks">
          <declaration><![CDATA[private string TokeniseLinks(string content, int portalId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="91" sc="9" el="104" ec="10">Components\HtmlTextController.cs</location>
            <body hash="9f183ef9d3e48585ff553d91b5229256"><![CDATA[{
            //Replace any relative portal root reference by a token "{{PortalRoot}}"
            var portalController = new PortalController();
            var portal = portalController.GetPortal(portalId);
            var portalRoot = UrlUtils.Combine(Globals.ApplicationPath, portal.HomeDirectory);
            if (!portalRoot.StartsWith("/"))
            {
                portalRoot = "/" + portalRoot;
            }
            Regex exp = new Regex(portalRoot, RegexOptions.IgnoreCase);
            content = exp.Replace(content, PortalRootToken);

            return content;
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateHtmlText">
          <declaration><![CDATA[public void UpdateHtmlText(HtmlTextInfo htmlContent, int MaximumVersionHistory)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   UpdateHtmlText creates a new HtmlTextInfo object or updates an existing HtmlTextInfo object
 </summary>
 <remarks>
 </remarks>
 <param name="htmlContent">An HtmlTextInfo object</param>
 <param name="MaximumVersionHistory">The maximum number of versions to retain</param>
 <history>
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="535" sc="9" el="599" ec="10">Components\HtmlTextController.cs</location>
            <body hash="f0e0ee741a0c7fd55e1431cccc218711"><![CDATA[{
            var _workflowStateController = new WorkflowStateController();
            bool blnCreateNewVersion = false;

            // determine if we are creating a new version of content or updating an existing version
            if (htmlContent.ItemID != -1)
            {
                if (htmlContent.WorkflowName != "[REPAIR_WORKFLOW]")
                {
                    HtmlTextInfo objContent = GetTopHtmlText(htmlContent.ModuleID, false, htmlContent.WorkflowID);
                    if (objContent != null)
                    {
                        if (objContent.StateID == _workflowStateController.GetLastWorkflowStateID(htmlContent.WorkflowID))
                        {
                            blnCreateNewVersion = true;
                        }
                    }
                }
            }
            else
            {
                blnCreateNewVersion = true;
            }

            // determine if content is published
            if (htmlContent.StateID == _workflowStateController.GetLastWorkflowStateID(htmlContent.WorkflowID))
            {
                htmlContent.IsPublished = true;
            }
            else
            {
                htmlContent.IsPublished = false;
            }

            if (blnCreateNewVersion)
            {
                // add content
                htmlContent.ItemID = DataProvider.Instance().AddHtmlText(htmlContent.ModuleID,
                                                                         htmlContent.Content,
                                                                         htmlContent.StateID,
                                                                         htmlContent.IsPublished,
                                                                         UserController.GetCurrentUserInfo().UserID,
                                                                         MaximumVersionHistory);
            }
            else
            {
                // update content
                DataProvider.Instance().UpdateHtmlText(htmlContent.ItemID, htmlContent.Content, htmlContent.StateID, htmlContent.IsPublished, UserController.GetCurrentUserInfo().UserID);
            }

            // add log history
            var logInfo = new HtmlTextLogInfo();
            logInfo.ItemID = htmlContent.ItemID;
            logInfo.StateID = htmlContent.StateID;
            logInfo.Approved = htmlContent.Approved;
            logInfo.Comment = htmlContent.Comment;
            var objLogs = new HtmlTextLogController();
            objLogs.AddHtmlTextLog(logInfo);

            // create user notifications
            CreateUserNotifications(htmlContent);

            // refresh output cache
            ModuleController.SynchronizeModule(htmlContent.ModuleID);
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateMaximumVersionHistory">
          <declaration><![CDATA[public void UpdateMaximumVersionHistory(int PortalID, int MaximumVersionHistory)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   UpdateWorkFlowID updates the currently active WorkflowID for the Portal
 </summary>
 <remarks>
 </remarks>
 <param name="PortalID">The ID of the Portal</param>
 <param name="MaximumVersionHistory">The MaximumVersionHistory</param>
 <history>
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="703" sc="9" el="717" ec="10">Components\HtmlTextController.cs</location>
            <body hash="725f0f503534ce1f81f66632ef70bf4f"><![CDATA[{
            // data integrity check
            if (MaximumVersionHistory < 0)
            {
                MaximumVersionHistory = 5;
                // default
            }

            // save portal setting
            PortalSettings objPortalSettings = PortalController.GetCurrentPortalSettings();
            if (PortalSecurity.IsInRole(objPortalSettings.AdministratorRoleName))
            {
                PortalController.UpdatePortalSetting(PortalID, "MaximumVersionHistory", MaximumVersionHistory.ToString());
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateWorkflow">
          <declaration><![CDATA[public void UpdateWorkflow(int ObjectID, string WorkFlowType, int WorkflowID, bool ReplaceExistingSettings)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   UpdateWorkFlow updates the currently active Workflow
 </summary>
 <remarks>
 </remarks>
 <param name="WorkFlowType">The type of workflow (Module | Page | Site)</param>
 <param name="WorkflowID">The ID of the Workflow</param>
 <param name="ObjectID">The ID of the object to apply the update to (depends on WorkFlowType)</param>
 <param name="ReplaceExistingSettings">Should existing settings be overwritten?</param>
 <history>
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="615" sc="9" el="652" ec="10">Components\HtmlTextController.cs</location>
            <body hash="68d84d858b14612861ab431e3b3078c6"><![CDATA[{
            var tabController = new TabController();
            var moduleController = new ModuleController();

            switch (WorkFlowType)
            {
                case "Module":
                    moduleController.UpdateModuleSetting(ObjectID, "WorkflowID", WorkflowID.ToString());
                    break;
                case "Page":
                    tabController.UpdateTabSetting(ObjectID, "WorkflowID", WorkflowID.ToString());
                    if (ReplaceExistingSettings)
                    {
                        //Get All Modules on the current Tab
                        foreach (var kvp in moduleController.GetTabModules(ObjectID))
                        {
                            ClearModuleSettings(kvp.Value);
                        }
                    }
                    break;
                case "Site":
                    PortalController.UpdatePortalSetting(ObjectID, "WorkflowID", WorkflowID.ToString());
                    if (ReplaceExistingSettings)
                    {
                        //Get All Tabs aon the Site
                        foreach (var kvp in tabController.GetTabsByPortal(ObjectID))
                        {
                            tabController.DeleteTabSetting(kvp.Value.TabID, "WorkFlowID");
                        }
                        //Get All Modules in the current Site
                        foreach (ModuleInfo objModule in moduleController.GetModules(ObjectID))
                        {
                            ClearModuleSettings(objModule);
                        }
                    }
                    break;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="UpgradeModule">
          <declaration><![CDATA[public string UpgradeModule(string Version)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="844" sc="9" el="864" ec="10">Components\HtmlTextController.cs</location>
            <body hash="e4329fc6fca09be09d810f6f11ca204e"><![CDATA[{
            switch (Version)
            {
                case "05.01.02":
                    //remove the Code SubDirectory
                    Config.RemoveCodeSubDirectory("HTML");

                    //Once the web.config entry is done we can safely remove the HTML folder
                    var arrPaths = new string[1];
                    arrPaths[0] = "App_Code\\HTML\\";
                    FileSystemUtils.DeleteFiles(arrPaths);
                    break;
                case "06.00.00":
                    DesktopModuleInfo desktopModule = DesktopModuleController.GetDesktopModuleByModuleName("DNN_HTML", Null.NullInteger);
                    desktopModule.Category = "Common";
                    DesktopModuleController.SaveDesktopModule(desktopModule, false, false);
                    break;
           }

           return string.Empty;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_messagingController">
          <declaration><![CDATA[private static readonly MessagingController _messagingController = new MessagingController();]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="MAX_DESCRIPTION_LENGTH">
          <declaration><![CDATA[private const int MAX_DESCRIPTION_LENGTH = 100;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="PortalRootToken">
          <declaration><![CDATA[private const string PortalRootToken = "{{PortalRoot}}";]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="HtmlTextInfo">
      <declaration><![CDATA[public class HtmlTextInfo : BaseEntityInfo]]></declaration>
      <documentation>-----------------------------------------------------------------------------
 Namespace:  DotNetNuke.Modules.Html
 Project:    DotNetNuke
 Class:      HtmlTextInfo
 -----------------------------------------------------------------------------
 <summary>
   Defines an instance of an HtmlText object
 </summary>
 <remarks>
 </remarks>
 <history>
 </history>
 -----------------------------------------------------------------------------</documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private bool _Approved = true;]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="46" sc="9" el="49" ec="34">Components\HtmlTextInfo.cs</location>
            <body hash="17aea03bfde9953dc5389e915849db0c"><![CDATA[private bool _Approved = true;
        private string _Comment = "";
        private bool _IsActive = true;
        private int _ItemID = -1;]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
        <field name="_Approved">
          <declaration><![CDATA[private bool _Approved = true;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_Comment">
          <declaration><![CDATA[private string _Comment = "";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_IsActive">
          <declaration><![CDATA[private bool _IsActive = true;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_ItemID">
          <declaration><![CDATA[private int _ItemID = -1;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="Approved">
          <declaration><![CDATA[public bool Approved]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="113" sc="13" el="115" ec="14">Components\HtmlTextInfo.cs</location>
            <body hash="a5dfbbe126baa57e67d605418561915d"><![CDATA[{
                return _Approved;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="117" sc="13" el="119" ec="14">Components\HtmlTextInfo.cs</location>
            <body hash="c3cd54135ef1c7b08d8b9d68f0fb9f7c"><![CDATA[{
                _Approved = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="Comment">
          <declaration><![CDATA[public string Comment]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="101" sc="13" el="103" ec="14">Components\HtmlTextInfo.cs</location>
            <body hash="68c6d7ed65c020790ddc0e9f0d0acf04"><![CDATA[{
                return _Comment;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="105" sc="13" el="107" ec="14">Components\HtmlTextInfo.cs</location>
            <body hash="a84aa8abb3e3c7b4a9ffa587cd24ea0b"><![CDATA[{
                _Comment = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="Content">
          <declaration><![CDATA[public string Content]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="DisplayName">
          <declaration><![CDATA[public string DisplayName]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="IsActive">
          <declaration><![CDATA[public bool IsActive]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="89" sc="13" el="91" ec="14">Components\HtmlTextInfo.cs</location>
            <body hash="60f443debbab1fe5681665da174a9ff5"><![CDATA[{
                return _IsActive;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="93" sc="13" el="95" ec="14">Components\HtmlTextInfo.cs</location>
            <body hash="fded552691aefe5866629a86ed982c6a"><![CDATA[{
                _IsActive = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="IsPublished">
          <declaration><![CDATA[public bool IsPublished]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ItemID">
          <declaration><![CDATA[public int ItemID]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="57" sc="13" el="59" ec="14">Components\HtmlTextInfo.cs</location>
            <body hash="c6034f3e8811cdf87e58f445aad9a669"><![CDATA[{
                return _ItemID;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="61" sc="13" el="63" ec="14">Components\HtmlTextInfo.cs</location>
            <body hash="fd11cb96334cc4380e3cdbf6e1c7ee88"><![CDATA[{
                _ItemID = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="ModuleID">
          <declaration><![CDATA[public int ModuleID]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Notify">
          <declaration><![CDATA[public bool Notify]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="PortalID">
          <declaration><![CDATA[public int PortalID]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="StateID">
          <declaration><![CDATA[public int StateID]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="StateName">
          <declaration><![CDATA[public string StateName]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Version">
          <declaration><![CDATA[public int Version]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="WorkflowID">
          <declaration><![CDATA[public int WorkflowID]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="WorkflowName">
          <declaration><![CDATA[public string WorkflowName]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="HtmlTextLogController">
      <declaration><![CDATA[public class HtmlTextLogController]]></declaration>
      <documentation>-----------------------------------------------------------------------------
 Namespace:  DotNetNuke.Modules.Html
 Project:    DotNetNuke
 Class:      HtmlTextLogController
 -----------------------------------------------------------------------------
 <summary>
   The HtmlTextLogController is the Controller class for managing Log History information the HtmlText module
 </summary>
 <remarks>
 </remarks>
 <history>
 </history>
 -----------------------------------------------------------------------------</documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public HtmlTextLogController()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="AddHtmlTextLog">
          <declaration><![CDATA[public void AddHtmlTextLog(HtmlTextLogInfo objHtmlTextLog)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   AddHtmlTextLog creates a new HtmlTextLog for an Item
 </summary>
 <remarks>
 </remarks>
 <param name="objHtmlTextLog">An HtmlTextLogInfo object</param>
 <history>
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="76" sc="9" el="78" ec="10">Components\HtmlTextLogController.cs</location>
            <body hash="81c33052b4439cb9bc312267304b5913"><![CDATA[{
            DataProvider.Instance().AddHtmlTextLog(objHtmlTextLog.ItemID, objHtmlTextLog.StateID, objHtmlTextLog.Comment, objHtmlTextLog.Approved, UserController.GetCurrentUserInfo().UserID);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetHtmlTextLog">
          <declaration><![CDATA[public ArrayList GetHtmlTextLog(int ItemID)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   GetHtmlTextLog retrieves a collection of HtmlTextLogInfo objects for an Item
 </summary>
 <remarks>
 </remarks>
 <param name="ItemID">The Id of the Item</param>
 <history>
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="61" sc="9" el="63" ec="10">Components\HtmlTextLogController.cs</location>
            <body hash="a75d43e660f4b9548d65d1df96668f04"><![CDATA[{
            return CBO.FillCollection(DataProvider.Instance().GetHtmlTextLog(ItemID), typeof (HtmlTextLogInfo));
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="HtmlTextLogInfo">
      <declaration><![CDATA[public class HtmlTextLogInfo]]></declaration>
      <documentation>-----------------------------------------------------------------------------
 Namespace:  DotNetNuke.Modules.Html
 Project:    DotNetNuke
 Class:      HtmlTextLogInfo
 -----------------------------------------------------------------------------
 <summary>
   Defines an instance of an HtmlTextLog object
 </summary>
 <remarks>
 </remarks>
 <history>
 </history>
 -----------------------------------------------------------------------------</documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public HtmlTextLogInfo()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="Approved">
          <declaration><![CDATA[public bool Approved]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Comment">
          <declaration><![CDATA[public string Comment]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="CreatedByUserID">
          <declaration><![CDATA[public int CreatedByUserID]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="CreatedOnDate">
          <declaration><![CDATA[public DateTime CreatedOnDate]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="DisplayName">
          <declaration><![CDATA[public string DisplayName]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ItemID">
          <declaration><![CDATA[public int ItemID]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="StateID">
          <declaration><![CDATA[public int StateID]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="StateName">
          <declaration><![CDATA[public string StateName]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="HtmlTextUserController">
      <declaration><![CDATA[public class HtmlTextUserController]]></declaration>
      <documentation>-----------------------------------------------------------------------------
 Namespace:  DotNetNuke.Modules.Html
 Project:    DotNetNuke
 Class:      HtmlTextUserController
 -----------------------------------------------------------------------------
 <summary>
   The HtmlTextUserController is the Controller class for managing User information the HtmlText module
 </summary>
 <remarks>
 </remarks>
 <history>
 </history>
 -----------------------------------------------------------------------------</documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public HtmlTextUserController()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="AddHtmlTextUser">
          <declaration><![CDATA[public void AddHtmlTextUser(HtmlTextUserInfo objHtmlTextUser)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   AddHtmlTextUser creates a new HtmlTextUser for an Item
 </summary>
 <remarks>
 </remarks>
 <param name="objHtmlTextUser">An HtmlTextUserInfo object</param>
 <history>
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="76" sc="9" el="78" ec="10">Components\HtmlTextUserController.cs</location>
            <body hash="e54a519286ac2ad1a92bc659ea4e4e48"><![CDATA[{
            DataProvider.Instance().AddHtmlTextUser(objHtmlTextUser.ItemID, objHtmlTextUser.StateID, objHtmlTextUser.ModuleID, objHtmlTextUser.TabID, objHtmlTextUser.UserID);
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteHtmlTextUsers">
          <declaration><![CDATA[public void DeleteHtmlTextUsers()]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   DeleteHtmlTextUsers cleans up old HtmlTextUser records
 </summary>
 <remarks>
 </remarks>
 <history>
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="90" sc="9" el="92" ec="10">Components\HtmlTextUserController.cs</location>
            <body hash="30a6c42d312c286eb7c05472401a0764"><![CDATA[{
            DataProvider.Instance().DeleteHtmlTextUsers();
        }]]></body>
          </codeblock>
        </method>
        <method name="GetHtmlTextUser">
          <declaration><![CDATA[public ArrayList GetHtmlTextUser(int UserID)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   GetHtmlTextUser retrieves a collection of HtmlTextUserInfo objects for an Item
 </summary>
 <remarks>
 </remarks>
 <param name="UserID">The Id of the User</param>
 <history>
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="61" sc="9" el="63" ec="10">Components\HtmlTextUserController.cs</location>
            <body hash="09b855726da1bb669bc05c14452215fe"><![CDATA[{
            return CBO.FillCollection(DataProvider.Instance().GetHtmlTextUser(UserID), typeof (HtmlTextUserInfo));
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="HtmlTextUserInfo">
      <declaration><![CDATA[public class HtmlTextUserInfo]]></declaration>
      <documentation>-----------------------------------------------------------------------------
 Namespace:  DotNetNuke.Modules.Html
 Project:    DotNetNuke
 Class:      HtmlTextUserInfo
 -----------------------------------------------------------------------------
 <summary>
   Defines an instance of an HtmlTextUser object
 </summary>
 <remarks>
 </remarks>
 <history>
 </history>
 -----------------------------------------------------------------------------</documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public HtmlTextUserInfo()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
        <field name="_Module">
          <declaration><![CDATA[private ModuleInfo _Module;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="CreatedOnDate">
          <declaration><![CDATA[public DateTime CreatedOnDate]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ItemID">
          <declaration><![CDATA[public int ItemID]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Module">
          <declaration><![CDATA[public ModuleInfo Module]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="79" sc="13" el="86" ec="14">Components\HtmlTextUserInfo.cs</location>
            <body hash="399176d10ffcbbda7294b181cbf1e3de"><![CDATA[{
                if (_Module == null)
                {
                    var ctrl = new ModuleController();
                    _Module = ctrl.GetModule(ModuleID, TabID);
                }
                return _Module;
            }]]></body>
          </codeblock>
        </property>
        <property name="ModuleID">
          <declaration><![CDATA[public int ModuleID]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ModuleTitle">
          <declaration><![CDATA[public string ModuleTitle]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="66" sc="13" el="73" ec="14">Components\HtmlTextUserInfo.cs</location>
            <body hash="a690fe359889a757b6e1c2a4d05236e7"><![CDATA[{
                string _ModuleTitle = Null.NullString;
                if (Module != null)
                {
                    _ModuleTitle = Module.ModuleTitle;
                }
                return _ModuleTitle;
            }]]></body>
          </codeblock>
        </property>
        <property name="StateID">
          <declaration><![CDATA[public int StateID]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="StateName">
          <declaration><![CDATA[public string StateName]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="TabID">
          <declaration><![CDATA[public int TabID]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="UserID">
          <declaration><![CDATA[public int UserID]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="MyWork">
      <declaration><![CDATA[public class MyWork : PortalModuleBase]]></declaration>
      <documentation>
        <summary>
   MyWork allows a user to view any outstanding workflow items
 </summary>
 <remarks>
 </remarks>
 <history>
 </history></documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public MyWork()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="FormatURL">
          <declaration><![CDATA[public string FormatURL(object dataItem)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="49" sc="9" el="52" ec="10">MyWork.ascx.cs</location>
            <body hash="e79ab10ecdfbfda9354e222eeeb7701c"><![CDATA[{
            var objHtmlTextUser = (HtmlTextUserInfo) dataItem;
            return "<a href=\"" + Globals.NavigateURL(objHtmlTextUser.TabID) + "#" + objHtmlTextUser.ModuleID + "\">" + objHtmlTextUser.ModuleTitle + " ( " + objHtmlTextUser.StateName + " )</a>";
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
            <summary>
   Page_Load runs when the control is loaded
 </summary>
 <remarks>
 </remarks>
 <history>
 </history></documentation>
          <codeblock>
            <location sl="66" sc="9" el="83" ec="10">MyWork.ascx.cs</location>
            <body hash="b812dcce8b188ea1c8701e43831eddcb"><![CDATA[{
            base.OnLoad(e);
            hlCancel.NavigateUrl = Globals.NavigateURL();

            try
            {
                if (!Page.IsPostBack)
                {
                    var objHtmlTextUsers = new HtmlTextUserController();
                    dgTabs.DataSource = objHtmlTextUsers.GetHtmlTextUser(UserInfo.UserID);
                    dgTabs.DataBind();
                }
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="dgTabs">
          <declaration><![CDATA[protected DnnGrid dgTabs;]]></declaration>
          <documentation>
            <summary>
 dgTabs control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="hlCancel">
          <declaration><![CDATA[protected HyperLink hlCancel;]]></declaration>
          <documentation>
            <summary>
 hlCancel control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="Settings">
      <declaration><![CDATA[public class Settings : ModuleSettingsBase]]></declaration>
      <documentation>
        <summary>
   The Settings ModuleSettingsBase is used to manage the
   settings for the HTML Module
 </summary>
 <remarks>
 </remarks>
 <history>
   [leupold]	    08/12/2007	created
 </history></documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public Settings()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="DisplayWorkflowDetails">
          <declaration><![CDATA[private void DisplayWorkflowDetails()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="67" sc="9" el="83" ec="10">Settings.ascx.cs</location>
            <body hash="01841e0c6d9e8014235ac28e1d2cf9eb"><![CDATA[{
            if ((cboWorkflow.SelectedValue != null))
            {
                var objWorkflow = new WorkflowStateController();
                var strDescription = "";
                var arrStates = objWorkflow.GetWorkflowStates(int.Parse(cboWorkflow.SelectedValue));
                if (arrStates.Count > 0)
                {
                    foreach (WorkflowStateInfo objState in arrStates)
                    {
                        strDescription = strDescription + " >> " + "<strong>" + objState.StateName + "</strong>";
                    }
                    strDescription = strDescription + "<br />" + ((WorkflowStateInfo) arrStates[0]).Description;
                }
                lblDescription.Text = strDescription;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="LoadSettings">
          <declaration><![CDATA[public override void LoadSettings()]]></declaration>
          <documentation>
            <summary>
   LoadSettings loads the settings from the Database and displays them
 </summary>
 <remarks>
 </remarks>
 <history>
 </history></documentation>
          <codeblock>
            <location sl="97" sc="9" el="141" ec="10">Settings.ascx.cs</location>
            <body hash="99f92ede783cf88fb17cb49dbc470a0f"><![CDATA[{
            try
            {
                if (!Page.IsPostBack)
                {
                    var htmlTextController = new HtmlTextController();
                    var workflowStateController = new WorkflowStateController();

                    // get replace token settings
                    if (ModuleSettings["HtmlText_ReplaceTokens"] != null)
                    {
                        chkReplaceTokens.Checked = Convert.ToBoolean(ModuleSettings["HtmlText_ReplaceTokens"]);
                    }

                    // get workflow/version settings
                    var arrWorkflows = new ArrayList();
                    foreach (WorkflowStateInfo objState in workflowStateController.GetWorkflows(PortalId))
                    {
                        if (!objState.IsDeleted)
                        {
                            arrWorkflows.Add(objState);
                        }
                    }
                    cboWorkflow.DataSource = arrWorkflows;
                    cboWorkflow.DataBind();
                    var workflow = htmlTextController.GetWorkflow(ModuleId, TabId, PortalId);
                    if ((cboWorkflow.Items.FindByValue(workflow.Value.ToString()) != null))
                    {
                        cboWorkflow.Items.FindByValue(workflow.Value.ToString()).Selected = true;
                    }
                    DisplayWorkflowDetails();


                    if (rblApplyTo.Items.FindByValue(workflow.Key) != null)
                    {
                        rblApplyTo.Items.FindByValue(workflow.Key).Selected = true;
                    }
                }
                //Module failed to load
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="52" sc="9" el="55" ec="10">Settings.ascx.cs</location>
            <body hash="6a084d4ccde33f5d7c4839b12a425a58"><![CDATA[{
            base.OnLoad(e);
            cboWorkflow.SelectedIndexChanged += OnWorkflowSelectedIndexChanged;
        }]]></body>
          </codeblock>
        </method>
        <method name="OnWorkflowSelectedIndexChanged">
          <declaration><![CDATA[protected void OnWorkflowSelectedIndexChanged(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="58" sc="9" el="60" ec="10">Settings.ascx.cs</location>
            <body hash="0d86aeee851bfebb038179b97c15bc63"><![CDATA[{
            DisplayWorkflowDetails();
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateSettings">
          <declaration><![CDATA[public override void UpdateSettings()]]></declaration>
          <documentation>
            <summary>
   UpdateSettings saves the modified settings to the Database
 </summary>
          </documentation>
          <codeblock>
            <location sl="147" sc="9" el="188" ec="10">Settings.ascx.cs</location>
            <body hash="005899e7bf4f802c448eee1b7467f76b"><![CDATA[{
            try
            {
                var htmlTextController = new HtmlTextController();
                var objWorkflow = new WorkflowStateController();

                // update replace token setting
                var objModules = new ModuleController();
                objModules.UpdateModuleSetting(ModuleId, "HtmlText_ReplaceTokens", chkReplaceTokens.Checked.ToString());

                // disable module caching if token replace is enabled
                if (chkReplaceTokens.Checked)
                {
                    ModuleInfo objModule = objModules.GetModule(ModuleId, TabId, false);
                    if (objModule.CacheTime > 0)
                    {
                        objModule.CacheTime = 0;
                        objModules.UpdateModule(objModule);
                    }
                }

                // update workflow/version settings
                switch (rblApplyTo.SelectedValue)
                {
                    case "Module":
                        htmlTextController.UpdateWorkflow(ModuleId, rblApplyTo.SelectedValue, Int32.Parse(cboWorkflow.SelectedValue), chkReplace.Checked);
                        break;
                    case "Page":
                        htmlTextController.UpdateWorkflow(TabId, rblApplyTo.SelectedValue, Int32.Parse(cboWorkflow.SelectedValue), chkReplace.Checked);
                        break;
                    case "Site":
                        htmlTextController.UpdateWorkflow(PortalId, rblApplyTo.SelectedValue, Int32.Parse(cboWorkflow.SelectedValue), chkReplace.Checked);
                        break;
                }

                //Module failed to load
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="cboWorkflow">
          <declaration><![CDATA[protected DropDownList cboWorkflow;]]></declaration>
          <documentation>
            <summary>
 cboWorkflow control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="chkReplace">
          <declaration><![CDATA[protected CheckBox chkReplace;]]></declaration>
          <documentation>
            <summary>
 chkReplace control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="chkReplaceTokens">
          <declaration><![CDATA[protected CheckBox chkReplaceTokens;]]></declaration>
          <documentation>
            <summary>
 chkReplaceTokens control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="divApplyTo">
          <declaration><![CDATA[protected HtmlGenericControl divApplyTo;]]></declaration>
          <documentation>
            <summary>
 divApplyTo control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="lblDescription">
          <declaration><![CDATA[protected Label lblDescription;]]></declaration>
          <documentation>
            <summary>
 lblDescription control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="plApplyTo">
          <declaration><![CDATA[protected UserControl plApplyTo;]]></declaration>
          <documentation>
            <summary>
 plApplyTo control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="plReplaceTokens">
          <declaration><![CDATA[protected UserControl plReplaceTokens;]]></declaration>
          <documentation>
            <summary>
 plReplaceTokens control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="plWorkflow">
          <declaration><![CDATA[protected UserControl plWorkflow;]]></declaration>
          <documentation>
            <summary>
 plWorkflow control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="rblApplyTo">
          <declaration><![CDATA[protected RadioButtonList rblApplyTo;]]></declaration>
          <documentation>
            <summary>
 rblApplyTo control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="SqlDataProvider">
      <declaration><![CDATA[public class SqlDataProvider : DataProvider]]></declaration>
      <documentation>-----------------------------------------------------------------------------
 <summary>
   The SqlDataProvider is a concrete class that provides the SQL Server implementation of the Data Access Layer for the HtmlText module
 </summary>
 <remarks>
 </remarks>
 <history>
 </history>
 -----------------------------------------------------------------------------</documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private readonly ProviderConfiguration _providerConfiguration = ProviderConfiguration.GetProviderConfiguration("data");]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="54" sc="9" el="81" ec="10">Components\SqlDataProvider.cs</location>
            <body hash="6befa2824e68cf186deed653e1c82a67"><![CDATA[private readonly ProviderConfiguration _providerConfiguration = ProviderConfiguration.GetProviderConfiguration(ProviderType);

        private readonly string _providerPath;

        #region Constructors

        public SqlDataProvider()
        {
            // Read the configuration specific information for this provider
            var objProvider = (Provider) (_providerConfiguration.Providers[_providerConfiguration.DefaultProvider]);

            // Read the attributes for this provider
            _connectionString = Config.GetConnectionString();

            _providerPath = objProvider.Attributes["providerPath"];

            _objectQualifier = objProvider.Attributes["objectQualifier"];
            if (!string.IsNullOrEmpty(_objectQualifier) && _objectQualifier.EndsWith("_") == false)
            {
                _objectQualifier += "_";
            }

            _databaseOwner = objProvider.Attributes["databaseOwner"];
            if (!string.IsNullOrEmpty(_databaseOwner) && _databaseOwner.EndsWith(".") == false)
            {
                _databaseOwner += ".";
            }
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="AddHtmlText">
          <declaration><![CDATA[public override int AddHtmlText(int ModuleID, string Content, int StateID, bool IsPublished, int CreatedByUserID, int History)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="144" sc="9" el="146" ec="10">Components\SqlDataProvider.cs</location>
            <body hash="e104855488de2ec9d9479b6bc854b77d"><![CDATA[{
            return Convert.ToInt32(SqlHelper.ExecuteScalar(ConnectionString, DatabaseOwner + ObjectQualifier + "AddHtmlText", ModuleID, Content, StateID, IsPublished, CreatedByUserID, History));
        }]]></body>
          </codeblock>
        </method>
        <method name="AddHtmlTextLog">
          <declaration><![CDATA[public override void AddHtmlTextLog(int ItemID, int StateID, string Comment, bool Approved, int CreatedByUserID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="164" sc="9" el="166" ec="10">Components\SqlDataProvider.cs</location>
            <body hash="599f3a009127c93458864c9930947784"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "AddHtmlTextLog", ItemID, StateID, Comment, Approved, CreatedByUserID);
        }]]></body>
          </codeblock>
        </method>
        <method name="AddHtmlTextUser">
          <declaration><![CDATA[public override void AddHtmlTextUser(int ItemID, int StateID, int ModuleID, int TabID, int UserID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="174" sc="9" el="176" ec="10">Components\SqlDataProvider.cs</location>
            <body hash="3a6eac4f40445b119b8ba3be5b3aab10"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "AddHtmlTextUser", ItemID, StateID, ModuleID, TabID, UserID);
        }]]></body>
          </codeblock>
        </method>
        <method name="AddWorkflow">
          <declaration><![CDATA[public override int AddWorkflow(int PortalID, string WorkflowName, string Description, bool IsDeleted)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="40" sc="9" el="42" ec="10">Components\SqlDataProviderPro.cs</location>
            <body hash="bfe454510dd9d81f7c3845c3a64a05c7"><![CDATA[{
            return Convert.ToInt32(SqlHelper.ExecuteScalar(ConnectionString, DatabaseOwner + ObjectQualifier + "AddWorkflow", GetNull(PortalID), WorkflowName, Description, IsDeleted));
        }]]></body>
          </codeblock>
        </method>
        <method name="AddWorkflowState">
          <declaration><![CDATA[public override int AddWorkflowState(int WorkflowID, string StateName, int Order, bool Notify, bool IsActive)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="45" sc="9" el="47" ec="10">Components\SqlDataProviderPro.cs</location>
            <body hash="ddeb3e377ab44700883a49096735e147"><![CDATA[{
            return Convert.ToInt32(SqlHelper.ExecuteScalar(ConnectionString, DatabaseOwner + ObjectQualifier + "AddWorkflowState", WorkflowID, StateName, Order, Notify, IsActive));
        }]]></body>
          </codeblock>
        </method>
        <method name="AddWorkflowStatePermission">
          <declaration><![CDATA[public override int AddWorkflowStatePermission(int stateID, int permissionID, int roleID, bool allowAccess, int userID, int createdByUserID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="117" sc="9" el="127" ec="10">Components\SqlDataProviderPro.cs</location>
            <body hash="647da966e083dea51f12722b84c97a54"><![CDATA[{
            return
                Convert.ToInt32(SqlHelper.ExecuteScalar(ConnectionString,
                                                        DatabaseOwner + ObjectQualifier + "AddWorkflowStatePermission",
                                                        stateID,
                                                        permissionID,
                                                        GetRoleNull(roleID),
                                                        allowAccess,
                                                        GetNull(userID),
                                                        createdByUserID));
        }]]></body>
          </codeblock>
        </method>
        <method name="CanDeleteWorkFlowState">
          <declaration><![CDATA[public override bool CanDeleteWorkFlowState(int StateID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="50" sc="9" el="52" ec="10">Components\SqlDataProviderPro.cs</location>
            <body hash="476ac57906c4fb7850d2e775c0181738"><![CDATA[{
            return Convert.ToBoolean(SqlHelper.ExecuteScalar(ConnectionString, DatabaseOwner + ObjectQualifier + "CanDeleteWorkFlowState", StateID));
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteHtmlText">
          <declaration><![CDATA[public override void DeleteHtmlText(int ModuleID, int ItemID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="154" sc="9" el="156" ec="10">Components\SqlDataProvider.cs</location>
            <body hash="7354cdd72a02580753b9d1968d40b641"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "DeleteHtmlText", ModuleID, ItemID);
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteHtmlTextUsers">
          <declaration><![CDATA[public override void DeleteHtmlTextUsers()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="179" sc="9" el="181" ec="10">Components\SqlDataProvider.cs</location>
            <body hash="10802e7a1c4e6155657fc2aa886ce8d1"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "DeleteHtmlTextUsers");
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteWorkflowState">
          <declaration><![CDATA[public override void DeleteWorkflowState(int StateID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="55" sc="9" el="57" ec="10">Components\SqlDataProviderPro.cs</location>
            <body hash="0d67bb020183ac0a1650453ab0ff4d5c"><![CDATA[{
            SqlHelper.ExecuteScalar(ConnectionString, DatabaseOwner + ObjectQualifier + "DeleteWorkflowState", StateID);
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteWorkflowStatePermission">
          <declaration><![CDATA[public override void DeleteWorkflowStatePermission(int WorkflowStatePermissionID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="112" sc="9" el="114" ec="10">Components\SqlDataProviderPro.cs</location>
            <body hash="7a064fde4fd62b1dcbf618ed8c3c123e"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "DeleteWorkflowStatePermission", WorkflowStatePermissionID);
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteWorkflowStatePermissionsByStateID">
          <declaration><![CDATA[public override void DeleteWorkflowStatePermissionsByStateID(int StateID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="102" sc="9" el="104" ec="10">Components\SqlDataProviderPro.cs</location>
            <body hash="4884ef5e7265811d760d1ec32c13e26a"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "DeleteWorkflowStatePermissionsByStateID", StateID);
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteWorkflowStatePermissionsByUserID">
          <declaration><![CDATA[public override void DeleteWorkflowStatePermissionsByUserID(int userID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="107" sc="9" el="109" ec="10">Components\SqlDataProviderPro.cs</location>
            <body hash="5ca30cc9fb61ef7edec64efa19545044"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "DeleteWorkflowStatePermissionsByUserID", userID);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetAllHtmlText">
          <declaration><![CDATA[public override IDataReader GetAllHtmlText(int ModuleID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="139" sc="9" el="141" ec="10">Components\SqlDataProvider.cs</location>
            <body hash="424a5c0ac654fa1b7b7388daadaaf59e"><![CDATA[{
            return (SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetAllHtmlText", ModuleID));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetHtmlText">
          <declaration><![CDATA[public override IDataReader GetHtmlText(int ModuleID, int ItemID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="129" sc="9" el="131" ec="10">Components\SqlDataProvider.cs</location>
            <body hash="a8eca549a5edc09cb772862171ed9457"><![CDATA[{
            return (SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetHtmlText", ModuleID, ItemID));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetHtmlTextLog">
          <declaration><![CDATA[public override IDataReader GetHtmlTextLog(int ItemID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="159" sc="9" el="161" ec="10">Components\SqlDataProvider.cs</location>
            <body hash="81efd963ea90735907c334a88cb402f1"><![CDATA[{
            return (SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetHtmlTextLog", ItemID));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetHtmlTextUser">
          <declaration><![CDATA[public override IDataReader GetHtmlTextUser(int UserID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="169" sc="9" el="171" ec="10">Components\SqlDataProvider.cs</location>
            <body hash="6bb9f3f1bd3df1c8993a6a4974a26125"><![CDATA[{
            return (SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetHtmlTextUser", UserID));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetNull">
          <declaration><![CDATA[private object GetNull(object Field)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="124" sc="9" el="126" ec="10">Components\SqlDataProvider.cs</location>
            <body hash="5e733de7029f908a10963258a75eba29"><![CDATA[{
            return Null.GetNull(Field, DBNull.Value);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPermissionsByStateID">
          <declaration><![CDATA[public override IDataReader GetPermissionsByStateID(int StateID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="92" sc="9" el="94" ec="10">Components\SqlDataProviderPro.cs</location>
            <body hash="0a709d522d7eaf928b4febc9ebcb17ac"><![CDATA[{
            return (SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetPermissionsByStateID", StateID));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetRoleNull">
          <declaration><![CDATA[private object GetRoleNull(int RoleID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="80" sc="9" el="89" ec="10">Components\SqlDataProviderPro.cs</location>
            <body hash="b9b6ce53a577123bc041abe863282896"><![CDATA[{
            if (RoleID.ToString() == Globals.glbRoleNothing)
            {
                return DBNull.Value;
            }
            else
            {
                return RoleID;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetTopHtmlText">
          <declaration><![CDATA[public override IDataReader GetTopHtmlText(int ModuleID, bool IsPublished)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="134" sc="9" el="136" ec="10">Components\SqlDataProvider.cs</location>
            <body hash="3fb0a610ed7a285f20da818d03bccd49"><![CDATA[{
            return (SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetTopHtmlText", ModuleID, IsPublished));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetWorkflow">
          <declaration><![CDATA[public override IDataReader GetWorkflow(int WorkflowID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="60" sc="9" el="62" ec="10">Components\SqlDataProviderPro.cs</location>
            <body hash="d742215f6d600b82bb793caf8b1a106b"><![CDATA[{
            return (SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetWorkflow", WorkflowID));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetWorkflows">
          <declaration><![CDATA[public override IDataReader GetWorkflows(int PortalID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="184" sc="9" el="186" ec="10">Components\SqlDataProvider.cs</location>
            <body hash="3961e2c86b0bb2bab321315f967185f0"><![CDATA[{
            return (SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetWorkflows", PortalID));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetWorkflowState">
          <declaration><![CDATA[public override IDataReader GetWorkflowState(int StateID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="65" sc="9" el="67" ec="10">Components\SqlDataProviderPro.cs</location>
            <body hash="0b49bc832ba541486c7f44d143a14b12"><![CDATA[{
            return (SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetWorkflowState", StateID));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetWorkflowStatePermission">
          <declaration><![CDATA[public override IDataReader GetWorkflowStatePermission(int WorkflowStatePermissionID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="97" sc="9" el="99" ec="10">Components\SqlDataProviderPro.cs</location>
            <body hash="0a8ba2cad5c078f8d47a76c627c1764c"><![CDATA[{
            return (SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetWorkflowStatePermission", WorkflowStatePermissionID));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetWorkflowStatePermissions">
          <declaration><![CDATA[public override IDataReader GetWorkflowStatePermissions()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="194" sc="9" el="196" ec="10">Components\SqlDataProvider.cs</location>
            <body hash="11a8f8afb68215f493a27b70bab5e595"><![CDATA[{
            return (SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetWorkflowStatePermissions"));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetWorkflowStatePermissionsByStateID">
          <declaration><![CDATA[public override IDataReader GetWorkflowStatePermissionsByStateID(int StateID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="199" sc="9" el="201" ec="10">Components\SqlDataProvider.cs</location>
            <body hash="585358dd0ae02a17dd32050bc29652f3"><![CDATA[{
            return (SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetWorkflowStatePermissionsByStateID", StateID));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetWorkflowStates">
          <declaration><![CDATA[public override IDataReader GetWorkflowStates(int WorkflowID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="189" sc="9" el="191" ec="10">Components\SqlDataProvider.cs</location>
            <body hash="5a88e7f9c98018a1159d4d690cca2074"><![CDATA[{
            return (SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetWorkflowStates", WorkflowID));
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateHtmlText">
          <declaration><![CDATA[public override void UpdateHtmlText(int ItemID, string Content, int StateID, bool IsPublished, int LastModifiedByUserID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="149" sc="9" el="151" ec="10">Components\SqlDataProvider.cs</location>
            <body hash="f0b95276043ef2f80510551e84f29bda"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "UpdateHtmlText", ItemID, Content, StateID, IsPublished, LastModifiedByUserID);
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateWorkflow">
          <declaration><![CDATA[public override void UpdateWorkflow(int WorkflowID, string WorkflowName, string Description, bool IsDeleted)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="70" sc="9" el="72" ec="10">Components\SqlDataProviderPro.cs</location>
            <body hash="d466a2e7b3433dab9543db17d55ad3ec"><![CDATA[{
            SqlHelper.ExecuteScalar(ConnectionString, DatabaseOwner + ObjectQualifier + "UpdateWorkflow", WorkflowID, WorkflowName, Description, IsDeleted);
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateWorkflowState">
          <declaration><![CDATA[public override void UpdateWorkflowState(int StateID, string StateName, int Order, bool Notify, bool IsActive)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="75" sc="9" el="77" ec="10">Components\SqlDataProviderPro.cs</location>
            <body hash="ccd5961d47ceb1fc4f4f3611dad39011"><![CDATA[{
            SqlHelper.ExecuteScalar(ConnectionString, DatabaseOwner + ObjectQualifier + "UpdateWorkflowState", StateID, StateName, Order, Notify, IsActive);
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateWorkflowStatePermission">
          <declaration><![CDATA[public override void UpdateWorkflowStatePermission(int WorkflowStatePermissionID, int portalWorkflowStateID, int permissionID, int roleID, bool allowAccess, int userID, int lastModifiedByUserID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="131" sc="9" el="141" ec="10">Components\SqlDataProviderPro.cs</location>
            <body hash="2179e3c98371509d1a23cae7e4505a29"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString,
                                      DatabaseOwner + ObjectQualifier + "UpdateWorkflowStatePermission",
                                      WorkflowStatePermissionID,
                                      portalWorkflowStateID,
                                      permissionID,
                                      GetRoleNull(roleID),
                                      allowAccess,
                                      GetNull(userID),
                                      lastModifiedByUserID);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_connectionString">
          <declaration><![CDATA[private readonly string _connectionString;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_databaseOwner">
          <declaration><![CDATA[private readonly string _databaseOwner;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_objectQualifier">
          <declaration><![CDATA[private readonly string _objectQualifier;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_providerConfiguration">
          <declaration><![CDATA[private readonly ProviderConfiguration _providerConfiguration = ProviderConfiguration.GetProviderConfiguration("data");]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_providerPath">
          <declaration><![CDATA[private readonly string _providerPath;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ProviderType">
          <declaration><![CDATA[private const string ProviderType = "data";]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="ConnectionString">
          <declaration><![CDATA[public string ConnectionString]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="90" sc="13" el="92" ec="14">Components\SqlDataProvider.cs</location>
            <body hash="a1cae9de0897b69cea874bd026579b9a"><![CDATA[{
                return _connectionString;
            }]]></body>
          </codeblock>
        </property>
        <property name="DatabaseOwner">
          <declaration><![CDATA[public string DatabaseOwner]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="114" sc="13" el="116" ec="14">Components\SqlDataProvider.cs</location>
            <body hash="595cb59964d302a09c78cab7a38fb3da"><![CDATA[{
                return _databaseOwner;
            }]]></body>
          </codeblock>
        </property>
        <property name="ObjectQualifier">
          <declaration><![CDATA[public string ObjectQualifier]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="106" sc="13" el="108" ec="14">Components\SqlDataProvider.cs</location>
            <body hash="32ddc53c6939ab987d12c86e153b8389"><![CDATA[{
                return _objectQualifier;
            }]]></body>
          </codeblock>
        </property>
        <property name="ProviderPath">
          <declaration><![CDATA[public string ProviderPath]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="98" sc="13" el="100" ec="14">Components\SqlDataProvider.cs</location>
            <body hash="e34c03da51a7126f97f34ae4218642d2"><![CDATA[{
                return _providerPath;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="WorkflowStateController">
      <declaration><![CDATA[public class WorkflowStateController]]></declaration>
      <documentation>-----------------------------------------------------------------------------
 Namespace:  DotNetNuke.Modules.Html
 Project:    DotNetNuke
 Class:      WorkflowStateController
 -----------------------------------------------------------------------------
 <summary>
   The WorkflowStateController is the Controller class for managing workflows and states for the HtmlText module
 </summary>
 <remarks>
 </remarks>
 <history>
 </history>
 -----------------------------------------------------------------------------</documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public WorkflowStateController()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="AddWorkflow">
          <declaration><![CDATA[public int AddWorkflow(int PortalID, string WorkflowName, string Description, bool IsDeleted)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   AddWorkFlow creates a new workflow for the portal
 </summary>
 <remarks>
 </remarks>
 <param name="PortalID">The ID of the Portal</param>
 <param name="WorkflowName">The Name of the Workflow</param>
 <param name="Description">The Description of the Workflow</param>
 <param name="IsDeleted">Whether or not the Workflow is Active</param>
 <history>
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="50" sc="9" el="52" ec="10">Components\WorkflowStateControllerPro.cs</location>
            <body hash="7070c620a6bd82b63d4a62dc33bd4c53"><![CDATA[{
            return Convert.ToInt32(DataProvider.Instance().AddWorkflow(PortalID, WorkflowName, Description, IsDeleted));
        }]]></body>
          </codeblock>
        </method>
        <method name="AddWorkflowState">
          <declaration><![CDATA[public int AddWorkflowState(WorkflowStateInfo objWorkflowState)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   AddWorkFlowState creates a new workflow and state instance
 </summary>
 <remarks>
 </remarks>
 <param name="objWorkflowState">A WorkflowStateInfo object</param>
 <history>
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="65" sc="9" el="74" ec="10">Components\WorkflowStateControllerPro.cs</location>
            <body hash="227e0f4debfe40ebdd5097a905333168"><![CDATA[{
            int StateID =
                Convert.ToInt32(DataProvider.Instance().AddWorkflowState(objWorkflowState.WorkflowID,
                                                                         objWorkflowState.StateName,
                                                                         objWorkflowState.Order,
                                                                         objWorkflowState.Notify,
                                                                         objWorkflowState.IsActive));
            DataCache.RemoveCache(string.Format(WORKFLOW_CACHE_KEY, objWorkflowState.WorkflowID));
            return StateID;
        }]]></body>
          </codeblock>
        </method>
        <method name="CanDeleteWorkFlowState">
          <declaration><![CDATA[public bool CanDeleteWorkFlowState(int StateID)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   CanDeleteWorkFlowState determines whether a workflow state is in use and can be deleted
 </summary>
 <remarks>
 </remarks>
 <param name="StateID">A WorkflowState ID</param>
 <history>
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="87" sc="9" el="89" ec="10">Components\WorkflowStateControllerPro.cs</location>
            <body hash="50ea47587042aa889952f3d142b57625"><![CDATA[{
            return DataProvider.Instance().CanDeleteWorkFlowState(StateID);
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteWorkflowState">
          <declaration><![CDATA[public void DeleteWorkflowState(int StateID, int WorkflowID)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   DeleteWorkFlowState deletes a State instance
 </summary>
 <remarks>
 </remarks>
 <param name="StateID">The StateID</param>
 <param name="WorkflowID">The WorkflowID</param>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="101" sc="9" el="104" ec="10">Components\WorkflowStateControllerPro.cs</location>
            <body hash="02596e713e1fc67946c70605740233c2"><![CDATA[{
            DataProvider.Instance().DeleteWorkflowState(StateID);
            DataCache.RemoveCache(string.Format(WORKFLOW_CACHE_KEY, WorkflowID));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetFirstWorkflowStateID">
          <declaration><![CDATA[public int GetFirstWorkflowStateID(int WorkflowID)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   GetFirstWorkFlowStateID retrieves the first StateID for the Workflow
 </summary>
 <remarks>
 </remarks>
 <param name="WorkflowID">The ID of the Workflow</param>
 <history>
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="113" sc="9" el="121" ec="10">Components\WorkflowStateController.cs</location>
            <body hash="f34b21e94b7d7a289bcb5a3f5a18b515"><![CDATA[{
            int intStateID = -1;
            ArrayList arrWorkflowStates = GetWorkflowStates(WorkflowID);
            if (arrWorkflowStates.Count > 0)
            {
                intStateID = ((WorkflowStateInfo) (arrWorkflowStates[0])).StateID;
            }
            return intStateID;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetLastWorkflowStateID">
          <declaration><![CDATA[public int GetLastWorkflowStateID(int WorkflowID)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   GetLastWorkFlowStateID retrieves the last StateID for the Workflow
 </summary>
 <remarks>
 </remarks>
 <param name="WorkflowID">The ID of the Workflow</param>
 <history>
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="236" sc="9" el="244" ec="10">Components\WorkflowStateController.cs</location>
            <body hash="92f62cfee74c049aba92ed1a02200244"><![CDATA[{
            int intStateID = -1;
            ArrayList arrWorkflowStates = GetWorkflowStates(WorkflowID);
            if (arrWorkflowStates.Count > 0)
            {
                intStateID = ((WorkflowStateInfo) (arrWorkflowStates[arrWorkflowStates.Count - 1])).StateID;
            }
            return intStateID;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetNextWorkflowStateID">
          <declaration><![CDATA[public int GetNextWorkflowStateID(int WorkflowID, int StateID)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   GetNextWorkFlowStateID retrieves the next StateID for the Workflow and State specified
 </summary>
 <remarks>
 </remarks>
 <param name="WorkflowID">The ID of the Workflow</param>
 <param name="StateID">The ID of the State</param>
 <history>
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="186" sc="9" el="223" ec="10">Components\WorkflowStateController.cs</location>
            <body hash="f3e66391f4a46452971068b107315911"><![CDATA[{
            int intNextStateID = -1;
            ArrayList arrWorkflowStates = GetWorkflowStates(WorkflowID);
            int intItem = 0;

            // locate the current state
            for (intItem = 0; intItem < arrWorkflowStates.Count; intItem++)
            {
                if (((WorkflowStateInfo) (arrWorkflowStates[intItem])).StateID == StateID)
                {
                    intNextStateID = StateID;
                    break;
                }
            }

            // get next active state
            if (intNextStateID == StateID)
            {
                intItem = intItem + 1;
                while (intItem < arrWorkflowStates.Count)
                {
                    if (((WorkflowStateInfo) (arrWorkflowStates[intItem])).IsActive)
                    {
                        intNextStateID = ((WorkflowStateInfo) (arrWorkflowStates[intItem])).StateID;
                        break;
                    }
                    intItem = intItem + 1;
                }
            }

            // if none found then reset to first state
            if (intNextStateID == -1)
            {
                intNextStateID = GetFirstWorkflowStateID(WorkflowID);
            }

            return intNextStateID;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPreviousWorkflowStateID">
          <declaration><![CDATA[public int GetPreviousWorkflowStateID(int WorkflowID, int StateID)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   GetPreviousWorkFlowStateID retrieves the previous StateID for the Workflow and State specified
 </summary>
 <remarks>
 </remarks>
 <param name="WorkflowID">The ID of the Workflow</param>
 <param name="StateID">The ID of the State</param>
 <history>
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="135" sc="9" el="172" ec="10">Components\WorkflowStateController.cs</location>
            <body hash="7fbb9123a5ecef173a438fb0d2adc6bd"><![CDATA[{
            int intPreviousStateID = -1;
            ArrayList arrWorkflowStates = GetWorkflowStates(WorkflowID);
            int intItem = 0;

            // locate the current state
            for (intItem = 0; intItem < arrWorkflowStates.Count; intItem++)
            {
                if (((WorkflowStateInfo) (arrWorkflowStates[intItem])).StateID == StateID)
                {
                    intPreviousStateID = StateID;
                    break;
                }
            }

            // get previous active state
            if (intPreviousStateID == StateID)
            {
                intItem = intItem - 1;
                while (intItem >= 0)
                {
                    if (((WorkflowStateInfo) (arrWorkflowStates[intItem])).IsActive)
                    {
                        intPreviousStateID = ((WorkflowStateInfo) (arrWorkflowStates[intItem])).StateID;
                        break;
                    }
                    intItem = intItem - 1;
                }
            }

            // if none found then reset to first state
            if (intPreviousStateID == -1)
            {
                intPreviousStateID = GetFirstWorkflowStateID(WorkflowID);
            }

            return intPreviousStateID;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetWorkflow">
          <declaration><![CDATA[public WorkflowStateInfo GetWorkflow(int WorkflowID)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   GetWorkFlow retrieves a Workflow object
 </summary>
 <remarks>
 </remarks>
 <param name="WorkflowID">The ID of the Workflow</param>
 <history>
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="117" sc="9" el="119" ec="10">Components\WorkflowStateControllerPro.cs</location>
            <body hash="6ca9bc68a0e9d78f65931658646f46d6"><![CDATA[{
            return (WorkflowStateInfo) CBO.FillObject(DataProvider.Instance().GetWorkflow(WorkflowID), typeof (WorkflowStateInfo));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetWorkflows">
          <declaration><![CDATA[public ArrayList GetWorkflows(int PortalID)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   GetWorkFlows retrieves a collection of workflows for the portal
 </summary>
 <remarks>
 </remarks>
 <param name="PortalID">The ID of the Portal</param>
 <history>
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="66" sc="9" el="68" ec="10">Components\WorkflowStateController.cs</location>
            <body hash="d40441d30665108e61064a417fdd7bd8"><![CDATA[{
            return CBO.FillCollection(DataProvider.Instance().GetWorkflows(PortalID), typeof (WorkflowStateInfo));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetWorkflowState">
          <declaration><![CDATA[public WorkflowStateInfo GetWorkflowState(int StateID)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   GetWorkFlowState retrieves a WorkflowStateInfo object for the Workflow and State
 </summary>
 <remarks>
 </remarks>
 <param name="StateID">The ID of the State</param>
 <history>
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="132" sc="9" el="134" ec="10">Components\WorkflowStateControllerPro.cs</location>
            <body hash="68aa88802e6658ea9d0e5a8875834fc4"><![CDATA[{
            return (WorkflowStateInfo) CBO.FillObject(DataProvider.Instance().GetWorkflowState(StateID), typeof (WorkflowStateInfo));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetWorkflowStates">
          <declaration><![CDATA[public ArrayList GetWorkflowStates(int WorkflowID)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   GetWorkFlowStates retrieves a collection of WorkflowStateInfo objects for the Workflow from the cache
 </summary>
 <remarks>
 </remarks>
 <param name="WorkflowID">The ID of the Workflow</param>
 <history>
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="81" sc="9" el="84" ec="10">Components\WorkflowStateController.cs</location>
            <body hash="5be40d0fde183c0467fcabf1e55c55b0"><![CDATA[{
            string cacheKey = string.Format(WORKFLOW_CACHE_KEY, WorkflowID);
            return CBO.GetCachedObject<ArrayList>(new CacheItemArgs(cacheKey, WORKFLOW_CACHE_TIMEOUT, WORKFLOW_CACHE_PRIORITY, WorkflowID), GetWorkflowStatesCallBack);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetWorkflowStatesCallBack">
          <declaration><![CDATA[public object GetWorkflowStatesCallBack(CacheItemArgs cacheItemArgs)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   GetWorkFlowStatesCallback retrieves a collection of WorkflowStateInfo objects for the Workflow from the database
 </summary>
 <remarks>
 </remarks>
 <param name="cacheItemArgs">Arguments passed by the GetWorkflowStates method</param>
 <history>
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="97" sc="9" el="100" ec="10">Components\WorkflowStateController.cs</location>
            <body hash="d362ee79691a93d8c4094e1dc3463560"><![CDATA[{
            var WorkflowID = (int) (cacheItemArgs.ParamList[0]);
            return CBO.FillCollection(DataProvider.Instance().GetWorkflowStates(WorkflowID), typeof (WorkflowStateInfo));
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateWorkflow">
          <declaration><![CDATA[public void UpdateWorkflow(int WorkflowID, string WorkflowName, string Description, bool IsDeleted)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   UpdateWorkFlow updates an existing workflow for the portal
 </summary>
 <remarks>
 </remarks>
 <param name="WorkflowID">The ID of the Workflow</param>
 <param name="WorkflowName">The Name of the Workflow</param>
 <param name="Description">The Description of the Workflow</param>
 <param name="IsDeleted">Whether or not the Workflow is Active</param>
 <history>
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="150" sc="9" el="152" ec="10">Components\WorkflowStateControllerPro.cs</location>
            <body hash="89141ff1f316c570c2fedf38a9c23a86"><![CDATA[{
            DataProvider.Instance().UpdateWorkflow(WorkflowID, WorkflowName, Description, IsDeleted);
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateWorkflowState">
          <declaration><![CDATA[public void UpdateWorkflowState(WorkflowStateInfo objWorkflowState)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   AddWorkFlowState creates a new workflow and state instance
 </summary>
 <remarks>
 </remarks>
 <param name="objWorkflowState">A WorkflowStateInfo object</param>
 <history>
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="165" sc="9" el="168" ec="10">Components\WorkflowStateControllerPro.cs</location>
            <body hash="a89cd78d0d45ea5771254db41bee1e8c"><![CDATA[{
            DataProvider.Instance().UpdateWorkflowState(objWorkflowState.StateID, objWorkflowState.StateName, objWorkflowState.Order, objWorkflowState.Notify, objWorkflowState.IsActive);
            DataCache.RemoveCache(string.Format(WORKFLOW_CACHE_KEY, objWorkflowState.WorkflowID));
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="WORKFLOW_CACHE_KEY">
          <declaration><![CDATA[private const string WORKFLOW_CACHE_KEY = "Workflow{0}";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="WORKFLOW_CACHE_PRIORITY">
          <declaration><![CDATA[private const CacheItemPriority WORKFLOW_CACHE_PRIORITY = CacheItemPriority.Normal;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="WORKFLOW_CACHE_TIMEOUT">
          <declaration><![CDATA[private const int WORKFLOW_CACHE_TIMEOUT = 20;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="WorkflowStateInfo">
      <declaration><![CDATA[public class WorkflowStateInfo]]></declaration>
      <documentation>-----------------------------------------------------------------------------
 Namespace:  DotNetNuke.Modules.Html
 Project:    DotNetNuke
 Class:      WorkflowStateInfo
 -----------------------------------------------------------------------------
 <summary>
   Defines an instance of a WorkflowState object
 </summary>
 <remarks>
 </remarks>
 <history>
 </history>
 -----------------------------------------------------------------------------</documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private bool _IsActive = true;]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="43" sc="9" el="43" ec="39">Components\WorkflowStateInfo.cs</location>
            <body hash="3763b1c20779786dd2afe309ced4f35b"><![CDATA[private bool _IsActive = true]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
        <field name="_IsActive">
          <declaration><![CDATA[private bool _IsActive = true;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="Description">
          <declaration><![CDATA[public string Description]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="IsActive">
          <declaration><![CDATA[public bool IsActive]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="67" sc="13" el="69" ec="14">Components\WorkflowStateInfo.cs</location>
            <body hash="60f443debbab1fe5681665da174a9ff5"><![CDATA[{
                return _IsActive;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="71" sc="13" el="73" ec="14">Components\WorkflowStateInfo.cs</location>
            <body hash="fded552691aefe5866629a86ed982c6a"><![CDATA[{
                _IsActive = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="IsDeleted">
          <declaration><![CDATA[public bool IsDeleted]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Notify">
          <declaration><![CDATA[public bool Notify]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Order">
          <declaration><![CDATA[public int Order]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="PortalID">
          <declaration><![CDATA[public int PortalID]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="StateID">
          <declaration><![CDATA[public int StateID]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="StateName">
          <declaration><![CDATA[public string StateName]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="WorkflowID">
          <declaration><![CDATA[public int WorkflowID]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="WorkflowName">
          <declaration><![CDATA[public string WorkflowName]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="DotNetNuke.Security.Permissions">
    <class name="CompareWorkflowStatePermissions">
      <declaration><![CDATA[internal class CompareWorkflowStatePermissions : IComparer]]></declaration>
      <documentation>-----------------------------------------------------------------------------
 Project	 : DotNetNuke
 Namespace: DotNetNuke.Security.Permissions
 Class	 : CompareWorkflowStatePermissions
 -----------------------------------------------------------------------------
 <summary>
   CompareWorkflowStatePermissions provides the a custom IComparer implementation for
   WorkflowStatePermissionInfo objects
 </summary>
 <history>
 </history>
 -----------------------------------------------------------------------------</documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public CompareWorkflowStatePermissions()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="Compare">
          <declaration><![CDATA[public int Compare(object x, object y)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="47" sc="9" el="49" ec="10">Components\CompareWorkflowStatePermissions.cs</location>
            <body hash="3656a664d90970863a096be37cde2777"><![CDATA[{
            return ((WorkflowStatePermissionInfo) x).WorkflowStatePermissionID.CompareTo(((WorkflowStatePermissionInfo) y).WorkflowStatePermissionID);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="WorkflowStatePermissionCollection">
      <declaration><![CDATA[public class WorkflowStatePermissionCollection : CollectionBase]]></declaration>
      <documentation>-----------------------------------------------------------------------------
 Project	 : DotNetNuke
 Namespace: DotNetNuke.Security.Permissions
 Class	 : WorkflowStatePermissionCollection
 -----------------------------------------------------------------------------
 <summary>
   DesktopModulePermissionCollection provides the a custom collection for WorkflowStatePermissionInfo
   objects
 </summary>
 <history>
 </history>
 -----------------------------------------------------------------------------</documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public WorkflowStatePermissionCollection()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="50" sc="9" el="52" ec="10">Components\WorkflowStatePermissionCollection.cs</location>
            <body hash="bf55235ef03e7a42100532cb6f5f597d"><![CDATA[public WorkflowStatePermissionCollection()
        {
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[public WorkflowStatePermissionCollection(ArrayList WorkflowStatePermissions)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="54" sc="9" el="57" ec="10">Components\WorkflowStatePermissionCollection.cs</location>
            <body hash="e5587059b5cdbe602388dceae1f7f9da"><![CDATA[public WorkflowStatePermissionCollection(ArrayList WorkflowStatePermissions)
        {
            AddRange(WorkflowStatePermissions);
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[public WorkflowStatePermissionCollection(WorkflowStatePermissionCollection WorkflowStatePermissions)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="59" sc="9" el="62" ec="10">Components\WorkflowStatePermissionCollection.cs</location>
            <body hash="a88cd7ae1df881d1d607f80bc2114720"><![CDATA[public WorkflowStatePermissionCollection(WorkflowStatePermissionCollection WorkflowStatePermissions)
        {
            AddRange(WorkflowStatePermissions);
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[public WorkflowStatePermissionCollection(ArrayList WorkflowStatePermissions, int WorkflowStatePermissionID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="64" sc="9" el="73" ec="10">Components\WorkflowStatePermissionCollection.cs</location>
            <body hash="a390e04fac22ba3aad17f08d1caf7b6b"><![CDATA[public WorkflowStatePermissionCollection(ArrayList WorkflowStatePermissions, int WorkflowStatePermissionID)
        {
            foreach (WorkflowStatePermissionInfo permission in WorkflowStatePermissions)
            {
                if (permission.WorkflowStatePermissionID == WorkflowStatePermissionID)
                {
                    Add(permission);
                }
            }
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="Add">
          <declaration><![CDATA[public int Add(WorkflowStatePermissionInfo value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="96" sc="9" el="98" ec="10">Components\WorkflowStatePermissionCollection.cs</location>
            <body hash="159c8b2f05fc30858504bc9b38381129"><![CDATA[{
            return List.Add(value);
        }]]></body>
          </codeblock>
        </method>
        <method name="Add">
          <declaration><![CDATA[public int Add(WorkflowStatePermissionInfo value, bool checkForDuplicates)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="101" sc="9" el="124" ec="10">Components\WorkflowStatePermissionCollection.cs</location>
            <body hash="e44db56248178c57c5d8eaeb05bd12ab"><![CDATA[{
            int id = Null.NullInteger;
            if (!checkForDuplicates)
            {
                id = Add(value);
            }
            else
            {
                bool isMatch = false;
                foreach (PermissionInfoBase permission in List)
                {
                    if (permission.PermissionID == value.PermissionID && permission.UserID == value.UserID && permission.RoleID == value.RoleID)
                    {
                        isMatch = true;
                        break;
                    }
                }
                if (!isMatch)
                {
                    id = Add(value);
                }
            }
            return id;
        }]]></body>
          </codeblock>
        </method>
        <method name="AddRange">
          <declaration><![CDATA[public void AddRange(ArrayList WorkflowStatePermissions)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="127" sc="9" el="132" ec="10">Components\WorkflowStatePermissionCollection.cs</location>
            <body hash="ee077787cf14d85f7a00714ba694f688"><![CDATA[{
            foreach (WorkflowStatePermissionInfo permission in WorkflowStatePermissions)
            {
                Add(permission);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="AddRange">
          <declaration><![CDATA[public void AddRange(WorkflowStatePermissionCollection WorkflowStatePermissions)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="135" sc="9" el="140" ec="10">Components\WorkflowStatePermissionCollection.cs</location>
            <body hash="ee077787cf14d85f7a00714ba694f688"><![CDATA[{
            foreach (WorkflowStatePermissionInfo permission in WorkflowStatePermissions)
            {
                Add(permission);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="CompareTo">
          <declaration><![CDATA[public bool CompareTo(WorkflowStatePermissionCollection objWorkflowStatePermissionCollection)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="143" sc="9" el="160" ec="10">Components\WorkflowStatePermissionCollection.cs</location>
            <body hash="fde0c218be6bdd3849f5006b19b31e08"><![CDATA[{
            if (objWorkflowStatePermissionCollection.Count != Count)
            {
                return false;
            }
            InnerList.Sort(new CompareWorkflowStatePermissions());
            objWorkflowStatePermissionCollection.InnerList.Sort(new CompareWorkflowStatePermissions());

            for (int i = 0; i < Count; i++)
            {
                if (objWorkflowStatePermissionCollection[i].WorkflowStatePermissionID != this[i].WorkflowStatePermissionID || objWorkflowStatePermissionCollection[i].AllowAccess != this[i].AllowAccess)
                {
                    return false;
                }
            }

            return true;
        }]]></body>
          </codeblock>
        </method>
        <method name="Contains">
          <declaration><![CDATA[public bool Contains(WorkflowStatePermissionInfo value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="163" sc="9" el="165" ec="10">Components\WorkflowStatePermissionCollection.cs</location>
            <body hash="d20c32a5e63365068d301ea922657cde"><![CDATA[{
            return List.Contains(value);
        }]]></body>
          </codeblock>
        </method>
        <method name="IndexOf">
          <declaration><![CDATA[public int IndexOf(WorkflowStatePermissionInfo value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="168" sc="9" el="170" ec="10">Components\WorkflowStatePermissionCollection.cs</location>
            <body hash="f4423ee35eb0ad36d01cb102b34e7dd2"><![CDATA[{
            return List.IndexOf(value);
        }]]></body>
          </codeblock>
        </method>
        <method name="Insert">
          <declaration><![CDATA[public void Insert(int index, WorkflowStatePermissionInfo value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="173" sc="9" el="175" ec="10">Components\WorkflowStatePermissionCollection.cs</location>
            <body hash="29d857179ece5d364c408e998bc9afb6"><![CDATA[{
            List.Insert(index, value);
        }]]></body>
          </codeblock>
        </method>
        <method name="Remove">
          <declaration><![CDATA[public void Remove(WorkflowStatePermissionInfo value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="178" sc="9" el="180" ec="10">Components\WorkflowStatePermissionCollection.cs</location>
            <body hash="5f06fe14d0312ed42ccd87d3bd3fa13e"><![CDATA[{
            List.Remove(value);
        }]]></body>
          </codeblock>
        </method>
        <method name="Remove">
          <declaration><![CDATA[public void Remove(int permissionID, int roleID, int userID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="183" sc="9" el="192" ec="10">Components\WorkflowStatePermissionCollection.cs</location>
            <body hash="0611b6026c1ba1269ab2b145f133106c"><![CDATA[{
            foreach (PermissionInfoBase permission in List)
            {
                if (permission.PermissionID == permissionID && permission.UserID == userID && permission.RoleID == roleID)
                {
                    List.Remove(permission);
                    break;
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="ToList">
          <declaration><![CDATA[public List<PermissionInfoBase> ToList()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="195" sc="9" el="203" ec="10">Components\WorkflowStatePermissionCollection.cs</location>
            <body hash="6f9af7e281edac0a6ee0097e19bbc1b5"><![CDATA[{
            var list = new List<PermissionInfoBase>();

            foreach (PermissionInfoBase permission in List)
            {
                list.Add(permission);
            }
            return list;
        }]]></body>
          </codeblock>
        </method>
        <method name="ToString">
          <declaration><![CDATA[public string ToString(string key)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="206" sc="9" el="208" ec="10">Components\WorkflowStatePermissionCollection.cs</location>
            <body hash="81743b9ae3a34e7185c2147ca253bb45"><![CDATA[{
            return PermissionController.BuildPermissions(List, key);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="Item">
          <declaration><![CDATA[public WorkflowStatePermissionInfo this[int index]]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="82" sc="13" el="84" ec="14">Components\WorkflowStatePermissionCollection.cs</location>
            <body hash="28bf04c2701e3b894b1332c443c692fe"><![CDATA[{
                return (WorkflowStatePermissionInfo) (List[index]);
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="86" sc="13" el="88" ec="14">Components\WorkflowStatePermissionCollection.cs</location>
            <body hash="317ffc941817052353a1a004fbfa9af4"><![CDATA[{
                List[index] = value;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="WorkflowStatePermissionController">
      <declaration><![CDATA[public class WorkflowStatePermissionController]]></declaration>
      <documentation>-----------------------------------------------------------------------------
 Project	 : DotNetNuke
 Namespace: DotNetNuke.Security.Permissions
 Class	 : WorkflowStatePermissionController
 -----------------------------------------------------------------------------
 <summary>
   WorkflowStatePermissionController provides the Business Layer for DesktopModule Permissions
 </summary>
 <history>
 </history>
 -----------------------------------------------------------------------------</documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public WorkflowStatePermissionController()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
        <constructor name=".cctor">
          <declaration><![CDATA[static WorkflowStatePermissionController()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="55" sc="9" el="55" ec="81">Components\WorkflowStatePermissionController.cs</location>
            <body hash="acfa69d31e522d2ba9a1dcc5f95a9195"><![CDATA[private static readonly DataProvider provider = DataProvider.Instance()]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="AddWorkflowStatePermission">
          <declaration><![CDATA[public static int AddWorkflowStatePermission(WorkflowStatePermissionInfo objWorkflowStatePermission)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   AddWorkflowStatePermission adds a WorkflowState Permission to the Database
 </summary>
 <param name="objWorkflowStatePermission">The WorkflowState Permission to add</param>
 <history>
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="62" sc="9" el="71" ec="10">Components\WorkflowStatePermissionControllerPro.cs</location>
            <body hash="afdc5d72cdfa01ebde8dda8f4c55bf4f"><![CDATA[{
            int Id = provider.AddWorkflowStatePermission(objWorkflowStatePermission.StateID,
                                                         objWorkflowStatePermission.PermissionID,
                                                         objWorkflowStatePermission.RoleID,
                                                         objWorkflowStatePermission.AllowAccess,
                                                         objWorkflowStatePermission.UserID,
                                                         UserController.GetCurrentUserInfo().UserID);
            ClearPermissionCache();
            return Id;
        }]]></body>
          </codeblock>
        </method>
        <method name="ClearPermissionCache">
          <declaration><![CDATA[private static void ClearPermissionCache()]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   ClearPermissionCache clears the WorkflowState Permission Cache
 </summary>
 <history>
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="45" sc="9" el="47" ec="10">Components\WorkflowStatePermissionControllerPro.cs</location>
            <body hash="89ede7d09139e47be7d3b794166f22dd"><![CDATA[{
            DataCache.RemoveCache(WorkflowStatePermissionCacheKey);
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteWorkflowStatePermission">
          <declaration><![CDATA[public static void DeleteWorkflowStatePermission(int WorkflowStatePermissionID)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   DeleteWorkflowStatePermission deletes a WorkflowState Permission in the Database
 </summary>
 <param name="WorkflowStatePermissionID">The ID of the WorkflowState Permission to delete</param>
 <history>
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="82" sc="9" el="85" ec="10">Components\WorkflowStatePermissionControllerPro.cs</location>
            <body hash="002c29117b4dd69d7f8496bae3f28ffd"><![CDATA[{
            provider.DeleteWorkflowStatePermission(WorkflowStatePermissionID);
            ClearPermissionCache();
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteWorkflowStatePermissionsByStateID">
          <declaration><![CDATA[public static void DeleteWorkflowStatePermissionsByStateID(int StateID)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   DeleteWorkflowStatePermissionsByStateID deletes a WorkflowState's
   WorkflowState Permission in the Database
 </summary>
 <param name="StateID">The ID of the State to delete</param>
 <history>
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="97" sc="9" el="100" ec="10">Components\WorkflowStatePermissionControllerPro.cs</location>
            <body hash="8d797647dda3b61cd7f1c577ffc9f424"><![CDATA[{
            provider.DeleteWorkflowStatePermissionsByStateID(StateID);
            ClearPermissionCache();
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteWorkflowStatePermissionsByUserID">
          <declaration><![CDATA[public static void DeleteWorkflowStatePermissionsByUserID(UserInfo objUser)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   DeleteWorkflowStatePermissionsByUserID deletes a user's WorkflowState Permission in the Database
 </summary>
 <param name="objUser">The user</param>
 <history>
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="111" sc="9" el="114" ec="10">Components\WorkflowStatePermissionControllerPro.cs</location>
            <body hash="24742b724dae200d0f44ca59ef991278"><![CDATA[{
            provider.DeleteWorkflowStatePermissionsByUserID(objUser.UserID);
            ClearPermissionCache();
        }]]></body>
          </codeblock>
        </method>
        <method name="FillWorkflowStatePermissionDictionary">
          <declaration><![CDATA[private static Dictionary<int, WorkflowStatePermissionCollection> FillWorkflowStatePermissionDictionary(IDataReader dr)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   FillWorkflowStatePermissionDictionary fills a Dictionary of WorkflowStatePermissions from a
   dataReader
 </summary>
 <param name="dr">The IDataReader</param>
 <history>
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="97" sc="9" el="139" ec="10">Components\WorkflowStatePermissionController.cs</location>
            <body hash="3e68f8a7799c737fffb03b86ad50cd0c"><![CDATA[{
            var dic = new Dictionary<int, WorkflowStatePermissionCollection>();
            try
            {
                WorkflowStatePermissionInfo obj = null;
                while (dr.Read())
                {
                    // fill business object
                    obj = CBO.FillObject<WorkflowStatePermissionInfo>(dr, false);

                    // add WorkflowState Permission to dictionary
                    if (dic.ContainsKey(obj.StateID))
                    {
                        //Add WorkflowStatePermission to WorkflowStatePermission Collection already in dictionary for StateId
                        dic[obj.StateID].Add(obj);
                    }
                    else
                    {
                        //Create new WorkflowStatePermission Collection for WorkflowStatePermissionID
                        var collection = new WorkflowStatePermissionCollection();

                        //Add Permission to Collection
                        collection.Add(obj);

                        //Add Collection to Dictionary
                        dic.Add(obj.StateID, collection);
                    }
                }
            }
            catch (Exception exc)
            {
                Exceptions.LogException(exc);
            }
            finally
            {
                // close datareader
                if (dr != null)
                {
                    dr.Close();
                }
            }
            return dic;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPermissionsByStateID">
          <declaration><![CDATA[public static ArrayList GetPermissionsByStateID(int StateID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="151" sc="9" el="153" ec="10">Components\WorkflowStatePermissionControllerPro.cs</location>
            <body hash="3eafae929724ecc87acd4f780e9d4ce2"><![CDATA[{
            return CBO.FillCollection(provider.GetPermissionsByStateID(StateID), typeof (PermissionInfo));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetWorkflowStatePermission">
          <declaration><![CDATA[public static WorkflowStatePermissionInfo GetWorkflowStatePermission(int WorkflowStatePermissionID)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   GetWorkflowStatePermission gets a WorkflowState Permission from the Database
 </summary>
 <param name="WorkflowStatePermissionID">The ID of the WorkflowState Permission</param>
 <history>
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="125" sc="9" el="127" ec="10">Components\WorkflowStatePermissionControllerPro.cs</location>
            <body hash="fd68eee647e4ced7172f1ca011fad116"><![CDATA[{
            return CBO.FillObject<WorkflowStatePermissionInfo>(provider.GetWorkflowStatePermission(WorkflowStatePermissionID), true);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetWorkflowStatePermissions">
          <declaration><![CDATA[private static Dictionary<int, WorkflowStatePermissionCollection> GetWorkflowStatePermissions()]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   GetWorkflowStatePermissions gets a Dictionary of WorkflowStatePermissionCollections by
   WorkflowState.
 </summary>
 <history>
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="68" sc="9" el="71" ec="10">Components\WorkflowStatePermissionController.cs</location>
            <body hash="81b1389bc33c2a42760db79e218352c9"><![CDATA[{
            return CBO.GetCachedObject<Dictionary<int, WorkflowStatePermissionCollection>>(new CacheItemArgs(WorkflowStatePermissionCacheKey, WorkflowStatePermissionCachePriority),
                                                                                           GetWorkflowStatePermissionsCallBack);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetWorkflowStatePermissions">
          <declaration><![CDATA[public static WorkflowStatePermissionCollection GetWorkflowStatePermissions(int StateID)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   GetWorkflowStatePermissions gets a WorkflowStatePermissionCollection
 </summary>
 <param name="StateID">The ID of the State</param>
 <history>
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="154" sc="9" el="172" ec="10">Components\WorkflowStatePermissionController.cs</location>
            <body hash="207938dd2e5a628fd3e27be5c5d649c1"><![CDATA[{
            bool bFound = false;

            //Get the WorkflowStatePermission Dictionary
            Dictionary<int, WorkflowStatePermissionCollection> dicWorkflowStatePermissions = GetWorkflowStatePermissions();

            //Get the Collection from the Dictionary
            WorkflowStatePermissionCollection WorkflowStatePermissions = null;
            bFound = dicWorkflowStatePermissions.TryGetValue(StateID, out WorkflowStatePermissions);

            if (!bFound)
            {
                //try the database
                WorkflowStatePermissions = new WorkflowStatePermissionCollection(CBO.FillCollection(provider.GetWorkflowStatePermissionsByStateID(StateID), typeof (WorkflowStatePermissionInfo)),
                                                                                 StateID);
            }

            return WorkflowStatePermissions;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetWorkflowStatePermissionsCallBack">
          <declaration><![CDATA[private static object GetWorkflowStatePermissionsCallBack(CacheItemArgs cacheItemArgs)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   GetWorkflowStatePermissionsCallBack gets a Dictionary of WorkflowStatePermissionCollections by
   WorkflowState from the the Database.
 </summary>
 <param name="cacheItemArgs">The CacheItemArgs object that contains the parameters needed for the database call</param>
 <history>
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="83" sc="9" el="85" ec="10">Components\WorkflowStatePermissionController.cs</location>
            <body hash="b62957d0ca77b2560b2432a3be6a2617"><![CDATA[{
            return FillWorkflowStatePermissionDictionary(provider.GetWorkflowStatePermissions());
        }]]></body>
          </codeblock>
        </method>
        <method name="HasWorkflowStatePermission">
          <declaration><![CDATA[public static bool HasWorkflowStatePermission(WorkflowStatePermissionCollection objWorkflowStatePermissions, string permissionKey)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   HasWorkflowStatePermission checks whether the current user has a specific WorkflowState Permission
 </summary>
 <param name="objWorkflowStatePermissions">The Permissions for the WorkflowState</param>
 <param name="permissionKey">The Permission to check</param>
 <history>
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="185" sc="9" el="187" ec="10">Components\WorkflowStatePermissionController.cs</location>
            <body hash="66ce25789e30cdc8e5f4b90966dbeecf"><![CDATA[{
            return PortalSecurity.IsInRoles(objWorkflowStatePermissions.ToString(permissionKey));
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateWorkflowStatePermission">
          <declaration><![CDATA[public static void UpdateWorkflowStatePermission(WorkflowStatePermissionInfo objWorkflowStatePermission)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   UpdateWorkflowStatePermission updates a WorkflowState Permission in the Database
 </summary>
 <param name="objWorkflowStatePermission">The WorkflowState Permission to update</param>
 <history>
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="138" sc="9" el="147" ec="10">Components\WorkflowStatePermissionControllerPro.cs</location>
            <body hash="bcab104f182d57da50ef1442978ed6bb"><![CDATA[{
            provider.UpdateWorkflowStatePermission(objWorkflowStatePermission.WorkflowStatePermissionID,
                                                   objWorkflowStatePermission.StateID,
                                                   objWorkflowStatePermission.PermissionID,
                                                   objWorkflowStatePermission.RoleID,
                                                   objWorkflowStatePermission.AllowAccess,
                                                   objWorkflowStatePermission.UserID,
                                                   UserController.GetCurrentUserInfo().UserID);
            ClearPermissionCache();
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="provider">
          <declaration><![CDATA[private static readonly DataProvider provider = DataProvider.Instance();]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="WorkflowStatePermissionCacheKey">
          <declaration><![CDATA[public const string WorkflowStatePermissionCacheKey = "WorkflowStatePermissions";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="WorkflowStatePermissionCachePriority">
          <declaration><![CDATA[public const CacheItemPriority WorkflowStatePermissionCachePriority = CacheItemPriority.Normal;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="WorkflowStatePermissionCacheTimeOut">
          <declaration><![CDATA[public const int WorkflowStatePermissionCacheTimeOut = 20;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="WorkflowStatePermissionInfo">
      <declaration><![CDATA[public class WorkflowStatePermissionInfo : PermissionInfoBase, IHydratable]]></declaration>
      <documentation>-----------------------------------------------------------------------------
 Project	 : DotNetNuke
 Namespace: DotNetNuke.Security.Permissions
 Class	 : DesktopModulePermissionInfo
 -----------------------------------------------------------------------------
 <summary>
   DesktopModulePermissionInfo provides the Entity Layer for DesktopModulePermissionInfo
   Permissions
 </summary>
 <history>
 </history>
 -----------------------------------------------------------------------------</documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public WorkflowStatePermissionInfo()]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   Constructs a new WorkflowStatePermissionInfo
 </summary>
 <history>
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="63" sc="9" el="67" ec="10">Components\WorkflowStatePermissionInfo.cs</location>
            <body hash="15fd864eaf70e882388aa2458748213d"><![CDATA[public WorkflowStatePermissionInfo()
        {
            _WorkflowStatePermissionID = Null.NullInteger;
            _StateID = Null.NullInteger;
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[public WorkflowStatePermissionInfo(PermissionInfo permission) : this()]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   Constructs a new WorkflowStatePermissionInfo
 </summary>
 <param name="permission">A PermissionInfo object</param>
 <history>
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="79" sc="9" el="86" ec="10">Components\WorkflowStatePermissionInfo.cs</location>
            <body hash="efaf9323935a3f61a5593a2f3b965e50"><![CDATA[public WorkflowStatePermissionInfo(PermissionInfo permission) : this()
        {
            ModuleDefID = permission.ModuleDefID;
            PermissionCode = permission.PermissionCode;
            PermissionID = permission.PermissionID;
            PermissionKey = permission.PermissionKey;
            PermissionName = permission.PermissionName;
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="Equals">
          <declaration><![CDATA[public override bool Equals(object obj)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   Compares if two WorkflowStatePermissionInfo objects are equivalent/equal
 </summary>
 <param name="obj">a WorkflowStatePermissionObject</param>
 <returns>true if the permissions being passed represents the same permission
   in the current object
 </returns>
 <remarks>
   This function is needed to prevent adding duplicates to the WorkflowStatePermissionCollection.
   WorkflowStatePermissionCollection.Contains will use this method to check if a given permission
   is already included in the collection.
 </remarks>
 <history>
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="153" sc="9" el="167" ec="10">Components\WorkflowStatePermissionInfo.cs</location>
            <body hash="52ab6cb2f550a13bd23b05bcb414d412"><![CDATA[{
            if (ReferenceEquals(null, obj))
            {
                return false;
            }
            if (ReferenceEquals(this, obj))
            {
                return true;
            }
            if (obj.GetType() != typeof(WorkflowStatePermissionInfo))
            {
                return false;
            }
            return Equals((WorkflowStatePermissionInfo)obj);
        }]]></body>
          </codeblock>
        </method>
        <method name="Equals">
          <declaration><![CDATA[public bool Equals(WorkflowStatePermissionInfo other)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="170" sc="9" el="180" ec="10">Components\WorkflowStatePermissionInfo.cs</location>
            <body hash="4f816df2e338840769f4eb38d8cbe2d8"><![CDATA[{
            if (ReferenceEquals(null, other))
            {
                return false;
            }
            if (ReferenceEquals(this, other))
            {
                return true;
            }
            return (AllowAccess == other.AllowAccess) && (StateID == other.StateID) && (RoleID == other.RoleID) && (PermissionID == other.PermissionID);
        }]]></body>
          </codeblock>
        </method>
        <method name="Fill">
          <declaration><![CDATA[public void Fill(IDataReader dr)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   Fills a WorkflowStatePermissionInfo from a Data Reader
 </summary>
 <param name="dr">The Data Reader to use</param>
 <history>
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="203" sc="9" el="209" ec="10">Components\WorkflowStatePermissionInfo.cs</location>
            <body hash="e7146d8488e29e60c785eca33a4f1ab6"><![CDATA[{
            //Call the base classes fill method to populate base class proeprties
            base.FillInternal(dr);

            WorkflowStatePermissionID = Null.SetNullInteger(dr["WorkflowStatePermissionID"]);
            StateID = Null.SetNullInteger(dr["StateID"]);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetHashCode">
          <declaration><![CDATA[public override int GetHashCode()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="183" sc="9" el="188" ec="10">Components\WorkflowStatePermissionInfo.cs</location>
            <body hash="275efac0851edb5253739b3ce6e8810a"><![CDATA[{
            unchecked
            {
                return (_StateID*397) ^ _WorkflowStatePermissionID;
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_StateID">
          <declaration><![CDATA[private int _StateID;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_WorkflowStatePermissionID">
          <declaration><![CDATA[private int _WorkflowStatePermissionID;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="KeyID">
          <declaration><![CDATA[public int KeyID]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   Gets and sets the Key ID
 </summary>
 <returns>An Integer</returns>
 <history>
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="222" sc="13" el="224" ec="14">Components\WorkflowStatePermissionInfo.cs</location>
            <body hash="03675010a4d701e15d8c5b042ab215ac"><![CDATA[{
                return WorkflowStatePermissionID;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="226" sc="13" el="228" ec="14">Components\WorkflowStatePermissionInfo.cs</location>
            <body hash="de6731b9ea946cce8507900309937bae"><![CDATA[{
                WorkflowStatePermissionID = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="StateID">
          <declaration><![CDATA[public int StateID]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   Gets and sets the State ID
 </summary>
 <returns>An Integer</returns>
 <history>
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="123" sc="13" el="125" ec="14">Components\WorkflowStatePermissionInfo.cs</location>
            <body hash="41f78aa7db30176e88943e4c1bf651f4"><![CDATA[{
                return _StateID;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="127" sc="13" el="129" ec="14">Components\WorkflowStatePermissionInfo.cs</location>
            <body hash="0f145ede9bf61a369c0a4a6f1282970e"><![CDATA[{
                _StateID = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="WorkflowStatePermissionID">
          <declaration><![CDATA[public int WorkflowStatePermissionID]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   Gets and sets the WorkflowState Permission ID
 </summary>
 <returns>An Integer</returns>
 <history>
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="103" sc="13" el="105" ec="14">Components\WorkflowStatePermissionInfo.cs</location>
            <body hash="ab0bfcdff604c0f8ac0b4cc744a5a492"><![CDATA[{
                return _WorkflowStatePermissionID;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="107" sc="13" el="109" ec="14">Components\WorkflowStatePermissionInfo.cs</location>
            <body hash="8f0bae79ca5108aa119d1352099e46ca"><![CDATA[{
                _WorkflowStatePermissionID = value;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
</root>