<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<root file="Dnn.PersonaBar.SiteSettings.dll" version="01.01.00" generated="2017-06-19 21:14:17Z" generationTime="6.2689713">
  <namespace name="">
    <class name="&lt;Module&gt;">
      <declaration><![CDATA[internal class <Module>]]></declaration>
      <documentation>
      </documentation>
      <constructors>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="Dnn.PersonaBar.SiteSettings.Components">
    <class name="LanguagesControllerTasks">
      <declaration><![CDATA[internal class LanguagesControllerTasks]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public LanguagesControllerTasks()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
        <constructor name=".cctor">
          <declaration><![CDATA[static LanguagesControllerTasks()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="20" sc="9" el="20" ec="113">Components\LanguagesControllerTasks.cs</location>
            <body hash="e5e8745fc751c84e734e9c009401003b"><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof(LanguagesControllerTasks))]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="GetPages">
          <declaration><![CDATA[private static IList<TabInfo> GetPages(int portalId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="233" sc="9" el="241" ec="10">Components\LanguagesControllerTasks.cs</location>
            <body hash="44e01ff08b61a94484687d1a77939680"><![CDATA[{
            return (
                from kvp in TabController.Instance.GetTabsByPortal(portalId)
                where !kvp.Value.TabPath.StartsWith("//Admin")
                      && !kvp.Value.IsDeleted
                      && !kvp.Value.IsSystem
                select kvp.Value
                ).ToList();
        }]]></body>
          </codeblock>
        </method>
        <method name="GetTabsToLocalize">
          <declaration><![CDATA[private static IList<TabInfo> GetTabsToLocalize(int portalId, string code, string defaultLocale)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="126" sc="9" el="149" ec="10">Components\LanguagesControllerTasks.cs</location>
            <body hash="619102025559627531c6294a0f100650"><![CDATA[{
            var results = new List<TabInfo>();
            var portalTabs = TabController.Instance.GetTabsByPortal(portalId)
                .Where(kvp => (kvp.Value.CultureCode == defaultLocale || string.IsNullOrEmpty(kvp.Value.CultureCode))
                && !kvp.Value.IsDeleted && !kvp.Value.IsSystem && !kvp.Value.TabPath.StartsWith("//Admin"));

            foreach (var kvp in portalTabs)
            {
                if (kvp.Value.LocalizedTabs.Count == 0)
                {
                    results.Add(kvp.Value);
                }
                else
                {
                    var tabLocalizedInCulture = kvp.Value.LocalizedTabs.Any(localizedTab => localizedTab.Value.CultureCode == code);
                    if (!tabLocalizedInCulture)
                    {
                        results.Add(kvp.Value);
                    }
                }
            }

            return results;
        }]]></body>
          </codeblock>
        </method>
        <method name="LocalizeLanguagePages">
          <declaration><![CDATA[public static void LocalizeLanguagePages(LocalizationProgress progress, int portalId, string cultureCode, string defaultLocale)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="87" sc="9" el="123" ec="10">Components\LanguagesControllerTasks.cs</location>
            <body hash="4756f41ab2d5cf3f116e2698355f92c5"><![CDATA[{
            Task.Factory.StartNew(() =>
            {
                try
                {
                    var pageList = GetTabsToLocalize(portalId, cultureCode, defaultLocale);
                    var locale = LocaleController.Instance.GetLocale(cultureCode);

                    //add translator role
                    Localization.AddTranslatorRole(portalId, locale);

                    //populate pages
                    ProcessLanguage(pageList, locale, defaultLocale, 0, 1, progress);

                    //Map special pages
                    PortalController.Instance.MapLocalizedSpecialPages(portalId, locale.Code);

                    //clear portal cache
                    DataCache.ClearPortalCache(portalId, true);
                    progress.Reset();
                    SaveProgressToFile(progress);
                }
                catch (Exception ex)
                {
                    try
                    {
                        Logger.Error(ex);
                        progress.Reset().Error = ex.ToString();
                        SaveProgressToFile(progress);
                    }
                    catch (Exception)
                    {
                        //ignore
                    }
                }
            });
        }]]></body>
          </codeblock>
        </method>
        <method name="LocalizeSitePages">
          <declaration><![CDATA[public static void LocalizeSitePages(LocalizationProgress progress, int portalId, bool translatePages, string defaultLanguage)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="25" sc="9" el="84" ec="10">Components\LanguagesControllerTasks.cs</location>
            <body hash="eabc4d2cd065e5cc21330288c02c3211"><![CDATA[{
            Task.Factory.StartNew(() =>
            {
                try
                {
                    var languageCount = LocaleController.Instance.GetLocales(portalId).Count;
                    var languageCounter = 0;

                    var pageList = GetPages(portalId).Where(p => string.IsNullOrEmpty(p.CultureCode)).ToList();

                    if (translatePages)
                    {
                        // populate default language
                        ProcessLanguage(pageList, LocaleController.Instance.GetLocale(defaultLanguage),
                            defaultLanguage, languageCounter, languageCount, progress);
                    }
                    PublishLanguage(defaultLanguage, portalId, true);

                    PortalController.UpdatePortalSetting(portalId, "ContentLocalizationEnabled", "True");

                    if (translatePages)
                    {
                        // populate other languages
                        pageList = GetPages(portalId).Where(p => p.CultureCode == defaultLanguage).ToList();

                        foreach (var locale in LocaleController.Instance.GetLocales(portalId).Values.Where(l => l.Code != defaultLanguage))
                        {
                            languageCounter++;

                            //add translator role
                            Localization.AddTranslatorRole(portalId, locale);

                            //populate pages
                            ProcessLanguage(pageList, locale, defaultLanguage, languageCounter, languageCount, progress);

                            //Map special pages
                            PortalController.Instance.MapLocalizedSpecialPages(portalId, locale.Code);
                        }
                    }

                    //clear portal cache
                    DataCache.ClearPortalCache(portalId, true);
                    progress.Reset();
                    SaveProgressToFile(progress);
                }
                catch (Exception ex)
                {
                    try
                    {
                        Logger.Error(ex);
                        progress.Reset().Error = ex.ToString();
                        SaveProgressToFile(progress);
                    }
                    catch (Exception)
                    {
                        //ignore
                    }
                }
            });
        }]]></body>
          </codeblock>
        </method>
        <method name="ProcessLanguage">
          <declaration><![CDATA[private static void ProcessLanguage(ICollection<TabInfo> pageList, Locale locale, string defaultLocale, int languageCount, int totalLanguages, LocalizationProgress progress)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="153" sc="9" el="196" ec="10">Components\LanguagesControllerTasks.cs</location>
            <body hash="2f25046315662e8833cd0a1f86510d2f"><![CDATA[{
            progress.PrimaryTotal = totalLanguages;
            progress.PrimaryValue = languageCount;

            var total = pageList.Count;
            if (total == 0)
            {
                progress.SecondaryTotal = 0;
                progress.SecondaryValue = 0;
                progress.SecondaryPercent = 100;
            }

            for (var i = 0; i < total; i++)
            {
                var currentTab = pageList.ElementAt(i);
                var stepNo = i + 1;

                progress.SecondaryTotal = total;
                progress.SecondaryValue = stepNo;
                progress.SecondaryPercent = Convert.ToInt32((float)stepNo / total * 100);
                progress.PrimaryPercent =
                    Convert.ToInt32((languageCount + (float)stepNo / total) / totalLanguages * 100);

                progress.CurrentOperationText = string.Format(Localization.GetString(
                    "ProcessingPage", LocalResourcesFile), locale.Code, stepNo, total, currentTab.TabName);

                progress.TimeEstimated = (total - stepNo) * 100;

                SaveProgressToFile(progress);
                
                if (locale.Code == defaultLocale || string.IsNullOrEmpty(locale.Code))
                {
                    TabController.Instance.LocalizeTab(currentTab, locale, true);
                }
                else
                {
                    if (currentTab.IsNeutralCulture)
                    {
                        TabController.Instance.LocalizeTab(currentTab, LocaleController.Instance.GetLocale(defaultLocale), true);
                    }
                    TabController.Instance.CreateLocalizedCopy(currentTab, locale, false);
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="PublishLanguage">
          <declaration><![CDATA[private static void PublishLanguage(string cultureCode, int portalId, bool publish)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="244" sc="9" el="252" ec="10">Components\LanguagesControllerTasks.cs</location>
            <body hash="e4cb60ef9d69af0c5a8ef67c0d244cf6"><![CDATA[{
            var enabledLanguages = LocaleController.Instance.GetLocales(portalId);
            Locale enabledlanguage;
            if (enabledLanguages.TryGetValue(cultureCode, out enabledlanguage))
            {
                enabledlanguage.IsPublished = publish;
                LocaleController.Instance.UpdatePortalLocale(enabledlanguage);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="ReadProgressFile">
          <declaration><![CDATA[internal static LocalizationProgress ReadProgressFile()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="216" sc="9" el="230" ec="10">Components\LanguagesControllerTasks.cs</location>
            <body hash="8eb33ac7a2509b6b9eb896a1df10be5f"><![CDATA[{
            var path = Path.Combine(Globals.ApplicationMapPath, "App_Data", LocalizationProgressFile);
#if true
            var text = File.ReadAllText(path);
            return JsonConvert.DeserializeObject<LocalizationProgress>(text);
#else
            using (var file = new FileStream(path, FileMode.Open, FileAccess.Read, FileShare.ReadWrite, 256))
            {
                var bytes = new byte[file.Length];
                file.Read(bytes, 0, bytes.Length);
                var text = Encoding.UTF8.GetString(bytes);
                return JsonConvert.DeserializeObject<LocalizationProgress>(text);
            }
#endif
        }]]></body>
          </codeblock>
        </method>
        <method name="SaveProgressToFile">
          <declaration><![CDATA[private static void SaveProgressToFile(LocalizationProgress progress)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="199" sc="9" el="213" ec="10">Components\LanguagesControllerTasks.cs</location>
            <body hash="7f68a5d07d0336b5ea301e57a0a5858a"><![CDATA[{
            var path = Path.Combine(Globals.ApplicationMapPath, "App_Data", LocalizationProgressFile);
            var text = JsonConvert.SerializeObject(progress);
#if false
            // this could have file locking issues from multiple threads
            File.WriteAllText(path, text);
#else
            using (var file = new FileStream(path, FileMode.Create, FileAccess.Write, FileShare.ReadWrite, 256))
            {
                var bytes = Encoding.UTF8.GetBytes(text);
                file.Write(bytes, 0, bytes.Length);
                file.Flush();
            }
#endif
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="LocalizationProgressFile">
          <declaration><![CDATA[private const string LocalizationProgressFile = "PersonaBarLocalizationProgress.txt";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="LocalResourcesFile">
          <declaration><![CDATA[private const string LocalResourcesFile = "~/DesktopModules/admin/Dnn.PersonaBar/Modules/Dnn.SiteSettings/App_LocalResources/SiteSettings.resx";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Logger">
          <declaration><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof(LanguagesControllerTasks));]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="SiteSettingsController">
      <declaration><![CDATA[public class SiteSettingsController]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private string _Manifest = Null.NullString;]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="50" sc="9" el="50" ec="52">Components\SiteSettingsController.cs</location>
            <body hash="a2a5e3bf9687d1de1bd78f528c5d7cc9"><![CDATA[private string _Manifest = Null.NullString]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="CreateAuthSystemPackage">
          <declaration><![CDATA[public bool CreateAuthSystemPackage(string cultureCode, PackageInfo authPackage, bool createZip)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="137" sc="9" el="149" ec="10">Components\SiteSettingsController.cs</location>
            <body hash="9a17661cf5bb2457907fb6ccfd5d6809"><![CDATA[{
            var package = new PackageInfo
            {
                Name = authPackage.Name,
                FriendlyName = authPackage.FriendlyName,
                Version = authPackage.Version,
                License = Util.PACKAGE_NoLicense
            };
            var fileName = Path.Combine(BasePath, "ResourcePack." + package.Name);
            var authSystem = AuthenticationController.GetAuthenticationServiceByPackageID(authPackage.PackageID);
            var authPath = authSystem.LoginControlSrc.Substring(0, authSystem.LoginControlSrc.LastIndexOf("/", StringComparison.Ordinal));
            return CreatePackage(cultureCode, package, authPackage.PackageID, authPath.Replace("/", "\\"), fileName, createZip);
        }]]></body>
          </codeblock>
        </method>
        <method name="CreateCorePackage">
          <declaration><![CDATA[public bool CreateCorePackage(string cultureCode, string fileName, bool createZip)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="152" sc="9" el="161" ec="10">Components\SiteSettingsController.cs</location>
            <body hash="42c8ee65b0b80bc73546224c5f203217"><![CDATA[{
            var package = new PackageInfo {Name = Globals.CleanFileName(fileName)};
            package.FriendlyName = package.Name;
            package.Version = DotNetNukeContext.Current.Application.Version;
            package.License = Util.PACKAGE_NoLicense;

            fileName = Path.Combine(BasePath, "ResourcePack." + package.Name);

            return CreatePackage(cultureCode, package, -2, "", fileName, createZip);
        }]]></body>
          </codeblock>
        </method>
        <method name="CreateFullPackage">
          <declaration><![CDATA[public void CreateFullPackage(string cultureCode, string fileName)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="164" sc="9" el="208" ec="10">Components\SiteSettingsController.cs</location>
            <body hash="95f62d4c5c3751b98ddbe7b0c3ef7ba1"><![CDATA[{
            Locale language = LocaleController.Instance.GetLocale(cultureCode);
            var package = new PackageInfo
            {
                Name = Globals.CleanFileName(fileName),
                Version = DotNetNukeContext.Current.Application.Version,
                License = Util.PACKAGE_NoLicense,
                PackageType = "CoreLanguagePack"
            };

            _Files = new Dictionary<string, InstallFile>();
            CreateCorePackage(cultureCode, fileName, false);
            foreach (var desktopModule in DesktopModuleController.GetDesktopModules(Null.NullInteger).Values.Where(desktopModule => !desktopModule.FolderName.StartsWith("Admin/")))
            {
                CreateModulePackage(cultureCode, desktopModule, false);
            }
            foreach (var provider in PackageController.Instance.GetExtensionPackages(Null.NullInteger, p => p.PackageType == "Provider"))
            {
                CreateProviderPackage(cultureCode, provider, false);
            }
            foreach (var authSystem in PackageController.Instance.GetExtensionPackages(Null.NullInteger, p => p.PackageType == "Auth_System"))
            {
                CreateAuthSystemPackage(cultureCode, authSystem, false);
            }
            foreach (var library in PackageController.Instance.GetExtensionPackages(Null.NullInteger, p => p.PackageType == "Library" || p.PackageType == "EvoqConnector"))
            {
                //only generate if a folder name is known for the library
                if (library.FolderName != null)
                {
                    CreateLibraryPackage(cultureCode, library, false);
                }
            }

            fileName = Path.Combine(BasePath, "ResourcePack." + package.Name);
            fileName = fileName + "." + package.Version.ToString(3) + "." + language.Code + ".zip";

            var packageWriter = PackageWriterFactory.GetWriter(package) as LanguagePackWriter;
            packageWriter.Language = language;
            packageWriter.BasePath = "";
            foreach (KeyValuePair<string, InstallFile> kvp in _Files)
            {
                packageWriter.Files.Add(kvp.Key, kvp.Value);
            }
            packageWriter.CreatePackage(fileName, package.Name + " " + language.Text + ".dnn", _Manifest, true);
        }]]></body>
          </codeblock>
        </method>
        <method name="CreateLibraryPackage">
          <declaration><![CDATA[public bool CreateLibraryPackage(string cultureCode, PackageInfo library, bool createZip)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="211" sc="9" el="222" ec="10">Components\SiteSettingsController.cs</location>
            <body hash="b1c10c8760c668ae6c09b968dc3f664a"><![CDATA[{
            var package = new PackageInfo
            {
                Name = library.Name,
                FriendlyName = library.FriendlyName,
                Version = library.Version,
                License = Util.PACKAGE_NoLicense
            };

            var fileName = Path.Combine(BasePath, "ResourcePack" + package.Name);
            return CreatePackage(cultureCode, package, library.PackageID, library.FolderName, fileName, createZip);
        }]]></body>
          </codeblock>
        </method>
        <method name="CreateModulePackage">
          <declaration><![CDATA[public bool CreateModulePackage(string cultureCode, DesktopModuleInfo desktopModule, bool createZip)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="225" sc="9" el="238" ec="10">Components\SiteSettingsController.cs</location>
            <body hash="24e38b40e3eb92d4cd5f44178333f4b6"><![CDATA[{
            var modulePackage = PackageController.Instance.GetExtensionPackage(Null.NullInteger, p => p.PackageID == desktopModule.PackageID);

            var package = new PackageInfo
            {
                Name = modulePackage.Name,
                FriendlyName = modulePackage.FriendlyName,
                Version = modulePackage.Version,
                License = Util.PACKAGE_NoLicense
            };

            var fileName = Path.Combine(BasePath, "ResourcePack." + package.Name);
            return CreatePackage(cultureCode, package, modulePackage.PackageID, Path.Combine("DesktopModules\\", desktopModule.FolderName), fileName, createZip);
        }]]></body>
          </codeblock>
        </method>
        <method name="CreatePackage">
          <declaration><![CDATA[private bool CreatePackage(string cultureCode, PackageInfo package, int dependentPackageId, string basePath, string fileName, bool createZip)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="241" sc="9" el="289" ec="10">Components\SiteSettingsController.cs</location>
            <body hash="096624015a65ae9b5bbb7c67c079a7b2"><![CDATA[{
            var language = LocaleController.Instance.GetLocale(cultureCode);
            var languagePack = new LanguagePackInfo
            {
                LanguageID = language.LanguageId,
                DependentPackageID = dependentPackageId
            };

            if (dependentPackageId == -2)
            {
                package.PackageType = "CoreLanguagePack";
            }
            else
            {
                package.PackageType = "ExtensionLanguagePack";
            }
            package.Name += " " + language.Text;
            package.FriendlyName += " " + language.Text;

            var packageWriter = PackageWriterFactory.GetWriter(package) as LanguagePackWriter;
            packageWriter.Language = language;
            packageWriter.LanguagePack = languagePack;
            packageWriter.BasePath = basePath;
            packageWriter.GetFiles(false);

            if (packageWriter.Files.Count > 0)
            {
                if (createZip)
                {
                    var manifest = packageWriter.WriteManifest(true);
                    fileName = fileName + "." + package.Version.ToString(3) + "." + language.Code + ".zip";
                    packageWriter.CreatePackage(fileName, package.Name + ".dnn", manifest, true);
                }
                else if (!_Manifest.Contains($@"package name=""{package.Name}"""))
                {
                    packageWriter.BasePath = "";
                    _Manifest += packageWriter.WriteManifest(true);
                    foreach (var kvp in packageWriter.Files)
                    {
                        _Files[kvp.Key] = kvp.Value;
                    }
                }
                return true;
            }
            else
            {
                return false;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="CreateProviderPackage">
          <declaration><![CDATA[public bool CreateProviderPackage(string cultureCode, PackageInfo providerPackage, bool createZip)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="292" sc="9" el="335" ec="10">Components\SiteSettingsController.cs</location>
            <body hash="809c3f0aa2519122f31e0819648f7026"><![CDATA[{
            var package = new PackageInfo
            {
                Name = providerPackage.Name,
                FriendlyName = providerPackage.FriendlyName,
                Version = providerPackage.Version,
                License = Util.PACKAGE_NoLicense
            };

            var fileName = Path.Combine(BasePath, "ResourcePack." + package.Name);

            //Get the provider "path"
            XmlDocument configDoc = Config.Load();
            string providerName = package.Name;
            if (providerName.IndexOf(".", StringComparison.Ordinal) > Null.NullInteger)
            {
                providerName = providerName.Substring(providerName.IndexOf(".", StringComparison.Ordinal) + 1);
            }
            switch (providerName)
            {
                case "SchedulingProvider":
                    providerName = "DNNScheduler";
                    break;
                case "SearchIndexProvider":
                    providerName = "ModuleIndexProvider";
                    break;
                case "SearchProvider":
                    providerName = "SearchDataStoreProvider";
                    break;
            }
            var providerNavigator = configDoc.CreateNavigator().SelectSingleNode("/configuration/dotnetnuke/*/providers/add[@name='" + providerName + "']") ??
                                    configDoc.CreateNavigator().SelectSingleNode("/configuration/dotnetnuke/*/providers/add[@name='" + package.Name + "']");

            if (providerNavigator != null)
            {
                string providerPath = providerNavigator.GetAttribute("providerPath", "");
                return CreatePackage(cultureCode, package, providerPackage.PackageID,
                    providerPath.Substring(2, providerPath.Length - 2).Replace("/", "\\"), fileName, createZip);
            }
            else
            {
                return false;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetAvailableAnalyzers">
          <declaration><![CDATA[public IList<string> GetAvailableAnalyzers()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="120" sc="9" el="134" ec="10">Components\SiteSettingsController.cs</location>
            <body hash="79e4dc36ed63b34342e8a6ffd4524e2e"><![CDATA[{
            var analyzers = new List<string>();
            foreach (var assembly in AppDomain.CurrentDomain.GetAssemblies())
            {
                try
                {
                    analyzers.AddRange(from t in assembly.GetTypes() where IsAnalyzerType(t) && IsAllowType(t) select string.Format("{0}, {1}", t.FullName, assembly.GetName().Name));
                }
                catch (Exception)
                {
                    //do nothing but just ignore the error.
                }
            }
            return analyzers;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetResourceFile">
          <declaration><![CDATA[public string GetResourceFile(string type, string language, int portalId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="367" sc="9" el="382" ec="10">Components\SiteSettingsController.cs</location>
            <body hash="7823fc330cfca2fb1bae023d2b71f6d5"><![CDATA[{
            string resourcefilename = "~/DesktopModules/Admin/Security/App_LocalResources/Profile.ascx";
            if (language != Localization.SystemLocale)
            {
                resourcefilename = resourcefilename + "." + language;
            }
            if (type == "Portal")
            {
                resourcefilename = resourcefilename + "." + "Portal-" + portalId;
            }
            else if (type == "Host")
            {
                resourcefilename = resourcefilename + "." + "Host";
            }
            return HttpContext.Current.Server.MapPath(resourcefilename + ".resx");
        }]]></body>
          </codeblock>
        </method>
        <method name="IsAllowType">
          <declaration><![CDATA[private bool IsAllowType(Type type)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="343" sc="9" el="345" ec="10">Components\SiteSettingsController.cs</location>
            <body hash="07e003dfd8be88c18f71add2ef3ca70f"><![CDATA[{
            return !type.FullName.Contains("Lucene.Net.Analysis.Analyzer") && !type.FullName.Contains("DotNetNuke");
        }]]></body>
          </codeblock>
        </method>
        <method name="IsAnalyzerType">
          <declaration><![CDATA[private bool IsAnalyzerType(Type type)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="338" sc="9" el="340" ec="10">Components\SiteSettingsController.cs</location>
            <body hash="e4cae8e6f368334b5ad362366910621f"><![CDATA[{
            return type != null && type.FullName != null && (type.FullName.Contains("Lucene.Net.Analysis.Analyzer") || IsAnalyzerType(type.BaseType));
        }]]></body>
          </codeblock>
        </method>
        <method name="SaveLocalizedKeys">
          <declaration><![CDATA[public void SaveLocalizedKeys(int portalId, string propertyName, string propertyCategory, string cultureCode, string propertyNameString, string propertyHelpString, string propertyRequiredString, string propertyValidationString, string categoryNameString)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="62" sc="9" el="117" ec="10">Components\SiteSettingsController.cs</location>
            <body hash="38051850cc6b58189725b4b4262a7fb9"><![CDATA[{
            var portalResources = new XmlDocument();
            var defaultResources = new XmlDocument();
            XmlNode parent;

            defaultResources.Load(GetResourceFile("", Localization.SystemLocale, portalId));
            string filename = GetResourceFile("Portal", cultureCode, portalId);

            if (File.Exists(filename))
            {
                portalResources.Load(filename);
            }
            else
            {
                portalResources.Load(GetResourceFile("", Localization.SystemLocale, portalId));
            }
            UpdateResourceFileNode(portalResources, "ProfileProperties_" + propertyName + ".Text", propertyNameString);
            UpdateResourceFileNode(portalResources, "ProfileProperties_" + propertyName + ".Help", propertyHelpString);
            UpdateResourceFileNode(portalResources, "ProfileProperties_" + propertyName + ".Required", propertyRequiredString);
            UpdateResourceFileNode(portalResources, "ProfileProperties_" + propertyName + ".Validation", propertyValidationString);
            UpdateResourceFileNode(portalResources, "ProfileProperties_" + propertyCategory + ".Header", categoryNameString);

            //remove unmodified keys
            foreach (XmlNode node in portalResources.SelectNodes("//root/data"))
            {
                XmlNode defaultNode = defaultResources.SelectSingleNode("//root/data[@name='" + node.Attributes["name"].Value + "']");
                if (defaultNode != null && defaultNode.InnerXml == node.InnerXml)
                {
                    parent = node.ParentNode;
                    parent.RemoveChild(node);
                }
            }

            //remove duplicate keys
            foreach (XmlNode node in portalResources.SelectNodes("//root/data"))
            {
                if (portalResources.SelectNodes("//root/data[@name='" + node.Attributes["name"].Value + "']").Count > 1)
                {
                    parent = node.ParentNode;
                    parent.RemoveChild(node);
                }
            }
            if (portalResources.SelectNodes("//root/data").Count > 0)
            {
                //there's something to save
                portalResources.Save(filename);
            }
            else
            {
                //nothing to be saved, if file exists delete
                if (File.Exists(filename))
                {
                    File.Delete(filename);
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateResourceFileNode">
          <declaration><![CDATA[private void UpdateResourceFileNode(XmlDocument xmlDoc, string key, string text)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="348" sc="9" el="364" ec="10">Components\SiteSettingsController.cs</location>
            <body hash="bcaa96e84693aa383ca95ad2c53875ce"><![CDATA[{
            XmlNode node;
            XmlNode nodeData;
            XmlAttribute attr;
            node = xmlDoc.SelectSingleNode("//root/data[@name='" + key + "']/value");
            if (node == null)
            {
                //missing entry
                nodeData = xmlDoc.CreateElement("data");
                attr = xmlDoc.CreateAttribute("name");
                attr.Value = key;
                nodeData.Attributes.Append(attr);
                xmlDoc.SelectSingleNode("//root").AppendChild(nodeData);
                node = nodeData.AppendChild(xmlDoc.CreateElement("value"));
            }
            node.InnerXml = HttpUtility.HtmlEncode(text);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_Files">
          <declaration><![CDATA[private Dictionary<string, InstallFile> _Files;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_Manifest">
          <declaration><![CDATA[private string _Manifest = Null.NullString;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="BasePath">
          <declaration><![CDATA[protected string BasePath]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="55" sc="13" el="57" ec="14">Components\SiteSettingsController.cs</location>
            <body hash="4d8567dce6eaae37735cbd6a5d08f97a"><![CDATA[{
                return HttpContext.Current.Server.MapPath("~/Install/Language");
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="Dnn.PersonaBar.SiteSettings.Components.Constants">
    <class name="LanguageResourceMode">
      <declaration><![CDATA[public enum LanguageResourceMode]]></declaration>
      <documentation>
      </documentation>
      <constructors>
      </constructors>
      <methods>
      </methods>
      <fields>
        <field name="Any">
          <declaration><![CDATA[public const LanguageResourceMode Any = 0;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Global">
          <declaration><![CDATA[public const LanguageResourceMode Global = 1;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Host">
          <declaration><![CDATA[public const LanguageResourceMode Host = 2;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Portal">
          <declaration><![CDATA[public const LanguageResourceMode Portal = 3;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Site">
          <declaration><![CDATA[public const LanguageResourceMode Site = 3;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="System">
          <declaration><![CDATA[public const LanguageResourceMode System = 1;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="LanguageResourceType">
      <declaration><![CDATA[public enum LanguageResourceType]]></declaration>
      <documentation>
      </documentation>
      <constructors>
      </constructors>
      <methods>
      </methods>
      <fields>
        <field name="GlobalResources">
          <declaration><![CDATA[public const LanguageResourceType GlobalResources = 1;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="LocalResources">
          <declaration><![CDATA[public const LanguageResourceType LocalResources = 2;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="SiteTemplates">
          <declaration><![CDATA[public const LanguageResourceType SiteTemplates = 0;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="Dnn.PersonaBar.SiteSettings.MenuControllers">
    <class name="SiteSettingsMenuController">
      <declaration><![CDATA[public class SiteSettingsMenuController : IMenuItemController]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public SiteSettingsMenuController()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="GetSettings">
          <declaration><![CDATA[public IDictionary<string, object> GetSettings(MenuItem menuItem)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="22" sc="9" el="26" ec="10">MenuControllers\SiteSettingsMenuController.cs</location>
            <body hash="5ed46893a78362d630a49113ef535d5c"><![CDATA[{
            var settings = new Dictionary<string, object>();
            settings.Add("isHost", UserController.Instance.GetCurrentUserInfo().IsSuperUser);
            return settings;
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateParameters">
          <declaration><![CDATA[public void UpdateParameters(MenuItem menuItem)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="12" sc="9" el="13" ec="10">MenuControllers\SiteSettingsMenuController.cs</location>
            <body hash="539fa760ca172337a931519768c64187"><![CDATA[{
        }]]></body>
          </codeblock>
        </method>
        <method name="Visible">
          <declaration><![CDATA[public bool Visible(MenuItem menuItem)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="16" sc="9" el="19" ec="10">MenuControllers\SiteSettingsMenuController.cs</location>
            <body hash="d4c78a0d5351d270343f678a4a02cf22"><![CDATA[{
            var user = UserController.Instance.GetCurrentUserInfo();
            return user.IsSuperUser || user.IsInRole(PortalSettings.Current?.AdministratorRoleName);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="Dnn.PersonaBar.SiteSettings.Services">
    <class name="KpvExtension">
      <declaration><![CDATA[internal static class KpvExtension]]></declaration>
      <documentation>
      </documentation>
      <constructors>
      </constructors>
      <methods>
        <method name="MapEntries">
          <declaration><![CDATA[public static IEnumerable<LocalizationEntry> MapEntries(this IEnumerable<KeyValuePair<string, string>> list)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="982" sc="9" el="992" ec="10">Services\LanguagesController.cs</location>
            <body hash="b9d6637230f5437fd81b9b77d758a26e"><![CDATA[{
            var appPath = Globals.ApplicationMapPath;
            var appPathLen = appPath.Length;
            if (!appPath.EndsWith(@"\")) appPathLen++;

            return list.Select(kpv => new LocalizationEntry
            {
                Name = kpv.Key,
                NewValue = (kpv.Value.StartsWith(appPath) ? kpv.Value.Substring(appPathLen) : kpv.Value).Replace(@"\", @"/")
            });
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="LanguagesController">
      <declaration><![CDATA[public class LanguagesController : PersonaBarApiController]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private ITabController _tabController = ServiceLocator<ITabController, TabController>.Instance;]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="44" sc="9" el="46" ec="81">Services\LanguagesController.cs</location>
            <body hash="22e964bb99c38905ddc6a141df7eba05"><![CDATA[private ITabController _tabController = TabController.Instance;
        private ILocaleController _localeController = LocaleController.Instance;
        private IPortalController _portalController = PortalController.Instance;]]></body>
          </codeblock>
        </constructor>
        <constructor name=".cctor">
          <declaration><![CDATA[static LanguagesController()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="32" sc="9" el="42" ec="87">Services\LanguagesController.cs</location>
            <body hash="a30d28cdcebbadd9f1ff44bc96daba0f"><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof(LanguagesController));
        private const string LocalResourcesFile = "~/DesktopModules/admin/Dnn.PersonaBar/Modules/Dnn.SiteSettings/App_LocalResources/SiteSettings.resx";
        private const string AuthFailureMessage = "Authorization has been denied for this request.";

        // Sample matches:
        // MyResources.ascx.en-US.resx
        // MyResources.ascx.en-US.Host.resx
        // MyResources.ascx.en-US.Portal-123.resx
        internal static readonly Regex FileInfoRegex = new Regex(
            @"\.([a-z]{2,3}\-[0-9A-Z]{2,4}(-[A-Z]{2})?)(\.(Host|Portal-\d+))?\.resx$",
            RegexOptions.IgnoreCase | RegexOptions.Compiled, TimeSpan.FromSeconds(1));]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="ActivateLanguage">
          <declaration><![CDATA[public HttpResponseMessage ActivateLanguage([FromUri] int? portalId, [FromUri] string cultureCode, [FromUri] bool enable)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="496" sc="9" el="524" ec="10">Services\LanguagesController.cs</location>
            <body hash="8880911a286d38c40b8ede3a1b89d256"><![CDATA[{
            try
            {
                var pid = portalId ?? PortalId;
                if (!UserInfo.IsSuperUser && pid != PortalId)
                {
                    return Request.CreateErrorResponse(HttpStatusCode.Unauthorized, AuthFailureMessage);
                }

                if (IsDefaultLanguage(pid, cultureCode))
                {
                    return Request.CreateErrorResponse(HttpStatusCode.BadRequest, "InvalidCulture");
                }

                var locale = _localeController.GetLocale(pid, cultureCode);
                if (locale == null)
                {
                    return Request.CreateErrorResponse(HttpStatusCode.BadRequest, "InvalidCulture");
                }

                _localeController.ActivateLanguage(pid, locale.Code, enable);
                return Request.CreateResponse(HttpStatusCode.OK, new { Success = true });
            }
            catch (Exception ex)
            {
                Logger.Error(ex);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, ex.ToString());
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="AddResourceKey">
          <declaration><![CDATA[private static XmlNode AddResourceKey(XmlDocument resourceDoc, string resourceKey)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="946" sc="9" el="955" ec="10">Services\LanguagesController.cs</location>
            <body hash="d315a4c164dd74932637df0a146bcbd0"><![CDATA[{
            // missing entry
            XmlNode nodeData = resourceDoc.CreateElement("data");
            var attr = resourceDoc.CreateAttribute("name");
            attr.Value = resourceKey;
            nodeData.Attributes?.Append(attr);
            var selectSingleNode = resourceDoc.SelectSingleNode("//root");
            selectSingleNode?.AppendChild(nodeData);
            return nodeData.AppendChild(resourceDoc.CreateElement("value"));
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteLanguagePages">
          <declaration><![CDATA[public HttpResponseMessage DeleteLanguagePages(int? portalId, string cultureCode)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="564" sc="9" el="596" ec="10">Services\LanguagesController.cs</location>
            <body hash="bb71b82780a13e2d3354ba88bf8688cd"><![CDATA[{
            try
            {
                var pid = portalId ?? PortalId;
                if (!UserInfo.IsSuperUser && pid != PortalId)
                {
                    return Request.CreateErrorResponse(HttpStatusCode.Unauthorized, AuthFailureMessage);
                }

                if (IsDefaultLanguage(pid, cultureCode))
                {
                    return Request.CreateErrorResponse(HttpStatusCode.BadRequest, "InvalidCulture");
                }

                var locale = _localeController.GetLocale(pid, cultureCode);
                if (locale == null)
                {
                    return Request.CreateErrorResponse(HttpStatusCode.BadRequest, "InvalidCulture");
                }

                _tabController.DeleteTranslatedTabs(pid, locale.Code, false);
                _portalController.RemovePortalLocalization(pid, locale.Code, false);
                _localeController.PublishLanguage(pid, locale.Code, false);

                DataCache.ClearPortalCache(pid, true);
                return Request.CreateResponse(HttpStatusCode.OK, new { Success = true });
            }
            catch (Exception ex)
            {
                Logger.Error(ex);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, ex.ToString());
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="DisableLocalizedContent">
          <declaration><![CDATA[public HttpResponseMessage DisableLocalizedContent([FromUri] int? portalId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="416" sc="9" el="446" ec="10">Services\LanguagesController.cs</location>
            <body hash="2e90e75e94276243e9b7278d28c8177f"><![CDATA[{
            try
            {
                var pid = portalId ?? PortalId;
                if (!UserInfo.IsSuperUser && pid != PortalId)
                {
                    return Request.CreateErrorResponse(HttpStatusCode.Unauthorized, AuthFailureMessage);
                }

                var portal = PortalController.Instance.GetPortal(pid);
                var portalSettings = new PortalSettings(portal);
                var portalDefault = portalSettings.DefaultLanguage;
                foreach (var locale in _localeController.GetLocales(pid).Values.Where(l => l.Code != portalDefault))
                {
                    _localeController.PublishLanguage(pid, locale.Code, false);
                    _tabController.DeleteTranslatedTabs(pid, locale.Code, false);
                    _portalController.RemovePortalLocalization(pid, locale.Code, false);
                }

                _tabController.EnsureNeutralLanguage(pid, portalDefault, false);
                PortalController.UpdatePortalSetting(pid, "ContentLocalizationEnabled", "False");
                DataCache.ClearPortalCache(pid, true);

                return Request.CreateResponse(HttpStatusCode.OK, new { Success = true });
            }
            catch (Exception ex)
            {
                Logger.Error(ex);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, ex.ToString());
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="EnableLocalizedContent">
          <declaration><![CDATA[public HttpResponseMessage EnableLocalizedContent([FromUri] int? portalId, [FromUri] bool translatePages)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="346" sc="9" el="367" ec="10">Services\LanguagesController.cs</location>
            <body hash="bb1745defaef8dde99a1d1d2d16f2bae"><![CDATA[{
            try
            {
                var pid = portalId ?? PortalId;
                if (!UserInfo.IsSuperUser && pid != PortalId)
                {
                    return Request.CreateErrorResponse(HttpStatusCode.Unauthorized, AuthFailureMessage);
                }

                var progress = new LocalizationProgress { InProgress = true, };
                var portal = PortalController.Instance.GetPortal(pid);
                var portalSettings = new PortalSettings(portal);
                LanguagesControllerTasks.LocalizeSitePages(
                    progress, pid, translatePages, portalSettings.DefaultLanguage ?? Localization.SystemLocale);
                return Request.CreateResponse(HttpStatusCode.OK, progress);
            }
            catch (Exception ex)
            {
                Logger.Error(ex);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, ex.ToString());
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetLocalizationProgress">
          <declaration><![CDATA[public HttpResponseMessage GetLocalizationProgress()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="399" sc="9" el="410" ec="10">Services\LanguagesController.cs</location>
            <body hash="228aad7fe816692c5b9252e3723607e2"><![CDATA[{
            try
            {
                var progress = LanguagesControllerTasks.ReadProgressFile();
                return Request.CreateResponse(HttpStatusCode.OK, progress);
            }
            catch (Exception ex)
            {
                Logger.Error(ex);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, ex.ToString());
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetResourceKeyXPath">
          <declaration><![CDATA[private static string GetResourceKeyXPath(string resourceKeyName)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="941" sc="9" el="943" ec="10">Services\LanguagesController.cs</location>
            <body hash="84ea89c10905d2df3c99a3789ce455b8"><![CDATA[{
            return "//root/data[@name=" + XmlUtils.XPathLiteral(resourceKeyName) + "]";
        }]]></body>
          </codeblock>
        </method>
        <method name="GetResxDirectories">
          <declaration><![CDATA[private static IEnumerable<KeyValuePair<string, string>> GetResxDirectories(string path)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="604" sc="9" el="614" ec="10">Services\LanguagesController.cs</location>
            <body hash="8f2cabb5f459a68552384997c070ff22"><![CDATA[{
            if (!Directory.Exists(path))
            {
                return new List<KeyValuePair<string, string>>();
            }

            return Directory.GetDirectories(path)
                .Select(folder => new DirectoryInfo(folder))
                .Where(folderInfo => HasLocalResources(folderInfo.FullName))
                .Select(folderInfo => new KeyValuePair<string, string>(folderInfo.Name, folderInfo.FullName));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetResxEntries">
          <declaration><![CDATA[public HttpResponseMessage GetResxEntries(int? portalId, string mode, string locale, string resourceFile, bool highlight = false)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="181" sc="9" el="284" ec="10">Services\LanguagesController.cs</location>
            <body hash="dc1084ad0a54d5045c64ed25617fef97"><![CDATA[{
            try
            {
                var pid = portalId ?? PortalId;
                if (!UserInfo.IsSuperUser && pid != PortalId)
                {
                    return Request.CreateErrorResponse(HttpStatusCode.Unauthorized, AuthFailureMessage);
                }

                LanguageResourceMode resourceMode;
                Enum.TryParse(mode, false, out resourceMode);

                if (!UserInfo.IsSuperUser && (resourceMode == LanguageResourceMode.Host || resourceMode == LanguageResourceMode.System))
                {
                    return Request.CreateErrorResponse(HttpStatusCode.Unauthorized, AuthFailureMessage);
                }

                var language = _localeController.GetLocale(locale);

                switch (resourceMode)
                {
                    case LanguageResourceMode.System:
                    case LanguageResourceMode.Host:
                    case LanguageResourceMode.Portal:
                        {
                            
                            break;
                        }
                    default:
                        return Request.CreateErrorResponse(HttpStatusCode.BadRequest, "UnsupportedMode");
                }

                if (language == null)
                {
                    return Request.CreateErrorResponse(HttpStatusCode.BadRequest,
                        string.Format(LocalizeString("InvalidLocale.ErrorMessage"), locale));
                }

                _selectedResourceFile = !string.IsNullOrEmpty(resourceFile)
                    ? HttpContext.Current.Server.MapPath("~/" + resourceFile)
                    : HttpContext.Current.Server.MapPath(Localization.GlobalResourceFile);

                var editTable = LoadFile(pid, resourceMode, "Edit", locale);
                var defaultTable = LoadFile(pid, resourceMode, "Default", locale);

                var fullPath = Path.GetFileName(ResourceFile(pid, locale, resourceMode).Replace(Globals.ApplicationMapPath, ""));
                var folder = ResourceFile(pid, locale, resourceMode).Replace(Globals.ApplicationMapPath, "").Replace("\\" + resourceFile, "");

                // check edit table and if empty, just use default
                if (editTable.Count == 0)
                {
                    editTable = defaultTable;
                }
                else
                {
                    //remove obsolete keys
                    var toBeDeleted = new ArrayList();
                    foreach (string key in editTable.Keys)
                    {
                        if (!defaultTable.Contains(key))
                        {
                            toBeDeleted.Add(key);
                        }
                    }
                    if (toBeDeleted.Count > 0)
                    {
                        Logger.Warn(LocalizeString("Obsolete"));
                        foreach (string key in toBeDeleted)
                        {
                            editTable.Remove(key);
                        }
                    }

                    //add missing keys
                    foreach (string key in defaultTable.Keys)
                    {
                        if (!editTable.Contains(key))
                        {
                            editTable.Add(key, defaultTable[key]);
                        }
                        else
                        {
                            // Update default value
                            var p = (Pair)editTable[key];
                            p.Second = ((Pair)defaultTable[key]).First;
                            editTable[key] = p;
                        }
                    }
                }

                return Request.CreateResponse(HttpStatusCode.OK, new
                {
                    File = fullPath,
                    Folder = folder,
                    LanguageCode = language.Code,
                    Translations = new SortedList(editTable),
                });
            }
            catch (Exception ex)
            {
                Logger.Error(ex);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, ex.ToString());
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetResxFiles">
          <declaration><![CDATA[private static IEnumerable<KeyValuePair<string, string>> GetResxFiles(string path)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="617" sc="9" el="625" ec="10">Services\LanguagesController.cs</location>
            <body hash="42729bbee3c14147dde386e1f1c7720c"><![CDATA[{
            var sysLocale = Localization.SystemLocale.ToLowerInvariant();
            return
                from file in Directory.GetFiles(path, "*.resx")
                select new FileInfo(file) into fileInfo
                let match = FileInfoRegex.Match(fileInfo.Name)
                where !match.Success || match.Groups[1].Value.ToLowerInvariant() == sysLocale
                select new KeyValuePair<string, string>(Path.GetFileNameWithoutExtension(fileInfo.Name), fileInfo.FullName);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetRootResourcesFolders">
          <declaration><![CDATA[public HttpResponseMessage GetRootResourcesFolders()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="80" sc="9" el="101" ec="10">Services\LanguagesController.cs</location>
            <body hash="891b79d20609ed16d078fc72c9df4b80"><![CDATA[{
            try
            {
                var folders = new List<KeyValuePair<string, string>>();
                var server = HttpContext.Current.Server;

                folders.Add(new KeyValuePair<string, string>(LocalizeString("LocalResources"), "_"));
                folders.Add(new KeyValuePair<string, string>(LocalizeString("GlobalResources"), server.MapPath("~/App_GlobalResources")));
                folders.Add(new KeyValuePair<string, string>(LocalizeString("SiteTemplates"), server.MapPath("~/Portals/_default")));

                return Request.CreateResponse(HttpStatusCode.OK,
                    new
                    {
                        Folders = folders.MapEntries()
                    });
            }
            catch (Exception ex)
            {
                Logger.Error(ex);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, ex.ToString());
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetSubRootResources">
          <declaration><![CDATA[public HttpResponseMessage GetSubRootResources(string currentFolder = null)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="106" sc="9" el="176" ec="10">Services\LanguagesController.cs</location>
            <body hash="ba714aefc7c1b9e2aaf0b2f79732c993"><![CDATA[{
            try
            {
                var folders = new List<KeyValuePair<string, string>>();
                var files = new List<KeyValuePair<string, string>>();
                var server = HttpContext.Current.Server;

                if (string.IsNullOrEmpty(currentFolder))
                {
                    folders.AddRange(new[]
                    {
                        "Admin",
                        "Controls",
                        "DesktopModules",
                        "Install",
                        "Providers"
                    }.Select(s => new KeyValuePair<string, string>(s, server.MapPath("~/" + "_/" + s))));

                    const string skins = "Skins";
                    var skinsPath = Path.Combine(Globals.ApplicationMapPath, skins);

                    if (Directory.Exists(skinsPath) && HasLocalResources(skinsPath))
                    {
                        folders.Add(new KeyValuePair<string, string>(LocalizeString("HostSkins"), skinsPath));
                    }

                    var portalSkinFolder = Path.Combine(PortalSettings.HomeSystemDirectoryMapPath, skins);
                    if (Directory.Exists(portalSkinFolder) &&
                        PortalSettings.ActiveTab.ParentId == PortalSettings.AdminTabId)
                    {
                        folders.Add(new KeyValuePair<string, string>(
                            LocalizeString("PortalSkins"),
                            Path.Combine(PortalSettings.HomeSystemDirectoryMapPath, skins)));
                    }
                }
                else
                {
                    string foldername = currentFolder;
                    if (currentFolder.IndexOf("_/", StringComparison.Ordinal) == 0)
                    {
                        foldername = foldername.Substring(2);
                    }
                    var directories = GetResxDirectories(server.MapPath("~/" + foldername));
                    var directoryFiles = GetResxFiles(server.MapPath("~/" + foldername));
                    if (currentFolder.IndexOf("_/", StringComparison.Ordinal) == 0)
                    {
                        folders.AddRange(directories.Select(
                                s => new KeyValuePair<string, string>(s.Key, s.Value.Replace(foldername.Replace("/", "\\"), currentFolder))));
                        files.AddRange(directoryFiles.Select(
                                f => new KeyValuePair<string, string>(f.Key, f.Value.Replace(foldername.Replace("/", "\\"), currentFolder))));
                    }
                    else
                    {
                        folders.AddRange(directories);
                        files.AddRange(directoryFiles);
                    }
                }

                return Request.CreateResponse(HttpStatusCode.OK,
                    new
                    {
                        Folders = folders.MapEntries(),
                        Files = files.MapEntries()
                    });
            }
            catch (Exception ex)
            {
                Logger.Error(ex);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, ex.ToString());
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetTabsForTranslation">
          <declaration><![CDATA[public HttpResponseMessage GetTabsForTranslation(int? portalId, string cultureCode)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="58" sc="9" el="75" ec="10">Services\LanguagesController.cs</location>
            <body hash="569b9b79bced0fae07897de2428645d0"><![CDATA[{
            try
            {
                var pid = portalId ?? PortalId;
                if (!UserInfo.IsSuperUser && pid != PortalId)
                {
                    return Request.CreateErrorResponse(HttpStatusCode.Unauthorized, AuthFailureMessage);
                }

                var nonTranslatedTabs = GetTabsForTranslationInternal(pid, cultureCode);
                return Request.CreateResponse(HttpStatusCode.OK, nonTranslatedTabs);
            }
            catch (Exception ex)
            {
                Logger.Error(ex);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, ex.ToString());
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetTabsForTranslationInternal">
          <declaration><![CDATA[private IList<LanguageTabDto> GetTabsForTranslationInternal(int portalId, string cultureCode)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="958" sc="9" el="976" ec="10">Services\LanguagesController.cs</location>
            <body hash="e82612ddc48c92b36490bc01c002dbce"><![CDATA[{
            var locale = new LocaleController().GetLocale(portalId, cultureCode);
            var portal = PortalController.Instance.GetPortal(portalId);
            var portalSettings = new PortalSettings(portal);
            var pages = new List<LanguageTabDto>();
            if (locale != null && locale.Code != portalSettings.DefaultLanguage)
            {
                var portalTabs = _tabController.GetTabsByPortal(portalId).WithCulture(locale.Code, false).Values;
                var nonTranslated = (from t in portalTabs where !t.IsTranslated && !t.IsDeleted select t);
                pages.AddRange(
                    nonTranslated.Select(page => new LanguageTabDto()
                    {
                        PageId = page.TabID,
                        PageName = page.TabName,
                        ViewUrl = Globals.NavigateURL(page.TabID),
                    }));
            }
            return pages;
        }]]></body>
          </codeblock>
        </method>
        <method name="HasLocalResources">
          <declaration><![CDATA[private static bool HasLocalResources(string path)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="628" sc="9" el="652" ec="10">Services\LanguagesController.cs</location>
            <body hash="cc4713f7d87f1ab870831c28f06f32ce"><![CDATA[{
            var folderInfo = new DirectoryInfo(path);

            if (path.ToLowerInvariant().EndsWith(Localization.LocalResourceDirectory))
            {
                return true;
            }

            if (!Directory.Exists(path))
            {
                return false;
            }

            var hasResources = false;
            foreach (var folder in Directory.GetDirectories(path))
            {
                if ((File.GetAttributes(folder) & FileAttributes.ReparsePoint) != FileAttributes.ReparsePoint)
                {
                    folderInfo = new DirectoryInfo(folder);
                    hasResources = hasResources || HasLocalResources(folderInfo.FullName);
                }
            }
            return hasResources || folderInfo.GetFiles("*.resx").Length > 0;

        }]]></body>
          </codeblock>
        </method>
        <method name="IsDefaultLanguage">
          <declaration><![CDATA[private bool IsDefaultLanguage(int portalId, string cultureCode)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="660" sc="9" el="664" ec="10">Services\LanguagesController.cs</location>
            <body hash="73b8220acce0c3d0ea4c6c03b0bc40b6"><![CDATA[{
            var portal = PortalController.Instance.GetPortal(portalId);
            var portalSettings = new PortalSettings(portal);
            return string.Equals(cultureCode, portalSettings.DefaultLanguage, StringComparison.InvariantCultureIgnoreCase);
        }]]></body>
          </codeblock>
        </method>
        <method name="IsLanguageEnabled">
          <declaration><![CDATA[private bool IsLanguageEnabled(int portalId, string cultureCode)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="667" sc="9" el="669" ec="10">Services\LanguagesController.cs</location>
            <body hash="c18bffb229ab900f2c2a71ad311dec90"><![CDATA[{
            return _localeController.GetLocales(portalId).ContainsKey(cultureCode);
        }]]></body>
          </codeblock>
        </method>
        <method name="LoadFile">
          <declaration><![CDATA[private Hashtable LoadFile(int portalId, LanguageResourceMode mode, string type, string locale)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   Loads resources from file
 </summary>
 <param name="portalId">Portal Id</param>
 <param name="mode">Active editor mode</param>
 <param name="type">Resource being loaded (edit or default)</param>
 <param name="locale">The locale of the file being edited</param>
 <returns></returns>
 <remarks>
   Depending on the editor mode, resources will be overrided using default DNN schema.
   "Edit" resources will only load selected file.
   When loading "Default" resources (to be used on the editor as helpers) fallback resource
   chain will be used in order for the editor to be able to correctly see what
   is the current default value for the any key. This process depends on the current active
   editor mode:
   - System: when editing system base resources on en-US needs to be loaded
   - Host: base en-US, and base locale especific resource
   - Portal: base en-US, host override for en-US, base locale especific resource, and host override
   for locale
 </remarks>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="694" sc="9" el="736" ec="10">Services\LanguagesController.cs</location>
            <body hash="31df8040e9bdef5fe123e1226bef9a32"><![CDATA[{
            string file;
            var ht = new Hashtable();

            if (type == "Edit")
            {
                // Only load resources from the file being edited
                file = ResourceFile(portalId, locale, mode);
                LoadResource(ht, file);
            }
            else if (type == "Default")
            {
                // Load system default
                file = ResourceFile(portalId, Localization.SystemLocale, LanguageResourceMode.System);
                LoadResource(ht, file);

                if (mode == LanguageResourceMode.Host)
                {
                    // Load base file for selected locale
                    file = ResourceFile(portalId, locale, LanguageResourceMode.System);
                    LoadResource(ht, file);
                }
                else if (mode == LanguageResourceMode.Portal)
                {
                    //Load host override for default locale
                    file = ResourceFile(portalId, Localization.SystemLocale, LanguageResourceMode.Host);
                    LoadResource(ht, file);

                    if (locale != Localization.SystemLocale)
                    {
                        // Load base file for locale
                        file = ResourceFile(portalId, locale, LanguageResourceMode.System);
                        LoadResource(ht, file);

                        //Load host override for selected locale
                        file = ResourceFile(portalId, locale, LanguageResourceMode.Host);
                        LoadResource(ht, file);
                    }
                }
            }

            return ht;
        }]]></body>
          </codeblock>
        </method>
        <method name="LoadResource">
          <declaration><![CDATA[private static void LoadResource(IDictionary ht, string filepath)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
  Loads resources from file into the HastTable
 </summary>
 <param name="ht">Current resources HashTable</param>
 <param name="filepath">Resources file</param>
 <returns>Base table updated with new resources </returns>
 <remarks>
   Returned hashtable uses resourcekey as key.
   Value contains a Pair object where:
   First=&gt;value to be edited
   Second=&gt;default value
 </remarks>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="753" sc="9" el="796" ec="10">Services\LanguagesController.cs</location>
            <body hash="6ef617dbd18f31bc72e978d396b648a3"><![CDATA[{
            var d = new XmlDocument();
            bool xmlLoaded;
            try
            {
                d.Load(filepath);
                xmlLoaded = true;
            }
            catch (Exception ex)
            {
                Logger.Error(ex.Message);
                xmlLoaded = false;
            }
            if (xmlLoaded)
            {
                var nLoopVariables = d.SelectNodes("root/data");
                if (nLoopVariables != null)
                {
                    foreach (XmlNode nLoopVariable in nLoopVariables)
                    {
                        var n = nLoopVariable;
                        if (n.NodeType != XmlNodeType.Comment)
                        {
                            var selectSingleNode = n.SelectSingleNode("value");
                            if (selectSingleNode != null)
                            {
                                var val = selectSingleNode.InnerXml;
                                if (n.Attributes != null)
                                {
                                    if (ht[n.Attributes["name"].Value] == null)
                                    {
                                        ht.Add(n.Attributes["name"].Value, new Pair(val, val));
                                    }
                                    else
                                    {
                                        ht[n.Attributes["name"].Value] = new Pair(val, val);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="LocalizedContent">
          <declaration><![CDATA[public HttpResponseMessage LocalizedContent([FromUri] int? portalId, [FromUri] string cultureCode)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="373" sc="9" el="394" ec="10">Services\LanguagesController.cs</location>
            <body hash="be8cc1897d5a9eb85441d6423beaa6a0"><![CDATA[{
            try
            {
                var pid = portalId ?? PortalId;
                if (!UserInfo.IsSuperUser && pid != PortalId)
                {
                    return Request.CreateErrorResponse(HttpStatusCode.Unauthorized, AuthFailureMessage);
                }

                var progress = new LocalizationProgress { InProgress = true, };
                var portal = PortalController.Instance.GetPortal(pid);
                var portalSettings = new PortalSettings(portal);
                LanguagesControllerTasks.LocalizeLanguagePages(
                    progress, pid, cultureCode, portalSettings.DefaultLanguage ?? Localization.SystemLocale);
                return Request.CreateResponse(HttpStatusCode.OK, progress);
            }
            catch (Exception ex)
            {
                Logger.Error(ex);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, ex.ToString());
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="LocalizeString">
          <declaration><![CDATA[private static string LocalizeString(string key)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="655" sc="9" el="657" ec="10">Services\LanguagesController.cs</location>
            <body hash="77d79a8b8e7e2a1c3c5c0fdaedfc0735"><![CDATA[{
            return Localization.GetString(key, LocalResourcesFile);
        }]]></body>
          </codeblock>
        </method>
        <method name="MarkAllPagesTranslated">
          <declaration><![CDATA[public HttpResponseMessage MarkAllPagesTranslated([FromUri] int? portalId, [FromUri] string cultureCode)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="452" sc="9" el="490" ec="10">Services\LanguagesController.cs</location>
            <body hash="489dcafedb2aa0bf57b71ec7aeec8acf"><![CDATA[{
            try
            {
                var pid = portalId ?? PortalId;
                if (!UserInfo.IsSuperUser && pid != PortalId)
                {
                    return Request.CreateErrorResponse(HttpStatusCode.Unauthorized, AuthFailureMessage);
                }

                if (IsDefaultLanguage(pid, cultureCode))
                {
                    return Request.CreateErrorResponse(HttpStatusCode.BadRequest, "InvalidCulture");
                }

                var locale = _localeController.GetLocale(pid, cultureCode);
                if (locale == null)
                {
                    return Request.CreateErrorResponse(HttpStatusCode.BadRequest, "InvalidCulture");
                }

                var nonTranslatedTabs =
                    from t in _tabController.GetTabsByPortal(pid).WithCulture(locale.Code, false).Values
                    where !t.IsTranslated && !t.IsDeleted
                    select t;

                foreach (var page in nonTranslatedTabs)
                {
                    page.LocalizedVersionGuid = page.DefaultLanguageTab.LocalizedVersionGuid;
                    _tabController.UpdateTab(page);
                }

                return Request.CreateResponse(HttpStatusCode.OK, new { Success = true });
            }
            catch (Exception ex)
            {
                Logger.Error(ex);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, ex.ToString());
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="PublishAllPages">
          <declaration><![CDATA[public HttpResponseMessage PublishAllPages([FromUri] int? portalId, [FromUri] string cultureCode, [FromUri] bool enable)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="530" sc="9" el="558" ec="10">Services\LanguagesController.cs</location>
            <body hash="8a84ebb88570aec6a111569a7fd5c5fd"><![CDATA[{
            try
            {
                var pid = portalId ?? PortalId;
                if (!UserInfo.IsSuperUser && pid != PortalId)
                {
                    return Request.CreateErrorResponse(HttpStatusCode.Unauthorized, AuthFailureMessage);
                }

                if (IsDefaultLanguage(pid, cultureCode))
                {
                    return Request.CreateErrorResponse(HttpStatusCode.BadRequest, "InvalidCulture");
                }

                var locale = _localeController.GetLocale(pid, cultureCode);
                if (locale == null)
                {
                    return Request.CreateErrorResponse(HttpStatusCode.BadRequest, "InvalidCulture");
                }

                _localeController.PublishLanguage(pid, locale.Code, enable);
                return Request.CreateResponse(HttpStatusCode.OK, new { Success = true });
            }
            catch (Exception ex)
            {
                Logger.Error(ex);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, ex.ToString());
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="ResourceFile">
          <declaration><![CDATA[private string ResourceFile(int portalId, string language, LanguageResourceMode mode)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   Returns the resource file name for a given resource and language
 </summary>
 <param name="portalId">Portal Id</param>
 <param name="language">Language Name.</param>
 <param name="mode">Identifies the resource being searched (System, Host, Portal)</param>
 <returns>Localized File Name</returns>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="808" sc="9" el="810" ec="10">Services\LanguagesController.cs</location>
            <body hash="6e3c704ff2969f62f2a83d48cfc6b487"><![CDATA[{
            return Localization.GetResourceFileName(_selectedResourceFile, language, mode.ToString(), portalId);
        }]]></body>
          </codeblock>
        </method>
        <method name="SaveResourceFileFile">
          <declaration><![CDATA[private string SaveResourceFileFile(int portalId, LanguageResourceMode mode, string locale, IEnumerable<LocalizationEntry> entries)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   Updates all values from the datagrid
 </summary>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="818" sc="9" el="938" ec="10">Services\LanguagesController.cs</location>
            <body hash="6e6d525b4f670d73aa954b825391c31c"><![CDATA[{
            var resDoc = new XmlDocument();
            var defDoc = new XmlDocument();

            var filename = ResourceFile(portalId, locale, mode);
            resDoc.Load(File.Exists(filename)
                ? filename :
                ResourceFile(portalId, Localization.SystemLocale, LanguageResourceMode.System));

            defDoc.Load(ResourceFile(portalId, Localization.SystemLocale, LanguageResourceMode.System));

            //store all changed resources
            var changedResources = new Dictionary<string, string>();

            // only items different from default will be saved
            foreach (var entry in entries)
            {
                var resourceKey = entry.Name;
                var txtValue = entry.NewValue;

                var node = resDoc.SelectSingleNode(GetResourceKeyXPath(resourceKey) + "/value");
                switch (mode)
                {
                    case LanguageResourceMode.System:
                        // this will save all items
                        if (node == null)
                        {
                            node = AddResourceKey(resDoc, resourceKey);
                        }
                        node.InnerXml = HttpUtility.HtmlEncode(txtValue);
                        if (txtValue != entry.DefaultValue)
                            changedResources.Add(resourceKey, txtValue);
                        break;
                    case LanguageResourceMode.Host:
                    case LanguageResourceMode.Portal:
                        // only items different from default will be saved
                        if (txtValue != entry.DefaultValue)
                        {
                            if (node == null)
                            {
                                node = AddResourceKey(resDoc, resourceKey);
                            }
                            node.InnerXml = HttpUtility.HtmlEncode(txtValue);
                            changedResources.Add(resourceKey, txtValue);
                        }
                        else
                        {
                            // remove item = default
                            var parent = node?.ParentNode;
                            if (parent != null)
                            {
                                resDoc.SelectSingleNode("//root")?.RemoveChild(parent);
                            }
                        }
                        break;
                }
            }

            // remove obsolete keys
            var nodeLoopVariables = resDoc.SelectNodes("//root/data");
            if (nodeLoopVariables != null)
            {
                foreach (XmlNode node in nodeLoopVariables)
                {
                    if (node.Attributes != null &&
                        defDoc.SelectSingleNode(GetResourceKeyXPath(node.Attributes["name"].Value)) == null)
                    {
                        node.ParentNode?.RemoveChild(node);
                    }
                }
            }

            // remove duplicate keys
            nodeLoopVariables = resDoc.SelectNodes("//root/data");
            if (nodeLoopVariables != null)
            {
                foreach (XmlNode node in nodeLoopVariables)
                {
                    if (node.Attributes != null)
                    {
                        var xmlNodeList = resDoc.SelectNodes(GetResourceKeyXPath(node.Attributes["name"].Value));
                        if (xmlNodeList != null && xmlNodeList.Count > 1)
                        {
                            node.ParentNode?.RemoveChild(node);
                        }
                    }
                }
            }

            switch (mode)
            {
                case LanguageResourceMode.System:
                    resDoc.Save(filename);
                    break;
                case LanguageResourceMode.Host:
                case LanguageResourceMode.Portal:
                    var xmlNodeList = resDoc.SelectNodes("//root/data");
                    if (xmlNodeList != null && xmlNodeList.Count > 0)
                    {
                        // there's something to save
                        resDoc.Save(filename);
                    }
                    else if (File.Exists(filename))
                    {
                        // nothing to be saved, if file exists delete
                        File.Delete(filename);
                    }
                    break;
            }

            if (changedResources.Count > 0)
            {
                var values = string.Join("; ", changedResources.Select(x => x.Key + "=" + x.Value));
                var log = new LogInfo { LogTypeKey = EventLogController.EventLogType.ADMIN_ALERT.ToString() };
                log.LogProperties.Add(new LogDetailInfo(LocalizeString("ResourceUpdated"), ResourceFile(portalId, locale, mode)));
                log.LogProperties.Add(new LogDetailInfo("Updated Values", values));
                LogController.Instance.AddLog(log);
            }

            return string.Format(LocalizeString("Updated"), ResourceFile(portalId, locale, mode));
        }]]></body>
          </codeblock>
        </method>
        <method name="SaveResxEntries">
          <declaration><![CDATA[public HttpResponseMessage SaveResxEntries(UpdateTransaltionsRequest request)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="290" sc="9" el="340" ec="10">Services\LanguagesController.cs</location>
            <body hash="434b5fe9a2f55f6abc01b29cb18bf5d2"><![CDATA[{
            try
            {
                var pid = request.PortalId ?? PortalId;
                if (!UserInfo.IsSuperUser && pid != PortalId)
                {
                    return Request.CreateErrorResponse(HttpStatusCode.Unauthorized, AuthFailureMessage);
                }

                LanguageResourceMode resourceMode;
                Enum.TryParse(request.Mode, false, out resourceMode);

                if (!UserInfo.IsSuperUser && (resourceMode == LanguageResourceMode.Host || resourceMode == LanguageResourceMode.System))
                {
                    return Request.CreateErrorResponse(HttpStatusCode.Unauthorized, AuthFailureMessage);
                }

                var language = _localeController.GetLocale(request.Locale);

                switch (resourceMode)
                {
                    case LanguageResourceMode.System:
                    case LanguageResourceMode.Host:
                    case LanguageResourceMode.Portal:
                        break;
                    default:
                        return Request.CreateErrorResponse(HttpStatusCode.BadRequest, "UnsupportedMode");
                }

                if (language == null)
                {
                    return Request.CreateErrorResponse(HttpStatusCode.BadRequest,
                        string.Format(LocalizeString("InvalidLocale.ErrorMessage"), request.Locale));
                }

                if (string.IsNullOrEmpty(request.ResourceFile))
                {
                    return Request.CreateErrorResponse(HttpStatusCode.BadRequest,
                        string.Format(LocalizeString("MissingResourceFileName"), request.Locale));
                }

                _selectedResourceFile = HttpContext.Current.Server.MapPath("~/" + request.ResourceFile);
                var message = SaveResourceFileFile(pid, resourceMode, request.Locale, request.Entries);
                return Request.CreateResponse(HttpStatusCode.OK, new { Message = message });
            }
            catch (Exception ex)
            {
                Logger.Error(ex);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, ex.ToString());
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_localeController">
          <declaration><![CDATA[private ILocaleController _localeController = ComponentBase<ILocaleController, LocaleController>.Instance;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_portalController">
          <declaration><![CDATA[private IPortalController _portalController = ServiceLocator<IPortalController, PortalController>.Instance;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_selectedResourceFile">
          <declaration><![CDATA[private string _selectedResourceFile;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_tabController">
          <declaration><![CDATA[private ITabController _tabController = ServiceLocator<ITabController, TabController>.Instance;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="AuthFailureMessage">
          <declaration><![CDATA[private const string AuthFailureMessage = "Authorization has been denied for this request.";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="FileInfoRegex">
          <declaration><![CDATA[internal static readonly Regex FileInfoRegex = new Regex("\\.([a-z]{2,3}\\-[0-9A-Z]{2,4}(-[A-Z]{2})?)(\\.(Host|Portal-\\d+))?\\.resx$", RegexOptions.IgnoreCase | RegexOptions.Compiled, TimeSpan.FromSeconds(1.0));]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="LocalResourcesFile">
          <declaration><![CDATA[private const string LocalResourcesFile = "~/DesktopModules/admin/Dnn.PersonaBar/Modules/Dnn.SiteSettings/App_LocalResources/SiteSettings.resx";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Logger">
          <declaration><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof(LanguagesController));]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="SiteSettingsController">
      <declaration><![CDATA[public class SiteSettingsController : PersonaBarApiController]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private readonly SiteSettingsController _controller = new SiteSettingsController();]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="55" sc="9" el="55" ec="114">Services\SiteSettingsController.cs</location>
            <body hash="b3a4780ed2678f0fa59d07e5dcd02b26"><![CDATA[private readonly Components.SiteSettingsController _controller = new Components.SiteSettingsController()]]></body>
          </codeblock>
        </constructor>
        <constructor name=".cctor">
          <declaration><![CDATA[static SiteSettingsController()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="54" sc="9" el="54" ec="111">Services\SiteSettingsController.cs</location>
            <body hash="447ab0c311c494b48f20b31bfda007ac"><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof(SiteSettingsController))]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="AddIgnoreWords">
          <declaration><![CDATA[public HttpResponseMessage AddIgnoreWords(UpdateIgnoreWordsRequest request)]]></declaration>
          <documentation>POST: api/SiteSettings/AddIgnoreWords
 <summary>
 Adds ignore words
 </summary>
 <param name="request"></param>
 <returns></returns></documentation>
          <codeblock>
            <location sl="1794" sc="9" el="1822" ec="10">Services\SiteSettingsController.cs</location>
            <body hash="d6880faaf89c844811c29876f604a064"><![CDATA[{
            try
            {
                var pid = request.PortalId ?? PortalId;
                if (!UserInfo.IsSuperUser && pid != PortalId)
                {
                    return Request.CreateErrorResponse(HttpStatusCode.Unauthorized, AuthFailureMessage);
                }

                string cultureCode = string.IsNullOrEmpty(request.CultureCode)
                    ? LocaleController.Instance.GetCurrentLocale(pid).Code
                    : request.CultureCode;

                var language = LocaleController.Instance.GetLocale(pid, cultureCode);
                if (language == null)
                {
                    return Request.CreateErrorResponse(HttpStatusCode.BadRequest,
                        string.Format(Localization.GetString("InvalidLocale.ErrorMessage", LocalResourcesFile), cultureCode));
                }

                var stopWordsId = SearchHelper.Instance.AddSearchStopWords(request.StopWords, pid, cultureCode);
                return Request.CreateResponse(HttpStatusCode.OK, new { Success = true, Id = stopWordsId });
            }
            catch (Exception exc)
            {
                Logger.Error(exc);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="AddLanguage">
          <declaration><![CDATA[public HttpResponseMessage AddLanguage(UpdateLanguageRequest request)]]></declaration>
          <documentation>POST: api/SiteSettings/AddLanguage
 <summary>
 Adds language
 </summary>
 <param name="request"></param>
 <returns></returns></documentation>
          <codeblock>
            <location sl="2255" sc="9" el="2285" ec="10">Services\SiteSettingsController.cs</location>
            <body hash="5f2324b964996ed4f369a745a54a6a5c"><![CDATA[{
            try
            {
                var pid = request.PortalId ?? PortalId;
                if (!UserInfo.IsSuperUser && pid != PortalId)
                {
                    return Request.CreateErrorResponse(HttpStatusCode.Unauthorized, AuthFailureMessage);
                }
                
                var language = LocaleController.Instance.GetLocale(request.Code) ?? new Locale { Code = request.Code };
                language.Code = request.Code;
                language.Fallback = request.Fallback;
                language.Text = CultureInfo.GetCultureInfo(request.Code).NativeName;
                Localization.SaveLanguage(language);

                if (!IsLanguageEnabled(pid, language.Code))
                {
                    Localization.AddLanguageToPortal(pid, language.LanguageId, true);
                }

                string roles = $"Administrators;{$"Translator ({language.Code})"}";
                PortalController.UpdatePortalSetting(pid, $"DefaultTranslatorRoles-{language.Code}", roles);

                return Request.CreateResponse(HttpStatusCode.OK, new { Success = true });
            }
            catch (Exception exc)
            {
                Logger.Error(exc);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="AddProfileProperty">
          <declaration><![CDATA[public HttpResponseMessage AddProfileProperty(UpdateProfilePropertyRequest request)]]></declaration>
          <documentation>POST: api/SiteSettings/AddProfileProperty
 <summary>
 Creates profile property
 </summary>
 <param name="request"></param>
 <returns></returns></documentation>
          <codeblock>
            <location sl="703" sc="9" el="752" ec="10">Services\SiteSettingsController.cs</location>
            <body hash="54f1f040d16e3767e9314624296833e7"><![CDATA[{
            try
            {
                var pid = request.PortalId ?? PortalId;
                if (!UserInfo.IsSuperUser && PortalId != pid)
                {
                    return Request.CreateErrorResponse(HttpStatusCode.Unauthorized, AuthFailureMessage);
                }

                var property = new ProfilePropertyDefinition(pid)
                {
                    DataType = request.DataType,
                    DefaultValue = request.DefaultValue,
                    PropertyCategory = request.PropertyCategory,
                    PropertyName = request.PropertyName,
                    ReadOnly = request.ReadOnly,
                    Required = !Globals.IsHostTab(PortalSettings.ActiveTab.TabID) && request.Required,
                    ValidationExpression = request.ValidationExpression,
                    ViewOrder = request.ViewOrder,
                    Visible = request.Visible,
                    Length = request.Length,
                    DefaultVisibility = (UserVisibilityMode)request.DefaultVisibility
                };

                if (ValidateProperty(property))
                {
                    var propertyId = ProfileController.AddPropertyDefinition(property);
                    if (propertyId < Null.NullInteger)
                    {
                        return Request.CreateErrorResponse(HttpStatusCode.BadRequest,
                            string.Format(Localization.GetString("DuplicateName", LocalResourcesFile)));
                    }
                    else
                    {
                        DataCache.ClearDefinitionsCache(pid);
                        return Request.CreateResponse(HttpStatusCode.OK, new { Success = true });
                    }
                }
                else
                {
                    return Request.CreateErrorResponse(HttpStatusCode.BadRequest,
                            string.Format(Localization.GetString("RequiredTextBox", LocalResourcesFile)));
                }
            }
            catch (Exception exc)
            {
                Logger.Error(exc);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="AddSiteAlias">
          <declaration><![CDATA[public HttpResponseMessage AddSiteAlias(UpdateSiteAliasRequest request)]]></declaration>
          <documentation>POST: api/SiteSettings/AddSiteAlias
 <summary>
 Adds site alias
 </summary>
 <param name="request"></param>
 <returns></returns></documentation>
          <codeblock>
            <location sl="1089" sc="9" el="1140" ec="10">Services\SiteSettingsController.cs</location>
            <body hash="bb973cf0be29b7b76df9363bdb8c11a5"><![CDATA[{
            try
            {
                var pid = request.PortalId ?? PortalId;
                if (!UserInfo.IsSuperUser && pid != PortalId)
                {
                    return Request.CreateErrorResponse(HttpStatusCode.Unauthorized, AuthFailureMessage);
                }

                string strAlias = request.HTTPAlias;
                if (!string.IsNullOrEmpty(strAlias))
                {
                    strAlias = strAlias.Trim();
                }

                if (IsHttpAliasValid(strAlias))
                {
                    var aliases = PortalAliasController.Instance.GetPortalAliases();
                    if (aliases.Contains(strAlias))
                    {
                        return Request.CreateErrorResponse(HttpStatusCode.BadRequest,
                            string.Format(Localization.GetString("DuplicateAlias", LocalResourcesFile)));
                    }

                    BrowserTypes browser;
                    Enum.TryParse(request.BrowserType, out browser);
                    PortalAliasInfo portalAlias = new PortalAliasInfo()
                    {
                        PortalID = pid,
                        HTTPAlias = strAlias,
                        Skin = request.Skin,
                        CultureCode = request.CultureCode,
                        BrowserType = browser,
                        IsPrimary = request.IsPrimary
                    };

                    PortalAliasController.Instance.AddPortalAlias(portalAlias);
                }
                else
                {
                    return Request.CreateErrorResponse(HttpStatusCode.BadRequest,
                            string.Format(Localization.GetString("InvalidAlias", LocalResourcesFile)));
                }

                return Request.CreateResponse(HttpStatusCode.OK, new { Success = true });
            }
            catch (Exception exc)
            {
                Logger.Error(exc);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="AddSynonymsGroup">
          <declaration><![CDATA[public HttpResponseMessage AddSynonymsGroup(UpdateSynonymsGroupRequest request)]]></declaration>
          <documentation>POST: api/SiteSettings/AddSynonymsGroup
 <summary>
 Adds Synonyms Group
 </summary>
 <param name="request"></param>
 <returns></returns></documentation>
          <codeblock>
            <location sl="1608" sc="9" el="1646" ec="10">Services\SiteSettingsController.cs</location>
            <body hash="963dd08d7a0ceb78a17029cc953f0555"><![CDATA[{
            try
            {
                var pid = request.PortalId ?? PortalId;
                if (!UserInfo.IsSuperUser && pid != PortalId)
                {
                    return Request.CreateErrorResponse(HttpStatusCode.Unauthorized, AuthFailureMessage);
                }

                string cultureCode = string.IsNullOrEmpty(request.CultureCode)
                    ? LocaleController.Instance.GetCurrentLocale(pid).Code
                    : request.CultureCode;

                var language = LocaleController.Instance.GetLocale(pid, cultureCode);
                if (language == null)
                {
                    return Request.CreateErrorResponse(HttpStatusCode.BadRequest,
                        string.Format(Localization.GetString("InvalidLocale.ErrorMessage", LocalResourcesFile), cultureCode));
                }

                string duplicateWord;
                var synonymsGroupId = SearchHelper.Instance.AddSynonymsGroup(request.SynonymsTags, pid, cultureCode, out duplicateWord);
                if (synonymsGroupId > 0)
                {
                    return Request.CreateResponse(HttpStatusCode.OK,
                        new { Success = true, Id = synonymsGroupId });
                }
                else
                {
                    return Request.CreateErrorResponse(HttpStatusCode.BadRequest, "[" + duplicateWord + "] " +
                            string.Format(Localization.GetString("SynonymsTagDuplicated", LocalResourcesFile)));
                }
            }
            catch (Exception exc)
            {
                Logger.Error(exc);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="CanDeleteProperty">
          <declaration><![CDATA[private bool CanDeleteProperty(ProfilePropertyDefinition definition)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2904" sc="9" el="2915" ec="10">Services\SiteSettingsController.cs</location>
            <body hash="888eed8feda70f508b924bef77271a6a"><![CDATA[{
            switch (definition.PropertyName.ToLowerInvariant())
            {
                case "lastname":
                case "firstname":
                case "preferredtimezone":
                case "preferredlocale":
                    return false;
                default:
                    return true;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="CanEnableDisable">
          <declaration><![CDATA[private bool CanEnableDisable(PortalSettings portalSettings, string code)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="3038" sc="9" el="3049" ec="10">Services\SiteSettingsController.cs</location>
            <body hash="37caf1ad0398aa91f666ac87e5add231"><![CDATA[{
            bool canEnable;
            if (IsLanguageEnabled(portalSettings.PortalId, code))
            {
                canEnable = !IsDefaultLanguage(portalSettings, code) && !IsLanguagePublished(portalSettings.PortalId, code);
            }
            else
            {
                canEnable = !IsDefaultLanguage(portalSettings, code);
            }
            return canEnable;
        }]]></body>
          </codeblock>
        </method>
        <method name="CompactSearchIndex">
          <declaration><![CDATA[public HttpResponseMessage CompactSearchIndex()]]></declaration>
          <documentation>POST: api/SiteSettings/CompactSearchIndex
 <summary>
 Compacts search index
 </summary>
 <returns></returns></documentation>
          <codeblock>
            <location sl="1408" sc="9" el="1419" ec="10">Services\SiteSettingsController.cs</location>
            <body hash="2bf29f992009bb46079f588a33e37f2f"><![CDATA[{
            try
            {
                SearchHelper.Instance.SetSearchReindexRequestTime(true);
                return Request.CreateResponse(HttpStatusCode.OK, new { Success = true });
            }
            catch (Exception exc)
            {
                Logger.Error(exc);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="CreateLanguagePack">
          <declaration><![CDATA[public HttpResponseMessage CreateLanguagePack(CreateLanguagePackRequest request)]]></declaration>
          <documentation>POST: api/SiteSettings/CreateLanguagePack
 <summary>
 Creates language
 </summary>
 <param name="request"></param>
 <returns></returns></documentation>
          <codeblock>
            <location sl="2627" sc="9" el="2684" ec="10">Services\SiteSettingsController.cs</location>
            <body hash="a7d6fc3dcc23a3c408f2021c63b7533c"><![CDATA[{
            try
            {
                bool created = false;
                switch (request.PackType)
                {
                    case "Core":
                        created = _controller.CreateCorePackage(request.CultureCode, request.FileName, true);
                        break;
                    case "Module":
                        foreach (int moduleId in request.ModuleIds)
                        {
                            DesktopModuleInfo desktopModule = DesktopModuleController.GetDesktopModule(moduleId, Null.NullInteger);
                            created = _controller.CreateModulePackage(request.CultureCode, desktopModule, true);
                        }

                        break;
                    case "Provider":
                        foreach (int moduleId in request.ModuleIds)
                        {
                            PackageInfo provider = PackageController.Instance.GetExtensionPackage(Null.NullInteger, p => p.PackageID == moduleId);
                            created = _controller.CreateProviderPackage(request.CultureCode, provider, true);
                        }

                        break;
                    case "AuthSystem":
                        foreach (int moduleId in request.ModuleIds)
                        {
                            PackageInfo authSystem = PackageController.Instance.GetExtensionPackage(Null.NullInteger, p => p.PackageID == moduleId);
                            created = _controller.CreateAuthSystemPackage(request.CultureCode, authSystem, true);
                        }

                        break;
                    case "Full":
                        _controller.CreateFullPackage(request.CultureCode, request.FileName);
                        created = true;
                        break;
                }

                if (created)
                {
                    return Request.CreateResponse(HttpStatusCode.OK, new
                    {
                        Success = true,
                        Message = string.Format(Localization.GetString("LanguagePackCreateSuccess", LocalResourcesFile), PortalSettings.PortalAlias.HTTPAlias)
                    });
                }
                else
                {
                    return Request.CreateErrorResponse(HttpStatusCode.BadRequest, Localization.GetString("LanguagePackCreateFailure", LocalResourcesFile));
                }
            }
            catch (Exception exc)
            {
                Logger.Error(exc);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteIgnoreWords">
          <declaration><![CDATA[public HttpResponseMessage DeleteIgnoreWords(UpdateIgnoreWordsRequest request)]]></declaration>
          <documentation>POST: api/SiteSettings/DeleteSynonymsGroup
 <summary>
 Deletes Synonyms Group
 </summary>
 <param name="request"></param>
 <returns></returns></documentation>
          <codeblock>
            <location sl="1872" sc="9" el="1892" ec="10">Services\SiteSettingsController.cs</location>
            <body hash="abb561f0d47ad0ced34650e4b6f99071"><![CDATA[{
            try
            {
                var pid = request.PortalId ?? PortalId;
                if (!UserInfo.IsSuperUser && pid != PortalId)
                {
                    return Request.CreateErrorResponse(HttpStatusCode.Unauthorized, AuthFailureMessage);
                }

                string cultureCode = string.IsNullOrEmpty(request.CultureCode)
                    ? LocaleController.Instance.GetCurrentLocale(pid).Code
                    : request.CultureCode;
                SearchHelper.Instance.DeleteSearchStopWords(request.StopWordsId, pid, cultureCode);
                return Request.CreateResponse(HttpStatusCode.OK, new { Success = true });
            }
            catch (Exception exc)
            {
                Logger.Error(exc);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteProfileProperty">
          <declaration><![CDATA[public HttpResponseMessage DeleteProfileProperty(int propertyId, int? portalId)]]></declaration>
          <documentation>POST: api/SiteSettings/DeleteProfileProperty
 <summary>
 Deletes profile property
 </summary>
 <param name="propertyId"></param>
 <param name="portalId"></param>
 <returns></returns></documentation>
          <codeblock>
            <location sl="864" sc="9" el="889" ec="10">Services\SiteSettingsController.cs</location>
            <body hash="c8fe4fe7dde02fe65f0b004afa22e379"><![CDATA[{
            try
            {
                var pid = portalId ?? PortalId;
                if (!UserInfo.IsSuperUser && PortalId != pid)
                {
                    return Request.CreateErrorResponse(HttpStatusCode.Unauthorized, AuthFailureMessage);
                }

                var propertyDefinition = ProfileController.GetPropertyDefinition(propertyId, pid);

                if (!CanDeleteProperty(propertyDefinition))
                {
                    return Request.CreateErrorResponse(HttpStatusCode.BadRequest, "ForbiddenDelete");
                }

                ProfileController.DeletePropertyDefinition(propertyDefinition);
                DataCache.ClearDefinitionsCache(pid);
                return Request.CreateResponse(HttpStatusCode.OK, new { Success = true });
            }
            catch (Exception exc)
            {
                Logger.Error(exc);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteSiteAlias">
          <declaration><![CDATA[public HttpResponseMessage DeleteSiteAlias(int portalAliasId)]]></declaration>
          <documentation>POST: api/SiteSettings/DeleteSiteAlias
 <summary>
 Deletes site alias
 </summary>
 <param name="portalAliasId"></param>
 <returns></returns></documentation>
          <codeblock>
            <location sl="1217" sc="9" el="1243" ec="10">Services\SiteSettingsController.cs</location>
            <body hash="d5522707a10059575c551e15da675102"><![CDATA[{
            try
            {
                var portalAlias = PortalAliasController.Instance.GetPortalAliasByPortalAliasID(portalAliasId);
                if (!UserInfo.IsSuperUser && portalAlias.PortalID != PortalId)
                {
                    return Request.CreateErrorResponse(HttpStatusCode.Unauthorized, AuthFailureMessage);
                }

                PortalAliasController.Instance.DeletePortalAlias(portalAlias);

                var portalFolder = PortalController.GetPortalFolder(portalAlias.HTTPAlias);
                var serverPath = GetAbsoluteServerPath();

                if (!string.IsNullOrEmpty(portalFolder) && Directory.Exists(serverPath + portalFolder))
                {
                    PortalController.DeletePortalFolder(serverPath, portalFolder);
                }

                return Request.CreateResponse(HttpStatusCode.OK, new { Success = true });
            }
            catch (Exception exc)
            {
                Logger.Error(exc);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteSynonymsGroup">
          <declaration><![CDATA[public HttpResponseMessage DeleteSynonymsGroup(UpdateSynonymsGroupRequest request)]]></declaration>
          <documentation>POST: api/SiteSettings/DeleteSynonymsGroup
 <summary>
 Deletes Synonyms Group
 </summary>
 <param name="request"></param>
 <returns></returns></documentation>
          <codeblock>
            <location sl="1716" sc="9" el="1740" ec="10">Services\SiteSettingsController.cs</location>
            <body hash="5982b39aba04d717ca28f1099a082f9a"><![CDATA[{
            try
            {
                var pid = request.PortalId ?? PortalId;
                if (!UserInfo.IsSuperUser && pid != PortalId)
                {
                    return Request.CreateErrorResponse(HttpStatusCode.Unauthorized, AuthFailureMessage);
                }

                if (request.SynonymsGroupID != null)
                {
                    SearchHelper.Instance.DeleteSynonymsGroup(request.SynonymsGroupID.Value, pid, request.CultureCode);
                    return Request.CreateResponse(HttpStatusCode.OK, new { Success = true });
                }
                else
                {
                    return Request.CreateResponse(HttpStatusCode.BadRequest, new { Success = false });
                }
            }
            catch (Exception exc)
            {
                Logger.Error(exc);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="DisplayDataType">
          <declaration><![CDATA[private string DisplayDataType(int dataType)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2936" sc="9" el="2945" ec="10">Services\SiteSettingsController.cs</location>
            <body hash="b17789b7d786accf9778a2b888e726f9"><![CDATA[{
            var retValue = Null.NullString;
            var listController = new ListController();
            var definitionEntry = listController.GetListEntryInfo("DataType", dataType);
            if (definitionEntry != null)
            {
                retValue = definitionEntry.Value;
            }
            return retValue;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetAbsoluteServerPath">
          <declaration><![CDATA[private string GetAbsoluteServerPath()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2918" sc="9" el="2933" ec="10">Services\SiteSettingsController.cs</location>
            <body hash="a256fa156a370c660fcf848c1fec6e85"><![CDATA[{
            var httpContext = Request.Properties["MS_HttpContext"] as HttpContextWrapper;
            if (httpContext != null)
            {
                var strServerPath = httpContext.Request.MapPath(httpContext.Request.ApplicationPath);
                if (!strServerPath.EndsWith("\\"))
                {
                    strServerPath += "\\";
                }
                return strServerPath;
            }
            else
            {
                return string.Empty;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetAllLanguages">
          <declaration><![CDATA[public HttpResponseMessage GetAllLanguages()]]></declaration>
          <documentation>GET: api/SiteSettings/GetAllLanguages
 <summary>
 Gets language
 </summary>
 <returns>all languages</returns></documentation>
          <codeblock>
            <location sl="2208" sc="9" el="2243" ec="10">Services\SiteSettingsController.cs</location>
            <body hash="0b85d32dcb60610a1f3105c9074a673c"><![CDATA[{
            try
            {
                var supportedLanguages = LocaleController.Instance.GetCultures(LocaleController.Instance.GetLocales(Null.NullInteger));
                var cultures = new List<CultureInfo>(CultureInfo.GetCultures(CultureTypes.SpecificCultures));

                foreach (CultureInfo info in supportedLanguages)
                {
                    string cultureCode = info.Name;
                    CultureInfo culture = cultures.SingleOrDefault(c => c.Name == cultureCode);
                    if (culture != null)
                    {
                        cultures.Remove(culture);
                    }
                }

                return Request.CreateResponse(HttpStatusCode.OK, new
                {
                    FullLanguageList = cultures.Select(c => new
                    {
                        c.NativeName,
                        c.EnglishName,
                        c.Name,
                        Icon = Globals.ResolveUrl(
                            string.IsNullOrEmpty(c.Name)
                                ? "/images/Flags/none.gif"
                                : $"/images/Flags/{c.Name}.gif")
                    })
                });
            }
            catch (Exception exc)
            {
                Logger.Error(exc);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetBasicSearchSettings">
          <declaration><![CDATA[public HttpResponseMessage GetBasicSearchSettings()]]></declaration>
          <documentation>GET: api/SiteSettings/GetBasicSearchSettings
 <summary>
 Gets basic search settings
 </summary>
 <returns>basic search settings</returns></documentation>
          <codeblock>
            <location sl="1294" sc="9" el="1331" ec="10">Services\SiteSettingsController.cs</location>
            <body hash="e0b3d89bbaa7cfd1219593e963646d59"><![CDATA[{
            try
            {
                dynamic settings = new ExpandoObject();
                settings.MinWordLength = HostController.Instance.GetInteger("Search_MinKeyWordLength", 3);
                settings.MaxWordLength = HostController.Instance.GetInteger("Search_MaxKeyWordLength", 255);
                settings.AllowLeadingWildcard = HostController.Instance.GetString("Search_AllowLeadingWildcard", "N") == "Y";
                settings.SearchCustomAnalyzer = HostController.Instance.GetString("Search_CustomAnalyzer", string.Empty);
                settings.TitleBoost = HostController.Instance.GetInteger(SearchTitleBoostSetting, DefaultSearchTitleBoost);
                settings.TagBoost = HostController.Instance.GetInteger(SearchTagBoostSetting, DefaultSearchTagBoost);
                settings.ContentBoost = HostController.Instance.GetInteger(SearchContentBoostSetting, DefaultSearchContentBoost);
                settings.DescriptionBoost = HostController.Instance.GetInteger(SearchDescriptionBoostSetting, DefaultSearchDescriptionBoost);
                settings.AuthorBoost = HostController.Instance.GetInteger(SearchAuthorBoostSetting, DefaultSearchAuthorBoost);
                settings.SearchIndexPath = Path.Combine(Globals.ApplicationMapPath, HostController.Instance.GetString("SearchFolder", @"App_Data\Search"));

                SearchStatistics searchStatistics = GetSearchStatistics();
                if (searchStatistics != null)
                {
                    settings.SearchIndexDbSize = ((searchStatistics.IndexDbSize/1024f)/1024f).ToString("N") + " MB";
                    settings.SearchIndexLastModifedOn = DateUtils.CalculateDateForDisplay(searchStatistics.LastModifiedOn);
                    settings.SearchIndexTotalActiveDocuments = searchStatistics.TotalActiveDocuments.ToString(CultureInfo.InvariantCulture);
                    settings.SearchIndexTotalDeletedDocuments = searchStatistics.TotalDeletedDocuments.ToString(CultureInfo.InvariantCulture);
                }

                var response = new
                {
                    Success = true,
                    Settings = settings,
                    SearchCustomAnalyzers = _controller.GetAvailableAnalyzers()
                };
                return Request.CreateResponse(HttpStatusCode.OK, response);
            }
            catch (Exception exc)
            {
                Logger.Error(exc);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetCultureDropDownType">
          <declaration><![CDATA[private CultureDropDownTypes GetCultureDropDownType(int portalId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="3052" sc="9" el="3068" ec="10">Services\SiteSettingsController.cs</location>
            <body hash="c2534bdc675c978b018de024eed4029f"><![CDATA[{
            CultureDropDownTypes displayType;
            string viewType = GetLanguageDisplayMode(portalId);
            switch (viewType)
            {
                case "NATIVE":
                    displayType = CultureDropDownTypes.NativeName;
                    break;
                case "ENGLISH":
                    displayType = CultureDropDownTypes.EnglishName;
                    break;
                default:
                    displayType = CultureDropDownTypes.DisplayName;
                    break;
            }
            return displayType;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetCultureList">
          <declaration><![CDATA[public HttpResponseMessage GetCultureList(int? portalId)]]></declaration>
          <documentation>GET: api/SiteSettings/GetCultureList
 <summary>
 Gets culture list
 </summary>
 <param name="portalId"></param>
 <returns>Culture List</returns></documentation>
          <codeblock>
            <location sl="1515" sc="9" el="1551" ec="10">Services\SiteSettingsController.cs</location>
            <body hash="5828415fdd704c09d333e800f07eb3fb"><![CDATA[{
            try
            {
                var pid = portalId ?? PortalId;
                if (!UserInfo.IsSuperUser && pid != PortalId)
                {
                    return Request.CreateErrorResponse(HttpStatusCode.Unauthorized, AuthFailureMessage);
                }

                var portal = PortalController.Instance.GetPortal(pid);
                var portalSettings = new PortalSettings(portal);

                string viewType = GetLanguageDisplayMode(pid);

                var locals = LocaleController.Instance.GetLocales(pid).Values;
                var cultureCodeList = locals.Select(local => new
                {
                    Name = viewType == "NATIVE" ? local.NativeName : local.EnglishName,
                    local.Code,
                    Icon = Globals.ResolveUrl(string.IsNullOrEmpty(local.Code) ? "~/images/Flags/none.gif" :
                        $"~/images/Flags/{local.Code}.gif"),
                    IsDefault = local.Code == portalSettings.DefaultLanguage
                }).ToList();

                var response = new
                {
                    Success = true,
                    Cultures = cultureCodeList
                };
                return Request.CreateResponse(HttpStatusCode.OK, response);
            }
            catch (Exception exc)
            {
                Logger.Error(exc);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetDefaultPagesSettings">
          <declaration><![CDATA[public HttpResponseMessage GetDefaultPagesSettings(int? portalId, string cultureCode)]]></declaration>
          <documentation>GET: api/SiteSettings/GetDefaultPagesSettings
 <summary>
 Gets default pages settings
 </summary>
 <param name="portalId"></param>
 <param name="cultureCode"></param>
 <returns>default pages settings</returns></documentation>
          <codeblock>
            <location sl="223" sc="9" el="277" ec="10">Services\SiteSettingsController.cs</location>
            <body hash="ca521496ea835626bc049b36b7597960"><![CDATA[{
            try
            {
                var pid = portalId ?? PortalId;
                if (!UserInfo.IsSuperUser && PortalId != pid)
                {
                    return Request.CreateErrorResponse(HttpStatusCode.Unauthorized, AuthFailureMessage);
                }

                cultureCode = string.IsNullOrEmpty(cultureCode)
                    ? LocaleController.Instance.GetCurrentLocale(pid).Code
                    : cultureCode;

                var language = LocaleController.Instance.GetLocale(pid, cultureCode);
                if (language == null)
                {
                    return Request.CreateErrorResponse(HttpStatusCode.BadRequest,
                        string.Format(Localization.GetString("InvalidLocale.ErrorMessage", LocalResourcesFile), cultureCode));
                }

                var portal = PortalController.Instance.GetPortal(pid, cultureCode);
                var portalSettings = new PortalSettings(portal);

                return Request.CreateResponse(HttpStatusCode.OK, new
                {
                    Settings = new
                    {
                        PortalId = portal.PortalID,
                        portal.CultureCode,
                        portal.SplashTabId,
                        SplashTabName = portal.SplashTabId != Null.NullInteger ? TabController.Instance.GetTab(portal.SplashTabId, pid).TabName : string.Empty,
                        portal.HomeTabId,
                        HomeTabName = portal.HomeTabId != Null.NullInteger ? TabController.Instance.GetTab(portal.HomeTabId, pid).TabName : string.Empty,
                        portal.LoginTabId,
                        LoginTabName = portal.LoginTabId != Null.NullInteger ? TabController.Instance.GetTab(portal.LoginTabId, pid).TabName : string.Empty,
                        portal.RegisterTabId,
                        RegisterTabName = portal.RegisterTabId != Null.NullInteger ? TabController.Instance.GetTab(portal.RegisterTabId, pid).TabName : string.Empty,
                        portal.UserTabId,
                        UserTabName = portal.UserTabId != Null.NullInteger ? TabController.Instance.GetTab(portal.UserTabId, pid).TabName : string.Empty,
                        portal.SearchTabId,
                        SearchTabName = portal.SearchTabId != Null.NullInteger ? TabController.Instance.GetTab(portal.SearchTabId, pid).TabName : string.Empty,
                        portal.Custom404TabId,
                        Custom404TabName = portal.Custom404TabId != Null.NullInteger ? TabController.Instance.GetTab(portal.Custom404TabId, pid).TabName : string.Empty,
                        portal.Custom500TabId,
                        Custom500TabName = portal.Custom500TabId != Null.NullInteger ? TabController.Instance.GetTab(portal.Custom500TabId, pid).TabName : string.Empty,
                        portalSettings.PageHeadText
                    }
                });
            }
            catch (Exception exc)
            {
                Logger.Error(exc);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetIgnoreWords">
          <declaration><![CDATA[public HttpResponseMessage GetIgnoreWords(int? portalId, string cultureCode)]]></declaration>
          <documentation>GET: api/SiteSettings/GetIgnoreWords
 <summary>
 Gets ignore words
 </summary>
 <param name="portalId"></param>
 <param name="cultureCode"></param>
 <returns>ignore words</returns></documentation>
          <codeblock>
            <location sl="1751" sc="9" el="1783" ec="10">Services\SiteSettingsController.cs</location>
            <body hash="187bee4c2e60e1239df494f1cd59bf59"><![CDATA[{
            try
            {
                var pid = portalId ?? PortalId;
                if (!UserInfo.IsSuperUser && pid != PortalId)
                {
                    return Request.CreateErrorResponse(HttpStatusCode.Unauthorized, AuthFailureMessage);
                }

                var language = LocaleController.Instance.GetLocale(pid, cultureCode);
                if (language == null)
                {
                    return Request.CreateErrorResponse(HttpStatusCode.BadRequest,
                        string.Format(Localization.GetString("InvalidLocale.ErrorMessage", LocalResourcesFile), cultureCode));
                }

                var words = SearchHelper.Instance.GetSearchStopWords(pid, string.IsNullOrEmpty(cultureCode) ? LocaleController.Instance.GetCurrentLocale(pid).Code : cultureCode);

                var response = new
                {
                    PortalId = pid,
                    CultureCode = cultureCode,
                    StopWordsId = words?.StopWordsId ?? Null.NullInteger,
                    StopWords = words?.StopWords
                };
                return Request.CreateResponse(HttpStatusCode.OK, response);
            }
            catch (Exception exc)
            {
                Logger.Error(exc);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetLanguage">
          <declaration><![CDATA[public HttpResponseMessage GetLanguage(int? portalId, int? languageId)]]></declaration>
          <documentation>GET: api/SiteSettings/GetLanguage
 <summary>
 Gets language
 </summary>
 <param name="portalId"></param>
 <param name="languageId"></param>
 <returns>language</returns></documentation>
          <codeblock>
            <location sl="2120" sc="9" el="2199" ec="10">Services\SiteSettingsController.cs</location>
            <body hash="c46342891c7f448e0d3e6a180d93c9d6"><![CDATA[{
            try
            {
                var pid = portalId ?? PortalId;
                if (!UserInfo.IsSuperUser && pid != PortalId)
                {
                    return Request.CreateErrorResponse(HttpStatusCode.Unauthorized, AuthFailureMessage);
                }

                var lid = languageId ?? Null.NullInteger;
                var portalSettings = new PortalSettings(pid);
                var language = lid != Null.NullInteger ? LocaleController.Instance.GetLocale(lid) : null;

                var fallbacks = language != null ? LocaleController.Instance.GetCultures(LocaleController.Instance.GetLocales(Null.NullInteger))
                    .Where(l => l.Name != language.Code)
                    .Select(l => new
                    {
                        l.NativeName,
                        l.EnglishName,
                        l.Name,
                        Icon = Globals.ResolveUrl(
                            string.IsNullOrEmpty(l.Name)
                                ? "~/images/Flags/none.gif"
                                : $"~/images/Flags/{l.Name}.gif")
                    }).ToList() : LocaleController.Instance.GetCultures(LocaleController.Instance.GetLocales(Null.NullInteger))
                    .Select(l => new
                    {
                        l.NativeName,
                        l.EnglishName,
                        l.Name,
                        Icon = Globals.ResolveUrl(
                            string.IsNullOrEmpty(l.Name)
                                ? "~/images/Flags/none.gif"
                                : $"~/images/Flags/{l.Name}.gif")
                    }).ToList();

                fallbacks.Insert(0, new
                {
                    NativeName = Localization.GetString("System_Default", LocalResourcesFile),
                    EnglishName = Localization.GetString("System_Default", LocalResourcesFile),
                    Name = "",
                    Icon = Globals.ResolveUrl("~/images/Flags/none.gif")
                });

                return Request.CreateResponse(HttpStatusCode.OK, new
                {
                    Language = language != null ? new
                    {
                        PortalId = pid,
                        language.LanguageId,
                        language.NativeName,
                        language.EnglishName,
                        language.Code,
                        language.Fallback,
                        Enabled = IsLanguageEnabled(pid, language.Code),
                        CanEnableDisable = CanEnableDisable(portalSettings, language.Code),
                        IsDefault = language.Code == portalSettings.DefaultLanguage,
                        Roles = PortalController.GetPortalSetting($"DefaultTranslatorRoles-{language.Code}", pid, "Administrators")
                    } : new
                    {
                        PortalId = pid,
                        LanguageId = Null.NullInteger,
                        NativeName = "",
                        EnglishName = "",
                        Code = "",
                        Fallback = "",
                        Enabled = false,
                        CanEnableDisable = false,
                        IsDefault = false,
                        Roles = ""
                    },
                    SupportedFallbacks = fallbacks
                });
            }
            catch (Exception exc)
            {
                Logger.Error(exc);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetLanguageDisplayMode">
          <declaration><![CDATA[private string GetLanguageDisplayMode(int portalId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="3071" sc="9" el="3078" ec="10">Services\SiteSettingsController.cs</location>
            <body hash="83cd5fd70a60fab9150ae3c80144c81d"><![CDATA[{
            string viewTypePersonalizationKey = "LanguageDisplayMode:ViewType" + portalId;
            var personalizationController = new PersonalizationController();
            var personalization = personalizationController.LoadProfile(UserInfo.UserID, portalId);

            string viewType = Convert.ToString(personalization.Profile[viewTypePersonalizationKey]);
            return string.IsNullOrEmpty(viewType) ? "NATIVE" : viewType;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetLanguages">
          <declaration><![CDATA[public HttpResponseMessage GetLanguages(int? portalId)]]></declaration>
          <documentation>GET: api/SiteSettings/GetLanguages
 <summary>
 Gets languages
 </summary>
 <param name="portalId"></param>
 <returns>languages</returns></documentation>
          <codeblock>
            <location sl="2046" sc="9" el="2109" ec="10">Services\SiteSettingsController.cs</location>
            <body hash="44ef15f0a4d484788d2bd263e0304a97"><![CDATA[{
            try
            {
                var pid = portalId ?? PortalId;
                if (!UserInfo.IsSuperUser && pid != PortalId)
                {
                    return Request.CreateErrorResponse(HttpStatusCode.Unauthorized, AuthFailureMessage);
                }

                var portal = PortalController.Instance.GetPortal(pid);
                var portalSettings = new PortalSettings(portal);
                
                if (portalSettings.ContentLocalizationEnabled)
                {
                    return Request.CreateResponse(HttpStatusCode.OK, new
                    {
                        Languages = LocaleController.Instance.GetLocales(Null.NullInteger).Values.Select(l => new
                        {
                            l.LanguageId,
                            Icon = Globals.ResolveUrl(
                                string.IsNullOrEmpty(l.Code)
                                    ? "~/images/Flags/none.gif"
                                    : $"~/images/Flags/{l.Code}.gif"),
                            l.Code,
                            l.NativeName,
                            l.EnglishName,
                            Enabled = IsLanguageEnabled(pid, l.Code),
                            IsDefault = l.Code == portalSettings.DefaultLanguage,
                            LocalizablePages = GetLocalizablePages(pid, l.Code),
                            LocalizedStatus = GetLocalizedStatus(portalSettings, l.Code),
                            TranslatedPages = GetTranslatedPages(portalSettings, l.Code),
                            TranslatedStatus = GetTranslatedStatus(portalSettings, l.Code),
                            Active = IsLanguagePublished(pid, l.Code),
                            IsLocalized = IsLocalized(portalSettings, l.Code),
                            PublishedPages = GetPublishedLocalizedPages(pid, l.Code)
                        })
                    });
                }
                else
                {
                    return Request.CreateResponse(HttpStatusCode.OK, new
                    {
                        Languages = LocaleController.Instance.GetLocales(Null.NullInteger).Values.Select(l => new
                        {
                            l.LanguageId,
                            Icon = Globals.ResolveUrl(
                                string.IsNullOrEmpty(l.Code)
                                    ? "~/images/Flags/none.gif"
                                    : $"~/images/Flags/{l.Code}.gif"),
                            l.Code,
                            l.NativeName,
                            l.EnglishName,
                            Enabled = IsLanguageEnabled(pid, l.Code),
                            IsDefault = l.Code == portalSettings.DefaultLanguage
                        })
                    });
                }
            }
            catch (Exception exc)
            {
                Logger.Error(exc);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetLanguageSettings">
          <declaration><![CDATA[public HttpResponseMessage GetLanguageSettings(int? portalId)]]></declaration>
          <documentation>GET: api/SiteSettings/GetLanguageSettings
 <summary>
 Gets language settings
 </summary>
 <param name="portalId"></param>
 <returns>language settings</returns></documentation>
          <codeblock>
            <location sl="1906" sc="9" el="1961" ec="10">Services\SiteSettingsController.cs</location>
            <body hash="0ee3267c13901363d509f0cb293a8cda"><![CDATA[{
            try
            {
                var pid = portalId ?? PortalId;
                if (!UserInfo.IsSuperUser && pid != PortalId)
                {
                    return Request.CreateErrorResponse(HttpStatusCode.Unauthorized,
                        "Authorization has been denied for this request.");
                }

                var portal = PortalController.Instance.GetPortal(pid);
                var portalSettings = new PortalSettings(portal);

                var languageDisplayModes = new List<KeyValuePair<string, string>>
                {
                    new KeyValuePair<string, string>(Localization.GetString("NativeName", LocalResourcesFile), "NATIVE"),
                    new KeyValuePair<string, string>(Localization.GetString("EnglishName", LocalResourcesFile),
                        "ENGLISH")
                };

                var settings = new
                {
                    PortalId = portal.PortalID,
                    portalSettings.ContentLocalizationEnabled,
                    SystemDefaultLanguage = string.IsNullOrEmpty(Localization.SystemLocale)
                    ? Localization.GetString("NeutralCulture", Localization.GlobalResourceFile)
                    : Localization.GetLocaleName(Localization.SystemLocale, GetCultureDropDownType(pid)),
                    SystemDefaultLanguageIcon = Globals.ResolveUrl(string.IsNullOrEmpty(Localization.SystemLocale) ? "~/images/Flags/none.gif" : $"~/images/Flags/{Localization.SystemLocale}.gif"),
                    SiteDefaultLanguage = portalSettings.DefaultLanguage,
                    LanguageDisplayMode = GetLanguageDisplayMode(pid),
                    portalSettings.EnableUrlLanguage,
                    portalSettings.EnableBrowserLanguage,
                    portalSettings.AllowUserUICulture,
                    portal.CultureCode,
                    AllowContentLocalization = Host.EnableContentLocalization
                };

                return Request.CreateResponse(HttpStatusCode.OK, new
                {
                    Settings = settings,
                    Languages = LocaleController.Instance.GetCultures(LocaleController.Instance.GetLocales(Null.NullInteger)).Select(l => new
                    {
                        l.NativeName,
                        l.EnglishName,
                        l.Name,
                        Icon = Globals.ResolveUrl(string.IsNullOrEmpty(l.Name) ? "~/images/Flags/none.gif" : $"~/images/Flags/{l.Name}.gif")
                    }),
                    LanguageDisplayModes = languageDisplayModes
                });
            }
            catch (Exception exc)
            {
                Logger.Error(exc);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetLocalizablePages">
          <declaration><![CDATA[private string GetLocalizablePages(int portalId, string code)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2865" sc="9" el="2868" ec="10">Services\SiteSettingsController.cs</location>
            <body hash="b8d175441b7abccc851eeecfd51b0463"><![CDATA[{
            int count = GetLocalizedPages(portalId, code, false).Count(t => !t.Value.IsDeleted);
            return count.ToString(CultureInfo.CurrentUICulture);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetLocalizedPages">
          <declaration><![CDATA[private TabCollection GetLocalizedPages(int portalId, string code, bool includeNeutral)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2871" sc="9" el="2873" ec="10">Services\SiteSettingsController.cs</location>
            <body hash="d561f991d7e1ec5fcc352ce51b712341"><![CDATA[{
            return TabController.Instance.GetTabsByPortal(portalId).WithCulture(code, includeNeutral);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetLocalizedStatus">
          <declaration><![CDATA[private string GetLocalizedStatus(PortalSettings portalSettings, string code)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2853" sc="9" el="2862" ec="10">Services\SiteSettingsController.cs</location>
            <body hash="c982031982df4dc1044557c6fd64f4dd"><![CDATA[{
            string status = "";
            if (!IsDefaultLanguage(portalSettings, code) && IsLocalized(portalSettings, code))
            {
                int defaultPageCount = GetLocalizedPages(portalSettings.PortalId, portalSettings.DefaultLanguage, false).Count;
                int currentPageCount = GetLocalizedPages(portalSettings.PortalId, code, false).Count;
                status = $"{currentPageCount / (float)defaultPageCount:#0%}";
            }
            return status;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetMessagingSettings">
          <declaration><![CDATA[public HttpResponseMessage GetMessagingSettings(int? portalId)]]></declaration>
          <documentation>GET: api/SiteSettings/GetMessagingSettings
 <summary>
 Gets messaging settings
 </summary>
 <param name="portalId"></param>
 <returns>messaging settings</returns></documentation>
          <codeblock>
            <location sl="335" sc="9" el="368" ec="10">Services\SiteSettingsController.cs</location>
            <body hash="136378d0613692849316c2a37af81e2c"><![CDATA[{
            try
            {
                var pid = portalId ?? PortalId;
                if (!UserInfo.IsSuperUser && PortalId != pid)
                {
                    return Request.CreateErrorResponse(HttpStatusCode.Unauthorized, AuthFailureMessage);
                }

                var portal = PortalController.Instance.GetPortal(pid);
                var portalSettings = new PortalSettings(portal);

                return Request.CreateResponse(HttpStatusCode.OK, new
                {
                    Settings = new
                    {
                        PortalId = portal.PortalID,
                        portal.CultureCode,
                        portalSettings.DisablePrivateMessage,
                        ThrottlingInterval = PortalController.GetPortalSettingAsInteger("MessagingThrottlingInterval", pid, 0),
                        RecipientLimit = PortalController.GetPortalSettingAsInteger("MessagingRecipientLimit", pid, 5),
                        AllowAttachments = PortalController.GetPortalSettingAsBoolean("MessagingAllowAttachments", pid, false),
                        ProfanityFilters = PortalController.GetPortalSettingAsBoolean("MessagingProfanityFilters", pid, false),
                        IncludeAttachments = PortalController.GetPortalSettingAsBoolean("MessagingIncludeAttachments", pid, false),
                        SendEmail = PortalController.GetPortalSetting("MessagingSendEmail", pid, "YES") == "YES"
                    }
                });
            }
            catch (Exception exc)
            {
                Logger.Error(exc);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetModuleList">
          <declaration><![CDATA[public HttpResponseMessage GetModuleList(string type)]]></declaration>
          <documentation>GET: api/SiteSettings/GetModuleList
 <summary>
 Gets module list by type
 </summary>
 <returns>list of modules</returns></documentation>
          <codeblock>
            <location sl="2571" sc="9" el="2615" ec="10">Services\SiteSettingsController.cs</location>
            <body hash="1dddeb029118425be4c58412b92f7cfe"><![CDATA[{
            try
            {
                List<object> modules = new List<object>();
                switch (type)
                {
                    case "Module":
                        foreach (
                            DesktopModuleInfo objDm in
                                DesktopModuleController.GetDesktopModules(Null.NullInteger).Values)
                        {
                            if (!objDm.FolderName.StartsWith("Admin/"))
                            {
                                if (Null.IsNull(objDm.Version))
                                {
                                    modules.Add(new KeyValuePair<string, int>(objDm.FriendlyName, objDm.DesktopModuleID));
                                }
                                else
                                {
                                    modules.Add(
                                        new KeyValuePair<string, int>(objDm.FriendlyName + " [" + objDm.Version + "]",
                                            objDm.DesktopModuleID));
                                }
                            }
                        }
                        break;
                    case "Provider":
                        modules.AddRange(PackageController.Instance.GetExtensionPackages(Null.NullInteger, p => p.PackageType == "Provider").Select(objPackage => Null.IsNull(objPackage.Version) ? new KeyValuePair<string, int>(objPackage.FriendlyName, objPackage.PackageID) : new KeyValuePair<string, int>(objPackage.FriendlyName + " [" + Globals.FormatVersion(objPackage.Version) + "]", objPackage.PackageID)).Cast<object>());
                        break;
                    case "AuthSystem":
                        modules.AddRange(PackageController.Instance.GetExtensionPackages(Null.NullInteger, p => p.PackageType == "Auth_System").Select(objPackage => Null.IsNull(objPackage.Version) ? new KeyValuePair<string, int>(objPackage.FriendlyName, objPackage.PackageID) : new KeyValuePair<string, int>(objPackage.FriendlyName + " [" + Globals.FormatVersion(objPackage.Version) + "]", objPackage.PackageID)).Cast<object>());
                        break;
                }

                return Request.CreateResponse(HttpStatusCode.OK, new
                {
                    Modules = modules
                });
            }
            catch (Exception exc)
            {
                Logger.Error(exc);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetOtherSettings">
          <declaration><![CDATA[public HttpResponseMessage GetOtherSettings()]]></declaration>
          <documentation>GET: api/SiteSettings/GetOtherSettings
 <summary>
 Gets other settings
 </summary>
 <returns>other settings</returns></documentation>
          <codeblock>
            <location sl="2782" sc="9" el="2799" ec="10">Services\SiteSettingsController.cs</location>
            <body hash="eaaf4bb1a196d06709a2cb2f23dfa16d"><![CDATA[{
            try
            {
                return Request.CreateResponse(HttpStatusCode.OK, new
                {
                    Settings = new
                    {
                        CheckUpgrade = HostController.Instance.GetBoolean("CheckUpgrade", true),
                        DnnImprovementProgram = HostController.Instance.GetBoolean("DnnImprovementProgram", true)
                    }
                });
            }
            catch (Exception exc)
            {
                Logger.Error(exc);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPortals">
          <declaration><![CDATA[public HttpResponseMessage GetPortals()]]></declaration>
          <documentation>GET: api/SiteSettings/GetPortals
 <summary>
 Gets portals
 </summary>
 <param></param>
 <returns>List of portals</returns></documentation>
          <codeblock>
            <location sl="1480" sc="9" el="1505" ec="10">Services\SiteSettingsController.cs</location>
            <body hash="842933101bbf9ed45f35e9cef56cd901"><![CDATA[{
            try
            {
                var portals = PortalController.Instance.GetPortals().OfType<PortalInfo>();
                var availablePortals = portals.Select(v => new
                {
                    v.PortalID,
                    v.PortalName,
                    IsCurrentPortal = PortalId == v.PortalID
                }).ToList();

                var response = new
                {
                    Success = true,
                    Results = availablePortals,
                    TotalResults = availablePortals.Count
                };

                return Request.CreateResponse(HttpStatusCode.OK, response);
            }
            catch (Exception exc)
            {
                Logger.Error(exc);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPortalSettings">
          <declaration><![CDATA[public HttpResponseMessage GetPortalSettings(int? portalId, string cultureCode)]]></declaration>
          <documentation>GET: api/SiteSettings/GetPortalSettings
 <summary>
 Gets site settings
 </summary>
 <param name="portalId"></param>
 <param name="cultureCode"></param>
 <returns>site settings</returns></documentation>
          <codeblock>
            <location sl="84" sc="9" el="150" ec="10">Services\SiteSettingsController.cs</location>
            <body hash="f30de7e56f235c4725fc1430e7bc0391"><![CDATA[{
            try
            {
                var pid = portalId ?? PortalId;
                if (!UserInfo.IsSuperUser && pid != PortalId)
                {
                    return Request.CreateErrorResponse(HttpStatusCode.Unauthorized, AuthFailureMessage);
                }

                cultureCode = string.IsNullOrEmpty(cultureCode)
                    ? LocaleController.Instance.GetCurrentLocale(pid).Code
                    : cultureCode;

                var language = LocaleController.Instance.GetLocale(pid, cultureCode);
                if (language == null)
                {
                    return Request.CreateErrorResponse(HttpStatusCode.BadRequest,
                        string.Format(Localization.GetString("InvalidLocale.ErrorMessage", LocalResourcesFile), cultureCode));
                }

                var portal = PortalController.Instance.GetPortal(pid, cultureCode);
                var portalSettings = new PortalSettings(portal);
                var logoFile = string.IsNullOrEmpty(portal.LogoFile) ? null : FileManager.Instance.GetFile(pid, portal.LogoFile);
                var favIcon = string.IsNullOrEmpty(new FavIcon(portal.PortalID).GetSettingPath()) ? null : FileManager.Instance.GetFile(pid, new FavIcon(portal.PortalID).GetSettingPath());

                var settings = new
                {
                    PortalId = portal.PortalID,
                    portal.CultureCode,
                    portal.PortalName,
                    portal.Description,
                    portal.KeyWords,
                    GUID = portal.GUID.ToString().ToUpper(),
                    portal.FooterText,
                    TimeZone = portalSettings.TimeZone.Id,
                    portal.HomeDirectory,
                    LogoFile = logoFile != null ? new FileDto()
                    {
                        fileName = logoFile.FileName,
                        folderPath = logoFile.Folder,
                        fileId = logoFile.FileId
                    } : null,
                    FavIcon = favIcon != null ? new FileDto()
                    {
                        fileName = favIcon.FileName,
                        folderPath = favIcon.Folder,
                        fileId = favIcon.FileId
                    } : null,
                    IconSet = PortalController.GetPortalSetting("DefaultIconLocation", pid, "Sigma", cultureCode).Replace("icons/", "")
                };
                return Request.CreateResponse(HttpStatusCode.OK, new
                {
                    Settings = settings,
                    TimeZones = TimeZoneInfo.GetSystemTimeZones().Select(z => new
                    {
                        z.Id,
                        z.DisplayName
                    }),
                    IconSets = IconController.GetIconSets()
                });
            }
            catch (Exception exc)
            {
                Logger.Error(exc);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetProfileProperties">
          <declaration><![CDATA[public HttpResponseMessage GetProfileProperties(int? portalId)]]></declaration>
          <documentation>GET: api/SiteSettings/GetProfileProperties
 <summary>
 Gets profile properties
 </summary>
 <param name="portalId"></param>
 <returns>profile properties</returns></documentation>
          <codeblock>
            <location sl="498" sc="9" el="530" ec="10">Services\SiteSettingsController.cs</location>
            <body hash="09078c503f2089a65efb51c8c82cb484"><![CDATA[{
            try
            {
                var pid = portalId ?? PortalId;
                if (!UserInfo.IsSuperUser && PortalId != pid)
                {
                    return Request.CreateErrorResponse(HttpStatusCode.Unauthorized, AuthFailureMessage);
                }

                var profileProperties = ProfileController.GetPropertyDefinitionsByPortal(pid, false, false).Cast<ProfilePropertyDefinition>().Select(v => new
                {
                    v.PropertyDefinitionId,
                    v.PropertyName,
                    DataType = DisplayDataType(v.DataType),
                    DefaultVisibility = v.DefaultVisibility.ToString(),
                    v.Required,
                    v.Visible,
                    v.ViewOrder,
                    CanDelete = CanDeleteProperty(v)
                }).OrderBy(v => v.ViewOrder);

                return Request.CreateResponse(HttpStatusCode.OK, new
                {
                    PortalId = pid,
                    Properties = profileProperties
                });
            }
            catch (Exception exc)
            {
                Logger.Error(exc);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetProfileProperty">
          <declaration><![CDATA[public HttpResponseMessage GetProfileProperty(int? propertyId, int? portalId)]]></declaration>
          <documentation>GET: api/SiteSettings/GetProfileProperty
 <summary>
 Gets profile property by id
 </summary>
 <param name="propertyId"></param>
 <param name="portalId"></param>
 <returns>profile property</returns></documentation>
          <codeblock>
            <location sl="541" sc="9" el="602" ec="10">Services\SiteSettingsController.cs</location>
            <body hash="64a2181a23dc07bdd81d2d1ce02c24ae"><![CDATA[{
            try
            {
                var pid = portalId ?? PortalId;
                if (!UserInfo.IsSuperUser && PortalId != pid)
                {
                    return Request.CreateErrorResponse(HttpStatusCode.Unauthorized, AuthFailureMessage);
                }

                var profileProperty = ProfileController.GetPropertyDefinition(propertyId ?? -1, pid);
                var listController = new ListController();

                var cultureList = Localization.LoadCultureInListItems(GetCultureDropDownType(pid), Thread.CurrentThread.CurrentUICulture.Name, "", false);

                var response = new
                {
                    Success = true,
                    ProfileProperty = profileProperty != null ? new
                    {
                        profileProperty.PortalId,
                        profileProperty.PropertyDefinitionId,
                        profileProperty.PropertyName,
                        profileProperty.DataType,
                        profileProperty.PropertyCategory,
                        profileProperty.Length,
                        profileProperty.DefaultValue,
                        profileProperty.ValidationExpression,
                        profileProperty.Required,
                        profileProperty.ReadOnly,
                        profileProperty.Visible,
                        profileProperty.ViewOrder,
                        DefaultVisibility = (int)profileProperty.DefaultVisibility
                    } : null,
                    UserVisibilityOptions = Enum.GetValues(typeof(UserVisibilityMode)).Cast<UserVisibilityMode>().Select(
                        v => new
                        {
                            label = v.ToString(),
                            value = (int)v
                        }).ToList(),
                    DataTypeOptions = listController.GetListEntryInfoItems("DataType").Select(t => new
                    {
                        t.EntryID,
                        t.Value
                    }),
                    LanguageOptions = cultureList.Select(c => new
                    {
                        c.Text,
                        c.Value,
                        Icon = Globals.ResolveUrl(
                            string.IsNullOrEmpty(c.Value)
                                ? "~/images/Flags/none.gif"
                                : $"~/images/Flags/{c.Value}.gif")
                    })
                };
                return Request.CreateResponse(HttpStatusCode.OK, response);
            }
            catch (Exception exc)
            {
                Logger.Error(exc);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetProfilePropertyLocalization">
          <declaration><![CDATA[public HttpResponseMessage GetProfilePropertyLocalization(int? portalId, string cultureCode, string propertyName, string propertyCategory)]]></declaration>
          <documentation>GET: api/SiteSettings/GetProfilePropertyLocalization
 <summary>
 Gets profile property localization
 </summary>
 <param name="portalId"></param>
 <param name="propertyName"></param>
 <param name="propertyCategory"></param>
 <param name="cultureCode"></param>
 <returns>profile property</returns></documentation>
          <codeblock>
            <location sl="615" sc="9" el="654" ec="10">Services\SiteSettingsController.cs</location>
            <body hash="504eb2c350e5e609f991a162875fe718"><![CDATA[{
            try
            {
                var pid = portalId ?? PortalId;
                if (!UserInfo.IsSuperUser && PortalId != pid)
                {
                    return Request.CreateErrorResponse(HttpStatusCode.Unauthorized, AuthFailureMessage);
                }

                cultureCode = string.IsNullOrEmpty(cultureCode) ? LocaleController.Instance.GetCurrentLocale(pid).Code : cultureCode;

                var language = LocaleController.Instance.GetLocale(pid, cultureCode);
                if (language == null)
                {
                    return Request.CreateErrorResponse(HttpStatusCode.BadRequest,
                        string.Format(Localization.GetString("InvalidLocale.ErrorMessage", LocalResourcesFile), cultureCode));
                }

                var resourceFile = "~/DesktopModules/Admin/Security/App_LocalResources/Profile.ascx";
                var response = new
                {
                    Success = true,
                    PropertyLocalization = new
                    {
                        Language = cultureCode,
                        PropertyName = Localization.GetString("ProfileProperties_" + propertyName, resourceFile, cultureCode) ?? "",
                        PropertyHelp = Localization.GetString("ProfileProperties_" + propertyName + ".Help", resourceFile, cultureCode) ?? "",
                        PropertyRequired = Localization.GetString("ProfileProperties_" + propertyName + ".Required", resourceFile, cultureCode) ?? "",
                        PropertyValidation = Localization.GetString("ProfileProperties_" + propertyName + ".Validation", resourceFile, cultureCode) ?? "",
                        CategoryName = Localization.GetString("ProfileProperties_" + propertyCategory + ".Header", resourceFile, cultureCode) ?? ""
                    }
                };
                return Request.CreateResponse(HttpStatusCode.OK, response);
            }
            catch (Exception exc)
            {
                Logger.Error(exc);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetProfileSettings">
          <declaration><![CDATA[public HttpResponseMessage GetProfileSettings(int? portalId)]]></declaration>
          <documentation>GET: api/SiteSettings/GetProfileSettings
 <summary>
 Gets profile settings
 </summary>
 <param name="portalId"></param>
 <returns>profile settings</returns></documentation>
          <codeblock>
            <location sl="416" sc="9" el="451" ec="10">Services\SiteSettingsController.cs</location>
            <body hash="55bf4a3a46f3786e304ad92a7b130eb2"><![CDATA[{
            try
            {
                var pid = portalId ?? PortalId;
                if (!UserInfo.IsSuperUser && PortalId != pid)
                {
                    return Request.CreateErrorResponse(HttpStatusCode.Unauthorized, AuthFailureMessage);
                }

                var urlSettings = new FriendlyUrlSettings(pid);
                var userSettings = UserController.GetUserSettings(pid);

                return Request.CreateResponse(HttpStatusCode.OK, new
                {
                    Settings = new
                    {
                        PortalId = pid,
                        RedirectOldProfileUrl = Config.GetFriendlyUrlProvider() == "advanced" && urlSettings.RedirectOldProfileUrl,
                        urlSettings.VanityUrlPrefix,
                        ProfileDefaultVisibility = userSettings["Profile_DefaultVisibility"] == null ? (int)UserVisibilityMode.AdminOnly : Convert.ToInt32(userSettings["Profile_DefaultVisibility"]),
                        ProfileDisplayVisibility = PortalController.GetPortalSettingAsBoolean("Profile_DisplayVisibility", pid, true)
                    },
                    UserVisibilityOptions = Enum.GetValues(typeof(UserVisibilityMode)).Cast<UserVisibilityMode>().Select(
                        v => new
                        {
                            label = v.ToString(),
                            value = (int)v
                        }).ToList()
                });
            }
            catch (Exception exc)
            {
                Logger.Error(exc);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPublishedLocalizedPages">
          <declaration><![CDATA[private int GetPublishedLocalizedPages(int portalId, string code)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2876" sc="9" el="2879" ec="10">Services\SiteSettingsController.cs</location>
            <body hash="35d2d1465f798aa37a800d0d661c64c6"><![CDATA[{
            var localizedTabs = TabController.Instance.GetTabsByPortal(portalId).WithCulture(code, false);
            return localizedTabs.Count(t => TabController.Instance.IsTabPublished(t.Value));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetResourceFiles">
          <declaration><![CDATA[private static void GetResourceFiles(SortedList fileList, string path)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2998" sc="9" el="3029" ec="10">Services\SiteSettingsController.cs</location>
            <body hash="c6744e9d5bb25d74acd867623e8f4cfc"><![CDATA[{
            var folders = Directory.GetDirectories(path);

            foreach (var folder in folders)
            {
                var objFolder = new DirectoryInfo(folder);

                bool resxFilesDirectory = (objFolder.Name.ToLowerInvariant() == Localization.LocalResourceDirectory.ToLowerInvariant()) ||
                                          (objFolder.Name.ToLowerInvariant() == Localization.ApplicationResourceDirectory.Replace("~/", "").ToLowerInvariant()) ||
                                          (folder.ToLowerInvariant().EndsWith("\\portals\\_default"));

                if (resxFilesDirectory)
                {
                    var sysLocale = Localization.SystemLocale.ToLowerInvariant();
                    foreach (var file in Directory.GetFiles(objFolder.FullName, "*.resx"))
                    {
                        var fileInfo = new FileInfo(file);
                        var match = LanguagesController.FileInfoRegex.Match(fileInfo.Name);

                        if (match.Success && match.Groups[1].Value.ToLowerInvariant() != sysLocale)
                        {
                            continue;
                        }
                        fileList.Add(fileInfo.FullName, fileInfo);
                    }
                }
                else
                {
                    GetResourceFiles(fileList, folder);
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetSearchStatistics">
          <declaration><![CDATA[private SearchStatistics GetSearchStatistics()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="3081" sc="9" el="3090" ec="10">Services\SiteSettingsController.cs</location>
            <body hash="87f87b85186439127348937e64aa76ce"><![CDATA[{
            try
            {
                return InternalSearchController.Instance.GetSearchStatistics();
            }
            catch (SearchIndexEmptyException ex)
            {
                return null;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetSiteAlias">
          <declaration><![CDATA[public HttpResponseMessage GetSiteAlias(int portalAliasId)]]></declaration>
          <documentation>GET: api/SiteSettings/GetSiteAlias
 <summary>
 Gets site alias by id
 </summary>
 <param name="portalAliasId"></param>
 <returns>site alias</returns></documentation>
          <codeblock>
            <location sl="1047" sc="9" el="1077" ec="10">Services\SiteSettingsController.cs</location>
            <body hash="851b6715c494a594860209adace65729"><![CDATA[{
            try
            {
                var alias = PortalAliasController.Instance.GetPortalAliasByPortalAliasID(portalAliasId);
                if (!UserInfo.IsSuperUser && alias.PortalID != PortalId)
                {
                    return Request.CreateErrorResponse(HttpStatusCode.Unauthorized, AuthFailureMessage);
                }

                var response = new
                {
                    Success = true,
                    PortalAlias = new
                    {
                        alias.PortalID,
                        alias.PortalAliasID,
                        alias.HTTPAlias,
                        BrowserType = alias.BrowserType.ToString(),
                        alias.Skin,
                        alias.IsPrimary,
                        alias.CultureCode
                    }
                };
                return Request.CreateResponse(HttpStatusCode.OK, response);
            }
            catch (Exception exc)
            {
                Logger.Error(exc);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetSiteAliases">
          <declaration><![CDATA[public HttpResponseMessage GetSiteAliases(int? portalId)]]></declaration>
          <documentation>GET: api/SiteSettings/getSiteAliases
 <summary>
 Gets site aliases
 </summary>
 <param name="portalId"></param>
 <returns>site aliases</returns></documentation>
          <codeblock>
            <location sl="994" sc="9" el="1036" ec="10">Services\SiteSettingsController.cs</location>
            <body hash="f316c636ca9118c0ba724b1d0435cf1a"><![CDATA[{
            try
            {
                var pid = portalId ?? PortalId;
                if (!UserInfo.IsSuperUser && PortalId != pid)
                {
                    return Request.CreateErrorResponse(HttpStatusCode.Unauthorized, AuthFailureMessage);
                }

                var portal = PortalController.Instance.GetPortal(pid);

                var aliases = PortalAliasController.Instance.GetPortalAliasesByPortalId(pid).Select(a => new
                {
                    a.PortalAliasID,
                    a.HTTPAlias,
                    BrowserType = a.BrowserType.ToString(),
                    a.Skin,
                    a.IsPrimary,
                    a.CultureCode,
                    Deletable = a.PortalAliasID != PortalSettings.PortalAlias.PortalAliasID && !a.IsPrimary,
                    Editable = a.PortalAliasID != PortalSettings.PortalAlias.PortalAliasID
                });

                var response = new
                {
                    PortalId = pid,
                    PortalAliases = aliases,
                    BrowserTypes = Enum.GetNames(typeof(BrowserTypes)),
                    Languages = LocaleController.Instance.GetLocales(pid).Select(l => new
                    {
                        l.Key,
                        Value = l.Key
                    }),
                    Skins = SkinController.GetSkins(portal, SkinController.RootSkin, SkinScope.All)
                };
                return Request.CreateResponse(HttpStatusCode.OK, response);
            }
            catch (Exception exc)
            {
                Logger.Error(exc);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetSynonymsGroups">
          <declaration><![CDATA[public HttpResponseMessage GetSynonymsGroups(int? portalId, string cultureCode)]]></declaration>
          <documentation>GET: api/SiteSettings/GetSynonymsGroups
 <summary>
 Gets Synonyms Groups
 </summary>
 <param name="portalId"></param>
 <param name="cultureCode"></param>
 <returns>Synonyms Groups</returns></documentation>
          <codeblock>
            <location sl="1562" sc="9" el="1597" ec="10">Services\SiteSettingsController.cs</location>
            <body hash="32b3a552d092540f2221d18862d4922b"><![CDATA[{
            try
            {
                var pid = portalId ?? PortalId;
                if (!UserInfo.IsSuperUser && pid != PortalId)
                {
                    return Request.CreateErrorResponse(HttpStatusCode.Unauthorized, AuthFailureMessage);
                }

                var language = LocaleController.Instance.GetLocale(pid, cultureCode);
                if (language == null)
                {
                    return Request.CreateErrorResponse(HttpStatusCode.BadRequest,
                        string.Format(Localization.GetString("InvalidLocale.ErrorMessage", LocalResourcesFile), cultureCode));
                }

                var groups = SearchHelper.Instance.GetSynonymsGroups(pid, string.IsNullOrEmpty(cultureCode) ? LocaleController.Instance.GetCurrentLocale(pid).Code : cultureCode);

                var response = new
                {
                    PortalId = pid,
                    CultureCode = cultureCode,
                    SynonymsGroups = groups.Select(g => new
                    {
                        g.SynonymsGroupId,
                        g.SynonymsTags
                    })
                };
                return Request.CreateResponse(HttpStatusCode.OK, response);
            }
            catch (Exception exc)
            {
                Logger.Error(exc);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetTranslatedPages">
          <declaration><![CDATA[private string GetTranslatedPages(PortalSettings portalSettings, string code)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2842" sc="9" el="2850" ec="10">Services\SiteSettingsController.cs</location>
            <body hash="bfef0558687dfb09035606f61ec28604"><![CDATA[{
            string status = "";
            if (!IsDefaultLanguage(portalSettings, code) && IsLocalized(portalSettings, code))
            {
                int translatedCount = (from t in TabController.Instance.GetTabsByPortal(portalSettings.PortalId).WithCulture(code, false).Values where t.IsTranslated && !t.IsDeleted select t).Count();
                status = translatedCount.ToString(CultureInfo.InvariantCulture);
            }
            return status;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetTranslatedStatus">
          <declaration><![CDATA[private string GetTranslatedStatus(PortalSettings portalSettings, string code)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2882" sc="9" el="2891" ec="10">Services\SiteSettingsController.cs</location>
            <body hash="94b12f9b23ba700dffbd561496cf1d38"><![CDATA[{
            string status = "";
            if (!IsDefaultLanguage(portalSettings, code) && IsLocalized(portalSettings, code))
            {
                int localizedCount = GetLocalizedPages(portalSettings.PortalId, code, false).Count;
                int translatedCount = (from t in TabController.Instance.GetTabsByPortal(portalSettings.PortalId).WithCulture(code, false).Values where t.IsTranslated select t).Count();
                status = $"{translatedCount / (float)localizedCount:#0%}";
            }
            return status;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetTranslatorRoleGroups">
          <declaration><![CDATA[public HttpResponseMessage GetTranslatorRoleGroups(int? portalId)]]></declaration>
          <documentation>GET: api/SiteSettings/GetTranslatorRoleGroups
 <summary>
 Gets role groups
 </summary>
 <returns>list of translator role groups</returns></documentation>
          <codeblock>
            <location sl="2741" sc="9" el="2768" ec="10">Services\SiteSettingsController.cs</location>
            <body hash="d38f53a76fa39900be593ef2819782f0"><![CDATA[{
            try
            {
                var pid = portalId ?? PortalId;
                if (!UserInfo.IsSuperUser && pid != PortalId)
                {
                    return Request.CreateErrorResponse(HttpStatusCode.Unauthorized, AuthFailureMessage);
                }

                var groups = RoleController.GetRoleGroups(pid)
                                .Cast<RoleGroupInfo>()
                                .Select(g => new
                                {
                                    g.RoleGroupID,
                                    g.RoleGroupName
                                });

                return Request.CreateResponse(HttpStatusCode.OK, new
                {
                    Groups = groups
                });
            }
            catch (Exception exc)
            {
                Logger.Error(exc);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetTranslatorRoles">
          <declaration><![CDATA[public HttpResponseMessage GetTranslatorRoles(int? portalId, int groupId, string cultureCode)]]></declaration>
          <documentation>GET: api/SiteSettings/GetTranslatorRoles
 <summary>
 Gets roles
 </summary>
 <returns>list of translator roles</returns></documentation>
          <codeblock>
            <location sl="2693" sc="9" el="2732" ec="10">Services\SiteSettingsController.cs</location>
            <body hash="47373058fe5143c62282db9a1af142da"><![CDATA[{
            try
            {
                var pid = portalId ?? PortalId;
                if (!UserInfo.IsSuperUser && pid != PortalId)
                {
                    return Request.CreateErrorResponse(HttpStatusCode.Unauthorized, AuthFailureMessage);
                }

                var language = LocaleController.Instance.GetLocale(pid, cultureCode);
                if (language == null)
                {
                    return Request.CreateErrorResponse(HttpStatusCode.BadRequest,
                        string.Format(Localization.GetString("InvalidLocale.ErrorMessage", LocalResourcesFile), cultureCode));
                }

                string defaultRoles = PortalController.GetPortalSetting($"DefaultTranslatorRoles-{cultureCode}", pid, "Administrators");
                var selectedRoleNames = new ArrayList(defaultRoles.Split(';'));

                var roles = (groupId < Null.NullInteger
                                    ? RoleController.Instance.GetRoles(pid, r => r.SecurityMode != SecurityMode.SocialGroup && r.Status == RoleStatus.Approved)
                                    : RoleController.Instance.GetRoles(pid, r => r.RoleGroupID == groupId && r.SecurityMode != SecurityMode.SocialGroup && r.Status == RoleStatus.Approved))
                                    .Select(r => new
                                    {
                                        r.RoleID,
                                        r.RoleName,
                                        Selected = selectedRoleNames.Contains(r.RoleName)
                                    });

                return Request.CreateResponse(HttpStatusCode.OK, new
                {
                    Roles = roles
                });
            }
            catch (Exception exc)
            {
                Logger.Error(exc);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetUrlMappingSettings">
          <declaration><![CDATA[public HttpResponseMessage GetUrlMappingSettings(int? portalId)]]></declaration>
          <documentation>GET: api/SiteSettings/GetUrlMappingSettings
 <summary>
 Gets Url mapping settings
 </summary>
 <param name="portalId"></param>
 <returns>Url mapping settings</returns></documentation>
          <codeblock>
            <location sl="900" sc="9" el="950" ec="10">Services\SiteSettingsController.cs</location>
            <body hash="772b3e13678948466971dba92614f0ee"><![CDATA[{
            try
            {
                var pid = portalId ?? PortalId;
                if (!UserInfo.IsSuperUser && PortalId != pid)
                {
                    return Request.CreateErrorResponse(HttpStatusCode.Unauthorized, AuthFailureMessage);
                }

                Dictionary<string, string> settings = PortalController.Instance.GetPortalSettings(pid);
                string portalAliasMapping;
                if (settings.TryGetValue("PortalAliasMapping", out portalAliasMapping))
                {
                    if (string.IsNullOrEmpty(portalAliasMapping))
                    {
                        portalAliasMapping = "CANONICALURL";
                    }
                }
                else
                {
                    portalAliasMapping = "CANONICALURL";
                }

                var portalAliasMappingModes = new List<KeyValuePair<string, string>>
                {
                    new KeyValuePair<string, string>(Localization.GetString("Canonical", LocalResourcesFile),
                        "CANONICALURL"),
                    new KeyValuePair<string, string>(Localization.GetString("Redirect", LocalResourcesFile), "REDIRECT"),
                    new KeyValuePair<string, string>(Localization.GetString("None", LocalResourcesFile), "NONE")
                };

                var response = new
                {
                    Success = true,
                    Settings = new
                    {
                        PortalId = pid,
                        PortalAliasMapping = portalAliasMapping,
                        AutoAddPortalAliasEnabled = !(PortalController.Instance.GetPortals().Count > 1),
                        AutoAddPortalAlias = PortalController.Instance.GetPortals().Count <= 1 && HostController.Instance.GetBoolean("AutoAddPortalAlias")
                    },
                    PortalAliasMappingModes = portalAliasMappingModes
                };
                return Request.CreateResponse(HttpStatusCode.OK, response);
            }
            catch (Exception exc)
            {
                Logger.Error(exc);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="HostSearchReindex">
          <declaration><![CDATA[public HttpResponseMessage HostSearchReindex()]]></declaration>
          <documentation>POST: api/SiteSettings/HostSearchReindex
 <summary>
 Re-index host search
 </summary>
 <returns></returns></documentation>
          <codeblock>
            <location sl="1430" sc="9" el="1441" ec="10">Services\SiteSettingsController.cs</location>
            <body hash="e64dbcba453a138c7f392176e63fbbee"><![CDATA[{
            try
            {
                SearchHelper.Instance.SetSearchReindexRequestTime(-1);
                return Request.CreateResponse(HttpStatusCode.OK, new { Success = true });
            }
            catch (Exception exc)
            {
                Logger.Error(exc);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="IsDefaultLanguage">
          <declaration><![CDATA[private bool IsDefaultLanguage(PortalSettings portalSettings, string code)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2894" sc="9" el="2896" ec="10">Services\SiteSettingsController.cs</location>
            <body hash="a5d88c170b685146938e6678f44bb7b2"><![CDATA[{
            return code == portalSettings.DefaultLanguage;
        }]]></body>
          </codeblock>
        </method>
        <method name="IsHttpAliasValid">
          <declaration><![CDATA[private bool IsHttpAliasValid(string strAlias)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2966" sc="9" el="2990" ec="10">Services\SiteSettingsController.cs</location>
            <body hash="401c42e784efbd4aacca8ee6559b0f02"><![CDATA[{
            bool isValid = true;
            if (string.IsNullOrEmpty(strAlias))
            {
                isValid = false;
            }
            else
            {
                if (strAlias.IndexOf("://", StringComparison.Ordinal) != -1)
                {
                    strAlias = strAlias.Remove(0, strAlias.IndexOf("://", StringComparison.Ordinal) + 3);
                }
                if (strAlias.IndexOf("\\\\", StringComparison.Ordinal) != -1)
                {
                    strAlias = strAlias.Remove(0, strAlias.IndexOf("\\\\", StringComparison.Ordinal) + 2);
                }

                //Validate Alias, this needs to be done with lowercase, downstream we only check with lowercase variables
                if (!PortalAliasController.ValidateAlias(strAlias.ToLowerInvariant(), false))
                {
                    isValid = false;
                }
            }
            return isValid;
        }]]></body>
          </codeblock>
        </method>
        <method name="IsLanguageEnabled">
          <declaration><![CDATA[private bool IsLanguageEnabled(int portalId, string code)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="3032" sc="9" el="3035" ec="10">Services\SiteSettingsController.cs</location>
            <body hash="b1c5f9c4c5156211afe2c419ae723328"><![CDATA[{
            Locale enabledLanguage;
            return LocaleController.Instance.GetLocales(portalId).TryGetValue(code, out enabledLanguage);
        }]]></body>
          </codeblock>
        </method>
        <method name="IsLanguagePublished">
          <declaration><![CDATA[private bool IsLanguagePublished(int portalId, string code)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2831" sc="9" el="2839" ec="10">Services\SiteSettingsController.cs</location>
            <body hash="c0b627dd0efd02edd4ddcca031fab1a1"><![CDATA[{
            bool isPublished = Null.NullBoolean;
            Locale enabledLanguage;
            if (LocaleController.Instance.GetLocales(portalId).TryGetValue(code, out enabledLanguage))
            {
                isPublished = enabledLanguage.IsPublished;
            }
            return isPublished;
        }]]></body>
          </codeblock>
        </method>
        <method name="IsLocalized">
          <declaration><![CDATA[private bool IsLocalized(PortalSettings portalSettings, string code)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2899" sc="9" el="2901" ec="10">Services\SiteSettingsController.cs</location>
            <body hash="2316cf84daae2891e191295ef8a92d31"><![CDATA[{
            return (code != portalSettings.DefaultLanguage && GetLocalizedPages(portalSettings.PortalId, code, false).Count > 0);
        }]]></body>
          </codeblock>
        </method>
        <method name="PortalSearchReindex">
          <declaration><![CDATA[public HttpResponseMessage PortalSearchReindex(int? portalId)]]></declaration>
          <documentation>POST: api/SiteSettings/PortalSearchReindex
 <summary>
 Re-index portal search
 </summary>
 <param name="portalId"></param>
 <returns></returns></documentation>
          <codeblock>
            <location sl="1452" sc="9" el="1469" ec="10">Services\SiteSettingsController.cs</location>
            <body hash="15085c15b78f25ff08db9fc6d57f5774"><![CDATA[{
            try
            {
                var pid = portalId ?? PortalId;
                if (!UserInfo.IsSuperUser && pid != PortalId)
                {
                    return Request.CreateErrorResponse(HttpStatusCode.Unauthorized, AuthFailureMessage);
                }

                SearchHelper.Instance.SetSearchReindexRequestTime(pid);
                return Request.CreateResponse(HttpStatusCode.OK, new { Success = true });
            }
            catch (Exception exc)
            {
                Logger.Error(exc);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="ResourceFile">
          <declaration><![CDATA[private static string ResourceFile(string filename, string language)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2993" sc="9" el="2995" ec="10">Services\SiteSettingsController.cs</location>
            <body hash="0f8d2a071c16dfe7fcbe83b629db6600"><![CDATA[{
            return Localization.GetResourceFileName(filename, language, "", Globals.GetPortalSettings().PortalId);
        }]]></body>
          </codeblock>
        </method>
        <method name="SetPrimarySiteAlias">
          <declaration><![CDATA[public HttpResponseMessage SetPrimarySiteAlias(int portalAliasId)]]></declaration>
          <documentation>POST: api/SiteSettings/SetPrimarySiteAlias
 <summary>
 Sets primary site alias
 </summary>
 <param name="portalAliasId"></param>
 <returns></returns></documentation>
          <codeblock>
            <location sl="1255" sc="9" el="1280" ec="10">Services\SiteSettingsController.cs</location>
            <body hash="f2704312772b5ce11b004e0c058ecfdd"><![CDATA[{
            try
            {
                var alias = PortalAliasController.Instance.GetPortalAliasByPortalAliasID(portalAliasId);
                if (!UserInfo.IsSuperUser && alias.PortalID != PortalId)
                {
                    return Request.CreateErrorResponse(HttpStatusCode.Unauthorized, AuthFailureMessage);
                }

                PortalAliasInfo portalAlias = new PortalAliasInfo()
                {
                    PortalID = alias.PortalID,
                    PortalAliasID = portalAliasId,
                    IsPrimary = true
                };

                PortalAliasController.Instance.UpdatePortalAlias(portalAlias);

                return Request.CreateResponse(HttpStatusCode.OK, new { Success = true });
            }
            catch (Exception exc)
            {
                Logger.Error(exc);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateBasicSearchSettings">
          <declaration><![CDATA[public HttpResponseMessage UpdateBasicSearchSettings(UpdateBasicSearchSettingsRequest request)]]></declaration>
          <documentation>POST: api/SiteSettings/UpdateBasicSearchSettings
 <summary>
 Updates basic search settings
 </summary>
 <param name="request"></param>
 <returns></returns></documentation>
          <codeblock>
            <location sl="1343" sc="9" el="1397" ec="10">Services\SiteSettingsController.cs</location>
            <body hash="a9ae37a2241a99feddbee52392a17721"><![CDATA[{
            try
            {
                if (request.MinWordLength == Null.NullInteger || request.MinWordLength == 0)
                {
                    return Request.CreateErrorResponse(HttpStatusCode.BadRequest,
                            string.Format(Localization.GetString("valIndexWordMinLengthRequired.Error", LocalResourcesFile)));
                }
                else if (request.MaxWordLength == Null.NullInteger || request.MaxWordLength == 0)
                {
                    return Request.CreateErrorResponse(HttpStatusCode.BadRequest,
                            string.Format(Localization.GetString("valIndexWordMaxLengthRequired.Error", LocalResourcesFile)));
                }
                else if (request.MinWordLength >= request.MaxWordLength)
                {
                    return Request.CreateErrorResponse(HttpStatusCode.BadRequest,
                            string.Format(Localization.GetString("valIndexWordMaxLengthRequired.Error", LocalResourcesFile)));
                }

                var oldMinLength = HostController.Instance.GetInteger("Search_MinKeyWordLength", 3);
                if (request.MinWordLength != oldMinLength)
                {
                    HostController.Instance.Update("Search_MinKeyWordLength", request.MinWordLength.ToString());
                }

                var oldMaxLength = HostController.Instance.GetInteger("Search_MaxKeyWordLength", 255);
                if (request.MaxWordLength != oldMaxLength)
                {
                    HostController.Instance.Update("Search_MaxKeyWordLength", request.MaxWordLength.ToString());
                }

                HostController.Instance.Update("Search_AllowLeadingWildcard", request.AllowLeadingWildcard ? "Y" : "N");
                HostController.Instance.Update(SearchTitleBoostSetting, (request.TitleBoost == Null.NullInteger) ? DefaultSearchTitleBoost.ToString() : request.TitleBoost.ToString());
                HostController.Instance.Update(SearchTagBoostSetting, (request.TagBoost == Null.NullInteger) ? DefaultSearchTagBoost.ToString() : request.TagBoost.ToString());
                HostController.Instance.Update(SearchContentBoostSetting, (request.ContentBoost == Null.NullInteger) ? DefaultSearchContentBoost.ToString() : request.ContentBoost.ToString());
                HostController.Instance.Update(SearchDescriptionBoostSetting, (request.DescriptionBoost == Null.NullInteger) ? DefaultSearchDescriptionBoost.ToString() : request.DescriptionBoost.ToString());
                HostController.Instance.Update(SearchAuthorBoostSetting, (request.AuthorBoost == Null.NullInteger) ? DefaultSearchAuthorBoost.ToString() : request.AuthorBoost.ToString());

                var oldAnalyzer = HostController.Instance.GetString("Search_CustomAnalyzer", string.Empty);
                var newAnalyzer = request.SearchCustomAnalyzer.Trim();
                if (!oldAnalyzer.Equals(newAnalyzer))
                {
                    HostController.Instance.Update("Search_CustomAnalyzer", newAnalyzer);
                    //force the app restart to use new analyzer.
                    Config.Touch();
                }

                return Request.CreateResponse(HttpStatusCode.OK, new { Success = true });
            }
            catch (Exception exc)
            {
                Logger.Error(exc);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateDefaultPagesSettings">
          <declaration><![CDATA[public HttpResponseMessage UpdateDefaultPagesSettings(UpdateDefaultPagesSettingsRequest request)]]></declaration>
          <documentation>POST: api/SiteSettings/UpdateDefaultPagesSettings
 <summary>
 Updates default pages settings
 </summary>
 <param name="request"></param>
 <returns></returns></documentation>
          <codeblock>
            <location sl="288" sc="9" el="325" ec="10">Services\SiteSettingsController.cs</location>
            <body hash="e074899db2ba0585914b78487a28b4e2"><![CDATA[{
            try
            {
                var pid = request.PortalId ?? PortalId;
                if (!UserInfo.IsSuperUser && PortalId != pid)
                {
                    return Request.CreateErrorResponse(HttpStatusCode.Unauthorized, AuthFailureMessage);
                }

                var cultureCode = string.IsNullOrEmpty(request.CultureCode) ? LocaleController.Instance.GetCurrentLocale(pid).Code : request.CultureCode;
                var language = LocaleController.Instance.GetLocale(pid, cultureCode);
                if (language == null)
                {
                    return Request.CreateErrorResponse(HttpStatusCode.BadRequest,
                        string.Format(Localization.GetString("InvalidLocale.ErrorMessage", LocalResourcesFile), cultureCode));
                }

                var portalInfo = PortalController.Instance.GetPortal(pid, cultureCode);
                portalInfo.SplashTabId = request.SplashTabId;
                portalInfo.HomeTabId = request.HomeTabId;
                portalInfo.LoginTabId = request.LoginTabId;
                portalInfo.RegisterTabId = request.RegisterTabId;
                portalInfo.UserTabId = request.UserTabId;
                portalInfo.SearchTabId = request.SearchTabId;
                portalInfo.Custom404TabId = request.Custom404TabId;
                portalInfo.Custom500TabId = request.Custom500TabId;

                PortalController.Instance.UpdatePortalInfo(portalInfo);
                PortalController.UpdatePortalSetting(pid, "PageHeadText", string.IsNullOrEmpty(request.PageHeadText) ? "false" : request.PageHeadText);

                return Request.CreateResponse(HttpStatusCode.OK, new { Success = true });
            }
            catch (Exception exc)
            {
                Logger.Error(exc);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateIgnoreWords">
          <declaration><![CDATA[public HttpResponseMessage UpdateIgnoreWords(UpdateIgnoreWordsRequest request)]]></declaration>
          <documentation>POST: api/SiteSettings/UpdateIgnoreWords
 <summary>
 Updates ignore words
 </summary>
 <param name="request"></param>
 <returns></returns></documentation>
          <codeblock>
            <location sl="1833" sc="9" el="1861" ec="10">Services\SiteSettingsController.cs</location>
            <body hash="f998e3aa5ded1c6f7b24e2cc53121ac9"><![CDATA[{
            try
            {
                var pid = request.PortalId ?? PortalId;
                if (!UserInfo.IsSuperUser && pid != PortalId)
                {
                    return Request.CreateErrorResponse(HttpStatusCode.Unauthorized, AuthFailureMessage);
                }

                string cultureCode = string.IsNullOrEmpty(request.CultureCode)
                    ? LocaleController.Instance.GetCurrentLocale(pid).Code
                    : request.CultureCode;

                var language = LocaleController.Instance.GetLocale(pid, cultureCode);
                if (language == null)
                {
                    return Request.CreateErrorResponse(HttpStatusCode.BadRequest,
                        string.Format(Localization.GetString("InvalidLocale.ErrorMessage", LocalResourcesFile), cultureCode));
                }

                SearchHelper.Instance.UpdateSearchStopWords(request.StopWordsId, request.StopWords, pid, cultureCode);
                return Request.CreateResponse(HttpStatusCode.OK, new { Success = true });
            }
            catch (Exception exc)
            {
                Logger.Error(exc);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateLanguage">
          <declaration><![CDATA[public HttpResponseMessage UpdateLanguage(UpdateLanguageRequest request)]]></declaration>
          <documentation>POST: api/SiteSettings/UpdateLanguage
 <summary>
 Updates language
 </summary>
 <param name="request"></param>
 <returns></returns></documentation>
          <codeblock>
            <location sl="2325" sc="9" el="2411" ec="10">Services\SiteSettingsController.cs</location>
            <body hash="8b300783835a50ddaebd400990fa20d5"><![CDATA[{
            try
            {
                var pid = request.PortalId ?? PortalId;
                if (!UserInfo.IsSuperUser && pid != PortalId)
                {
                    return Request.CreateErrorResponse(HttpStatusCode.Unauthorized, AuthFailureMessage);
                }

                if (request.LanguageId != null)
                {
                    var language = LocaleController.Instance.GetLocale(request.LanguageId.Value) ??
                                       (LocaleController.Instance.GetLocale(request.Code) ??
                                        new Locale { Code = request.Code });
                    if (UserInfo.IsSuperUser)
                    {
                        language.Fallback = request.Fallback;
                        language.Text = CultureInfo.GetCultureInfo(language.Code).NativeName;
                        Localization.SaveLanguage(language);
                    }

                    Dictionary<string, Locale> enabledLanguages = LocaleController.Instance.GetLocales(pid);
                    var localizedTabs = PortalSettings.ContentLocalizationEnabled
                        ? TabController.Instance.GetTabsByPortal(pid).WithCulture(request.Code, false).AsList()
                        : new List<TabInfo>();
                    Locale defaultLocale = LocaleController.Instance.GetDefaultLocale(pid);
                    string redirectUrl = string.Empty;

                    if (request.Enabled)
                    {
                        if (!enabledLanguages.ContainsKey(request.Code))
                        {
                            //Add language to portal
                            Localization.AddLanguageToPortal(pid, language.LanguageId, true);
                        }

                        //restore the tabs and modules
                        foreach (var tab in localizedTabs)
                        {
                            TabController.Instance.RestoreTab(tab, PortalSettings);
                            ModuleController.Instance.GetTabModules(tab.TabID)
                                .Values.ToList()
                                .ForEach(ModuleController.Instance.RestoreModule);
                        }

                        if (LocaleController.Instance.GetLocales(pid).Count == 2)
                        {
                            redirectUrl = Globals.NavigateURL();
                        }
                    }
                    else
                    {
                        //remove language from portal
                        Localization.RemoveLanguageFromPortal(pid, language.LanguageId);

                        //if the disable language is current language, should redirect to default language.
                        if (
                            request.Code.Equals(Thread.CurrentThread.CurrentUICulture.ToString(),
                                StringComparison.InvariantCultureIgnoreCase) ||
                            LocaleController.Instance.GetLocales(pid).Count == 1)
                        {
                            redirectUrl = Globals.NavigateURL(PortalSettings.ActiveTab.TabID,
                                PortalSettings.ActiveTab.IsSuperTab,
                                PortalSettings, "", defaultLocale.Code);
                        }

                        //delete the tabs in this language
                        foreach (var tab in localizedTabs)
                        {
                            tab.DefaultLanguageGuid = Guid.Empty;
                            TabController.Instance.SoftDeleteTab(tab.TabID, PortalSettings);
                        }
                    }

                    return Request.CreateResponse(HttpStatusCode.OK, new { Success = true, RedirectUrl = pid == PortalId ? redirectUrl : "" });
                }
                else
                {
                    return Request.CreateResponse(HttpStatusCode.BadRequest, new { Success = false });
                }
            }
            catch (Exception exc)
            {
                Logger.Error(exc);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateLanguageRoles">
          <declaration><![CDATA[public HttpResponseMessage UpdateLanguageRoles(UpdateLanguageRequest request)]]></declaration>
          <documentation>POST: api/SiteSettings/UpdateLanguageRoles
 <summary>
 Updates language security
 </summary>
 <param name="request"></param>
 <returns></returns></documentation>
          <codeblock>
            <location sl="2296" sc="9" el="2314" ec="10">Services\SiteSettingsController.cs</location>
            <body hash="07887f6a78851defe203d4051ea7223d"><![CDATA[{
            try
            {
                var pid = request.PortalId ?? PortalId;
                if (!UserInfo.IsSuperUser && pid != PortalId)
                {
                    return Request.CreateErrorResponse(HttpStatusCode.Unauthorized, AuthFailureMessage);
                }

                PortalController.UpdatePortalSetting(pid, $"DefaultTranslatorRoles-{request.Code}", request.Roles);

                return Request.CreateResponse(HttpStatusCode.OK, new { Success = true });
            }
            catch (Exception exc)
            {
                Logger.Error(exc);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateLanguageSettings">
          <declaration><![CDATA[public HttpResponseMessage UpdateLanguageSettings(UpdateLanguageSettingsRequest request)]]></declaration>
          <documentation>POST: api/SiteSettings/UpdateLanguageSettings
 <summary>
 Updates language settings
 </summary>
 <param name="request"></param>
 <returns></returns></documentation>
          <codeblock>
            <location sl="1972" sc="9" el="2036" ec="10">Services\SiteSettingsController.cs</location>
            <body hash="789a0eb2b94f147110de9c11b20e01ea"><![CDATA[{
            try
            {
                var pid = request.PortalId ?? PortalId;
                if (!UserInfo.IsSuperUser && pid != PortalId)
                {
                    return Request.CreateErrorResponse(HttpStatusCode.Unauthorized, AuthFailureMessage);
                }

                var portal = PortalController.Instance.GetPortal(pid);
                var portalSettings = new PortalSettings(portal);

                PortalController.UpdatePortalSetting(pid, "EnableBrowserLanguage", request.EnableBrowserLanguage.ToString());
                PortalController.UpdatePortalSetting(pid, "AllowUserUICulture", request.AllowUserUICulture.ToString());

                if (!portalSettings.ContentLocalizationEnabled)
                {
                    // first check whether or not portal default language has changed
                    string newDefaultLanguage = request.SiteDefaultLanguage;
                    if (newDefaultLanguage != portalSettings.DefaultLanguage)
                    {
                        var needToRemoveOldDefaultLanguage = LocaleController.Instance.GetLocales(pid).Count == 1;
                        var oldDefaultLanguage = LocaleController.Instance.GetLocale(pid, portalSettings.DefaultLanguage);
                        if (!IsLanguageEnabled(pid, newDefaultLanguage))
                        {
                            var language = LocaleController.Instance.GetLocale(pid, newDefaultLanguage);
                            Localization.AddLanguageToPortal(pid, language.LanguageId, true);
                        }

                        // update portal default language
                        portal.DefaultLanguage = newDefaultLanguage;
                        PortalController.Instance.UpdatePortalInfo(portal);

                        if (needToRemoveOldDefaultLanguage)
                        {
                            Localization.RemoveLanguageFromPortal(pid, oldDefaultLanguage.LanguageId);
                        }
                    }

                    PortalController.UpdatePortalSetting(pid, "EnableUrlLanguage", request.EnableUrlLanguage.ToString());
                }

                var oldLanguageDisplayMode = GetLanguageDisplayMode(pid);
                if (request.LanguageDisplayMode != oldLanguageDisplayMode)
                {
                    var personalizationController = new PersonalizationController();
                    var personalization = personalizationController.LoadProfile(UserInfo.UserID, pid);
                    Personalization.SetProfile(personalization, "LanguageDisplayMode", "ViewType" + pid, request.LanguageDisplayMode);
                    personalizationController.SaveProfile(personalization);
                }

                if (UserInfo.IsSuperUser && Host.EnableContentLocalization != request.AllowContentLocalization)
                {
                    HostController.Instance.Update("EnableContentLocalization", request.AllowContentLocalization ? "Y" : "N", false);
                    DataCache.ClearCache();
                }

                return Request.CreateResponse(HttpStatusCode.OK, new { Success = true });
            }
            catch (Exception exc)
            {
                Logger.Error(exc);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateMessagingSettings">
          <declaration><![CDATA[public HttpResponseMessage UpdateMessagingSettings(UpdateMessagingSettingsRequest request)]]></declaration>
          <documentation>POST: api/SiteSettings/UpdateMessagingSettings
 <summary>
 Updates messaging settings
 </summary>
 <param name="request"></param>
 <returns></returns></documentation>
          <codeblock>
            <location sl="379" sc="9" el="406" ec="10">Services\SiteSettingsController.cs</location>
            <body hash="fe8f593838d28d3c875f7ae8e163059c"><![CDATA[{
            try
            {
                var pid = request.PortalId ?? PortalId;
                if (!UserInfo.IsSuperUser && PortalId != pid)
                {
                    return Request.CreateErrorResponse(HttpStatusCode.Unauthorized, AuthFailureMessage);
                }

                PortalController.UpdatePortalSetting(pid, "MessagingThrottlingInterval", request.ThrottlingInterval.ToString(), false);
                PortalController.UpdatePortalSetting(pid, "MessagingRecipientLimit", request.RecipientLimit.ToString(), false);
                PortalController.UpdatePortalSetting(pid, "MessagingAllowAttachments", request.AllowAttachments ? "YES" : "NO", false);
                PortalController.UpdatePortalSetting(pid, "MessagingIncludeAttachments", request.IncludeAttachments ? "YES" : "NO", false);

                PortalController.UpdatePortalSetting(pid, "MessagingProfanityFilters", request.ProfanityFilters ? "YES" : "NO", false);
                PortalController.UpdatePortalSetting(pid, "MessagingSendEmail", request.SendEmail ? "YES" : "NO", false);
                PortalController.UpdatePortalSetting(pid, "DisablePrivateMessage", request.DisablePrivateMessage ? "Y" : "N", false);

                DataCache.ClearPortalCache(pid, false);

                return Request.CreateResponse(HttpStatusCode.OK, new { Success = true });
            }
            catch (Exception exc)
            {
                Logger.Error(exc);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateOtherSettings">
          <declaration><![CDATA[public HttpResponseMessage UpdateOtherSettings(UpdateOtherSettingsRequest request)]]></declaration>
          <documentation>POST: api/SiteSettings/UpdateOtherSettings
 <summary>
 Updates other settings
 </summary>
 <param name="request"></param>
 <returns></returns></documentation>
          <codeblock>
            <location sl="2811" sc="9" el="2824" ec="10">Services\SiteSettingsController.cs</location>
            <body hash="ca4dd54b8eea6da17d4dc509e38757b6"><![CDATA[{
            try
            {
                HostController.Instance.Update("CheckUpgrade", request.CheckUpgrade ? "Y" : "N", false);
                HostController.Instance.Update("DnnImprovementProgram", request.DnnImprovementProgram ? "Y" : "N", false);
                DataCache.ClearCache();
                return Request.CreateResponse(HttpStatusCode.OK, new { Success = true });
            }
            catch (Exception exc)
            {
                Logger.Error(exc);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdatePortalSettings">
          <declaration><![CDATA[public HttpResponseMessage UpdatePortalSettings(UpdateSiteSettingsRequest request)]]></declaration>
          <documentation>POST: api/SiteSettings/UpdatePortalSettings
 <summary>
 Updates site settings
 </summary>
 <param name="request"></param>
 <returns></returns></documentation>
          <codeblock>
            <location sl="161" sc="9" el="208" ec="10">Services\SiteSettingsController.cs</location>
            <body hash="98de4efef82e5272ab4274e01477a6f0"><![CDATA[{
            try
            {
                var pid = request.PortalId ?? PortalId;
                if (!UserInfo.IsSuperUser && pid != PortalId)
                {
                    return Request.CreateErrorResponse(HttpStatusCode.Unauthorized, AuthFailureMessage);
                }

                var cultureCode = string.IsNullOrEmpty(request.CultureCode) ? LocaleController.Instance.GetCurrentLocale(pid).Code : request.CultureCode;

                var language = LocaleController.Instance.GetLocale(pid, cultureCode);
                if (language == null)
                {
                    return Request.CreateErrorResponse(HttpStatusCode.BadRequest,
                        string.Format(Localization.GetString("InvalidLocale.ErrorMessage", LocalResourcesFile), cultureCode));
                }

                var portalInfo = PortalController.Instance.GetPortal(pid, cultureCode);
                portalInfo.PortalName = request.PortalName;

                if (request.LogoFile != null && request.LogoFile.fileId != Null.NullInteger)
                {
                    portalInfo.LogoFile = FileManager.Instance.GetFile(request.LogoFile.fileId).RelativePath;
                }

                portalInfo.FooterText = request.FooterText;
                portalInfo.Description = request.Description;
                portalInfo.KeyWords = request.KeyWords;

                PortalController.Instance.UpdatePortalInfo(portalInfo);
                PortalController.UpdatePortalSetting(pid, "TimeZone", request.TimeZone, false);

                if (request.FavIcon != null && request.FavIcon.fileId != Null.NullInteger)
                {
                    new FavIcon(pid).Update(request.FavIcon.fileId);
                }

                PortalController.UpdatePortalSetting(pid, "DefaultIconLocation", "icons/" + request.IconSet, false, cultureCode);

                return Request.CreateResponse(HttpStatusCode.OK, new { Success = true });
            }
            catch (Exception exc)
            {
                Logger.Error(exc);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateProfileProperty">
          <declaration><![CDATA[public HttpResponseMessage UpdateProfileProperty(UpdateProfilePropertyRequest request)]]></declaration>
          <documentation>POST: api/SiteSettings/UpdateProfileProperty
 <summary>
 Updates profile property
 </summary>
 <param name="request"></param>
 <returns></returns></documentation>
          <codeblock>
            <location sl="763" sc="9" el="814" ec="10">Services\SiteSettingsController.cs</location>
            <body hash="b880916f8d41cf0d610ad54a22a716bd"><![CDATA[{
            try
            {
                var pid = request.PortalId ?? PortalId;
                if (!UserInfo.IsSuperUser && PortalId != pid)
                {
                    return Request.CreateErrorResponse(HttpStatusCode.Unauthorized, AuthFailureMessage);
                }

                var definitionId = request.PropertyDefinitionId ?? Null.NullInteger;

                if (definitionId != Null.NullInteger)
                {
                    var property = new ProfilePropertyDefinition(pid)
                    {
                        PropertyDefinitionId = definitionId,
                        DataType = request.DataType,
                        DefaultValue = request.DefaultValue,
                        PropertyCategory = request.PropertyCategory,
                        PropertyName = request.PropertyName,
                        ReadOnly = request.ReadOnly,
                        Required = request.Required,
                        ValidationExpression = request.ValidationExpression,
                        ViewOrder = request.ViewOrder,
                        Visible = request.Visible,
                        Length = request.Length,
                        DefaultVisibility = (UserVisibilityMode)request.DefaultVisibility
                    };

                    if (ValidateProperty(property))
                    {
                        ProfileController.UpdatePropertyDefinition(property);
                        DataCache.ClearDefinitionsCache(pid);
                        return Request.CreateResponse(HttpStatusCode.OK, new { Success = true });
                    }
                    else
                    {
                        return Request.CreateErrorResponse(HttpStatusCode.BadRequest,
                            string.Format(Localization.GetString("RequiredTextBox", LocalResourcesFile)));
                    }
                }
                else
                {
                    return Request.CreateResponse(HttpStatusCode.BadRequest, new { Success = false });
                }
            }
            catch (Exception exc)
            {
                Logger.Error(exc);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateProfilePropertyLocalization">
          <declaration><![CDATA[public HttpResponseMessage UpdateProfilePropertyLocalization(UpdateProfilePropertyLocalizationRequest request)]]></declaration>
          <documentation>POST: api/SiteSettings/UpdateProfilePropertyLocalization
 <summary>
 Updates profile property localization
 </summary>
 <param name="request"></param>
 <returns></returns></documentation>
          <codeblock>
            <location sl="665" sc="9" el="692" ec="10">Services\SiteSettingsController.cs</location>
            <body hash="40c6bdf0e7a814b62da32c4b4f966e5d"><![CDATA[{
            try
            {
                var pid = request.PortalId ?? PortalId;
                if (!UserInfo.IsSuperUser && PortalId != pid)
                {
                    return Request.CreateErrorResponse(HttpStatusCode.Unauthorized, AuthFailureMessage);
                }

                var language = LocaleController.Instance.GetLocale(pid, request.Language);
                if (language == null)
                {
                    return Request.CreateErrorResponse(HttpStatusCode.BadRequest,
                        string.Format(Localization.GetString("InvalidLocale.ErrorMessage", LocalResourcesFile), request.Language));
                }

                _controller.SaveLocalizedKeys(pid, request.PropertyName, request.PropertyCategory, request.Language, request.PropertyNameString,
                    request.PropertyHelpString, request.PropertyRequiredString, request.PropertyValidationString, request.CategoryNameString);
                DataCache.ClearCache();

                return Request.CreateResponse(HttpStatusCode.OK, new { Success = true });
            }
            catch (Exception exc)
            {
                Logger.Error(exc);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateProfilePropertyOrders">
          <declaration><![CDATA[public HttpResponseMessage UpdateProfilePropertyOrders(UpdateProfilePropertyOrdersRequest request)]]></declaration>
          <documentation>POST: api/SiteSettings/SwapProfilePropertyOrders
 <summary>
 Moves profile property
 </summary>
 <param name="request"></param>
 <returns></returns></documentation>
          <codeblock>
            <location sl="825" sc="9" el="852" ec="10">Services\SiteSettingsController.cs</location>
            <body hash="5016ba888db07a50ec03d58ef0dbad63"><![CDATA[{
            try
            {
                var pid = request.PortalId ?? PortalId;
                if (!UserInfo.IsSuperUser && PortalId != pid)
                {
                    return Request.CreateErrorResponse(HttpStatusCode.Unauthorized, AuthFailureMessage);
                }

                for (int i = 0; i <= request.Properties.Length - 1; i++)
                {
                    var profileProperty = ProfileController.GetPropertyDefinition(request.Properties[i].PropertyDefinitionId.Value, pid);
                    if (profileProperty.ViewOrder != i)
                    {
                        profileProperty.ViewOrder = i;
                        ProfileController.UpdatePropertyDefinition(profileProperty);
                    }
                }

                DataCache.ClearDefinitionsCache(pid);
                return Request.CreateResponse(HttpStatusCode.OK, new { Success = true });
            }
            catch (Exception exc)
            {
                Logger.Error(exc);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateProfileSettings">
          <declaration><![CDATA[public HttpResponseMessage UpdateProfileSettings(UpdateProfileSettingsRequest request)]]></declaration>
          <documentation>POST: api/SiteSettings/UpdateProfileSettings
 <summary>
 Updates profile settings
 </summary>
 <param name="request"></param>
 <returns></returns></documentation>
          <codeblock>
            <location sl="462" sc="9" el="488" ec="10">Services\SiteSettingsController.cs</location>
            <body hash="ddf9cabd7c3a722d91fa4b05f37fcb09"><![CDATA[{
            try
            {
                var pid = request.PortalId ?? PortalId;
                if (!UserInfo.IsSuperUser && PortalId != pid)
                {
                    return Request.CreateErrorResponse(HttpStatusCode.Unauthorized, AuthFailureMessage);
                }

                if (Config.GetFriendlyUrlProvider() == "advanced")
                {
                    PortalController.UpdatePortalSetting(pid, FriendlyUrlSettings.RedirectOldProfileUrlSetting, request.RedirectOldProfileUrl ? "Y" : "N", false);
                }
                PortalController.UpdatePortalSetting(pid, FriendlyUrlSettings.VanityUrlPrefixSetting, request.VanityUrlPrefix, false);
                PortalController.UpdatePortalSetting(pid, "Profile_DefaultVisibility", request.ProfileDefaultVisibility.ToString(), false);
                PortalController.UpdatePortalSetting(pid, "Profile_DisplayVisibility", request.ProfileDisplayVisibility.ToString(), true);

                DataCache.ClearPortalCache(pid, false);

                return Request.CreateResponse(HttpStatusCode.OK, new { Success = true });
            }
            catch (Exception exc)
            {
                Logger.Error(exc);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateSiteAlias">
          <declaration><![CDATA[public HttpResponseMessage UpdateSiteAlias(UpdateSiteAliasRequest request)]]></declaration>
          <documentation>POST: api/SiteSettings/UpdateSiteAlias
 <summary>
 Updates site alias
 </summary>
 <param name="request"></param>
 <returns></returns></documentation>
          <codeblock>
            <location sl="1152" sc="9" el="1205" ec="10">Services\SiteSettingsController.cs</location>
            <body hash="d2e57f3f93e791320084169a4fa8fad0"><![CDATA[{
            try
            {
                var pid = request.PortalId ?? PortalId;
                if (!UserInfo.IsSuperUser && pid != PortalId)
                {
                    return Request.CreateErrorResponse(HttpStatusCode.Unauthorized, AuthFailureMessage);
                }

                string strAlias = request.HTTPAlias;
                if (!string.IsNullOrEmpty(strAlias))
                {
                    strAlias = strAlias.Trim();
                }

                if (IsHttpAliasValid(strAlias))
                {
                    BrowserTypes browser;
                    Enum.TryParse(request.BrowserType, out browser);
                    if (request.PortalAliasID != null)
                    {
                        PortalAliasInfo portalAlias = new PortalAliasInfo()
                        {
                            PortalID = pid,
                            PortalAliasID = request.PortalAliasID.Value,
                            HTTPAlias = strAlias,
                            Skin = request.Skin,
                            CultureCode = request.CultureCode,
                            BrowserType = browser,
                            IsPrimary = request.IsPrimary
                        };

                        PortalAliasController.Instance.UpdatePortalAlias(portalAlias);
                    }
                    else
                    {
                        return Request.CreateErrorResponse(HttpStatusCode.BadRequest,
                            string.Format(Localization.GetString("InvalidAlias", LocalResourcesFile)));
                    }
                }
                else
                {
                    return Request.CreateErrorResponse(HttpStatusCode.BadRequest,
                            string.Format(Localization.GetString("InvalidAlias", LocalResourcesFile)));
                }

                return Request.CreateResponse(HttpStatusCode.OK, new { Success = true });
            }
            catch (Exception exc)
            {
                Logger.Error(exc);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateSynonymsGroup">
          <declaration><![CDATA[public HttpResponseMessage UpdateSynonymsGroup(UpdateSynonymsGroupRequest request)]]></declaration>
          <documentation>POST: api/SiteSettings/UpdateSynonymsGroup
 <summary>
 Updates Synonyms Group
 </summary>
 <param name="request"></param>
 <returns></returns></documentation>
          <codeblock>
            <location sl="1657" sc="9" el="1705" ec="10">Services\SiteSettingsController.cs</location>
            <body hash="df427ffaeb671d94fc17d4a718af4f63"><![CDATA[{
            try
            {
                var pid = request.PortalId ?? PortalId;
                if (!UserInfo.IsSuperUser && pid != PortalId)
                {
                    return Request.CreateErrorResponse(HttpStatusCode.Unauthorized, AuthFailureMessage);
                }

                var cultureCode = string.IsNullOrEmpty(request.CultureCode)
                    ? LocaleController.Instance.GetCurrentLocale(pid).Code
                    : request.CultureCode;
            
                var language = LocaleController.Instance.GetLocale(pid, cultureCode);
                if (language == null)
                {
                    return Request.CreateErrorResponse(HttpStatusCode.BadRequest,
                        string.Format(Localization.GetString("InvalidLocale.ErrorMessage", LocalResourcesFile), cultureCode));
                }

                if (request.SynonymsGroupID != null)
                {
                    string duplicateWord;
                    var synonymsGroupId = SearchHelper.Instance.UpdateSynonymsGroup(request.SynonymsGroupID.Value,
                        request.SynonymsTags, pid, cultureCode, out duplicateWord);
                    if (synonymsGroupId > 0)
                    {
                        return Request.CreateResponse(HttpStatusCode.OK, new { Success = true });
                    }
                    else
                    {
                        return Request.CreateErrorResponse(HttpStatusCode.BadRequest, "[" + duplicateWord + "] " +
                                                                                      string.Format(
                                                                                          Localization.GetString(
                                                                                              "SynonymsTagDuplicated",
                                                                                              LocalResourcesFile)));
                    }
                }
                else
                {
                    return Request.CreateResponse(HttpStatusCode.BadRequest, new { Success = false });
                }
            }
            catch (Exception exc)
            {
                Logger.Error(exc);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateUrlMappingSettings">
          <declaration><![CDATA[public HttpResponseMessage UpdateUrlMappingSettings(UpdateUrlMappingSettingsRequest request)]]></declaration>
          <documentation>POST: api/SiteSettings/UpdateUrlMappingSettings
 <summary>
 Updates Url mapping settings
 </summary>
 <param name="request"></param>
 <returns></returns></documentation>
          <codeblock>
            <location sl="962" sc="9" el="983" ec="10">Services\SiteSettingsController.cs</location>
            <body hash="b7c61c0f2fc8e75353ccf3b4e69bdeba"><![CDATA[{
            try
            {
                var pid = request.PortalId ?? PortalId;
                if (!UserInfo.IsSuperUser && PortalId != pid)
                {
                    return Request.CreateErrorResponse(HttpStatusCode.Unauthorized, AuthFailureMessage);
                }

                PortalController.UpdatePortalSetting(pid, "PortalAliasMapping", request.PortalAliasMapping, false);
                HostController.Instance.Update("AutoAddPortalAlias", request.AutoAddPortalAlias ? "Y" : "N", true);

                DataCache.ClearPortalCache(pid, false);

                return Request.CreateResponse(HttpStatusCode.OK, new { Success = true });
            }
            catch (Exception exc)
            {
                Logger.Error(exc);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="ValidateProperty">
          <declaration><![CDATA[private bool ValidateProperty(ProfilePropertyDefinition definition)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2948" sc="9" el="2963" ec="10">Services\SiteSettingsController.cs</location>
            <body hash="36463cbc03b1eabaf51d39c4406dc88e"><![CDATA[{
            bool isValid = true;
            var objListController = new ListController();
            string strDataType = objListController.GetListEntryInfo("DataType", definition.DataType).Value;

            switch (strDataType)
            {
                case "Text":
                    if (definition.Required && definition.Length == 0)
                    {
                        isValid = Null.NullBoolean;
                    }
                    break;
            }
            return isValid;
        }]]></body>
          </codeblock>
        </method>
        <method name="VerifyLanguageResourceFiles">
          <declaration><![CDATA[public HttpResponseMessage VerifyLanguageResourceFiles()]]></declaration>
          <documentation>GET: api/SiteSettings/VerifyLanguageResourceFiles
 <summary>
 Verifies language resource files
 </summary>
 <returns>verification results</returns></documentation>
          <codeblock>
            <location sl="2421" sc="9" el="2561" ec="10">Services\SiteSettingsController.cs</location>
            <body hash="bd729853ee59839c08ec9137506efabc"><![CDATA[{
            try
            {
                var files = new SortedList();
                Dictionary<string, Locale> locales = LocaleController.Instance.GetLocales(Null.NullInteger);
                GetResourceFiles(files, HttpContext.Current.Server.MapPath("~\\"));

                var tables = new List<object>();

                foreach (var locale in locales.Values)
                {
                    var tableMissing = new List<string>();
                    var tableEntries = new List<string>();
                    var tableObsolete = new List<string>();
                    var tableOld = new List<string>();
                    var tableDuplicate = new List<string>();
                    var tableError = new List<string>();

                    foreach (DictionaryEntry file in files)
                    {
                        if (!File.Exists(ResourceFile(file.Key.ToString(), locale.Code)))
                        {
                            tableMissing.Add(
                                ResourceFile(file.Key.ToString(), locale.Code)
                                    .Replace(HttpContext.Current.Server.MapPath("~"), ""));
                        }
                        else
                        {
                            var dsDef = new DataSet();
                            var dsRes = new DataSet();

                            try
                            {
                                dsDef.ReadXml(file.Key.ToString());
                            }
                            catch
                            {
                                tableError.Add(file.Key.ToString().Replace(HttpContext.Current.Server.MapPath("~"), ""));
                                dsDef = null;
                            }
                            try
                            {
                                dsRes.ReadXml(ResourceFile(file.Key.ToString(), locale.Code));
                            }
                            catch
                            {
                                if (locale.Text != Localization.SystemLocale)
                                {
                                    tableError.Add(ResourceFile(file.Key.ToString(), locale.Code).Replace(HttpContext.Current.Server.MapPath("~"), ""));
                                    dsRes = null;
                                }
                            }

                            if (dsRes != null && dsDef != null && dsRes.Tables["data"] != null && dsDef.Tables["data"] != null)
                            {
                                var dtDef = dsDef.Tables["data"];
                                dtDef.TableName = "default";
                                var dtRes = dsRes.Tables["data"].Copy();
                                dtRes.TableName = "localized";
                                dsDef.Tables.Add(dtRes);

                                // Check for duplicate entries in localized file
                                try
                                {
                                    // if this fails-> file contains duplicates
                                    var c = new UniqueConstraint("uniqueness", dtRes.Columns["name"]);
                                    dtRes.Constraints.Add(c);
                                    dtRes.Constraints.Remove("uniqueness");
                                }
                                catch
                                {
                                    tableDuplicate.Add(ResourceFile(file.Key.ToString(), locale.Code).Replace(HttpContext.Current.Server.MapPath("~"), ""));
                                }

                                // Check for missing entries in localized file
                                try
                                {
                                    // if this fails-> some entries in System default file are not found in Resource file
                                    dsDef.Relations.Add("missing", dtRes.Columns["name"], dtDef.Columns["name"]);
                                }
                                catch
                                {
                                    tableEntries.Add(ResourceFile(file.Key.ToString(), locale.Code).Replace(HttpContext.Current.Server.MapPath("~"), ""));
                                }
                                finally
                                {
                                    dsDef.Relations.Remove("missing");
                                }

                                // Check for obsolete entries in localized file
                                try
                                {
                                    // if this fails-> some entries in Resource File are not found in System default
                                    dsDef.Relations.Add("obsolete", dtDef.Columns["name"], dtRes.Columns["name"]);
                                }
                                catch
                                {
                                    tableObsolete.Add(ResourceFile(file.Key.ToString(), locale.Code).Replace(HttpContext.Current.Server.MapPath("~"), ""));
                                }
                                finally
                                {
                                    dsDef.Relations.Remove("obsolete");
                                }

                                // Check older files
                                var resFile = new FileInfo(ResourceFile(file.Key.ToString(), locale.Code));
                                if (((FileInfo)file.Value).LastWriteTime > resFile.LastWriteTime)
                                {
                                    tableOld.Add(ResourceFile(file.Key.ToString(), locale.Code).Replace(HttpContext.Current.Server.MapPath("~"), ""));
                                }
                            }
                        }
                    }

                    tables.Add(new
                    {
                        Language = Localization.GetLocaleName(locale.Code, GetCultureDropDownType(PortalId)),
                        IsSystemDefault = Localization.SystemLocale == locale.Code,
                        Icon = Globals.ResolveUrl(string.IsNullOrEmpty(locale.Code)
                            ? "~/images/Flags/none.gif"
                            : $"~/images/Flags/{locale.Code}.gif"),
                        MissingFiles = tableMissing,
                        FilesWithDuplicateEntries = tableDuplicate,
                        FilesWithMissingEntries = tableEntries,
                        FilesWithObsoleteEntries = tableObsolete,
                        OldFiles = tableOld,
                        MalformedFiles = tableError
                    });
                }

                return Request.CreateResponse(HttpStatusCode.OK, new
                {
                    Results = tables
                });
            }
            catch (Exception exc)
            {
                Logger.Error(exc);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, exc);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_controller">
          <declaration><![CDATA[private readonly SiteSettingsController _controller = new SiteSettingsController();]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="AuthFailureMessage">
          <declaration><![CDATA[private const string AuthFailureMessage = "Authorization has been denied for this request.";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="DefaultSearchAuthorBoost">
          <declaration><![CDATA[private const int DefaultSearchAuthorBoost = 15;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="DefaultSearchContentBoost">
          <declaration><![CDATA[private const int DefaultSearchContentBoost = 35;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="DefaultSearchDescriptionBoost">
          <declaration><![CDATA[private const int DefaultSearchDescriptionBoost = 20;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="DefaultSearchTagBoost">
          <declaration><![CDATA[private const int DefaultSearchTagBoost = 40;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="DefaultSearchTitleBoost">
          <declaration><![CDATA[private const int DefaultSearchTitleBoost = 50;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="LocalResourcesFile">
          <declaration><![CDATA[private const string LocalResourcesFile = "~/DesktopModules/admin/Dnn.PersonaBar/Modules/Dnn.SiteSettings/App_LocalResources/SiteSettings.resx";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Logger">
          <declaration><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof(SiteSettingsController));]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="SearchAuthorBoostSetting">
          <declaration><![CDATA[private const string SearchAuthorBoostSetting = "Search_Author_Boost";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="SearchContentBoostSetting">
          <declaration><![CDATA[private const string SearchContentBoostSetting = "Search_Content_Boost";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="SearchDescriptionBoostSetting">
          <declaration><![CDATA[private const string SearchDescriptionBoostSetting = "Search_Description_Boost";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="SearchTagBoostSetting">
          <declaration><![CDATA[private const string SearchTagBoostSetting = "Search_Tag_Boost";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="SearchTitleBoostSetting">
          <declaration><![CDATA[private const string SearchTitleBoostSetting = "Search_Title_Boost";]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="Dnn.PersonaBar.SiteSettings.Services.Dto">
    <class name="CreateLanguagePackRequest">
      <declaration><![CDATA[public class CreateLanguagePackRequest]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public CreateLanguagePackRequest()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="CultureCode">
          <declaration><![CDATA[public string CultureCode]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="35" sc="37" el="35" ec="41">Services\Dto\CreateLanguagePackRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="35" sc="42" el="35" ec="46">Services\Dto\CreateLanguagePackRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="FileName">
          <declaration><![CDATA[public string FileName]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="37" sc="34" el="37" ec="38">Services\Dto\CreateLanguagePackRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="37" sc="39" el="37" ec="43">Services\Dto\CreateLanguagePackRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ModuleIds">
          <declaration><![CDATA[public int[] ModuleIds]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="33" sc="34" el="33" ec="38">Services\Dto\CreateLanguagePackRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="33" sc="39" el="33" ec="43">Services\Dto\CreateLanguagePackRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="PackType">
          <declaration><![CDATA[public string PackType]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="31" sc="34" el="31" ec="38">Services\Dto\CreateLanguagePackRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="31" sc="39" el="31" ec="43">Services\Dto\CreateLanguagePackRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="FileDto">
      <declaration><![CDATA[public class FileDto]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public FileDto()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="fileId">
          <declaration><![CDATA[public int fileId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="8" sc="29" el="8" ec="33">Services\Dto\FileDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="8" sc="34" el="8" ec="38">Services\Dto\FileDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="fileName">
          <declaration><![CDATA[public string fileName]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="9" sc="34" el="9" ec="38">Services\Dto\FileDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="9" sc="39" el="9" ec="43">Services\Dto\FileDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="folderPath">
          <declaration><![CDATA[public string folderPath]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="10" sc="36" el="10" ec="40">Services\Dto\FileDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="10" sc="41" el="10" ec="45">Services\Dto\FileDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="LanguageTabDto">
      <declaration><![CDATA[public class LanguageTabDto]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public LanguageTabDto()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="PageId">
          <declaration><![CDATA[public int PageId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="8" sc="29" el="8" ec="33">Services\Dto\LanguageTabDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="8" sc="34" el="8" ec="38">Services\Dto\LanguageTabDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="PageName">
          <declaration><![CDATA[public string PageName]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="9" sc="34" el="9" ec="38">Services\Dto\LanguageTabDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="9" sc="39" el="9" ec="43">Services\Dto\LanguageTabDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ViewUrl">
          <declaration><![CDATA[public string ViewUrl]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="10" sc="33" el="10" ec="37">Services\Dto\LanguageTabDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="10" sc="38" el="10" ec="42">Services\Dto\LanguageTabDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="LocalizationEntry">
      <declaration><![CDATA[public class LocalizationEntry]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public LocalizationEntry()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="DefaultValue">
          <declaration><![CDATA[public string DefaultValue]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="9" sc="38" el="9" ec="42">Services\Dto\LocalizationEntry.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="9" sc="43" el="9" ec="47">Services\Dto\LocalizationEntry.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Name">
          <declaration><![CDATA[public string Name]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="8" sc="30" el="8" ec="34">Services\Dto\LocalizationEntry.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="8" sc="35" el="8" ec="39">Services\Dto\LocalizationEntry.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="NewValue">
          <declaration><![CDATA[public string NewValue]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="10" sc="34" el="10" ec="38">Services\Dto\LocalizationEntry.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="10" sc="39" el="10" ec="43">Services\Dto\LocalizationEntry.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="LocalizationProgress">
      <declaration><![CDATA[public class LocalizationProgress]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public LocalizationProgress()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="Reset">
          <declaration><![CDATA[public LocalizationProgress Reset()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="20" sc="9" el="24" ec="10">Services\Dto\LocalizationProgress.cs</location>
            <body hash="c4e8ac9cc13b926c66e045c06082c046"><![CDATA[{
            InProgress = false;
            CurrentOperationText = "";
            return this;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="CurrentOperationText">
          <declaration><![CDATA[public string CurrentOperationText]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="8" sc="46" el="8" ec="50">Services\Dto\LocalizationProgress.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="8" sc="51" el="8" ec="55">Services\Dto\LocalizationProgress.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Error">
          <declaration><![CDATA[public string Error]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="17" sc="31" el="17" ec="35">Services\Dto\LocalizationProgress.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="17" sc="36" el="17" ec="40">Services\Dto\LocalizationProgress.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="InProgress">
          <declaration><![CDATA[public bool InProgress]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="9" sc="34" el="9" ec="38">Services\Dto\LocalizationProgress.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="9" sc="39" el="9" ec="43">Services\Dto\LocalizationProgress.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="PrimaryPercent">
          <declaration><![CDATA[public int PrimaryPercent]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="12" sc="37" el="12" ec="41">Services\Dto\LocalizationProgress.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="12" sc="42" el="12" ec="46">Services\Dto\LocalizationProgress.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="PrimaryTotal">
          <declaration><![CDATA[public int PrimaryTotal]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="10" sc="35" el="10" ec="39">Services\Dto\LocalizationProgress.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="10" sc="40" el="10" ec="44">Services\Dto\LocalizationProgress.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="PrimaryValue">
          <declaration><![CDATA[public int PrimaryValue]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="11" sc="35" el="11" ec="39">Services\Dto\LocalizationProgress.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="11" sc="40" el="11" ec="44">Services\Dto\LocalizationProgress.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="SecondaryPercent">
          <declaration><![CDATA[public int SecondaryPercent]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="15" sc="39" el="15" ec="43">Services\Dto\LocalizationProgress.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="15" sc="44" el="15" ec="48">Services\Dto\LocalizationProgress.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="SecondaryTotal">
          <declaration><![CDATA[public int SecondaryTotal]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="13" sc="37" el="13" ec="41">Services\Dto\LocalizationProgress.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="13" sc="42" el="13" ec="46">Services\Dto\LocalizationProgress.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="SecondaryValue">
          <declaration><![CDATA[public int SecondaryValue]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="14" sc="37" el="14" ec="41">Services\Dto\LocalizationProgress.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="14" sc="42" el="14" ec="46">Services\Dto\LocalizationProgress.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="TimeEstimated">
          <declaration><![CDATA[public int TimeEstimated]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="16" sc="36" el="16" ec="40">Services\Dto\LocalizationProgress.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="16" sc="41" el="16" ec="45">Services\Dto\LocalizationProgress.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="UpdateBasicSearchSettingsRequest">
      <declaration><![CDATA[public class UpdateBasicSearchSettingsRequest]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public UpdateBasicSearchSettingsRequest()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="AllowLeadingWildcard">
          <declaration><![CDATA[public bool AllowLeadingWildcard]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="35" sc="44" el="35" ec="48">Services\Dto\UpdateBasicSearchSettingsRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="35" sc="49" el="35" ec="53">Services\Dto\UpdateBasicSearchSettingsRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="AuthorBoost">
          <declaration><![CDATA[public int AuthorBoost]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="47" sc="34" el="47" ec="38">Services\Dto\UpdateBasicSearchSettingsRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="47" sc="39" el="47" ec="43">Services\Dto\UpdateBasicSearchSettingsRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ContentBoost">
          <declaration><![CDATA[public int ContentBoost]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="43" sc="35" el="43" ec="39">Services\Dto\UpdateBasicSearchSettingsRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="43" sc="40" el="43" ec="44">Services\Dto\UpdateBasicSearchSettingsRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="DescriptionBoost">
          <declaration><![CDATA[public int DescriptionBoost]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="45" sc="39" el="45" ec="43">Services\Dto\UpdateBasicSearchSettingsRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="45" sc="44" el="45" ec="48">Services\Dto\UpdateBasicSearchSettingsRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="MaxWordLength">
          <declaration><![CDATA[public int MaxWordLength]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="33" sc="36" el="33" ec="40">Services\Dto\UpdateBasicSearchSettingsRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="33" sc="41" el="33" ec="45">Services\Dto\UpdateBasicSearchSettingsRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="MinWordLength">
          <declaration><![CDATA[public int MinWordLength]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="31" sc="36" el="31" ec="40">Services\Dto\UpdateBasicSearchSettingsRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="31" sc="41" el="31" ec="45">Services\Dto\UpdateBasicSearchSettingsRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="SearchCustomAnalyzer">
          <declaration><![CDATA[public string SearchCustomAnalyzer]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="37" sc="46" el="37" ec="50">Services\Dto\UpdateBasicSearchSettingsRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="37" sc="51" el="37" ec="55">Services\Dto\UpdateBasicSearchSettingsRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="TagBoost">
          <declaration><![CDATA[public int TagBoost]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="41" sc="31" el="41" ec="35">Services\Dto\UpdateBasicSearchSettingsRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="41" sc="36" el="41" ec="40">Services\Dto\UpdateBasicSearchSettingsRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="TitleBoost">
          <declaration><![CDATA[public int TitleBoost]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="39" sc="33" el="39" ec="37">Services\Dto\UpdateBasicSearchSettingsRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="39" sc="38" el="39" ec="42">Services\Dto\UpdateBasicSearchSettingsRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="UpdateDefaultPagesSettingsRequest">
      <declaration><![CDATA[public class UpdateDefaultPagesSettingsRequest]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public UpdateDefaultPagesSettingsRequest()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="CultureCode">
          <declaration><![CDATA[public string CultureCode]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="33" sc="37" el="33" ec="41">Services\Dto\UpdateDefaultPagesSettings.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="33" sc="42" el="33" ec="46">Services\Dto\UpdateDefaultPagesSettings.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Custom404TabId">
          <declaration><![CDATA[public int Custom404TabId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="47" sc="37" el="47" ec="41">Services\Dto\UpdateDefaultPagesSettings.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="47" sc="42" el="47" ec="46">Services\Dto\UpdateDefaultPagesSettings.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Custom500TabId">
          <declaration><![CDATA[public int Custom500TabId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="49" sc="37" el="49" ec="41">Services\Dto\UpdateDefaultPagesSettings.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="49" sc="42" el="49" ec="46">Services\Dto\UpdateDefaultPagesSettings.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="HomeTabId">
          <declaration><![CDATA[public int HomeTabId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="37" sc="32" el="37" ec="36">Services\Dto\UpdateDefaultPagesSettings.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="37" sc="37" el="37" ec="41">Services\Dto\UpdateDefaultPagesSettings.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="LoginTabId">
          <declaration><![CDATA[public int LoginTabId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="39" sc="33" el="39" ec="37">Services\Dto\UpdateDefaultPagesSettings.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="39" sc="38" el="39" ec="42">Services\Dto\UpdateDefaultPagesSettings.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="PageHeadText">
          <declaration><![CDATA[public string PageHeadText]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="51" sc="38" el="51" ec="42">Services\Dto\UpdateDefaultPagesSettings.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="51" sc="43" el="51" ec="47">Services\Dto\UpdateDefaultPagesSettings.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="PortalId">
          <declaration><![CDATA[public int? PortalId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="31" sc="32" el="31" ec="36">Services\Dto\UpdateDefaultPagesSettings.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="31" sc="37" el="31" ec="41">Services\Dto\UpdateDefaultPagesSettings.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="RegisterTabId">
          <declaration><![CDATA[public int RegisterTabId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="41" sc="36" el="41" ec="40">Services\Dto\UpdateDefaultPagesSettings.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="41" sc="41" el="41" ec="45">Services\Dto\UpdateDefaultPagesSettings.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="SearchTabId">
          <declaration><![CDATA[public int SearchTabId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="45" sc="34" el="45" ec="38">Services\Dto\UpdateDefaultPagesSettings.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="45" sc="39" el="45" ec="43">Services\Dto\UpdateDefaultPagesSettings.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="SplashTabId">
          <declaration><![CDATA[public int SplashTabId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="35" sc="34" el="35" ec="38">Services\Dto\UpdateDefaultPagesSettings.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="35" sc="39" el="35" ec="43">Services\Dto\UpdateDefaultPagesSettings.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="UserTabId">
          <declaration><![CDATA[public int UserTabId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="43" sc="32" el="43" ec="36">Services\Dto\UpdateDefaultPagesSettings.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="43" sc="37" el="43" ec="41">Services\Dto\UpdateDefaultPagesSettings.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="UpdateIgnoreWordsRequest">
      <declaration><![CDATA[public class UpdateIgnoreWordsRequest]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public UpdateIgnoreWordsRequest()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="CultureCode">
          <declaration><![CDATA[public string CultureCode]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="35" sc="37" el="35" ec="41">Services\Dto\UpdateIgnoreWordsRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="35" sc="42" el="35" ec="46">Services\Dto\UpdateIgnoreWordsRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="PortalId">
          <declaration><![CDATA[public int? PortalId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="31" sc="32" el="31" ec="36">Services\Dto\UpdateIgnoreWordsRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="31" sc="37" el="31" ec="41">Services\Dto\UpdateIgnoreWordsRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="StopWords">
          <declaration><![CDATA[public string StopWords]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="37" sc="35" el="37" ec="39">Services\Dto\UpdateIgnoreWordsRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="37" sc="40" el="37" ec="44">Services\Dto\UpdateIgnoreWordsRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="StopWordsId">
          <declaration><![CDATA[public int StopWordsId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="33" sc="34" el="33" ec="38">Services\Dto\UpdateIgnoreWordsRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="33" sc="39" el="33" ec="43">Services\Dto\UpdateIgnoreWordsRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="UpdateLanguageRequest">
      <declaration><![CDATA[public class UpdateLanguageRequest]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public UpdateLanguageRequest()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="Code">
          <declaration><![CDATA[public string Code]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="35" sc="30" el="35" ec="34">Services\Dto\UpdateLanguageRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="35" sc="35" el="35" ec="39">Services\Dto\UpdateLanguageRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Enabled">
          <declaration><![CDATA[public bool Enabled]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="39" sc="31" el="39" ec="35">Services\Dto\UpdateLanguageRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="39" sc="36" el="39" ec="40">Services\Dto\UpdateLanguageRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Fallback">
          <declaration><![CDATA[public string Fallback]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="41" sc="34" el="41" ec="38">Services\Dto\UpdateLanguageRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="41" sc="39" el="41" ec="43">Services\Dto\UpdateLanguageRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="LanguageId">
          <declaration><![CDATA[public int? LanguageId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="33" sc="34" el="33" ec="38">Services\Dto\UpdateLanguageRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="33" sc="39" el="33" ec="43">Services\Dto\UpdateLanguageRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="PortalId">
          <declaration><![CDATA[public int? PortalId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="31" sc="32" el="31" ec="36">Services\Dto\UpdateLanguageRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="31" sc="37" el="31" ec="41">Services\Dto\UpdateLanguageRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Roles">
          <declaration><![CDATA[public string Roles]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="37" sc="31" el="37" ec="35">Services\Dto\UpdateLanguageRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="37" sc="36" el="37" ec="40">Services\Dto\UpdateLanguageRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="UpdateLanguageSettingsRequest">
      <declaration><![CDATA[public class UpdateLanguageSettingsRequest]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public UpdateLanguageSettingsRequest()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="AllowContentLocalization">
          <declaration><![CDATA[public bool AllowContentLocalization]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="45" sc="48" el="45" ec="52">Services\Dto\UpdateLanguageSettingsRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="45" sc="53" el="45" ec="57">Services\Dto\UpdateLanguageSettingsRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="AllowUserUICulture">
          <declaration><![CDATA[public bool AllowUserUICulture]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="37" sc="42" el="37" ec="46">Services\Dto\UpdateLanguageSettingsRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="37" sc="47" el="37" ec="51">Services\Dto\UpdateLanguageSettingsRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="CultureCode">
          <declaration><![CDATA[public string CultureCode]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="33" sc="37" el="33" ec="41">Services\Dto\UpdateLanguageSettingsRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="33" sc="42" el="33" ec="46">Services\Dto\UpdateLanguageSettingsRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="EnableBrowserLanguage">
          <declaration><![CDATA[public bool EnableBrowserLanguage]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="35" sc="45" el="35" ec="49">Services\Dto\UpdateLanguageSettingsRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="35" sc="50" el="35" ec="54">Services\Dto\UpdateLanguageSettingsRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="EnableUrlLanguage">
          <declaration><![CDATA[public bool EnableUrlLanguage]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="41" sc="41" el="41" ec="45">Services\Dto\UpdateLanguageSettingsRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="41" sc="46" el="41" ec="50">Services\Dto\UpdateLanguageSettingsRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="LanguageDisplayMode">
          <declaration><![CDATA[public string LanguageDisplayMode]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="43" sc="45" el="43" ec="49">Services\Dto\UpdateLanguageSettingsRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="43" sc="50" el="43" ec="54">Services\Dto\UpdateLanguageSettingsRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="PortalId">
          <declaration><![CDATA[public int? PortalId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="31" sc="32" el="31" ec="36">Services\Dto\UpdateLanguageSettingsRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="31" sc="37" el="31" ec="41">Services\Dto\UpdateLanguageSettingsRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="SiteDefaultLanguage">
          <declaration><![CDATA[public string SiteDefaultLanguage]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="39" sc="45" el="39" ec="49">Services\Dto\UpdateLanguageSettingsRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="39" sc="50" el="39" ec="54">Services\Dto\UpdateLanguageSettingsRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="UpdateMessagingSettingsRequest">
      <declaration><![CDATA[public class UpdateMessagingSettingsRequest]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public UpdateMessagingSettingsRequest()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="AllowAttachments">
          <declaration><![CDATA[public bool AllowAttachments]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="41" sc="40" el="41" ec="44">Services\Dto\UpdateMessagingSettings.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="41" sc="45" el="41" ec="49">Services\Dto\UpdateMessagingSettings.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="CultureCode">
          <declaration><![CDATA[public string CultureCode]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="33" sc="37" el="33" ec="41">Services\Dto\UpdateMessagingSettings.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="33" sc="42" el="33" ec="46">Services\Dto\UpdateMessagingSettings.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="DisablePrivateMessage">
          <declaration><![CDATA[public bool DisablePrivateMessage]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="35" sc="45" el="35" ec="49">Services\Dto\UpdateMessagingSettings.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="35" sc="50" el="35" ec="54">Services\Dto\UpdateMessagingSettings.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="IncludeAttachments">
          <declaration><![CDATA[public bool IncludeAttachments]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="45" sc="42" el="45" ec="46">Services\Dto\UpdateMessagingSettings.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="45" sc="47" el="45" ec="51">Services\Dto\UpdateMessagingSettings.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="PortalId">
          <declaration><![CDATA[public int? PortalId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="31" sc="32" el="31" ec="36">Services\Dto\UpdateMessagingSettings.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="31" sc="37" el="31" ec="41">Services\Dto\UpdateMessagingSettings.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ProfanityFilters">
          <declaration><![CDATA[public bool ProfanityFilters]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="43" sc="40" el="43" ec="44">Services\Dto\UpdateMessagingSettings.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="43" sc="45" el="43" ec="49">Services\Dto\UpdateMessagingSettings.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="RecipientLimit">
          <declaration><![CDATA[public int RecipientLimit]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="39" sc="37" el="39" ec="41">Services\Dto\UpdateMessagingSettings.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="39" sc="42" el="39" ec="46">Services\Dto\UpdateMessagingSettings.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="SendEmail">
          <declaration><![CDATA[public bool SendEmail]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="47" sc="33" el="47" ec="37">Services\Dto\UpdateMessagingSettings.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="47" sc="38" el="47" ec="42">Services\Dto\UpdateMessagingSettings.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ThrottlingInterval">
          <declaration><![CDATA[public int ThrottlingInterval]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="37" sc="41" el="37" ec="45">Services\Dto\UpdateMessagingSettings.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="37" sc="46" el="37" ec="50">Services\Dto\UpdateMessagingSettings.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="UpdateOtherSettingsRequest">
      <declaration><![CDATA[public class UpdateOtherSettingsRequest]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public UpdateOtherSettingsRequest()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="CheckUpgrade">
          <declaration><![CDATA[public bool CheckUpgrade]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="31" sc="36" el="31" ec="40">Services\Dto\UpdateOtherSettingsRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="31" sc="41" el="31" ec="45">Services\Dto\UpdateOtherSettingsRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="DnnImprovementProgram">
          <declaration><![CDATA[public bool DnnImprovementProgram]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="33" sc="45" el="33" ec="49">Services\Dto\UpdateOtherSettingsRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="33" sc="50" el="33" ec="54">Services\Dto\UpdateOtherSettingsRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="UpdateProfilePropertyLocalizationRequest">
      <declaration><![CDATA[public class UpdateProfilePropertyLocalizationRequest]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public UpdateProfilePropertyLocalizationRequest()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="CategoryNameString">
          <declaration><![CDATA[public string CategoryNameString]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="47" sc="44" el="47" ec="48">Services\Dto\UpdateProfilePropertyLocalizationRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="47" sc="49" el="47" ec="53">Services\Dto\UpdateProfilePropertyLocalizationRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Language">
          <declaration><![CDATA[public string Language]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="37" sc="34" el="37" ec="38">Services\Dto\UpdateProfilePropertyLocalizationRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="37" sc="39" el="37" ec="43">Services\Dto\UpdateProfilePropertyLocalizationRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="PortalId">
          <declaration><![CDATA[public int? PortalId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="31" sc="32" el="31" ec="36">Services\Dto\UpdateProfilePropertyLocalizationRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="31" sc="37" el="31" ec="41">Services\Dto\UpdateProfilePropertyLocalizationRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="PropertyCategory">
          <declaration><![CDATA[public string PropertyCategory]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="35" sc="42" el="35" ec="46">Services\Dto\UpdateProfilePropertyLocalizationRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="35" sc="47" el="35" ec="51">Services\Dto\UpdateProfilePropertyLocalizationRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="PropertyHelpString">
          <declaration><![CDATA[public string PropertyHelpString]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="41" sc="44" el="41" ec="48">Services\Dto\UpdateProfilePropertyLocalizationRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="41" sc="49" el="41" ec="53">Services\Dto\UpdateProfilePropertyLocalizationRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="PropertyName">
          <declaration><![CDATA[public string PropertyName]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="33" sc="38" el="33" ec="42">Services\Dto\UpdateProfilePropertyLocalizationRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="33" sc="43" el="33" ec="47">Services\Dto\UpdateProfilePropertyLocalizationRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="PropertyNameString">
          <declaration><![CDATA[public string PropertyNameString]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="39" sc="44" el="39" ec="48">Services\Dto\UpdateProfilePropertyLocalizationRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="39" sc="49" el="39" ec="53">Services\Dto\UpdateProfilePropertyLocalizationRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="PropertyRequiredString">
          <declaration><![CDATA[public string PropertyRequiredString]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="43" sc="48" el="43" ec="52">Services\Dto\UpdateProfilePropertyLocalizationRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="43" sc="53" el="43" ec="57">Services\Dto\UpdateProfilePropertyLocalizationRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="PropertyValidationString">
          <declaration><![CDATA[public string PropertyValidationString]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="45" sc="50" el="45" ec="54">Services\Dto\UpdateProfilePropertyLocalizationRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="45" sc="55" el="45" ec="59">Services\Dto\UpdateProfilePropertyLocalizationRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="UpdateProfilePropertyOrdersRequest">
      <declaration><![CDATA[public class UpdateProfilePropertyOrdersRequest]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public UpdateProfilePropertyOrdersRequest()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="PortalId">
          <declaration><![CDATA[public int? PortalId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="31" sc="32" el="31" ec="36">Services\Dto\UpdateProfilePropertyOrdersRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="31" sc="37" el="31" ec="41">Services\Dto\UpdateProfilePropertyOrdersRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Properties">
          <declaration><![CDATA[public UpdateProfilePropertyRequest[] Properties]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="33" sc="60" el="33" ec="64">Services\Dto\UpdateProfilePropertyOrdersRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="33" sc="65" el="33" ec="69">Services\Dto\UpdateProfilePropertyOrdersRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="UpdateProfilePropertyRequest">
      <declaration><![CDATA[public class UpdateProfilePropertyRequest]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public UpdateProfilePropertyRequest()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="DataType">
          <declaration><![CDATA[public int DataType]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="37" sc="31" el="37" ec="35">Services\Dto\UpdateProfilePropertyRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="37" sc="36" el="37" ec="40">Services\Dto\UpdateProfilePropertyRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="DefaultValue">
          <declaration><![CDATA[public string DefaultValue]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="43" sc="38" el="43" ec="42">Services\Dto\UpdateProfilePropertyRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="43" sc="43" el="43" ec="47">Services\Dto\UpdateProfilePropertyRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="DefaultVisibility">
          <declaration><![CDATA[public int DefaultVisibility]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="55" sc="40" el="55" ec="44">Services\Dto\UpdateProfilePropertyRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="55" sc="45" el="55" ec="49">Services\Dto\UpdateProfilePropertyRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Length">
          <declaration><![CDATA[public int Length]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="41" sc="29" el="41" ec="33">Services\Dto\UpdateProfilePropertyRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="41" sc="34" el="41" ec="38">Services\Dto\UpdateProfilePropertyRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="PortalId">
          <declaration><![CDATA[public int? PortalId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="31" sc="32" el="31" ec="36">Services\Dto\UpdateProfilePropertyRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="31" sc="37" el="31" ec="41">Services\Dto\UpdateProfilePropertyRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="PropertyCategory">
          <declaration><![CDATA[public string PropertyCategory]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="39" sc="42" el="39" ec="46">Services\Dto\UpdateProfilePropertyRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="39" sc="47" el="39" ec="51">Services\Dto\UpdateProfilePropertyRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="PropertyDefinitionId">
          <declaration><![CDATA[public int? PropertyDefinitionId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="33" sc="44" el="33" ec="48">Services\Dto\UpdateProfilePropertyRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="33" sc="49" el="33" ec="53">Services\Dto\UpdateProfilePropertyRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="PropertyName">
          <declaration><![CDATA[public string PropertyName]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="35" sc="38" el="35" ec="42">Services\Dto\UpdateProfilePropertyRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="35" sc="43" el="35" ec="47">Services\Dto\UpdateProfilePropertyRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ReadOnly">
          <declaration><![CDATA[public bool ReadOnly]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="49" sc="32" el="49" ec="36">Services\Dto\UpdateProfilePropertyRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="49" sc="37" el="49" ec="41">Services\Dto\UpdateProfilePropertyRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Required">
          <declaration><![CDATA[public bool Required]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="47" sc="32" el="47" ec="36">Services\Dto\UpdateProfilePropertyRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="47" sc="37" el="47" ec="41">Services\Dto\UpdateProfilePropertyRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ValidationExpression">
          <declaration><![CDATA[public string ValidationExpression]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="45" sc="46" el="45" ec="50">Services\Dto\UpdateProfilePropertyRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="45" sc="51" el="45" ec="55">Services\Dto\UpdateProfilePropertyRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ViewOrder">
          <declaration><![CDATA[public int ViewOrder]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="53" sc="32" el="53" ec="36">Services\Dto\UpdateProfilePropertyRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="53" sc="37" el="53" ec="41">Services\Dto\UpdateProfilePropertyRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Visible">
          <declaration><![CDATA[public bool Visible]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="51" sc="31" el="51" ec="35">Services\Dto\UpdateProfilePropertyRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="51" sc="36" el="51" ec="40">Services\Dto\UpdateProfilePropertyRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="UpdateProfileSettingsRequest">
      <declaration><![CDATA[public class UpdateProfileSettingsRequest]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public UpdateProfileSettingsRequest()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="PortalId">
          <declaration><![CDATA[public int? PortalId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="31" sc="32" el="31" ec="36">Services\Dto\UpdateProfileSettingsRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="31" sc="37" el="31" ec="41">Services\Dto\UpdateProfileSettingsRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ProfileDefaultVisibility">
          <declaration><![CDATA[public int ProfileDefaultVisibility]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="37" sc="47" el="37" ec="51">Services\Dto\UpdateProfileSettingsRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="37" sc="52" el="37" ec="56">Services\Dto\UpdateProfileSettingsRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ProfileDisplayVisibility">
          <declaration><![CDATA[public bool ProfileDisplayVisibility]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="39" sc="48" el="39" ec="52">Services\Dto\UpdateProfileSettingsRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="39" sc="53" el="39" ec="57">Services\Dto\UpdateProfileSettingsRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="RedirectOldProfileUrl">
          <declaration><![CDATA[public bool RedirectOldProfileUrl]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="33" sc="45" el="33" ec="49">Services\Dto\UpdateProfileSettingsRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="33" sc="50" el="33" ec="54">Services\Dto\UpdateProfileSettingsRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="VanityUrlPrefix">
          <declaration><![CDATA[public string VanityUrlPrefix]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="35" sc="41" el="35" ec="45">Services\Dto\UpdateProfileSettingsRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="35" sc="46" el="35" ec="50">Services\Dto\UpdateProfileSettingsRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="UpdateSiteAliasRequest">
      <declaration><![CDATA[public class UpdateSiteAliasRequest]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public UpdateSiteAliasRequest()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="BrowserType">
          <declaration><![CDATA[public string BrowserType]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="37" sc="37" el="37" ec="41">Services\Dto\UpdateSiteAliasRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="37" sc="42" el="37" ec="46">Services\Dto\UpdateSiteAliasRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="CultureCode">
          <declaration><![CDATA[public string CultureCode]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="41" sc="37" el="41" ec="41">Services\Dto\UpdateSiteAliasRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="41" sc="42" el="41" ec="46">Services\Dto\UpdateSiteAliasRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="HTTPAlias">
          <declaration><![CDATA[public string HTTPAlias]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="35" sc="35" el="35" ec="39">Services\Dto\UpdateSiteAliasRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="35" sc="40" el="35" ec="44">Services\Dto\UpdateSiteAliasRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="IsPrimary">
          <declaration><![CDATA[public bool IsPrimary]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="43" sc="33" el="43" ec="37">Services\Dto\UpdateSiteAliasRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="43" sc="38" el="43" ec="42">Services\Dto\UpdateSiteAliasRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="PortalAliasID">
          <declaration><![CDATA[public int? PortalAliasID]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="33" sc="37" el="33" ec="41">Services\Dto\UpdateSiteAliasRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="33" sc="42" el="33" ec="46">Services\Dto\UpdateSiteAliasRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="PortalId">
          <declaration><![CDATA[public int? PortalId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="31" sc="32" el="31" ec="36">Services\Dto\UpdateSiteAliasRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="31" sc="37" el="31" ec="41">Services\Dto\UpdateSiteAliasRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Skin">
          <declaration><![CDATA[public string Skin]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="39" sc="30" el="39" ec="34">Services\Dto\UpdateSiteAliasRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="39" sc="35" el="39" ec="39">Services\Dto\UpdateSiteAliasRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="UpdateSiteSettingsRequest">
      <declaration><![CDATA[public class UpdateSiteSettingsRequest]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public UpdateSiteSettingsRequest()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="CultureCode">
          <declaration><![CDATA[public string CultureCode]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="33" sc="37" el="33" ec="41">Services\Dto\UpdateSiteSettingsRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="33" sc="42" el="33" ec="46">Services\Dto\UpdateSiteSettingsRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Description">
          <declaration><![CDATA[public string Description]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="37" sc="37" el="37" ec="41">Services\Dto\UpdateSiteSettingsRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="37" sc="42" el="37" ec="46">Services\Dto\UpdateSiteSettingsRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="FavIcon">
          <declaration><![CDATA[public FileDto FavIcon]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="47" sc="34" el="47" ec="38">Services\Dto\UpdateSiteSettingsRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="47" sc="39" el="47" ec="43">Services\Dto\UpdateSiteSettingsRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="FooterText">
          <declaration><![CDATA[public string FooterText]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="41" sc="36" el="41" ec="40">Services\Dto\UpdateSiteSettingsRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="41" sc="41" el="41" ec="45">Services\Dto\UpdateSiteSettingsRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="IconSet">
          <declaration><![CDATA[public string IconSet]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="49" sc="33" el="49" ec="37">Services\Dto\UpdateSiteSettingsRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="49" sc="38" el="49" ec="42">Services\Dto\UpdateSiteSettingsRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="KeyWords">
          <declaration><![CDATA[public string KeyWords]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="39" sc="34" el="39" ec="38">Services\Dto\UpdateSiteSettingsRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="39" sc="39" el="39" ec="43">Services\Dto\UpdateSiteSettingsRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="LogoFile">
          <declaration><![CDATA[public FileDto LogoFile]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="43" sc="35" el="43" ec="39">Services\Dto\UpdateSiteSettingsRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="43" sc="40" el="43" ec="44">Services\Dto\UpdateSiteSettingsRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="PortalId">
          <declaration><![CDATA[public int? PortalId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="31" sc="32" el="31" ec="36">Services\Dto\UpdateSiteSettingsRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="31" sc="37" el="31" ec="41">Services\Dto\UpdateSiteSettingsRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="PortalName">
          <declaration><![CDATA[public string PortalName]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="35" sc="36" el="35" ec="40">Services\Dto\UpdateSiteSettingsRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="35" sc="41" el="35" ec="45">Services\Dto\UpdateSiteSettingsRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="TimeZone">
          <declaration><![CDATA[public string TimeZone]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="45" sc="34" el="45" ec="38">Services\Dto\UpdateSiteSettingsRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="45" sc="39" el="45" ec="43">Services\Dto\UpdateSiteSettingsRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="UpdateSynonymsGroupRequest">
      <declaration><![CDATA[public class UpdateSynonymsGroupRequest]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public UpdateSynonymsGroupRequest()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="CultureCode">
          <declaration><![CDATA[public string CultureCode]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="35" sc="37" el="35" ec="41">Services\Dto\UpdateSynonymsGroupRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="35" sc="42" el="35" ec="46">Services\Dto\UpdateSynonymsGroupRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="PortalId">
          <declaration><![CDATA[public int? PortalId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="31" sc="32" el="31" ec="36">Services\Dto\UpdateSynonymsGroupRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="31" sc="37" el="31" ec="41">Services\Dto\UpdateSynonymsGroupRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="SynonymsGroupID">
          <declaration><![CDATA[public int? SynonymsGroupID]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="33" sc="39" el="33" ec="43">Services\Dto\UpdateSynonymsGroupRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="33" sc="44" el="33" ec="48">Services\Dto\UpdateSynonymsGroupRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="SynonymsTags">
          <declaration><![CDATA[public string SynonymsTags]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="37" sc="38" el="37" ec="42">Services\Dto\UpdateSynonymsGroupRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="37" sc="43" el="37" ec="47">Services\Dto\UpdateSynonymsGroupRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="UpdateTransaltionsRequest">
      <declaration><![CDATA[public class UpdateTransaltionsRequest]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public UpdateTransaltionsRequest()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="Entries">
          <declaration><![CDATA[public IList<LocalizationEntry> Entries]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="13" sc="51" el="13" ec="55">Services\Dto\UpdateTransaltionsRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="13" sc="56" el="13" ec="60">Services\Dto\UpdateTransaltionsRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Locale">
          <declaration><![CDATA[public string Locale]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="11" sc="32" el="11" ec="36">Services\Dto\UpdateTransaltionsRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="11" sc="37" el="11" ec="41">Services\Dto\UpdateTransaltionsRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Mode">
          <declaration><![CDATA[public string Mode]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="10" sc="30" el="10" ec="34">Services\Dto\UpdateTransaltionsRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="10" sc="35" el="10" ec="39">Services\Dto\UpdateTransaltionsRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="PortalId">
          <declaration><![CDATA[public int? PortalId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="9" sc="32" el="9" ec="36">Services\Dto\UpdateTransaltionsRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="9" sc="37" el="9" ec="41">Services\Dto\UpdateTransaltionsRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ResourceFile">
          <declaration><![CDATA[public string ResourceFile]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="12" sc="38" el="12" ec="42">Services\Dto\UpdateTransaltionsRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="12" sc="43" el="12" ec="47">Services\Dto\UpdateTransaltionsRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="UpdateUrlMappingSettingsRequest">
      <declaration><![CDATA[public class UpdateUrlMappingSettingsRequest]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public UpdateUrlMappingSettingsRequest()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="AutoAddPortalAlias">
          <declaration><![CDATA[public bool AutoAddPortalAlias]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="37" sc="42" el="37" ec="46">Services\Dto\UpdateUrlMappingSettingsRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="37" sc="47" el="37" ec="51">Services\Dto\UpdateUrlMappingSettingsRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="CultureCode">
          <declaration><![CDATA[public string CultureCode]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="33" sc="37" el="33" ec="41">Services\Dto\UpdateUrlMappingSettingsRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="33" sc="42" el="33" ec="46">Services\Dto\UpdateUrlMappingSettingsRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="PortalAliasMapping">
          <declaration><![CDATA[public string PortalAliasMapping]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="35" sc="44" el="35" ec="48">Services\Dto\UpdateUrlMappingSettingsRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="35" sc="49" el="35" ec="53">Services\Dto\UpdateUrlMappingSettingsRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="PortalId">
          <declaration><![CDATA[public int? PortalId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="31" sc="32" el="31" ec="36">Services\Dto\UpdateUrlMappingSettingsRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="31" sc="37" el="31" ec="41">Services\Dto\UpdateUrlMappingSettingsRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
</root>