<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<root file="DotNetNuke.Modules.MobileManagement.dll" version="07.03.02" generated="2017-06-19 12:16:59Z" generationTime="2.121234">
  <namespace name="DotNetNuke.Modules.MobileManagement">
    <class name="RedirectionManagerView">
      <declaration><![CDATA[public class RedirectionManagerView : ModuleView<RedirectionManagerViewModel>, IRedirectionManagerView, IModuleView<RedirectionManagerViewModel>, IModuleViewBase, IView<RedirectionManagerViewModel>, IView, IClientAPICallbackEventHandler]]></declaration>
      <documentation>
        <summary>

 </summary>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public RedirectionManagerView()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="add_RedirectionItemAction">
          <declaration><![CDATA[public void add_RedirectionItemAction(System.EventHandler<System.Web.UI.WebControls.DataGridCommandEventArgs> value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="BindRedirectionList">
          <declaration><![CDATA[private void BindRedirectionList(System.Collections.Generic.IList<IRedirection> redirections)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="124" sc="3" el="127" ec="4">Views\RedirectionManagerView.ascx.cs</location>
            <body hash="66787e50ffcc8779cdb0fb0cfa494986"><![CDATA[{
		    RedirectionsGrid.DataSource = redirections;
			RedirectionsGrid.DataBind();
		}]]></body>
          </codeblock>
        </method>
        <method name="GetEditUrl">
          <declaration><![CDATA[protected string GetEditUrl(string id)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="90" sc="3" el="97" ec="4">Views\RedirectionManagerView.ascx.cs</location>
            <body hash="d97467ecf1c2973fdd44ad0c24c16dea"><![CDATA[{
			var editUrl = ModuleContext.EditUrl("Id", id, "RedirectionSettings");
			if (ModuleContext.PortalSettings.EnablePopUps)
			{
				editUrl = UrlUtils.PopUpUrl(editUrl, this, ModuleContext.PortalSettings, false, false);
			}
			return editUrl;
		}]]></body>
          </codeblock>
        </method>
        <method name="IsSmartPhoneRedirect">
          <declaration><![CDATA[private bool IsSmartPhoneRedirect(IRedirection redirect)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="138" sc="3" el="140" ec="4">Views\RedirectionManagerView.ascx.cs</location>
            <body hash="ba6065e0bba2f281086b0f2c75688bc3"><![CDATA[{
			return redirect.Type == RedirectionType.Other && redirect.MatchRules.Count == 1 && redirect.MatchRules[0].Capability == "IsSmartPhone";
		}]]></body>
          </codeblock>
        </method>
        <method name="IsTrialFiftyOneProvider">
          <declaration><![CDATA[private bool IsTrialFiftyOneProvider()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="131" sc="9" el="135" ec="10">Views\RedirectionManagerView.ascx.cs</location>
            <body hash="30833d6bbe9b72aca83752cb33b23843"><![CDATA[{
            var provider = ProviderConfiguration.GetProviderConfiguration("clientcapability");
            return provider.DefaultProvider == "FiftyOneClientCapabilityProvider" 
                && !ClientCapabilityProvider.Instance().SupportsTabletDetection;
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="36" sc="9" el="66" ec="10">Views\RedirectionManagerView.ascx.cs</location>
            <body hash="5bc7b0195e6963ce8e246a30470bb4fc"><![CDATA[{
            base.OnLoad(e);

            RedirectionsGrid.ItemCommand += RedirectionsListItemCommand;
            RedirectionsGrid.ItemDataBound += RedirectionsListItemDataBound;
            lnkAdd.NavigateUrl = Model.AddUrl;

            if (!IsPostBack)
            {
                var redirectController = new RedirectionController();

                redirectController.PurgeInvalidRedirections(ModuleContext.PortalId);
                Model.Redirections = redirectController.GetRedirectionsByPortal(ModuleContext.PortalId);

                BindRedirectionList(Model.Redirections);
                Localization.LocalizeDataGrid(ref RedirectionsGrid, LocalResourceFile);
                if(Model.ModeType != null)
                {
                    optSimpleAdvanced.SelectedValue = Model.ModeType;
                }
			}

            if (IsTrialFiftyOneProvider())
            {
                var trialMessage = LocalizeString("TrialFiftyOneProvider");
                UI.Skins.Skin.AddModuleMessage(this, trialMessage, ModuleMessage.ModuleMessageType.BlueInfo);
            }

            dvRedirectionsGrid.Visible = (Model.Redirections.Count > 0);
            ClientAPI.RegisterClientVariable(Page, "ActionCallback", ClientAPI.GetCallbackEventReference(this, "[ACTIONTOKEN]", "success", "this", "error"), true);
        }]]></body>
          </codeblock>
        </method>
        <method name="RaiseClientAPICallbackEvent">
          <declaration><![CDATA[public string RaiseClientAPICallbackEvent(string eventArgument)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="145" sc="3" el="161" ec="4">Views\RedirectionManagerView.ascx.cs</location>
            <body hash="0ca55854a88bd58514bb297e69197668"><![CDATA[{
			IDictionary<string, string> arguments = new Dictionary<string, string>();
			foreach (var arg in eventArgument.Split('&'))
			{
				arguments.Add(arg.Split('=')[0], arg.Split('=')[1]);
			}
			switch (arguments["action"])
			{
				case "sort":
					var moveId = Convert.ToInt32(arguments["moveId"]);
					var nextId = Convert.ToInt32(arguments["nextId"]);
			        new RedirectionManagerPresenter(this).SortRedirections(moveId, nextId);
					break;
			}
            
			return string.Empty;
		}]]></body>
          </codeblock>
        </method>
        <method name="RedirectionsListItemCommand">
          <declaration><![CDATA[protected void RedirectionsListItemCommand(object source, System.Web.UI.WebControls.DataGridCommandEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="83" sc="3" el="87" ec="4">Views\RedirectionManagerView.ascx.cs</location>
            <body hash="ccddca69ff1a6f26015b662f494dec9d"><![CDATA[{
            // Perform Item Action
		    RedirectionItemAction(source, e);
            Response.Redirect(DotNetNuke.Common.Globals.NavigateURL(), true);
		}]]></body>
          </codeblock>
        </method>
        <method name="RedirectionsListItemDataBound">
          <declaration><![CDATA[protected void RedirectionsListItemDataBound(object sender, System.Web.UI.WebControls.DataGridItemEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="69" sc="9" el="80" ec="10">Views\RedirectionManagerView.ascx.cs</location>
            <body hash="8be3835d4377fc000b8dd90ae89555ba"><![CDATA[{
            if (e.Item.ItemType == ListItemType.Item || e.Item.ItemType == ListItemType.AlternatingItem || e.Item.ItemType == ListItemType.EditItem)
            {
                var redirection = e.Item.DataItem as IRedirection;                
                e.Item.Attributes.Add("data", redirection.Id.ToString());
             
				if (IsSmartPhoneRedirect(redirection))
				{
					redirection.Type = RedirectionType.SmartPhone;
				}
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="remove_RedirectionItemAction">
          <declaration><![CDATA[public void remove_RedirectionItemAction(System.EventHandler<System.Web.UI.WebControls.DataGridCommandEventArgs> value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="RenderTooltip">
          <declaration><![CDATA[protected string RenderTooltip(string key, string id)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="100" sc="9" el="117" ec="10">Views\RedirectionManagerView.ascx.cs</location>
            <body hash="ced3be65b8c329a52df545550fef48c5"><![CDATA[{
            var redirectionController = new RedirectionController();
            var redirect = redirectionController.GetRedirectionById(ModuleContext.PortalId, int.Parse(id));            
            var tooltip = string.Empty;

            switch (key)
            {
                case "source":
                    var source = (redirect.SourceTabId == -1) ? ModuleContext.PortalAlias.HTTPAlias : TabController.Instance.GetTabsByPortal(ModuleContext.PortalId).First(r => r.Key == redirect.SourceTabId).Value.TabName;
                    tooltip = string.Format(LocalizeString("RedirectTooltipSource.Text"), source);
                    break;
                case "destination":
                    tooltip = string.Format(LocalizeString("RedirectTooltipDestination.Text"), redirectionController.GetRedirectUrlFromRule(redirect, ModuleContext.PortalId, redirect.SourceTabId));
                    break;
            }

            return tooltip;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="dvRedirectionsGrid">
          <declaration><![CDATA[protected System.Web.UI.HtmlControls.HtmlGenericControl dvRedirectionsGrid;]]></declaration>
          <documentation>
            <summary>
 dvRedirectionsGrid control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="lnkAdd">
          <declaration><![CDATA[protected System.Web.UI.WebControls.HyperLink lnkAdd;]]></declaration>
          <documentation>
            <summary>
 lnkAdd control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="optSimpleAdvanced">
          <declaration><![CDATA[protected System.Web.UI.WebControls.RadioButtonList optSimpleAdvanced;]]></declaration>
          <documentation>
            <summary>
 optSimpleAdvanced control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="RedirectionItemAction">
          <declaration><![CDATA[private System.EventHandler<System.Web.UI.WebControls.DataGridCommandEventArgs> RedirectionItemAction;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="RedirectionsGrid">
          <declaration><![CDATA[protected System.Web.UI.WebControls.DataGrid RedirectionsGrid;]]></declaration>
          <documentation>
            <summary>
 RedirectionsGrid control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
        <event name="RedirectionItemAction">
          <declaration><![CDATA[public event System.EventHandler<System.Web.UI.WebControls.DataGridCommandEventArgs> RedirectionItemAction;]]></declaration>
          <documentation>
          </documentation>
        </event>
      </events>
    </class>
    <class name="RedirectionSettingsView">
      <declaration><![CDATA[public class RedirectionSettingsView : ModuleView, IRedirectionSettingsView, IModuleView, IModuleViewBase, IView]]></declaration>
      <documentation>
        <summary>

 </summary>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private string _capability = string.Empty;]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="79" sc="9" el="80" ec="56">Views\RedirectionSettingsView.ascx.cs</location>
            <body hash="06bcb5afcd1ea91ee50b2e6fcabfebc8"><![CDATA[private string _capability = string.Empty;
        private string _capabilityValue = string.Empty;]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="AddCapability">
          <declaration><![CDATA[protected void AddCapability(object sender, System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="117" sc="9" el="133" ec="10">Views\RedirectionSettingsView.ascx.cs</location>
            <body hash="428ea5b6433130b28960612ce35c283c"><![CDATA[{
            if (_capabilityValue.Trim() != string.Empty)
            {
                // Must rebind Capability values due to a telerik in dependant combos, losing initial dependant value on post back.
                BindCapabilityValues(cboCapabilityName.SelectedItem.Text);
                SetCapabilityAndValue();

                var capability = new MatchRule { Capability = _capability, Expression = _capabilityValue };
                var capabilitylist = Capabilities;
                capabilitylist.Add(capability);
                Capabilities = capabilitylist;
                BindRedirectionCapabilties();
                BindCapabilities();
                cboCapabilityName.SelectedIndex = 0;
                BindCapabilityValues(string.Empty);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="BindCapabilities">
          <declaration><![CDATA[private void BindCapabilities()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="278" sc="9" el="284" ec="10">Views\RedirectionSettingsView.ascx.cs</location>
            <body hash="2a2ec71ad751d2c73888801b9397c6cd"><![CDATA[{
            //Bind only capabilities that have not yet been added
			var capabilities = new List<string>(ClientCapabilityProvider.Instance().GetAllClientCapabilityValues().Keys.Where(capability => Capabilities.Where( c => c.Capability == capability).Count() < 1));
            capabilities.Insert(0, LocalizeString("selectCapabilityName"));
            cboCapabilityName.DataSource = capabilities;
            cboCapabilityName.DataBind();
        }]]></body>
          </codeblock>
        </method>
        <method name="BindCapabilityValues">
          <declaration><![CDATA[private void BindCapabilityValues(string capability)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="287" sc="9" el="300" ec="10">Views\RedirectionSettingsView.ascx.cs</location>
            <body hash="25256c887701a4b657a9dcfbb2751e1a"><![CDATA[{
            if (capability != string.Empty)
            {
                var capabillityValues = new List<string>(ClientCapabilityProvider.Instance().GetAllClientCapabilityValues().Where(c => c.Key == capability).First().Value);
                capabillityValues.Sort();
                cboCapabilityValue.DataSource = capabillityValues;
            }
            else
            {
                cboCapabilityValue.DataSource = string.Empty;
                cboCapabilityValue.Text = string.Empty;
            }
            cboCapabilityValue.DataBind();                 
        }]]></body>
          </codeblock>
        </method>
        <method name="BindPortals">
          <declaration><![CDATA[private void BindPortals()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="254" sc="9" el="275" ec="10">Views\RedirectionSettingsView.ascx.cs</location>
            <body hash="63b0959e8e5d27d98fc3d3c93b39ed3c"><![CDATA[{
            // Populating Portals dropdown
            var portals = PortalController.Instance.GetPortals().Cast<PortalInfo>().Where(p => p.PortalID != ModuleContext.PortalId).ToList();
            if (portals.Count > 0)
            {
				cboPortal.Items.Clear();
	            foreach (var portalInfo in portals)
	            {
		            cboPortal.Items.Add(new DnnComboBoxItem(portalInfo.PortalName, portalInfo.PortalID.ToString()));
	            }
            }
            else
            {
                optRedirectTarget.Items[0].Enabled = false;
                if (RedirectId == Null.NullInteger)
                {
                    optRedirectTarget.Items[0].Selected = false;
                    optRedirectTarget.Items[1].Selected = true;
                }
            }

        }]]></body>
          </codeblock>
        </method>
        <method name="BindRedirection">
          <declaration><![CDATA[private void BindRedirection(int redirectId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="177" sc="9" el="233" ec="10">Views\RedirectionSettingsView.ascx.cs</location>
            <body hash="5461d5d3dacc4b257b544aabf054acc4"><![CDATA[{
            // Populating existing redirection settings
            if (redirectId != Null.NullInteger)
            {
                var redirectController = new RedirectionController();
                var redirect = redirectController.GetRedirectionById(ModuleContext.PortalId, redirectId);

                txtRedirectName.Text = redirect.Name;
                chkEnable.Checked = redirect.Enabled;
                chkChildPages.Checked = redirect.IncludeChildTabs;
                var tabs = TabController.Instance.GetTabsByPortal(ModuleContext.PortalId).AsList().Where(IsVisible);
                var tabInfos = tabs as IList<TabInfo> ?? tabs.ToList();
                if (redirect.SourceTabId != -1)
                {
                    optRedirectSource.SelectedValue = "Tab";
                    cboSourcePage.SelectedPage = tabInfos.SingleOrDefault(t => t.TabID == redirect.SourceTabId);
                }
                else
                {
                    optRedirectSource.SelectedValue = "Portal";
                }

				if (IsSmartPhoneRedirect(redirect))
				{
					optRedirectType.SelectedValue = "SmartPhone";
				}
				else
				{
					optRedirectType.SelectedValue = redirect.Type.ToString();
				}

                optRedirectTarget.SelectedValue = redirect.TargetType.ToString();

                //Other, populate Capabilities
                if (redirect.Type == RedirectionType.Other)
                {
                    BindRedirectionCapabilties();
                }

                switch (redirect.TargetType)
                {
                    case TargetType.Portal:
                        if (cboPortal.Items.Count < 1) optRedirectTarget.SelectedValue = "Tab";
                        else
                            cboPortal.Select(redirect.TargetValue.ToString(), false);
                        break;
                    case TargetType.Tab:
                        int redirectTargetInt;
                        if(int.TryParse(redirect.TargetValue.ToString(), out redirectTargetInt))
                            cboTargetPage.SelectedPage = tabInfos.SingleOrDefault(t => t.TabID == redirectTargetInt);
                        break;
                    case TargetType.Url:
                        txtTargetUrl.Text = redirect.TargetValue.ToString();
                        break;
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="BindRedirectionCapabilties">
          <declaration><![CDATA[private void BindRedirectionCapabilties()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="241" sc="9" el="245" ec="10">Views\RedirectionSettingsView.ascx.cs</location>
            <body hash="cee7085a8118f3a60b4ba730e789267b"><![CDATA[{
            dgCapabilityList.DataSource = Capabilities;
            dgCapabilityList.DataBind();
            dgCapabilityList.Visible = (Capabilities.Count > 0);
        }]]></body>
          </codeblock>
        </method>
        <method name="BindSettingControls">
          <declaration><![CDATA[private void BindSettingControls()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="248" sc="9" el="251" ec="10">Views\RedirectionSettingsView.ascx.cs</location>
            <body hash="91bac7d1419935ddd36c78b967f89a5c"><![CDATA[{
            BindPortals();
            BindCapabilities();
        }]]></body>
          </codeblock>
        </method>
        <method name="CapabilitiesItemDataBound">
          <declaration><![CDATA[protected void CapabilitiesItemDataBound(object sender, System.Web.UI.WebControls.DataGridItemEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="153" sc="9" el="159" ec="10">Views\RedirectionSettingsView.ascx.cs</location>
            <body hash="0d7000724dc01ccc70300117bb0bc792"><![CDATA[{
            if (e.Item.ItemType == ListItemType.Item || e.Item.ItemType == ListItemType.AlternatingItem || e.Item.ItemType == ListItemType.EditItem)
            {
                var rule = e.Item.DataItem as IMatchRule;
                e.Item.Attributes.Add("data", rule.Id.ToString());
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="IsSmartPhoneRedirect">
          <declaration><![CDATA[private bool IsSmartPhoneRedirect(IRedirection redirect)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="236" sc="3" el="238" ec="4">Views\RedirectionSettingsView.ascx.cs</location>
            <body hash="e4af391005aaca4c080fd2b69f05db41"><![CDATA[{
			return SupportsSmartPhoneDetection && redirect.Type == RedirectionType.Other && redirect.MatchRules.Count == 1 && redirect.MatchRules[0].Capability == "IsSmartPhone";
		}]]></body>
          </codeblock>
        </method>
        <method name="IsVisible">
          <declaration><![CDATA[private bool IsVisible(TabInfo tab)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="387" sc="3" el="407" ec="4">Views\RedirectionSettingsView.ascx.cs</location>
            <body hash="a0409344618d01a621c5373ebf3d1474"><![CDATA[{
            if (tab == null || tab.TabID == PortalSettings.Current.AdminTabId || tab.TabID == PortalSettings.Current.UserTabId)
            {
                return false;
            }
            
            if(tab.ParentId != Null.NullInteger)
            {
                do
                {
                    if (tab.ParentId == PortalSettings.Current.AdminTabId || tab.ParentId == PortalSettings.Current.UserTabId)
                    {
                        return false;
                    }

                    tab = TabController.Instance.GetTab(tab.ParentId, tab.PortalID, false);
                } while (tab != null && tab.ParentId != Null.NullInteger);
            }

			return true;
		}]]></body>
          </codeblock>
        </method>
        <method name="lnkCancel_OnClick">
          <declaration><![CDATA[private void lnkCancel_OnClick(object sender, System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="441" sc="9" el="450" ec="10">Views\RedirectionSettingsView.ascx.cs</location>
            <body hash="264e8b47f9a0e93d75e8b08c0971d6ee"><![CDATA[{
            try
            {
                Response.Redirect(ModuleContext.NavigateUrl(ModuleContext.TabId, "", true), true);
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="lnkSave_OnClick">
          <declaration><![CDATA[private void lnkSave_OnClick(object sender, System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="414" sc="9" el="438" ec="10">Views\RedirectionSettingsView.ascx.cs</location>
            <body hash="ec6fad7e7d76c287ef65f533e4b59b7e"><![CDATA[{
                     
            var redirectionController = new RedirectionController();
            var name = txtRedirectName.Text;
            int nameCount;
            // Checks for duplicate names   
            if (RedirectId > Null.NullInteger)
            {
                nameCount = redirectionController.GetRedirectionsByPortal(ModuleContext.PortalId).Where(r =>( r.Id != RedirectId && r.Name.ToLower() == name.ToLower())).Count();
            }
            else
            {
                nameCount = redirectionController.GetRedirectionsByPortal(ModuleContext.PortalId).Where(r => r.Name.ToLower() == name.ToLower()).Count();
            }

            if (nameCount < 1)
            {
                SaveRedirection();
                Response.Redirect(Globals.NavigateURL("", "type=RedirectionSettings"), true);
            }
            else
            {
                DotNetNuke.UI.Skins.Skin.AddModuleMessage(this, Localization.GetString("DuplicateNameError.Text", LocalResourceFile), ModuleMessage.ModuleMessageType.RedError);                
            }            
        }]]></body>
          </codeblock>
        </method>
        <method name="LoadCapabilityValues">
          <declaration><![CDATA[protected void LoadCapabilityValues(object source, RadComboBoxItemsRequestedEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="162" sc="9" el="165" ec="10">Views\RedirectionSettingsView.ascx.cs</location>
            <body hash="c359acc0260fb9a36cebed640e0eb8ca"><![CDATA[{
            BindCapabilityValues(e.Text);
            SetCapabilityAndValue();
        }]]></body>
          </codeblock>
        </method>
        <method name="OnCapabilitiesItemCommand">
          <declaration><![CDATA[protected void OnCapabilitiesItemCommand(object source, System.Web.UI.WebControls.DataGridCommandEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="136" sc="9" el="150" ec="10">Views\RedirectionSettingsView.ascx.cs</location>
            <body hash="f5e53e391da6ab2c1455f5404b26e6ff"><![CDATA[{
            switch (e.CommandName)
            {
                case "delete":
                    var capability = Capabilities.Where(c => c.Capability == e.CommandArgument.ToString()).First();
                        var capabilitylist = Capabilities;
                        capabilitylist.Remove(capability);
                        Capabilities = capabilitylist;                        
                        BindRedirectionCapabilties();
                        BindCapabilities();
                        cboCapabilityName.SelectedIndex = 0;
                        BindCapabilityValues(string.Empty);
					break;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="87" sc="9" el="100" ec="10">Views\RedirectionSettingsView.ascx.cs</location>
            <body hash="3fe7ce63a98d1649c2332766d0b2d855"><![CDATA[{
            base.OnInit(e);

            ServicesFramework.Instance.RequestAjaxAntiForgerySupport();


            dgCapabilityList.ItemCommand += OnCapabilitiesItemCommand;
            dgCapabilityList.ItemDataBound += CapabilitiesItemDataBound;
            cboCapabilityValue.ItemsRequested += LoadCapabilityValues;
            cboCapabilityValue.SelectedIndexChanged += SetCapabilityValue;

            lnkSave.Click += lnkSave_OnClick;
            lnkCancel.Click += lnkCancel_OnClick;
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="103" sc="9" el="114" ec="10">Views\RedirectionSettingsView.ascx.cs</location>
            <body hash="d51dc69a03c783f4115891f34fbda9e7"><![CDATA[{
            base.OnLoad(e);

            if (!IsPostBack)
            {
                optRedirectType.Items[1].Enabled = optRedirectType.Items[2].Enabled = ClientCapabilityProvider.Instance().SupportsTabletDetection;
				optRedirectType.Items[3].Enabled = SupportsSmartPhoneDetection;
                BindSettingControls();
                BindRedirection(RedirectId);
            }
            BindRedirectionCapabilties();
        }]]></body>
          </codeblock>
        </method>
        <method name="SaveRedirection">
          <declaration><![CDATA[private void SaveRedirection()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="309" sc="9" el="384" ec="10">Views\RedirectionSettingsView.ascx.cs</location>
            <body hash="418c6ff32243b2106b535ecdf481ed3a"><![CDATA[{
            IRedirection redirection = new Redirection();
            var redirectionController = new RedirectionController();

            if (RedirectId > Null.NullInteger)
            {
                redirection = redirectionController.GetRedirectionById(ModuleContext.PortalId, RedirectId);
            }

            redirection.Name = txtRedirectName.Text;
            redirection.Enabled = chkEnable.Checked;
            redirection.PortalId = ModuleContext.PortalId;
            if (optRedirectSource.SelectedValue == "Tab")
            {
                redirection.SourceTabId = cboSourcePage.SelectedItemValueAsInt;
                redirection.IncludeChildTabs = chkChildPages.Checked;
            }
            else
            {
                redirection.SourceTabId = -1;
                redirection.IncludeChildTabs = false;
            }

            redirection.Type = (RedirectionType)Enum.Parse(typeof(RedirectionType), optRedirectType.SelectedValue);
			if (redirection.Type == RedirectionType.SmartPhone && optRedirectType.SelectedValue != "")//save smart phone value to other type with capability match.
			{
				if (RedirectId > Null.NullInteger)
                {
                    // Delete capabilities that no longer exist in the grid
                    foreach (var rule in redirection.MatchRules)
                    {
                        redirectionController.DeleteRule(ModuleContext.PortalId, redirection.Id, rule.Id);
                    }
                }

				redirection.Type = RedirectionType.Other;
				redirection.MatchRules.Add(new MatchRule(){Capability = "IsSmartPhone", Expression = "True"});
			}
			else if (redirection.Type == RedirectionType.Other)//Other, save new capabilities
            {
                if (RedirectId > Null.NullInteger)
                {
                    // Delete capabilities that no longer exist in the grid
                    foreach (var rule in redirection.MatchRules.Where(rule => Capabilities.All(c => c.Id != rule.Id)))
                    {
                        redirectionController.DeleteRule(ModuleContext.PortalId, redirection.Id, rule.Id);
                    }
                }

                redirection.MatchRules = Capabilities;
            }
            else if (RedirectId > Null.NullInteger && redirection.MatchRules.Count > 0)
            {
                foreach(var rule in redirection.MatchRules)
                {
                    redirectionController.DeleteRule(ModuleContext.PortalId, redirection.Id, rule.Id);
                }
            }

            redirection.TargetType = (TargetType)Enum.Parse(typeof(TargetType), optRedirectTarget.SelectedValue);
            switch (redirection.TargetType)
            {
                case TargetType.Portal:
                    redirection.TargetValue = cboPortal.SelectedItem.Value;
                    break;
                case TargetType.Tab:
                    redirection.TargetValue = cboTargetPage.SelectedItemValueAsInt;
                    break;
                case TargetType.Url:
                    redirection.TargetValue = txtTargetUrl.Text;
                    break;
            }

            // Save the redirect
            redirectionController.Save(redirection);      
        }]]></body>
          </codeblock>
        </method>
        <method name="SetCapabilityAndValue">
          <declaration><![CDATA[private void SetCapabilityAndValue()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="303" sc="9" el="306" ec="10">Views\RedirectionSettingsView.ascx.cs</location>
            <body hash="f51410e54bf57310c22fae7c98bd807a"><![CDATA[{
            if (_capability == string.Empty) _capability = cboCapabilityName.SelectedValue;
            if (_capabilityValue == string.Empty) _capabilityValue = cboCapabilityValue.SelectedValue;
        }]]></body>
          </codeblock>
        </method>
        <method name="SetCapabilityValue">
          <declaration><![CDATA[protected void SetCapabilityValue(object source, RadComboBoxSelectedIndexChangedEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="168" sc="9" el="170" ec="10">Views\RedirectionSettingsView.ascx.cs</location>
            <body hash="d69ff206a1c5b50adb5c3ecc5c956609"><![CDATA[{
            _capabilityValue = e.Text;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_capability">
          <declaration><![CDATA[private string _capability = string.Empty;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_capabilityValue">
          <declaration><![CDATA[private string _capabilityValue = string.Empty;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cboCapabilityName">
          <declaration><![CDATA[protected DnnComboBox cboCapabilityName;]]></declaration>
          <documentation>
            <summary>
 cboCapabilityName control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="cboCapabilityValue">
          <declaration><![CDATA[protected DnnComboBox cboCapabilityValue;]]></declaration>
          <documentation>
            <summary>
 cboCapabilityValue control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="cboPortal">
          <declaration><![CDATA[protected DnnComboBox cboPortal;]]></declaration>
          <documentation>
            <summary>
 cboPortal control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="cboSourcePage">
          <declaration><![CDATA[protected DnnPageDropDownList cboSourcePage;]]></declaration>
          <documentation>
            <summary>
 cboSourcePage control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="cboTargetPage">
          <declaration><![CDATA[protected DnnPageDropDownList cboTargetPage;]]></declaration>
          <documentation>
            <summary>
 cboTargetPage control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="chkChildPages">
          <declaration><![CDATA[protected System.Web.UI.WebControls.CheckBox chkChildPages;]]></declaration>
          <documentation>
            <summary>
 chkChildPages control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="chkEnable">
          <declaration><![CDATA[protected System.Web.UI.WebControls.CheckBox chkEnable;]]></declaration>
          <documentation>
            <summary>
 chkEnable control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="dgCapabilityList">
          <declaration><![CDATA[protected System.Web.UI.WebControls.DataGrid dgCapabilityList;]]></declaration>
          <documentation>
            <summary>
 dgCapabilityList control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="dvCapabilityList">
          <declaration><![CDATA[protected System.Web.UI.HtmlControls.HtmlGenericControl dvCapabilityList;]]></declaration>
          <documentation>
            <summary>
 dvCapabilityList control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="dvOtherTypeSection">
          <declaration><![CDATA[protected System.Web.UI.HtmlControls.HtmlGenericControl dvOtherTypeSection;]]></declaration>
          <documentation>
            <summary>
 dvOtherTypeSection control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="dvSourcePage">
          <declaration><![CDATA[protected System.Web.UI.HtmlControls.HtmlGenericControl dvSourcePage;]]></declaration>
          <documentation>
            <summary>
 dvSourcePage control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="dvTargetPage">
          <declaration><![CDATA[protected System.Web.UI.HtmlControls.HtmlGenericControl dvTargetPage;]]></declaration>
          <documentation>
            <summary>
 dvTargetPage control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="dvTargetPortal">
          <declaration><![CDATA[protected System.Web.UI.HtmlControls.HtmlGenericControl dvTargetPortal;]]></declaration>
          <documentation>
            <summary>
 dvTargetPortal control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="dvTargetUrl">
          <declaration><![CDATA[protected System.Web.UI.HtmlControls.HtmlGenericControl dvTargetUrl;]]></declaration>
          <documentation>
            <summary>
 dvTargetUrl control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="imgAddCapabililty">
          <declaration><![CDATA[protected System.Web.UI.WebControls.ImageButton imgAddCapabililty;]]></declaration>
          <documentation>
            <summary>
 imgAddCapabililty control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="lblCapability">
          <declaration><![CDATA[protected System.Web.UI.WebControls.Label lblCapability;]]></declaration>
          <documentation>
            <summary>
 lblCapability control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="lblCapabilityValue">
          <declaration><![CDATA[protected System.Web.UI.WebControls.Label lblCapabilityValue;]]></declaration>
          <documentation>
            <summary>
 lblCapabilityValue control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="lblRedirect">
          <declaration><![CDATA[protected System.Web.UI.UserControl lblRedirect;]]></declaration>
          <documentation>
            <summary>
 lblRedirect control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="lblRedirectName">
          <declaration><![CDATA[protected System.Web.UI.UserControl lblRedirectName;]]></declaration>
          <documentation>
            <summary>
 lblRedirectName control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="lblRedirectTarget">
          <declaration><![CDATA[protected System.Web.UI.UserControl lblRedirectTarget;]]></declaration>
          <documentation>
            <summary>
 lblRedirectTarget control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="lblRedirectType">
          <declaration><![CDATA[protected System.Web.UI.UserControl lblRedirectType;]]></declaration>
          <documentation>
            <summary>
 lblRedirectType control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="lblTargetUrl">
          <declaration><![CDATA[protected System.Web.UI.UserControl lblTargetUrl;]]></declaration>
          <documentation>
            <summary>
 lblTargetUrl control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="lnkCancel">
          <declaration><![CDATA[protected System.Web.UI.WebControls.LinkButton lnkCancel;]]></declaration>
          <documentation>
            <summary>
 lnkCancel control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="lnkSave">
          <declaration><![CDATA[protected System.Web.UI.WebControls.LinkButton lnkSave;]]></declaration>
          <documentation>
            <summary>
 lnkSave control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="optRedirectSource">
          <declaration><![CDATA[protected System.Web.UI.WebControls.RadioButtonList optRedirectSource;]]></declaration>
          <documentation>
            <summary>
 optRedirectSource control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="optRedirectTarget">
          <declaration><![CDATA[protected System.Web.UI.WebControls.RadioButtonList optRedirectTarget;]]></declaration>
          <documentation>
            <summary>
 optRedirectTarget control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="optRedirectType">
          <declaration><![CDATA[protected System.Web.UI.WebControls.RadioButtonList optRedirectType;]]></declaration>
          <documentation>
            <summary>
 optRedirectType control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="txtRedirectName">
          <declaration><![CDATA[protected System.Web.UI.WebControls.TextBox txtRedirectName;]]></declaration>
          <documentation>
            <summary>
 txtRedirectName control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="txtTargetUrl">
          <declaration><![CDATA[protected System.Web.UI.WebControls.TextBox txtTargetUrl;]]></declaration>
          <documentation>
            <summary>
 txtTargetUrl control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="valTrackingId">
          <declaration><![CDATA[protected System.Web.UI.WebControls.RequiredFieldValidator valTrackingId;]]></declaration>
          <documentation>
            <summary>
 valTrackingId control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
      </fields>
      <properties>
        <property name="Capabilities">
          <declaration><![CDATA[public System.Collections.Generic.IList<IMatchRule> Capabilities]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="58" sc="13" el="64" ec="14">Views\RedirectionSettingsView.ascx.cs</location>
            <body hash="7a2c6dd1b49a1d32c8b9b5bfea9c8e4e"><![CDATA[{
                if (ViewState["capabilities"] == null)
                {
                    ViewState["capabilities"] = RedirectId > Null.NullInteger ? new RedirectionController().GetRedirectionById(ModuleContext.PortalId, RedirectId).MatchRules : new List<IMatchRule>();
                }
                return (List<IMatchRule>)ViewState["capabilities"];
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="66" sc="13" el="68" ec="14">Views\RedirectionSettingsView.ascx.cs</location>
            <body hash="9f93a58c9f64f1a972a425d821474b65"><![CDATA[{
                ViewState["capabilities"] = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="RedirectId">
          <declaration><![CDATA[public int RedirectId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="43" sc="13" el="52" ec="14">Views\RedirectionSettingsView.ascx.cs</location>
            <body hash="96192651b1d441008416d562ce2edc35"><![CDATA[{
                if (Request.QueryString["Id"] != null)
                {
                    return Convert.ToInt32(Request.QueryString["Id"]);
                }
                else
                {
                    return Null.NullInteger;
                }
            }]]></body>
          </codeblock>
        </property>
        <property name="SupportsSmartPhoneDetection">
          <declaration><![CDATA[private bool SupportsSmartPhoneDetection]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="74" sc="7" el="76" ec="8">Views\RedirectionSettingsView.ascx.cs</location>
            <body hash="3e3f68a3bddb34709c9b93991b1e3d4e"><![CDATA[{
			    return ClientCapabilityProvider.Instance().GetAllClientCapabilityValues().ContainsKey("IsSmartPhone");
		    }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="SimpleSettingsView">
      <declaration><![CDATA[public class SimpleSettingsView : ModuleView, ISimpleSettingsView, IModuleView, IModuleViewBase, IView]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public SimpleSettingsView()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="BindSettingControls">
          <declaration><![CDATA[private void BindSettingControls()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="72" sc="9" el="96" ec="10">Views\SimpleSettingsView.ascx.cs</location>
            <body hash="486adc42f5420146266a052aee807664"><![CDATA[{
			// Toggle fields if a redirect already exists for the Portal Home Page
			var defaultRedirect = HomePageRedirectExists();

            // Populating Portals dropdown
            var portals = PortalController.Instance.GetPortals().Cast<PortalInfo>().Where(p => p.PortalID != ModuleContext.PortalId).ToList();
            if (portals.Count > 0)
            {
                cboPortal.DataSource = portals;
                cboPortal.DataTextField = "PortalName";
                cboPortal.DataValueField = "PortalID";
                cboPortal.DataBind();
            }
            else
            {
                optRedirectTarget.Items[0].Enabled = false;
                optRedirectTarget.Items[0].Selected = false;
                optRedirectTarget.Items[1].Selected = true;
            }

            cboSourcePage.Visible = defaultRedirect;
            lblHomePage.Visible = !defaultRedirect;
            lblRedirectName.Visible = defaultRedirect;
            txtRedirectName.Visible = defaultRedirect;
        }]]></body>
          </codeblock>
        </method>
        <method name="HomePageRedirectExists">
          <declaration><![CDATA[private bool HomePageRedirectExists()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="99" sc="9" el="103" ec="10">Views\SimpleSettingsView.ascx.cs</location>
            <body hash="ff68611b80296dda036f24e88f44695e"><![CDATA[{
            var redirectionController = new RedirectionController();
            var homeRedirects = redirectionController.GetRedirectionsByPortal(ModuleContext.PortalId).Where(r => r.SourceTabId == ModuleContext.PortalSettings.HomeTabId);
            return (homeRedirects.Any());
        }]]></body>
          </codeblock>
        </method>
        <method name="lnkCancel_OnClick">
          <declaration><![CDATA[private void lnkCancel_OnClick(object sender, System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="57" sc="9" el="66" ec="10">Views\SimpleSettingsView.ascx.cs</location>
            <body hash="264e8b47f9a0e93d75e8b08c0971d6ee"><![CDATA[{
            try
            {
                Response.Redirect(ModuleContext.NavigateUrl(ModuleContext.TabId, "", true), true);
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="lnkSave_OnClick">
          <declaration><![CDATA[private void lnkSave_OnClick(object sender, System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="41" sc="9" el="54" ec="10">Views\SimpleSettingsView.ascx.cs</location>
            <body hash="e4fb2dd71f5c3aac7754622ed53249bf"><![CDATA[{
            // Checks for duplicate names
            var name = txtRedirectName.Text;
            var nameCount = new RedirectionController().GetRedirectionsByPortal(ModuleContext.PortalId).Count(r => r.Name.ToLower() == name.ToLower());
            if (nameCount < 1)
            {
                SaveRedirection();
                Response.Redirect(Globals.NavigateURL(""), true);
            }
            else
            {
                UI.Skins.Skin.AddModuleMessage(this, Localization.GetString("DuplicateNameError.Text", LocalResourceFile), ModuleMessage.ModuleMessageType.RedError);
            }          
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="25" sc="9" el="29" ec="10">Views\SimpleSettingsView.ascx.cs</location>
            <body hash="c2c7706d33e2cd2a1be3a435afb251c1"><![CDATA[{
            base.OnInit(e);
            lnkCancel.Click += lnkCancel_OnClick;
            lnkSave.Click += lnkSave_OnClick;
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="32" sc="9" el="37" ec="10">Views\SimpleSettingsView.ascx.cs</location>
            <body hash="060af3d9e1ed05c2b0d9eba8a5848ad5"><![CDATA[{
            base.OnLoad(e);
            lblHomePage.Text = TabController.Instance.GetTab(ModuleContext.PortalSettings.HomeTabId, ModuleContext.PortalId, false).TabName;
            
            if (!IsPostBack) BindSettingControls();
        }]]></body>
          </codeblock>
        </method>
        <method name="SaveRedirection">
          <declaration><![CDATA[private void SaveRedirection()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="106" sc="9" el="133" ec="10">Views\SimpleSettingsView.ascx.cs</location>
            <body hash="173116e39dec5f40ee6bd80374b7794f"><![CDATA[{
            var redirection = new Redirection();
            var redirectionController = new RedirectionController();

            redirection.Name = (HomePageRedirectExists()) ? txtRedirectName.Text : Localization.GetString("DefaultRedirectName.Text", LocalResourceFile);
            redirection.Enabled = true;
            redirection.PortalId = ModuleContext.PortalId;
            redirection.SourceTabId = (cboSourcePage.Visible) ? cboSourcePage.SelectedItemValueAsInt : ModuleContext.PortalSettings.HomeTabId;

            redirection.Type = RedirectionType.MobilePhone;
            redirection.TargetType = (TargetType) Enum.Parse(typeof (TargetType), optRedirectTarget.SelectedValue);

            switch (redirection.TargetType)
            {
                case TargetType.Portal:
                    redirection.TargetValue = cboPortal.SelectedItem.Value;
                    break;
                case TargetType.Tab:
                    redirection.TargetValue = cboTargetPage.SelectedItemValueAsInt;
                    break;
                case TargetType.Url:
                    redirection.TargetValue = txtTargetUrl.Text;
                    break;
            }

            // Save the redirect
            redirectionController.Save(redirection);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="cboPortal">
          <declaration><![CDATA[protected DnnComboBox cboPortal;]]></declaration>
          <documentation>
            <summary>
 cboPortal control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="cboSourcePage">
          <declaration><![CDATA[protected DnnPageDropDownList cboSourcePage;]]></declaration>
          <documentation>
            <summary>
 cboSourcePage control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="cboTargetPage">
          <declaration><![CDATA[protected DnnPageDropDownList cboTargetPage;]]></declaration>
          <documentation>
            <summary>
 cboTargetPage control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="dvTargetPage">
          <declaration><![CDATA[protected System.Web.UI.HtmlControls.HtmlGenericControl dvTargetPage;]]></declaration>
          <documentation>
            <summary>
 dvTargetPage control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="dvTargetPortal">
          <declaration><![CDATA[protected System.Web.UI.HtmlControls.HtmlGenericControl dvTargetPortal;]]></declaration>
          <documentation>
            <summary>
 dvTargetPortal control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="dvTargetUrl">
          <declaration><![CDATA[protected System.Web.UI.HtmlControls.HtmlGenericControl dvTargetUrl;]]></declaration>
          <documentation>
            <summary>
 dvTargetUrl control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="lblHomePage">
          <declaration><![CDATA[protected System.Web.UI.WebControls.Label lblHomePage;]]></declaration>
          <documentation>
            <summary>
 lblHomePage control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="lblRedirect">
          <declaration><![CDATA[protected System.Web.UI.UserControl lblRedirect;]]></declaration>
          <documentation>
            <summary>
 lblRedirect control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="lblRedirectName">
          <declaration><![CDATA[protected System.Web.UI.UserControl lblRedirectName;]]></declaration>
          <documentation>
            <summary>
 lblRedirectName control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="lblRedirectTarget">
          <declaration><![CDATA[protected System.Web.UI.UserControl lblRedirectTarget;]]></declaration>
          <documentation>
            <summary>
 lblRedirectTarget control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="lblTargetUrl">
          <declaration><![CDATA[protected System.Web.UI.UserControl lblTargetUrl;]]></declaration>
          <documentation>
            <summary>
 lblTargetUrl control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="lnkCancel">
          <declaration><![CDATA[protected System.Web.UI.WebControls.LinkButton lnkCancel;]]></declaration>
          <documentation>
            <summary>
 lnkCancel control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="lnkSave">
          <declaration><![CDATA[protected System.Web.UI.WebControls.LinkButton lnkSave;]]></declaration>
          <documentation>
            <summary>
 lnkSave control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="optRedirectTarget">
          <declaration><![CDATA[protected System.Web.UI.WebControls.RadioButtonList optRedirectTarget;]]></declaration>
          <documentation>
            <summary>
 optRedirectTarget control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="txtRedirectName">
          <declaration><![CDATA[protected System.Web.UI.WebControls.TextBox txtRedirectName;]]></declaration>
          <documentation>
            <summary>
 txtRedirectName control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="txtTargetUrl">
          <declaration><![CDATA[protected System.Web.UI.WebControls.TextBox txtTargetUrl;]]></declaration>
          <documentation>
            <summary>
 txtTargetUrl control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="valTrackingId">
          <declaration><![CDATA[protected System.Web.UI.WebControls.RequiredFieldValidator valTrackingId;]]></declaration>
          <documentation>
            <summary>
 valTrackingId control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="DotNetNuke.Modules.MobileManagement.Components">
    <class name="MobileManagementController">
      <declaration><![CDATA[public class MobileManagementController : IUpgradeable]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public MobileManagementController()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="RemoveProVersion">
          <declaration><![CDATA[private void RemoveProVersion()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="38" sc="9" el="96" ec="10">Components\MobileManagementController.cs</location>
            <body hash="18a67576e8f804e0c2ee6c0b034297e7"><![CDATA[{
            foreach (PortalInfo portal in PortalController.Instance.GetPortals())
            {
                //Update Site Redirection management page
                var tabId = TabController.GetTabByTabPath(portal.PortalID, "//Admin//SiteRedirectionManagement", Null.NullString);
                TabInfo newTab;
                if(tabId == Null.NullInteger)
                {
                    newTab = Upgrade.AddAdminPage(portal,
                                                 "Site Redirection Management",
                                                 "Site Redirection Management.",
                                                 "~/desktopmodules/MobileManagement/images/MobileManagement_Standard_16x16.png",
                                                 "~/desktopmodules/MobileManagement/images/MobileManagement_Standard_32x32.png",
                                                 true);
                }
                else
                {
                    newTab = TabController.Instance.GetTab(tabId, portal.PortalID, true);
                    newTab.IconFile = "~/desktopmodules/MobileManagement/images/MobileManagement_Standard_16x16.png";
                    newTab.IconFileLarge = "~/desktopmodules/MobileManagement/images/MobileManagement_Standard_32x32.png";
                    TabController.Instance.UpdateTab(newTab);
                }

                //Remove Pro edition module
                int moduleID = Null.NullInteger;
                IDictionary<int, ModuleInfo> modules = ModuleController.Instance.GetTabModules(newTab.TabID);

                if (modules != null)
                {
                    foreach (ModuleInfo m in modules.Values)
                    {
                        if (m.DesktopModule.FriendlyName == "Site Redirection Management")
                        {
                            moduleID = m.ModuleID;
                            break;
                        }
                    }
                }

                if (moduleID != Null.NullInteger)
                {
                    ModuleController.Instance.DeleteTabModule(newTab.TabID, moduleID, false);
                }

                //Add community edition module
                ModuleDefinitionInfo mDef = ModuleDefinitionController.GetModuleDefinitionByFriendlyName("DNN Site Redirection Management");
                if (mDef != null)
                {
                    Upgrade.AddModuleToPage(newTab, mDef.ModuleDefID, "Site Redirection Management", "~/desktopmodules/MobileManagement/images/MobileManagement_Standard_32x32.png", true);
                }
            }

            var package = PackageController.Instance.GetExtensionPackage(Null.NullInteger, p => p.Name == "DotNetNuke.Professional.MobileManagement");
            if(package != null)
            {
                var installer = new Installer(package, Globals.ApplicationMapPath);
                installer.UnInstall(true);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="UpgradeModule">
          <declaration><![CDATA[public string UpgradeModule(string version)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="27" sc="9" el="35" ec="10">Components\MobileManagementController.cs</location>
            <body hash="6e006fefed622b8c3561fe6dbb61ec45"><![CDATA[{
            switch(version)
            {
                case "06.01.05":
                    RemoveProVersion();
                    break;
            }
			return "Success";
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="DotNetNuke.Modules.MobileManagement.Presenters">
    <class name="RedirectionManagerPresenter">
      <declaration><![CDATA[public class RedirectionManagerPresenter : ModulePresenter<IRedirectionManagerView, RedirectionManagerViewModel>]]></declaration>
      <documentation>
        <summary>

 </summary>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public RedirectionManagerPresenter(IRedirectionManagerView view) : this(view, new RedirectionController())]]></declaration>
          <documentation>
            <summary>
 presenter constructor with view
 </summary>
 <param name="view">the view.</param></documentation>
          <codeblock>
            <location sl="29" sc="3" el="32" ec="4">Presenters\RedirectionManagerPresenter.cs</location>
            <body hash="fb67c1dd6f19e267c1de8f5a48d6a34b"><![CDATA[public RedirectionManagerPresenter(IRedirectionManagerView view) : this(view, new RedirectionController())
		{
			
		}]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[public RedirectionManagerPresenter(IRedirectionManagerView view, IRedirectionController controller) : base(view)]]></declaration>
          <documentation>
            <summary>
 presenter constructor with view and the business controller.
 </summary>
 <param name="view">the view.</param>
 <param name="controller">the redirection business controller.</param></documentation>
          <codeblock>
            <location sl="38" sc="9" el="42" ec="10">Presenters\RedirectionManagerPresenter.cs</location>
            <body hash="e5bdae96039ab4eef34d4b973393c059"><![CDATA[public RedirectionManagerPresenter(IRedirectionManagerView view, IRedirectionController controller) : base(view)
        {
			_redirectionController = controller;
            View.RedirectionItemAction += RedirectionItemAction;
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="45" sc="9" el="56" ec="10">Presenters\RedirectionManagerPresenter.cs</location>
            <body hash="2b52e99f9bbd027ebcb7ad1225fe17ad"><![CDATA[{
			base.OnLoad();

            // Generate the Add redirect URL
            var editUrl = ModuleContext.EditUrl("{0}");
            View.Model.AddUrl = ModuleContext.PortalSettings.EnablePopUps ? UrlUtils.PopUpUrl(editUrl, null, ModuleContext.PortalSettings, false, false) : editUrl;

            View.Model.ModeType = Request.QueryString["type"];

            // Load Redirects            
            View.Model.Redirections = _redirectionController.GetRedirectionsByPortal(ModuleContext.PortalId);
        }]]></body>
          </codeblock>
        </method>
        <method name="RedirectionItemAction">
          <declaration><![CDATA[public void RedirectionItemAction(object sender, System.Web.UI.WebControls.DataGridCommandEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="59" sc="9" el="72" ec="10">Presenters\RedirectionManagerPresenter.cs</location>
            <body hash="df5eb1859a9ae467ed65ececb8af7062"><![CDATA[{
            var id = Convert.ToInt32(e.CommandArgument);
            switch (e.CommandName)
            {
                case "delete":
                    _redirectionController.Delete(ModuleContext.PortalId, id);                    
                    break;
                case "enable":
                    var redirection = _redirectionController.GetRedirectionById(ModuleContext.PortalId, id);
                    redirection.Enabled = !redirection.Enabled;
                    _redirectionController.Save(redirection);
                    break;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="SortRedirections">
          <declaration><![CDATA[public string SortRedirections(int moveRedirectionId, int nextRedirectionId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="75" sc="9" el="121" ec="10">Presenters\RedirectionManagerPresenter.cs</location>
            <body hash="15bcfeef8f4f696983f47201be70339f"><![CDATA[{
            var moveRedirection = _redirectionController.GetRedirectionById(ModuleContext.PortalId, moveRedirectionId);
            var nextRedirection = _redirectionController.GetRedirectionById(ModuleContext.PortalId, nextRedirectionId);
            var allItems = _redirectionController.GetRedirectionsByPortal(ModuleContext.PortalId);

            if (nextRedirectionId > 0)
            {
                if (nextRedirection.SortOrder > moveRedirection.SortOrder)
                {
                    var effectItems = allItems.Where(r => r.SortOrder > moveRedirection.SortOrder && r.SortOrder < nextRedirection.SortOrder).ToList();
                    effectItems.ForEach(r =>
                    {
                        r.SortOrder--;
                        _redirectionController.Save(r);
                    });

                    moveRedirection.SortOrder = nextRedirection.SortOrder - 1;
                    _redirectionController.Save(moveRedirection);
                }
                else
                {
                    int nextOrder = nextRedirection.SortOrder;
                    var effectItems = allItems.Where(r => r.SortOrder >= nextRedirection.SortOrder && r.SortOrder < moveRedirection.SortOrder).ToList();
                    effectItems.ForEach(r =>
                    {
                        r.SortOrder++;
                        _redirectionController.Save(r);
                    });

                    moveRedirection.SortOrder = nextOrder;
                    _redirectionController.Save(moveRedirection);
                }
            }
            else
            {
                var effectItems = allItems.Where(r => r.SortOrder > moveRedirection.SortOrder).ToList();
                effectItems.ForEach(r =>
                {
                    r.SortOrder--;
                    _redirectionController.Save(r);
                });

                moveRedirection.SortOrder = allItems.Count;
                _redirectionController.Save(moveRedirection);
            }
            return string.Empty;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_redirectionController">
          <declaration><![CDATA[private readonly IRedirectionController _redirectionController;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="RedirectionSettingsPresenter">
      <declaration><![CDATA[public class RedirectionSettingsPresenter : ModulePresenter<IRedirectionSettingsView>]]></declaration>
      <documentation>
        <summary>

 </summary>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public RedirectionSettingsPresenter(IRedirectionSettingsView view) : base(view)]]></declaration>
          <documentation>
            <summary>

 </summary>
 <param name="view"></param></documentation>
          <codeblock>
            <location sl="22" sc="9" el="25" ec="10">Presenters\RedirectionSettingsPresenter.cs</location>
            <body hash="19b2d971656f853d3cb3934fc4ef2df4"><![CDATA[public RedirectionSettingsPresenter(IRedirectionSettingsView view) : base(view)
        {
            Initialize();
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="Initialize">
          <declaration><![CDATA[private void Initialize()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="28" sc="9" el="29" ec="10">Presenters\RedirectionSettingsPresenter.cs</location>
            <body hash="539fa760ca172337a931519768c64187"><![CDATA[{
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="32" sc="9" el="34" ec="10">Presenters\RedirectionSettingsPresenter.cs</location>
            <body hash="4a8f06184b6087940b8e4519251d0924"><![CDATA[{
            
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="SimpleSettingsPresenter">
      <declaration><![CDATA[public class SimpleSettingsPresenter : ModulePresenter<ISimpleSettingsView>]]></declaration>
      <documentation>
        <summary>

 </summary>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public SimpleSettingsPresenter(ISimpleSettingsView view) : base(view)]]></declaration>
          <documentation>
            <summary>

 </summary>
 <param name="view"></param></documentation>
          <codeblock>
            <location sl="22" sc="9" el="25" ec="10">Presenters\SimpleSettingsPresenter.cs</location>
            <body hash="3f835a3db948f82c7301c9830d18ac6a"><![CDATA[public SimpleSettingsPresenter(ISimpleSettingsView view) : base(view)
        {
            Initialize();
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="Initialize">
          <declaration><![CDATA[private void Initialize()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="28" sc="9" el="29" ec="10">Presenters\SimpleSettingsPresenter.cs</location>
            <body hash="539fa760ca172337a931519768c64187"><![CDATA[{
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="32" sc="9" el="34" ec="10">Presenters\SimpleSettingsPresenter.cs</location>
            <body hash="4a8f06184b6087940b8e4519251d0924"><![CDATA[{
            
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="DotNetNuke.Modules.MobileManagement.ViewModels">
    <class name="RedirectionManagerViewModel">
      <declaration><![CDATA[public class RedirectionManagerViewModel]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public RedirectionManagerViewModel()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="AddUrl">
          <declaration><![CDATA[public string AddUrl]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ModeType">
          <declaration><![CDATA[public string ModeType]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Redirections">
          <declaration><![CDATA[public System.Collections.Generic.IList<IRedirection> Redirections]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="DotNetNuke.Modules.MobileManagement.Views">
    <class name="IRedirectionManagerView">
      <declaration><![CDATA[public interface IRedirectionManagerView : IModuleView<RedirectionManagerViewModel>, IModuleViewBase, IView<RedirectionManagerViewModel>, IView]]></declaration>
      <documentation>
        <summary>

 </summary>
      </documentation>
      <constructors>
      </constructors>
      <methods>
        <method name="add_RedirectionItemAction">
          <declaration><![CDATA[void add_RedirectionItemAction(System.EventHandler<System.Web.UI.WebControls.DataGridCommandEventArgs> value);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="remove_RedirectionItemAction">
          <declaration><![CDATA[void remove_RedirectionItemAction(System.EventHandler<System.Web.UI.WebControls.DataGridCommandEventArgs> value);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
        <event name="RedirectionItemAction">
          <declaration><![CDATA[event System.EventHandler<System.Web.UI.WebControls.DataGridCommandEventArgs> RedirectionItemAction;]]></declaration>
          <documentation>
          </documentation>
        </event>
      </events>
    </class>
    <class name="IRedirectionSettingsView">
      <declaration><![CDATA[public interface IRedirectionSettingsView : IModuleView, IModuleViewBase, IView]]></declaration>
      <documentation>
        <summary>

 </summary>
      </documentation>
      <constructors>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="ISimpleSettingsView">
      <declaration><![CDATA[public interface ISimpleSettingsView : IModuleView, IModuleViewBase, IView]]></declaration>
      <documentation>
        <summary>

 </summary>
      </documentation>
      <constructors>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
</root>