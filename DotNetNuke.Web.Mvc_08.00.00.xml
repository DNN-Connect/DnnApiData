<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<root file="DotNetNuke.Web.Mvc.dll" version="08.00.00" generated="2017-06-19 22:11:42Z" generationTime="6.7098661">
  <namespace name="DotNetNuke.Web.Mvc">
    <class name="MvcHostControl">
      <declaration><![CDATA[public class MvcHostControl : ModuleControlBase, IActionable]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public MvcHostControl()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="44" sc="9" el="47" ec="10">MvcHostControl.cs</location>
            <body hash="67fc42af769d97876d5dcbd221573916"><![CDATA[public MvcHostControl()
        {
            _controlKey = String.Empty;
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[public MvcHostControl(string controlKey)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="49" sc="9" el="52" ec="10">MvcHostControl.cs</location>
            <body hash="38facce9cb734820a9e76f5e36be6843"><![CDATA[public MvcHostControl(string controlKey)
        {
            _controlKey = controlKey;
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="GetModuleApplication">
          <declaration><![CDATA[private ModuleApplication GetModuleApplication(DesktopModuleInfo desktopModule, RouteData defaultRouteData)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="55" sc="9" el="93" ec="10">MvcHostControl.cs</location>
            <body hash="cca394e0cbd2fd0ec121564a16d12de4"><![CDATA[{

            ModuleApplication moduleApplication = null;

            //Check if the MVC Module overrides the base ModuleApplication class.
            var businessControllerClass = desktopModule.BusinessControllerClass;
            if (!String.IsNullOrEmpty(businessControllerClass))
            {
                var moduleApplicationType = Reflection.CreateType(businessControllerClass);
                if (moduleApplicationType != null)
                {
                    moduleApplication = Reflection.CreateInstance(moduleApplicationType) as ModuleApplication;
                    if (moduleApplication != null)
                    {
                        defaultRouteData.Values["controller"] = moduleApplication.DefaultControllerName;
                        defaultRouteData.Values["action"] = moduleApplication.DefaultActionName;
                        defaultRouteData.DataTokens["namespaces"] = moduleApplication.DefaultNamespaces;
                    }
                }
            }

            if (moduleApplication == null)
            {
                var defaultControllerName = (string)defaultRouteData.Values["controller"];
                var defaultActionName = (string)defaultRouteData.Values["action"];
                var defaultNamespaces = (string[])defaultRouteData.DataTokens["namespaces"];

                moduleApplication = new ModuleApplication
                                            {
                                                DefaultActionName = defaultControllerName,
                                                DefaultControllerName = defaultActionName,
                                                DefaultNamespaces = defaultNamespaces,
                                                ModuleName = desktopModule.ModuleName,
                                                FolderPath = desktopModule.FolderName
                                            };
            }

            return moduleApplication;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetModuleExecutionEngine">
          <declaration><![CDATA[private IModuleExecutionEngine GetModuleExecutionEngine()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="96" sc="9" el="106" ec="10">MvcHostControl.cs</location>
            <body hash="4febe1d9ea972c1630a95bb61b6da865"><![CDATA[{
            var moduleExecutionEngine = ComponentFactory.GetComponent<IModuleExecutionEngine>();

            if (moduleExecutionEngine == null)
            {
                moduleExecutionEngine = new ModuleExecutionEngine();
                ComponentFactory.RegisterComponentInstance<IModuleExecutionEngine>(moduleExecutionEngine);
            }

            return moduleExecutionEngine;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetModuleRequestContext">
          <declaration><![CDATA[private ModuleRequestContext GetModuleRequestContext(HttpContextBase httpContext)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="109" sc="9" el="149" ec="10">MvcHostControl.cs</location>
            <body hash="61fdd633d080128bd293cde8e2fe2d5e"><![CDATA[{
            var module = ModuleContext.Configuration;

            //TODO DesktopModuleControllerAdapter usage is temporary in order to make method testable
            var desktopModule = DesktopModuleControllerAdapter.Instance.GetDesktopModule(module.DesktopModuleID, module.PortalID);
            var defaultControl = ModuleControlControllerAdapter.Instance.GetModuleControlByControlKey("", module.ModuleDefID);

            var defaultRouteData = ModuleRoutingProvider.Instance().GetRouteData(null, defaultControl);

            var moduleApplication = GetModuleApplication(desktopModule, defaultRouteData);

            RouteData routeData;

            if (String.IsNullOrEmpty(_controlKey))
            {
                _controlKey = httpContext.Request.QueryString.GetValueOrDefault("ctl", String.Empty);
            }

            var moduleId = httpContext.Request.QueryString.GetValueOrDefault("moduleId", -1);
            if (moduleId != ModuleContext.ModuleId && String.IsNullOrEmpty(_controlKey))
            {
                //Set default routeData for module that is not the "selected" module
                routeData = defaultRouteData;
            }
            else
            {
                var control = ModuleControlControllerAdapter.Instance.GetModuleControlByControlKey(_controlKey, module.ModuleDefID);
                routeData = ModuleRoutingProvider.Instance().GetRouteData(httpContext, control);
            }

            var moduleRequestContext = new ModuleRequestContext
                                            {
                                                DnnPage = Page,
                                                HttpContext = httpContext,
                                                ModuleContext = ModuleContext,
                                                ModuleApplication = moduleApplication,
                                                RouteData = routeData
                                            };

            return moduleRequestContext;
        }]]></body>
          </codeblock>
        </method>
        <method name="LoadActions">
          <declaration><![CDATA[private ModuleActionCollection LoadActions(ModuleRequestResult result)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="152" sc="9" el="165" ec="10">MvcHostControl.cs</location>
            <body hash="984e5b70a2d1a1534f2e2d4577cc5490"><![CDATA[{
            var actions = new ModuleActionCollection();

            if (result.ModuleActions != null)
            {
                foreach (ModuleAction action in result.ModuleActions)
                {
                    action.ID = ModuleContext.GetNextActionID();
                    actions.Add(action);
                }
            }

            return actions;
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="170" sc="9" el="190" ec="10">MvcHostControl.cs</location>
            <body hash="e05427bdf5e0c3fa7fbebd092959eedb"><![CDATA[{
            base.OnInit(e);

            try
            {
                HttpContextBase httpContext = new HttpContextWrapper(HttpContext.Current);

                var moduleExecutionEngine = GetModuleExecutionEngine();

                _result = moduleExecutionEngine.ExecuteModule(GetModuleRequestContext(httpContext));

                ModuleActions = LoadActions(_result);

                httpContext.SetModuleRequestResult(_result);
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }

        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="193" sc="9" el="207" ec="10">MvcHostControl.cs</location>
            <body hash="7c99baba22cf97fcc744f70cfd458fa8"><![CDATA[{
            try
            {
                if (_result != null)
                {
                    Controls.Add(new LiteralControl(RenderModule(_result).ToString()));
                }
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }

            base.OnLoad(e);
        }]]></body>
          </codeblock>
        </method>
        <method name="RenderModule">
          <declaration><![CDATA[private MvcHtmlString RenderModule(ModuleRequestResult moduleResult)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="210" sc="9" el="223" ec="10">MvcHostControl.cs</location>
            <body hash="b52e70ac1bacd8bfe422ebd39f74107e"><![CDATA[{
            MvcHtmlString moduleOutput;

            using (var writer = new StringWriter(CultureInfo.CurrentCulture))
            {
                var moduleExecutionEngine = ComponentFactory.GetComponent<IModuleExecutionEngine>();

                moduleExecutionEngine.ExecuteModuleResult(moduleResult, writer);

                moduleOutput = MvcHtmlString.Create(writer.ToString());
            }

            return moduleOutput;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_controlKey">
          <declaration><![CDATA[private string _controlKey;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_result">
          <declaration><![CDATA[private ModuleRequestResult _result;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="ModuleActions">
          <declaration><![CDATA[public ModuleActionCollection ModuleActions]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="167" sc="55" el="167" ec="59">MvcHostControl.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="167" sc="60" el="167" ec="72">MvcHostControl.cs</location>
            <body hash="5dbe2cc086ebbf5db6b03610487cca4c"><![CDATA[private set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="MvcHttpModule">
      <declaration><![CDATA[public class MvcHttpModule : IHttpModule]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public MvcHttpModule()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="Dispose">
          <declaration><![CDATA[public void Dispose()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="47" sc="9" el="48" ec="10">MvcHttpModule.cs</location>
            <body hash="539fa760ca172337a931519768c64187"><![CDATA[{
        }]]></body>
          </codeblock>
        </method>
        <method name="Init">
          <declaration><![CDATA[public void Init(HttpApplication context)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="38" sc="9" el="44" ec="10">MvcHttpModule.cs</location>
            <body hash="66daef3148bb15f3b881b8777325a409"><![CDATA[{
            ComponentFactory.RegisterComponentInstance<IModuleExecutionEngine>(new ModuleExecutionEngine());

            ViewEngines.Engines.Clear();
            ViewEngines.Engines.Add(new ModuleDelegatingViewEngine());
            ViewEngines.Engines.Add(new RazorViewEngine());
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="MvcModuleControlFactory">
      <declaration><![CDATA[public class MvcModuleControlFactory : IModuleControlFactory]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public MvcModuleControlFactory()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="CreateControl">
          <declaration><![CDATA[public Control CreateControl(TemplateControl containerControl, string controlKey, string controlSrc)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="28" sc="9" el="30" ec="10">MvcModuleControlFactory.cs</location>
            <body hash="375a35e383de1052d43cfd978485d95b"><![CDATA[{
            return new MvcHostControl(controlKey);
        }]]></body>
          </codeblock>
        </method>
        <method name="CreateModuleControl">
          <declaration><![CDATA[public Control CreateModuleControl(TemplateControl containerControl, ModuleInfo moduleConfiguration)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="33" sc="9" el="35" ec="10">MvcModuleControlFactory.cs</location>
            <body hash="4482ac768cb3cb93473a173eb8adf804"><![CDATA[{
            return new MvcHostControl();
        }]]></body>
          </codeblock>
        </method>
        <method name="CreateSettingsControl">
          <declaration><![CDATA[public Control CreateSettingsControl(TemplateControl containerControl, ModuleInfo moduleConfiguration, string controlSrc)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="38" sc="9" el="40" ec="10">MvcModuleControlFactory.cs</location>
            <body hash="7119933840ed88c129e2b1b2fcf513cc"><![CDATA[{
            return new MvcSettingsControl();
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="MvcSettingsControl">
      <declaration><![CDATA[public class MvcSettingsControl : MvcHostControl, ISettingsControl, IModuleControl]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public MvcSettingsControl() : base("Settings")]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="25" sc="39" el="28" ec="10">MvcSettingsControl.cs</location>
            <body hash="1dbdc7de20cff3637aa8303a2f702cfc"><![CDATA[base("Settings")
        {
            
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="LoadSettings">
          <declaration><![CDATA[public void LoadSettings()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="31" sc="9" el="32" ec="10">MvcSettingsControl.cs</location>
            <body hash="539fa760ca172337a931519768c64187"><![CDATA[{
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateSettings">
          <declaration><![CDATA[public void UpdateSettings()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="35" sc="9" el="36" ec="10">MvcSettingsControl.cs</location>
            <body hash="539fa760ca172337a931519768c64187"><![CDATA[{
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="DotNetNuke.Web.Mvc.Common">
    <class name="AntiForgery">
      <declaration><![CDATA[public class AntiForgery : ServiceLocator<IAntiForgery, AntiForgery>]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public AntiForgery()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="GetFactory">
          <declaration><![CDATA[protected override Func<IAntiForgery> GetFactory()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="9" sc="9" el="11" ec="10">Common\AntiForgery.cs</location>
            <body hash="f995120301e33212a80bdf3cffd0baa9"><![CDATA[{
            return () => new AntiForgeryImpl();
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="AntiForgeryImpl">
      <declaration><![CDATA[internal class AntiForgeryImpl : IAntiForgery]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public AntiForgeryImpl()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="Validate">
          <declaration><![CDATA[public void Validate(string cookieToken, string headerToken)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="7" sc="9" el="9" ec="10">Common\AntiForgeryImpl.cs</location>
            <body hash="5a83e6d322881db6fdea0a9b19467f29"><![CDATA[{
            System.Web.Helpers.AntiForgery.Validate(cookieToken, headerToken);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="CookieName">
          <declaration><![CDATA[public string CookieName]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DesktopModuleControllerAdapter">
      <declaration><![CDATA[public class DesktopModuleControllerAdapter : ServiceLocator<IDesktopModuleController, DesktopModuleControllerAdapter>, IDesktopModuleController]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DesktopModuleControllerAdapter()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="GetDesktopModule">
          <declaration><![CDATA[public DesktopModuleInfo GetDesktopModule(int desktopModuleId, int portalId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="36" sc="9" el="38" ec="10">Common\DesktopModuleControllerAdapter.cs</location>
            <body hash="15f8c22977204b561f5069ed2d837223"><![CDATA[{
            return Entities.Modules.DesktopModuleController.GetDesktopModule(desktopModuleId, portalId);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetFactory">
          <declaration><![CDATA[protected override Func<IDesktopModuleController> GetFactory()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="31" sc="9" el="33" ec="10">Common\DesktopModuleControllerAdapter.cs</location>
            <body hash="89ed39c0e9abfd5db8c9b0993ace105a"><![CDATA[{
            return () => new DesktopModuleControllerAdapter();
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="IAntiForgery">
      <declaration><![CDATA[public interface IAntiForgery]]></declaration>
      <documentation>
      </documentation>
      <constructors>
      </constructors>
      <methods>
        <method name="Validate">
          <declaration><![CDATA[void Validate(string cookieToken, string headerToken);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="CookieName">
          <declaration><![CDATA[string CookieName]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="IDesktopModuleController">
      <declaration><![CDATA[public interface IDesktopModuleController]]></declaration>
      <documentation>
      </documentation>
      <constructors>
      </constructors>
      <methods>
        <method name="GetDesktopModule">
          <declaration><![CDATA[DesktopModuleInfo GetDesktopModule(int desktopModuleId, int portalId);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="IModuleControlController">
      <declaration><![CDATA[public interface IModuleControlController]]></declaration>
      <documentation>
      </documentation>
      <constructors>
      </constructors>
      <methods>
        <method name="GetModuleControlByControlKey">
          <declaration><![CDATA[ModuleControlInfo GetModuleControlByControlKey(string controlKey, int moduleDefID);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="ModuleControlControllerAdapter">
      <declaration><![CDATA[public class ModuleControlControllerAdapter : ServiceLocator<IModuleControlController, ModuleControlControllerAdapter>, IModuleControlController]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public ModuleControlControllerAdapter()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="GetFactory">
          <declaration><![CDATA[protected override Func<IModuleControlController> GetFactory()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="35" sc="9" el="37" ec="10">Common\ModuleControlControllerAdapter.cs</location>
            <body hash="7dc6d10cad463508a172e3330f8f634f"><![CDATA[{
            return () => new ModuleControlControllerAdapter();
        }]]></body>
          </codeblock>
        </method>
        <method name="GetModuleControlByControlKey">
          <declaration><![CDATA[public ModuleControlInfo GetModuleControlByControlKey(string controlKey, int moduleDefID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="40" sc="9" el="42" ec="10">Common\ModuleControlControllerAdapter.cs</location>
            <body hash="cd4b9f52ae40335d13e17187b5ffb970"><![CDATA[{
            return ModuleControlController.GetModuleControlByControlKey(controlKey, moduleDefID);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="PropertyHelper">
      <declaration><![CDATA[internal class PropertyHelper]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public PropertyHelper(PropertyInfo property)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="38" sc="9" el="44" ec="10">Common\PropertyHelper.cs</location>
            <body hash="efa8e8a37b4936baf6d0538135ea15d9"><![CDATA[public PropertyHelper(PropertyInfo property)
        {
            Requires.NotNull("property", property);

            Name = property.Name;
            _valueGetter = MakeFastPropertyGetter(property);
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".cctor">
          <declaration><![CDATA[static PropertyHelper()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="33" sc="9" el="35" ec="147">Common\PropertyHelper.cs</location>
            <body hash="411d0d5d95a2d6326edf4da33f30c964"><![CDATA[private static readonly MethodInfo CallPropertyGetterByReferenceOpenGenericMethod = typeof(PropertyHelper).GetMethod("CallPropertyGetterByReference", BindingFlags.NonPublic | BindingFlags.Static);
        private static readonly MethodInfo CallPropertyGetterOpenGenericMethod = typeof(PropertyHelper).GetMethod("CallPropertyGetter", BindingFlags.NonPublic | BindingFlags.Static);
        private static readonly ConcurrentDictionary<Type, PropertyHelper[]> ReflectionCache = new ConcurrentDictionary<Type, PropertyHelper[]>();]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="CallPropertyGetter">
          <declaration><![CDATA[private static object CallPropertyGetter<TDeclaringType, TValue>(Func<TDeclaringType, TValue> getter, object @this)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="52" sc="9" el="54" ec="10">Common\PropertyHelper.cs</location>
            <body hash="0e22f0bc445436f0f5fa6aa7d411cd66"><![CDATA[{
            return getter((TDeclaringType)@this);
        }]]></body>
          </codeblock>
        </method>
        <method name="CallPropertyGetterByReference">
          <declaration><![CDATA[private static object CallPropertyGetterByReference<TDeclaringType, TValue>(PropertyHelper.ByRefFunc<TDeclaringType, TValue> getter, object @this)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="57" sc="9" el="60" ec="10">Common\PropertyHelper.cs</location>
            <body hash="a68e98da41049c1d6037e1515ad3857f"><![CDATA[{
            TDeclaringType unboxed = (TDeclaringType)@this;
            return getter(ref unboxed);
        }]]></body>
          </codeblock>
        </method>
        <method name="CreateInstance">
          <declaration><![CDATA[private static PropertyHelper CreateInstance(PropertyInfo property)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="63" sc="9" el="65" ec="10">Common\PropertyHelper.cs</location>
            <body hash="c1aae8bf819d179e76cea79a883411ca"><![CDATA[{
            return new PropertyHelper(property);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetProperties">
          <declaration><![CDATA[public static PropertyHelper[] GetProperties(object instance)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="73" sc="9" el="75" ec="10">Common\PropertyHelper.cs</location>
            <body hash="ba6b3f9f902284e51922d945aa0a7266"><![CDATA[{
            return GetProperties(instance, CreateInstance, ReflectionCache);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetProperties">
          <declaration><![CDATA[protected static PropertyHelper[] GetProperties(object instance, Func<PropertyInfo, PropertyHelper> createPropertyHelper, ConcurrentDictionary<Type, PropertyHelper[]> cache)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="80" sc="9" el="108" ec="10">Common\PropertyHelper.cs</location>
            <body hash="973bece4fa8ac6d6f4e9dcb8f4365d6b"><![CDATA[{
            // Using an array rather than IEnumerable, as this will be called on the hot path numerous times.
            PropertyHelper[] helpers;

            Type type = instance.GetType();

            if (!cache.TryGetValue(type, out helpers))
            {
                // We avoid loading indexed properties using the where statement.
                // Indexed properties are not useful (or valid) for grabbing properties off an anonymous object.
                IEnumerable<PropertyInfo> properties = type.GetProperties(BindingFlags.Public | BindingFlags.Instance)
                                                           .Where(prop => prop.GetIndexParameters().Length == 0 &&
                                                                          prop.GetMethod != null);

                var newHelpers = new List<PropertyHelper>();

                foreach (PropertyInfo property in properties)
                {
                    PropertyHelper propertyHelper = createPropertyHelper(property);

                    newHelpers.Add(propertyHelper);
                }

                helpers = newHelpers.ToArray();
                cache.TryAdd(type, helpers);
            }

            return helpers;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetValue">
          <declaration><![CDATA[public object GetValue(object instance)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="111" sc="9" el="115" ec="10">Common\PropertyHelper.cs</location>
            <body hash="6e817341acf8b683312b071071bc6640"><![CDATA[{
            //Contract.Assert(_valueGetter != null, "Must call Initialize before using this object");

            return _valueGetter(instance);
        }]]></body>
          </codeblock>
        </method>
        <method name="MakeFastPropertyGetter">
          <declaration><![CDATA[public static Func<object, object> MakeFastPropertyGetter(PropertyInfo propertyInfo)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="124" sc="9" el="155" ec="10">Common\PropertyHelper.cs</location>
            <body hash="3918c34b19dc3cd6da778349f8c46d7c"><![CDATA[{
            Requires.NotNull("property", propertyInfo);

            MethodInfo getMethod = propertyInfo.GetGetMethod();
            Guard.Against(getMethod == null, "Property must have a Get Method");
            Guard.Against(getMethod.IsStatic, "Property's Get method must not be static");
            Guard.Against(getMethod.GetParameters().Length != 0, "Property's Get method must not have parameters");

            // Instance methods in the CLR can be turned into static methods where the first parameter
            // is open over "this". This parameter is always passed by reference, so we have a code
            // path for value types and a code path for reference types.
            Type typeInput = getMethod.ReflectedType;
            Type typeOutput = getMethod.ReturnType;

            Delegate callPropertyGetterDelegate;
            if (typeInput.IsValueType)
            {
                // Create a delegate (ref TDeclaringType) -> TValue
                Delegate propertyGetterAsFunc = getMethod.CreateDelegate(typeof(ByRefFunc<,>).MakeGenericType(typeInput, typeOutput));
                MethodInfo callPropertyGetterClosedGenericMethod = CallPropertyGetterByReferenceOpenGenericMethod.MakeGenericMethod(typeInput, typeOutput);
                callPropertyGetterDelegate = Delegate.CreateDelegate(typeof(Func<object, object>), propertyGetterAsFunc, callPropertyGetterClosedGenericMethod);
            }
            else
            {
                // Create a delegate TDeclaringType -> TValue
                Delegate propertyGetterAsFunc = getMethod.CreateDelegate(typeof(Func<,>).MakeGenericType(typeInput, typeOutput));
                MethodInfo callPropertyGetterClosedGenericMethod = CallPropertyGetterOpenGenericMethod.MakeGenericMethod(typeInput, typeOutput);
                callPropertyGetterDelegate = Delegate.CreateDelegate(typeof(Func<object, object>), propertyGetterAsFunc, callPropertyGetterClosedGenericMethod);
            }

            return (Func<object, object>)callPropertyGetterDelegate;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_valueGetter">
          <declaration><![CDATA[private readonly Func<object, object> _valueGetter;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="CallPropertyGetterByReferenceOpenGenericMethod">
          <declaration><![CDATA[private static readonly MethodInfo CallPropertyGetterByReferenceOpenGenericMethod = typeof(PropertyHelper).GetMethod("CallPropertyGetterByReference", BindingFlags.Static | BindingFlags.NonPublic);]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="CallPropertyGetterOpenGenericMethod">
          <declaration><![CDATA[private static readonly MethodInfo CallPropertyGetterOpenGenericMethod = typeof(PropertyHelper).GetMethod("CallPropertyGetter", BindingFlags.Static | BindingFlags.NonPublic);]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ReflectionCache">
          <declaration><![CDATA[private static readonly ConcurrentDictionary<Type, PropertyHelper[]> ReflectionCache = new ConcurrentDictionary<Type, PropertyHelper[]>();]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="Name">
          <declaration><![CDATA[public virtual string Name]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="49" sc="38" el="49" ec="42">Common\PropertyHelper.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="49" sc="43" el="49" ec="57">Common\PropertyHelper.cs</location>
            <body hash="5c1ddebc298d4e3118617b1afe7e95eb"><![CDATA[protected set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="TypeHelper">
      <declaration><![CDATA[public static class TypeHelper]]></declaration>
      <documentation>
      </documentation>
      <constructors>
      </constructors>
      <methods>
        <method name="ObjectToDictionary">
          <declaration><![CDATA[public static RouteValueDictionary ObjectToDictionary(object value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="35" sc="9" el="47" ec="10">Common\TypeHelper.cs</location>
            <body hash="df05fa108fc2a098a29aaa0177e64d57"><![CDATA[{
            RouteValueDictionary dictionary = new RouteValueDictionary();

            if (value != null)
            {
                foreach (PropertyHelper helper in PropertyHelper.GetProperties(value))
                {
                    dictionary.Add(helper.Name, helper.GetValue(value));
                }
            }

            return dictionary;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="DotNetNuke.Web.Mvc.Framework">
    <class name="DnnWebViewPage">
      <declaration><![CDATA[public abstract class DnnWebViewPage : WebViewPage]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[protected DnnWebViewPage()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="InitHelpers">
          <declaration><![CDATA[public override void InitHelpers()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="18" sc="9" el="23" ec="10">Framework\DnnWebViewPage.cs</location>
            <body hash="23cc48262add73c7b76e794a79b12e42"><![CDATA[{
            Ajax = new AjaxHelper<object>(ViewContext, this);
            Html = new DnnHtmlHelper<object>(ViewContext, this);
            Url = new DnnUrlHelper(ViewContext);
            Dnn = new DnnHelper<object>(ViewContext, this);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="Dnn">
          <declaration><![CDATA[public DnnHelper<object> Dnn]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="11" sc="40" el="11" ec="44">Framework\DnnWebViewPage.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="11" sc="45" el="11" ec="49">Framework\DnnWebViewPage.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Html">
          <declaration><![CDATA[public new DnnHtmlHelper<object> Html]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="13" sc="49" el="13" ec="53">Framework\DnnWebViewPage.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="13" sc="54" el="13" ec="58">Framework\DnnWebViewPage.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Url">
          <declaration><![CDATA[public new DnnUrlHelper Url]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="15" sc="39" el="15" ec="43">Framework\DnnWebViewPage.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="15" sc="44" el="15" ec="48">Framework\DnnWebViewPage.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnWebViewPage&lt;TModel&gt;">
      <declaration><![CDATA[public abstract class DnnWebViewPage<TModel> : WebViewPage<TModel>]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[protected DnnWebViewPage()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="InitHelpers">
          <declaration><![CDATA[public override void InitHelpers()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="18" sc="9" el="23" ec="10">Framework\DnnWebViewPageOfT.cs</location>
            <body hash="0ad4221f5f2bba066ef1336d4dfadf24"><![CDATA[{
            Ajax = new AjaxHelper<TModel>(ViewContext, this);
            Html = new DnnHtmlHelper<TModel>(ViewContext, this);
            Url = new DnnUrlHelper(ViewContext);
            Dnn = new DnnHelper<TModel>(ViewContext, this);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="Dnn">
          <declaration><![CDATA[public DnnHelper<TModel> Dnn]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="11" sc="40" el="11" ec="44">Framework\DnnWebViewPageOfT.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="11" sc="45" el="11" ec="49">Framework\DnnWebViewPageOfT.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Html">
          <declaration><![CDATA[public new DnnHtmlHelper<TModel> Html]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="13" sc="49" el="13" ec="53">Framework\DnnWebViewPageOfT.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="13" sc="54" el="13" ec="58">Framework\DnnWebViewPageOfT.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Url">
          <declaration><![CDATA[public new DnnUrlHelper Url]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="15" sc="39" el="15" ec="43">Framework\DnnWebViewPageOfT.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="15" sc="44" el="15" ec="48">Framework\DnnWebViewPageOfT.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="ModuleDelegatingViewEngine">
      <declaration><![CDATA[public class ModuleDelegatingViewEngine : IViewEngine]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private readonly Dictionary<IView, IViewEngine> _viewEngineMappings = new Dictionary<IView, IViewEngine>();]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="17" sc="9" el="17" ec="116">Framework\ModuleDelegatingViewEngine.cs</location>
            <body hash="62ca46632523689bad17c994ceb2a627"><![CDATA[private readonly Dictionary<IView, IViewEngine> _viewEngineMappings = new Dictionary<IView, IViewEngine>()]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="FindPartialView">
          <declaration><![CDATA[public ViewEngineResult FindPartialView(ControllerContext controllerContext, string partialViewName, bool useCache)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="27" sc="9" el="29" ec="10">Framework\ModuleDelegatingViewEngine.cs</location>
            <body hash="5c0bef0ddc61df927e4e329fed887fa0"><![CDATA[{
            return RunAgainstModuleViewEngines(controllerContext, e => e.FindPartialView(controllerContext, partialViewName));
        }]]></body>
          </codeblock>
        </method>
        <method name="FindView">
          <declaration><![CDATA[public ViewEngineResult FindView(ControllerContext controllerContext, string viewName, string masterName, bool useCache)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="39" sc="9" el="41" ec="10">Framework\ModuleDelegatingViewEngine.cs</location>
            <body hash="7452a1acd4759e37d6934e3415e86ea4"><![CDATA[{
            return RunAgainstModuleViewEngines(controllerContext, e => e.FindView(controllerContext, viewName, masterName));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetCurrentModuleRequestResult">
          <declaration><![CDATA[private static ModuleRequestResult GetCurrentModuleRequestResult(ControllerContext controllerContext)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="79" sc="9" el="85" ec="10">Framework\ModuleDelegatingViewEngine.cs</location>
            <body hash="28ef9e2d23adf175ea13c4f4612ae6c3"><![CDATA[{
            if (controllerContext.HttpContext.HasModuleRequestResult())
            {
                return controllerContext.HttpContext.GetModuleRequestResult();
            }
            return null;
        }]]></body>
          </codeblock>
        </method>
        <method name="ReleaseView">
          <declaration><![CDATA[public void ReleaseView(ControllerContext controllerContext, IView view)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="48" sc="9" el="53" ec="10">Framework\ModuleDelegatingViewEngine.cs</location>
            <body hash="960f0b9e903ca1e879e906a531d1b9a6"><![CDATA[{
            if (_viewEngineMappings.ContainsKey(view))
            {
                _viewEngineMappings[view].ReleaseView(controllerContext, view);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="RunAgainstModuleViewEngines">
          <declaration><![CDATA[private ViewEngineResult RunAgainstModuleViewEngines(ControllerContext controllerContext, Func<ViewEngineCollection, ViewEngineResult> engineRequest)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="56" sc="9" el="76" ec="10">Framework\ModuleDelegatingViewEngine.cs</location>
            <body hash="d9daaae89dd3b7e2cb6b7621c54924a6"><![CDATA[{
            // Get the current module request
            ModuleRequestResult moduleRequestResult = GetCurrentModuleRequestResult(controllerContext);

            // No current request => Skip this view engine
            if (moduleRequestResult == null)
            {
                return new ViewEngineResult(new string[0]);
            }

            // Delegate to the module's view engine collection
            ViewEngineResult result = engineRequest(moduleRequestResult.ModuleApplication.ViewEngines);

            // If there is a view, store the view<->viewengine mapping so release works correctly
            if (result.View != null)
            {
                _viewEngineMappings[result.View] = result.ViewEngine;
            }

            return result;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_viewEngineMappings">
          <declaration><![CDATA[private readonly Dictionary<IView, IViewEngine> _viewEngineMappings = new Dictionary<IView, IViewEngine>();]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="DotNetNuke.Web.Mvc.Framework.ActionFilters">
    <class name="AuthorizeAttributeBase">
      <declaration><![CDATA[public abstract class AuthorizeAttributeBase : FilterAttribute, IAuthorizationFilter]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[protected AuthorizeAttributeBase()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="AuthorizeCore">
          <declaration><![CDATA[protected virtual bool AuthorizeCore(HttpContextBase httpContext)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="32" sc="9" el="34" ec="10">Framework\ActionFilters\AuthorizeAttributeBase.cs</location>
            <body hash="f882ca7e6e289653f91b0768029d8a89"><![CDATA[{
            return true;
        }]]></body>
          </codeblock>
        </method>
        <method name="CacheValidateHandler">
          <declaration><![CDATA[private void CacheValidateHandler(HttpContext context, object data, ref HttpValidationStatus validationStatus)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="37" sc="9" el="39" ec="10">Framework\ActionFilters\AuthorizeAttributeBase.cs</location>
            <body hash="1e0460bf87afadf26a0e8ca05332fe2d"><![CDATA[{
            validationStatus = OnCacheAuthorization(new HttpContextWrapper(context));
        }]]></body>
          </codeblock>
        </method>
        <method name="HandleAuthorizedRequest">
          <declaration><![CDATA[protected virtual void HandleAuthorizedRequest(AuthorizationContext filterContext)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="64" sc="9" el="68" ec="10">Framework\ActionFilters\AuthorizeAttributeBase.cs</location>
            <body hash="8483f49c77101a45affff78c15db3f89"><![CDATA[{
            HttpCachePolicyBase cachePolicy = filterContext.HttpContext.Response.Cache;
            cachePolicy.SetProxyMaxAge(new TimeSpan(0));
            cachePolicy.AddValidationCallback(CacheValidateHandler, null /* data */);
        }]]></body>
          </codeblock>
        </method>
        <method name="HandleUnauthorizedRequest">
          <declaration><![CDATA[protected virtual void HandleUnauthorizedRequest(AuthorizationContext filterContext)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="71" sc="9" el="73" ec="10">Framework\ActionFilters\AuthorizeAttributeBase.cs</location>
            <body hash="7c286551ef8dbe00c62202f413d95d68"><![CDATA[{
            filterContext.HttpContext.Response.Redirect(Globals.AccessDeniedURL());
        }]]></body>
          </codeblock>
        </method>
        <method name="OnAuthorization">
          <declaration><![CDATA[public virtual void OnAuthorization(AuthorizationContext filterContext)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="42" sc="9" el="61" ec="10">Framework\ActionFilters\AuthorizeAttributeBase.cs</location>
            <body hash="97288de64e240e112c279cb5ce50a65b"><![CDATA[{
            Requires.NotNull("filterContext", filterContext);

            bool skipAuthorization = filterContext.ActionDescriptor.IsDefined(typeof(AllowAnonymousAttribute), inherit: true)
                                     || filterContext.ActionDescriptor.ControllerDescriptor.IsDefined(typeof(AllowAnonymousAttribute), inherit: true);

            if (skipAuthorization)
            {
                return;
            }

            if (AuthorizeCore(filterContext.HttpContext))
            {
                HandleAuthorizedRequest(filterContext);
            }
            else
            {
                HandleUnauthorizedRequest(filterContext);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnCacheAuthorization">
          <declaration><![CDATA[protected virtual HttpValidationStatus OnCacheAuthorization(HttpContextBase httpContext)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="76" sc="9" el="81" ec="10">Framework\ActionFilters\AuthorizeAttributeBase.cs</location>
            <body hash="c78d2d01d9e74a6c2b5a039e0274903b"><![CDATA[{
            Requires.NotNull("httpContext", httpContext);

            bool isAuthorized = AuthorizeCore(httpContext);
            return (isAuthorized) ? HttpValidationStatus.Valid : HttpValidationStatus.IgnoreThisRequest;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnAuthorizeAttribute">
      <declaration><![CDATA[public class DnnAuthorizeAttribute : AuthorizeAttributeBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private string[] _staticRolesSplit = new string[0];]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="35" sc="9" el="38" ec="58">Framework\ActionFilters\DnnAuthorizeAttribute.cs</location>
            <body hash="ca3b734577238f8445aa765e80c3156c"><![CDATA[private string[] _staticRolesSplit = new string[0];

        private string _denyRoles;
        private string[] _denyRolesSplit = new string[0];]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="AuthorizeCore">
          <declaration><![CDATA[protected override bool AuthorizeCore(HttpContextBase httpContext)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="77" sc="9" el="102" ec="10">Framework\ActionFilters\DnnAuthorizeAttribute.cs</location>
            <body hash="37d4d0ffb6fec7d151f4c29af8703bb8"><![CDATA[{
            if (!IsAuthenticated())
            {
                return false;
            }

            if (_denyRolesSplit.Any())
            {
                var currentUser = GetCurrentUser();
                if (!currentUser.IsSuperUser && _denyRolesSplit.Any(currentUser.IsInRole))
                {
                    return false;
                }
            }

            if (_staticRolesSplit.Any())
            {
                var currentUser = GetCurrentUser();
                if (!_staticRolesSplit.Any(currentUser.IsInRole))
                {
                    return false;
                }
            }

            return true;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetCurrentUser">
          <declaration><![CDATA[protected virtual UserInfo GetCurrentUser()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="72" sc="9" el="74" ec="10">Framework\ActionFilters\DnnAuthorizeAttribute.cs</location>
            <body hash="680a34a4ab8a700491fcc52a2e923b91"><![CDATA[{
            return PortalController.Instance.GetCurrentPortalSettings().UserInfo;            
        }]]></body>
          </codeblock>
        </method>
        <method name="IsAuthenticated">
          <declaration><![CDATA[protected virtual bool IsAuthenticated()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="67" sc="9" el="69" ec="10">Framework\ActionFilters\DnnAuthorizeAttribute.cs</location>
            <body hash="e0f030bcc81da5c9f9073cf9d919ac3b"><![CDATA[{
            return Thread.CurrentPrincipal.Identity.IsAuthenticated;
        }]]></body>
          </codeblock>
        </method>
        <method name="SplitString">
          <declaration><![CDATA[private string[] SplitString(string original)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="105" sc="9" el="116" ec="10">Framework\ActionFilters\DnnAuthorizeAttribute.cs</location>
            <body hash="4fe0e983f1e88cb1230afb9715cde0f4"><![CDATA[{
            if (String.IsNullOrEmpty(original))
            {
                return new string[0];
            }

            IEnumerable<string> split = from piece in original.Split(',')
                                        let trimmed = piece.Trim()
                                        where !String.IsNullOrEmpty(trimmed)
                                        select trimmed;
            return split.ToArray();
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_denyRoles">
          <declaration><![CDATA[private string _denyRoles;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_denyRolesSplit">
          <declaration><![CDATA[private string[] _denyRolesSplit = new string[0];]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_staticRoles">
          <declaration><![CDATA[private string _staticRoles;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_staticRolesSplit">
          <declaration><![CDATA[private string[] _staticRolesSplit = new string[0];]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="DenyRoles">
          <declaration><![CDATA[public string DenyRoles]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="60" sc="13" el="63" ec="14">Framework\ActionFilters\DnnAuthorizeAttribute.cs</location>
            <body hash="46e2abf3260258b7147d1cc99af8e1a4"><![CDATA[{
                _denyRoles = value;
                _denyRolesSplit = SplitString(_denyRoles);
            }]]></body>
          </codeblock>
        </property>
        <property name="StaticRoles">
          <declaration><![CDATA[public string StaticRoles]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="47" sc="13" el="50" ec="14">Framework\ActionFilters\DnnAuthorizeAttribute.cs</location>
            <body hash="48c619ee7a85e7467974e4080097151a"><![CDATA[{
                _staticRoles = value;
                _staticRolesSplit = SplitString(_staticRoles);
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnHandleErrorAttribute">
      <declaration><![CDATA[public class DnnHandleErrorAttribute : HandleErrorAttribute]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnHandleErrorAttribute()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="LogException">
          <declaration><![CDATA[protected virtual void LogException(Exception exception)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="44" sc="9" el="46" ec="10">Framework\ActionFilters\DnnHandleErrorAttribute.cs</location>
            <body hash="9cfadac5e848b402829148d69a947b0d"><![CDATA[{
            Exceptions.LogException(exception);
        }]]></body>
          </codeblock>
        </method>
        <method name="OnException">
          <declaration><![CDATA[public override void OnException(ExceptionContext filterContext)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="32" sc="9" el="41" ec="10">Framework\ActionFilters\DnnHandleErrorAttribute.cs</location>
            <body hash="aaabc4131958d243db8bbca65f61888f"><![CDATA[{
            var controller = filterContext.Controller as IDnnController;

            if (controller == null)
            {
                throw new InvalidOperationException("This attribute can only be applied to Controllers that implement IDnnController");
            }
            
            LogException(filterContext.Exception);            
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnModuleAuthorizeAttribute">
      <declaration><![CDATA[public class DnnModuleAuthorizeAttribute : AuthorizeAttributeBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnModuleAuthorizeAttribute()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="36" sc="9" el="39" ec="10">Framework\ActionFilters\DnnModuleAuthorizeAttribute.cs</location>
            <body hash="31494bb857e2f91b252d8589a862da09"><![CDATA[public DnnModuleAuthorizeAttribute()
        {
            AccessLevel = SecurityAccessLevel.Host;
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="AuthorizeCore">
          <declaration><![CDATA[protected override bool AuthorizeCore(HttpContextBase httpContext)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="46" sc="9" el="53" ec="10">Framework\ActionFilters\DnnModuleAuthorizeAttribute.cs</location>
            <body hash="be81ebf3440cfa0f5f780ee320d873f5"><![CDATA[{
            if (_module != null)
            {
                return HasModuleAccess();
            }

            return false;
        }]]></body>
          </codeblock>
        </method>
        <method name="HasModuleAccess">
          <declaration><![CDATA[protected virtual bool HasModuleAccess()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="70" sc="9" el="72" ec="10">Framework\ActionFilters\DnnModuleAuthorizeAttribute.cs</location>
            <body hash="bde35dd949dd283477a6b53b2ec89cb7"><![CDATA[{
            return ModulePermissionController.HasModuleAccess(AccessLevel, PermissionKey, _module);
        }]]></body>
          </codeblock>
        </method>
        <method name="OnAuthorization">
          <declaration><![CDATA[public override void OnAuthorization(AuthorizationContext filterContext)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="56" sc="9" el="67" ec="10">Framework\ActionFilters\DnnModuleAuthorizeAttribute.cs</location>
            <body hash="7b7c5adc4835297a100304e7d67615fb"><![CDATA[{
            var controller = filterContext.Controller as IDnnController;

            if (controller == null)
            {
                throw new InvalidOperationException("This attribute can only be applied to Controllers that implement IDnnController");
            }

            _module = controller.ModuleContext.Configuration;

            base.OnAuthorization(filterContext);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_module">
          <declaration><![CDATA[private ModuleInfo _module;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="AccessLevel">
          <declaration><![CDATA[public SecurityAccessLevel AccessLevel]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="41" sc="50" el="41" ec="54">Framework\ActionFilters\DnnModuleAuthorizeAttribute.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="41" sc="55" el="41" ec="59">Framework\ActionFilters\DnnModuleAuthorizeAttribute.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="PermissionKey">
          <declaration><![CDATA[public string PermissionKey]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="43" sc="39" el="43" ec="43">Framework\ActionFilters\DnnModuleAuthorizeAttribute.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="43" sc="44" el="43" ec="48">Framework\ActionFilters\DnnModuleAuthorizeAttribute.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="ModuleActionAttribute">
      <declaration><![CDATA[public class ModuleActionAttribute : ActionFilterAttribute]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public ModuleActionAttribute()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="36" sc="9" el="39" ec="10">Framework\ActionFilters\ModuleActionAttribute.cs</location>
            <body hash="7717ba7c18cc18adb5e7b44ccc3489fe"><![CDATA[public ModuleActionAttribute()
        {
            SecurityAccessLevel = SecurityAccessLevel.Edit;
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="OnActionExecuting">
          <declaration><![CDATA[public override void OnActionExecuting(ActionExecutingContext filterContext)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="67" sc="9" el="90" ec="10">Framework\ActionFilters\ModuleActionAttribute.cs</location>
            <body hash="eed868fafae088b56012a22400aa16ee"><![CDATA[{
            var controller = filterContext.Controller as IDnnController;

            if (controller == null)
            {
                throw new InvalidOperationException("This attribute can only be applied to Controllers that implement IDnnController");
            }

            if (controller.ModuleActions == null)
            {
                controller.ModuleActions = new ModuleActionCollection();
            }

            controller.ModuleActions.Add(-1,
                                (!String.IsNullOrEmpty(TitleKey)) ? controller.LocalizeString(TitleKey) : Title,
                                ModuleActionType.AddContent,
                                "",
                                Icon,
                                controller.ModuleContext.EditUrl(ControlKey),
                                false,
                                SecurityAccessLevel,
                                true,
                                false);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="ControlKey">
          <declaration><![CDATA[public string ControlKey]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="44" sc="36" el="44" ec="40">Framework\ActionFilters\ModuleActionAttribute.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="44" sc="41" el="44" ec="45">Framework\ActionFilters\ModuleActionAttribute.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Icon">
          <declaration><![CDATA[public string Icon]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="49" sc="30" el="49" ec="34">Framework\ActionFilters\ModuleActionAttribute.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="49" sc="35" el="49" ec="39">Framework\ActionFilters\ModuleActionAttribute.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="SecurityAccessLevel">
          <declaration><![CDATA[public SecurityAccessLevel SecurityAccessLevel]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="54" sc="58" el="54" ec="62">Framework\ActionFilters\ModuleActionAttribute.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="54" sc="63" el="54" ec="67">Framework\ActionFilters\ModuleActionAttribute.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Title">
          <declaration><![CDATA[public string Title]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="59" sc="31" el="59" ec="35">Framework\ActionFilters\ModuleActionAttribute.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="59" sc="36" el="59" ec="40">Framework\ActionFilters\ModuleActionAttribute.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="TitleKey">
          <declaration><![CDATA[public string TitleKey]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="64" sc="34" el="64" ec="38">Framework\ActionFilters\ModuleActionAttribute.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="64" sc="39" el="64" ec="43">Framework\ActionFilters\ModuleActionAttribute.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="ModuleActionItemsAttribute">
      <declaration><![CDATA[public class ModuleActionItemsAttribute : ActionFilterAttribute]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public ModuleActionItemsAttribute()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="GetMethod">
          <declaration><![CDATA[private MethodInfo GetMethod(Type type, string methodName)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="78" sc="9" el="94" ec="10">Framework\ActionFilters\ModuleActionItemsAttribute.cs</location>
            <body hash="74a4ad49fa29bac669e6067b9e1165c7"><![CDATA[{
            var method = type.GetMethod(methodName);

            if (method == null)
            {
                throw new NotImplementedException(String.Format("The expected method to get the module actions cannot be found. Type: {0}, Method: {1}", type.FullName, methodName));
            }

            var returnType = method.ReturnType.FullName;

            if (returnType != "DotNetNuke.Entities.Modules.Actions.ModuleActionCollection")
            {
                throw new InvalidOperationException("The method must return an object of type ModuleActionCollection");
            }

            return method;
        }]]></body>
          </codeblock>
        </method>
        <method name="OnActionExecuting">
          <declaration><![CDATA[public override void OnActionExecuting(ActionExecutingContext filterContext)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="40" sc="9" el="75" ec="10">Framework\ActionFilters\ModuleActionItemsAttribute.cs</location>
            <body hash="fd554a2d6c12a15d04dcb02ea21e4697"><![CDATA[{
            var controller = filterContext.Controller as IDnnController;
            Type type;
            string methodName;

            if(controller == null)
            {
                throw new InvalidOperationException("This attribute can only be applied to Controllers that implement IDnnController");
            }

            object instance;

            if (Type == null)
            {
                type = filterContext.Controller.GetType();
                instance = controller;
            }
            else
            {
                type = Type;
                instance = Reflection.CreateInstance(type);
            }

            if (String.IsNullOrEmpty(MethodName))
            {
                methodName = String.Format(MethodNameTemplate, filterContext.ActionDescriptor.ActionName);
            }
            else
            {
                methodName = MethodName;
            }

            var method = GetMethod(type, methodName);

            controller.ModuleActions = method.Invoke(instance, null) as ModuleActionCollection;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="MethodNameTemplate">
          <declaration><![CDATA[private const string MethodNameTemplate = "Get{0}Actions";]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="MethodName">
          <declaration><![CDATA[public string MethodName]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="37" sc="36" el="37" ec="40">Framework\ActionFilters\ModuleActionItemsAttribute.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="37" sc="41" el="37" ec="45">Framework\ActionFilters\ModuleActionItemsAttribute.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Type">
          <declaration><![CDATA[public Type Type]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="35" sc="28" el="35" ec="32">Framework\ActionFilters\ModuleActionItemsAttribute.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="35" sc="33" el="35" ec="37">Framework\ActionFilters\ModuleActionItemsAttribute.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="RequireHostAttribute">
      <declaration><![CDATA[public class RequireHostAttribute : AuthorizeAttributeBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public RequireHostAttribute()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="AuthorizeCore">
          <declaration><![CDATA[protected override bool AuthorizeCore(HttpContextBase httpContext)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="36" sc="9" el="49" ec="10">Framework\ActionFilters\RequireHostAttribute.cs</location>
            <body hash="0eba837eb132f83bb40d27545340a439"><![CDATA[{
            var principal = Thread.CurrentPrincipal;
            if (!principal.Identity.IsAuthenticated)
            {
                return false;
            }
            
            if (_user != null)
            {
                return _user.IsSuperUser;
            }

            return false;
        }]]></body>
          </codeblock>
        </method>
        <method name="OnAuthorization">
          <declaration><![CDATA[public override void OnAuthorization(AuthorizationContext filterContext)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="52" sc="9" el="63" ec="10">Framework\ActionFilters\RequireHostAttribute.cs</location>
            <body hash="f3dbebd7d2f0e7eecdec80c003809f4d"><![CDATA[{
            var controller = filterContext.Controller as IDnnController;

            if (controller == null)
            {
                throw new InvalidOperationException("This attribute can only be applied to Controllers that implement IDnnController");
            }

            _user = controller.ModuleContext.PortalSettings.UserInfo;

            base.OnAuthorization(filterContext);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_user">
          <declaration><![CDATA[private UserInfo _user;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="ValidateAntiForgeryTokenAttribute">
      <declaration><![CDATA[public class ValidateAntiForgeryTokenAttribute : AuthorizeAttributeBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public ValidateAntiForgeryTokenAttribute()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="AuthorizeCore">
          <declaration><![CDATA[protected override bool AuthorizeCore(HttpContextBase httpContext)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="71" sc="9" el="77" ec="10">Framework\ActionFilters\ValidateAntiForgeryTokenAttribute.cs</location>
            <body hash="c1fc2a3d63c66a21f095e49573f6fb74"><![CDATA[{
            if (!IsAuthenticated(httpContext))
            {
                return false;
            }
            return true;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetAntiForgeryCookieValue">
          <declaration><![CDATA[protected string GetAntiForgeryCookieValue(HttpContextBase context)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="54" sc="9" el="68" ec="10">Framework\ActionFilters\ValidateAntiForgeryTokenAttribute.cs</location>
            <body hash="a3fdcd1221d78e145e5692f0c039f10e"><![CDATA[{
            foreach (var cookieValue in context.Request.Headers.GetValues("Cookie"))
            {
                var nameIndex = cookieValue.IndexOf(AntiForgery.Instance.CookieName, StringComparison.InvariantCultureIgnoreCase);

                if (nameIndex > -1)
                {
                    var valueIndex = nameIndex + AntiForgery.Instance.CookieName.Length + 1;
                    var valueEndIndex = cookieValue.Substring(valueIndex).IndexOf(';');
                    return valueEndIndex > -1 ? cookieValue.Substring(valueIndex, valueEndIndex) : cookieValue.Substring(valueIndex);
                }
            }

            return "";
        }]]></body>
          </codeblock>
        </method>
        <method name="IsAuthenticated">
          <declaration><![CDATA[public virtual bool IsAuthenticated(HttpContextBase httpContext)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="16" sc="9" el="51" ec="10">Framework\ActionFilters\ValidateAntiForgeryTokenAttribute.cs</location>
            <body hash="e21ab4ca47849aec05aae077069f26bc"><![CDATA[{
            try
            {
                if (Thread.CurrentPrincipal.Identity.IsAuthenticated)
                {
                    var headers = httpContext.Request.Headers;
                    var form = httpContext.Request.Form;
                    //Try to fetch the token from Headers. (Used with Dnn service framework.). 
                    //If not found then fetch it from form fields. (Would be used with standard MVC call).
                    var token = headers.AllKeys.Contains("RequestVerificationToken") ? headers.GetValues("RequestVerificationToken").FirstOrDefault()
                        : (
                        form.AllKeys.Contains("__RequestVerificationToken") ? form.GetValues("__RequestVerificationToken").FirstOrDefault(): null
                        );

                    var cookieValue = GetAntiForgeryCookieValue(httpContext);
                    if (token != null)
                    {
                        AntiForgery.Instance.Validate(cookieValue, token);
                    }
                    else
                    {
                        return false;
                    }
                }
                else
                {
                    return false;
                }
            }
            catch (Exception e)
            {
                return false;
            }

            return true;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="DotNetNuke.Web.Mvc.Framework.ActionResults">
    <class name="DnnRedirecttoRouteResult">
      <declaration><![CDATA[internal class DnnRedirecttoRouteResult : RedirectToRouteResult]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnRedirecttoRouteResult(string actionName, string controllerName, string routeName, RouteValueDictionary routeValues, bool permanent) : base(routeName, routeValues, permanent)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="31" sc="15" el="35" ec="10">Framework\ActionResults\DnnRedirecttoRouteResult.cs</location>
            <body hash="7e60f9ae3bef1d2ae052110e36f3a70d"><![CDATA[base(routeName, routeValues, permanent)
        {
            ActionName = actionName;
            ControllerName = controllerName;
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="ExecuteResult">
          <declaration><![CDATA[public override void ExecuteResult(ControllerContext context)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="42" sc="9" el="61" ec="10">Framework\ActionResults\DnnRedirecttoRouteResult.cs</location>
            <body hash="a4e42b4be31838ad31a08440a5f660e4"><![CDATA[{
            Requires.NotNull("context", context);

            Guard.Against(context.IsChildAction, "Cannot Redirect In Child Action");

            string url;
            //TODO - match other actions
            url = Globals.NavigateURL();

            if (Permanent)
            {
                context.HttpContext.Response.RedirectPermanent(url, true);
            }
            else
            {
                context.HttpContext.Response.Redirect(url, true);
            }


        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="ActionName">
          <declaration><![CDATA[public string ActionName]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="37" sc="36" el="37" ec="40">Framework\ActionResults\DnnRedirecttoRouteResult.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="37" sc="41" el="37" ec="53">Framework\ActionResults\DnnRedirecttoRouteResult.cs</location>
            <body hash="5dbe2cc086ebbf5db6b03610487cca4c"><![CDATA[private set]]></body>
          </codeblock>
        </property>
        <property name="ControllerName">
          <declaration><![CDATA[public string ControllerName]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="39" sc="40" el="39" ec="44">Framework\ActionResults\DnnRedirecttoRouteResult.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="39" sc="45" el="39" ec="57">Framework\ActionResults\DnnRedirecttoRouteResult.cs</location>
            <body hash="5dbe2cc086ebbf5db6b03610487cca4c"><![CDATA[private set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnViewResult">
      <declaration><![CDATA[public class DnnViewResult : ViewResult, IDnnViewResult]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnViewResult()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="ExecuteResult">
          <declaration><![CDATA[public void ExecuteResult(ControllerContext context, TextWriter writer)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="14" sc="9" el="38" ec="10">Framework\ActionResults\DnnViewResult.cs</location>
            <body hash="8450aea193d4f6fa8577cae4cd4d3304"><![CDATA[{
            Requires.NotNull("context", context);
            Requires.NotNull("writer", writer);

            if (String.IsNullOrEmpty(ViewName))
            {
                ViewName = context.RouteData.GetRequiredString("action");
            }

            ViewEngineResult result = null;

            if (View == null)
            {
                result = ViewEngineCollection.FindView(context, ViewName, MasterName);
                View = result.View;
            }

            var viewContext = new ViewContext(context, View, ViewData, TempData, writer);
            View.Render(viewContext, writer);

            if (result != null)
            {
                result.ViewEngine.ReleaseView(context, View);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="IDnnViewResult">
      <declaration><![CDATA[public interface IDnnViewResult]]></declaration>
      <documentation>
      </documentation>
      <constructors>
      </constructors>
      <methods>
        <method name="ExecuteResult">
          <declaration><![CDATA[void ExecuteResult(ControllerContext context, TextWriter writer);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="DotNetNuke.Web.Mvc.Framework.Controllers">
    <class name="DnnController">
      <declaration><![CDATA[public abstract class DnnController : Controller, IDnnController, IController]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[protected DnnController()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="21" sc="9" el="24" ec="10">Framework\Controllers\DnnController.cs</location>
            <body hash="a784299eb5a7dbd21e4998c6e15c7524"><![CDATA[protected DnnController()
        {
            ActionInvoker = new ResultCapturingActionInvoker();
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="DotNetNuke.Web.Mvc.Framework.Controllers.IDnnController.get_ControllerContext">
          <declaration><![CDATA[ControllerContext IDnnController.get_ControllerContext()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="DotNetNuke.Web.Mvc.Framework.Controllers.IDnnController.get_ValidateRequest">
          <declaration><![CDATA[bool IDnnController.get_ValidateRequest()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="DotNetNuke.Web.Mvc.Framework.Controllers.IDnnController.set_ValidateRequest">
          <declaration><![CDATA[void IDnnController.set_ValidateRequest(bool value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="LocalizeString">
          <declaration><![CDATA[public string LocalizeString(string key)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="41" sc="9" el="43" ec="10">Framework\Controllers\DnnController.cs</location>
            <body hash="fdb9cfd70aff46a9da06e018de02d9c8"><![CDATA[{
            return Localization.GetString(key, LocalResourceFile);
        }]]></body>
          </codeblock>
        </method>
        <method name="RedirectToDefaultRoute">
          <declaration><![CDATA[protected internal RedirectToRouteResult RedirectToDefaultRoute()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="55" sc="9" el="57" ec="10">Framework\Controllers\DnnController.cs</location>
            <body hash="f7886794a19b9db172278518ccbb6c46"><![CDATA[{
            return new DnnRedirecttoRouteResult(String.Empty, String.Empty, String.Empty, null, false);
        }]]></body>
          </codeblock>
        </method>
        <method name="View">
          <declaration><![CDATA[protected override ViewResult View(IView view, object model)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="74" sc="9" el="86" ec="10">Framework\Controllers\DnnController.cs</location>
            <body hash="9cd05e7eb19eba32f6e2fda6c4a72da4"><![CDATA[{
            if (model != null)
            {
                ViewData.Model = model;
            }

            return new DnnViewResult
            {
                View = view,
                ViewData = ViewData,
                TempData = TempData
            };
        }]]></body>
          </codeblock>
        </method>
        <method name="View">
          <declaration><![CDATA[protected override ViewResult View(string viewName, string masterName, object model)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="89" sc="9" el="103" ec="10">Framework\Controllers\DnnController.cs</location>
            <body hash="1fc5c18bc4a100140d5a0e3b075320a7"><![CDATA[{
            if (model != null)
            {
                ViewData.Model = model;
            }

            return new DnnViewResult
            {
                ViewName = viewName,
                MasterName = masterName,
                ViewData = ViewData,
                TempData = TempData,
                ViewEngineCollection = ViewEngineCollection
            };
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="ActiveModule">
          <declaration><![CDATA[public ModuleInfo ActiveModule]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ActivePage">
          <declaration><![CDATA[public TabInfo ActivePage]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="DnnPage">
          <declaration><![CDATA[public Page DnnPage]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="36" sc="31" el="36" ec="35">Framework\Controllers\DnnController.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="36" sc="36" el="36" ec="40">Framework\Controllers\DnnController.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="LocalResourceFile">
          <declaration><![CDATA[public string LocalResourceFile]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="38" sc="43" el="38" ec="47">Framework\Controllers\DnnController.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="38" sc="48" el="38" ec="52">Framework\Controllers\DnnController.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ModuleActions">
          <declaration><![CDATA[public ModuleActionCollection ModuleActions]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="45" sc="55" el="45" ec="59">Framework\Controllers\DnnController.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="45" sc="60" el="45" ec="64">Framework\Controllers\DnnController.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ModuleContext">
          <declaration><![CDATA[public ModuleInstanceContext ModuleContext]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="47" sc="54" el="47" ec="58">Framework\Controllers\DnnController.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="47" sc="59" el="47" ec="63">Framework\Controllers\DnnController.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="PortalSettings">
          <declaration><![CDATA[public PortalSettings PortalSettings]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ResultOfLastExecute">
          <declaration><![CDATA[public ActionResult ResultOfLastExecute]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="62" sc="13" el="65" ec="14">Framework\Controllers\DnnController.cs</location>
            <body hash="c65431d056dca132d461ab74fe7c27d2"><![CDATA[{
                var actionInvoker = ActionInvoker as ResultCapturingActionInvoker;
                return (actionInvoker != null) ?  actionInvoker.ResultOfLastInvoke : null;
            }]]></body>
          </codeblock>
        </property>
        <property name="User">
          <declaration><![CDATA[public new UserInfo User]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="IDnnController">
      <declaration><![CDATA[public interface IDnnController : IController]]></declaration>
      <documentation>
      </documentation>
      <constructors>
      </constructors>
      <methods>
        <method name="LocalizeString">
          <declaration><![CDATA[string LocalizeString(string key);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="ControllerContext">
          <declaration><![CDATA[ControllerContext ControllerContext]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="DnnPage">
          <declaration><![CDATA[Page DnnPage]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="LocalResourceFile">
          <declaration><![CDATA[string LocalResourceFile]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ModuleActions">
          <declaration><![CDATA[ModuleActionCollection ModuleActions]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ModuleContext">
          <declaration><![CDATA[ModuleInstanceContext ModuleContext]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ResultOfLastExecute">
          <declaration><![CDATA[ActionResult ResultOfLastExecute]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ValidateRequest">
          <declaration><![CDATA[bool ValidateRequest]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="DotNetNuke.Web.Mvc.Framework.Modules">
    <class name="IModuleExecutionEngine">
      <declaration><![CDATA[public interface IModuleExecutionEngine]]></declaration>
      <documentation>
      </documentation>
      <constructors>
      </constructors>
      <methods>
        <method name="ExecuteModule">
          <declaration><![CDATA[ModuleRequestResult ExecuteModule(ModuleRequestContext moduleRequestContext);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="ExecuteModuleResult">
          <declaration><![CDATA[void ExecuteModuleResult(ModuleRequestResult moduleResult, TextWriter writer);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="ModuleApplication">
      <declaration><![CDATA[public class ModuleApplication]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private readonly object _lock = new object();]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="23" sc="9" el="30" ec="10">Framework\Modules\ModuleApplication.cs</location>
            <body hash="44f1dbeace1670fe70083d08fa49ffbd"><![CDATA[private readonly object _lock = new object();

        public ModuleApplication()
        {
            // ReSharper disable once DoNotCallOverridableMethodsInConstructor
            ControllerFactory = ControllerBuilder.Current.GetControllerFactory();
            ViewEngines = new ViewEngineCollection();
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="EnsureInitialized">
          <declaration><![CDATA[private void EnsureInitialized()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="47" sc="9" el="61" ec="10">Framework\Modules\ModuleApplication.cs</location>
            <body hash="738d36ab92ff87ed0efdb5ff71e3ad09"><![CDATA[{
            // Double-check lock to wait for initialization
            // TODO: Is there a better (preferably using events and waits) way to do this?
            if (!_initialized)
            {
                lock (_lock)
                {
                    if (!_initialized)
                    {
                        Init();
                        _initialized = true;
                    }
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="ExecuteRequest">
          <declaration><![CDATA[public virtual ModuleRequestResult ExecuteRequest(ModuleRequestContext context)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="64" sc="9" el="114" ec="10">Framework\Modules\ModuleApplication.cs</location>
            <body hash="fe2ad4cbfadcd13d7a838da8c97d2523"><![CDATA[{
            EnsureInitialized();

            var requestContext = new RequestContext(context.HttpContext, context.RouteData);

            var controllerName = (string)context.RouteData.Values["controller"];

            //Construct the controller using the ControllerFactory
            IController controller = ControllerFactory.CreateController(requestContext, controllerName);
            try
            {
                // Check if the controller supports IDnnController
                var moduleController = controller as IDnnController;

                // If we couldn't adapt it, we fail.  We can't support IController implementations directly :(
                // Because we need to retrieve the ActionResult without executing it, IController won't cut it
                if (moduleController == null)
                {
                    throw new InvalidOperationException("Could Not Construct Controller");
                }

                moduleController.ValidateRequest = false;

                moduleController.DnnPage = context.DnnPage;

                moduleController.ModuleContext = context.ModuleContext;

                moduleController.LocalResourceFile = String.Format("~/DesktopModules/MVC/{0}/{1}/{2}.resx",
                                                    context.ModuleContext.Configuration.DesktopModule.FolderName,
                                                    Localization.LocalResourceDirectory,
                                                    controllerName);

                // Execute the controller and capture the result
                moduleController.Execute(requestContext);
                ActionResult result = moduleController.ResultOfLastExecute;

                // Return the final result
                return new ModuleRequestResult
                                {
                                    ActionResult = result,
                                    ControllerContext = moduleController.ControllerContext,
                                    ModuleActions = moduleController.ModuleActions,
                                    ModuleContext = context.ModuleContext,
                                    ModuleApplication = this
                                };
            }
            finally
            {
                ControllerFactory.ReleaseController(controller);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="Init">
          <declaration><![CDATA[protected internal virtual void Init()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="117" sc="9" el="138" ec="10">Framework\Modules\ModuleApplication.cs</location>
            <body hash="a8f9a64a3062ef4758d728e92e5edd7a"><![CDATA[{
            string prefix = NormalizeFolderPath(FolderPath);
            string[] masterFormats =
            { 
                String.Format(CultureInfo.InvariantCulture, ControllerMasterFormat, prefix),
                String.Format(CultureInfo.InvariantCulture, SharedMasterFormat, prefix)
            };
            string[] viewFormats =
            { 
                String.Format(CultureInfo.InvariantCulture, ControllerViewFormat, prefix),
                String.Format(CultureInfo.InvariantCulture, SharedViewFormat, prefix),
                String.Format(CultureInfo.InvariantCulture, ControllerPartialFormat, prefix),
                String.Format(CultureInfo.InvariantCulture, SharedPartialFormat, prefix)
            };

            ViewEngines.Add(new RazorViewEngine
                                    {
                                        MasterLocationFormats = masterFormats,
                                        ViewLocationFormats = viewFormats,
                                        PartialViewLocationFormats = viewFormats
                                    });
        }]]></body>
          </codeblock>
        </method>
        <method name="NormalizeFolderPath">
          <declaration><![CDATA[protected static string NormalizeFolderPath(string path)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="141" sc="9" el="148" ec="10">Framework\Modules\ModuleApplication.cs</location>
            <body hash="4b788a8487aecd9774c0c48cf33fc1b6"><![CDATA[{
            // Remove leading and trailing slashes
            if (!String.IsNullOrEmpty(path))
            {
                return path.Trim('/');
            }
            return path;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_initialized">
          <declaration><![CDATA[private bool _initialized;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_lock">
          <declaration><![CDATA[private readonly object _lock = new object();]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ControllerMasterFormat">
          <declaration><![CDATA[protected const string ControllerMasterFormat = "~/DesktopModules/MVC/{0}/Views/{{1}}/{{0}}.cshtml";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ControllerPartialFormat">
          <declaration><![CDATA[protected const string ControllerPartialFormat = "~/DesktopModules/MVC/{0}/Views/{{1}}/{{0}}.cshtml";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ControllerViewFormat">
          <declaration><![CDATA[protected const string ControllerViewFormat = "~/DesktopModules/MVC/{0}/Views/{{1}}/{{0}}.cshtml";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="SharedMasterFormat">
          <declaration><![CDATA[protected const string SharedMasterFormat = "~/DesktopModules/MVC/{0}/Views/Shared/{{0}}.cshtml";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="SharedPartialFormat">
          <declaration><![CDATA[protected const string SharedPartialFormat = "~/DesktopModules/MVC/{0}/Views/Shared/{{0}}.cshtml";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="SharedViewFormat">
          <declaration><![CDATA[protected const string SharedViewFormat = "~/DesktopModules/MVC/{0}/Views/Shared/{{0}}.cshtml";]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="ControllerFactory">
          <declaration><![CDATA[public virtual IControllerFactory ControllerFactory]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="32" sc="63" el="32" ec="67">Framework\Modules\ModuleApplication.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="32" sc="68" el="32" ec="72">Framework\Modules\ModuleApplication.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="DefaultActionName">
          <declaration><![CDATA[public string DefaultActionName]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="34" sc="43" el="34" ec="47">Framework\Modules\ModuleApplication.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="34" sc="48" el="34" ec="52">Framework\Modules\ModuleApplication.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="DefaultControllerName">
          <declaration><![CDATA[public string DefaultControllerName]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="36" sc="47" el="36" ec="51">Framework\Modules\ModuleApplication.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="36" sc="52" el="36" ec="56">Framework\Modules\ModuleApplication.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="DefaultNamespaces">
          <declaration><![CDATA[public string[] DefaultNamespaces]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="38" sc="45" el="38" ec="49">Framework\Modules\ModuleApplication.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="38" sc="50" el="38" ec="54">Framework\Modules\ModuleApplication.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="FolderPath">
          <declaration><![CDATA[public string FolderPath]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="40" sc="36" el="40" ec="40">Framework\Modules\ModuleApplication.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="40" sc="41" el="40" ec="45">Framework\Modules\ModuleApplication.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ModuleName">
          <declaration><![CDATA[public string ModuleName]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="42" sc="36" el="42" ec="40">Framework\Modules\ModuleApplication.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="42" sc="41" el="42" ec="45">Framework\Modules\ModuleApplication.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ViewEngines">
          <declaration><![CDATA[public ViewEngineCollection ViewEngines]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="44" sc="51" el="44" ec="55">Framework\Modules\ModuleApplication.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="44" sc="56" el="44" ec="60">Framework\Modules\ModuleApplication.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="ModuleExecutionEngine">
      <declaration><![CDATA[public class ModuleExecutionEngine : IModuleExecutionEngine]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public ModuleExecutionEngine()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="ExecuteModule">
          <declaration><![CDATA[public ModuleRequestResult ExecuteModule(ModuleRequestContext moduleRequestContext)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="32" sc="9" el="41" ec="10">Framework\Modules\ModuleExecutionEngine.cs</location>
            <body hash="e9468660230dc0848c711e751cfa83ab"><![CDATA[{
            Requires.NotNull("moduleRequestContext", moduleRequestContext);

            if (moduleRequestContext.ModuleApplication != null)
            {
                //Run the module
                return moduleRequestContext.ModuleApplication.ExecuteRequest(moduleRequestContext);
            }
            return null;
        }]]></body>
          </codeblock>
        </method>
        <method name="ExecuteModuleResult">
          <declaration><![CDATA[public virtual void ExecuteModuleResult(ModuleRequestResult moduleResult, TextWriter writer)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="44" sc="9" el="54" ec="10">Framework\Modules\ModuleExecutionEngine.cs</location>
            <body hash="56313e3f04fc02d7221f3e64857bc141"><![CDATA[{
            var result = moduleResult.ActionResult as IDnnViewResult;
            if (result != null)
            {
                result.ExecuteResult(moduleResult.ControllerContext, writer);
            }
            else
            {
                moduleResult.ActionResult.ExecuteResult(moduleResult.ControllerContext);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="ModuleRequestContext">
      <declaration><![CDATA[public class ModuleRequestContext]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public ModuleRequestContext()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="DnnPage">
          <declaration><![CDATA[public Page DnnPage]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="13" sc="31" el="13" ec="35">Framework\Modules\ModuleRequestContext.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="13" sc="36" el="13" ec="40">Framework\Modules\ModuleRequestContext.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="HttpContext">
          <declaration><![CDATA[public HttpContextBase HttpContext]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="15" sc="46" el="15" ec="50">Framework\Modules\ModuleRequestContext.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="15" sc="51" el="15" ec="55">Framework\Modules\ModuleRequestContext.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ModuleApplication">
          <declaration><![CDATA[public ModuleApplication ModuleApplication]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="19" sc="54" el="19" ec="58">Framework\Modules\ModuleRequestContext.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="19" sc="59" el="19" ec="63">Framework\Modules\ModuleRequestContext.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ModuleContext">
          <declaration><![CDATA[public ModuleInstanceContext ModuleContext]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="17" sc="54" el="17" ec="58">Framework\Modules\ModuleRequestContext.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="17" sc="59" el="17" ec="63">Framework\Modules\ModuleRequestContext.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="RouteData">
          <declaration><![CDATA[public RouteData RouteData]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="21" sc="38" el="21" ec="42">Framework\Modules\ModuleRequestContext.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="21" sc="43" el="21" ec="47">Framework\Modules\ModuleRequestContext.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="ModuleRequestResult">
      <declaration><![CDATA[public class ModuleRequestResult]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public ModuleRequestResult()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="ActionResult">
          <declaration><![CDATA[public ActionResult ActionResult]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="12" sc="44" el="12" ec="48">Framework\Modules\ModuleRequestResult.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="12" sc="49" el="12" ec="53">Framework\Modules\ModuleRequestResult.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ControllerContext">
          <declaration><![CDATA[public ControllerContext ControllerContext]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="14" sc="54" el="14" ec="58">Framework\Modules\ModuleRequestResult.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="14" sc="59" el="14" ec="63">Framework\Modules\ModuleRequestResult.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ModuleActions">
          <declaration><![CDATA[public ModuleActionCollection ModuleActions]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="18" sc="55" el="18" ec="59">Framework\Modules\ModuleRequestResult.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="18" sc="60" el="18" ec="64">Framework\Modules\ModuleRequestResult.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ModuleApplication">
          <declaration><![CDATA[public ModuleApplication ModuleApplication]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="20" sc="54" el="20" ec="58">Framework\Modules\ModuleRequestResult.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="20" sc="59" el="20" ec="63">Framework\Modules\ModuleRequestResult.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ModuleContext">
          <declaration><![CDATA[public ModuleInstanceContext ModuleContext]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="16" sc="54" el="16" ec="58">Framework\Modules\ModuleRequestResult.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="16" sc="59" el="16" ec="63">Framework\Modules\ModuleRequestResult.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="ResultCapturingActionInvoker">
      <declaration><![CDATA[public class ResultCapturingActionInvoker : ControllerActionInvoker]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public ResultCapturingActionInvoker()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="InvokeActionResult">
          <declaration><![CDATA[protected override void InvokeActionResult(ControllerContext controllerContext, ActionResult actionResult)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="33" sc="9" el="36" ec="10">Framework\Modules\ResultCapturingActionInvoker.cs</location>
            <body hash="79987fef9acba449b47ac644dfe08c16"><![CDATA[{
            //Do not invoke the action.  Instead, store it for later retrieval
            ResultOfLastInvoke = actionResult;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="ResultOfLastInvoke">
          <declaration><![CDATA[public ActionResult ResultOfLastInvoke]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="28" sc="50" el="28" ec="54">Framework\Modules\ResultCapturingActionInvoker.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="28" sc="55" el="28" ec="59">Framework\Modules\ResultCapturingActionInvoker.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="DotNetNuke.Web.Mvc.Helpers">
    <class name="DnnHelper">
      <declaration><![CDATA[public class DnnHelper]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnHelper(ViewContext viewContext, IViewDataContainer viewDataContainer) : this(viewContext, viewDataContainer, RouteTable.Routes)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="23" sc="15" el="25" ec="10">Helpers\DnnHelper.cs</location>
            <body hash="dc2573aa81d223ff87c03c4b9c1e4dc4"><![CDATA[this(viewContext, viewDataContainer, RouteTable.Routes)
        {
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnHelper(ViewContext viewContext, IViewDataContainer viewDataContainer, RouteCollection routeCollection) : this(new HtmlHelper(viewContext, viewDataContainer, routeCollection))]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="28" sc="15" el="30" ec="10">Helpers\DnnHelper.cs</location>
            <body hash="d6f9fa3a96a509d4e4e915ca0b9723e6"><![CDATA[this(new HtmlHelper(viewContext, viewDataContainer, routeCollection))
        {
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[protected DnnHelper(HtmlHelper htmlHelper)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="32" sc="9" el="47" ec="10">Helpers\DnnHelper.cs</location>
            <body hash="26c2d9d99e8c33e4ce09d7e5235c6be4"><![CDATA[protected DnnHelper(HtmlHelper htmlHelper)
        {
            HtmlHelper = htmlHelper;

            var controller = htmlHelper.ViewContext.Controller as IDnnController;

            if (controller == null)
            {
                throw new InvalidOperationException("The DnnHelper class can only be used in Views that inherit from DnnWebViewPage");
            }

            DnnPage = controller.DnnPage;

            ModuleContext = controller.ModuleContext;
            LocalResourceFile = controller.LocalResourceFile;
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="LocalizeString">
          <declaration><![CDATA[public string LocalizeString(string key)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="66" sc="9" el="68" ec="10">Helpers\DnnHelper.cs</location>
            <body hash="fdb9cfd70aff46a9da06e018de02d9c8"><![CDATA[{
            return Localization.GetString(key, LocalResourceFile);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="ActiveModule">
          <declaration><![CDATA[public ModuleInfo ActiveModule]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ActivePage">
          <declaration><![CDATA[public TabInfo ActivePage]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="DnnPage">
          <declaration><![CDATA[public Page DnnPage]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="59" sc="31" el="59" ec="35">Helpers\DnnHelper.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="59" sc="36" el="59" ec="40">Helpers\DnnHelper.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="HtmlHelper">
          <declaration><![CDATA[internal HtmlHelper HtmlHelper]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="61" sc="42" el="61" ec="46">Helpers\DnnHelper.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="61" sc="47" el="61" ec="51">Helpers\DnnHelper.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="LocalResourceFile">
          <declaration><![CDATA[public string LocalResourceFile]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="63" sc="43" el="63" ec="47">Helpers\DnnHelper.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="63" sc="48" el="63" ec="52">Helpers\DnnHelper.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ModuleContext">
          <declaration><![CDATA[public ModuleInstanceContext ModuleContext]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="70" sc="54" el="70" ec="58">Helpers\DnnHelper.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="70" sc="59" el="70" ec="63">Helpers\DnnHelper.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="PortalSettings">
          <declaration><![CDATA[public PortalSettings PortalSettings]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="RouteCollection">
          <declaration><![CDATA[public RouteCollection RouteCollection]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="User">
          <declaration><![CDATA[public UserInfo User]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ViewBag">
          <declaration><![CDATA[public dynamic ViewBag]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ViewContext">
          <declaration><![CDATA[public ViewContext ViewContext]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ViewData">
          <declaration><![CDATA[public ViewDataDictionary ViewData]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ViewDataContainer">
          <declaration><![CDATA[public IViewDataContainer ViewDataContainer]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnHelper&lt;TModel&gt;">
      <declaration><![CDATA[public class DnnHelper<TModel> : DnnHelper]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnHelper(ViewContext viewContext, IViewDataContainer viewDataContainer) : this(viewContext, viewDataContainer, RouteTable.Routes)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="13" sc="15" el="15" ec="10">Helpers\DnnHelperOfT.cs</location>
            <body hash="dc2573aa81d223ff87c03c4b9c1e4dc4"><![CDATA[this(viewContext, viewDataContainer, RouteTable.Routes)
        {
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnHelper(ViewContext viewContext, IViewDataContainer viewDataContainer, RouteCollection routeCollection) : base(new HtmlHelper<TModel>(viewContext, viewDataContainer, routeCollection))]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="18" sc="15" el="20" ec="10">Helpers\DnnHelperOfT.cs</location>
            <body hash="e33d0e68bd7e06ea98536b7ff58f8b29"><![CDATA[base(new HtmlHelper<TModel>(viewContext, viewDataContainer, routeCollection))
        {
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="ViewData">
          <declaration><![CDATA[public new ViewDataDictionary<TModel> ViewData]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnHtmlHelper">
      <declaration><![CDATA[public class DnnHtmlHelper]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnHtmlHelper(ViewContext viewContext, IViewDataContainer viewDataContainer) : this(viewContext, viewDataContainer, RouteTable.Routes)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="18" sc="15" el="20" ec="10">Helpers\DnnHtmlHelper.cs</location>
            <body hash="dc2573aa81d223ff87c03c4b9c1e4dc4"><![CDATA[this(viewContext, viewDataContainer, RouteTable.Routes)
        {
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnHtmlHelper(ViewContext viewContext, IViewDataContainer viewDataContainer, RouteCollection routeCollection) : this(new HtmlHelper(viewContext, viewDataContainer, routeCollection))]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="23" sc="15" el="25" ec="10">Helpers\DnnHtmlHelper.cs</location>
            <body hash="d6f9fa3a96a509d4e4e915ca0b9723e6"><![CDATA[this(new HtmlHelper(viewContext, viewDataContainer, routeCollection))
        {
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[protected DnnHtmlHelper(HtmlHelper htmlHelper)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="27" sc="9" el="39" ec="10">Helpers\DnnHtmlHelper.cs</location>
            <body hash="52df4fb94324171219a1e889a7b30568"><![CDATA[protected DnnHtmlHelper(HtmlHelper htmlHelper)
        {
            HtmlHelper = htmlHelper;

            var controller = htmlHelper.ViewContext.Controller as IDnnController;

            if (controller == null)
            {
                throw new InvalidOperationException("The DnnHtmlHelper class can only be used in Views that inherit from DnnWebViewPage");
            }

            ModuleContext = controller.ModuleContext;
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="AntiForgeryToken">
          <declaration><![CDATA[public MvcHtmlString AntiForgeryToken()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="42" sc="9" el="45" ec="10">Helpers\DnnHtmlHelper.cs</location>
            <body hash="93a26f06d7667df652f2b819d9595c52"><![CDATA[{
            ServicesFramework.Instance.RequestAjaxAntiForgerySupport();
            return new MvcHtmlString(String.Empty);
        }]]></body>
          </codeblock>
        </method>
        <method name="AttributeEncode">
          <declaration><![CDATA[public string AttributeEncode(string value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="61" sc="56" el="61" ec="89">Helpers\DnnHtmlHelper.cs</location>
            <body hash="16a1025bdc332b3e92623a12b2e8aa5a"><![CDATA[HtmlHelper.AttributeEncode(value]]></body>
          </codeblock>
        </method>
        <method name="AttributeEncode">
          <declaration><![CDATA[public string AttributeEncode(object value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="63" sc="56" el="63" ec="89">Helpers\DnnHtmlHelper.cs</location>
            <body hash="16a1025bdc332b3e92623a12b2e8aa5a"><![CDATA[HtmlHelper.AttributeEncode(value]]></body>
          </codeblock>
        </method>
        <method name="EnableClientValidation">
          <declaration><![CDATA[public void EnableClientValidation()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="83" sc="49" el="83" ec="84">Helpers\DnnHtmlHelper.cs</location>
            <body hash="014ed2b4d125bce49ab3e5cb5bc2ddc7"><![CDATA[HtmlHelper.EnableClientValidation(]]></body>
          </codeblock>
        </method>
        <method name="EnableClientValidation">
          <declaration><![CDATA[public void EnableClientValidation(bool enabled)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="85" sc="61" el="85" ec="103">Helpers\DnnHtmlHelper.cs</location>
            <body hash="24a39ffa2f384df6d8c5f7415088ec10"><![CDATA[HtmlHelper.EnableClientValidation(enabled]]></body>
          </codeblock>
        </method>
        <method name="EnableUnobtrusiveJavaScript">
          <declaration><![CDATA[public void EnableUnobtrusiveJavaScript()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="87" sc="54" el="87" ec="94">Helpers\DnnHtmlHelper.cs</location>
            <body hash="5a32912d7c10afe5ec9553e368e94b79"><![CDATA[HtmlHelper.EnableUnobtrusiveJavaScript(]]></body>
          </codeblock>
        </method>
        <method name="EnableUnobtrusiveJavaScript">
          <declaration><![CDATA[public void EnableUnobtrusiveJavaScript(bool enabled)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="89" sc="66" el="89" ec="113">Helpers\DnnHtmlHelper.cs</location>
            <body hash="1bd6cb175c4abbf38f242ce79f88737a"><![CDATA[HtmlHelper.EnableUnobtrusiveJavaScript(enabled]]></body>
          </codeblock>
        </method>
        <method name="Encode">
          <declaration><![CDATA[public string Encode(string value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="65" sc="47" el="65" ec="71">Helpers\DnnHtmlHelper.cs</location>
            <body hash="b106299dde76e7feb4d5b24a32ab9613"><![CDATA[HtmlHelper.Encode(value]]></body>
          </codeblock>
        </method>
        <method name="Encode">
          <declaration><![CDATA[public string Encode(object value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="67" sc="47" el="67" ec="71">Helpers\DnnHtmlHelper.cs</location>
            <body hash="b106299dde76e7feb4d5b24a32ab9613"><![CDATA[HtmlHelper.Encode(value]]></body>
          </codeblock>
        </method>
        <method name="FormatValue">
          <declaration><![CDATA[public string FormatValue(object value, string format)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="69" sc="67" el="69" ec="104">Helpers\DnnHtmlHelper.cs</location>
            <body hash="174563d63a95f5e63a2a551d37100edb"><![CDATA[HtmlHelper.FormatValue(value, format]]></body>
          </codeblock>
        </method>
        <method name="GetUnobtrusiveValidationAttributes">
          <declaration><![CDATA[public IDictionary<string, object> GetUnobtrusiveValidationAttributes(string name)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="79" sc="95" el="79" ec="146">Helpers\DnnHtmlHelper.cs</location>
            <body hash="719faa8981d019cf7e75b55ee82d2b2d"><![CDATA[HtmlHelper.GetUnobtrusiveValidationAttributes(name]]></body>
          </codeblock>
        </method>
        <method name="GetUnobtrusiveValidationAttributes">
          <declaration><![CDATA[public IDictionary<string, object> GetUnobtrusiveValidationAttributes(string name, ModelMetadata metadata)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="81" sc="119" el="81" ec="180">Helpers\DnnHtmlHelper.cs</location>
            <body hash="ce665221aa9fefd09094b741391c161f"><![CDATA[HtmlHelper.GetUnobtrusiveValidationAttributes(name, metadata]]></body>
          </codeblock>
        </method>
        <method name="HttpMethodOverride">
          <declaration><![CDATA[public MvcHtmlString HttpMethodOverride(HttpVerbs httpVerb)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="71" sc="72" el="71" ec="111">Helpers\DnnHtmlHelper.cs</location>
            <body hash="328775fb9bb488f78a548e9d179636cd"><![CDATA[HtmlHelper.HttpMethodOverride(httpVerb]]></body>
          </codeblock>
        </method>
        <method name="HttpMethodOverride">
          <declaration><![CDATA[public MvcHtmlString HttpMethodOverride(string httpVerb)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="73" sc="69" el="73" ec="108">Helpers\DnnHtmlHelper.cs</location>
            <body hash="328775fb9bb488f78a548e9d179636cd"><![CDATA[HtmlHelper.HttpMethodOverride(httpVerb]]></body>
          </codeblock>
        </method>
        <method name="Raw">
          <declaration><![CDATA[public IHtmlString Raw(string value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="75" sc="49" el="75" ec="70">Helpers\DnnHtmlHelper.cs</location>
            <body hash="5828bf2f8ba67720d3264b2ecd96bf7c"><![CDATA[HtmlHelper.Raw(value]]></body>
          </codeblock>
        </method>
        <method name="Raw">
          <declaration><![CDATA[public IHtmlString Raw(object value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="77" sc="49" el="77" ec="70">Helpers\DnnHtmlHelper.cs</location>
            <body hash="5828bf2f8ba67720d3264b2ecd96bf7c"><![CDATA[HtmlHelper.Raw(value]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="HtmlHelper">
          <declaration><![CDATA[internal HtmlHelper HtmlHelper]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="47" sc="42" el="47" ec="46">Helpers\DnnHtmlHelper.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="47" sc="47" el="47" ec="51">Helpers\DnnHtmlHelper.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ModuleContext">
          <declaration><![CDATA[public ModuleInstanceContext ModuleContext]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="49" sc="54" el="49" ec="58">Helpers\DnnHtmlHelper.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="49" sc="59" el="49" ec="63">Helpers\DnnHtmlHelper.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="RouteCollection">
          <declaration><![CDATA[public RouteCollection RouteCollection]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="51" sc="51" el="51" ec="77">Helpers\DnnHtmlHelper.cs</location>
            <body hash="f4ee8e7d948646325ad4d46c754de2e0"><![CDATA[HtmlHelper.RouteCollectio]]></body>
          </codeblock>
        </property>
        <property name="ViewBag">
          <declaration><![CDATA[public dynamic ViewBag]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="53" sc="35" el="53" ec="53">Helpers\DnnHtmlHelper.cs</location>
            <body hash="f88c9baa1bcfd2493520f17c93f59064"><![CDATA[HtmlHelper.ViewBa]]></body>
          </codeblock>
        </property>
        <property name="ViewContext">
          <declaration><![CDATA[public ViewContext ViewContext]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="55" sc="43" el="55" ec="65">Helpers\DnnHtmlHelper.cs</location>
            <body hash="d7f51eb4211b26280fce100b9b6cc333"><![CDATA[HtmlHelper.ViewContex]]></body>
          </codeblock>
        </property>
        <property name="ViewData">
          <declaration><![CDATA[public ViewDataDictionary ViewData]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="57" sc="47" el="57" ec="66">Helpers\DnnHtmlHelper.cs</location>
            <body hash="4c200b74d5f1da90ce42ced10f734e3f"><![CDATA[HtmlHelper.ViewDat]]></body>
          </codeblock>
        </property>
        <property name="ViewDataContainer">
          <declaration><![CDATA[public IViewDataContainer ViewDataContainer]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="59" sc="56" el="59" ec="84">Helpers\DnnHtmlHelper.cs</location>
            <body hash="06a271456fee89f2ed8505c0f9fb3a99"><![CDATA[HtmlHelper.ViewDataContaine]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnHtmlHelper&lt;TModel&gt;">
      <declaration><![CDATA[public class DnnHtmlHelper<TModel> : DnnHtmlHelper]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnHtmlHelper(ViewContext viewContext, IViewDataContainer viewDataContainer) : this(viewContext, viewDataContainer, RouteTable.Routes)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="13" sc="15" el="15" ec="10">Helpers\DnnHtmlHelperOfT.cs</location>
            <body hash="dc2573aa81d223ff87c03c4b9c1e4dc4"><![CDATA[this(viewContext, viewDataContainer, RouteTable.Routes)
        {
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnHtmlHelper(ViewContext viewContext, IViewDataContainer viewDataContainer, RouteCollection routeCollection) : base(new HtmlHelper<TModel>(viewContext, viewDataContainer, routeCollection))]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="18" sc="15" el="21" ec="10">Helpers\DnnHtmlHelperOfT.cs</location>
            <body hash="3c9bd63ed19a234da5ccdce7a6fe4f9b"><![CDATA[base(new HtmlHelper<TModel>(viewContext, viewDataContainer, routeCollection))
 
        {
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="HtmlHelper">
          <declaration><![CDATA[internal new HtmlHelper<TModel> HtmlHelper]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="23" sc="55" el="23" ec="90">Helpers\DnnHtmlHelperOfT.cs</location>
            <body hash="4b1e6fd3b16de09109b7934343230ce2"><![CDATA[(HtmlHelper<TModel>)base.HtmlHelpe]]></body>
          </codeblock>
        </property>
        <property name="ViewBag">
          <declaration><![CDATA[public new object ViewBag]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="25" sc="38" el="25" ec="56">Helpers\DnnHtmlHelperOfT.cs</location>
            <body hash="f88c9baa1bcfd2493520f17c93f59064"><![CDATA[HtmlHelper.ViewBa]]></body>
          </codeblock>
        </property>
        <property name="ViewData">
          <declaration><![CDATA[public new ViewDataDictionary<TModel> ViewData]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="27" sc="59" el="27" ec="78">Helpers\DnnHtmlHelperOfT.cs</location>
            <body hash="4c200b74d5f1da90ce42ced10f734e3f"><![CDATA[HtmlHelper.ViewDat]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnLabelExtensions">
      <declaration><![CDATA[public static class DnnLabelExtensions]]></declaration>
      <documentation>
      </documentation>
      <constructors>
      </constructors>
      <methods>
        <method name="Label">
          <declaration><![CDATA[public static MvcHtmlString Label<TModel>(this DnnHelper<TModel> dnnHelper, string expression, string labelText, string helpText)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="15" sc="9" el="17" ec="10">Helpers\DnnLabelExtensions.cs</location>
            <body hash="af5816889f7a180a23513509a285a76e"><![CDATA[{
            return Label(dnnHelper, expression, labelText, helpText, null);
        }]]></body>
          </codeblock>
        </method>
        <method name="Label">
          <declaration><![CDATA[public static MvcHtmlString Label<TModel>(this DnnHelper<TModel> dnnHelper, string expression, string labelText, string helpText, object htmlAttributes)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="20" sc="9" el="22" ec="10">Helpers\DnnLabelExtensions.cs</location>
            <body hash="8ab0a9922ef702debfc4867712f5da28"><![CDATA[{
            return Label(dnnHelper, expression, labelText, helpText, HtmlHelper.AnonymousObjectToHtmlAttributes(htmlAttributes));
        }]]></body>
          </codeblock>
        </method>
        <method name="Label">
          <declaration><![CDATA[public static MvcHtmlString Label<TModel>(this DnnHelper<TModel> dnnHelper, string expression, string labelText, string helpText, IDictionary<string, object> htmlAttributes)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="25" sc="9" el="34" ec="10">Helpers\DnnLabelExtensions.cs</location>
            <body hash="401f4b6ba2c2284c38eb55b7ad98af8f"><![CDATA[{
            var htmlHelper = dnnHelper.HtmlHelper as HtmlHelper<TModel>;

            return LabelHelper(htmlHelper,
                               ModelMetadata.FromStringExpression(expression, htmlHelper.ViewData),
                               expression,
                               labelText,
                               helpText,
                               htmlAttributes);
        }]]></body>
          </codeblock>
        </method>
        <method name="LabelFor">
          <declaration><![CDATA[public static MvcHtmlString LabelFor<TModel, TValue>(this DnnHelper<TModel> dnnHelper, Expression<Func<TModel, TValue>> expression)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="37" sc="9" el="39" ec="10">Helpers\DnnLabelExtensions.cs</location>
            <body hash="c7e446a4af38c8b83dc3bd27f998df6d"><![CDATA[{
            return LabelFor(dnnHelper, expression, null, null, null);
        }]]></body>
          </codeblock>
        </method>
        <method name="LabelFor">
          <declaration><![CDATA[public static MvcHtmlString LabelFor<TModel, TValue>(this DnnHelper<TModel> dnnHelper, Expression<Func<TModel, TValue>> expression, object htmlAttributes)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="42" sc="9" el="44" ec="10">Helpers\DnnLabelExtensions.cs</location>
            <body hash="60849cd24f53df0e95daa3271dfbabb3"><![CDATA[{
            return LabelFor(dnnHelper, expression, null, null, htmlAttributes);
        }]]></body>
          </codeblock>
        </method>
        <method name="LabelFor">
          <declaration><![CDATA[public static MvcHtmlString LabelFor<TModel, TValue>(this DnnHelper<TModel> dnnHelper, Expression<Func<TModel, TValue>> expression, IDictionary<string, object> htmlAttributes)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="47" sc="9" el="49" ec="10">Helpers\DnnLabelExtensions.cs</location>
            <body hash="60849cd24f53df0e95daa3271dfbabb3"><![CDATA[{
            return LabelFor(dnnHelper, expression, null, null, htmlAttributes);
        }]]></body>
          </codeblock>
        </method>
        <method name="LabelFor">
          <declaration><![CDATA[public static MvcHtmlString LabelFor<TModel, TValue>(this DnnHelper<TModel> dnnHelper, Expression<Func<TModel, TValue>> expression, string helpText)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="52" sc="9" el="54" ec="10">Helpers\DnnLabelExtensions.cs</location>
            <body hash="4b8918724741d11ad1bde1b5eb465b0d"><![CDATA[{
            return LabelFor(dnnHelper, expression, null, helpText, null);
        }]]></body>
          </codeblock>
        </method>
        <method name="LabelFor">
          <declaration><![CDATA[public static MvcHtmlString LabelFor<TModel, TValue>(this DnnHelper<TModel> dnnHelper, Expression<Func<TModel, TValue>> expression, string helpText, object htmlAttributes)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="57" sc="9" el="59" ec="10">Helpers\DnnLabelExtensions.cs</location>
            <body hash="7cbf19489055a26a07017ac6140b9331"><![CDATA[{
            return LabelFor(dnnHelper, expression, null, helpText, htmlAttributes);
        }]]></body>
          </codeblock>
        </method>
        <method name="LabelFor">
          <declaration><![CDATA[public static MvcHtmlString LabelFor<TModel, TValue>(this DnnHelper<TModel> dnnHelper, Expression<Func<TModel, TValue>> expression, string helpText, IDictionary<string, object> htmlAttributes)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="62" sc="9" el="64" ec="10">Helpers\DnnLabelExtensions.cs</location>
            <body hash="7cbf19489055a26a07017ac6140b9331"><![CDATA[{
            return LabelFor(dnnHelper, expression, null, helpText, htmlAttributes);
        }]]></body>
          </codeblock>
        </method>
        <method name="LabelFor">
          <declaration><![CDATA[public static MvcHtmlString LabelFor<TModel, TValue>(this DnnHelper<TModel> dnnHelper, Expression<Func<TModel, TValue>> expression, string labelText, string helpText)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="67" sc="9" el="69" ec="10">Helpers\DnnLabelExtensions.cs</location>
            <body hash="30b7a7d837bd946cb2985536ea5ff0a2"><![CDATA[{
            return LabelFor(dnnHelper, expression, labelText, helpText, null);
        }]]></body>
          </codeblock>
        </method>
        <method name="LabelFor">
          <declaration><![CDATA[public static MvcHtmlString LabelFor<TModel, TValue>(this DnnHelper<TModel> dnnHelper, Expression<Func<TModel, TValue>> expression, string labelText, string helpText, object htmlAttributes)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="72" sc="9" el="74" ec="10">Helpers\DnnLabelExtensions.cs</location>
            <body hash="8217fcc0d3f2c441c4eabd14d5b1dae3"><![CDATA[{
            return LabelFor(dnnHelper, expression, labelText, helpText, HtmlHelper.AnonymousObjectToHtmlAttributes(htmlAttributes));
        }]]></body>
          </codeblock>
        </method>
        <method name="LabelFor">
          <declaration><![CDATA[public static MvcHtmlString LabelFor<TModel, TValue>(this DnnHelper<TModel> dnnHelper, Expression<Func<TModel, TValue>> expression, string labelText, string helpText, IDictionary<string, object> htmlAttributes)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="77" sc="9" el="86" ec="10">Helpers\DnnLabelExtensions.cs</location>
            <body hash="4752ae18175ebbeed7e0f704656d78ee"><![CDATA[{
            var htmlHelper = dnnHelper.HtmlHelper as HtmlHelper<TModel>;

            return LabelHelper(htmlHelper,
                               ModelMetadata.FromLambdaExpression(expression, dnnHelper.ViewData),
                               ExpressionHelper.GetExpressionText(expression),
                               labelText,
                               helpText,
                               htmlAttributes);
        }]]></body>
          </codeblock>
        </method>
        <method name="LabelHelper">
          <declaration><![CDATA[internal static MvcHtmlString LabelHelper(HtmlHelper html, ModelMetadata metadata, string htmlFieldName, string labelText = null, string helpText = null, IDictionary<string, object> htmlAttributes = null)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="89" sc="9" el="95" ec="10">Helpers\DnnLabelExtensions.cs</location>
            <body hash="24e8131b5ad74d8a5e6945628a77b128"><![CDATA[{
            string resolvedLabelText = labelText ?? metadata.DisplayName ?? metadata.PropertyName ?? htmlFieldName.Split('.').Last();
            string resolvedHelpText = helpText ?? metadata.Description ?? metadata.Description ?? null;
            string resolvedId = TagBuilder.CreateSanitizedId(html.ViewContext.ViewData.TemplateInfo.GetFullHtmlFieldName(htmlFieldName));

            return LabelHelper(html, resolvedId, resolvedLabelText, resolvedHelpText, htmlAttributes);
        }]]></body>
          </codeblock>
        </method>
        <method name="LabelHelper">
          <declaration><![CDATA[public static MvcHtmlString LabelHelper(HtmlHelper html, string htmlFieldName, string labelText, string helpText = null, IDictionary<string, object> htmlAttributes = null)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="98" sc="9" el="149" ec="10">Helpers\DnnLabelExtensions.cs</location>
            <body hash="5326645880b99499a68607700d97028e"><![CDATA[{
            if (String.IsNullOrEmpty(labelText))
            {
                return MvcHtmlString.Empty;
            }

            var divTag = new TagBuilder("div");
            divTag.Attributes.Add("class", "dnnLabel");
            divTag.Attributes.Add("style", "position:relative;");
            divTag.MergeAttributes(htmlAttributes, true);

            var labelTag = new TagBuilder("label");
            labelTag.Attributes.Add("for", htmlFieldName);

            var spanTag = new TagBuilder("span");
            spanTag.SetInnerText(labelText);

            labelTag.InnerHtml = spanTag.ToString();

            divTag.InnerHtml = labelTag.ToString();

            var aTag = new TagBuilder("a");
            aTag.Attributes.Add("class", "dnnFormHelp");
            aTag.Attributes.Add("href", "#");
            aTag.Attributes.Add("tabIndex", "-1");

            divTag.InnerHtml += aTag.ToString();

            var toolTipTag = new TagBuilder("div");
            toolTipTag.Attributes.Add("class", "dnnTooltip");

            var toolTipContentTag = new TagBuilder("div");
            toolTipContentTag.Attributes.Add("class", "dnnFormHelpContent dnnClear");

            spanTag = new TagBuilder("span");
            spanTag.Attributes.Add("class", "dnnHelpText");
            spanTag.SetInnerText(helpText);

            aTag = new TagBuilder("a");
            aTag.Attributes.Add("class", "pinHelp");
            aTag.Attributes.Add("href", "#");

            toolTipContentTag.InnerHtml = spanTag.ToString();
            toolTipContentTag.InnerHtml += aTag.ToString();

            toolTipTag.InnerHtml = toolTipContentTag.ToString();

            divTag.InnerHtml += toolTipTag.ToString();


            return new MvcHtmlString(divTag.ToString(TagRenderMode.Normal));
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnUrlHelper">
      <declaration><![CDATA[public class DnnUrlHelper]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnUrlHelper(ViewContext viewContext) : this(viewContext, RouteTable.Routes)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="21" sc="15" el="23" ec="10">Helpers\DnnUrlHelper.cs</location>
            <body hash="ea900e50fa5709cf3d42cf03954fe9fe"><![CDATA[this(viewContext , RouteTable.Routes)
        {
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnUrlHelper(ViewContext viewContext, RouteCollection routeCollection)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="25" sc="9" el="41" ec="10">Helpers\DnnUrlHelper.cs</location>
            <body hash="ab4826b0075a2f76edc0077ae9a3050b"><![CDATA[public DnnUrlHelper(ViewContext viewContext, RouteCollection routeCollection)
        {
            Requires.NotNull("viewContext", viewContext);

            UrlHelper = new UrlHelper(viewContext.RequestContext, routeCollection);
            
            _viewContext = viewContext;

            _controller = viewContext.Controller as IDnnController;

            if (_controller == null)
            {
                throw new InvalidOperationException("The DnnUrlHelper class can only be used in Views that inherit from DnnWebViewPage");
            }

            ModuleContext = _controller.ModuleContext;
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="Action">
          <declaration><![CDATA[public virtual string Action()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="79" sc="9" el="81" ec="10">Helpers\DnnUrlHelper.cs</location>
            <body hash="5352e2e28e0abbc50f15fdf3a5f83494"><![CDATA[{
            return _viewContext.RequestContext.HttpContext.Request.RawUrl;
        }]]></body>
          </codeblock>
        </method>
        <method name="Action">
          <declaration><![CDATA[public virtual string Action(string actionName)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="84" sc="9" el="86" ec="10">Helpers\DnnUrlHelper.cs</location>
            <body hash="cb5c4c1c5328e5cec31ecea18555953d"><![CDATA[{
            return GenerateUrl(actionName, null, new RouteValueDictionary());
        }]]></body>
          </codeblock>
        </method>
        <method name="Action">
          <declaration><![CDATA[public virtual string Action(string actionName, RouteValueDictionary routeValues)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="89" sc="9" el="91" ec="10">Helpers\DnnUrlHelper.cs</location>
            <body hash="5af43b560d7aef2eeabfeb8343072123"><![CDATA[{
            return GenerateUrl(actionName, null, routeValues);
        }]]></body>
          </codeblock>
        </method>
        <method name="Action">
          <declaration><![CDATA[public virtual string Action(string actionName, object routeValues)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="94" sc="9" el="96" ec="10">Helpers\DnnUrlHelper.cs</location>
            <body hash="ec22b4eebf0e543572a45738fbb15352"><![CDATA[{
            return GenerateUrl(actionName, null, TypeHelper.ObjectToDictionary(routeValues));
        }]]></body>
          </codeblock>
        </method>
        <method name="Action">
          <declaration><![CDATA[public virtual string Action(string actionName, string controllerName)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="99" sc="9" el="101" ec="10">Helpers\DnnUrlHelper.cs</location>
            <body hash="d95a8b841728f9f5f31a00879d304eb7"><![CDATA[{
            return GenerateUrl(actionName, controllerName, new RouteValueDictionary());
        }]]></body>
          </codeblock>
        </method>
        <method name="Action">
          <declaration><![CDATA[public virtual string Action(string actionName, string controllerName, RouteValueDictionary routeValues)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="104" sc="9" el="106" ec="10">Helpers\DnnUrlHelper.cs</location>
            <body hash="36f08713e6f4b405fa86751f03ef7384"><![CDATA[{
            return GenerateUrl(actionName, controllerName, routeValues);
        }]]></body>
          </codeblock>
        </method>
        <method name="Action">
          <declaration><![CDATA[public virtual string Action(string actionName, string controllerName, object routeValues)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="109" sc="9" el="111" ec="10">Helpers\DnnUrlHelper.cs</location>
            <body hash="9367a3fedfdfec67eaebadbed5034d9f"><![CDATA[{
            return GenerateUrl(actionName, controllerName, TypeHelper.ObjectToDictionary(routeValues));
        }]]></body>
          </codeblock>
        </method>
        <method name="Content">
          <declaration><![CDATA[public virtual string Content(string contentPath)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="61" sc="9" el="63" ec="10">Helpers\DnnUrlHelper.cs</location>
            <body hash="455dd80f66100d79da2801204977e421"><![CDATA[{
            return UrlHelper.Content(contentPath);
        }]]></body>
          </codeblock>
        </method>
        <method name="Encode">
          <declaration><![CDATA[public virtual string Encode(string url)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="48" sc="9" el="50" ec="10">Helpers\DnnUrlHelper.cs</location>
            <body hash="a46b10dba30ed650e177a9457fb2ea9f"><![CDATA[{
            return HttpUtility.UrlEncode(url);
        }]]></body>
          </codeblock>
        </method>
        <method name="GenerateUrl">
          <declaration><![CDATA[private string GenerateUrl(string actionName, string controllerName, RouteValueDictionary routeValues)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="114" sc="9" el="118" ec="10">Helpers\DnnUrlHelper.cs</location>
            <body hash="e14d774a8eaaab6f74a099f9f35527d4"><![CDATA[{
            routeValues["controller"] = controllerName ?? _controller.ControllerContext?.RouteData.Values["controller"];
            routeValues["action"] = actionName;
            return ModuleRoutingProvider.Instance().GenerateUrl(routeValues, ModuleContext);
        }]]></body>
          </codeblock>
        </method>
        <method name="IsLocalUrl">
          <declaration><![CDATA[public virtual bool IsLocalUrl(string url)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="74" sc="9" el="76" ec="10">Helpers\DnnUrlHelper.cs</location>
            <body hash="ff36397887c197ecbdce6415dd6bc6c9"><![CDATA[{
            return UrlHelper.IsLocalUrl(url);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_controller">
          <declaration><![CDATA[private readonly IDnnController _controller;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_viewContext">
          <declaration><![CDATA[private readonly ViewContext _viewContext;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="ModuleContext">
          <declaration><![CDATA[public ModuleInstanceContext ModuleContext]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="45" sc="54" el="45" ec="58">Helpers\DnnUrlHelper.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="45" sc="59" el="45" ec="63">Helpers\DnnUrlHelper.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="UrlHelper">
          <declaration><![CDATA[internal UrlHelper UrlHelper]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="43" sc="40" el="43" ec="44">Helpers\DnnUrlHelper.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="43" sc="45" el="43" ec="49">Helpers\DnnUrlHelper.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="HtmlDisplayExtensions">
      <declaration><![CDATA[public static class HtmlDisplayExtensions]]></declaration>
      <documentation>
      </documentation>
      <constructors>
      </constructors>
      <methods>
        <method name="Display">
          <declaration><![CDATA[public static MvcHtmlString Display(this DnnHtmlHelper html, string expression)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="26" sc="9" el="28" ec="10">Helpers\HtmlDisplayExtensions.cs</location>
            <body hash="d4d9c131d36fd629787437aebd89c0ea"><![CDATA[{
            return html.HtmlHelper.Display(expression);
        }]]></body>
          </codeblock>
        </method>
        <method name="Display">
          <declaration><![CDATA[public static MvcHtmlString Display(this DnnHtmlHelper html, string expression, object additionalViewData)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="39" sc="9" el="41" ec="10">Helpers\HtmlDisplayExtensions.cs</location>
            <body hash="bfa5ee353e92faf5a3502cf216be5361"><![CDATA[{
            return html.HtmlHelper.Display(expression, additionalViewData);
        }]]></body>
          </codeblock>
        </method>
        <method name="Display">
          <declaration><![CDATA[public static MvcHtmlString Display(this DnnHtmlHelper html, string expression, string templateName)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="52" sc="9" el="54" ec="10">Helpers\HtmlDisplayExtensions.cs</location>
            <body hash="c754e6a02a6e76b86afa188bd4d2ce44"><![CDATA[{
            return html.HtmlHelper.Display(expression, templateName);
        }]]></body>
          </codeblock>
        </method>
        <method name="Display">
          <declaration><![CDATA[public static MvcHtmlString Display(this DnnHtmlHelper html, string expression, string templateName, object additionalViewData)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="65" sc="9" el="67" ec="10">Helpers\HtmlDisplayExtensions.cs</location>
            <body hash="6329b9db1aff7c1b17b36a0256944c18"><![CDATA[{
            return html.HtmlHelper.Display(expression, templateName, additionalViewData);
        }]]></body>
          </codeblock>
        </method>
        <method name="Display">
          <declaration><![CDATA[public static MvcHtmlString Display(this DnnHtmlHelper html, string expression, string templateName, string htmlFieldName)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="78" sc="9" el="80" ec="10">Helpers\HtmlDisplayExtensions.cs</location>
            <body hash="eb57178a58b26a50fd13aed915a7b441"><![CDATA[{
            return html.HtmlHelper.Display(expression, templateName, htmlFieldName);
        }]]></body>
          </codeblock>
        </method>
        <method name="Display">
          <declaration><![CDATA[public static MvcHtmlString Display(this DnnHtmlHelper html, string expression, string templateName, string htmlFieldName, object additionalViewData)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="91" sc="9" el="93" ec="10">Helpers\HtmlDisplayExtensions.cs</location>
            <body hash="669b479e2b9ee4ba7080e433f24cbbb2"><![CDATA[{
            return html.HtmlHelper.Display(expression, templateName, htmlFieldName, additionalViewData);
        }]]></body>
          </codeblock>
        </method>
        <method name="DisplayFor">
          <declaration><![CDATA[public static MvcHtmlString DisplayFor<TModel, TValue>(this DnnHtmlHelper<TModel> html, Expression<Func<TModel, TValue>> expression)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="104" sc="9" el="106" ec="10">Helpers\HtmlDisplayExtensions.cs</location>
            <body hash="01b04999b3918fec6c7fefd7f8725076"><![CDATA[{
            return html.HtmlHelper.DisplayFor(expression);
        }]]></body>
          </codeblock>
        </method>
        <method name="DisplayFor">
          <declaration><![CDATA[public static MvcHtmlString DisplayFor<TModel, TValue>(this DnnHtmlHelper<TModel> html, Expression<Func<TModel, TValue>> expression, object additionalViewData)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="117" sc="9" el="119" ec="10">Helpers\HtmlDisplayExtensions.cs</location>
            <body hash="f4234672584b6d3510f92b029fcb0bc1"><![CDATA[{
            return html.HtmlHelper.DisplayFor(expression, additionalViewData);
        }]]></body>
          </codeblock>
        </method>
        <method name="DisplayFor">
          <declaration><![CDATA[public static MvcHtmlString DisplayFor<TModel, TValue>(this DnnHtmlHelper<TModel> html, Expression<Func<TModel, TValue>> expression, string templateName)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="130" sc="9" el="132" ec="10">Helpers\HtmlDisplayExtensions.cs</location>
            <body hash="c760b46ddc5f216d04a6d50b4414c511"><![CDATA[{
            return html.HtmlHelper.DisplayFor(expression, templateName);
        }]]></body>
          </codeblock>
        </method>
        <method name="DisplayFor">
          <declaration><![CDATA[public static MvcHtmlString DisplayFor<TModel, TValue>(this DnnHtmlHelper<TModel> html, Expression<Func<TModel, TValue>> expression, string templateName, object additionalViewData)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="143" sc="9" el="145" ec="10">Helpers\HtmlDisplayExtensions.cs</location>
            <body hash="f1564cce13e2f977386ff7a1e4366afe"><![CDATA[{
            return html.HtmlHelper.DisplayFor(expression, templateName, additionalViewData);
        }]]></body>
          </codeblock>
        </method>
        <method name="DisplayFor">
          <declaration><![CDATA[public static MvcHtmlString DisplayFor<TModel, TValue>(this DnnHtmlHelper<TModel> html, Expression<Func<TModel, TValue>> expression, string templateName, string htmlFieldName)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="156" sc="9" el="158" ec="10">Helpers\HtmlDisplayExtensions.cs</location>
            <body hash="fee5730f571bd613016678aa5603b092"><![CDATA[{
            return html.HtmlHelper.DisplayFor(expression, templateName, htmlFieldName);
        }]]></body>
          </codeblock>
        </method>
        <method name="DisplayFor">
          <declaration><![CDATA[public static MvcHtmlString DisplayFor<TModel, TValue>(this DnnHtmlHelper<TModel> html, Expression<Func<TModel, TValue>> expression, string templateName, string htmlFieldName, object additionalViewData)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="169" sc="9" el="171" ec="10">Helpers\HtmlDisplayExtensions.cs</location>
            <body hash="c2f3f52d435045e905777d1dfa7e3b0f"><![CDATA[{
            return html.HtmlHelper.DisplayFor(expression, templateName, htmlFieldName, additionalViewData);
        }]]></body>
          </codeblock>
        </method>
        <method name="DisplayForModel">
          <declaration><![CDATA[public static MvcHtmlString DisplayForModel(this DnnHtmlHelper html)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="182" sc="9" el="184" ec="10">Helpers\HtmlDisplayExtensions.cs</location>
            <body hash="05a73bdafbf71efa1511d49e209e38c9"><![CDATA[{
            return html.HtmlHelper.DisplayForModel( html.ViewData.ModelMetadata);
        }]]></body>
          </codeblock>
        </method>
        <method name="DisplayForModel">
          <declaration><![CDATA[public static MvcHtmlString DisplayForModel(this DnnHtmlHelper html, object additionalViewData)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="195" sc="9" el="197" ec="10">Helpers\HtmlDisplayExtensions.cs</location>
            <body hash="11b89c0c2d280113853aaea2557738f2"><![CDATA[{
            return html.HtmlHelper.DisplayForModel(additionalViewData);
        }]]></body>
          </codeblock>
        </method>
        <method name="DisplayForModel">
          <declaration><![CDATA[public static MvcHtmlString DisplayForModel(this DnnHtmlHelper html, string templateName)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="208" sc="9" el="210" ec="10">Helpers\HtmlDisplayExtensions.cs</location>
            <body hash="71dff8796cdfcf835a7f6a1a8dd76b35"><![CDATA[{
            return html.HtmlHelper.DisplayForModel(templateName);
        }]]></body>
          </codeblock>
        </method>
        <method name="DisplayForModel">
          <declaration><![CDATA[public static MvcHtmlString DisplayForModel(this DnnHtmlHelper html, string templateName, object additionalViewData)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="221" sc="9" el="223" ec="10">Helpers\HtmlDisplayExtensions.cs</location>
            <body hash="4d9bfdd3bcbe138eee57cf3cb9aca570"><![CDATA[{
            return html.HtmlHelper.DisplayForModel(string.Empty, templateName, additionalViewData);
        }]]></body>
          </codeblock>
        </method>
        <method name="DisplayForModel">
          <declaration><![CDATA[public static MvcHtmlString DisplayForModel(this DnnHtmlHelper html, string templateName, string htmlFieldName)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="234" sc="9" el="236" ec="10">Helpers\HtmlDisplayExtensions.cs</location>
            <body hash="7c726ce4ec977174d5c82de9fc730ccf"><![CDATA[{
            return html.HtmlHelper.DisplayForModel(htmlFieldName, templateName);
        }]]></body>
          </codeblock>
        </method>
        <method name="DisplayForModel">
          <declaration><![CDATA[public static MvcHtmlString DisplayForModel(this DnnHtmlHelper html, string templateName, string htmlFieldName, object additionalViewData)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="247" sc="9" el="249" ec="10">Helpers\HtmlDisplayExtensions.cs</location>
            <body hash="79cd8ec396303e76262cc59568d5e891"><![CDATA[{
            return html.HtmlHelper.DisplayForModel(htmlFieldName, templateName, additionalViewData);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="HtmlDisplayNameExtensions">
      <declaration><![CDATA[public static class HtmlDisplayNameExtensions]]></declaration>
      <documentation>
      </documentation>
      <constructors>
      </constructors>
      <methods>
        <method name="DisplayName">
          <declaration><![CDATA[public static MvcHtmlString DisplayName(this DnnHtmlHelper html, string expression)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="26" sc="9" el="28" ec="10">Helpers\HtmlDisplayNameExtensions.cs</location>
            <body hash="986ddbada9d23c5b58a9304d39b6959e"><![CDATA[{
            return html.HtmlHelper.DisplayName(expression);
        }]]></body>
          </codeblock>
        </method>
        <method name="DisplayNameFor">
          <declaration><![CDATA[public static MvcHtmlString DisplayNameFor<TModel, TValue>(this DnnHtmlHelper<IEnumerable<TModel>> html, Expression<Func<TModel, TValue>> expression)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="39" sc="9" el="41" ec="10">Helpers\HtmlDisplayNameExtensions.cs</location>
            <body hash="80034318435cb0abe4e23b3306290f51"><![CDATA[{
            return html.HtmlHelper.DisplayNameFor(expression);
        }]]></body>
          </codeblock>
        </method>
        <method name="DisplayNameFor">
          <declaration><![CDATA[public static MvcHtmlString DisplayNameFor<TModel, TValue>(this DnnHtmlHelper<TModel> html, Expression<Func<TModel, TValue>> expression)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="52" sc="9" el="54" ec="10">Helpers\HtmlDisplayNameExtensions.cs</location>
            <body hash="80034318435cb0abe4e23b3306290f51"><![CDATA[{
            return html.HtmlHelper.DisplayNameFor(expression);
        }]]></body>
          </codeblock>
        </method>
        <method name="DisplayNameForModel">
          <declaration><![CDATA[public static MvcHtmlString DisplayNameForModel(this DnnHtmlHelper html)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="65" sc="9" el="67" ec="10">Helpers\HtmlDisplayNameExtensions.cs</location>
            <body hash="962163f6c9d7cf9a956e5ca6c24e415c"><![CDATA[{
            return html.HtmlHelper.DisplayNameForModel();
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="HtmlDisplayTextExtensions">
      <declaration><![CDATA[public static class HtmlDisplayTextExtensions]]></declaration>
      <documentation>
      </documentation>
      <constructors>
      </constructors>
      <methods>
        <method name="DisplayText">
          <declaration><![CDATA[public static MvcHtmlString DisplayText(this DnnHtmlHelper html, string name)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="26" sc="9" el="28" ec="10">Helpers\HtmlDisplayTextExtensions.cs</location>
            <body hash="4fe8b249acbad6035b223fb0241736be"><![CDATA[{
            return html.HtmlHelper.DisplayText(name);
        }]]></body>
          </codeblock>
        </method>
        <method name="DisplayTextFor">
          <declaration><![CDATA[public static MvcHtmlString DisplayTextFor<TModel, TResult>(this DnnHtmlHelper<TModel> html, Expression<Func<TModel, TResult>> expression)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="39" sc="9" el="42" ec="10">Helpers\HtmlDisplayTextExtensions.cs</location>
            <body hash="5a9f3ab6dd4bf7e8ff03d481b367801a"><![CDATA[{
            var htmlHelper = html.HtmlHelper as HtmlHelper<TModel>;
            return htmlHelper.DisplayTextFor(expression);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="HtmlEditorExtensions">
      <declaration><![CDATA[public static class HtmlEditorExtensions]]></declaration>
      <documentation>
      </documentation>
      <constructors>
      </constructors>
      <methods>
        <method name="Editor">
          <declaration><![CDATA[public static MvcHtmlString Editor(this DnnHtmlHelper html, string expression)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="25" sc="9" el="27" ec="10">Helpers\HtmlEditorExtensions.cs</location>
            <body hash="b5a034eba8224a67e28273886197b0ab"><![CDATA[{
            return html.HtmlHelper.Editor(expression);
        }]]></body>
          </codeblock>
        </method>
        <method name="Editor">
          <declaration><![CDATA[public static MvcHtmlString Editor(this DnnHtmlHelper html, string expression, object additionalViewData)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="38" sc="9" el="40" ec="10">Helpers\HtmlEditorExtensions.cs</location>
            <body hash="0b5fd6a511d6d606154ba9e83db02fbb"><![CDATA[{
            return html.HtmlHelper.Editor(expression,  additionalViewData);
        }]]></body>
          </codeblock>
        </method>
        <method name="Editor">
          <declaration><![CDATA[public static MvcHtmlString Editor(this DnnHtmlHelper html, string expression, string templateName)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="51" sc="9" el="53" ec="10">Helpers\HtmlEditorExtensions.cs</location>
            <body hash="897db8671bb7d38a36a5bb9c59edf694"><![CDATA[{
            return html.HtmlHelper.Editor(expression, templateName);
        }]]></body>
          </codeblock>
        </method>
        <method name="Editor">
          <declaration><![CDATA[public static MvcHtmlString Editor(this DnnHtmlHelper html, string expression, string templateName, object additionalViewData)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="64" sc="9" el="66" ec="10">Helpers\HtmlEditorExtensions.cs</location>
            <body hash="f12032667cbd0e4104d395356ef8eaf1"><![CDATA[{
            return html.HtmlHelper.Editor(expression, templateName, additionalViewData);
        }]]></body>
          </codeblock>
        </method>
        <method name="Editor">
          <declaration><![CDATA[public static MvcHtmlString Editor(this DnnHtmlHelper html, string expression, string templateName, string htmlFieldName)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="77" sc="9" el="79" ec="10">Helpers\HtmlEditorExtensions.cs</location>
            <body hash="c5e52be1d4e254608a9f363b80ce1c12"><![CDATA[{
            return html.HtmlHelper.Editor(expression, templateName, htmlFieldName);
        }]]></body>
          </codeblock>
        </method>
        <method name="Editor">
          <declaration><![CDATA[public static MvcHtmlString Editor(this DnnHtmlHelper html, string expression, string templateName, string htmlFieldName, object additionalViewData)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="90" sc="9" el="92" ec="10">Helpers\HtmlEditorExtensions.cs</location>
            <body hash="4b009d43b8b314e3b12130951208c62c"><![CDATA[{
            return html.HtmlHelper.Editor(expression, templateName, htmlFieldName, additionalViewData);
        }]]></body>
          </codeblock>
        </method>
        <method name="EditorFor">
          <declaration><![CDATA[public static MvcHtmlString EditorFor<TModel, TValue>(this DnnHtmlHelper<TModel> html, Expression<Func<TModel, TValue>> expression)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="103" sc="9" el="105" ec="10">Helpers\HtmlEditorExtensions.cs</location>
            <body hash="95a115f298d7f7404500511e3d09921a"><![CDATA[{
            return html.HtmlHelper.EditorFor(expression);
        }]]></body>
          </codeblock>
        </method>
        <method name="EditorFor">
          <declaration><![CDATA[public static MvcHtmlString EditorFor<TModel, TValue>(this DnnHtmlHelper<TModel> html, Expression<Func<TModel, TValue>> expression, object additionalViewData)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="116" sc="9" el="118" ec="10">Helpers\HtmlEditorExtensions.cs</location>
            <body hash="2a20d1cce85e4accd3e5399855d2d2c2"><![CDATA[{
            return html.HtmlHelper.EditorFor(expression, additionalViewData);
        }]]></body>
          </codeblock>
        </method>
        <method name="EditorFor">
          <declaration><![CDATA[public static MvcHtmlString EditorFor<TModel, TValue>(this DnnHtmlHelper<TModel> html, Expression<Func<TModel, TValue>> expression, string templateName)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="129" sc="9" el="131" ec="10">Helpers\HtmlEditorExtensions.cs</location>
            <body hash="12e990258b17be04a952a5fd3657fb36"><![CDATA[{
            return html.HtmlHelper.EditorFor(expression, templateName);
        }]]></body>
          </codeblock>
        </method>
        <method name="EditorFor">
          <declaration><![CDATA[public static MvcHtmlString EditorFor<TModel, TValue>(this DnnHtmlHelper<TModel> html, Expression<Func<TModel, TValue>> expression, string templateName, object additionalViewData)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="142" sc="9" el="144" ec="10">Helpers\HtmlEditorExtensions.cs</location>
            <body hash="ccfa5c0d829497b548115002632d79ad"><![CDATA[{
            return html.HtmlHelper.EditorFor(expression, templateName, additionalViewData);
        }]]></body>
          </codeblock>
        </method>
        <method name="EditorFor">
          <declaration><![CDATA[public static MvcHtmlString EditorFor<TModel, TValue>(this DnnHtmlHelper<TModel> html, Expression<Func<TModel, TValue>> expression, string templateName, string htmlFieldName)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="155" sc="9" el="157" ec="10">Helpers\HtmlEditorExtensions.cs</location>
            <body hash="2dea1c6aeaf993c691b83864005735d1"><![CDATA[{
            return html.HtmlHelper.EditorFor(expression, templateName, htmlFieldName);
        }]]></body>
          </codeblock>
        </method>
        <method name="EditorFor">
          <declaration><![CDATA[public static MvcHtmlString EditorFor<TModel, TValue>(this DnnHtmlHelper<TModel> html, Expression<Func<TModel, TValue>> expression, string templateName, string htmlFieldName, object additionalViewData)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="168" sc="9" el="170" ec="10">Helpers\HtmlEditorExtensions.cs</location>
            <body hash="4f343e955693d744bd19a13bcc434c14"><![CDATA[{
            return html.HtmlHelper.EditorFor(expression, templateName, htmlFieldName, additionalViewData);
        }]]></body>
          </codeblock>
        </method>
        <method name="EditorForModel">
          <declaration><![CDATA[public static MvcHtmlString EditorForModel(this DnnHtmlHelper html)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="181" sc="9" el="183" ec="10">Helpers\HtmlEditorExtensions.cs</location>
            <body hash="c29f2a378748bdcfa38a4e165218a4b3"><![CDATA[{
            return html.HtmlHelper.EditorForModel();
        }]]></body>
          </codeblock>
        </method>
        <method name="EditorForModel">
          <declaration><![CDATA[public static MvcHtmlString EditorForModel(this DnnHtmlHelper html, object additionalViewData)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="194" sc="9" el="196" ec="10">Helpers\HtmlEditorExtensions.cs</location>
            <body hash="8d84837f76b1c73a1df33235360d7629"><![CDATA[{
            return html.HtmlHelper.EditorForModel(additionalViewData);
        }]]></body>
          </codeblock>
        </method>
        <method name="EditorForModel">
          <declaration><![CDATA[public static MvcHtmlString EditorForModel(this DnnHtmlHelper html, string templateName)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="207" sc="9" el="209" ec="10">Helpers\HtmlEditorExtensions.cs</location>
            <body hash="fe8bb1978c3b064a8beeb0e366aef353"><![CDATA[{
            return html.HtmlHelper.EditorForModel(templateName);
        }]]></body>
          </codeblock>
        </method>
        <method name="EditorForModel">
          <declaration><![CDATA[public static MvcHtmlString EditorForModel(this DnnHtmlHelper html, string templateName, object additionalViewData)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="220" sc="9" el="222" ec="10">Helpers\HtmlEditorExtensions.cs</location>
            <body hash="e3ca15878531ad36bec42d8afa0a1f82"><![CDATA[{
            return html.HtmlHelper.EditorForModel(templateName, additionalViewData);
        }]]></body>
          </codeblock>
        </method>
        <method name="EditorForModel">
          <declaration><![CDATA[public static MvcHtmlString EditorForModel(this DnnHtmlHelper html, string templateName, string htmlFieldName)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="233" sc="9" el="235" ec="10">Helpers\HtmlEditorExtensions.cs</location>
            <body hash="ab5e7770b8df611cd4f417e2472a7a80"><![CDATA[{
            return html.HtmlHelper.EditorForModel(templateName, htmlFieldName);
        }]]></body>
          </codeblock>
        </method>
        <method name="EditorForModel">
          <declaration><![CDATA[public static MvcHtmlString EditorForModel(this DnnHtmlHelper html, string templateName, string htmlFieldName, object additionalViewData)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="246" sc="9" el="248" ec="10">Helpers\HtmlEditorExtensions.cs</location>
            <body hash="e2111ee6e72b721a109deb21111d0a44"><![CDATA[{
            return html.HtmlHelper.EditorForModel(templateName, htmlFieldName, additionalViewData);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="HtmlInputExtensions">
      <declaration><![CDATA[public static class HtmlInputExtensions]]></declaration>
      <documentation>
      </documentation>
      <constructors>
      </constructors>
      <methods>
        <method name="CheckBox">
          <declaration><![CDATA[public static MvcHtmlString CheckBox(this DnnHtmlHelper html, string name)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="28" sc="9" el="30" ec="10">Helpers\HtmlInputExtensions.cs</location>
            <body hash="3230500935ca97a1a94a4884c8c4619e"><![CDATA[{
            return html.HtmlHelper.CheckBox(name);
        }]]></body>
          </codeblock>
        </method>
        <method name="CheckBox">
          <declaration><![CDATA[public static MvcHtmlString CheckBox(this DnnHtmlHelper html, string name, bool isChecked)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="41" sc="9" el="43" ec="10">Helpers\HtmlInputExtensions.cs</location>
            <body hash="ec9e69957ca5e0ba129604e4bbee09fb"><![CDATA[{
            return html.HtmlHelper.CheckBox(name, isChecked);
        }]]></body>
          </codeblock>
        </method>
        <method name="CheckBox">
          <declaration><![CDATA[public static MvcHtmlString CheckBox(this DnnHtmlHelper html, string name, bool isChecked, object htmlAttributes)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="54" sc="9" el="56" ec="10">Helpers\HtmlInputExtensions.cs</location>
            <body hash="f7c87afca4e897fbfc99bea6f94bf13d"><![CDATA[{
            return html.HtmlHelper.CheckBox(name, isChecked, htmlAttributes);
        }]]></body>
          </codeblock>
        </method>
        <method name="CheckBox">
          <declaration><![CDATA[public static MvcHtmlString CheckBox(this DnnHtmlHelper html, string name, object htmlAttributes)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="67" sc="9" el="69" ec="10">Helpers\HtmlInputExtensions.cs</location>
            <body hash="ea1d46b22781ad41f712c2321743433e"><![CDATA[{
            return html.HtmlHelper.CheckBox(name, htmlAttributes);
        }]]></body>
          </codeblock>
        </method>
        <method name="CheckBox">
          <declaration><![CDATA[public static MvcHtmlString CheckBox(this DnnHtmlHelper html, string name, IDictionary<string, object> htmlAttributes)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="80" sc="9" el="82" ec="10">Helpers\HtmlInputExtensions.cs</location>
            <body hash="ea1d46b22781ad41f712c2321743433e"><![CDATA[{
            return html.HtmlHelper.CheckBox(name, htmlAttributes);
        }]]></body>
          </codeblock>
        </method>
        <method name="CheckBox">
          <declaration><![CDATA[public static MvcHtmlString CheckBox(this DnnHtmlHelper html, string name, bool isChecked, IDictionary<string, object> htmlAttributes)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="93" sc="9" el="95" ec="10">Helpers\HtmlInputExtensions.cs</location>
            <body hash="f7c87afca4e897fbfc99bea6f94bf13d"><![CDATA[{
            return html.HtmlHelper.CheckBox(name, isChecked, htmlAttributes);
        }]]></body>
          </codeblock>
        </method>
        <method name="CheckBoxFor">
          <declaration><![CDATA[public static MvcHtmlString CheckBoxFor<TModel>(this DnnHtmlHelper<TModel> html, Expression<Func<TModel, bool>> expression)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="106" sc="9" el="108" ec="10">Helpers\HtmlInputExtensions.cs</location>
            <body hash="e1a1335be855f10232920f947b52a4a9"><![CDATA[{
            return html.HtmlHelper.CheckBoxFor(expression);
        }]]></body>
          </codeblock>
        </method>
        <method name="CheckBoxFor">
          <declaration><![CDATA[public static MvcHtmlString CheckBoxFor<TModel>(this DnnHtmlHelper<TModel> html, Expression<Func<TModel, bool>> expression, object htmlAttributes)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="119" sc="9" el="121" ec="10">Helpers\HtmlInputExtensions.cs</location>
            <body hash="b29826ad80777314b08db6f5fcd68296"><![CDATA[{
            return html.HtmlHelper.CheckBoxFor(expression, htmlAttributes);
        }]]></body>
          </codeblock>
        </method>
        <method name="CheckBoxFor">
          <declaration><![CDATA[public static MvcHtmlString CheckBoxFor<TModel>(this DnnHtmlHelper<TModel> html, Expression<Func<TModel, bool>> expression, IDictionary<string, object> htmlAttributes)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="132" sc="9" el="134" ec="10">Helpers\HtmlInputExtensions.cs</location>
            <body hash="b29826ad80777314b08db6f5fcd68296"><![CDATA[{
            return html.HtmlHelper.CheckBoxFor(expression, htmlAttributes);
        }]]></body>
          </codeblock>
        </method>
        <method name="Hidden">
          <declaration><![CDATA[public static MvcHtmlString Hidden(this DnnHtmlHelper html, string name)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="147" sc="9" el="149" ec="10">Helpers\HtmlInputExtensions.cs</location>
            <body hash="d9b7a26b020d7cc06d52583ac2395bca"><![CDATA[{
            return html.HtmlHelper.Hidden(name);
        }]]></body>
          </codeblock>
        </method>
        <method name="Hidden">
          <declaration><![CDATA[public static MvcHtmlString Hidden(this DnnHtmlHelper html, string name, object value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="160" sc="9" el="162" ec="10">Helpers\HtmlInputExtensions.cs</location>
            <body hash="36d0fa380cf58db30d313dc5e050385a"><![CDATA[{
            return html.HtmlHelper.Hidden(name, value);
        }]]></body>
          </codeblock>
        </method>
        <method name="Hidden">
          <declaration><![CDATA[public static MvcHtmlString Hidden(this DnnHtmlHelper html, string name, object value, object htmlAttributes)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="173" sc="9" el="175" ec="10">Helpers\HtmlInputExtensions.cs</location>
            <body hash="025a3c5e71ea90eea494ad5b14c9c862"><![CDATA[{
            return html.HtmlHelper.Hidden(name, value, htmlAttributes);
        }]]></body>
          </codeblock>
        </method>
        <method name="Hidden">
          <declaration><![CDATA[public static MvcHtmlString Hidden(this DnnHtmlHelper html, string name, object value, IDictionary<string, object> htmlAttributes)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="186" sc="9" el="188" ec="10">Helpers\HtmlInputExtensions.cs</location>
            <body hash="025a3c5e71ea90eea494ad5b14c9c862"><![CDATA[{
            return html.HtmlHelper.Hidden(name, value, htmlAttributes);
        }]]></body>
          </codeblock>
        </method>
        <method name="HiddenFor">
          <declaration><![CDATA[public static MvcHtmlString HiddenFor<TModel, TProperty>(this DnnHtmlHelper<TModel> html, Expression<Func<TModel, TProperty>> expression)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="199" sc="9" el="201" ec="10">Helpers\HtmlInputExtensions.cs</location>
            <body hash="8cdf3e0c4b892e02e5bcb1d58de24a01"><![CDATA[{
            return html.HtmlHelper.HiddenFor(expression);
        }]]></body>
          </codeblock>
        </method>
        <method name="HiddenFor">
          <declaration><![CDATA[public static MvcHtmlString HiddenFor<TModel, TProperty>(this DnnHtmlHelper<TModel> html, Expression<Func<TModel, TProperty>> expression, object htmlAttributes)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="212" sc="9" el="214" ec="10">Helpers\HtmlInputExtensions.cs</location>
            <body hash="deeb58ed5ff9efcce656b5df466d1954"><![CDATA[{
            return html.HtmlHelper.HiddenFor(expression, htmlAttributes);
        }]]></body>
          </codeblock>
        </method>
        <method name="HiddenFor">
          <declaration><![CDATA[public static MvcHtmlString HiddenFor<TModel, TProperty>(this DnnHtmlHelper<TModel> html, Expression<Func<TModel, TProperty>> expression, IDictionary<string, object> htmlAttributes)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="225" sc="9" el="227" ec="10">Helpers\HtmlInputExtensions.cs</location>
            <body hash="deeb58ed5ff9efcce656b5df466d1954"><![CDATA[{
            return html.HtmlHelper.HiddenFor(expression, htmlAttributes);
        }]]></body>
          </codeblock>
        </method>
        <method name="Password">
          <declaration><![CDATA[public static MvcHtmlString Password(this DnnHtmlHelper html, string name)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="240" sc="9" el="242" ec="10">Helpers\HtmlInputExtensions.cs</location>
            <body hash="d78ee3817231d218b1435f0698ce2fc8"><![CDATA[{
            return html.HtmlHelper.Password(name);
        }]]></body>
          </codeblock>
        </method>
        <method name="Password">
          <declaration><![CDATA[public static MvcHtmlString Password(this DnnHtmlHelper html, string name, object value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="253" sc="9" el="255" ec="10">Helpers\HtmlInputExtensions.cs</location>
            <body hash="e77f707f76237fcbae8747ae91714ca9"><![CDATA[{
            return html.HtmlHelper.Password(name, value);
        }]]></body>
          </codeblock>
        </method>
        <method name="Password">
          <declaration><![CDATA[public static MvcHtmlString Password(this DnnHtmlHelper html, string name, object value, object htmlAttributes)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="266" sc="9" el="268" ec="10">Helpers\HtmlInputExtensions.cs</location>
            <body hash="8459a0e47543db93f4262728018935f2"><![CDATA[{
            return html.HtmlHelper.Password(name, value, htmlAttributes);
        }]]></body>
          </codeblock>
        </method>
        <method name="Password">
          <declaration><![CDATA[public static MvcHtmlString Password(this DnnHtmlHelper html, string name, object value, IDictionary<string, object> htmlAttributes)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="279" sc="9" el="281" ec="10">Helpers\HtmlInputExtensions.cs</location>
            <body hash="8459a0e47543db93f4262728018935f2"><![CDATA[{
            return html.HtmlHelper.Password(name, value, htmlAttributes);
        }]]></body>
          </codeblock>
        </method>
        <method name="PasswordFor">
          <declaration><![CDATA[public static MvcHtmlString PasswordFor<TModel, TProperty>(this DnnHtmlHelper<TModel> html, Expression<Func<TModel, TProperty>> expression)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="292" sc="9" el="294" ec="10">Helpers\HtmlInputExtensions.cs</location>
            <body hash="eb35df5e6837de2aa75e91737ee2c74d"><![CDATA[{
            return html.HtmlHelper.PasswordFor(expression);
        }]]></body>
          </codeblock>
        </method>
        <method name="PasswordFor">
          <declaration><![CDATA[public static MvcHtmlString PasswordFor<TModel, TProperty>(this DnnHtmlHelper<TModel> html, Expression<Func<TModel, TProperty>> expression, object htmlAttributes)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="305" sc="9" el="307" ec="10">Helpers\HtmlInputExtensions.cs</location>
            <body hash="eda028c0f8bfce81ba8cbe26b37322d3"><![CDATA[{
            return html.HtmlHelper.PasswordFor(expression, htmlAttributes);
        }]]></body>
          </codeblock>
        </method>
        <method name="PasswordFor">
          <declaration><![CDATA[public static MvcHtmlString PasswordFor<TModel, TProperty>(this DnnHtmlHelper<TModel> html, Expression<Func<TModel, TProperty>> expression, IDictionary<string, object> htmlAttributes)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="318" sc="9" el="320" ec="10">Helpers\HtmlInputExtensions.cs</location>
            <body hash="eda028c0f8bfce81ba8cbe26b37322d3"><![CDATA[{
            return html.HtmlHelper.PasswordFor(expression, htmlAttributes);
        }]]></body>
          </codeblock>
        </method>
        <method name="RadioButton">
          <declaration><![CDATA[public static MvcHtmlString RadioButton(this DnnHtmlHelper html, string name, object value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="333" sc="9" el="335" ec="10">Helpers\HtmlInputExtensions.cs</location>
            <body hash="9ebdc6c0e9eaca7f009b71674898526e"><![CDATA[{
            return html.HtmlHelper.RadioButton(name, value);
        }]]></body>
          </codeblock>
        </method>
        <method name="RadioButton">
          <declaration><![CDATA[public static MvcHtmlString RadioButton(this DnnHtmlHelper html, string name, object value, object htmlAttributes)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="346" sc="9" el="348" ec="10">Helpers\HtmlInputExtensions.cs</location>
            <body hash="47e818fac6cb9511034ba19caeeb02ac"><![CDATA[{
            return html.HtmlHelper.RadioButton(name, value, htmlAttributes);
        }]]></body>
          </codeblock>
        </method>
        <method name="RadioButton">
          <declaration><![CDATA[public static MvcHtmlString RadioButton(this DnnHtmlHelper html, string name, object value, IDictionary<string, object> htmlAttributes)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="359" sc="9" el="361" ec="10">Helpers\HtmlInputExtensions.cs</location>
            <body hash="47e818fac6cb9511034ba19caeeb02ac"><![CDATA[{
            return html.HtmlHelper.RadioButton(name, value, htmlAttributes);
        }]]></body>
          </codeblock>
        </method>
        <method name="RadioButton">
          <declaration><![CDATA[public static MvcHtmlString RadioButton(this DnnHtmlHelper html, string name, object value, bool isChecked)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="372" sc="9" el="374" ec="10">Helpers\HtmlInputExtensions.cs</location>
            <body hash="7169eed9c9abaed2c383ab758feaba7b"><![CDATA[{
            return html.HtmlHelper.RadioButton(name, value, isChecked);
        }]]></body>
          </codeblock>
        </method>
        <method name="RadioButton">
          <declaration><![CDATA[public static MvcHtmlString RadioButton(this DnnHtmlHelper html, string name, object value, bool isChecked, object htmlAttributes)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="385" sc="9" el="387" ec="10">Helpers\HtmlInputExtensions.cs</location>
            <body hash="dca9d590960f8c3d9533c872648b788a"><![CDATA[{
            return html.HtmlHelper.RadioButton(name, value, isChecked, htmlAttributes);
        }]]></body>
          </codeblock>
        </method>
        <method name="RadioButton">
          <declaration><![CDATA[public static MvcHtmlString RadioButton(this DnnHtmlHelper html, string name, object value, bool isChecked, IDictionary<string, object> htmlAttributes)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="398" sc="9" el="400" ec="10">Helpers\HtmlInputExtensions.cs</location>
            <body hash="dca9d590960f8c3d9533c872648b788a"><![CDATA[{
            return html.HtmlHelper.RadioButton(name, value, isChecked, htmlAttributes);
        }]]></body>
          </codeblock>
        </method>
        <method name="RadioButtonFor">
          <declaration><![CDATA[public static MvcHtmlString RadioButtonFor<TModel, TProperty>(this DnnHtmlHelper<TModel> html, Expression<Func<TModel, TProperty>> expression, object value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="411" sc="9" el="413" ec="10">Helpers\HtmlInputExtensions.cs</location>
            <body hash="4ecd5b0d0da3e33fb93b5cd16f6b19aa"><![CDATA[{
            return html.HtmlHelper.RadioButtonFor(expression, value);
        }]]></body>
          </codeblock>
        </method>
        <method name="RadioButtonFor">
          <declaration><![CDATA[public static MvcHtmlString RadioButtonFor<TModel, TProperty>(this DnnHtmlHelper<TModel> html, Expression<Func<TModel, TProperty>> expression, object value, object htmlAttributes)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="424" sc="9" el="426" ec="10">Helpers\HtmlInputExtensions.cs</location>
            <body hash="f9866c7aa2bd24761e5cc0eb9c9571a5"><![CDATA[{
            return html.HtmlHelper.RadioButtonFor(expression, value, htmlAttributes);
        }]]></body>
          </codeblock>
        </method>
        <method name="RadioButtonFor">
          <declaration><![CDATA[public static MvcHtmlString RadioButtonFor<TModel, TProperty>(this DnnHtmlHelper<TModel> html, Expression<Func<TModel, TProperty>> expression, object value, IDictionary<string, object> htmlAttributes)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="437" sc="9" el="439" ec="10">Helpers\HtmlInputExtensions.cs</location>
            <body hash="f9866c7aa2bd24761e5cc0eb9c9571a5"><![CDATA[{
            return html.HtmlHelper.RadioButtonFor(expression, value, htmlAttributes);
        }]]></body>
          </codeblock>
        </method>
        <method name="TextBox">
          <declaration><![CDATA[public static MvcHtmlString TextBox(this DnnHtmlHelper html, string name)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="452" sc="9" el="454" ec="10">Helpers\HtmlInputExtensions.cs</location>
            <body hash="0d5b15ee8a581bdbd08b28e55c3eda12"><![CDATA[{
            return html.HtmlHelper.TextBox(name);
        }]]></body>
          </codeblock>
        </method>
        <method name="TextBox">
          <declaration><![CDATA[public static MvcHtmlString TextBox(this DnnHtmlHelper html, string name, object value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="465" sc="9" el="467" ec="10">Helpers\HtmlInputExtensions.cs</location>
            <body hash="e4498672a1e26e0e8c99fbb5e2a51c4c"><![CDATA[{
            return html.HtmlHelper.TextBox(name, value);
        }]]></body>
          </codeblock>
        </method>
        <method name="TextBox">
          <declaration><![CDATA[public static MvcHtmlString TextBox(this DnnHtmlHelper html, string name, object value, string format)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="478" sc="9" el="480" ec="10">Helpers\HtmlInputExtensions.cs</location>
            <body hash="a236ab61f85e65572118c5c3832c0d87"><![CDATA[{
            return html.HtmlHelper.TextBox(name, value, format);
        }]]></body>
          </codeblock>
        </method>
        <method name="TextBox">
          <declaration><![CDATA[public static MvcHtmlString TextBox(this DnnHtmlHelper html, string name, object value, object htmlAttributes)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="491" sc="9" el="493" ec="10">Helpers\HtmlInputExtensions.cs</location>
            <body hash="5b5a4e869bb6c56f349e155e07212b94"><![CDATA[{
            return html.HtmlHelper.TextBox(name, value, htmlAttributes);
        }]]></body>
          </codeblock>
        </method>
        <method name="TextBox">
          <declaration><![CDATA[public static MvcHtmlString TextBox(this DnnHtmlHelper html, string name, object value, string format, object htmlAttributes)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="504" sc="9" el="506" ec="10">Helpers\HtmlInputExtensions.cs</location>
            <body hash="8e02ab49b46258b97546ba1f3890237e"><![CDATA[{
            return html.HtmlHelper.TextBox(name, value, format, htmlAttributes);
        }]]></body>
          </codeblock>
        </method>
        <method name="TextBox">
          <declaration><![CDATA[public static MvcHtmlString TextBox(this DnnHtmlHelper html, string name, object value, IDictionary<string, object> htmlAttributes)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="517" sc="9" el="519" ec="10">Helpers\HtmlInputExtensions.cs</location>
            <body hash="5b5a4e869bb6c56f349e155e07212b94"><![CDATA[{
            return html.HtmlHelper.TextBox(name, value, htmlAttributes);
        }]]></body>
          </codeblock>
        </method>
        <method name="TextBox">
          <declaration><![CDATA[public static MvcHtmlString TextBox(this DnnHtmlHelper html, string name, object value, string format, IDictionary<string, object> htmlAttributes)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="530" sc="9" el="532" ec="10">Helpers\HtmlInputExtensions.cs</location>
            <body hash="8e02ab49b46258b97546ba1f3890237e"><![CDATA[{
            return html.HtmlHelper.TextBox(name, value, format, htmlAttributes);
        }]]></body>
          </codeblock>
        </method>
        <method name="TextBoxFor">
          <declaration><![CDATA[public static MvcHtmlString TextBoxFor<TModel, TProperty>(this DnnHtmlHelper<TModel> html, Expression<Func<TModel, TProperty>> expression)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="543" sc="9" el="545" ec="10">Helpers\HtmlInputExtensions.cs</location>
            <body hash="e0d8d32081b14608b444292f97a6f3b1"><![CDATA[{
            return html.HtmlHelper.TextBoxFor(expression);
        }]]></body>
          </codeblock>
        </method>
        <method name="TextBoxFor">
          <declaration><![CDATA[public static MvcHtmlString TextBoxFor<TModel, TProperty>(this DnnHtmlHelper<TModel> html, Expression<Func<TModel, TProperty>> expression, string format)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="556" sc="9" el="558" ec="10">Helpers\HtmlInputExtensions.cs</location>
            <body hash="24057d353a44ffa12d5ef560e3492e83"><![CDATA[{
            return html.HtmlHelper.TextBoxFor(expression, format);
        }]]></body>
          </codeblock>
        </method>
        <method name="TextBoxFor">
          <declaration><![CDATA[public static MvcHtmlString TextBoxFor<TModel, TProperty>(this DnnHtmlHelper<TModel> html, Expression<Func<TModel, TProperty>> expression, object htmlAttributes)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="569" sc="9" el="571" ec="10">Helpers\HtmlInputExtensions.cs</location>
            <body hash="c71a274a09c47d6726d7080961c94a77"><![CDATA[{
            return html.HtmlHelper.TextBoxFor(expression, htmlAttributes);
        }]]></body>
          </codeblock>
        </method>
        <method name="TextBoxFor">
          <declaration><![CDATA[public static MvcHtmlString TextBoxFor<TModel, TProperty>(this DnnHtmlHelper<TModel> html, Expression<Func<TModel, TProperty>> expression, string format, object htmlAttributes)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="582" sc="9" el="584" ec="10">Helpers\HtmlInputExtensions.cs</location>
            <body hash="9f2e6ceb98b40a6c7774679156f90a52"><![CDATA[{
            return html.HtmlHelper.TextBoxFor(expression, format, htmlAttributes);
        }]]></body>
          </codeblock>
        </method>
        <method name="TextBoxFor">
          <declaration><![CDATA[public static MvcHtmlString TextBoxFor<TModel, TProperty>(this DnnHtmlHelper<TModel> html, Expression<Func<TModel, TProperty>> expression, IDictionary<string, object> htmlAttributes)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="595" sc="9" el="597" ec="10">Helpers\HtmlInputExtensions.cs</location>
            <body hash="c71a274a09c47d6726d7080961c94a77"><![CDATA[{
            return html.HtmlHelper.TextBoxFor(expression, htmlAttributes);
        }]]></body>
          </codeblock>
        </method>
        <method name="TextBoxFor">
          <declaration><![CDATA[public static MvcHtmlString TextBoxFor<TModel, TProperty>(this DnnHtmlHelper<TModel> html, Expression<Func<TModel, TProperty>> expression, string format, IDictionary<string, object> htmlAttributes)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="608" sc="9" el="610" ec="10">Helpers\HtmlInputExtensions.cs</location>
            <body hash="9f2e6ceb98b40a6c7774679156f90a52"><![CDATA[{
            return html.HtmlHelper.TextBoxFor(expression, format, htmlAttributes);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="HtmlLabelExtensions">
      <declaration><![CDATA[public static class HtmlLabelExtensions]]></declaration>
      <documentation>
      </documentation>
      <constructors>
      </constructors>
      <methods>
        <method name="Label">
          <declaration><![CDATA[public static MvcHtmlString Label(this DnnHtmlHelper html, string expression)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="26" sc="9" el="28" ec="10">Helpers\HtmlLabelExtensions.cs</location>
            <body hash="b66e9cf9d0aef8c601f21325b7718a8e"><![CDATA[{
            return html.HtmlHelper.Label(expression);
        }]]></body>
          </codeblock>
        </method>
        <method name="Label">
          <declaration><![CDATA[public static MvcHtmlString Label(this DnnHtmlHelper html, string expression, string labelText)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="39" sc="9" el="41" ec="10">Helpers\HtmlLabelExtensions.cs</location>
            <body hash="8c13b5d9dd4d459a8846fb1d8c807659"><![CDATA[{
            return html.HtmlHelper.Label(expression, labelText);
        }]]></body>
          </codeblock>
        </method>
        <method name="Label">
          <declaration><![CDATA[public static MvcHtmlString Label(this DnnHtmlHelper html, string expression, object htmlAttributes)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="52" sc="9" el="54" ec="10">Helpers\HtmlLabelExtensions.cs</location>
            <body hash="30cb5ab295c93a529f1b2e6676def9c6"><![CDATA[{
            return html.HtmlHelper.Label(expression,  htmlAttributes);
        }]]></body>
          </codeblock>
        </method>
        <method name="Label">
          <declaration><![CDATA[public static MvcHtmlString Label(this DnnHtmlHelper html, string expression, IDictionary<string, object> htmlAttributes)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="65" sc="9" el="67" ec="10">Helpers\HtmlLabelExtensions.cs</location>
            <body hash="30cb5ab295c93a529f1b2e6676def9c6"><![CDATA[{
            return html.HtmlHelper.Label(expression,  htmlAttributes);
        }]]></body>
          </codeblock>
        </method>
        <method name="Label">
          <declaration><![CDATA[public static MvcHtmlString Label(this DnnHtmlHelper html, string expression, string labelText, object htmlAttributes)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="78" sc="9" el="80" ec="10">Helpers\HtmlLabelExtensions.cs</location>
            <body hash="78f3c9cd1e2123651792c41670bacee3"><![CDATA[{
            return html.HtmlHelper.Label(expression, labelText, htmlAttributes);
        }]]></body>
          </codeblock>
        </method>
        <method name="Label">
          <declaration><![CDATA[public static MvcHtmlString Label(this DnnHtmlHelper html, string expression, string labelText, IDictionary<string, object> htmlAttributes)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="91" sc="9" el="93" ec="10">Helpers\HtmlLabelExtensions.cs</location>
            <body hash="78f3c9cd1e2123651792c41670bacee3"><![CDATA[{
            return html.HtmlHelper.Label(expression, labelText, htmlAttributes);
        }]]></body>
          </codeblock>
        </method>
        <method name="LabelFor">
          <declaration><![CDATA[public static MvcHtmlString LabelFor<TModel, TValue>(this DnnHtmlHelper<TModel> html, Expression<Func<TModel, TValue>> expression)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="104" sc="9" el="107" ec="10">Helpers\HtmlLabelExtensions.cs</location>
            <body hash="d5e08db5ab59793620df5d14c3c4a1bd"><![CDATA[{
            var htmlHelper = html.HtmlHelper as HtmlHelper<TModel>;
            return html.HtmlHelper.LabelFor(expression);
        }]]></body>
          </codeblock>
        </method>
        <method name="LabelFor">
          <declaration><![CDATA[public static MvcHtmlString LabelFor<TModel, TValue>(this DnnHtmlHelper<TModel> html, Expression<Func<TModel, TValue>> expression, string labelText)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="118" sc="9" el="120" ec="10">Helpers\HtmlLabelExtensions.cs</location>
            <body hash="98e03f9f2c38a11ba6dccb357523731f"><![CDATA[{
            return html.HtmlHelper.LabelFor(expression, labelText);
        }]]></body>
          </codeblock>
        </method>
        <method name="LabelFor">
          <declaration><![CDATA[public static MvcHtmlString LabelFor<TModel, TValue>(this DnnHtmlHelper<TModel> html, Expression<Func<TModel, TValue>> expression, object htmlAttributes)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="131" sc="9" el="133" ec="10">Helpers\HtmlLabelExtensions.cs</location>
            <body hash="1850272976a61adaef0397cfd0338d75"><![CDATA[{
            return html.HtmlHelper.LabelFor(expression, htmlAttributes);
        }]]></body>
          </codeblock>
        </method>
        <method name="LabelFor">
          <declaration><![CDATA[public static MvcHtmlString LabelFor<TModel, TValue>(this DnnHtmlHelper<TModel> html, Expression<Func<TModel, TValue>> expression, IDictionary<string, object> htmlAttributes)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="144" sc="9" el="146" ec="10">Helpers\HtmlLabelExtensions.cs</location>
            <body hash="1850272976a61adaef0397cfd0338d75"><![CDATA[{
            return html.HtmlHelper.LabelFor(expression, htmlAttributes);
        }]]></body>
          </codeblock>
        </method>
        <method name="LabelFor">
          <declaration><![CDATA[public static MvcHtmlString LabelFor<TModel, TValue>(this DnnHtmlHelper<TModel> html, Expression<Func<TModel, TValue>> expression, string labelText, object htmlAttributes)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="157" sc="9" el="159" ec="10">Helpers\HtmlLabelExtensions.cs</location>
            <body hash="b774c0ad76cb18c644b43106c47b29e8"><![CDATA[{
            return html.HtmlHelper.LabelFor(expression, labelText, htmlAttributes);
        }]]></body>
          </codeblock>
        </method>
        <method name="LabelFor">
          <declaration><![CDATA[public static MvcHtmlString LabelFor<TModel, TValue>(this DnnHtmlHelper<TModel> html, Expression<Func<TModel, TValue>> expression, string labelText, IDictionary<string, object> htmlAttributes)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="170" sc="9" el="172" ec="10">Helpers\HtmlLabelExtensions.cs</location>
            <body hash="b774c0ad76cb18c644b43106c47b29e8"><![CDATA[{
            return html.HtmlHelper.LabelFor(expression, labelText, htmlAttributes);
        }]]></body>
          </codeblock>
        </method>
        <method name="LabelForModel">
          <declaration><![CDATA[public static MvcHtmlString LabelForModel(this DnnHtmlHelper html)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="183" sc="9" el="185" ec="10">Helpers\HtmlLabelExtensions.cs</location>
            <body hash="b722bb8b9448efb623813281c696049d"><![CDATA[{
            return html.HtmlHelper.LabelForModel();
        }]]></body>
          </codeblock>
        </method>
        <method name="LabelForModel">
          <declaration><![CDATA[public static MvcHtmlString LabelForModel(this DnnHtmlHelper html, string labelText)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="196" sc="9" el="198" ec="10">Helpers\HtmlLabelExtensions.cs</location>
            <body hash="2a55dea5378fc5736ff604bd3da6ec84"><![CDATA[{
            return html.HtmlHelper.LabelForModel(labelText);
        }]]></body>
          </codeblock>
        </method>
        <method name="LabelForModel">
          <declaration><![CDATA[public static MvcHtmlString LabelForModel(this DnnHtmlHelper html, object htmlAttributes)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="209" sc="9" el="211" ec="10">Helpers\HtmlLabelExtensions.cs</location>
            <body hash="4f8b233857426c17caa1e2203891b3c2"><![CDATA[{
            return html.HtmlHelper.LabelForModel(htmlAttributes);
        }]]></body>
          </codeblock>
        </method>
        <method name="LabelForModel">
          <declaration><![CDATA[public static MvcHtmlString LabelForModel(this DnnHtmlHelper html, IDictionary<string, object> htmlAttributes)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="222" sc="9" el="224" ec="10">Helpers\HtmlLabelExtensions.cs</location>
            <body hash="4f8b233857426c17caa1e2203891b3c2"><![CDATA[{
            return html.HtmlHelper.LabelForModel(htmlAttributes);
        }]]></body>
          </codeblock>
        </method>
        <method name="LabelForModel">
          <declaration><![CDATA[public static MvcHtmlString LabelForModel(this DnnHtmlHelper html, string labelText, object htmlAttributes)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="235" sc="9" el="237" ec="10">Helpers\HtmlLabelExtensions.cs</location>
            <body hash="06a63d9ac8c132a81152cd654f4ccf7a"><![CDATA[{
            return html.HtmlHelper.LabelForModel(labelText, htmlAttributes);
        }]]></body>
          </codeblock>
        </method>
        <method name="LabelForModel">
          <declaration><![CDATA[public static MvcHtmlString LabelForModel(this DnnHtmlHelper html, string labelText, IDictionary<string, object> htmlAttributes)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="248" sc="9" el="250" ec="10">Helpers\HtmlLabelExtensions.cs</location>
            <body hash="06a63d9ac8c132a81152cd654f4ccf7a"><![CDATA[{
            return html.HtmlHelper.LabelForModel(labelText, htmlAttributes);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="HtmlLinkExtensions">
      <declaration><![CDATA[public static class HtmlLinkExtensions]]></declaration>
      <documentation>
      </documentation>
      <constructors>
      </constructors>
      <methods>
        <method name="ActionLink">
          <declaration><![CDATA[public static MvcHtmlString ActionLink(this DnnHtmlHelper htmlHelper, string linkText, string actionName)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="19" sc="9" el="21" ec="10">Helpers\HtmlLinkExtensions.cs</location>
            <body hash="c0307cf329da193ba34c6cf59fd3ecf2"><![CDATA[{
            return ActionLink(htmlHelper, linkText, actionName, null, new RouteValueDictionary(), new RouteValueDictionary());
        }]]></body>
          </codeblock>
        </method>
        <method name="ActionLink">
          <declaration><![CDATA[public static MvcHtmlString ActionLink(this DnnHtmlHelper htmlHelper, string linkText, string actionName, object routeValues)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="24" sc="9" el="26" ec="10">Helpers\HtmlLinkExtensions.cs</location>
            <body hash="143ea0204c78c7e72ece7668080e57d1"><![CDATA[{
            return ActionLink(htmlHelper, linkText, actionName, null, TypeHelper.ObjectToDictionary(routeValues), new RouteValueDictionary());
        }]]></body>
          </codeblock>
        </method>
        <method name="ActionLink">
          <declaration><![CDATA[public static MvcHtmlString ActionLink(this DnnHtmlHelper htmlHelper, string linkText, string actionName, object routeValues, object htmlAttributes)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="29" sc="9" el="31" ec="10">Helpers\HtmlLinkExtensions.cs</location>
            <body hash="bd5e279effeacf022f7bff71ee236c9a"><![CDATA[{
            return ActionLink(htmlHelper, linkText, actionName, null, TypeHelper.ObjectToDictionary(routeValues), HtmlHelper.AnonymousObjectToHtmlAttributes(htmlAttributes));
        }]]></body>
          </codeblock>
        </method>
        <method name="ActionLink">
          <declaration><![CDATA[public static MvcHtmlString ActionLink(this DnnHtmlHelper htmlHelper, string linkText, string actionName, RouteValueDictionary routeValues)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="34" sc="9" el="36" ec="10">Helpers\HtmlLinkExtensions.cs</location>
            <body hash="b8a8045598216dc1cf2295c1024762c6"><![CDATA[{
            return ActionLink(htmlHelper, linkText, actionName, null, routeValues, new RouteValueDictionary());
        }]]></body>
          </codeblock>
        </method>
        <method name="ActionLink">
          <declaration><![CDATA[public static MvcHtmlString ActionLink(this DnnHtmlHelper htmlHelper, string linkText, string actionName, RouteValueDictionary routeValues, IDictionary<string, object> htmlAttributes)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="39" sc="9" el="41" ec="10">Helpers\HtmlLinkExtensions.cs</location>
            <body hash="91e160d8209af67e0aa2bfbbf16571d8"><![CDATA[{
            return ActionLink(htmlHelper, linkText, actionName, null, routeValues, htmlAttributes);
        }]]></body>
          </codeblock>
        </method>
        <method name="ActionLink">
          <declaration><![CDATA[public static MvcHtmlString ActionLink(this DnnHtmlHelper htmlHelper, string linkText, string actionName, string controllerName)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="44" sc="9" el="46" ec="10">Helpers\HtmlLinkExtensions.cs</location>
            <body hash="16efc123c11a30c50a842b34da1e78de"><![CDATA[{
            return ActionLink(htmlHelper, linkText, actionName, controllerName, new RouteValueDictionary(), new RouteValueDictionary());
        }]]></body>
          </codeblock>
        </method>
        <method name="ActionLink">
          <declaration><![CDATA[public static MvcHtmlString ActionLink(this DnnHtmlHelper htmlHelper, string linkText, string actionName, string controllerName, object routeValues, object htmlAttributes)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="49" sc="9" el="51" ec="10">Helpers\HtmlLinkExtensions.cs</location>
            <body hash="1a37ceead90ff839bc1d7a014a87fc05"><![CDATA[{
            return ActionLink(htmlHelper, linkText, actionName, controllerName, TypeHelper.ObjectToDictionary(routeValues), HtmlHelper.AnonymousObjectToHtmlAttributes(htmlAttributes));
        }]]></body>
          </codeblock>
        </method>
        <method name="ActionLink">
          <declaration><![CDATA[public static MvcHtmlString ActionLink(this DnnHtmlHelper htmlHelper, string linkText, string actionName, string controllerName, RouteValueDictionary routeValues, IDictionary<string, object> htmlAttributes)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="54" sc="9" el="58" ec="10">Helpers\HtmlLinkExtensions.cs</location>
            <body hash="4487b7b51a6ff6011aef44f32fb46c56"><![CDATA[{
            Requires.NotNullOrEmpty("linkText", linkText);

            return MvcHtmlString.Create(GenerateLink(linkText, actionName, controllerName, routeValues, htmlAttributes, htmlHelper.ModuleContext));
        }]]></body>
          </codeblock>
        </method>
        <method name="ActionLink">
          <declaration><![CDATA[public static MvcHtmlString ActionLink(this DnnHtmlHelper htmlHelper, string linkText, string actionName, string controllerName, string protocol, string hostName, string fragment, object routeValues, object htmlAttributes)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="61" sc="9" el="63" ec="10">Helpers\HtmlLinkExtensions.cs</location>
            <body hash="a65e92b5e812f54ed67bbf08c370666b"><![CDATA[{
            return ActionLink(htmlHelper, linkText, actionName, controllerName, protocol, hostName, fragment, TypeHelper.ObjectToDictionary(routeValues), HtmlHelper.AnonymousObjectToHtmlAttributes(htmlAttributes));
        }]]></body>
          </codeblock>
        </method>
        <method name="ActionLink">
          <declaration><![CDATA[public static MvcHtmlString ActionLink(this DnnHtmlHelper htmlHelper, string linkText, string actionName, string controllerName, string protocol, string hostName, string fragment, RouteValueDictionary routeValues, IDictionary<string, object> htmlAttributes)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="66" sc="9" el="70" ec="10">Helpers\HtmlLinkExtensions.cs</location>
            <body hash="4487b7b51a6ff6011aef44f32fb46c56"><![CDATA[{
            Requires.NotNullOrEmpty("linkText", linkText);

            return MvcHtmlString.Create(GenerateLink(linkText, actionName, controllerName, routeValues, htmlAttributes, htmlHelper.ModuleContext));
        }]]></body>
          </codeblock>
        </method>
        <method name="GenerateLink">
          <declaration><![CDATA[private static string GenerateLink(string linkText, string actionName, string controllerName, RouteValueDictionary routeValues, IDictionary<string, object> htmlAttributes, ModuleInstanceContext moduleContext)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="73" sc="9" el="85" ec="10">Helpers\HtmlLinkExtensions.cs</location>
            <body hash="dab073a2d1dece951d546a072037e8af"><![CDATA[{
            routeValues["controller"] = controllerName;
            routeValues["action"] = actionName;
            string url = ModuleRoutingProvider.Instance().GenerateUrl(routeValues, moduleContext);

            TagBuilder tagBuilder = new TagBuilder("a")
            {
                InnerHtml = (!String.IsNullOrEmpty(linkText)) ? HttpUtility.HtmlEncode(linkText) : String.Empty
            };
            tagBuilder.MergeAttributes(htmlAttributes);
            tagBuilder.MergeAttribute("href", url);
            return tagBuilder.ToString(TagRenderMode.Normal);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="HtmlNameExtensions">
      <declaration><![CDATA[public static class HtmlNameExtensions]]></declaration>
      <documentation>
      </documentation>
      <constructors>
      </constructors>
      <methods>
        <method name="Id">
          <declaration><![CDATA[public static MvcHtmlString Id(this DnnHtmlHelper html, string name)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="25" sc="9" el="27" ec="10">Helpers\HtmlNameExtensions.cs</location>
            <body hash="eefaf8e56a3d2c1ba3a97eaed389c19a"><![CDATA[{
            return html.HtmlHelper.Id(name);
        }]]></body>
          </codeblock>
        </method>
        <method name="IdFor">
          <declaration><![CDATA[public static MvcHtmlString IdFor<TModel, TProperty>(this DnnHtmlHelper<TModel> html, Expression<Func<TModel, TProperty>> expression)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="38" sc="9" el="40" ec="10">Helpers\HtmlNameExtensions.cs</location>
            <body hash="986e3a1eacc2a93b05b21e9074256147"><![CDATA[{
            return html.HtmlHelper.IdFor(expression);
        }]]></body>
          </codeblock>
        </method>
        <method name="IdForModel">
          <declaration><![CDATA[public static MvcHtmlString IdForModel(this DnnHtmlHelper html)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="51" sc="9" el="53" ec="10">Helpers\HtmlNameExtensions.cs</location>
            <body hash="f6c6c832b3c9520197d8313acbbba20c"><![CDATA[{
            return html.HtmlHelper.IdForModel();
        }]]></body>
          </codeblock>
        </method>
        <method name="Name">
          <declaration><![CDATA[public static MvcHtmlString Name(this DnnHtmlHelper html, string name)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="64" sc="9" el="66" ec="10">Helpers\HtmlNameExtensions.cs</location>
            <body hash="fbf30274cd5238ec0772e09b38f63687"><![CDATA[{
            return html.HtmlHelper.Name(name);
        }]]></body>
          </codeblock>
        </method>
        <method name="NameFor">
          <declaration><![CDATA[public static MvcHtmlString NameFor<TModel, TProperty>(this DnnHtmlHelper<TModel> html, Expression<Func<TModel, TProperty>> expression)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="77" sc="9" el="79" ec="10">Helpers\HtmlNameExtensions.cs</location>
            <body hash="0dc4aa4de26f2c1942b699bad5843049"><![CDATA[{
            return html.HtmlHelper.NameFor(expression);
        }]]></body>
          </codeblock>
        </method>
        <method name="NameForModel">
          <declaration><![CDATA[public static MvcHtmlString NameForModel(this DnnHtmlHelper html)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="90" sc="9" el="92" ec="10">Helpers\HtmlNameExtensions.cs</location>
            <body hash="510f7ce00588c6871d0721fbb2365fa4"><![CDATA[{
            return html.HtmlHelper.NameForModel();
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="HtmlPartialExtensions">
      <declaration><![CDATA[public static class HtmlPartialExtensions]]></declaration>
      <documentation>
      </documentation>
      <constructors>
      </constructors>
      <methods>
        <method name="Partial">
          <declaration><![CDATA[public static MvcHtmlString Partial(this DnnHtmlHelper html, string partialViewName)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="22" sc="9" el="24" ec="10">Helpers\HtmlPartialExtensions.cs</location>
            <body hash="1fe2a1d02ba30b210e20887376651c68"><![CDATA[{
            return html.HtmlHelper.Partial(partialViewName);
        }]]></body>
          </codeblock>
        </method>
        <method name="Partial">
          <declaration><![CDATA[public static MvcHtmlString Partial(this DnnHtmlHelper html, string partialViewName, ViewDataDictionary viewData)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="35" sc="9" el="37" ec="10">Helpers\HtmlPartialExtensions.cs</location>
            <body hash="f33413722c1d233d70b56d5e8cfb4314"><![CDATA[{
            return html.HtmlHelper.Partial(partialViewName, (object) null, viewData);
        }]]></body>
          </codeblock>
        </method>
        <method name="Partial">
          <declaration><![CDATA[public static MvcHtmlString Partial(this DnnHtmlHelper html, string partialViewName, object model)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="48" sc="9" el="50" ec="10">Helpers\HtmlPartialExtensions.cs</location>
            <body hash="284b39e1210da582b076f55a9a81e09d"><![CDATA[{
            return html.HtmlHelper.Partial(partialViewName, model, html.HtmlHelper.ViewData);
        }]]></body>
          </codeblock>
        </method>
        <method name="Partial">
          <declaration><![CDATA[public static MvcHtmlString Partial(this DnnHtmlHelper html, string partialViewName, object model, ViewDataDictionary viewData)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="62" sc="9" el="64" ec="10">Helpers\HtmlPartialExtensions.cs</location>
            <body hash="80fced18eaad76aefaf827583038190a"><![CDATA[{
            return html.HtmlHelper.Partial(partialViewName, model, viewData);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="HtmlRenderPartialExtensions">
      <declaration><![CDATA[public static class HtmlRenderPartialExtensions]]></declaration>
      <documentation>
      </documentation>
      <constructors>
      </constructors>
      <methods>
        <method name="RenderPartial">
          <declaration><![CDATA[public static void RenderPartial(this DnnHtmlHelper html, string partialViewName)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="18" sc="9" el="20" ec="10">Helpers\HtmlRenderPartialExtensions.cs</location>
            <body hash="e3e01de534eab40c00f3f6c2bda259d1"><![CDATA[{
            html.HtmlHelper.RenderPartial(partialViewName, html.HtmlHelper.ViewData);
        }]]></body>
          </codeblock>
        </method>
        <method name="RenderPartial">
          <declaration><![CDATA[public static void RenderPartial(this DnnHtmlHelper html, string partialViewName, ViewDataDictionary viewData)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="27" sc="9" el="29" ec="10">Helpers\HtmlRenderPartialExtensions.cs</location>
            <body hash="3bb10939886316631a3419b21cab5f47"><![CDATA[{
            html.HtmlHelper.RenderPartial(partialViewName, viewData);
        }]]></body>
          </codeblock>
        </method>
        <method name="RenderPartial">
          <declaration><![CDATA[public static void RenderPartial(this DnnHtmlHelper html, object model, string partialViewName)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="36" sc="9" el="38" ec="10">Helpers\HtmlRenderPartialExtensions.cs</location>
            <body hash="384fb7fa6f4ad3d65567939c1b11fb84"><![CDATA[{
            html.HtmlHelper.RenderPartial(partialViewName, model, html.HtmlHelper.ViewData);
        }]]></body>
          </codeblock>
        </method>
        <method name="RenderPartial">
          <declaration><![CDATA[public static void RenderPartial(this DnnHtmlHelper html, string partialViewName, object model, ViewDataDictionary viewData)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="46" sc="9" el="48" ec="10">Helpers\HtmlRenderPartialExtensions.cs</location>
            <body hash="b4386daa2022cb3641b140a17c5ae94f"><![CDATA[{
            html.HtmlHelper.RenderPartial(partialViewName, model, viewData);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="HtmlSelectExtensions">
      <declaration><![CDATA[public static class HtmlSelectExtensions]]></declaration>
      <documentation>
      </documentation>
      <constructors>
      </constructors>
      <methods>
        <method name="DropDownList">
          <declaration><![CDATA[public static MvcHtmlString DropDownList(this DnnHtmlHelper html, string name)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="28" sc="9" el="30" ec="10">Helpers\HtmlSelectExtensions.cs</location>
            <body hash="78d21869fd65722d215cae087ca218d9"><![CDATA[{
            return html.HtmlHelper.DropDownList(name);
        }]]></body>
          </codeblock>
        </method>
        <method name="DropDownList">
          <declaration><![CDATA[public static MvcHtmlString DropDownList(this DnnHtmlHelper html, string name, string optionLabel)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="41" sc="9" el="43" ec="10">Helpers\HtmlSelectExtensions.cs</location>
            <body hash="e188211f50219053acb6a71f4fe41420"><![CDATA[{
            return html.HtmlHelper.DropDownList(name, optionLabel);
        }]]></body>
          </codeblock>
        </method>
        <method name="DropDownList">
          <declaration><![CDATA[public static MvcHtmlString DropDownList(this DnnHtmlHelper html, string name, IEnumerable<SelectListItem> selectList)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="54" sc="9" el="56" ec="10">Helpers\HtmlSelectExtensions.cs</location>
            <body hash="a75a498fa2bb67354087be4d5235402c"><![CDATA[{
            return html.HtmlHelper.DropDownList(name, selectList);
        }]]></body>
          </codeblock>
        </method>
        <method name="DropDownList">
          <declaration><![CDATA[public static MvcHtmlString DropDownList(this DnnHtmlHelper html, string name, IEnumerable<SelectListItem> selectList, object htmlAttributes)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="67" sc="9" el="69" ec="10">Helpers\HtmlSelectExtensions.cs</location>
            <body hash="3384a5ab876a5b9e9f72562dfc07b864"><![CDATA[{
            return html.HtmlHelper.DropDownList(name, selectList, htmlAttributes);
        }]]></body>
          </codeblock>
        </method>
        <method name="DropDownList">
          <declaration><![CDATA[public static MvcHtmlString DropDownList(this DnnHtmlHelper html, string name, IEnumerable<SelectListItem> selectList, IDictionary<string, object> htmlAttributes)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="80" sc="9" el="82" ec="10">Helpers\HtmlSelectExtensions.cs</location>
            <body hash="3384a5ab876a5b9e9f72562dfc07b864"><![CDATA[{
            return html.HtmlHelper.DropDownList(name, selectList, htmlAttributes);
        }]]></body>
          </codeblock>
        </method>
        <method name="DropDownList">
          <declaration><![CDATA[public static MvcHtmlString DropDownList(this DnnHtmlHelper html, string name, IEnumerable<SelectListItem> selectList, string optionLabel)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="93" sc="9" el="95" ec="10">Helpers\HtmlSelectExtensions.cs</location>
            <body hash="7d3881f8b88e260ede1c64436f59b68b"><![CDATA[{
            return html.HtmlHelper.DropDownList(name, selectList, optionLabel);
        }]]></body>
          </codeblock>
        </method>
        <method name="DropDownList">
          <declaration><![CDATA[public static MvcHtmlString DropDownList(this DnnHtmlHelper html, string name, IEnumerable<SelectListItem> selectList, string optionLabel, object htmlAttributes)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="106" sc="9" el="108" ec="10">Helpers\HtmlSelectExtensions.cs</location>
            <body hash="7a23595103a6cd713ab3c097b8889cb7"><![CDATA[{
            return html.HtmlHelper.DropDownList(name, selectList, optionLabel, htmlAttributes);
        }]]></body>
          </codeblock>
        </method>
        <method name="DropDownList">
          <declaration><![CDATA[public static MvcHtmlString DropDownList(this DnnHtmlHelper html, string name, IEnumerable<SelectListItem> selectList, string optionLabel, IDictionary<string, object> htmlAttributes)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="119" sc="9" el="121" ec="10">Helpers\HtmlSelectExtensions.cs</location>
            <body hash="7a23595103a6cd713ab3c097b8889cb7"><![CDATA[{
            return html.HtmlHelper.DropDownList(name, selectList, optionLabel, htmlAttributes);
        }]]></body>
          </codeblock>
        </method>
        <method name="DropDownListFor">
          <declaration><![CDATA[public static MvcHtmlString DropDownListFor<TModel, TProperty>(this DnnHtmlHelper<TModel> html, Expression<Func<TModel, TProperty>> expression, IEnumerable<SelectListItem> selectList)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="132" sc="9" el="134" ec="10">Helpers\HtmlSelectExtensions.cs</location>
            <body hash="5b1991ad4c2785cbad941a41a7b7b232"><![CDATA[{
            return html.HtmlHelper.DropDownListFor(expression, selectList);
        }]]></body>
          </codeblock>
        </method>
        <method name="DropDownListFor">
          <declaration><![CDATA[public static MvcHtmlString DropDownListFor<TModel, TProperty>(this DnnHtmlHelper<TModel> html, Expression<Func<TModel, TProperty>> expression, IEnumerable<SelectListItem> selectList, object htmlAttributes)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="145" sc="9" el="147" ec="10">Helpers\HtmlSelectExtensions.cs</location>
            <body hash="1d6823582b075ca4e45157fcedb26373"><![CDATA[{
            return html.HtmlHelper.DropDownListFor(expression, selectList, htmlAttributes);
        }]]></body>
          </codeblock>
        </method>
        <method name="DropDownListFor">
          <declaration><![CDATA[public static MvcHtmlString DropDownListFor<TModel, TProperty>(this DnnHtmlHelper<TModel> html, Expression<Func<TModel, TProperty>> expression, IEnumerable<SelectListItem> selectList, IDictionary<string, object> htmlAttributes)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="158" sc="9" el="160" ec="10">Helpers\HtmlSelectExtensions.cs</location>
            <body hash="1d6823582b075ca4e45157fcedb26373"><![CDATA[{
            return html.HtmlHelper.DropDownListFor(expression, selectList, htmlAttributes);
        }]]></body>
          </codeblock>
        </method>
        <method name="DropDownListFor">
          <declaration><![CDATA[public static MvcHtmlString DropDownListFor<TModel, TProperty>(this DnnHtmlHelper<TModel> html, Expression<Func<TModel, TProperty>> expression, IEnumerable<SelectListItem> selectList, string optionLabel)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="171" sc="9" el="173" ec="10">Helpers\HtmlSelectExtensions.cs</location>
            <body hash="6b3969676d69430bb73cc8eadda803c1"><![CDATA[{
            return html.HtmlHelper.DropDownListFor(expression, selectList, optionLabel);
        }]]></body>
          </codeblock>
        </method>
        <method name="DropDownListFor">
          <declaration><![CDATA[public static MvcHtmlString DropDownListFor<TModel, TProperty>(this DnnHtmlHelper<TModel> html, Expression<Func<TModel, TProperty>> expression, IEnumerable<SelectListItem> selectList, string optionLabel, object htmlAttributes)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="184" sc="9" el="186" ec="10">Helpers\HtmlSelectExtensions.cs</location>
            <body hash="fc31011cc9d988fe113bf260d2d8ec2b"><![CDATA[{
            return html.HtmlHelper.DropDownListFor(expression, selectList, optionLabel, htmlAttributes);
        }]]></body>
          </codeblock>
        </method>
        <method name="DropDownListFor">
          <declaration><![CDATA[public static MvcHtmlString DropDownListFor<TModel, TProperty>(this DnnHtmlHelper<TModel> html, Expression<Func<TModel, TProperty>> expression, IEnumerable<SelectListItem> selectList, string optionLabel, IDictionary<string, object> htmlAttributes)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="197" sc="9" el="199" ec="10">Helpers\HtmlSelectExtensions.cs</location>
            <body hash="fc31011cc9d988fe113bf260d2d8ec2b"><![CDATA[{
            return html.HtmlHelper.DropDownListFor(expression, selectList, optionLabel, htmlAttributes);
        }]]></body>
          </codeblock>
        </method>
        <method name="EnumDropDownListFor">
          <declaration><![CDATA[public static MvcHtmlString EnumDropDownListFor<TModel, TEnum>(this DnnHtmlHelper<TModel> html, Expression<Func<TModel, TEnum>> expression)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="210" sc="9" el="212" ec="10">Helpers\HtmlSelectExtensions.cs</location>
            <body hash="09c1aaecc75beb6319a0a139591e5497"><![CDATA[{
            return html.HtmlHelper.EnumDropDownListFor<TModel, TEnum>(expression);
        }]]></body>
          </codeblock>
        </method>
        <method name="EnumDropDownListFor">
          <declaration><![CDATA[public static MvcHtmlString EnumDropDownListFor<TModel, TEnum>(this DnnHtmlHelper<TModel> html, Expression<Func<TModel, TEnum>> expression, object htmlAttributes)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="223" sc="9" el="225" ec="10">Helpers\HtmlSelectExtensions.cs</location>
            <body hash="fe96f2cc1bafaeb2b6e0048ee2fa721b"><![CDATA[{
            return html.HtmlHelper.EnumDropDownListFor<TModel, TEnum>(expression, htmlAttributes);
        }]]></body>
          </codeblock>
        </method>
        <method name="EnumDropDownListFor">
          <declaration><![CDATA[public static MvcHtmlString EnumDropDownListFor<TModel, TEnum>(this DnnHtmlHelper<TModel> html, Expression<Func<TModel, TEnum>> expression, IDictionary<string, object> htmlAttributes)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="236" sc="9" el="238" ec="10">Helpers\HtmlSelectExtensions.cs</location>
            <body hash="fe96f2cc1bafaeb2b6e0048ee2fa721b"><![CDATA[{
            return html.HtmlHelper.EnumDropDownListFor<TModel, TEnum>(expression, htmlAttributes);
        }]]></body>
          </codeblock>
        </method>
        <method name="EnumDropDownListFor">
          <declaration><![CDATA[public static MvcHtmlString EnumDropDownListFor<TModel, TEnum>(this DnnHtmlHelper<TModel> html, Expression<Func<TModel, TEnum>> expression, string optionLabel)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="249" sc="9" el="251" ec="10">Helpers\HtmlSelectExtensions.cs</location>
            <body hash="66ad3549da7c72bbed5e5d24c3324020"><![CDATA[{
            return html.HtmlHelper.EnumDropDownListFor<TModel, TEnum>(expression, optionLabel);
        }]]></body>
          </codeblock>
        </method>
        <method name="EnumDropDownListFor">
          <declaration><![CDATA[public static MvcHtmlString EnumDropDownListFor<TModel, TEnum>(this DnnHtmlHelper<TModel> html, Expression<Func<TModel, TEnum>> expression, string optionLabel, object htmlAttributes)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="262" sc="9" el="264" ec="10">Helpers\HtmlSelectExtensions.cs</location>
            <body hash="071896ccbd1e523e7ca5eac91352effb"><![CDATA[{
            return html.HtmlHelper.EnumDropDownListFor<TModel, TEnum>(expression, optionLabel, htmlAttributes);
        }]]></body>
          </codeblock>
        </method>
        <method name="EnumDropDownListFor">
          <declaration><![CDATA[public static MvcHtmlString EnumDropDownListFor<TModel, TEnum>(this DnnHtmlHelper<TModel> html, Expression<Func<TModel, TEnum>> expression, string optionLabel, IDictionary<string, object> htmlAttributes)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="275" sc="9" el="277" ec="10">Helpers\HtmlSelectExtensions.cs</location>
            <body hash="071896ccbd1e523e7ca5eac91352effb"><![CDATA[{
            return html.HtmlHelper.EnumDropDownListFor<TModel, TEnum>(expression, optionLabel, htmlAttributes);
        }]]></body>
          </codeblock>
        </method>
        <method name="ListBox">
          <declaration><![CDATA[public static MvcHtmlString ListBox(this DnnHtmlHelper html, string name)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="290" sc="9" el="292" ec="10">Helpers\HtmlSelectExtensions.cs</location>
            <body hash="2c34ab8d0ea5877219524b9a64fff2df"><![CDATA[{
            return html.HtmlHelper.ListBox(name);
        }]]></body>
          </codeblock>
        </method>
        <method name="ListBox">
          <declaration><![CDATA[public static MvcHtmlString ListBox(this DnnHtmlHelper html, string name, IEnumerable<SelectListItem> selectList)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="303" sc="9" el="305" ec="10">Helpers\HtmlSelectExtensions.cs</location>
            <body hash="57cb63d1f1016c80bc1ee9e5124b20d8"><![CDATA[{
            return html.HtmlHelper.ListBox(name, selectList);
        }]]></body>
          </codeblock>
        </method>
        <method name="ListBox">
          <declaration><![CDATA[public static MvcHtmlString ListBox(this DnnHtmlHelper html, string name, IEnumerable<SelectListItem> selectList, object htmlAttributes)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="316" sc="9" el="318" ec="10">Helpers\HtmlSelectExtensions.cs</location>
            <body hash="9e16f9a3f77c9e06664ab8566f06c845"><![CDATA[{
            return html.HtmlHelper.ListBox(name, selectList, htmlAttributes);
        }]]></body>
          </codeblock>
        </method>
        <method name="ListBox">
          <declaration><![CDATA[public static MvcHtmlString ListBox(this DnnHtmlHelper html, string name, IEnumerable<SelectListItem> selectList, IDictionary<string, object> htmlAttributes)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="329" sc="9" el="331" ec="10">Helpers\HtmlSelectExtensions.cs</location>
            <body hash="9e16f9a3f77c9e06664ab8566f06c845"><![CDATA[{
            return html.HtmlHelper.ListBox(name, selectList, htmlAttributes);
        }]]></body>
          </codeblock>
        </method>
        <method name="ListBoxFor">
          <declaration><![CDATA[public static MvcHtmlString ListBoxFor<TModel, TProperty>(this DnnHtmlHelper<TModel> html, Expression<Func<TModel, TProperty>> expression, IEnumerable<SelectListItem> selectList)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="342" sc="9" el="344" ec="10">Helpers\HtmlSelectExtensions.cs</location>
            <body hash="7a107115bc8e88bdbee26f971c6f8ebb"><![CDATA[{
            return html.HtmlHelper.ListBoxFor(expression, selectList);
        }]]></body>
          </codeblock>
        </method>
        <method name="ListBoxFor">
          <declaration><![CDATA[public static MvcHtmlString ListBoxFor<TModel, TProperty>(this DnnHtmlHelper<TModel> html, Expression<Func<TModel, TProperty>> expression, IEnumerable<SelectListItem> selectList, object htmlAttributes)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="355" sc="9" el="357" ec="10">Helpers\HtmlSelectExtensions.cs</location>
            <body hash="eb8051a692fa2496e01a6f9ffc572be9"><![CDATA[{
            return html.HtmlHelper.ListBoxFor(expression, selectList, htmlAttributes);
        }]]></body>
          </codeblock>
        </method>
        <method name="ListBoxFor">
          <declaration><![CDATA[public static MvcHtmlString ListBoxFor<TModel, TProperty>(this DnnHtmlHelper<TModel> html, Expression<Func<TModel, TProperty>> expression, IEnumerable<SelectListItem> selectList, IDictionary<string, object> htmlAttributes)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="368" sc="9" el="370" ec="10">Helpers\HtmlSelectExtensions.cs</location>
            <body hash="eb8051a692fa2496e01a6f9ffc572be9"><![CDATA[{
            return html.HtmlHelper.ListBoxFor(expression, selectList, htmlAttributes);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="HtmlTextAreaExtensions">
      <declaration><![CDATA[public static class HtmlTextAreaExtensions]]></declaration>
      <documentation>
      </documentation>
      <constructors>
      </constructors>
      <methods>
        <method name="TextArea">
          <declaration><![CDATA[public static MvcHtmlString TextArea(this DnnHtmlHelper html, string name)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="18" sc="9" el="21" ec="10">Helpers\HtmlTextAreaExtensions.cs</location>
            <body hash="b8e28a12e9b26884581ee4731d6c6f57"><![CDATA[{
            var htmlHelper = html.HtmlHelper;
            return htmlHelper.TextArea(name);
        }]]></body>
          </codeblock>
        </method>
        <method name="TextArea">
          <declaration><![CDATA[public static MvcHtmlString TextArea(this DnnHtmlHelper html, string name, object htmlAttributes)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="24" sc="9" el="27" ec="10">Helpers\HtmlTextAreaExtensions.cs</location>
            <body hash="fbdf10c2a30dea9127e6ac8d69445a7b"><![CDATA[{
            var htmlHelper = html.HtmlHelper;
            return htmlHelper.TextArea(name, htmlAttributes);
        }]]></body>
          </codeblock>
        </method>
        <method name="TextArea">
          <declaration><![CDATA[public static MvcHtmlString TextArea(this DnnHtmlHelper html, string name, IDictionary<string, object> htmlAttributes)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="30" sc="9" el="33" ec="10">Helpers\HtmlTextAreaExtensions.cs</location>
            <body hash="fbdf10c2a30dea9127e6ac8d69445a7b"><![CDATA[{
            var htmlHelper = html.HtmlHelper;
            return htmlHelper.TextArea(name, htmlAttributes);
        }]]></body>
          </codeblock>
        </method>
        <method name="TextArea">
          <declaration><![CDATA[public static MvcHtmlString TextArea(this DnnHtmlHelper html, string name, string value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="36" sc="9" el="39" ec="10">Helpers\HtmlTextAreaExtensions.cs</location>
            <body hash="d0b8a85971fa270daa22407c6edab325"><![CDATA[{
            var htmlHelper = html.HtmlHelper;
            return htmlHelper.TextArea(name, value);
        }]]></body>
          </codeblock>
        </method>
        <method name="TextArea">
          <declaration><![CDATA[public static MvcHtmlString TextArea(this DnnHtmlHelper html, string name, string value, object htmlAttributes)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="42" sc="9" el="45" ec="10">Helpers\HtmlTextAreaExtensions.cs</location>
            <body hash="02dd93b46f077020d0c8f5f1c7c12bd3"><![CDATA[{
            var htmlHelper = html.HtmlHelper;
            return htmlHelper.TextArea(name, value, htmlAttributes);
        }]]></body>
          </codeblock>
        </method>
        <method name="TextArea">
          <declaration><![CDATA[public static MvcHtmlString TextArea(this DnnHtmlHelper html, string name, string value, IDictionary<string, object> htmlAttributes)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="48" sc="9" el="51" ec="10">Helpers\HtmlTextAreaExtensions.cs</location>
            <body hash="02dd93b46f077020d0c8f5f1c7c12bd3"><![CDATA[{
            var htmlHelper = html.HtmlHelper;
            return htmlHelper.TextArea(name, value, htmlAttributes);
        }]]></body>
          </codeblock>
        </method>
        <method name="TextArea">
          <declaration><![CDATA[public static MvcHtmlString TextArea(this DnnHtmlHelper html, string name, string value, int rows, int columns, object htmlAttributes)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="54" sc="9" el="57" ec="10">Helpers\HtmlTextAreaExtensions.cs</location>
            <body hash="eb8bb1805190000028446767c8cac813"><![CDATA[{
            var htmlHelper = html.HtmlHelper;
            return htmlHelper.TextArea(name, value, rows, columns, htmlAttributes);
        }]]></body>
          </codeblock>
        </method>
        <method name="TextArea">
          <declaration><![CDATA[public static MvcHtmlString TextArea(this DnnHtmlHelper html, string name, string value, int rows, int columns, IDictionary<string, object> htmlAttributes)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="60" sc="9" el="63" ec="10">Helpers\HtmlTextAreaExtensions.cs</location>
            <body hash="eb8bb1805190000028446767c8cac813"><![CDATA[{
            var htmlHelper = html.HtmlHelper;
            return htmlHelper.TextArea(name, value, rows, columns, htmlAttributes);
        }]]></body>
          </codeblock>
        </method>
        <method name="TextAreaFor">
          <declaration><![CDATA[public static MvcHtmlString TextAreaFor<TModel, TProperty>(this DnnHtmlHelper<TModel> html, Expression<Func<TModel, TProperty>> expression)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="66" sc="9" el="69" ec="10">Helpers\HtmlTextAreaExtensions.cs</location>
            <body hash="a6b80739f9b9d4d884551f75583b5a4b"><![CDATA[{
            var htmlHelper = html.HtmlHelper as HtmlHelper<TModel>;
            return htmlHelper.TextAreaFor(expression, TextAreaRows, TextAreaColumns, null);
        }]]></body>
          </codeblock>
        </method>
        <method name="TextAreaFor">
          <declaration><![CDATA[public static MvcHtmlString TextAreaFor<TModel, TProperty>(this DnnHtmlHelper<TModel> html, Expression<Func<TModel, TProperty>> expression, object htmlAttributes)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="72" sc="9" el="75" ec="10">Helpers\HtmlTextAreaExtensions.cs</location>
            <body hash="44fc774709d7f59951d7533b208bab1a"><![CDATA[{
            var htmlHelper = html.HtmlHelper as HtmlHelper<TModel>;
            return htmlHelper.TextAreaFor(expression, TextAreaRows, TextAreaColumns, htmlAttributes);
        }]]></body>
          </codeblock>
        </method>
        <method name="TextAreaFor">
          <declaration><![CDATA[public static MvcHtmlString TextAreaFor<TModel, TProperty>(this DnnHtmlHelper<TModel> html, Expression<Func<TModel, TProperty>> expression, IDictionary<string, object> htmlAttributes)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="78" sc="9" el="81" ec="10">Helpers\HtmlTextAreaExtensions.cs</location>
            <body hash="44fc774709d7f59951d7533b208bab1a"><![CDATA[{
            var htmlHelper = html.HtmlHelper as HtmlHelper<TModel>;
            return htmlHelper.TextAreaFor(expression, TextAreaRows, TextAreaColumns, htmlAttributes);
        }]]></body>
          </codeblock>
        </method>
        <method name="TextAreaFor">
          <declaration><![CDATA[public static MvcHtmlString TextAreaFor<TModel, TProperty>(this DnnHtmlHelper<TModel> html, Expression<Func<TModel, TProperty>> expression, int rows, int columns, object htmlAttributes)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="84" sc="9" el="87" ec="10">Helpers\HtmlTextAreaExtensions.cs</location>
            <body hash="01a7974e5153d6da8dbeed8297b83baa"><![CDATA[{
            var htmlHelper = html.HtmlHelper as HtmlHelper<TModel>;
            return htmlHelper.TextAreaFor(expression, rows, columns, htmlAttributes);
        }]]></body>
          </codeblock>
        </method>
        <method name="TextAreaFor">
          <declaration><![CDATA[public static MvcHtmlString TextAreaFor<TModel, TProperty>(this DnnHtmlHelper<TModel> html, Expression<Func<TModel, TProperty>> expression, int rows, int columns, IDictionary<string, object> htmlAttributes)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="90" sc="9" el="93" ec="10">Helpers\HtmlTextAreaExtensions.cs</location>
            <body hash="01a7974e5153d6da8dbeed8297b83baa"><![CDATA[{
            var htmlHelper = html.HtmlHelper as HtmlHelper<TModel>;
            return htmlHelper.TextAreaFor(expression, rows, columns, htmlAttributes);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="TextAreaColumns">
          <declaration><![CDATA[private const int TextAreaColumns = 20;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="TextAreaRows">
          <declaration><![CDATA[private const int TextAreaRows = 2;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="HtmlValidationExtensions">
      <declaration><![CDATA[public static class HtmlValidationExtensions]]></declaration>
      <documentation>
      </documentation>
      <constructors>
      </constructors>
      <methods>
        <method name="Validate">
          <declaration><![CDATA[public static void Validate(this DnnHtmlHelper html, string modelName)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="24" sc="9" el="26" ec="10">Helpers\HtmlValidationExtensions.cs</location>
            <body hash="95a9c76515fe68c96ef02a08a6e7ed6d"><![CDATA[{
            html.HtmlHelper.Validate(modelName);
        }]]></body>
          </codeblock>
        </method>
        <method name="ValidateFor">
          <declaration><![CDATA[public static void ValidateFor<TModel, TProperty>(this DnnHtmlHelper<TModel> html, Expression<Func<TModel, TProperty>> expression)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="33" sc="9" el="36" ec="10">Helpers\HtmlValidationExtensions.cs</location>
            <body hash="4c25591ff1411e5dc65402fdfaa261d6"><![CDATA[{
            var htmlHelper = html.HtmlHelper as HtmlHelper<TModel>;
            htmlHelper.ValidateFor(expression);
        }]]></body>
          </codeblock>
        </method>
        <method name="ValidationMessage">
          <declaration><![CDATA[public static MvcHtmlString ValidationMessage(this DnnHtmlHelper html, string modelName)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="49" sc="9" el="51" ec="10">Helpers\HtmlValidationExtensions.cs</location>
            <body hash="48590553eb3c7e78c4c15681fbcbb9c2"><![CDATA[{
            return html.HtmlHelper.ValidationMessage(modelName);
        }]]></body>
          </codeblock>
        </method>
        <method name="ValidationMessage">
          <declaration><![CDATA[public static MvcHtmlString ValidationMessage(this DnnHtmlHelper html, string modelName, object htmlAttributes)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="62" sc="9" el="64" ec="10">Helpers\HtmlValidationExtensions.cs</location>
            <body hash="110301dbcc314be16689f7ebd8cd2629"><![CDATA[{
            return html.HtmlHelper.ValidationMessage(modelName, htmlAttributes);
        }]]></body>
          </codeblock>
        </method>
        <method name="ValidationMessage">
          <declaration><![CDATA[public static MvcHtmlString ValidationMessage(this DnnHtmlHelper html, string modelName, string validationMessage)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="75" sc="9" el="77" ec="10">Helpers\HtmlValidationExtensions.cs</location>
            <body hash="b04da53857256e9970716fb81ae3e0e3"><![CDATA[{
            return html.HtmlHelper.ValidationMessage(modelName, validationMessage);
        }]]></body>
          </codeblock>
        </method>
        <method name="ValidationMessage">
          <declaration><![CDATA[public static MvcHtmlString ValidationMessage(this DnnHtmlHelper html, string modelName, string validationMessage, object htmlAttributes)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="88" sc="9" el="90" ec="10">Helpers\HtmlValidationExtensions.cs</location>
            <body hash="44ccf68094d1357b045daddd7a5d2159"><![CDATA[{
            return html.HtmlHelper.ValidationMessage(modelName, validationMessage, htmlAttributes);
        }]]></body>
          </codeblock>
        </method>
        <method name="ValidationMessage">
          <declaration><![CDATA[public static MvcHtmlString ValidationMessage(this DnnHtmlHelper html, string modelName, IDictionary<string, object> htmlAttributes)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="101" sc="9" el="103" ec="10">Helpers\HtmlValidationExtensions.cs</location>
            <body hash="110301dbcc314be16689f7ebd8cd2629"><![CDATA[{
            return html.HtmlHelper.ValidationMessage(modelName, htmlAttributes);
        }]]></body>
          </codeblock>
        </method>
        <method name="ValidationMessage">
          <declaration><![CDATA[public static MvcHtmlString ValidationMessage(this DnnHtmlHelper html, string modelName, string validationMessage, IDictionary<string, object> htmlAttributes)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="114" sc="9" el="116" ec="10">Helpers\HtmlValidationExtensions.cs</location>
            <body hash="44ccf68094d1357b045daddd7a5d2159"><![CDATA[{
            return html.HtmlHelper.ValidationMessage(modelName, validationMessage, htmlAttributes);
        }]]></body>
          </codeblock>
        </method>
        <method name="ValidationMessageFor">
          <declaration><![CDATA[public static MvcHtmlString ValidationMessageFor<TModel, TProperty>(this DnnHtmlHelper<TModel> html, Expression<Func<TModel, TProperty>> expression)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="127" sc="9" el="130" ec="10">Helpers\HtmlValidationExtensions.cs</location>
            <body hash="c44282931dd4b92f3fe18f67d388eea0"><![CDATA[{
            var htmlHelper = html.HtmlHelper as HtmlHelper<TModel>;
            return htmlHelper.ValidationMessageFor(expression);
        }]]></body>
          </codeblock>
        </method>
        <method name="ValidationMessageFor">
          <declaration><![CDATA[public static MvcHtmlString ValidationMessageFor<TModel, TProperty>(this DnnHtmlHelper<TModel> html, Expression<Func<TModel, TProperty>> expression, string validationMessage)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="141" sc="9" el="144" ec="10">Helpers\HtmlValidationExtensions.cs</location>
            <body hash="71ea75f0c965d91a0cfba89a05fc65b0"><![CDATA[{
            var htmlHelper = html.HtmlHelper as HtmlHelper<TModel>;
            return htmlHelper.ValidationMessageFor(expression, validationMessage);
        }]]></body>
          </codeblock>
        </method>
        <method name="ValidationMessageFor">
          <declaration><![CDATA[public static MvcHtmlString ValidationMessageFor<TModel, TProperty>(this DnnHtmlHelper<TModel> html, Expression<Func<TModel, TProperty>> expression, string validationMessage, object htmlAttributes)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="155" sc="9" el="158" ec="10">Helpers\HtmlValidationExtensions.cs</location>
            <body hash="7d1b7a4c767ea8a675e2871ad6bfc29d"><![CDATA[{
            var htmlHelper = html.HtmlHelper as HtmlHelper<TModel>;
            return htmlHelper.ValidationMessageFor(expression, validationMessage, htmlAttributes);
        }]]></body>
          </codeblock>
        </method>
        <method name="ValidationMessageFor">
          <declaration><![CDATA[public static MvcHtmlString ValidationMessageFor<TModel, TProperty>(this DnnHtmlHelper<TModel> html, Expression<Func<TModel, TProperty>> expression, string validationMessage, IDictionary<string, object> htmlAttributes)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="169" sc="9" el="172" ec="10">Helpers\HtmlValidationExtensions.cs</location>
            <body hash="7d1b7a4c767ea8a675e2871ad6bfc29d"><![CDATA[{
            var htmlHelper = html.HtmlHelper as HtmlHelper<TModel>;
            return htmlHelper.ValidationMessageFor(expression, validationMessage, htmlAttributes);
        }]]></body>
          </codeblock>
        </method>
        <method name="ValidationSummary">
          <declaration><![CDATA[public static MvcHtmlString ValidationSummary(this DnnHtmlHelper html)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="185" sc="9" el="187" ec="10">Helpers\HtmlValidationExtensions.cs</location>
            <body hash="9995a30c28d4952b2a9285b0eeaf421e"><![CDATA[{
            return html.HtmlHelper.ValidationSummary();
        }]]></body>
          </codeblock>
        </method>
        <method name="ValidationSummary">
          <declaration><![CDATA[public static MvcHtmlString ValidationSummary(this DnnHtmlHelper html, bool excludePropertyErrors)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="198" sc="9" el="200" ec="10">Helpers\HtmlValidationExtensions.cs</location>
            <body hash="d350c6877c056ba02272ba25b9d9338d"><![CDATA[{
            return html.HtmlHelper.ValidationSummary(excludePropertyErrors);
        }]]></body>
          </codeblock>
        </method>
        <method name="ValidationSummary">
          <declaration><![CDATA[public static MvcHtmlString ValidationSummary(this DnnHtmlHelper html, string message)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="211" sc="9" el="213" ec="10">Helpers\HtmlValidationExtensions.cs</location>
            <body hash="18b0ef195306615b3e8db0d423267ba6"><![CDATA[{
            return html.HtmlHelper.ValidationSummary(message);
        }]]></body>
          </codeblock>
        </method>
        <method name="ValidationSummary">
          <declaration><![CDATA[public static MvcHtmlString ValidationSummary(this DnnHtmlHelper html, bool excludePropertyErrors, string message)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="224" sc="9" el="226" ec="10">Helpers\HtmlValidationExtensions.cs</location>
            <body hash="246ba1d9a1df030307185fccec3ae4d8"><![CDATA[{
            return html.HtmlHelper.ValidationSummary(excludePropertyErrors, message);
        }]]></body>
          </codeblock>
        </method>
        <method name="ValidationSummary">
          <declaration><![CDATA[public static MvcHtmlString ValidationSummary(this DnnHtmlHelper html, string message, object htmlAttributes)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="237" sc="9" el="239" ec="10">Helpers\HtmlValidationExtensions.cs</location>
            <body hash="9ec2ea9321e2ecf833cf6becf3c69647"><![CDATA[{
            return html.HtmlHelper.ValidationSummary(message, htmlAttributes);
        }]]></body>
          </codeblock>
        </method>
        <method name="ValidationSummary">
          <declaration><![CDATA[public static MvcHtmlString ValidationSummary(this DnnHtmlHelper html, bool excludePropertyErrors, string message, object htmlAttributes)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="250" sc="9" el="252" ec="10">Helpers\HtmlValidationExtensions.cs</location>
            <body hash="560a3321e9faa52e77e53346920beb77"><![CDATA[{
            return html.HtmlHelper.ValidationSummary(excludePropertyErrors, message, htmlAttributes);
        }]]></body>
          </codeblock>
        </method>
        <method name="ValidationSummary">
          <declaration><![CDATA[public static MvcHtmlString ValidationSummary(this DnnHtmlHelper html, string message, IDictionary<string, object> htmlAttributes)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="263" sc="9" el="265" ec="10">Helpers\HtmlValidationExtensions.cs</location>
            <body hash="9ec2ea9321e2ecf833cf6becf3c69647"><![CDATA[{
            return html.HtmlHelper.ValidationSummary(message, htmlAttributes);
        }]]></body>
          </codeblock>
        </method>
        <method name="ValidationSummary">
          <declaration><![CDATA[public static MvcHtmlString ValidationSummary(this DnnHtmlHelper html, bool excludePropertyErrors, string message, IDictionary<string, object> htmlAttributes)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="276" sc="9" el="278" ec="10">Helpers\HtmlValidationExtensions.cs</location>
            <body hash="560a3321e9faa52e77e53346920beb77"><![CDATA[{
            return html.HtmlHelper.ValidationSummary(excludePropertyErrors, message, htmlAttributes);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="HtmlValueExtensions">
      <declaration><![CDATA[public static class HtmlValueExtensions]]></declaration>
      <documentation>
      </documentation>
      <constructors>
      </constructors>
      <methods>
        <method name="Value">
          <declaration><![CDATA[public static MvcHtmlString Value(this DnnHtmlHelper html, string name)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="25" sc="9" el="27" ec="10">Helpers\HtmlValueExtensions.cs</location>
            <body hash="44b839b643bc3a63481a61b2b1c556f1"><![CDATA[{
            return html.HtmlHelper.Value(name);
        }]]></body>
          </codeblock>
        </method>
        <method name="Value">
          <declaration><![CDATA[public static MvcHtmlString Value(this DnnHtmlHelper html, string name, string format)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="38" sc="9" el="40" ec="10">Helpers\HtmlValueExtensions.cs</location>
            <body hash="522dee41a7dc5c5e3302d49e2c3eb6a6"><![CDATA[{
            return html.HtmlHelper.Value(name, format);
        }]]></body>
          </codeblock>
        </method>
        <method name="ValueFor">
          <declaration><![CDATA[public static MvcHtmlString ValueFor<TModel, TProperty>(this DnnHtmlHelper<TModel> html, Expression<Func<TModel, TProperty>> expression)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="51" sc="9" el="53" ec="10">Helpers\HtmlValueExtensions.cs</location>
            <body hash="7b38fff2392cc410c9b559a331d2f09b"><![CDATA[{
            return html.HtmlHelper.ValueFor(expression);
        }]]></body>
          </codeblock>
        </method>
        <method name="ValueFor">
          <declaration><![CDATA[public static MvcHtmlString ValueFor<TModel, TProperty>(this DnnHtmlHelper<TModel> html, Expression<Func<TModel, TProperty>> expression, string format)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="64" sc="9" el="66" ec="10">Helpers\HtmlValueExtensions.cs</location>
            <body hash="8af186fd01632af6dc33f8f816fa85a9"><![CDATA[{
            return html.HtmlHelper.ValueFor(expression, format);
        }]]></body>
          </codeblock>
        </method>
        <method name="ValueForModel">
          <declaration><![CDATA[public static MvcHtmlString ValueForModel(this DnnHtmlHelper html)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="77" sc="9" el="79" ec="10">Helpers\HtmlValueExtensions.cs</location>
            <body hash="0fa8a3850963da85479348aebf13f91c"><![CDATA[{
            return html.HtmlHelper.ValueForModel();
        }]]></body>
          </codeblock>
        </method>
        <method name="ValueForModel">
          <declaration><![CDATA[public static MvcHtmlString ValueForModel(this DnnHtmlHelper html, string format)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="90" sc="9" el="92" ec="10">Helpers\HtmlValueExtensions.cs</location>
            <body hash="a2949213ecbe632f02b6ceca68d908ac"><![CDATA[{
            return html.HtmlHelper.Value(format);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="DotNetNuke.Web.Mvc.Routing">
    <class name="HttpContextExtensions">
      <declaration><![CDATA[public static class HttpContextExtensions]]></declaration>
      <documentation>
      </documentation>
      <constructors>
      </constructors>
      <methods>
        <method name="GetModuleRequestResult">
          <declaration><![CDATA[public static ModuleRequestResult GetModuleRequestResult(this HttpContextBase context)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="32" sc="9" el="34" ec="10">Routing\HttpContextExtensions.cs</location>
            <body hash="92e9ba021a78d39cbc3d6a8da7d3851b"><![CDATA[{
            return context.Items[ModuleRequestResultKey] as ModuleRequestResult;
        }]]></body>
          </codeblock>
        </method>
        <method name="HasModuleRequestResult">
          <declaration><![CDATA[public static bool HasModuleRequestResult(this HttpContextBase context)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="37" sc="9" el="39" ec="10">Routing\HttpContextExtensions.cs</location>
            <body hash="ed25100fb96fe603c8615b112be74bbf"><![CDATA[{
            return (context.Items[ModuleRequestResultKey] as ModuleRequestResult) != null;
        }]]></body>
          </codeblock>
        </method>
        <method name="SetModuleRequestResult">
          <declaration><![CDATA[public static void SetModuleRequestResult(this HttpContextBase context, ModuleRequestResult moduleRequestResult)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="42" sc="9" el="44" ec="10">Routing\HttpContextExtensions.cs</location>
            <body hash="f907613874a741d47849b06ba420c222"><![CDATA[{
            context.Items[ModuleRequestResultKey] = moduleRequestResult;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="ModuleRequestResultKey">
          <declaration><![CDATA[public const string ModuleRequestResultKey = "Dnn_ModuleRequestResult";]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="ModuleRoutingProvider">
      <declaration><![CDATA[public abstract class ModuleRoutingProvider]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[protected ModuleRoutingProvider()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="GenerateUrl">
          <declaration><![CDATA[public abstract string GenerateUrl(RouteValueDictionary routeValues, ModuleInstanceContext moduleContext);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="GetRouteData">
          <declaration><![CDATA[public abstract RouteData GetRouteData(HttpContextBase httpContext, ModuleControlInfo moduleControl);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="Instance">
          <declaration><![CDATA[public static ModuleRoutingProvider Instance()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="33" sc="9" el="43" ec="10">Routing\ModuleRoutingProvider.cs</location>
            <body hash="3b120c80d945e91acd7f418e5c6f0543"><![CDATA[{
            var component = ComponentFactory.GetComponent<ModuleRoutingProvider>();

            if (component == null)
            {
                component = new StandardModuleRoutingProvider();
                ComponentFactory.RegisterComponentInstance<ModuleRoutingProvider>(component);
            }

            return component;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="StandardModuleRoutingProvider">
      <declaration><![CDATA[public class StandardModuleRoutingProvider : ModuleRoutingProvider]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public StandardModuleRoutingProvider()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="GenerateUrl">
          <declaration><![CDATA[public override string GenerateUrl(RouteValueDictionary routeValues, ModuleInstanceContext moduleContext)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="40" sc="9" el="61" ec="10">Routing\StandardModuleRoutingProvider.cs</location>
            <body hash="07ec048e66b14a090a47969798f27109"><![CDATA[{
            //Look for a module control
            string controlKey = (routeValues.ContainsKey("ctl")) ? (string)routeValues["ctl"] : String.Empty;

            List<string> additionalParams = (from routeValue in routeValues 
                                             where !ExcludedRouteValues.Split(',').ToList().Contains(routeValue.Key.ToLower()) 
                                             select routeValue.Key + "=" + routeValue.Value)
                                             .ToList();

            string url;
            if (String.IsNullOrEmpty(controlKey))
            {
                additionalParams.Insert(0, "moduleId=" + moduleContext.Configuration.ModuleID);
                url = Globals.NavigateURL("", additionalParams.ToArray());
            }
            else
            {
                url = moduleContext.EditUrl(String.Empty, String.Empty, controlKey, additionalParams.ToArray());
            }

            return url;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetRouteData">
          <declaration><![CDATA[public override RouteData GetRouteData(HttpContextBase httpContext, ModuleControlInfo moduleControl)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="64" sc="9" el="104" ec="10">Routing\StandardModuleRoutingProvider.cs</location>
            <body hash="1e74804cdc6de8dad3f0ba7057b2ea2d"><![CDATA[{
            var segments = moduleControl.ControlSrc.Replace(".mvc", "").Split('/');
            string routeNamespace = String.Empty;
            string routeControllerName;
            string routeActionName;
            if (segments.Length == 3)
            {
                routeNamespace = segments[0];
                routeControllerName = segments[1];
                routeActionName = segments[2];
            }
            else
            {
                routeControllerName = segments[0];
                routeActionName = segments[1];
            }

            var actionName = (httpContext == null) ? routeActionName : httpContext.Request.QueryString.GetValueOrDefault("action", routeActionName);
            var controllerName = (httpContext == null) ? routeControllerName : httpContext.Request.QueryString.GetValueOrDefault("controller", routeControllerName);

            var routeData = new RouteData();
            routeData.Values.Add("controller", controllerName);
            routeData.Values.Add("action", actionName);

            if (httpContext != null)
            {
                foreach (var param in httpContext.Request.QueryString.AllKeys)
                {
                    if (!ExcludedQueryStringParams.Split(',').ToList().Contains(param.ToLower()))
                    {
                        routeData.Values.Add(param, httpContext.Request.QueryString[param]);
                    }
                }
            }
            if (!String.IsNullOrEmpty(routeNamespace))
            {
                routeData.DataTokens.Add("namespaces", new string[] { routeNamespace });
            }

            return routeData;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="ExcludedQueryStringParams">
          <declaration><![CDATA[private const string ExcludedQueryStringParams = "tabid,mid,ctl,language,popup,action,controller";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ExcludedRouteValues">
          <declaration><![CDATA[private const string ExcludedRouteValues = "mid,ctl,popup";]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
</root>