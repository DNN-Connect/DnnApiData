<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<root file="DotNetNuke.Caching.FileBasedCachingProvider.dll" version="06.02.01" generated="2017-06-18 22:58:12Z" generationTime="1.0206631">
  <namespace name="DotNetNuke.Services.Cache.FileBasedCachingProvider">
    <class name="FBCachingProvider">
      <declaration><![CDATA[public class FBCachingProvider : CachingProvider]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public FBCachingProvider()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
        <constructor name=".cctor">
          <declaration><![CDATA[static FBCachingProvider()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="39" sc="9" el="39" ec="61">FileBasedCachingProvider.cs</location>
            <body hash="d5e2e3b814401d6f5ffc61b07b8d1905"><![CDATA[internal static string CachingDirectory = "Cache\\"]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="ByteArrayToString">
          <declaration><![CDATA[private static string ByteArrayToString(byte[] arrInput)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="99" sc="9" el="107" ec="10">FileBasedCachingProvider.cs</location>
            <body hash="84a0fedd601e79238b968b2f304e1a99"><![CDATA[{
            int i;
            var sOutput = new StringBuilder(arrInput.Length);
            for (i = 0; i <= arrInput.Length - 1; i++)
            {
                sOutput.Append(arrInput[i].ToString("X2"));
            }
            return sOutput.ToString();
        }]]></body>
          </codeblock>
        </method>
        <method name="CreateCacheFile">
          <declaration><![CDATA[private static void CreateCacheFile(string FileName, string CacheKey)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="110" sc="9" el="137" ec="10">FileBasedCachingProvider.cs</location>
            <body hash="c936e0d5cd5389d3a30dd04288969f36"><![CDATA[{
			//declare stream
            StreamWriter s = null;
            try
            {
				//if the cache file does not already exist
                if (!File.Exists(FileName))
                {
					//create the cache file
                    s = File.CreateText(FileName);
                    //write the CacheKey to the file to provide a documented link between cache item and cache file
                    s.Write(CacheKey);
					//close the stream
                }
            }
            catch (Exception ex)
            {
                //permissions issue creating cache file or more than one thread may have been trying to write the cache file simultaneously
                Exceptions.Exceptions.LogException(ex);
            }
            finally
            {
                if (s != null)
                {
                    s.Close();
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteCacheFile">
          <declaration><![CDATA[private static void DeleteCacheFile(string FileName)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="140" sc="9" el="153" ec="10">FileBasedCachingProvider.cs</location>
            <body hash="02b102244c66846c2649f10a57db16c5"><![CDATA[{
            try
            {
                if (File.Exists(FileName))
                {
                    File.Delete(FileName);
                }
            }
            catch (Exception ex)
            {
                //an error occurred when trying to delete the cache file - this is serious as it means that the cache will not be synchronized
                Exceptions.Exceptions.LogException(ex);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetFileName">
          <declaration><![CDATA[private static string GetFileName(string CacheKey)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="156" sc="9" el="163" ec="10">FileBasedCachingProvider.cs</location>
            <body hash="028f728aa5b1869a6807813d695a2f47"><![CDATA[{
            //cache key may contain characters invalid for a filename - this method creates a valid filename
            byte[] FileNameBytes = Encoding.ASCII.GetBytes(CacheKey);
            var md5 = new MD5CryptoServiceProvider();
            FileNameBytes = md5.ComputeHash(FileNameBytes);
            string FinalFileName = ByteArrayToString(FileNameBytes);
            return Path.GetFullPath(Globals.HostMapPath + CachingDirectory + FinalFileName + CacheFileExtension);
        }]]></body>
          </codeblock>
        </method>
        <method name="Insert">
          <declaration><![CDATA[public override void Insert(string cacheKey, object itemToCache, DNNCacheDependency dependency, DateTime absoluteExpiration, TimeSpan slidingExpiration, CacheItemPriority priority, CacheItemRemovedCallback onRemoveCallback)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="44" sc="9" el="62" ec="10">FileBasedCachingProvider.cs</location>
            <body hash="319bb14edc69f9ca02a2004ca72f30df"><![CDATA[{
			//initialize cache dependency
            DNNCacheDependency d = dependency;

            //if web farm is enabled
            if (IsWebFarm())
            {
                //get hashed file name
                var f = new string[1];
                f[0] = GetFileName(cacheKey);
                //create a cache file for item
                CreateCacheFile(f[0], cacheKey);
                //create a cache dependency on the cache file
                d = new DNNCacheDependency(f, null, dependency);
            }
			
            //Call base class method to add obect to cache
            base.Insert(cacheKey, itemToCache, d, absoluteExpiration, slidingExpiration, priority, onRemoveCallback);
        }]]></body>
          </codeblock>
        </method>
        <method name="IsWebFarm">
          <declaration><![CDATA[public override bool IsWebFarm()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="65" sc="9" el="72" ec="10">FileBasedCachingProvider.cs</location>
            <body hash="eef0fced506f2d82484ff6e4092699be"><![CDATA[{
            bool _IsWebFarm = Null.NullBoolean;
            if (!string.IsNullOrEmpty(Config.GetSetting("IsWebFarm")))
            {
                _IsWebFarm = bool.Parse(Config.GetSetting("IsWebFarm"));
            }
            return _IsWebFarm;
        }]]></body>
          </codeblock>
        </method>
        <method name="PurgeCache">
          <declaration><![CDATA[public override string PurgeCache()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="75" sc="9" el="78" ec="10">FileBasedCachingProvider.cs</location>
            <body hash="da465ce17ebc16b2d5520a301519dd89"><![CDATA[{
            //called by scheduled job to remove cache files which are no longer active
            return PurgeCacheFiles(Globals.HostMapPath + CachingDirectory);
        }]]></body>
          </codeblock>
        </method>
        <method name="PurgeCacheFiles">
          <declaration><![CDATA[private string PurgeCacheFiles(string Folder)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="166" sc="9" el="209" ec="4">FileBasedCachingProvider.cs</location>
            <body hash="cbf3cf53262d1b885ff04813d6bf62f1"><![CDATA[{
            //declare counters
            int PurgedFiles = 0;
            int PurgeErrors = 0;
            int i;
			
            //get list of cache files
            string[] f;
            f = Directory.GetFiles(Folder);

            //loop through cache files
            for (i = 0; i <= f.Length - 1; i++)
            {
                //get last write time for file
                DateTime dtLastWrite;
                dtLastWrite = File.GetLastWriteTime(f[i]);
                //if the cache file is more than 2 hours old ( no point in checking most recent cache files )
                if (dtLastWrite < DateTime.Now.Subtract(new TimeSpan(2, 0, 0)))
                {
					//get cachekey
                    string strCacheKey = Path.GetFileNameWithoutExtension(f[i]);
                    //if the cache key does not exist in memory
                    if (DataCache.GetCache(strCacheKey) == null)
                    {
                        try
                        {
							//delete the file
                            File.Delete(f[i]);
                            PurgedFiles += 1;
                        }
                        catch (Exception exc)
                        {
							//an error occurred
                            Instrumentation.DnnLog.Error(exc);

                            PurgeErrors += 1;
                        }
                    }
                }
            }
			
        	//return a summary message for the job
            return string.Format("Cache Synchronization Files Processed: " + f.Length + ", Purged: " + PurgedFiles + ", Errors: " + PurgeErrors);
		}]]></body>
          </codeblock>
        </method>
        <method name="Remove">
          <declaration><![CDATA[public override void Remove(string Key)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="81" sc="9" el="92" ec="10">FileBasedCachingProvider.cs</location>
            <body hash="75792e0635138a5c9bed9a4c6cab86d1"><![CDATA[{
            base.Remove(Key);

            //if web farm is enabled in config file
            if (IsWebFarm())
            {
                //get hashed filename
                string f = GetFileName(Key);
                //delete cache file - this synchronizes the cache across servers in the farm
                DeleteCacheFile(f);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="CacheFileExtension">
          <declaration><![CDATA[internal const string CacheFileExtension = ".resources";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="CachingDirectory">
          <declaration><![CDATA[internal static string CachingDirectory = "Cache\\";]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
</root>