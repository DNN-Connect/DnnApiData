<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<root file="DotNetNuke.Web.dll" version="07.03.00" generated="2017-06-19 10:57:22Z" generationTime="22.4635461">
  <namespace name="DotNetNuke.Web.Api">
    <class name="AuthFilterBase">
      <declaration><![CDATA[public abstract class AuthFilterBase : IAuthorizationFilter, IFilter]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[protected AuthFilterBase()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="IsAuthorized">
          <declaration><![CDATA[public abstract bool IsAuthorized(AuthFilterContext context);]]></declaration>
          <documentation>
            <summary>
 Tests if the request passes the authorization requirements
 </summary>
 <param name="context">The auth filter context</param>
 <returns>True when authorization is succesful</returns></documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="OnAuthorization">
          <declaration><![CDATA[protected virtual void OnAuthorization(HttpActionContext actionContext)]]></declaration>
          <documentation>
            <summary>
 Co-ordinates check of authorization and handles Auth failure.  Should rarely be overridden.
 </summary>
 <param name="actionContext"></param></documentation>
          <codeblock>
            <location sl="45" sc="9" el="54" ec="10">Api\AuthFilterBase.cs</location>
            <body hash="be9bdf8837a64e610554677ab8aa2231"><![CDATA[{
            Requires.NotNull("actionContext", actionContext);

            const string failureMessage = "Authorization has been denied for this request.";
            var authFilterContext = new AuthFilterContext(actionContext, failureMessage);
            if (!IsAuthorized(authFilterContext))
            {
                authFilterContext.HandleUnauthorizedRequest();
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="System.Web.Http.Filters.IAuthorizationFilter.ExecuteAuthorizationFilterAsync">
          <declaration><![CDATA[Task<HttpResponseMessage> IAuthorizationFilter.ExecuteAuthorizationFilterAsync(HttpActionContext actionContext, CancellationToken cancellationToken, Func<Task<HttpResponseMessage>> continuation)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="62" sc="9" el="85" ec="10">Api\AuthFilterBase.cs</location>
            <body hash="7811e984e0486e224cccdedbb6dfdcb9"><![CDATA[{
            Requires.NotNull("actionContext", actionContext);
            Requires.NotNull("continuation", continuation);

            try
            {
                OnAuthorization(actionContext);
            }
            catch (Exception e)
            {
                var tcs = new TaskCompletionSource<HttpResponseMessage>();
                tcs.SetException(e);
                return tcs.Task;
            }

            if (actionContext.Response != null)
            {
                var tcs = new TaskCompletionSource<HttpResponseMessage>();
                tcs.SetResult(actionContext.Response);
                return tcs.Task;
            }
            
            return continuation();
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="AllowMultiple">
          <declaration><![CDATA[public abstract bool AllowMultiple]]></declaration>
          <documentation>
            <summary>
 Gets or sets a value indicating whether more than one instance of the indicated attribute can be specified for a single program element.
 </summary>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="AuthFilterContext">
      <declaration><![CDATA[public class AuthFilterContext]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public AuthFilterContext(HttpActionContext actionContext, string authFailureMessage)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="30" sc="9" el="34" ec="10">Api\AuthFilterContext.cs</location>
            <body hash="061d75d8c115b965e41acb8818c7c315"><![CDATA[public AuthFilterContext(HttpActionContext actionContext, string authFailureMessage)
        {
            ActionContext = actionContext;
            AuthFailureMessage = authFailureMessage;
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="HandleUnauthorizedRequest">
          <declaration><![CDATA[public virtual void HandleUnauthorizedRequest()]]></declaration>
          <documentation>
            <summary>
 Processes requests that fail authorization. This default implementation creates a new response with the
 Unauthorized status code. Override this method to provide your own handling for unauthorized requests.
 </summary>
          </documentation>
          <codeblock>
            <location sl="44" sc="9" el="46" ec="10">Api\AuthFilterContext.cs</location>
            <body hash="fe80d3aa4305ab2c3110865842b04992"><![CDATA[{
            ActionContext.Response = ActionContext.ControllerContext.Request.CreateErrorResponse(HttpStatusCode.Unauthorized, AuthFailureMessage);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="ActionContext">
          <declaration><![CDATA[public HttpActionContext ActionContext]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="AuthFailureMessage">
          <declaration><![CDATA[public string AuthFailureMessage]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="AuthorizeAttributeBase">
      <declaration><![CDATA[public abstract class AuthorizeAttributeBase : AuthorizationFilterAttribute]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[protected AuthorizeAttributeBase()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="IsAnonymousAttributePresent">
          <declaration><![CDATA[public static bool IsAnonymousAttributePresent(HttpActionContext actionContext)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="71" sc="9" el="74" ec="10">Api\AuthorizeAttributeBase.cs</location>
            <body hash="f604e541fdb25f319307f47f2b2f1316"><![CDATA[{
            return actionContext.ActionDescriptor.GetCustomAttributes<AllowAnonymousAttribute>().Any()
                   || actionContext.ControllerContext.ControllerDescriptor.GetCustomAttributes<AllowAnonymousAttribute>().Any();
        }]]></body>
          </codeblock>
        </method>
        <method name="IsAuthorized">
          <declaration><![CDATA[public abstract bool IsAuthorized(AuthFilterContext context);]]></declaration>
          <documentation>
            <summary>
 Tests if the request passes the authorization requirements
 </summary>
 <param name="context">The auth filter context</param>
 <returns>True when authorization is succesful</returns></documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="OnAuthorization">
          <declaration><![CDATA[public override void OnAuthorization(HttpActionContext actionContext)]]></declaration>
          <documentation>
            <summary>
 Called by framework at start of Auth process, check if auth should be skipped and handles auth failure.  Should rarely need to be overridden.
 </summary>
 <param name="actionContext"></param></documentation>
          <codeblock>
            <location sl="44" sc="9" el="58" ec="10">Api\AuthorizeAttributeBase.cs</location>
            <body hash="af2847acf04b5d2b07d865f3d47ddc23"><![CDATA[{
            Requires.NotNull("actionContext", actionContext);

            if (SkipAuthorization(actionContext))
            {
                return;
            }

            const string failureMessage = "Authorization has been denied for this request.";
            var authFilterContext = new AuthFilterContext(actionContext, failureMessage);
            if (!IsAuthorized(authFilterContext))
            {
                authFilterContext.HandleUnauthorizedRequest();
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="SkipAuthorization">
          <declaration><![CDATA[protected virtual bool SkipAuthorization(HttpActionContext actionContext)]]></declaration>
          <documentation>
            <summary>
 Skips this authorization step if anonymous attribute is applied, override if auth should never be skipped, or other conditions are required
 </summary>
 <param name="actionContext"></param>
 <returns></returns></documentation>
          <codeblock>
            <location sl="66" sc="9" el="68" ec="10">Api\AuthorizeAttributeBase.cs</location>
            <body hash="28088e492200814854afeedf7ba9dd39"><![CDATA[{
            return IsAnonymousAttributePresent(actionContext);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnApiController">
      <declaration><![CDATA[public abstract class DnnApiController : ApiController]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[protected DnnApiController()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="34" sc="9" el="37" ec="10">Api\DnnApiController.cs</location>
            <body hash="867f979e2db238b2936a172683fde1af"><![CDATA[protected DnnApiController()
        {
            _activeModule = new Lazy<ModuleInfo>(InitModuleInfo);
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="InitModuleInfo">
          <declaration><![CDATA[private ModuleInfo InitModuleInfo()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="40" sc="9" el="42" ec="10">Api\DnnApiController.cs</location>
            <body hash="9cfa19faae86632bc000f16df56b2193"><![CDATA[{
            return Request.FindModuleInfo();
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_activeModule">
          <declaration><![CDATA[private readonly Lazy<ModuleInfo> _activeModule;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="ActiveModule">
          <declaration><![CDATA[public ModuleInfo ActiveModule]]></declaration>
          <documentation>
            <summary>
 ModuleInfo for the current module
 <remarks>Will be null unless a valid pair of module and tab ids were provided in the request</remarks>
 </summary>
          </documentation>
        </property>
        <property name="PortalSettings">
          <declaration><![CDATA[public PortalSettings PortalSettings]]></declaration>
          <documentation>
            <summary>
 PortalSettings for the current portal
 </summary>
          </documentation>
          <codeblock>
            <location sl="50" sc="13" el="52" ec="14">Api\DnnApiController.cs</location>
            <body hash="5ab4f2f069ec3680a0fc11e1d9f2b05e"><![CDATA[{
                return PortalController.Instance.GetCurrentPortalSettings();
            }]]></body>
          </codeblock>
        </property>
        <property name="UserInfo">
          <declaration><![CDATA[public UserInfo UserInfo]]></declaration>
          <documentation>
            <summary>
 UserInfo for the current user
 </summary>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnAuthorizeAttribute">
      <declaration><![CDATA[public sealed class DnnAuthorizeAttribute : AuthorizeAttributeBase, IOverrideDefaultAuthLevel]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private string[] _staticRolesSplit = new string[0];]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="33" sc="9" el="36" ec="58">Api\DnnAuthorizeAttribute.cs</location>
            <body hash="ca3b734577238f8445aa765e80c3156c"><![CDATA[private string[] _staticRolesSplit = new string[0];

        private string _denyRoles;
        private string[] _denyRolesSplit = new string[0];]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="IsAuthorized">
          <declaration><![CDATA[public override bool IsAuthorized(AuthFilterContext context)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="65" sc="9" el="93" ec="10">Api\DnnAuthorizeAttribute.cs</location>
            <body hash="6fad076e82857a2b84a8290ba620fd4c"><![CDATA[{
            Requires.NotNull("context", context);

            var principal = Thread.CurrentPrincipal;
            if(!principal.Identity.IsAuthenticated)
            {
                return false;
            }

            if(_denyRolesSplit.Any())
            {
                var currentUser = PortalController.Instance.GetCurrentPortalSettings().UserInfo;
                if (!currentUser.IsSuperUser && _denyRolesSplit.Any(currentUser.IsInRole))
                {
                    return false;
                }
            }

            if (_staticRolesSplit.Any())
            {
                var currentUser = PortalController.Instance.GetCurrentPortalSettings().UserInfo;
                if (!_staticRolesSplit.Any(currentUser.IsInRole))
                {
                    return false;
                }
            }

            return true;
        }]]></body>
          </codeblock>
        </method>
        <method name="SplitString">
          <declaration><![CDATA[private string[] SplitString(string original)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="96" sc="9" el="107" ec="10">Api\DnnAuthorizeAttribute.cs</location>
            <body hash="4fe0e983f1e88cb1230afb9715cde0f4"><![CDATA[{
            if (String.IsNullOrEmpty(original))
            {
                return new string[0];
            }

            IEnumerable<string> split = from piece in original.Split(',')
                                        let trimmed = piece.Trim()
                                        where !String.IsNullOrEmpty(trimmed)
                                        select trimmed;
            return split.ToArray();
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_denyRoles">
          <declaration><![CDATA[private string _denyRoles;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_denyRolesSplit">
          <declaration><![CDATA[private string[] _denyRolesSplit = new string[0];]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_staticRoles">
          <declaration><![CDATA[private string _staticRoles;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_staticRolesSplit">
          <declaration><![CDATA[private string[] _staticRolesSplit = new string[0];]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="DenyRoles">
          <declaration><![CDATA[public string DenyRoles]]></declaration>
          <documentation>
            <summary>
 Gets or sets the denied roles (separated by comma)
 </summary>
          </documentation>
          <codeblock>
            <location sl="58" sc="13" el="61" ec="14">Api\DnnAuthorizeAttribute.cs</location>
            <body hash="caddee689c16219a47f104b97827948c"><![CDATA[{ 
                _denyRoles = value;
                _denyRolesSplit = SplitString(_denyRoles);
            }]]></body>
          </codeblock>
        </property>
        <property name="StaticRoles">
          <declaration><![CDATA[public string StaticRoles]]></declaration>
          <documentation>
            <summary>
 Gets or sets the authorized roles (separated by comma)
 </summary>
          </documentation>
          <codeblock>
            <location sl="45" sc="13" el="48" ec="14">Api\DnnAuthorizeAttribute.cs</location>
            <body hash="48c619ee7a85e7467974e4080097151a"><![CDATA[{
                _staticRoles = value;
                _staticRolesSplit = SplitString(_staticRoles);
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnExceptionFilterAttribute">
      <declaration><![CDATA[public class DnnExceptionFilterAttribute : ExceptionFilterAttribute]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnExceptionFilterAttribute()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="OnException">
          <declaration><![CDATA[public override void OnException(HttpActionExecutedContext actionExecutedContext)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="40" sc="9" el="64" ec="10">Api\DnnExceptionAttribute.cs</location>
            <body hash="8848d6af6fb6770e0c295c5a4a8cba0c"><![CDATA[{
            if (actionExecutedContext.Exception != null)
            {

                var exception = actionExecutedContext.Exception;
                var actionName = actionExecutedContext.ActionContext.ActionDescriptor.ActionName;
                var controllerName = actionExecutedContext.ActionContext.ControllerContext.ControllerDescriptor.ControllerName;

                string resourceFile = String.IsNullOrEmpty(LocalResourceFile) 
                                        ? Localization.ExceptionsResourceFile 
                                        : LocalResourceFile;

                string key = String.IsNullOrEmpty(MessageKey) ? controllerName + "_" + actionName + ".Error" : MessageKey;

                var response = new HttpResponseMessage
                                        {
                                            StatusCode = HttpStatusCode.InternalServerError,
                                            ReasonPhrase = Localization.GetString(key, resourceFile)
                                        };
                
                actionExecutedContext.Response = response;

                Exceptions.LogException(exception);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="LocalResourceFile">
          <declaration><![CDATA[public string LocalResourceFile]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="MessageKey">
          <declaration><![CDATA[public string MessageKey]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnHttpControllerSelector">
      <declaration><![CDATA[internal class DnnHttpControllerSelector : IHttpControllerSelector]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnHttpControllerSelector(HttpConfiguration configuration)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="47" sc="9" el="54" ec="10">Api\DnnHttpControllerSelector.cs</location>
            <body hash="57915088ff71a7eb43b380f9d40defb0"><![CDATA[public DnnHttpControllerSelector(HttpConfiguration configuration)
        {
            Requires.NotNull("configuration", configuration);

            _configuration = configuration;
            _descriptorCache = new Lazy<ConcurrentDictionary<string, HttpControllerDescriptor>>(InitTypeCache,
                                                                                                isThreadSafe: true);
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="GetControllerMapping">
          <declaration><![CDATA[public System.Collections.Generic.IDictionary<string, HttpControllerDescriptor> GetControllerMapping()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="101" sc="9" el="103" ec="10">Api\DnnHttpControllerSelector.cs</location>
            <body hash="4ed0ce3a3abf490e39eaca6c346828d6"><![CDATA[{
            return DescriptorCache;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetControllerName">
          <declaration><![CDATA[private string GetControllerName(HttpRequestMessage request)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="122" sc="9" el="133" ec="10">Api\DnnHttpControllerSelector.cs</location>
            <body hash="f5ca00df878a95315fe5d20e36c9f328"><![CDATA[{
            IHttpRouteData routeData = request.GetRouteData();
            if (routeData == null)
            {
                return null;
            }

            // Look up controller in route data
            object controllerName;
            routeData.Values.TryGetValue(ControllerKey, out controllerName);
            return controllerName as string;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetFullName">
          <declaration><![CDATA[private string GetFullName(string controllerName, string ns)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="106" sc="9" el="108" ec="10">Api\DnnHttpControllerSelector.cs</location>
            <body hash="5fddef86a06e18e753760eec2e225e33"><![CDATA[{
            return string.Format("{0}.{1}{2}", ns, controllerName, ControllerSuffix).ToLowerInvariant();
        }]]></body>
          </codeblock>
        </method>
        <method name="GetNameSpaces">
          <declaration><![CDATA[private string[] GetNameSpaces(HttpRequestMessage request)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="111" sc="9" el="119" ec="10">Api\DnnHttpControllerSelector.cs</location>
            <body hash="0807618714e3464275962e738ab066b8"><![CDATA[{
            IHttpRouteData routeData = request.GetRouteData();
            if (routeData == null)
            {
                return null;
            }

            return routeData.Route.GetNameSpaces();
        }]]></body>
          </codeblock>
        </method>
        <method name="InitTypeCache">
          <declaration><![CDATA[private ConcurrentDictionary<string, HttpControllerDescriptor> InitTypeCache()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="136" sc="9" el="154" ec="10">Api\DnnHttpControllerSelector.cs</location>
            <body hash="34d9a7af658ca1b8ecf96c526dff753b"><![CDATA[{
            IAssembliesResolver assembliesResolver = _configuration.Services.GetAssembliesResolver();
            IHttpControllerTypeResolver controllersResolver = _configuration.Services.GetHttpControllerTypeResolver();

            ICollection<Type> controllerTypes = controllersResolver.GetControllerTypes(assembliesResolver);

            var dict = new ConcurrentDictionary<string, HttpControllerDescriptor>();

            foreach (Type type in controllerTypes)
            {
                if (type.FullName != null)
                {
                    string controllerName = type.Name.Substring(0, type.Name.Length - ControllerSuffix.Length);
                    dict.TryAdd(type.FullName.ToLowerInvariant(), new HttpControllerDescriptor(_configuration, controllerName, type));
                }
            }

            return dict;
        }]]></body>
          </codeblock>
        </method>
        <method name="SelectController">
          <declaration><![CDATA[public HttpControllerDescriptor SelectController(HttpRequestMessage request)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="62" sc="9" el="98" ec="10">Api\DnnHttpControllerSelector.cs</location>
            <body hash="6e111c013ab7c5cf7e16dbaf1145d409"><![CDATA[{
            Requires.NotNull("request", request);

            string controllerName = GetControllerName(request);
            IEnumerable<string> namespaces = GetNameSpaces(request);
            if (namespaces == null || !namespaces.Any() || String.IsNullOrEmpty(controllerName))
            {
                throw new HttpResponseException(request.CreateErrorResponse(HttpStatusCode.NotFound,
                                                                            "Unable to locate a controller for " +
                                                                            request.RequestUri));
            }

            var matches = new List<HttpControllerDescriptor>();
            foreach (string ns in namespaces)
            {
                string fullName = GetFullName(controllerName, ns);

                HttpControllerDescriptor descriptor;
                if (DescriptorCache.TryGetValue(fullName, out descriptor))
                {
                    matches.Add(descriptor);
                }
            }

            if(matches.Count == 1)
            {
                return matches.First();
            }

            //only errors thrown beyond this point
            if (matches.Count == 0)
            {
                throw new HttpResponseException(request.CreateErrorResponse(HttpStatusCode.NotFound, string.Format(Localization.GetString("ControllerNotFound", Localization.ExceptionsResourceFile), request.RequestUri, string.Join(", ", namespaces))));
            }

            throw new HttpResponseException(request.CreateErrorResponse(HttpStatusCode.Conflict, string.Format(Localization.GetString("AmbiguousController", Localization.ExceptionsResourceFile), controllerName, string.Join(", ", namespaces))));
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_configuration">
          <declaration><![CDATA[private readonly HttpConfiguration _configuration;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_descriptorCache">
          <declaration><![CDATA[private readonly Lazy<ConcurrentDictionary<string, HttpControllerDescriptor>> _descriptorCache;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ControllerKey">
          <declaration><![CDATA[private const string ControllerKey = "controller";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ControllerSuffix">
          <declaration><![CDATA[private const string ControllerSuffix = "Controller";]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="DescriptorCache">
          <declaration><![CDATA[private ConcurrentDictionary<string, HttpControllerDescriptor> DescriptorCache]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnModuleAuthorizeAttribute">
      <declaration><![CDATA[public class DnnModuleAuthorizeAttribute : AuthorizeAttributeBase, IOverrideDefaultAuthLevel]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnModuleAuthorizeAttribute()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="31" sc="9" el="34" ec="10">Api\DnnModuleAuthorizeAttribute.cs</location>
            <body hash="31494bb857e2f91b252d8589a862da09"><![CDATA[public DnnModuleAuthorizeAttribute()
        {
            AccessLevel = SecurityAccessLevel.Host;
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="FindModuleInfo">
          <declaration><![CDATA[protected virtual ModuleInfo FindModuleInfo(HttpRequestMessage request)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="52" sc="9" el="54" ec="10">Api\DnnModuleAuthorizeAttribute.cs</location>
            <body hash="d2c2476a96bc904bc0453ca4339972f3"><![CDATA[{
            return request.FindModuleInfo();
        }]]></body>
          </codeblock>
        </method>
        <method name="IsAuthorized">
          <declaration><![CDATA[public override bool IsAuthorized(AuthFilterContext context)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="40" sc="9" el="49" ec="10">Api\DnnModuleAuthorizeAttribute.cs</location>
            <body hash="caa161c1b5620fdeab603f0c96eb16f1"><![CDATA[{
            var activeModule = FindModuleInfo(context.ActionContext.Request);

            if (activeModule != null)
            {
                return ModulePermissionController.HasModuleAccess(AccessLevel, PermissionKey, activeModule);
            }

            return false;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="AccessLevel">
          <declaration><![CDATA[public SecurityAccessLevel AccessLevel]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="PermissionKey">
          <declaration><![CDATA[public string PermissionKey]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="HttpConfigurationExtensions">
      <declaration><![CDATA[public static class HttpConfigurationExtensions]]></declaration>
      <documentation>
      </documentation>
      <constructors>
      </constructors>
      <methods>
        <method name="AddTabAndModuleInfoProvider">
          <declaration><![CDATA[public static void AddTabAndModuleInfoProvider(this HttpConfiguration configuration, ITabAndModuleInfoProvider tabAndModuleInfoProvider)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="14" sc="9" el="27" ec="10">Api\HttpConfigurationExtensions.cs</location>
            <body hash="1554afdc10f3e90f5e01cba360828be1"><![CDATA[{
            Requires.NotNull("configuration", configuration);
            Requires.NotNull("tabAndModuleInfoProvider", tabAndModuleInfoProvider);

            var providers = configuration.Properties.GetOrAdd(Key, InitValue) as ConcurrentQueue<ITabAndModuleInfoProvider>;

            if(providers == null)
            {
                providers = new ConcurrentQueue<ITabAndModuleInfoProvider>();
                configuration.Properties[Key] = providers;
            }

            providers.Enqueue(tabAndModuleInfoProvider);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetTabAndModuleInfoProviders">
          <declaration><![CDATA[public static System.Collections.Generic.IEnumerable<ITabAndModuleInfoProvider> GetTabAndModuleInfoProviders(this HttpConfiguration configuration)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="35" sc="9" el="47" ec="10">Api\HttpConfigurationExtensions.cs</location>
            <body hash="5fa2626a8a9b262a3e675d6e9a3a63b5"><![CDATA[{
            Requires.NotNull("configuration", configuration);

            var providers = configuration.Properties.GetOrAdd(Key, InitValue) as ConcurrentQueue<ITabAndModuleInfoProvider>;

            if (providers == null)
            {
                //shouldn't ever happen outside of unit tests
                return new ITabAndModuleInfoProvider[]{};
            }

            return providers.ToArray();
        }]]></body>
          </codeblock>
        </method>
        <method name="InitValue">
          <declaration><![CDATA[private static object InitValue(object o)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="30" sc="9" el="32" ec="10">Api\HttpConfigurationExtensions.cs</location>
            <body hash="3aa91d9bf3f6b67440e168d63528ce64"><![CDATA[{
            return new ConcurrentQueue<ITabAndModuleInfoProvider>();
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="Key">
          <declaration><![CDATA[private const string Key = "TabAndModuleInfoProvider";]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="HttpRequestMessageExtensions">
      <declaration><![CDATA[public static class HttpRequestMessageExtensions]]></declaration>
      <documentation>
      </documentation>
      <constructors>
      </constructors>
      <methods>
        <method name="FindModuleId">
          <declaration><![CDATA[public static int FindModuleId(this HttpRequestMessage request)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="53" sc="9" el="55" ec="10">Api\HttpRequestMessageExtensions.cs</location>
            <body hash="67e31b164d146e540ff33ba17f3d137d"><![CDATA[{
            return IterateTabAndModuleInfoProviders(request, TryFindModuleId, -1);
        }]]></body>
          </codeblock>
        </method>
        <method name="FindModuleInfo">
          <declaration><![CDATA[public static ModuleInfo FindModuleInfo(this HttpRequestMessage request)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="43" sc="9" el="45" ec="10">Api\HttpRequestMessageExtensions.cs</location>
            <body hash="a0ccf83071485d000328613fcaa1c7b6"><![CDATA[{
            return IterateTabAndModuleInfoProviders<ModuleInfo>(request, TryFindModuleInfo, null);
        }]]></body>
          </codeblock>
        </method>
        <method name="FindTabId">
          <declaration><![CDATA[public static int FindTabId(this HttpRequestMessage request)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="33" sc="9" el="35" ec="10">Api\HttpRequestMessageExtensions.cs</location>
            <body hash="6a913109ee577078e76c3393d2ab3f46"><![CDATA[{
            return IterateTabAndModuleInfoProviders(request, TryFindTabId, -1);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetHttpContext">
          <declaration><![CDATA[public static HttpContextBase GetHttpContext(this HttpRequestMessage request)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="81" sc="9" el="86" ec="10">Api\HttpRequestMessageExtensions.cs</location>
            <body hash="ff70f55b9d2e802d27ed2ad2c749067f"><![CDATA[{
            object context;
            request.Properties.TryGetValue("MS_HttpContext", out context);

            return context as HttpContextBase;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetIPAddress">
          <declaration><![CDATA[public static string GetIPAddress(this HttpRequestMessage request)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="89" sc="9" el="91" ec="10">Api\HttpRequestMessageExtensions.cs</location>
            <body hash="5c0bfc150c112ad41a631405141ae426"><![CDATA[{
            return GetHttpContext(request).Request.UserHostAddress;
        }]]></body>
          </codeblock>
        </method>
        <method name="IterateTabAndModuleInfoProviders">
          <declaration><![CDATA[private static T IterateTabAndModuleInfoProviders<T>(HttpRequestMessage request, HttpRequestMessageExtensions.TryMethod<T> func, T fallback)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="65" sc="9" el="78" ec="10">Api\HttpRequestMessageExtensions.cs</location>
            <body hash="3d6af5b45c7e9f78f049d687fb3c3543"><![CDATA[{
            var providers = request.GetConfiguration().GetTabAndModuleInfoProviders();

            foreach (var provider in providers)
            {
                T output;
                if (func(provider, request, out output))
                {
                    return output;
                }
            }

            return fallback;
        }]]></body>
          </codeblock>
        </method>
        <method name="TryFindModuleId">
          <declaration><![CDATA[private static bool TryFindModuleId(ITabAndModuleInfoProvider provider, HttpRequestMessage request, out int output)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="58" sc="9" el="60" ec="10">Api\HttpRequestMessageExtensions.cs</location>
            <body hash="725d56bc8d6c8296bab1337b2b13e6ea"><![CDATA[{
            return provider.TryFindModuleId(request, out output);
        }]]></body>
          </codeblock>
        </method>
        <method name="TryFindModuleInfo">
          <declaration><![CDATA[private static bool TryFindModuleInfo(ITabAndModuleInfoProvider provider, HttpRequestMessage request, out ModuleInfo output)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="48" sc="9" el="50" ec="10">Api\HttpRequestMessageExtensions.cs</location>
            <body hash="a650d43fd4ae5bdf40138ffc7148557c"><![CDATA[{
            return provider.TryFindModuleInfo(request, out output);
        }]]></body>
          </codeblock>
        </method>
        <method name="TryFindTabId">
          <declaration><![CDATA[private static bool TryFindTabId(ITabAndModuleInfoProvider provider, HttpRequestMessage request, out int output)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="38" sc="9" el="40" ec="10">Api\HttpRequestMessageExtensions.cs</location>
            <body hash="d69f8a2bba5f4b650a97bca41aa98600"><![CDATA[{
            return provider.TryFindTabId(request, out output);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="IMapRoute">
      <declaration><![CDATA[public interface IMapRoute]]></declaration>
      <documentation>
      </documentation>
      <constructors>
      </constructors>
      <methods>
        <method name="MapHttpRoute">
          <declaration><![CDATA[System.Collections.Generic.IList<Route> MapHttpRoute(string moduleFolderName, string routeName, string url, object defaults, object constraints, string[] namespaces);]]></declaration>
          <documentation>
            <summary>
 Sets up the route(s) for DotNetNuke services
 </summary>
 <param name="moduleFolderName">The name of the folder under DesktopModules in which your module resides</param>
 <param name="routeName">A unique name for the route</param>
 <param name="url">The parameterized portion of the route</param>
 <param name="defaults">Default values for the route parameters</param>
 <param name="constraints">The constraints</param>
 <param name="namespaces">The namespace(s) in which to search for the controllers for this route</param>
 <returns>A list of all routes that were registered.</returns>
 <remarks>The combination of moduleFolderName and routeName must be unique for each route</remarks></documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="MapHttpRoute">
          <declaration><![CDATA[System.Collections.Generic.IList<Route> MapHttpRoute(string moduleFolderName, string routeName, string url, object defaults, string[] namespaces);]]></declaration>
          <documentation>
            <summary>
 Sets up the route(s) for DotNetNuke services
 </summary>
 <param name="moduleFolderName">The name of the folder under DesktopModules in which your module resides</param>
 <param name="routeName">A unique name for the route</param>
 <param name="url">The parameterized portion of the route</param>
 <param name="defaults">Default values for the route parameters</param>
 <param name="namespaces">The namespace(s) in which to search for the controllers for this route</param>
 <returns>A list of all routes that were registered.</returns>
 <remarks>The combination of moduleFolderName and routeName must be unique for each route</remarks></documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="MapHttpRoute">
          <declaration><![CDATA[System.Collections.Generic.IList<Route> MapHttpRoute(string moduleFolderName, string routeName, string url, string[] namespaces);]]></declaration>
          <documentation>
            <summary>
 Sets up the route(s) for DotNetNuke services
 </summary>
 <param name="moduleFolderName">The name of the folder under DesktopModules in which your module resides</param>
 <param name="routeName">A unique name for the route</param>
 <param name="url">The parameterized portion of the route</param>
 <param name="namespaces">The namespace(s) in which to search for the controllers for this route</param>
 <returns>A list of all routes that were registered.</returns>
 <remarks>The combination of moduleFolderName and routeName must be unique for each route</remarks></documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="IOverrideDefaultAuthLevel">
      <declaration><![CDATA[public interface IOverrideDefaultAuthLevel]]></declaration>
      <documentation>
        <summary>
 Implementing this interface on an Auth filter will allow the filter to override the default
 Host level auth provided by DnnController
 </summary>
      </documentation>
      <constructors>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="IPortalAliasRouteManager">
      <declaration><![CDATA[internal interface IPortalAliasRouteManager]]></declaration>
      <documentation>
      </documentation>
      <constructors>
      </constructors>
      <methods>
        <method name="ClearCachedData">
          <declaration><![CDATA[void ClearCachedData();]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="GetAllRouteValues">
          <declaration><![CDATA[HttpRouteValueDictionary GetAllRouteValues(PortalAliasInfo portalAliasInfo, object routeValues);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="GetRouteName">
          <declaration><![CDATA[string GetRouteName(string moduleFolderName, string routeName, int count);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="GetRouteName">
          <declaration><![CDATA[string GetRouteName(string moduleFolderName, string routeName, PortalAliasInfo portalAlias);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="GetRoutePrefixCounts">
          <declaration><![CDATA[System.Collections.Generic.IEnumerable<int> GetRoutePrefixCounts();]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="GetRouteUrl">
          <declaration><![CDATA[string GetRouteUrl(string moduleFolderName, string url, int count);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="IServiceRouteMapper">
      <declaration><![CDATA[public interface IServiceRouteMapper]]></declaration>
      <documentation>
      </documentation>
      <constructors>
      </constructors>
      <methods>
        <method name="RegisterRoutes">
          <declaration><![CDATA[void RegisterRoutes(IMapRoute mapRouteManager);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="ITabAndModuleInfoProvider">
      <declaration><![CDATA[public interface ITabAndModuleInfoProvider]]></declaration>
      <documentation>
      </documentation>
      <constructors>
      </constructors>
      <methods>
        <method name="TryFindModuleId">
          <declaration><![CDATA[bool TryFindModuleId(HttpRequestMessage request, out int moduleId);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="TryFindModuleInfo">
          <declaration><![CDATA[bool TryFindModuleInfo(HttpRequestMessage request, out ModuleInfo moduleInfo);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="TryFindTabId">
          <declaration><![CDATA[bool TryFindTabId(HttpRequestMessage request, out int tabId);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="PortalAliasRouteManager">
      <declaration><![CDATA[internal class PortalAliasRouteManager : IPortalAliasRouteManager]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public PortalAliasRouteManager()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="CalcAliasPrefixCount">
          <declaration><![CDATA[private static int CalcAliasPrefixCount(string alias)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="134" sc="9" el="136" ec="10">Api\PortalAliasRouteManager.cs</location>
            <body hash="16e9497480cf91b376338f188db3495e"><![CDATA[{
            return alias.Count(c => c == '/');
        }]]></body>
          </codeblock>
        </method>
        <method name="ClearCachedData">
          <declaration><![CDATA[public void ClearCachedData()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="95" sc="9" el="97" ec="10">Api\PortalAliasRouteManager.cs</location>
            <body hash="4763d974c59bff73391a35eb3f531026"><![CDATA[{
            _prefixCounts = null;
        }]]></body>
          </codeblock>
        </method>
        <method name="GeneratePrefixString">
          <declaration><![CDATA[private string GeneratePrefixString(int count)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="51" sc="9" el="65" ec="10">Api\PortalAliasRouteManager.cs</location>
            <body hash="50fee268ae943101ed13c1d36e294ff2"><![CDATA[{
            if (count == 0)
            {
                return "";
            }
            
            string prefix = "";

            for (int i = count - 1; i >= 0; i--)
            {
                prefix = "{prefix" + i + "}/" + prefix;
            }

            return prefix;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetAllRouteValues">
          <declaration><![CDATA[public HttpRouteValueDictionary GetAllRouteValues(PortalAliasInfo portalAliasInfo, object routeValues)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="68" sc="9" el="84" ec="10">Api\PortalAliasRouteManager.cs</location>
            <body hash="ebda421921e734c2074aadad39b453d0"><![CDATA[{
            var allRouteValues = new HttpRouteValueDictionary(routeValues);

            var segments = portalAliasInfo.HTTPAlias.Split('/');
            
            if(segments.Length > 1)
            {
                  for(int i = 1; i < segments.Length; i++)
                  {
                      var key = "prefix" + (i - 1).ToString(CultureInfo.InvariantCulture);
                      var value = segments[i];
                      allRouteValues.Add(key, value);
                  }
            }

            return allRouteValues;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetRouteName">
          <declaration><![CDATA[public string GetRouteName(string moduleFolderName, string routeName, int count)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="38" sc="9" el="43" ec="10">Api\PortalAliasRouteManager.cs</location>
            <body hash="16b5bff4c8e47b78fcb150404bc5a82e"><![CDATA[{
            Requires.NotNullOrEmpty("moduleFolderName", moduleFolderName);
            Requires.NotNegative("count", count);
            
            return moduleFolderName + "-" + routeName + "-" + count.ToString(CultureInfo.InvariantCulture);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetRouteName">
          <declaration><![CDATA[public string GetRouteName(string moduleFolderName, string routeName, PortalAliasInfo portalAlias)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="46" sc="9" el="48" ec="10">Api\PortalAliasRouteManager.cs</location>
            <body hash="be8fe984ba8c336fd726141fd2836ca4"><![CDATA[{
            return GetRouteName(moduleFolderName, routeName, CalcAliasPrefixCount(portalAlias.HTTPAlias));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetRoutePrefixCounts">
          <declaration><![CDATA[public System.Collections.Generic.IEnumerable<int> GetRoutePrefixCounts()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="100" sc="9" el="131" ec="10">Api\PortalAliasRouteManager.cs</location>
            <body hash="f4bcd0d920c731baa501ecbf24071b02"><![CDATA[{
            if (_prefixCounts == null)
            {
                //prefixCounts are required for each route that is mapped but they only change
                //when a new portal is added so cache them until that time

                ArrayList portals = PortalController.Instance.GetPortals();

                var segmentCounts1 = new List<int>();

                foreach (PortalInfo portal in portals)
                {
                    IEnumerable<string> aliases = PortalAliasController.Instance.GetPortalAliasesByPortalId(portal.PortalID).Select(x => x.HTTPAlias);

                    aliases = StripApplicationPath(aliases);

                    foreach (string alias in aliases)
                    {
                        var count = CalcAliasPrefixCount(alias);

                        if (!segmentCounts1.Contains(count))
                        {
                            segmentCounts1.Add(count);
                        }
                    }
                }
                IEnumerable<int> segmentCounts = segmentCounts1;
                _prefixCounts = segmentCounts.OrderByDescending(x => x).ToList();
            }

            return _prefixCounts;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetRouteUrl">
          <declaration><![CDATA[public string GetRouteUrl(string moduleFolderName, string url, int count)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="87" sc="9" el="92" ec="10">Api\PortalAliasRouteManager.cs</location>
            <body hash="668e7b1edbc1762fdd152cde7ab44d18"><![CDATA[{
            Requires.NotNegative("count", count);
            Requires.NotNullOrEmpty("moduleFolderName", moduleFolderName);

            return string.Format("{0}DesktopModules/{1}/API/{2}", GeneratePrefixString(count), moduleFolderName, url);
        }]]></body>
          </codeblock>
        </method>
        <method name="StripApplicationPath">
          <declaration><![CDATA[private System.Collections.Generic.IEnumerable<string> StripApplicationPath(System.Collections.Generic.IEnumerable<string> aliases)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="139" sc="9" el="148" ec="10">Api\PortalAliasRouteManager.cs</location>
            <body hash="b19ffe6d2f1ba871bfa414d3d206f192"><![CDATA[{
            string appPath = TestableGlobals.Instance.ApplicationPath;

            if (String.IsNullOrEmpty(appPath))
            {
                return aliases;
            }

            return StripApplicationPathIterable(aliases, appPath);
        }]]></body>
          </codeblock>
        </method>
        <method name="StripApplicationPathIterable">
          <declaration><![CDATA[private static System.Collections.Generic.IEnumerable<string> StripApplicationPathIterable(System.Collections.Generic.IEnumerable<string> aliases, string appPath)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_prefixCounts">
          <declaration><![CDATA[private System.Collections.Generic.List<int> _prefixCounts;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="RequireHostAttribute">
      <declaration><![CDATA[public class RequireHostAttribute : AuthorizeAttributeBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public RequireHostAttribute()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="IsAuthorized">
          <declaration><![CDATA[public override bool IsAuthorized(AuthFilterContext context)]]></declaration>
          <documentation>
            <summary>
 Tests if the request passes the authorization requirements
 </summary>
 <param name="context">The auth filter context</param>
 <returns>True when authorization is succesful</returns></documentation>
          <codeblock>
            <location sl="35" sc="9" el="44" ec="10">Api\RequireHostAttribute.cs</location>
            <body hash="232605a4f6dab7e912ee5108a7cab9d5"><![CDATA[{
            var principal = Thread.CurrentPrincipal;
            if (!principal.Identity.IsAuthenticated)
            {
                return false;
            }

            var currentUser = PortalController.Instance.GetCurrentPortalSettings().UserInfo;
            return currentUser.IsSuperUser;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="RouteExtensions">
      <declaration><![CDATA[public static class RouteExtensions]]></declaration>
      <documentation>
      </documentation>
      <constructors>
      </constructors>
      <methods>
        <method name="GetName">
          <declaration><![CDATA[public static string GetName(this Route route)]]></declaration>
          <documentation>
            <summary>
 Get the name of the route
 </summary>
 <returns>Route name</returns></documentation>
          <codeblock>
            <location sl="75" sc="9" el="77" ec="10">Api\RouteExtensions.cs</location>
            <body hash="15ab7de71c6cc798a238f36b752b2392"><![CDATA[{
            return (string) route.DataTokens[NameKey];
        }]]></body>
          </codeblock>
        </method>
        <method name="GetName">
          <declaration><![CDATA[public static string GetName(this IHttpRoute route)]]></declaration>
          <documentation>
            <summary>
 Get the name of the route
 </summary>
 <returns>Route name</returns></documentation>
          <codeblock>
            <location sl="84" sc="9" el="86" ec="10">Api\RouteExtensions.cs</location>
            <body hash="1984011865195309064e9d4c7551950c"><![CDATA[{
            return (string)route.DataTokens[NameKey];
        }]]></body>
          </codeblock>
        </method>
        <method name="GetNameSpaces">
          <declaration><![CDATA[internal static string[] GetNameSpaces(this Route route)]]></declaration>
          <documentation>
            <summary>
 Get Namespaces that are searched for controllers for this route
 </summary>
 <returns>Namespaces</returns></documentation>
          <codeblock>
            <location sl="47" sc="9" el="49" ec="10">Api\RouteExtensions.cs</location>
            <body hash="ada8dd3f9c946a8db2d9fd29ea4a1be7"><![CDATA[{
            return (string[]) route.DataTokens[NamespaceKey];
        }]]></body>
          </codeblock>
        </method>
        <method name="GetNameSpaces">
          <declaration><![CDATA[internal static string[] GetNameSpaces(this IHttpRoute route)]]></declaration>
          <documentation>
            <summary>
 Get Namespaces that are searched for controllers for this route
 </summary>
 <returns>Namespaces</returns></documentation>
          <codeblock>
            <location sl="56" sc="9" el="58" ec="10">Api\RouteExtensions.cs</location>
            <body hash="98a0381b4e22de5bd82d876412fcba69"><![CDATA[{
            return (string[])route.DataTokens[NamespaceKey];
        }]]></body>
          </codeblock>
        </method>
        <method name="SetName">
          <declaration><![CDATA[internal static void SetName(this Route route, string name)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="61" sc="9" el="63" ec="10">Api\RouteExtensions.cs</location>
            <body hash="1ef30d76c5dbd07f26e0bffe34a1ca61"><![CDATA[{
            route.DataTokens[NameKey] = name;
        }]]></body>
          </codeblock>
        </method>
        <method name="SetName">
          <declaration><![CDATA[internal static void SetName(this IHttpRoute route, string name)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="66" sc="9" el="68" ec="10">Api\RouteExtensions.cs</location>
            <body hash="1ef30d76c5dbd07f26e0bffe34a1ca61"><![CDATA[{
            route.DataTokens[NameKey] = name;
        }]]></body>
          </codeblock>
        </method>
        <method name="SetNameSpaces">
          <declaration><![CDATA[internal static void SetNameSpaces(this Route route, string[] namespaces)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="33" sc="9" el="35" ec="10">Api\RouteExtensions.cs</location>
            <body hash="9d7a060b24ca32336a077953b201173f"><![CDATA[{
            route.DataTokens[NamespaceKey] = namespaces;
        }]]></body>
          </codeblock>
        </method>
        <method name="SetNameSpaces">
          <declaration><![CDATA[internal static void SetNameSpaces(this IHttpRoute route, string[] namespaces)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="38" sc="9" el="40" ec="10">Api\RouteExtensions.cs</location>
            <body hash="9d7a060b24ca32336a077953b201173f"><![CDATA[{
            route.DataTokens[NamespaceKey] = namespaces;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="NameKey">
          <declaration><![CDATA[private const string NameKey = "name";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="NamespaceKey">
          <declaration><![CDATA[private const string NamespaceKey = "namespaces";]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="StandardTabAndModuleInfoProvider">
      <declaration><![CDATA[public sealed class StandardTabAndModuleInfoProvider : ITabAndModuleInfoProvider]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public StandardTabAndModuleInfoProvider()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="FindInt">
          <declaration><![CDATA[private static int FindInt(HttpRequestMessage requestMessage, string key)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="43" sc="9" el="64" ec="10">Api\StandardTabAndModuleInfoProvider.cs</location>
            <body hash="d04656e0e282fcb03def4018196e631e"><![CDATA[{
            IEnumerable<string> values;
            string value = null;
            if (requestMessage.Headers.TryGetValues(key, out values))
            {
                value = values.FirstOrDefault();
            }

            if (String.IsNullOrEmpty(value) && requestMessage.RequestUri != null)
            {
                var queryString = HttpUtility.ParseQueryString(requestMessage.RequestUri.Query);
                value = queryString[key];
            }

            int id;
            if (Int32.TryParse(value, out id))
            {
                return id;
            }

            return Null.NullInteger;
        }]]></body>
          </codeblock>
        </method>
        <method name="TryFindModuleId">
          <declaration><![CDATA[public bool TryFindModuleId(HttpRequestMessage request, out int moduleId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="24" sc="9" el="27" ec="10">Api\StandardTabAndModuleInfoProvider.cs</location>
            <body hash="4147064e2c43a8d001a88e561908db07"><![CDATA[{
            moduleId = FindInt(request, ModuleIdKey);
            return moduleId > Null.NullInteger;
        }]]></body>
          </codeblock>
        </method>
        <method name="TryFindModuleInfo">
          <declaration><![CDATA[public bool TryFindModuleInfo(HttpRequestMessage request, out ModuleInfo moduleInfo)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="30" sc="9" el="40" ec="10">Api\StandardTabAndModuleInfoProvider.cs</location>
            <body hash="5a04dd55b06577256fda0327223c2ea8"><![CDATA[{
            moduleInfo = null;

            int tabId, moduleId;
            if(TryFindTabId(request, out tabId) && TryFindModuleId(request, out moduleId))
            {
                moduleInfo = ModuleController.Instance.GetModule(moduleId, tabId, false);
            }

            return moduleInfo != null;
        }]]></body>
          </codeblock>
        </method>
        <method name="TryFindTabId">
          <declaration><![CDATA[public bool TryFindTabId(HttpRequestMessage request, out int tabId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="18" sc="9" el="21" ec="10">Api\StandardTabAndModuleInfoProvider.cs</location>
            <body hash="de02873271e39377d08c841923c2707c"><![CDATA[{
            tabId = FindInt(request, TabIdKey);
            return tabId > Null.NullInteger;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="ModuleIdKey">
          <declaration><![CDATA[private const string ModuleIdKey = "ModuleId";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="TabIdKey">
          <declaration><![CDATA[private const string TabIdKey = "TabId";]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="StringPassThroughMediaTypeFormatter">
      <declaration><![CDATA[public class StringPassThroughMediaTypeFormatter : MediaTypeFormatter]]></declaration>
      <documentation>
        <summary>
 A MediaTypeFormatter that simply allows strings to pass through WebAPI and be associated with the specified MIME type
 </summary>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public StringPassThroughMediaTypeFormatter() : this(new string[]]]></declaration>
          <documentation>
            <summary>
 Initialize a formatter that can handle text/plain and text/html
 </summary>
          </documentation>
          <codeblock>
            <location sl="39" sc="9" el="39" ec="96">Api\StringPassThroughMediaTypeFormatter.cs</location>
            <body hash="672f99d8e40f6650ed35c7945865aaa4"><![CDATA[public StringPassThroughMediaTypeFormatter() : this(new [] {"text/plain", "text/html"}]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[public StringPassThroughMediaTypeFormatter(System.Collections.Generic.IEnumerable<string> mediaTypes)]]></declaration>
          <documentation>
            <summary>
 Initialize a formatter that can handle the specified media types
 </summary>
          </documentation>
          <codeblock>
            <location sl="44" sc="9" el="50" ec="10">Api\StringPassThroughMediaTypeFormatter.cs</location>
            <body hash="231d4977043857108ad3f30680a79445"><![CDATA[public StringPassThroughMediaTypeFormatter(IEnumerable<string> mediaTypes)
        {
            foreach (var type in mediaTypes)
            {
                SupportedMediaTypes.Add(new MediaTypeHeaderValue(type));
            }
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="CanReadType">
          <declaration><![CDATA[public override bool CanReadType(System.Type type)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="53" sc="9" el="55" ec="10">Api\StringPassThroughMediaTypeFormatter.cs</location>
            <body hash="cbb2ff78bf04b4b6b47a4c09ccefe35a"><![CDATA[{
            return type == typeof(string);
        }]]></body>
          </codeblock>
        </method>
        <method name="CanWriteType">
          <declaration><![CDATA[public override bool CanWriteType(System.Type type)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="58" sc="9" el="60" ec="10">Api\StringPassThroughMediaTypeFormatter.cs</location>
            <body hash="cbb2ff78bf04b4b6b47a4c09ccefe35a"><![CDATA[{
            return type == typeof(string);
        }]]></body>
          </codeblock>
        </method>
        <method name="ReadFromStreamAsync">
          <declaration><![CDATA[public override Task<object> ReadFromStreamAsync(System.Type type, System.IO.Stream readStream, HttpContent content, IFormatterLogger formatterLogger)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="63" sc="9" el="70" ec="10">Api\StringPassThroughMediaTypeFormatter.cs</location>
            <body hash="c3447b507732ca494f4589ec1add8e6d"><![CDATA[{
            var reader = new StreamReader(readStream);
            string value = reader.ReadToEnd();

            var completionSource = new TaskCompletionSource<object>();
            completionSource.SetResult(value);
            return completionSource.Task;
        }]]></body>
          </codeblock>
        </method>
        <method name="WriteToStreamAsync">
          <declaration><![CDATA[public override Task WriteToStreamAsync(System.Type type, object value, System.IO.Stream writeStream, HttpContent content, TransportContext transportContext)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="73" sc="9" el="81" ec="10">Api\StringPassThroughMediaTypeFormatter.cs</location>
            <body hash="74457d9148708fa9c8b122a2e831cf31"><![CDATA[{
            var writer = new StreamWriter(writeStream);
            writer.Write((string)value);
            writer.Flush();

            var completionSource = new TaskCompletionSource<object>();
            completionSource.SetResult(null);
            return completionSource.Task;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="SupportedModulesAttribute">
      <declaration><![CDATA[public class SupportedModulesAttribute : AuthorizeAttributeBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public SupportedModulesAttribute(string supportedModules)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="34" sc="9" el="37" ec="10">Api\SupportedModulesAttribute.cs</location>
            <body hash="4984ff6f013a6388a5fba0d090b2a4ea"><![CDATA[public SupportedModulesAttribute(string supportedModules)
        {
            _supportedModules = supportedModules.Split(new[] { ',' });
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="FindModuleInfo">
          <declaration><![CDATA[protected virtual ModuleInfo FindModuleInfo(HttpRequestMessage request)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="57" sc="9" el="59" ec="10">Api\SupportedModulesAttribute.cs</location>
            <body hash="d2c2476a96bc904bc0453ca4339972f3"><![CDATA[{
            return request.FindModuleInfo();
        }]]></body>
          </codeblock>
        </method>
        <method name="IsAuthorized">
          <declaration><![CDATA[public override bool IsAuthorized(AuthFilterContext context)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="40" sc="9" el="49" ec="10">Api\SupportedModulesAttribute.cs</location>
            <body hash="733803e9e51ad9c0008792bd9d7ef849"><![CDATA[{
            var module = FindModuleInfo(context.ActionContext.Request);

            if (module != null)
            {
                return ModuleIsSupported(module);
            }

            return false;
        }]]></body>
          </codeblock>
        </method>
        <method name="ModuleIsSupported">
          <declaration><![CDATA[private bool ModuleIsSupported(ModuleInfo module)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="52" sc="9" el="54" ec="10">Api\SupportedModulesAttribute.cs</location>
            <body hash="390a69254e07f7a42a7e135ef246cf7e"><![CDATA[{
            return _supportedModules.Contains(module.DesktopModule.ModuleName);
        }]]></body>
          </codeblock>
        </method>
        <method name="SkipAuthorization">
          <declaration><![CDATA[protected override bool SkipAuthorization(HttpActionContext actionContext)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="62" sc="9" el="64" ec="10">Api\SupportedModulesAttribute.cs</location>
            <body hash="a2b947a21611f14a9299bee8133a69fe"><![CDATA[{
            return false;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_supportedModules">
          <declaration><![CDATA[private readonly string[] _supportedModules;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="TraceWriter">
      <declaration><![CDATA[internal sealed class TraceWriter : ITraceWriter]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public TraceWriter(bool isTracingEnabled)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="35" sc="9" el="38" ec="10">Api\TraceWriter.cs</location>
            <body hash="c1a083fe063ac2a2eacedc475a6335ab"><![CDATA[public TraceWriter(bool isTracingEnabled)
        {
            _enabled = isTracingEnabled;
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".cctor">
          <declaration><![CDATA[static TraceWriter()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="32" sc="6" el="32" ec="98">Api\TraceWriter.cs</location>
            <body hash="f21d0f9ad84b1b00132f0a84d9c05abb"><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof (TraceWriter))]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="Log">
          <declaration><![CDATA[private void Log(TraceRecord rec)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="53" sc="9" el="102" ec="10">Api\TraceWriter.cs</location>
            <body hash="f05d8d9c28caedf92c4dd7f2a738c303"><![CDATA[{
            var message = new StringBuilder();

            if (rec.Request != null)
            {
                if (rec.Request.Method != null)
                {
                    message.Append(" ").Append(rec.Request.Method.Method);
                }

                if (rec.Request.RequestUri != null)
                {
                    message.Append(" ").Append(rec.Request.RequestUri.AbsoluteUri);
                }
            }

            if (!string.IsNullOrEmpty(rec.Category))
            {
                message.Append(" ").Append(rec.Category);
            }

            if (!string.IsNullOrEmpty(rec.Message))
            {
                message.Append(" ").Append(rec.Message);
            }

            string output = message.ToString();

            if (!String.IsNullOrEmpty(output))
            {
                switch (rec.Level)
                {
                    case TraceLevel.Debug:
                        Logger.Debug(output);
                        break;
                    case TraceLevel.Info:
                        Logger.Info(output);
                        break;
                    case TraceLevel.Warn:
                        Logger.Warn(output);
                        break;
                    case TraceLevel.Error:
                        Logger.Error(output);
                        break;
                    case TraceLevel.Fatal:
                        Logger.Fatal(output);
                        break;
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="Trace">
          <declaration><![CDATA[public void Trace(HttpRequestMessage request, string category, TraceLevel level, System.Action<TraceRecord> traceAction)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="41" sc="9" el="50" ec="10">Api\TraceWriter.cs</location>
            <body hash="5ee3e80ae4661ccb284380f03d4afd0b"><![CDATA[{
            if(!_enabled || level == TraceLevel.Off)
            {
                return;
            }

            var rec = new TraceRecord(request, category, level);
            traceAction(rec);
            Log(rec);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_enabled">
          <declaration><![CDATA[private readonly bool _enabled;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Logger">
          <declaration><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof(TraceWriter));]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="UrlHelperExtensions">
      <declaration><![CDATA[public static class UrlHelperExtensions]]></declaration>
      <documentation>
      </documentation>
      <constructors>
      </constructors>
      <methods>
        <method name="DnnLink">
          <declaration><![CDATA[public static string DnnLink(this UrlHelper urlHelper, string moduleFolderName, string routeName, object routeValues)]]></declaration>
          <documentation>
            <summary>
 Generate WebAPI Links compatible with DNN Services Framework
 </summary>
 <param name="urlHelper">The UrlHelper</param>
 <param name="moduleFolderName">ModuleFolderName for the route</param>
 <param name="routeName">RouteName for the route</param>
 <param name="routeValues">Values to be passed to the route</param>
 <returns>a url</returns></documentation>
          <codeblock>
            <location sl="37" sc="9" el="39" ec="10">Api\UrlHelperExtensions.cs</location>
            <body hash="d2ad15d03602266d91e3954b8e89d17b"><![CDATA[{
            return DnnLink(urlHelper, moduleFolderName, routeName, routeValues, PortalController.Instance.GetCurrentPortalSettings().PortalAlias);
        }]]></body>
          </codeblock>
        </method>
        <method name="DnnLink">
          <declaration><![CDATA[public static string DnnLink(this UrlHelper urlHelper, string moduleFolderName, string routeName, object routeValues, PortalAliasInfo portalAliasInfo)]]></declaration>
          <documentation>
            <summary>
 Generate WebAPI Links compatible with DNN Services Framework
 </summary>
 <param name="urlHelper">The UrlHelper</param>
 <param name="moduleFolderName">ModuleFolderName for the route</param>
 <param name="routeName">RouteName for the route</param>
 <param name="routeValues">Values to be passed to the route</param>
 <param name="portalAliasInfo">The PortalAlias to use in the Url </param>
 <returns>a url</returns></documentation>
          <codeblock>
            <location sl="51" sc="9" el="57" ec="10">Api\UrlHelperExtensions.cs</location>
            <body hash="392d29f150215f311ac0870f0030aadf"><![CDATA[{
            var parm = new PortalAliasRouteManager();
            var fullName = parm.GetRouteName(moduleFolderName, routeName, PortalController.Instance.GetCurrentPortalSettings().PortalAlias);
            HttpRouteValueDictionary allRouteValues = parm.GetAllRouteValues(portalAliasInfo, routeValues);

            return urlHelper.Link(fullName, allRouteValues);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="ValidateAntiForgeryTokenAttribute">
      <declaration><![CDATA[public class ValidateAntiForgeryTokenAttribute : AuthorizeAttributeBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public ValidateAntiForgeryTokenAttribute()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="GetAntiForgeryCookieValue">
          <declaration><![CDATA[protected string GetAntiForgeryCookieValue(AuthFilterContext context)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="49" sc="9" el="71" ec="10">Api\ValidateAntiForgeryTokenAttribute.cs</location>
            <body hash="ebe091c0169b72da0b81bb06a5e35ad7"><![CDATA[{
            foreach (var cookieValue in context.ActionContext.Request.Headers.GetValues("Cookie"))
            {
                var nameIndex = cookieValue.IndexOf(AntiForgery.Instance.CookieName, StringComparison.InvariantCultureIgnoreCase);

                if(nameIndex > -1)
                {
                    var valueIndex = nameIndex + AntiForgery.Instance.CookieName.Length + 1;
                    var valueEndIndex = cookieValue.Substring(valueIndex).IndexOf(';');

                    if (valueEndIndex > -1)
                    {
                        return cookieValue.Substring(valueIndex, valueEndIndex);
                    }
                    else
                    {
                        return cookieValue.Substring(valueIndex);
                    }
                }
            }
            
            return "";
        }]]></body>
          </codeblock>
        </method>
        <method name="IsAuthorized">
          <declaration><![CDATA[public override bool IsAuthorized(AuthFilterContext context)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="31" sc="9" el="46" ec="10">Api\ValidateAntiForgeryTokenAttribute.cs</location>
            <body hash="250c0f821f589e5f0b455b28143ac73b"><![CDATA[{
            try
            {
                string cookieValue = GetAntiForgeryCookieValue(context);
                var token = context.ActionContext.Request.Headers.GetValues("RequestVerificationToken").FirstOrDefault();

                AntiForgery.Instance.Validate(cookieValue, token);
            }
            catch(Exception e)
            {
                context.AuthFailureMessage = e.Message;
                return false;
            }

            return true;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="AllowMultiple">
          <declaration><![CDATA[public override bool AllowMultiple]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="DotNetNuke.Web.Api.Internal">
    <class name="AntiForgery">
      <declaration><![CDATA[public class AntiForgery : ServiceLocator<IAntiForgery, AntiForgery>]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public AntiForgery()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="GetFactory">
          <declaration><![CDATA[protected override Func<IAntiForgery> GetFactory()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="9" sc="9" el="11" ec="10">Api\Internal\AntiForgery.cs</location>
            <body hash="f995120301e33212a80bdf3cffd0baa9"><![CDATA[{
            return () => new AntiForgeryImpl();
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="AntiForgeryImpl">
      <declaration><![CDATA[internal class AntiForgeryImpl : IAntiForgery]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public AntiForgeryImpl()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="Validate">
          <declaration><![CDATA[public void Validate(string cookieToken, string headerToken)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="7" sc="9" el="9" ec="10">Api\Internal\AntiForgeryImpl.cs</location>
            <body hash="5a83e6d322881db6fdea0a9b19467f29"><![CDATA[{
            System.Web.Helpers.AntiForgery.Validate(cookieToken, headerToken);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="CookieName">
          <declaration><![CDATA[public string CookieName]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnActionFilterProvider">
      <declaration><![CDATA[internal class DnnActionFilterProvider : IFilterProvider]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnActionFilterProvider()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="GetFilters">
          <declaration><![CDATA[public System.Collections.Generic.IEnumerable<FilterInfo> GetFilters(HttpConfiguration configuration, HttpActionDescriptor actionDescriptor)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="13" sc="9" el="30" ec="10">Api\Internal\DnnActionFilterProvider.cs</location>
            <body hash="e6bcbe61568e1acf6e5e9963d76936d6"><![CDATA[{
            Requires.NotNull("configuration", configuration);
            Requires.NotNull("actionDescriptor", actionDescriptor);

            IEnumerable<FilterInfo> controllerFilters = actionDescriptor.ControllerDescriptor.GetFilters().Select(instance => new FilterInfo(instance, FilterScope.Controller));
            IEnumerable<FilterInfo> actionFilters = actionDescriptor.GetFilters().Select(instance => new FilterInfo(instance, FilterScope.Action));

            var allFilters = controllerFilters.Concat(actionFilters).ToList();

            bool overrideFilterPresent = allFilters.Any(x => x.Instance is IOverrideDefaultAuthLevel);

            if(!overrideFilterPresent)
            {
                allFilters.Add(new FilterInfo(new RequireHostAttribute(), FilterScope.Action));
            }

            return allFilters;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnContextMessageHandler">
      <declaration><![CDATA[public class DnnContextMessageHandler : MessageProcessingHandler]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnContextMessageHandler()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="ProcessRequest">
          <declaration><![CDATA[protected override HttpRequestMessage ProcessRequest(HttpRequestMessage request, CancellationToken cancellationToken)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="37" sc="9" el="42" ec="10">Api\Internal\DnnContextMessageHandler.cs</location>
            <body hash="e91478fe7836984da93d3db0bb5f53bb"><![CDATA[{
            var portalSettings = SetupPortalSettings(request);
            SetThreadCulture(portalSettings);

            return request;
        }]]></body>
          </codeblock>
        </method>
        <method name="ProcessResponse">
          <declaration><![CDATA[protected override HttpResponseMessage ProcessResponse(HttpResponseMessage response, CancellationToken cancellationToken)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="99" sc="9" el="101" ec="10">Api\Internal\DnnContextMessageHandler.cs</location>
            <body hash="ffcc12242fd3809a47b1d4c6be220960"><![CDATA[{
            return response;
        }]]></body>
          </codeblock>
        </method>
        <method name="SetThreadCulture">
          <declaration><![CDATA[private static void SetThreadCulture(PortalSettings portalSettings)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="45" sc="9" el="51" ec="10">Api\Internal\DnnContextMessageHandler.cs</location>
            <body hash="c371148cd4125660f560c174e0bbd38d"><![CDATA[{
            CultureInfo pageLocale = TestableLocalization.Instance.GetPageLocale(portalSettings);
            if (pageLocale != null)
            {
                TestableLocalization.Instance.SetThreadCultures(pageLocale, portalSettings);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="SetupPortalSettings">
          <declaration><![CDATA[private static PortalSettings SetupPortalSettings(HttpRequestMessage request)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="54" sc="9" el="65" ec="10">Api\Internal\DnnContextMessageHandler.cs</location>
            <body hash="1f181f4fdfbb96eaa682bd041e27cc9f"><![CDATA[{
            var domainName = TestableGlobals.Instance.GetDomainName(request.RequestUri);
            var alias = PortalAliasController.Instance.GetPortalAlias(domainName);

            int tabId;
            ValidateTabAndModuleContext(request, alias.PortalID, out tabId);

            var portalSettings = new PortalSettings(tabId, alias);

            request.GetHttpContext().Items["PortalSettings"] = portalSettings;
            return portalSettings;
        }]]></body>
          </codeblock>
        </method>
        <method name="TabIsInPortal">
          <declaration><![CDATA[private static bool TabIsInPortal(int tabId, int portalId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="68" sc="9" el="72" ec="10">Api\Internal\DnnContextMessageHandler.cs</location>
            <body hash="7e57786855253ce4d177ea04b8be222f"><![CDATA[{
            var tab = TabController.Instance.GetTab(tabId, portalId);

            return tab != null;
        }]]></body>
          </codeblock>
        </method>
        <method name="ValidateTabAndModuleContext">
          <declaration><![CDATA[private static void ValidateTabAndModuleContext(HttpRequestMessage request, int portalId, out int tabId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="75" sc="9" el="96" ec="10">Api\Internal\DnnContextMessageHandler.cs</location>
            <body hash="8f4065ea3e45f03e512f386fb9a5bbe0"><![CDATA[{
            tabId = request.FindTabId();

            if (tabId != Null.NullInteger)
            {
                if (!TabIsInPortal(tabId, portalId))
                {
                    throw new HttpResponseException(request.CreateErrorResponse(HttpStatusCode.BadRequest, Localization.GetString("TabNotInPortal", Localization.ExceptionsResourceFile)));
                }

                int moduleId = request.FindModuleId();

                if (moduleId != Null.NullInteger)
                {
                    var module = ModuleController.Instance.GetModule(moduleId, tabId, false);
                    if (module == null)
                    {
                        throw new HttpResponseException(request.CreateErrorResponse(HttpStatusCode.BadRequest, Localization.GetString("TabModuleNotExist", Localization.ExceptionsResourceFile)));
                    }
                }
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnPageEditorAttribute">
      <declaration><![CDATA[public sealed class DnnPageEditorAttribute : AuthorizeAttributeBase, IOverrideDefaultAuthLevel]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnPageEditorAttribute()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="IsAuthorized">
          <declaration><![CDATA[public override bool IsAuthorized(AuthFilterContext context)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="35" sc="9" el="40" ec="10">Api\Internal\DnnPageEditorAttribute.cs</location>
            <body hash="197758973e10e935d6f50c2ed5f6aad9"><![CDATA[{
            Requires.NotNull("context", context);

            return PagePermissionsAttributesHelper.HasTabPermission("EDIT,CONTENT,MANAGE") || IsModuleAdmin(((DnnApiController)context.ActionContext.ControllerContext.Controller).PortalSettings);
            
        }]]></body>
          </codeblock>
        </method>
        <method name="IsModuleAdmin">
          <declaration><![CDATA[private bool IsModuleAdmin(PortalSettings portalSettings)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="43" sc="9" el="58" ec="10">Api\Internal\DnnPageEditorAttribute.cs</location>
            <body hash="dae5e58b19a5426ff72ba02e4110a485"><![CDATA[{
            bool isModuleAdmin = false;
            foreach (ModuleInfo objModule in TabController.CurrentPage.Modules)
            {
                if (!objModule.IsDeleted)
                {
                    bool blnHasModuleEditPermissions = ModulePermissionController.HasModuleAccess(SecurityAccessLevel.Edit, Null.NullString, objModule);
                    if (blnHasModuleEditPermissions)
                    {
                        isModuleAdmin = true;
                        break;
                    }
                }
            }
            return portalSettings.ControlPanelSecurity == PortalSettings.ControlPanelPermission.ModuleEditor && isModuleAdmin;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnPagePermissionAttribute">
      <declaration><![CDATA[public sealed class DnnPagePermissionAttribute : AuthorizeAttributeBase, IOverrideDefaultAuthLevel]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private string permissionKey = "EDIT";]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="28" sc="9" el="28" ec="47">Api\Internal\DnnPagePermissionAttribute.cs</location>
            <body hash="7cc1b4044176ac4bfea5f4381e375d4d"><![CDATA[private string permissionKey = "EDIT"]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="IsAuthorized">
          <declaration><![CDATA[public override bool IsAuthorized(AuthFilterContext context)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="42" sc="9" el="46" ec="10">Api\Internal\DnnPagePermissionAttribute.cs</location>
            <body hash="ed4989a47d1de8a04192b4e5d97fb97e"><![CDATA[{
            Requires.NotNull("context", context);

            return PagePermissionsAttributesHelper.HasTabPermission(PermissionKey);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="permissionKey">
          <declaration><![CDATA[private string permissionKey = "EDIT";]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="PermissionKey">
          <declaration><![CDATA[public string PermissionKey]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="33" sc="13" el="35" ec="14">Api\Internal\DnnPagePermissionAttribute.cs</location>
            <body hash="20b4bfc1793a6724066f6d9b0de5b6e8"><![CDATA[{
                return permissionKey;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="37" sc="13" el="39" ec="14">Api\Internal\DnnPagePermissionAttribute.cs</location>
            <body hash="f82088cbe2157e805c04eace33e4d6bd"><![CDATA[{
                permissionKey = value;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="IAntiForgery">
      <declaration><![CDATA[public interface IAntiForgery]]></declaration>
      <documentation>
      </documentation>
      <constructors>
      </constructors>
      <methods>
        <method name="Validate">
          <declaration><![CDATA[void Validate(string cookieToken, string headerToken);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="CookieName">
          <declaration><![CDATA[string CookieName]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="IFrameSupportedValidateAntiForgeryTokenAttribute">
      <declaration><![CDATA[public class IFrameSupportedValidateAntiForgeryTokenAttribute : ValidateAntiForgeryTokenAttribute]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public IFrameSupportedValidateAntiForgeryTokenAttribute()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="IsAuthorized">
          <declaration><![CDATA[public override bool IsAuthorized(AuthFilterContext context)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="29" sc="9" el="55" ec="10">Api\Internal\IFrameSupportedValidateAntiForgeryTokenAttribute.cs</location>
            <body hash="f25fadcec25fe0432d75e13f66842b54"><![CDATA[{
            if (base.IsAuthorized(context)) return true;
            context.AuthFailureMessage = null;

            try
            {
                var queryString = context.ActionContext.Request.GetQueryNameValuePairs();
                var token = string.Empty;
                foreach(var kvp in queryString)
                {
                    if (kvp.Key == "__RequestVerificationToken"){
                        token = kvp.Value;
                        break;
                    }
                }
                string cookieValue = GetAntiForgeryCookieValue(context);

                AntiForgery.Instance.Validate(cookieValue, token );
            }
            catch (Exception e)
            {
                context.AuthFailureMessage = e.Message;
                return false;
            }

            return true;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="AllowMultiple">
          <declaration><![CDATA[public override bool AllowMultiple]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="PagePermissionsAttributesHelper">
      <declaration><![CDATA[public class PagePermissionsAttributesHelper]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public PagePermissionsAttributesHelper()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="HasTabPermission">
          <declaration><![CDATA[public static bool HasTabPermission(string permissionKey)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="32" sc="9" el="45" ec="10">Api\Internal\PagePermissionsAttributesHelper.cs</location>
            <body hash="3638b7b61e21d86efd000399252444b2"><![CDATA[{
            var principal = Thread.CurrentPrincipal;
            if(!principal.Identity.IsAuthenticated)
            {
                return false;
            }

            var currentPortal = PortalController.Instance.GetCurrentPortalSettings();

            bool isAdminUser = currentPortal.UserInfo.IsSuperUser || PortalSecurity.IsInRole(currentPortal.AdministratorRoleName);
            if (isAdminUser) return true;

            return TabPermissionController.HasTabPermission(permissionKey);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="ServicesRoutingManager">
      <declaration><![CDATA[public sealed class ServicesRoutingManager : IMapRoute]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public ServicesRoutingManager() : this(RouteTable.Routes)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="47" sc="9" el="49" ec="10">Api\Internal\ServicesRoutingManager.cs</location>
            <body hash="34ceefed4a5035f4677f01d7d8902320"><![CDATA[public ServicesRoutingManager() : this(RouteTable.Routes)
        {
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[private readonly System.Collections.Generic.Dictionary<string, int> _moduleUsage = new System.Collections.Generic.Dictionary<string, int>();]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="43" sc="9" el="56" ec="10">Api\Internal\ServicesRoutingManager.cs</location>
            <body hash="4428cbcb62558103b6eeba1db3f30b7d"><![CDATA[private readonly Dictionary<string, int> _moduleUsage = new Dictionary<string, int>();
        private readonly RouteCollection _routes;
        private readonly PortalAliasRouteManager _portalAliasRouteManager;

        public ServicesRoutingManager() : this(RouteTable.Routes)
        {
        }

        internal ServicesRoutingManager(RouteCollection routes)
        {
            _routes = routes;
            _portalAliasRouteManager = new PortalAliasRouteManager();
            TypeLocator = new TypeLocator();
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".cctor">
          <declaration><![CDATA[static ServicesRoutingManager()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="42" sc="6" el="42" ec="109">Api\Internal\ServicesRoutingManager.cs</location>
            <body hash="37ce6ca8e2f7997440b913f4b0f13c12"><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof (ServicesRoutingManager))]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="ClearCachedRouteData">
          <declaration><![CDATA[private void ClearCachedRouteData()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="179" sc="9" el="181" ec="10">Api\Internal\ServicesRoutingManager.cs</location>
            <body hash="6648146f0b5db3e9e25d0f30c00839c4"><![CDATA[{
            _portalAliasRouteManager.ClearCachedData();
        }]]></body>
          </codeblock>
        </method>
        <method name="GetAllServiceRouteMapperTypes">
          <declaration><![CDATA[private System.Collections.Generic.IEnumerable<System.Type> GetAllServiceRouteMapperTypes()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="214" sc="9" el="216" ec="10">Api\Internal\ServicesRoutingManager.cs</location>
            <body hash="fb570b0b37ceaefb82a875560ddc4553"><![CDATA[{
            return TypeLocator.GetAllMatchingTypes(IsValidServiceRouteMapper);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetServiceRouteMappers">
          <declaration><![CDATA[private System.Collections.Generic.IEnumerable<IServiceRouteMapper> GetServiceRouteMappers()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="IsTracingEnabled">
          <declaration><![CDATA[private bool IsTracingEnabled()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="147" sc="9" el="156" ec="10">Api\Internal\ServicesRoutingManager.cs</location>
            <body hash="2925d66a0c0839319769777164893f03"><![CDATA[{
            var configValue = Config.GetSetting("EnableServicesFrameworkTracing");

            if(!string.IsNullOrEmpty(configValue))
            {
                return Convert.ToBoolean(configValue);
            }

            return false;
        }]]></body>
          </codeblock>
        </method>
        <method name="IsValidServiceRouteMapper">
          <declaration><![CDATA[internal static bool IsValidServiceRouteMapper(System.Type t)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="219" sc="9" el="222" ec="10">Api\Internal\ServicesRoutingManager.cs</location>
            <body hash="d4ac95bb2f964439fc87146c317d6ce6"><![CDATA[{
            return t != null && t.IsClass && !t.IsAbstract && t.IsVisible &&
                   typeof (IServiceRouteMapper).IsAssignableFrom(t);
        }]]></body>
          </codeblock>
        </method>
        <method name="LocateServicesAndMapRoutes">
          <declaration><![CDATA[private void LocateServicesAndMapRoutes()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="159" sc="9" el="176" ec="10">Api\Internal\ServicesRoutingManager.cs</location>
            <body hash="14f94a15eec76d77e64fcc0dba50c6ab"><![CDATA[{
            RegisterSystemRoutes();
            ClearCachedRouteData();

            _moduleUsage.Clear();
            foreach (IServiceRouteMapper routeMapper in GetServiceRouteMappers())
            {
                try
                {
                    routeMapper.RegisterRoutes(this);
                }
                catch (Exception e)
                {
                    Logger.ErrorFormat("{0}.RegisterRoutes threw an exception.  {1}\r\n{2}", routeMapper.GetType().FullName,
                                 e.Message, e.StackTrace);
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="MapHttpRoute">
          <declaration><![CDATA[public System.Collections.Generic.IList<Route> MapHttpRoute(string moduleFolderName, string routeName, string url, object defaults, object constraints, string[] namespaces)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="63" sc="9" el="88" ec="10">Api\Internal\ServicesRoutingManager.cs</location>
            <body hash="a8213d43a125e8c6d3b4f7bc54767963"><![CDATA[{
            if (namespaces == null || namespaces.Length == 0 || String.IsNullOrEmpty(namespaces[0]))
            {
                throw new ArgumentException(Localization.GetExceptionMessage("ArgumentCannotBeNullOrEmpty",
                                                                             "The argument '{0}' cannot be null or empty.",
                                                                             "namespaces"));
            }

            Requires.NotNullOrEmpty("moduleFolderName", moduleFolderName);

            url = url.Trim(new[] { '/', '\\' });

            IEnumerable<int> prefixCounts = _portalAliasRouteManager.GetRoutePrefixCounts();
            var routes = new List<Route>();

            foreach (int count in prefixCounts)
            {
                string fullRouteName = _portalAliasRouteManager.GetRouteName(moduleFolderName, routeName, count);
                string routeUrl = _portalAliasRouteManager.GetRouteUrl(moduleFolderName, url, count);
                Route route = MapHttpRouteWithNamespace(fullRouteName, routeUrl, defaults, constraints, namespaces);
                routes.Add(route);
                Logger.Trace("Mapping route: " + fullRouteName + " @ " + routeUrl);
            }

            return routes;
        }]]></body>
          </codeblock>
        </method>
        <method name="MapHttpRoute">
          <declaration><![CDATA[public System.Collections.Generic.IList<Route> MapHttpRoute(string moduleFolderName, string routeName, string url, object defaults, string[] namespaces)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="91" sc="9" el="93" ec="10">Api\Internal\ServicesRoutingManager.cs</location>
            <body hash="5e834dd8b2185bd589aa6738b4cad98c"><![CDATA[{
            return MapHttpRoute(moduleFolderName, routeName, url, defaults, null, namespaces);
        }]]></body>
          </codeblock>
        </method>
        <method name="MapHttpRoute">
          <declaration><![CDATA[public System.Collections.Generic.IList<Route> MapHttpRoute(string moduleFolderName, string routeName, string url, string[] namespaces)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="96" sc="9" el="98" ec="10">Api\Internal\ServicesRoutingManager.cs</location>
            <body hash="c4ee0e129aa85fed0e6565a27cd4b326"><![CDATA[{
            return MapHttpRoute(moduleFolderName, routeName, url, null, null, namespaces);
        }]]></body>
          </codeblock>
        </method>
        <method name="MapHttpRouteWithNamespace">
          <declaration><![CDATA[private Route MapHttpRouteWithNamespace(string name, string url, object defaults, object constraints, string[] namespaces)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="225" sc="9" el="236" ec="10">Api\Internal\ServicesRoutingManager.cs</location>
            <body hash="b9d060f476723b62508313186774b6d6"><![CDATA[{
            Route route = _routes.MapHttpRoute(name, url, defaults, constraints);
            
            if(route.DataTokens == null)
            {
                route.DataTokens = new RouteValueDictionary();
            }

            route.SetNameSpaces(namespaces);
            route.SetName(name);
            return route;
        }]]></body>
          </codeblock>
        </method>
        <method name="RegisterRoutes">
          <declaration><![CDATA[public void RegisterRoutes()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="103" sc="9" el="144" ec="10">Api\Internal\ServicesRoutingManager.cs</location>
            <body hash="c5a75775b7e32ce0c84ff034bc8972c5"><![CDATA[{
            //register routes is ONLY called from within DNN application initialization
            //which is well protected from races
            //allowing us to not worry about multi-threading threats here
            if (!GlobalConfiguration.Configuration.MessageHandlers.Any(x => x is BasicAuthMessageHandler))
            {
                //Everything in this block is run one time at startup

                //dnnContext message handler
                //this must run before any auth message handlers
                GlobalConfiguration.Configuration.MessageHandlers.Add(new DnnContextMessageHandler());
                
                //authentication message handlers
                GlobalConfiguration.Configuration.MessageHandlers.Add(new BasicAuthMessageHandler());
                GlobalConfiguration.Configuration.MessageHandlers.Add(new DigestAuthMessageHandler());
                GlobalConfiguration.Configuration.MessageHandlers.Add(new WebFormsAuthMessageHandler());

                //media type formatter for text/html, text/plain
                GlobalConfiguration.Configuration.Formatters.Add(new StringPassThroughMediaTypeFormatter());

                //controller selector that respects namespaces
                GlobalConfiguration.Configuration.Services.Replace(typeof(IHttpControllerSelector), new DnnHttpControllerSelector(GlobalConfiguration.Configuration));

                //tracwriter for dotnetnuke.instrumentation
                GlobalConfiguration.Configuration.Services.Replace(typeof(ITraceWriter), new TraceWriter(IsTracingEnabled()));

                //replace the default action filter provider with our own
                GlobalConfiguration.Configuration.Services.Add(typeof(IFilterProvider), new DnnActionFilterProvider());
                var defaultprovider = GlobalConfiguration.Configuration.Services.GetFilterProviders().Where(x => x is ActionDescriptorFilterProvider);
                GlobalConfiguration.Configuration.Services.Remove(typeof(IFilterProvider), defaultprovider);

                //add standard tab and module id provider
                GlobalConfiguration.Configuration.AddTabAndModuleInfoProvider(new StandardTabAndModuleInfoProvider());
            }

            using (_routes.GetWriteLock())
            {
                _routes.Clear();
                LocateServicesAndMapRoutes();
            }
            Logger.TraceFormat("Registered a total of {0} routes", _routes.Count);
        }]]></body>
          </codeblock>
        </method>
        <method name="RegisterSystemRoutes">
          <declaration><![CDATA[private void RegisterSystemRoutes()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="184" sc="9" el="186" ec="10">Api\Internal\ServicesRoutingManager.cs</location>
            <body hash="dba397cc7ae748eddd6d46462def9a4d"><![CDATA[{
            //_routes.IgnoreRoute("{resource}.axd/{*pathInfo}");
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_moduleUsage">
          <declaration><![CDATA[private readonly System.Collections.Generic.Dictionary<string, int> _moduleUsage = new System.Collections.Generic.Dictionary<string, int>();]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_portalAliasRouteManager">
          <declaration><![CDATA[private readonly PortalAliasRouteManager _portalAliasRouteManager;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_routes">
          <declaration><![CDATA[private readonly RouteCollection _routes;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Logger">
          <declaration><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof(ServicesRoutingManager));]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="TypeLocator">
          <declaration><![CDATA[internal ITypeLocator TypeLocator]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="DotNetNuke.Web.Api.Internal.Auth">
    <class name="AuthMessageHandlerBase">
      <declaration><![CDATA[public abstract class AuthMessageHandlerBase : DelegatingHandler]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[protected AuthMessageHandlerBase()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="IsXmlHttpRequest">
          <declaration><![CDATA[protected static bool IsXmlHttpRequest(HttpRequestMessage request)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="75" sc="9" el="84" ec="10">Api\Internal\Auth\AuthMessageHandlerBase.cs</location>
            <body hash="47749111a2d1b09d5dfb2700b4a26dc2"><![CDATA[{
            if (request.Headers.Contains(RequestedWithHeader))
            {
                string header = request.Headers.GetValues(RequestedWithHeader).FirstOrDefault();
                return !String.IsNullOrEmpty(header) &&
                       header.Equals("XmlHttpRequest", StringComparison.InvariantCultureIgnoreCase);
            }

            return false;
        }]]></body>
          </codeblock>
        </method>
        <method name="NeedsAuthentication">
          <declaration><![CDATA[protected bool NeedsAuthentication()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="70" sc="9" el="72" ec="10">Api\Internal\Auth\AuthMessageHandlerBase.cs</location>
            <body hash="00238fa4051ab6a365e8871537f3bd91"><![CDATA[{
            return !Thread.CurrentPrincipal.Identity.IsAuthenticated;
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInboundRequest">
          <declaration><![CDATA[public virtual HttpResponseMessage OnInboundRequest(HttpRequestMessage request, CancellationToken cancellationToken)]]></declaration>
          <documentation>
            <summary>
 A chance to process inbound requests
 </summary>
 <param name="request">the request message</param>
 <param name="cancellationToken">a cancellationtoken</param>
 <returns>null normally, if a response is returned all inbound processing is terminated and the resposne is returned</returns></documentation>
          <codeblock>
            <location sl="54" sc="9" el="56" ec="10">Api\Internal\Auth\AuthMessageHandlerBase.cs</location>
            <body hash="e58ece320c3127efb710b9676c9d552e"><![CDATA[{
            return null;
        }]]></body>
          </codeblock>
        </method>
        <method name="OnOutboundResponse">
          <declaration><![CDATA[public virtual HttpResponseMessage OnOutboundResponse(HttpResponseMessage response, CancellationToken cancellationToken)]]></declaration>
          <documentation>
            <summary>
 A change to process outbound responses
 </summary>
 <param name="response">The response message</param>
 <param name="cancellationToken">a cancellationtoken</param>
 <returns>the responsemessage</returns></documentation>
          <codeblock>
            <location sl="65" sc="9" el="67" ec="10">Api\Internal\Auth\AuthMessageHandlerBase.cs</location>
            <body hash="ffcc12242fd3809a47b1d4c6be220960"><![CDATA[{
            return response;
        }]]></body>
          </codeblock>
        </method>
        <method name="SendAsync">
          <declaration><![CDATA[protected override Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="36" sc="9" el="45" ec="10">Api\Internal\Auth\AuthMessageHandlerBase.cs</location>
            <body hash="1a886cfdd3cc40d41ff3e19f7b1b3d69"><![CDATA[{
            var response = OnInboundRequest(request, cancellationToken);
            if(response != null)
            {
                response.RequestMessage = response.RequestMessage ?? request; //if someone returns new HttpResponseMessage(), fill in the requestMessage for other handlers in the chain
                return Task<HttpResponseMessage>.Factory.StartNew(() => response);
            }

            return base.SendAsync(request, cancellationToken).ContinueWith(x => OnOutboundResponse(x.Result, cancellationToken));
        }]]></body>
          </codeblock>
        </method>
        <method name="SetCurrentPrincipal">
          <declaration><![CDATA[protected static void SetCurrentPrincipal(System.Security.Principal.IPrincipal principal, HttpRequestMessage request)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="87" sc="9" el="90" ec="10">Api\Internal\Auth\AuthMessageHandlerBase.cs</location>
            <body hash="fee539a92f856ca03998ba6175e4dccf"><![CDATA[{
            Thread.CurrentPrincipal = principal;
            request.GetHttpContext().User = principal;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="RequestedWithHeader">
          <declaration><![CDATA[private const string RequestedWithHeader = "X-REQUESTED-WITH";]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="BasicAuthMessageHandler">
      <declaration><![CDATA[public class BasicAuthMessageHandler : AuthMessageHandlerBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private readonly System.Text.Encoding _encoding = System.Text.Encoding.GetEncoding("iso-8859-1");]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="37" sc="9" el="37" ec="82">Api\Internal\Auth\BasicAuthMessageHandler.cs</location>
            <body hash="2258844e0edfe314a160e15bdf1411a0"><![CDATA[private readonly Encoding _encoding = Encoding.GetEncoding("iso-8859-1")]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="GetCredentials">
          <declaration><![CDATA[private BasicAuthMessageHandler.UserCredentials GetCredentials(HttpRequestMessage request)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="90" sc="9" el="116" ec="10">Api\Internal\Auth\BasicAuthMessageHandler.cs</location>
            <body hash="c4b10c93b87fe0a6c90291caf7d17151"><![CDATA[{
            if (request.Headers.Authorization == null)
            {
                return null;
            }

            if (request.Headers.Authorization.Scheme.ToLower() != AuthScheme.ToLower())
            {
                return null;
            }

            string authorization = request.Headers.Authorization.Parameter;
            if (String.IsNullOrEmpty(authorization))
            {
                return null;
            }

            string decoded = _encoding.GetString(Convert.FromBase64String(authorization));

            string[] parts = decoded.Split(new[] {':'}, 2);
            if (parts.Length < 2)
            {
                return null;
            }

            return new UserCredentials(parts[0], parts[1]);
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInboundRequest">
          <declaration><![CDATA[public override HttpResponseMessage OnInboundRequest(HttpRequestMessage request, CancellationToken cancellationToken)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="40" sc="9" el="51" ec="10">Api\Internal\Auth\BasicAuthMessageHandler.cs</location>
            <body hash="734fb3eb486555aca51b1b20d104e590"><![CDATA[{
            if(NeedsAuthentication())
            {
                var portalSettings = PortalController.Instance.GetCurrentPortalSettings();
                if (portalSettings != null)
                {
                    TryToAuthenticate(request, portalSettings.PortalId);
                }
            }

            return base.OnInboundRequest(request, cancellationToken);
        }]]></body>
          </codeblock>
        </method>
        <method name="OnOutboundResponse">
          <declaration><![CDATA[public override HttpResponseMessage OnOutboundResponse(HttpResponseMessage response, CancellationToken cancellationToken)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="54" sc="9" el="61" ec="10">Api\Internal\Auth\BasicAuthMessageHandler.cs</location>
            <body hash="0ce1253c0b0bc867e02efb82c2d64235"><![CDATA[{
            if (response.StatusCode == HttpStatusCode.Unauthorized && SupportsBasicAuth(response.RequestMessage))
            {
                response.Headers.WwwAuthenticate.Add(new AuthenticationHeaderValue(AuthScheme, "realm=\"DNNAPI\""));
            }

            return base.OnOutboundResponse(response, cancellationToken);
        }]]></body>
          </codeblock>
        </method>
        <method name="SupportsBasicAuth">
          <declaration><![CDATA[private bool SupportsBasicAuth(HttpRequestMessage request)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="64" sc="9" el="66" ec="10">Api\Internal\Auth\BasicAuthMessageHandler.cs</location>
            <body hash="f356a3887aa05e0091483bea4005d067"><![CDATA[{
            return !IsXmlHttpRequest(request);
        }]]></body>
          </codeblock>
        </method>
        <method name="TryToAuthenticate">
          <declaration><![CDATA[private void TryToAuthenticate(HttpRequestMessage request, int portalId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="69" sc="9" el="87" ec="10">Api\Internal\Auth\BasicAuthMessageHandler.cs</location>
            <body hash="02d5db0e11a90178d3c4cff8c881103a"><![CDATA[{
            UserCredentials credentials = GetCredentials(request);

            if (credentials == null)
            {
                return;
            }

            var status = UserLoginStatus.LOGIN_FAILURE;
            string ipAddress = request.GetIPAddress();

            UserInfo user = UserController.ValidateUser(portalId, credentials.UserName, credentials.Password, "DNN", "",
                                                        "a portal", ipAddress ?? "", ref status);

            if (user != null)
            {
                SetCurrentPrincipal(new GenericPrincipal(new GenericIdentity(credentials.UserName, AuthScheme), null), request);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_encoding">
          <declaration><![CDATA[private readonly System.Text.Encoding _encoding = System.Text.Encoding.GetEncoding("iso-8859-1");]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="AuthScheme">
          <declaration><![CDATA[private const string AuthScheme = "Basic";]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DigestAuthentication">
      <declaration><![CDATA[internal class DigestAuthentication]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DigestAuthentication(DigestAuthenticationRequest request, int portalId, string ipAddress)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="55" sc="9" el="61" ec="10">Api\Internal\Auth\DigestAuthentication.cs</location>
            <body hash="a2d46d9812573b47258bee0bf2d1679d"><![CDATA[public DigestAuthentication(DigestAuthenticationRequest request, int portalId, string ipAddress)
        {
            _request = request;
            _portalId = portalId;
            _ipAddress = ipAddress ?? "";
            AuthenticateRequest();
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".cctor">
          <declaration><![CDATA[static DigestAuthentication()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="32" sc="9" el="32" ec="74">Api\Internal\Auth\DigestAuthentication.cs</location>
            <body hash="847bd80ecd0638c11ac7838955151fc8"><![CDATA[private static readonly MD5 Md5 = new MD5CryptoServiceProvider()]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="AuthenticateRequest">
          <declaration><![CDATA[private void AuthenticateRequest()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="64" sc="9" el="76" ec="10">Api\Internal\Auth\DigestAuthentication.cs</location>
            <body hash="27903bbebac07b19abc436e735322d3c"><![CDATA[{
            _password = GetPassword(Request);
            if(_password != null)
            {
                IsNonceStale = ! (IsNonceValid(_request.RequestParams["nonce"]));
                //Services.Logging.LoggingController.SimpleLog(String.Format("Request hash: {0} - Response Hash: {1}", _request.RequestParams("response"), HashedDigest))
                if ((! IsNonceStale) && _request.RequestParams["response"] == CalculateHashedDigest())
                {
                    IsValid = true;
                    User = new GenericPrincipal(new GenericIdentity(_request.RawUsername, "digest"), null);
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="CalculateHashedDigest">
          <declaration><![CDATA[public string CalculateHashedDigest()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="49" sc="9" el="51" ec="10">Api\Internal\Auth\DigestAuthentication.cs</location>
            <body hash="0f1c5080ebddcde28b1d65ab1117e9bf"><![CDATA[{
            return CreateMd5HashBinHex(GenerateUnhashedDigest());
        }]]></body>
          </codeblock>
        </method>
        <method name="CreateMd5HashBinHex">
          <declaration><![CDATA[private static string CreateMd5HashBinHex(string val)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="121" sc="9" el="131" ec="10">Api\Internal\Auth\DigestAuthentication.cs</location>
            <body hash="9946d13218c8ff3b109f2e861314278f"><![CDATA[{
            //Services.Logging.LoggingController.SimpleLog(String.Format("Creating Hash for {0}", val))
            //Services.Logging.LoggingController.SimpleLog(String.Format("Back and forth: {0}", Encoding.Default.GetString(Encoding.Default.GetBytes(val))))
            byte[] bha1 = Md5.ComputeHash(Encoding.Default.GetBytes(val));
            string ha1 = "";
            for (int i = 0; i <= 15; i++)
            {
                ha1 += String.Format("{0:x02}", bha1[i]);
            }
            return ha1;
        }]]></body>
          </codeblock>
        </method>
        <method name="GenerateUnhashedDigest">
          <declaration><![CDATA[private string GenerateUnhashedDigest()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="99" sc="9" el="118" ec="10">Api\Internal\Auth\DigestAuthentication.cs</location>
            <body hash="1a7ab7d794cb3efc34ef68c4b71fd6be"><![CDATA[{
            string a1 = String.Format("{0}:{1}:{2}", _request.RequestParams["username"].Replace("\\\\", "\\"),
                                      _request.RequestParams["realm"], _password);
            string ha1 = CreateMd5HashBinHex(a1);
            string a2 = String.Format("{0}:{1}", _request.HttpMethod, _request.RequestParams["uri"]);
            string ha2 = CreateMd5HashBinHex(a2);
            string unhashedDigest;
            if (_request.RequestParams["qop"] != null)
            {
                unhashedDigest = String.Format("{0}:{1}:{2}:{3}:{4}:{5}", ha1, _request.RequestParams["nonce"],
                                               _request.RequestParams["nc"], _request.RequestParams["cnonce"],
                                               _request.RequestParams["qop"], ha2);
            }
            else
            {
                unhashedDigest = String.Format("{0}:{1}:{2}", ha1, _request.RequestParams["nonce"], ha2);
            }
            //Services.Logging.LoggingController.SimpleLog(A1, HA1, A2, HA2, unhashedDigest)
            return unhashedDigest;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPassword">
          <declaration><![CDATA[private string GetPassword(DigestAuthenticationRequest request)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="79" sc="9" el="96" ec="10">Api\Internal\Auth\DigestAuthentication.cs</location>
            <body hash="33fc899d17d2ee5af2cd3aed1b9d1bcc"><![CDATA[{
            UserInfo user = UserController.GetUserByName(_portalId, request.CleanUsername);
            if (user == null)
            {
                user = UserController.GetUserByName(_portalId, request.RawUsername);
            }
            if (user == null)
            {
                return null;
            }
            var password = UserController.GetPassword(ref user, "");
            
            //Try to validate user
            var loginStatus = UserLoginStatus.LOGIN_FAILURE;
            user = UserController.ValidateUser(_portalId, user.Username, password, "DNN", "", _ipAddress, ref loginStatus);

            return user != null ? password : null;
        }]]></body>
          </codeblock>
        </method>
        <method name="IsNonceValid">
          <declaration><![CDATA[private static bool IsNonceValid(string nonce)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="135" sc="9" el="157" ec="10">Api\Internal\Auth\DigestAuthentication.cs</location>
            <body hash="86dcc76ba704ef4f2f8f789f864c7703"><![CDATA[{
            DateTime expireTime;

            int numPadChars = nonce.Length%4;
            if (numPadChars > 0)
            {
                numPadChars = 4 - numPadChars;
            }
            string newNonce = nonce.PadRight(nonce.Length + numPadChars, '=');

            try
            {
                byte[] decodedBytes = Convert.FromBase64String(newNonce);
                string expireStr = Encoding.Default.GetString(decodedBytes);
                expireTime = DateTime.Parse(expireStr);
            }
            catch (FormatException)
            {
                return false;
            }

            return (DateTime.Now <= expireTime);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_ipAddress">
          <declaration><![CDATA[private string _ipAddress;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_password">
          <declaration><![CDATA[private string _password;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_portalId">
          <declaration><![CDATA[private readonly int _portalId;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_request">
          <declaration><![CDATA[private DigestAuthenticationRequest _request;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Md5">
          <declaration><![CDATA[private static readonly System.Security.Cryptography.MD5 Md5 = new System.Security.Cryptography.MD5CryptoServiceProvider();]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="IsNonceStale">
          <declaration><![CDATA[public bool IsNonceStale]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="IsValid">
          <declaration><![CDATA[public bool IsValid]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Request">
          <declaration><![CDATA[public DigestAuthenticationRequest Request]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="User">
          <declaration><![CDATA[public System.Security.Principal.IPrincipal User]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DigestAuthenticationRequest">
      <declaration><![CDATA[internal class DigestAuthenticationRequest]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DigestAuthenticationRequest(string authorizationHeader, string httpMethod)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="28" sc="9" el="54" ec="10">Api\Internal\Auth\DigestAuthenticationRequest.cs</location>
            <body hash="1485e20fbf8a29addcaa3366880fed49"><![CDATA[public DigestAuthenticationRequest(string authorizationHeader, string httpMethod)
        {
            //Authorization: Digest
            //username="Mufasa",
            //realm="testrealm@host.com",
            //nonce="dcd98b7102dd2f0e8b11d0f600bfb0c093",
            //uri="/dir/index.html",
            //qop=auth,
            //nc=00000001,
            //cnonce="0a4f113b",
            //response="6629fae49393a05397450978507c4ef1",
            //opaque="5ccc069c403ebaf9f0171e9517f40e41"
            RequestParams = new NameValueCollection();
            foreach (
                Match m in
                    Regex.Matches(authorizationHeader, "\\s?(?'name'\\w+)=(\"(?'value'[^\"]+)\"|(?'value'[^,]+))"))
            {
                RequestParams.Add(m.Groups["name"].Value, m.Groups["value"].Value);
            }
            HttpMethod = httpMethod;
            RawUsername = RequestParams["username"].Replace("\\\\", "\\");
            CleanUsername = RawUsername;
            if (CleanUsername.LastIndexOf("\\", System.StringComparison.Ordinal) > 0)
            {
                CleanUsername = CleanUsername.Substring(CleanUsername.LastIndexOf("\\", System.StringComparison.Ordinal) + 2 - 1);
            }
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="CleanUsername">
          <declaration><![CDATA[public string CleanUsername]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="HttpMethod">
          <declaration><![CDATA[public string HttpMethod]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="RawUsername">
          <declaration><![CDATA[public string RawUsername]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="RequestParams">
          <declaration><![CDATA[public NameValueCollection RequestParams]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DigestAuthMessageHandler">
      <declaration><![CDATA[public class DigestAuthMessageHandler : AuthMessageHandlerBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DigestAuthMessageHandler()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="AddStaleWwwAuthenticateHeader">
          <declaration><![CDATA[private void AddStaleWwwAuthenticateHeader(HttpResponseMessage response)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="66" sc="9" el="68" ec="10">Api\Internal\Auth\DigestAuthMessageHandler.cs</location>
            <body hash="4d6be10d2f767f68accd45835fcccbb1"><![CDATA[{
            AddWwwAuthenticateHeader(response, true);
        }]]></body>
          </codeblock>
        </method>
        <method name="AddWwwAuthenticateHeader">
          <declaration><![CDATA[private void AddWwwAuthenticateHeader(HttpResponseMessage response, bool isStale = false)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="71" sc="9" el="74" ec="10">Api\Internal\Auth\DigestAuthMessageHandler.cs</location>
            <body hash="440a6e7531994faafab69f7286e97749"><![CDATA[{
            var value = string.Format("realm=\"DNNAPI\", nonce=\"{0}\",  opaque=\"0000000000000000\", stale={1}, algorithm=MD5, qop=\"auth\"", CreateNewNonce(), isStale);
            response.Headers.WwwAuthenticate.Add(new AuthenticationHeaderValue("Digest", value));
        }]]></body>
          </codeblock>
        </method>
        <method name="CreateNewNonce">
          <declaration><![CDATA[private static string CreateNewNonce()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="77" sc="9" el="86" ec="10">Api\Internal\Auth\DigestAuthMessageHandler.cs</location>
            <body hash="f40a738da605db9602759731293e14d8"><![CDATA[{
            DateTime nonceTime = DateTime.Now + TimeSpan.FromMinutes(1);
            string expireStr = nonceTime.ToString("G");

            byte[] expireBytes = Encoding.Default.GetBytes(expireStr);
            string nonce = Convert.ToBase64String(expireBytes);

            nonce = nonce.TrimEnd(new[] { '=' });
            return nonce;
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInboundRequest">
          <declaration><![CDATA[public override HttpResponseMessage OnInboundRequest(HttpRequestMessage request, CancellationToken cancellationToken)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="34" sc="9" el="53" ec="10">Api\Internal\Auth\DigestAuthMessageHandler.cs</location>
            <body hash="b99c725b68878aec2cd3eff52d131c4c"><![CDATA[{
            if (NeedsAuthentication())
            {
                var portalSettings = PortalController.Instance.GetCurrentPortalSettings();
                if (portalSettings != null)
                {
                    var isStale = TryToAuthenticate(request, portalSettings.PortalId);

                    if (isStale)
                    {
                        var staleResponse = request.CreateResponse(HttpStatusCode.Unauthorized);
                        AddStaleWwwAuthenticateHeader(staleResponse);

                        return staleResponse;
                    }
                }
            }

            return base.OnInboundRequest(request, cancellationToken);
        }]]></body>
          </codeblock>
        </method>
        <method name="OnOutboundResponse">
          <declaration><![CDATA[public override HttpResponseMessage OnOutboundResponse(HttpResponseMessage response, CancellationToken cancellationToken)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="56" sc="9" el="63" ec="10">Api\Internal\Auth\DigestAuthMessageHandler.cs</location>
            <body hash="52001bef264e8aa550a33607fcc34551"><![CDATA[{
            if (response.StatusCode == HttpStatusCode.Unauthorized && SupportsDigestAuth(response.RequestMessage))
            {
                AddWwwAuthenticateHeader(response);
            }

            return base.OnOutboundResponse(response, cancellationToken);
        }]]></body>
          </codeblock>
        </method>
        <method name="SupportsDigestAuth">
          <declaration><![CDATA[private bool SupportsDigestAuth(HttpRequestMessage request)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="112" sc="9" el="114" ec="10">Api\Internal\Auth\DigestAuthMessageHandler.cs</location>
            <body hash="f356a3887aa05e0091483bea4005d067"><![CDATA[{
            return !IsXmlHttpRequest(request);
        }]]></body>
          </codeblock>
        </method>
        <method name="TryToAuthenticate">
          <declaration><![CDATA[private bool TryToAuthenticate(HttpRequestMessage request, int portalId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="89" sc="9" el="109" ec="10">Api\Internal\Auth\DigestAuthMessageHandler.cs</location>
            <body hash="5de1c493550d87be90d8ca10be4d89ed"><![CDATA[{
            if (request.Headers.Authorization == null)
            {
                return false;
            }

            string authHeader = request.Headers.Authorization.ToString();

            var digestAuthentication = new DigestAuthentication(new DigestAuthenticationRequest(authHeader, request.Method.Method), portalId, request.GetIPAddress());

            if (digestAuthentication.IsValid)
            {
                SetCurrentPrincipal(digestAuthentication.User, request);
            }
            else if(digestAuthentication.IsNonceStale)
            {
                return true;
            }

            return false;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="WebFormsAuthMessageHandler">
      <declaration><![CDATA[public class WebFormsAuthMessageHandler : MessageProcessingHandler]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public WebFormsAuthMessageHandler()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="ProcessRequest">
          <declaration><![CDATA[protected override HttpRequestMessage ProcessRequest(HttpRequestMessage request, CancellationToken cancellationToken)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="31" sc="9" el="35" ec="10">Api\Internal\Auth\WebFormsAuthMessageHandler.cs</location>
            <body hash="1210248139fee60095107b6ca67075bd"><![CDATA[{
            MembershipModule.AuthenticateRequest(request.GetHttpContext(), allowUnknownExtensinons: true);

            return request;
        }]]></body>
          </codeblock>
        </method>
        <method name="ProcessResponse">
          <declaration><![CDATA[protected override HttpResponseMessage ProcessResponse(HttpResponseMessage response, CancellationToken cancellationToken)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="38" sc="9" el="40" ec="10">Api\Internal\Auth\WebFormsAuthMessageHandler.cs</location>
            <body hash="ffcc12242fd3809a47b1d4c6be220960"><![CDATA[{
            return response;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="DotNetNuke.Web.Common">
    <class name="SharedConstants">
      <declaration><![CDATA[public static class SharedConstants]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".cctor">
          <declaration><![CDATA[static SharedConstants()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="27" sc="9" el="36" ec="10">Common\SharedConstants.cs</location>
            <body hash="7c115162f6ba594b6b2e038163eb0fc2"><![CDATA[public static readonly string RootFolder = null;
        public static readonly string HostRootFolder = null;
        public static readonly string Unspecified = null;

        static SharedConstants()
        {
            RootFolder = Localization.GetString("RootFolder.Name", Localization.SharedResourceFile);
            HostRootFolder = Localization.GetString("HostRootFolder.Name", Localization.SharedResourceFile);
            Unspecified = "<" + Localization.GetString("None_Specified", Localization.SharedResourceFile) + ">";
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
        <field name="HostRootFolder">
          <declaration><![CDATA[public static readonly string HostRootFolder;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="RootFolder">
          <declaration><![CDATA[public static readonly string RootFolder;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Unspecified">
          <declaration><![CDATA[public static readonly string Unspecified;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="DotNetNuke.Web.Common.Internal">
    <class name="DotNetNukeHttpApplication">
      <declaration><![CDATA[public class DotNetNukeHttpApplication : System.Web.HttpApplication]]></declaration>
      <documentation>
        <summary>
 DotNetNuke Http Application. It will handle Start, End, BeginRequest, Error event for whole application.
 </summary>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DotNetNukeHttpApplication()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
        <constructor name=".cctor">
          <declaration><![CDATA[static DotNetNukeHttpApplication()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="60" sc="6" el="164" ec="15">Common\DotNetNukeHttpApplication.cs</location>
            <body hash="e25fbc45eeb34aced9b7c2ef54ebe40b"><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof (DotNetNukeHttpApplication));

        void Application_Error(object sender, EventArgs eventArgs)
        {
            // Code that runs when an unhandled error occurs
            if (HttpContext.Current != null)
            {
                // Get the exception object.
                Logger.Trace("Dumping all Application Errors");
                foreach (Exception exc in HttpContext.Current.AllErrors) Logger.Fatal(exc);
                Logger.Trace("End Dumping all Application Errors");
            }
        }

        private void Application_Start(object sender, EventArgs eventArgs)
        {
            Logger.InfoFormat("Application Starting ({0})", Globals.ElapsedSinceAppStart); // just to start the timer

            var name = Config.GetSetting("ServerName");
            Globals.ServerName = String.IsNullOrEmpty(name) ? Dns.GetHostName() : name;

            ComponentFactory.Container = new SimpleContainer();

            ComponentFactory.InstallComponents(new ProviderInstaller("data", typeof(DataProvider), typeof(SqlDataProvider)));
            ComponentFactory.InstallComponents(new ProviderInstaller("caching", typeof(CachingProvider), typeof(FBCachingProvider)));
            ComponentFactory.InstallComponents(new ProviderInstaller("logging", typeof(LoggingProvider), typeof(DBLoggingProvider)));
            ComponentFactory.InstallComponents(new ProviderInstaller("scheduling", typeof(SchedulingProvider), typeof(DNNScheduler)));
            ComponentFactory.InstallComponents(new ProviderInstaller("searchIndex", typeof(IndexingProvider), typeof(ModuleIndexer)));
            #pragma warning disable 0618
            ComponentFactory.InstallComponents(new ProviderInstaller("searchDataStore", typeof(SearchDataStoreProvider), typeof(SearchDataStore)));
            #pragma warning restore 0618
            ComponentFactory.InstallComponents(new ProviderInstaller("members", typeof(MembershipProvider), typeof(AspNetMembershipProvider)));
            ComponentFactory.InstallComponents(new ProviderInstaller("roles", typeof(RoleProvider), typeof(DNNRoleProvider)));
            ComponentFactory.InstallComponents(new ProviderInstaller("profiles", typeof(ProfileProvider), typeof(DNNProfileProvider)));
            ComponentFactory.InstallComponents(new ProviderInstaller("permissions", typeof(PermissionProvider), typeof(CorePermissionProvider)));
            ComponentFactory.InstallComponents(new ProviderInstaller("outputCaching", typeof(OutputCachingProvider)));
            ComponentFactory.InstallComponents(new ProviderInstaller("moduleCaching", typeof(ModuleCachingProvider)));
            ComponentFactory.InstallComponents(new ProviderInstaller("sitemap", typeof(SitemapProvider), typeof(CoreSitemapProvider)));

            ComponentFactory.InstallComponents(new ProviderInstaller("friendlyUrl", typeof(FriendlyUrlProvider)));
            ComponentFactory.InstallComponents(new ProviderInstaller("folder", typeof(FolderProvider)));
            RegisterIfNotAlreadyRegistered<FolderProvider, StandardFolderProvider>("StandardFolderProvider");
            RegisterIfNotAlreadyRegistered<FolderProvider, SecureFolderProvider>("SecureFolderProvider");
            RegisterIfNotAlreadyRegistered<FolderProvider, DatabaseFolderProvider>("DatabaseFolderProvider");
            RegisterIfNotAlreadyRegistered<PermissionProvider>();
            ComponentFactory.InstallComponents(new ProviderInstaller("htmlEditor", typeof(HtmlEditorProvider), ComponentLifeStyleType.Transient));
            ComponentFactory.InstallComponents(new ProviderInstaller("navigationControl", typeof(NavigationProvider), ComponentLifeStyleType.Transient));
            ComponentFactory.InstallComponents(new ProviderInstaller("clientcapability", typeof(ClientCapabilityProvider)));
            ComponentFactory.InstallComponents(new ProviderInstaller("cryptography", typeof(CryptographyProvider),typeof(CoreCryptographyProvider)));

            Logger.InfoFormat("Application Started ({0})", Globals.ElapsedSinceAppStart); // just to start the timer
        }
        
        private static void RegisterIfNotAlreadyRegistered<TConcrete>() where TConcrete : class, new()
        {
            RegisterIfNotAlreadyRegistered<TConcrete, TConcrete>("");
        }

        private static void RegisterIfNotAlreadyRegistered<TAbstract, TConcrete>(string name)
            where TAbstract : class
            where TConcrete : class, new()
        {
            var provider = ComponentFactory.GetComponent<TAbstract>();
            if (provider == null)
            {
                if (String.IsNullOrEmpty(name))
                {
                    ComponentFactory.RegisterComponentInstance<TAbstract>(new TConcrete());
                }
                else
                {
                    ComponentFactory.RegisterComponentInstance<TAbstract>(name, new TConcrete());
                }
            }
        }

        private void Application_End(object sender, EventArgs eventArgs)
        {
            Logger.Info("Application Ending");
            Initialize.LogEnd();
            Initialize.StopScheduler();

            //Shutdown Lucene, but not when we are installing
            if (Globals.Status != Globals.UpgradeStatus.Install)
            {
                Logger.Trace("Disposing Lucene");
                var lucene = LuceneController.Instance as IDisposable;
                if (lucene != null) lucene.Dispose();
            }
            Logger.Trace("Dumping all Application Errors");
            if (HttpContext.Current != null)
            {
                if (HttpContext.Current.AllErrors != null)
                {
                    foreach (Exception exc in HttpContext.Current.AllErrors) Logger.Fatal(exc);
                }
            }
            Logger.Trace("End Dumping all Application Errors");
            Logger.Info("Application Ended");
        }

        private static readonly string[] Endings =
            {
                ".css", ".gif", ".jpeg", ".jpg", ".js", ".png", "scriptresource.axd", "webresource.axd"
            };]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="Application_BeginRequest">
          <declaration><![CDATA[private void Application_BeginRequest(object sender, System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="167" sc="9" el="177" ec="10">Common\DotNetNukeHttpApplication.cs</location>
            <body hash="159c7a4c5141cf2c7564ca1087fc6f44"><![CDATA[{
            var app = (HttpApplication)sender;
            var requestUrl = app.Request.Url.LocalPath.ToLower();
            if (!requestUrl.EndsWith(".aspx") && !requestUrl.EndsWith("/") &&  Endings.Any(requestUrl.EndsWith))
            {
                return;
            }

            Initialize.Init(app);
            Initialize.RunSchedule(app.Request);
        }]]></body>
          </codeblock>
        </method>
        <method name="Application_End">
          <declaration><![CDATA[private void Application_End(object sender, System.EventArgs eventArgs)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="137" sc="9" el="159" ec="10">Common\DotNetNukeHttpApplication.cs</location>
            <body hash="2299af440fb295f90af943bcc841653e"><![CDATA[{
            Logger.Info("Application Ending");
            Initialize.LogEnd();
            Initialize.StopScheduler();

            //Shutdown Lucene, but not when we are installing
            if (Globals.Status != Globals.UpgradeStatus.Install)
            {
                Logger.Trace("Disposing Lucene");
                var lucene = LuceneController.Instance as IDisposable;
                if (lucene != null) lucene.Dispose();
            }
            Logger.Trace("Dumping all Application Errors");
            if (HttpContext.Current != null)
            {
                if (HttpContext.Current.AllErrors != null)
                {
                    foreach (Exception exc in HttpContext.Current.AllErrors) Logger.Fatal(exc);
                }
            }
            Logger.Trace("End Dumping all Application Errors");
            Logger.Info("Application Ended");
        }]]></body>
          </codeblock>
        </method>
        <method name="Application_Error">
          <declaration><![CDATA[private void Application_Error(object sender, System.EventArgs eventArgs)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="63" sc="9" el="72" ec="10">Common\DotNetNukeHttpApplication.cs</location>
            <body hash="78f5a11bee5082f6ab3e243ce1b5fbb1"><![CDATA[{
            // Code that runs when an unhandled error occurs
            if (HttpContext.Current != null)
            {
                // Get the exception object.
                Logger.Trace("Dumping all Application Errors");
                foreach (Exception exc in HttpContext.Current.AllErrors) Logger.Fatal(exc);
                Logger.Trace("End Dumping all Application Errors");
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="Application_Start">
          <declaration><![CDATA[private void Application_Start(object sender, System.EventArgs eventArgs)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="75" sc="9" el="111" ec="10">Common\DotNetNukeHttpApplication.cs</location>
            <body hash="6c3fc21bcdeade5a00bd83e2127473fd"><![CDATA[{
            Logger.InfoFormat("Application Starting ({0})", Globals.ElapsedSinceAppStart); // just to start the timer

            var name = Config.GetSetting("ServerName");
            Globals.ServerName = String.IsNullOrEmpty(name) ? Dns.GetHostName() : name;

            ComponentFactory.Container = new SimpleContainer();

            ComponentFactory.InstallComponents(new ProviderInstaller("data", typeof(DataProvider), typeof(SqlDataProvider)));
            ComponentFactory.InstallComponents(new ProviderInstaller("caching", typeof(CachingProvider), typeof(FBCachingProvider)));
            ComponentFactory.InstallComponents(new ProviderInstaller("logging", typeof(LoggingProvider), typeof(DBLoggingProvider)));
            ComponentFactory.InstallComponents(new ProviderInstaller("scheduling", typeof(SchedulingProvider), typeof(DNNScheduler)));
            ComponentFactory.InstallComponents(new ProviderInstaller("searchIndex", typeof(IndexingProvider), typeof(ModuleIndexer)));
            #pragma warning disable 0618
            ComponentFactory.InstallComponents(new ProviderInstaller("searchDataStore", typeof(SearchDataStoreProvider), typeof(SearchDataStore)));
            #pragma warning restore 0618
            ComponentFactory.InstallComponents(new ProviderInstaller("members", typeof(MembershipProvider), typeof(AspNetMembershipProvider)));
            ComponentFactory.InstallComponents(new ProviderInstaller("roles", typeof(RoleProvider), typeof(DNNRoleProvider)));
            ComponentFactory.InstallComponents(new ProviderInstaller("profiles", typeof(ProfileProvider), typeof(DNNProfileProvider)));
            ComponentFactory.InstallComponents(new ProviderInstaller("permissions", typeof(PermissionProvider), typeof(CorePermissionProvider)));
            ComponentFactory.InstallComponents(new ProviderInstaller("outputCaching", typeof(OutputCachingProvider)));
            ComponentFactory.InstallComponents(new ProviderInstaller("moduleCaching", typeof(ModuleCachingProvider)));
            ComponentFactory.InstallComponents(new ProviderInstaller("sitemap", typeof(SitemapProvider), typeof(CoreSitemapProvider)));

            ComponentFactory.InstallComponents(new ProviderInstaller("friendlyUrl", typeof(FriendlyUrlProvider)));
            ComponentFactory.InstallComponents(new ProviderInstaller("folder", typeof(FolderProvider)));
            RegisterIfNotAlreadyRegistered<FolderProvider, StandardFolderProvider>("StandardFolderProvider");
            RegisterIfNotAlreadyRegistered<FolderProvider, SecureFolderProvider>("SecureFolderProvider");
            RegisterIfNotAlreadyRegistered<FolderProvider, DatabaseFolderProvider>("DatabaseFolderProvider");
            RegisterIfNotAlreadyRegistered<PermissionProvider>();
            ComponentFactory.InstallComponents(new ProviderInstaller("htmlEditor", typeof(HtmlEditorProvider), ComponentLifeStyleType.Transient));
            ComponentFactory.InstallComponents(new ProviderInstaller("navigationControl", typeof(NavigationProvider), ComponentLifeStyleType.Transient));
            ComponentFactory.InstallComponents(new ProviderInstaller("clientcapability", typeof(ClientCapabilityProvider)));
            ComponentFactory.InstallComponents(new ProviderInstaller("cryptography", typeof(CryptographyProvider),typeof(CoreCryptographyProvider)));

            Logger.InfoFormat("Application Started ({0})", Globals.ElapsedSinceAppStart); // just to start the timer
        }]]></body>
          </codeblock>
        </method>
        <method name="RegisterIfNotAlreadyRegistered">
          <declaration><![CDATA[private static void RegisterIfNotAlreadyRegistered<TConcrete>() where TConcrete : class, new()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="114" sc="9" el="116" ec="10">Common\DotNetNukeHttpApplication.cs</location>
            <body hash="7d92a4bcffdc71038281ace12948beb6"><![CDATA[{
            RegisterIfNotAlreadyRegistered<TConcrete, TConcrete>("");
        }]]></body>
          </codeblock>
        </method>
        <method name="RegisterIfNotAlreadyRegistered">
          <declaration><![CDATA[private static void RegisterIfNotAlreadyRegistered<TAbstract, TConcrete>(string name) where TAbstract : class where TConcrete : class, new()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="121" sc="9" el="134" ec="10">Common\DotNetNukeHttpApplication.cs</location>
            <body hash="451398868aab0b7cafc94c820fe5f2cb"><![CDATA[{
            var provider = ComponentFactory.GetComponent<TAbstract>();
            if (provider == null)
            {
                if (String.IsNullOrEmpty(name))
                {
                    ComponentFactory.RegisterComponentInstance<TAbstract>(new TConcrete());
                }
                else
                {
                    ComponentFactory.RegisterComponentInstance<TAbstract>(name, new TConcrete());
                }
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="Endings">
          <declaration><![CDATA[private static readonly string[] Endings = new string[]]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Logger">
          <declaration><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof(DotNetNukeHttpApplication));]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="DotNetNuke.Web.Components">
    <class name="LocalizationHelper">
      <declaration><![CDATA[public class LocalizationHelper]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public LocalizationHelper()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="GetControlBarString">
          <declaration><![CDATA[public static string GetControlBarString(string key)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="32" sc="9" el="34" ec="10">Components\LocalizationHelper.cs</location>
            <body hash="169ed4071b601b517a93f2777abe6bf2"><![CDATA[{
            return Localization.GetString(key, ResourceFile);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="ResourceFile">
          <declaration><![CDATA[private const string ResourceFile = "admin/ControlPanel/App_LocalResources/ControlBar";]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="DotNetNuke.Web.Components.Controllers">
    <class name="ControlBarController">
      <declaration><![CDATA[public class ControlBarController : ServiceLocator<IControlBarController, ControlBarController>, IControlBarController]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public ControlBarController()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="45" sc="9" el="48" ec="10">Components\Controllers\ControlBarController.cs</location>
            <body hash="a29c3653e91c68a23c8b7335321c90b5"><![CDATA[public ControlBarController()
        {
            mef = new ExtensionPointManager();
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="EnsureBookmarkValue">
          <declaration><![CDATA[private string EnsureBookmarkValue(int portalId, string bookmarkValue)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="156" sc="9" el="160" ec="10">Components\Controllers\ControlBarController.cs</location>
            <body hash="6090fb461ac1fe737f7ad0572a634606"><![CDATA[{
            var bookmarkCategoryModules = GetCategoryDesktopModules(portalId, GetBookmarkCategory(portalId));            
            var ensuredModules = bookmarkValue.Split(',').Where(desktopModuleId => bookmarkCategoryModules.All(m => m.Value.DesktopModuleID.ToString(CultureInfo.InvariantCulture) != desktopModuleId)).ToList();
            return String.Join(",", ensuredModules.Distinct());
        }]]></body>
          </codeblock>
        </method>
        <method name="GetBookmarkCategory">
          <declaration><![CDATA[public string GetBookmarkCategory(int portalId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="87" sc="9" el="95" ec="10">Components\Controllers\ControlBarController.cs</location>
            <body hash="d9d60383b060a0b9141ccb6440166dfc"><![CDATA[{
            var bookmarkCategory = PortalController.GetPortalSetting(BookmarkCategoryProperty, portalId, "");
            if (String.IsNullOrEmpty(bookmarkCategory))
            {
                PortalController.UpdatePortalSetting(portalId, BookmarkCategoryProperty, "Common");
                return "Common";
            }
            return bookmarkCategory;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetBookmarkedDesktopModules">
          <declaration><![CDATA[public System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, PortalDesktopModuleInfo>> GetBookmarkedDesktopModules(int portalId, int userId, string searchTerm = "")]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="62" sc="9" el="69" ec="10">Components\Controllers\ControlBarController.cs</location>
            <body hash="49ff10c26c539423ba814298f68be2cf"><![CDATA[{
            var formattedSearchTerm = String.IsNullOrEmpty(searchTerm) ? string.Empty : searchTerm.ToLower(CultureInfo.InvariantCulture);
            
            IEnumerable<KeyValuePair<string, PortalDesktopModuleInfo>> bookmarkedModules = GetBookmarkedModules(PortalSettings.Current.PortalId, userId)
                .Where(kvp => kvp.Key.ToLower(CultureInfo.InvariantCulture).Contains(formattedSearchTerm));

            return bookmarkedModules;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetBookmarkedModules">
          <declaration><![CDATA[private System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, PortalDesktopModuleInfo>> GetBookmarkedModules(int portalId, int userId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="163" sc="9" el="176" ec="10">Components\Controllers\ControlBarController.cs</location>
            <body hash="3b40947733f029546869471d58b72172"><![CDATA[{
            var personalizationController = new Services.Personalization.PersonalizationController();
            var personalization = personalizationController.LoadProfile(userId, portalId);
            var bookmarkItems = personalization.Profile["ControlBar:"+ BookmarkModulesTitle + portalId];
            if (bookmarkItems == null)
            {
                return new List<KeyValuePair<string, PortalDesktopModuleInfo>>();
            }
            var bookmarkItemsKeys = bookmarkItems.ToString().Split(',').ToList();
            var bookmarkedModules = DesktopModuleController.GetPortalDesktopModules(PortalSettings.Current.PortalId)
                                        .Where(dm => bookmarkItemsKeys.Contains(dm.Value.DesktopModuleID.ToString(CultureInfo.InvariantCulture)));

            return bookmarkedModules;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetCategoryDesktopModules">
          <declaration><![CDATA[public System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, PortalDesktopModuleInfo>> GetCategoryDesktopModules(int portalId, string category, string searchTerm = "")]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="50" sc="9" el="59" ec="10">Components\Controllers\ControlBarController.cs</location>
            <body hash="604a22b08e8ebdea8e21f2dfe3045f2a"><![CDATA[{
            var formattedSearchTerm = String.IsNullOrEmpty(searchTerm) ? string.Empty : searchTerm.ToLower(CultureInfo.InvariantCulture);

            Func<KeyValuePair<string, PortalDesktopModuleInfo>, bool> Filter = category == "All"
                                        ? (Func<KeyValuePair<string, PortalDesktopModuleInfo>, bool>)(kvp => true && kvp.Key.ToLower(CultureInfo.InvariantCulture).Contains(formattedSearchTerm))
                                         : (Func<KeyValuePair<string, PortalDesktopModuleInfo>, bool>)(kvp => kvp.Value.DesktopModule.Category == category && kvp.Key.ToLower(CultureInfo.InvariantCulture).Contains(formattedSearchTerm));

            IEnumerable<KeyValuePair<string, PortalDesktopModuleInfo>> portalModulesList = DesktopModuleController.GetPortalDesktopModules(portalId).Where(Filter);
            return portalModulesList;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetControlBarLogoURL">
          <declaration><![CDATA[public string GetControlBarLogoURL()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="104" sc="9" el="106" ec="10">Components\Controllers\ControlBarController.cs</location>
            <body hash="58e33c202e734447f9869e37142c50f7"><![CDATA[{
            return HostController.Instance.GetString("ControlBarLogoURL", "~/admin/controlpanel/controlbarimages/dnnLogo.png");
        }]]></body>
          </codeblock>
        </method>
        <method name="GetCustomMenuItems">
          <declaration><![CDATA[public System.Collections.Generic.IEnumerable<MenuItemViewModel> GetCustomMenuItems()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="109" sc="9" el="112" ec="10">Components\Controllers\ControlBarController.cs</location>
            <body hash="3296054dd9d10f05d06732f998716b3c"><![CDATA[{
            var menuItemsExtensionPoints = mef.GetUserControlExtensionPoints("ControlBar", "CustomMenuItems");
            return menuItemsExtensionPoints.Select(GetMenuItemFromExtensionPoint);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetDefaultUpgradeIndicator">
          <declaration><![CDATA[private UpgradeIndicatorViewModel GetDefaultUpgradeIndicator(string imageUrl)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="115" sc="9" el="129" ec="10">Components\Controllers\ControlBarController.cs</location>
            <body hash="afb65a05b0ef974b1cfeacb49a92ee4f"><![CDATA[{
            var alt = LocalizationHelper.GetControlBarString("Upgrade.Text");
            var toolTip = LocalizationHelper.GetControlBarString("Upgrade.ToolTip");
            var navigateUrl = Upgrade.UpgradeRedirect();

            return new UpgradeIndicatorViewModel
            {
                ID = "ServiceImg",
                ImageUrl = imageUrl,
                WebAction = "location.href='" + navigateUrl + "'; return false;",
                AltText = alt,
                ToolTip = toolTip,
                CssClass = ""
            };            
        }]]></body>
          </codeblock>
        </method>
        <method name="GetFactory">
          <declaration><![CDATA[protected override Func<IControlBarController> GetFactory()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="179" sc="9" el="181" ec="10">Components\Controllers\ControlBarController.cs</location>
            <body hash="7f1f649f0ece96e47047f1dc2b1eec29"><![CDATA[{
            return () => new ControlBarController();
        }]]></body>
          </codeblock>
        </method>
        <method name="GetMenuItemFromExtensionPoint">
          <declaration><![CDATA[private MenuItemViewModel GetMenuItemFromExtensionPoint(IUserControlExtensionPoint userControlExtensionPoint)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="132" sc="9" el="140" ec="10">Components\Controllers\ControlBarController.cs</location>
            <body hash="bdee99005b4a75ec2396d5a80fa3417b"><![CDATA[{
            return new MenuItemViewModel
            {
                ID = Path.GetFileNameWithoutExtension(userControlExtensionPoint.UserControlSrc),
                Text = userControlExtensionPoint.Text,
                Source = userControlExtensionPoint.UserControlSrc,
                Order = userControlExtensionPoint.Order
            };
        }]]></body>
          </codeblock>
        </method>
        <method name="GetUpgradeIndicator">
          <declaration><![CDATA[public UpgradeIndicatorViewModel GetUpgradeIndicator(System.Version version, bool isLocal, bool isSecureConnection)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="98" sc="9" el="101" ec="10">Components\Controllers\ControlBarController.cs</location>
            <body hash="9b380c624f70301b0f28ee88ea3a643d"><![CDATA[{
            var imageUrl = Upgrade.UpgradeIndicator(version, isLocal, isSecureConnection);
            return !String.IsNullOrEmpty(imageUrl) ? GetDefaultUpgradeIndicator(imageUrl) : null;            
        }]]></body>
          </codeblock>
        </method>
        <method name="GetUpgradeIndicatorFromExtensionPoint">
          <declaration><![CDATA[private UpgradeIndicatorViewModel GetUpgradeIndicatorFromExtensionPoint(IToolBarButtonExtensionPoint upgradeIndicatorExtensionPoint, string imageUrl)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="143" sc="9" el="153" ec="10">Components\Controllers\ControlBarController.cs</location>
            <body hash="044d9d871fc7901cd5289fb8061cc514"><![CDATA[{
            return new UpgradeIndicatorViewModel
            {
                ID = upgradeIndicatorExtensionPoint.ButtonId,
                ImageUrl = imageUrl,
                WebAction = upgradeIndicatorExtensionPoint.Action,
                AltText = upgradeIndicatorExtensionPoint.AltText,
                ToolTip = upgradeIndicatorExtensionPoint.Text,
                CssClass = upgradeIndicatorExtensionPoint.CssClass
            };
        }]]></body>
          </codeblock>
        </method>
        <method name="SaveBookMark">
          <declaration><![CDATA[public void SaveBookMark(int portalId, int userId, string bookmarkTitle, string bookmarkValue)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="72" sc="9" el="84" ec="10">Components\Controllers\ControlBarController.cs</location>
            <body hash="5d5b4d7ecb659fdf80cf61ab043bf138"><![CDATA[{
            var ensuredBookmarkValue = bookmarkValue;
            if (bookmarkTitle == BookmarkModulesTitle)
            {
                ensuredBookmarkValue = EnsureBookmarkValue(portalId, ensuredBookmarkValue);
            }
            
            var personalizationController = new DotNetNuke.Services.Personalization.PersonalizationController();
            var personalization = personalizationController.LoadProfile(userId, portalId);
            personalization.Profile["ControlBar:" + bookmarkTitle + portalId] = ensuredBookmarkValue;
            personalization.IsModified = true;
            personalizationController.SaveProfile(personalization);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="BookmarkCategoryProperty">
          <declaration><![CDATA[private const string BookmarkCategoryProperty = "ControlBar_BookmarkCategory";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="BookmarkModulesTitle">
          <declaration><![CDATA[private const string BookmarkModulesTitle = "module";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="mef">
          <declaration><![CDATA[private readonly ExtensionPointManager mef;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="IControlBarController">
      <declaration><![CDATA[public interface IControlBarController]]></declaration>
      <documentation>
      </documentation>
      <constructors>
      </constructors>
      <methods>
        <method name="GetBookmarkCategory">
          <declaration><![CDATA[string GetBookmarkCategory(int portalId);]]></declaration>
          <documentation>
            <summary>
 Get the category name where the bookmarked modules are shown
 </summary>
 <param name="portalId">Portal Id where modules are installed</param>
 <returns>The name of the bookmark category</returns></documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="GetBookmarkedDesktopModules">
          <declaration><![CDATA[System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, PortalDesktopModuleInfo>> GetBookmarkedDesktopModules(int portalId, int userId, string searchTerm = "");]]></declaration>
          <documentation>
            <summary>
 Get all desktop modules bookmark by user in Control Bar
 </summary>
 <param name="portalId">Portal Id where modules are installed</param>
 <param name="userId">User Id who has bookmarked the modules</param>
 <param name="searchTerm">Search term to filter modules</param>
 <returns>A list with all matched modules</returns></documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="GetCategoryDesktopModules">
          <declaration><![CDATA[System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, PortalDesktopModuleInfo>> GetCategoryDesktopModules(int portalId, string category, string searchTerm = "");]]></declaration>
          <documentation>
            <summary>
 Get all desktop modules that belong to a category
 </summary>
 <param name="portalId">Portal Id where modules are installed</param>
 <param name="category">Catenory name</param>
 <param name="searchTerm">Search term to filter modules</param>
 <returns>A list with all matched desktop modules</returns></documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="GetControlBarLogoURL">
          <declaration><![CDATA[string GetControlBarLogoURL();]]></declaration>
          <documentation>
            <summary>
 Get the current Logo URL shown in Control Bar
 </summary>
 <returns>The URL of the Control Bar Logo</returns></documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="GetCustomMenuItems">
          <declaration><![CDATA[System.Collections.Generic.IEnumerable<MenuItemViewModel> GetCustomMenuItems();]]></declaration>
          <documentation>
            <summary>
 Gets all custom Menu item available in the system
 </summary>
 <returns>All custom Menu Items</returns></documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="GetUpgradeIndicator">
          <declaration><![CDATA[UpgradeIndicatorViewModel GetUpgradeIndicator(System.Version version, bool isLocal, bool isSecureConnection);]]></declaration>
          <documentation>
            <summary>
 Returns the upgrade indicator model
 </summary>
 <param name="version"></param>
 <param name="isLocal"></param>
 <param name="isSecureConnection"></param>
 <returns>An instance of the view model UpgradeIndicator</returns></documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="SaveBookMark">
          <declaration><![CDATA[void SaveBookMark(int portalId, int userId, string bookarkTitle, string bookmarkValue);]]></declaration>
          <documentation>
            <summary>
 Save a user bookmark
 </summary>
 <param name="portalId">Portal Id where save the bookmark</param>
 <param name="userId">User Id who is going to create the bookmark</param>
 <param name="bookarkTitle">Title for the personalization setting</param>
 <param name="bookmarkValue">Value for the personalization setting</param></documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="DotNetNuke.Web.Components.Controllers.Models">
    <class name="MenuItemViewModel">
      <declaration><![CDATA[public class MenuItemViewModel]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public MenuItemViewModel()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="ID">
          <declaration><![CDATA[public string ID]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Order">
          <declaration><![CDATA[public int Order]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Source">
          <declaration><![CDATA[public string Source]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Text">
          <declaration><![CDATA[public string Text]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="UpgradeIndicatorViewModel">
      <declaration><![CDATA[public class UpgradeIndicatorViewModel]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public UpgradeIndicatorViewModel()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="AltText">
          <declaration><![CDATA[public string AltText]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="CssClass">
          <declaration><![CDATA[public string CssClass]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ID">
          <declaration><![CDATA[public string ID]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ImageUrl">
          <declaration><![CDATA[public string ImageUrl]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ToolTip">
          <declaration><![CDATA[public string ToolTip]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="WebAction">
          <declaration><![CDATA[public string WebAction]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="DotNetNuke.Web.InternalServices">
    <class name="ContentWorkflowServiceController">
      <declaration><![CDATA[public class ContentWorkflowServiceController : DnnApiController]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public ContentWorkflowServiceController()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
        <constructor name=".cctor">
          <declaration><![CDATA[static ContentWorkflowServiceController()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="43" sc="9" el="43" ec="121">InternalServices\ContentWorkflowServiceController.cs</location>
            <body hash="7a02ebe0fa5a68c7ab063af14ea54a11"><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof(ContentWorkflowServiceController))]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="Review">
          <declaration><![CDATA[public HttpResponseMessage Review(ContentWorkflowServiceController.NotificationDTO postData)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="53" sc="9" el="100" ec="10">InternalServices\ContentWorkflowServiceController.cs</location>
            <body hash="39030b42fb4237f9decb446488172729"><![CDATA[{
            try
            {
                var notification = NotificationsController.Instance.GetNotification(postData.NotificationId);

                if (notification != null)
                {
                    //Dismiss the notification
                    NotificationsController.Instance.DeleteNotificationRecipient(postData.NotificationId, UserInfo.UserID);

                    if (string.IsNullOrEmpty(notification.Context))
                    {
                        return Request.CreateResponse(HttpStatusCode.OK, new { Result = "success"});
                    }

                    var source = notification.Context;
                    string[] parameters = null;
                    if (notification.Context.Contains(";"))
                    {
                        parameters = notification.Context.Split(';');
                        source = parameters[0];
                        parameters = parameters.ToList().Skip(1).ToArray();
                    }

                    var workflow = ContentWorkflowController.Instance.GetDefaultWorkflow(PortalSettings.PortalId);
                    var workflowSource = ContentWorkflowController.Instance.GetWorkflowSource(workflow.WorkflowID, source);
                    if (workflowSource == null)
                    {
                        return Request.CreateResponse(HttpStatusCode.OK, new { Result = "success" });
                    }

                    var sourceAction = Reflection.CreateInstance(Reflection.CreateType(workflowSource.SourceType)) as IContentWorkflowAction;
                    if (sourceAction == null)
                    {
                        return Request.CreateResponse(HttpStatusCode.OK, new { Result = "success" });
                    }

                    return Request.CreateResponse(HttpStatusCode.OK, new { Result = "success", Link = sourceAction.GetAction(parameters) }); 
                }
            }
            catch (Exception exc)
            {
                Logger.Error(exc);
            }

            return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, "unable to process notification");

        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="Logger">
          <declaration><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof(ContentWorkflowServiceController));]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="ControlBarController">
      <declaration><![CDATA[public class ControlBarController : DnnApiController]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public ControlBarController()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="59" sc="9" el="62" ec="10">InternalServices\ControlBarController.cs</location>
            <body hash="93eba6cf1b8e36fa5cdfb888b14e62da"><![CDATA[public ControlBarController()
        {
            Controller = Components.Controllers.ControlBarController.Instance;
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".cctor">
          <declaration><![CDATA[static ControlBarController()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="54" sc="6" el="54" ec="107">InternalServices\ControlBarController.cs</location>
            <body hash="71ac3f3320d9943e8b42bf77ff5f44c9"><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof (ControlBarController))]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="ActiveTabHasChildren">
          <declaration><![CDATA[private bool ActiveTabHasChildren()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="542" sc="9" el="551" ec="10">InternalServices\ControlBarController.cs</location>
            <body hash="62e6f6fffe758536e47b804deccbc55d"><![CDATA[{
            var children = TabController.GetTabsByParent(PortalSettings.ActiveTab.TabID, PortalSettings.ActiveTab.PortalID);

            if (((children == null) || children.Count < 1))
            {
                return false;
            }

            return true;
        }]]></body>
          </codeblock>
        </method>
        <method name="AddModule">
          <declaration><![CDATA[public HttpResponseMessage AddModule(ControlBarController.AddModuleDTO dto)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="233" sc="9" el="327" ec="10">InternalServices\ControlBarController.cs</location>
            <body hash="968d4b483ca7d35b226f4c4a6fd4abcb"><![CDATA[{
            if (TabPermissionController.CanAddContentToPage() && CanAddModuleToPage())
            {
                int permissionType;
                try
                {
                    permissionType = int.Parse(dto.Visibility);
                }
                catch (Exception exc)
                {
                    Logger.Error(exc);
                    permissionType = 0;
                }

                int positionID = -1;
                if (!string.IsNullOrEmpty(dto.Sort))
                {
                    int sortID = 0;
                    try
                    {
                        sortID = int.Parse(dto.Sort);
                        if(sortID >= 0)
                            positionID = GetPaneModuleOrder(dto.Pane, sortID);
                    }
                    catch(Exception exc)
                    {
                        Logger.Error(exc);
                    }
                }
                
                if(positionID == -1)
                {
                    switch (dto.Position)
                    {
                        case "TOP":
						case "0":
                            positionID = 0;
                            break;
                        case "BOTTOM":
						case "-1":
                            positionID = -1;
                            break;
                    }
                }

                int moduleLstID;
                try
                {
                    moduleLstID = int.Parse(dto.Module);
                }
                catch (Exception exc)
                {
                    Logger.Error(exc);
                    moduleLstID = -1;
                }

                try
                {
                    int tabModuleId = -1;
                    if ((moduleLstID > -1))
                    {
                        
                        if ((dto.AddExistingModule == "true"))
                        {
                            int pageID;
                            try
                            {
                                pageID = int.Parse(dto.Page);
                            }
                            catch (Exception exc)
                            {
                                Logger.Error(exc);
                                pageID = -1;
                            }

                            if ((pageID > -1))
                            {
                                tabModuleId = DoAddExistingModule(moduleLstID, pageID, dto.Pane, positionID, "", dto.CopyModule == "true");
                            }
                        }
                        else
                        {
                            tabModuleId = DoAddNewModule("", moduleLstID, dto.Pane, positionID, permissionType, "");
                        }
                    }

                    return Request.CreateResponse(HttpStatusCode.OK, new { TabModuleID = tabModuleId});
                }
                catch
                {
                }                
            }

            return Request.CreateResponse(HttpStatusCode.InternalServerError);
        }]]></body>
          </codeblock>
        </method>
        <method name="AddModulePermission">
          <declaration><![CDATA[private ModulePermissionInfo AddModulePermission(ModuleInfo objModule, PermissionInfo permission, int roleId, int userId, bool allowAccess)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="646" sc="9" el="664" ec="10">InternalServices\ControlBarController.cs</location>
            <body hash="e1171324da0c06fa7b84494bd4fcd1da"><![CDATA[{
            var objModulePermission = new ModulePermissionInfo
            {
                ModuleID = objModule.ModuleID,
                PermissionID = permission.PermissionID,
                RoleID = roleId,
                UserID = userId,
                PermissionKey = permission.PermissionKey,
                AllowAccess = allowAccess
            };

            // add the permission to the collection
            if (!objModule.ModulePermissions.Contains(objModulePermission))
            {
                objModule.ModulePermissions.Add(objModulePermission);
            }

            return objModulePermission;
        }]]></body>
          </codeblock>
        </method>
        <method name="CanAddModuleToPage">
          <declaration><![CDATA[public bool CanAddModuleToPage()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="535" sc="9" el="539" ec="10">InternalServices\ControlBarController.cs</location>
            <body hash="7f67f189aa45b0f88f6d2111a080fc6b"><![CDATA[{
            return true;
            //If we are not in an edit page
            //return (string.IsNullOrEmpty(HttpContext.Current.Request.QueryString["mid"])) && (string.IsNullOrEmpty(HttpContext.Current.Request.QueryString["ctl"]));
        }]]></body>
          </codeblock>
        </method>
        <method name="ClearHostCache">
          <declaration><![CDATA[public HttpResponseMessage ClearHostCache()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="333" sc="9" el="342" ec="10">InternalServices\ControlBarController.cs</location>
            <body hash="30dc43468e60adc2bfc40f92f1d8c7b7"><![CDATA[{
            if (UserController.Instance.GetCurrentUserInfo().IsSuperUser)           
            {
                DataCache.ClearCache();
				ClientResourceManager.ClearCache();
                return Request.CreateResponse(HttpStatusCode.OK);
            }

            return Request.CreateResponse(HttpStatusCode.InternalServerError);
        }]]></body>
          </codeblock>
        </method>
        <method name="CopyPermissionsToChildren">
          <declaration><![CDATA[public HttpResponseMessage CopyPermissionsToChildren()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="218" sc="9" el="227" ec="10">InternalServices\ControlBarController.cs</location>
            <body hash="cc4f28ecf87e48e3422b259420833194"><![CDATA[{
            if(TabPermissionController.CanManagePage() && UserController.Instance.GetCurrentUserInfo().IsInRole("Administrators")
                && ActiveTabHasChildren() && !PortalSettings.ActiveTab.IsSuperTab)
            {
                TabController.CopyPermissionsToChildren(PortalSettings.ActiveTab, PortalSettings.ActiveTab.TabPermissions);
                return Request.CreateResponse(HttpStatusCode.OK);
            }

            return Request.CreateResponse(HttpStatusCode.InternalServerError);
        }]]></body>
          </codeblock>
        </method>
        <method name="DoAddExistingModule">
          <declaration><![CDATA[private int DoAddExistingModule(int moduleId, int tabId, string paneName, int position, string align, bool cloneModule)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="554" sc="9" el="643" ec="10">InternalServices\ControlBarController.cs</location>
            <body hash="9ba4f74541cd48247482f0d73e1291f3"><![CDATA[{
            ModuleInfo moduleInfo = ModuleController.Instance.GetModule(moduleId, tabId, false);

            int userID = -1;
          
            UserInfo user = UserController.Instance.GetCurrentUserInfo();
            if (user != null)
            {
                userID = user.UserID;
            }
            

            if ((moduleInfo != null))
            {
                // Is this from a site other than our own? (i.e., is the user requesting "module sharing"?)
                var remote = moduleInfo.PortalID != PortalSettings.Current.PortalId;
                if (remote)
                {
                    switch (moduleInfo.DesktopModule.Shareable)
                    {
                        case ModuleSharing.Unsupported:
                            // Should never happen since the module should not be listed in the first place.
                            throw new ApplicationException(string.Format("Module '{0}' does not support Shareable and should not be listed in Add Existing Module from a different source site",
                                                                         moduleInfo.DesktopModule.FriendlyName));
                        case ModuleSharing.Supported:
                            break;
                        case ModuleSharing.Unknown:
                            break;
                    }
                }

                // clone the module object ( to avoid creating an object reference to the data cache )
                ModuleInfo newModule = moduleInfo.Clone();

                newModule.UniqueId = Guid.NewGuid(); // Cloned Module requires a different uniqueID

                newModule.TabID = PortalSettings.Current.ActiveTab.TabID;
                newModule.ModuleOrder = position;
                newModule.PaneName = paneName;
                newModule.Alignment = align;

                if ((cloneModule))
                {
                    newModule.ModuleID = Null.NullInteger;
                    //reset the module id
                    newModule.ModuleID = ModuleController.Instance.AddModule(newModule);

                    if (!string.IsNullOrEmpty(newModule.DesktopModule.BusinessControllerClass))
                    {
                        object objObject = DotNetNuke.Framework.Reflection.CreateObject(newModule.DesktopModule.BusinessControllerClass, newModule.DesktopModule.BusinessControllerClass);
                        if (objObject is IPortable)
                        {
                            string content = Convert.ToString(((IPortable)objObject).ExportModule(moduleId));
                            if (!string.IsNullOrEmpty(content))
                            {
                                ((IPortable)objObject).ImportModule(newModule.ModuleID, content, newModule.DesktopModule.Version, userID);
                            }
                        }
                    }
                }
                else
                {
                    ModuleController.Instance.AddModule(newModule);
                }

                if (remote)
                {
                    //Ensure the Portal Admin has View rights
                    var permissionController = new PermissionController();
                    ArrayList arrSystemModuleViewPermissions = permissionController.GetPermissionByCodeAndKey("SYSTEM_MODULE_DEFINITION", "VIEW");
                    AddModulePermission(newModule,
                                    (PermissionInfo)arrSystemModuleViewPermissions[0],
                                    PortalSettings.Current.AdministratorRoleId,
                                    Null.NullInteger,
                                    true);

                    //Set PortalID correctly
                    newModule.OwnerPortalID = newModule.PortalID;
                    newModule.PortalID = PortalSettings.Current.PortalId;
                    ModulePermissionController.SaveModulePermissions(newModule);
                }

                //Add Event Log
                EventLogController.Instance.AddLog(newModule, PortalSettings.Current, userID, "", EventLogController.EventLogType.MODULE_CREATED);

                return newModule.ModuleID;
            }

            return -1;
        }]]></body>
          </codeblock>
        </method>
        <method name="DoAddNewModule">
          <declaration><![CDATA[private int DoAddNewModule(string title, int desktopModuleId, string paneName, int position, int permissionType, string align)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="709" sc="9" el="776" ec="10">InternalServices\ControlBarController.cs</location>
            <body hash="802bf53036184807c429dbb5797f95b8"><![CDATA[{
            try
            {
                DesktopModuleInfo desktopModule;
                if (!DesktopModuleController.GetDesktopModules(PortalSettings.Current.PortalId).TryGetValue(desktopModuleId, out desktopModule))
                {
                    throw new ArgumentException("desktopModuleId");
                }
            }
            catch (Exception ex)
            {
                Exceptions.LogException(ex);
            }

	        var tabModuleId = Null.NullInteger;
            foreach (ModuleDefinitionInfo objModuleDefinition in
                ModuleDefinitionController.GetModuleDefinitionsByDesktopModuleID(desktopModuleId).Values)
            {
                var objModule = new ModuleInfo();
                objModule.Initialize(PortalSettings.Current.ActiveTab.PortalID);

                objModule.PortalID = PortalSettings.Current.ActiveTab.PortalID;
                objModule.TabID = PortalSettings.Current.ActiveTab.TabID;
                objModule.ModuleOrder = position;
                objModule.ModuleTitle = string.IsNullOrEmpty(title) ? objModuleDefinition.FriendlyName : title;
                objModule.PaneName = paneName;
                objModule.ModuleDefID = objModuleDefinition.ModuleDefID;
                if (objModuleDefinition.DefaultCacheTime > 0)
                {
                    objModule.CacheTime = objModuleDefinition.DefaultCacheTime;
                    if (PortalSettings.Current.DefaultModuleId > Null.NullInteger && PortalSettings.Current.DefaultTabId > Null.NullInteger)
                    {
                        ModuleInfo defaultModule = ModuleController.Instance.GetModule(PortalSettings.Current.DefaultModuleId, PortalSettings.Current.DefaultTabId, true);
                        if ((defaultModule != null))
                        {
                            objModule.CacheTime = defaultModule.CacheTime;
                        }
                    }
                }

                ModuleController.Instance.InitialModulePermission(objModule, objModule.TabID, permissionType);

                if (PortalSettings.Current.ContentLocalizationEnabled)
                {
                    Locale defaultLocale = LocaleController.Instance.GetDefaultLocale(PortalSettings.Current.PortalId);
                    //set the culture of the module to that of the tab
                    var tabInfo = TabController.Instance.GetTab(objModule.TabID, PortalSettings.Current.PortalId, false);
                    objModule.CultureCode = tabInfo != null ? tabInfo.CultureCode : defaultLocale.Code;
                }
                else
                {
                    objModule.CultureCode = Null.NullString;
                }
                objModule.AllTabs = false;
                objModule.Alignment = align;

                ModuleController.Instance.AddModule(objModule);

				if (tabModuleId == Null.NullInteger)
				{
					tabModuleId = objModule.ModuleID;
				}
				//update the position to let later modules with add after previous one.
                position = ModuleController.Instance.GetTabModule(objModule.TabModuleID).ModuleOrder + 1;
            }

			return tabModuleId;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetDeskTopModuleImage">
          <declaration><![CDATA[private string GetDeskTopModuleImage(int moduleId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="502" sc="9" el="514" ec="10">InternalServices\ControlBarController.cs</location>
            <body hash="08f857161934b3077e15b129cc18778a"><![CDATA[{
            var portalDesktopModules = DesktopModuleController.GetDesktopModules(PortalSettings.Current.PortalId);
            var packages = PackageController.Instance.GetExtensionPackages(PortalSettings.Current.PortalId);

            string imageUrl =
                    (from pkgs in packages
                     join portMods in portalDesktopModules on pkgs.PackageID equals portMods.Value.PackageID
                     where portMods.Value.DesktopModuleID == moduleId
                     select pkgs.IconFile).FirstOrDefault();

            imageUrl = String.IsNullOrEmpty(imageUrl) ? Globals.ImagePath + DefaultExtensionImage : imageUrl;
            return System.Web.VirtualPathUtility.ToAbsolute(imageUrl);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetModuleName">
          <declaration><![CDATA[private string GetModuleName(string moduleName)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="779" sc="3" el="788" ec="4">InternalServices\ControlBarController.cs</location>
            <body hash="287531a6bd20c085ca2c586d6c8baea8"><![CDATA[{
			 if (_nameDics == null)
			 {
				 _nameDics = new Dictionary<string, string> {{"SearchCrawlerAdmin", "SearchCrawler Admin"}, 
															 {"SearchCrawlerInput", "SearchCrawler Input"}, 
															 {"SearchCrawlerResults", "SearchCrawler Results"}};
			 }

			return _nameDics.ContainsKey(moduleName) ? _nameDics[moduleName] : moduleName;
		}]]></body>
          </codeblock>
        </method>
        <method name="GetModules">
          <declaration><![CDATA[private System.Collections.Generic.IList<ModuleInfo> GetModules(int tabID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="202" sc="9" el="212" ec="10">InternalServices\ControlBarController.cs</location>
            <body hash="5402ede5c5977f01aafe8893f2b48508"><![CDATA[{
            var isRemote = TabController.Instance.GetTab(tabID, Null.NullInteger, false).PortalID != PortalSettings.Current.PortalId;
            var tabModules = ModuleController.Instance.GetTabModules(tabID);

            var pageModules = isRemote 
                                ? tabModules.Values.Where(m => ModuleSupportsSharing(m)).ToList() 
                                : tabModules.Values.Where(m => ModulePermissionController.CanAdminModule(m) && m.IsDeleted == false).ToList();

            return pageModules;

        }]]></body>
          </codeblock>
        </method>
        <method name="GetPageList">
          <declaration><![CDATA[public HttpResponseMessage GetPageList(string portal)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="136" sc="9" el="175" ec="10">InternalServices\ControlBarController.cs</location>
            <body hash="3e54a132a2c823e02fd98d1e45c13f63"><![CDATA[{
            var portalSettings = GetPortalSettings(portal);

            List<TabInfo> tabList = null;
            if (PortalSettings.PortalId == portalSettings.PortalId)
            {
                tabList = TabController.GetPortalTabs(portalSettings.PortalId, PortalSettings.ActiveTab.TabID, false, string.Empty, true, false, false, false, true);
            }
            else
            {
                var groups = PortalGroupController.Instance.GetPortalGroups().ToArray();

                var mygroup = (from @group in groups
                              select PortalGroupController.Instance.GetPortalsByGroup(@group.PortalGroupId)
                                  into portals
                                  where portals.Any(x => x.PortalID == PortalSettings.Current.PortalId)
                                  select portals.ToArray()).FirstOrDefault();

                if(mygroup != null && mygroup.Any(p=>p.PortalID == portalSettings.PortalId))
                {
                    tabList = TabController.GetPortalTabs(portalSettings.PortalId, Null.NullInteger, false, string.Empty, true, false, false, false, false);
                }
                else
                {
                    // try to get pages not allowed
                    return Request.CreateResponse(HttpStatusCode.InternalServerError);
                }
            }

            List<PageDefDTO> result = new List<PageDefDTO>();
            foreach (var tab in tabList)
            {
                if (tab.PortalID == PortalSettings.PortalId || (GetModules(tab.TabID).Count > 0 && tab.TabID != portalSettings.AdminTabId && tab.ParentId != portalSettings.AdminTabId))
                {
                    result.Add(new PageDefDTO { TabID = tab.TabID, IndentedTabName = tab.IndentedTabName });
                }
            }

            return Request.CreateResponse(HttpStatusCode.OK, result);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPaneModuleOrder">
          <declaration><![CDATA[private int GetPaneModuleOrder(string pane, int sort)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="667" sc="9" el="706" ec="10">InternalServices\ControlBarController.cs</location>
            <body hash="efe109c3a02bd166e89d50bd4870a2ac"><![CDATA[{
            var items = new List<int>();

            foreach (ModuleInfo m in PortalSettings.Current.ActiveTab.Modules)
            {
                //if user is allowed to view module and module is not deleted
                if (ModulePermissionController.CanViewModule(m) && !m.IsDeleted)
                {
                    //modules which are displayed on all tabs should not be displayed on the Admin or Super tabs
                    if (!m.AllTabs || !PortalSettings.Current.ActiveTab.IsSuperTab)
                    {
                        if (string.Equals(m.PaneName, pane, StringComparison.OrdinalIgnoreCase))
                        {
                            int moduleOrder = m.ModuleOrder;

                            while (items.Contains(moduleOrder) || moduleOrder == 0)
                            {
                                moduleOrder++;
                            }

                            items.Add(moduleOrder);
                        }
                    }
                }
            }

            items.Sort();

            if(items.Count > sort)
            {
                var itemOrder = items[sort];
                return itemOrder - 1;
            }
            else if(items.Count > 0)
            {
                return items.Last() + 1;
            }

            return 0;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPortalDesktopModules">
          <declaration><![CDATA[public HttpResponseMessage GetPortalDesktopModules(string category, int loadingStartIndex, int loadingPageSize, string searchTerm)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="109" sc="9" el="131" ec="10">InternalServices\ControlBarController.cs</location>
            <body hash="9f1ec562981cfda43f56e5f6fae65515"><![CDATA[{
            if (string.IsNullOrEmpty(category))
            {
                category = "All";                
            }            
            var bookmarCategory = Controller.GetBookmarkCategory(PortalSettings.Current.PortalId);
            var bookmarkedModules = Controller.GetBookmarkedDesktopModules(PortalSettings.Current.PortalId, UserController.Instance.GetCurrentUserInfo().UserID, searchTerm);
            var bookmarkCategoryModules = Controller.GetCategoryDesktopModules(PortalSettings.PortalId, bookmarCategory, searchTerm);

            var filteredList = bookmarCategory == category ? bookmarkCategoryModules.OrderBy(m => m.Key).Union(bookmarkedModules.OrderBy(m => m.Key)).Distinct() 
                                            : Controller.GetCategoryDesktopModules(PortalSettings.PortalId, category, searchTerm).OrderBy(m => m.Key);

            filteredList = filteredList
                .Skip(loadingStartIndex)
                .Take(loadingPageSize);
            
            var result = filteredList.Select(kvp => new ModuleDefDTO {ModuleID = kvp.Value.DesktopModuleID, 
                                                                    ModuleName = kvp.Key, 
                                                                    ModuleImage = GetDeskTopModuleImage(kvp.Value.DesktopModuleID), 
                                                                    Bookmarked = bookmarkedModules.Any(m => m.Key == kvp.Key), 
                                                                    ExistsInBookmarkCategory = bookmarkCategoryModules.Any(m => m.Key == kvp.Key)}).ToList();
            return Request.CreateResponse(HttpStatusCode.OK, result);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPortalSettings">
          <declaration><![CDATA[private PortalSettings GetPortalSettings(string portal)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="465" sc="9" el="487" ec="10">InternalServices\ControlBarController.cs</location>
            <body hash="39d5643620feab753176a3c4e6685b9e"><![CDATA[{
            var portalSettings = PortalSettings.Current;

            try
            {

                if (!string.IsNullOrEmpty(portal))
                {
                    var selectedPortalId = int.Parse(portal);
                    if (PortalSettings.PortalId != selectedPortalId)
                    {
                        portalSettings = new PortalSettings(selectedPortalId);
                    }
                }

            }
            catch (Exception)
            {
                portalSettings = PortalSettings.Current;
            }

            return portalSettings;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetTabModuleImage">
          <declaration><![CDATA[private string GetTabModuleImage(int tabId, int moduleId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="517" sc="9" el="532" ec="10">InternalServices\ControlBarController.cs</location>
            <body hash="7536d76edad399f89ba6efd946308a96"><![CDATA[{
            var tabModules = ModuleController.Instance.GetTabModules(tabId);
            var portalDesktopModules = DesktopModuleController.GetDesktopModules(PortalSettings.Current.PortalId);
            var moduleDefnitions = ModuleDefinitionController.GetModuleDefinitions();
            var packages = PackageController.Instance.GetExtensionPackages(PortalSettings.Current.PortalId);

            string imageUrl = (from pkgs in packages
                               join portMods in portalDesktopModules on pkgs.PackageID equals portMods.Value.PackageID
                               join modDefs in moduleDefnitions on portMods.Value.DesktopModuleID equals modDefs.Value.DesktopModuleID
                               join tabMods in tabModules on modDefs.Value.DesktopModuleID equals tabMods.Value.DesktopModuleID
                               where tabMods.Value.ModuleID == moduleId
                               select pkgs.IconFile).FirstOrDefault();

            imageUrl = String.IsNullOrEmpty(imageUrl) ? Globals.ImagePath + DefaultExtensionImage : imageUrl; 
            return System.Web.VirtualPathUtility.ToAbsolute(imageUrl);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetTabModules">
          <declaration><![CDATA[public HttpResponseMessage GetTabModules(string tab)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="180" sc="9" el="199" ec="10">InternalServices\ControlBarController.cs</location>
            <body hash="147fc177eb25f5b021f686da42ef54d4"><![CDATA[{
            int tabID;

            if (Int32.TryParse(tab, out tabID))
            {
                var result = new List<ModuleDefDTO>();
                if (tabID > 0)
                {
                    var pageModules = GetModules(tabID);

                    Dictionary<int, string> resultDict = pageModules.ToDictionary(module => module.ModuleID, module => module.ModuleTitle);
                    result.AddRange(from kvp in resultDict let imageUrl = GetTabModuleImage(tabID, kvp.Key) 
                                    select new ModuleDefDTO {ModuleID = kvp.Key, ModuleName = kvp.Value, ModuleImage = imageUrl}
                                    );
                }
                return Request.CreateResponse(HttpStatusCode.OK, result);
            }

            return Request.CreateResponse(HttpStatusCode.InternalServerError);
        }]]></body>
          </codeblock>
        </method>
        <method name="ModuleSupportsSharing">
          <declaration><![CDATA[private bool ModuleSupportsSharing(ModuleInfo moduleInfo)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="490" sc="9" el="499" ec="10">InternalServices\ControlBarController.cs</location>
            <body hash="5ad12648c83b456ca5a9e23c87f8a8c9"><![CDATA[{
            switch (moduleInfo.DesktopModule.Shareable)
            {
                case ModuleSharing.Supported:
                case ModuleSharing.Unknown:
                    return moduleInfo.IsShareable;
                default:
                    return false;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="RecycleApplicationPool">
          <declaration><![CDATA[public HttpResponseMessage RecycleApplicationPool()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="348" sc="9" el="359" ec="10">InternalServices\ControlBarController.cs</location>
            <body hash="3ef9fb9fa693f53acb3972af62cce7d8"><![CDATA[{
            if (UserController.Instance.GetCurrentUserInfo().IsSuperUser)
            {
                var log = new LogInfo { BypassBuffering = true, LogTypeKey = EventLogController.EventLogType.HOST_ALERT.ToString() };
                log.AddProperty("Message", "UserRestart");
                LogController.Instance.AddLog(log);
                Config.Touch();
                return Request.CreateResponse(HttpStatusCode.OK);
            }

            return Request.CreateResponse(HttpStatusCode.InternalServerError);
        }]]></body>
          </codeblock>
        </method>
        <method name="SaveBookmark">
          <declaration><![CDATA[public HttpResponseMessage SaveBookmark(ControlBarController.BookmarkDTO bookmark)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="447" sc="9" el="453" ec="10">InternalServices\ControlBarController.cs</location>
            <body hash="6d0ac9c8a650a0634eccd54f870be8b8"><![CDATA[{
            if (string.IsNullOrEmpty(bookmark.Bookmark)) bookmark.Bookmark = string.Empty;
            
            Controller.SaveBookMark(PortalSettings.PortalId, UserInfo.UserID, bookmark.Title, bookmark.Bookmark);
            
            return Request.CreateResponse(HttpStatusCode.OK);
        }]]></body>
          </codeblock>
        </method>
        <method name="SwitchLanguage">
          <declaration><![CDATA[public HttpResponseMessage SwitchLanguage(ControlBarController.SwitchLanguageDTO dto)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="397" sc="9" el="423" ec="10">InternalServices\ControlBarController.cs</location>
            <body hash="3e6b92ca471003090e03bdbc61512d82"><![CDATA[{
            if (UserController.Instance.GetCurrentUserInfo().IsSuperUser)
            {
                try
                {
                    if ((!string.IsNullOrEmpty(dto.Language)))
                    {
                        var personalizationController = new DotNetNuke.Services.Personalization.PersonalizationController();
                        var personalization = personalizationController.LoadProfile(UserInfo.UserID, PortalSettings.PortalId);
                        personalization.Profile["Usability:UICulture"] = dto.Language;
                        personalization.IsModified = true;
                        personalizationController.SaveProfile(personalization);
                        return Request.CreateResponse(HttpStatusCode.OK);
                    }
                }
                catch (System.Threading.ThreadAbortException)
                {
                    //Do nothing we are not logging ThreadAbortxceptions caused by redirects      
                }
                catch (Exception ex)
                {
                    Exceptions.LogException(ex);
                }
            }

            return Request.CreateResponse(HttpStatusCode.InternalServerError);
        }]]></body>
          </codeblock>
        </method>
        <method name="SwitchSite">
          <declaration><![CDATA[public HttpResponseMessage SwitchSite(ControlBarController.SwitchSiteDTO dto)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="365" sc="9" el="392" ec="10">InternalServices\ControlBarController.cs</location>
            <body hash="ac4c7456e618e50facbdb041486690c3"><![CDATA[{
            if (UserController.Instance.GetCurrentUserInfo().IsSuperUser)
            {
                try
                {
                    if ((!string.IsNullOrEmpty(dto.Site)))
                    {
                        int selectedPortalID = int.Parse(dto.Site);
                        var portalAliases = PortalAliasController.Instance.GetPortalAliasesByPortalId(selectedPortalID).ToList();

                        if ((portalAliases.Count > 0 && (portalAliases[0] != null)))
                        {
                            return Request.CreateResponse(HttpStatusCode.OK, new { RedirectURL = Globals.AddHTTP(((PortalAliasInfo)portalAliases[0]).HTTPAlias) });
                        }
                    }
                }
                catch (System.Threading.ThreadAbortException)
                {
                    //Do nothing we are not logging ThreadAbortxceptions caused by redirects      
                }
                catch (Exception ex)
                {
                    Exceptions.LogException(ex);
                }
            }

            return Request.CreateResponse(HttpStatusCode.InternalServerError);
        }]]></body>
          </codeblock>
        </method>
        <method name="ToggleUserMode">
          <declaration><![CDATA[public HttpResponseMessage ToggleUserMode(ControlBarController.UserModeDTO userMode)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="429" sc="9" el="435" ec="10">InternalServices\ControlBarController.cs</location>
            <body hash="3b0dd68d2546d35117435bfea4c51911"><![CDATA[{
            if (userMode == null)
                userMode = new UserModeDTO { UserMode = "VIEW" };

            ToggleUserMode(userMode.UserMode);
            return Request.CreateResponse(HttpStatusCode.OK);
        }]]></body>
          </codeblock>
        </method>
        <method name="ToggleUserMode">
          <declaration><![CDATA[private void ToggleUserMode(string mode)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="456" sc="9" el="462" ec="10">InternalServices\ControlBarController.cs</location>
            <body hash="6050fb7481204272b23ab75ba868f0a2"><![CDATA[{
            var personalizationController = new DotNetNuke.Services.Personalization.PersonalizationController();
            var personalization = personalizationController.LoadProfile(UserInfo.UserID, PortalSettings.PortalId);
            personalization.Profile["Usability:UserMode" + PortalSettings.PortalId] = mode.ToUpper();
            personalization.IsModified = true;
            personalizationController.SaveProfile(personalization);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_nameDics">
          <declaration><![CDATA[private System.Collections.Generic.IDictionary<string, string> _nameDics;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Controller">
          <declaration><![CDATA[private readonly IControlBarController Controller;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="DefaultExtensionImage">
          <declaration><![CDATA[private const string DefaultExtensionImage = "icon_extensions_32px.png";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Logger">
          <declaration><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof(ControlBarController));]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="EventLogServiceController">
      <declaration><![CDATA[public class EventLogServiceController : DnnApiController]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public EventLogServiceController()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
        <constructor name=".cctor">
          <declaration><![CDATA[static EventLogServiceController()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="41" sc="9" el="41" ec="114">InternalServices\EventLogServiceController.cs</location>
            <body hash="8de54c6933e014b3910c72842aca1647"><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof(EventLogServiceController))]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="GetLogDetails">
          <declaration><![CDATA[public HttpResponseMessage GetLogDetails(string guid)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="47" sc="9" el="74" ec="10">InternalServices\EventLogServiceController.cs</location>
            <body hash="45c91501ef039ff57b74098d6db67ff2"><![CDATA[{
            Guid logId;
            if (string.IsNullOrEmpty(guid) || !Guid.TryParse(guid, out logId))
            {
                return Request.CreateResponse(HttpStatusCode.BadRequest);
            }

            try
            {
                var logInfo = new LogInfo {LogGUID = guid};
                logInfo = EventLogController.Instance.GetSingleLog(logInfo, LoggingProvider.ReturnType.LogInfoObjects) as LogInfo;
                if (logInfo == null)
                {
                    return Request.CreateResponse(HttpStatusCode.BadRequest);
                }

                return Request.CreateResponse(HttpStatusCode.OK, new
                                                                     {
                                                                         Title = Localization.GetSafeJSString("CriticalError.Error", Localization.SharedResourceFile),
                                                                         Content = GetPropertiesText(logInfo)
                                                                     });
            }
            catch (Exception ex)
            {
                Logger.Error(ex);
                return Request.CreateResponse(HttpStatusCode.BadRequest);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPropertiesText">
          <declaration><![CDATA[private string GetPropertiesText(LogInfo logInfo)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="77" sc="9" el="96" ec="10">InternalServices\EventLogServiceController.cs</location>
            <body hash="2e1f45e041dcb016632ac3cde0c3668c"><![CDATA[{
            var objLogProperties = logInfo.LogProperties;
            var str = new StringBuilder();
            int i;
            for (i = 0; i <= objLogProperties.Count - 1; i++)
            {
                //display the values in the Panel child controls.
                var ldi = (LogDetailInfo)objLogProperties[i];
                if (ldi.PropertyName == "Message")
                {
                    str.Append("<p><strong>" + ldi.PropertyName + "</strong>:</br><pre>" + HttpUtility.HtmlEncode(ldi.PropertyValue) + "</pre></p>");
                }
                else
                {
                    str.Append("<p><strong>" + ldi.PropertyName + "</strong>:" + HttpUtility.HtmlEncode(ldi.PropertyValue) + "</p>");
                }
            }
            str.Append("<p><b>Server Name</b>: " + HttpUtility.HtmlEncode(logInfo.LogServerName) + "</p>");
            return str.ToString();
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="Logger">
          <declaration><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof(EventLogServiceController));]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="FileUploadController">
      <declaration><![CDATA[public class FileUploadController : DnnApiController]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public FileUploadController()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
        <constructor name=".cctor">
          <declaration><![CDATA[static FileUploadController()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="61" sc="9" el="348" ec="134">InternalServices\FileUploadController.cs</location>
            <body hash="dc7b3c83d0ce877d750170a6482296a3"><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof(FileUploadController));
        private static readonly Regex UserFolderEx = new Regex("users/\\d+/\\d+/(\\d+)/", RegexOptions.Compiled | RegexOptions.IgnoreCase);

        public class FolderItemDTO
        {
            public int FolderId { get; set; }
            public string FileFilter { get; set; }
            public bool Required { get; set; }
        }

        public class SavedFileDTO
        {
            public string FileId { get; set; }
            public string FilePath { get; set; }
        }

        [HttpPost]
        public HttpResponseMessage LoadFiles(FolderItemDTO folderItem)
        {
            int effectivePortalId = PortalSettings.PortalId;
            

            if (folderItem.FolderId <= 0)
            {
                return Request.CreateResponse(HttpStatusCode.BadRequest);
            }

            var folder = FolderManager.Instance.GetFolder(folderItem.FolderId);

            if (folder == null)
            {
                return Request.CreateResponse(HttpStatusCode.BadRequest);
            }

            int userId;
            if (IsUserFolder(folder.FolderPath, out userId))
            {
                var user = UserController.GetUserById(effectivePortalId, userId);
                if (user != null && user.IsSuperUser)
                {
                    effectivePortalId = Null.NullInteger;
                }
                else
                {
                    effectivePortalId = PortalController.GetEffectivePortalId(effectivePortalId);
                }
            }

            var list = Globals.GetFileList(effectivePortalId, folderItem.FileFilter, !folderItem.Required, folder.FolderPath);
            var fileItems = list.OfType<FileItem>().ToList();

            return Request.CreateResponse(HttpStatusCode.OK, fileItems);
        }

        [HttpGet]
        public HttpResponseMessage LoadImage(string fileId)
        {
            if (!string.IsNullOrEmpty(fileId))
            {
                int file;
                if (int.TryParse(fileId, out file))
                {
                    var imageUrl = ShowImage(file);
                    return Request.CreateResponse(HttpStatusCode.OK, imageUrl);
                }
            }

            return Request.CreateResponse(HttpStatusCode.InternalServerError);
        }

        [HttpPost]
        [IFrameSupportedValidateAntiForgeryToken]
        public Task<HttpResponseMessage> PostFile()
        {
            HttpRequestMessage request = Request;

            if (!request.Content.IsMimeMultipartContent())
            {
                throw new HttpResponseException(HttpStatusCode.UnsupportedMediaType); 
            }

            var provider = new MultipartMemoryStreamProvider();

            // local references for use in closure
            var portalSettings = PortalSettings;
            var currentSynchronizationContext = SynchronizationContext.Current;
            var userInfo = UserInfo;
            var task = request.Content.ReadAsMultipartAsync(provider)
                .ContinueWith(o =>
                    {
                        string folder = string.Empty;
                        string filter = string.Empty;
                        string fileName = string.Empty;
                        bool overwrite = false;
                        bool isHostMenu = false;
                        bool extract = false;
                        Stream stream = null;
                        var returnFileDto = new SavedFileDTO();

                        foreach (var item in provider.Contents)
                        {
                            var name = item.Headers.ContentDisposition.Name;
                            switch (name.ToUpper())
                            {
                                case "\"FOLDER\"":
                                    folder = item.ReadAsStringAsync().Result ?? "";
                                    break;

                                case "\"FILTER\"":
                                    filter = item.ReadAsStringAsync().Result ?? "";
                                    break;

                                case "\"OVERWRITE\"":
                                    bool.TryParse(item.ReadAsStringAsync().Result, out overwrite);
                                    break;

                                case "\"ISHOSTMENU\"":
                                    bool.TryParse(item.ReadAsStringAsync().Result, out isHostMenu);
                                    break;

                                case "\"EXTRACT\"":
                                    bool.TryParse(item.ReadAsStringAsync().Result, out extract);
                                    break;

                                case "\"POSTFILE\"":
                                    fileName = item.Headers.ContentDisposition.FileName.Replace("\"", "");
                                    if (fileName.IndexOf("\\", StringComparison.Ordinal) != -1)
                                    {
                                        fileName = Path.GetFileName(fileName);
                                    }
                                    stream = item.ReadAsStreamAsync().Result;
                                    break;
                            }
                        }

                        var errorMessage = "";
                        var alreadyExists = false;
                        if (!string.IsNullOrEmpty(fileName) && stream != null)
                        {
                            // Everything ready
                            
                            // The SynchronizationContext keeps the main thread context. Send method is synchronous
                            currentSynchronizationContext.Send(
                                delegate
                                    {
                                        returnFileDto = SaveFile(stream, portalSettings, userInfo, folder, filter, fileName, overwrite, isHostMenu, extract, out alreadyExists, out errorMessage);
                                    },null
                                );
                            
                        }

                        /* Response Content Type cannot be application/json 
                         * because IE9 with iframe-transport manages the response 
                         * as a file download 
                         */
                        var mediaTypeFormatter = new JsonMediaTypeFormatter();
                        mediaTypeFormatter.SupportedMediaTypes.Add(new MediaTypeHeaderValue("text/plain"));

                        if (!string.IsNullOrEmpty(errorMessage))
                        {
                            return Request.CreateResponse(
                                HttpStatusCode.BadRequest,
                                new
                                {
                                    AlreadyExists = alreadyExists,
                                    Message = string.Format(GetLocalizedString("ErrorMessage"), fileName, errorMessage)
                                }, mediaTypeFormatter, "text/plain");
                        }

                        var root = AppDomain.CurrentDomain.BaseDirectory;
                        returnFileDto.FilePath = returnFileDto.FilePath.Replace(root, "~/");
                        returnFileDto.FilePath = VirtualPathUtility.ToAbsolute(returnFileDto.FilePath);

                        return Request.CreateResponse(HttpStatusCode.OK, returnFileDto, mediaTypeFormatter, "text/plain");
                    });

            return task; 
        }

        private static SavedFileDTO SaveFile(
                Stream stream,
                PortalSettings portalSettings,
                UserInfo userInfo,
                string folder,
                string filter,
                string fileName,
                bool overwrite,
                bool isHostMenu,
                bool extract,
                out bool alreadyExists,
                out string errorMessage)
        {
            alreadyExists = false;
            var savedFileDto = new SavedFileDTO();
            try
            {
                var extension = Path.GetExtension(fileName).TextOrEmpty().Replace(".", "");
                if (!string.IsNullOrEmpty(filter) && !filter.ToLower().Contains(extension.ToLower()))
                {
                    errorMessage = GetLocalizedString("ExtensionNotAllowed");
                    return savedFileDto;
                }

                if (!IsAllowedExtension(extension))
                {
                    errorMessage = GetLocalizedString("ExtensionNotAllowed");
                    return savedFileDto;
                }

                var folderManager = FolderManager.Instance;

                // Check if this is a User Folder
                var effectivePortalId = isHostMenu ? Null.NullInteger : PortalController.GetEffectivePortalId(portalSettings.PortalId);
                int userId;
                var folderInfo = folderManager.GetFolder(effectivePortalId, folder);
                if (IsUserFolder(folder, out userId))
                {
                    var user = UserController.GetUserById(effectivePortalId, userId);
                    if (user != null)
                    {
                        folderInfo = folderManager.GetUserFolder(user);
                    }
                }

                if (!PortalSecurity.IsInRoles(userInfo, portalSettings, folderInfo.FolderPermissions.ToString("WRITE")) 
                    && !PortalSecurity.IsInRoles(userInfo, portalSettings, folderInfo.FolderPermissions.ToString("ADD")))
                {
                    errorMessage = GetLocalizedString("NoPermission");
                    return savedFileDto;
                }

                if (!overwrite && FileManager.Instance.FileExists(folderInfo, fileName, true))
                {
                    errorMessage = GetLocalizedString("AlreadyExists");
                    alreadyExists = true;
                    savedFileDto.FilePath = Path.Combine(folderInfo.PhysicalPath, fileName);
                    return savedFileDto;
                }

                var file = FileManager.Instance.AddFile(folderInfo, fileName, stream, true, false, FileManager.Instance.GetContentType(Path.GetExtension(fileName)), userInfo.UserID);

                if (extract && extension.ToLower() == "zip")
                {
                    FileManager.Instance.UnzipFile(file);
                    FileManager.Instance.DeleteFile(file);
                }

                errorMessage = "";
                savedFileDto.FileId = file.FileId.ToString();
                savedFileDto.FilePath = Path.Combine(folderInfo.PhysicalPath, fileName);
                return savedFileDto;
            }
            catch (Exception ex)
            {
                Logger.Error(ex.Message);
                errorMessage = ex.Message;
                return savedFileDto;
            }
        }

        private static string GetLocalizedString(string key)
        {
            const string resourceFile = "/App_GlobalResources/FileUpload.resx";
            return Localization.GetString(key, resourceFile);
        }

        private static bool IsUserFolder(string folderPath, out int userId)
        {
            var match = UserFolderEx.Match(folderPath);
            userId = match.Success ? int.Parse(match.Groups[1].Value) : Null.NullInteger;

            return match.Success;
        }

        private static string ShowImage(int fileId)
        {
            var image = (Services.FileSystem.FileInfo)FileManager.Instance.GetFile(fileId);

            if (image != null && IsAllowedExtension(image.Extension) && IsImageExtension(image.Extension))
            {
                var imageUrl = FileManager.Instance.GetUrl(image);
                return imageUrl;
            }

            return null;
        }

        private static readonly List<string> ImageExtensions = new List<string> { "JPG", "JPE", "BMP", "GIF", "PNG", "JPEG", "ICO" };]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="GetLocalizedString">
          <declaration><![CDATA[private static string GetLocalizedString(string key)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="322" sc="9" el="325" ec="10">InternalServices\FileUploadController.cs</location>
            <body hash="b802e9175c5853e64fdad2cf9e48770b"><![CDATA[{
            const string resourceFile = "/App_GlobalResources/FileUpload.resx";
            return Localization.GetString(key, resourceFile);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetUrl">
          <declaration><![CDATA[public static string GetUrl(int fileId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="406" sc="9" el="409" ec="10">InternalServices\FileUploadController.cs</location>
            <body hash="e2610d0f2aaf4e52a1c764cbb211b891"><![CDATA[{
            var file = FileManager.Instance.GetFile(fileId, true);
            return FileManager.Instance.GetUrl(file);
        }]]></body>
          </codeblock>
        </method>
        <method name="IsAllowedExtension">
          <declaration><![CDATA[private static bool IsAllowedExtension(string extension)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="362" sc="9" el="365" ec="10">InternalServices\FileUploadController.cs</location>
            <body hash="9d8f0b24e3554a6f0fdd3e798ef04854"><![CDATA[{
            return !string.IsNullOrEmpty(extension)
                   && Host.AllowedExtensionWhitelist.IsAllowedExtension(extension);
        }]]></body>
          </codeblock>
        </method>
        <method name="IsImage">
          <declaration><![CDATA[private static bool IsImage(string fileName)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="356" sc="9" el="359" ec="10">InternalServices\FileUploadController.cs</location>
            <body hash="41df8cb5a2f26c5630d33ff63d961527"><![CDATA[{
            var name = fileName.ToUpper();
            return ImageExtensions.Any(extension => name.EndsWith("." + extension));
        }]]></body>
          </codeblock>
        </method>
        <method name="IsImageExtension">
          <declaration><![CDATA[private static bool IsImageExtension(string extension)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="351" sc="9" el="353" ec="10">InternalServices\FileUploadController.cs</location>
            <body hash="cc9e9619930bfe559533d262391714cc"><![CDATA[{
            return ImageExtensions.Contains(extension.ToUpper());
        }]]></body>
          </codeblock>
        </method>
        <method name="IsUserFolder">
          <declaration><![CDATA[private static bool IsUserFolder(string folderPath, out int userId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="328" sc="9" el="333" ec="10">InternalServices\FileUploadController.cs</location>
            <body hash="c8299c384e02e2956594977388e719a0"><![CDATA[{
            var match = UserFolderEx.Match(folderPath);
            userId = match.Success ? int.Parse(match.Groups[1].Value) : Null.NullInteger;

            return match.Success;
        }]]></body>
          </codeblock>
        </method>
        <method name="LoadFiles">
          <declaration><![CDATA[public HttpResponseMessage LoadFiles(FileUploadController.FolderItemDTO folderItem)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="79" sc="9" el="113" ec="10">InternalServices\FileUploadController.cs</location>
            <body hash="c316449ac8aacbf5abfca1f0f064a6d6"><![CDATA[{
            int effectivePortalId = PortalSettings.PortalId;
            

            if (folderItem.FolderId <= 0)
            {
                return Request.CreateResponse(HttpStatusCode.BadRequest);
            }

            var folder = FolderManager.Instance.GetFolder(folderItem.FolderId);

            if (folder == null)
            {
                return Request.CreateResponse(HttpStatusCode.BadRequest);
            }

            int userId;
            if (IsUserFolder(folder.FolderPath, out userId))
            {
                var user = UserController.GetUserById(effectivePortalId, userId);
                if (user != null && user.IsSuperUser)
                {
                    effectivePortalId = Null.NullInteger;
                }
                else
                {
                    effectivePortalId = PortalController.GetEffectivePortalId(effectivePortalId);
                }
            }

            var list = Globals.GetFileList(effectivePortalId, folderItem.FileFilter, !folderItem.Required, folder.FolderPath);
            var fileItems = list.OfType<FileItem>().ToList();

            return Request.CreateResponse(HttpStatusCode.OK, fileItems);
        }]]></body>
          </codeblock>
        </method>
        <method name="LoadImage">
          <declaration><![CDATA[public HttpResponseMessage LoadImage(string fileId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="117" sc="9" el="129" ec="10">InternalServices\FileUploadController.cs</location>
            <body hash="adf445d7e13b428d53c6e4b32fcffc04"><![CDATA[{
            if (!string.IsNullOrEmpty(fileId))
            {
                int file;
                if (int.TryParse(fileId, out file))
                {
                    var imageUrl = ShowImage(file);
                    return Request.CreateResponse(HttpStatusCode.OK, imageUrl);
                }
            }

            return Request.CreateResponse(HttpStatusCode.InternalServerError);
        }]]></body>
          </codeblock>
        </method>
        <method name="PostFile">
          <declaration><![CDATA[public Task<HttpResponseMessage> PostFile()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="134" sc="9" el="238" ec="10">InternalServices\FileUploadController.cs</location>
            <body hash="95dd6d6b917008e96c417a0d7b6c9370"><![CDATA[{
            HttpRequestMessage request = Request;

            if (!request.Content.IsMimeMultipartContent())
            {
                throw new HttpResponseException(HttpStatusCode.UnsupportedMediaType); 
            }

            var provider = new MultipartMemoryStreamProvider();

            // local references for use in closure
            var portalSettings = PortalSettings;
            var currentSynchronizationContext = SynchronizationContext.Current;
            var userInfo = UserInfo;
            var task = request.Content.ReadAsMultipartAsync(provider)
                .ContinueWith(o =>
                    {
                        string folder = string.Empty;
                        string filter = string.Empty;
                        string fileName = string.Empty;
                        bool overwrite = false;
                        bool isHostMenu = false;
                        bool extract = false;
                        Stream stream = null;
                        var returnFileDto = new SavedFileDTO();

                        foreach (var item in provider.Contents)
                        {
                            var name = item.Headers.ContentDisposition.Name;
                            switch (name.ToUpper())
                            {
                                case "\"FOLDER\"":
                                    folder = item.ReadAsStringAsync().Result ?? "";
                                    break;

                                case "\"FILTER\"":
                                    filter = item.ReadAsStringAsync().Result ?? "";
                                    break;

                                case "\"OVERWRITE\"":
                                    bool.TryParse(item.ReadAsStringAsync().Result, out overwrite);
                                    break;

                                case "\"ISHOSTMENU\"":
                                    bool.TryParse(item.ReadAsStringAsync().Result, out isHostMenu);
                                    break;

                                case "\"EXTRACT\"":
                                    bool.TryParse(item.ReadAsStringAsync().Result, out extract);
                                    break;

                                case "\"POSTFILE\"":
                                    fileName = item.Headers.ContentDisposition.FileName.Replace("\"", "");
                                    if (fileName.IndexOf("\\", StringComparison.Ordinal) != -1)
                                    {
                                        fileName = Path.GetFileName(fileName);
                                    }
                                    stream = item.ReadAsStreamAsync().Result;
                                    break;
                            }
                        }

                        var errorMessage = "";
                        var alreadyExists = false;
                        if (!string.IsNullOrEmpty(fileName) && stream != null)
                        {
                            // Everything ready
                            
                            // The SynchronizationContext keeps the main thread context. Send method is synchronous
                            currentSynchronizationContext.Send(
                                delegate
                                    {
                                        returnFileDto = SaveFile(stream, portalSettings, userInfo, folder, filter, fileName, overwrite, isHostMenu, extract, out alreadyExists, out errorMessage);
                                    },null
                                );
                            
                        }

                        /* Response Content Type cannot be application/json 
                         * because IE9 with iframe-transport manages the response 
                         * as a file download 
                         */
                        var mediaTypeFormatter = new JsonMediaTypeFormatter();
                        mediaTypeFormatter.SupportedMediaTypes.Add(new MediaTypeHeaderValue("text/plain"));

                        if (!string.IsNullOrEmpty(errorMessage))
                        {
                            return Request.CreateResponse(
                                HttpStatusCode.BadRequest,
                                new
                                {
                                    AlreadyExists = alreadyExists,
                                    Message = string.Format(GetLocalizedString("ErrorMessage"), fileName, errorMessage)
                                }, mediaTypeFormatter, "text/plain");
                        }

                        var root = AppDomain.CurrentDomain.BaseDirectory;
                        returnFileDto.FilePath = returnFileDto.FilePath.Replace(root, "~/");
                        returnFileDto.FilePath = VirtualPathUtility.ToAbsolute(returnFileDto.FilePath);

                        return Request.CreateResponse(HttpStatusCode.OK, returnFileDto, mediaTypeFormatter, "text/plain");
                    });

            return task; 
        }]]></body>
          </codeblock>
        </method>
        <method name="SaveFile">
          <declaration><![CDATA[private static FileUploadController.SavedFileDTO SaveFile(System.IO.Stream stream, PortalSettings portalSettings, UserInfo userInfo, string folder, string filter, string fileName, bool overwrite, bool isHostMenu, bool extract, out bool alreadyExists, out string errorMessage)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="252" sc="9" el="319" ec="10">InternalServices\FileUploadController.cs</location>
            <body hash="c368630aa033ac16726062b59fb9f429"><![CDATA[{
            alreadyExists = false;
            var savedFileDto = new SavedFileDTO();
            try
            {
                var extension = Path.GetExtension(fileName).TextOrEmpty().Replace(".", "");
                if (!string.IsNullOrEmpty(filter) && !filter.ToLower().Contains(extension.ToLower()))
                {
                    errorMessage = GetLocalizedString("ExtensionNotAllowed");
                    return savedFileDto;
                }

                if (!IsAllowedExtension(extension))
                {
                    errorMessage = GetLocalizedString("ExtensionNotAllowed");
                    return savedFileDto;
                }

                var folderManager = FolderManager.Instance;

                // Check if this is a User Folder
                var effectivePortalId = isHostMenu ? Null.NullInteger : PortalController.GetEffectivePortalId(portalSettings.PortalId);
                int userId;
                var folderInfo = folderManager.GetFolder(effectivePortalId, folder);
                if (IsUserFolder(folder, out userId))
                {
                    var user = UserController.GetUserById(effectivePortalId, userId);
                    if (user != null)
                    {
                        folderInfo = folderManager.GetUserFolder(user);
                    }
                }

                if (!PortalSecurity.IsInRoles(userInfo, portalSettings, folderInfo.FolderPermissions.ToString("WRITE")) 
                    && !PortalSecurity.IsInRoles(userInfo, portalSettings, folderInfo.FolderPermissions.ToString("ADD")))
                {
                    errorMessage = GetLocalizedString("NoPermission");
                    return savedFileDto;
                }

                if (!overwrite && FileManager.Instance.FileExists(folderInfo, fileName, true))
                {
                    errorMessage = GetLocalizedString("AlreadyExists");
                    alreadyExists = true;
                    savedFileDto.FilePath = Path.Combine(folderInfo.PhysicalPath, fileName);
                    return savedFileDto;
                }

                var file = FileManager.Instance.AddFile(folderInfo, fileName, stream, true, false, FileManager.Instance.GetContentType(Path.GetExtension(fileName)), userInfo.UserID);

                if (extract && extension.ToLower() == "zip")
                {
                    FileManager.Instance.UnzipFile(file);
                    FileManager.Instance.DeleteFile(file);
                }

                errorMessage = "";
                savedFileDto.FileId = file.FileId.ToString();
                savedFileDto.FilePath = Path.Combine(folderInfo.PhysicalPath, fileName);
                return savedFileDto;
            }
            catch (Exception ex)
            {
                Logger.Error(ex.Message);
                errorMessage = ex.Message;
                return savedFileDto;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="ShowImage">
          <declaration><![CDATA[private static string ShowImage(int fileId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="336" sc="9" el="346" ec="10">InternalServices\FileUploadController.cs</location>
            <body hash="8b0b26cd3247c352438cff07c2e40d87"><![CDATA[{
            var image = (Services.FileSystem.FileInfo)FileManager.Instance.GetFile(fileId);

            if (image != null && IsAllowedExtension(image.Extension) && IsImageExtension(image.Extension))
            {
                var imageUrl = FileManager.Instance.GetUrl(image);
                return imageUrl;
            }

            return null;
        }]]></body>
          </codeblock>
        </method>
        <method name="UploadFile">
          <declaration><![CDATA[private static FileUploadController.FileUploadDto UploadFile(System.IO.Stream stream, PortalSettings portalSettings, UserInfo userInfo, string folder, string filter, string fileName, bool overwrite, bool isHostPortal, bool extract)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="421" sc="9" el="534" ec="10">InternalServices\FileUploadController.cs</location>
            <body hash="6c76903a0afbbe9eab61db87ac028f46"><![CDATA[{
            var result = new FileUploadDto();
            BinaryReader reader = null;
            Stream fileContent = null;
            try
            {
                var extension = Path.GetExtension(fileName).TextOrEmpty().Replace(".", "");
                result.FileIconUrl = IconController.GetFileIconUrl(extension);

                if (!string.IsNullOrEmpty(filter) && !filter.ToLower().Contains(extension.ToLower()))
                {
                    result.Message = GetLocalizedString("ExtensionNotAllowed");
                    return result;
                }

                if (!IsAllowedExtension(extension))
                {
                    result.Message = GetLocalizedString("ExtensionNotAllowed");
                    return result;
                }

                var folderManager = FolderManager.Instance;

                var effectivePortalId = isHostPortal ? Null.NullInteger : portalSettings.PortalId;

                // Check if this is a User Folder                
                int userId;
                var folderInfo = folderManager.GetFolder(effectivePortalId, folder);
                if (IsUserFolder(folder, out userId))
                {
                    var user = UserController.GetUserById(effectivePortalId, userId);
                    if (user != null)
                    {
                        folderInfo = folderManager.GetUserFolder(user);
                    }
                }

                if (!PortalSecurity.IsInRoles(userInfo, portalSettings, folderInfo.FolderPermissions.ToString("WRITE"))
                    && !PortalSecurity.IsInRoles(userInfo, portalSettings, folderInfo.FolderPermissions.ToString("ADD")))
                {
                    result.Message = GetLocalizedString("NoPermission");
                    return result;
                }

                IFileInfo file;

                if (!overwrite && FileManager.Instance.FileExists(folderInfo, fileName, true))
                {
                    result.Message = GetLocalizedString("AlreadyExists");
                    result.AlreadyExists = true;
                    file = FileManager.Instance.GetFile(folderInfo, fileName, true);
                    result.FileId = file.FileId;
                }
                else
                {
                    file = FileManager.Instance.AddFile(folderInfo, fileName, stream, true, false,
                                                        FileManager.Instance.GetContentType(Path.GetExtension(fileName)),
                                                        userInfo.UserID);
                    if (extract && extension.ToLower() == "zip")
                    {
                        var destinationFolder = FolderManager.Instance.GetFolder(file.FolderId);
                        var invalidFiles = new List<string>();
                        var filesCount = FileManager.Instance.UnzipFile(file, destinationFolder, invalidFiles);

                        var invalidFilesJson = invalidFiles.Count > 0
                            ? string.Format("\"{0}\"", string.Join("\",\"", invalidFiles))
                            : string.Empty;
                        result.Prompt = string.Format("{{\"invalidFiles\":[{0}], \"totalCount\": {1}}}", invalidFilesJson, filesCount);
                    }
                    result.FileId = file.FileId;
                }

                fileContent = FileManager.Instance.GetFileContent(file);

                var path = GetUrl(result.FileId);
                using (reader = new BinaryReader(fileContent))
                {
                    var size = IsImage(fileName) ?
                        ImageHeader.GetDimensions(reader) :
                        new Size(32, 32);

                    result.Orientation = size.Orientation();
                }

                result.Path = result.FileId > 0 ? path : string.Empty;
                result.FileName = fileName;

                if (extract && extension.ToLower() == "zip")
                {
                    FileManager.Instance.DeleteFile(file);
                }

                return result;
            }
            catch (Exception exe)
            {
                Logger.Error(exe.Message);
                result.Message = exe.Message;
                return result;
            }
            finally
            {
                if (reader != null)
                {
                    reader.Close();
                    reader.Dispose();
                }
                if (fileContent != null)
                {
                    fileContent.Close();
                    fileContent.Dispose();
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="UploadFromLocal">
          <declaration><![CDATA[public Task<HttpResponseMessage> UploadFromLocal()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="539" sc="9" el="627" ec="10">InternalServices\FileUploadController.cs</location>
            <body hash="49afe6956dea975eea53f6ec1ed5dae3"><![CDATA[{
            var request = Request;
            FileUploadDto result = null;
            if (!request.Content.IsMimeMultipartContent())
            {
                throw new HttpResponseException(HttpStatusCode.UnsupportedMediaType);
            }

            var provider = new MultipartMemoryStreamProvider();

            // local references for use in closure
            var portalSettings = PortalSettings;
            var currentSynchronizationContext = SynchronizationContext.Current;
            var userInfo = UserInfo;
            var task = request.Content.ReadAsMultipartAsync(provider)
                .ContinueWith(o =>
                {
                    var folder = string.Empty;
                    var filter = string.Empty;
                    var fileName = string.Empty;
                    var overwrite = false;
                    var isHostPortal = false;
                    var extract = false;
                    Stream stream = null;

                    foreach (var item in provider.Contents)
                    {
                        var name = item.Headers.ContentDisposition.Name;
                        switch (name.ToUpper())
                        {
                            case "\"FOLDER\"":
                                folder = item.ReadAsStringAsync().Result ?? "";
                                break;

                            case "\"FILTER\"":
                                filter = item.ReadAsStringAsync().Result ?? "";
                                break;

                            case "\"OVERWRITE\"":
                                bool.TryParse(item.ReadAsStringAsync().Result, out overwrite);
                                break;

                            case "\"ISHOSTPORTAL\"":
                                bool.TryParse(item.ReadAsStringAsync().Result, out isHostPortal);
                                break;

                            case "\"EXTRACT\"":
                                bool.TryParse(item.ReadAsStringAsync().Result, out extract);
                                break;

                            case "\"POSTFILE\"":
                                fileName = item.Headers.ContentDisposition.FileName.Replace("\"", "");
                                if (fileName.IndexOf("\\", StringComparison.Ordinal) != -1)
                                {
                                    fileName = Path.GetFileName(fileName);
                                }
                                stream = item.ReadAsStreamAsync().Result;
                                break;
                        }
                    }

                    if (!string.IsNullOrEmpty(fileName) && stream != null)
                    {
                        // The SynchronizationContext keeps the main thread context. Send method is synchronous
                        currentSynchronizationContext.Send(
                            delegate
                            {
                                result = UploadFile(stream, portalSettings, userInfo, folder, filter, fileName, overwrite, isHostPortal, extract);
                            },
                            null
                        );
                    }

                    var mediaTypeFormatter = new JsonMediaTypeFormatter();
                    mediaTypeFormatter.SupportedMediaTypes.Add(new MediaTypeHeaderValue("text/plain"));

                    /* Response Content Type cannot be application/json 
                     * because IE9 with iframe-transport manages the response 
                     * as a file download 
                     */
                    return Request.CreateResponse(
                        HttpStatusCode.OK,
                        result,
                        mediaTypeFormatter,
                        "text/plain");
                });

            return task;
        }]]></body>
          </codeblock>
        </method>
        <method name="UploadFromUrl">
          <declaration><![CDATA[public HttpResponseMessage UploadFromUrl(FileUploadController.UploadByUrlDto dto)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="632" sc="9" el="697" ec="10">InternalServices\FileUploadController.cs</location>
            <body hash="d0996c1f2ddbba9feccbc9584df9ce5e"><![CDATA[{
            FileUploadDto result;
            WebResponse response = null;
            Stream responseStream = null;
            var mediaTypeFormatter = new JsonMediaTypeFormatter();
            mediaTypeFormatter.SupportedMediaTypes.Add(new MediaTypeHeaderValue("text/plain"));
            try
            {
                var request = (HttpWebRequest) WebRequest.Create(dto.Url);
                request.Credentials = CredentialCache.DefaultCredentials;
                response = request.GetResponse();
                responseStream = response.GetResponseStream();
                if (responseStream == null)
                {
                    throw new Exception("No server response");
                }
                var inMemoryStream = new MemoryStream();
                {
                    var count = 0;
                    do
                    {
                        var buffer = new byte[4096];
                        count = responseStream.Read(buffer, 0, 4096);
                        inMemoryStream.Write(buffer, 0, count);
                    } while (responseStream.CanRead && count > 0);

                    var segments = dto.Url.Split('/');
                    var fileName = segments[segments.Length - 1];
                    result = UploadFile(inMemoryStream, PortalSettings, UserInfo, dto.Folder.TextOrEmpty(), dto.Filter.TextOrEmpty(),
                        fileName, dto.Overwrite, dto.IsHostMenu, dto.Unzip);

                    /* Response Content Type cannot be application/json 
                     * because IE9 with iframe-transport manages the response 
                     * as a file download 
                     */
                    return Request.CreateResponse(
                        HttpStatusCode.OK,
                        result,
                        mediaTypeFormatter,
                        "text/plain");
                }
            }
            catch (Exception ex)
            {
                result = new FileUploadDto
                {
                    Message = ex.Message
                };
                return Request.CreateResponse(
                    HttpStatusCode.OK,
                    result,
                    mediaTypeFormatter,
                    "text/plain");
            }
            finally
            {
                if (response != null)
                {
                    response.Close();
                }
                if (responseStream != null)
                {
                    responseStream.Close();
                }
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="ImageExtensions">
          <declaration><![CDATA[private static readonly System.Collections.Generic.List<string> ImageExtensions = new System.Collections.Generic.List<string>]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Logger">
          <declaration><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof(FileUploadController));]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="UserFolderEx">
          <declaration><![CDATA[private static readonly Regex UserFolderEx = new Regex("users/\\d+/\\d+/(\\d+)/", RegexOptions.IgnoreCase | RegexOptions.Compiled);]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="GettingStartedController">
      <declaration><![CDATA[public class GettingStartedController : DnnApiController]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public GettingStartedController()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="CloseGettingStartedPage">
          <declaration><![CDATA[public HttpResponseMessage CloseGettingStartedPage(GettingStartedController.ClosePageDto dto)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="77" sc="9" el="82" ec="10">InternalServices\GettingStartedController.cs</location>
            <body hash="8cc2575b76ff725fe5b94368e478691f"><![CDATA[{
            HostController.Instance.Update(String.Format(GettingStartedHideKey, PortalSettings.UserId), dto.IsHidden.ToString());
            HostController.Instance.Update(String.Format(GettingStartedDisplayKey, PortalSettings.UserId), "false");

            return Request.CreateResponse(HttpStatusCode.OK, "Success");
        }]]></body>
          </codeblock>
        </method>
        <method name="GetContentUrl">
          <declaration><![CDATA[public HttpResponseMessage GetContentUrl()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="94" sc="9" el="114" ec="10">InternalServices\GettingStartedController.cs</location>
            <body hash="195ba968509ea9e0fbddb36a9f1ddab4"><![CDATA[{
            var request = HttpContext.Current.Request;

            var builder = new UriBuilder
            {
                Scheme = request.Url.Scheme,
                Host = "www.dnnsoftware.com",
                Path = String.Format("DesktopModules/DNNCorp/GettingStarted/{0}/{1}/index.html", 
                                            DotNetNukeContext.Current.Application.Name.Replace(".", "_"), 
                                            DotNetNukeContext.Current.Application.Version.ToString(3)),
                Query = String.Format("locale={0}", Thread.CurrentThread.CurrentUICulture)

            };
            var contentUrl = builder.Uri.AbsoluteUri;

            var fallbackUrl = Globals.AddHTTP(request.Url.Host + Globals.ResolveUrl("~/Portals/_default/GettingStartedFallback.htm"));

            var isValid = IsValidUrl(contentUrl);

            return Request.CreateResponse(HttpStatusCode.OK, new { Url = isValid ? contentUrl : fallbackUrl });
        }]]></body>
          </codeblock>
        </method>
        <method name="GetGettingStartedPageSettings">
          <declaration><![CDATA[public HttpResponseMessage GetGettingStartedPageSettings()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="58" sc="9" el="73" ec="10">InternalServices\GettingStartedController.cs</location>
            <body hash="f95c8bad2820b94f2201cf0b455f364a"><![CDATA[{
            var isHidden = HostController.Instance.GetBoolean(String.Format(GettingStartedHideKey, PortalSettings.UserId), false);
            var userEmailAddress = PortalSettings.UserInfo.Email;

            var request = HttpContext.Current.Request;
            var builder = new UriBuilder
            {
                Scheme = request.Url.Scheme,
                Host = "www.dnnsoftware.com",
                Path = "Community/Download/Manuals",
                Query = "src=dnn" // parameter to judge the effectiveness of this as a channel (i.e. the number of click through)
            };
            var userManualUrl = builder.Uri.AbsoluteUri;

            return Request.CreateResponse(HttpStatusCode.OK, new { IsHidden = isHidden, EmailAddress = userEmailAddress, UserManualUrl = userManualUrl });
        }]]></body>
          </codeblock>
        </method>
        <method name="IsValidUrl">
          <declaration><![CDATA[private static bool IsValidUrl(string url)]]></declaration>
          <documentation>
            <summary>
 Checks if url does not return server or protocol errors
 </summary>
 <param name="url">Url to check</param>
 <returns></returns></documentation>
          <codeblock>
            <location sl="122" sc="9" el="154" ec="10">InternalServices\GettingStartedController.cs</location>
            <body hash="6798c91fb071579cf2a837207150400e"><![CDATA[{
            HttpWebResponse response = null;
            try
            {
                var request = WebRequest.Create(url);
                request.Timeout = 5000; // set the timeout to 5 seconds to keep the user from waiting too long for the page to load
                request.Method = "HEAD"; // get only the header information - no need to download any content

                response = request.GetResponse() as HttpWebResponse;

                if (response == null)
                {
                    return false;
                }
                var statusCode = (int)response.StatusCode;
                if (statusCode >= 500 && statusCode <= 510) // server errors
                {
                    return false;
                }
            }
            catch
            {
                return false;
            }
            finally
            {
                if (response != null)
                {
                    response.Close();
                }
            }
            return true;
        }]]></body>
          </codeblock>
        </method>
        <method name="SubscribeToNewsletter">
          <declaration><![CDATA[public HttpResponseMessage SubscribeToNewsletter(GettingStartedController.EmailDto dto)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="86" sc="9" el="90" ec="10">InternalServices\GettingStartedController.cs</location>
            <body hash="5e29deb69c60287efbd0d7c78901fa95"><![CDATA[{
            HostController.Instance.Update("NewsletterSubscribeEmail", dto.Email);

            return Request.CreateResponse(HttpStatusCode.OK, "Success");
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="GettingStartedDisplayKey">
          <declaration><![CDATA[private const string GettingStartedDisplayKey = "GettingStarted_Display_{0}";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="GettingStartedHideKey">
          <declaration><![CDATA[private const string GettingStartedHideKey = "GettingStarted_Hide_{0}";]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="ImageHeader">
      <declaration><![CDATA[public static class ImageHeader]]></declaration>
      <documentation>
        <summary>
     Taken from http://stackoverflow.com/questions/111345/getting-image-dimensions-without-reading-the-entire-file/111349
     Minor improvements including supporting unsigned 16-bit integers when decoding Jfif and added logic
     to load the image using new Bitmap if reading the headers fails
 </summary>
      </documentation>
      <constructors>
        <constructor name=".cctor">
          <declaration><![CDATA[static ImageHeader()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="18" sc="3" el="26" ec="6">InternalServices\ImageHeader.cs</location>
            <body hash="91a4acf981f00df21f99058cd21c4351"><![CDATA[private static readonly Dictionary<byte[], Func<BinaryReader, Size>> ImageFormatDecoders = new Dictionary
			<byte[], Func<BinaryReader, Size>>
			{
				{new byte[] {0x42, 0x4D}, DecodeBitmap},
				{new byte[] {0x47, 0x49, 0x46, 0x38, 0x37, 0x61}, DecodeGif},
				{new byte[] {0x47, 0x49, 0x46, 0x38, 0x39, 0x61}, DecodeGif},
				{new byte[] {0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A}, DecodePng},
				{new byte[] {0xff, 0xd8}, DecodeJfif},
			};]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="DecodeBitmap">
          <declaration><![CDATA[private static Size DecodeBitmap(System.IO.BinaryReader binaryReader)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="131" sc="3" el="136" ec="4">InternalServices\ImageHeader.cs</location>
            <body hash="6161926de6dd0e59a7b22b82cf38ab87"><![CDATA[{
			binaryReader.ReadBytes(16);
			var width = binaryReader.ReadInt32();
			var height = binaryReader.ReadInt32();
			return new Size(width, height);
		}]]></body>
          </codeblock>
        </method>
        <method name="DecodeGif">
          <declaration><![CDATA[private static Size DecodeGif(System.IO.BinaryReader binaryReader)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="139" sc="3" el="143" ec="4">InternalServices\ImageHeader.cs</location>
            <body hash="060d19b43ac22755a1689152d1223619"><![CDATA[{
			int width = binaryReader.ReadInt16();
			int height = binaryReader.ReadInt16();
			return new Size(width, height);
		}]]></body>
          </codeblock>
        </method>
        <method name="DecodeJfif">
          <declaration><![CDATA[private static Size DecodeJfif(System.IO.BinaryReader binaryReader)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="154" sc="3" el="177" ec="4">InternalServices\ImageHeader.cs</location>
            <body hash="bdbec125109de5273883d6b0c74d0a3d"><![CDATA[{
			while (binaryReader.ReadByte() == 0xff)
			{
				byte marker = binaryReader.ReadByte();
				short chunkLength = ReadLittleEndianInt16(binaryReader);
				if (marker == 0xc0)
				{
					binaryReader.ReadByte();
					int height = ReadLittleEndianInt16(binaryReader);
					int width = ReadLittleEndianInt16(binaryReader);
					return new Size(width, height);
				}
				if (chunkLength < 0)
				{
					var uchunkLength = (ushort) chunkLength;
					binaryReader.ReadBytes(uchunkLength - 2);
				}
				else
				{
					binaryReader.ReadBytes(chunkLength - 2);
				}
			}
			throw new ArgumentException(ErrorMessage);
		}]]></body>
          </codeblock>
        </method>
        <method name="DecodePng">
          <declaration><![CDATA[private static Size DecodePng(System.IO.BinaryReader binaryReader)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="146" sc="3" el="151" ec="4">InternalServices\ImageHeader.cs</location>
            <body hash="b2a71ed955195c22920517af88327901"><![CDATA[{
			binaryReader.ReadBytes(8);
			var width = ReadLittleEndianInt32(binaryReader);
			var height = ReadLittleEndianInt32(binaryReader);
			return new Size(width, height);
		}]]></body>
          </codeblock>
        </method>
        <method name="GetDimensions">
          <declaration><![CDATA[public static Size GetDimensions(string path)]]></declaration>
          <documentation>
            <summary>
     Gets the dimensions of an image.
 </summary>
 <param name="path">The path of the image to get the dimensions of.</param>
 <returns>The dimensions of the specified image.</returns>
 <exception cref="T:System.ArgumentException">The image was of an unrecognised format.</exception></documentation>
          <codeblock>
            <location sl="36" sc="3" el="62" ec="4">InternalServices\ImageHeader.cs</location>
            <body hash="9d1ac3df470ee61ed907fadc78b3d4d3"><![CDATA[{
			Size size;
			try
			{
				using (var binaryReader = new BinaryReader(File.OpenRead(path)))
				{
					try
					{
						size = GetDimensions(binaryReader);
					}
					catch (ArgumentException e)
					{
						var newMessage = string.Format("{0} file: '{1}' ", ErrorMessage, path);
						throw new ArgumentException(newMessage, "path", e);
					}
				}
			}
			catch (ArgumentException)
			{
				//do it the old fashioned way
				using (var b = new Bitmap(path))
				{
					size = b.Size;
				}
			}
			return size;
		}]]></body>
          </codeblock>
        </method>
        <method name="GetDimensions">
          <declaration><![CDATA[public static Size GetDimensions(System.IO.BinaryReader binaryReader)]]></declaration>
          <documentation>
            <summary>
     Gets the dimensions of an image.
 </summary>
 <param name="binaryReader">The path of the image to get the dimensions of.</param>
 <returns>The dimensions of the specified image.</returns>
 <exception cref="T:System.ArgumentException">The image was of an unrecognised format.</exception></documentation>
          <codeblock>
            <location sl="71" sc="3" el="86" ec="4">InternalServices\ImageHeader.cs</location>
            <body hash="5ff1f2c7aa1fff303595a89ed7cda81e"><![CDATA[{
			int maxMagicBytesLength = ImageFormatDecoders.Keys.OrderByDescending(x => x.Length).First().Length;
			var magicBytes = new byte[maxMagicBytesLength];
			for (var i = 0; i < maxMagicBytesLength; i += 1)
			{
				magicBytes[i] = binaryReader.ReadByte();
				foreach (var pair in ImageFormatDecoders)
				{
					if (StartsWith(magicBytes, pair.Key))
					{
						return pair.Value(binaryReader);
					}
				}
			}
			throw new ArgumentException(ErrorMessage, "binaryReader");
		}]]></body>
          </codeblock>
        </method>
        <method name="ReadLittleEndianInt16">
          <declaration><![CDATA[private static short ReadLittleEndianInt16(System.IO.BinaryReader binaryReader)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="101" sc="3" el="108" ec="4">InternalServices\ImageHeader.cs</location>
            <body hash="7440b823acdf21f892fa04b037147aa2"><![CDATA[{
			var bytes = new byte[sizeof (short)];
			for (var i = 0; i < sizeof (short); i += 1)
			{
				bytes[sizeof (short) - 1 - i] = binaryReader.ReadByte();
			}
			return BitConverter.ToInt16(bytes, 0);
		}]]></body>
          </codeblock>
        </method>
        <method name="ReadLittleEndianInt32">
          <declaration><![CDATA[private static int ReadLittleEndianInt32(System.IO.BinaryReader binaryReader)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="121" sc="3" el="128" ec="4">InternalServices\ImageHeader.cs</location>
            <body hash="38aba1006d70e863f99c46a8800306ce"><![CDATA[{
			var bytes = new byte[sizeof(int)];
			for (var i = 0; i < sizeof (int); i += 1)
			{
				bytes[sizeof (int) - 1 - i] = binaryReader.ReadByte();
			}
			return BitConverter.ToInt32(bytes, 0);
		}]]></body>
          </codeblock>
        </method>
        <method name="ReadLittleEndianUInt16">
          <declaration><![CDATA[private static ushort ReadLittleEndianUInt16(System.IO.BinaryReader binaryReader)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="111" sc="3" el="118" ec="4">InternalServices\ImageHeader.cs</location>
            <body hash="7a14f6a30e0c11599a55af387ccfe8a0"><![CDATA[{
			var bytes = new byte[sizeof (ushort)];
			for (var i = 0; i < sizeof (ushort); i += 1)
			{
				bytes[sizeof (ushort) - 1 - i] = binaryReader.ReadByte();
			}
			return BitConverter.ToUInt16(bytes, 0);
		}]]></body>
          </codeblock>
        </method>
        <method name="StartsWith">
          <declaration><![CDATA[private static bool StartsWith(System.Collections.Generic.IList<byte> thisBytes, System.Collections.Generic.IList<byte> thatBytes)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="89" sc="3" el="98" ec="4">InternalServices\ImageHeader.cs</location>
            <body hash="84ef07eac1165a1a37d79ae0dcb81b00"><![CDATA[{
			for (var i = 0; i < thatBytes.Count; i += 1)
			{
				if (thisBytes[i] != thatBytes[i])
				{
					return false;
				}
			}
			return true;
		}]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="ErrorMessage">
          <declaration><![CDATA[private const string ErrorMessage = "Could not recognise image format.";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ImageFormatDecoders">
          <declaration><![CDATA[private static readonly System.Collections.Generic.Dictionary<byte[], Func<System.IO.BinaryReader, Size>> ImageFormatDecoders = new System.Collections.Generic.Dictionary<byte[], Func<System.IO.BinaryReader, Size>>]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="ItemListServiceController">
      <declaration><![CDATA[public class ItemListServiceController : DnnApiController]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public ItemListServiceController()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
        <constructor name=".cctor">
          <declaration><![CDATA[static ItemListServiceController()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="52" sc="9" el="52" ec="114">InternalServices\ItemListServiceController.cs</location>
            <body hash="9cb341a622f7cf82e9b5c7069e4237e9"><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof(ItemListServiceController))]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="ApplySort">
          <declaration><![CDATA[private static System.Collections.Generic.IEnumerable<ItemListServiceController.ItemDto> ApplySort(System.Collections.Generic.IEnumerable<ItemListServiceController.ItemDto> items, int sortOrder)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1281" sc="9" el="1291" ec="10">InternalServices\ItemListServiceController.cs</location>
            <body hash="7882953c99113794cb0db2316f5f1249"><![CDATA[{
            switch (sortOrder)
            {
                case 1: // sort by a-z
                    return items.OrderBy(item => item.Value).ToList();
                case 2: // sort by z-a
                    return items.OrderByDescending(item => item.Value).ToList();
                default: // no sort
                    return items;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetActivePortalId">
          <declaration><![CDATA[private int GetActivePortalId(int pageId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1321" sc="9" el="1330" ec="10">InternalServices\ItemListServiceController.cs</location>
            <body hash="c607f978eff28df70a5e9f622d105042"><![CDATA[{
            var page = TabController.Instance.GetTab(pageId, Null.NullInteger, false);
            var portalId = page.PortalID;

            if (portalId == Null.NullInteger)
            {
                portalId = GetActivePortalId();
            }
            return portalId;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetActivePortalId">
          <declaration><![CDATA[private int GetActivePortalId()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1333" sc="9" el="1339" ec="10">InternalServices\ItemListServiceController.cs</location>
            <body hash="af72c1ba9fcee794a21b80f3a5bbfdd6"><![CDATA[{
            var portalId = -1;
            if (!TabController.CurrentPage.IsSuperTab)
                portalId = PortalSettings.PortalId;

            return portalId;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetChildrenOf">
          <declaration><![CDATA[private static System.Collections.Generic.IEnumerable<ItemListServiceController.ItemDto> GetChildrenOf(System.Collections.Generic.IEnumerable<TabInfo> tabs, int parentId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="561" sc="9" el="569" ec="10">InternalServices\ItemListServiceController.cs</location>
            <body hash="e278fb7529614f3ea0eb3899d9e01416"><![CDATA[{
            return tabs.Where(tab => tab.ParentId == parentId).Select(tab => new ItemDto
            {
                Key = tab.TabID.ToString(CultureInfo.InvariantCulture),
                Value = tab.LocalizedTabName,
                HasChildren = tab.HasChildren,
                Selectable = true
            }).ToList();
        }]]></body>
          </codeblock>
        </method>
        <method name="GetChildrenOf">
          <declaration><![CDATA[private static System.Collections.Generic.IEnumerable<ItemListServiceController.ItemDto> GetChildrenOf(System.Collections.Generic.IEnumerable<TabInfo> tabs, string parentId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="572" sc="9" el="576" ec="10">InternalServices\ItemListServiceController.cs</location>
            <body hash="4e8c26abd243a7b72f0b25e03d71d73f"><![CDATA[{
            int id;
            id = int.TryParse(parentId, out id) ? id : Null.NullInteger;
            return GetChildrenOf(tabs, id);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetFileItemsDto">
          <declaration><![CDATA[private System.Collections.Generic.IEnumerable<ItemListServiceController.ItemDto> GetFileItemsDto(int portalId, int parentId, string filter, string searchText, string permission, int sortOrder)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1171" sc="9" el="1210" ec="10">InternalServices\ItemListServiceController.cs</location>
            <body hash="7c2dce1970ddb2848313c29b959cb81f"><![CDATA[{
            if (portalId > -1)
            {
                if (!IsPortalIdValid(portalId)) return new List<ItemDto>();
            }
            else
            {
                portalId = GetActivePortalId();
            }
            var parentFolder = parentId > -1 ? FolderManager.Instance.GetFolder(parentId) : FolderManager.Instance.GetFolder(portalId, "");

            if (parentFolder == null)
            {
                return new List<ItemDto>();
            }

            var hasPermission = string.IsNullOrEmpty(permission) ?
                (HasPermission(parentFolder, "BROWSE") || HasPermission(parentFolder, "READ")) :
                HasPermission(parentFolder, permission.ToUpper());
            if (!hasPermission) return new List<ItemDto>();

            if (parentId < 1)
            {
                return new List<ItemDto>();
            }

            var files = GetFiles(parentFolder, filter, searchText);

            var filesDto = files.Select(f => new ItemDto
            {
                Key = f.FileId.ToString(CultureInfo.InvariantCulture),
                Value = f.FileName,
                HasChildren = false,
                Selectable = true
            }).ToList();

            var sortedList = ApplySort(filesDto, sortOrder);

            return sortedList;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetFiles">
          <declaration><![CDATA[public HttpResponseMessage GetFiles(int parentId, string filter, int sortOrder = 0, string permission = null, int portalId = -1)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="278" sc="9" el="286" ec="10">InternalServices\ItemListServiceController.cs</location>
            <body hash="28ed45b956ce3777309e27541936f817"><![CDATA[{
            var response = new
            {
                Success = true,
                Tree = GetFilesInternal(portalId, parentId, filter, string.Empty, sortOrder, permission),
                IgnoreRoot = true
            };
            return Request.CreateResponse(HttpStatusCode.OK, response);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetFiles">
          <declaration><![CDATA[private System.Collections.Generic.IEnumerable<IFileInfo> GetFiles(IFolderInfo parentFolder, string filter, string searchText)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1213" sc="9" el="1227" ec="10">InternalServices\ItemListServiceController.cs</location>
            <body hash="80f8253adef2657f073d54f11b35392d"><![CDATA[{
            Func<IFileInfo, bool> searchFunc;
            var filterList = string.IsNullOrEmpty(filter) ? null : filter.ToLowerInvariant().Split(',').ToList();
            if (String.IsNullOrEmpty(searchText))
            {
                searchFunc = f => filterList == null || filterList.Contains(f.Extension.ToLowerInvariant());
            }
            else
            {
                searchFunc = f => f.FileName.IndexOf(searchText, StringComparison.InvariantCultureIgnoreCase) > -1
                                    && (filterList == null || filterList.Contains(f.Extension.ToLowerInvariant()));
            }

            return FolderManager.Instance.GetFiles(parentFolder).Where(f => searchFunc(f));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetFilesInternal">
          <declaration><![CDATA[private NTree<ItemListServiceController.ItemDto> GetFilesInternal(int portalId, int parentId, string filter, string searchText, int sortOrder, string permissions)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1155" sc="9" el="1160" ec="10">InternalServices\ItemListServiceController.cs</location>
            <body hash="a443167bea6d3de93a83054f4d8d01f1"><![CDATA[{
            var tree = new NTree<ItemDto> { Data = new ItemDto { Key = RootKey } };
            var children = GetFileItemsDto(portalId, parentId, filter, searchText, permissions, sortOrder).Select(dto => new NTree<ItemDto> { Data = dto }).ToList();
            tree.Children = children;
            return tree;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetFolderDescendants">
          <declaration><![CDATA[public HttpResponseMessage GetFolderDescendants(string parentId = null, int sortOrder = 0, string searchText = "", string permission = null, int portalId = -1)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="215" sc="9" el="222" ec="10">InternalServices\ItemListServiceController.cs</location>
            <body hash="55bfb394c12e9f75348f7f3ed389d82c"><![CDATA[{
            var response = new
            {
                Success = true,
                Items = GetFolderDescendantsInternal(portalId, parentId, sortOrder, searchText, permission)
            };
            return Request.CreateResponse(HttpStatusCode.OK, response);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetFolderDescendants">
          <declaration><![CDATA[private System.Collections.Generic.IEnumerable<IFolderInfo> GetFolderDescendants(IFolderInfo parentFolder, string searchText, string permission)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1098" sc="9" el="1114" ec="10">InternalServices\ItemListServiceController.cs</location>
            <body hash="8c657f4df2e4a60208ecd7ff7e5cc0ab"><![CDATA[{
            Func<IFolderInfo, bool> searchFunc;
            if (String.IsNullOrEmpty(searchText))
            {
                searchFunc = folder => true;
            }
            else
            {
                searchFunc = folder => folder.FolderName.IndexOf(searchText, StringComparison.InvariantCultureIgnoreCase) > -1;
            }
            permission = string.IsNullOrEmpty(permission) ? null : permission.ToUpper();
            return FolderManager.Instance.GetFolders(parentFolder).Where(folder =>
                (string.IsNullOrEmpty(permission) ?
                    (HasPermission(folder, "BROWSE") || HasPermission(folder, "READ")) :
                    (HasPermission(folder, permission))
                ) && searchFunc(folder));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetFolderDescendantsInternal">
          <declaration><![CDATA[private System.Collections.Generic.IEnumerable<ItemListServiceController.ItemDto> GetFolderDescendantsInternal(int portalId, string parentId, int sortOrder, string searchText, string permission)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="920" sc="9" el="924" ec="10">InternalServices\ItemListServiceController.cs</location>
            <body hash="82bb0c9908c744448bb6a4f30909aadf"><![CDATA[{
            int id;
            id = int.TryParse(parentId, out id) ? id : Null.NullInteger;
            return GetFolderDescendantsInternal(portalId, id, sortOrder, searchText, permission);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetFolderDescendantsInternal">
          <declaration><![CDATA[private System.Collections.Generic.IEnumerable<ItemListServiceController.ItemDto> GetFolderDescendantsInternal(int portalId, int parentId, int sortOrder, string searchText, string permission)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="927" sc="9" el="967" ec="10">InternalServices\ItemListServiceController.cs</location>
            <body hash="2040b73b32dadd1ccf94fb608c983809"><![CDATA[{
            if (portalId > -1)
            {
                if (!IsPortalIdValid(portalId)) return new List<ItemDto>();
            }
            else
            {
                portalId = GetActivePortalId();
            }
            var parentFolder = parentId > -1 ? FolderManager.Instance.GetFolder(parentId) : FolderManager.Instance.GetFolder(portalId, "");

            if (parentFolder == null)
            {
                return new List<ItemDto>();
            }

            var hasPermission = string.IsNullOrEmpty(permission) ?
                (HasPermission(parentFolder, "BROWSE") || HasPermission(parentFolder, "READ")) :
                HasPermission(parentFolder, permission.ToUpper());
            if (!hasPermission) return new List<ItemDto>();

            if (parentId < 1) return new List<ItemDto> { new ItemDto
                {
                    Key = parentFolder.FolderID.ToString(CultureInfo.InvariantCulture), 
                    Value = portalId == -1 ? SharedConstants.HostRootFolder : SharedConstants.RootFolder,
                    HasChildren = HasChildren(parentFolder, permission),
                    Selectable = true
                } };

            var childrenFolders = GetFolderDescendants(parentFolder, searchText, permission);

            var folders = childrenFolders.Select(folder => new ItemDto
            {
                Key = folder.FolderID.ToString(CultureInfo.InvariantCulture),
                Value = folder.FolderName,
                HasChildren = HasChildren(folder, permission),
                Selectable = true
            });

            return ApplySort(folders, sortOrder);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetFolders">
          <declaration><![CDATA[public HttpResponseMessage GetFolders(int sortOrder = 0, string permission = null, int portalId = -1)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="226" sc="9" el="234" ec="10">InternalServices\ItemListServiceController.cs</location>
            <body hash="8bc11b8b412f236fe094cf112a112298"><![CDATA[{
            var response = new
            {
                Success = true,
                Tree = GetFoldersInternal(portalId, sortOrder, permission),
                IgnoreRoot = true
            };
            return Request.CreateResponse(HttpStatusCode.OK, response);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetFoldersInternal">
          <declaration><![CDATA[private NTree<ItemListServiceController.ItemDto> GetFoldersInternal(int portalId, int sortOrder, string permissions)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="872" sc="9" el="882" ec="10">InternalServices\ItemListServiceController.cs</location>
            <body hash="22e032e2b51393dc7c25362e7a8ca390"><![CDATA[{
            var tree = new NTree<ItemDto> { Data = new ItemDto { Key = RootKey } };
            var children = ApplySort(GetFolderDescendantsInternal(portalId, -1, sortOrder, string.Empty, permissions), sortOrder).Select(dto => new NTree<ItemDto> { Data = dto }).ToList();
            tree.Children = children;
            foreach (var child in tree.Children)
            {
                children = ApplySort(GetFolderDescendantsInternal(portalId, child.Data.Key, sortOrder, string.Empty, permissions), sortOrder).Select(dto => new NTree<ItemDto> { Data = dto }).ToList();
                child.Children = children;
            }
            return tree;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetMyPortalGroup">
          <declaration><![CDATA[private static System.Collections.Generic.IEnumerable<PortalInfo> GetMyPortalGroup()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1298" sc="9" el="1306" ec="10">InternalServices\ItemListServiceController.cs</location>
            <body hash="435a93a7b5fd73bd50adc1522eaa7618"><![CDATA[{
            var groups = PortalGroupController.Instance.GetPortalGroups().ToArray();
            var mygroup = (from @group in groups
                           select PortalGroupController.Instance.GetPortalsByGroup(@group.PortalGroupId)
                               into portals
                               where portals.Any(x => x.PortalID == PortalSettings.Current.PortalId)
                               select portals.ToArray()).FirstOrDefault();
            return mygroup;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPageDescendants">
          <declaration><![CDATA[public HttpResponseMessage GetPageDescendants(string parentId = null, int sortOrder = 0, string searchText = "", int portalId = -1, bool includeDisabled = false, bool includeAllTypes = false, bool includeActive = true, bool includeHostPages = false)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="89" sc="9" el="96" ec="10">InternalServices\ItemListServiceController.cs</location>
            <body hash="f6e4795d2a7ca2b40b2908ccc5f25881"><![CDATA[{
            var response = new
            {
                Success = true,
                Items = GetPageDescendantsInternal(portalId, parentId, sortOrder, searchText, includeDisabled, includeAllTypes, includeActive, includeHostPages)
            };
            return Request.CreateResponse(HttpStatusCode.OK, response);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPageDescendantsInPortalGroup">
          <declaration><![CDATA[public HttpResponseMessage GetPageDescendantsInPortalGroup(string parentId = null, int sortOrder = 0, string searchText = "", bool includeDisabled = false, bool includeAllTypes = false, bool includeActive = true, bool includeHostPages = false)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="175" sc="9" el="182" ec="10">InternalServices\ItemListServiceController.cs</location>
            <body hash="c62be4d04fc2835fa43c8a943769c3ee"><![CDATA[{
            var response = new
            {
                Success = true,
                Items = GetPageDescendantsInPortalGroupInternal(parentId, sortOrder, searchText, includeDisabled, includeAllTypes, includeActive, includeHostPages)
            };
            return Request.CreateResponse(HttpStatusCode.OK, response);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPageDescendantsInPortalGroupInternal">
          <declaration><![CDATA[private System.Collections.Generic.IEnumerable<ItemListServiceController.ItemDto> GetPageDescendantsInPortalGroupInternal(string parentId, int sortOrder, string searchText, bool includeDisabled = false, bool includeAllTypes = false, bool includeActive = true, bool includeHostPages = false)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="344" sc="9" el="372" ec="10">InternalServices\ItemListServiceController.cs</location>
            <body hash="169bdb7c1b14c6e683302c1247cacb90"><![CDATA[{
            if (string.IsNullOrEmpty(parentId))
            {
                return null;
            }
            int portalId;
            int parentIdAsInt;
            if (parentId.StartsWith(PortalPrefix))
            {
                parentIdAsInt = -1;
                if (!int.TryParse(parentId.Replace(PortalPrefix, string.Empty), out portalId))
                {
                    portalId = -1;
                }
                if (!String.IsNullOrEmpty(searchText))
                {
                    return SearchPagesInternal(portalId, searchText, sortOrder, includeDisabled, includeAllTypes, includeActive).Children.Select(node => node.Data);
                }
            }
            else
            {
                portalId = -1;
                if (!int.TryParse(parentId, out parentIdAsInt))
                {
                    parentIdAsInt = -1;
                }
            }
            return GetPageDescendantsInternal(portalId, parentIdAsInt, sortOrder, searchText, includeDisabled, includeAllTypes, includeActive);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPageDescendantsInternal">
          <declaration><![CDATA[private System.Collections.Generic.IEnumerable<ItemListServiceController.ItemDto> GetPageDescendantsInternal(int portalId, string parentId, int sortOrder, string searchText, bool includeDisabled = false, bool includeAllTypes = false, bool includeActive = true, bool includeHostPages = false)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="375" sc="9" el="379" ec="10">InternalServices\ItemListServiceController.cs</location>
            <body hash="77f76db22510e065b437f186007404bc"><![CDATA[{
            int id;
            id = int.TryParse(parentId, out id) ? id : Null.NullInteger;
            return GetPageDescendantsInternal(portalId, id, sortOrder, searchText, includeDisabled , includeAllTypes, includeActive, includeHostPages);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPageDescendantsInternal">
          <declaration><![CDATA[private System.Collections.Generic.IEnumerable<ItemListServiceController.ItemDto> GetPageDescendantsInternal(int portalId, int parentId, int sortOrder, string searchText, bool includeDisabled = false, bool includeAllTypes = false, bool includeActive = true, bool includeHostPages = false)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="382" sc="9" el="445" ec="10">InternalServices\ItemListServiceController.cs</location>
            <body hash="fbe69df14684d2eb7dc6eaac75a974ec"><![CDATA[{
            List<TabInfo> tabs;

            if (portalId == -1)
            {
                portalId = GetActivePortalId(parentId);
            }
            else
            {
                if (!IsPortalIdValid(portalId)) return new List<ItemDto>();
            }

            Func<TabInfo, bool> searchFunc;
            if (String.IsNullOrEmpty(searchText))
            {
                searchFunc = page => true;
            }
            else
            {
                searchFunc = page => page.LocalizedTabName.IndexOf(searchText, StringComparison.InvariantCultureIgnoreCase) > -1;
            }

            if (portalId > -1)
            {
                var includeHiddenTabs = PortalSettings.UserInfo.IsSuperUser || PortalSettings.UserInfo.IsInRole("Administrators");
                tabs = TabController.GetPortalTabs(portalId, Null.NullInteger, false, null, includeHiddenTabs, false, false, true, false)
                                 .Where(tab => searchFunc(tab) && tab.ParentId == parentId && (includeDisabled || !tab.DisableLink) && (includeAllTypes || tab.TabType == TabType.Normal))
                                 .OrderBy(tab => tab.TabOrder)
                                 .ToList();

                if (PortalSettings.UserInfo.IsSuperUser && includeHostPages)
                {
                    tabs.AddRange(TabController.Instance.GetTabsByPortal(-1).AsList()
                        .Where(tab => searchFunc(tab) && tab.ParentId == parentId && !tab.IsDeleted && !tab.DisableLink)
                        .OrderBy(tab => tab.TabOrder)
                        .ToList());
                }
            }
            else
            {
                if (PortalSettings.UserInfo.IsSuperUser)
                {

                    tabs = TabController.Instance.GetTabsByPortal(-1).AsList()
                        .Where(tab => searchFunc(tab) && tab.ParentId == parentId && !tab.IsDeleted && !tab.DisableLink)
                        .OrderBy(tab => tab.TabOrder)
                        .ToList();
                }
                else
                {
                    return new List<ItemDto>();
                }
            }

            var pages = tabs.Select(tab => new ItemDto
            {
                Key = tab.TabID.ToString(CultureInfo.InvariantCulture),
                Value = tab.LocalizedTabName,
                HasChildren = tab.HasChildren,
                Selectable = true
            });

            return ApplySort(pages, sortOrder);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPages">
          <declaration><![CDATA[public HttpResponseMessage GetPages(int sortOrder = 0, int portalId = -1, bool includeDisabled = false, bool includeAllTypes = false, bool includeActive = true, bool includeHostPages = false)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="138" sc="9" el="146" ec="10">InternalServices\ItemListServiceController.cs</location>
            <body hash="524a9098af192cfea30033a38996f50a"><![CDATA[{
            var response = new
            {
                Success = true,
                Tree = GetPagesInternal(portalId, sortOrder, includeDisabled, includeAllTypes, includeActive, includeHostPages),
                IgnoreRoot = true
            };
            return Request.CreateResponse(HttpStatusCode.OK, response);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPagesInPortalGroup">
          <declaration><![CDATA[public HttpResponseMessage GetPagesInPortalGroup(int sortOrder = 0)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="150" sc="9" el="158" ec="10">InternalServices\ItemListServiceController.cs</location>
            <body hash="16196bf6736fdfc464e0166d1ae14c55"><![CDATA[{
            var response = new
            {
                Success = true,
                Tree = GetPagesInPortalGroupInternal(sortOrder),
                IgnoreRoot = true
            };
            return Request.CreateResponse(HttpStatusCode.OK, response);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPagesInPortalGroupInternal">
          <declaration><![CDATA[private static NTree<ItemListServiceController.ItemDto> GetPagesInPortalGroupInternal(int sortOrder)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="336" sc="9" el="341" ec="10">InternalServices\ItemListServiceController.cs</location>
            <body hash="c6e72733356d9ee0871c1292f7b8ff95"><![CDATA[{
            var treeNode = new NTree<ItemDto> { Data = new ItemDto { Key = RootKey } };
            var portals = GetPortalGroup(sortOrder);
            treeNode.Children = portals.Select(dto => new NTree<ItemDto> { Data = dto }).ToList();
            return treeNode;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPagesInternal">
          <declaration><![CDATA[private NTree<ItemListServiceController.ItemDto> GetPagesInternal(int portalId, int sortOrder, bool includeDisabled = false, bool includeAllTypes = false, bool includeActive = false, bool includeHostPages = false)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="319" sc="9" el="333" ec="10">InternalServices\ItemListServiceController.cs</location>
            <body hash="d1404b461e5dcda0678e3ac97fba12b1"><![CDATA[{
            if (portalId == -1)
            {
                portalId = GetActivePortalId();
            }
			var tabs = GetPortalPages(portalId, includeDisabled, includeAllTypes, includeActive, includeHostPages);
            var sortedTree = new NTree<ItemDto> { Data = new ItemDto { Key = RootKey } };
            if (tabs == null)
            {
                return sortedTree;
            }
            var children = ApplySort(GetChildrenOf(tabs, Null.NullInteger), sortOrder).Select(dto => new NTree<ItemDto> { Data = dto }).ToList();
            sortedTree.Children = children;
            return sortedTree;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPortalFolders">
          <declaration><![CDATA[private System.Collections.Generic.IEnumerable<IFolderInfo> GetPortalFolders(int portalId, string searchText, string permission)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1117" sc="9" el="1137" ec="10">InternalServices\ItemListServiceController.cs</location>
            <body hash="a5d46d33d362a207a3a7ad443a5ae435"><![CDATA[{
            if (portalId == -1)
            {
                portalId = GetActivePortalId();
            }
            Func<IFolderInfo, bool> searchFunc;
            if (String.IsNullOrEmpty(searchText))
            {
                searchFunc = folder => true;
            }
            else
            {
                searchFunc = folder => folder.FolderName.IndexOf(searchText, StringComparison.InvariantCultureIgnoreCase) > -1;
            }
            permission = string.IsNullOrEmpty(permission) ? null : permission.ToUpper();
            return FolderManager.Instance.GetFolders(portalId).Where(folder =>
                (string.IsNullOrEmpty(permission) ?
                    (HasPermission(folder, "BROWSE") || HasPermission(folder, "READ")) :
                    (HasPermission(folder, permission))
                ) && searchFunc(folder));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPortalGroup">
          <declaration><![CDATA[private static System.Collections.Generic.IEnumerable<ItemListServiceController.ItemDto> GetPortalGroup(int sortOrder)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="855" sc="9" el="865" ec="10">InternalServices\ItemListServiceController.cs</location>
            <body hash="28d3f3deebb10611a769aeb0ae1db0be"><![CDATA[{
            var mygroup = GetMyPortalGroup();
            var portals = mygroup.Select(p => new ItemDto
            {
                Key = PortalPrefix + p.PortalID.ToString(CultureInfo.InvariantCulture),
                Value = p.PortalName,
                HasChildren = true,
                Selectable = false
            }).ToList();
            return ApplySort(portals, sortOrder);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPortalPages">
          <declaration><![CDATA[private System.Collections.Generic.List<TabInfo> GetPortalPages(int portalId, bool includeDisabled = false, bool includeAllTypes = false, bool includeActive = false, bool includeHostPages = false)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="524" sc="9" el="558" ec="10">InternalServices\ItemListServiceController.cs</location>
            <body hash="17e4de00102ed8e6cb7d43075e586347"><![CDATA[{
            List<TabInfo> tabs = null;
            if (portalId == -1)
            {
                portalId = GetActivePortalId();
            }
            else
            {
                if (!IsPortalIdValid(portalId))
                {
                    return null;
                }
            }

            if (portalId > -1)
            {
                var includeHiddenTabs = PortalSettings.UserInfo.IsSuperUser || PortalSettings.UserInfo.IsInRole("Administrators");
				tabs = TabController.GetPortalTabs(portalId, (includeActive) ? Null.NullInteger : PortalSettings.ActiveTab.TabID, false, null, includeHiddenTabs, false, includeAllTypes, true, false)
					.Where(t => !t.DisableLink || includeDisabled)
                    .ToList();

                if (PortalSettings.UserInfo.IsSuperUser && includeHostPages)
                {
                    tabs.AddRange(TabController.Instance.GetTabsByPortal(-1).AsList().Where(t => !t.IsDeleted && !t.DisableLink).ToList());
                }
            }
            else
            {
                if (PortalSettings.UserInfo.IsSuperUser)
                {
                    tabs = TabController.Instance.GetTabsByPortal(-1).AsList().Where(t => !t.IsDeleted && !t.DisableLink).ToList();
                }
            }
            return tabs;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetTreePathForFolder">
          <declaration><![CDATA[public HttpResponseMessage GetTreePathForFolder(string itemId, int sortOrder = 0, string permission = null, int portalId = -1)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="250" sc="9" el="258" ec="10">InternalServices\ItemListServiceController.cs</location>
            <body hash="7a03e12e22e121a7536ca1a060389bf3"><![CDATA[{
            var response = new
            {
                Success = true,
                Tree = GetTreePathForFolderInternal(itemId, sortOrder, permission),
                IgnoreRoot = true
            };
            return Request.CreateResponse(HttpStatusCode.OK, response);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetTreePathForFolderInternal">
          <declaration><![CDATA[private NTree<ItemListServiceController.ItemDto> GetTreePathForFolderInternal(string selectedItemId, int sortOrder, string permission)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="998" sc="9" el="1083" ec="10">InternalServices\ItemListServiceController.cs</location>
            <body hash="90f735bdc134f9c546024c76ed3c62be"><![CDATA[{
            var tree = new NTree<ItemDto> { Data = new ItemDto { Key = RootKey } };

            int itemId;
            if (string.IsNullOrEmpty(selectedItemId) || !int.TryParse(selectedItemId, out itemId))
            {
                return tree;
            }

            if (itemId <= 0)
            {
                return tree;
            }

            var folder = FolderManager.Instance.GetFolder(itemId);
            if (folder == null)
            {
                return tree;
            }

            var hasPermission = string.IsNullOrEmpty(permission) ?
                (HasPermission(folder, "BROWSE") || HasPermission(folder, "READ")) :
                HasPermission(folder, permission.ToUpper());
            if (!hasPermission) return new NTree<ItemDto>();

            var selfTree = new NTree<ItemDto>
            {
                Data = new ItemDto
                {
                    Key = folder.FolderID.ToString(CultureInfo.InvariantCulture),
                    Value = folder.FolderName,
                    HasChildren = HasChildren(folder, permission),
                    Selectable = true
                }
            };
            var parentId = folder.ParentID;
            var parentFolder = parentId > 0 ? FolderManager.Instance.GetFolder(parentId) : null;

            while (parentFolder != null)
            {
                // load all sibling
                var siblingFolders = GetFolderDescendants(parentFolder, string.Empty, permission)
                    .Select(folderInfo => new ItemDto
                    {
                        Key = folderInfo.FolderID.ToString(CultureInfo.InvariantCulture),
                        Value = folderInfo.FolderName,
                        HasChildren = HasChildren(folderInfo, permission),
                        Selectable = true
                    }).ToList();
                siblingFolders = ApplySort(siblingFolders, sortOrder).ToList();

                var siblingFoldersTree = siblingFolders.Select(f => new NTree<ItemDto> { Data = f }).ToList();

                // attach the tree
                if (selfTree.Children != null)
                {
                    foreach (var node in siblingFoldersTree)
                    {
                        if (node.Data.Key == selfTree.Data.Key)
                        {
                            node.Children = selfTree.Children;
                            break;
                        }
                    }
                }

                selfTree = new NTree<ItemDto>
                {
                    Data = new ItemDto
                    {
                        Key = parentId.ToString(CultureInfo.InvariantCulture),
                        Value = parentFolder.FolderName,
                        HasChildren = true,
                        Selectable = true
                    },
                    Children = siblingFoldersTree
                };

                parentId = parentFolder.ParentID;
                parentFolder = parentId > 0 ? FolderManager.Instance.GetFolder(parentId) : null;
            }
            selfTree.Data.Value = SharedConstants.RootFolder;

            tree.Children.Add(selfTree);
            return tree;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetTreePathForPage">
          <declaration><![CDATA[public HttpResponseMessage GetTreePathForPage(string itemId, int sortOrder = 0, int portalId = -1, bool includeDisabled = false, bool includeAllTypes = false, bool includeActive = true)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="100" sc="9" el="108" ec="10">InternalServices\ItemListServiceController.cs</location>
            <body hash="a9422e57ea393fba9b929044461931d7"><![CDATA[{
            var response = new
            {
                Success = true,
                Tree = GetTreePathForPageInternal(portalId, itemId, sortOrder, includeDisabled, includeAllTypes, includeActive),
                IgnoreRoot = true
            };
            return Request.CreateResponse(HttpStatusCode.OK, response);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetTreePathForPageInPortalGroup">
          <declaration><![CDATA[public HttpResponseMessage GetTreePathForPageInPortalGroup(string itemId, int sortOrder = 0, bool includeDisabled = false, bool includeAllTypes = false, bool includeActive = true, bool includeHostPages = false)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="186" sc="9" el="194" ec="10">InternalServices\ItemListServiceController.cs</location>
            <body hash="2e7815e9637f251ef27a195f22fdc206"><![CDATA[{
            var response = new
            {
                Success = true,
                Tree = GetTreePathForPageInternal(itemId, sortOrder, true, includeDisabled, includeAllTypes, includeActive, includeHostPages),
                IgnoreRoot = true
            };
            return Request.CreateResponse(HttpStatusCode.OK, response);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetTreePathForPageInternal">
          <declaration><![CDATA[private NTree<ItemListServiceController.ItemDto> GetTreePathForPageInternal(int portalId, string itemId, int sortOrder, bool includePortalTree = false, bool includeDisabled = false, bool includeAllTypes = false, bool includeActive = false, bool includeHostPages = false)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="707" sc="9" el="714" ec="10">InternalServices\ItemListServiceController.cs</location>
            <body hash="5a23412522c5c89e53fef2dc32b1fe9c"><![CDATA[{
            int itemIdAsInt;
            if (string.IsNullOrEmpty(itemId) || !int.TryParse(itemId, out itemIdAsInt))
            {
                itemIdAsInt = Null.NullInteger;
            }
            return GetTreePathForPageInternal(portalId, itemIdAsInt, sortOrder, includePortalTree, includeDisabled, includeAllTypes, includeActive, includeHostPages);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetTreePathForPageInternal">
          <declaration><![CDATA[private NTree<ItemListServiceController.ItemDto> GetTreePathForPageInternal(string itemId, int sortOrder, bool includePortalTree = false, bool includeDisabled = false, bool includeAllTypes = false, bool includeActive = false, bool includeHostPages = false)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="717" sc="9" el="735" ec="10">InternalServices\ItemListServiceController.cs</location>
            <body hash="15dc0705eaac49b4fa70f4b9423d4051"><![CDATA[{
            var tree = new NTree<ItemDto> { Data = new ItemDto { Key = RootKey } };
            int itemIdAsInt;
            if (string.IsNullOrEmpty(itemId) || !int.TryParse(itemId, out itemIdAsInt))
            {
                return tree;
            }
            var portals = PortalController.GetPortalDictionary();
            int portalId;
            if (portals.ContainsKey(itemIdAsInt))
            {
                portalId = portals[itemIdAsInt];
            }
            else
            {
                return tree;
            }
            return GetTreePathForPageInternal(portalId, itemIdAsInt, sortOrder, includePortalTree, includeDisabled, includeAllTypes, includeActive, includeHostPages);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetTreePathForPageInternal">
          <declaration><![CDATA[private NTree<ItemListServiceController.ItemDto> GetTreePathForPageInternal(int portalId, int selectedItemId, int sortOrder, bool includePortalTree = false, bool includeDisabled = false, bool includeAllTypes = false, bool includeActive = false, bool includeHostPages = false)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="738" sc="9" el="852" ec="10">InternalServices\ItemListServiceController.cs</location>
            <body hash="a48dacd17095fabe243311e91f03c3c9"><![CDATA[{
            var tree = new NTree<ItemDto> { Data = new ItemDto { Key = RootKey } };

            if (selectedItemId <= 0)
            {
                return tree;
            }

            var pages = GetPortalPages(portalId, includeDisabled, includeAllTypes, includeActive, includeHostPages);

            if (pages == null)
            {
                return tree;
            }

            var page = pages.SingleOrDefault(pageInfo => pageInfo.TabID == selectedItemId);

            if (page == null)
            {
                return tree;
            }

            var selfTree = new NTree<ItemDto>
            {
                Data = new ItemDto
                {
                    Key = page.TabID.ToString(CultureInfo.InvariantCulture),
                    Value = page.LocalizedTabName,
                    HasChildren = page.HasChildren,
                    Selectable = true
                }
            };

            var parentId = page.ParentId;
            var parentTab = parentId > 0 ? pages.SingleOrDefault(t => t.TabID == parentId) : null;

            while (parentTab != null)
            {
                // load all sibiling
                var siblingTabs = GetChildrenOf(pages, parentId);
                siblingTabs = ApplySort(siblingTabs, sortOrder);
                var siblingTabsTree = siblingTabs.Select(t => new NTree<ItemDto> { Data = t }).ToList();

                // attach the tree
                if (selfTree.Children != null)
                {
                    foreach (var node in siblingTabsTree)
                    {
                        if (node.Data.Key == selfTree.Data.Key)
                        {
                            node.Children = selfTree.Children;
                            break;
                        }
                    }
                }

                selfTree = new NTree<ItemDto>
                {
                    Data = new ItemDto
                    {
                        Key = parentId.ToString(CultureInfo.InvariantCulture),
                        Value = parentTab.LocalizedTabName,
                        HasChildren = true,
                        Selectable = true
                    },
                    Children = siblingTabsTree
                };

                parentId = parentTab.ParentId;
                parentTab = parentId > 0 ? pages.SingleOrDefault(t => t.TabID == parentId) : null;
            }

            // retain root pages
            var rootTabs = GetChildrenOf(pages, Null.NullInteger);
            rootTabs = ApplySort(rootTabs, sortOrder);
            var rootTree = rootTabs.Select(dto => new NTree<ItemDto> { Data = dto }).ToList();

            foreach (var node in rootTree)
            {
                if (node.Data.Key == selfTree.Data.Key)
                {
                    node.Children = selfTree.Children;
                    break;
                }
            }

            if (includePortalTree)
            {
                var myGroup = GetMyPortalGroup();
                var portalTree = myGroup.Select(
                    portal => new NTree<ItemDto>
                    {
                        Data = new ItemDto
                        {
                            Key = PortalPrefix + portal.PortalID.ToString(CultureInfo.InvariantCulture),
                            Value = portal.PortalName,
                            HasChildren = true,
                            Selectable = false
                        }
                    }).ToList();

                foreach (var node in portalTree)
                {
                    if (node.Data.Key == PortalPrefix + portalId.ToString(CultureInfo.InvariantCulture))
                    {
                        node.Children = rootTree;
                        break;
                    }
                }
                rootTree = portalTree;
            }
            tree.Children = rootTree;

            return tree;
        }]]></body>
          </codeblock>
        </method>
        <method name="HasChildren">
          <declaration><![CDATA[private bool HasChildren(IFolderInfo parentFolder, string permission)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1140" sc="9" el="1148" ec="10">InternalServices\ItemListServiceController.cs</location>
            <body hash="35f5c34a752c706d14a55a0035b88390"><![CDATA[{
            permission = string.IsNullOrEmpty(permission) ? null : permission.ToUpper();
            return FolderManager.Instance.GetFolders(parentFolder).Any(folder =>
                (string.IsNullOrEmpty(permission) ?
                    (HasPermission(folder, "BROWSE") || HasPermission(folder, "READ")) :
                    (HasPermission(folder, permission))
                )
            );
        }]]></body>
          </codeblock>
        </method>
        <method name="HasPermission">
          <declaration><![CDATA[private bool HasPermission(IFolderInfo folder, string permissionKey)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1086" sc="9" el="1095" ec="10">InternalServices\ItemListServiceController.cs</location>
            <body hash="9aeeb0f0bced43621733d29b841a7904"><![CDATA[{
            var hasPermision = PortalSettings.UserInfo.IsSuperUser;

            if (!hasPermision && folder != null)
            {
                hasPermision = FolderPermissionController.HasFolderPermission(folder.FolderPermissions, permissionKey);
            }

            return hasPermision;
        }]]></body>
          </codeblock>
        </method>
        <method name="IsPortalIdValid">
          <declaration><![CDATA[private bool IsPortalIdValid(int portalId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1309" sc="9" el="1318" ec="10">InternalServices\ItemListServiceController.cs</location>
            <body hash="8aea1fcda9d0882cb55133d7324b776f"><![CDATA[{
            if (UserInfo.IsSuperUser) return true;
            if (PortalSettings.PortalId == portalId) return true;

            var isAdminUser = PortalSecurity.IsInRole(PortalSettings.AdministratorRoleName);
            if (!isAdminUser) return false;

            var mygroup = GetMyPortalGroup();
            return (mygroup != null && mygroup.Any(p => p.PortalID == portalId));
        }]]></body>
          </codeblock>
        </method>
        <method name="SearchFiles">
          <declaration><![CDATA[public HttpResponseMessage SearchFiles(int parentId, string filter, string searchText, int sortOrder = 0, string permission = null, int portalId = -1)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="302" sc="9" el="310" ec="10">InternalServices\ItemListServiceController.cs</location>
            <body hash="ab2926a161ca57bef9534bef893a9913"><![CDATA[{
            var response = new
            {
                Success = true,
                Tree = GetFilesInternal(portalId, parentId, filter, searchText, sortOrder, permission),
                IgnoreRoot = true
            };
            return Request.CreateResponse(HttpStatusCode.OK, response);
        }]]></body>
          </codeblock>
        </method>
        <method name="SearchFolders">
          <declaration><![CDATA[public HttpResponseMessage SearchFolders(string searchText, int sortOrder = 0, string permission = null, int portalId = -1)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="262" sc="9" el="270" ec="10">InternalServices\ItemListServiceController.cs</location>
            <body hash="7230859a4ec171ecb8b7de94dc3e0122"><![CDATA[{
            var response = new
            {
                Success = true,
                Tree = string.IsNullOrEmpty(searchText) ? GetFoldersInternal(portalId, sortOrder, permission) : SearchFoldersInternal(portalId, searchText, sortOrder, permission),
                IgnoreRoot = true
            };
            return Request.CreateResponse(HttpStatusCode.OK, response);
        }]]></body>
          </codeblock>
        </method>
        <method name="SearchFoldersInternal">
          <declaration><![CDATA[private NTree<ItemListServiceController.ItemDto> SearchFoldersInternal(int portalId, string searchText, int sortOrder, string permission)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="970" sc="9" el="995" ec="10">InternalServices\ItemListServiceController.cs</location>
            <body hash="41e160db3e4f3b3e20a0d60c0b876908"><![CDATA[{
            var tree = new NTree<ItemDto> { Data = new ItemDto { Key = RootKey } };

            if (portalId > -1)
            {
                if (!IsPortalIdValid(portalId))
                {
                    return tree;
                }
            }
            else
            {
                portalId = GetActivePortalId();
            }

            var allFolders = GetPortalFolders(portalId, searchText, permission);
            var folders = allFolders.Select(f => new ItemDto
            {
                Key = f.FolderID.ToString(CultureInfo.InvariantCulture),
                Value = f.FolderName,
                HasChildren = false,
                Selectable = true
            });
            tree.Children = ApplySort(folders, sortOrder).Select(dto => new NTree<ItemDto> { Data = dto }).ToList();
            return tree;
        }]]></body>
          </codeblock>
        </method>
        <method name="SearchPages">
          <declaration><![CDATA[public HttpResponseMessage SearchPages(string searchText, int sortOrder = 0, int portalId = -1, bool includeDisabled = false, bool includeAllTypes = false, bool includeActive = true, bool includeHostPages = false)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="162" sc="9" el="171" ec="10">InternalServices\ItemListServiceController.cs</location>
            <body hash="1b013533b97673f66b4013d7fe99efe3"><![CDATA[{
            var response = new
            {
                Success = true,
                Tree = string.IsNullOrEmpty(searchText) ? GetPagesInternal(portalId, sortOrder, includeDisabled, includeAllTypes, includeActive, includeHostPages)
                            : SearchPagesInternal(portalId, searchText, sortOrder, includeDisabled, includeAllTypes, includeActive, includeHostPages),
                IgnoreRoot = true
            };
            return Request.CreateResponse(HttpStatusCode.OK, response);
        }]]></body>
          </codeblock>
        </method>
        <method name="SearchPagesInPortalGroup">
          <declaration><![CDATA[public HttpResponseMessage SearchPagesInPortalGroup(string searchText, int sortOrder = 0, bool includeDisabled = false, bool includeAllTypes = false, bool includeActive = true, bool includeHostPages = false)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="198" sc="9" el="207" ec="10">InternalServices\ItemListServiceController.cs</location>
            <body hash="21f91d5c46797d367fd6b03d0dcc1645"><![CDATA[{
            var response = new
            {
                Success = true,
                Tree = string.IsNullOrEmpty(searchText) ? GetPagesInPortalGroupInternal(sortOrder)
                        : SearchPagesInPortalGroupInternal(searchText, sortOrder, includeDisabled, includeAllTypes, includeActive, includeHostPages),
                IgnoreRoot = true
            };
            return Request.CreateResponse(HttpStatusCode.OK, response);
        }]]></body>
          </codeblock>
        </method>
        <method name="SearchPagesInPortalGroupInternal">
          <declaration><![CDATA[private NTree<ItemListServiceController.ItemDto> SearchPagesInPortalGroupInternal(string searchText, int sortOrder, bool includeDisabled = false, bool includeAllTypes = false, bool includeActive = false, bool includeHostPages = false)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="597" sc="9" el="611" ec="10">InternalServices\ItemListServiceController.cs</location>
            <body hash="67d0a3ab501b2a8d99c8735905e4b0b6"><![CDATA[{
            var treeNode = new NTree<ItemDto> { Data = new ItemDto { Key = RootKey } };
            var portals = GetPortalGroup(sortOrder);
            treeNode.Children = portals.Select(dto => new NTree<ItemDto> { Data = dto }).ToList();
            foreach (var child in treeNode.Children)
            {
                int portalId;
                if (int.TryParse(child.Data.Key.Replace(PortalPrefix, string.Empty), out portalId))
                {
                    var pageTree = SearchPagesInternal(portalId, searchText, sortOrder, includeDisabled, includeAllTypes, includeActive, includeHostPages);
                    child.Children = pageTree.Children;
                }
            }
            return treeNode;
        }]]></body>
          </codeblock>
        </method>
        <method name="SearchPagesInPortalGroupInternal">
          <declaration><![CDATA[private NTree<ItemListServiceController.ItemDto> SearchPagesInPortalGroupInternal(string treeAsJson, string searchText, int sortOrder, bool includeDisabled = false, bool includeAllTypes = false, bool includeActive = false, bool includeHostPages = false)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="614" sc="9" el="645" ec="10">InternalServices\ItemListServiceController.cs</location>
            <body hash="f59ac0a1f1f7ab7530f10f7eb598c5b2"><![CDATA[{
            var treeNode = new NTree<ItemDto> { Data = new ItemDto { Key = RootKey } };
            var openedNode = Json.Deserialize<NTree<ItemIdDto>>(treeAsJson);
            if (openedNode == null)
            {
                return treeNode;
            }

            var portals = GetPortalGroup(sortOrder);
            treeNode.Children = portals.Select(dto => new NTree<ItemDto> { Data = dto }).ToList();

            if (!openedNode.HasChildren())
            {
                return treeNode;
            }
            foreach (var openedNodeChild in openedNode.Children)
            {
                var portalIdString = openedNodeChild.Data.Id;
                var treeNodeChild = treeNode.Children.Find(child => String.Equals(child.Data.Key, portalIdString, StringComparison.InvariantCultureIgnoreCase));
                if (treeNodeChild == null)
                {
                    continue;
                }
                int portalId;
                if (int.TryParse(treeNodeChild.Data.Key.Replace(PortalPrefix, string.Empty), out portalId))
                {
                    var pageTree = SearchPagesInternal(portalId, searchText, sortOrder, includeDisabled, includeAllTypes, includeActive, includeHostPages);
                    treeNodeChild.Children = pageTree.Children;
                }
            }
            return treeNode;
        }]]></body>
          </codeblock>
        </method>
        <method name="SearchPagesInternal">
          <declaration><![CDATA[private NTree<ItemListServiceController.ItemDto> SearchPagesInternal(int portalId, string searchText, int sortOrder, bool includeDisabled = false, bool includeAllTypes = false, bool includeActive = true, bool includeHostPages = false)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="448" sc="9" el="521" ec="10">InternalServices\ItemListServiceController.cs</location>
            <body hash="28e71783c573c069709397bb0d52a387"><![CDATA[{
            var tree = new NTree<ItemDto> { Data = new ItemDto { Key = RootKey } };

            List<TabInfo> tabs;
            if (portalId == -1)
            {
                portalId = GetActivePortalId();
            }
            else
            {
                if (!IsPortalIdValid(portalId))
                {
                    return tree;
                }
            }

            Func<TabInfo, bool> searchFunc;
            if (String.IsNullOrEmpty(searchText))
            {
                searchFunc = page => true;
            }
            else
            {
                searchFunc = page => page.LocalizedTabName.IndexOf(searchText, StringComparison.InvariantCultureIgnoreCase) > -1;
            }

            if (portalId > -1)
            {
                var includeHiddenTabs = PortalSettings.UserInfo.IsSuperUser || PortalSettings.UserInfo.IsInRole("Administrators");

                tabs = TabController.Instance.GetTabsByPortal(portalId).Where(tab =>
                                        (includeActive || tab.Value.TabID != PortalSettings.ActiveTab.TabID)
                                        && (includeHiddenTabs || tab.Value.IsVisible)
                                        && (includeDisabled || !tab.Value.DisableLink) 
                                        && (includeAllTypes || tab.Value.TabType == TabType.Normal) 
                                        && searchFunc(tab.Value))
                    .OrderBy(tab => tab.Value.TabOrder)
                    .Select(tab => tab.Value)
                    .ToList();

                if (PortalSettings.UserInfo.IsSuperUser && includeHostPages)
                {
                    tabs.AddRange(TabController.Instance.GetTabsByPortal(-1).Where(tab => !tab.Value.DisableLink && searchFunc(tab.Value))
                    .OrderBy(tab => tab.Value.TabOrder)
                    .Select(tab => tab.Value)
                    .ToList());
                }
            }
            else
            {
                if (PortalSettings.UserInfo.IsSuperUser)
                {
                    tabs = TabController.Instance.GetTabsByPortal(-1).Where(tab => !tab.Value.DisableLink && searchFunc(tab.Value))
                    .OrderBy(tab => tab.Value.TabOrder)
                    .Select(tab => tab.Value)
                    .ToList();
                }
                else
                {
                    return tree;
                }
            }

            var pages = tabs.Select(tab => new ItemDto
            {
                Key = tab.TabID.ToString(CultureInfo.InvariantCulture),
                Value = tab.LocalizedTabName,
                HasChildren = false,
                Selectable = true
            });

            tree.Children = ApplySort(pages, sortOrder).Select(dto => new NTree<ItemDto> { Data = dto }).ToList();
            return tree;
        }]]></body>
          </codeblock>
        </method>
        <method name="SearchUser">
          <declaration><![CDATA[public HttpResponseMessage SearchUser(string q)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1249" sc="9" el="1274" ec="10">InternalServices\ItemListServiceController.cs</location>
            <body hash="2db2eb29b294df31422f73702bd03a38"><![CDATA[{
            try
            {
                var portalId = PortalController.GetEffectivePortalId(PortalSettings.PortalId);
                const int numResults = 5;

                // GetUsersAdvancedSearch doesn't accept a comma or a single quote in the query so we have to remove them for now. See issue 20224.
                q = q.Replace(",", "").Replace("'", "");
                if (q.Length == 0) return Request.CreateResponse<SearchResult>(HttpStatusCode.OK, null);

                var results = UserController.Instance.GetUsersBasicSearch(portalId, 0, numResults, "DisplayName", true, "DisplayName", q)
                    .Select(user => new SearchResult
                    {
                        id = user.UserID,
                        name = user.DisplayName,
                        iconfile = string.Format(Globals.UserProfilePicRelativeUrl(), user.UserID, 32, 32),
                    }).ToList();

                return Request.CreateResponse(HttpStatusCode.OK, results.OrderBy(sr => sr.name));
            }
            catch (Exception exc)
            {
                Logger.Error(exc);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="SortFiles">
          <declaration><![CDATA[public HttpResponseMessage SortFiles(int parentId, string filter, int sortOrder = 0, string searchText = "", string permission = null, int portalId = -1)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="290" sc="9" el="298" ec="10">InternalServices\ItemListServiceController.cs</location>
            <body hash="cf96c5d53dd14f1eb3b6314ce73cdf01"><![CDATA[{
            var response = new
            {
                Success = true,
                Tree = string.IsNullOrEmpty(searchText) ? SortFilesInternal(portalId, parentId, filter, sortOrder, permission) : GetFilesInternal(portalId, parentId, filter, searchText, sortOrder, permission),
                IgnoreRoot = true
            };
            return Request.CreateResponse(HttpStatusCode.OK, response);
        }]]></body>
          </codeblock>
        </method>
        <method name="SortFilesInternal">
          <declaration><![CDATA[private NTree<ItemListServiceController.ItemDto> SortFilesInternal(int portalId, int parentId, string filter, int sortOrder, string permissions)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1163" sc="9" el="1168" ec="10">InternalServices\ItemListServiceController.cs</location>
            <body hash="15019488fb1485921e338a1dd4bfe62b"><![CDATA[{
            var sortedTree = new NTree<ItemDto> { Data = new ItemDto { Key = RootKey } };
            var children = GetFileItemsDto(portalId, parentId, filter, string.Empty, permissions, sortOrder).Select(dto => new NTree<ItemDto> { Data = dto }).ToList();
            sortedTree.Children = children;
            return sortedTree;
        }]]></body>
          </codeblock>
        </method>
        <method name="SortFolders">
          <declaration><![CDATA[public HttpResponseMessage SortFolders(string treeAsJson, int sortOrder = 0, string searchText = "", string permission = null, int portalId = -1)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="238" sc="9" el="246" ec="10">InternalServices\ItemListServiceController.cs</location>
            <body hash="a1db7be5c71cb05c8842076fc0035753"><![CDATA[{
            var response = new
            {
                Success = true,
                Tree = string.IsNullOrEmpty(searchText) ? SortFoldersInternal(portalId, treeAsJson, sortOrder, permission) : SearchFoldersInternal(portalId, searchText, sortOrder, permission),
                IgnoreRoot = true
            };
            return Request.CreateResponse(HttpStatusCode.OK, response);
        }]]></body>
          </codeblock>
        </method>
        <method name="SortFoldersInternal">
          <declaration><![CDATA[private NTree<ItemListServiceController.ItemDto> SortFoldersInternal(int portalId, string treeAsJson, int sortOrder, string permissions)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="885" sc="9" el="888" ec="10">InternalServices\ItemListServiceController.cs</location>
            <body hash="f66e6f6b4d750dd91c560785587e03c6"><![CDATA[{
            var tree = Json.Deserialize<NTree<ItemIdDto>>(treeAsJson);
            return SortFoldersInternal(portalId, tree, sortOrder, permissions);
        }]]></body>
          </codeblock>
        </method>
        <method name="SortFoldersInternal">
          <declaration><![CDATA[private NTree<ItemListServiceController.ItemDto> SortFoldersInternal(int portalId, NTree<ItemListServiceController.ItemIdDto> openedNodesTree, int sortOrder, string permissions)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="891" sc="9" el="895" ec="10">InternalServices\ItemListServiceController.cs</location>
            <body hash="8e882e1438cf77ca6c1ac6917496c74f"><![CDATA[{
            var sortedTree = new NTree<ItemDto> { Data = new ItemDto { Key = RootKey } };
            SortFoldersRecursevely(portalId, sortedTree, openedNodesTree, sortOrder, permissions);
            return sortedTree;
        }]]></body>
          </codeblock>
        </method>
        <method name="SortFoldersRecursevely">
          <declaration><![CDATA[private void SortFoldersRecursevely(int portalId, NTree<ItemListServiceController.ItemDto> treeNode, NTree<ItemListServiceController.ItemIdDto> openedNode, int sortOrder, string permissions)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="898" sc="9" el="917" ec="10">InternalServices\ItemListServiceController.cs</location>
            <body hash="ba7fa8d4c01226080751111cb61de3c8"><![CDATA[{
            if (openedNode == null)
            {
                return;
            }
            var children = ApplySort(GetFolderDescendantsInternal(portalId, openedNode.Data.Id, sortOrder, string.Empty, permissions), sortOrder).Select(dto => new NTree<ItemDto> { Data = dto }).ToList();
            treeNode.Children = children;
            if (openedNode.HasChildren())
            {
                foreach (var openedNodeChild in openedNode.Children)
                {
                    var treeNodeChild = treeNode.Children.Find(child => String.Equals(child.Data.Key, openedNodeChild.Data.Id, StringComparison.InvariantCultureIgnoreCase));
                    if (treeNodeChild == null)
                    {
                        continue;
                    }
                    SortFoldersRecursevely(portalId, treeNodeChild, openedNodeChild, sortOrder, permissions);
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="SortPages">
          <declaration><![CDATA[public HttpResponseMessage SortPages(string treeAsJson, int sortOrder = 0, string searchText = "", int portalId = -1, bool includeDisabled = false, bool includeAllTypes = false, bool includeActive = true, bool includeHostPages = false)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="112" sc="9" el="121" ec="10">InternalServices\ItemListServiceController.cs</location>
            <body hash="2b24f24f846fcdf136c3e71b307b8fa8"><![CDATA[{
            var response = new
            {
                Success = true,
                Tree = string.IsNullOrEmpty(searchText) ? SortPagesInternal(portalId, treeAsJson, sortOrder, includeDisabled, includeAllTypes, includeActive, includeHostPages)
                            : SearchPagesInternal(portalId, searchText, sortOrder, includeDisabled, includeAllTypes, includeActive, includeHostPages),
                IgnoreRoot = true
            };
            return Request.CreateResponse(HttpStatusCode.OK, response);
        }]]></body>
          </codeblock>
        </method>
        <method name="SortPagesInPortalGroup">
          <declaration><![CDATA[public HttpResponseMessage SortPagesInPortalGroup(string treeAsJson, int sortOrder = 0, string searchText = "", bool includeDisabled = false, bool includeAllTypes = false, bool includeActive = true, bool includeHostPages = false)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="125" sc="9" el="134" ec="10">InternalServices\ItemListServiceController.cs</location>
            <body hash="7b71ebe0d380be56f10a8df85531a686"><![CDATA[{
            var response = new
            {
                Success = true,
                Tree = string.IsNullOrEmpty(searchText) ? SortPagesInPortalGroupInternal(treeAsJson, sortOrder, includeDisabled, includeAllTypes, includeActive, includeHostPages)
                        : SearchPagesInPortalGroupInternal(treeAsJson, searchText, sortOrder, includeDisabled, includeAllTypes, includeActive, includeHostPages),
                IgnoreRoot = true
            };
            return Request.CreateResponse(HttpStatusCode.OK, response);
        }]]></body>
          </codeblock>
        </method>
        <method name="SortPagesInPortalGroupInternal">
          <declaration><![CDATA[private NTree<ItemListServiceController.ItemDto> SortPagesInPortalGroupInternal(string treeAsJson, int sortOrder, bool includeDisabled = false, bool includeAllTypes = false, bool includeActive = false, bool includeHostPages = false)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="648" sc="9" el="651" ec="10">InternalServices\ItemListServiceController.cs</location>
            <body hash="807831df4a65c7406cc28b2aebd20ad2"><![CDATA[{
            var tree = Json.Deserialize<NTree<ItemIdDto>>(treeAsJson);
			return SortPagesInPortalGroupInternal(tree, sortOrder, includeDisabled, includeAllTypes, includeActive, includeHostPages);
        }]]></body>
          </codeblock>
        </method>
        <method name="SortPagesInPortalGroupInternal">
          <declaration><![CDATA[private NTree<ItemListServiceController.ItemDto> SortPagesInPortalGroupInternal(NTree<ItemListServiceController.ItemIdDto> openedNode, int sortOrder, bool includeDisabled = false, bool includeAllTypes = false, bool includeActive = false, bool includeHostPages = false)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="654" sc="9" el="682" ec="10">InternalServices\ItemListServiceController.cs</location>
            <body hash="c2042e1384870b5ce6ff9af3bc2c8591"><![CDATA[{
            var treeNode = new NTree<ItemDto> { Data = new ItemDto { Key = RootKey } };
            if (openedNode == null)
            {
                return treeNode;
            }
            var portals = GetPortalGroup(sortOrder);
            treeNode.Children = portals.Select(dto => new NTree<ItemDto> { Data = dto }).ToList();
            if (openedNode.HasChildren())
            {
                foreach (var openedNodeChild in openedNode.Children)
                {
                    var portalIdString = openedNodeChild.Data.Id;
                    var treeNodeChild = treeNode.Children.Find(child => String.Equals(child.Data.Key, portalIdString, StringComparison.InvariantCultureIgnoreCase));
                    if (treeNodeChild == null)
                    {
                        continue;
                    }
                    int portalId;
                    if (!int.TryParse(portalIdString.Replace(PortalPrefix, string.Empty), out portalId))
                    {
                        portalId = -1;
                    }
                    var treeOfPages = SortPagesInternal(portalId, openedNodeChild, sortOrder, includeDisabled, includeAllTypes, includeActive, includeHostPages);
                    treeNodeChild.Children = treeOfPages.Children;
                }
            }
            return treeNode;
        }]]></body>
          </codeblock>
        </method>
        <method name="SortPagesInternal">
          <declaration><![CDATA[private NTree<ItemListServiceController.ItemDto> SortPagesInternal(int portalId, string treeAsJson, int sortOrder, bool includeDisabled = false, bool includeAllTypes = false, bool includeActive = false, bool includeHostPages = false)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="579" sc="9" el="582" ec="10">InternalServices\ItemListServiceController.cs</location>
            <body hash="f5107e811885bb50ad3e8ebdafd7b93b"><![CDATA[{
            var tree = Json.Deserialize<NTree<ItemIdDto>>(treeAsJson);
            return SortPagesInternal(portalId, tree, sortOrder, includeDisabled, includeAllTypes, includeActive, includeHostPages);
        }]]></body>
          </codeblock>
        </method>
        <method name="SortPagesInternal">
          <declaration><![CDATA[private NTree<ItemListServiceController.ItemDto> SortPagesInternal(int portalId, NTree<ItemListServiceController.ItemIdDto> openedNodesTree, int sortOrder, bool includeDisabled = false, bool includeAllTypes = false, bool includeActive = false, bool includeHostPages = false)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="585" sc="9" el="594" ec="10">InternalServices\ItemListServiceController.cs</location>
            <body hash="26a08bc9844569886e392d172b8a9fab"><![CDATA[{
			var pages = GetPortalPages(portalId, includeDisabled, includeAllTypes, includeActive, includeHostPages);
            var sortedTree = new NTree<ItemDto> { Data = new ItemDto { Key = RootKey } };
            if (pages == null)
            {
                return sortedTree;
            }
            SortPagesRecursevely(pages, sortedTree, openedNodesTree, sortOrder);
            return sortedTree;
        }]]></body>
          </codeblock>
        </method>
        <method name="SortPagesRecursevely">
          <declaration><![CDATA[private static void SortPagesRecursevely(System.Collections.Generic.IEnumerable<TabInfo> tabs, NTree<ItemListServiceController.ItemDto> treeNode, NTree<ItemListServiceController.ItemIdDto> openedNode, int sortOrder)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="685" sc="9" el="704" ec="10">InternalServices\ItemListServiceController.cs</location>
            <body hash="f1e6b48a8501d2828ae66764a98446b2"><![CDATA[{
            if (openedNode == null)
            {
                return;
            }
            var children = ApplySort(GetChildrenOf(tabs, openedNode.Data.Id), sortOrder).Select(dto => new NTree<ItemDto> { Data = dto }).ToList();
            treeNode.Children = children;
            if (openedNode.HasChildren())
            {
                foreach (var openedNodeChild in openedNode.Children)
                {
                    var treeNodeChild = treeNode.Children.Find(child => String.Equals(child.Data.Key, openedNodeChild.Data.Id, StringComparison.InvariantCultureIgnoreCase));
                    if (treeNodeChild == null)
                    {
                        continue;
                    }
                    SortPagesRecursevely(tabs, treeNodeChild, openedNodeChild, sortOrder);
                }
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="Logger">
          <declaration><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof(ItemListServiceController));]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="PortalPrefix">
          <declaration><![CDATA[private const string PortalPrefix = "P-";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="RootKey">
          <declaration><![CDATA[private const string RootKey = "Root";]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="LanguageServiceController">
      <declaration><![CDATA[public class LanguageServiceController : DnnApiController]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public LanguageServiceController()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="GetNonTranslatedPages">
          <declaration><![CDATA[public HttpResponseMessage GetNonTranslatedPages(string languageCode)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="59" sc="9" el="79" ec="10">InternalServices\LanguageServiceController.cs</location>
            <body hash="1ca3eb186ae5bdf7fb8560cf4c0b8205"><![CDATA[{
            var request = HttpContext.Current.Request;
           var locale = new LocaleController().GetLocale(languageCode);

            List<PageDto> pages = new List<PageDto>();
            if (!IsDefaultLanguage(locale.Code))
            {
                TabController ctl = new TabController();
                var nonTranslated = (from t in ctl.GetTabsByPortal(PortalSettings.PortalId).WithCulture(locale.Code, false).Values where !t.IsTranslated && !t.IsDeleted select t);
                foreach (TabInfo page in nonTranslated)
                {
                    pages.Add(new PageDto()
                    {
                        Name = page.TabName,
                        ViewUrl = DotNetNuke.Common.Globals.NavigateURL(page.TabID),
                        EditUrl = DotNetNuke.Common.Globals.NavigateURL(page.TabID, "Tab", "action=edit", "returntabid=" + PortalSettings.ActiveTab.TabID)
                    });
                }
            }
            return Request.CreateResponse(HttpStatusCode.OK, pages);
        }]]></body>
          </codeblock>
        </method>
        <method name="IsDefaultLanguage">
          <declaration><![CDATA[private bool IsDefaultLanguage(string code)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="53" sc="9" el="55" ec="10">InternalServices\LanguageServiceController.cs</location>
            <body hash="cfca8ac97d8fc2dcbcc4a9fe57e94d72"><![CDATA[{
            return code == PortalSettings.DefaultLanguage;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="MessagingServiceController">
      <declaration><![CDATA[public class MessagingServiceController : DnnApiController]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public MessagingServiceController()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
        <constructor name=".cctor">
          <declaration><![CDATA[static MessagingServiceController()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="49" sc="6" el="49" ec="113">InternalServices\MessagingServiceController.cs</location>
            <body hash="ed4c90e446dd297894db67b2ea5a9643"><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof (MessagingServiceController))]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="Create">
          <declaration><![CDATA[public HttpResponseMessage Create(MessagingServiceController.CreateDTO postData)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="76" sc="9" el="103" ec="10">InternalServices\MessagingServiceController.cs</location>
            <body hash="d4b41d82e0c78e32a4582ec347e3c664"><![CDATA[{
            try
            {
                var portalId = PortalController.GetEffectivePortalId(PortalSettings.PortalId);
                var roleIdsList = string.IsNullOrEmpty(postData.RoleIds) ? null : postData.RoleIds.FromJson<IList<int>>();
                var userIdsList = string.IsNullOrEmpty(postData.UserIds) ? null : postData.UserIds.FromJson<IList<int>>();
                var fileIdsList = string.IsNullOrEmpty(postData.FileIds) ? null : postData.FileIds.FromJson<IList<int>>();

                var roles = roleIdsList != null && roleIdsList.Count > 0
                    ? roleIdsList.Select(id => RoleController.Instance.GetRole(portalId, r => r.RoleID == id)).Where(role => role != null).ToList()
                    : null;

                List<UserInfo> users = null;
                if (userIdsList != null)
                {
                    users = userIdsList.Select(id => UserController.Instance.GetUser(portalId, id)).Where(user => user != null).ToList();
                }

                var message = new Message { Subject = HttpUtility.UrlDecode(postData.Subject), Body = HttpUtility.UrlDecode(postData.Body) };
                MessagingController.Instance.SendMessage(message, roles, users, fileIdsList);
                return Request.CreateResponse(HttpStatusCode.OK, new { Result = "success", Value = message.MessageID });
            }
            catch (Exception exc)
            {
                Logger.Error(exc);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="Search">
          <declaration><![CDATA[public HttpResponseMessage Search(string q)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="107" sc="9" el="148" ec="10">InternalServices\MessagingServiceController.cs</location>
            <body hash="1a940cf23f85fe81d7e3c1d001e9e76e"><![CDATA[{
            try
            {
                var portalId = PortalController.GetEffectivePortalId(PortalSettings.PortalId);
                var isAdmin = UserInfo.IsSuperUser || UserInfo.IsInRole("Administrators");
                const int numResults = 10;

                // GetUsersAdvancedSearch doesn't accept a comma or a single quote in the query so we have to remove them for now. See issue 20224.
                q = q.Replace(",", "").Replace("'", "");
                if (q.Length == 0) return Request.CreateResponse<SearchResult>(HttpStatusCode.OK, null);

                var results = UserController.Instance.GetUsersBasicSearch(portalId, 0, numResults, "DisplayName", true, "DisplayName", q)
                    .Select(user => new SearchResult
                    {
                        id = "user-" + user.UserID,
                        name = user.DisplayName,
                        iconfile = string.Format(Globals.UserProfilePicRelativeUrl(), user.UserID, 32, 32),
                    }).ToList();

                //Roles should be visible to Administrators or User in the Role.
                var roles = RoleController.Instance.GetRolesBasicSearch(portalId, numResults, q);
                results.AddRange(from roleInfo in roles
                                    where
                                        isAdmin ||
                                        UserInfo.Social.Roles.SingleOrDefault(ur => ur.RoleID == roleInfo.RoleID) != null
                                    select new SearchResult
                                    {
                                        id = "role-" + roleInfo.RoleID,
                                        name = roleInfo.RoleName,
                                        iconfile = TestableGlobals.Instance.ResolveUrl(string.IsNullOrEmpty(roleInfo.IconFile)
                                                    ? "~/images/no_avatar.gif"
                                                    : PortalSettings.HomeDirectory.TrimEnd('/') + "/" + roleInfo.IconFile)
                                    });

                return Request.CreateResponse(HttpStatusCode.OK, results.OrderBy(sr => sr.name));
            }
            catch (Exception exc)
            {
                Logger.Error(exc);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="WaitTimeForNextMessage">
          <declaration><![CDATA[public HttpResponseMessage WaitTimeForNextMessage()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="52" sc="9" el="62" ec="10">InternalServices\MessagingServiceController.cs</location>
            <body hash="7c24292453f758188c9a5385be923e5a"><![CDATA[{
            try
            {
                return Request.CreateResponse(HttpStatusCode.OK, new { Result = "success", Value = InternalMessagingController.Instance.WaitTimeForNextMessage(UserInfo) });
            }
            catch (Exception exc)
            {
                Logger.Error(exc);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, exc);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="Logger">
          <declaration><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof(MessagingServiceController));]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="ModuleServiceController">
      <declaration><![CDATA[public class ModuleServiceController : DnnApiController]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public ModuleServiceController()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
        <constructor name=".cctor">
          <declaration><![CDATA[static ModuleServiceController()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="39" sc="6" el="39" ec="110">InternalServices\ModuleServiceController.cs</location>
            <body hash="246d8bc0b814c9fdbf8b331ba5ad347a"><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof (ModuleServiceController))]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="GetModuleShareable">
          <declaration><![CDATA[public HttpResponseMessage GetModuleShareable(int moduleId, int tabId, int portalId = -1)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="51" sc="9" el="81" ec="10">InternalServices\ModuleServiceController.cs</location>
            <body hash="70dcc305cef38329ac1cc91ddbe38ca2"><![CDATA[{
            var requiresWarning = false;
            if (portalId == -1)
            {
                var portalDict = PortalController.GetPortalDictionary();
                portalId = portalDict[tabId];
            }

            DesktopModuleInfo desktopModule;
            if (tabId < 0)
            {
                desktopModule = DesktopModuleController.GetDesktopModule(moduleId, portalId);
            }
            else
            {
                var moduleInfo = ModuleController.Instance.GetModule(moduleId, tabId, false);

                desktopModule = moduleInfo.DesktopModule;

                requiresWarning = moduleInfo.PortalID != PortalSettings.PortalId && desktopModule.Shareable == ModuleSharing.Unknown;
            }

            if (desktopModule == null)
            {
                var message = string.Format("Cannot find module ID {0} (tab ID {1}, portal ID {2})", moduleId, tabId, portalId);
                Logger.Error(message);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, message);
            }

            return Request.CreateResponse(HttpStatusCode.OK, new {Shareable = desktopModule.Shareable.ToString(), RequiresWarning = requiresWarning});
        }]]></body>
          </codeblock>
        </method>
        <method name="MoveModule">
          <declaration><![CDATA[public HttpResponseMessage MoveModule(ModuleServiceController.MoveModuleDTO postData)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="87" sc="9" el="92" ec="10">InternalServices\ModuleServiceController.cs</location>
            <body hash="a6b04bc5fc68d70664a1f67f2d24f6f8"><![CDATA[{
            ModuleController.Instance.UpdateModuleOrder(postData.TabId, postData.ModuleId, postData.ModuleOrder, postData.Pane);
            ModuleController.Instance.UpdateTabModuleOrder(postData.TabId);

            return Request.CreateResponse(HttpStatusCode.OK);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="Logger">
          <declaration><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof(ModuleServiceController));]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="NotificationsServiceController">
      <declaration><![CDATA[public class NotificationsServiceController : DnnApiController]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public NotificationsServiceController()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
        <constructor name=".cctor">
          <declaration><![CDATA[static NotificationsServiceController()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="41" sc="6" el="41" ec="117">InternalServices\NotificationsServiceController.cs</location>
            <body hash="00b13268f52c43a06a77991a1e09f1d1"><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof (NotificationsServiceController))]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="Dismiss">
          <declaration><![CDATA[public HttpResponseMessage Dismiss(NotificationsServiceController.DismissDTO postData)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="50" sc="9" el="67" ec="10">InternalServices\NotificationsServiceController.cs</location>
            <body hash="afb9dfe6e99d6355a7a3b7b02f3d5841"><![CDATA[{
            try
            {
                var recipient = InternalMessagingController.Instance.GetMessageRecipient(postData.NotificationId, UserInfo.UserID);
                if (recipient != null)
                {
                    NotificationsController.Instance.DeleteNotificationRecipient(postData.NotificationId, UserInfo.UserID);
                    return Request.CreateResponse(HttpStatusCode.OK, new {Result = "success"});
                }

                return Request.CreateErrorResponse(HttpStatusCode.BadRequest, "Unable to dismiss notification");
            }
            catch (Exception exc)
            {
                Logger.Error(exc);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetToasts">
          <declaration><![CDATA[public HttpResponseMessage GetToasts()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="72" sc="3" el="76" ec="4">InternalServices\NotificationsServiceController.cs</location>
            <body hash="ccd8dd46aaa4f62db4045810e05aacae"><![CDATA[{
			var toasts = NotificationsController.Instance.GetToasts(this.UserInfo);
			IList<object> convertedObjects = toasts.Select(ToExpandoObject).ToList();
			return Request.CreateResponse(HttpStatusCode.OK, new { Success = true, Toasts = convertedObjects.Take(3) });
		}]]></body>
          </codeblock>
        </method>
        <method name="ToExpandoObject">
          <declaration><![CDATA[private object ToExpandoObject(Notification notification)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="79" sc="3" el="81" ec="4">InternalServices\NotificationsServiceController.cs</location>
            <body hash="64bfb107e2fdb699781d122f27a5c327"><![CDATA[{
			return new {Subject = notification.Subject, Body = notification.Body};
		}]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="Logger">
          <declaration><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof(NotificationsServiceController));]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="PageServiceController">
      <declaration><![CDATA[public class PageServiceController : DnnApiController]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public PageServiceController()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="PublishPage">
          <declaration><![CDATA[public HttpResponseMessage PublishPage(PublishPageDto dto)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="60" sc="9" el="66" ec="10">InternalServices\PageServiceController.cs</location>
            <body hash="2bdf585581b031bdab4a3efffa0abf3f"><![CDATA[{
            var tabId = Request.FindTabId();
            
            TabPublishingController.Instance.SetTabPublishing(tabId, PortalId, dto.Publish);
            
            return Request.CreateResponse(HttpStatusCode.OK);
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateCustomUrl">
          <declaration><![CDATA[public HttpResponseMessage UpdateCustomUrl(SaveUrlDto dto)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="71" sc="9" el="170" ec="10">InternalServices\PageServiceController.cs</location>
            <body hash="164066b716db8cc6fee2751cb11f886b"><![CDATA[{
            var urlPath = dto.Path.ValueOrEmpty().TrimStart('/');
            bool modified;
            //Clean Url
            var options = UrlRewriterUtils.ExtendOptionsForCustomURLs( UrlRewriterUtils.GetOptionsFromSettings(new FriendlyUrlSettings(PortalSettings.PortalId)) );
            
            //now clean the path
            urlPath = FriendlyUrlController.CleanNameForUrl(urlPath, options, out modified);
            if (modified)
            {
                return Request.CreateResponse(HttpStatusCode.OK,
                    new
                    {
                        Success = false,
                        ErrorMessage = Localization.GetString("CustomUrlPathCleaned.Error", Localization.GlobalResourceFile),
                        SuggestedUrlPath = "/" + urlPath
                    });
            }

            //Validate for uniqueness
            urlPath = FriendlyUrlController.ValidateUrl(urlPath, -1, PortalSettings, out modified);
            if (modified)
            {
                return Request.CreateResponse(HttpStatusCode.OK,
                    new
                    {
                        Success = false,
                        ErrorMessage = Localization.GetString("UrlPathNotUnique.Error", Localization.GlobalResourceFile),
                        SuggestedUrlPath = "/" + urlPath
                    });
            }

            var tab = PortalSettings.ActiveTab;
            var cultureCode = LocaleController.Instance.GetLocales(PortalId)
                                    .Where(l => l.Value.KeyID == dto.LocaleKey)
                                    .Select(l => l.Value.Code)
                                    .SingleOrDefault();

            if (dto.StatusCodeKey.ToString(CultureInfo.InvariantCulture) == "200")
            {
                //We need to check if we are updating a current url or creating a new 200
                var tabUrl = tab.TabUrls.SingleOrDefault(t => t.SeqNum == dto.Id
                                                                && t.HttpStatus == "200");
                if (tabUrl == null)
                {
                    //Just create Url
                    tabUrl = new TabUrlInfo
                                    {
                                        TabId = tab.TabID,
                                        SeqNum = dto.Id,
                                        PortalAliasId = dto.SiteAliasKey,
                                        PortalAliasUsage = (PortalAliasUsageType)dto.SiteAliasUsage,
                                        QueryString = dto.QueryString.ValueOrEmpty(),
                                        Url = dto.Path.ValueOrEmpty(),
                                        CultureCode = cultureCode,
                                        HttpStatus = dto.StatusCodeKey.ToString(CultureInfo.InvariantCulture),
                                        IsSystem = dto.IsSystem // false
                                    };
                    TabController.Instance.SaveTabUrl(tabUrl, PortalId, true);
                }
                else
                {
                    //Change the original 200 url to a redirect
                    tabUrl.HttpStatus = "301";
                    tabUrl.SeqNum = dto.Id;
                    TabController.Instance.SaveTabUrl(tabUrl, PortalId, true);

                    //Add new custom url
                    tabUrl.Url = dto.Path.ValueOrEmpty();
                    tabUrl.HttpStatus = "200";
                    tabUrl.SeqNum = tab.TabUrls.Max(t => t.SeqNum) + 1;
                    TabController.Instance.SaveTabUrl(tabUrl, PortalId, true);
                }
            }
            else
            {
                //Just update the url
                var tabUrl = new TabUrlInfo
                                    {
                                        TabId = tab.TabID,
                                        SeqNum = dto.Id,
                                        PortalAliasId = dto.SiteAliasKey,
                                        PortalAliasUsage = (PortalAliasUsageType)dto.SiteAliasUsage,
                                        QueryString = dto.QueryString.ValueOrEmpty(),
                                        Url = dto.Path.ValueOrEmpty(),
                                        CultureCode = cultureCode,
                                        HttpStatus = dto.StatusCodeKey.ToString(CultureInfo.InvariantCulture),
                                        IsSystem = dto.IsSystem // false
                                    };
                TabController.Instance.SaveTabUrl(tabUrl, PortalId, true);
            }


            var response = new
            {
                Success = true,
            };

            return Request.CreateResponse(HttpStatusCode.OK, response);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_portalId">
          <declaration><![CDATA[private int? _portalId;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="PortalId">
          <declaration><![CDATA[protected int PortalId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="46" sc="13" el="52" ec="14">InternalServices\PageServiceController.cs</location>
            <body hash="a4f6f395aa10d12a4a81a025af1117b2"><![CDATA[{
                if (!_portalId.HasValue)
                {
                    _portalId = PortalSettings.ActiveTab.IsSuperTab ? -1 : PortalSettings.PortalId;
                }
                return _portalId.Value;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="ProfileServiceController">
      <declaration><![CDATA[public class ProfileServiceController : DnnApiController]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public ProfileServiceController()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="AddProperty">
          <declaration><![CDATA[private static void AddProperty(System.Collections.Generic.ICollection<ProfileServiceController.SearchResult> results, string field, string searchTerm)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="48" sc="9" el="53" ec="10">InternalServices\ProfileServiceController.cs</location>
            <body hash="f0e6738eeac8cef48eabeefce1764114"><![CDATA[{
            if (field.ToLowerInvariant().Contains(searchTerm.ToLowerInvariant().Trim()))
            {
                results.Add(new SearchResult { id = field, name = field });
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="Search">
          <declaration><![CDATA[public HttpResponseMessage Search(string q)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="58" sc="9" el="82" ec="10">InternalServices\ProfileServiceController.cs</location>
            <body hash="a3498f91c1b451eef7fa55b9e626702d"><![CDATA[{
            var portalId = PortalController.GetEffectivePortalId(PortalSettings.PortalId);

            var controller = new ListController();

			ListEntryInfo imageType = controller.GetListEntryInfo("DataType", "Image");

            IList<SearchResult> results = new List<SearchResult>();
            foreach (var definition in ProfileController.GetPropertyDefinitionsByPortal(portalId)
                                        .Cast<ProfilePropertyDefinition>()
										.Where(definition => definition.DataType != imageType.EntryID))
            {
                AddProperty(results, definition.PropertyName, q);
            }

            AddProperty(results, "Email", q);
            AddProperty(results, "DisplayName", q);
            AddProperty(results, "Username", q);
            AddProperty(results, "Password", q);
            AddProperty(results, "PasswordConfirm", q);
            AddProperty(results, "PasswordQuestion", q);
            AddProperty(results, "PasswordAnswer", q);

            return Request.CreateResponse(HttpStatusCode.OK, results.OrderBy(sr => sr.id));
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateVanityUrl">
          <declaration><![CDATA[public HttpResponseMessage UpdateVanityUrl(ProfileServiceController.VanityUrlDTO vanityUrl)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="88" sc="9" el="131" ec="10">InternalServices\ProfileServiceController.cs</location>
            <body hash="a1aa66b724a70dfd34713ae50b8566d0"><![CDATA[{
            bool modified;

            //Clean Url
            var options = UrlRewriterUtils.GetOptionsFromSettings(new FriendlyUrlSettings(PortalSettings.PortalId));
            var cleanUrl = FriendlyUrlController.CleanNameForUrl(vanityUrl.Url, options, out modified);


            if (modified)
            {
                return Request.CreateResponse(HttpStatusCode.OK, 
                    new {
                            Result = "warning",
                            Title = Localization.GetString("CleanWarningTitle", Localization.SharedResourceFile),
                            Message = Localization.GetString("ProfileUrlCleaned", Localization.SharedResourceFile),
                            SuggestedUrl = cleanUrl
                        });
            }

            //Validate for uniqueness
            var uniqueUrl = FriendlyUrlController.ValidateUrl(cleanUrl, -1, PortalSettings, out modified);


            if (modified)
            {
                return Request.CreateResponse(HttpStatusCode.OK,
                                              new
                                                  {
                                                      Result = "warning",
                                                      Title = Localization.GetString("DuplicateUrlWarningTitle", Localization.SharedResourceFile),
                                                      Message = Localization.GetString("ProfileUrlNotUnique", Localization.SharedResourceFile),
                                                      SuggestedUrl = uniqueUrl
                                                  });
            }

            var user = PortalSettings.UserInfo;
            user.VanityUrl = uniqueUrl;
            UserController.UpdateUser(PortalSettings.PortalId, user);

            DataCache.RemoveCache(string.Format(CacheController.VanityUrlLookupKey, PortalSettings.PortalId));

            //Url is clean and validated so we can update the User
            return Request.CreateResponse(HttpStatusCode.OK, new { Result = "success" });
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="PublishPageDto">
      <declaration><![CDATA[public class PublishPageDto]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public PublishPageDto()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="Publish">
          <declaration><![CDATA[public bool Publish]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="RelationshipServiceController">
      <declaration><![CDATA[public class RelationshipServiceController : DnnApiController]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public RelationshipServiceController()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
        <constructor name=".cctor">
          <declaration><![CDATA[static RelationshipServiceController()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="40" sc="6" el="40" ec="116">InternalServices\RelationshipServiceController.cs</location>
            <body hash="50c9ad96af26a2586094c685fb24743b"><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof (RelationshipServiceController))]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="AcceptFriend">
          <declaration><![CDATA[public HttpResponseMessage AcceptFriend(RelationshipServiceController.NotificationDTO postData)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="49" sc="9" el="82" ec="10">InternalServices\RelationshipServiceController.cs</location>
            <body hash="e4300def4c0cf2d02c5872513f70c1b1"><![CDATA[{
            var success = false;

            try
            {
                var recipient = InternalMessagingController.Instance.GetMessageRecipient(postData.NotificationId, UserInfo.UserID);
                if (recipient != null)
                {
                    var notification = NotificationsController.Instance.GetNotification(postData.NotificationId);
                    int userRelationshipId;
                    if (int.TryParse(notification.Context, out userRelationshipId))
                    {
                        var userRelationship = RelationshipController.Instance.GetUserRelationship(userRelationshipId);
                        if (userRelationship != null)
                        {
                            var friend = UserController.GetUserById(PortalSettings.PortalId, userRelationship.UserId);
                            FriendsController.Instance.AcceptFriend(friend);
                            success = true;
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                Logger.Error(exc);
            }
            
            if(success)
            {
                return Request.CreateResponse(HttpStatusCode.OK, new {Result = "success"});
            }

            return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, "unable to process notification");
        }]]></body>
          </codeblock>
        </method>
        <method name="FollowBack">
          <declaration><![CDATA[public HttpResponseMessage FollowBack(RelationshipServiceController.NotificationDTO postData)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="88" sc="9" el="120" ec="10">InternalServices\RelationshipServiceController.cs</location>
            <body hash="8b94c6c756e71fc277e955b4626821b5"><![CDATA[{
            var success = false;

            try
            {
                var recipient = InternalMessagingController.Instance.GetMessageRecipient(postData.NotificationId, UserInfo.UserID);
                if (recipient != null)
                {
                    var notification = NotificationsController.Instance.GetNotification(postData.NotificationId);
                    int targetUserId;
                    if (int.TryParse(notification.Context, out targetUserId))
                    {
                        var targetUser = UserController.GetUserById(PortalSettings.PortalId, targetUserId);

                        FollowersController.Instance.FollowUser(targetUser);
                        NotificationsController.Instance.DeleteNotificationRecipient(postData.NotificationId, UserInfo.UserID);

                        success = true;
                    }
                }
            }
            catch (Exception exc)
            {
                Logger.Error(exc);
            }

            if (success)
            {
                return Request.CreateResponse(HttpStatusCode.OK, new { Result = "success" });
            }

            return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, "unable to process notification");
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="Logger">
          <declaration><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof(RelationshipServiceController));]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="SearchServiceController">
      <declaration><![CDATA[public class SearchServiceController : DnnApiController]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public SearchServiceController()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="68" sc="9" el="72" ec="10">InternalServices\SearchServiceController.cs</location>
            <body hash="8cf0103e3becd7324fed960755cace50"><![CDATA[public SearchServiceController()
        {
            var modDef = ModuleDefinitionController.GetModuleDefinitionByFriendlyName("Text/HTML");
            HtmlModuleDefitionId = modDef != null ? modDef.ModuleDefID : -1;
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[internal SearchServiceController(int htmlModuleDefitionId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="75" sc="9" el="80" ec="10">InternalServices\SearchServiceController.cs</location>
            <body hash="fc84222c31bbc4a606ce1e198c733de8"><![CDATA[internal SearchServiceController(int htmlModuleDefitionId)//, TabController newtabController, ModuleController newmoduleController)
        {
            HtmlModuleDefitionId = htmlModuleDefitionId;
            //_tabController = newtabController;
            //_moduleController = newmoduleController;
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="AddStopWords">
          <declaration><![CDATA[public HttpResponseMessage AddStopWords(SearchServiceController.StopWordsDto stopWords)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="575" sc="9" el="578" ec="10">InternalServices\SearchServiceController.cs</location>
            <body hash="51133b961e58a6ad9b1d307e2b2fa641"><![CDATA[{
            var stopWordsId = SearchHelper.Instance.AddSearchStopWords(stopWords.Words, stopWords.PortalId, stopWords.Culture);
            return Request.CreateResponse(HttpStatusCode.OK, new { Id = stopWordsId });
        }]]></body>
          </codeblock>
        </method>
        <method name="AddSynonymsGroup">
          <declaration><![CDATA[public HttpResponseMessage AddSynonymsGroup(SearchServiceController.SynonymsGroupDto synonymsGroup)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="538" sc="9" el="542" ec="10">InternalServices\SearchServiceController.cs</location>
            <body hash="ba79a09a8d2cf4f87db548ebcd387919"><![CDATA[{
            string duplicateWord;
            var synonymsGroupId = SearchHelper.Instance.AddSynonymsGroup(synonymsGroup.Tags, synonymsGroup.PortalId, synonymsGroup.Culture, out duplicateWord);
            return Request.CreateResponse(HttpStatusCode.OK, new { Id = synonymsGroupId, DuplicateWord = duplicateWord });
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteStopWords">
          <declaration><![CDATA[public HttpResponseMessage DeleteStopWords(SearchServiceController.StopWordsDto stopWords)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="597" sc="9" el="600" ec="10">InternalServices\SearchServiceController.cs</location>
            <body hash="7ed93b755bc1b520967b7b91ff98eccf"><![CDATA[{
            SearchHelper.Instance.DeleteSearchStopWords(stopWords.Id, stopWords.PortalId, stopWords.Culture);
            return Request.CreateResponse(HttpStatusCode.OK);
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteSynonymsGroup">
          <declaration><![CDATA[public HttpResponseMessage DeleteSynonymsGroup(SearchServiceController.SynonymsGroupDto synonymsGroup)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="563" sc="9" el="566" ec="10">InternalServices\SearchServiceController.cs</location>
            <body hash="e585ccaf3453419d147b7159842336b2"><![CDATA[{
            SearchHelper.Instance.DeleteSynonymsGroup(synonymsGroup.Id, synonymsGroup.PortalId, synonymsGroup.Culture);
            return Request.CreateResponse(HttpStatusCode.OK);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetBasicViews">
          <declaration><![CDATA[internal System.Collections.Generic.IEnumerable<BasicView> GetBasicViews(SearchQuery searchQuery, out int totalHits)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="370" sc="9" el="382" ec="10">InternalServices\SearchServiceController.cs</location>
            <body hash="0edb1e4380835386824a6d209f8c4d96"><![CDATA[{
            var sResult = SearchController.Instance.SiteSearch(searchQuery);
            totalHits = sResult.TotalHits;

            return sResult.Results.Select(result => 
                new BasicView
                    {
                        Title = GetTitle(result),
                        DocumentTypeName = InternalSearchController.Instance.GetSearchDocumentTypeDisplayName(result),
                        DocumentUrl = result.Url,
                        Snippet = result.Snippet,
                    });
        }]]></body>
          </codeblock>
        </method>
        <method name="GetGroupedBasicViews">
          <declaration><![CDATA[internal System.Collections.Generic.List<GroupedBasicView> GetGroupedBasicViews(SearchQuery query, SearchContentSource userSearchSource, int portalId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="326" sc="9" el="367" ec="10">InternalServices\SearchServiceController.cs</location>
            <body hash="2bfa18200f1d800fbe39259ae2eabd6f"><![CDATA[{
            int totalHists;
            var results = new List<GroupedBasicView>();
            var previews = GetBasicViews(query, out totalHists);

            foreach (var preview in previews)
            {
                //if the document type is user, then try to add user pic into preview's custom attributes.
                if (userSearchSource != null && preview.DocumentTypeName == userSearchSource.LocalizedName)
                {
                    var match = Regex.Match(preview.DocumentUrl, "userid(/|\\|=)(\\d+)", RegexOptions.IgnoreCase);
                    if (match.Success)
                    {
                        var userid = Convert.ToInt32(match.Groups[2].Value);
                        var user = UserController.Instance.GetUserById(portalId, userid); 
                        if (user != null)
                        {
                            preview.Attributes.Add("Avatar", user.Profile.PhotoURL);
                        }
                    }
                }

                var groupedResult = results.SingleOrDefault(g => g.DocumentTypeName == preview.DocumentTypeName);
                if (groupedResult != null)
                {
                    if (!groupedResult.Results.Any(r => string.Equals(r.DocumentUrl, preview.DocumentUrl)))
                        groupedResult.Results.Add(new BasicView
                        {
                            Title = preview.Title,
                            Snippet = preview.Snippet,
                            DocumentUrl = preview.DocumentUrl,
                            Attributes = preview.Attributes
                        });
                }
                else
                {
                    results.Add(new GroupedBasicView(preview));
                }
            }

            return results;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetGroupedDetailViews">
          <declaration><![CDATA[internal System.Collections.Generic.IEnumerable<GroupedDetailView> GetGroupedDetailViews(SearchQuery searchQuery, int userSearchTypeId, out int totalHits, out bool more)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="234" sc="9" el="323" ec="10">InternalServices\SearchServiceController.cs</location>
            <body hash="5a5ddf19bbe4d3e30f046bdec5317f86"><![CDATA[{
            var searchResults = SearchController.Instance.SiteSearch(searchQuery);
            totalHits = searchResults.TotalHits;
            more = searchResults.Results.Count == searchQuery.PageSize;

            var groups = new List<GroupedDetailView>();
            var tabGroups = new Dictionary<string, IList<SearchResult>>();
           
            foreach (var result in searchResults.Results)
            {
                //var key = result.TabId + result.Url;
                var key = result.Url;
                if (!tabGroups.ContainsKey(key))
                {
                    tabGroups.Add(key, new List<SearchResult> { result });
                }
                else
                {
                    //when the result is a user search type, we should only show one result
                    // and if duplicate, we should also reduce the totalHit number.
                    if (result.SearchTypeId != userSearchTypeId ||
                        tabGroups[key].All(r => r.Url != result.Url))
                    {
                        tabGroups[key].Add(result);
                    }
                    else
                    {
                        totalHits--;
                    }
                }
            }

            foreach (var results in tabGroups.Values)
            {
                var group = new GroupedDetailView();

                //first entry
                var first = results[0];
                group.Title = first.Title;
                group.DocumentUrl = first.Url;

                //Find a different title for multiple entries with same url
                if (results.Count > 1)
                {
                    if (first.TabId > 0)
                    {
                        var tab = TabController.Instance.GetTab(first.TabId, first.PortalId, false);
                        if (tab != null)
                            group.Title = tab.TabName;
                    }
                    else if (first.ModuleId > 0)
                    {
                        var tabTitle = GetTabTitleFromModuleId(first.ModuleId);
                        if (!string.IsNullOrEmpty(tabTitle))
                        {
                            group.Title = tabTitle;
                        }
                    }
                }
                else if (first.ModuleDefId > 0 && first.ModuleDefId == HtmlModuleDefitionId) //special handling for Html module
                {
                    var tabTitle = GetTabTitleFromModuleId(first.ModuleId);
                    if (!string.IsNullOrEmpty(tabTitle))
                    {
                        group.Title = tabTitle + " > " + first.Title;
                        first.Title = group.Title;
                    }
                }

                foreach (var result in results)
                {
                    var detail = new DetailedView
                    {
                        Title = result.Title,
                        DocumentTypeName = InternalSearchController.Instance.GetSearchDocumentTypeDisplayName(result),
                        DocumentUrl = result.Url,
                        Snippet = result.Snippet,
                        DisplayModifiedTime = result.DisplayModifiedTime,
                        Tags = result.Tags.ToList(),
                        AuthorProfileUrl = result.AuthorUserId > 0 ? Globals.UserProfileURL(result.AuthorUserId) : string.Empty,
                        AuthorName = result.AuthorName
                    };
                    group.Results.Add(detail);
                }

                groups.Add(group);
            }

            return groups;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetModulesByDefinition">
          <declaration><![CDATA[private static System.Collections.ArrayList GetModulesByDefinition(int portalID, string friendlyName)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="105" sc="9" el="110" ec="10">InternalServices\SearchServiceController.cs</location>
            <body hash="4d3fbe971482ee7338c22d104278e96a"><![CDATA[{
            var cacheKey = string.Format(ModuleInfosCacheKey, portalID);
            return CBO.GetCachedObject<ArrayList>(
                new CacheItemArgs(cacheKey, ModuleInfosCacheTimeOut, ModuleInfosCachePriority),
                args => CBO.FillCollection(DataProvider.Instance().GetModuleByDefinition(portalID, friendlyName), typeof(ModuleInfo)));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetSearchContentSources">
          <declaration><![CDATA[private System.Collections.Generic.IList<SearchContentSource> GetSearchContentSources(System.Collections.Generic.IList<string> typesList)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="210" sc="9" el="228" ec="10">InternalServices\SearchServiceController.cs</location>
            <body hash="130edac550a57c73bb7cbc804e9b85ba"><![CDATA[{
            var sources = new List<SearchContentSource>();
            var list = InternalSearchController.Instance.GetSearchContentSourceList(PortalSettings.PortalId);

            if (typesList.Any())
            {
                foreach (var contentSources in typesList.Select(t1 => list.Where(src => string.Equals(src.LocalizedName, t1, StringComparison.OrdinalIgnoreCase))))
                {
                    sources.AddRange(contentSources);
                }
            }
            else
            {
                // no types fitler specified, add all available content sources
                sources.AddRange(list);
            }

            return sources;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetSearchModule">
          <declaration><![CDATA[private ModuleInfo GetSearchModule()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="113" sc="9" el="122" ec="10">InternalServices\SearchServiceController.cs</location>
            <body hash="9808bb999463a5e51b0c71c7d55b0258"><![CDATA[{
            var arrModules = GetModulesByDefinition(PortalSettings.PortalId, "Search Results");
	        ModuleInfo findModule = null;
            if (arrModules.Count > 1)
            {
                findModule = arrModules.Cast<ModuleInfo>().FirstOrDefault(searchModule => searchModule.CultureCode == PortalSettings.CultureCode);
            }

            return findModule ?? (arrModules.Count > 0 ? (ModuleInfo)arrModules[0] : null);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetSearchModuleDefIds">
          <declaration><![CDATA[private static System.Collections.Generic.IEnumerable<int> GetSearchModuleDefIds(System.Collections.IDictionary settings, System.Collections.Generic.IEnumerable<SearchContentSource> searchContentSources)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="182" sc="9" el="207" ec="10">InternalServices\SearchServiceController.cs</location>
            <body hash="e501350aa73332fc92e9bdec43ed05be"><![CDATA[{
            var list = new List<int>();
            var configuredList = new List<string>();
            if (settings != null && !string.IsNullOrEmpty(Convert.ToString(settings["ScopeForFilters"])))
            {
                configuredList = Convert.ToString(settings["ScopeForFilters"]).Split('|').ToList();
            }

            // check content source in configured list or not
            foreach (var contentSource in searchContentSources)
            {
                if (contentSource.IsPrivate) continue; ;
                if (configuredList.Count > 0)
                {
                    if (configuredList.Any(l => l.Contains(contentSource.LocalizedName)) && contentSource.ModuleDefinitionId > 0) // in configured list
                        list.Add(contentSource.ModuleDefinitionId);
                }
                else
                {
                    if (contentSource.ModuleDefinitionId > 0)
                        list.Add(contentSource.ModuleDefinitionId);
                }
            }

            return list;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetSearchModuleSettings">
          <declaration><![CDATA[private System.Collections.Hashtable GetSearchModuleSettings()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="125" sc="9" el="133" ec="10">InternalServices\SearchServiceController.cs</location>
            <body hash="61d2527aa1a7f4dd25b9ef6e5489e6ed"><![CDATA[{
            if (ActiveModule != null && ActiveModule.ModuleDefinition.FriendlyName == "Search Results")
            {
                return ActiveModule.ModuleSettings;
            }

            var searchModule = GetSearchModule();
            return searchModule != null ? searchModule.ModuleSettings : null;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetSearchPortalIds">
          <declaration><![CDATA[private System.Collections.Generic.List<int> GetSearchPortalIds(System.Collections.IDictionary settings, int portalId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="136" sc="9" el="152" ec="10">InternalServices\SearchServiceController.cs</location>
            <body hash="6f4d49ce75f369534839c79e60663092"><![CDATA[{
            var list = new List<int>();
            if (settings != null && !string.IsNullOrEmpty(Convert.ToString(settings["ScopeForPortals"])))
            {
                list = Convert.ToString(settings["ScopeForPortals"]).Split('|').Select(s => Convert.ToInt32(s)).ToList();
            }

            if (portalId == -1) portalId = PortalSettings.ActiveTab.PortalID;
            if (portalId > -1 && !list.Contains(portalId)) list.Add(portalId);

            //Add Host 
            var userInfo = UserInfo;
            if (userInfo.IsSuperUser)
                list.Add(-1);

            return list;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetSearchTypeIds">
          <declaration><![CDATA[private static System.Collections.Generic.List<int> GetSearchTypeIds(System.Collections.IDictionary settings, System.Collections.Generic.IEnumerable<SearchContentSource> searchContentSources)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="155" sc="9" el="179" ec="10">InternalServices\SearchServiceController.cs</location>
            <body hash="6d4cf36372c76a6438ec13a028250e24"><![CDATA[{
            var list = new List<int>();
            var configuredList = new List<string>();
            if (settings != null && !string.IsNullOrEmpty(Convert.ToString(settings["ScopeForFilters"])))
            {
                configuredList = Convert.ToString(settings["ScopeForFilters"]).Split('|').ToList();
            }

            // check content source in configured list or not
            foreach (var contentSource in searchContentSources)
            {
                if (contentSource.IsPrivate) continue;
                if (configuredList.Count > 0)
                {
                    if (configuredList.Any(l => l.Contains(contentSource.LocalizedName))) // in configured list
                        list.Add(contentSource.SearchTypeId);
                }
                else
                {
                    list.Add(contentSource.SearchTypeId);
                }
            }

            return list.Distinct().ToList();
        }]]></body>
          </codeblock>
        </method>
        <method name="GetTabTitleCallBack">
          <declaration><![CDATA[private object GetTabTitleCallBack(CacheItemArgs cacheItemArgs)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="411" sc="9" el="420" ec="10">InternalServices\SearchServiceController.cs</location>
            <body hash="bef9c6cbfe138f772f06d1334506f4f6"><![CDATA[{
            var moduleId = (int)cacheItemArgs.ParamList[0];
            var moduleInfo = ModuleController.Instance.GetModule(moduleId, Null.NullInteger, true);
            if (moduleInfo != null)
            {
                return moduleInfo.ParentTab.TabName;
            }

            return string.Empty;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetTabTitleFromModuleId">
          <declaration><![CDATA[private string GetTabTitleFromModuleId(int moduleId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="403" sc="9" el="408" ec="10">InternalServices\SearchServiceController.cs</location>
            <body hash="6bf3ef6c86efe46dbcfae8764b53ee40"><![CDATA[{
            // no manual clearing of the cache exists; let is just expire
            var cacheKey = string.Format(ModuleTitleCacheKey, moduleId);

            return CBO.GetCachedObject<string>(new CacheItemArgs(cacheKey, ModuleTitleCacheTimeOut, ModuleTitleCachePriority, moduleId), GetTabTitleCallBack);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetTitle">
          <declaration><![CDATA[private string GetTitle(SearchResult result)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="385" sc="9" el="396" ec="10">InternalServices\SearchServiceController.cs</location>
            <body hash="03fd2a6ef5d7d584258507fe600a6938"><![CDATA[{
            if (result.ModuleDefId > 0 && result.ModuleDefId == HtmlModuleDefitionId) //special handling for Html module
            {
                var tabTitle = GetTabTitleFromModuleId(result.ModuleId);
                if (!string.IsNullOrEmpty(tabTitle))
                {
                    return tabTitle + " > " + result.Title;
                }
            }

            return result.Title;
        }]]></body>
          </codeblock>
        </method>
        <method name="IsWildCardEnabledForModule">
          <declaration><![CDATA[private bool IsWildCardEnabledForModule()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="87" sc="9" el="96" ec="10">InternalServices\SearchServiceController.cs</location>
            <body hash="aced1ea24f612baa8b49e96347908d5f"><![CDATA[{
            var searchModuleSettings = GetSearchModuleSettings();
            var enableWildSearch = true;
            if (!string.IsNullOrEmpty(Convert.ToString(searchModuleSettings["EnableWildSearch"])))
            {
                enableWildSearch = Convert.ToBoolean(searchModuleSettings["EnableWildSearch"]);
            }

            return enableWildSearch;
        }]]></body>
          </codeblock>
        </method>
        <method name="Preview">
          <declaration><![CDATA[public HttpResponseMessage Preview(string keywords, string culture, int forceWild = 1, int portal = -1)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="429" sc="9" el="476" ec="10">InternalServices\SearchServiceController.cs</location>
            <body hash="3a1acfa6de022a4635abb1047669d472"><![CDATA[{
            string cleanedKeywords;
            keywords = (keywords ?? string.Empty).Trim();
            var tags = SearchQueryStringParser.Instance.GetTags(keywords, out cleanedKeywords);
            var beginModifiedTimeUtc = SearchQueryStringParser.Instance.GetLastModifiedDate(cleanedKeywords, out cleanedKeywords);
            var searchTypes = SearchQueryStringParser.Instance.GetSearchTypeList(keywords, out cleanedKeywords);
            
            var contentSources = GetSearchContentSources(searchTypes);
            var settings = GetSearchModuleSettings();
            var searchTypeIds = GetSearchTypeIds(settings, contentSources);
            var moduleDefids = GetSearchModuleDefIds(settings, contentSources);
            var portalIds = GetSearchPortalIds(settings, portal);

            var userSearchTypeId = SearchHelper.Instance.GetSearchTypeByName("user").SearchTypeId;
            var userSearchSource = contentSources.FirstOrDefault(s => s.SearchTypeId == userSearchTypeId);

            var results = new List<GroupedBasicView>();
            if (portalIds.Any() && searchTypeIds.Any() &&
                (!string.IsNullOrEmpty(cleanedKeywords) || tags.Any()))
            {
                var query = new SearchQuery
                {
                    KeyWords = cleanedKeywords,
                    Tags = tags,
                    PortalIds = portalIds,
                    SearchTypeIds = searchTypeIds,
                    ModuleDefIds = moduleDefids,
                    BeginModifiedTimeUtc = beginModifiedTimeUtc,
                    PageIndex = 1,
                    PageSize = 5,
                    TitleSnippetLength = 40,
                    BodySnippetLength = 100,
                    CultureCode = culture,
                    WildCardSearch = forceWild > 0 
                };

                try
                {
                    results = GetGroupedBasicViews(query, userSearchSource, PortalSettings.PortalId);
                }
                catch (Exception ex)
                {
                    Services.Exceptions.Exceptions.LogException(ex);
                }
            }

            return Request.CreateResponse(HttpStatusCode.OK, results);
        }]]></body>
          </codeblock>
        </method>
        <method name="Search">
          <declaration><![CDATA[public HttpResponseMessage Search(string search, string culture, int pageIndex, int pageSize, int sortOption)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="481" sc="9" el="530" ec="10">InternalServices\SearchServiceController.cs</location>
            <body hash="cd6a8bdaac02ab605760853869779a19"><![CDATA[{
            string cleanedKeywords;
            search = (search ?? string.Empty).Trim();
            var tags = SearchQueryStringParser.Instance.GetTags(search, out cleanedKeywords);
            var beginModifiedTimeUtc = SearchQueryStringParser.Instance.GetLastModifiedDate(cleanedKeywords, out cleanedKeywords);
            var searchTypes = SearchQueryStringParser.Instance.GetSearchTypeList(cleanedKeywords, out cleanedKeywords);

            var contentSources = GetSearchContentSources(searchTypes);
            var settings = GetSearchModuleSettings();
            var searchTypeIds = GetSearchTypeIds(settings, contentSources);
            var moduleDefids = GetSearchModuleDefIds(settings, contentSources);
            var portalIds = GetSearchPortalIds(settings, -1);
            var userSearchTypeId = SearchHelper.Instance.GetSearchTypeByName("user").SearchTypeId;

            var more = false;
            var totalHits = 0;
            var results = new List<GroupedDetailView>();
            if (portalIds.Any() && searchTypeIds.Any() && 
                (!string.IsNullOrEmpty(cleanedKeywords) || tags.Any()))
            {
                var query = new SearchQuery
                    {
                        KeyWords = cleanedKeywords,
                        Tags = tags,
                        PortalIds = portalIds,
                        SearchTypeIds = searchTypeIds,
                        ModuleDefIds = moduleDefids,
                        BeginModifiedTimeUtc = beginModifiedTimeUtc,
                        EndModifiedTimeUtc = beginModifiedTimeUtc > DateTime.MinValue ? DateTime.MaxValue : DateTime.MinValue,
                        PageIndex = pageIndex,
                        PageSize = pageSize,
                        SortField = (SortFields) sortOption,
                        TitleSnippetLength = 120,
                        BodySnippetLength = 300,
                        CultureCode = culture,
                        WildCardSearch = IsWildCardEnabledForModule()
                    };

                try
                {
                    results = GetGroupedDetailViews(query, userSearchTypeId, out totalHits, out more).ToList();
                }
                catch (Exception ex)
                {
                    Services.Exceptions.Exceptions.LogException(ex);
                }
            }

            return Request.CreateResponse(HttpStatusCode.OK, new { results, totalHits, more });
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateStopWords">
          <declaration><![CDATA[public HttpResponseMessage UpdateStopWords(SearchServiceController.StopWordsDto stopWords)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="586" sc="9" el="589" ec="10">InternalServices\SearchServiceController.cs</location>
            <body hash="7477288ad64fd9744c807881cf86fe70"><![CDATA[{
            var stopWordsId = SearchHelper.Instance.UpdateSearchStopWords(stopWords.Id, stopWords.Words, stopWords.PortalId, stopWords.Culture);
            return Request.CreateResponse(HttpStatusCode.OK, new { Id = stopWordsId });
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateSynonymsGroup">
          <declaration><![CDATA[public HttpResponseMessage UpdateSynonymsGroup(SearchServiceController.SynonymsGroupDto synonymsGroup)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="551" sc="9" el="555" ec="10">InternalServices\SearchServiceController.cs</location>
            <body hash="b045f423c6b26c4b1ac70e71faa4a319"><![CDATA[{
            string duplicateWord;
            var synonymsGroupId = SearchHelper.Instance.UpdateSynonymsGroup(synonymsGroup.Id, synonymsGroup.Tags, synonymsGroup.PortalId, synonymsGroup.Culture, out duplicateWord);
            return Request.CreateResponse(HttpStatusCode.OK, new { Id = synonymsGroupId, DuplicateWord = duplicateWord });
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="HtmlModuleDefitionId">
          <declaration><![CDATA[private int HtmlModuleDefitionId;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ModuleInfosCacheKey">
          <declaration><![CDATA[private const string ModuleInfosCacheKey = "ModuleInfos{0}";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ModuleInfosCachePriority">
          <declaration><![CDATA[private const System.Web.Caching.CacheItemPriority ModuleInfosCachePriority = System.Web.Caching.CacheItemPriority.AboveNormal;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ModuleInfosCacheTimeOut">
          <declaration><![CDATA[private const int ModuleInfosCacheTimeOut = 20;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ModuleTitleCacheKey">
          <declaration><![CDATA[private const string ModuleTitleCacheKey = "SearchModuleTabTitle_{0}";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ModuleTitleCachePriority">
          <declaration><![CDATA[private const System.Web.Caching.CacheItemPriority ModuleTitleCachePriority = System.Web.Caching.CacheItemPriority.Normal;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ModuleTitleCacheTimeOut">
          <declaration><![CDATA[private const int ModuleTitleCacheTimeOut = 20;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="ServiceRouteMapper">
      <declaration><![CDATA[public class ServiceRouteMapper : IServiceRouteMapper]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public ServiceRouteMapper()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="RegisterRoutes">
          <declaration><![CDATA[public void RegisterRoutes(IMapRoute mapRouteManager)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="31" sc="9" el="36" ec="10">InternalServices\ServiceRouteMapper.cs</location>
            <body hash="ba3f053a18949bd3ab513610ec191f1a"><![CDATA[{
            mapRouteManager.MapHttpRoute("InternalServices", 
                                            "default", 
                                            "{controller}/{action}", 
                                            new[] { "DotNetNuke.Web.InternalServices" });
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="UserFileController">
      <declaration><![CDATA[public class UserFileController : DnnApiController]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private readonly IFolderManager _folderManager = ComponentBase<IFolderManager, FolderManager>.Instance;]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="42" sc="9" el="42" ec="81">InternalServices\UserFileController.cs</location>
            <body hash="d5935e53485226a953254a4415fa8f5f"><![CDATA[private readonly IFolderManager _folderManager = FolderManager.Instance]]></body>
          </codeblock>
        </constructor>
        <constructor name=".cctor">
          <declaration><![CDATA[static UserFileController()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="41" sc="6" el="41" ec="105">InternalServices\UserFileController.cs</location>
            <body hash="ea7b5928eff57387f02a897e0979cf31"><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof (UserFileController))]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="GetChildren">
          <declaration><![CDATA[private System.Collections.Generic.List<UserFileController.Item> GetChildren(IFolderInfo folder, System.Collections.Generic.ICollection<string> extensions)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="85" sc="9" el="124" ec="10">InternalServices\UserFileController.cs</location>
            <body hash="f1d8de84f8cbb340c3aaab2ca2004c53"><![CDATA[{
            var everything = new List<Item>();

            var folders = _folderManager.GetFolders(folder);

            foreach (var currentFolder in folders)
            {
                everything.Add(new Item
                {
                    id = currentFolder.FolderID,
                    name = currentFolder.DisplayName ?? currentFolder.FolderName,
                    folder = true,
                    parentId = folder.FolderID,
                    children = GetChildren(currentFolder, extensions)
                });
            }

            var files = _folderManager.GetFiles(folder);

            foreach (var file in files)
            {
                // list is empty or contains the file extension in question
                if (extensions.Count == 0 || extensions.Contains(file.Extension.ToLowerInvariant()))
                {
                    everything.Add(new Item
                    {
                        id = file.FileId,
                        name = file.FileName,
                        folder = false,
                        parentId = file.FolderId,
                        thumb_url = GetThumbUrl(file),
                        type = GetTypeName(file),
                        size = GetFileSize(file.Size),
                        modified = GetModifiedTime(file.LastModificationTime)
                    });
                }
            }

            return everything;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetFileSize">
          <declaration><![CDATA[private static string GetFileSize(int sizeInBytes)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="165" sc="9" el="173" ec="10">InternalServices\UserFileController.cs</location>
            <body hash="50d84629932090269419b6044a5d3b7d"><![CDATA[{
            var size = sizeInBytes / 1024;
            var biggerThanAMegabyte = size > 1024;
            if (biggerThanAMegabyte)
            {
                size = (size / 1024);
            }
            return size.ToString(CultureInfo.InvariantCulture) + (biggerThanAMegabyte ? "Mb" : "k");
        }]]></body>
          </codeblock>
        </method>
        <method name="GetItems">
          <declaration><![CDATA[public HttpResponseMessage GetItems()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="47" sc="9" el="49" ec="10">InternalServices\UserFileController.cs</location>
            <body hash="b32b5504346d9329257167d784727023"><![CDATA[{
            return GetItems(null);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetItems">
          <declaration><![CDATA[public HttpResponseMessage GetItems(string fileExtensions)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="54" sc="9" el="81" ec="10">InternalServices\UserFileController.cs</location>
            <body hash="7355f9be6aa54f966151f775080c82fd"><![CDATA[{
            try
            {
                var userFolder = _folderManager.GetUserFolder(UserInfo);
                var extensions = new List<string>();

                if (!string.IsNullOrEmpty(fileExtensions))
                {
                    fileExtensions = fileExtensions.ToLowerInvariant();
                    extensions.AddRange(fileExtensions.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries));
                }

                var folderStructure = new Item
                {
                    children = GetChildren(userFolder, extensions),
                    folder = true,
                    id = userFolder.FolderID,
                    name = Localization.GetString("UserFolderTitle.Text", Localization.SharedResourceFile)
                };

                return Request.CreateResponse(HttpStatusCode.OK, new List<Item> { folderStructure });
            }
            catch (Exception exc)
            {
                Logger.Error(exc);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetModifiedTime">
          <declaration><![CDATA[private static string GetModifiedTime(System.DateTime dateTime)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="127" sc="9" el="129" ec="10">InternalServices\UserFileController.cs</location>
            <body hash="d3063ec666ce132173eccfdad4c6a2a4"><![CDATA[{
            return string.Format("{0:MMM} {0:dd}, {0:yyyy} at {0:t}", dateTime);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetThumbUrl">
          <declaration><![CDATA[private string GetThumbUrl(IFileInfo file)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="134" sc="9" el="146" ec="10">InternalServices\UserFileController.cs</location>
            <body hash="7eb0b2be566f0784c2dd93f47b483f2c"><![CDATA[{
            if (IsImageFile(file.RelativePath))
            {
                return FileManager.Instance.GetUrl(file);
            }

            var fileIcon = IconController.IconURL("Ext" + file.Extension, "32x32");
            if (!System.IO.File.Exists(Request.GetHttpContext().Server.MapPath(fileIcon)))
            {
                fileIcon = IconController.IconURL("File", "32x32");
            }
            return fileIcon;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetTypeName">
          <declaration><![CDATA[private static string GetTypeName(IFileInfo file)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="149" sc="9" el="155" ec="10">InternalServices\UserFileController.cs</location>
            <body hash="22c1669853e556b74de4fc821835bb15"><![CDATA[{
            return file.ContentType == null
                       ? string.Empty
                       : (file.ContentType.StartsWith("image/") 
                            ? file.ContentType.Replace("image/", string.Empty) 
                            : (file.Extension != null ? file.Extension.ToLowerInvariant() : string.Empty));
        }]]></body>
          </codeblock>
        </method>
        <method name="IsImageFile">
          <declaration><![CDATA[private static bool IsImageFile(string relativePath)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="158" sc="9" el="162" ec="10">InternalServices\UserFileController.cs</location>
            <body hash="da0ccbdc97bd3880fe0ebaf1fa7d1227"><![CDATA[{
            var acceptedExtensions = new List<string> { "jpg", "png", "gif", "jpe", "jpeg", "tiff" };
            var extension = relativePath.Substring(relativePath.LastIndexOf(".", StringComparison.Ordinal) + 1).ToLower();
            return acceptedExtensions.Contains(extension);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_folderManager">
          <declaration><![CDATA[private readonly IFolderManager _folderManager = ComponentBase<IFolderManager, FolderManager>.Instance;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Logger">
          <declaration><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof(UserFileController));]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="DotNetNuke.Web.InternalServices.Views.Search">
    <class name="BasicView">
      <declaration><![CDATA[public class BasicView]]></declaration>
      <documentation>
        <summary>
 Detailed Search Result View
 </summary>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public BasicView()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="61" sc="9" el="64" ec="10">InternalServices\Views\Search\BasicView.cs</location>
            <body hash="065747ea970fced7cc383c22c0800ad7"><![CDATA[public BasicView()
        {
            Attributes = new Dictionary<string, string>();
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="Attributes">
          <declaration><![CDATA[public System.Collections.Generic.IDictionary<string, string> Attributes]]></declaration>
          <documentation>
            <summary>
 Custom Attributes of the document.
 </summary>
          </documentation>
        </property>
        <property name="DocumentTypeName">
          <declaration><![CDATA[public string DocumentTypeName]]></declaration>
          <documentation>
            <summary>
 Display Name of the Document Type
 </summary>
          </documentation>
        </property>
        <property name="DocumentUrl">
          <declaration><![CDATA[public string DocumentUrl]]></declaration>
          <documentation>
            <summary>
 Link to the Document
 </summary>
          </documentation>
        </property>
        <property name="Snippet">
          <declaration><![CDATA[public string Snippet]]></declaration>
          <documentation>
            <summary>
 Highlighted snippet from document
 </summary>
          </documentation>
        </property>
        <property name="Title">
          <declaration><![CDATA[public string Title]]></declaration>
          <documentation>
            <summary>
 Document's Title
 </summary>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DetailedView">
      <declaration><![CDATA[public class DetailedView : BasicView]]></declaration>
      <documentation>
        <summary>
 Detailed Search Result View
 </summary>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DetailedView()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="AuthorName">
          <declaration><![CDATA[public string AuthorName]]></declaration>
          <documentation>
            <summary>
 Optional: Display Name of the Author
 </summary>
 <remarks>This may be different form current Display Name when Index was run prior to change in Display Name.</remarks></documentation>
        </property>
        <property name="AuthorProfileUrl">
          <declaration><![CDATA[public string AuthorProfileUrl]]></declaration>
          <documentation>
            <summary>
 Author profile URL
 </summary>
          </documentation>
        </property>
        <property name="Comments">
          <declaration><![CDATA[public int Comments]]></declaration>
          <documentation>
            <summary>
 Number of Comments associated with Content.
 </summary>
 <remarks>Content with more Comments is ranked higher.</remarks></documentation>
        </property>
        <property name="DisplayModifiedTime">
          <declaration><![CDATA[public string DisplayModifiedTime]]></declaration>
          <documentation>
            <summary>
 Time when Content was last modified (in Utc)
 </summary>
          </documentation>
        </property>
        <property name="Likes">
          <declaration><![CDATA[public int Likes]]></declaration>
          <documentation>
            <summary>
 Number of Likes associated with Content.
 </summary>
 <remarks>Content with more Likes is ranked higher.</remarks></documentation>
        </property>
        <property name="Tags">
          <declaration><![CDATA[public System.Collections.Generic.IEnumerable<string> Tags]]></declaration>
          <documentation>
            <summary>
 Tags associated with Document
 </summary>
          </documentation>
        </property>
        <property name="Views">
          <declaration><![CDATA[public int Views]]></declaration>
          <documentation>
            <summary>
 Number of Views associated with Content.
 </summary>
 <remarks>Content with more Views is ranked higher.</remarks></documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="GroupedBasicView">
      <declaration><![CDATA[public class GroupedBasicView]]></declaration>
      <documentation>
        <summary>
 BasicView grouped by DocumentTypeName
 </summary>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public GroupedBasicView()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="47" sc="9" el="48" ec="10">InternalServices\Views\Search\GroupedBasicView.cs</location>
            <body hash="cf1d633e0f12d646ae45123496b511e5"><![CDATA[public GroupedBasicView()
        {]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[public GroupedBasicView(BasicView basic)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="50" sc="9" el="54" ec="10">InternalServices\Views\Search\GroupedBasicView.cs</location>
            <body hash="f900b8060fd362856dcac10f77c6fbf5"><![CDATA[public GroupedBasicView(BasicView basic)
        {
            DocumentTypeName = basic.DocumentTypeName;
            Results = new List<BasicView> {new BasicView {Title = basic.Title, Snippet = basic.Snippet, DocumentUrl = basic.DocumentUrl, Attributes = basic.Attributes}};
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="DocumentTypeName">
          <declaration><![CDATA[public string DocumentTypeName]]></declaration>
          <documentation>
            <summary>
 Type of Search Document
 </summary>
          </documentation>
        </property>
        <property name="Results">
          <declaration><![CDATA[public System.Collections.Generic.List<BasicView> Results]]></declaration>
          <documentation>
            <summary>
 Results of the Search
 </summary>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="GroupedDetailView">
      <declaration><![CDATA[public class GroupedDetailView]]></declaration>
      <documentation>
        <summary>
 DetailedView grouped by Url (TabId)
 </summary>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public GroupedDetailView()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="52" sc="9" el="55" ec="10">InternalServices\Views\Search\GroupedDetailView.cs</location>
            <body hash="bd13239de0e9d49e216ab6fcae03cbed"><![CDATA[public GroupedDetailView()
        {
            Results = new List<DetailedView>();
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="DocumentUrl">
          <declaration><![CDATA[public string DocumentUrl]]></declaration>
          <documentation>
            <summary>
 Document's Url
 </summary>
          </documentation>
        </property>
        <property name="Results">
          <declaration><![CDATA[public System.Collections.Generic.List<DetailedView> Results]]></declaration>
          <documentation>
            <summary>
 Results of the Search
 </summary>
          </documentation>
        </property>
        <property name="Title">
          <declaration><![CDATA[public string Title]]></declaration>
          <documentation>
            <summary>
 Document's Title
 </summary>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="DotNetNuke.Web.Mvp">
    <class name="AttributeBasedViewStateSerializer">
      <declaration><![CDATA[public class AttributeBasedViewStateSerializer]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public AttributeBasedViewStateSerializer()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="DeSerialize">
          <declaration><![CDATA[public static void DeSerialize(object value, System.Web.UI.StateBag state)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="37" sc="9" el="58" ec="10">Mvp\AttributeBasedViewStateSerializer.cs</location>
            <body hash="6f226465411a530f70953fa2b657c781"><![CDATA[{
            Type typ = value.GetType();

            //Parse all the Public instance properties
            foreach (PropertyInfo member in typ.GetProperties(MemberBindingFlags))
            {
                //Determine if they are attributed with a ViewState Attribute
                ViewStateAttribute attr = member.GetCustomAttributes(typeof (ViewStateAttribute), true).OfType<ViewStateAttribute>().FirstOrDefault();
                if ((attr != null))
                {
                    //Get object from ViewState bag
                    string viewStateKey = attr.ViewStateKey;
                    if (string.IsNullOrEmpty(viewStateKey))
                    {
                        //Use class member's name for Key
                        viewStateKey = member.Name;
                    }

                    member.SetValue(value, state[viewStateKey], null);
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="Serialize">
          <declaration><![CDATA[public static void Serialize(object value, System.Web.UI.StateBag state)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="61" sc="9" el="82" ec="10">Mvp\AttributeBasedViewStateSerializer.cs</location>
            <body hash="c517603044d66284a4da4e7e65d85e9e"><![CDATA[{
            Type typ = value.GetType();

            //Parse all the Public instance properties
            foreach (PropertyInfo member in typ.GetProperties(MemberBindingFlags))
            {
                //Determine if they are attributed with a ViewState Attribute
                ViewStateAttribute attr = member.GetCustomAttributes(typeof (ViewStateAttribute), true).OfType<ViewStateAttribute>().FirstOrDefault();
                if ((attr != null))
                {
                    //Add property to ViewState bag
                    string viewStateKey = attr.ViewStateKey;
                    if (string.IsNullOrEmpty(viewStateKey))
                    {
                        //Use class member's name for Key
                        viewStateKey = member.Name;
                    }

                    state[viewStateKey] = member.GetValue(value, null);
                }
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="MemberBindingFlags">
          <declaration><![CDATA[private const System.Reflection.BindingFlags MemberBindingFlags = System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="HttpHandlerPresenter&lt;TView&gt;">
      <declaration><![CDATA[public abstract class HttpHandlerPresenter<TView> : Presenter<TView> where TView : class, IHttpHandlerView]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[protected HttpHandlerPresenter(TView view) : base(view)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="29" sc="9" el="31" ec="10">Mvp\HttpHandlerPresenter.cs</location>
            <body hash="4daecc9ea63040c35b084611a58ac79d"><![CDATA[protected HttpHandlerPresenter(TView view) : base(view)
        {
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="ReleaseView">
          <deprecation>Deprecated in DotNetNuke 6.1. Base Class Method deprecated in WebFormsMVP 1.2</deprecation>
          <declaration><![CDATA[public override void ReleaseView()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="35" sc="9" el="36" ec="10">Mvp\HttpHandlerPresenter.cs</location>
            <body hash="539fa760ca172337a931519768c64187"><![CDATA[{
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="HttpHandlerView">
      <declaration><![CDATA[public abstract class HttpHandlerView : MvpHttpHandler, IHttpHandlerView, IView]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[protected HttpHandlerView()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="IHttpHandlerView">
      <declaration><![CDATA[public interface IHttpHandlerView : IView]]></declaration>
      <documentation>
      </documentation>
      <constructors>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="IModuleView">
      <declaration><![CDATA[public interface IModuleView : IModuleViewBase, IView]]></declaration>
      <documentation>
      </documentation>
      <constructors>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="IModuleView&lt;TModel&gt;">
      <declaration><![CDATA[public interface IModuleView<TModel> : IModuleViewBase, IView<TModel>, IView where TModel : class, new()]]></declaration>
      <documentation>
      </documentation>
      <constructors>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="IModuleViewBase">
      <declaration><![CDATA[public interface IModuleViewBase : IView]]></declaration>
      <documentation>
      </documentation>
      <constructors>
      </constructors>
      <methods>
        <method name="add_Initialize">
          <declaration><![CDATA[void add_Initialize(System.EventHandler value);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="ProcessModuleLoadException">
          <declaration><![CDATA[void ProcessModuleLoadException(System.Exception ex);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="remove_Initialize">
          <declaration><![CDATA[void remove_Initialize(System.EventHandler value);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="ShowMessage">
          <declaration><![CDATA[void ShowMessage(string messageHeader, string message, ModuleMessage.ModuleMessageType messageType);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="AutoDataBind">
          <declaration><![CDATA[bool AutoDataBind]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
        <event name="Initialize">
          <declaration><![CDATA[event System.EventHandler Initialize;]]></declaration>
          <documentation>
          </documentation>
        </event>
      </events>
    </class>
    <class name="ISettingsView">
      <declaration><![CDATA[public interface ISettingsView : IModuleViewBase, IView]]></declaration>
      <documentation>
      </documentation>
      <constructors>
      </constructors>
      <methods>
        <method name="add_OnLoadSettings">
          <declaration><![CDATA[void add_OnLoadSettings(System.EventHandler value);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="add_OnSaveSettings">
          <declaration><![CDATA[void add_OnSaveSettings(System.EventHandler value);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="remove_OnLoadSettings">
          <declaration><![CDATA[void remove_OnLoadSettings(System.EventHandler value);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="remove_OnSaveSettings">
          <declaration><![CDATA[void remove_OnSaveSettings(System.EventHandler value);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
        <event name="OnLoadSettings">
          <declaration><![CDATA[event System.EventHandler OnLoadSettings;]]></declaration>
          <documentation>
          </documentation>
        </event>
        <event name="OnSaveSettings">
          <declaration><![CDATA[event System.EventHandler OnSaveSettings;]]></declaration>
          <documentation>
          </documentation>
        </event>
      </events>
    </class>
    <class name="ISettingsView&lt;TModel&gt;">
      <declaration><![CDATA[public interface ISettingsView<TModel> : IModuleViewBase, IView<TModel>, IView where TModel : class, new()]]></declaration>
      <documentation>
      </documentation>
      <constructors>
      </constructors>
      <methods>
        <method name="add_OnLoadSettings">
          <declaration><![CDATA[void add_OnLoadSettings(System.EventHandler value);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="add_OnSaveSettings">
          <declaration><![CDATA[void add_OnSaveSettings(System.EventHandler value);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="remove_OnLoadSettings">
          <declaration><![CDATA[void remove_OnLoadSettings(System.EventHandler value);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="remove_OnSaveSettings">
          <declaration><![CDATA[void remove_OnSaveSettings(System.EventHandler value);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
        <event name="OnLoadSettings">
          <declaration><![CDATA[event System.EventHandler OnLoadSettings;]]></declaration>
          <documentation>
          </documentation>
        </event>
        <event name="OnSaveSettings">
          <declaration><![CDATA[event System.EventHandler OnSaveSettings;]]></declaration>
          <documentation>
          </documentation>
        </event>
      </events>
    </class>
    <class name="IWebServiceView">
      <declaration><![CDATA[public interface IWebServiceView : IWebServiceViewBase, IView]]></declaration>
      <documentation>
      </documentation>
      <constructors>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="IWebServiceView&lt;TModel&gt;">
      <declaration><![CDATA[public interface IWebServiceView<TModel> : IWebServiceViewBase, IView<TModel>, IView where TModel : class, new()]]></declaration>
      <documentation>
      </documentation>
      <constructors>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="IWebServiceViewBase">
      <declaration><![CDATA[public interface IWebServiceViewBase : IView]]></declaration>
      <documentation>
      </documentation>
      <constructors>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="ModulePresenter&lt;TView&gt;">
      <declaration><![CDATA[public abstract class ModulePresenter<TView> : ModulePresenterBase<TView> where TView : class, IModuleView]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[protected ModulePresenter(TView view) : base(view)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="27" sc="9" el="29" ec="10">Mvp\ModulePresenter.cs</location>
            <body hash="db9eb5ae006f8c482c643babed5be48e"><![CDATA[protected ModulePresenter(TView view) : base(view)
        {
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="TModel&gt;">
      <declaration><![CDATA[public abstract class ModulePresenter<TView, TModel> : ModulePresenterBase<TView> where TView : class, IModuleView<TModel> where TModel : class, new()]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[protected ModulePresenter(TView view) : base(view)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="25" sc="9" el="27" ec="10">Mvp\ModulePresenterOfT.cs</location>
            <body hash="db9eb5ae006f8c482c643babed5be48e"><![CDATA[protected ModulePresenter(TView view) : base(view)
        {
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="ModulePresenterBase&lt;TView&gt;">
      <declaration><![CDATA[public abstract class ModulePresenterBase<TView> : Presenter<TView> where TView : class, IModuleViewBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[protected ModulePresenterBase(TView view) : base(view)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="46" sc="9" el="66" ec="10">Mvp\ModulePresenterBase.cs</location>
            <body hash="b1f75fa28f6d45ff4ebc73f631b162b6"><![CDATA[protected ModulePresenterBase(TView view) : base(view)
        {
            //Try and cast view to Control to get common control properties
            var control = view as Control;
            if (control != null && control.Page != null)
            {
                IsPostBack = control.Page.IsPostBack;
            }

            //Try and cast view to IModuleControl to get the Context
            var moduleControl = view as IModuleControl;
            if (moduleControl != null)
            {
                LocalResourceFile = moduleControl.LocalResourceFile;
                ModuleContext = moduleControl.ModuleContext;
            }
            Validator = new Validator(new DataAnnotationsObjectValidator());

            view.Initialize += InitializeInternal;
            view.Load += LoadInternal;
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="CheckAuthPolicy">
          <declaration><![CDATA[protected internal virtual bool CheckAuthPolicy()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="141" sc="9" el="155" ec="10">Mvp\ModulePresenterBase.cs</location>
            <body hash="8a4ac244a793bc855dbf7ca028fb76c1"><![CDATA[{
            if ((UserId == Null.NullInteger && !AllowAnonymousAccess))
            {
                OnNoCurrentUser();
                return false;
            }

            if ((!IsUserAuthorized))
            {
                OnUnauthorizedUser();
                return false;
            }

            return true;
        }]]></body>
          </codeblock>
        </method>
        <method name="InitializeInternal">
          <declaration><![CDATA[private void InitializeInternal(object sender, System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="123" sc="9" el="126" ec="10">Mvp\ModulePresenterBase.cs</location>
            <body hash="cd2479cc86f00b5fbc676ad89c3376a9"><![CDATA[{
            LoadFromContext();
            OnInit();
        }]]></body>
          </codeblock>
        </method>
        <method name="LoadFromContext">
          <declaration><![CDATA[protected virtual void LoadFromContext()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="158" sc="9" el="174" ec="10">Mvp\ModulePresenterBase.cs</location>
            <body hash="71d5c4a820a0cec264a85063596a4412"><![CDATA[{
            if (ModuleContext != null)
            {
                ModuleInfo = ModuleContext.Configuration;
                IsEditable = ModuleContext.IsEditable;
                IsSuperUser = ModuleContext.PortalSettings.UserInfo.IsSuperUser;
                ModuleId = ModuleContext.ModuleId;
                PortalId = ModuleContext.PortalId;
                Settings = new Dictionary<string, string>();
                foreach (object key in ModuleContext.Settings.Keys)
                {
                    Settings[key.ToString()] = (string) ModuleContext.Settings[key];
                }
                TabId = ModuleContext.TabId;
                UserId = ModuleContext.PortalSettings.UserInfo.UserID;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="LoadInternal">
          <declaration><![CDATA[private void LoadInternal(object sender, System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="129" sc="9" el="134" ec="10">Mvp\ModulePresenterBase.cs</location>
            <body hash="e3f032f176729a70e8b0929ad2b48d10"><![CDATA[{
            if (CheckAuthPolicy())
            {
                OnLoad();
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="LocalizeString">
          <declaration><![CDATA[protected virtual string LocalizeString(string key)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="177" sc="9" el="188" ec="10">Mvp\ModulePresenterBase.cs</location>
            <body hash="648a321966436e2d109106a350e5d74c"><![CDATA[{
            string localizedString;
            if (!string.IsNullOrEmpty(key) && !string.IsNullOrEmpty(LocalResourceFile))
            {
                localizedString = Localization.GetString(key, LocalResourceFile);
            }
            else
            {
                localizedString = Null.NullString;
            }
            return localizedString;
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected virtual void OnInit()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="191" sc="9" el="192" ec="10">Mvp\ModulePresenterBase.cs</location>
            <body hash="539fa760ca172337a931519768c64187"><![CDATA[{
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected virtual void OnLoad()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="195" sc="9" el="196" ec="10">Mvp\ModulePresenterBase.cs</location>
            <body hash="539fa760ca172337a931519768c64187"><![CDATA[{
        }]]></body>
          </codeblock>
        </method>
        <method name="OnNoCurrentUser">
          <declaration><![CDATA[protected virtual void OnNoCurrentUser()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="199" sc="9" el="201" ec="10">Mvp\ModulePresenterBase.cs</location>
            <body hash="4ae8a460742156b3c3fa2b88b9808cac"><![CDATA[{
            RedirectToLogin();
        }]]></body>
          </codeblock>
        </method>
        <method name="OnUnauthorizedUser">
          <declaration><![CDATA[protected virtual void OnUnauthorizedUser()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="204" sc="9" el="206" ec="10">Mvp\ModulePresenterBase.cs</location>
            <body hash="bb9fcc065311cfa45684601383420726"><![CDATA[{
            RedirectToAccessDenied();
        }]]></body>
          </codeblock>
        </method>
        <method name="ProcessModuleLoadException">
          <declaration><![CDATA[protected void ProcessModuleLoadException(System.Exception ex)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="224" sc="9" el="226" ec="10">Mvp\ModulePresenterBase.cs</location>
            <body hash="c8ed45ddf5a8b5698e48c544c43fc618"><![CDATA[{
            View.ProcessModuleLoadException(ex);
        }]]></body>
          </codeblock>
        </method>
        <method name="RedirectToAccessDenied">
          <declaration><![CDATA[protected void RedirectToAccessDenied()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="209" sc="9" el="211" ec="10">Mvp\ModulePresenterBase.cs</location>
            <body hash="7276a11e90310eb92c86bdb6f4fd5d00"><![CDATA[{
            Response.Redirect(TestableGlobals.Instance.AccessDeniedURL(), true);
        }]]></body>
          </codeblock>
        </method>
        <method name="RedirectToCurrentPage">
          <declaration><![CDATA[protected void RedirectToCurrentPage()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="214" sc="9" el="216" ec="10">Mvp\ModulePresenterBase.cs</location>
            <body hash="3118d08b161f31c5625ef5a93cf1cbe3"><![CDATA[{
            Response.Redirect(TestableGlobals.Instance.NavigateURL(), true);
        }]]></body>
          </codeblock>
        </method>
        <method name="RedirectToLogin">
          <declaration><![CDATA[protected void RedirectToLogin()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="219" sc="9" el="221" ec="10">Mvp\ModulePresenterBase.cs</location>
            <body hash="46aa62854fe856a7ebc5d8a07130d6bb"><![CDATA[{
            Response.Redirect(TestableGlobals.Instance.LoginURL(Request.RawUrl, false), true);
        }]]></body>
          </codeblock>
        </method>
        <method name="ReleaseView">
          <deprecation>Deprecated in DotNetNuke 6.1. Base Class Method deprecated in WebFormsMVP 1.2</deprecation>
          <declaration><![CDATA[public override void ReleaseView()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="262" sc="9" el="263" ec="10">Mvp\ModulePresenterBase.cs</location>
            <body hash="539fa760ca172337a931519768c64187"><![CDATA[{
        }]]></body>
          </codeblock>
        </method>
        <method name="RestoreState">
          <declaration><![CDATA[public virtual void RestoreState(System.Web.UI.StateBag stateBag)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="266" sc="9" el="268" ec="10">Mvp\ModulePresenterBase.cs</location>
            <body hash="53ad31b0d647813034a71f9b6638bd43"><![CDATA[{
            AttributeBasedViewStateSerializer.DeSerialize(this, stateBag);
        }]]></body>
          </codeblock>
        </method>
        <method name="SaveState">
          <declaration><![CDATA[public virtual void SaveState(System.Web.UI.StateBag stateBag)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="271" sc="9" el="273" ec="10">Mvp\ModulePresenterBase.cs</location>
            <body hash="515fabb809bb54f459fdb9b36ecf7442"><![CDATA[{
            AttributeBasedViewStateSerializer.Serialize(this, stateBag);
        }]]></body>
          </codeblock>
        </method>
        <method name="ShowMessage">
          <declaration><![CDATA[protected void ShowMessage(string messageHeader, string message, ModuleMessage.ModuleMessageType messageType)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="229" sc="9" el="231" ec="10">Mvp\ModulePresenterBase.cs</location>
            <body hash="ea72ea6754a40d5a4647baca342ae857"><![CDATA[{
            ShowMessage(messageHeader, message, messageType, true);
        }]]></body>
          </codeblock>
        </method>
        <method name="ShowMessage">
          <declaration><![CDATA[protected void ShowMessage(string message, ModuleMessage.ModuleMessageType messageType)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="234" sc="9" el="236" ec="10">Mvp\ModulePresenterBase.cs</location>
            <body hash="59b225734bf30b38a469b69bfb6db32d"><![CDATA[{
            ShowMessage(message, messageType, true);
        }]]></body>
          </codeblock>
        </method>
        <method name="ShowMessage">
          <declaration><![CDATA[protected void ShowMessage(string message, ModuleMessage.ModuleMessageType messageType, bool localize)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="239" sc="9" el="241" ec="10">Mvp\ModulePresenterBase.cs</location>
            <body hash="a01bbf20910a274a77ba6e22010c55a0"><![CDATA[{
            ShowMessage(string.Empty, message, messageType, localize);
        }]]></body>
          </codeblock>
        </method>
        <method name="ShowMessage">
          <declaration><![CDATA[protected void ShowMessage(string messageHeader, string message, ModuleMessage.ModuleMessageType messageType, bool localize)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="244" sc="9" el="254" ec="10">Mvp\ModulePresenterBase.cs</location>
            <body hash="80018ad93af207a10d52ec5583e20fec"><![CDATA[{
            if (!string.IsNullOrEmpty(message))
            {
                if (localize)
                {
                    messageHeader = LocalizeString(messageHeader);
                    message = LocalizeString(message);
                }
                View.ShowMessage(messageHeader, message, messageType);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="AllowAnonymousAccess">
          <declaration><![CDATA[protected internal virtual bool AllowAnonymousAccess]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="75" sc="13" el="77" ec="14">Mvp\ModulePresenterBase.cs</location>
            <body hash="f5368e81f663038061ec388beff126aa"><![CDATA[{
                return true;
            }]]></body>
          </codeblock>
        </property>
        <property name="AutoDataBind">
          <declaration><![CDATA[public bool AutoDataBind]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="IsEditable">
          <declaration><![CDATA[public bool IsEditable]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="IsPostBack">
          <declaration><![CDATA[public bool IsPostBack]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="IsSuperUser">
          <declaration><![CDATA[public bool IsSuperUser]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="IsUserAuthorized">
          <declaration><![CDATA[protected internal virtual bool IsUserAuthorized]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="83" sc="13" el="85" ec="14">Mvp\ModulePresenterBase.cs</location>
            <body hash="f5368e81f663038061ec388beff126aa"><![CDATA[{
                return true;
            }]]></body>
          </codeblock>
        </property>
        <property name="LocalResourceFile">
          <declaration><![CDATA[public string LocalResourceFile]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ModuleContext">
          <declaration><![CDATA[public ModuleInstanceContext ModuleContext]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ModuleId">
          <declaration><![CDATA[public int ModuleId]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ModuleInfo">
          <declaration><![CDATA[public ModuleInfo ModuleInfo]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="PortalId">
          <declaration><![CDATA[public int PortalId]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Settings">
          <declaration><![CDATA[public System.Collections.Generic.Dictionary<string, string> Settings]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="TabId">
          <declaration><![CDATA[public int TabId]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="UserId">
          <declaration><![CDATA[public int UserId]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Validator">
          <declaration><![CDATA[public Validator Validator]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="TModel&gt;">
      <declaration><![CDATA[public abstract class ModuleSettingsPresenter<TView, TModel> : ModulePresenterBase<TView> where TView : class, ISettingsView<TModel> where TModel : SettingsModel, new()]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[protected ModuleSettingsPresenter(TView view) : base(view)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="34" sc="9" el="38" ec="10">Mvp\ModuleSettingsPresenterOfT.cs</location>
            <body hash="8ced02c2392a85090e9fd697e50381cc"><![CDATA[protected ModuleSettingsPresenter(TView view) : base(view)
        {
            view.OnLoadSettings += OnLoadSettingsInternal;
            view.OnSaveSettings += OnSaveSettingsInternal;
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="LoadSettings">
          <declaration><![CDATA[protected virtual void LoadSettings()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="69" sc="9" el="81" ec="10">Mvp\ModuleSettingsPresenterOfT.cs</location>
            <body hash="62d8784345a8dc2359ba0a5a957329dd"><![CDATA[{
            View.Model.ModuleSettings = new Dictionary<string, string>(
                                            ModuleContext.Configuration.ModuleSettings
                                            .Cast<DictionaryEntry>()
                                            .ToDictionary(kvp => (string)kvp.Key, kvp => (string)kvp.Value)
                                        );

            View.Model.TabModuleSettings = new Dictionary<string, string>(
                                            ModuleContext.Configuration.TabModuleSettings
                                            .Cast<DictionaryEntry>()
                                            .ToDictionary(kvp => (string)kvp.Key, kvp => (string)kvp.Value)
                                        );
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="57" sc="9" el="66" ec="10">Mvp\ModuleSettingsPresenterOfT.cs</location>
            <body hash="6b9a430ec0922c04099516de7a1bd6f5"><![CDATA[{
            base.OnLoad();

            if (IsPostBack)
            {
                //Initialize dictionaries as LoadSettings is not called on Postback
                View.Model.ModuleSettings = new Dictionary<string, string>();
                View.Model.TabModuleSettings = new Dictionary<string, string>();
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoadSettingsInternal">
          <declaration><![CDATA[private void OnLoadSettingsInternal(object sender, System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="43" sc="9" el="45" ec="10">Mvp\ModuleSettingsPresenterOfT.cs</location>
            <body hash="2ee4cda03956f12db850c1de7e348e27"><![CDATA[{
            LoadSettings();
        }]]></body>
          </codeblock>
        </method>
        <method name="OnSaveSettingsInternal">
          <declaration><![CDATA[private void OnSaveSettingsInternal(object sender, System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="48" sc="9" el="50" ec="10">Mvp\ModuleSettingsPresenterOfT.cs</location>
            <body hash="ad5a7274b583cc261315de98d4182717"><![CDATA[{
            SaveSettings();
        }]]></body>
          </codeblock>
        </method>
        <method name="SaveSettings">
          <declaration><![CDATA[protected virtual void SaveSettings()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="84" sc="9" el="96" ec="10">Mvp\ModuleSettingsPresenterOfT.cs</location>
            <body hash="e861b7ea5514a0aa7fdd0b5023dffee6"><![CDATA[{
            var controller = ModuleController.Instance;

            foreach (var setting in View.Model.ModuleSettings)
            {
                ModuleController.Instance.UpdateModuleSetting(ModuleId, setting.Key, setting.Value);
            }

            foreach (var setting in View.Model.TabModuleSettings)
            {
                ModuleController.Instance.UpdateTabModuleSetting(ModuleContext.TabModuleId, setting.Key, setting.Value);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="ModuleSettingsPresenterBase&lt;TView&gt;">
      <declaration><![CDATA[public class ModuleSettingsPresenterBase<TView> : ModulePresenterBase<TView> where TView : class, ISettingsView]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public ModuleSettingsPresenterBase(TView view) : base(view)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="30" sc="9" el="37" ec="10">Mvp\ModuleSettingsPresenter.cs</location>
            <body hash="3b8074c361c53d687bec93b49c1d3c41"><![CDATA[public ModuleSettingsPresenterBase(TView view) : base(view)
        {
            view.OnLoadSettings += OnLoadSettingsInternal;
            view.OnSaveSettings += OnSaveSettingsInternal;

            ModuleSettings = new Dictionary<string, string>();
            TabModuleSettings = new Dictionary<string, string>();
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="LoadFromContext">
          <declaration><![CDATA[protected override void LoadFromContext()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="62" sc="9" el="74" ec="10">Mvp\ModuleSettingsPresenter.cs</location>
            <body hash="fed2d3fcd349b1a839a00e07bc130a08"><![CDATA[{
            base.LoadFromContext();

            foreach (var key in ModuleContext.Configuration.ModuleSettings.Keys)
            {
                ModuleSettings.Add(Convert.ToString(key), Convert.ToString(ModuleContext.Configuration.ModuleSettings[key]));
            }

            foreach (var key in ModuleContext.Configuration.TabModuleSettings.Keys)
            {
                TabModuleSettings.Add(Convert.ToString(key), Convert.ToString(ModuleContext.Configuration.TabModuleSettings[key]));
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="LoadSettings">
          <declaration><![CDATA[protected virtual void LoadSettings()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="77" sc="9" el="78" ec="10">Mvp\ModuleSettingsPresenter.cs</location>
            <body hash="539fa760ca172337a931519768c64187"><![CDATA[{
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoadSettingsInternal">
          <declaration><![CDATA[private void OnLoadSettingsInternal(object sender, System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="48" sc="9" el="50" ec="10">Mvp\ModuleSettingsPresenter.cs</location>
            <body hash="2ee4cda03956f12db850c1de7e348e27"><![CDATA[{
            LoadSettings();
        }]]></body>
          </codeblock>
        </method>
        <method name="OnSaveSettingsInternal">
          <declaration><![CDATA[private void OnSaveSettingsInternal(object sender, System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="53" sc="9" el="55" ec="10">Mvp\ModuleSettingsPresenter.cs</location>
            <body hash="ad5a7274b583cc261315de98d4182717"><![CDATA[{
            SaveSettings();
        }]]></body>
          </codeblock>
        </method>
        <method name="SaveSettings">
          <declaration><![CDATA[protected virtual void SaveSettings()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="81" sc="9" el="82" ec="10">Mvp\ModuleSettingsPresenter.cs</location>
            <body hash="539fa760ca172337a931519768c64187"><![CDATA[{
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="ModuleSettings">
          <declaration><![CDATA[public System.Collections.Generic.Dictionary<string, string> ModuleSettings]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="TabModuleSettings">
          <declaration><![CDATA[public System.Collections.Generic.Dictionary<string, string> TabModuleSettings]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="ModuleView">
      <declaration><![CDATA[public abstract class ModuleView : ModuleViewBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[protected ModuleView()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="ModuleView&lt;TModel&gt;">
      <declaration><![CDATA[public abstract class ModuleView<TModel> : ModuleViewBase, IView<TModel>, IView where TModel : class, new()]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[protected ModuleView()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="LoadViewState">
          <declaration><![CDATA[protected override void LoadViewState(object savedState)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="55" sc="9" el="59" ec="10">Mvp\ModuleViewOfT.cs</location>
            <body hash="668a52e53f2b2b54ebed5b9abe4276cc"><![CDATA[{
            //Call the base class to load any View State
            base.LoadViewState(savedState);
            AttributeBasedViewStateSerializer.DeSerialize(Model, ViewState);
        }]]></body>
          </codeblock>
        </method>
        <method name="SaveViewState">
          <declaration><![CDATA[protected override object SaveViewState()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="62" sc="9" el="66" ec="10">Mvp\ModuleViewOfT.cs</location>
            <body hash="cbe4328e3f25492c664620c770238cd5"><![CDATA[{
            AttributeBasedViewStateSerializer.Serialize(Model, ViewState);
            //Call the base class to save the View State
            return base.SaveViewState();
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_model">
          <declaration><![CDATA[private TModel _model;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="Model">
          <declaration><![CDATA[public TModel Model]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="41" sc="13" el="48" ec="14">Mvp\ModuleViewOfT.cs</location>
            <body hash="b657a15f08d58ef5e78c1ce711ae2fd0"><![CDATA[{
                if ((_model == null))
                {
                    throw new InvalidOperationException(
                        "The Model property is currently null, however it should have been automatically initialized by the presenter. This most likely indicates that no presenter was bound to the control. Check your presenter bindings.");
                }
                return _model;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="ModuleViewBase">
      <declaration><![CDATA[public abstract class ModuleViewBase : ModuleUserControlBase, IModuleViewBase, IView]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[protected ModuleViewBase()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="41" sc="9" el="44" ec="10">Mvp\ModuleViewBase.cs</location>
            <body hash="887f6cb70da0affa3132eb572b1e6aab"><![CDATA[protected ModuleViewBase()
        {
            AutoDataBind = true;
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="add_Initialize">
          <declaration><![CDATA[public void add_Initialize(System.EventHandler value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="add_Load">
          <declaration><![CDATA[public new void add_Load(System.EventHandler value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="DataItem">
          <declaration><![CDATA[protected T DataItem<T>() where T : class, new()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="51" sc="9" el="54" ec="10">Mvp\ModuleViewBase.cs</location>
            <body hash="09488e0578d052079f3aed21681ccad3"><![CDATA[{
            var _T = Page.GetDataItem() as T ?? new T();
            return _T;
        }]]></body>
          </codeblock>
        </method>
        <method name="DataValue">
          <declaration><![CDATA[protected T DataValue<T>()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="57" sc="9" el="59" ec="10">Mvp\ModuleViewBase.cs</location>
            <body hash="16b4b5920a6bd91aad9513c5b915766b"><![CDATA[{
            return (T) Page.GetDataItem();
        }]]></body>
          </codeblock>
        </method>
        <method name="DataValue">
          <declaration><![CDATA[protected string DataValue<T>(string format)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="62" sc="9" el="64" ec="10">Mvp\ModuleViewBase.cs</location>
            <body hash="113a65cdb6c5d29dfca2af971a14b8e7"><![CDATA[{
            return string.Format(CultureInfo.CurrentCulture, format, DataValue<T>());
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="67" sc="9" el="75" ec="10">Mvp\ModuleViewBase.cs</location>
            <body hash="5abf479d1de941e9b2e0cef9efa0e934"><![CDATA[{
            PageViewHost.Register(this, Context, false);

            base.OnInit(e);

            Page.InitComplete += PageInitComplete;
            Page.PreRenderComplete += PagePreRenderComplete;
            Page.Load += PageLoad;
        }]]></body>
          </codeblock>
        </method>
        <method name="PageInitComplete">
          <declaration><![CDATA[private void PageInitComplete(object sender, System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="111" sc="9" el="116" ec="10">Mvp\ModuleViewBase.cs</location>
            <body hash="873f317b865600704f4092152a60ff17"><![CDATA[{
            if (Initialize != null)
            {
                Initialize(this, EventArgs.Empty);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="PageLoad">
          <declaration><![CDATA[private void PageLoad(object sender, System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="119" sc="9" el="124" ec="10">Mvp\ModuleViewBase.cs</location>
            <body hash="16bf6a400ac29d09dfbd4b246e3e0a82"><![CDATA[{
            if (Load != null)
            {
                Load(this, e);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="PagePreRenderComplete">
          <declaration><![CDATA[private void PagePreRenderComplete(object sender, System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="127" sc="9" el="134" ec="10">Mvp\ModuleViewBase.cs</location>
            <body hash="11c4bf20990510f93398558b73866edc"><![CDATA[{
            //This event is raised after any async page tasks have completed, so it
            //is safe to data-bind
            if ((AutoDataBind))
            {
                DataBind();
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="ProcessModuleLoadException">
          <declaration><![CDATA[public void ProcessModuleLoadException(System.Exception ex)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="86" sc="9" el="88" ec="10">Mvp\ModuleViewBase.cs</location>
            <body hash="290bee966c02005d97150c4ca0ead133"><![CDATA[{
            Exceptions.ProcessModuleLoadException(this, ex);
        }]]></body>
          </codeblock>
        </method>
        <method name="remove_Initialize">
          <declaration><![CDATA[public void remove_Initialize(System.EventHandler value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="remove_Load">
          <declaration><![CDATA[public new void remove_Load(System.EventHandler value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="ShowMessage">
          <declaration><![CDATA[public void ShowMessage(string messageHeader, string message, ModuleMessage.ModuleMessageType messageType)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="91" sc="9" el="93" ec="10">Mvp\ModuleViewBase.cs</location>
            <body hash="26fcc7f417d51edcd127b7d81caec961"><![CDATA[{
            DotNetNuke.UI.Skins.Skin.AddModuleMessage(this, messageHeader, message, messageType);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="Initialize">
          <declaration><![CDATA[private System.EventHandler Initialize;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Load">
          <declaration><![CDATA[private new System.EventHandler Load;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="AutoDataBind">
          <declaration><![CDATA[public bool AutoDataBind]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ThrowExceptionIfNoPresenterBound">
          <declaration><![CDATA[public bool ThrowExceptionIfNoPresenterBound]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
        <event name="Initialize">
          <declaration><![CDATA[public event System.EventHandler Initialize;]]></declaration>
          <documentation>
          </documentation>
        </event>
        <event name="Load">
          <declaration><![CDATA[public new event System.EventHandler Load;]]></declaration>
          <documentation>
          </documentation>
        </event>
      </events>
    </class>
    <class name="ProfileModuleViewBase&lt;TModel&gt;">
      <declaration><![CDATA[public abstract class ProfileModuleViewBase<TModel> : ModuleView<TModel>, IProfileModule where TModel : class, new()]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[protected ProfileModuleViewBase()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="GetRedirectUrl">
          <declaration><![CDATA[private string GetRedirectUrl()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="74" sc="9" el="89" ec="10">Mvp\ProfileModuleViewBase.cs</location>
            <body hash="1baa031334b39ad53dffe83976298669"><![CDATA[{
            //redirect user to default page if not specific the home tab, do this action to prevent loop redirect.
            var homeTabId = ModuleContext.PortalSettings.HomeTabId;
            string redirectUrl;

            if (homeTabId > Null.NullInteger)
            {
                redirectUrl = TestableGlobals.Instance.NavigateURL(homeTabId);
            }
            else
            {
                redirectUrl = TestableGlobals.Instance.GetPortalDomainName(PortalSettings.Current.PortalAlias.HTTPAlias, Request, true) + "/" + Globals.glbDefaultPage;
            }

            return redirectUrl;
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="96" sc="9" el="108" ec="10">Mvp\ProfileModuleViewBase.cs</location>
            <body hash="c68a8279fea435d30c2071cc405a84c3"><![CDATA[{
            if (ProfileUserId == Null.NullInteger &&
                            (ModuleContext.PortalSettings.ActiveTab.TabID == ModuleContext.PortalSettings.UserTabId
                                || ModuleContext.PortalSettings.ActiveTab.ParentId == ModuleContext.PortalSettings.UserTabId))
            {
                //Clicked on breadcrumb - don't know which user
                Response.Redirect(Request.IsAuthenticated
                                      ? Globals.NavigateURL(ModuleContext.PortalSettings.ActiveTab.TabID, "", "UserId=" + ModuleContext.PortalSettings.UserId.ToString(CultureInfo.InvariantCulture))
                                      : GetRedirectUrl(), true);
            }

            base.OnInit(e);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="DisplayModule">
          <declaration><![CDATA[public abstract bool DisplayModule]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="IsUser">
          <declaration><![CDATA[protected bool IsUser]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="59" sc="13" el="61" ec="14">Mvp\ProfileModuleViewBase.cs</location>
            <body hash="3ba87352c5550abf21080b4e84eb2819"><![CDATA[{
                return ProfileUserId == ModuleContext.PortalSettings.UserId;
            }]]></body>
          </codeblock>
        </property>
        <property name="ProfileUser">
          <declaration><![CDATA[protected UserInfo ProfileUser]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ProfileUserId">
          <declaration><![CDATA[public int ProfileUserId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="42" sc="13" el="49" ec="14">Mvp\ProfileModuleViewBase.cs</location>
            <body hash="5f01c3eb5a77d8d904b5bffd4318b375"><![CDATA[{
                int UserId = Null.NullInteger;
                if (!string.IsNullOrEmpty(Request.Params["UserId"]))
                {
                    UserId = Int32.Parse(Request.Params["UserId"]);
                }
                return UserId;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="SettingsModel">
      <declaration><![CDATA[public class SettingsModel]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public SettingsModel()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="ModuleSettings">
          <declaration><![CDATA[public System.Collections.Generic.Dictionary<string, string> ModuleSettings]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="TabModuleSettings">
          <declaration><![CDATA[public System.Collections.Generic.Dictionary<string, string> TabModuleSettings]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="SettingsView&lt;TModel&gt;">
      <declaration><![CDATA[public abstract class SettingsView<TModel> : SettingsViewBase, ISettingsView<TModel>, IModuleViewBase, IView<TModel>, IView where TModel : SettingsModel, new()]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[protected SettingsView()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="GetModuleSetting">
          <declaration><![CDATA[protected string GetModuleSetting(string key, string defaultValue)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="51" sc="9" el="60" ec="10">Mvp\SettingsView.cs</location>
            <body hash="da44241ed2e4ee24a022663eaed378f5"><![CDATA[{
            var value = defaultValue;

            if(Model.ModuleSettings.ContainsKey(key))
            {
                value = Model.ModuleSettings[key];
            }

            return value;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetTabModuleSetting">
          <declaration><![CDATA[protected string GetTabModuleSetting(string key, string defaultValue)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="63" sc="9" el="72" ec="10">Mvp\SettingsView.cs</location>
            <body hash="380c2ed5c12705e60800ff9f0d0d46fd"><![CDATA[{
            var value = defaultValue;

            if (Model.TabModuleSettings.ContainsKey(key))
            {
                value = Model.TabModuleSettings[key];
            }

            return value;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_model">
          <declaration><![CDATA[private TModel _model;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="Model">
          <declaration><![CDATA[public TModel Model]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="37" sc="13" el="44" ec="14">Mvp\SettingsView.cs</location>
            <body hash="b657a15f08d58ef5e78c1ce711ae2fd0"><![CDATA[{
                if ((_model == null))
                {
                    throw new InvalidOperationException(
                        "The Model property is currently null, however it should have been automatically initialized by the presenter. This most likely indicates that no presenter was bound to the control. Check your presenter bindings.");
                }
                return _model;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="SettingsViewBase">
      <declaration><![CDATA[public class SettingsViewBase : ModuleViewBase, ISettingsView, IModuleViewBase, IView, ISettingsControl, IModuleControl]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public SettingsViewBase()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="add_OnLoadSettings">
          <declaration><![CDATA[public void add_OnLoadSettings(System.EventHandler value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="add_OnSaveSettings">
          <declaration><![CDATA[public void add_OnSaveSettings(System.EventHandler value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="LoadSettings">
          <declaration><![CDATA[public void LoadSettings()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="36" sc="9" el="44" ec="10">Mvp\SettingsViewBase.cs</location>
            <body hash="87a6bbdd98ee7f298df019770162e841"><![CDATA[{
            if (OnLoadSettings != null)
            {
                OnLoadSettings(this, EventArgs.Empty);
            }

            OnSettingsLoaded();

        }]]></body>
          </codeblock>
        </method>
        <method name="OnSavingSettings">
          <declaration><![CDATA[protected virtual void OnSavingSettings()]]></declaration>
          <documentation>
            <summary>
 OnSavingSettings method is called just before the Settings are saved
 </summary>
          </documentation>
          <codeblock>
            <location sl="76" sc="9" el="77" ec="10">Mvp\SettingsViewBase.cs</location>
            <body hash="539fa760ca172337a931519768c64187"><![CDATA[{
        }]]></body>
          </codeblock>
        </method>
        <method name="OnSettingsLoaded">
          <declaration><![CDATA[protected virtual void OnSettingsLoaded()]]></declaration>
          <documentation>
            <summary>
 The OnSettingsLoaded method is called when the Settings have been Loaded
 </summary>
          </documentation>
          <codeblock>
            <location sl="69" sc="9" el="70" ec="10">Mvp\SettingsViewBase.cs</location>
            <body hash="539fa760ca172337a931519768c64187"><![CDATA[{
        }]]></body>
          </codeblock>
        </method>
        <method name="remove_OnLoadSettings">
          <declaration><![CDATA[public void remove_OnLoadSettings(System.EventHandler value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="remove_OnSaveSettings">
          <declaration><![CDATA[public void remove_OnSaveSettings(System.EventHandler value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="UpdateSettings">
          <declaration><![CDATA[public void UpdateSettings()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="47" sc="9" el="54" ec="10">Mvp\SettingsViewBase.cs</location>
            <body hash="a459978cf729686ec045785da8d11c87"><![CDATA[{
            OnSavingSettings();

            if (OnSaveSettings != null)
            {
                OnSaveSettings(this, EventArgs.Empty);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="OnLoadSettings">
          <declaration><![CDATA[private System.EventHandler OnLoadSettings;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="OnSaveSettings">
          <declaration><![CDATA[private System.EventHandler OnSaveSettings;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
        <event name="OnLoadSettings">
          <declaration><![CDATA[public event System.EventHandler OnLoadSettings;]]></declaration>
          <documentation>
          </documentation>
        </event>
        <event name="OnSaveSettings">
          <declaration><![CDATA[public event System.EventHandler OnSaveSettings;]]></declaration>
          <documentation>
          </documentation>
        </event>
      </events>
    </class>
    <class name="ViewStateAttribute">
      <declaration><![CDATA[public class ViewStateAttribute : System.Attribute]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public ViewStateAttribute()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="ViewStateKey">
          <declaration><![CDATA[public string ViewStateKey]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="WebServicePresenter&lt;TView&gt;">
      <declaration><![CDATA[public abstract class WebServicePresenter<TView> : Presenter<TView> where TView : class, IWebServiceView]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[protected WebServicePresenter(TView view) : base(view)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="29" sc="9" el="31" ec="10">Mvp\WebServicePresenter.cs</location>
            <body hash="6f1dd343840b97372d97ae4ed6a66174"><![CDATA[protected WebServicePresenter(TView view) : base(view)
        {
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="ReleaseView">
          <deprecation>Deprecated in DotNetNuke 6.1. Base Class Method deprecated in WebFormsMVP 1.2</deprecation>
          <declaration><![CDATA[public override void ReleaseView()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="35" sc="9" el="36" ec="10">Mvp\WebServicePresenter.cs</location>
            <body hash="539fa760ca172337a931519768c64187"><![CDATA[{
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="WebServiceView">
      <declaration><![CDATA[public abstract class WebServiceView : WebServiceViewBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[protected WebServiceView()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="WebServiceViewBase">
      <declaration><![CDATA[public abstract class WebServiceViewBase : MvpWebService, IWebServiceViewBase, IView]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[protected WebServiceViewBase()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="WebServiceViewOfT&lt;TModel&gt;">
      <declaration><![CDATA[public abstract class WebServiceViewOfT<TModel> : ModuleViewBase, IView<TModel>, IView where TModel : class, new()]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[protected WebServiceViewOfT()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
        <field name="_model">
          <declaration><![CDATA[private TModel _model;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="Model">
          <declaration><![CDATA[public TModel Model]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="39" sc="13" el="46" ec="14">Mvp\WebServiceViewOfT.cs</location>
            <body hash="b657a15f08d58ef5e78c1ce711ae2fd0"><![CDATA[{
                if ((_model == null))
                {
                    throw new InvalidOperationException(
                        "The Model property is currently null, however it should have been automatically initialized by the presenter. This most likely indicates that no presenter was bound to the control. Check your presenter bindings.");
                }
                return _model;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="DotNetNuke.Web.UI">
    <class name="DotNetNukeErrorCode">
      <declaration><![CDATA[public enum DotNetNukeErrorCode]]></declaration>
      <documentation>
      </documentation>
      <constructors>
      </constructors>
      <methods>
      </methods>
      <fields>
        <field name="DeserializePanesFailed">
          <declaration><![CDATA[public const DotNetNukeErrorCode DeserializePanesFailed = 4;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="DuplicateWithAlias">
          <declaration><![CDATA[public const DotNetNukeErrorCode DuplicateWithAlias = 9;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="HostBeforeAfterError">
          <declaration><![CDATA[public const DotNetNukeErrorCode HostBeforeAfterError = 8;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="NotSet">
          <declaration><![CDATA[public const DotNetNukeErrorCode NotSet = 0;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="PageCircularReference">
          <declaration><![CDATA[public const DotNetNukeErrorCode PageCircularReference = 5;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="PageEditorPermissionError">
          <declaration><![CDATA[public const DotNetNukeErrorCode PageEditorPermissionError = 7;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="PageExists">
          <declaration><![CDATA[public const DotNetNukeErrorCode PageExists = 1;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="PageNameInvalid">
          <declaration><![CDATA[public const DotNetNukeErrorCode PageNameInvalid = 3;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="PageNameRequired">
          <declaration><![CDATA[public const DotNetNukeErrorCode PageNameRequired = 2;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ParentTabInvalid">
          <declaration><![CDATA[public const DotNetNukeErrorCode ParentTabInvalid = 6;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DotNetNukeException">
      <declaration><![CDATA[public class DotNetNukeException : System.Exception]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private readonly DotNetNukeErrorCode _ErrorCode = DotNetNukeErrorCode.NotSet;]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="495" sc="9" el="499" ec="10">UI\RibbonBarManager.cs</location>
            <body hash="023a5a5a0c718d3e277145e5fb584c79"><![CDATA[private readonly DotNetNukeErrorCode _ErrorCode = DotNetNukeErrorCode.NotSet;

        public DotNetNukeException()
        {
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[private readonly DotNetNukeErrorCode _ErrorCode = DotNetNukeErrorCode.NotSet;]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="495" sc="9" el="503" ec="10">UI\RibbonBarManager.cs</location>
            <body hash="f950190a2699d546748f7643e60fac96"><![CDATA[private readonly DotNetNukeErrorCode _ErrorCode = DotNetNukeErrorCode.NotSet;

        public DotNetNukeException()
        {
        }

        public DotNetNukeException(string message) : base(message)
        {
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[private readonly DotNetNukeErrorCode _ErrorCode = DotNetNukeErrorCode.NotSet;]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="495" sc="9" el="507" ec="10">UI\RibbonBarManager.cs</location>
            <body hash="cf4684bff4a1763f5161daa7170cbfff"><![CDATA[private readonly DotNetNukeErrorCode _ErrorCode = DotNetNukeErrorCode.NotSet;

        public DotNetNukeException()
        {
        }

        public DotNetNukeException(string message) : base(message)
        {
        }

        public DotNetNukeException(string message, Exception innerException) : base(message, innerException)
        {
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[private readonly DotNetNukeErrorCode _ErrorCode = DotNetNukeErrorCode.NotSet;]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="495" sc="9" el="512" ec="10">UI\RibbonBarManager.cs</location>
            <body hash="961254000f8484faabb4abca7cd1810b"><![CDATA[private readonly DotNetNukeErrorCode _ErrorCode = DotNetNukeErrorCode.NotSet;

        public DotNetNukeException()
        {
        }

        public DotNetNukeException(string message) : base(message)
        {
        }

        public DotNetNukeException(string message, Exception innerException) : base(message, innerException)
        {
        }

        public DotNetNukeException(string message, DotNetNukeErrorCode errorCode) : base(message)
        {
            _ErrorCode = errorCode;
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[private readonly DotNetNukeErrorCode _ErrorCode = DotNetNukeErrorCode.NotSet;]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="495" sc="9" el="517" ec="10">UI\RibbonBarManager.cs</location>
            <body hash="068738c690ce90682ac43292c245d914"><![CDATA[private readonly DotNetNukeErrorCode _ErrorCode = DotNetNukeErrorCode.NotSet;

        public DotNetNukeException()
        {
        }

        public DotNetNukeException(string message) : base(message)
        {
        }

        public DotNetNukeException(string message, Exception innerException) : base(message, innerException)
        {
        }

        public DotNetNukeException(string message, DotNetNukeErrorCode errorCode) : base(message)
        {
            _ErrorCode = errorCode;
        }

        public DotNetNukeException(string message, Exception innerException, DotNetNukeErrorCode errorCode) : base(message, innerException)
        {
            _ErrorCode = errorCode;
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[private readonly DotNetNukeErrorCode _ErrorCode = DotNetNukeErrorCode.NotSet;]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="495" sc="9" el="521" ec="10">UI\RibbonBarManager.cs</location>
            <body hash="4ec7be59140746f2a16279119a4f9af0"><![CDATA[private readonly DotNetNukeErrorCode _ErrorCode = DotNetNukeErrorCode.NotSet;

        public DotNetNukeException()
        {
        }

        public DotNetNukeException(string message) : base(message)
        {
        }

        public DotNetNukeException(string message, Exception innerException) : base(message, innerException)
        {
        }

        public DotNetNukeException(string message, DotNetNukeErrorCode errorCode) : base(message)
        {
            _ErrorCode = errorCode;
        }

        public DotNetNukeException(string message, Exception innerException, DotNetNukeErrorCode errorCode) : base(message, innerException)
        {
            _ErrorCode = errorCode;
        }

        public DotNetNukeException(SerializationInfo info, StreamingContext context) : base(info, context)
        {
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
        <field name="_ErrorCode">
          <declaration><![CDATA[private readonly DotNetNukeErrorCode _ErrorCode = DotNetNukeErrorCode.NotSet;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="ErrorCode">
          <declaration><![CDATA[public DotNetNukeErrorCode ErrorCode]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="526" sc="13" el="528" ec="14">UI\RibbonBarManager.cs</location>
            <body hash="6ce5cc267289fe5cfe6bc243f9fec547"><![CDATA[{
                return _ErrorCode;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="ILocalizable">
      <declaration><![CDATA[public interface ILocalizable]]></declaration>
      <documentation>
      </documentation>
      <constructors>
      </constructors>
      <methods>
        <method name="LocalizeStrings">
          <declaration><![CDATA[void LocalizeStrings();]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="Localize">
          <declaration><![CDATA[bool Localize]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="LocalResourceFile">
          <declaration><![CDATA[string LocalResourceFile]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="MessageWindowParameters">
      <declaration><![CDATA[public class MessageWindowParameters]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private string _Message = "";]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="31" sc="9" el="39" ec="10">UI\MessageWindowParameters.cs</location>
            <body hash="63e8b35a73c7c9ea2223f919ba4592d0"><![CDATA[private string _Message = "";
        private string _Title = "";
        private Unit _WindowHeight = Unit.Pixel(175);
        private Unit _WindowWidth = Unit.Pixel(350);

        public MessageWindowParameters(string message)
        {
            _Message = message;
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[private string _Message = "";]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="31" sc="9" el="45" ec="10">UI\MessageWindowParameters.cs</location>
            <body hash="4e3a1a1e9b79d6aada99d8f7de49f6fb"><![CDATA[private string _Message = "";
        private string _Title = "";
        private Unit _WindowHeight = Unit.Pixel(175);
        private Unit _WindowWidth = Unit.Pixel(350);

        public MessageWindowParameters(string message)
        {
            _Message = message;
        }

        public MessageWindowParameters(string message, string title)
        {
            _Message = message;
            _Title = title;
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[private string _Message = "";]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="31" sc="9" el="53" ec="10">UI\MessageWindowParameters.cs</location>
            <body hash="3e81d5c4577bee865b717811ef5fecb6"><![CDATA[private string _Message = "";
        private string _Title = "";
        private Unit _WindowHeight = Unit.Pixel(175);
        private Unit _WindowWidth = Unit.Pixel(350);

        public MessageWindowParameters(string message)
        {
            _Message = message;
        }

        public MessageWindowParameters(string message, string title)
        {
            _Message = message;
            _Title = title;
        }

        public MessageWindowParameters(string message, string title, string windowWidth, string windowHeight)
        {
            _Message = message;
            _Title = title;
            _WindowWidth = Unit.Parse(windowWidth);
            _WindowHeight = Unit.Parse(windowHeight);
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
        <field name="_Message">
          <declaration><![CDATA[private string _Message = "";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_Title">
          <declaration><![CDATA[private string _Title = "";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_WindowHeight">
          <declaration><![CDATA[private System.Web.UI.WebControls.Unit _WindowHeight = System.Web.UI.WebControls.Unit.Pixel(175);]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_WindowWidth">
          <declaration><![CDATA[private System.Web.UI.WebControls.Unit _WindowWidth = System.Web.UI.WebControls.Unit.Pixel(350);]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="Message">
          <declaration><![CDATA[public string Message]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="58" sc="13" el="60" ec="14">UI\MessageWindowParameters.cs</location>
            <body hash="a69eece4089111b2e710590ebc8647bb"><![CDATA[{
                return _Message;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="62" sc="13" el="67" ec="14">UI\MessageWindowParameters.cs</location>
            <body hash="e0c631abf2947e3e0c7964b5f027d8dd"><![CDATA[{
                //todo: javascript encode for onclick events
                _Message = value;
                _Message = _Message.Replace("'", "\\'");
                _Message = _Message.Replace("\"", "\\\"");
            }]]></body>
          </codeblock>
        </property>
        <property name="Title">
          <declaration><![CDATA[public string Title]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="73" sc="13" el="75" ec="14">UI\MessageWindowParameters.cs</location>
            <body hash="eb303cebdd6588a495546f3cdc26c6e0"><![CDATA[{
                return _Title;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="77" sc="13" el="82" ec="14">UI\MessageWindowParameters.cs</location>
            <body hash="49e1f382388f99cecd71cf1bb7f5e700"><![CDATA[{
                //todo: javascript encode for onclick events
                _Title = value;
                _Title = _Title.Replace("'", "\\'");
                _Title = _Title.Replace("\"", "\\\"");
            }]]></body>
          </codeblock>
        </property>
        <property name="WindowHeight">
          <declaration><![CDATA[public System.Web.UI.WebControls.Unit WindowHeight]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="100" sc="13" el="102" ec="14">UI\MessageWindowParameters.cs</location>
            <body hash="4ece771a4285b80db7a3da3fca364b8d"><![CDATA[{
                return _WindowHeight;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="104" sc="13" el="106" ec="14">UI\MessageWindowParameters.cs</location>
            <body hash="ae821bda2021dbb796c3139f32620f58"><![CDATA[{
                _WindowHeight = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="WindowWidth">
          <declaration><![CDATA[public System.Web.UI.WebControls.Unit WindowWidth]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="88" sc="13" el="90" ec="14">UI\MessageWindowParameters.cs</location>
            <body hash="0043aa16cc93c009ef1031c798edeaed"><![CDATA[{
                return _WindowWidth;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="92" sc="13" el="94" ec="14">UI\MessageWindowParameters.cs</location>
            <body hash="414ea520f67fe4722da0222335691e3f"><![CDATA[{
                _WindowWidth = value;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="RibbonBarManager">
      <declaration><![CDATA[public class RibbonBarManager]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public RibbonBarManager()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
        <constructor name=".cctor">
          <declaration><![CDATA[static RibbonBarManager()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="51" sc="6" el="51" ec="103">UI\RibbonBarManager.cs</location>
            <body hash="411d4b72770749c8e9121943939d6b23"><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof (RibbonBarManager))]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="CanMovePage">
          <declaration><![CDATA[public static bool CanMovePage()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="185" sc="9" el="210" ec="10">UI\RibbonBarManager.cs</location>
            <body hash="9cf8b15188b240616e413a5561895c0f"><![CDATA[{
            //Cannot move the host console page
            if ((IsHostConsolePage()))
            {
                return false;
            }

            //Page Editors - Can only move children they have 'Manage' permission to, they cannot move the top level page
            if ((!PortalSecurity.IsInRole("Administrators")))
            {
                int parentTabID = PortalSettings.Current.ActiveTab.ParentId;
                if ((parentTabID == Null.NullInteger))
                {
                    return false;
                }

                TabInfo parentTab = TabController.Instance.GetTab(parentTabID, PortalSettings.Current.ActiveTab.PortalID, false);
                string permissionList = "MANAGE";
                if ((!TabPermissionController.HasTabPermission(parentTab.TabPermissions, permissionList)))
                {
                    return false;
                }
            }

            return true;
        }]]></body>
          </codeblock>
        </method>
        <method name="DeserializeTabPermissions">
          <declaration><![CDATA[public static void DeserializeTabPermissions(XmlNodeList nodeTabPermissions, TabInfo tab)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="443" sc="9" el="490" ec="10">UI\RibbonBarManager.cs</location>
            <body hash="992603f3bdd565ab2fe8b612fcf016bf"><![CDATA[{
            var permissionController = new PermissionController();
            foreach (XmlNode xmlTabPermission in nodeTabPermissions)
            {
                var permissionKey = XmlUtils.GetNodeValue(xmlTabPermission.CreateNavigator(), "permissionkey");
                var permissionCode = XmlUtils.GetNodeValue(xmlTabPermission.CreateNavigator(), "permissioncode");
                var roleName = XmlUtils.GetNodeValue(xmlTabPermission.CreateNavigator(), "rolename");
                var allowAccess = XmlUtils.GetNodeValueBoolean(xmlTabPermission, "allowaccess");
                var permissions = permissionController.GetPermissionByCodeAndKey(permissionCode, permissionKey);
                var permissionId = permissions.Cast<PermissionInfo>().Last().PermissionID;

                var roleId = int.MinValue;
                switch (roleName)
                {
                    case Globals.glbRoleAllUsersName:
                        roleId = Convert.ToInt32(Globals.glbRoleAllUsers);
                        break;
                    case Globals.glbRoleUnauthUserName:
                        roleId = Convert.ToInt32(Globals.glbRoleUnauthUser);
                        break;
                    default:
                        var portal = PortalController.Instance.GetPortal(tab.PortalID);
                        var role = RoleController.Instance.GetRole(portal.PortalID, r => r.RoleName == roleName);
                        if (role != null)
                        {
                            roleId = role.RoleID;
                        }
                        break;
                }
                if (roleId != int.MinValue &&
                        !tab.TabPermissions.Cast<TabPermissionInfo>().Any(p =>
                                                                            p.RoleID == roleId
                                                                            && p.PermissionID == permissionId))
                {
                    var tabPermission = new TabPermissionInfo
                    {
                        TabID = tab.TabID,
                        PermissionID = permissionId,
                        RoleID = roleId,
                        AllowAccess = allowAccess
                    };

                    tab.TabPermissions.Add(tabPermission);
                }
            }

            TabController.Instance.UpdateTab(tab);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPagesList">
          <declaration><![CDATA[public static System.Collections.Generic.IList<TabInfo> GetPagesList()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="151" sc="9" el="172" ec="10">UI\RibbonBarManager.cs</location>
            <body hash="caae19cf13e6230f1d9d1058d474217e"><![CDATA[{
            IList<TabInfo> portalTabs = null;
            UserInfo userInfo = UserController.Instance.GetCurrentUserInfo();
            if (((userInfo != null) && userInfo.UserID != Null.NullInteger))
            {
                if ((userInfo.IsSuperUser && PortalSettings.Current.ActiveTab.IsSuperTab))
                {
                    portalTabs = TabController.Instance.GetTabsByPortal(Null.NullInteger).AsList();
                }
                else
                {
                    portalTabs = TabController.GetPortalTabs(PortalSettings.Current.PortalId, Null.NullInteger, false, Null.NullString, true, false, true, false, true);
                }
            }

            if (((portalTabs == null)))
            {
                portalTabs = new List<TabInfo>();
            }

            return portalTabs;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetParentTab">
          <declaration><![CDATA[public static TabInfo GetParentTab(TabInfo relativeToTab, TabRelativeLocation location)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="131" sc="9" el="148" ec="10">UI\RibbonBarManager.cs</location>
            <body hash="0aa2c7767f1a1bbfb3c154c0ed33b12a"><![CDATA[{
            if (((relativeToTab == null)))
            {
                return null;
            }

            TabInfo parentTab = null;
            if ((location == TabRelativeLocation.CHILD))
            {
                parentTab = relativeToTab;
            }
            else if (((relativeToTab != null) && relativeToTab.ParentId != Null.NullInteger))
            {
                parentTab = TabController.Instance.GetTab(relativeToTab.ParentId, relativeToTab.PortalID, false);
            }

            return parentTab;
        }]]></body>
          </codeblock>
        </method>
        <method name="InitTabInfoObject">
          <declaration><![CDATA[public static TabInfo InitTabInfoObject()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="53" sc="9" el="55" ec="10">UI\RibbonBarManager.cs</location>
            <body hash="5b86c1ee162aabf2285e330c34baeede"><![CDATA[{
            return InitTabInfoObject(null, TabRelativeLocation.AFTER);
        }]]></body>
          </codeblock>
        </method>
        <method name="InitTabInfoObject">
          <declaration><![CDATA[public static TabInfo InitTabInfoObject(TabInfo relativeToTab)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="58" sc="9" el="60" ec="10">UI\RibbonBarManager.cs</location>
            <body hash="df7e0e34c9ce4cdaef97466ed9b22d8e"><![CDATA[{
            return InitTabInfoObject(relativeToTab, TabRelativeLocation.AFTER);
        }]]></body>
          </codeblock>
        </method>
        <method name="InitTabInfoObject">
          <declaration><![CDATA[public static TabInfo InitTabInfoObject(TabInfo relativeToTab, TabRelativeLocation location)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="63" sc="9" el="128" ec="10">UI\RibbonBarManager.cs</location>
            <body hash="fc64a74a4e4598a89dd854e00306cef2"><![CDATA[{
            if (((relativeToTab == null)))
            {
                if (((PortalSettings.Current != null) && (PortalSettings.Current.ActiveTab != null)))
                {
                    relativeToTab = PortalSettings.Current.ActiveTab;
                }
            }

            var newTab = new TabInfo
            {
                TabID = Null.NullInteger,
                TabName = "",
                Title = "",
                IsVisible = false,
                DisableLink = false,
                IsDeleted = false,
                IsSecure = false,
                PermanentRedirect = false
            };

            TabInfo parentTab = GetParentTab(relativeToTab, location);

            if (((parentTab != null)))
            {
                newTab.PortalID = parentTab.PortalID;
                newTab.ParentId = parentTab.TabID;
                newTab.Level = parentTab.Level + 1;
                if ((PortalSettings.Current.SSLEnabled))
                {
                    newTab.IsSecure = parentTab.IsSecure;
                    //Inherit from parent
                }
            }
            else
            {
                newTab.PortalID = PortalSettings.Current.PortalId;
                newTab.ParentId = Null.NullInteger;
                newTab.Level = 0;
            }

            //Inherit permissions from parent
            newTab.TabPermissions.Clear();
            if ((newTab.PortalID != Null.NullInteger && (parentTab != null)))
            {
                newTab.TabPermissions.AddRange(parentTab.TabPermissions);
            }
            else if ((newTab.PortalID != Null.NullInteger))
            {
                //Give admin full permission
                ArrayList permissions = PermissionController.GetPermissionsByTab();

                foreach (PermissionInfo permission in permissions)
                {
                    TabPermissionInfo newTabPermission = new TabPermissionInfo();
                    newTabPermission.PermissionID = permission.PermissionID;
                    newTabPermission.PermissionKey = permission.PermissionKey;
                    newTabPermission.PermissionName = permission.PermissionName;
                    newTabPermission.AllowAccess = true;
                    newTabPermission.RoleID = PortalSettings.Current.AdministratorRoleId;
                    newTab.TabPermissions.Add(newTabPermission);
                }
            }

            return newTab;
        }]]></body>
          </codeblock>
        </method>
        <method name="IsHostConsolePage">
          <declaration><![CDATA[public static bool IsHostConsolePage()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="175" sc="9" el="177" ec="10">UI\RibbonBarManager.cs</location>
            <body hash="558273094489a033025dbd5bec3aea4b"><![CDATA[{
            return (PortalSettings.Current.ActiveTab.IsSuperTab && PortalSettings.Current.ActiveTab.TabPath == "//Host");
        }]]></body>
          </codeblock>
        </method>
        <method name="IsHostConsolePage">
          <declaration><![CDATA[public static bool IsHostConsolePage(TabInfo tab)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="180" sc="9" el="182" ec="10">UI\RibbonBarManager.cs</location>
            <body hash="e4d144bf6305ed8b89b22f146e34ea63"><![CDATA[{
            return (tab.IsSuperTab && tab.TabPath == "//Host");
        }]]></body>
          </codeblock>
        </method>
        <method name="SaveTabInfoObject">
          <declaration><![CDATA[public static int SaveTabInfoObject(TabInfo tab, TabInfo relativeToTab, TabRelativeLocation location, string templateMapPath)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="213" sc="9" el="417" ec="10">UI\RibbonBarManager.cs</location>
            <body hash="17babcf93035b755dca84962cdb7d773"><![CDATA[{
            //Validation:
            //Tab name is required
            //Tab name is invalid
			string invalidType;
			if (!TabController.IsValidTabName(tab.TabName, out invalidType))
			{
				switch (invalidType)
				{
					case "EmptyTabName":
						throw new DotNetNukeException("Page name is required.", DotNetNukeErrorCode.PageNameRequired);
					case "InvalidTabName":
						throw new DotNetNukeException("Page name is invalid.", DotNetNukeErrorCode.PageNameInvalid);
				}
			}
            else if ((Validate_IsCircularReference(tab.PortalID, tab.TabID)))
            {
                throw new DotNetNukeException("Cannot move page to that location.", DotNetNukeErrorCode.PageCircularReference);
            }

            bool usingDefaultLanguage = (tab.CultureCode == PortalSettings.Current.DefaultLanguage) || tab.CultureCode == null;

            if (PortalSettings.Current.ContentLocalizationEnabled)
            {
                if ((!usingDefaultLanguage))
                {
                    TabInfo defaultLanguageSelectedTab = tab.DefaultLanguageTab;

                    if ((defaultLanguageSelectedTab == null))
                    {
                        //get the siblings from the selectedtab and iterate through until you find a sibbling with a corresponding defaultlanguagetab
                        //if none are found get a list of all the tabs from the default language and then select the last one
                        var selectedTabSibblings = TabController.Instance.GetTabsByPortal(tab.PortalID).WithCulture(tab.CultureCode, true).AsList();
                        foreach (TabInfo sibling in selectedTabSibblings)
                        {
                            TabInfo siblingDefaultTab = sibling.DefaultLanguageTab;
                            if (((siblingDefaultTab != null)))
                            {
                                defaultLanguageSelectedTab = siblingDefaultTab;
                                break;
                            }
                        }

                        //still haven't found it
                        if ((defaultLanguageSelectedTab == null))
                        {
                            var defaultLanguageTabs = TabController.Instance.GetTabsByPortal(tab.PortalID).WithCulture(PortalSettings.Current.DefaultLanguage, true).AsList();
                            defaultLanguageSelectedTab = defaultLanguageTabs[defaultLanguageTabs.Count];
                            //get the last tab
                        }
                    }

                    relativeToTab = defaultLanguageSelectedTab;
                }
            }


            if ((location != TabRelativeLocation.NOTSET))
            {
                //Check Host tab - don't allow adding before or after
                if ((IsHostConsolePage(relativeToTab) && (location == TabRelativeLocation.AFTER || location == TabRelativeLocation.BEFORE)))
                {
                    throw new DotNetNukeException("You cannot add or move pages before or after the Host tab.", DotNetNukeErrorCode.HostBeforeAfterError);
                }

                TabInfo parentTab = GetParentTab(relativeToTab, location);
                string permissionList = "ADD,COPY,EDIT,MANAGE";
                //Check permissions for Page Editors when moving or inserting
                if ((!PortalSecurity.IsInRole("Administrators")))
                {
                    if (((parentTab == null) || !TabPermissionController.HasTabPermission(parentTab.TabPermissions, permissionList)))
                    {
                        throw new DotNetNukeException("You do not have permissions to add or move pages to this location. You can only add or move pages as children of pages you can edit.",
                                                      DotNetNukeErrorCode.PageEditorPermissionError);
                    }
                }

                if (((parentTab != null)))
                {
                    tab.ParentId = parentTab.TabID;
                    tab.Level = parentTab.Level + 1;
                }
                else
                {
                    tab.ParentId = Null.NullInteger;
                    tab.Level = 0;
                }
            }

            if ((tab.TabID > Null.NullInteger && tab.TabID == tab.ParentId))
            {
                throw new DotNetNukeException("Parent page is invalid.", DotNetNukeErrorCode.ParentTabInvalid);
            }

            tab.TabPath = Globals.GenerateTabPath(tab.ParentId, tab.TabName);
            //check whether have conflict between tab path and portal alias.
            if(TabController.IsDuplicateWithPortalAlias(PortalSettings.Current.PortalId, tab.TabPath))
            {
                throw new DotNetNukeException("The page path is duplicate with a site alias", DotNetNukeErrorCode.DuplicateWithAlias);
            }

            try
            {
                if ((tab.TabID < 0))
                {
                    if ((tab.TabPermissions.Count == 0 && tab.PortalID != Null.NullInteger))
                    {
                        //Give admin full permission
                        ArrayList permissions = PermissionController.GetPermissionsByTab();

                        foreach (PermissionInfo permission in permissions)
                        {
                            TabPermissionInfo newTabPermission = new TabPermissionInfo();
                            newTabPermission.PermissionID = permission.PermissionID;
                            newTabPermission.PermissionKey = permission.PermissionKey;
                            newTabPermission.PermissionName = permission.PermissionName;
                            newTabPermission.AllowAccess = true;
                            newTabPermission.RoleID = PortalSettings.Current.AdministratorRoleId;
                            tab.TabPermissions.Add(newTabPermission);
                        }
                    }

                    PortalSettings _PortalSettings = PortalController.Instance.GetCurrentPortalSettings();

                    if (_PortalSettings.ContentLocalizationEnabled)
                    {
                        Locale defaultLocale = LocaleController.Instance.GetDefaultLocale(tab.PortalID);
                        tab.CultureCode = defaultLocale.Code;
                    }
                    else
                    {
                        tab.CultureCode = Null.NullString;
                    }

                    if ((location == TabRelativeLocation.AFTER && (relativeToTab != null)))
                    {
                        tab.TabID = TabController.Instance.AddTabAfter(tab, relativeToTab.TabID);
                    }
                    else if ((location == TabRelativeLocation.BEFORE && (relativeToTab != null)))
                    {
                        tab.TabID = TabController.Instance.AddTabBefore(tab, relativeToTab.TabID);
                    }
                    else
                    {
                        tab.TabID = TabController.Instance.AddTab(tab);
                    }

                    if (_PortalSettings.ContentLocalizationEnabled)
                    {
                        TabController.Instance.CreateLocalizedCopies(tab);
                    }

                    TabController.Instance.UpdateTabSetting(tab.TabID, "CacheProvider", "");
                    TabController.Instance.UpdateTabSetting(tab.TabID, "CacheDuration", "");
                    TabController.Instance.UpdateTabSetting(tab.TabID, "CacheIncludeExclude", "0");
                    TabController.Instance.UpdateTabSetting(tab.TabID, "IncludeVaryBy", "");
                    TabController.Instance.UpdateTabSetting(tab.TabID, "ExcludeVaryBy", "");
                    TabController.Instance.UpdateTabSetting(tab.TabID, "MaxVaryByCount", "");
                }
                else
                {
                    TabController.Instance.UpdateTab(tab);

                    if ((location == TabRelativeLocation.AFTER && (relativeToTab != null)))
                    {
                        TabController.Instance.MoveTabAfter(tab, relativeToTab.TabID);
                    }
                    else if ((location == TabRelativeLocation.BEFORE && (relativeToTab != null)))
                    {
                        TabController.Instance.MoveTabBefore(tab, relativeToTab.TabID);
                    }
                }
            }
            catch (Exception ex)
            {
                Logger.Error(ex);

                if (ex.Message.StartsWith("Page Exists"))
                {
                    throw new DotNetNukeException(ex.Message, DotNetNukeErrorCode.PageExists);
                }
            }

            // create the page from a template
            if ((!string.IsNullOrEmpty(templateMapPath)))
            {
                XmlDocument xmlDoc = new XmlDocument();
                try
                {
                    xmlDoc.Load(templateMapPath);
                    TabController.DeserializePanes(xmlDoc.SelectSingleNode("//portal/tabs/tab/panes"), tab.PortalID, tab.TabID, PortalTemplateModuleAction.Ignore, new Hashtable());
                    
                    //save tab permissions
                    DeserializeTabPermissions(xmlDoc.SelectNodes("//portal/tabs/tab/tabpermissions/permission"), tab);
                }
                catch (Exception ex)
                {
                    Exceptions.LogException(ex);
                    throw new DotNetNukeException("Unable to process page template.", ex, DotNetNukeErrorCode.DeserializePanesFailed);
                }
            }

            //todo: reload tab from db or send back tabid instead?
            return tab.TabID;
        }]]></body>
          </codeblock>
        </method>
        <method name="Validate_IsCircularReference">
          <declaration><![CDATA[public static bool Validate_IsCircularReference(int portalID, int tabID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="420" sc="9" el="440" ec="10">UI\RibbonBarManager.cs</location>
            <body hash="af10c7889b3eed81b4d2ffdddb17fa22"><![CDATA[{
            if (tabID != -1)
            {
                TabInfo objtab = TabController.Instance.GetTab(tabID, portalID, false);

                if (((objtab == null)))
                {
                    return false;
                }
                if (objtab.Level == 0)
                {
                    return false;
                }
                if (tabID == objtab.ParentId)
                {
                    return true;
                }
                return Validate_IsCircularReference(portalID, objtab.ParentId);
            }
            return false;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="Logger">
          <declaration><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof(RibbonBarManager));]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="TabRelativeLocation">
      <declaration><![CDATA[public enum TabRelativeLocation]]></declaration>
      <documentation>
      </documentation>
      <constructors>
      </constructors>
      <methods>
      </methods>
      <fields>
        <field name="AFTER">
          <declaration><![CDATA[public const TabRelativeLocation AFTER = 2;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="BEFORE">
          <declaration><![CDATA[public const TabRelativeLocation BEFORE = 1;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="CHILD">
          <declaration><![CDATA[public const TabRelativeLocation CHILD = 3;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="NOTSET">
          <declaration><![CDATA[public const TabRelativeLocation NOTSET = 0;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="Utilities">
      <declaration><![CDATA[public class Utilities]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public Utilities()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="AddMessageWindow">
          <declaration><![CDATA[private static void AddMessageWindow(System.Web.UI.Control ctrl)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="50" sc="9" el="52" ec="10">UI\Utilities.cs</location>
            <body hash="23239b5d33f9ac56c834e66a904a494c"><![CDATA[{
            ClientResourceManager.RegisterScript(ctrl.Page, ctrl.ResolveUrl("~/js/dnn.postbackconfirm.js"));
        }]]></body>
          </codeblock>
        </method>
        <method name="ApplySkin">
          <declaration><![CDATA[public static void ApplySkin(System.Web.UI.Control telerikControl)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="59" sc="9" el="61" ec="10">UI\Utilities.cs</location>
            <body hash="949e1f5b919caa3eebeb9f0719f83c1f"><![CDATA[{
            ApplySkin(telerikControl, "", "", "");
        }]]></body>
          </codeblock>
        </method>
        <method name="ApplySkin">
          <declaration><![CDATA[public static void ApplySkin(System.Web.UI.Control telerikControl, string fallBackEmbeddedSkinName)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="64" sc="9" el="66" ec="10">UI\Utilities.cs</location>
            <body hash="4dd282d8465b9e8157be73b07edd4965"><![CDATA[{
            ApplySkin(telerikControl, "", "", fallBackEmbeddedSkinName);
        }]]></body>
          </codeblock>
        </method>
        <method name="ApplySkin">
          <declaration><![CDATA[public static void ApplySkin(System.Web.UI.Control telerikControl, string fallBackEmbeddedSkinName, string controlName)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="69" sc="9" el="71" ec="10">UI\Utilities.cs</location>
            <body hash="739c45c5c5445dab90522ffb7af19a22"><![CDATA[{
            ApplySkin(telerikControl, "", controlName, fallBackEmbeddedSkinName);
        }]]></body>
          </codeblock>
        </method>
        <method name="ApplySkin">
          <declaration><![CDATA[public static void ApplySkin(System.Web.UI.Control telerikControl, string fallBackEmbeddedSkinName, string controlName, string webControlSkinSubFolderName)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="77" sc="9" el="203" ec="10">UI\Utilities.cs</location>
            <body hash="a62fcef7052e1871b1538de6cdd5aa33"><![CDATA[{
            PropertyInfo skinProperty = null;
            PropertyInfo enableEmbeddedSkinsProperty = null;
            bool skinApplied = false;

            try
            {
                skinProperty = telerikControl.GetType().GetProperty("Skin");
                enableEmbeddedSkinsProperty = telerikControl.GetType().GetProperty("EnableEmbeddedSkins");

                if ((string.IsNullOrEmpty(controlName)))
                {
                    controlName = telerikControl.GetType().BaseType.Name;
                    if ((controlName.StartsWith("Rad") || controlName.StartsWith("Dnn")))
                    {
                        controlName = controlName.Substring(3);
                    }
                }


                string skinVirtualFolder = "";
                if (PortalSettings.Current != null)
                    skinVirtualFolder = PortalSettings.Current.ActiveTab.SkinPath.Replace('\\', '/').Replace("//", "/");
                else
                    skinVirtualFolder = telerikControl.ResolveUrl("~/Portals/_default/skins/_default/Aphelia"); // developer skin Aphelia

                string skinName = "";
                string webControlSkinName = "";
                if (skinProperty != null)
                {
                    var v = skinProperty.GetValue(telerikControl, null);
                    if (v != null) 
                        webControlSkinName = v.ToString();

                }
                if (string.IsNullOrEmpty(webControlSkinName)) webControlSkinName = "default";

                if ((skinVirtualFolder.EndsWith("/")))
                {
                    skinVirtualFolder = skinVirtualFolder.Substring(0, skinVirtualFolder.Length - 1);
                }
                int lastIndex = skinVirtualFolder.LastIndexOf("/");
                if ((lastIndex > -1 && skinVirtualFolder.Length > lastIndex))
                {
                    skinName = skinVirtualFolder.Substring(skinVirtualFolder.LastIndexOf("/") + 1);
                }

                string systemWebControlSkin = string.Empty;
                if ((!string.IsNullOrEmpty(skinName) && !string.IsNullOrEmpty(skinVirtualFolder)))
                {
					systemWebControlSkin = HttpContext.Current.Server.MapPath(skinVirtualFolder);
                    systemWebControlSkin = Path.Combine(systemWebControlSkin, "WebControlSkin");
                    systemWebControlSkin = Path.Combine(systemWebControlSkin, skinName);
                    systemWebControlSkin = Path.Combine(systemWebControlSkin, webControlSkinSubFolderName);
                    systemWebControlSkin = Path.Combine(systemWebControlSkin, string.Format("{0}.{1}.css", controlName, webControlSkinName));

                    //Check if the selected skin has the webcontrol skin
                    if ((!File.Exists(systemWebControlSkin)))
                    {
                        systemWebControlSkin = "";
                    }

                    //No skin, try default folder
                    if ((string.IsNullOrEmpty(systemWebControlSkin)))
                    {
                        skinVirtualFolder = telerikControl.ResolveUrl("~/Portals/_default/Skins/_default");
                        skinName = "Default";

                        if ((skinVirtualFolder.EndsWith("/")))
                        {
                            skinVirtualFolder = skinVirtualFolder.Substring(0, skinVirtualFolder.Length - 1);
                        }

                        if ((!string.IsNullOrEmpty(skinName) && !string.IsNullOrEmpty(skinVirtualFolder)))
                        {
                            systemWebControlSkin = HttpContext.Current.Server.MapPath(skinVirtualFolder);
                            systemWebControlSkin = Path.Combine(systemWebControlSkin, "WebControlSkin");
                            systemWebControlSkin = Path.Combine(systemWebControlSkin, skinName);
                            systemWebControlSkin = Path.Combine(systemWebControlSkin, webControlSkinSubFolderName);
                            systemWebControlSkin = Path.Combine(systemWebControlSkin, string.Format("{0}.{1}.css", controlName, webControlSkinName));

                            if ((!File.Exists(systemWebControlSkin)))
                            {
                                systemWebControlSkin = "";
                            }
                        }
                    }
                }

                if ((!string.IsNullOrEmpty(systemWebControlSkin)))
                {
                    string filePath = Path.Combine(skinVirtualFolder, "WebControlSkin");
                    filePath = Path.Combine(filePath, skinName);
                    filePath = Path.Combine(filePath, webControlSkinSubFolderName);
                    filePath = Path.Combine(filePath, string.Format("{0}.{1}.css", controlName, webControlSkinName));
                    filePath = filePath.Replace('\\', '/').Replace("//", "/").TrimEnd('/');
                    
                    if (HttpContext.Current != null && HttpContext.Current.Handler is Page)
                    {
                        ClientResourceManager.RegisterStyleSheet(HttpContext.Current.Handler as Page, filePath);
                    }

                    if (((skinProperty != null) && (enableEmbeddedSkinsProperty != null)))
                    {
                        skinApplied = true;
                        skinProperty.SetValue(telerikControl, webControlSkinName, null);
                        enableEmbeddedSkinsProperty.SetValue(telerikControl, false, null);
                    }
                }
            }
            catch (Exception ex)
            {
                Exceptions.LogException(ex);
            }

            if (skinProperty != null && enableEmbeddedSkinsProperty != null && !skinApplied)
            {
                if ((string.IsNullOrEmpty(fallBackEmbeddedSkinName)))
                {
                    fallBackEmbeddedSkinName = "Simple";
                }

                //Set fall back skin Embedded Skin
                skinProperty.SetValue(telerikControl, fallBackEmbeddedSkinName, null);
                enableEmbeddedSkinsProperty.SetValue(telerikControl, true, null);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="CreateThumbnail">
          <declaration><![CDATA[public static void CreateThumbnail(FileInfo image, System.Web.UI.WebControls.Image img, int maxWidth, int maxHeight)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="206" sc="9" el="235" ec="10">UI\Utilities.cs</location>
            <body hash="71c876106a4fa65f071f8c05d9edb369"><![CDATA[{
            if (image.Width > image.Height)
            {
                // Landscape
                if (image.Width > maxWidth)
                {
                    img.Width = maxWidth;
                    img.Height = Convert.ToInt32((image.Height*maxWidth)/(float) image.Width);
                }
                else
                {
                    img.Width = image.Width;
                    img.Height = image.Height;
                }
            }
            else
            {
                // Portrait
                if (image.Height > maxHeight)
                {
                    img.Width = Convert.ToInt32((image.Width*maxHeight)/(float) image.Height);
                    img.Height = maxHeight;
                }
                else
                {
                    img.Width = image.Width;
                    img.Height = image.Height;
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetClientAlert">
          <declaration><![CDATA[public static string GetClientAlert(System.Web.UI.Control ctrl, string message)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="238" sc="9" el="240" ec="10">UI\Utilities.cs</location>
            <body hash="dfdc825a5d66d72bd18907d6ebf2ee38"><![CDATA[{
            return GetClientAlert(ctrl, new MessageWindowParameters(message));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetClientAlert">
          <declaration><![CDATA[public static string GetClientAlert(System.Web.UI.Control ctrl, MessageWindowParameters message)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="243" sc="9" el="245" ec="10">UI\Utilities.cs</location>
            <body hash="232cde31d6e0964ef485e8cb3f3ae7f0"><![CDATA[{
            return "jQuery(document).ready(function($){$.dnnAlert({ okText: '" + GetLocalizedString("Ok.Text") + "', text: '" + message.Message + "', title: '" + message.Title + "'});});";
        }]]></body>
          </codeblock>
        </method>
        <method name="GetLocalizedString">
          <declaration><![CDATA[public static string GetLocalizedString(string key)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="248" sc="9" el="251" ec="10">UI\Utilities.cs</location>
            <body hash="016117e6d69e3af0ce1f51ac3a8c5a8a"><![CDATA[{
            string resourceFile = "/App_GlobalResources/WebControls.resx";
            return Localization.GetString(key, resourceFile);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetLocalizedStringFromParent">
          <declaration><![CDATA[public static string GetLocalizedStringFromParent(string key, System.Web.UI.Control control)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="292" sc="9" el="302" ec="10">UI\Utilities.cs</location>
            <body hash="1b144f7232e4cf180dbd236c773e3f2a"><![CDATA[{
            string returnValue = key;
            string resourceFileName = GetLocalResourceFile(control.Parent);

            if (!string.IsNullOrEmpty(resourceFileName))
            {
                returnValue = Localization.GetString(key, resourceFileName);
            }

            return returnValue;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetLocalResourceFile">
          <declaration><![CDATA[public static string GetLocalResourceFile(System.Web.UI.Control ctrl)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="254" sc="9" el="289" ec="10">UI\Utilities.cs</location>
            <body hash="72323409156dd4d68fe1679e861d8d48"><![CDATA[{
            string resourceFileName = Null.NullString;

            while (ctrl != null)
            {
                if (ctrl is UserControl)
                {
                    resourceFileName = string.Format("{0}/{1}/{2}.ascx.resx", ctrl.TemplateSourceDirectory, Localization.LocalResourceDirectory, ctrl.GetType().BaseType.Name);
                    if ((File.Exists(ctrl.Page.Server.MapPath(resourceFileName))))
                    {
                        break;
                    }
                }

                if (ctrl is IModuleControl)
                {
                    resourceFileName = ((IModuleControl) ctrl).LocalResourceFile;
                    break;
                }

                if (ctrl is ControlPanelBase)
                {
                    resourceFileName = ((ControlPanelBase) ctrl).LocalResourceFile;
                    break;
                }

                if (ctrl is Page)
                {
                    resourceFileName = string.Format("{0}/{1}/{2}.aspx.resx", ctrl.TemplateSourceDirectory, Localization.LocalResourceDirectory, ctrl.GetType().BaseType.Name);
                }

                ctrl = ctrl.Parent;
            }

            return resourceFileName;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetOnClientClickConfirm">
          <declaration><![CDATA[public static string GetOnClientClickConfirm(System.Web.UI.Control ctrl, string message)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="305" sc="9" el="307" ec="10">UI\Utilities.cs</location>
            <body hash="9548dd4dedaa29bc8ec7da0ab764d664"><![CDATA[{
            return GetOnClientClickConfirm(ctrl, new MessageWindowParameters(message));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetOnClientClickConfirm">
          <declaration><![CDATA[public static string GetOnClientClickConfirm(System.Web.UI.Control ctrl, MessageWindowParameters message)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="310" sc="9" el="314" ec="10">UI\Utilities.cs</location>
            <body hash="7b20c433e03a97451e6b90660427f952"><![CDATA[{
            AddMessageWindow(ctrl);
            //function(text, mozEvent, oWidth, oHeight, callerObj, oTitle) 
            return string.Format("return postBackConfirm('{0}', event, '{1}', '{2}', '', '{3}');", message.Message, message.WindowWidth, message.WindowHeight, message.Title);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetViewStateAsString">
          <declaration><![CDATA[public static string GetViewStateAsString(object value, string defaultValue)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="317" sc="9" el="324" ec="10">UI\Utilities.cs</location>
            <body hash="bfb2a8fa2ae8ff7714951c4e7a1f16fa"><![CDATA[{
            string _Value = defaultValue;
            if (value != null)
            {
                _Value = Convert.ToString(value);
            }
            return _Value;
        }]]></body>
          </codeblock>
        </method>
        <method name="RegisterAlertOnPageLoad">
          <declaration><![CDATA[public static void RegisterAlertOnPageLoad(System.Web.UI.Control ctrl, string message)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="327" sc="9" el="329" ec="10">UI\Utilities.cs</location>
            <body hash="dca5e50ef9b870091440765409258f09"><![CDATA[{
            RegisterAlertOnPageLoad(ctrl, new MessageWindowParameters(message));
        }]]></body>
          </codeblock>
        </method>
        <method name="RegisterAlertOnPageLoad">
          <declaration><![CDATA[public static void RegisterAlertOnPageLoad(System.Web.UI.Control ctrl, MessageWindowParameters message)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="332" sc="9" el="334" ec="10">UI\Utilities.cs</location>
            <body hash="bcf49a90ae51f3712c433a276a18f6a1"><![CDATA[{
            ctrl.Page.ClientScript.RegisterClientScriptBlock(ctrl.GetType(), ctrl.ID + "_AlertOnPageLoad", GetClientAlert(ctrl, message), true);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="DotNetNuke.Web.UI.WebControls">
    <class name="DnnAjaxLoadingPanel">
      <declaration><![CDATA[public class DnnAjaxLoadingPanel : RadAjaxLoadingPanel]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnAjaxLoadingPanel()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnAjaxPanel">
      <declaration><![CDATA[public class DnnAjaxPanel : RadAjaxPanel]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnAjaxPanel()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnAsyncUpload">
      <declaration><![CDATA[public class DnnAsyncUpload : RadAsyncUpload]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnAsyncUpload()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnBinaryImage">
      <declaration><![CDATA[public class DnnBinaryImage : RadBinaryImage]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnBinaryImage()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnButton">
      <declaration><![CDATA[public class DnnButton : System.Web.UI.WebControls.Button, ILocalizable]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private bool _Localize = true;]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="34" sc="9" el="42" ec="10">UI\WebControls\DnnButton.cs</location>
            <body hash="1b030cddc19870e2c6dde55066622d3e"><![CDATA[private bool _Localize = true;

        #region "Constructors"

        public DnnButton()
        {
            CssClass = "CommandButton";
            DisabledCssClass = "CommandButtonDisabled";
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="LocalizeStrings">
          <declaration><![CDATA[public virtual void LocalizeStrings()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="134" sc="9" el="161" ec="10">UI\WebControls\DnnButton.cs</location>
            <body hash="741a08caed9719dbcbe906c4806bd424"><![CDATA[{
            if ((Localize))
            {
                if ((!string.IsNullOrEmpty(ToolTip)))
                {
                    ToolTip = Utilities.GetLocalizedStringFromParent(ToolTip, this);
                }

                if ((!string.IsNullOrEmpty(Text)))
                {
                    string unlocalizedText = Text;
                    Text = Utilities.GetLocalizedStringFromParent(unlocalizedText, this);
                    if (String.IsNullOrEmpty(Text))
                    {
                        Text = unlocalizedText;
                    }

                    if ((string.IsNullOrEmpty(ToolTip)))
                    {
                        ToolTip = Utilities.GetLocalizedStringFromParent(unlocalizedText + ".ToolTip", this);
                        if (String.IsNullOrEmpty(ToolTip))
                        {
                            ToolTip = unlocalizedText;
                        }
                    }
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnPreRender">
          <declaration><![CDATA[protected override void OnPreRender(System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="85" sc="9" el="103" ec="10">UI\WebControls\DnnButton.cs</location>
            <body hash="3453ffb6433881e0029c2dad06827a35"><![CDATA[{
            base.OnPreRender(e);

            if ((!Enabled))
            {
                CssClass = DisabledCssClass;
            }

            if ((!string.IsNullOrEmpty(ConfirmMessage)))
            {
                string msg = ConfirmMessage;
                if ((Localize))
                {
                    msg = Utilities.GetLocalizedStringFromParent(ConfirmMessage, this);
                }
                //must be done before render
                OnClientClick = Utilities.GetOnClientClickConfirm(this, msg);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="Render">
          <declaration><![CDATA[protected override void Render(System.Web.UI.HtmlTextWriter writer)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="106" sc="9" el="109" ec="10">UI\WebControls\DnnButton.cs</location>
            <body hash="8f3fb37b7748da233ed1fda25b8594e9"><![CDATA[{
            LocalizeStrings();
            base.Render(writer);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_Localize">
          <declaration><![CDATA[private bool _Localize = true;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="ConfirmMessage">
          <declaration><![CDATA[public string ConfirmMessage]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="55" sc="13" el="57" ec="14">UI\WebControls\DnnButton.cs</location>
            <body hash="183b00dd9a50ad1afc65b037bfd33e9b"><![CDATA[{
                return ViewState["ConfirmMessage"] == null ? string.Empty : ViewState["ConfirmMessage"].ToString();
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="59" sc="13" el="61" ec="14">UI\WebControls\DnnButton.cs</location>
            <body hash="946474c48c9cab94e54cd15fdd49b9aa"><![CDATA[{
                ViewState["ConfirmMessage"] = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="DisabledCssClass">
          <declaration><![CDATA[public new string DisabledCssClass]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="71" sc="13" el="73" ec="14">UI\WebControls\DnnButton.cs</location>
            <body hash="2a60c68bce1d13f7c517071db623c19f"><![CDATA[{
                return ViewState["DisabledCssClass"] == null ? string.Empty : ViewState["DisabledCssClass"].ToString();
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="75" sc="13" el="77" ec="14">UI\WebControls\DnnButton.cs</location>
            <body hash="bdfc97101fa8b5551d08172d46da84a5"><![CDATA[{
                ViewState["DisabledCssClass"] = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="Localize">
          <declaration><![CDATA[public bool Localize]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="118" sc="13" el="124" ec="14">UI\WebControls\DnnButton.cs</location>
            <body hash="5a301b393683b206d550ef9181d75b76"><![CDATA[{
                if (DesignMode)
                {
                    return false;
                }
                return _Localize;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="126" sc="13" el="128" ec="14">UI\WebControls\DnnButton.cs</location>
            <body hash="7f442eb778feef34982862b7cb2a1f38"><![CDATA[{
                _Localize = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="LocalResourceFile">
          <declaration><![CDATA[public string LocalResourceFile]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnCalendar">
      <declaration><![CDATA[public class DnnCalendar : RadCalendar]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnCalendar()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnCalendarDay">
      <declaration><![CDATA[public class DnnCalendarDay : RadCalendarDay]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnCalendarDay()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="31" sc="9" el="33" ec="10">UI\WebControls\DnnCalendarDay.cs</location>
            <body hash="5cb1db18d362e2e2588d95c806873fbf"><![CDATA[public DnnCalendarDay()
        {
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnCalendarDay(RadCalendar calendar) : base(calendar)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="35" sc="9" el="37" ec="10">UI\WebControls\DnnCalendarDay.cs</location>
            <body hash="fadfd6e0d9f3665fb646d8f392869be9"><![CDATA[public DnnCalendarDay(RadCalendar calendar) : base(calendar)
        {
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnCaptcha">
      <declaration><![CDATA[public class DnnCaptcha : RadCaptcha]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnCaptcha()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnChart">
      <declaration><![CDATA[public class DnnChart : RadChart]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnChart()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnChartAxisItem">
      <declaration><![CDATA[public class DnnChartAxisItem : ChartAxisItem]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnChartAxisItem()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="33" sc="9" el="35" ec="10">UI\WebControls\DnnChartAxisItem.cs</location>
            <body hash="e87b3cee2bd56cb2ed95507d3476271a"><![CDATA[public DnnChartAxisItem()
        {
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnChartAxisItem(string labelText) : base(labelText)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="37" sc="9" el="39" ec="10">UI\WebControls\DnnChartAxisItem.cs</location>
            <body hash="2e8d548f45533fad59f89e42604ee550"><![CDATA[public DnnChartAxisItem(string labelText) : base(labelText)
        {
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnChartAxisItem(string labelText, Color color) : base(labelText, color)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="41" sc="9" el="43" ec="10">UI\WebControls\DnnChartAxisItem.cs</location>
            <body hash="3a72eeeafbc419ef8b7406ad24edab55"><![CDATA[public DnnChartAxisItem(string labelText, Color color) : base(labelText, color)
        {
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnChartAxisItem(string labelText, Color color, bool visible) : base(labelText, color, visible)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="45" sc="9" el="47" ec="10">UI\WebControls\DnnChartAxisItem.cs</location>
            <body hash="732f53591912a9bfd6a24b2f65f77547"><![CDATA[public DnnChartAxisItem(string labelText, Color color, bool visible) : base(labelText, color, visible)
        {
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnChartAxisItem(string labelText, Color color, bool visible, IContainer container) : base(labelText, color, visible, container)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="49" sc="9" el="51" ec="10">UI\WebControls\DnnChartAxisItem.cs</location>
            <body hash="c5efe2fa0fd6788675dbee5c14d1f845"><![CDATA[public DnnChartAxisItem(string labelText, Color color, bool visible, IContainer container) : base(labelText, color, visible, container)
        {
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnChartAxisItem(IContainer container) : base(container)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="53" sc="9" el="55" ec="10">UI\WebControls\DnnChartAxisItem.cs</location>
            <body hash="c43f1fc033a5d829a1c0f3bacef48750"><![CDATA[public DnnChartAxisItem(IContainer container) : base(container)
        {
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnChartSeries">
      <declaration><![CDATA[public class DnnChartSeries : ChartSeries]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnChartSeries()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="32" sc="9" el="34" ec="10">UI\WebControls\DnnChartSeries.cs</location>
            <body hash="d33908f0fdb8ac259a06d2bf732c5394"><![CDATA[public DnnChartSeries()
        {
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnChartSeries(string name) : base(name)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="36" sc="9" el="38" ec="10">UI\WebControls\DnnChartSeries.cs</location>
            <body hash="7c955de895daa55f5adda5ecb62de3d2"><![CDATA[public DnnChartSeries(string name) : base(name)
        {
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnChartSeries(string name, ChartSeriesType type) : base(name, type)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="40" sc="9" el="42" ec="10">UI\WebControls\DnnChartSeries.cs</location>
            <body hash="7b500b7622484a64bcc4f41ca57b17ac"><![CDATA[public DnnChartSeries(string name, ChartSeriesType type) : base(name, type)
        {
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnChartSeries(string name, ChartSeriesType type, ChartSeriesCollection parent) : base(name, type, parent)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="44" sc="9" el="46" ec="10">UI\WebControls\DnnChartSeries.cs</location>
            <body hash="5b4facde80ae572ccf3bbca597d4723e"><![CDATA[public DnnChartSeries(string name, ChartSeriesType type, ChartSeriesCollection parent) : base(name, type, parent)
        {
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnChartSeries(string seriesName, ChartSeriesType chartSeriesType, ChartSeriesCollection parent, ChartYAxisType yAxisType, StyleSeries style) : base(seriesName, chartSeriesType, parent, yAxisType, style)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="48" sc="9" el="51" ec="10">UI\WebControls\DnnChartSeries.cs</location>
            <body hash="a218229c1140b63aafe1da68ba1edce0"><![CDATA[public DnnChartSeries(string seriesName, ChartSeriesType chartSeriesType, ChartSeriesCollection parent, ChartYAxisType yAxisType, StyleSeries style)
            : base(seriesName, chartSeriesType, parent, yAxisType, style)
        {
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnChartSeries(string seriesName, ChartSeriesType chartSeriesType, ChartSeriesCollection parent, ChartYAxisType yAxisType, StyleSeries style, string dataYColumn, string dataXColumn, string dataYColumn2, string dataXColumn2, string dataYColumn3, string dataYColumn4, string dataLabelsColumn) : base(seriesName, chartSeriesType, parent, yAxisType, style, dataYColumn, dataXColumn, dataYColumn2, dataXColumn2, dataYColumn3, dataYColumn4, dataLabelsColumn)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="53" sc="9" el="57" ec="10">UI\WebControls\DnnChartSeries.cs</location>
            <body hash="274306235e2aacff40181b82bcb36179"><![CDATA[public DnnChartSeries(string seriesName, ChartSeriesType chartSeriesType, ChartSeriesCollection parent, ChartYAxisType yAxisType, StyleSeries style, string dataYColumn, string dataXColumn,
                              string dataYColumn2, string dataXColumn2, string dataYColumn3, string dataYColumn4, string dataLabelsColumn)
            : base(seriesName, chartSeriesType, parent, yAxisType, style, dataYColumn, dataXColumn, dataYColumn2, dataXColumn2, dataYColumn3, dataYColumn4, dataLabelsColumn)
        {
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnChartSeries(ChartSeriesCollection parent) : base(parent)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="59" sc="9" el="61" ec="10">UI\WebControls\DnnChartSeries.cs</location>
            <body hash="9426aa0e684b2c7112db70dfdb9c3de0"><![CDATA[public DnnChartSeries(ChartSeriesCollection parent) : base(parent)
        {
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnChartSeriesItem">
      <declaration><![CDATA[public class DnnChartSeriesItem : ChartSeriesItem]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnChartSeriesItem()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="34" sc="9" el="36" ec="10">UI\WebControls\DnnChartSeriesItem.cs</location>
            <body hash="86b02a9c97f23191651adf04880bf6e7"><![CDATA[public DnnChartSeriesItem()
        {
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnChartSeriesItem(bool isEmpty) : base(isEmpty)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="38" sc="9" el="40" ec="10">UI\WebControls\DnnChartSeriesItem.cs</location>
            <body hash="87fd74c0dfb657a49457d9e86b64f039"><![CDATA[public DnnChartSeriesItem(bool isEmpty) : base(isEmpty)
        {
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnChartSeriesItem(double value) : base(value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="42" sc="9" el="44" ec="10">UI\WebControls\DnnChartSeriesItem.cs</location>
            <body hash="3cd0ca18dd3f9287b9cdfec346ed4bc5"><![CDATA[public DnnChartSeriesItem(double value) : base(value)
        {
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnChartSeriesItem(double x, double y) : base(x, y)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="46" sc="9" el="48" ec="10">UI\WebControls\DnnChartSeriesItem.cs</location>
            <body hash="82ebd7f6bd442f6273098f23696ccb7a"><![CDATA[public DnnChartSeriesItem(double x, double y) : base(x, y)
        {
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnChartSeriesItem(double x, double y, double x2, double y2) : base(x, y, x2, y2)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="50" sc="9" el="52" ec="10">UI\WebControls\DnnChartSeriesItem.cs</location>
            <body hash="24c58edf257ff95036ba9af2c57417c6"><![CDATA[public DnnChartSeriesItem(double x, double y, double x2, double y2) : base(x, y, x2, y2)
        {
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnChartSeriesItem(double x, double y, double x2, double y2, double y3, double y4) : base(x, y, x2, y2, y3, y4)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="54" sc="9" el="56" ec="10">UI\WebControls\DnnChartSeriesItem.cs</location>
            <body hash="427b559189bca340fc870865b9397c8b"><![CDATA[public DnnChartSeriesItem(double x, double y, double x2, double y2, double y3, double y4) : base(x, y, x2, y2, y3, y4)
        {
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnChartSeriesItem(double x, double y, StyleSeriesItem style) : base(x, y, style)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="58" sc="9" el="60" ec="10">UI\WebControls\DnnChartSeriesItem.cs</location>
            <body hash="ef1cc966a07ce9b0a9ca01b2c102b403"><![CDATA[public DnnChartSeriesItem(double x, double y, StyleSeriesItem style) : base(x, y, style)
        {
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnChartSeriesItem(double value, string labelText) : base(value, labelText)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="62" sc="9" el="64" ec="10">UI\WebControls\DnnChartSeriesItem.cs</location>
            <body hash="bff607b61b126c61ccef9cd7f9f14e35"><![CDATA[public DnnChartSeriesItem(double value, string labelText) : base(value, labelText)
        {
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnChartSeriesItem(double value, string label, Color color) : base(value, label, color)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="66" sc="9" el="68" ec="10">UI\WebControls\DnnChartSeriesItem.cs</location>
            <body hash="7b53af75a2398d77ba6a0765431ff561"><![CDATA[public DnnChartSeriesItem(double value, string label, Color color) : base(value, label, color)
        {
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnChartSeriesItem(double value, string label, Color color, bool exploded) : base(value, label, color, exploded)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="70" sc="9" el="72" ec="10">UI\WebControls\DnnChartSeriesItem.cs</location>
            <body hash="0ac4dea3cbf48cb764dcc19b9e4b4980"><![CDATA[public DnnChartSeriesItem(double value, string label, Color color, bool exploded) : base(value, label, color, exploded)
        {
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnChartSeriesItem(ChartSeries parent) : base(parent)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="74" sc="9" el="76" ec="10">UI\WebControls\DnnChartSeriesItem.cs</location>
            <body hash="4233a3bd471dd9550b6f53b94f912ab9"><![CDATA[public DnnChartSeriesItem(ChartSeries parent) : base(parent)
        {
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnCheckBox">
      <declaration><![CDATA[public class DnnCheckBox : System.Web.UI.WebControls.CheckBox]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnCheckBox()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="CommandArgument">
          <declaration><![CDATA[public string CommandArgument]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="35" sc="13" el="37" ec="14">UI\WebControls\DnnCheckBox.cs</location>
            <body hash="a8419526ef05719d0b51b6b98789aca6"><![CDATA[{
                return Convert.ToString(ViewState["CommandArgument"]);
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="39" sc="13" el="41" ec="14">UI\WebControls\DnnCheckBox.cs</location>
            <body hash="fe2f5820999213a0925ef46527175140"><![CDATA[{
                ViewState["CommandArgument"] = value;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnCodeBlock">
      <declaration><![CDATA[public class DnnCodeBlock : RadCodeBlock]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnCodeBlock()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnColorPicker">
      <declaration><![CDATA[public class DnnColorPicker : RadColorPicker]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnColorPicker()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnColorPickerItem">
      <declaration><![CDATA[public class DnnColorPickerItem : ColorPickerItem]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnColorPickerItem()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="33" sc="9" el="35" ec="10">UI\WebControls\DnnColorPickerItem.cs</location>
            <body hash="0bc05232267c1e4280236b85f518f59f"><![CDATA[public DnnColorPickerItem()
        {
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnColorPickerItem(Color value) : base(value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="37" sc="9" el="39" ec="10">UI\WebControls\DnnColorPickerItem.cs</location>
            <body hash="23c1f70f6b597854bbce4833c6a3bffc"><![CDATA[public DnnColorPickerItem(Color value) : base(value)
        {
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnColorPickerItem(Color value, string title) : base(value, title)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="41" sc="9" el="43" ec="10">UI\WebControls\DnnColorPickerItem.cs</location>
            <body hash="eea663c741c1f4afc06feeb1c7040a80"><![CDATA[public DnnColorPickerItem(Color value, string title) : base(value, title)
        {
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnComboBox">
      <declaration><![CDATA[public class DnnComboBox : RadComboBox]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnComboBox()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="AddItem">
          <declaration><![CDATA[public void AddItem(string text, string value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="60" sc="9" el="62" ec="10">UI\WebControls\DnnComboBox.cs</location>
            <body hash="44e767e973d9bd1dc8877925ea6bab8f"><![CDATA[{
            Items.Add(new DnnComboBoxItem(text, value));
        }]]></body>
          </codeblock>
        </method>
        <method name="DataBind">
          <declaration><![CDATA[public void DataBind(string initialValue)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="70" sc="9" el="72" ec="10">UI\WebControls\DnnComboBox.cs</location>
            <body hash="722f0651739047416dd47995a61e201e"><![CDATA[{
            DataBind(initialValue, false);
        }]]></body>
          </codeblock>
        </method>
        <method name="DataBind">
          <declaration><![CDATA[public void DataBind(string initial, bool findByText)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="75" sc="9" el="79" ec="10">UI\WebControls\DnnComboBox.cs</location>
            <body hash="d22f4ecb149411baf380b760b65ba89e"><![CDATA[{
            DataBind();

            Select(initial, findByText);
        }]]></body>
          </codeblock>
        </method>
        <method name="InsertItem">
          <declaration><![CDATA[public void InsertItem(int index, string text, string value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="65" sc="9" el="67" ec="10">UI\WebControls\DnnComboBox.cs</location>
            <body hash="c64a3ba9143780e2001c95e2d5e31f7e"><![CDATA[{
            Items.Insert(index, new DnnComboBoxItem(text, value));
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="37" sc="9" el="50" ec="10">UI\WebControls\DnnComboBox.cs</location>
            <body hash="a1bccbe42d8c4757dd32d58b4580a693"><![CDATA[{
            base.OnInit(e);
            base.EnableEmbeddedBaseStylesheet = false;
            OnClientLoad = "$.dnnComboBoxLoaded";
            OnClientFocus = "$.dnnComboBoxHack";
            OnClientDropDownOpened = "$.dnnComboBoxScroll";
            MaxHeight = 240;
            ZIndex = 100010;
            Localization.ItemsCheckedString = Utilities.GetLocalizedString("ItemsCheckedString");
            Localization.CheckAllString = Utilities.GetLocalizedString("CheckAllString");
            Localization.AllItemsCheckedString = Utilities.GetLocalizedString("AllItemsCheckedString");
            Localization.NoMatches = Utilities.GetLocalizedString("NoMatches");
            Localization.ShowMoreFormatString = Utilities.GetLocalizedString("ShowMoreFormatString");
        }]]></body>
          </codeblock>
        </method>
        <method name="OnPreRender">
          <declaration><![CDATA[protected override void OnPreRender(System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="53" sc="9" el="57" ec="10">UI\WebControls\DnnComboBox.cs</location>
            <body hash="e09b4a02131bda64200bf4707a853c40"><![CDATA[{
            Utilities.ApplySkin(this);
            JavaScript.RequestRegistration(CommonJs.DnnPlugins);
            base.OnPreRender(e);
        }]]></body>
          </codeblock>
        </method>
        <method name="Select">
          <declaration><![CDATA[public void Select(string initial, bool findByText)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="82" sc="9" el="97" ec="10">UI\WebControls\DnnComboBox.cs</location>
            <body hash="321794583a394f8a1d7577e38282da53"><![CDATA[{
            if (findByText)
            {
                if (FindItemByText(initial, true) != null)
                {
					FindItemByText(initial, true).Selected = true;
                }
            }
            else
            {
				if (FindItemByValue(initial, true) != null)
                {
					FindItemByValue(initial, true).Selected = true;
                }
            } 
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnComboBoxItem">
      <declaration><![CDATA[public class DnnComboBoxItem : RadComboBoxItem]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnComboBoxItem()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="32" sc="9" el="34" ec="10">UI\WebControls\DnnComboBoxItem.cs</location>
            <body hash="682750818fa2cf75f3ce225e35f8d614"><![CDATA[public DnnComboBoxItem()
        {
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnComboBoxItem(string text) : base(text)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="36" sc="9" el="38" ec="10">UI\WebControls\DnnComboBoxItem.cs</location>
            <body hash="d5cacfa6f2848c1128367575e5d49aa6"><![CDATA[public DnnComboBoxItem(string text) : base(text)
        {
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnComboBoxItem(string text, string value) : base(text, value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="40" sc="9" el="42" ec="10">UI\WebControls\DnnComboBoxItem.cs</location>
            <body hash="96a7c127cec527426e58d9f60be26a1d"><![CDATA[public DnnComboBoxItem(string text, string value) : base(text, value)
        {
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="61" sc="9" el="72" ec="10">UI\WebControls\DnnComboBoxItem.cs</location>
            <body hash="689f47522a889869c29712fc7b8db22a"><![CDATA[{
            base.OnLoad(e);

            if (!string.IsNullOrEmpty(ResourceKey))
            {
                string resourceFile = Utilities.GetLocalResourceFile(this);
                if (!string.IsNullOrEmpty(resourceFile))
                {
                    Text = Localization.GetString(ResourceKey, resourceFile);
                }
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="ResourceKey">
          <declaration><![CDATA[public string ResourceKey]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="46" sc="13" el="53" ec="14">UI\WebControls\DnnComboBoxItem.cs</location>
            <body hash="520e758fc3e5b56e4290153c8ec87a2e"><![CDATA[{
                if (ViewState["ResourceKey"] != null)
                {
                    return ViewState["ResourceKey"].ToString();
                }

                return string.Empty;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="55" sc="13" el="57" ec="14">UI\WebControls\DnnComboBoxItem.cs</location>
            <body hash="189c783fbe112efde2b312ab30a9643a"><![CDATA[{
                ViewState["ResourceKey"] = value;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnConfirmPasswordOptions">
      <declaration><![CDATA[public class DnnConfirmPasswordOptions]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnConfirmPasswordOptions()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="30" sc="9" el="35" ec="10">UI\WebControls\DnnConfirmPasswordOptions.cs</location>
            <body hash="fa695ca37e2f4c871585f3cb332aba8e"><![CDATA[public DnnConfirmPasswordOptions()
        {
            // all the Confirm Password related resources are located under the Website\App_GlobalResources\WebControls.resx
            ConfirmPasswordUnmatchedText = Utilities.GetLocalizedString("ConfirmPasswordUnmatched");
            ConfirmPasswordMatchedText = Utilities.GetLocalizedString("ConfirmPasswordMatched");
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
        <field name="ConfirmPasswordMatchedText">
          <declaration><![CDATA[public string ConfirmPasswordMatchedText;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ConfirmPasswordUnmatchedText">
          <declaration><![CDATA[public string ConfirmPasswordUnmatchedText;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ContainerSelector">
          <declaration><![CDATA[public string ContainerSelector;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="FirstElementSelector">
          <declaration><![CDATA[public string FirstElementSelector;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="MatchedCssClass">
          <declaration><![CDATA[public string MatchedCssClass;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="SecondElementSelector">
          <declaration><![CDATA[public string SecondElementSelector;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="UnmatchedCssClass">
          <declaration><![CDATA[public string UnmatchedCssClass;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnContextMenu">
      <declaration><![CDATA[public class DnnContextMenu : RadContextMenu]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnContextMenu()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnContextMenuElementTarget">
      <declaration><![CDATA[public class DnnContextMenuElementTarget : ContextMenuElementTarget]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnContextMenuElementTarget()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnContextMenuTagNameTarget">
      <declaration><![CDATA[public class DnnContextMenuTagNameTarget : ContextMenuTagNameTarget]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnContextMenuTagNameTarget()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnDataPager">
      <declaration><![CDATA[public class DnnDataPager : RadDataPager]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnDataPager()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnDataPagerButtonField">
      <declaration><![CDATA[public class DnnDataPagerButtonField : RadDataPagerButtonField]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnDataPagerButtonField()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnDataPagerGoToPageField">
      <declaration><![CDATA[public class DnnDataPagerGoToPageField : RadDataPagerGoToPageField]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnDataPagerGoToPageField()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnDataPagerPageSizeField">
      <declaration><![CDATA[public class DnnDataPagerPageSizeField : RadDataPagerPageSizeField]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnDataPagerPageSizeField()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnDataPagerSliderField">
      <declaration><![CDATA[public class DnnDataPagerSliderField : RadDataPagerSliderField]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnDataPagerSliderField()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnDataPagerTemplatePageField">
      <declaration><![CDATA[public class DnnDataPagerTemplatePageField : RadDataPagerTemplatePageField]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnDataPagerTemplatePageField()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnDateInput">
      <declaration><![CDATA[public class DnnDateInput : RadDateInput]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnDateInput()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnDatePicker">
      <declaration><![CDATA[public class DnnDatePicker : RadDatePicker]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnDatePicker()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="35" sc="9" el="46" ec="10">UI\WebControls\DnnDatePicker.cs</location>
            <body hash="5a72bb451ecc4708c40f50885e7d2e61"><![CDATA[{
            base.OnInit(e);
            base.EnableEmbeddedBaseStylesheet = false;
            Utilities.ApplySkin(this);
            this.Calendar.ClientEvents.OnLoad = "$.dnnRadPickerHack";
            var specialDay = new RadCalendarDay();
            specialDay.Repeatable = Telerik.Web.UI.Calendar.RecurringEvents.Today;
            specialDay.ItemStyle.CssClass = "dnnCalendarToday";
            this.Calendar.SpecialDays.Add(specialDay);
            this.Calendar.RangeMinDate = (DateTime)SqlDateTime.MinValue;
            this.MinDate = (DateTime)SqlDateTime.MinValue;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnDateTimePicker">
      <declaration><![CDATA[public class DnnDateTimePicker : RadDateTimePicker]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnDateTimePicker()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="36" sc="3" el="47" ec="10">UI\WebControls\DnnDateTimePicker.cs</location>
            <body hash="3622860e7122af16a9f36b51bab80d47"><![CDATA[{
			base.OnInit(e);
			base.EnableEmbeddedBaseStylesheet = true;
			Utilities.ApplySkin(this, string.Empty, "DatePicker");
			this.Calendar.ClientEvents.OnLoad = "$.dnnRadPickerHack";
			var specialDay = new RadCalendarDay();
			specialDay.Repeatable = Telerik.Web.UI.Calendar.RecurringEvents.Today;
			specialDay.ItemStyle.CssClass = "dnnCalendarToday";
			this.Calendar.SpecialDays.Add(specialDay);
            this.Calendar.RangeMinDate = (DateTime)SqlDateTime.MinValue;
            this.MinDate = (DateTime)SqlDateTime.MinValue;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnDock">
      <declaration><![CDATA[public class DnnDock : RadDock]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnDock()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnDockCloseCommand">
      <declaration><![CDATA[public class DnnDockCloseCommand : DockCloseCommand]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnDockCloseCommand()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnDockCommand">
      <declaration><![CDATA[public class DnnDockCommand : DockCommand]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnDockCommand()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="31" sc="9" el="33" ec="10">UI\WebControls\DnnDockCommand.cs</location>
            <body hash="53b16fae3a69934fbebed0301c950034"><![CDATA[public DnnDockCommand()
        {
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnDockCommand(string clientTypeName, string cssClass, string name, string text, bool autoPostBack) : base(clientTypeName, cssClass, name, text, autoPostBack)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="35" sc="9" el="37" ec="10">UI\WebControls\DnnDockCommand.cs</location>
            <body hash="c8790dc49f3942d889e528e57fdde9c5"><![CDATA[public DnnDockCommand(string clientTypeName, string cssClass, string name, string text, bool autoPostBack) : base(clientTypeName, cssClass, name, text, autoPostBack)
        {
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnDockLayout">
      <declaration><![CDATA[public class DnnDockLayout : RadDockLayout]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnDockLayout()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnDockZone">
      <declaration><![CDATA[public class DnnDockZone : RadDockZone]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnDockZone()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnDropDownList">
      <declaration><![CDATA[public class DnnDropDownList : System.Web.UI.WebControls.Panel, System.Web.UI.INamingContainer]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private readonly Lazy<DnnDropDownListOptions> _options = new Lazy<DnnDropDownListOptions>(() => new DnnDropDownListOptions());]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="34" sc="9" el="35" ec="82">UI\WebControls\DnnDropDownList.cs</location>
            <body hash="60f9e43f0968f78f311ec338397735fe"><![CDATA[private readonly Lazy<DnnDropDownListOptions> _options =
            new Lazy<DnnDropDownListOptions>(() => new DnnDropDownListOptions());]]></body>
          </codeblock>
        </constructor>
        <constructor name=".cctor">
          <declaration><![CDATA[static DnnDropDownList()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="32" sc="9" el="32" ec="77">UI\WebControls\DnnDropDownList.cs</location>
            <body hash="3fbb0fb2de05f9b50c2fb38baa739947"><![CDATA[private static readonly object EventSelectionChanged = new object()]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="add_SelectionChanged">
          <declaration><![CDATA[public void add_SelectionChanged(System.EventHandler value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="92" sc="13" el="94" ec="14">UI\WebControls\DnnDropDownList.cs</location>
            <body hash="06887528ec1fb4939fb4c1246ab89685"><![CDATA[{
                Events.AddHandler(EventSelectionChanged, value);
            }]]></body>
          </codeblock>
        </method>
        <method name="CreateChildControls">
          <declaration><![CDATA[protected override void CreateChildControls()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="290" sc="9" el="305" ec="10">UI\WebControls\DnnDropDownList.cs</location>
            <body hash="ad5b85e88de1a857cf376818fe30c02e"><![CDATA[{
            Controls.Clear();

            var selectedItemPanel = new Panel { CssClass = "selected-item" };

            _selectedValue = new HtmlAnchor { HRef = "javascript:void(0);", Title = LocalizeString("DropDownList.SelectedItemExpandTooltip") };
            _selectedValue.Attributes.Add(HtmlTextWriterAttribute.Class.ToString(), "selected-value");
            _selectedValue.ViewStateMode = ViewStateMode.Disabled;
            selectedItemPanel.Controls.Add(_selectedValue);
            Controls.Add(selectedItemPanel);

            _stateControl = new DnnGenericHiddenField<DnnDropDownListState> { ID = "state" };
            _stateControl.ValueChanged += (sender, args) => OnSelectionChanged(EventArgs.Empty);
            Controls.Add(_stateControl);

        }]]></body>
          </codeblock>
        </method>
        <method name="GetPostBackScript">
          <declaration><![CDATA[private string GetPostBackScript()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="364" sc="9" el="386" ec="10">UI\WebControls\DnnDropDownList.cs</location>
            <body hash="efa115c3cacb1c70fd3b17df40e85390"><![CDATA[{
            var script = string.Empty;
            if (HasAttributes)
            {
                script = Attributes["onchange"];
                if (script != null)
                {
                    Attributes.Remove("onchange");
                }
            }
            var options = new PostBackOptions(this, string.Empty);
            if (CausesValidation)
            {
                options.PerformValidation = true;
                options.ValidationGroup = ValidationGroup;
            }
            if (Page.Form != null)
            {
                options.AutoPostBack = true;
                options.TrackFocus = true;
            }
            return script.Append(Page.ClientScript.GetPostBackEventReference(options), "; ");
        }]]></body>
          </codeblock>
        </method>
        <method name="LocalizeString">
          <declaration><![CDATA[private static string LocalizeString(string key)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="340" sc="9" el="342" ec="10">UI\WebControls\DnnDropDownList.cs</location>
            <body hash="f81e408f0c0212e447f20abc7bc2e77f"><![CDATA[{
            return Localization.GetString(key, Localization.SharedResourceFile);
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="308" sc="9" el="312" ec="10">UI\WebControls\DnnDropDownList.cs</location>
            <body hash="5980871589d6b623d14f0dbc0e6618e9"><![CDATA[{
            base.OnInit(e);
            StateControl.Value = ""; // for state persistence (stateControl)
            ServicesFramework.Instance.RequestAjaxAntiForgerySupport();
        }]]></body>
          </codeblock>
        </method>
        <method name="OnPreRender">
          <declaration><![CDATA[protected override void OnPreRender(System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="315" sc="9" el="323" ec="10">UI\WebControls\DnnDropDownList.cs</location>
            <body hash="d637e828ae7c8e7b5cea6e8d7a9b9063"><![CDATA[{
            RegisterClientScript(Page, Skin);

            this.AddCssClass("dnnDropDownList");

            base.OnPreRender(e);

            RegisterStartupScript();
        }]]></body>
          </codeblock>
        </method>
        <method name="OnSelectionChanged">
          <declaration><![CDATA[protected virtual void OnSelectionChanged(System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="326" sc="9" el="333" ec="10">UI\WebControls\DnnDropDownList.cs</location>
            <body hash="154ae8e344fb6b4f0a863a5ca900a213"><![CDATA[{
            var eventHandler = (EventHandler)Events[EventSelectionChanged];
            if (eventHandler == null)
            {
                return;
            }
            eventHandler(this, e);
        }]]></body>
          </codeblock>
        </method>
        <method name="RegisterClientScript">
          <declaration><![CDATA[internal static void RegisterClientScript(System.Web.UI.Page page, string skin)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="345" sc="9" el="361" ec="10">UI\WebControls\DnnDropDownList.cs</location>
            <body hash="50cebe1d772ba480c11d45ae29272aa7"><![CDATA[{
            ClientResourceManager.RegisterStyleSheet(page, "~/Resources/Shared/components/DropDownList/dnn.DropDownList.css");
            if (!string.IsNullOrEmpty(skin))
            {
                ClientResourceManager.RegisterStyleSheet(page, "~/Resources/Shared/components/DropDownList/dnn.DropDownList." + skin + ".css");
            }
            ClientResourceManager.RegisterStyleSheet(page, "~/Resources/Shared/scripts/jquery/dnn.jScrollBar.css");

            ClientResourceManager.RegisterScript(page, "~/Resources/Shared/scripts/dnn.extensions.js");
            ClientResourceManager.RegisterScript(page, "~/Resources/Shared/scripts/dnn.jquery.extensions.js");
            ClientResourceManager.RegisterScript(page, "~/Resources/Shared/scripts/dnn.DataStructures.js");
            ClientResourceManager.RegisterScript(page, "~/Resources/Shared/scripts/jquery/jquery.mousewheel.js");
            ClientResourceManager.RegisterScript(page, "~/Resources/Shared/scripts/jquery/dnn.jScrollBar.js");
            ClientResourceManager.RegisterScript(page, "~/Resources/Shared/scripts/TreeView/dnn.TreeView.js");
            ClientResourceManager.RegisterScript(page, "~/Resources/Shared/scripts/TreeView/dnn.DynamicTreeView.js");
            ClientResourceManager.RegisterScript(page, "~/Resources/Shared/Components/DropDownList/dnn.DropDownList.js");
        }]]></body>
          </codeblock>
        </method>
        <method name="RegisterStartupScript">
          <declaration><![CDATA[private void RegisterStartupScript()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="389" sc="9" el="427" ec="10">UI\WebControls\DnnDropDownList.cs</location>
            <body hash="58334a615a34fed84455eabfee1bd575"><![CDATA[{
            Options.InternalStateFieldId = StateControl.ClientID;

            if (SelectedItem == null && UseUndefinedItem)
            {
                SelectedItem = UndefinedItem;
            }

            Options.InitialState = new DnnDropDownListState
            {
                SelectedItem = StateControl.TypedValue != null ? StateControl.TypedValue.SelectedItem : null
            };

            SelectedValue.InnerText = (SelectedItem != null) ? SelectedItem.Text : Options.SelectItemDefaultText;

            Options.Disabled = !Enabled;

            var optionsAsJsonString = Json.Serialize(Options);

            var methods = new JavaScriptObjectDictionary();
            if (AutoPostBack)
            {
                methods.AddMethodBody("onSelectionChangedBackScript", GetPostBackScript());
            }

            var methodsAsJsonString = methods.ToJsonString();

            var script = string.Format("dnn.createDropDownList('#{0}', {1}, {2});{3}", ClientID, optionsAsJsonString, methodsAsJsonString, Environment.NewLine);

            if (ScriptManager.GetCurrent(Page) != null)
            {
                // respect MS AJAX
                ScriptManager.RegisterStartupScript(Page, GetType(), ClientID + "DnnDropDownList", script, true);
            }
            else
            {
                Page.ClientScript.RegisterStartupScript(GetType(), ClientID + "DnnDropDownList", script, true);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="remove_SelectionChanged">
          <declaration><![CDATA[public void remove_SelectionChanged(System.EventHandler value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="96" sc="13" el="98" ec="14">UI\WebControls\DnnDropDownList.cs</location>
            <body hash="cd287fc027b285207a62ca9c801f3100"><![CDATA[{
                Events.RemoveHandler(EventSelectionChanged, value);
            }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_options">
          <declaration><![CDATA[private readonly Lazy<DnnDropDownListOptions> _options = new Lazy<DnnDropDownListOptions>(() => new DnnDropDownListOptions());]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_selectedValue">
          <declaration><![CDATA[private System.Web.UI.HtmlControls.HtmlAnchor _selectedValue;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_stateControl">
          <declaration><![CDATA[private DnnGenericHiddenField<DnnDropDownListState> _stateControl;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="EventSelectionChanged">
          <declaration><![CDATA[private static readonly object EventSelectionChanged = new object();]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="AutoPostBack">
          <declaration><![CDATA[public bool AutoPostBack]]></declaration>
          <documentation>
            <summary>
 Gets or sets a value indicating whether a postback to the server automatically occurs when the user changes the list selection.
 </summary>
 <returns>
 true if a postback to the server automatically occurs whenever the user changes the selection of the list; otherwise, false. The default is false.
 </returns></documentation>
          <codeblock>
            <location sl="219" sc="13" el="221" ec="14">UI\WebControls\DnnDropDownList.cs</location>
            <body hash="3632ab597d24d457d5bdf4a55dc4f08a"><![CDATA[{
                return ViewState.GetValue("AutoPostBack", false);
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="223" sc="13" el="225" ec="14">UI\WebControls\DnnDropDownList.cs</location>
            <body hash="2ed9fadfa4703d08bd5cf0a449589d66"><![CDATA[{
                ViewState.SetValue("AutoPostBack", value, false);
            }]]></body>
          </codeblock>
        </property>
        <property name="CausesValidation">
          <declaration><![CDATA[public virtual bool CausesValidation]]></declaration>
          <documentation>
            <summary>
 Gets or sets a value indicating whether validation is performed when a control is clicked.
 </summary>
          </documentation>
          <codeblock>
            <location sl="234" sc="13" el="236" ec="14">UI\WebControls\DnnDropDownList.cs</location>
            <body hash="2ea1fafa4f850800e58eb87b49942e82"><![CDATA[{
                return ViewState.GetValue("CausesValidation", false);
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="238" sc="13" el="240" ec="14">UI\WebControls\DnnDropDownList.cs</location>
            <body hash="b346ba4f7ffb338e6c00fdb103e52851"><![CDATA[{
                ViewState.SetValue("CausesValidation", value, false);
            }]]></body>
          </codeblock>
        </property>
        <property name="Controls">
          <declaration><![CDATA[public override System.Web.UI.ControlCollection Controls]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="108" sc="13" el="111" ec="14">UI\WebControls\DnnDropDownList.cs</location>
            <body hash="9454f31a88317c388a43ae1cd4816179"><![CDATA[{
                EnsureChildControls();
                return base.Controls;
            }]]></body>
          </codeblock>
        </property>
        <property name="ExpandPath">
          <declaration><![CDATA[public string ExpandPath]]></declaration>
          <documentation>
            <summary>
 When the tree view in drop down has multiple level nodes, and the initial selected item is a child node.
 we need expand its parent nodes to make it selected.
 </summary>
          </documentation>
          <codeblock>
            <location sl="276" sc="13" el="278" ec="14">UI\WebControls\DnnDropDownList.cs</location>
            <body hash="6d6fa0ff1e00fd24721f13d616167a5d"><![CDATA[{
                return ClientAPI.GetClientVariable(Page, ClientID + "_expandPath");
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="280" sc="13" el="282" ec="14">UI\WebControls\DnnDropDownList.cs</location>
            <body hash="1ad276f76f949c178a4dbc95b085b8cf"><![CDATA[{
                ClientAPI.RegisterClientVariable(Page, ClientID + "_expandPath", value, true);
            }]]></body>
          </codeblock>
        </property>
        <property name="FirstItem">
          <declaration><![CDATA[public System.Web.UI.WebControls.ListItem FirstItem]]></declaration>
          <documentation>
            <summary>
 Item to be displayed as first item
 </summary>
          </documentation>
          <codeblock>
            <location sl="175" sc="13" el="177" ec="14">UI\WebControls\DnnDropDownList.cs</location>
            <body hash="28272dea27b45502f90174f144685e1f"><![CDATA[{
                return (Options.ItemList.FirstItem == null) ? null : new ListItem(Options.ItemList.FirstItem.Value, Options.ItemList.FirstItem.Key);
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="179" sc="13" el="182" ec="14">UI\WebControls\DnnDropDownList.cs</location>
            <body hash="0fea62ae4cf7e5ff45aa1bd27059d7bf"><![CDATA[{
                Options.ItemList.FirstItem = (value == null) ? null : new SerializableKeyValuePair<string, string>(value.Value, value.Text);
                UseUndefinedItem = false;
            }]]></body>
          </codeblock>
        </property>
        <property name="OnClientSelectionChanged">
          <declaration><![CDATA[public System.Collections.Generic.List<string> OnClientSelectionChanged]]></declaration>
          <documentation>
            <summary>
 Register a list of JavaScript methods that are executed when the selection from the list control changes on the client.
 </summary>
          </documentation>
          <codeblock>
            <location sl="264" sc="13" el="266" ec="14">UI\WebControls\DnnDropDownList.cs</location>
            <body hash="b5ae7fb14ff4a8456948d8524ef9302b"><![CDATA[{
                return Options.OnClientSelectionChanged;
            }]]></body>
          </codeblock>
        </property>
        <property name="Options">
          <declaration><![CDATA[internal DnnDropDownListOptions Options]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="47" sc="13" el="49" ec="14">UI\WebControls\DnnDropDownList.cs</location>
            <body hash="68db4dc2ebd4390476aa99629566d03c"><![CDATA[{
                return _options.Value;
            }]]></body>
          </codeblock>
        </property>
        <property name="SelectedItem">
          <declaration><![CDATA[public System.Web.UI.WebControls.ListItem SelectedItem]]></declaration>
          <documentation>
            <summary>
 Gets the selected item in the control, or selects the item in the control.
 </summary>
          </documentation>
          <codeblock>
            <location sl="120" sc="13" el="126" ec="14">UI\WebControls\DnnDropDownList.cs</location>
            <body hash="637c9f693de72267287f17ba0bbc7ac3"><![CDATA[{
                if (StateControl.TypedValue != null && StateControl.TypedValue.SelectedItem != null)
                {
                    return new ListItem { Text = StateControl.TypedValue.SelectedItem.Value, Value = StateControl.TypedValue.SelectedItem.Key };
                }
                return null;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="128" sc="13" el="130" ec="14">UI\WebControls\DnnDropDownList.cs</location>
            <body hash="c05f62033eef97fe775520a21723f73b"><![CDATA[{
                StateControl.TypedValueOrDefault.SelectedItem = (value == null) ? null : new SerializableKeyValuePair<string, string>(value.Value, value.Text);
            }]]></body>
          </codeblock>
        </property>
        <property name="SelectedItemValueAsInt">
          <declaration><![CDATA[public int SelectedItemValueAsInt]]></declaration>
          <documentation>
            <summary>
 When this method returns, contains the 32-bit signed integer value equivalent to the number contained in
 SelectedItem.Value, if the conversion succeeded, or Null.NullInteger if the conversion failed.
 </summary>
          </documentation>
          <codeblock>
            <location sl="141" sc="13" el="149" ec="14">UI\WebControls\DnnDropDownList.cs</location>
            <body hash="2ce3bb2e9b58d884dbc5268a6509bfa6"><![CDATA[{
                if (SelectedItem != null && !string.IsNullOrEmpty(SelectedItem.Value))
                {
                    int valueAsInt;
                    var parsed = Int32.TryParse(SelectedItem.Value, out valueAsInt);
                    return parsed ? valueAsInt : Null.NullInteger;
                }
                return Null.NullInteger;
            }]]></body>
          </codeblock>
        </property>
        <property name="SelectedValue">
          <declaration><![CDATA[private System.Web.UI.HtmlControls.HtmlAnchor SelectedValue]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="64" sc="13" el="67" ec="14">UI\WebControls\DnnDropDownList.cs</location>
            <body hash="6b0ba597dbc7c50ce3c8a89371d72a30"><![CDATA[{
                EnsureChildControls();
                return _selectedValue;
            }]]></body>
          </codeblock>
        </property>
        <property name="SelectItemDefaultText">
          <declaration><![CDATA[public string SelectItemDefaultText]]></declaration>
          <documentation>
            <summary>
 DropDownList Caption when no Item is selected.
 </summary>
          </documentation>
          <codeblock>
            <location sl="199" sc="13" el="201" ec="14">UI\WebControls\DnnDropDownList.cs</location>
            <body hash="3ec836e5278e6f01a911985c789ef86d"><![CDATA[{
                Options.SelectItemDefaultText = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="Services">
          <declaration><![CDATA[public ItemListServicesOptions Services]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="188" sc="13" el="190" ec="14">UI\WebControls\DnnDropDownList.cs</location>
            <body hash="df6cae9244c071400b4e8e1576a6c88e"><![CDATA[{
                return Options.Services;
            }]]></body>
          </codeblock>
        </property>
        <property name="Skin">
          <declaration><![CDATA[public string Skin]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="StateControl">
          <declaration><![CDATA[protected DnnGenericHiddenField<DnnDropDownListState> StateControl]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="55" sc="13" el="58" ec="14">UI\WebControls\DnnDropDownList.cs</location>
            <body hash="7a1587ee9bb3dbbe6c6feca2d27df30c"><![CDATA[{
                EnsureChildControls();
                return _stateControl;
            }]]></body>
          </codeblock>
        </property>
        <property name="UndefinedItem">
          <declaration><![CDATA[public System.Web.UI.WebControls.ListItem UndefinedItem]]></declaration>
          <documentation>
            <summary>
 SelectedItem's value when SelectedItem is not explicitly specified (i.e. equals null);
 Always displayed as first option in the list
 </summary>
          </documentation>
          <codeblock>
            <location sl="159" sc="13" el="161" ec="14">UI\WebControls\DnnDropDownList.cs</location>
            <body hash="d650c9dbe5c71e668e27a3830ce91186"><![CDATA[{
                return FirstItem;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="163" sc="13" el="166" ec="14">UI\WebControls\DnnDropDownList.cs</location>
            <body hash="ddcbbfc6c12ff40c58bdedc296a9cddd"><![CDATA[{
                FirstItem = value;
                UseUndefinedItem = true;
            }]]></body>
          </codeblock>
        </property>
        <property name="UseUndefinedItem">
          <declaration><![CDATA[private bool UseUndefinedItem]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="73" sc="13" el="75" ec="14">UI\WebControls\DnnDropDownList.cs</location>
            <body hash="06c5cb71516b92f9261227d87be90d41"><![CDATA[{
                return ViewState.GetValue("UseUndefinedItem", false);
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="77" sc="13" el="79" ec="14">UI\WebControls\DnnDropDownList.cs</location>
            <body hash="2c9988fd57b7a79ab204b90a5c8c47de"><![CDATA[{
                ViewState.SetValue("UseUndefinedItem", value, false);
            }]]></body>
          </codeblock>
        </property>
        <property name="ValidationGroup">
          <declaration><![CDATA[public virtual string ValidationGroup]]></declaration>
          <documentation>
            <summary>
 Gets or sets the group of controls for which the control causes validation when it posts back to the server.
 </summary>
          </documentation>
          <codeblock>
            <location sl="249" sc="13" el="251" ec="14">UI\WebControls\DnnDropDownList.cs</location>
            <body hash="8af2386bbdf9465566d537b03e6f6026"><![CDATA[{
                return ViewState.GetValue("ValidationGroup", string.Empty);
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="253" sc="13" el="255" ec="14">UI\WebControls\DnnDropDownList.cs</location>
            <body hash="d61b062fb5b4b320708b1bbbad9f462f"><![CDATA[{
                ViewState.SetValue("ValidationGroup", value, string.Empty);
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
        <event name="SelectionChanged">
          <declaration><![CDATA[public event System.EventHandler SelectionChanged]]></declaration>
          <documentation>
            <summary>
 Occurs when the selection from the list control changes between posts to the server.
 </summary>
          </documentation>
        </event>
      </events>
    </class>
    <class name="DnnDropDownListOptions">
      <declaration><![CDATA[public class DnnDropDownListOptions]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public bool Disabled = false;]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="16" sc="9" el="48" ec="10">UI\WebControls\DnnDropDownListOptions.cs</location>
            <body hash="691ca282d0203432ff5a0906d013a79b"><![CDATA[[DataMember(Name = "disabled")]
        public bool Disabled = false;

        [DataMember(Name = "selectItemDefaultText")]
        public string SelectItemDefaultText;

        [DataMember(Name = "initialState")]
        public DnnDropDownListState InitialState;

        private List<string> _onClientSelectionChanged;

        [DataMember(Name = "onSelectionChanged")]
        public List<string> OnClientSelectionChanged
        {
            get
            {
                return _onClientSelectionChanged ?? (_onClientSelectionChanged = new List<string>());
            }
        }

        [DataMember(Name = "services")]
        public ItemListServicesOptions Services;

        [DataMember(Name = "itemList")]
        public ItemListOptions ItemList;

        public DnnDropDownListOptions()
        {
            SelectedItemCss = "selected-item";
            SelectItemDefaultText = "";
            Services = new ItemListServicesOptions();
            ItemList = new ItemListOptions();
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
        <field name="_onClientSelectionChanged">
          <declaration><![CDATA[private System.Collections.Generic.List<string> _onClientSelectionChanged;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Disabled">
          <declaration><![CDATA[public bool Disabled = false;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="InitialState">
          <declaration><![CDATA[public DnnDropDownListState InitialState;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="InternalStateFieldId">
          <declaration><![CDATA[public string InternalStateFieldId;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ItemList">
          <declaration><![CDATA[public ItemListOptions ItemList;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="SelectedItemCss">
          <declaration><![CDATA[public string SelectedItemCss;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="SelectItemDefaultText">
          <declaration><![CDATA[public string SelectItemDefaultText;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Services">
          <declaration><![CDATA[public ItemListServicesOptions Services;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="OnClientSelectionChanged">
          <declaration><![CDATA[public System.Collections.Generic.List<string> OnClientSelectionChanged]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="31" sc="13" el="33" ec="14">UI\WebControls\DnnDropDownListOptions.cs</location>
            <body hash="7e00479866a0c6d2451e137bfc13dd41"><![CDATA[{
                return _onClientSelectionChanged ?? (_onClientSelectionChanged = new List<string>());
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnDropDownListState">
      <declaration><![CDATA[public class DnnDropDownListState]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnDropDownListState()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
        <field name="SelectedItem">
          <declaration><![CDATA[public SerializableKeyValuePair<string, string> SelectedItem;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnEditor">
      <declaration><![CDATA[public class DnnEditor : RadEditor]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnEditor()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnFieldLabel">
      <declaration><![CDATA[public class DnnFieldLabel : DnnLabel]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnFieldLabel()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="LocalizeStrings">
          <declaration><![CDATA[public override void LocalizeStrings()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="26" sc="9" el="29" ec="10">UI\WebControls\DnnFieldLabel.cs</location>
            <body hash="c259ec81e0d3f0b34bd67db91f84cc87"><![CDATA[{
            base.LocalizeStrings();
            Text = Text + Utilities.GetLocalizedString("FieldSuffix.Text");
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnFieldLiteral">
      <declaration><![CDATA[public class DnnFieldLiteral : DnnLiteral]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnFieldLiteral()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="LocalizeStrings">
          <declaration><![CDATA[public override void LocalizeStrings()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="26" sc="9" el="29" ec="10">UI\WebControls\DnnFieldLiteral.cs</location>
            <body hash="c259ec81e0d3f0b34bd67db91f84cc87"><![CDATA[{
            base.LocalizeStrings();
            Text = Text + Utilities.GetLocalizedString("FieldSuffix.Text");
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnFileDropDownList">
      <declaration><![CDATA[public class DnnFileDropDownList : DnnDropDownList]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnFileDropDownList()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="20" sc="9" el="31" ec="10">UI\WebControls\DnnFileDropDownList.cs</location>
            <body hash="a894a6d14b4086fd23565a563bff065a"><![CDATA[{
            base.OnInit(e);

            SelectItemDefaultText = Localization.GetString("DropDownList.SelectFileDefaultText", Localization.SharedResourceFile);
            Services.GetTreeMethod = "ItemListService/GetFiles";
            Services.SearchTreeMethod = "ItemListService/SearchFiles";
            Services.SortTreeMethod = "ItemListService/SortFiles";
            Services.ServiceRoot = "InternalServices";
            Options.ItemList.DisableUnspecifiedOrder = true;

            FolderId = Null.NullInteger;
        }]]></body>
          </codeblock>
        </method>
        <method name="OnPreRender">
          <declaration><![CDATA[protected override void OnPreRender(System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="34" sc="9" el="43" ec="10">UI\WebControls\DnnFileDropDownList.cs</location>
            <body hash="3f16af85e3e138d0cdaa04d66ef2bd40"><![CDATA[{
            this.AddCssClass("file");

            if (IncludeNoneSpecificItem)
            {
                UndefinedItem = new ListItem(SharedConstants.Unspecified, Null.NullInteger.ToString(CultureInfo.InvariantCulture));
            }

            base.OnPreRender(e);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="Filter">
          <declaration><![CDATA[public string Filter]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="FolderId">
          <declaration><![CDATA[public int FolderId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="65" sc="13" el="67" ec="14">UI\WebControls\DnnFileDropDownList.cs</location>
            <body hash="b94bb00eb2f197a8fa81438221983149"><![CDATA[{
                return Services.Parameters.ContainsKey("parentId") ? Convert.ToInt32(Services.Parameters["parentId"]) : Null.NullInteger;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="69" sc="13" el="71" ec="14">UI\WebControls\DnnFileDropDownList.cs</location>
            <body hash="9fd1841d2286280fc2503618b91b5801"><![CDATA[{
                Services.Parameters["parentId"] = value.ToString();
            }]]></body>
          </codeblock>
        </property>
        <property name="IncludeNoneSpecificItem">
          <declaration><![CDATA[public bool IncludeNoneSpecificItem]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="SelectedFile">
          <declaration><![CDATA[public IFileInfo SelectedFile]]></declaration>
          <documentation>
            <summary>
 Gets the selected Folder in the control, or selects the Folder in the control.
 </summary>
          </documentation>
          <codeblock>
            <location sl="52" sc="13" el="55" ec="14">UI\WebControls\DnnFileDropDownList.cs</location>
            <body hash="4889032ccd860a1e6ee0e957f43150e4"><![CDATA[{
                var fileId = SelectedItemValueAsInt;
                return (fileId == Null.NullInteger) ? null : FileManager.Instance.GetFile(fileId);
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="57" sc="13" el="59" ec="14">UI\WebControls\DnnFileDropDownList.cs</location>
            <body hash="60e9020229ff916f0e0e553d716dad5b"><![CDATA[{
                SelectedItem = (value != null) ? new ListItem() { Text = value.FileName, Value = value.FileId.ToString(CultureInfo.InvariantCulture) } : null;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnFileEditControl">
      <declaration><![CDATA[public class DnnFileEditControl : IntegerEditControl]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnFileEditControl()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="CreateChildControls">
          <declaration><![CDATA[protected override void CreateChildControls()]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   Creates the control contained within this control
 </summary>
 <history>
   [cnurse]	07/31/2006 created
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="78" sc="9" el="100" ec="10">UI\WebControls\DnnFileEditControl.cs</location>
            <body hash="4a208a4381f5212d05a7d09fd49c96c5"><![CDATA[{
            //First clear the controls collection
            Controls.Clear();

            var userControl = Page.LoadControl("~/controls/filepickeruploader.ascx");
            _fileControl = userControl as DnnFilePickerUploader;

            if (_fileControl != null)
            {
                _fileControl.ID = string.Format("{0}FileControl", ID);
                _fileControl.FileFilter = FileFilter;
                _fileControl.FilePath = FilePath;
                _fileControl.FileID = IntegerValue;
                _fileControl.UsePersonalFolder = true;
                _fileControl.User = User;
	            _fileControl.Required = true;

                //Add table to Control
                Controls.Add(_fileControl);
            }

            base.CreateChildControls();
        }]]></body>
          </codeblock>
        </method>
        <method name="LoadPostData">
          <declaration><![CDATA[public override bool LoadPostData(string postDataKey, NameValueCollection postCollection)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   Loads the Post Back Data and determines whether the value has change
 </summary>
 <remarks>
   In this case because the <see cref="F:DotNetNuke.Web.UI.WebControls.DnnFileEditControl._fileControl" /> is a contained control, we do not need
   to process the PostBackData (it has been handled by the File Control).  We just use
   this method as the Framework calls it for us.
 </remarks>
 <param name="postDataKey">A key to the PostBack Data to load</param>
 <param name="postCollection">A name value collection of postback data</param>
 <history>
   [cnurse]	08/01/2006	created
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="162" sc="9" el="173" ec="10">UI\WebControls\DnnFileEditControl.cs</location>
            <body hash="259ab8759fc29e298cae644ed61abacd"><![CDATA[{
            bool dataChanged = false;
            string presentValue = StringValue;
            //string postedValue = postCollection[string.Format("{0}FileControl$dnnFileUploadFileId", postDataKey)];
            string postedValue = _fileControl.FileID.ToString();
            if (!presentValue.Equals(postedValue))
            {
                Value = postedValue;
                dataChanged = true;
            }
            return dataChanged;
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="103" sc="9" el="106" ec="10">UI\WebControls\DnnFileEditControl.cs</location>
            <body hash="0f37591377489f542794effd7f254c6d"><![CDATA[{
            EnsureChildControls();
            base.OnInit(e);
        }]]></body>
          </codeblock>
        </method>
        <method name="OnPreRender">
          <declaration><![CDATA[protected override void OnPreRender(System.EventArgs e)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   Runs before the control is rendered.
 </summary>
 <history>
   [cnurse]	07/31/2006 created
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="117" sc="9" el="126" ec="10">UI\WebControls\DnnFileEditControl.cs</location>
            <body hash="fd6b68f4ae05d5b604be7ab9be6163ad"><![CDATA[{
            base.OnPreRender(e);

            _fileControl.FileID = IntegerValue;

            if (Page != null)
            {
                Page.RegisterRequiresPostBack(this);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="RenderEditMode">
          <declaration><![CDATA[protected override void RenderEditMode(System.Web.UI.HtmlTextWriter writer)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   Renders the control in edit mode
 </summary>
 <param name="writer">An HtmlTextWriter to render the control to</param>
 <history>
   [cnurse]	04/20/2006	created
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="138" sc="9" el="140" ec="10">UI\WebControls\DnnFileEditControl.cs</location>
            <body hash="42fcc3814ddbb2b2a30d58482b7a6866"><![CDATA[{
            RenderChildren(writer);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_fileControl">
          <declaration><![CDATA[private DnnFilePickerUploader _fileControl;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="FileFilter">
          <declaration><![CDATA[public string FileFilter]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   Gets or sets the current file extension filter.
 </summary>
 <history>
   [anurse]	08/11/2006 documented
 </history>
 -----------------------------------------------------------------------------</documentation>
        </property>
        <property name="FilePath">
          <declaration><![CDATA[public string FilePath]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   Gets or sets the current file path.
 </summary>
 <history>
   [cnurse]	07/02/2007 created
 </history>
 -----------------------------------------------------------------------------</documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnFileExplorer">
      <declaration><![CDATA[public class DnnFileExplorer : RadFileExplorer]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnFileExplorer()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnFilePicker">
      <declaration><![CDATA[public class DnnFilePicker : System.Web.UI.WebControls.CompositeControl, ILocalizable]]></declaration>
      <documentation>
        <summary>
   The FilePicker Class provides a File Picker Control for DotNetNuke
 </summary>
 <history>
   [cnurse]	07/31/2006
 </history></documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private bool _localize = true;]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="105" sc="3" el="107" ec="31">UI\WebControls\DnnFilePicker.cs</location>
            <body hash="265ffd94a6c4ed2a1646a05c97441d72"><![CDATA[private bool _localize = true;
		private int _maxHeight = 100;
		private int _maxWidth = 135;]]></body>
          </codeblock>
        </constructor>
        <constructor name=".cctor">
          <declaration><![CDATA[static DnnFilePicker()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="53" sc="3" el="53" ec="97">UI\WebControls\DnnFilePicker.cs</location>
            <body hash="36328c9cd523b54ed31c43a2766f4893"><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof (DnnFilePicker))]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="AddButton">
          <declaration><![CDATA[private void AddButton(ref System.Web.UI.WebControls.LinkButton button)]]></declaration>
          <documentation>
            <summary>
   AddButton adds a button to the Command Row
 </summary>
 <param name="button">The button to add to the Row</param>
 <history>
   [cnurse]	07/31/2006 created
 </history></documentation>
          <codeblock>
            <location sl="513" sc="3" el="519" ec="4">UI\WebControls\DnnFilePicker.cs</location>
            <body hash="65297a656e8d6205178f319359f01a08"><![CDATA[{
		    button = new LinkButton {EnableViewState = false, CausesValidation = false};
		    button.ControlStyle.CssClass = CommandCssClass;
			button.Visible = false;

			_pnlButtons.Controls.Add(button);
		}]]></body>
          </codeblock>
        </method>
        <method name="AddButtonArea">
          <declaration><![CDATA[private void AddButtonArea()]]></declaration>
          <documentation>
            <summary>
   AddCommandRow adds the Command Row
 </summary>
 <history>
   [cnurse]	07/31/2006  created
 </history></documentation>
          <codeblock>
            <location sl="528" sc="3" el="541" ec="4">UI\WebControls\DnnFilePicker.cs</location>
            <body hash="e1b67ac9e985b0a92286073d2e65092b"><![CDATA[{
		    _pnlButtons = new Panel {Visible = false};

		    AddButton(ref _cmdUpload);
			_cmdUpload.Click += UploadFile;

			AddButton(ref _cmdSave);
			_cmdSave.Click += SaveFile;

			AddButton(ref _cmdCancel);
			_cmdCancel.Click += CancelUpload;

			_pnlLeftDiv.Controls.Add(_pnlButtons);
		}]]></body>
          </codeblock>
        </method>
        <method name="AddFileAndUploadArea">
          <declaration><![CDATA[private void AddFileAndUploadArea()]]></declaration>
          <documentation>
            <summary>
   AddFileRow adds the Files Row
 </summary>
 <history>
   [cnurse]	07/31/2006  created
 </history></documentation>
          <codeblock>
            <location sl="550" sc="3" el="574" ec="4">UI\WebControls\DnnFilePicker.cs</location>
            <body hash="6e23e1b073d1c6e095fe629a17de416b"><![CDATA[{
			//Create Url Div
		    _pnlFile = new Panel {CssClass = "dnnFormItem"};

		    //Create File Label
		    _lblFile = new Label {EnableViewState = false};
		    _pnlFile.Controls.Add(_lblFile);

			//Create Files Combo
		    _cboFiles = new DropDownList {ID = "File", DataTextField = "Text", DataValueField = "Value", AutoPostBack = true};
		    _cboFiles.SelectedIndexChanged += FileChanged;
			_pnlFile.Controls.Add(_cboFiles);

			_pnlLeftDiv.Controls.Add(_pnlFile);

			//Create Upload Div
		    _pnlUpload = new Panel {CssClass = "dnnFormItem"};

		    //Create Upload Box
			_txtFile = new HtmlInputFile();
			_txtFile.Attributes.Add("size", "13");
			_pnlUpload.Controls.Add(_txtFile);

			_pnlLeftDiv.Controls.Add(_pnlUpload);
		}]]></body>
          </codeblock>
        </method>
        <method name="AddFolderArea">
          <declaration><![CDATA[private void AddFolderArea()]]></declaration>
          <documentation>
            <summary>
   AddFolderRow adds the Folders Row
 </summary>
 <history>
   [cnurse]	07/31/2006  created
 </history></documentation>
          <codeblock>
            <location sl="583" sc="3" el="601" ec="4">UI\WebControls\DnnFilePicker.cs</location>
            <body hash="ff9f42413d604396f64cd558311cf136"><![CDATA[{
			//Create Url Div
		    _pnlFolder = new Panel {CssClass = "dnnFormItem"};

		    //Create Folder Label
		    _lblFolder = new Label {EnableViewState = false};
		    _pnlFolder.Controls.Add(_lblFolder);

			//Create Folders Combo
		    _cboFolders = new DropDownList {ID = "Folder", AutoPostBack = true};
		    _cboFolders.SelectedIndexChanged += FolderChanged;
			_pnlFolder.Controls.Add(_cboFolders);

			// add to left div
			_pnlLeftDiv.Controls.Add(_pnlFolder);

			//Load Folders
			LoadFolders();
		}]]></body>
          </codeblock>
        </method>
        <method name="AddMessageRow">
          <declaration><![CDATA[private void AddMessageRow()]]></declaration>
          <documentation>
            <summary>
   AddMessageRow adds the Message Row
 </summary>
 <history>
   [cnurse]	07/31/2006  created
 </history></documentation>
          <codeblock>
            <location sl="619" sc="3" el="627" ec="4">UI\WebControls\DnnFilePicker.cs</location>
            <body hash="ffa667b13bf1fa4cdfc79ba2d4883492"><![CDATA[{
		    _pnlMessage = new Panel {CssClass = "dnnFormMessage dnnFormWarning"};

		    //Create Label
		    _lblMessage = new Label {EnableViewState = false, Text = ""};
		    _pnlMessage.Controls.Add(_lblMessage);

			_pnlLeftDiv.Controls.Add(_pnlMessage);
		}]]></body>
          </codeblock>
        </method>
        <method name="CancelUpload">
          <declaration><![CDATA[private void CancelUpload(object sender, System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="923" sc="3" el="925" ec="4">UI\WebControls\DnnFilePicker.cs</location>
            <body hash="72cdb575c51cc3b173ddeddd088a6d41"><![CDATA[{
			Mode = FileControlMode.Normal;
		}]]></body>
          </codeblock>
        </method>
        <method name="CreateChildControls">
          <declaration><![CDATA[protected override void CreateChildControls()]]></declaration>
          <documentation>
            <summary>
   CreateChildControls overrides the Base class's method to correctly build the
   control based on the configuration
 </summary>
 <history>
   [cnurse]	07/31/2006  created
 </history></documentation>
          <codeblock>
            <location sl="798" sc="3" el="822" ec="4">UI\WebControls\DnnFilePicker.cs</location>
            <body hash="8ed2ee8e59909d6c144d6e6ec279d808"><![CDATA[{
			//First clear the controls collection
			Controls.Clear();

	        _pnlContainer = new Panel {CssClass = "dnnFilePicker"};

	        _pnlLeftDiv = new Panel {CssClass = "dnnLeft"};

	        AddFolderArea();
			AddFileAndUploadArea();
			AddButtonArea();
			AddMessageRow();

			_pnlContainer.Controls.Add(_pnlLeftDiv);

	        _pnlRightDiv = new Panel {CssClass = "dnnLeft"};

	        GeneratePreviewImage();
		
			_pnlContainer.Controls.Add(_pnlRightDiv);

			Controls.Add(_pnlContainer);

			base.CreateChildControls();
		}]]></body>
          </codeblock>
        </method>
        <method name="FileChanged">
          <declaration><![CDATA[private void FileChanged(object sender, System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="928" sc="3" el="930" ec="4">UI\WebControls\DnnFilePicker.cs</location>
            <body hash="543be2239429b3d870e1521251cecb79"><![CDATA[{
			SetFilePath();
		}]]></body>
          </codeblock>
        </method>
        <method name="FolderChanged">
          <declaration><![CDATA[private void FolderChanged(object sender, System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="933" sc="3" el="936" ec="4">UI\WebControls\DnnFilePicker.cs</location>
            <body hash="9058f819663485c1308d133f88e40259"><![CDATA[{
			LoadFiles();
			SetFilePath();
		}]]></body>
          </codeblock>
        </method>
        <method name="GeneratePreviewImage">
          <declaration><![CDATA[private void GeneratePreviewImage()]]></declaration>
          <documentation>
            <summary>

 </summary>
          </documentation>
          <codeblock>
            <location sl="607" sc="3" el="610" ec="4">UI\WebControls\DnnFilePicker.cs</location>
            <body hash="a891af963b6d51c5049a3c34f1d591a5"><![CDATA[{
			_imgPreview = new Image();
			_pnlRightDiv.Controls.Add(_imgPreview);
		}]]></body>
          </codeblock>
        </method>
        <method name="IsUserFolder">
          <declaration><![CDATA[private bool IsUserFolder(string folderPath)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="630" sc="3" el="633" ec="4">UI\WebControls\DnnFilePicker.cs</location>
            <body hash="3f7bf376fb2f46ce94e9721fbf673e88"><![CDATA[{
            UserInfo user = User ?? UserController.Instance.GetCurrentUserInfo();
            return (folderPath.ToLowerInvariant().StartsWith("users/") && folderPath.EndsWith(string.Format("/{0}/", user.UserID)));
		}]]></body>
          </codeblock>
        </method>
        <method name="LoadFiles">
          <declaration><![CDATA[private void LoadFiles()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="636" sc="3" el="644" ec="4">UI\WebControls\DnnFilePicker.cs</location>
            <body hash="c8911f3688d2a32eb321db1c9396b926"><![CDATA[{
		    int effectivePortalId = PortalId;
            if (IsUserFolder(_cboFolders.SelectedItem.Value))
            {
                effectivePortalId = PortalController.GetEffectivePortalId(PortalId);
            }
            _cboFiles.DataSource = Globals.GetFileList(effectivePortalId, FileFilter, !Required, _cboFolders.SelectedItem.Value);							
			_cboFiles.DataBind();
		}]]></body>
          </codeblock>
        </method>
        <method name="LoadFolders">
          <declaration><![CDATA[private void LoadFolders()]]></declaration>
          <documentation>
            <summary>
   LoadFolders fetches the list of folders from the Database
 </summary>
 <history>
   [cnurse]	07/31/2006  created
 </history></documentation>
          <codeblock>
            <location sl="653" sc="3" el="688" ec="4">UI\WebControls\DnnFilePicker.cs</location>
            <body hash="7e7c8c4b68a4c7cafdae72669c86ac55"><![CDATA[{
            UserInfo user = User ?? UserController.Instance.GetCurrentUserInfo();
            _cboFolders.Items.Clear();

			//Add Personal Folder
			if (UsePersonalFolder)
			{
			    var userFolder = FolderManager.Instance.GetUserFolder(user).FolderPath;
				var userFolderItem = _cboFolders.Items.FindByValue(userFolder);
				if (userFolderItem != null)
				{
					userFolderItem.Text = Utilities.GetLocalizedString("MyFolder");
				}
				else
				{
					//Add DummyFolder
					_cboFolders.Items.Add(new ListItem(Utilities.GetLocalizedString("MyFolder"), userFolder));
				}
			}
			else
			{
                var folders = FolderManager.Instance.GetFolders(PortalId, "READ,ADD", user.UserID);
				foreach (FolderInfo folder in folders)
				{
				    var folderItem = new ListItem
				                         {
				                             Text =
				                                 folder.FolderPath == Null.NullString
				                                     ? Utilities.GetLocalizedString("PortalRoot")
				                                     : folder.DisplayPath,
				                             Value = folder.FolderPath
				                         };
				    _cboFolders.Items.Add(folderItem);
				}
			}
		}]]></body>
          </codeblock>
        </method>
        <method name="LocalizeStrings">
          <declaration><![CDATA[public virtual void LocalizeStrings()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1041" sc="3" el="1042" ec="4">UI\WebControls\DnnFilePicker.cs</location>
            <body hash="d2c65ffc45d1c7103cabbde916faf7e7"><![CDATA[{
		}]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="784" sc="3" el="788" ec="4">UI\WebControls\DnnFilePicker.cs</location>
            <body hash="6cc081c3bded63eb880d903d43dc44d5"><![CDATA[{
			base.OnInit(e);
			LocalResourceFile = Utilities.GetLocalResourceFile(this);
			EnsureChildControls();
		}]]></body>
          </codeblock>
        </method>
        <method name="OnPreRender">
          <declaration><![CDATA[protected override void OnPreRender(System.EventArgs e)]]></declaration>
          <documentation>
            <summary>
   OnPreRender runs just before the control is rendered
 </summary>
 <history>
   [cnurse]	07/31/2006  created
 </history></documentation>
          <codeblock>
            <location sl="831" sc="3" el="916" ec="4">UI\WebControls\DnnFilePicker.cs</location>
            <body hash="397b00aba494a84d4556b00bb691d0f7"><![CDATA[{
			base.OnPreRender(e);

			if (_cboFolders.Items.Count > 0)
			{
				//Configure Labels
				_lblFolder.Text = Utilities.GetLocalizedString("Folder");
				_lblFolder.CssClass = LabelCssClass;
				_lblFile.Text = Utilities.GetLocalizedString("File");
				_lblFile.CssClass = LabelCssClass;

				//select folder
				string fileName;
				string folderPath;
				if (!string.IsNullOrEmpty(FilePath))
				{
					fileName = FilePath.Substring(FilePath.LastIndexOf("/") + 1);
					folderPath = string.IsNullOrEmpty(fileName) ? FilePath : FilePath.Replace(fileName, "");
				}
				else
				{
					fileName = FilePath;
					folderPath = string.Empty;
				}

				if (_cboFolders.Items.FindByValue(folderPath) != null)
				{
					_cboFolders.SelectedIndex = -1;
					_cboFolders.Items.FindByValue(folderPath).Selected = true;
				}

				//Get Files
				LoadFiles();
				if (_cboFiles.Items.FindByText(fileName) != null)
				{
					_cboFiles.Items.FindByText(fileName).Selected = true;
				}
				if (_cboFiles.SelectedItem == null || string.IsNullOrEmpty(_cboFiles.SelectedItem.Value))
				{
					FileID = -1;
				}
				else
				{
					FileID = Int32.Parse(_cboFiles.SelectedItem.Value);
				}

				if (_cboFolders.Items.Count > 1 && ShowFolders)
				{
					_pnlFolder.Visible = true;
				}
				else
				{
					_pnlFolder.Visible = false;
				}
				//Configure Mode
				switch (Mode)
				{
					case FileControlMode.Normal:
						_pnlFile.Visible = true;
						_pnlUpload.Visible = false;
						_pnlRightDiv.Visible = true;
						ShowImage();

						if ((FolderPermissionController.HasFolderPermission(PortalId, _cboFolders.SelectedItem.Value, "ADD") || IsUserFolder(_cboFolders.SelectedItem.Value)) && ShowUpLoad)
						{
							ShowButton(_cmdUpload, "Upload");
						}
						break;

					case FileControlMode.UpLoadFile:
						_pnlFile.Visible = false;
						_pnlUpload.Visible = true;
                        _pnlRightDiv.Visible = false;
						ShowButton(_cmdSave, "Save");
						ShowButton(_cmdCancel, "Cancel");
						break;
				}
			}
			else
			{
				_lblMessage.Text = Utilities.GetLocalizedString("NoPermission");
			}

			//Show message Row
			_pnlMessage.Visible = (!string.IsNullOrEmpty(_lblMessage.Text));
		}]]></body>
          </codeblock>
        </method>
        <method name="SaveFile">
          <declaration><![CDATA[private void SaveFile(object sender, System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="939" sc="3" el="1015" ec="4">UI\WebControls\DnnFilePicker.cs</location>
            <body hash="850b6b2e63b9fd5a3b3080016d014892"><![CDATA[{
			//if file is selected exit
			if (!string.IsNullOrEmpty(_txtFile.PostedFile.FileName))
			{
				var extension = Path.GetExtension(_txtFile.PostedFile.FileName).Replace(".", "");

				if (!string.IsNullOrEmpty(FileFilter) && !FileFilter.ToLower().Contains(extension.ToLower()))
				{
					// trying to upload a file not allowed for current filter
					var localizedString = Localization.GetString("UploadError", LocalResourceFile);
					if(String.IsNullOrEmpty(localizedString))
					{
						localizedString = Utilities.GetLocalizedString("UploadError");
					}

					_lblMessage.Text = string.Format(localizedString, FileFilter, extension);
				}
				else
				{
					var folderManager = FolderManager.Instance;

					var folderPath = PathUtils.Instance.GetRelativePath(PortalId, ParentFolder) + _cboFolders.SelectedItem.Value;

					//Check if this is a User Folder
				    IFolderInfo folder;
					if (IsUserFolder(_cboFolders.SelectedItem.Value))
					{
						//Make sure the user folder exists
                        folder = folderManager.GetFolder(PortalController.GetEffectivePortalId(PortalId), folderPath);
						if (folder == null)
						{
							//Add User folder
                            var user = User ?? UserController.Instance.GetCurrentUserInfo();
                            //fix user's portal id
						    user.PortalID = PortalId;
                            folder = ((FolderManager)folderManager).AddUserFolder(user);
						}
					}
					else
					{
                        folder = folderManager.GetFolder(PortalId, folderPath);
                    }

					var fileName = Path.GetFileName(_txtFile.PostedFile.FileName);

					try
					{
                        FileManager.Instance.AddFile(folder, fileName, _txtFile.PostedFile.InputStream, true);
					}
					catch (PermissionsNotMetException)
					{
                        _lblMessage.Text += "<br />" + string.Format(Localization.GetString("InsufficientFolderPermission"), folder.FolderPath);
					}
					catch (NoSpaceAvailableException)
					{
						_lblMessage.Text += "<br />" + string.Format(Localization.GetString("DiskSpaceExceeded"), fileName);
					}
					catch (InvalidFileExtensionException)
					{
						_lblMessage.Text += "<br />" + string.Format(Localization.GetString("RestrictedFileType"), fileName, Host.AllowedExtensionWhitelist.ToDisplayString());
					}
					catch (Exception ex)
					{
						Logger.Error(ex);

						_lblMessage.Text += "<br />" + string.Format(Localization.GetString("SaveFileError"), fileName);
					}
				}

				if (string.IsNullOrEmpty(_lblMessage.Text))
				{
					var fileName = _txtFile.PostedFile.FileName.Substring(_txtFile.PostedFile.FileName.LastIndexOf("\\") + 1);
					SetFilePath(fileName);
				}
			}
			Mode = FileControlMode.Normal;
		}]]></body>
          </codeblock>
        </method>
        <method name="SetFilePath">
          <declaration><![CDATA[private void SetFilePath()]]></declaration>
          <documentation>
            <summary>
   SetFilePath sets the FilePath property
 </summary>
 <remarks>
   This overload uses the selected item in the Folder combo
 </remarks>
 <history>
   [cnurse]	08/01/2006  created
 </history></documentation>
          <codeblock>
            <location sl="700" sc="3" el="702" ec="4">UI\WebControls\DnnFilePicker.cs</location>
            <body hash="195a54b562d1c8db2c3bc74380bbd80b"><![CDATA[{
			SetFilePath(_cboFiles.SelectedItem.Text);
		}]]></body>
          </codeblock>
        </method>
        <method name="SetFilePath">
          <declaration><![CDATA[private void SetFilePath(string fileName)]]></declaration>
          <documentation>
            <summary>
   SetFilePath sets the FilePath property
 </summary>
 <remarks>
   This overload allows the caller to specify a file
 </remarks>
 <param name="fileName">The filename to use in setting the property</param>
 <history>
   [cnurse]	08/01/2006  created
 </history></documentation>
          <codeblock>
            <location sl="715" sc="3" el="724" ec="4">UI\WebControls\DnnFilePicker.cs</location>
            <body hash="1be8198a4d65f83d6bdfe5ecca1e5d03"><![CDATA[{
			if (string.IsNullOrEmpty(_cboFolders.SelectedItem.Value))
			{
				FilePath = fileName;
			}
			else
			{
				FilePath = (_cboFolders.SelectedItem.Value + "/") + fileName;
			}
		}]]></body>
          </codeblock>
        </method>
        <method name="ShowButton">
          <declaration><![CDATA[private void ShowButton(System.Web.UI.WebControls.LinkButton button, string command)]]></declaration>
          <documentation>
            <summary>
   ShowButton configures and displays a button
 </summary>
 <param name="button">The button to configure</param>
 <param name="command">The command name (amd key) of the button</param>
 <history>
   [cnurse]	07/31/2006  created
 </history></documentation>
          <codeblock>
            <location sl="735" sc="3" el="743" ec="4">UI\WebControls\DnnFilePicker.cs</location>
            <body hash="5f254913bb6b164374f18ce93d2115f8"><![CDATA[{
			button.Visible = true;
			if (!string.IsNullOrEmpty(command))
			{
				button.Text = Utilities.GetLocalizedString(command);
			}
			AJAX.RegisterPostBackControl(button);
			_pnlButtons.Visible = true;
		}]]></body>
          </codeblock>
        </method>
        <method name="ShowImage">
          <declaration><![CDATA[private void ShowImage()]]></declaration>
          <documentation>
            <summary>
   ShowImage displays the Preview Image
 </summary>
 <history>
   [cnurse]	08/01/2006  created
 </history></documentation>
          <codeblock>
            <location sl="752" sc="3" el="777" ec="4">UI\WebControls\DnnFilePicker.cs</location>
            <body hash="1ef69374ffb22bf9e20e337f3116f9ed"><![CDATA[{
			var image = (FileInfo)FileManager.Instance.GetFile(FileID);

            if (image != null)
            {
                _imgPreview.ImageUrl = FileManager.Instance.GetUrl(image);
                try
                {
                    Utilities.CreateThumbnail(image, _imgPreview, MaxWidth, MaxHeight);
                }
                catch (Exception)
                {
                    Logger.WarnFormat("Unable to create thumbnail for {0}", image.PhysicalPath);
                    _pnlRightDiv.Visible = false;
                }

            }
            else
            {
                _imgPreview.Visible = false;

                Panel imageHolderPanel = new Panel { CssClass = "dnnFilePickerImageHolder" };
                _pnlRightDiv.Controls.Add(imageHolderPanel);
                _pnlRightDiv.Visible = true;
            }
		}]]></body>
          </codeblock>
        </method>
        <method name="UploadFile">
          <declaration><![CDATA[private void UploadFile(object sender, System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1018" sc="3" el="1020" ec="4">UI\WebControls\DnnFilePicker.cs</location>
            <body hash="11cc2094b9528655041181e1719f77b5"><![CDATA[{
			Mode = FileControlMode.UpLoadFile;
		}]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_cboFiles">
          <declaration><![CDATA[private System.Web.UI.WebControls.DropDownList _cboFiles;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_cboFolders">
          <declaration><![CDATA[private System.Web.UI.WebControls.DropDownList _cboFolders;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_cmdCancel">
          <declaration><![CDATA[private System.Web.UI.WebControls.LinkButton _cmdCancel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_cmdSave">
          <declaration><![CDATA[private System.Web.UI.WebControls.LinkButton _cmdSave;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_cmdUpload">
          <declaration><![CDATA[private System.Web.UI.WebControls.LinkButton _cmdUpload;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_imgPreview">
          <declaration><![CDATA[private System.Web.UI.WebControls.Image _imgPreview;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_lblFile">
          <declaration><![CDATA[private System.Web.UI.WebControls.Label _lblFile;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_lblFolder">
          <declaration><![CDATA[private System.Web.UI.WebControls.Label _lblFolder;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_lblMessage">
          <declaration><![CDATA[private System.Web.UI.WebControls.Label _lblMessage;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_localize">
          <declaration><![CDATA[private bool _localize = true;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_maxHeight">
          <declaration><![CDATA[private int _maxHeight = 100;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_maxWidth">
          <declaration><![CDATA[private int _maxWidth = 135;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_pnlButtons">
          <declaration><![CDATA[private System.Web.UI.WebControls.Panel _pnlButtons;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_pnlContainer">
          <declaration><![CDATA[private System.Web.UI.WebControls.Panel _pnlContainer;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_pnlFile">
          <declaration><![CDATA[private System.Web.UI.WebControls.Panel _pnlFile;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_pnlFolder">
          <declaration><![CDATA[private System.Web.UI.WebControls.Panel _pnlFolder;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_pnlLeftDiv">
          <declaration><![CDATA[private System.Web.UI.WebControls.Panel _pnlLeftDiv;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_pnlMessage">
          <declaration><![CDATA[private System.Web.UI.WebControls.Panel _pnlMessage;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_pnlRightDiv">
          <declaration><![CDATA[private System.Web.UI.WebControls.Panel _pnlRightDiv;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_pnlUpload">
          <declaration><![CDATA[private System.Web.UI.WebControls.Panel _pnlUpload;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_txtFile">
          <declaration><![CDATA[private System.Web.UI.HtmlControls.HtmlInputFile _txtFile;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Logger">
          <declaration><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof(DnnFilePicker));]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="CommandCssClass">
          <declaration><![CDATA[public string CommandCssClass]]></declaration>
          <documentation>
            <summary>
   Gets or sets the class to be used for the Labels
 </summary>
 <remarks>
   Defaults to 'CommandButton'
 </remarks>
 <value>A String</value>
 <history>
   [cnurse]	7/13/2005  created
 </history></documentation>
          <codeblock>
            <location sl="254" sc="4" el="257" ec="5">UI\WebControls\DnnFilePicker.cs</location>
            <body hash="95bb648f6e2804141b55ed02c86c6f86"><![CDATA[{
				var cssClass = Convert.ToString(ViewState["CommandCssClass"]);
				return string.IsNullOrEmpty(cssClass) ? "dnnSecondaryAction" : cssClass;
			}]]></body>
          </codeblock>
          <codeblock>
            <location sl="259" sc="4" el="261" ec="5">UI\WebControls\DnnFilePicker.cs</location>
            <body hash="4604fc74a54fc527428dd0797b629e99"><![CDATA[{
				ViewState["CommandCssClass"] = value;
			}]]></body>
          </codeblock>
        </property>
        <property name="FileFilter">
          <declaration><![CDATA[public string FileFilter]]></declaration>
          <documentation>
            <summary>
   Gets or sets the file Filter to use
 </summary>
 <remarks>
   Defaults to ''
 </remarks>
 <value>a comma seperated list of file extenstions no wildcards or periods e.g. "jpg,png,gif"</value></documentation>
          <codeblock>
            <location sl="274" sc="4" el="276" ec="5">UI\WebControls\DnnFilePicker.cs</location>
            <body hash="d0fa39de19f7c9ec78859a73b9827940"><![CDATA[{
				return ViewState["FileFilter"] != null ? (string) ViewState["FileFilter"] : "";
			}]]></body>
          </codeblock>
          <codeblock>
            <location sl="278" sc="4" el="280" ec="5">UI\WebControls\DnnFilePicker.cs</location>
            <body hash="55bf1d69ad5228c4bac5f4569f8c64d4"><![CDATA[{
				ViewState["FileFilter"] = value;
			}]]></body>
          </codeblock>
        </property>
        <property name="FileID">
          <declaration><![CDATA[public int FileID]]></declaration>
          <documentation>
            <summary>
   Gets or sets the FileID for the control
 </summary>
 <value>An Integer</value>
 <history>
   [cnurse]	7/13/2005  created
 </history></documentation>
          <codeblock>
            <location sl="293" sc="4" el="306" ec="5">UI\WebControls\DnnFilePicker.cs</location>
            <body hash="450bdb277e1696b066b61c0f9016ff46"><![CDATA[{
				EnsureChildControls();
				if (ViewState["FileID"] == null)
				{
					//Get FileId from the file combo
					var fileId = Null.NullInteger;
					if (_cboFiles.SelectedItem != null)
					{
						fileId = Int32.Parse(_cboFiles.SelectedItem.Value);
					}
					ViewState["FileID"] = fileId;
				}
				return Convert.ToInt32(ViewState["FileID"]);
			}]]></body>
          </codeblock>
          <codeblock>
            <location sl="308" sc="4" el="319" ec="5">UI\WebControls\DnnFilePicker.cs</location>
            <body hash="5f0518b548633c013b3e15c1e1f45291"><![CDATA[{
				EnsureChildControls();
				ViewState["FileID"] = value;
				if (string.IsNullOrEmpty(FilePath))
				{
					var fileInfo = FileManager.Instance.GetFile(value);
					if (fileInfo != null)
					{
						SetFilePath(fileInfo.Folder + fileInfo.FileName);
					}
				}
			}]]></body>
          </codeblock>
        </property>
        <property name="FilePath">
          <declaration><![CDATA[public string FilePath]]></declaration>
          <documentation>
            <summary>
   Gets or sets the FilePath for the control
 </summary>
 <value>A String</value>
 <history>
   [cnurse]	07/31/2006  created
 </history></documentation>
          <codeblock>
            <location sl="332" sc="4" el="334" ec="5">UI\WebControls\DnnFilePicker.cs</location>
            <body hash="9ebbb5eb34206dfd01524ec8cee4f3ef"><![CDATA[{
				return Convert.ToString(ViewState["FilePath"]);
			}]]></body>
          </codeblock>
          <codeblock>
            <location sl="336" sc="4" el="338" ec="5">UI\WebControls\DnnFilePicker.cs</location>
            <body hash="1ff80b0273853efd3b8c04248881f4a4"><![CDATA[{
				ViewState["FilePath"] = value;
			}]]></body>
          </codeblock>
        </property>
        <property name="IsHost">
          <declaration><![CDATA[protected bool IsHost]]></declaration>
          <documentation>
            <summary>
   Gets whether the control is on a Host or Portal Tab
 </summary>
 <value>A Boolean</value>
 <history>
   [cnurse]	07/31/2006  created
 </history></documentation>
          <codeblock>
            <location sl="123" sc="4" el="132" ec="5">UI\WebControls\DnnFilePicker.cs</location>
            <body hash="e3d8df6f9389678cad1cf93ca4042fd7"><![CDATA[{
				var isHost = Globals.IsHostTab(PortalSettings.ActiveTab.TabID);
                //if not host tab but current edit user is a host user, then return true
                if(!isHost && User != null && User.IsSuperUser)
                {
                    isHost = true;
                }

			    return isHost;
			}]]></body>
          </codeblock>
        </property>
        <property name="LabelCssClass">
          <declaration><![CDATA[public string LabelCssClass]]></declaration>
          <documentation>
            <summary>
   Gets or sets the class to be used for the Labels
 </summary>
 <value>A String</value>
 <history>
   [cnurse]	07/31/2006  created
 </history></documentation>
          <codeblock>
            <location sl="370" sc="4" el="373" ec="5">UI\WebControls\DnnFilePicker.cs</location>
            <body hash="5424175a926d0d3b0569d52f907a938e"><![CDATA[{
				var cssClass = Convert.ToString(ViewState["LabelCssClass"]);
				return string.IsNullOrEmpty(cssClass) ? "" : cssClass;
			}]]></body>
          </codeblock>
          <codeblock>
            <location sl="375" sc="4" el="377" ec="5">UI\WebControls\DnnFilePicker.cs</location>
            <body hash="6e97492b61a2656cbc78b9e6338b7120"><![CDATA[{
				ViewState["LabelCssClass"] = value;
			}]]></body>
          </codeblock>
        </property>
        <property name="Localize">
          <declaration><![CDATA[public bool Localize]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1029" sc="4" el="1031" ec="5">UI\WebControls\DnnFilePicker.cs</location>
            <body hash="1538229f9a2e0f30d681a1be58a28652"><![CDATA[{
				return _localize;
			}]]></body>
          </codeblock>
          <codeblock>
            <location sl="1033" sc="4" el="1035" ec="5">UI\WebControls\DnnFilePicker.cs</location>
            <body hash="fc08d00571e50b22cab24ff6b3f2945d"><![CDATA[{
				_localize = value;
			}]]></body>
          </codeblock>
        </property>
        <property name="LocalResourceFile">
          <declaration><![CDATA[public string LocalResourceFile]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="MaxHeight">
          <declaration><![CDATA[public int MaxHeight]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="138" sc="4" el="140" ec="5">UI\WebControls\DnnFilePicker.cs</location>
            <body hash="7ec0fe18097ec1c0607901bb785ae98a"><![CDATA[{
				return _maxHeight;
			}]]></body>
          </codeblock>
          <codeblock>
            <location sl="142" sc="4" el="144" ec="5">UI\WebControls\DnnFilePicker.cs</location>
            <body hash="0d380012e27d693ac2007e7f224e64c1"><![CDATA[{
				_maxHeight = value;
			}]]></body>
          </codeblock>
        </property>
        <property name="MaxWidth">
          <declaration><![CDATA[public int MaxWidth]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="150" sc="4" el="152" ec="5">UI\WebControls\DnnFilePicker.cs</location>
            <body hash="92aab0544899f66094d4c99cc3bc0d6b"><![CDATA[{
				return _maxWidth;
			}]]></body>
          </codeblock>
          <codeblock>
            <location sl="154" sc="4" el="156" ec="5">UI\WebControls\DnnFilePicker.cs</location>
            <body hash="7401de1f043b676eab70f11d95c84f9b"><![CDATA[{
				_maxWidth = value;
			}]]></body>
          </codeblock>
        </property>
        <property name="Mode">
          <declaration><![CDATA[protected DnnFilePicker.FileControlMode Mode]]></declaration>
          <documentation>
            <summary>
   Gets or sets the current mode of the control
 </summary>
 <remarks>
   Defaults to FileControlMode.Normal
 </remarks>
 <value>A FileControlMode enum</value>
 <history>
   [cnurse]	7/13/2005  created
 </history></documentation>
          <codeblock>
            <location sl="172" sc="4" el="174" ec="5">UI\WebControls\DnnFilePicker.cs</location>
            <body hash="4a2689e17d6ce8580f04d0aedaa02bbc"><![CDATA[{
				return ViewState["Mode"] == null ? FileControlMode.Normal : (FileControlMode) ViewState["Mode"];
			}]]></body>
          </codeblock>
          <codeblock>
            <location sl="176" sc="4" el="178" ec="5">UI\WebControls\DnnFilePicker.cs</location>
            <body hash="2754bd607c1b30228e562ebf7fe10bbe"><![CDATA[{
				ViewState["Mode"] = value;
			}]]></body>
          </codeblock>
        </property>
        <property name="ParentFolder">
          <declaration><![CDATA[protected string ParentFolder]]></declaration>
          <documentation>
            <summary>
   Gets the root folder for the control
 </summary>
 <value>A String</value>
 <history>
   [cnurse]	07/31/2006  created
 </history></documentation>
          <codeblock>
            <location sl="191" sc="4" el="193" ec="5">UI\WebControls\DnnFilePicker.cs</location>
            <body hash="098c48c0477e6e2d339432fda1a73529"><![CDATA[{
                return IsHost ? Globals.HostMapPath : PortalSettings.HomeDirectoryMapPath;
			}]]></body>
          </codeblock>
        </property>
        <property name="Permissions">
          <declaration><![CDATA[public string Permissions]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="383" sc="4" el="386" ec="5">UI\WebControls\DnnFilePicker.cs</location>
            <body hash="3d4159395fa3fc1dbf964f5ec1d5239b"><![CDATA[{
				var permissions = Convert.ToString(ViewState["Permissions"]);
				return string.IsNullOrEmpty(permissions) ? "BROWSE,ADD" : permissions;
			}]]></body>
          </codeblock>
          <codeblock>
            <location sl="388" sc="4" el="390" ec="5">UI\WebControls\DnnFilePicker.cs</location>
            <body hash="fd049cf2f8d05036722c3f31b18e61bb"><![CDATA[{
				ViewState["Permissions"] = value;
			}]]></body>
          </codeblock>
        </property>
        <property name="PortalId">
          <declaration><![CDATA[protected int PortalId]]></declaration>
          <documentation>
            <summary>
   Gets or sets the file PortalId to use
 </summary>
 <remarks>
   Defaults to PortalSettings.PortalId
 </remarks>
 <value>An Integer</value>
 <history>
   [cnurse]	07/31/2006  created
 </history></documentation>
          <codeblock>
            <location sl="209" sc="4" el="220" ec="5">UI\WebControls\DnnFilePicker.cs</location>
            <body hash="e43c57fb75399e8a32332d8bf04d1821"><![CDATA[{
                if ((Page.Request.QueryString["pid"] != null) && (Globals.IsHostTab(PortalSettings.ActiveTab.TabID) || UserController.Instance.GetCurrentUserInfo().IsSuperUser))
                {
                    return Int32.Parse(Page.Request.QueryString["pid"]);
                }
			    if (!IsHost)
			    {
			        return PortalSettings.PortalId;
			    }

			    return Null.NullInteger;			    
			}]]></body>
          </codeblock>
        </property>
        <property name="PortalSettings">
          <declaration><![CDATA[protected PortalSettings PortalSettings]]></declaration>
          <documentation>
            <summary>
   Gets the current Portal Settings
 </summary>
 <history>
   [cnurse]	07/31/2006  created
 </history></documentation>
          <codeblock>
            <location sl="232" sc="4" el="234" ec="5">UI\WebControls\DnnFilePicker.cs</location>
            <body hash="e40e028f1b90df12f60481767a624c1d"><![CDATA[{
				return PortalController.Instance.GetCurrentPortalSettings();
			}]]></body>
          </codeblock>
        </property>
        <property name="Required">
          <declaration><![CDATA[public bool Required]]></declaration>
          <documentation>
            <summary>
   Gets or sets whether the combos have a "Not Specified" option
 </summary>
 <remarks>
   Defaults to True (ie no "Not Specified")
 </remarks>
 <value>A Boolean</value>
 <history>
   [cnurse]	07/31/2006  created
 </history></documentation>
          <codeblock>
            <location sl="406" sc="4" el="408" ec="5">UI\WebControls\DnnFilePicker.cs</location>
            <body hash="bc284908c7bee8a55fff25532cfd58e6"><![CDATA[{
				return ViewState["Required"] != null && Convert.ToBoolean(ViewState["Required"]);
			}]]></body>
          </codeblock>
          <codeblock>
            <location sl="410" sc="4" el="412" ec="5">UI\WebControls\DnnFilePicker.cs</location>
            <body hash="857410e4ef82902e79726168cc58a0ec"><![CDATA[{
				ViewState["Required"] = value;
			}]]></body>
          </codeblock>
        </property>
        <property name="ShowDatabase">
          <deprecation>Deprecated in DNN 6.0</deprecation>
          <declaration><![CDATA[public bool ShowDatabase]]></declaration>
          <documentation>
            <summary>
   Gets or sets whether to Show Database Folders
 </summary>
 <remarks>
   Defaults to false
 </remarks>
 <value>A Boolean</value>
 <history>
   [cnurse]	7/31/2005  created
 </history></documentation>
          <codeblock>
            <location sl="429" sc="4" el="435" ec="5">UI\WebControls\DnnFilePicker.cs</location>
            <body hash="589dc767219af9020f269ff1d9e74ab4"><![CDATA[{
			    if (ViewState["ShowDatabase"] == null)
				{
					return false;
				}
			    return Convert.ToBoolean(ViewState["ShowDatabase"]);
			}]]></body>
          </codeblock>
          <codeblock>
            <location sl="437" sc="4" el="439" ec="5">UI\WebControls\DnnFilePicker.cs</location>
            <body hash="4cb7831d14c642571f7f18e2461ba2e0"><![CDATA[{
				ViewState["ShowDatabase"] = value;
			}]]></body>
          </codeblock>
        </property>
        <property name="ShowFolders">
          <declaration><![CDATA[public bool ShowFolders]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="445" sc="4" el="447" ec="5">UI\WebControls\DnnFilePicker.cs</location>
            <body hash="ec5c33e2c44c8eb5a662021aaba66a69"><![CDATA[{
				return ViewState["ShowFolders"] == null || Convert.ToBoolean(ViewState["ShowFolders"]);
			}]]></body>
          </codeblock>
          <codeblock>
            <location sl="449" sc="4" el="451" ec="5">UI\WebControls\DnnFilePicker.cs</location>
            <body hash="52dee3c49393d086f6233a548fc1d151"><![CDATA[{
				ViewState["ShowFolders"] = value;
			}]]></body>
          </codeblock>
        </property>
        <property name="ShowSecure">
          <deprecation>Deprecated in DNN 6.0</deprecation>
          <declaration><![CDATA[public bool ShowSecure]]></declaration>
          <documentation>
            <summary>
   Gets or sets whether to Show Secure Folders
 </summary>
 <remarks>
   Defaults to false
 </remarks>
 <value>A Boolean</value>
 <history>
   [cnurse]	7/31/2005  created
 </history></documentation>
          <codeblock>
            <location sl="468" sc="4" el="470" ec="5">UI\WebControls\DnnFilePicker.cs</location>
            <body hash="894b2f4ff59df2fd90176bc7f5540cf8"><![CDATA[{
				return ViewState["ShowSecure"] != null && Convert.ToBoolean(ViewState["ShowSecure"]);
			}]]></body>
          </codeblock>
          <codeblock>
            <location sl="472" sc="4" el="474" ec="5">UI\WebControls\DnnFilePicker.cs</location>
            <body hash="4c52b7ab206997fe3cb795b9005d7a7a"><![CDATA[{
				ViewState["ShowSecure"] = value;
			}]]></body>
          </codeblock>
        </property>
        <property name="ShowUpLoad">
          <declaration><![CDATA[public bool ShowUpLoad]]></declaration>
          <documentation>
            <summary>
   Gets or sets whether to Show the Upload Button
 </summary>
 <remarks>
   Defaults to True
 </remarks>
 <value>A Boolean</value>
 <history>
   [cnurse]	7/31/2005  created
 </history></documentation>
          <codeblock>
            <location sl="490" sc="4" el="492" ec="5">UI\WebControls\DnnFilePicker.cs</location>
            <body hash="9e13c6d2e4ebed2c4fb2ca2dc54badce"><![CDATA[{
				return ViewState["ShowUpLoad"] == null || Convert.ToBoolean(ViewState["ShowUpLoad"]);
			}]]></body>
          </codeblock>
          <codeblock>
            <location sl="494" sc="4" el="496" ec="5">UI\WebControls\DnnFilePicker.cs</location>
            <body hash="67ed594e39760abc88da50c2d0433851"><![CDATA[{
				ViewState["ShowUpLoad"] = value;
			}]]></body>
          </codeblock>
        </property>
        <property name="UsePersonalFolder">
          <declaration><![CDATA[public bool UsePersonalFolder]]></declaration>
          <documentation>
            <summary>
   Gets or sets whether to Include Personal Folder
 </summary>
 <remarks>
   Defaults to false
 </remarks>
 <value>A Boolean</value></documentation>
          <codeblock>
            <location sl="351" sc="4" el="353" ec="5">UI\WebControls\DnnFilePicker.cs</location>
            <body hash="cee74c44b2b0ad3cf34aae3001d41dba"><![CDATA[{
				return ViewState["UsePersonalFolder"] != null && Convert.ToBoolean(ViewState["UsePersonalFolder"]);
			}]]></body>
          </codeblock>
          <codeblock>
            <location sl="355" sc="4" el="357" ec="5">UI\WebControls\DnnFilePicker.cs</location>
            <body hash="767b92865afe22d00ad0ba128f0612ee"><![CDATA[{
				ViewState["UsePersonalFolder"] = value;
			}]]></body>
          </codeblock>
        </property>
        <property name="User">
          <declaration><![CDATA[public UserInfo User]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnFilePickerUploader">
      <declaration><![CDATA[public class DnnFilePickerUploader : System.Web.UI.UserControl, IFilePickerUploader]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private int? _portalId = null;]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="48" sc="6" el="52" ec="45">UI\WebControls\DnnFilePickerUploader.cs</location>
            <body hash="adb6e712dd655570bd27b184a2f3efcb"><![CDATA[private int? _portalId = null;

        private string _fileFilter;
        private string _folderPath = String.Empty;
        private bool _folderPathSet = false;]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="LoadFolders">
          <declaration><![CDATA[private void LoadFolders()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="289" sc="9" el="322" ec="10">UI\WebControls\DnnFilePickerUploader.cs</location>
            <body hash="7e86065115dc6d5d0e03805eb0a71579"><![CDATA[{
            if (UsePersonalFolder)
            {
                var user = User ?? UserController.Instance.GetCurrentUserInfo();
                var userFolder = FolderManager.Instance.GetUserFolder(user);
                FoldersComboBox.SelectedFolder = userFolder;
            }
            else
            {
                //select folder
                string fileName;
                string folderPath;
                if (!string.IsNullOrEmpty(FilePath))
                {
                    fileName = FilePath.Substring(FilePath.LastIndexOf("/") + 1);
                    folderPath = string.IsNullOrEmpty(fileName) ? FilePath : FilePath.Replace(fileName, "");
                }
                else
                {
                    fileName = FilePath;
                    folderPath = string.Empty;
                }

                FoldersComboBox.SelectedFolder = FolderManager.Instance.GetFolder(PortalId, folderPath);

                if (!string.IsNullOrEmpty(fileName))
                {
                    FilesComboBox.SelectedFile = FileManager.Instance.GetFile(FoldersComboBox.SelectedFolder, fileName);
                }
            }

            FoldersComboBox.Enabled = !UsePersonalFolder;
            FoldersLabel.Visible = UsePersonalFolder;
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="216" sc="9" el="238" ec="10">UI\WebControls\DnnFilePickerUploader.cs</location>
            <body hash="7fb7fefb97d28c4a8d418ac613adb474"><![CDATA[{
            base.OnLoad(e);

            FoldersComboBox.SelectItemDefaultText = (SupportHost && PortalSettings.Current.ActiveTab.IsSuperTab) ? SharedConstants.HostRootFolder : SharedConstants.RootFolder;
            FoldersComboBox.OnClientSelectionChanged.Add("dnn.dnnFileUpload.Folders_Changed");
            FoldersComboBox.Options.Services.Parameters.Add("permission", "READ,ADD");

            FilesComboBox.OnClientSelectionChanged.Add("dnn.dnnFileUpload.Files_Changed");
            FilesComboBox.SelectItemDefaultText = SharedConstants.Unspecified;
            FilesComboBox.IncludeNoneSpecificItem = true;
            FilesComboBox.Filter = FileFilter;

            if (UrlUtils.InPopUp())
            {
                FileUploadControl.Width = 630;
                FileUploadControl.Height = 400;
            }

            LoadFolders();
            jQuery.RegisterFileUpload(Page);
            JavaScript.RequestRegistration(CommonJs.DnnPlugins);
            ServicesFramework.Instance.RequestAjaxAntiForgerySupport();
        }]]></body>
          </codeblock>
        </method>
        <method name="OnPreRender">
          <declaration><![CDATA[protected override void OnPreRender(System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="241" sc="9" el="282" ec="10">UI\WebControls\DnnFilePickerUploader.cs</location>
            <body hash="b6a57987f7dfc745be87361d286c9867"><![CDATA[{
            if (FoldersComboBox.SelectedFolder != null && FoldersComboBox.SelectedFolder.FolderPath.StartsWith("Users/", StringComparison.InvariantCultureIgnoreCase))
            {
                var userFolder = FolderManager.Instance.GetUserFolder(User ?? UserController.Instance.GetCurrentUserInfo());
                if (FoldersComboBox.SelectedFolder.FolderID == userFolder.FolderID)
                {
                    FoldersComboBox.SelectedItem = new ListItem
                                                   {
                                                       Text = FolderManager.Instance.MyFolderName, 
                                                       Value = userFolder.FolderID.ToString(CultureInfo.InvariantCulture)
                                                   };
                }
                else if (UsePersonalFolder) //if UserPersonalFolder is true, make sure the file is under the user folder.
                {
                    FoldersComboBox.SelectedItem = new ListItem
                                                    {
                                                        Text = FolderManager.Instance.MyFolderName,
                                                        Value = userFolder.FolderID.ToString(CultureInfo.InvariantCulture)
                                                    };

                    FilesComboBox.SelectedFile = null;
                }
            }

            FoldersLabel.Text = FolderManager.Instance.MyFolderName;

            FileUploadControl.Options.FolderPicker.Disabled = UsePersonalFolder;
            if (FileUploadControl.Options.FolderPicker.Disabled && FoldersComboBox.SelectedFolder != null)
            {
                var selectedItem = new SerializableKeyValuePair<string, string>(
                    FoldersComboBox.SelectedItem.Value, FoldersComboBox.SelectedItem.Text);

                FileUploadControl.Options.FolderPicker.InitialState = new DnnDropDownListState
                                                                          {
                                                                              SelectedItem = selectedItem
                                                                                  
                                                                          };
                FileUploadControl.Options.FolderPath = FoldersComboBox.SelectedFolder.FolderPath;
            }

            base.OnPreRender(e);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_fileFilter">
          <declaration><![CDATA[private string _fileFilter;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_folderPath">
          <declaration><![CDATA[private string _folderPath = string.Empty;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_folderPathSet">
          <declaration><![CDATA[private bool _folderPathSet = false;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_portalId">
          <declaration><![CDATA[private int? _portalId = null;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="FilesComboBox">
          <declaration><![CDATA[protected DnnFileDropDownList FilesComboBox;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="FileUploadControl">
          <declaration><![CDATA[protected DnnFileUpload FileUploadControl;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="FoldersComboBox">
          <declaration><![CDATA[protected DnnFolderDropDownList FoldersComboBox;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="FoldersLabel">
          <declaration><![CDATA[protected System.Web.UI.WebControls.Label FoldersLabel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="MyFileName">
          <declaration><![CDATA[private const string MyFileName = "filepickeruploader.ascx";]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="DropFileLabel">
          <declaration><![CDATA[protected string DropFileLabel]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="90" sc="13" el="92" ec="14">UI\WebControls\DnnFilePickerUploader.cs</location>
            <body hash="8fb44a17be6d0dbd885b340508b22132"><![CDATA[{
                return Localization.GetString("DropFile", Localization.GetResourceFile(this, MyFileName));
            }]]></body>
          </codeblock>
        </property>
        <property name="FileFilter">
          <declaration><![CDATA[public string FileFilter]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="172" sc="13" el="174" ec="14">UI\WebControls\DnnFilePickerUploader.cs</location>
            <body hash="8c5024d602fca4e9916edfcc99c54ffe"><![CDATA[{
                return _fileFilter;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="176" sc="13" el="186" ec="14">UI\WebControls\DnnFilePickerUploader.cs</location>
            <body hash="0dadfdd6c6de2752923c7a9af71c35fc"><![CDATA[{
                _fileFilter = value;
                if (!string.IsNullOrEmpty(value))
                {
                    FileUploadControl.Options.Extensions = value.Split(',').ToList();
                }
                else
                {
                    FileUploadControl.Options.Extensions.RemoveAll(t => true);
                }
            }]]></body>
          </codeblock>
        </property>
        <property name="FileID">
          <declaration><![CDATA[public int FileID]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="134" sc="13" el="138" ec="14">UI\WebControls\DnnFilePickerUploader.cs</location>
            <body hash="6667ec5a504322c138b4b6e6bfa62518"><![CDATA[{
                EnsureChildControls();
                
                return FilesComboBox.SelectedFile != null ? FilesComboBox.SelectedFile.FileId : Null.NullInteger;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="141" sc="13" el="149" ec="14">UI\WebControls\DnnFilePickerUploader.cs</location>
            <body hash="d5a6beb96c325b2dd02939c4929d34c1"><![CDATA[{
                EnsureChildControls();
                var file = FileManager.Instance.GetFile(value);
                if (file != null)
                {
                    FoldersComboBox.SelectedFolder = FolderManager.Instance.GetFolder(file.FolderId);
                    FilesComboBox.SelectedFile = file;
                }
            }]]></body>
          </codeblock>
        </property>
        <property name="FileLabel">
          <declaration><![CDATA[protected string FileLabel]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="74" sc="13" el="76" ec="14">UI\WebControls\DnnFilePickerUploader.cs</location>
            <body hash="bf373ba2178a4ed425a638f6e0dcbfa8"><![CDATA[{
                return Localization.GetString("File", Localization.GetResourceFile(this, MyFileName));
            }]]></body>
          </codeblock>
        </property>
        <property name="FilePath">
          <declaration><![CDATA[public string FilePath]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="104" sc="13" el="114" ec="14">UI\WebControls\DnnFilePickerUploader.cs</location>
            <body hash="92600efc4b536d31daf63e46d57473aa"><![CDATA[{
                EnsureChildControls();

                var path = string.Empty;
                if (FoldersComboBox.SelectedFolder != null && FilesComboBox.SelectedFile != null)
                {
                    path = FilesComboBox.SelectedFile.RelativePath;
                }

                return path;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="117" sc="13" el="128" ec="14">UI\WebControls\DnnFilePickerUploader.cs</location>
            <body hash="00e4216617e83cb9987fb1938d28a6c1"><![CDATA[{
                EnsureChildControls();
                if (!string.IsNullOrEmpty(value))
                {
                    var file = FileManager.Instance.GetFile(PortalId, value);
                    if (file != null)
                    {
                        FoldersComboBox.SelectedFolder = FolderManager.Instance.GetFolder(file.FolderId);
                        FilesComboBox.SelectedFile = file;
                    }
                }
            }]]></body>
          </codeblock>
        </property>
        <property name="FolderLabel">
          <declaration><![CDATA[protected string FolderLabel]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="66" sc="13" el="68" ec="14">UI\WebControls\DnnFilePickerUploader.cs</location>
            <body hash="4885385773fab97a15d1a770b7b78178"><![CDATA[{
                return Localization.GetString("Folder", Localization.GetResourceFile(this, MyFileName));
            }]]></body>
          </codeblock>
        </property>
        <property name="FolderPath">
          <declaration><![CDATA[public string FolderPath]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="155" sc="13" el="161" ec="14">UI\WebControls\DnnFilePickerUploader.cs</location>
            <body hash="7b5bd2f80b69f4288f41df67bf6c7428"><![CDATA[{
                return _folderPathSet
                            ? _folderPath 
                            : FoldersComboBox.SelectedFolder != null 
                                ? FoldersComboBox.SelectedFolder.FolderPath 
                                : string.Empty; 
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="163" sc="13" el="166" ec="14">UI\WebControls\DnnFilePickerUploader.cs</location>
            <body hash="0e5de0ef0f3033ad8004b3e4693dce1a"><![CDATA[{
                _folderPath = value;
                _folderPathSet = true;
            }]]></body>
          </codeblock>
        </property>
        <property name="PortalId">
          <declaration><![CDATA[public int PortalId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="196" sc="7" el="198" ec="8">UI\WebControls\DnnFilePickerUploader.cs</location>
            <body hash="ec2437ed39cdf305e3d5d87b312cdd2b"><![CDATA[{
			    return !_portalId.HasValue ? PortalSettings.Current.PortalId : _portalId.Value;
		    }]]></body>
          </codeblock>
          <codeblock>
            <location sl="200" sc="4" el="202" ec="5">UI\WebControls\DnnFilePickerUploader.cs</location>
            <body hash="1f02272fac6c2885f9c4955f3ea85654"><![CDATA[{
				_portalId = value;
			}]]></body>
          </codeblock>
        </property>
        <property name="Required">
          <declaration><![CDATA[public bool Required]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="SupportHost">
          <declaration><![CDATA[public bool SupportHost]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="UploadFileLabel">
          <declaration><![CDATA[protected string UploadFileLabel]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="82" sc="13" el="84" ec="14">UI\WebControls\DnnFilePickerUploader.cs</location>
            <body hash="7cff1909ebb852f603df7ccc894f9ece"><![CDATA[{
                return Localization.GetString("UploadFile", Localization.GetResourceFile(this, MyFileName));
            }]]></body>
          </codeblock>
        </property>
        <property name="UsePersonalFolder">
          <declaration><![CDATA[public bool UsePersonalFolder]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="User">
          <declaration><![CDATA[public UserInfo User]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnFileUpload">
      <declaration><![CDATA[public class DnnFileUpload : System.Web.UI.Control, System.Web.UI.INamingContainer]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private readonly Lazy<DnnFileUploadOptions> _options = new Lazy<DnnFileUploadOptions>(() => new DnnFileUploadOptions());]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="22" sc="9" el="22" ec="129">UI\WebControls\DnnFileUpload.cs</location>
            <body hash="a2e58bc25ad8da657ad0987ae2a23bd4"><![CDATA[private readonly Lazy<DnnFileUploadOptions> _options = new Lazy<DnnFileUploadOptions>(() => new DnnFileUploadOptions())]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="GetCurrent">
          <declaration><![CDATA[public static DnnFileUpload GetCurrent(System.Web.UI.Page page)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="69" sc="9" el="71" ec="10">UI\WebControls\DnnFileUpload.cs</location>
            <body hash="fd9e483888dcb3a0c76e09377a469ed3"><![CDATA[{
            return page.Items[typeof(DnnFileUpload)] as DnnFileUpload;
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="74" sc="9" el="79" ec="10">UI\WebControls\DnnFileUpload.cs</location>
            <body hash="91410f67ddfdb09b455efe1e07c3f136"><![CDATA[{
            base.OnInit(e);

            ServicesFramework.Instance.RequestAjaxAntiForgerySupport();
            jQuery.RegisterFileUpload(Page);
        }]]></body>
          </codeblock>
        </method>
        <method name="OnPreRender">
          <declaration><![CDATA[protected override void OnPreRender(System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="82" sc="9" el="87" ec="10">UI\WebControls\DnnFileUpload.cs</location>
            <body hash="cb44a40a3aa0b33507f9090fea366e76"><![CDATA[{
            base.OnPreRender(e);

            RegisterClientScript(Page, Skin);
            RegisterStartupScript();
        }]]></body>
          </codeblock>
        </method>
        <method name="RegisterClientScript">
          <declaration><![CDATA[private static void RegisterClientScript(System.Web.UI.Page page, string skin)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="90" sc="9" el="102" ec="10">UI\WebControls\DnnFileUpload.cs</location>
            <body hash="91cb30f49ed9e4e1f5078df1e9b3f686"><![CDATA[{
            DnnDropDownList.RegisterClientScript(page, skin);

            ClientResourceManager.RegisterStyleSheet(page, "~/Resources/Shared/Components/FileUpload/dnn.FileUpload.css");
            if (!string.IsNullOrEmpty(skin))
            {
                ClientResourceManager.RegisterStyleSheet(page, "~/Resources/Shared/Components/FileUpload/dnn.FileUpload." + skin + ".css");
            }

            ClientResourceManager.RegisterScript(page, "~/Resources/Shared/scripts/dnn.WebResourceUrl.js", FileOrder.Js.DefaultPriority + 2);
            ClientResourceManager.RegisterScript(page, "~/Resources/Shared/scripts/dnn.jquery.extensions.js", FileOrder.Js.DefaultPriority + 3);
            ClientResourceManager.RegisterScript(page, "~/Resources/Shared/Components/FileUpload/dnn.FileUpload.js", FileOrder.Js.DefaultPriority + 4);
        }]]></body>
          </codeblock>
        </method>
        <method name="RegisterStartupScript">
          <declaration><![CDATA[private void RegisterStartupScript()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="105" sc="9" el="157" ec="10">UI\WebControls\DnnFileUpload.cs</location>
            <body hash="01d64e2be4c14ef84c129b9e5405b858"><![CDATA[{
            Options.ClientId = ClientID;

            var portalSettings = PortalSettings.Current;

            if (Options.FolderPicker.InitialState == null)
            {
                var folder = FolderManager.Instance.GetFolder(portalSettings.PortalId, string.Empty);
                var rootFolder = (SupportHost && portalSettings.ActiveTab.IsSuperTab) ? SharedConstants.HostRootFolder : SharedConstants.RootFolder;

                Options.FolderPicker.InitialState = new DnnDropDownListState
                {
                    SelectedItem = (folder != null) ? new SerializableKeyValuePair<string, string>(folder.FolderID.ToString(CultureInfo.InvariantCulture), rootFolder) : null
                };
            }

            if (Options.Extensions.Count > 0)
            {
                var extensionsText = Options.Extensions.Aggregate(string.Empty, (current, extension) => current.Append(extension, ", "));
                Options.Resources.InvalidFileExtensions = string.Format(Options.Resources.InvalidFileExtensions, extensionsText);
            }

            if (Options.MaxFiles > 0)
            {
                Options.Resources.TooManyFiles = string.Format(Options.Resources.TooManyFiles, Options.MaxFiles.ToString(CultureInfo.InvariantCulture));
            }

            if (!SupportHost)
            {
                Options.FolderPicker.Services.Parameters["portalId"] = portalSettings.PortalId.ToString();
            }
            Options.FolderPicker.Services.GetTreeMethod = "ItemListService/GetFolders";
            Options.FolderPicker.Services.GetNodeDescendantsMethod = "ItemListService/GetFolderDescendants";
            Options.FolderPicker.Services.SearchTreeMethod = "ItemListService/SearchFolders";
            Options.FolderPicker.Services.GetTreeWithNodeMethod = "ItemListService/GetTreePathForFolder";
            Options.FolderPicker.Services.SortTreeMethod = "ItemListService/SortFolders";
            Options.FolderPicker.Services.ServiceRoot = "InternalServices";

            var optionsAsJsonString = Json.Serialize(Options);

            var script = string.Format("dnn.createFileUpload({0});{1}", optionsAsJsonString, Environment.NewLine);

            if (ScriptManager.GetCurrent(Page) != null)
            {
                // respect MS AJAX
                ScriptManager.RegisterStartupScript(Page, GetType(), ClientID + "DnnFileUpload", script, true);
            }
            else
            {
                Page.ClientScript.RegisterStartupScript(GetType(), ClientID + "DnnFileUpload", script, true);
            }

        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_options">
          <declaration><![CDATA[private readonly Lazy<DnnFileUploadOptions> _options = new Lazy<DnnFileUploadOptions>(() => new DnnFileUploadOptions());]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="Height">
          <declaration><![CDATA[public int Height]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ModuleId">
          <declaration><![CDATA[public int ModuleId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="35" sc="13" el="39" ec="14">UI\WebControls\DnnFileUpload.cs</location>
            <body hash="9311f22c34d8d9a41440130f6af0450a"><![CDATA[{
                var moduleIdString = value.ToString(CultureInfo.InvariantCulture);
                Options.ModuleId = moduleIdString;
                Options.FolderPicker.Services.ModuleId = moduleIdString;
            }]]></body>
          </codeblock>
        </property>
        <property name="Options">
          <declaration><![CDATA[public DnnFileUploadOptions Options]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="27" sc="13" el="29" ec="14">UI\WebControls\DnnFileUpload.cs</location>
            <body hash="68db4dc2ebd4390476aa99629566d03c"><![CDATA[{
                return _options.Value;
            }]]></body>
          </codeblock>
        </property>
        <property name="ParentClientId">
          <declaration><![CDATA[public string ParentClientId]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ShowOnStartup">
          <declaration><![CDATA[public bool ShowOnStartup]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Skin">
          <declaration><![CDATA[public string Skin]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="SupportHost">
          <declaration><![CDATA[public bool SupportHost]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Width">
          <declaration><![CDATA[public int Width]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnFileUploadOptions">
      <declaration><![CDATA[public class DnnFileUploadOptions]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public string ModuleId = string.Empty;]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="99" sc="9" el="179" ec="10">UI\WebControls\DnnFileUploadOptions.cs</location>
            <body hash="4fa290bcd6558d30c23206257666dd4b"><![CDATA[[DataMember(Name = "moduleId")]
        public string ModuleId = string.Empty;

        [DataMember(Name = "parentClientId")]
        public string ParentClientId;

        [DataMember(Name = "showOnStartup")]
        public bool ShowOnStartup;

        [DataMember(Name = "folderPicker")]
        public DnnDropDownListOptions FolderPicker;

        [DataMember(Name = "maxFileSize")]
        public int MaxFileSize;

        [DataMember(Name = "maxFiles")]
        public int MaxFiles = 0;

        [DataMember(Name = "extensions")]
        public List<string> Extensions;

        [DataMember(Name = "resources")]
        public DnnFileUploadResources Resources;

        [DataMember(Name = "width")]
        public int Width;

        [DataMember(Name = "height")]
        public int Height;

        private Dictionary<string, string> _parameters;

        [DataMember(Name = "parameters")]
        public Dictionary<string, string> Parameters
        {
            get
            {
                return _parameters ?? (_parameters = new Dictionary<string, string>());
            }
        }

        [DataMember(Name = "folderPath")]
        public string FolderPath;

        public DnnFileUploadOptions()
        {
            FolderPicker = new DnnDropDownListOptions();
            MaxFileSize = (int)Config.GetMaxUploadSize();
            Extensions = new List<string>();
            Width = DefaultWidth;
            Height = DefaultHeight;
            Resources = new DnnFileUploadResources
            {
                Title = Utilities.GetLocalizedString("FileUpload.Title.Text"),
                DialogHeader = Utilities.GetLocalizedString("FileUpload.DialogHeader.Text"),
                DecompressLabel = Utilities.GetLocalizedString("FileUpload.DecompressLabel.Text"),
                UploadToFolderLabel = Utilities.GetLocalizedString("FileUpload.UploadToFolderLabel.Text"),
                DragAndDropAreaTitle = Utilities.GetLocalizedString("FileUpload.DragAndDropAreaTitle.Text"),
                UploadFileMethod = Utilities.GetLocalizedString("FileUpload.UploadFileMethod.Text"),
                UploadFromWebMethod = Utilities.GetLocalizedString("FileUpload.UploadFromWebMethod.Text"),
                CloseButtonText = Utilities.GetLocalizedString("FileUpload.CloseButton.Text"),
                UploadFromWebButtonText = Utilities.GetLocalizedString("FileUpload.UploadFromWebButton.Text"),
                DecompressingFile = Utilities.GetLocalizedString("FileUpload.DecompressingFile.Text"),
                FileIsTooLarge = string.Format(Utilities.GetLocalizedString("FileUpload.FileIsTooLarge.Error") + " Mb", (MaxFileSize / (1024 * 1024)).ToString(CultureInfo.InvariantCulture)),
                FileUploadCancelled = Utilities.GetLocalizedString("FileUpload.FileUploadCancelled.Error"),
                FileUploadFailed = Utilities.GetLocalizedString("FileUpload.FileUploadFailed.Error"),
                TooManyFiles = Utilities.GetLocalizedString("FileUpload.TooManyFiles.Error"),
                InvalidFileExtensions = Utilities.GetLocalizedString("FileUpload.InvalidFileExtensions.Error"),
                FileUploaded = Utilities.GetLocalizedString("FileUpload.FileUploaded.Text"),
                EmptyFileUpload = Utilities.GetLocalizedString("FileUpload.EmptyFileUpload.Error"),
                FileAlreadyExists = Utilities.GetLocalizedString("FileUpload.FileAlreadyExists.Error"),
                ErrorDialogTitle = Utilities.GetLocalizedString("FileUpload.ErrorDialogTitle.Text"),
                UploadStopped = Utilities.GetLocalizedString("FileUpload.UploadStopped.Text"),
                UrlTooltip = Utilities.GetLocalizedString("FileUpload.UrlTooltip.Text"),
                KeepButtonText = Utilities.GetLocalizedString("FileUpload.KeepButton.Text"),
                ReplaceButtonText = Utilities.GetLocalizedString("FileUpload.ReplaceButton.Text"),
                UnzipFilePromptTitle = Utilities.GetLocalizedString("FileUpload.UnzipFilePromptTitle.Text"),
                UnzipFileFailedPromptBody = Utilities.GetLocalizedString("FileUpload.UnzipFileFailedPromptBody.Text"),
                UnzipFileSuccessPromptBody = Utilities.GetLocalizedString("FileUpload.UnzipFileSuccessPromptBody.Text")
            };
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
        <field name="_parameters">
          <declaration><![CDATA[private System.Collections.Generic.Dictionary<string, string> _parameters;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ClientId">
          <declaration><![CDATA[public string ClientId;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="DefaultHeight">
          <declaration><![CDATA[private const int DefaultHeight = 630;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="DefaultWidth">
          <declaration><![CDATA[private const int DefaultWidth = 780;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Extensions">
          <declaration><![CDATA[public System.Collections.Generic.List<string> Extensions;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="FolderPath">
          <declaration><![CDATA[public string FolderPath;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="FolderPicker">
          <declaration><![CDATA[public DnnDropDownListOptions FolderPicker;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Height">
          <declaration><![CDATA[public int Height;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="MaxFiles">
          <declaration><![CDATA[public int MaxFiles = 0;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="MaxFileSize">
          <declaration><![CDATA[public int MaxFileSize;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ModuleId">
          <declaration><![CDATA[public string ModuleId = string.Empty;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ParentClientId">
          <declaration><![CDATA[public string ParentClientId;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Resources">
          <declaration><![CDATA[public DnnFileUploadResources Resources;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ShowOnStartup">
          <declaration><![CDATA[public bool ShowOnStartup;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Width">
          <declaration><![CDATA[public int Width;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="Parameters">
          <declaration><![CDATA[public System.Collections.Generic.Dictionary<string, string> Parameters]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="135" sc="13" el="137" ec="14">UI\WebControls\DnnFileUploadOptions.cs</location>
            <body hash="d613397a8573a4cdba8e83b390f6eb50"><![CDATA[{
                return _parameters ?? (_parameters = new Dictionary<string, string>());
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnFileUploadResources">
      <declaration><![CDATA[public class DnnFileUploadResources]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnFileUploadResources()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
        <field name="CloseButtonText">
          <declaration><![CDATA[public string CloseButtonText;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="DecompressingFile">
          <declaration><![CDATA[public string DecompressingFile;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="DecompressLabel">
          <declaration><![CDATA[public string DecompressLabel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="DialogHeader">
          <declaration><![CDATA[public string DialogHeader;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="DragAndDropAreaTitle">
          <declaration><![CDATA[public string DragAndDropAreaTitle;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="EmptyFileUpload">
          <declaration><![CDATA[public string EmptyFileUpload;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ErrorDialogTitle">
          <declaration><![CDATA[public string ErrorDialogTitle;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="FileAlreadyExists">
          <declaration><![CDATA[public string FileAlreadyExists;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="FileIsTooLarge">
          <declaration><![CDATA[public string FileIsTooLarge;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="FileUploadCancelled">
          <declaration><![CDATA[public string FileUploadCancelled;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="FileUploaded">
          <declaration><![CDATA[public string FileUploaded;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="FileUploadFailed">
          <declaration><![CDATA[public string FileUploadFailed;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="InvalidFileExtensions">
          <declaration><![CDATA[public string InvalidFileExtensions;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="KeepButtonText">
          <declaration><![CDATA[public string KeepButtonText;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ReplaceButtonText">
          <declaration><![CDATA[public string ReplaceButtonText;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Title">
          <declaration><![CDATA[public string Title;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="TooManyFiles">
          <declaration><![CDATA[public string TooManyFiles;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="UnzipFileFailedPromptBody">
          <declaration><![CDATA[public string UnzipFileFailedPromptBody;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="UnzipFilePromptTitle">
          <declaration><![CDATA[public string UnzipFilePromptTitle;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="UnzipFileSuccessPromptBody">
          <declaration><![CDATA[public string UnzipFileSuccessPromptBody;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="UploadFileMethod">
          <declaration><![CDATA[public string UploadFileMethod;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="UploadFromWebButtonText">
          <declaration><![CDATA[public string UploadFromWebButtonText;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="UploadFromWebMethod">
          <declaration><![CDATA[public string UploadFromWebMethod;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="UploadStopped">
          <declaration><![CDATA[public string UploadStopped;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="UploadToFolderLabel">
          <declaration><![CDATA[public string UploadToFolderLabel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="UrlTooltip">
          <declaration><![CDATA[public string UrlTooltip;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnFilter">
      <declaration><![CDATA[public class DnnFilter : RadFilter]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnFilter()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnFolderDropDownList">
      <declaration><![CDATA[public class DnnFolderDropDownList : DnnDropDownList]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnFolderDropDownList()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="22" sc="9" el="34" ec="10">UI\WebControls\DnnFolderDropDownList.cs</location>
            <body hash="a5c8c77c184d480d2611e3cd00597912"><![CDATA[{
            base.OnInit(e);

            SelectItemDefaultText = Localization.GetString("DropDownList.SelectFolderDefaultText", Localization.SharedResourceFile);
            Services.GetTreeMethod = "ItemListService/GetFolders";
            Services.GetNodeDescendantsMethod = "ItemListService/GetFolderDescendants";
            Services.SearchTreeMethod = "ItemListService/SearchFolders";
            Services.GetTreeWithNodeMethod = "ItemListService/GetTreePathForFolder";
            Services.SortTreeMethod = "ItemListService/SortFolders";
            Services.ServiceRoot = "InternalServices";

            Options.ItemList.DisableUnspecifiedOrder = true;
        }]]></body>
          </codeblock>
        </method>
        <method name="OnPreRender">
          <declaration><![CDATA[protected override void OnPreRender(System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="37" sc="9" el="56" ec="10">UI\WebControls\DnnFolderDropDownList.cs</location>
            <body hash="c160ae66144bc500e99b552ba9702dc3"><![CDATA[{
            this.AddCssClass("folder");
            base.OnPreRender(e);

            //add the selected folder's level path so that it can expand to the selected node in client side.
            var selectedFolder = SelectedFolder;
            if (selectedFolder != null && selectedFolder.ParentID > Null.NullInteger)
            {
                var folderLevel = string.Empty;
                var parentFolder = FolderManager.Instance.GetFolder(selectedFolder.ParentID);
                while (parentFolder != null)
                {
                    folderLevel = string.Format("{0},{1}", parentFolder.FolderID, folderLevel);
                    parentFolder = (parentFolder.ParentID < 0) ? null : FolderManager.Instance.GetFolder(parentFolder.ParentID);
                }

                ExpandPath = folderLevel.TrimEnd(',');
            }
            
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="SelectedFolder">
          <declaration><![CDATA[public IFolderInfo SelectedFolder]]></declaration>
          <documentation>
            <summary>
 Gets the selected Folder in the control, or selects the Folder in the control.
 </summary>
          </documentation>
          <codeblock>
            <location sl="65" sc="13" el="68" ec="14">UI\WebControls\DnnFolderDropDownList.cs</location>
            <body hash="ac13c2cf1c338cbbf9caf8ceecfed367"><![CDATA[{
                var folderId = SelectedItemValueAsInt;
                return (folderId == Null.NullInteger) ? null : FolderManager.Instance.GetFolder(folderId);
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="70" sc="13" el="78" ec="14">UI\WebControls\DnnFolderDropDownList.cs</location>
            <body hash="af8c1df5576d7f8bebbfc10b4889e666"><![CDATA[{
                var folderName = value != null ? value.FolderName : null;
                if (folderName == string.Empty)
                {
                    folderName = PortalSettings.Current.ActiveTab.IsSuperTab ? SharedConstants.HostRootFolder : SharedConstants.RootFolder;
                }

                SelectedItem = (value != null) ? new ListItem() { Text = folderName, Value = value.FolderID.ToString(CultureInfo.InvariantCulture) } : null;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnFormComboBoxItem">
      <declaration><![CDATA[public class DnnFormComboBoxItem : DnnFormListItemBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnFormComboBoxItem()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="BindList">
          <declaration><![CDATA[protected override void BindList()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="48" sc="9" el="50" ec="10">UI\WebControls\DnnFormComboBoxItem.cs</location>
            <body hash="71ae74cd8a09eb9d7464e44f28194909"><![CDATA[{
            BindListInternal(ComboBox, Value, ListSource, ListTextField, ListValueField);
        }]]></body>
          </codeblock>
        </method>
        <method name="BindListInternal">
          <declaration><![CDATA[internal static void BindListInternal(DnnComboBox comboBox, object value, System.Collections.IEnumerable listSource, string textField, string valueField)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="54" sc="9" el="83" ec="10">UI\WebControls\DnnFormComboBoxItem.cs</location>
            <body hash="7c83c57516e708bb3f78891a72300f39"><![CDATA[{
            if (comboBox != null)
            {
                string selectedValue = !comboBox.Page.IsPostBack ? Convert.ToString(value) : comboBox.SelectedValue;

                if (listSource is Dictionary<string, string>)
                {
                    var items = listSource as Dictionary<string, string>;
                    foreach (var item in items)
                    {
                        //comboBox.Items.Add(new ListItem(item.Key, item.Value));
                        comboBox.AddItem(item.Key, item.Value);
                    }
                }
                else
                {
                    comboBox.DataTextField = textField;
                    comboBox.DataValueField = valueField;
                    comboBox.DataSource = listSource;

                    comboBox.DataBind();
                }

                //Reset SelectedValue
                //comboBox.Select(selectedValue);
                var selectedItem = comboBox.FindItemByValue(selectedValue);
                if (selectedItem != null)
                    selectedItem.Selected = true;                
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="CreateControlInternal">
          <declaration><![CDATA[protected override System.Web.UI.WebControls.WebControl CreateControlInternal(System.Web.UI.Control container)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="86" sc="9" el="98" ec="10">UI\WebControls\DnnFormComboBoxItem.cs</location>
            <body hash="cfe10e69f78a1e77bdf197926dd39b73"><![CDATA[{
            //ComboBox = new DropDownList { ID = ID + "_ComboBox" };
            ComboBox = new DnnComboBox { ID = ID + "_ComboBox" };
            ComboBox.SelectedIndexChanged += IndexChanged;
            container.Controls.Add(ComboBox);

            if (ListSource != null)
            {
                BindList();
            }

            return ComboBox;
        }]]></body>
          </codeblock>
        </method>
        <method name="IndexChanged">
          <declaration><![CDATA[private void IndexChanged(object sender, System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="43" sc="9" el="45" ec="10">UI\WebControls\DnnFormComboBoxItem.cs</location>
            <body hash="22d9513784f36f1db656cce4a3602828"><![CDATA[{
            UpdateDataSource(Value, ComboBox.SelectedValue, DataField);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="ComboBox">
          <declaration><![CDATA[public DnnComboBox ComboBox]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnFormDecorator">
      <declaration><![CDATA[public class DnnFormDecorator : RadFormDecorator]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnFormDecorator()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnFormEditControlItem">
      <declaration><![CDATA[public class DnnFormEditControlItem : DnnFormItemBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnFormEditControlItem()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="CreateControlInternal">
          <declaration><![CDATA[protected override System.Web.UI.WebControls.WebControl CreateControlInternal(System.Web.UI.Control container)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="41" sc="9" el="60" ec="10">UI\WebControls\DnnFormEditControlItem.cs</location>
            <body hash="72531fb8a67c874060125f0148fb7b95"><![CDATA[{
            control = Reflection.CreateObject(ControlType, ControlType) as EditControl;

            if (control != null)
            {
                control.ID = ID + "_Control";
                control.Name = ID;
                control.EditMode = PropertyEditorMode.Edit;
                control.Required = false;
                control.Value = Value;
                control.OldValue = Value;
                control.ValueChanged += ValueChanged;

                control.CssClass = "dnnFormInput";

                container.Controls.Add(control);
            }

            return control;
        }]]></body>
          </codeblock>
        </method>
        <method name="ValueChanged">
          <declaration><![CDATA[private void ValueChanged(object sender, PropertyEditorEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="63" sc="9" el="65" ec="10">UI\WebControls\DnnFormEditControlItem.cs</location>
            <body hash="0eae17e8950c425959e2227f47e584b9"><![CDATA[{
            UpdateDataSource(Value, e.Value, DataField);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="control">
          <declaration><![CDATA[private EditControl control;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="ControlType">
          <declaration><![CDATA[public string ControlType]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnFormEditor">
      <declaration><![CDATA[public class DnnFormEditor : System.Web.UI.WebControls.WebControl, System.Web.UI.INamingContainer]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnFormEditor()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="44" sc="9" el="52" ec="10">UI\WebControls\DnnFormEditor.cs</location>
            <body hash="d03cc2af7f80a8db1636b407aa94d2f0"><![CDATA[public DnnFormEditor()
        {
            Items = new List<DnnFormItemBase>();
            Sections = new List<DnnFormSection>();
            Tabs = new List<DnnFormTab>();

            FormMode = DnnFormMode.Long;
            ViewStateMode = ViewStateMode.Disabled;
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="CreateChildControls">
          <declaration><![CDATA[protected override void CreateChildControls()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="229" sc="9" el="241" ec="10">UI\WebControls\DnnFormEditor.cs</location>
            <body hash="037b1fa3b37ac2251526fa584555ded1"><![CDATA[{
            // CreateChildControls re-creates the children (the items)
            // using the saved view state.
            // First clear any existing child controls.
            Controls.Clear();

            // Create the items only if there is view state
            // corresponding to the children.
            if (_itemCount > 0)
            {
                CreateControlHierarchy(false);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="CreateControlHierarchy">
          <declaration><![CDATA[protected virtual void CreateControlHierarchy(bool useDataSource)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="268" sc="9" el="278" ec="10">UI\WebControls\DnnFormEditor.cs</location>
            <body hash="271e75017e7579c56550baee7349e230"><![CDATA[{
        	CssClass = string.IsNullOrEmpty(CssClass) ? "dnnForm" : CssClass.Contains("dnnForm") ? CssClass : string.Format("dnnForm {0}", CssClass);

        	SetUpTabs();

            SetUpSections(Sections, this);

            SetUpItems(Items, this, LocalResourceFile);

            DataBindItems(useDataSource);
        }]]></body>
          </codeblock>
        </method>
        <method name="DataBind">
          <declaration><![CDATA[public override void DataBind()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="281" sc="9" el="288" ec="10">UI\WebControls\DnnFormEditor.cs</location>
            <body hash="407660263b4fa11f1114dbeb45e457a2"><![CDATA[{
            base.OnDataBinding(EventArgs.Empty);
            Controls.Clear();
            ClearChildViewState();
            TrackViewState();
            CreateControlHierarchy(true);
            ChildControlsCreated = true;
        }]]></body>
          </codeblock>
        </method>
        <method name="DataBindItems">
          <declaration><![CDATA[private void DataBindItems(bool useDataSource)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="244" sc="9" el="265" ec="10">UI\WebControls\DnnFormEditor.cs</location>
            <body hash="b08a6075e7c903c0a7a27ff84da10581"><![CDATA[{
            var items = GetAllItems();

            foreach (DnnFormItemBase item in items)
            {
                if (String.IsNullOrEmpty(item.LocalResourceFile))
                {
                    item.LocalResourceFile = LocalResourceFile;
                }
                if (item.FormMode == DnnFormMode.Inherit)
                {
                    item.FormMode = FormMode;
                }

                if (DataSource != null)
                {
                    item.DataSource = DataSource;
                    item.DataBindItem(useDataSource);
                }
            }
            _itemCount = GetAllItems().Count;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetAllItems">
          <declaration><![CDATA[private System.Collections.Generic.List<DnnFormItemBase> GetAllItems()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="119" sc="9" el="142" ec="10">UI\WebControls\DnnFormEditor.cs</location>
            <body hash="e43b01ace6b8ebc200640434b9414d67"><![CDATA[{
            var items = new List<DnnFormItemBase>();

            //iterate over pages
            foreach (DnnFormTab page in Tabs)
            {
                foreach (DnnFormSection section in page.Sections)
                {
                    items.AddRange(section.Items);
                }
                items.AddRange(page.Items);
            }

            //iterate over section
            foreach (DnnFormSection section in Sections)
            {
                items.AddRange(section.Items);
            }

            //Add base items
            items.AddRange(Items);

            return items;
        }]]></body>
          </codeblock>
        </method>
        <method name="LoadControlState">
          <declaration><![CDATA[protected override void LoadControlState(object state)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="295" sc="9" el="300" ec="10">UI\WebControls\DnnFormEditor.cs</location>
            <body hash="3a23cec0065457c4635f333e50a40012"><![CDATA[{
            if (state != null)
            {
                _itemCount = (int) state;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="303" sc="9" el="307" ec="10">UI\WebControls\DnnFormEditor.cs</location>
            <body hash="b1ab46fc69575a471f7dfe312fb85e7c"><![CDATA[{
            Page.RegisterRequiresControlState(this);
            JavaScript.RequestRegistration(CommonJs.DnnPlugins);
            base.OnInit(e);
        }]]></body>
          </codeblock>
        </method>
        <method name="OnPreRender">
          <declaration><![CDATA[protected override void OnPreRender(System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="310" sc="9" el="349" ec="10">UI\WebControls\DnnFormEditor.cs</location>
            <body hash="3e20a8ef823b6d21c888b968150f09f3"><![CDATA[{
            base.OnPreRender(e);

            if(Tabs.Count > 0)
            {
                const string scriptName = "FormEditorjQuery";
                ClientScriptManager cs = Page.ClientScript;


                if (!cs.IsClientScriptBlockRegistered(GetType(), scriptName))
                {
                    //Render Script
                    var scriptBuilder = new StringBuilder();
                    scriptBuilder.Append("<script language=\"javascript\" type=\"text/javascript\">\r\n");
                    scriptBuilder.Append("\t(function ($, Sys) {\r\n");
                    scriptBuilder.Append("\t\tfunction setupFormEditor() {\r\n");
                    scriptBuilder.Append("\t\t\t$('#" + ClientID + "').dnnTabs().dnnPanels();\r\n");
                    foreach (DnnFormTab formTab in Tabs)
                    {
                        if (formTab.IncludeExpandAll)
                        {
                            scriptBuilder.Append(formTab.ExpandAllScript);
                        }
                    }
                    scriptBuilder.Append("\t\t}\r\n");
                    scriptBuilder.Append("\t\t$(document).ready(function () {\r\n");
                    scriptBuilder.Append("\t\t\tsetupFormEditor();\r\n");
                    scriptBuilder.Append("\t\t\tif (typeof Sys != 'undefined') {\r\n");
                    scriptBuilder.Append("\t\t\t\tSys.WebForms.PageRequestManager.getInstance().add_endRequest(function () {\r\n");
                    scriptBuilder.Append("\t\t\t\t\tsetupFormEditor();\r\n");
                    scriptBuilder.Append("\t\t\t\t});\r\n");
                    scriptBuilder.Append("\t\t\t}\r\n");
                    scriptBuilder.Append("\t\t});\r\n");
                    scriptBuilder.Append("\t} (jQuery, window.Sys));\r\n");

                    scriptBuilder.Append("</script>\r\n");
                    cs.RegisterClientScriptBlock(GetType(), scriptName, scriptBuilder.ToString());
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="SaveControlState">
          <declaration><![CDATA[protected override object SaveControlState()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="352" sc="9" el="354" ec="10">UI\WebControls\DnnFormEditor.cs</location>
            <body hash="43d7fdfb51654b292df74974d3dc74ec"><![CDATA[{
            return _itemCount > 0 ? (object) _itemCount : null;
        }]]></body>
          </codeblock>
        </method>
        <method name="SetUpItems">
          <declaration><![CDATA[internal static void SetUpItems(System.Collections.Generic.IEnumerable<DnnFormItemBase> items, System.Web.UI.WebControls.WebControl parentControl, string localResourceFile)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="147" sc="9" el="152" ec="10">UI\WebControls\DnnFormEditor.cs</location>
            <body hash="6a118081be52b8f8ee0537dc5f86e243"><![CDATA[{
            foreach (DnnFormItemBase item in items)
            {
                parentControl.Controls.Add(item);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="SetUpSections">
          <declaration><![CDATA[private void SetUpSections(System.Collections.Generic.List<DnnFormSection> sections, System.Web.UI.WebControls.WebControl parentControl)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="155" sc="9" el="174" ec="10">UI\WebControls\DnnFormEditor.cs</location>
            <body hash="d633f2ded7926e025f3c5eb955e08ac9"><![CDATA[{
            if (sections.Count > 0)
            {
                foreach (DnnFormSection section in sections)
                {
                    var panel = new DnnFormPanel {CssClass = "dnnFormSectionHead"};
                    parentControl.Controls.Add(panel);

                    var resourceKey = section.ResourceKey;
                    if (String.IsNullOrEmpty(resourceKey))
                    {
                        resourceKey = section.ID;
                    }
                    panel.Text = Localization.GetString(resourceKey, LocalResourceFile);
                    panel.Expanded = section.Expanded;

                    SetUpItems(section.Items, panel, LocalResourceFile);
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="SetUpTabs">
          <declaration><![CDATA[private void SetUpTabs()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="177" sc="9" el="222" ec="10">UI\WebControls\DnnFormEditor.cs</location>
            <body hash="949edaffa14e29d2988f031f187bdf25"><![CDATA[{
            if (Tabs.Count > 0)
            {
                var tabStrip = new DnnFormTabStrip {CssClass = "dnnAdminTabNav dnnClear"};
                Controls.Add(tabStrip);
                tabStrip.Items.Clear();

                foreach (DnnFormTab formTab in Tabs)
                {
                    var resourceKey = formTab.ResourceKey;
                    if (String.IsNullOrEmpty(resourceKey))
                    {
                        resourceKey = formTab.ID;
                    }

                    var tab = new Panel {CssClass = formTab.ID + " dnnClear", ID = "tab_" + formTab.ID};
                    Controls.Add(tab);

                    if (formTab.IncludeExpandAll)
                    {
                        var expandAll = new Panel {CssClass = "dnnFormExpandContent"};
                        string expandAllText = Localization.GetString("ExpandAll", Localization.SharedResourceFile);
                        expandAll.Controls.Add(new LiteralControl("<a href=\"\">" + expandAllText + "</a>"));
                        tab.Controls.Add(expandAll);

                        formTab.ExpandAllScript = "\t\t\t$('#" + tab.ClientID + " .dnnFormExpandContent a').dnnExpandAll({\r\n";
                        formTab.ExpandAllScript += "\t\t\t\texpandText: '" + Localization.GetString("ExpandAll", Localization.SharedResourceFile) + "',\r\n";
                        formTab.ExpandAllScript += "\t\t\t\tcollapseText: '" + Localization.GetString("CollapseAll", Localization.SharedResourceFile) + "',\r\n";
                        formTab.ExpandAllScript += "\t\t\t\ttargetArea: '#" + tab.ClientID + "' });\r\n";
                    }

                    tabStrip.Items.Add(new ListItem(Localization.GetString(resourceKey, LocalResourceFile), "#" + tab.ClientID));

                    if (formTab.Sections.Count > 0)
                    {
                        SetUpSections(formTab.Sections, tab);
                    }
                    else
                    {
                        tab.CssClass += " dnnFormNoSections";
                    }

                    SetUpItems(formTab.Items, tab, LocalResourceFile);
                }
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_dataSource">
          <declaration><![CDATA[private object _dataSource;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_itemCount">
          <declaration><![CDATA[private int _itemCount;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="DataSource">
          <declaration><![CDATA[public object DataSource]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="73" sc="13" el="75" ec="14">UI\WebControls\DnnFormEditor.cs</location>
            <body hash="0d9b5e692dcd19852549262a6fe00af8"><![CDATA[{
                return _dataSource;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="77" sc="13" el="86" ec="14">UI\WebControls\DnnFormEditor.cs</location>
            <body hash="46edaef8c00527a1927739d4e752fb16"><![CDATA[{
                if (_dataSource != value)
                {
                    _dataSource = value;
                    if (Page.IsPostBack)
                    {
                        DataBindItems(false);
                    }
                }
            }]]></body>
          </codeblock>
        </property>
        <property name="FormMode">
          <declaration><![CDATA[public DnnFormMode FormMode]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="IsValid">
          <declaration><![CDATA[public bool IsValid]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="94" sc="13" el="106" ec="14">UI\WebControls\DnnFormEditor.cs</location>
            <body hash="5f132fffe26e9fe0c6ea212437c7ef26"><![CDATA[{
                bool isValid = true;
                foreach (var item in GetAllItems())
                {
                    item.CheckIsValid();
                    if(!item.IsValid)
                    {
                        isValid = false;
                        break;
                    }
                }
                return isValid;
            }]]></body>
          </codeblock>
        </property>
        <property name="Items">
          <declaration><![CDATA[public System.Collections.Generic.List<DnnFormItemBase> Items]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="LocalResourceFile">
          <declaration><![CDATA[protected string LocalResourceFile]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="57" sc="13" el="59" ec="14">UI\WebControls\DnnFormEditor.cs</location>
            <body hash="56c4d779dbc7799f018d31a7269cfdf9"><![CDATA[{
                return Utilities.GetLocalResourceFile(this);
            }]]></body>
          </codeblock>
        </property>
        <property name="Sections">
          <declaration><![CDATA[public System.Collections.Generic.List<DnnFormSection> Sections]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Tabs">
          <declaration><![CDATA[public System.Collections.Generic.List<DnnFormTab> Tabs]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="TagKey">
          <declaration><![CDATA[protected override System.Web.UI.HtmlTextWriterTag TagKey]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="65" sc="13" el="67" ec="14">UI\WebControls\DnnFormEditor.cs</location>
            <body hash="8210dac1c0e0b0cb6fea1d2e7e0d9026"><![CDATA[{
                return HtmlTextWriterTag.Div;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnFormEmptyTemplate">
      <declaration><![CDATA[public class DnnFormEmptyTemplate : System.Web.UI.WebControls.WebControl, System.Web.UI.INamingContainer]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnFormEmptyTemplate()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="TagKey">
          <declaration><![CDATA[protected override System.Web.UI.HtmlTextWriterTag TagKey]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="36" sc="13" el="38" ec="14">UI\WebControls\DnnFormEmptyTemplate.cs</location>
            <body hash="8210dac1c0e0b0cb6fea1d2e7e0d9026"><![CDATA[{
                return HtmlTextWriterTag.Div;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnFormEnumItem">
      <declaration><![CDATA[public class DnnFormEnumItem : DnnFormComboBoxItem]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnFormEnumItem()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="BindList">
          <declaration><![CDATA[protected override void BindList()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="52" sc="9" el="57" ec="10">UI\WebControls\DnnFormEnumItem.cs</location>
            <body hash="a4808b273da51492c229ffdec76dcfe3"><![CDATA[{
            ListTextField = "Name";
            ListValueField = "Value";

            BindListInternal(ComboBox, Convert.ToInt32(Value), ListSource, ListTextField, ListValueField);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_enumType">
          <declaration><![CDATA[private string _enumType;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="EnumType">
          <declaration><![CDATA[public string EnumType]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="37" sc="13" el="39" ec="14">UI\WebControls\DnnFormEnumItem.cs</location>
            <body hash="51b7bc294c7977b026b1110454b2b93a"><![CDATA[{
                return _enumType;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="41" sc="13" el="48" ec="14">UI\WebControls\DnnFormEnumItem.cs</location>
            <body hash="9599b7412fe04c85d2a7ba02e588d504"><![CDATA[{
                _enumType = value;
                // ReSharper disable AssignNullToNotNullAttribute
                ListSource = (from object enumValue in Enum.GetValues(Type.GetType(_enumType))
                              select new { Name = Localization.GetString(Enum.GetName(Type.GetType(_enumType), enumValue)) ?? Enum.GetName(Type.GetType(_enumType), enumValue), Value = (int)enumValue })
                                .ToList();
                // ReSharper restore AssignNullToNotNullAttribute
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnFormItemBase">
      <declaration><![CDATA[public abstract class DnnFormItemBase : System.Web.UI.WebControls.WebControl, System.Web.UI.INamingContainer]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private string _requiredMessageSuffix = ".Required";]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="45" sc="9" el="54" ec="10">UI\WebControls\DnnFormItemBase.cs</location>
            <body hash="1cf04effd2925f81dc79c3715211f4d5"><![CDATA[private string _requiredMessageSuffix = ".Required";
        private string _validationMessageSuffix = ".RegExError";
        
        protected DnnFormItemBase()
        {
            FormMode = DnnFormMode.Inherit;
            IsValid = true;

            Validators = new List<IValidator>();
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="AddValidators">
          <declaration><![CDATA[private void AddValidators(string controlId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="155" sc="9" el="197" ec="10">UI\WebControls\DnnFormItemBase.cs</location>
            <body hash="91445c965d15891c3d7b4f4a5a941cda"><![CDATA[{
            var value = Value as String;
            Validators.Clear();

            //Add Validators
            if (Required)
            {
                var requiredValidator = new RequiredFieldValidator
                                            {
                                                ID = ID + "_Required", 
                                                ErrorMessage = ResourceKey + RequiredMessageSuffix
                                            };
                Validators.Add(requiredValidator);
            }

            if (!String.IsNullOrEmpty(ValidationExpression))
            {
                var regexValidator = new RegularExpressionValidator
                                         {
                                             ID = ID + "_RegEx", 
                                             ErrorMessage = ResourceKey + ValidationMessageSuffix, 
                                             ValidationExpression = ValidationExpression
                                         };
                if (!String.IsNullOrEmpty(value))
                {
                    regexValidator.IsValid = Regex.IsMatch(value, ValidationExpression);
                    IsValid = regexValidator.IsValid;
                }
                Validators.Add(regexValidator);
            }

            if (Validators.Count > 0)
            {
                foreach (BaseValidator validator in Validators)
                {
                    validator.ControlToValidate = controlId;
                    validator.Display = ValidatorDisplay.Dynamic;
                    validator.ErrorMessage = LocalizeString(validator.ErrorMessage);
                    validator.CssClass = "dnnFormMessage dnnFormError";                   
                    Controls.Add(validator);
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="CheckIsValid">
          <declaration><![CDATA[public void CheckIsValid()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="200" sc="9" el="211" ec="10">UI\WebControls\DnnFormItemBase.cs</location>
            <body hash="c13baa2a4ce51aca7200d2690b9d3e04"><![CDATA[{
            IsValid = true;
            foreach (BaseValidator validator in Validators)
            {
                validator.Validate();
                if (!validator.IsValid)
                {
                    IsValid = false;
                    break;
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="CreateChildControls">
          <declaration><![CDATA[protected override void CreateChildControls()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="256" sc="9" el="263" ec="10">UI\WebControls\DnnFormItemBase.cs</location>
            <body hash="3348a768c42d8bb45e7f374f4d4ec75b"><![CDATA[{
            // CreateChildControls re-creates the children (the items)
            // using the saved view state.
            // First clear any existing child controls.
            Controls.Clear();

            CreateControlHierarchy();
        }]]></body>
          </codeblock>
        </method>
        <method name="CreateControlHierarchy">
          <declaration><![CDATA[protected virtual void CreateControlHierarchy()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="214" sc="9" el="243" ec="10">UI\WebControls\DnnFormItemBase.cs</location>
            <body hash="017e51463281d31f4d77163552a47259"><![CDATA[{
            //Load Item Style
            CssClass = "dnnFormItem";
            CssClass += (FormMode == DnnFormMode.Long) ? "" : " dnnFormShort";

            if (String.IsNullOrEmpty(ResourceKey))
            {
                ResourceKey = DataField;
            }

            //Add Label
            var label = new DnnFormLabel 
                                {
                                    LocalResourceFile = LocalResourceFile, 
                                    ResourceKey = ResourceKey + ".Text", 
                                    ToolTipKey = ResourceKey + ".Help",
                                    ViewStateMode = ViewStateMode.Disabled
                                };

            if (Required) {

                label.RequiredField = true;
            }

            Controls.Add(label);

            WebControl inputControl = CreateControlInternal(this);
            label.AssociatedControlID = inputControl.ID;
            AddValidators(inputControl.ID);
        }]]></body>
          </codeblock>
        </method>
        <method name="CreateControlInternal">
          <declaration><![CDATA[protected virtual System.Web.UI.WebControls.WebControl CreateControlInternal(System.Web.UI.Control container)]]></declaration>
          <documentation>
            <summary>
 Use container to add custom control hierarchy to
 </summary>
 <param name="container"></param>
 <returns>An "input" control that can be used for attaching validators</returns></documentation>
          <codeblock>
            <location sl="251" sc="9" el="253" ec="10">UI\WebControls\DnnFormItemBase.cs</location>
            <body hash="e58ece320c3127efb710b9676c9d552e"><![CDATA[{
            return null;
        }]]></body>
          </codeblock>
        </method>
        <method name="DataBindInternal">
          <declaration><![CDATA[protected void DataBindInternal(string dataField, ref object value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="266" sc="9" el="303" ec="10">UI\WebControls\DnnFormItemBase.cs</location>
            <body hash="f739601274cb098704219e6395d288ad"><![CDATA[{
            var dictionary = DataSource as IDictionary;
            if (dictionary != null)
            {
                if (!String.IsNullOrEmpty(dataField) && dictionary.Contains(dataField))
                {
                    value = dictionary[dataField];
                }
            }
            else
            {
                if (!String.IsNullOrEmpty(dataField))
                {
                    if (String.IsNullOrEmpty(DataMember))
                    {
                        if (Property != null && Property.GetValue(DataSource, null) != null)
                        {
                            // ReSharper disable PossibleNullReferenceException
                            value = Property.GetValue(DataSource, null);
                            // ReSharper restore PossibleNullReferenceException
                        } 
                    }
                    else
                    {
                        if (Property != null && Property.GetValue(DataSource, null) != null)
                        {
                            // ReSharper disable PossibleNullReferenceException
                            object parentValue = Property.GetValue(DataSource, null);
                            if (ChildProperty != null && ChildProperty.GetValue(parentValue, null) != null)
                            {
                                value = ChildProperty.GetValue(parentValue, null);
                            }
                            // ReSharper restore PossibleNullReferenceException
                        }
                    }
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="DataBindInternal">
          <declaration><![CDATA[protected virtual void DataBindInternal()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="306" sc="9" el="308" ec="10">UI\WebControls\DnnFormItemBase.cs</location>
            <body hash="b3725c547b7f3892f1b29833a35e2916"><![CDATA[{
            DataBindInternal(DataField, ref _value);
        }]]></body>
          </codeblock>
        </method>
        <method name="DataBindItem">
          <declaration><![CDATA[public void DataBindItem(bool useDataSource)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="311" sc="9" el="331" ec="10">UI\WebControls\DnnFormItemBase.cs</location>
            <body hash="643b29d421c52982ceb5af2cbc2f574c"><![CDATA[{
            if (useDataSource)
            {
                base.OnDataBinding(EventArgs.Empty);
                Controls.Clear();
                ClearChildViewState();
                TrackViewState();

                DataBindInternal();

                CreateControlHierarchy();
                ChildControlsCreated = true;
            }
            else
            {
                if (!String.IsNullOrEmpty(DataField))
                {
                    UpdateDataSourceInternal(null, _value, DataField);
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="LoadControlState">
          <declaration><![CDATA[protected override void LoadControlState(object state)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="421" sc="9" el="423" ec="10">UI\WebControls\DnnFormItemBase.cs</location>
            <body hash="ac550e8dccd0283e3c49e1e7b6ef0e78"><![CDATA[{
            _value = state;
        }]]></body>
          </codeblock>
        </method>
        <method name="LocalizeString">
          <declaration><![CDATA[protected string LocalizeString(string key)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="426" sc="9" el="428" ec="10">UI\WebControls\DnnFormItemBase.cs</location>
            <body hash="fdb9cfd70aff46a9da06e018de02d9c8"><![CDATA[{
            return Localization.GetString(key, LocalResourceFile);
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="431" sc="9" el="434" ec="10">UI\WebControls\DnnFormItemBase.cs</location>
            <body hash="01dedbb5287ed6d3e73b4a7e01aa3a45"><![CDATA[{
            Page.RegisterRequiresControlState(this);
            base.OnInit(e);
        }]]></body>
          </codeblock>
        </method>
        <method name="SaveControlState">
          <declaration><![CDATA[protected override object SaveControlState()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="437" sc="9" el="439" ec="10">UI\WebControls\DnnFormItemBase.cs</location>
            <body hash="617608755c9b351e4a62981526ddaf47"><![CDATA[{
            return _value;
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateDataSource">
          <declaration><![CDATA[protected void UpdateDataSource(object oldValue, object newValue, string dataField)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="408" sc="9" el="414" ec="10">UI\WebControls\DnnFormItemBase.cs</location>
            <body hash="93df006d175d9715a3ad84f11ddb97e1"><![CDATA[{
            CheckIsValid();

            _value = newValue;

            UpdateDataSourceInternal(oldValue, newValue, dataField);
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateDataSourceInternal">
          <declaration><![CDATA[private void UpdateDataSourceInternal(object oldValue, object newValue, string dataField)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="334" sc="9" el="405" ec="10">UI\WebControls\DnnFormItemBase.cs</location>
            <body hash="1ba286584d4e13501eb5a86607735665"><![CDATA[{
            if (DataSource != null)
            {
                if (DataSource is IDictionary<string, string>)
                {
                    var dictionary = DataSource as IDictionary<string, string>;
                    if (dictionary.ContainsKey(dataField) && !ReferenceEquals(newValue, oldValue))
                    {
                        dictionary[dataField] = newValue as string;
                    }
                }
                else if(DataSource is IIndexable)
                {
                    var indexer = DataSource as IIndexable;
                    indexer[dataField] = newValue;
                }
                else
                {
                    if (String.IsNullOrEmpty(DataMember))
                    {
                        if (Property != null)
                        {
                            if (!ReferenceEquals(newValue, oldValue))
                            {
                                if (Property.PropertyType.IsEnum)
                                {
                                    Property.SetValue(DataSource, Enum.Parse(Property.PropertyType, newValue.ToString()), null);
                                }
                                else
                                {
                                    Property.SetValue(DataSource, Convert.ChangeType(newValue, Property.PropertyType), null);
                                }
                            }
                        }
                    }
                    else
                    {
                        if (Property != null)
                        {
                            object parentValue = Property.GetValue(DataSource, null);
                            if (parentValue != null)
                            {
                                if (parentValue is IDictionary<string, string>)
                                {
                                    var dictionary = parentValue as IDictionary<string, string>;
                                    if (dictionary.ContainsKey(dataField) && !ReferenceEquals(newValue, oldValue))
                                    {
                                        dictionary[dataField] = newValue as string;
                                    }
                                }
                                else if (parentValue is IIndexable)
                                {
                                    var indexer = parentValue as IIndexable;
                                    indexer[dataField] = newValue;
                                }
                                else if (ChildProperty != null)
                                {
                                    if (Property.PropertyType.IsEnum)
                                    {
                                        ChildProperty.SetValue(parentValue, Enum.Parse(ChildProperty.PropertyType, newValue.ToString()), null);
                                    }
                                    else
                                    {
                                        ChildProperty.SetValue(parentValue, Convert.ChangeType(newValue, ChildProperty.PropertyType), null);
                                    }
                                }
                            }
                        }
                    }
                }
            }           
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_requiredMessageSuffix">
          <declaration><![CDATA[private string _requiredMessageSuffix = ".Required";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_validationMessageSuffix">
          <declaration><![CDATA[private string _validationMessageSuffix = ".RegExError";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_value">
          <declaration><![CDATA[private object _value;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="ChildProperty">
          <declaration><![CDATA[protected System.Reflection.PropertyInfo ChildProperty]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="61" sc="13" el="65" ec="14">UI\WebControls\DnnFormItemBase.cs</location>
            <body hash="490ecb94e7b114103fca9c3f69cc4304"><![CDATA[{
                Type type = Property.PropertyType;
                IList<PropertyInfo> props = new List<PropertyInfo>(type.GetProperties(BindingFlags.Public | BindingFlags.Instance | BindingFlags.Static));
                return props.SingleOrDefault(p => p.Name == DataField);
            }]]></body>
          </codeblock>
        </property>
        <property name="DataField">
          <declaration><![CDATA[public string DataField]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="DataMember">
          <declaration><![CDATA[public string DataMember]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="DataSource">
          <declaration><![CDATA[internal object DataSource]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="FormMode">
          <declaration><![CDATA[public DnnFormMode FormMode]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="IsValid">
          <declaration><![CDATA[public bool IsValid]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="LocalResourceFile">
          <declaration><![CDATA[public string LocalResourceFile]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="OnClientClicked">
          <declaration><![CDATA[public string OnClientClicked]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="PortalSettings">
          <declaration><![CDATA[protected PortalSettings PortalSettings]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Property">
          <declaration><![CDATA[protected System.Reflection.PropertyInfo Property]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="76" sc="13" el="82" ec="14">UI\WebControls\DnnFormItemBase.cs</location>
            <body hash="c9e3089bbc839c05f8f8fec89807213e"><![CDATA[{
                Type type = DataSource.GetType();
                IList<PropertyInfo> props = new List<PropertyInfo>(type.GetProperties(BindingFlags.Public | BindingFlags.Instance | BindingFlags.Static));
                return !String.IsNullOrEmpty(DataMember) 
                           ? props.SingleOrDefault(p => p.Name == DataMember) 
                           : props.SingleOrDefault(p => p.Name == DataField);
            }]]></body>
          </codeblock>
        </property>
        <property name="Required">
          <declaration><![CDATA[public bool Required]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="RequiredMessageSuffix">
          <declaration><![CDATA[public string RequiredMessageSuffix]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="124" sc="13" el="126" ec="14">UI\WebControls\DnnFormItemBase.cs</location>
            <body hash="e27793cdd87436e0c2b7a3ea146e7325"><![CDATA[{
                return _requiredMessageSuffix;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="128" sc="13" el="130" ec="14">UI\WebControls\DnnFormItemBase.cs</location>
            <body hash="e73be193615cda760fbfa71198959c40"><![CDATA[{
                _requiredMessageSuffix = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="ResourceKey">
          <declaration><![CDATA[public string ResourceKey]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="TagKey">
          <declaration><![CDATA[protected override System.Web.UI.HtmlTextWriterTag TagKey]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="88" sc="13" el="90" ec="14">UI\WebControls\DnnFormItemBase.cs</location>
            <body hash="8210dac1c0e0b0cb6fea1d2e7e0d9026"><![CDATA[{
                return HtmlTextWriterTag.Div;
            }]]></body>
          </codeblock>
        </property>
        <property name="ValidationExpression">
          <declaration><![CDATA[public string ValidationExpression]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ValidationMessageSuffix">
          <declaration><![CDATA[public string ValidationMessageSuffix]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="136" sc="13" el="138" ec="14">UI\WebControls\DnnFormItemBase.cs</location>
            <body hash="f5b2f9708d39d30289b763518875f039"><![CDATA[{
                return _validationMessageSuffix;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="140" sc="13" el="142" ec="14">UI\WebControls\DnnFormItemBase.cs</location>
            <body hash="666576074d25967f91df6587f559a2c0"><![CDATA[{
                _validationMessageSuffix = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="Validators">
          <declaration><![CDATA[public System.Collections.Generic.List<System.Web.UI.IValidator> Validators]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Value">
          <declaration><![CDATA[public object Value]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnFormLabel">
      <declaration><![CDATA[public class DnnFormLabel : System.Web.UI.WebControls.Panel]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnFormLabel()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="CreateChildControls">
          <declaration><![CDATA[protected override void CreateChildControls()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="52" sc="3" el="99" ec="4">UI\WebControls\DnnFormLabel.cs</location>
            <body hash="bc105089c9dd8316d5eed8ca212dd72f"><![CDATA[{
			string toolTipText = LocalizeString(ToolTipKey);
            if (string.IsNullOrEmpty(CssClass))
                CssClass = "dnnLabel";

            else if (!CssClass.Contains("dnnLabel"))                           
                CssClass += " dnnLabel";
            

            //var outerPanel = new Panel();
            //outerPanel.CssClass = "dnnLabel";
            //Controls.Add(outerPanel);            

            var outerLabel = new System.Web.UI.HtmlControls.HtmlGenericControl { TagName = "label" };
            Controls.Add(outerLabel);
            
            var label = new Label { ID = "Label", Text = LocalizeString(ResourceKey) };
            if (RequiredField)
            {
                label.CssClass += " dnnFormRequired";
            }
		    outerLabel.Controls.Add(label);			

            var link = new LinkButton { ID = "Link", CssClass = "dnnFormHelp", TabIndex = -1 };
            Controls.Add(link);
			
			if (!String.IsNullOrEmpty(toolTipText))
			{
				//CssClass += "dnnLabel";

			    var tooltipPanel = new Panel() { CssClass = "dnnTooltip"};
                Controls.Add(tooltipPanel);

				var panel = new Panel { ID = "Help", CssClass = "dnnFormHelpContent dnnClear" };				
                tooltipPanel.Controls.Add(panel);
				
				var helpLabel = new Label { ID = "Text", CssClass="dnnHelpText", Text = LocalizeString(ToolTipKey) };
				panel.Controls.Add(helpLabel);

				var pinLink = new HyperLink {CssClass = "pinHelp"};
			    pinLink.Attributes.Add("href", "#");
				panel.Controls.Add(pinLink);

                JavaScript.RegisterClientReference(Page, ClientAPI.ClientNamespaceReferences.dnn);
                JavaScript.RequestRegistration(CommonJs.DnnPlugins);
                //ClientResourceManager.RegisterScript(this.Page, "~/Resources/Shared/Scripts/initTooltips.js");
			}
		}]]></body>
          </codeblock>
        </method>
        <method name="LocalizeString">
          <declaration><![CDATA[protected string LocalizeString(string key)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="102" sc="3" el="104" ec="4">UI\WebControls\DnnFormLabel.cs</location>
            <body hash="b76cfeec95b8e8b8890b94fcb9beb1c8"><![CDATA[{
			return Localization.GetString(key, LocalResourceFile);
		}]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="AssociatedControlID">
          <declaration><![CDATA[public string AssociatedControlID]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="LocalResourceFile">
          <declaration><![CDATA[public string LocalResourceFile]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="RequiredField">
          <declaration><![CDATA[public bool RequiredField]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ResourceKey">
          <declaration><![CDATA[public string ResourceKey]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ToolTipKey">
          <declaration><![CDATA[public string ToolTipKey]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnFormListItemBase">
      <declaration><![CDATA[public abstract class DnnFormListItemBase : DnnFormItemBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[protected DnnFormListItemBase()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="BindList">
          <declaration><![CDATA[protected virtual void BindList()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="56" sc="9" el="57" ec="10">UI\WebControls\DnnFormListItemBase.cs</location>
            <body hash="539fa760ca172337a931519768c64187"><![CDATA[{
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_listSource">
          <declaration><![CDATA[private System.Collections.IEnumerable _listSource;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="DefaultValue">
          <declaration><![CDATA[public string DefaultValue]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ListSource">
          <declaration><![CDATA[public System.Collections.IEnumerable ListSource]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="38" sc="13" el="40" ec="14">UI\WebControls\DnnFormListItemBase.cs</location>
            <body hash="73b4460f074dba4bc7e73de7ba4e0709"><![CDATA[{
                return _listSource;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="42" sc="13" el="48" ec="14">UI\WebControls\DnnFormListItemBase.cs</location>
            <body hash="f3775b3b0301e1217218e65c4dbdff36"><![CDATA[{
                if (_listSource != value)
                {
                    _listSource = value;
                    BindList();
                }
            }]]></body>
          </codeblock>
        </property>
        <property name="ListTextField">
          <declaration><![CDATA[public string ListTextField]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ListValueField">
          <declaration><![CDATA[public string ListValueField]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnFormLiteralItem">
      <declaration><![CDATA[public class DnnFormLiteralItem : DnnFormItemBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnFormLiteralItem()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="33" sc="9" el="36" ec="10">UI\WebControls\DnnFormLiteralItem.cs</location>
            <body hash="79bc7681d97da1baaef5f425e516c4f0"><![CDATA[public DnnFormLiteralItem() : base()
        {
            ViewStateMode = ViewStateMode.Disabled;    
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="CreateControlInternal">
          <declaration><![CDATA[protected override System.Web.UI.WebControls.WebControl CreateControlInternal(System.Web.UI.Control container)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="39" sc="9" el="43" ec="10">UI\WebControls\DnnFormLiteralItem.cs</location>
            <body hash="538b80c9e5e0b1e8b681555174119cd0"><![CDATA[{
            var literal = new Label {ID = ID + "_Label", Text = Convert.ToString(Value)};
            container.Controls.Add(literal);
            return literal;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnFormMode">
      <declaration><![CDATA[public enum DnnFormMode]]></declaration>
      <documentation>
      </documentation>
      <constructors>
      </constructors>
      <methods>
      </methods>
      <fields>
        <field name="Inherit">
          <declaration><![CDATA[public const DnnFormMode Inherit = 0;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Long">
          <declaration><![CDATA[public const DnnFormMode Long = 2;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Short">
          <declaration><![CDATA[public const DnnFormMode Short = 1;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnFormNumericTextBoxItem">
      <declaration><![CDATA[public class DnnFormNumericTextBoxItem : DnnFormItemBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnFormNumericTextBoxItem()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="40" sc="9" el="46" ec="10">UI\WebControls\DnnFormNumericTextBoxItem.cs</location>
            <body hash="629fc82ea3b5d9b20248c058fdc16c62"><![CDATA[public DnnFormNumericTextBoxItem()
        {
            TextBoxWidth = new Unit(100);
            ShowSpinButtons = true;
            Type = NumericType.Number;
            DecimalDigits = 0;
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="CreateControlInternal">
          <declaration><![CDATA[protected override System.Web.UI.WebControls.WebControl CreateControlInternal(System.Web.UI.Control container)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="62" sc="9" el="83" ec="10">UI\WebControls\DnnFormNumericTextBoxItem.cs</location>
            <body hash="0a4fae4fb6c2fb777f6135d3579b6b7f"><![CDATA[{
            //_textBox = new DnnNumericTextBox {EmptyMessage = LocalizeString(ResourceKey + ".Hint"), ID = ID + "_TextBox", Width = TextBoxWidth };
            _textBox = new TextBox();
            _textBox.CssClass = "DnnNumericTextBox";
            //_textBox.Style.Add("float", "none");
            //_textBox.EmptyMessageStyle.CssClass += "dnnformHint";
            //_textBox.Type = Type;
            //_textBox.NumberFormat.DecimalDigits = DecimalDigits;
            //_textBox.ShowSpinButtons = ShowSpinButtons;
            _textBox.TextChanged += TextChanged;

            //Load from ControlState
            _textBox.Text = Convert.ToString(Value);

            container.Controls.Add(_textBox);
            JavaScript.RequestRegistration(CommonJs.DnnPlugins);

            var initalizeScript = "<script type='text/javascript'>$(function(){$('.DnnNumericTextBox').dnnSpinner({type: 'range', defaultVal:" + _textBox.Text + ", typedata: { min: 1, interval: 1, max: 2147482624 }});});</script>";
            Page.ClientScript.RegisterClientScriptBlock(GetType(), "DnnFormNumericTextBoxItem", initalizeScript);

            return _textBox;
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="86" sc="9" el="90" ec="10">UI\WebControls\DnnFormNumericTextBoxItem.cs</location>
            <body hash="a7a0d5e5ba96c7e64affe4de297ee84e"><![CDATA[{
            base.OnInit(e);

            FormMode = DnnFormMode.Short;
        }]]></body>
          </codeblock>
        </method>
        <method name="TextChanged">
          <declaration><![CDATA[private void TextChanged(object sender, System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="57" sc="9" el="59" ec="10">UI\WebControls\DnnFormNumericTextBoxItem.cs</location>
            <body hash="250ec58c80b3fc26d171ec6161905181"><![CDATA[{
            UpdateDataSource(Value, _textBox.Text, DataField);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_textBox">
          <declaration><![CDATA[private System.Web.UI.WebControls.TextBox _textBox;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="DecimalDigits">
          <declaration><![CDATA[public int DecimalDigits]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ShowSpinButtons">
          <declaration><![CDATA[public bool ShowSpinButtons]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="TextBoxWidth">
          <declaration><![CDATA[public System.Web.UI.WebControls.Unit TextBoxWidth]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Type">
          <declaration><![CDATA[public NumericType Type]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnFormPagesItem">
      <declaration><![CDATA[public class DnnFormPagesItem : DnnFormComboBoxItem]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnFormPagesItem()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="32" sc="9" el="37" ec="10">UI\WebControls\DnnFormPagesItem.cs</location>
            <body hash="aa522367339d1835cc05d56c7706e800"><![CDATA[public DnnFormPagesItem()
        {
            ListSource = TabController.GetPortalTabs(PortalSettings.PortalId, Null.NullInteger, true, "<" + Localization.GetString("None_Specified") + ">", true, false, true, true, false);
            ListTextField = "TabName";
            ListValueField = "TabID";
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnFormPanel">
      <declaration><![CDATA[public class DnnFormPanel : System.Web.UI.WebControls.WebControl]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnFormPanel()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="Render">
          <declaration><![CDATA[protected override void Render(System.Web.UI.HtmlTextWriter writer)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="35" sc="9" el="54" ec="10">UI\WebControls\DnnFormPanel.cs</location>
            <body hash="185c369da51954351ac7382e0d7033be"><![CDATA[{
            writer.AddAttribute(HtmlTextWriterAttribute.Class, CssClass);
            writer.RenderBeginTag(HtmlTextWriterTag.H2);

            if (Expanded)
            {
                writer.AddAttribute(HtmlTextWriterAttribute.Class, "dnnSectionExpanded");
            }
            writer.RenderBeginTag(HtmlTextWriterTag.A);
            writer.Write(Text);
            writer.RenderEndTag();

            writer.RenderEndTag();

            writer.RenderBeginTag(HtmlTextWriterTag.Fieldset);

            RenderChildren(writer);

            writer.RenderEndTag();
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="Expanded">
          <declaration><![CDATA[public bool Expanded]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Text">
          <declaration><![CDATA[public string Text]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnFormPasswordItem">
      <declaration><![CDATA[public class DnnFormPasswordItem : DnnFormItemBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnFormPasswordItem()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="CreateControlInternal">
          <declaration><![CDATA[protected override System.Web.UI.WebControls.WebControl CreateControlInternal(System.Web.UI.Control container)]]></declaration>
          <documentation>
            <summary>
 Use container to add custom control hierarchy to
 </summary>
 <param name="container"></param>
 <returns>An "input" control that can be used for attaching validators</returns></documentation>
          <codeblock>
            <location sl="74" sc="9" el="95" ec="10">UI\WebControls\DnnFormPasswordItem.cs</location>
            <body hash="92c1353a4534f12896ac4bc9def6c258"><![CDATA[{
            _password = new TextBox()
            {
                ID = ID + "_TextBox",
                TextMode = TextBoxMode.Password,
                CssClass = TextBoxCssClass,
                MaxLength = 20, //ensure password cannot be cut if too long
                Text = Convert.ToString(Value) // Load from ControlState
            };
            _password.Attributes.Add("autocomplete", "off");
            _password.TextChanged += TextChanged;

            var passwordContainer = new Panel() { ID = "passwordContainer", CssClass = ContainerCssClass };

            // add control hierarchy to the container
            container.Controls.Add(passwordContainer);

            passwordContainer.Controls.Add(_password);

            // return input control that can be used for validation
            return _password;
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="98" sc="9" el="105" ec="10">UI\WebControls\DnnFormPasswordItem.cs</location>
            <body hash="6ad401a2851f31c477aa2c6f5e55ad52"><![CDATA[{
            base.OnInit(e);
            ClientResourceManager.RegisterScript(Page, "~/Resources/Shared/scripts/dnn.jquery.extensions.js");
            ClientResourceManager.RegisterScript(Page, "~/Resources/Shared/scripts/dnn.jquery.tooltip.js");
            ClientResourceManager.RegisterScript(Page, "~/Resources/Shared/scripts/dnn.PasswordStrength.js");

            JavaScript.RequestRegistration(CommonJs.DnnPlugins);
        }]]></body>
          </codeblock>
        </method>
        <method name="OnPreRender">
          <declaration><![CDATA[protected override void OnPreRender(System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="108" sc="9" el="126" ec="10">UI\WebControls\DnnFormPasswordItem.cs</location>
            <body hash="4033a52e108f869e0e439f2f5baa23b5"><![CDATA[{
            base.OnPreRender(e);

            var options = new DnnPaswordStrengthOptions();
            var optionsAsJsonString = Json.Serialize(options);
            var script = string.Format("dnn.initializePasswordStrength('.{0}', {1});{2}",
                TextBoxCssClass, optionsAsJsonString, Environment.NewLine);

            if (ScriptManager.GetCurrent(Page) != null)
            {
                // respect MS AJAX
                ScriptManager.RegisterStartupScript(Page, GetType(), "PasswordStrength", script, true);
            }
            else
            {
                Page.ClientScript.RegisterStartupScript(GetType(), "PasswordStrength", script, true);
            }

        }]]></body>
          </codeblock>
        </method>
        <method name="TextChanged">
          <declaration><![CDATA[private void TextChanged(object sender, System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="64" sc="9" el="66" ec="10">UI\WebControls\DnnFormPasswordItem.cs</location>
            <body hash="cd1775e87bbf2b13b41b730d73036ee0"><![CDATA[{
            UpdateDataSource(Value, _password.Text, DataField);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_password">
          <declaration><![CDATA[private System.Web.UI.WebControls.TextBox _password;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="ContainerCssClass">
          <declaration><![CDATA[public string ContainerCssClass]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="54" sc="13" el="56" ec="14">UI\WebControls\DnnFormPasswordItem.cs</location>
            <body hash="921875825b32faf921b3d6d720aba444"><![CDATA[{
                return ViewState.GetValue("ContainerCssClass", string.Empty);
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="58" sc="13" el="60" ec="14">UI\WebControls\DnnFormPasswordItem.cs</location>
            <body hash="f5e6354b3664dbfe57e55612ff2b236a"><![CDATA[{
                ViewState.SetValue("ContainerCssClass", value, string.Empty);
            }]]></body>
          </codeblock>
        </property>
        <property name="TextBoxCssClass">
          <declaration><![CDATA[public string TextBoxCssClass]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="42" sc="13" el="44" ec="14">UI\WebControls\DnnFormPasswordItem.cs</location>
            <body hash="a737e7fd349a196fff7a4f36d812ff60"><![CDATA[{
                return ViewState.GetValue("TextBoxCssClass", string.Empty);
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="46" sc="13" el="48" ec="14">UI\WebControls\DnnFormPasswordItem.cs</location>
            <body hash="430b818f7c68f4b2236ed269c41e6bff"><![CDATA[{
                ViewState.SetValue("TextBoxCssClass", value, string.Empty);
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnFormRadioButtonListItem">
      <declaration><![CDATA[public class DnnFormRadioButtonListItem : DnnFormListItemBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnFormRadioButtonListItem()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="BindList">
          <declaration><![CDATA[protected override void BindList()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="37" sc="9" el="77" ec="10">UI\WebControls\DnnFormRadioButtonListItem.cs</location>
            <body hash="50f1a23ac1dc975b910ed1b9af9777bf"><![CDATA[{
            if (_radioButtonList != null)
            {
                string selectedValue = !_radioButtonList.Page.IsPostBack ? Convert.ToString(Value) : _radioButtonList.Page.Request.Form[_radioButtonList.UniqueID];

                if (ListSource is Dictionary<string, string>)
                {
                    var items = ListSource as Dictionary<string, string>;
                    foreach (var item in items)
                    {
                        var listItem = new ListItem(item.Key, item.Value);
                        listItem.Attributes.Add("onClick", OnClientClicked);

                        _radioButtonList.Items.Add(listItem);
                    }
                }
                else
                {
                    _radioButtonList.DataTextField = ListTextField;
                    _radioButtonList.DataValueField = ListValueField;
                    _radioButtonList.DataSource = ListSource;

                    _radioButtonList.DataBind();
                }
                if (String.IsNullOrEmpty(selectedValue))
                {
                    selectedValue = DefaultValue;
                }

                //Reset SelectedValue
                if (_radioButtonList.Items.FindByValue(selectedValue) != null)
                {
                    _radioButtonList.Items.FindByValue(selectedValue).Selected = true;
                }

                if (selectedValue != Convert.ToString(Value))
                {
                    UpdateDataSource(Value, selectedValue, DataField);
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="CreateControlInternal">
          <declaration><![CDATA[protected override System.Web.UI.WebControls.WebControl CreateControlInternal(System.Web.UI.Control container)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="80" sc="9" el="91" ec="10">UI\WebControls\DnnFormRadioButtonListItem.cs</location>
            <body hash="7f92767d8679b00b8044ba6b846c7b90"><![CDATA[{
            _radioButtonList = new RadioButtonList  { ID = ID + "_RadioButtonList", RepeatColumns = 1, RepeatDirection = RepeatDirection.Vertical, RepeatLayout = RepeatLayout.Flow};

            container.Controls.Add(_radioButtonList);

            if (ListSource != null)
            {
                BindList();
            }

            return _radioButtonList;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_radioButtonList">
          <declaration><![CDATA[private System.Web.UI.WebControls.RadioButtonList _radioButtonList;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnFormSection">
      <declaration><![CDATA[public class DnnFormSection : System.Web.UI.WebControls.WebControl, System.Web.UI.INamingContainer]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnFormSection()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="35" sc="9" el="38" ec="10">UI\WebControls\DnnFormSection.cs</location>
            <body hash="a3065e5ed6b493eb9cac05da42ada2dc"><![CDATA[public DnnFormSection()
        {
            Items = new List<DnnFormItemBase>();
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="Expanded">
          <declaration><![CDATA[public bool Expanded]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Items">
          <declaration><![CDATA[public System.Collections.Generic.List<DnnFormItemBase> Items]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ResourceKey">
          <declaration><![CDATA[public string ResourceKey]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnFormSectionTemplate">
      <declaration><![CDATA[internal class DnnFormSectionTemplate : System.Web.UI.ITemplate]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnFormSectionTemplate()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="33" sc="9" el="36" ec="10">UI\WebControls\DnnFormSectionTemplate.cs</location>
            <body hash="04c50d926cfe06fc7622c5bdb1a1d546"><![CDATA[public DnnFormSectionTemplate()
        {
            Items = new List<DnnFormItemBase>();
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="InstantiateIn">
          <declaration><![CDATA[public void InstantiateIn(System.Web.UI.Control container)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="45" sc="9" el="51" ec="10">UI\WebControls\DnnFormSectionTemplate.cs</location>
            <body hash="61c2497ad55cf628f6edb58cd7589bba"><![CDATA[{
            var webControl = container as WebControl;
            if (webControl != null)
            {
                DnnFormEditor.SetUpItems(Items, webControl, LocalResourceFile);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="Items">
          <declaration><![CDATA[public System.Collections.Generic.List<DnnFormItemBase> Items]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="LocalResourceFile">
          <declaration><![CDATA[public string LocalResourceFile]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnFormSkinsItem">
      <declaration><![CDATA[public class DnnFormSkinsItem : DnnFormItemBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnFormSkinsItem()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="ContainerIndexChanged">
          <declaration><![CDATA[private void ContainerIndexChanged(object sender, System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="54" sc="9" el="56" ec="10">UI\WebControls\DnnFormSkinsItem.cs</location>
            <body hash="6a4a682eb7a15b0935feb44f2f8d2887"><![CDATA[{
            UpdateDataSource(_containerValue, _containerCombo.SelectedValue, ContainerDataField);
        }]]></body>
          </codeblock>
        </method>
        <method name="CreateControlInternal">
          <declaration><![CDATA[protected override System.Web.UI.WebControls.WebControl CreateControlInternal(System.Web.UI.Control container)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="82" sc="9" el="112" ec="10">UI\WebControls\DnnFormSkinsItem.cs</location>
            <body hash="13ed653559cceef45c4396ebd0a4a8a3"><![CDATA[{
            var panel = new Panel();

            container.Controls.Add(panel);

            var skinLabel = new Label { Text = LocalizeString("Skin") };
            skinLabel.CssClass += "dnnFormSkinLabel";
            panel.Controls.Add(skinLabel);

            //_skinCombo = new DropDownList { ID = ID + "_SkinComboBox" };
            _skinCombo = new DnnComboBox { ID = ID + "_SkinComboBox" };
            _skinCombo.CssClass += "dnnFormSkinInput"; 
            _skinCombo.SelectedIndexChanged += SkinIndexChanged;
            panel.Controls.Add(_skinCombo);

            DnnFormComboBoxItem.BindListInternal(_skinCombo, _skinValue, GetSkins(SkinController.RootSkin), "Key", "Value");

            var containerLabel = new Label { Text = LocalizeString("Container") };
            containerLabel.CssClass += "dnnFormSkinLabel";
            panel.Controls.Add(containerLabel);

            //_containerCombo = new DropDownList { ID = ID + "_ContainerComboBox" };
            _containerCombo = new DnnComboBox { ID = ID + "_ContainerComboBox" };
            _containerCombo.CssClass += "dnnFormSkinInput";
            _containerCombo.SelectedIndexChanged += ContainerIndexChanged;
            panel.Controls.Add(_containerCombo);

            DnnFormComboBoxItem.BindListInternal(_containerCombo, _containerValue, GetSkins(SkinController.RootContainer), "Key", "Value");

            return panel;
        }]]></body>
          </codeblock>
        </method>
        <method name="DataBindInternal">
          <declaration><![CDATA[protected override void DataBindInternal()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="115" sc="9" el="121" ec="10">UI\WebControls\DnnFormSkinsItem.cs</location>
            <body hash="2b4d5751b730687149b9255663be0be3"><![CDATA[{
            DataBindInternal(SkinDataField, ref _skinValue);

            DataBindInternal(ContainerDataField, ref _containerValue);

            Value = new Pair {First = _skinValue, Second = _containerValue};
        }]]></body>
          </codeblock>
        </method>
        <method name="GetSkins">
          <declaration><![CDATA[private System.Collections.Generic.Dictionary<string, string> GetSkins(string skinRoot)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="64" sc="9" el="79" ec="10">UI\WebControls\DnnFormSkinsItem.cs</location>
            <body hash="bde796577ad689b3dafc555a7b5e3086"><![CDATA[{
            // load host skins
            var skins = SkinController.GetSkins(null, skinRoot, SkinScope.Host).ToDictionary(skin => skin.Key, skin => skin.Value);

            if (IncludePortalSkins)
            {
                // load portal skins
                var portal = PortalController.Instance.GetPortal(PortalId);

                foreach (var skin in SkinController.GetSkins(portal, skinRoot, SkinScope.Site))
                {
                    skins.Add(skin.Key, skin.Value);
                }
            }
            return skins;
        }]]></body>
          </codeblock>
        </method>
        <method name="LoadControlState">
          <declaration><![CDATA[protected override void LoadControlState(object state)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="124" sc="9" el="132" ec="10">UI\WebControls\DnnFormSkinsItem.cs</location>
            <body hash="b0f475cad3fd28296dff2bce25c5ed79"><![CDATA[{
            base.LoadControlState(state);
            var pair = Value as Pair;
            if (pair != null)
            {
                _skinValue = pair.First;
                _containerValue = pair.Second;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="SkinIndexChanged">
          <declaration><![CDATA[private void SkinIndexChanged(object sender, System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="59" sc="9" el="61" ec="10">UI\WebControls\DnnFormSkinsItem.cs</location>
            <body hash="9797299ee3f04d7e8699d3c6a65d14b6"><![CDATA[{
            UpdateDataSource(_skinValue, _skinCombo.SelectedValue, SkinDataField);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_containerCombo">
          <declaration><![CDATA[private DnnComboBox _containerCombo;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_containerValue">
          <declaration><![CDATA[private object _containerValue;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_skinCombo">
          <declaration><![CDATA[private DnnComboBox _skinCombo;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_skinValue">
          <declaration><![CDATA[private object _skinValue;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="ContainerDataField">
          <declaration><![CDATA[public string ContainerDataField]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="IncludePortalSkins">
          <declaration><![CDATA[public bool IncludePortalSkins]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="PortalId">
          <declaration><![CDATA[public int PortalId]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="SkinDataField">
          <declaration><![CDATA[public string SkinDataField]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnFormTab">
      <declaration><![CDATA[public class DnnFormTab : System.Web.UI.WebControls.WebControl, System.Web.UI.INamingContainer]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnFormTab()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="35" sc="9" el="39" ec="10">UI\WebControls\DnnFormTab.cs</location>
            <body hash="3fdc99311f90e9dc91d72ca0794325b6"><![CDATA[public DnnFormTab()
        {
            Sections = new List<DnnFormSection>();
            Items = new List<DnnFormItemBase>();
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="ExpandAllScript">
          <declaration><![CDATA[internal string ExpandAllScript]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="IncludeExpandAll">
          <declaration><![CDATA[public bool IncludeExpandAll]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Items">
          <declaration><![CDATA[public System.Collections.Generic.List<DnnFormItemBase> Items]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ResourceKey">
          <declaration><![CDATA[public string ResourceKey]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Sections">
          <declaration><![CDATA[public System.Collections.Generic.List<DnnFormSection> Sections]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnFormTabStrip">
      <declaration><![CDATA[public class DnnFormTabStrip : System.Web.UI.WebControls.ListControl]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnFormTabStrip()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="Render">
          <declaration><![CDATA[protected override void Render(System.Web.UI.HtmlTextWriter writer)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="31" sc="9" el="49" ec="10">UI\WebControls\DnnFormTabStrip.cs</location>
            <body hash="79c318d76e2cdb45c6e7bd0b577b29de"><![CDATA[{
            writer.AddAttribute(HtmlTextWriterAttribute.Class, CssClass);
            writer.RenderBeginTag(HtmlTextWriterTag.Ul);

            foreach (ListItem item in Items)
            {
                writer.RenderBeginTag(HtmlTextWriterTag.Li);
                
                writer.AddAttribute(HtmlTextWriterAttribute.Href, item.Value);
                writer.RenderBeginTag(HtmlTextWriterTag.A);
                writer.Write(item.Text);

                writer.RenderEndTag();

                writer.RenderEndTag();
            }

            writer.RenderEndTag();
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnFormTemplateItem">
      <declaration><![CDATA[public class DnnFormTemplateItem : DnnFormItemBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnFormTemplateItem()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="CreateControlHierarchy">
          <declaration><![CDATA[protected override void CreateControlHierarchy()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="38" sc="9" el="45" ec="10">UI\WebControls\DnnFormTemplateItem.cs</location>
            <body hash="91ff29dee97ca3a40f9dc178b14f6207"><![CDATA[{
            CssClass += " dnnFormItem";
            CssClass += (FormMode == DnnFormMode.Long) ? " dnnFormLong" : " dnnFormShort";

            var template = new DnnFormEmptyTemplate();
            ItemTemplate.InstantiateIn(template);
            Controls.Add(template);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="ItemTemplate">
          <declaration><![CDATA[public System.Web.UI.ITemplate ItemTemplate]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnFormTextBoxItem">
      <declaration><![CDATA[public class DnnFormTextBoxItem : DnnFormItemBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnFormTextBoxItem()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="CreateControlInternal">
          <declaration><![CDATA[protected override System.Web.UI.WebControls.WebControl CreateControlInternal(System.Web.UI.Control container)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="63" sc="9" el="83" ec="10">UI\WebControls\DnnFormTextBoxItem.cs</location>
            <body hash="22ea4dc67cdbe8f3eb4ac518f178bbcb"><![CDATA[{

            _textBox = new TextBox { ID = ID + "_TextBox" };

            _textBox.Rows = Rows;
            _textBox.Columns = Columns;
            _textBox.TextMode = TextMode;
            _textBox.CssClass = TextBoxCssClass;
            _textBox.AutoCompleteType = AutoCompleteType;
            _textBox.TextChanged += TextChanged;

            //Load from ControlState
            _textBox.Text = Convert.ToString(Value);
            if (TextMode == TextBoxMode.Password)
            {
                _textBox.Attributes.Add("autocomplete", "off");
            }
            container.Controls.Add(_textBox);

            return _textBox;
        }]]></body>
          </codeblock>
        </method>
        <method name="OnPreRender">
          <declaration><![CDATA[protected override void OnPreRender(System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="86" sc="9" el="93" ec="10">UI\WebControls\DnnFormTextBoxItem.cs</location>
            <body hash="310e7253afe46c7d747109e095bd085d"><![CDATA[{
            base.OnPreRender(e);

            if (TextMode == TextBoxMode.Password)
            {
                _textBox.Attributes.Add("value", Convert.ToString(Value));
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="TextChanged">
          <declaration><![CDATA[private void TextChanged(object sender, System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="58" sc="9" el="60" ec="10">UI\WebControls\DnnFormTextBoxItem.cs</location>
            <body hash="250ec58c80b3fc26d171ec6161905181"><![CDATA[{
            UpdateDataSource(Value, _textBox.Text, DataField);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_textBox">
          <declaration><![CDATA[private System.Web.UI.WebControls.TextBox _textBox;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="AutoCompleteType">
          <declaration><![CDATA[public System.Web.UI.WebControls.AutoCompleteType AutoCompleteType]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Columns">
          <declaration><![CDATA[public int Columns]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Rows">
          <declaration><![CDATA[public int Rows]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="TextBoxCssClass">
          <declaration><![CDATA[public string TextBoxCssClass]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="46" sc="13" el="48" ec="14">UI\WebControls\DnnFormTextBoxItem.cs</location>
            <body hash="a737e7fd349a196fff7a4f36d812ff60"><![CDATA[{
                return ViewState.GetValue("TextBoxCssClass", string.Empty);
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="50" sc="13" el="52" ec="14">UI\WebControls\DnnFormTextBoxItem.cs</location>
            <body hash="430b818f7c68f4b2236ed269c41e6bff"><![CDATA[{
                ViewState.SetValue("TextBoxCssClass", value, string.Empty);
            }]]></body>
          </codeblock>
        </property>
        <property name="TextMode">
          <declaration><![CDATA[public System.Web.UI.WebControls.TextBoxMode TextMode]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnFormToggleButtonItem">
      <declaration><![CDATA[public class DnnFormToggleButtonItem : DnnFormItemBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnFormToggleButtonItem()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="49" sc="9" el="52" ec="10">UI\WebControls\DnnFormToggleButtonItem.cs</location>
            <body hash="d47ccec1106841259e7dcd1e27c556bf"><![CDATA[public DnnFormToggleButtonItem()
        {
            Mode = CheckBoxMode.TrueFalse;
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="CheckedChanged">
          <declaration><![CDATA[private void CheckedChanged(object sender, System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="57" sc="9" el="72" ec="10">UI\WebControls\DnnFormToggleButtonItem.cs</location>
            <body hash="99262cac2847a9cc1fb777dc4e541592"><![CDATA[{
            string newValue;
            switch (Mode)
            {
                case CheckBoxMode.YN:
                    newValue = (_checkBox.Checked) ? "Y" : "N";
                    break;
                case CheckBoxMode.YesNo:
                    newValue = (_checkBox.Checked) ? "Yes" : "No";
                    break;
                default:
                    newValue = (_checkBox.Checked) ? "true" : "false";
                    break;
            }
            UpdateDataSource(Value, newValue, DataField);
        }]]></body>
          </codeblock>
        </method>
        <method name="CreateControlInternal">
          <declaration><![CDATA[protected override System.Web.UI.WebControls.WebControl CreateControlInternal(System.Web.UI.Control container)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="75" sc="9" el="102" ec="10">UI\WebControls\DnnFormToggleButtonItem.cs</location>
            <body hash="f555c0c210a616688a75e368ce3d860b"><![CDATA[{
            //_checkBox = new DnnRadButton {ID = ID + "_CheckBox", ButtonType = RadButtonType.ToggleButton, ToggleType = ButtonToggleType.CheckBox, AutoPostBack = false};
            _checkBox = new CheckBox{ ID = ID + "_CheckBox", AutoPostBack = false };

            _checkBox.CheckedChanged += CheckedChanged;
            container.Controls.Add(_checkBox);

            //Load from ControlState
            if (!_checkBox.Page.IsPostBack)
            {
            }
            switch (Mode)
            {
                case CheckBoxMode.YN:
                case CheckBoxMode.YesNo:
                    var stringValue = Value as string;
                    if (stringValue != null)
                    {
                        _checkBox.Checked = stringValue.ToUpperInvariant().StartsWith("Y");
                    }
                    break;
                default:
                    _checkBox.Checked = Convert.ToBoolean(Value);
                    break;
            }

            return _checkBox;
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="105" sc="9" el="109" ec="10">UI\WebControls\DnnFormToggleButtonItem.cs</location>
            <body hash="a7a0d5e5ba96c7e64affe4de297ee84e"><![CDATA[{
            base.OnInit(e);

            FormMode = DnnFormMode.Short;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_checkBox">
          <declaration><![CDATA[private System.Web.UI.WebControls.CheckBox _checkBox;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="Mode">
          <declaration><![CDATA[public DnnFormToggleButtonItem.CheckBoxMode Mode]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnGenericHiddenField&lt;T&gt;">
      <declaration><![CDATA[public class DnnGenericHiddenField<T> : System.Web.UI.WebControls.HiddenField where T : class, new()]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private T _typedValue = default(T);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="13" sc="9" el="15" ec="49">UI\WebControls\DnnGenericHiddenField.cs</location>
            <body hash="58a4e6dcd5ac833f49f92da96f64cca8"><![CDATA[private T _typedValue = null;

        private bool _isValueSerialized = false;]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="EnsureValue">
          <declaration><![CDATA[private void EnsureValue()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="70" sc="9" el="75" ec="10">UI\WebControls\DnnGenericHiddenField.cs</location>
            <body hash="2137184b277019938db89f0cce09fb8c"><![CDATA[{
            if (!_isValueSerialized)
            {
                SerializeValue();
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="LoadPostData">
          <declaration><![CDATA[protected override bool LoadPostData(string postDataKey, NameValueCollection postCollection)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="55" sc="9" el="62" ec="10">UI\WebControls\DnnGenericHiddenField.cs</location>
            <body hash="62a001c5517741c2f1c534f9821214d7"><![CDATA[{
            var controlsStateChanged = base.LoadPostData(postDataKey, postCollection);
            if (controlsStateChanged)
            {
                SetTypedValue();
            }
            return controlsStateChanged;
        }]]></body>
          </codeblock>
        </method>
        <method name="LoadViewState">
          <declaration><![CDATA[protected override void LoadViewState(object savedState)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="49" sc="9" el="52" ec="10">UI\WebControls\DnnGenericHiddenField.cs</location>
            <body hash="a79bc0d68beb0896e683b312aaa29e05"><![CDATA[{
            base.LoadViewState(savedState);
            SetTypedValue();
        }]]></body>
          </codeblock>
        </method>
        <method name="RenderControl">
          <declaration><![CDATA[public override void RenderControl(System.Web.UI.HtmlTextWriter writer)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="90" sc="9" el="93" ec="10">UI\WebControls\DnnGenericHiddenField.cs</location>
            <body hash="431199bb1352061c0898d5090f0fc352"><![CDATA[{
            EnsureValue();
            base.RenderControl(writer);
        }]]></body>
          </codeblock>
        </method>
        <method name="SaveViewState">
          <declaration><![CDATA[protected override object SaveViewState()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="43" sc="9" el="46" ec="10">UI\WebControls\DnnGenericHiddenField.cs</location>
            <body hash="0ce48c782e7aec4e8542dba05c4ae31e"><![CDATA[{
            EnsureValue();
            return base.SaveViewState();
        }]]></body>
          </codeblock>
        </method>
        <method name="SerializeValue">
          <declaration><![CDATA[private void SerializeValue()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="78" sc="9" el="81" ec="10">UI\WebControls\DnnGenericHiddenField.cs</location>
            <body hash="73ffa19d550b04878b5aad91290c2b5d"><![CDATA[{
            Value = _typedValue == null ? string.Empty : Json.Serialize(_typedValue);
            _isValueSerialized = true;
        }]]></body>
          </codeblock>
        </method>
        <method name="SetTypedValue">
          <declaration><![CDATA[private void SetTypedValue()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="65" sc="9" el="67" ec="10">UI\WebControls\DnnGenericHiddenField.cs</location>
            <body hash="9861d554f934bf048a1d86eb13daf186"><![CDATA[{
            _typedValue = string.IsNullOrEmpty(Value) ? null : Json.Deserialize<T>(Value);
        }]]></body>
          </codeblock>
        </method>
        <method name="TrackViewState">
          <declaration><![CDATA[protected override void TrackViewState()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="84" sc="9" el="87" ec="10">UI\WebControls\DnnGenericHiddenField.cs</location>
            <body hash="afa423a1e725739c53e8d44708498177"><![CDATA[{
            EnsureValue();
            base.TrackViewState();
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_isValueSerialized">
          <declaration><![CDATA[private bool _isValueSerialized = false;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_typedValue">
          <declaration><![CDATA[private T _typedValue = default(T);]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="HasValue">
          <declaration><![CDATA[public bool HasValue]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="TypedValue">
          <declaration><![CDATA[public T TypedValue]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="19" sc="13" el="21" ec="14">UI\WebControls\DnnGenericHiddenField.cs</location>
            <body hash="ef8a82cd326eddf99a7de75bf5b96a72"><![CDATA[{
                return _typedValue;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="23" sc="13" el="26" ec="14">UI\WebControls\DnnGenericHiddenField.cs</location>
            <body hash="b9ae780d21466815a12e98cbb3a4cd24"><![CDATA[{
                _typedValue = value;
                _isValueSerialized = false;
            }]]></body>
          </codeblock>
        </property>
        <property name="TypedValueOrDefault">
          <declaration><![CDATA[public T TypedValueOrDefault]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="32" sc="13" el="34" ec="14">UI\WebControls\DnnGenericHiddenField.cs</location>
            <body hash="1c279afea0a1330605f87911e4f90837"><![CDATA[{
                return TypedValue ?? (TypedValue = new T());
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnGrid">
      <declaration><![CDATA[public class DnnGrid : RadGrid]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnGrid()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="DnnGrid_PreRender">
          <declaration><![CDATA[private void DnnGrid_PreRender(object sender, System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="62" sc="9" el="83" ec="10">UI\WebControls\DnnGrid.cs</location>
            <body hash="0e9657dedfdf53d0a32967ad984c9370"><![CDATA[{
            var items = this.MasterTableView.Items;
            if (ScreenRowNumber == 0)
                ScreenRowNumber = 15;

            if (items.Count > ScreenRowNumber)
            {
                // need scroll
                this.ClientSettings.Scrolling.AllowScroll = true;
                this.ClientSettings.Scrolling.UseStaticHeaders = true;

                if(RowHeight == 0)
                    RowHeight = 25;

                this.ClientSettings.Scrolling.ScrollHeight = RowHeight * ScreenRowNumber;
            }
            else
            {
                this.ClientSettings.Scrolling.AllowScroll = false;                
            }

        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="48" sc="9" el="59" ec="10">UI\WebControls\DnnGrid.cs</location>
            <body hash="e2acff0986e26bc844a59c1d47399796"><![CDATA[{
            base.OnInit(e);
            base.EnableEmbeddedBaseStylesheet = false;
            Utilities.ApplySkin(this);
            JavaScript.RequestRegistration(CommonJs.DnnPlugins);
            if (string.IsNullOrEmpty(ClientSettings.ClientEvents.OnGridCreated))
            {
                ClientSettings.ClientEvents.OnGridCreated = "$.dnnGridCreated";
            }

            this.PreRender += new EventHandler(DnnGrid_PreRender);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="RowHeight">
          <declaration><![CDATA[public int RowHeight]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ScreenRowNumber">
          <declaration><![CDATA[public int ScreenRowNumber]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnGridAttachmentColumn">
      <declaration><![CDATA[public class DnnGridAttachmentColumn : GridAttachmentColumn]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnGridAttachmentColumn()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="Clone">
          <declaration><![CDATA[public override GridColumn Clone()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="51" sc="9" el="58" ec="10">UI\WebControls\DnnGridGroupSplitterColumn.cs</location>
            <body hash="5ae75db2d3fbae1668a0d0fa179701aa"><![CDATA[{
            DnnGridAttachmentColumn dnnGridColumn = new DnnGridAttachmentColumn();

            //you should override CopyBaseProperties if you have some column specific properties
            dnnGridColumn.CopyBaseProperties(this);

            return dnnGridColumn;
        }]]></body>
          </codeblock>
        </method>
        <method name="InitializeCell">
          <declaration><![CDATA[public override void InitializeCell(System.Web.UI.WebControls.TableCell cell, int columnIndex, GridItem inItem)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="61" sc="9" el="67" ec="10">UI\WebControls\DnnGridGroupSplitterColumn.cs</location>
            <body hash="f863ec45172b0703e7d602a53818d399"><![CDATA[{
            base.InitializeCell(cell, columnIndex, inItem);
            if (inItem is GridHeaderItem && !String.IsNullOrEmpty(HeaderText))
            {
                cell.Text = Localization.GetString(string.Format("{0}.Header", HeaderText), LocalResourceFile);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="LocalResourceFile">
          <declaration><![CDATA[public string LocalResourceFile]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="41" sc="13" el="43" ec="14">UI\WebControls\DnnGridGroupSplitterColumn.cs</location>
            <body hash="1b44f027cd6168f13ff1065af353e4c4"><![CDATA[{
                return Utilities.GetLocalResourceFile(Owner.OwnerGrid.Parent);
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnGridBinaryImageColumn">
      <declaration><![CDATA[public class DnnGridBinaryImageColumn : GridBinaryImageColumn]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnGridBinaryImageColumn()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="Clone">
          <declaration><![CDATA[public override GridColumn Clone()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="51" sc="9" el="58" ec="10">UI\WebControls\DnnGridBinaryImageColumn.cs</location>
            <body hash="78a38fbd6731ab350ea901416d2067f7"><![CDATA[{
            DnnGridBinaryImageColumn dnnGridColumn = new DnnGridBinaryImageColumn();

            //you should override CopyBaseProperties if you have some column specific properties
            dnnGridColumn.CopyBaseProperties(this);

            return dnnGridColumn;
        }]]></body>
          </codeblock>
        </method>
        <method name="InitializeCell">
          <declaration><![CDATA[public override void InitializeCell(System.Web.UI.WebControls.TableCell cell, int columnIndex, GridItem inItem)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="61" sc="9" el="67" ec="10">UI\WebControls\DnnGridBinaryImageColumn.cs</location>
            <body hash="f863ec45172b0703e7d602a53818d399"><![CDATA[{
            base.InitializeCell(cell, columnIndex, inItem);
            if (inItem is GridHeaderItem && !String.IsNullOrEmpty(HeaderText))
            {
                cell.Text = Localization.GetString(string.Format("{0}.Header", HeaderText), LocalResourceFile);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="LocalResourceFile">
          <declaration><![CDATA[public string LocalResourceFile]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="41" sc="13" el="43" ec="14">UI\WebControls\DnnGridBinaryImageColumn.cs</location>
            <body hash="1b44f027cd6168f13ff1065af353e4c4"><![CDATA[{
                return Utilities.GetLocalResourceFile(Owner.OwnerGrid.Parent);
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnGridBoundColumn">
      <declaration><![CDATA[public class DnnGridBoundColumn : GridBoundColumn]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnGridBoundColumn()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="Clone">
          <declaration><![CDATA[public override GridColumn Clone()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="51" sc="9" el="58" ec="10">UI\WebControls\DnnGridBoundColumn.cs</location>
            <body hash="86ce54c228b1f291ce3273dc4ed972b3"><![CDATA[{
            DnnGridBoundColumn dnnGridColumn = new DnnGridBoundColumn();

            //you should override CopyBaseProperties if you have some column specific properties
            dnnGridColumn.CopyBaseProperties(this);

            return dnnGridColumn;
        }]]></body>
          </codeblock>
        </method>
        <method name="InitializeCell">
          <declaration><![CDATA[public override void InitializeCell(System.Web.UI.WebControls.TableCell cell, int columnIndex, GridItem inItem)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="61" sc="9" el="77" ec="10">UI\WebControls\DnnGridBoundColumn.cs</location>
            <body hash="d24cb8bab2cf882d7fb7f15cc4b48000"><![CDATA[{
            base.InitializeCell(cell, columnIndex, inItem);
            if (inItem is GridHeaderItem && !String.IsNullOrEmpty(HeaderText))
            {
                GridHeaderItem headerItem = inItem as GridHeaderItem;
                string columnName = DataField;
                if (!Owner.AllowSorting)
                {
                    cell.Text = Localization.GetString(string.Format("{0}.Header", HeaderText), LocalResourceFile);
                }
                else
                {
                    LinkButton button = (LinkButton) headerItem[columnName].Controls[0];
                    button.Text = Localization.GetString(string.Format("{0}.Header", HeaderText), LocalResourceFile);
                }
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="LocalResourceFile">
          <declaration><![CDATA[public string LocalResourceFile]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="41" sc="13" el="43" ec="14">UI\WebControls\DnnGridBoundColumn.cs</location>
            <body hash="1b44f027cd6168f13ff1065af353e4c4"><![CDATA[{
                return Utilities.GetLocalResourceFile(Owner.OwnerGrid.Parent);
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnGridButtonColumn">
      <declaration><![CDATA[public class DnnGridButtonColumn : GridButtonColumn]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnGridButtonColumn()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="Clone">
          <declaration><![CDATA[public override GridColumn Clone()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="51" sc="9" el="58" ec="10">UI\WebControls\DnnGridButtonColumn.cs</location>
            <body hash="2359b5062fe97752c6ab100e571121d0"><![CDATA[{
            DnnGridButtonColumn dnnGridColumn = new DnnGridButtonColumn();

            //you should override CopyBaseProperties if you have some column specific properties
            dnnGridColumn.CopyBaseProperties(this);

            return dnnGridColumn;
        }]]></body>
          </codeblock>
        </method>
        <method name="InitializeCell">
          <declaration><![CDATA[public override void InitializeCell(System.Web.UI.WebControls.TableCell cell, int columnIndex, GridItem inItem)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="61" sc="9" el="67" ec="10">UI\WebControls\DnnGridButtonColumn.cs</location>
            <body hash="f863ec45172b0703e7d602a53818d399"><![CDATA[{
            base.InitializeCell(cell, columnIndex, inItem);
            if (inItem is GridHeaderItem && !String.IsNullOrEmpty(HeaderText))
            {
                cell.Text = Localization.GetString(string.Format("{0}.Header", HeaderText), LocalResourceFile);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="IconKey">
          <declaration><![CDATA[public string IconKey]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 The Icon Key to obtain ImageURL
 </summary>
 <value>A String</value>
 -----------------------------------------------------------------------------</documentation>
        </property>
        <property name="IconSize">
          <declaration><![CDATA[public string IconSize]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 The Icon Siz to obtain ImageURL
 </summary>
 <value>A String</value>
 -----------------------------------------------------------------------------</documentation>
        </property>
        <property name="IconStyle">
          <declaration><![CDATA[public string IconStyle]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 The Icon Style to obtain ImageURL
 </summary>
 <value>A String</value>
 -----------------------------------------------------------------------------</documentation>
        </property>
        <property name="ImageUrl">
          <declaration><![CDATA[public override string ImageUrl]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="96" sc="13" el="101" ec="14">UI\WebControls\DnnGridButtonColumn.cs</location>
            <body hash="a785c418c1c30050159f7cb9c09f7c40"><![CDATA[{
                if (string.IsNullOrEmpty(base.ImageUrl))
                    base.ImageUrl = Entities.Icons.IconController.IconURL(IconKey, IconSize, IconStyle);

                return base.ImageUrl;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="103" sc="13" el="105" ec="14">UI\WebControls\DnnGridButtonColumn.cs</location>
            <body hash="260e055e3b90aebef0ed80334d01e690"><![CDATA[{
                base.ImageUrl = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="LocalResourceFile">
          <declaration><![CDATA[public string LocalResourceFile]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="41" sc="13" el="43" ec="14">UI\WebControls\DnnGridButtonColumn.cs</location>
            <body hash="1b44f027cd6168f13ff1065af353e4c4"><![CDATA[{
                return Utilities.GetLocalResourceFile(Owner.OwnerGrid.Parent);
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnGridCalculatedColumn">
      <declaration><![CDATA[public class DnnGridCalculatedColumn : GridCalculatedColumn]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnGridCalculatedColumn()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="Clone">
          <declaration><![CDATA[public override GridColumn Clone()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="51" sc="9" el="58" ec="10">UI\WebControls\DnnGridCalculatedColumn.cs</location>
            <body hash="5d652a22eec77d73ece0b4d907a80fc9"><![CDATA[{
            DnnGridCalculatedColumn dnnGridColumn = new DnnGridCalculatedColumn();

            //you should override CopyBaseProperties if you have some column specific properties
            dnnGridColumn.CopyBaseProperties(this);

            return dnnGridColumn;
        }]]></body>
          </codeblock>
        </method>
        <method name="InitializeCell">
          <declaration><![CDATA[public override void InitializeCell(System.Web.UI.WebControls.TableCell cell, int columnIndex, GridItem inItem)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="61" sc="9" el="67" ec="10">UI\WebControls\DnnGridCalculatedColumn.cs</location>
            <body hash="f863ec45172b0703e7d602a53818d399"><![CDATA[{
            base.InitializeCell(cell, columnIndex, inItem);
            if (inItem is GridHeaderItem && !String.IsNullOrEmpty(HeaderText))
            {
                cell.Text = Localization.GetString(string.Format("{0}.Header", HeaderText), LocalResourceFile);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="LocalResourceFile">
          <declaration><![CDATA[public string LocalResourceFile]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="41" sc="13" el="43" ec="14">UI\WebControls\DnnGridCalculatedColumn.cs</location>
            <body hash="1b44f027cd6168f13ff1065af353e4c4"><![CDATA[{
                return Utilities.GetLocalResourceFile(Owner.OwnerGrid.Parent);
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnGridCheckBoxColumn">
      <declaration><![CDATA[public class DnnGridCheckBoxColumn : GridCheckBoxColumn]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnGridCheckBoxColumn()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="Clone">
          <declaration><![CDATA[public override GridColumn Clone()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="51" sc="9" el="58" ec="10">UI\WebControls\DnnGridCheckBoxColumn.cs</location>
            <body hash="312dc5a2d145e11154d97d698edc7d2d"><![CDATA[{
            DnnGridCheckBoxColumn dnnGridColumn = new DnnGridCheckBoxColumn();

            //you should override CopyBaseProperties if you have some column specific properties
            dnnGridColumn.CopyBaseProperties(this);

            return dnnGridColumn;
        }]]></body>
          </codeblock>
        </method>
        <method name="InitializeCell">
          <declaration><![CDATA[public override void InitializeCell(System.Web.UI.WebControls.TableCell cell, int columnIndex, GridItem inItem)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="61" sc="9" el="67" ec="10">UI\WebControls\DnnGridCheckBoxColumn.cs</location>
            <body hash="f863ec45172b0703e7d602a53818d399"><![CDATA[{
            base.InitializeCell(cell, columnIndex, inItem);
            if (inItem is GridHeaderItem && !String.IsNullOrEmpty(HeaderText))
            {
                cell.Text = Localization.GetString(string.Format("{0}.Header", HeaderText), LocalResourceFile);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="LocalResourceFile">
          <declaration><![CDATA[public string LocalResourceFile]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="41" sc="13" el="43" ec="14">UI\WebControls\DnnGridCheckBoxColumn.cs</location>
            <body hash="1b44f027cd6168f13ff1065af353e4c4"><![CDATA[{
                return Utilities.GetLocalResourceFile(Owner.OwnerGrid.Parent);
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnGridClientSelectColumn">
      <declaration><![CDATA[public class DnnGridClientSelectColumn : GridClientSelectColumn]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnGridClientSelectColumn()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="Clone">
          <declaration><![CDATA[public override GridColumn Clone()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="51" sc="9" el="58" ec="10">UI\WebControls\DnnGridClientSelectColumn.cs</location>
            <body hash="e734c613cdf7148c5935fd3dc99bc460"><![CDATA[{
            var dnnGridColumn = new DnnGridClientSelectColumn();

            //you should override CopyBaseProperties if you have some column specific properties
            dnnGridColumn.CopyBaseProperties(this);

            return dnnGridColumn;
        }]]></body>
          </codeblock>
        </method>
        <method name="InitializeCell">
          <declaration><![CDATA[public override void InitializeCell(System.Web.UI.WebControls.TableCell cell, int columnIndex, GridItem inItem)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="61" sc="9" el="70" ec="10">UI\WebControls\DnnGridClientSelectColumn.cs</location>
            <body hash="1cd6d6342a132042c9a4a52861688622"><![CDATA[{
            base.InitializeCell(cell, columnIndex, inItem);
            if (inItem is GridHeaderItem && !String.IsNullOrEmpty(HeaderText))
            {
                if (! inItem.OwnerTableView.OwnerGrid.AllowMultiRowSelection)
                {
                    cell.Text = Localization.GetString(string.Format("{0}.Header", HeaderText), LocalResourceFile);
                }
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="LocalResourceFile">
          <declaration><![CDATA[public string LocalResourceFile]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="41" sc="13" el="43" ec="14">UI\WebControls\DnnGridClientSelectColumn.cs</location>
            <body hash="1b44f027cd6168f13ff1065af353e4c4"><![CDATA[{
                return Utilities.GetLocalResourceFile(Owner.OwnerGrid.Parent);
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnGridColumn">
      <declaration><![CDATA[public class DnnGridColumn : GridColumn]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnGridColumn()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="Clone">
          <declaration><![CDATA[public override GridColumn Clone()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="51" sc="9" el="56" ec="10">UI\WebControls\DnnGridColumn.cs</location>
            <body hash="d65ba29c90a0fa9ab0758394fc2733fc"><![CDATA[{
            var dnnGridColumn = new DnnGridColumn();
            dnnGridColumn.CopyBaseProperties(this);
            dnnGridColumn.setHeaderText = HeaderText;
            return dnnGridColumn;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_HeaderText">
          <declaration><![CDATA[private string _HeaderText;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="HeaderText">
          <declaration><![CDATA[public override string HeaderText]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="63" sc="13" el="67" ec="14">UI\WebControls\DnnGridColumn.cs</location>
            <body hash="44e4ad9dfc011cdc1851e06867ece267"><![CDATA[{
                if (String.IsNullOrEmpty(base.HeaderText))
                    base.HeaderText = Localization.GetString(string.Format("{0}.Header", _HeaderText), DotNetNuke.Web.UI.Utilities.GetLocalResourceFile(Owner.OwnerGrid.Parent));
                return base.HeaderText;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="69" sc="13" el="72" ec="14">UI\WebControls\DnnGridColumn.cs</location>
            <body hash="22d8955f68ce1c09eb9c08993ee139d9"><![CDATA[{
                _HeaderText = value;
                base.HeaderText = "";
            }]]></body>
          </codeblock>
        </property>
        <property name="LocalResourceFile">
          <declaration><![CDATA[public string LocalResourceFile]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="41" sc="13" el="43" ec="14">UI\WebControls\DnnGridColumn.cs</location>
            <body hash="1b44f027cd6168f13ff1065af353e4c4"><![CDATA[{
                return Utilities.GetLocalResourceFile(Owner.OwnerGrid.Parent);
            }]]></body>
          </codeblock>
        </property>
        <property name="setHeaderText">
          <declaration><![CDATA[public string setHeaderText]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="78" sc="13" el="80" ec="14">UI\WebControls\DnnGridColumn.cs</location>
            <body hash="8c1370eb55359c8cc2503faa9ebf47d4"><![CDATA[{
                base.HeaderText = value;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnGridDataItem">
      <declaration><![CDATA[public class DnnGridDataItem : GridDataItem]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnGridDataItem(GridTableView ownerTableView, int itemIndex, int dataSetIndex) : base(ownerTableView, itemIndex, dataSetIndex)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="31" sc="9" el="33" ec="10">UI\WebControls\DnnGridDataItem.cs</location>
            <body hash="70716fdad7aeafff16634d0caa7ffc17"><![CDATA[public DnnGridDataItem(GridTableView ownerTableView, int itemIndex, int dataSetIndex) : base(ownerTableView, itemIndex, dataSetIndex)
        {
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnGridDataItem(GridTableView ownerTableView, int itemIndex, int dataSetIndex, GridItemType itemType) : base(ownerTableView, itemIndex, dataSetIndex, itemType)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="35" sc="9" el="37" ec="10">UI\WebControls\DnnGridDataItem.cs</location>
            <body hash="9848a2a3641290031a1980f4629c741a"><![CDATA[public DnnGridDataItem(GridTableView ownerTableView, int itemIndex, int dataSetIndex, GridItemType itemType) : base(ownerTableView, itemIndex, dataSetIndex, itemType)
        {
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnGridDateTimeColumn">
      <declaration><![CDATA[public class DnnGridDateTimeColumn : GridDateTimeColumn]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnGridDateTimeColumn()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="Clone">
          <declaration><![CDATA[public override GridColumn Clone()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="51" sc="9" el="58" ec="10">UI\WebControls\DnnGridDateTimeColumn.cs</location>
            <body hash="7970515f5489cbd68004d0fe4b9cea2e"><![CDATA[{
            DnnGridDateTimeColumn dnnGridColumn = new DnnGridDateTimeColumn();

            //you should override CopyBaseProperties if you have some column specific properties
            dnnGridColumn.CopyBaseProperties(this);

            return dnnGridColumn;
        }]]></body>
          </codeblock>
        </method>
        <method name="InitializeCell">
          <declaration><![CDATA[public override void InitializeCell(System.Web.UI.WebControls.TableCell cell, int columnIndex, GridItem inItem)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="61" sc="9" el="67" ec="10">UI\WebControls\DnnGridDateTimeColumn.cs</location>
            <body hash="f863ec45172b0703e7d602a53818d399"><![CDATA[{
            base.InitializeCell(cell, columnIndex, inItem);
            if (inItem is GridHeaderItem && !String.IsNullOrEmpty(HeaderText))
            {
                cell.Text = Localization.GetString(string.Format("{0}.Header", HeaderText), LocalResourceFile);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="LocalResourceFile">
          <declaration><![CDATA[public string LocalResourceFile]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="41" sc="13" el="43" ec="14">UI\WebControls\DnnGridDateTimeColumn.cs</location>
            <body hash="1b44f027cd6168f13ff1065af353e4c4"><![CDATA[{
                return Utilities.GetLocalResourceFile(Owner.OwnerGrid.Parent);
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnGridDropDownColumn">
      <declaration><![CDATA[public class DnnGridDropDownColumn : GridDropDownColumn]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnGridDropDownColumn()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="Clone">
          <declaration><![CDATA[public override GridColumn Clone()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="51" sc="9" el="58" ec="10">UI\WebControls\DnnGridDropDownColumn.cs</location>
            <body hash="21901fcc41c6f197b7f03e0295b5cdfb"><![CDATA[{
            DnnGridDropDownColumn dnnGridColumn = new DnnGridDropDownColumn();

            //you should override CopyBaseProperties if you have some column specific properties
            dnnGridColumn.CopyBaseProperties(this);

            return dnnGridColumn;
        }]]></body>
          </codeblock>
        </method>
        <method name="InitializeCell">
          <declaration><![CDATA[public override void InitializeCell(System.Web.UI.WebControls.TableCell cell, int columnIndex, GridItem inItem)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="61" sc="9" el="67" ec="10">UI\WebControls\DnnGridDropDownColumn.cs</location>
            <body hash="f863ec45172b0703e7d602a53818d399"><![CDATA[{
            base.InitializeCell(cell, columnIndex, inItem);
            if (inItem is GridHeaderItem && !String.IsNullOrEmpty(HeaderText))
            {
                cell.Text = Localization.GetString(string.Format("{0}.Header", HeaderText), LocalResourceFile);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="LocalResourceFile">
          <declaration><![CDATA[public string LocalResourceFile]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="41" sc="13" el="43" ec="14">UI\WebControls\DnnGridDropDownColumn.cs</location>
            <body hash="1b44f027cd6168f13ff1065af353e4c4"><![CDATA[{
                return Utilities.GetLocalResourceFile(Owner.OwnerGrid.Parent);
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnGridEditColumn">
      <declaration><![CDATA[public class DnnGridEditColumn : GridEditCommandColumn]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnGridEditColumn()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="Clone">
          <declaration><![CDATA[public override GridColumn Clone()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="46" sc="9" el="53" ec="10">UI\WebControls\DnnGridEditColumn.cs</location>
            <body hash="3b781eda1dd503443d761203af2e27ea"><![CDATA[{
            DnnGridEditColumn dnnGridColumn = new DnnGridEditColumn();

            //you should override CopyBaseProperties if you have some column specific properties
            dnnGridColumn.CopyBaseProperties(this);

            return dnnGridColumn;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="LocalResourceFile">
          <declaration><![CDATA[public string LocalResourceFile]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="36" sc="13" el="38" ec="14">UI\WebControls\DnnGridEditColumn.cs</location>
            <body hash="1b44f027cd6168f13ff1065af353e4c4"><![CDATA[{
                return Utilities.GetLocalResourceFile(Owner.OwnerGrid.Parent);
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnGridEditFormSettings">
      <declaration><![CDATA[public class DnnGridEditFormSettings : GridEditFormSettings]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnGridEditFormSettings(DnnGridTableView owner) : base(owner)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="31" sc="9" el="33" ec="10">UI\WebControls\DnnGridEditFormSettings.cs</location>
            <body hash="cf5b2929be9d3de42b1a65b212ac16f8"><![CDATA[public DnnGridEditFormSettings(DnnGridTableView owner) : base(owner)
        {
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnGridExpandColumn">
      <declaration><![CDATA[public class DnnGridExpandColumn : GridColumn]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnGridExpandColumn()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="Clone">
          <declaration><![CDATA[public override GridColumn Clone()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="51" sc="9" el="58" ec="10">UI\WebControls\DnnGridExpandColumn.cs</location>
            <body hash="79e1088b0f4a287d94cf37cf33773601"><![CDATA[{
            DnnGridExpandColumn dnnGridColumn = new DnnGridExpandColumn();

            //you should override CopyBaseProperties if you have some column specific properties
            dnnGridColumn.CopyBaseProperties(this);

            return dnnGridColumn;
        }]]></body>
          </codeblock>
        </method>
        <method name="InitializeCell">
          <declaration><![CDATA[public override void InitializeCell(System.Web.UI.WebControls.TableCell cell, int columnIndex, GridItem inItem)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="61" sc="9" el="67" ec="10">UI\WebControls\DnnGridExpandColumn.cs</location>
            <body hash="f863ec45172b0703e7d602a53818d399"><![CDATA[{
            base.InitializeCell(cell, columnIndex, inItem);
            if (inItem is GridHeaderItem && !String.IsNullOrEmpty(HeaderText))
            {
                cell.Text = Localization.GetString(string.Format("{0}.Header", HeaderText), LocalResourceFile);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="LocalResourceFile">
          <declaration><![CDATA[public string LocalResourceFile]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="41" sc="13" el="43" ec="14">UI\WebControls\DnnGridExpandColumn.cs</location>
            <body hash="1b44f027cd6168f13ff1065af353e4c4"><![CDATA[{
                return Utilities.GetLocalResourceFile(Owner.OwnerGrid.Parent);
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnGridFooterItem">
      <declaration><![CDATA[public class DnnGridFooterItem : GridFooterItem]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnGridFooterItem(GridTableView ownerTableView, int itemIndex, int dataSetIndex) : base(ownerTableView, itemIndex, dataSetIndex)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="31" sc="9" el="33" ec="10">UI\WebControls\DnnGridFooterItem.cs</location>
            <body hash="ba81da0ac1d2020495ac1322f2801d95"><![CDATA[public DnnGridFooterItem(GridTableView ownerTableView, int itemIndex, int dataSetIndex) : base(ownerTableView, itemIndex, dataSetIndex)
        {
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnGridGroupSplitterColumn">
      <declaration><![CDATA[public class DnnGridGroupSplitterColumn : GridGroupSplitterColumn]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnGridGroupSplitterColumn()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="Clone">
          <declaration><![CDATA[public override GridColumn Clone()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="51" sc="9" el="58" ec="10">UI\WebControls\DnnGridAttachmentColumn.cs</location>
            <body hash="37385cb95265674bbecb8d36af4796ab"><![CDATA[{
            DnnGridGroupSplitterColumn dnnGridColumn = new DnnGridGroupSplitterColumn();

            //you should override CopyBaseProperties if you have some column specific properties
            dnnGridColumn.CopyBaseProperties(this);

            return dnnGridColumn;
        }]]></body>
          </codeblock>
        </method>
        <method name="InitializeCell">
          <declaration><![CDATA[public override void InitializeCell(System.Web.UI.WebControls.TableCell cell, int columnIndex, GridItem inItem)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="61" sc="9" el="67" ec="10">UI\WebControls\DnnGridAttachmentColumn.cs</location>
            <body hash="f863ec45172b0703e7d602a53818d399"><![CDATA[{
            base.InitializeCell(cell, columnIndex, inItem);
            if (inItem is GridHeaderItem && !String.IsNullOrEmpty(HeaderText))
            {
                cell.Text = Localization.GetString(string.Format("{0}.Header", HeaderText), LocalResourceFile);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="LocalResourceFile">
          <declaration><![CDATA[public string LocalResourceFile]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="41" sc="13" el="43" ec="14">UI\WebControls\DnnGridAttachmentColumn.cs</location>
            <body hash="1b44f027cd6168f13ff1065af353e4c4"><![CDATA[{
                return Utilities.GetLocalResourceFile(Owner.OwnerGrid.Parent);
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnGridHeaderItem">
      <declaration><![CDATA[public class DnnGridHeaderItem : GridHeaderItem]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnGridHeaderItem(GridTableView ownerTableView, int itemIndex, int dataSetIndex) : base(ownerTableView, itemIndex, dataSetIndex)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="31" sc="9" el="33" ec="10">UI\WebControls\DnnGridHeaderItem.cs</location>
            <body hash="8bf75fefaf568e8ec9ee4f85eef5dab1"><![CDATA[public DnnGridHeaderItem(GridTableView ownerTableView, int itemIndex, int dataSetIndex) : base(ownerTableView, itemIndex, dataSetIndex)
        {
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnGridHTMLEditorColumn">
      <declaration><![CDATA[public class DnnGridHTMLEditorColumn : GridHTMLEditorColumn]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnGridHTMLEditorColumn()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="Clone">
          <declaration><![CDATA[public override GridColumn Clone()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="51" sc="9" el="58" ec="10">UI\WebControls\DnnGridHTMLEditorColumn.cs</location>
            <body hash="8058e90318cff7faf90ac0c93eca2bf3"><![CDATA[{
            DnnGridHTMLEditorColumn dnnGridColumn = new DnnGridHTMLEditorColumn();

            //you should override CopyBaseProperties if you have some column specific properties
            dnnGridColumn.CopyBaseProperties(this);

            return dnnGridColumn;
        }]]></body>
          </codeblock>
        </method>
        <method name="InitializeCell">
          <declaration><![CDATA[public override void InitializeCell(System.Web.UI.WebControls.TableCell cell, int columnIndex, GridItem inItem)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="61" sc="9" el="67" ec="10">UI\WebControls\DnnGridHTMLEditorColumn.cs</location>
            <body hash="f863ec45172b0703e7d602a53818d399"><![CDATA[{
            base.InitializeCell(cell, columnIndex, inItem);
            if (inItem is GridHeaderItem && !String.IsNullOrEmpty(HeaderText))
            {
                cell.Text = Localization.GetString(string.Format("{0}.Header", HeaderText), LocalResourceFile);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="LocalResourceFile">
          <declaration><![CDATA[public string LocalResourceFile]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="41" sc="13" el="43" ec="14">UI\WebControls\DnnGridHTMLEditorColumn.cs</location>
            <body hash="1b44f027cd6168f13ff1065af353e4c4"><![CDATA[{
                return Utilities.GetLocalResourceFile(Owner.OwnerGrid.Parent);
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnGridHyperLinkColumn">
      <declaration><![CDATA[public class DnnGridHyperLinkColumn : GridHyperLinkColumn]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnGridHyperLinkColumn()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="Clone">
          <declaration><![CDATA[public override GridColumn Clone()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="51" sc="9" el="58" ec="10">UI\WebControls\DnnGridHyperlinkColumn.cs</location>
            <body hash="f8602be92e4e5ce5b53cd19336e44f73"><![CDATA[{
            DnnGridHyperLinkColumn dnnGridColumn = new DnnGridHyperLinkColumn();

            //you should override CopyBaseProperties if you have some column specific properties
            dnnGridColumn.CopyBaseProperties(this);

            return dnnGridColumn;
        }]]></body>
          </codeblock>
        </method>
        <method name="InitializeCell">
          <declaration><![CDATA[public override void InitializeCell(System.Web.UI.WebControls.TableCell cell, int columnIndex, GridItem inItem)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="61" sc="9" el="67" ec="10">UI\WebControls\DnnGridHyperlinkColumn.cs</location>
            <body hash="f863ec45172b0703e7d602a53818d399"><![CDATA[{
            base.InitializeCell(cell, columnIndex, inItem);
            if (inItem is GridHeaderItem && !String.IsNullOrEmpty(HeaderText))
            {
                cell.Text = Localization.GetString(string.Format("{0}.Header", HeaderText), LocalResourceFile);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="LocalResourceFile">
          <declaration><![CDATA[public string LocalResourceFile]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="41" sc="13" el="43" ec="14">UI\WebControls\DnnGridHyperlinkColumn.cs</location>
            <body hash="1b44f027cd6168f13ff1065af353e4c4"><![CDATA[{
                return Utilities.GetLocalResourceFile(Owner.OwnerGrid.Parent);
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnGridImageColumn">
      <declaration><![CDATA[public class DnnGridImageColumn : GridImageColumn]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnGridImageColumn()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="Clone">
          <declaration><![CDATA[public override GridColumn Clone()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="51" sc="9" el="58" ec="10">UI\WebControls\DnnGridImageColumn.cs</location>
            <body hash="3612fb8656cc5526f33078cdb8797a26"><![CDATA[{
            DnnGridImageColumn dnnGridColumn = new DnnGridImageColumn();

            //you should override CopyBaseProperties if you have some column specific properties
            dnnGridColumn.CopyBaseProperties(this);

            return dnnGridColumn;
        }]]></body>
          </codeblock>
        </method>
        <method name="InitializeCell">
          <declaration><![CDATA[public override void InitializeCell(System.Web.UI.WebControls.TableCell cell, int columnIndex, GridItem inItem)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="61" sc="9" el="67" ec="10">UI\WebControls\DnnGridImageColumn.cs</location>
            <body hash="f863ec45172b0703e7d602a53818d399"><![CDATA[{
            base.InitializeCell(cell, columnIndex, inItem);
            if (inItem is GridHeaderItem && !String.IsNullOrEmpty(HeaderText))
            {
                cell.Text = Localization.GetString(string.Format("{0}.Header", HeaderText), LocalResourceFile);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="LocalResourceFile">
          <declaration><![CDATA[public string LocalResourceFile]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="41" sc="13" el="43" ec="14">UI\WebControls\DnnGridImageColumn.cs</location>
            <body hash="1b44f027cd6168f13ff1065af353e4c4"><![CDATA[{
                return Utilities.GetLocalResourceFile(Owner.OwnerGrid.Parent);
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnGridImageCommandColumn">
      <declaration><![CDATA[public class DnnGridImageCommandColumn : DnnGridTemplateColumn]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private ImageCommandColumnEditMode _editMode = ImageCommandColumnEditMode.Command;]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="32" sc="9" el="35" ec="49">UI\WebControls\DnnGridImageCommandColumn.cs</location>
            <body hash="1a09776e4b8d6ab261848705387a8682"><![CDATA[private ImageCommandColumnEditMode _editMode = ImageCommandColumnEditMode.Command;
        private bool _showImage = true;

        private string _imageURL = string.Empty;]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="CreateTemplate">
          <declaration><![CDATA[private DnnGridImageCommandColumnTemplate CreateTemplate(GridItemType type)]]></declaration>
          <documentation>
            <summary>
 Creates a ImageCommandColumnTemplate
 </summary>
 <returns>A ImageCommandColumnTemplate</returns></documentation>
          <codeblock>
            <location sl="160" sc="9" el="186" ec="10">UI\WebControls\DnnGridImageCommandColumn.cs</location>
            <body hash="8239d4c985be74c945dae0e62e3eb3d3"><![CDATA[{
            bool isDesignMode = HttpContext.Current == null;
            var template = new DnnGridImageCommandColumnTemplate(type);
            if (type != GridItemType.Header)
            {
                template.ImageURL = ImageURL;
                if (!isDesignMode)
                {
                    template.CommandName = CommandName;
                    template.VisibleField = VisibleField;
                    template.KeyField = KeyField;
                }
            }
            template.EditMode = EditMode;
            template.NavigateURL = NavigateURL;
            template.NavigateURLFormatString = NavigateURLFormatString;
            template.OnClickJs = OnClickJs;
            template.ShowImage = ShowImage;
            template.Visible = Visible;

            template.Text = type == GridItemType.Header ? HeaderText : Text;

            //Set Design Mode to True
            template.DesignMode = isDesignMode;

            return template;
        }]]></body>
          </codeblock>
        </method>
        <method name="Initialize">
          <declaration><![CDATA[public override void Initialize()]]></declaration>
          <documentation>
            <summary>
 Initialises the Column
 </summary>
          </documentation>
          <codeblock>
            <location sl="192" sc="9" el="205" ec="10">UI\WebControls\DnnGridImageCommandColumn.cs</location>
            <body hash="198258bfe42f14830cdb5bb39780bc54"><![CDATA[{
            ItemTemplate = CreateTemplate(GridItemType.Item);
            EditItemTemplate = CreateTemplate(GridItemType.EditItem);
            HeaderTemplate = CreateTemplate(GridItemType.Header);

            if (HttpContext.Current == null)
            {
                HeaderStyle.Font.Names = new[] { "Tahoma, Verdana, Arial" };
                HeaderStyle.Font.Size = new FontUnit("10pt");
                HeaderStyle.Font.Bold = true;
            }
            ItemStyle.HorizontalAlign = HorizontalAlign.Center;
            HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_editMode">
          <declaration><![CDATA[private ImageCommandColumnEditMode _editMode = ImageCommandColumnEditMode.Command;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_imageURL">
          <declaration><![CDATA[private string _imageURL = string.Empty;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_showImage">
          <declaration><![CDATA[private bool _showImage = true;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="CommandName">
          <declaration><![CDATA[public string CommandName]]></declaration>
          <documentation>
            <summary>
 Gets or sets the CommandName for the Column
 </summary>
 <value>A String</value></documentation>
        </property>
        <property name="EditMode">
          <declaration><![CDATA[public ImageCommandColumnEditMode EditMode]]></declaration>
          <documentation>
            <summary>
 EditMode for the Column
 </summary>
 <value>A String</value></documentation>
        </property>
        <property name="IconKey">
          <declaration><![CDATA[public string IconKey]]></declaration>
          <documentation>
            <summary>
 The Icon Key to obtain ImageURL
 </summary>
 <value>A String</value></documentation>
        </property>
        <property name="IconSize">
          <declaration><![CDATA[public string IconSize]]></declaration>
          <documentation>
            <summary>
 The Icon Siz to obtain ImageURL
 </summary>
 <value>A String</value></documentation>
        </property>
        <property name="IconStyle">
          <declaration><![CDATA[public string IconStyle]]></declaration>
          <documentation>
            <summary>
 The Icon Style to obtain ImageURL
 </summary>
 <value>A String</value></documentation>
        </property>
        <property name="ImageURL">
          <declaration><![CDATA[public string ImageURL]]></declaration>
          <documentation>
            <summary>
 Gets or sets the URL of the Image
 </summary>
 <value>A String</value></documentation>
          <codeblock>
            <location sl="62" sc="13" el="69" ec="14">UI\WebControls\DnnGridImageCommandColumn.cs</location>
            <body hash="68a5b03b55afcb8e240d104081c4a545"><![CDATA[{
                if (!string.IsNullOrEmpty(_imageURL))
                {
                    return _imageURL;
                }

                return IconController.IconURL(IconKey, IconSize, IconStyle);
            }]]></body>
          </codeblock>
        </property>
        <property name="KeyField">
          <declaration><![CDATA[public string KeyField]]></declaration>
          <documentation>
            <summary>
 The Key Field that provides a Unique key to the data Item
 </summary>
 <value>A String</value></documentation>
        </property>
        <property name="NavigateURL">
          <declaration><![CDATA[public string NavigateURL]]></declaration>
          <documentation>
            <summary>
 Gets or sets the URL of the Link (unless DataBinding through KeyField)
 </summary>
 <value>A String</value>
 <history>
 	[cnurse]	02/17/2006	Created
 </history></documentation>
        </property>
        <property name="NavigateURLFormatString">
          <declaration><![CDATA[public string NavigateURLFormatString]]></declaration>
          <documentation>
            <summary>
 Gets or sets the URL Formatting string
 </summary>
 <value>A String</value>
 <history>
 	[cnurse]	01/06/2006	Created
 </history></documentation>
        </property>
        <property name="OnClickJs">
          <declaration><![CDATA[public string OnClickJs]]></declaration>
          <documentation>
            <summary>
 Javascript text to attach to the OnClick Event
 </summary>
 <value>A String</value></documentation>
        </property>
        <property name="ShowImage">
          <declaration><![CDATA[public bool ShowImage]]></declaration>
          <documentation>
            <summary>
 Gets or sets whether an Image is displayed
 </summary>
 <remarks>Defaults to True</remarks>
 <value>A Boolean</value></documentation>
        </property>
        <property name="Text">
          <declaration><![CDATA[public string Text]]></declaration>
          <documentation>
            <summary>
 Gets or sets the Text (for Header/Footer Templates)
 </summary>
 <value>A String</value></documentation>
        </property>
        <property name="VisibleField">
          <declaration><![CDATA[public string VisibleField]]></declaration>
          <documentation>
            <summary>
 An flag that indicates whether the buttons are visible.
 </summary>
 <value>A Boolean</value></documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnGridImageCommandColumnTemplate">
      <declaration><![CDATA[public class DnnGridImageCommandColumnTemplate : System.Web.UI.IBindableTemplate, System.Web.UI.ITemplate]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnGridImageCommandColumnTemplate() : this(GridItemType.Item)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="43" sc="9" el="46" ec="10">UI\WebControls\DnnGridImageCommandColumnTemplate.cs</location>
            <body hash="f28aec6db52634a8caa632b698f16b46"><![CDATA[public DnnGridImageCommandColumnTemplate()
            : this(GridItemType.Item)
        {
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[private ImageCommandColumnEditMode _editMode = ImageCommandColumnEditMode.Command;]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="38" sc="9" el="51" ec="10">UI\WebControls\DnnGridImageCommandColumnTemplate.cs</location>
            <body hash="c1ff657d48f23ca81769d7dbb78e1b28"><![CDATA[private ImageCommandColumnEditMode _editMode = ImageCommandColumnEditMode.Command;
        private GridItemType _itemType = GridItemType.Item;
        private bool _showImage = true;
        private bool _visible = true;

        public DnnGridImageCommandColumnTemplate()
            : this(GridItemType.Item)
        {
        }

        public DnnGridImageCommandColumnTemplate(GridItemType itemType)
        {
            ItemType = itemType;
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="ExtractValues">
          <declaration><![CDATA[public IOrderedDictionary ExtractValues(System.Web.UI.Control container)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="237" sc="9" el="241" ec="10">UI\WebControls\DnnGridImageCommandColumnTemplate.cs</location>
            <body hash="2e071e9b8afa9374b292699973e74a6a"><![CDATA[{
            //do nothing we don't really support databinding
            //but the telerik grid trys to databind to all template columns regardless
            return new OrderedDictionary();
        }]]></body>
          </codeblock>
        </method>
        <method name="GetIsVisible">
          <declaration><![CDATA[private bool GetIsVisible(GridItem container)]]></declaration>
          <documentation>
            <summary>
 Gets whether theButton is visible
 </summary>
 <param name="container">The parent container (DataGridItem)</param></documentation>
          <codeblock>
            <location sl="250" sc="9" el="257" ec="10">UI\WebControls\DnnGridImageCommandColumnTemplate.cs</location>
            <body hash="f1ae89bc6b86b8a99b4618db627b45c9"><![CDATA[{
            if (!String.IsNullOrEmpty(VisibleField))
            {
                return Convert.ToBoolean(DataBinder.Eval(container.DataItem, VisibleField));
            }

            return Visible;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetValue">
          <declaration><![CDATA[private int GetValue(GridItem container)]]></declaration>
          <documentation>
            <summary>
 Gets the value of the key
 </summary>
 <param name="container">The parent container (DataGridItem)</param></documentation>
          <codeblock>
            <location sl="265" sc="9" el="272" ec="10">UI\WebControls\DnnGridImageCommandColumnTemplate.cs</location>
            <body hash="7e9682327c8c3e5bd4a48d530577e116"><![CDATA[{
            int keyValue = Null.NullInteger;
            if (!String.IsNullOrEmpty(KeyField))
            {
                keyValue = Convert.ToInt32(DataBinder.Eval(container.DataItem, KeyField));
            }
            return keyValue;
        }]]></body>
          </codeblock>
        </method>
        <method name="InstantiateIn">
          <declaration><![CDATA[public void InstantiateIn(System.Web.UI.Control container)]]></declaration>
          <documentation>
            <summary>
 InstantiateIn instantiates the template (implementation of ITemplate)
 </summary>
 <remarks>
 </remarks>
 <param name="container">The parent container (DataGridItem)</param></documentation>
          <codeblock>
            <location sl="178" sc="9" el="234" ec="10">UI\WebControls\DnnGridImageCommandColumnTemplate.cs</location>
            <body hash="9d795f9c2014cf376770816a63f0e961"><![CDATA[{
            switch (ItemType)
            {
                case GridItemType.Item:
                case GridItemType.AlternatingItem:
                case GridItemType.SelectedItem:
                case GridItemType.EditItem:
                    if (EditMode == ImageCommandColumnEditMode.URL)
                    {
                        var hypLink = new HyperLink {ToolTip = Text};
                        if (!String.IsNullOrEmpty(ImageURL) && ShowImage)
                        {
                            var img = new Image {ImageUrl = DesignMode ? ImageURL.Replace("~/", "../../") : ImageURL};
                            hypLink.Controls.Add(img);
                            img.ToolTip = Text;
                        }
                        else
                        {
                            hypLink.Text = Text;
                        }
                        hypLink.DataBinding += ItemDataBinding;
                        container.Controls.Add(hypLink);
                    }
                    else
                    {
                        if (!String.IsNullOrEmpty(ImageURL) && ShowImage)
                        {
                            var colIcon = new ImageButton
                                {ImageUrl = DesignMode ? ImageURL.Replace("~/", "../../") : ImageURL, ToolTip = Text};
                            if (!String.IsNullOrEmpty(OnClickJs))
                            {
                                ClientAPI.AddButtonConfirm(colIcon, OnClickJs);
                            }
                            colIcon.CommandName = CommandName;
                            colIcon.DataBinding += ItemDataBinding;
                            container.Controls.Add(colIcon);
                        }
                        if (!String.IsNullOrEmpty(Text) && !ShowImage)
                        {
                            var colLink = new LinkButton {ToolTip = Text};
                            if (!String.IsNullOrEmpty(OnClickJs))
                            {
                                ClientAPI.AddButtonConfirm(colLink, OnClickJs);
                            }
                            colLink.CommandName = CommandName;
                            colLink.Text = Text;
                            colLink.DataBinding += ItemDataBinding;
                            container.Controls.Add(colLink);
                        }
                    }
                    break;
                case GridItemType.Footer:
                case GridItemType.Header:
                    container.Controls.Add(new LiteralControl(Text));
                    break;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="ItemDataBinding">
          <declaration><![CDATA[private void ItemDataBinding(object sender, System.EventArgs e)]]></declaration>
          <documentation>
            <summary>
 Item_DataBinding runs when an Item of type GridItemType.Item is being data-bound
 </summary>
 <remarks>
 </remarks>
 <param name="sender"> The object that triggers the event</param>
 <param name="e">An EventArgs object</param></documentation>
          <codeblock>
            <location sl="283" sc="9" el="321" ec="10">UI\WebControls\DnnGridImageCommandColumnTemplate.cs</location>
            <body hash="b58cf25766f464d7f0df744faeff5ef3"><![CDATA[{
            GridItem container;
            int keyValue;
            if (EditMode == ImageCommandColumnEditMode.URL)
            {
                var hypLink = (HyperLink) sender;
                container = (GridItem) hypLink.NamingContainer;
                keyValue = GetValue(container);
                if (!String.IsNullOrEmpty(NavigateURLFormatString))
                {
                    hypLink.NavigateUrl = string.Format(NavigateURLFormatString, keyValue);
                }
                else
                {
                    hypLink.NavigateUrl = keyValue.ToString(CultureInfo.InvariantCulture);
                }
            }
            else
            {
                //Bind Image Button
                if (!String.IsNullOrEmpty(ImageURL) && ShowImage)
                {
                    var colIcon = (ImageButton) sender;
                    container = (GridItem) colIcon.NamingContainer;
                    keyValue = GetValue(container);
                    colIcon.CommandArgument = keyValue.ToString(CultureInfo.InvariantCulture);
                    colIcon.Visible = GetIsVisible(container);
                }
                if (!String.IsNullOrEmpty(Text) && !ShowImage)
                {
                    //Bind Link Button
                    var colLink = (LinkButton) sender;
                    container = (GridItem) colLink.NamingContainer;
                    keyValue = GetValue(container);
                    colLink.CommandArgument = keyValue.ToString(CultureInfo.InvariantCulture);
                    colLink.Visible = GetIsVisible(container);
                }
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_editMode">
          <declaration><![CDATA[private ImageCommandColumnEditMode _editMode = ImageCommandColumnEditMode.Command;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_itemType">
          <declaration><![CDATA[private GridItemType _itemType = GridItemType.Item;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_showImage">
          <declaration><![CDATA[private bool _showImage = true;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_visible">
          <declaration><![CDATA[private bool _visible = true;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="CommandName">
          <declaration><![CDATA[public string CommandName]]></declaration>
          <documentation>
            <summary>
 Gets or sets the CommandName for the Column
 </summary>
 <value>A String</value>
 <history>
 	[cnurse]	02/17/2006	Created
 </history></documentation>
        </property>
        <property name="DesignMode">
          <declaration><![CDATA[public bool DesignMode]]></declaration>
          <documentation>
            <summary>
 Gets or sets the Design Mode of the Column
 </summary>
 <value>A Boolean</value>
 <history>
 	[cnurse]	02/24/2006	Created
 </history></documentation>
        </property>
        <property name="EditMode">
          <declaration><![CDATA[public ImageCommandColumnEditMode EditMode]]></declaration>
          <documentation>
            <summary>
 Gets or sets the CommandName for the Column
 </summary>
 <value>A String</value></documentation>
        </property>
        <property name="ImageURL">
          <declaration><![CDATA[public string ImageURL]]></declaration>
          <documentation>
            <summary>
 Gets or sets the URL of the Image
 </summary>
 <value>A String</value></documentation>
        </property>
        <property name="ItemType">
          <declaration><![CDATA[public GridItemType ItemType]]></declaration>
          <documentation>
            <summary>
 The type of Template to Create
 </summary>
 <value>A String</value></documentation>
        </property>
        <property name="KeyField">
          <declaration><![CDATA[public string KeyField]]></declaration>
          <documentation>
            <summary>
 The Key Field that provides a Unique key to the data Item
 </summary>
 <value>A String</value></documentation>
        </property>
        <property name="NavigateURL">
          <declaration><![CDATA[public string NavigateURL]]></declaration>
          <documentation>
            <summary>
 Gets or sets the URL of the Link (unless DataBinding through KeyField)
 </summary>
 <value>A String</value></documentation>
        </property>
        <property name="NavigateURLFormatString">
          <declaration><![CDATA[public string NavigateURLFormatString]]></declaration>
          <documentation>
            <summary>
 Gets or sets the URL Formatting string
 </summary>
 <value>A String</value></documentation>
        </property>
        <property name="OnClickJs">
          <declaration><![CDATA[public string OnClickJs]]></declaration>
          <documentation>
            <summary>
 Javascript text to attach to the OnClick Event
 </summary>
 <value>A String</value></documentation>
        </property>
        <property name="ShowImage">
          <declaration><![CDATA[public bool ShowImage]]></declaration>
          <documentation>
            <summary>
 Gets or sets whether an Image is displayed
 </summary>
 <remarks>Defaults to True</remarks>
 <value>A Boolean</value></documentation>
        </property>
        <property name="Text">
          <declaration><![CDATA[public string Text]]></declaration>
          <documentation>
            <summary>
 Gets or sets the Text (for Header/Footer Templates)
 </summary>
 <value>A String</value></documentation>
        </property>
        <property name="Visible">
          <declaration><![CDATA[public bool Visible]]></declaration>
          <documentation>
            <summary>
 An flag that indicates whether the buttons are visible (this is overridden if
 the VisibleField is set)
 changed
 </summary>
 <value>A Boolean</value></documentation>
        </property>
        <property name="VisibleField">
          <declaration><![CDATA[public string VisibleField]]></declaration>
          <documentation>
            <summary>
 An flag that indicates whether the buttons are visible.
 </summary>
 <value>A Boolean</value></documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnGridItem">
      <declaration><![CDATA[public class DnnGridItem : GridItem]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnGridItem(GridTableView ownerTableView, int itemIndex, int dataSetIndex, GridItemType itemType) : base(ownerTableView, itemIndex, dataSetIndex, itemType)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="31" sc="9" el="33" ec="10">UI\WebControls\DnnGridItem.cs</location>
            <body hash="25d932bb1eae368a260900b498cfc8ff"><![CDATA[public DnnGridItem(GridTableView ownerTableView, int itemIndex, int dataSetIndex, GridItemType itemType) : base(ownerTableView, itemIndex, dataSetIndex, itemType)
        {
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnGridItemSelectedEventArgs">
      <declaration><![CDATA[public class DnnGridItemSelectedEventArgs : System.EventArgs]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnGridItemSelectedEventArgs(GridItemCollection selectedItems)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="37" sc="9" el="40" ec="10">UI\WebControls\DnnGridItemSelectedEventArgs.cs</location>
            <body hash="5a07eb82dec2f0bb781ddeaeb7d5e37e"><![CDATA[public DnnGridItemSelectedEventArgs(GridItemCollection selectedItems)
        {
            _SelectedItems = selectedItems;
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
        <field name="_SelectedItems">
          <declaration><![CDATA[private readonly GridItemCollection _SelectedItems;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="SelectedItems">
          <declaration><![CDATA[public GridItemCollection SelectedItems]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="49" sc="13" el="51" ec="14">UI\WebControls\DnnGridItemSelectedEventArgs.cs</location>
            <body hash="091222d382dc9521ef25c8cf9d489739"><![CDATA[{
                return _SelectedItems;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="e);">
      <declaration><![CDATA[public delegate void DnnGridItemSelectedEventHandler(object sender, DnnGridItemSelectedEventArgs e);]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public extern DnnGridItemSelectedEventHandler(object @object, System.IntPtr method);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="BeginInvoke">
          <declaration><![CDATA[public virtual extern System.IAsyncResult BeginInvoke(object sender, DnnGridItemSelectedEventArgs e, System.AsyncCallback callback, object @object);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="EndInvoke">
          <declaration><![CDATA[public virtual extern void EndInvoke(System.IAsyncResult result);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="Invoke">
          <declaration><![CDATA[public virtual extern void Invoke(object sender, DnnGridItemSelectedEventArgs e);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnGridMaskedColumn">
      <declaration><![CDATA[public class DnnGridMaskedColumn : GridMaskedColumn]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnGridMaskedColumn()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="Clone">
          <declaration><![CDATA[public override GridColumn Clone()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="51" sc="9" el="58" ec="10">UI\WebControls\DnnGridMaskedColumn.cs</location>
            <body hash="2723dd25f01d2c881b4376077678038d"><![CDATA[{
            DnnGridMaskedColumn dnnGridColumn = new DnnGridMaskedColumn();

            //you should override CopyBaseProperties if you have some column specific properties
            dnnGridColumn.CopyBaseProperties(this);

            return dnnGridColumn;
        }]]></body>
          </codeblock>
        </method>
        <method name="InitializeCell">
          <declaration><![CDATA[public override void InitializeCell(System.Web.UI.WebControls.TableCell cell, int columnIndex, GridItem inItem)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="61" sc="9" el="67" ec="10">UI\WebControls\DnnGridMaskedColumn.cs</location>
            <body hash="f863ec45172b0703e7d602a53818d399"><![CDATA[{
            base.InitializeCell(cell, columnIndex, inItem);
            if (inItem is GridHeaderItem && !String.IsNullOrEmpty(HeaderText))
            {
                cell.Text = Localization.GetString(string.Format("{0}.Header", HeaderText), LocalResourceFile);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="LocalResourceFile">
          <declaration><![CDATA[public string LocalResourceFile]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="41" sc="13" el="43" ec="14">UI\WebControls\DnnGridMaskedColumn.cs</location>
            <body hash="1b44f027cd6168f13ff1065af353e4c4"><![CDATA[{
                return Utilities.GetLocalResourceFile(Owner.OwnerGrid.Parent);
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnGridNumericColumn">
      <declaration><![CDATA[public class DnnGridNumericColumn : GridNumericColumn]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnGridNumericColumn()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="Clone">
          <declaration><![CDATA[public override GridColumn Clone()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="51" sc="9" el="58" ec="10">UI\WebControls\DnnGridNumericColumn.cs</location>
            <body hash="135d665d6c93bc835e13dc96d88789f9"><![CDATA[{
            DnnGridNumericColumn dnnGridColumn = new DnnGridNumericColumn();

            //you should override CopyBaseProperties if you have some column specific properties
            dnnGridColumn.CopyBaseProperties(this);

            return dnnGridColumn;
        }]]></body>
          </codeblock>
        </method>
        <method name="InitializeCell">
          <declaration><![CDATA[public override void InitializeCell(System.Web.UI.WebControls.TableCell cell, int columnIndex, GridItem inItem)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="61" sc="9" el="67" ec="10">UI\WebControls\DnnGridNumericColumn.cs</location>
            <body hash="f863ec45172b0703e7d602a53818d399"><![CDATA[{
            base.InitializeCell(cell, columnIndex, inItem);
            if (inItem is GridHeaderItem && !String.IsNullOrEmpty(HeaderText))
            {
                cell.Text = Localization.GetString(string.Format("{0}.Header", HeaderText), LocalResourceFile);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="LocalResourceFile">
          <declaration><![CDATA[public string LocalResourceFile]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="41" sc="13" el="43" ec="14">UI\WebControls\DnnGridNumericColumn.cs</location>
            <body hash="1b44f027cd6168f13ff1065af353e4c4"><![CDATA[{
                return Utilities.GetLocalResourceFile(Owner.OwnerGrid.Parent);
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnGridRatingColumn">
      <declaration><![CDATA[public class DnnGridRatingColumn : GridRatingColumn]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnGridRatingColumn()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="Clone">
          <declaration><![CDATA[public override GridColumn Clone()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="51" sc="9" el="58" ec="10">UI\WebControls\DnnGridRatingColumn.cs</location>
            <body hash="450a5d4c6cd05201fe269426723864cd"><![CDATA[{
            DnnGridRatingColumn dnnGridColumn = new DnnGridRatingColumn();

            //you should override CopyBaseProperties if you have some column specific properties
            dnnGridColumn.CopyBaseProperties(this);

            return dnnGridColumn;
        }]]></body>
          </codeblock>
        </method>
        <method name="InitializeCell">
          <declaration><![CDATA[public override void InitializeCell(System.Web.UI.WebControls.TableCell cell, int columnIndex, GridItem inItem)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="61" sc="9" el="67" ec="10">UI\WebControls\DnnGridRatingColumn.cs</location>
            <body hash="f863ec45172b0703e7d602a53818d399"><![CDATA[{
            base.InitializeCell(cell, columnIndex, inItem);
            if (inItem is GridHeaderItem && !String.IsNullOrEmpty(HeaderText))
            {
                cell.Text = Localization.GetString(string.Format("{0}.Header", HeaderText), LocalResourceFile);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="LocalResourceFile">
          <declaration><![CDATA[public string LocalResourceFile]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="41" sc="13" el="43" ec="14">UI\WebControls\DnnGridRatingColumn.cs</location>
            <body hash="1b44f027cd6168f13ff1065af353e4c4"><![CDATA[{
                return Utilities.GetLocalResourceFile(Owner.OwnerGrid.Parent);
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnGridRowIndicatorColumn">
      <declaration><![CDATA[public class DnnGridRowIndicatorColumn : GridRowIndicatorColumn]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnGridRowIndicatorColumn()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="Clone">
          <declaration><![CDATA[public override GridColumn Clone()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="51" sc="9" el="58" ec="10">UI\WebControls\DnnGridRowIndicatorColumn.cs</location>
            <body hash="b5e908cb11232b54438c55033baad466"><![CDATA[{
            DnnGridRowIndicatorColumn dnnGridColumn = new DnnGridRowIndicatorColumn();

            //you should override CopyBaseProperties if you have some column specific properties
            dnnGridColumn.CopyBaseProperties(this);

            return dnnGridColumn;
        }]]></body>
          </codeblock>
        </method>
        <method name="InitializeCell">
          <declaration><![CDATA[public override void InitializeCell(System.Web.UI.WebControls.TableCell cell, int columnIndex, GridItem inItem)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="61" sc="9" el="67" ec="10">UI\WebControls\DnnGridRowIndicatorColumn.cs</location>
            <body hash="f863ec45172b0703e7d602a53818d399"><![CDATA[{
            base.InitializeCell(cell, columnIndex, inItem);
            if (inItem is GridHeaderItem && !String.IsNullOrEmpty(HeaderText))
            {
                cell.Text = Localization.GetString(string.Format("{0}.Header", HeaderText), LocalResourceFile);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="LocalResourceFile">
          <declaration><![CDATA[public string LocalResourceFile]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="41" sc="13" el="43" ec="14">UI\WebControls\DnnGridRowIndicatorColumn.cs</location>
            <body hash="1b44f027cd6168f13ff1065af353e4c4"><![CDATA[{
                return Utilities.GetLocalResourceFile(Owner.OwnerGrid.Parent);
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnGridTableView">
      <declaration><![CDATA[public class DnnGridTableView : GridTableView]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnGridTableView()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnGridTemplateColumn">
      <declaration><![CDATA[public class DnnGridTemplateColumn : GridTemplateColumn]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnGridTemplateColumn()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="Clone">
          <declaration><![CDATA[public override GridColumn Clone()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="51" sc="9" el="58" ec="10">UI\WebControls\DnnGridTemplateColumn.cs</location>
            <body hash="eef17c071e784b28df91510c4f1adba7"><![CDATA[{
            DnnGridTemplateColumn dnnGridColumn = new DnnGridTemplateColumn();

            //you should override CopyBaseProperties if you have some column specific properties
            dnnGridColumn.CopyBaseProperties(this);

            return dnnGridColumn;
        }]]></body>
          </codeblock>
        </method>
        <method name="InitializeCell">
          <declaration><![CDATA[public override void InitializeCell(System.Web.UI.WebControls.TableCell cell, int columnIndex, GridItem inItem)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="61" sc="9" el="67" ec="10">UI\WebControls\DnnGridTemplateColumn.cs</location>
            <body hash="e90fd05612019936c6ca19be4ce4b266"><![CDATA[{
            base.InitializeCell(cell, columnIndex, inItem);
            if (inItem is GridHeaderItem && HeaderTemplate == null && !String.IsNullOrEmpty(HeaderText))
            {
                cell.Text = Localization.GetString(string.Format("{0}.Header", HeaderText), LocalResourceFile);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="LocalResourceFile">
          <declaration><![CDATA[public string LocalResourceFile]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="41" sc="13" el="43" ec="14">UI\WebControls\DnnGridTemplateColumn.cs</location>
            <body hash="1b44f027cd6168f13ff1065af353e4c4"><![CDATA[{
                return Utilities.GetLocalResourceFile(Owner.OwnerGrid.Parent);
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnImage">
      <declaration><![CDATA[public class DnnImage : System.Web.UI.WebControls.Image]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnImage()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="OnPreRender">
          <declaration><![CDATA[protected override void OnPreRender(System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="46" sc="9" el="50" ec="10">UI\WebControls\DnnImage.cs</location>
            <body hash="d88a22b60d27ebea79ff5db8c4017087"><![CDATA[{
            base.OnPreRender(e);
            if (string.IsNullOrEmpty(ImageUrl))
                ImageUrl = Entities.Icons.IconController.IconURL(IconKey, IconSize, IconStyle);            
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="IconKey">
          <declaration><![CDATA[public string IconKey]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="IconSize">
          <declaration><![CDATA[public string IconSize]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="IconStyle">
          <declaration><![CDATA[public string IconStyle]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnImageButton">
      <declaration><![CDATA[public class DnnImageButton : System.Web.UI.WebControls.ImageButton]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnImageButton()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="OnPreRender">
          <declaration><![CDATA[protected override void OnPreRender(System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="46" sc="9" el="50" ec="10">UI\WebControls\DnnImageButton.cs</location>
            <body hash="d88a22b60d27ebea79ff5db8c4017087"><![CDATA[{
            base.OnPreRender(e);
            if (string.IsNullOrEmpty(ImageUrl))
                ImageUrl = Entities.Icons.IconController.IconURL(IconKey, IconSize, IconStyle);            
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="IconKey">
          <declaration><![CDATA[public string IconKey]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="IconSize">
          <declaration><![CDATA[public string IconSize]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="IconStyle">
          <declaration><![CDATA[public string IconStyle]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnImageEditControl">
      <declaration><![CDATA[public class DnnImageEditControl : DnnFileEditControl]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnImageEditControl()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="28" sc="9" el="31" ec="10">UI\WebControls\DnnImageEditControl.cs</location>
            <body hash="7281d0bdaf28bcb08a213066e540cd5a"><![CDATA[public DnnImageEditControl()
        {
            FileFilter = Globals.glbImageFileTypes;
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnInputManager">
      <declaration><![CDATA[public class DnnInputManager : RadInputManager]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnInputManager()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnLabel">
      <declaration><![CDATA[public class DnnLabel : System.Web.UI.WebControls.Label, ILocalizable]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private bool _localize = true;]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="36" sc="9" el="43" ec="10">UI\WebControls\DnnLabel.cs</location>
            <body hash="7bbcf2ec1a4ca28a81255cc4410814a9"><![CDATA[private bool _localize = true;

        #region Constructors

        public DnnLabel()
        {
            CssClass = "dnnFormLabel";
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="LocalizeStrings">
          <declaration><![CDATA[public virtual void LocalizeStrings()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="80" sc="9" el="100" ec="10">UI\WebControls\DnnLabel.cs</location>
            <body hash="fddaada1c8a1167c8797266f59bbd317"><![CDATA[{
            if (Localize)
            {
                if (!string.IsNullOrEmpty(ToolTip))
                {
                    ToolTip = Localization.GetString(ToolTip, LocalResourceFile);
                }

                if (!string.IsNullOrEmpty(Text))
                {
                    var unLocalized = Text;

                    Text = Localization.GetString(unLocalized, LocalResourceFile);

                    if (string.IsNullOrEmpty(ToolTip))
                    {
                        ToolTip = Localization.GetString(unLocalized + ".ToolTip", LocalResourceFile);
                    }
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnPreRender">
          <declaration><![CDATA[protected override void OnPreRender(System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="50" sc="9" el="53" ec="10">UI\WebControls\DnnLabel.cs</location>
            <body hash="28617cbf340629c44366dabf2669a8b0"><![CDATA[{
            base.OnPreRender(e);
            LocalResourceFile = Utilities.GetLocalResourceFile(this);
        }]]></body>
          </codeblock>
        </method>
        <method name="Render">
          <declaration><![CDATA[protected override void Render(System.Web.UI.HtmlTextWriter writer)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="56" sc="9" el="59" ec="10">UI\WebControls\DnnLabel.cs</location>
            <body hash="8f3fb37b7748da233ed1fda25b8594e9"><![CDATA[{
            LocalizeStrings();
            base.Render(writer);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_localize">
          <declaration><![CDATA[private bool _localize = true;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="Localize">
          <declaration><![CDATA[public bool Localize]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="68" sc="13" el="70" ec="14">UI\WebControls\DnnLabel.cs</location>
            <body hash="345f59f8e63a50cdfdef58f0e1f36f82"><![CDATA[{
                return !DesignMode && _localize;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="72" sc="13" el="74" ec="14">UI\WebControls\DnnLabel.cs</location>
            <body hash="813e2e62bb125b8b10afa2a23aaa0b90"><![CDATA[{
                _localize = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="LocalResourceFile">
          <declaration><![CDATA[public string LocalResourceFile]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnLanguageComboBox">
      <declaration><![CDATA[public class DnnLanguageComboBox : System.Web.UI.WebControls.WebControl]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private LanguagesListType _languagesListType = LanguagesListType.Enabled;]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="45" sc="9" el="77" ec="10">UI\WebControls\DnnLanguageComboBox.cs</location>
            <body hash="161ffa3f26bb510df142f5dae7d51c06"><![CDATA[private LanguagesListType _languagesListType = LanguagesListType.Enabled;
        private RadioButtonList _modeRadioButtonList;
        private DnnComboBox _nativeCombo;

        private string _originalValue;

        protected override HtmlTextWriterTag TagKey
        {
            get
            {
                return HtmlTextWriterTag.Div;
            }
        }

        #region "Public Events"

        public event EventHandler ItemChanged;
        public event EventHandler ModeChanged;

        #endregion

        #region "Constructor"

        public DnnLanguageComboBox()
        {
            AutoPostBack = Null.NullBoolean;
            CausesValidation = Null.NullBoolean;
            ShowFlag = true;
        	ShowModeButtons = true;
            HideLanguagesList = new Dictionary<string, Locale>();
            FlagImageUrlFormatString = "~/images/Flags/{0}.gif";
            _viewTypePersonalizationKey = "ViewType" + PortalId;
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="add_ItemChanged">
          <declaration><![CDATA[public void add_ItemChanged(System.EventHandler value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="add_ModeChanged">
          <declaration><![CDATA[public void add_ModeChanged(System.EventHandler value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="BindData">
          <declaration><![CDATA[public void BindData(bool refresh)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="147" sc="9" el="187" ec="10">UI\WebControls\DnnLanguageComboBox.cs</location>
            <body hash="c67ebc5be27f1a95ae84c2ea126a5573"><![CDATA[{
            if (refresh)
            {
                List<CultureInfo> cultures;
                switch (LanguagesListType)
                {
                    case LanguagesListType.Supported:
                        cultures = LocaleController.Instance.GetCultures(LocaleController.Instance.GetLocales(Null.NullInteger));
                        break;
                    case LanguagesListType.Enabled:
                        cultures = LocaleController.Instance.GetCultures(LocaleController.Instance.GetLocales(PortalId));
                        break;
                    default:
                        cultures = new List<CultureInfo>(CultureInfo.GetCultures(CultureTypes.SpecificCultures));
                        break;
                }

                foreach (KeyValuePair<string, Locale> lang in HideLanguagesList)
                {
                    string cultureCode = lang.Value.Code;
                    CultureInfo culture = cultures.Where(c => c.Name == cultureCode).SingleOrDefault();
                    if (culture != null)
                    {
                        cultures.Remove(culture);
                    }
                }

                _nativeCombo.DataSource = cultures.OrderBy(c => c.NativeName);
                _englishCombo.DataSource = cultures.OrderBy(c => c.EnglishName);
            }


            _nativeCombo.DataBind();
            _englishCombo.DataBind();

            if (IncludeNoneSpecified && refresh)
            {
                _englishCombo.Items.Insert(0, new RadComboBoxItem(Localization.GetString("System_Default", Localization.SharedResourceFile), "None"));
                _nativeCombo.Items.Insert(0, new RadComboBoxItem(Localization.GetString("System_Default", Localization.SharedResourceFile), "None"));
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="DataBind">
          <declaration><![CDATA[public override void DataBind()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="304" sc="9" el="306" ec="10">UI\WebControls\DnnLanguageComboBox.cs</location>
            <body hash="2f8cff8520b60f965c8415a3de2cf326"><![CDATA[{
            BindData(!Page.IsPostBack);
        }]]></body>
          </codeblock>
        </method>
        <method name="ItemChangedInternal">
          <declaration><![CDATA[private void ItemChangedInternal(object sender, System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="323" sc="9" el="325" ec="10">UI\WebControls\DnnLanguageComboBox.cs</location>
            <body hash="8b9b21c263cc386435623cf926fbbcf9"><![CDATA[{
            OnItemChanged();
        }]]></body>
          </codeblock>
        </method>
        <method name="ModeChangedInternal">
          <declaration><![CDATA[private void ModeChangedInternal(object sender, System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="313" sc="9" el="320" ec="10">UI\WebControls\DnnLanguageComboBox.cs</location>
            <body hash="a8780ac4c1bbb333c0d3cfe56a4cb28a"><![CDATA[{
            Personalization.SetProfile("LanguageDisplayMode", _viewTypePersonalizationKey, _modeRadioButtonList.SelectedValue);

            //Resort
            BindData(true);

            OnModeChanged(EventArgs.Empty);
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="194" sc="9" el="215" ec="10">UI\WebControls\DnnLanguageComboBox.cs</location>
            <body hash="6ed6cf287b71ceca5bb0f8900cd4b557"><![CDATA[{
            base.OnInit(e);
            _nativeCombo = new DnnComboBox();
            _nativeCombo.DataValueField = "Name";
            _nativeCombo.DataTextField = "NativeName";
            _nativeCombo.SelectedIndexChanged += ItemChangedInternal;
            Controls.Add(_nativeCombo);

            _englishCombo = new DnnComboBox();
            _englishCombo.DataValueField = "Name";
            _englishCombo.DataTextField = "EnglishName";
            _englishCombo.SelectedIndexChanged += ItemChangedInternal;
            Controls.Add(_englishCombo);

            _modeRadioButtonList = new RadioButtonList();
            _modeRadioButtonList.AutoPostBack = true;
            _modeRadioButtonList.RepeatDirection = RepeatDirection.Horizontal;
            _modeRadioButtonList.Items.Add(new ListItem(Localization.GetString("NativeName", Localization.GlobalResourceFile), "NATIVE"));
            _modeRadioButtonList.Items.Add(new ListItem(Localization.GetString("EnglishName", Localization.GlobalResourceFile), "ENGLISH"));
            _modeRadioButtonList.SelectedIndexChanged += ModeChangedInternal;
            Controls.Add(_modeRadioButtonList);
        }]]></body>
          </codeblock>
        </method>
        <method name="OnItemChanged">
          <declaration><![CDATA[protected virtual void OnItemChanged()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="225" sc="9" el="230" ec="10">UI\WebControls\DnnLanguageComboBox.cs</location>
            <body hash="8d9f3ae5c90e39f95a5dadc6bec553e6"><![CDATA[{
            if (ItemChanged != null)
            {
                ItemChanged(this, new EventArgs());
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="218" sc="9" el="222" ec="10">UI\WebControls\DnnLanguageComboBox.cs</location>
            <body hash="711caa3a07a819d6b7f0ef26b35f3177"><![CDATA[{
            base.OnLoad(e);

            _originalValue = SelectedValue;
        }]]></body>
          </codeblock>
        </method>
        <method name="OnModeChanged">
          <declaration><![CDATA[protected void OnModeChanged(System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="233" sc="9" el="238" ec="10">UI\WebControls\DnnLanguageComboBox.cs</location>
            <body hash="b118fe38aaf2b38aeef1484a1334c5d7"><![CDATA[{
            if (ModeChanged != null)
            {
                ModeChanged(this, e);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnPreRender">
          <declaration><![CDATA[protected override void OnPreRender(System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="242" sc="9" el="283" ec="10">UI\WebControls\DnnLanguageComboBox.cs</location>
            <body hash="61d47ce172bc1280fe6eff029016c252"><![CDATA[{
            if (DisplayMode.ToUpperInvariant() == "ENGLISH")
            {
                if (_englishCombo.Items.FindItemByValue(_originalValue) != null)
                {
                    _englishCombo.Items.FindItemByValue(_originalValue).Selected = true;
                }
            }
            else
            {
                if (_nativeCombo.Items.FindItemByValue(_originalValue) != null)
                {
                    _nativeCombo.Items.FindItemByValue(_originalValue).Selected = true;
                }
            }

            _modeRadioButtonList.Items.FindByValue(DisplayMode).Selected = true;

            foreach (RadComboBoxItem item in _englishCombo.Items)
            {
                item.ImageUrl = string.Format(FlagImageUrlFormatString, item.Value);
            }
            foreach (RadComboBoxItem item in _nativeCombo.Items)
            {
                item.ImageUrl = string.Format(FlagImageUrlFormatString, item.Value);
            }

            _englishCombo.AutoPostBack = AutoPostBack;
            _englishCombo.CausesValidation = CausesValidation;
            _englishCombo.Visible = (DisplayMode.ToUpperInvariant() == "ENGLISH");

            _nativeCombo.AutoPostBack = AutoPostBack;
            _nativeCombo.CausesValidation = CausesValidation;
            _nativeCombo.Visible = (DisplayMode.ToUpperInvariant() == "NATIVE");

            _modeRadioButtonList.Visible = ShowModeButtons;

            _englishCombo.Width = Width;
            _nativeCombo.Width = Width;

            base.OnPreRender(e);
        }]]></body>
          </codeblock>
        </method>
        <method name="remove_ItemChanged">
          <declaration><![CDATA[public void remove_ItemChanged(System.EventHandler value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="remove_ModeChanged">
          <declaration><![CDATA[public void remove_ModeChanged(System.EventHandler value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="SetLanguage">
          <declaration><![CDATA[public void SetLanguage(string code)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="290" sc="9" el="301" ec="10">UI\WebControls\DnnLanguageComboBox.cs</location>
            <body hash="e58ddf3f9c3d07b514b03124fc52a039"><![CDATA[{
            if (string.IsNullOrEmpty(code))
            {
                _nativeCombo.SelectedIndex = _nativeCombo.FindItemIndexByValue("None");
                _englishCombo.SelectedIndex = _englishCombo.FindItemIndexByValue("None");
            }
            else
            {
                _nativeCombo.SelectedIndex = _nativeCombo.FindItemIndexByValue(code);
                _englishCombo.SelectedIndex = _englishCombo.FindItemIndexByValue(code);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_englishCombo">
          <declaration><![CDATA[private DnnComboBox _englishCombo;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_languagesListType">
          <declaration><![CDATA[private LanguagesListType _languagesListType = LanguagesListType.Enabled;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_modeRadioButtonList">
          <declaration><![CDATA[private System.Web.UI.WebControls.RadioButtonList _modeRadioButtonList;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_nativeCombo">
          <declaration><![CDATA[private DnnComboBox _nativeCombo;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_originalValue">
          <declaration><![CDATA[private string _originalValue;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_viewTypePersonalizationKey">
          <declaration><![CDATA[private readonly string _viewTypePersonalizationKey;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ItemChanged">
          <declaration><![CDATA[private System.EventHandler ItemChanged;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ModeChanged">
          <declaration><![CDATA[private System.EventHandler ModeChanged;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="AutoPostBack">
          <declaration><![CDATA[public bool AutoPostBack]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   Determines whether the List Auto Posts Back
 </summary>
 -----------------------------------------------------------------------------</documentation>
        </property>
        <property name="CausesValidation">
          <declaration><![CDATA[public bool CausesValidation]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="DisplayMode">
          <declaration><![CDATA[private string DisplayMode]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="86" sc="13" el="93" ec="14">UI\WebControls\DnnLanguageComboBox.cs</location>
            <body hash="0dcce498a88965ba7cc4614db7e35e0e"><![CDATA[{
                string displayMode = Convert.ToString(Personalization.GetProfile("LanguageDisplayMode", _viewTypePersonalizationKey));
                if (string.IsNullOrEmpty(displayMode))
                {
                    displayMode = "NATIVE";
                }
                return displayMode;
            }]]></body>
          </codeblock>
        </property>
        <property name="FlagImageUrlFormatString">
          <declaration><![CDATA[public string FlagImageUrlFormatString]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="HideLanguagesList">
          <declaration><![CDATA[public System.Collections.Generic.Dictionary<string, Locale> HideLanguagesList]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="IncludeNoneSpecified">
          <declaration><![CDATA[public bool IncludeNoneSpecified]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="LanguagesListType">
          <declaration><![CDATA[public LanguagesListType LanguagesListType]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="105" sc="13" el="107" ec="14">UI\WebControls\DnnLanguageComboBox.cs</location>
            <body hash="54073168ca8f2109f53080fb28874926"><![CDATA[{
                return _languagesListType;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="109" sc="13" el="111" ec="14">UI\WebControls\DnnLanguageComboBox.cs</location>
            <body hash="1038b8d955e08676cce7e764cdacf882"><![CDATA[{
                _languagesListType = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="PortalId">
          <declaration><![CDATA[public int PortalId]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="SelectedValue">
          <declaration><![CDATA[public string SelectedValue]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="119" sc="13" el="126" ec="14">UI\WebControls\DnnLanguageComboBox.cs</location>
            <body hash="6455353ee5aa7004e655ab0687b7244e"><![CDATA[{
                string selectedValue = DisplayMode.ToUpperInvariant() == "NATIVE" ? _nativeCombo.SelectedValue : _englishCombo.SelectedValue;
                if (selectedValue == "None")
                {
                    selectedValue = Null.NullString;
                }
                return selectedValue;
            }]]></body>
          </codeblock>
        </property>
        <property name="ShowFlag">
          <declaration><![CDATA[public bool ShowFlag]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ShowModeButtons">
          <declaration><![CDATA[public bool ShowModeButtons]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="TagKey">
          <declaration><![CDATA[protected override System.Web.UI.HtmlTextWriterTag TagKey]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="54" sc="13" el="56" ec="14">UI\WebControls\DnnLanguageComboBox.cs</location>
            <body hash="8210dac1c0e0b0cb6fea1d2e7e0d9026"><![CDATA[{
                return HtmlTextWriterTag.Div;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
        <event name="ItemChanged">
          <declaration><![CDATA[public event System.EventHandler ItemChanged;]]></declaration>
          <documentation>
          </documentation>
        </event>
        <event name="ModeChanged">
          <declaration><![CDATA[public event System.EventHandler ModeChanged;]]></declaration>
          <documentation>
          </documentation>
        </event>
      </events>
    </class>
    <class name="DnnLanguageLabel">
      <declaration><![CDATA[public class DnnLanguageLabel : System.Web.UI.WebControls.CompositeControl, ILocalizable]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnLanguageLabel()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="46" sc="9" el="49" ec="10">UI\WebControls\DnnLanguageLabel.cs</location>
            <body hash="50dd8f405a25debcb0181df6b46912e3"><![CDATA[public DnnLanguageLabel()
        {
            Localize = true;
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="CreateChildControls">
          <declaration><![CDATA[protected override void CreateChildControls()]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   CreateChildControls overrides the Base class's method to correctly build the
   control based on the configuration
 </summary>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="84" sc="9" el="100" ec="10">UI\WebControls\DnnLanguageLabel.cs</location>
            <body hash="f94a9e7913b518c02dea1aaa12402cd2"><![CDATA[{
            //First clear the controls collection
            Controls.Clear();

            _Flag = new Image {ViewStateMode = ViewStateMode.Disabled};
            Controls.Add(_Flag);

            Controls.Add(new LiteralControl("&nbsp;"));

            _Label = new Label();
            _Label.ViewStateMode = ViewStateMode.Disabled;
            Controls.Add(_Label);

            //Call base class's method

            base.CreateChildControls();
        }]]></body>
          </codeblock>
        </method>
        <method name="LocalizeStrings">
          <declaration><![CDATA[public virtual void LocalizeStrings()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="161" sc="9" el="162" ec="10">UI\WebControls\DnnLanguageLabel.cs</location>
            <body hash="539fa760ca172337a931519768c64187"><![CDATA[{
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="72" sc="9" el="75" ec="10">UI\WebControls\DnnLanguageLabel.cs</location>
            <body hash="29e819885fcea74f96cf89993a8f3777"><![CDATA[{
            base.OnInit(e);
            LocalResourceFile = Utilities.GetLocalResourceFile(this);
        }]]></body>
          </codeblock>
        </method>
        <method name="OnPreRender">
          <declaration><![CDATA[protected override void OnPreRender(System.EventArgs e)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   OnPreRender runs just before the control is rendered
 </summary>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="108" sc="9" el="150" ec="10">UI\WebControls\DnnLanguageLabel.cs</location>
            <body hash="ebc1140bf0255fb8a069bc5bc21cd2aa"><![CDATA[{
            base.OnPreRender(e);

            if (string.IsNullOrEmpty(Language))
            {
                _Flag.ImageUrl = "~/images/Flags/none.gif";
            }
            else
            {
                _Flag.ImageUrl = string.Format("~/images/Flags/{0}.gif", Language);
            }

            if (DisplayType == 0)
            {
                PortalSettings _PortalSettings = PortalController.Instance.GetCurrentPortalSettings();
                string _ViewTypePersonalizationKey = "ViewType" + _PortalSettings.PortalId;
                string _ViewType = Convert.ToString(Personalization.GetProfile("LanguageDisplayMode", _ViewTypePersonalizationKey));
                switch (_ViewType)
                {
                    case "NATIVE":
                        DisplayType = CultureDropDownTypes.NativeName;
                        break;
                    case "ENGLISH":
                        DisplayType = CultureDropDownTypes.EnglishName;
                        break;
                    default:
                        DisplayType = CultureDropDownTypes.DisplayName;
                        break;
                }
            }

            string localeName = null;
            if (string.IsNullOrEmpty(Language))
            {
                localeName = Localization.GetString("NeutralCulture", Localization.GlobalResourceFile);
            }
            else
            {
                localeName = Localization.GetLocaleName(Language, DisplayType);
            }
            _Label.Text = localeName;
            _Flag.AlternateText = localeName;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_Flag">
          <declaration><![CDATA[private System.Web.UI.WebControls.Image _Flag;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_Label">
          <declaration><![CDATA[private System.Web.UI.WebControls.Label _Label;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="DisplayType">
          <declaration><![CDATA[public CultureDropDownTypes DisplayType]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Language">
          <declaration><![CDATA[public string Language]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="58" sc="13" el="60" ec="14">UI\WebControls\DnnLanguageLabel.cs</location>
            <body hash="7c28d52e3d5e4e7264f3e71d527cb554"><![CDATA[{
                return (string) ViewState["Language"];
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="62" sc="13" el="64" ec="14">UI\WebControls\DnnLanguageLabel.cs</location>
            <body hash="82f53cb6396fdb8e725cd7822692e250"><![CDATA[{
                ViewState["Language"] = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="Localize">
          <declaration><![CDATA[public bool Localize]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="LocalResourceFile">
          <declaration><![CDATA[public string LocalResourceFile]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnListBox">
      <declaration><![CDATA[public class DnnListBox : RadListBox]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnListBox()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnListBoxItem">
      <declaration><![CDATA[public class DnnListBoxItem : RadListBoxItem]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnListBoxItem()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnListView">
      <declaration><![CDATA[public class DnnListView : RadListView]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnListView()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnListViewItem">
      <declaration><![CDATA[public class DnnListViewItem : RadListViewItem]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnListViewItem(RadListViewItemType itemType, RadListView ownerView) : base(itemType, ownerView)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="31" sc="9" el="33" ec="10">UI\WebControls\DnnListViewItem.cs</location>
            <body hash="58df45be85b83b23a1c5635d18b4294f"><![CDATA[public DnnListViewItem(RadListViewItemType itemType, RadListView ownerView) : base(itemType, ownerView)
        {
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnListViewItemDragHandle">
      <declaration><![CDATA[public class DnnListViewItemDragHandle : RadListViewItemDragHandle]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnListViewItemDragHandle()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnLiteral">
      <declaration><![CDATA[public class DnnLiteral : System.Web.UI.WebControls.Literal, ILocalizable]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private bool _Localize = true;]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="35" sc="9" el="35" ec="39">UI\WebControls\DnnLiteral.cs</location>
            <body hash="0c5b88a2588e4ec21ecda1326463d7a0"><![CDATA[private bool _Localize = true]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="LocalizeStrings">
          <declaration><![CDATA[public virtual void LocalizeStrings()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="70" sc="9" el="78" ec="10">UI\WebControls\DnnLiteral.cs</location>
            <body hash="4eb63b654ba57819d7076e3e361a7e73"><![CDATA[{
            if ((Localize))
            {
                if ((!string.IsNullOrEmpty(Text)))
                {
                    Text = Localization.GetString(Text, LocalResourceFile);
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnPreRender">
          <declaration><![CDATA[protected override void OnPreRender(System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="40" sc="9" el="43" ec="10">UI\WebControls\DnnLiteral.cs</location>
            <body hash="28617cbf340629c44366dabf2669a8b0"><![CDATA[{
            base.OnPreRender(e);
            LocalResourceFile = Utilities.GetLocalResourceFile(this);
        }]]></body>
          </codeblock>
        </method>
        <method name="Render">
          <declaration><![CDATA[protected override void Render(System.Web.UI.HtmlTextWriter writer)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="46" sc="9" el="49" ec="10">UI\WebControls\DnnLiteral.cs</location>
            <body hash="8f3fb37b7748da233ed1fda25b8594e9"><![CDATA[{
            LocalizeStrings();
            base.Render(writer);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_Localize">
          <declaration><![CDATA[private bool _Localize = true;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="Localize">
          <declaration><![CDATA[public bool Localize]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="58" sc="13" el="60" ec="14">UI\WebControls\DnnLiteral.cs</location>
            <body hash="91fdcb757a9542c3f089e769a677bf83"><![CDATA[{
                return _Localize;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="62" sc="13" el="64" ec="14">UI\WebControls\DnnLiteral.cs</location>
            <body hash="7f442eb778feef34982862b7cb2a1f38"><![CDATA[{
                _Localize = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="LocalResourceFile">
          <declaration><![CDATA[public string LocalResourceFile]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnMaskedTextBox">
      <declaration><![CDATA[public class DnnMaskedTextBox : RadMaskedTextBox]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnMaskedTextBox()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnMemberListControl">
      <declaration><![CDATA[public class DnnMemberListControl : System.Web.UI.WebControls.WebControl]]></declaration>
      <documentation>
        <summary>
 This control is used for displaying a template based list of users based upon various filter and sorting capabilities.
 </summary>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnMemberListControl()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="153" sc="9" el="158" ec="10">UI\WebControls\DnnMemberListControl.cs</location>
            <body hash="b587f6978845da2dc9a530c02ea1471a"><![CDATA[{
            base.OnInit(e);
            
            _currentUser = UserController.Instance.GetCurrentUserInfo();
            _relationshipController = new RelationshipController();
        }]]></body>
          </codeblock>
        </method>
        <method name="Render">
          <declaration><![CDATA[protected override void Render(System.Web.UI.HtmlTextWriter writer)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="161" sc="9" el="217" ec="10">UI\WebControls\DnnMemberListControl.cs</location>
            <body hash="a81168c51cec4214b875f9210b5b66df"><![CDATA[{
            if (ItemTemplate == "") return;

            writer.Write(HeaderTemplate);

            // Filters
            if (Filters == null) Filters = new Dictionary<string, string>();
            var additionalFilters = new Dictionary<string, string>();
            additionalFilters.Add("Records", PageSize.ToString());
            additionalFilters.Add("PageIndex", PageIndex.ToString());
            additionalFilters.Add("Rowsize", RowSize.ToString());
            additionalFilters.Add("SortBy", SortBy);
            additionalFilters.Add("SortAscending", SortAscending.ToString());

            // Currently Not Used by the SPROC
            var filterUser = Filters.ContainsKey("UserId") && Filters["UserId"] != null ? new UserInfo() { UserID = int.Parse(Filters["UserId"]) } : new UserInfo() { PortalID = _currentUser.PortalID };
            var role = Filters.ContainsKey("RoleId") && Filters["RoleId"] != null ? new UserRoleInfo() { RoleID = int.Parse(Filters["RoleId"]) } : null;
            var relationship = Filters.ContainsKey("RelationshipTypeId") && Filters["RelationshipTypeId"] != null ? new RelationshipType() { RelationshipTypeId = int.Parse(Filters["RelationshipTypeId"]) } : null;
            
            foreach (var filter in Filters.Where(filter => !additionalFilters.ContainsKey(filter.Key)))
            {
                additionalFilters.Add(filter.Key, filter.Value);
            }

            var row = 0;
            var users = new DataTable();

            //users.Load(_relationshipController.GetUsersAdvancedSearch(_currentUser, filterUser, role, relationship, Filters, additionalFilters));

            if (users.Rows.Count > 0)
            {
                foreach (DataRow user in users.Rows)
                {
                    //Row Header
                    writer.Write(string.IsNullOrEmpty(AlternatingRowHeaderTemplate) || row%2 == 0 ? RowHeaderTemplate : AlternatingRowHeaderTemplate);

                    var tokenReplace = new TokenReplace();
                    var tokenKeyValues = new Dictionary<string, string>();

                    foreach (var col in user.Table.Columns.Cast<DataColumn>().Where(col => !tokenKeyValues.ContainsKey(col.ColumnName)))
                    {
                        tokenKeyValues.Add(col.ColumnName, user[col.ColumnName].ToString());
                    }

                    var listItem = string.IsNullOrEmpty(AlternatingItemTemplate) || row%2 == 0 ? ItemTemplate : AlternatingItemTemplate;
                    listItem = tokenReplace.ReplaceEnvironmentTokens(listItem, tokenKeyValues, "Member");
                    writer.Write(listItem);

                    //Row Footer
                    writer.Write(string.IsNullOrEmpty(AlternatingRowFooterTemplate) || row%2 == 0 ? RowFooterTemplate : AlternatingRowFooterTemplate);

                    row++;
                }
            }

            writer.Write(FooterTemplate);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_currentUser">
          <declaration><![CDATA[private UserInfo _currentUser;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_relationshipController">
          <declaration><![CDATA[private RelationshipController _relationshipController;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="AlternatingItemTemplate">
          <declaration><![CDATA[public string AlternatingItemTemplate]]></declaration>
          <documentation>
            <summary>
 Gets or sets the template for displaying the alternating items in a DnnMemberListControl object.
 </summary>
          </documentation>
        </property>
        <property name="AlternatingRowFooterTemplate">
          <declaration><![CDATA[public string AlternatingRowFooterTemplate]]></declaration>
          <documentation>
            <summary>
 Gets or sets the template for displaying the alternating row footers in a DnnMemberListControl object.
 </summary>
          </documentation>
        </property>
        <property name="AlternatingRowHeaderTemplate">
          <declaration><![CDATA[public string AlternatingRowHeaderTemplate]]></declaration>
          <documentation>
            <summary>
 Gets or sets the template for displaying the alternating row headers in a DnnMemberListControl object.
 </summary>
          </documentation>
        </property>
        <property name="Filters">
          <declaration><![CDATA[public System.Collections.Generic.IDictionary<string, string> Filters]]></declaration>
          <documentation>
            <summary>
 Gets or sets the collection of filters to apply when getting the list of members.
 </summary>
 <remarks>
 Posible keys are: RoleId, RelationshipTypeId, UserId, Profile:PropertyName, FirstName, LastName, DisplayName, Username, Email.
 </remarks></documentation>
        </property>
        <property name="FooterTemplate">
          <declaration><![CDATA[public string FooterTemplate]]></declaration>
          <documentation>
            <summary>
 Gets or sets the template for displaying the footer section of a DnnMemberListControl object.
 </summary>
          </documentation>
        </property>
        <property name="HeaderTemplate">
          <declaration><![CDATA[public string HeaderTemplate]]></declaration>
          <documentation>
            <summary>
 Gets or sets the template for displaying the header section of a DnnMemberListControl object.
 </summary>
          </documentation>
        </property>
        <property name="ItemTemplate">
          <declaration><![CDATA[public string ItemTemplate]]></declaration>
          <documentation>
            <summary>
 Gets or sets the template for displaying an item in a DnnMemberListControl object.
 </summary>
          </documentation>
        </property>
        <property name="PageIndex">
          <declaration><![CDATA[public int PageIndex]]></declaration>
          <documentation>
            <summary>
 Gets or sets the index of the currently displayed page.
 </summary>
          </documentation>
        </property>
        <property name="PageSize">
          <declaration><![CDATA[public int PageSize]]></declaration>
          <documentation>
            <summary>
 Gets or sets the number of records to display on a page in a DnnMemberListControl object.
 </summary>
          </documentation>
        </property>
        <property name="RowFooterTemplate">
          <declaration><![CDATA[public string RowFooterTemplate]]></declaration>
          <documentation>
            <summary>
 Gets or sets the template for the row footer.
 </summary>
          </documentation>
        </property>
        <property name="RowHeaderTemplate">
          <declaration><![CDATA[public string RowHeaderTemplate]]></declaration>
          <documentation>
            <summary>
 Gets or sets the template for the row header.
 </summary>
          </documentation>
        </property>
        <property name="RowSize">
          <declaration><![CDATA[public int RowSize]]></declaration>
          <documentation>
            <summary>
 Gets or sets the number of items displayed on each row.
 </summary>
          </documentation>
        </property>
        <property name="SortAscending">
          <declaration><![CDATA[public bool SortAscending]]></declaration>
          <documentation>
            <summary>
 Gets or sets the sort direction
 </summary>
          </documentation>
        </property>
        <property name="SortBy">
          <declaration><![CDATA[public string SortBy]]></declaration>
          <documentation>
            <summary>
 Sets the property value to sort by.
 </summary>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnMenu">
      <declaration><![CDATA[public class DnnMenu : RadMenu]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnMenu()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnMenuItem">
      <declaration><![CDATA[public class DnnMenuItem : RadMenuItem]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnMenuItem()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="31" sc="9" el="33" ec="10">UI\WebControls\DnnMenuItem.cs</location>
            <body hash="bacec72ceccc69a0acfc1d966604febf"><![CDATA[public DnnMenuItem()
        {
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnMenuItem(string text) : base(text)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="35" sc="9" el="37" ec="10">UI\WebControls\DnnMenuItem.cs</location>
            <body hash="067df6f0a2532470496e731faf6ac399"><![CDATA[public DnnMenuItem(string text) : base(text)
        {
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnMenuItem(string text, string navigateUrl) : base(text, navigateUrl)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="39" sc="9" el="41" ec="10">UI\WebControls\DnnMenuItem.cs</location>
            <body hash="6006d1ce44373656a303a0046de059c1"><![CDATA[public DnnMenuItem(string text, string navigateUrl) : base(text, navigateUrl)
        {
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnMenuItemBinding">
      <declaration><![CDATA[public class DnnMenuItemBinding : RadMenuItemBinding]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnMenuItemBinding()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnModuleComboBox">
      <declaration><![CDATA[public class DnnModuleComboBox : System.Web.UI.WebControls.WebControl]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnModuleComboBox()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="add_ItemChanged">
          <declaration><![CDATA[public void add_ItemChanged(System.EventHandler value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="BindAllPortalDesktopModules">
          <declaration><![CDATA[public void BindAllPortalDesktopModules()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="221" sc="9" el="226" ec="10">UI\WebControls\DnnModuleComboBox.cs</location>
            <body hash="07299568fbbe2f9fa32375f1f9e36e83"><![CDATA[{
            _moduleCombo.SelectedValue = null;
            _moduleCombo.DataSource = GetPortalDesktopModules();
            _moduleCombo.DataBind();
            BindPortalDesktopModuleImages();
        }]]></body>
          </codeblock>
        </method>
        <method name="BindPortalDesktopModuleImages">
          <declaration><![CDATA[private void BindPortalDesktopModuleImages()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="142" sc="9" el="156" ec="10">UI\WebControls\DnnModuleComboBox.cs</location>
            <body hash="fd18b7c4c1c85e20d8141476245da265"><![CDATA[{
            var portalDesktopModules = DesktopModuleController.GetDesktopModules(PortalSettings.Current.PortalId);
            var packages = PackageController.Instance.GetExtensionPackages(PortalSettings.Current.PortalId);

            foreach (RadComboBoxItem item in _moduleCombo.Items)
            {
                string imageUrl =
                    (from pkgs in packages
                     join portMods in portalDesktopModules on pkgs.PackageID equals portMods.Value.PackageID
                     where portMods.Value.DesktopModuleID.ToString() == item.Value
                     select pkgs.IconFile).FirstOrDefault();

                item.ImageUrl = String.IsNullOrEmpty(imageUrl) ? Globals.ImagePath + DefaultExtensionImage : imageUrl;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="BindTabModuleImages">
          <declaration><![CDATA[private void BindTabModuleImages(int tabID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="159" sc="9" el="176" ec="10">UI\WebControls\DnnModuleComboBox.cs</location>
            <body hash="bcf0e8dc40122d3ab6db5bc1b7ccd7ac"><![CDATA[{
            var tabModules = ModuleController.Instance.GetTabModules(tabID);
            var portalDesktopModules = DesktopModuleController.GetDesktopModules(PortalSettings.Current.PortalId);
            var moduleDefnitions = ModuleDefinitionController.GetModuleDefinitions();
            var packages = PackageController.Instance.GetExtensionPackages(PortalSettings.Current.PortalId);

            foreach (RadComboBoxItem item in _moduleCombo.Items)
            {
                string imageUrl = (from pkgs in packages
                                   join portMods in portalDesktopModules on pkgs.PackageID equals portMods.Value.PackageID
                                   join modDefs in moduleDefnitions on portMods.Value.DesktopModuleID equals modDefs.Value.DesktopModuleID
                                   join tabMods in tabModules on modDefs.Value.DesktopModuleID equals tabMods.Value.DesktopModuleID
                                   where tabMods.Value.ModuleID.ToString() == item.Value
                                   select pkgs.IconFile).FirstOrDefault();

                item.ImageUrl = String.IsNullOrEmpty(imageUrl) ? Globals.ImagePath + DefaultExtensionImage : imageUrl;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="BindTabModulesByTabID">
          <declaration><![CDATA[public void BindTabModulesByTabID(int tabID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="229" sc="9" el="234" ec="10">UI\WebControls\DnnModuleComboBox.cs</location>
            <body hash="b7fafb0579d7601bae97cc4def1fd751"><![CDATA[{
            _moduleCombo.SelectedValue = null;
            _moduleCombo.DataSource = GetTabModules(tabID);
            _moduleCombo.DataBind();
            BindTabModuleImages(tabID);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPortalDesktopModules">
          <declaration><![CDATA[private System.Collections.Generic.Dictionary<int, string> GetPortalDesktopModules()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="98" sc="9" el="115" ec="10">UI\WebControls\DnnModuleComboBox.cs</location>
            <body hash="3e014ade5528d56e872f7e4d5bd6a6a9"><![CDATA[{
            IOrderedEnumerable<KeyValuePair<string, PortalDesktopModuleInfo>> portalModulesList;
            if (Filter == null)
            {
                portalModulesList = DesktopModuleController.GetPortalDesktopModules(PortalSettings.Current.PortalId)
                    .Where((kvp) => kvp.Value.DesktopModule.Category == "Uncategorised" || String.IsNullOrEmpty(kvp.Value.DesktopModule.Category))
                    .OrderBy(c => c.Key);
            }
            else
            {
                portalModulesList = DesktopModuleController.GetPortalDesktopModules(PortalSettings.Current.PortalId)
                    .Where(Filter)
                    .OrderBy(c => c.Key);
            }

            return portalModulesList.ToDictionary(portalModule => portalModule.Value.DesktopModuleID, 
                                                    portalModule => portalModule.Key);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetTabModules">
          <declaration><![CDATA[private static System.Collections.Generic.Dictionary<int, string> GetTabModules(int tabID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="118" sc="9" el="127" ec="10">UI\WebControls\DnnModuleComboBox.cs</location>
            <body hash="9c630fa44274a2a8181984c5a935c92c"><![CDATA[{
            var tabModules = ModuleController.Instance.GetTabModules(tabID);

            // Is this tab from another site?
            var isRemote = TabController.Instance.GetTab(tabID, Null.NullInteger, false).PortalID != PortalSettings.Current.PortalId;

            var pageModules = tabModules.Values.Where(m => !isRemote || ModuleSuportsSharing(m)).Where(m => ModulePermissionController.CanAdminModule(m) && m.IsDeleted == false).ToList();

            return pageModules.ToDictionary(module => module.ModuleID, module => module.ModuleTitle);
        }]]></body>
          </codeblock>
        </method>
        <method name="ModuleSuportsSharing">
          <declaration><![CDATA[private static bool ModuleSuportsSharing(ModuleInfo moduleInfo)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="130" sc="9" el="139" ec="10">UI\WebControls\DnnModuleComboBox.cs</location>
            <body hash="5ad12648c83b456ca5a9e23c87f8a8c9"><![CDATA[{
            switch (moduleInfo.DesktopModule.Shareable)
            {
                case ModuleSharing.Supported:
                case ModuleSharing.Unknown:
                    return moduleInfo.IsShareable;
                default:
                    return false;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="183" sc="9" el="189" ec="10">UI\WebControls\DnnModuleComboBox.cs</location>
            <body hash="ee8b24a2a63c2dd0ffbf25e936f9319a"><![CDATA[{
            base.OnInit(e);
            _moduleCombo = new DnnComboBox();
            _moduleCombo.DataValueField = "key";
            _moduleCombo.DataTextField = "value";
            Controls.Add(_moduleCombo);
        }]]></body>
          </codeblock>
        </method>
        <method name="OnItemChanged">
          <declaration><![CDATA[protected virtual void OnItemChanged()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="198" sc="9" el="203" ec="10">UI\WebControls\DnnModuleComboBox.cs</location>
            <body hash="8d9f3ae5c90e39f95a5dadc6bec553e6"><![CDATA[{
            if (ItemChanged != null)
            {
                ItemChanged(this, new EventArgs());
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="192" sc="9" el="195" ec="10">UI\WebControls\DnnModuleComboBox.cs</location>
            <body hash="74d36dfd31ee9392f01e77133a4178b5"><![CDATA[{
            base.OnLoad(e);
            _originalValue = SelectedValue;
        }]]></body>
          </codeblock>
        </method>
        <method name="OnPreRender">
          <declaration><![CDATA[protected override void OnPreRender(System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="206" sc="9" el="214" ec="10">UI\WebControls\DnnModuleComboBox.cs</location>
            <body hash="266b6d2f13edb47a06f768b647e30adb"><![CDATA[{
            if (_moduleCombo.Items.FindItemByValue(_originalValue) != null)
            {
                _moduleCombo.Items.FindItemByValue(_originalValue).Selected = true;
            }

            _moduleCombo.Width = Width;
            base.OnPreRender(e);
        }]]></body>
          </codeblock>
        </method>
        <method name="remove_ItemChanged">
          <declaration><![CDATA[public void remove_ItemChanged(System.EventHandler value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="SetModule">
          <declaration><![CDATA[public void SetModule(string code)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="237" sc="9" el="239" ec="10">UI\WebControls\DnnModuleComboBox.cs</location>
            <body hash="907f26027b5b7933001ca6504f465e39"><![CDATA[{
            _moduleCombo.SelectedIndex = _moduleCombo.FindItemIndexByValue(code);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_moduleCombo">
          <declaration><![CDATA[private DnnComboBox _moduleCombo;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_originalValue">
          <declaration><![CDATA[private string _originalValue;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="DefaultExtensionImage">
          <declaration><![CDATA[private const string DefaultExtensionImage = "icon_extensions_32px.png";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ItemChanged">
          <declaration><![CDATA[private System.EventHandler ItemChanged;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="Enabled">
          <declaration><![CDATA[public override bool Enabled]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="84" sc="13" el="86" ec="14">UI\WebControls\DnnModuleComboBox.cs</location>
            <body hash="5af2cefaf5472d5d12f67716dcf99f07"><![CDATA[{
                return _moduleCombo.Enabled;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="88" sc="13" el="90" ec="14">UI\WebControls\DnnModuleComboBox.cs</location>
            <body hash="1f338ee3c81983e02e7d682857ad51f2"><![CDATA[{
                _moduleCombo.Enabled = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="Filter">
          <declaration><![CDATA[public Func<System.Collections.Generic.KeyValuePair<string, PortalDesktopModuleInfo>, bool> Filter]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ItemCount">
          <declaration><![CDATA[public int ItemCount]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="61" sc="13" el="63" ec="14">UI\WebControls\DnnModuleComboBox.cs</location>
            <body hash="9e381ed87af1530b2278f3eb44b5611c"><![CDATA[{
                return _moduleCombo.Items.Count;
            }]]></body>
          </codeblock>
        </property>
        <property name="RadComboBoxClientId">
          <declaration><![CDATA[public string RadComboBoxClientId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="77" sc="13" el="79" ec="14">UI\WebControls\DnnModuleComboBox.cs</location>
            <body hash="7c2dca78524222ba488d3e9c6c29747a"><![CDATA[{
                return _moduleCombo.ClientID;
            }]]></body>
          </codeblock>
        </property>
        <property name="SelectedValue">
          <declaration><![CDATA[public string SelectedValue]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="69" sc="13" el="71" ec="14">UI\WebControls\DnnModuleComboBox.cs</location>
            <body hash="07d122e4b947ffa400e4d1b7eb94c071"><![CDATA[{
                return _moduleCombo.SelectedValue;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
        <event name="ItemChanged">
          <declaration><![CDATA[public event System.EventHandler ItemChanged;]]></declaration>
          <documentation>
          </documentation>
        </event>
      </events>
    </class>
    <class name="DnnMonthYearPicker">
      <declaration><![CDATA[internal class DnnMonthYearPicker : RadMonthYearPicker]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnMonthYearPicker()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnMultiPage">
      <declaration><![CDATA[public class DnnMultiPage : RadMultiPage]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnMultiPage()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnNumericTextBox">
      <declaration><![CDATA[public class DnnNumericTextBox : RadNumericTextBox]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnNumericTextBox()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnPageDropDownList">
      <declaration><![CDATA[public class DnnPageDropDownList : DnnDropDownList]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnPageDropDownList()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="21" sc="9" el="31" ec="10">UI\WebControls\DnnPageDropDownList.cs</location>
            <body hash="73ecd649f6c296fee4a580f596197c80"><![CDATA[{
            base.OnInit(e);

            SelectItemDefaultText = Localization.GetString("DropDownList.SelectWebPageDefaultText", Localization.SharedResourceFile);
            Services.GetTreeMethod = "ItemListService/GetPages";
            Services.GetNodeDescendantsMethod = "ItemListService/GetPageDescendants";
            Services.SearchTreeMethod = "ItemListService/SearchPages";
            Services.GetTreeWithNodeMethod = "ItemListService/GetTreePathForPage";
            Services.ServiceRoot = "InternalServices";
            Services.SortTreeMethod = "ItemListService/SortPages";
        }]]></body>
          </codeblock>
        </method>
        <method name="OnPreRender">
          <declaration><![CDATA[protected override void OnPreRender(System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="34" sc="9" el="62" ec="10">UI\WebControls\DnnPageDropDownList.cs</location>
            <body hash="ab7aebefe38849d1cd7a6ac012d31b1e"><![CDATA[{
            this.AddCssClass("page");
            if (InternalPortalId.HasValue)
            {
                Services.Parameters.Add("PortalId", InternalPortalId.Value.ToString(CultureInfo.InvariantCulture));
			}

			Services.Parameters.Add("includeDisabled", IncludeDisabledTabs.ToString().ToLowerInvariant());
			Services.Parameters.Add("includeAllTypes", IncludeAllTabTypes.ToString().ToLowerInvariant());
            Services.Parameters.Add("includeActive", IncludeActiveTab.ToString().ToLowerInvariant());
            Services.Parameters.Add("includeHostPages", (IncludeHostPages && UserController.Instance.GetCurrentUserInfo().IsSuperUser).ToString().ToLowerInvariant());

            base.OnPreRender(e);

            //add the selected folder's level path so that it can expand to the selected node in client side.
            var selectedPage = SelectedPage;
            if (selectedPage != null && selectedPage.ParentId > Null.NullInteger)
            {
                var tabLevel = string.Empty;
                var parentTab = TabController.Instance.GetTab(selectedPage.ParentId, PortalId, false);
                while (parentTab != null)
                {
                    tabLevel = string.Format("{0},{1}", parentTab.TabID, tabLevel);
                    parentTab = TabController.Instance.GetTab(parentTab.ParentId, PortalId, false);
                }

                ExpandPath = tabLevel.TrimEnd(',');
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="IncludeActiveTab">
          <declaration><![CDATA[public bool IncludeActiveTab]]></declaration>
          <documentation>
            <summary>
 Whether include active page.
 </summary>
          </documentation>
        </property>
        <property name="IncludeAllTabTypes">
          <declaration><![CDATA[public bool IncludeAllTabTypes]]></declaration>
          <documentation>
            <summary>
 Whether include pages which tab type is not normal.
 </summary>
          </documentation>
        </property>
        <property name="IncludeDisabledTabs">
          <declaration><![CDATA[public bool IncludeDisabledTabs]]></declaration>
          <documentation>
            <summary>
 Whether include pages which are disabled.
 </summary>
          </documentation>
        </property>
        <property name="IncludeHostPages">
          <declaration><![CDATA[public bool IncludeHostPages]]></declaration>
          <documentation>
            <summary>
 Whether include Host Pages
 </summary>
          </documentation>
        </property>
        <property name="InternalPortalId">
          <declaration><![CDATA[private int? InternalPortalId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="103" sc="13" el="105" ec="14">UI\WebControls\DnnPageDropDownList.cs</location>
            <body hash="a640e1702e8258d37ce76843f2f412cb"><![CDATA[{
                return ViewState.GetValue<int?>("PortalId", null);
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="107" sc="13" el="109" ec="14">UI\WebControls\DnnPageDropDownList.cs</location>
            <body hash="c28f23a33c491d4780b79f736239c2ed"><![CDATA[{
                ViewState.SetValue<int?>("PortalId", value, null);
            }]]></body>
          </codeblock>
        </property>
        <property name="PortalId">
          <declaration><![CDATA[public int PortalId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="87" sc="13" el="93" ec="14">UI\WebControls\DnnPageDropDownList.cs</location>
            <body hash="e3aaf22d1c6f7cd1cb69cf1be5b44b2c"><![CDATA[{
                if (InternalPortalId.HasValue)
                {
                    return InternalPortalId.Value;
                }
                return PortalSettings.Current.ActiveTab.IsSuperTab ? -1 : PortalSettings.Current.PortalId;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="95" sc="13" el="97" ec="14">UI\WebControls\DnnPageDropDownList.cs</location>
            <body hash="e3bbc7be0ac02b61e547ac00f7814b68"><![CDATA[{
                InternalPortalId = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="SelectedPage">
          <declaration><![CDATA[public TabInfo SelectedPage]]></declaration>
          <documentation>
            <summary>
 Gets the selected Page in the control, or selects the Page in the control.
 </summary>
          </documentation>
          <codeblock>
            <location sl="119" sc="13" el="122" ec="14">UI\WebControls\DnnPageDropDownList.cs</location>
            <body hash="073768b88fb9d765f2747ec38442a8d6"><![CDATA[{
                var pageId = SelectedItemValueAsInt;
                return (pageId == Null.NullInteger) ? null : TabController.Instance.GetTab(pageId, PortalId, false);
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="124" sc="13" el="126" ec="14">UI\WebControls\DnnPageDropDownList.cs</location>
            <body hash="7621ab6451f3bd969c675e34df076d30"><![CDATA[{
                SelectedItem = (value != null) ? new ListItem() { Text = value.IndentedTabName, Value = value.TabID.ToString(CultureInfo.InvariantCulture) } : null;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnPageView">
      <declaration><![CDATA[public class DnnPageView : RadPageView]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnPageView()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnPanelBar">
      <declaration><![CDATA[public class DnnPanelBar : RadPanelBar]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnPanelBar()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="35" sc="9" el="38" ec="10">UI\WebControls\DnnPanelBar.cs</location>
            <body hash="a069090918252cafc03cfd5aafced412"><![CDATA[{
            base.OnInit(e);
            Utilities.ApplySkin(this);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnPanelItem">
      <declaration><![CDATA[public class DnnPanelItem : RadPanelItem]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnPanelItem()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="31" sc="9" el="33" ec="10">UI\WebControls\DnnPanelItem.cs</location>
            <body hash="edcb73d1bf2e3d7d54eeab3f79a051b6"><![CDATA[public DnnPanelItem()
        {
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnPanelItem(string text) : base(text)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="35" sc="9" el="37" ec="10">UI\WebControls\DnnPanelItem.cs</location>
            <body hash="ab47e3e2ea84bd0d587341b22ae40331"><![CDATA[public DnnPanelItem(string text) : base(text)
        {
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnPanelItem(string text, string navigateUrl) : base(text, navigateUrl)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="39" sc="9" el="41" ec="10">UI\WebControls\DnnPanelItem.cs</location>
            <body hash="442891645f04ec85978fd19dca33b985"><![CDATA[public DnnPanelItem(string text, string navigateUrl) : base(text, navigateUrl)
        {
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnPanelItemBinding">
      <declaration><![CDATA[public class DnnPanelItemBinding : RadPanelItemBinding]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnPanelItemBinding()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnPaswordStrengthOptions">
      <declaration><![CDATA[public class DnnPaswordStrengthOptions]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnPaswordStrengthOptions()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="60" sc="9" el="79" ec="10">UI\WebControls\DnnPaswordStrengthOptions.cs</location>
            <body hash="49223a184876129ad837d47b8bc02c1b"><![CDATA[public DnnPaswordStrengthOptions()
        {
            // all the PasswordStrength related resources are located under the Website\App_GlobalResources\WebControls.resx
            MinLengthText = Utilities.GetLocalizedString("PasswordStrengthMinLength");
            WeakText = Utilities.GetLocalizedString("PasswordStrengthWeak");
            FairText = Utilities.GetLocalizedString("PasswordStrengthFair"); ;
            StrongText = Utilities.GetLocalizedString("PasswordStrengthStrong"); ;

            CriteriaOneUpperCaseLetterText = Utilities.GetLocalizedString("CriteriaOneUpperCaseLetter");
            CriteriaOneLowerCaseLetterText = Utilities.GetLocalizedString("CriteriaOneLowerCaseLetter");
            CriteriaOneNumberText = Utilities.GetLocalizedString("CriteriaOneNumber");
            CriteriaAtLeastNCharsText = Utilities.GetLocalizedString("CriteriaAtLeastNChars");

            WeakColor = "#ed1e24";
            FairColor = "#f6d50a";
            StrongColor = "#69bd44";

            LabelCss = "min-length-text";
            MeterCss = "meter";
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="OnSerializing">
          <declaration><![CDATA[public void OnSerializing(System.Runtime.Serialization.StreamingContext context)]]></declaration>
          <documentation>
            <summary>
 To avoid fetching data from the database in constructor, the OnSerializing method is consumed
 </summary>
 <param name="context"></param></documentation>
          <codeblock>
            <location sl="87" sc="9" el="97" ec="10">UI\WebControls\DnnPaswordStrengthOptions.cs</location>
            <body hash="3b9a53c7a39eb77eb159350b04f0ae0c"><![CDATA[{
            int portalId = (PortalController.Instance.GetCurrentPortalSettings()) != null ? (PortalController.Instance.GetCurrentPortalSettings().PortalId) : -1;
            var settings = new MembershipPasswordSettings(portalId);
            MinLength = settings.MinPasswordLength;
            CriteriaAtLeastNCharsText = string.Format(CriteriaAtLeastNCharsText, MinLength);

            MinNumberOfSpecialChars = settings.MinNonAlphanumericCharacters;
            CriteriaSpecialCharText = MinNumberOfSpecialChars > 0 ?
                string.Format(Utilities.GetLocalizedString("CriteriaAtLeastNSpecialChars"), MinNumberOfSpecialChars) :
                Utilities.GetLocalizedString("CriteriaSpecialChar");
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="CriteriaAtLeastNCharsText">
          <declaration><![CDATA[public string CriteriaAtLeastNCharsText;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="CriteriaOneLowerCaseLetterText">
          <declaration><![CDATA[public string CriteriaOneLowerCaseLetterText;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="CriteriaOneNumberText">
          <declaration><![CDATA[public string CriteriaOneNumberText;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="CriteriaOneUpperCaseLetterText">
          <declaration><![CDATA[public string CriteriaOneUpperCaseLetterText;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="CriteriaSpecialCharText">
          <declaration><![CDATA[public string CriteriaSpecialCharText;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="FairColor">
          <declaration><![CDATA[public string FairColor;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="FairText">
          <declaration><![CDATA[public string FairText;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="LabelCss">
          <declaration><![CDATA[public string LabelCss;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="MeterCss">
          <declaration><![CDATA[public string MeterCss;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="MinLength">
          <declaration><![CDATA[public int MinLength;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="MinLengthText">
          <declaration><![CDATA[public string MinLengthText;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="MinNumberOfSpecialChars">
          <declaration><![CDATA[public int MinNumberOfSpecialChars;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="StrongColor">
          <declaration><![CDATA[public string StrongColor;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="StrongText">
          <declaration><![CDATA[public string StrongText;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="WeakColor">
          <declaration><![CDATA[public string WeakColor;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="WeakText">
          <declaration><![CDATA[public string WeakText;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnPortalPageDropDownList">
      <declaration><![CDATA[public class DnnPortalPageDropDownList : DnnDropDownList]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private readonly Lazy<int> _portalId = new Lazy<int>(() => PortalSettings.Current.ActiveTab.IsSuperTab ? -1 : PortalSettings.Current.PortalId);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="18" sc="9" el="18" ec="152">UI\WebControls\DnnPortalPageDropDownList.cs</location>
            <body hash="605b688258f18dd9b24176a58d0311f3"><![CDATA[private readonly Lazy<int> _portalId = new Lazy<int>(() => PortalSettings.Current.ActiveTab.IsSuperTab ? -1 : PortalSettings.Current.PortalId)]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="21" sc="9" el="31" ec="10">UI\WebControls\DnnPortalPageDropDownList.cs</location>
            <body hash="7165184677c213081726119407adbe6d"><![CDATA[{
            base.OnInit(e);

            SelectItemDefaultText = Localization.GetString("DropDownList.SelectWebPageDefaultText", Localization.SharedResourceFile);
            Services.GetTreeMethod = "ItemListService/GetPagesInPortalGroup";
            Services.GetNodeDescendantsMethod = "ItemListService/GetPageDescendantsInPortalGroup";
            Services.SearchTreeMethod = "ItemListService/SearchPagesInPortalGroup";
            Services.GetTreeWithNodeMethod = "ItemListService/GetTreePathForPageInPortalGroup";
            Services.SortTreeMethod = "ItemListService/SortPagesInPortalGroup";
            Services.ServiceRoot = "InternalServices";
        }]]></body>
          </codeblock>
        </method>
        <method name="OnPreRender">
          <declaration><![CDATA[protected override void OnPreRender(System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="34" sc="9" el="37" ec="10">UI\WebControls\DnnPortalPageDropDownList.cs</location>
            <body hash="d8e9d8d390c110045361babefca47622"><![CDATA[{
            this.AddCssClass("page");
            base.OnPreRender(e);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_portalId">
          <declaration><![CDATA[private readonly Lazy<int> _portalId = new Lazy<int>(() => PortalSettings.Current.ActiveTab.IsSuperTab ? -1 : PortalSettings.Current.PortalId);]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="SelectedPage">
          <declaration><![CDATA[public TabInfo SelectedPage]]></declaration>
          <documentation>
            <summary>
 Gets the selected Page in the control, or selects the Page in the control.
 </summary>
          </documentation>
          <codeblock>
            <location sl="46" sc="13" el="49" ec="14">UI\WebControls\DnnPortalPageDropDownList.cs</location>
            <body hash="02aa1c2c463ad45371a782fb6c66d576"><![CDATA[{
                var pageId = SelectedItemValueAsInt;
                return (pageId == Null.NullInteger) ? null : TabController.Instance.GetTab(pageId, _portalId.Value, false);
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="51" sc="13" el="53" ec="14">UI\WebControls\DnnPortalPageDropDownList.cs</location>
            <body hash="7621ab6451f3bd969c675e34df076d30"><![CDATA[{
                SelectedItem = (value != null) ? new ListItem() { Text = value.IndentedTabName, Value = value.TabID.ToString(CultureInfo.InvariantCulture) } : null;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnProgressArea">
      <declaration><![CDATA[public class DnnProgressArea : RadProgressArea]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnProgressArea()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnProgressManager">
      <declaration><![CDATA[public class DnnProgressManager : RadProgressManager]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnProgressManager()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnRadButton">
      <declaration><![CDATA[public class DnnRadButton : RadButton]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private bool _Localize = true;]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="36" sc="10" el="36" ec="40">UI\WebControls\DnnRadButton.cs</location>
            <body hash="0c5b88a2588e4ec21ecda1326463d7a0"><![CDATA[private bool _Localize = true]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="LocalizeStrings">
          <declaration><![CDATA[public virtual void LocalizeStrings()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="75" sc="9" el="93" ec="10">UI\WebControls\DnnRadButton.cs</location>
            <body hash="512a667e831c6e8c2405bfc79bc902c2"><![CDATA[{
            if ((Localize))
            {
                if ((!string.IsNullOrEmpty(ToolTip)))
                {
                    ToolTip = Localization.GetString(ToolTip, LocalResourceFile);
                }

                if ((!string.IsNullOrEmpty(Text)))
                {
                    Text = Localization.GetString(Text, LocalResourceFile);

                    if ((string.IsNullOrEmpty(ToolTip)))
                    {
                        ToolTip = Localization.GetString(string.Format("{0}.ToolTip", Text), LocalResourceFile);
                    }
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnPreRender">
          <declaration><![CDATA[protected override void OnPreRender(System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="41" sc="9" el="44" ec="10">UI\WebControls\DnnRadButton.cs</location>
            <body hash="28617cbf340629c44366dabf2669a8b0"><![CDATA[{
            base.OnPreRender(e);
            LocalResourceFile = Utilities.GetLocalResourceFile(this);
        }]]></body>
          </codeblock>
        </method>
        <method name="Render">
          <declaration><![CDATA[protected override void Render(System.Web.UI.HtmlTextWriter writer)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="47" sc="9" el="50" ec="10">UI\WebControls\DnnRadButton.cs</location>
            <body hash="8f3fb37b7748da233ed1fda25b8594e9"><![CDATA[{
            LocalizeStrings();
            base.Render(writer);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_Localize">
          <declaration><![CDATA[private bool _Localize = true;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="Localize">
          <declaration><![CDATA[public bool Localize]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="59" sc="13" el="65" ec="14">UI\WebControls\DnnRadButton.cs</location>
            <body hash="5a301b393683b206d550ef9181d75b76"><![CDATA[{
                if (DesignMode)
                {
                    return false;
                }
                return _Localize;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="67" sc="13" el="69" ec="14">UI\WebControls\DnnRadButton.cs</location>
            <body hash="7f442eb778feef34982862b7cb2a1f38"><![CDATA[{
                _Localize = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="LocalResourceFile">
          <declaration><![CDATA[public string LocalResourceFile]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnRadioButton">
      <declaration><![CDATA[public class DnnRadioButton : System.Web.UI.WebControls.RadioButton, ILocalizable]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private bool _Localize = true;]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="35" sc="9" el="42" ec="10">UI\WebControls\DnnRadioButton.cs</location>
            <body hash="46578f72cd024153174eee39f5e15e5b"><![CDATA[private bool _Localize = true;

        #region "Constructors"

        public DnnRadioButton()
        {
            CssClass = "SubHead dnnLabel";
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="LocalizeStrings">
          <declaration><![CDATA[public virtual void LocalizeStrings()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="79" sc="9" el="97" ec="10">UI\WebControls\DnnRadioButton.cs</location>
            <body hash="80b4175751a148f83bb243e6fbd8b536"><![CDATA[{
            if ((Localize))
            {
                if ((!string.IsNullOrEmpty(ToolTip)))
                {
                    ToolTip = Localization.GetString(ToolTip, LocalResourceFile);
                }

                if ((!string.IsNullOrEmpty(Text)))
                {
                    Text = Localization.GetString(Text, LocalResourceFile);

                    if ((string.IsNullOrEmpty(ToolTip)))
                    {
                        ToolTip = Localization.GetString(Text + ".ToolTip", LocalResourceFile);
                    }
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnPreRender">
          <declaration><![CDATA[protected override void OnPreRender(System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="49" sc="9" el="52" ec="10">UI\WebControls\DnnRadioButton.cs</location>
            <body hash="28617cbf340629c44366dabf2669a8b0"><![CDATA[{
            base.OnPreRender(e);
            LocalResourceFile = Utilities.GetLocalResourceFile(this);
        }]]></body>
          </codeblock>
        </method>
        <method name="Render">
          <declaration><![CDATA[protected override void Render(System.Web.UI.HtmlTextWriter writer)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="55" sc="9" el="58" ec="10">UI\WebControls\DnnRadioButton.cs</location>
            <body hash="8f3fb37b7748da233ed1fda25b8594e9"><![CDATA[{
            LocalizeStrings();
            base.Render(writer);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_Localize">
          <declaration><![CDATA[private bool _Localize = true;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="Localize">
          <declaration><![CDATA[public bool Localize]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="67" sc="13" el="69" ec="14">UI\WebControls\DnnRadioButton.cs</location>
            <body hash="91fdcb757a9542c3f089e769a677bf83"><![CDATA[{
                return _Localize;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="71" sc="13" el="73" ec="14">UI\WebControls\DnnRadioButton.cs</location>
            <body hash="7f442eb778feef34982862b7cb2a1f38"><![CDATA[{
                _Localize = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="LocalResourceFile">
          <declaration><![CDATA[public string LocalResourceFile]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnRadRibbonBar">
      <declaration><![CDATA[public class DnnRadRibbonBar : RadRibbonBar]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnRadRibbonBar()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnRadTab">
      <declaration><![CDATA[public class DnnRadTab : RadTab]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnRadTab()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnRating">
      <declaration><![CDATA[public class DnnRating : RadRating]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnRating()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnRatingItem">
      <declaration><![CDATA[public class DnnRatingItem : RadRatingItem]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnRatingItem()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="31" sc="9" el="33" ec="10">UI\WebControls\DnnRatingItem.cs</location>
            <body hash="3e120193279ddaaa71600e283ab7db47"><![CDATA[public DnnRatingItem()
        {
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnRatingItem(string imageUrl) : base(imageUrl)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="35" sc="9" el="37" ec="10">UI\WebControls\DnnRatingItem.cs</location>
            <body hash="a74da5b010bb864c5a0f8762205d8021"><![CDATA[public DnnRatingItem(string imageUrl) : base(imageUrl)
        {
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnRatingItem(string imageUrl, string selectedImageUrl) : base(imageUrl, selectedImageUrl)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="39" sc="9" el="41" ec="10">UI\WebControls\DnnRatingItem.cs</location>
            <body hash="81a5ca953ae0819649bbb64425539a1a"><![CDATA[public DnnRatingItem(string imageUrl, string selectedImageUrl) : base(imageUrl, selectedImageUrl)
        {
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnRatingItem(string imageUrl, string selectedImageUrl, string hoveredImageUrl) : base(imageUrl, selectedImageUrl, hoveredImageUrl)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="43" sc="9" el="45" ec="10">UI\WebControls\DnnRatingItem.cs</location>
            <body hash="3615eaed9e3d8bf196fb48dbcddc9775"><![CDATA[public DnnRatingItem(string imageUrl, string selectedImageUrl, string hoveredImageUrl) : base(imageUrl, selectedImageUrl, hoveredImageUrl)
        {
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnRatingItem(string imageUrl, string selectedImageUrl, string hoveredImageUrl, string hoveredSelectedImageUrl) : base(imageUrl, selectedImageUrl, hoveredImageUrl, hoveredSelectedImageUrl)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="47" sc="9" el="50" ec="10">UI\WebControls\DnnRatingItem.cs</location>
            <body hash="d54bd417215012a01955b3e327d15754"><![CDATA[public DnnRatingItem(string imageUrl, string selectedImageUrl, string hoveredImageUrl, string hoveredSelectedImageUrl)
            : base(imageUrl, selectedImageUrl, hoveredImageUrl, hoveredSelectedImageUrl)
        {
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnRibbonBar">
      <declaration><![CDATA[public class DnnRibbonBar : System.Web.UI.WebControls.WebControl]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnRibbonBar() : base("div")]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="36" sc="9" el="41" ec="10">UI\WebControls\DnnRibbonBar.cs</location>
            <body hash="06a44041be8cc8649a165745824dc4f2"><![CDATA[public DnnRibbonBar() : base("div")
        {
            CssClass = "dnnRibbon";
            Control control = this;
            Utilities.ApplySkin(control, "", "RibbonBar", "RibbonBar");
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="AddParsedSubObject">
          <declaration><![CDATA[protected override void AddParsedSubObject(object obj)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="53" sc="9" el="62" ec="10">UI\WebControls\DnnRibbonBar.cs</location>
            <body hash="774e63265e432a94a32c3621b7338399"><![CDATA[{
            if (obj is DnnRibbonBarGroup)
            {
                base.AddParsedSubObject(obj);
            }
            else
            {
                throw new NotSupportedException("DnnRibbonBarGroupCollection must contain controls of type DnnRibbonBarGroup");
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="CreateControlCollection">
          <declaration><![CDATA[protected override System.Web.UI.ControlCollection CreateControlCollection()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="65" sc="9" el="67" ec="10">UI\WebControls\DnnRibbonBar.cs</location>
            <body hash="578a48d9b7b848a1274c4bd906b563dc"><![CDATA[{
            return new DnnRibbonBarGroupCollection(this);
        }]]></body>
          </codeblock>
        </method>
        <method name="OnPreRender">
          <declaration><![CDATA[protected override void OnPreRender(System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="70" sc="9" el="76" ec="10">UI\WebControls\DnnRibbonBar.cs</location>
            <body hash="ed717ebdb9ea49f9303dc7646f5a65a8"><![CDATA[{
            base.OnPreRender(e);
            if (Visible)
            {
                Utilities.ApplySkin(this, "", "RibbonBar", "RibbonBar");
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="Render">
          <declaration><![CDATA[protected override void Render(System.Web.UI.HtmlTextWriter writer)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="79" sc="9" el="124" ec="10">UI\WebControls\DnnRibbonBar.cs</location>
            <body hash="7dfc4fa682bbb16b844851857f8a5122"><![CDATA[{
            if ((Groups.Count > 0))
            {
                Groups[0].CssClass = Groups[0].CssClass + " " + Groups[0].CssClass.Trim() + "First";
                Groups[Groups.Count - 1].CssClass = Groups[Groups.Count - 1].CssClass + " " + Groups[Groups.Count - 1].CssClass.Trim() + "Last";
            }

            base.RenderBeginTag(writer);

            writer.AddAttribute("class", "barContent");
            writer.RenderBeginTag("div");

            writer.AddAttribute("cellpadding", "0");
            writer.AddAttribute("cellspacing", "0");
            writer.AddAttribute("border", "0");
            writer.RenderBeginTag("table");
            writer.RenderBeginTag("tr");

            foreach (DnnRibbonBarGroup grp in Groups)
            {
                if ((grp.Visible))
                {
                    writer.RenderBeginTag("td");
                    grp.RenderControl(writer);
                    writer.RenderEndTag();
                }
            }
            //MyBase.RenderChildren(writer)

            writer.RenderEndTag();
            //tr
            writer.RenderEndTag();
            //table
            writer.RenderEndTag();
            //div

            writer.AddAttribute("class", "barBottomLeft");
            writer.RenderBeginTag("div");
            writer.RenderEndTag();

            writer.AddAttribute("class", "barBottomRight");
            writer.RenderBeginTag("div");
            writer.RenderEndTag();

            base.RenderEndTag(writer);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="Groups">
          <declaration><![CDATA[public DnnRibbonBarGroupCollection Groups]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="47" sc="13" el="49" ec="14">UI\WebControls\DnnRibbonBar.cs</location>
            <body hash="ab9e71c46059543482239cd678ad9e46"><![CDATA[{
                return (DnnRibbonBarGroupCollection) Controls;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnRibbonBarGroup">
      <declaration><![CDATA[public class DnnRibbonBarGroup : System.Web.UI.WebControls.WebControl]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private bool _CheckToolVisibility = true;]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="34" sc="9" el="40" ec="10">UI\WebControls\DnnRibbonBarGroup.cs</location>
            <body hash="f225f35c50848193e710544966a59bde"><![CDATA[private bool _CheckToolVisibility = true;
        private HtmlGenericControl _contentContainer;

        public DnnRibbonBarGroup() : base("div")
        {
            CssClass = "dnnRibbonGroup";
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="AreChildToolsVisible">
          <declaration><![CDATA[private bool AreChildToolsVisible(ref System.Web.UI.ControlCollection children, ref bool foundTool)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="121" sc="9" el="155" ec="10">UI\WebControls\DnnRibbonBarGroup.cs</location>
            <body hash="4cfb9e57126f03adc501b97ddce282a4"><![CDATA[{
            bool returnValue = false;

            foreach (Control ctrl in children)
            {
                if ((ctrl is IDnnRibbonBarTool))
                {
                    foundTool = true;
                    if ((ctrl.Visible))
                    {
                        returnValue = true;
                        break;
                    }
                }
                else
                {
                    ControlCollection controls = ctrl.Controls;
                    if ((AreChildToolsVisible(ref controls, ref foundTool)))
                    {
                        if ((foundTool))
                        {
                            returnValue = true;
                            break;
                        }
                    }
                }
            }

            if ((!foundTool))
            {
                return true;
            }

            return returnValue;
        }]]></body>
          </codeblock>
        </method>
        <method name="CheckVisibility">
          <declaration><![CDATA[private bool CheckVisibility()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="108" sc="9" el="118" ec="10">UI\WebControls\DnnRibbonBarGroup.cs</location>
            <body hash="69ff2646c0ba740ce96c38e6f427936f"><![CDATA[{
            bool returnValue = true;
            if ((Visible && CheckToolVisibility))
            {
                //Hide group if all tools are invisible
                bool foundTool = false;
                ControlCollection controls = _contentContainer.Controls;
                returnValue = AreChildToolsVisible(ref controls, ref foundTool);
            }
            return returnValue;
        }]]></body>
          </codeblock>
        </method>
        <method name="CreateChildControls">
          <declaration><![CDATA[protected override void CreateChildControls()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="70" sc="9" el="105" ec="10">UI\WebControls\DnnRibbonBarGroup.cs</location>
            <body hash="b80432a45ce188c70f9fe598478c299f"><![CDATA[{
            Controls.Clear();

            HtmlGenericControl topLeft = new HtmlGenericControl("div");
            topLeft.Attributes.Add("class", "topLeft");
            HtmlGenericControl topRight = new HtmlGenericControl("div");
            topRight.Attributes.Add("class", "topRight");

            HtmlGenericControl bottomLeft = new HtmlGenericControl("div");
            bottomLeft.Attributes.Add("class", "bottomLeft");
            HtmlGenericControl bottomRight = new HtmlGenericControl("div");
            bottomRight.Attributes.Add("class", "bottomRight");

            _contentContainer = new HtmlGenericControl("div");
            _contentContainer.Attributes.Add("class", "content");

            HtmlGenericControl footerContainer = new HtmlGenericControl("div");
            footerContainer.Attributes.Add("class", "footer");

            Controls.Add(topLeft);
            Controls.Add(topRight);
            Controls.Add(_contentContainer);
            Controls.Add(footerContainer);
            Controls.Add(bottomLeft);
            Controls.Add(bottomRight);

            if (Content != null)
            {
                Content.InstantiateIn(_contentContainer);
            }

            if (Footer != null)
            {
                Footer.InstantiateIn(footerContainer);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="FindControl">
          <declaration><![CDATA[public override System.Web.UI.Control FindControl(string id)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="158" sc="9" el="161" ec="10">UI\WebControls\DnnRibbonBarGroup.cs</location>
            <body hash="44e97ba0ead7c2d29dd09b98fae3d80e"><![CDATA[{
            EnsureChildControls();
            return base.FindControl(id);
        }]]></body>
          </codeblock>
        </method>
        <method name="RenderControl">
          <declaration><![CDATA[public override void RenderControl(System.Web.UI.HtmlTextWriter writer)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="164" sc="9" el="171" ec="10">UI\WebControls\DnnRibbonBarGroup.cs</location>
            <body hash="49c08133651038e93cdaf513c8562100"><![CDATA[{
            if ((CheckVisibility()))
            {
                base.RenderBeginTag(writer);
                base.RenderChildren(writer);
                base.RenderEndTag(writer);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_CheckToolVisibility">
          <declaration><![CDATA[private bool _CheckToolVisibility = true;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_contentContainer">
          <declaration><![CDATA[private System.Web.UI.HtmlControls.HtmlGenericControl _contentContainer;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="CheckToolVisibility">
          <declaration><![CDATA[public virtual bool CheckToolVisibility]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="60" sc="13" el="62" ec="14">UI\WebControls\DnnRibbonBarGroup.cs</location>
            <body hash="5acb6c36e4891e67bd1b2a7a70805def"><![CDATA[{
                return _CheckToolVisibility;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="64" sc="13" el="66" ec="14">UI\WebControls\DnnRibbonBarGroup.cs</location>
            <body hash="9702a5322b606f8fc8aad3387292036b"><![CDATA[{
                _CheckToolVisibility = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="Content">
          <declaration><![CDATA[public virtual System.Web.UI.ITemplate Content]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Controls">
          <declaration><![CDATA[public override System.Web.UI.ControlCollection Controls]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="45" sc="13" el="48" ec="14">UI\WebControls\DnnRibbonBarGroup.cs</location>
            <body hash="9454f31a88317c388a43ae1cd4816179"><![CDATA[{
                EnsureChildControls();
                return base.Controls;
            }]]></body>
          </codeblock>
        </property>
        <property name="Footer">
          <declaration><![CDATA[public virtual System.Web.UI.ITemplate Footer]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnRibbonBarGroupCollection">
      <declaration><![CDATA[public class DnnRibbonBarGroupCollection : System.Web.UI.ControlCollection]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnRibbonBarGroupCollection(System.Web.UI.Control owner) : base(owner)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="33" sc="9" el="35" ec="10">UI\WebControls\DnnRibbonBarGroupCollection.cs</location>
            <body hash="f5e433e3ba260c7ba70e48ef92139e9f"><![CDATA[public DnnRibbonBarGroupCollection(Control owner) : base(owner)
        {
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="Add">
          <declaration><![CDATA[public override void Add(System.Web.UI.Control child)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="46" sc="9" el="55" ec="10">UI\WebControls\DnnRibbonBarGroupCollection.cs</location>
            <body hash="5d435bea41b0716b7a5a9712371ca281"><![CDATA[{
            if (child is DnnRibbonBarGroup)
            {
                base.Add(child);
            }
            else
            {
                throw new ArgumentException("DnnRibbonBarGroupCollection must contain controls of type DnnRibbonBarGroup");
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="AddAt">
          <declaration><![CDATA[public override void AddAt(int index, System.Web.UI.Control child)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="58" sc="9" el="67" ec="10">UI\WebControls\DnnRibbonBarGroupCollection.cs</location>
            <body hash="fed1d29f58e67bd86c33010641caf9ec"><![CDATA[{
            if (child is DnnRibbonBarGroup)
            {
                base.AddAt(index, child);
            }
            else
            {
                throw new ArgumentException("DnnRibbonBarGroupCollection must contain controls of type DnnRibbonBarGroup");
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="Item">
          <declaration><![CDATA[public new DnnRibbonBarGroup this[int index]]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="40" sc="13" el="42" ec="14">UI\WebControls\DnnRibbonBarGroupCollection.cs</location>
            <body hash="78d34cff270a28936bf61c84eda7f8e5"><![CDATA[{
                return (DnnRibbonBarGroup) base[index];
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnRibbonBarTool">
      <declaration><![CDATA[public class DnnRibbonBarTool : System.Web.UI.Control, IDnnRibbonBarTool]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnRibbonBarTool()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="ActiveTabHasChildren">
          <declaration><![CDATA[protected virtual bool ActiveTabHasChildren()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="580" sc="9" el="589" ec="10">UI\WebControls\DnnRibbonBarTool.cs</location>
            <body hash="62e6f6fffe758536e47b804deccbc55d"><![CDATA[{
            var children = TabController.GetTabsByParent(PortalSettings.ActiveTab.TabID, PortalSettings.ActiveTab.PortalID);

            if (((children == null) || children.Count < 1))
            {
                return false;
            }

            return true;
        }]]></body>
          </codeblock>
        </method>
        <method name="BuildToolUrl">
          <declaration><![CDATA[protected virtual string BuildToolUrl()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="455" sc="9" el="512" ec="10">UI\WebControls\DnnRibbonBarTool.cs</location>
            <body hash="c5386e886c5f01bed3c905b50eedaf13"><![CDATA[{
            if ((ToolInfo.IsHostTool && !UserController.Instance.GetCurrentUserInfo().IsSuperUser))
            {
                return "javascript:void(0);";
            }

            if ((!string.IsNullOrEmpty(NavigateUrl)))
            {
                return NavigateUrl;
            }

            string returnValue = "javascript:void(0);";
            switch (ToolInfo.ToolName)
            {
                case "PageSettings":
                    returnValue = TestableGlobals.Instance.NavigateURL(PortalSettings.ActiveTab.TabID, "Tab", "action=edit");
                    break;

                case "CopyPage":
                    returnValue = TestableGlobals.Instance.NavigateURL(PortalSettings.ActiveTab.TabID, "Tab", "action=copy");
                    break;

                case "DeletePage":
                    returnValue = TestableGlobals.Instance.NavigateURL(PortalSettings.ActiveTab.TabID, "Tab", "action=delete");
                    break;

                case "ImportPage":
                    returnValue = TestableGlobals.Instance.NavigateURL(PortalSettings.ActiveTab.TabID, "ImportTab");
                    break;

                case "ExportPage":
                    returnValue = Globals.NavigateURL(PortalSettings.ActiveTab.TabID, "ExportTab");
                    break;

                case "NewPage":
                    returnValue = TestableGlobals.Instance.NavigateURL("Tab");
                    break;
                case "Help":
                    if (!string.IsNullOrEmpty(Host.HelpURL))
                    {
                        var version = Globals.FormatVersion(DotNetNukeContext.Current.Application.Version, false);
                        returnValue = TestableGlobals.Instance.FormatHelpUrl(Host.HelpURL, PortalSettings, "Home", version);
                    }
                    break;
				case "UploadFile":
				case "HostUploadFile":
                    returnValue = TestableGlobals.Instance.NavigateURL(PortalSettings.ActiveTab.TabID, "WebUpload");
                    break;
                default:
                    if ((!string.IsNullOrEmpty(ToolInfo.ModuleFriendlyName)))
                    {
                        var additionalParams = new List<string>();
                        returnValue = GetTabURL(additionalParams);
                    }
                    break;
            }
            return returnValue;
        }]]></body>
          </codeblock>
        </method>
        <method name="ClearCache">
          <declaration><![CDATA[protected virtual void ClearCache()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="602" sc="9" el="604" ec="10">UI\WebControls\DnnRibbonBarTool.cs</location>
            <body hash="5f0bd3b2efc0a68cc835fd9e9250607a"><![CDATA[{
            DataCache.ClearCache();
        }]]></body>
          </codeblock>
        </method>
        <method name="ControlPanelTool_OnClick">
          <declaration><![CDATA[public virtual void ControlPanelTool_OnClick(object sender, System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="229" sc="9" el="269" ec="10">UI\WebControls\DnnRibbonBarTool.cs</location>
            <body hash="384613a1f09c06abb50075e2937d3536"><![CDATA[{
            switch (ToolInfo.ToolName)
            {
                case "DeletePage":
                    if ((HasToolPermissions("DeletePage")))
                    {
                        string url = TestableGlobals.Instance.NavigateURL(PortalSettings.ActiveTab.TabID, "Tab", "action=delete");
                        Page.Response.Redirect(url, true);                        
                    }
                    break;
                case "CopyPermissionsToChildren":
                    if ((HasToolPermissions("CopyPermissionsToChildren")))
                    {
                        TabController.CopyPermissionsToChildren(PortalSettings.ActiveTab, PortalSettings.ActiveTab.TabPermissions);
                        Page.Response.Redirect(Page.Request.RawUrl);
                    }
                    break;
                case "CopyDesignToChildren":
                    if ((HasToolPermissions("CopyDesignToChildren")))
                    {
                        TabController.CopyDesignToChildren(PortalSettings.ActiveTab, PortalSettings.ActiveTab.SkinSrc, PortalSettings.ActiveTab.ContainerSrc);
                        Page.Response.Redirect(Page.Request.RawUrl);
                    }
                    break;
                case "ClearCache":
                    if ((HasToolPermissions("ClearCache")))
                    {
                        ClearCache();
						ClientResourceManager.ClearCache();
                        Page.Response.Redirect(Page.Request.RawUrl);
                    }
                    break;
                case "RecycleApp":
                    if ((HasToolPermissions("RecycleApp")))
                    {
                        RestartApplication();
                        Page.Response.Redirect(Page.Request.RawUrl);
                    }
                    break;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="CreateChildControls">
          <declaration><![CDATA[protected override void CreateChildControls()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="209" sc="9" el="213" ec="10">UI\WebControls\DnnRibbonBarTool.cs</location>
            <body hash="22dd5dd0a58611843d6118dbd2e64efc"><![CDATA[{
            Controls.Clear();
            Controls.Add(DnnLinkButton);
            Controls.Add(DnnLink);
        }]]></body>
          </codeblock>
        </method>
        <method name="EnableTool">
          <declaration><![CDATA[protected virtual bool EnableTool()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="338" sc="9" el="363" ec="10">UI\WebControls\DnnRibbonBarTool.cs</location>
            <body hash="beb3ae277d9cb43adddad0bfd0adf1d7"><![CDATA[{
            bool returnValue = true;

            switch (ToolInfo.ToolName)
            {
                case "DeletePage":
                    if ((TabController.IsSpecialTab(TabController.CurrentPage.TabID, PortalSettings.PortalId)))
                    {
                        returnValue = false;
                    }
                    break;
                case "CopyDesignToChildren":
                case "CopyPermissionsToChildren":
                    returnValue = ActiveTabHasChildren();
                    if ((returnValue && ToolInfo.ToolName == "CopyPermissionsToChildren"))
                    {
                        if ((PortalSettings.ActiveTab.IsSuperTab))
                        {
                            returnValue = false;
                        }
                    }
                    break;
            }

            return returnValue;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetInstalledModule">
          <declaration><![CDATA[private static ModuleInfo GetInstalledModule(int portalID, string friendlyName)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="597" sc="9" el="599" ec="10">UI\WebControls\DnnRibbonBarTool.cs</location>
            <body hash="803b04722d82ee49170039a0586e3240"><![CDATA[{
            return ModuleController.Instance.GetModuleByDefinition(portalID, friendlyName);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetString">
          <declaration><![CDATA[protected virtual string GetString(string key)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="592" sc="9" el="594" ec="10">UI\WebControls\DnnRibbonBarTool.cs</location>
            <body hash="4277045a320cdbb39d4c12e7db60f567"><![CDATA[{
            return Utilities.GetLocalizedStringFromParent(key, this);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetTabURL">
          <declaration><![CDATA[protected virtual string GetTabURL(System.Collections.Generic.List<string> additionalParams)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="548" sc="9" el="577" ec="10">UI\WebControls\DnnRibbonBarTool.cs</location>
            <body hash="f139e57fac99dad3f2fa94d992c2f256"><![CDATA[{
            int portalId = (ToolInfo.IsHostTool) ? Null.NullInteger : PortalSettings.PortalId;

            string strURL = string.Empty;

            if (((additionalParams == null)))
            {
                additionalParams = new List<string>();
            }

            var moduleInfo = ModuleController.Instance.GetModuleByDefinition(portalId, ToolInfo.ModuleFriendlyName);

            if (((moduleInfo != null)))
            {
                bool isHostPage = (portalId == Null.NullInteger);
                if ((!string.IsNullOrEmpty(ToolInfo.ControlKey)))
                {
                    additionalParams.Insert(0, "mid=" + moduleInfo.ModuleID);
                    if (ToolInfo.ShowAsPopUp && PortalSettings.EnablePopUps)
                    {
                        additionalParams.Add("popUp=true");
                    }
                }

                string currentCulture = Thread.CurrentThread.CurrentCulture.Name;
                strURL = Globals.NavigateURL(moduleInfo.TabID, isHostPage, PortalSettings, ToolInfo.ControlKey, currentCulture, additionalParams.ToArray());
            }

            return strURL;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetText">
          <declaration><![CDATA[protected virtual string GetText()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="515" sc="9" el="522" ec="10">UI\WebControls\DnnRibbonBarTool.cs</location>
            <body hash="9e2e3a0655ab5fb0c0401b5e18e2b3ca"><![CDATA[{
            if ((string.IsNullOrEmpty(Text)))
            {
                return GetString(string.Format("Tool.{0}.Text", ToolInfo.ToolName));
            }

            return Text;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetToolTip">
          <declaration><![CDATA[protected virtual string GetToolTip()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="525" sc="9" el="545" ec="10">UI\WebControls\DnnRibbonBarTool.cs</location>
            <body hash="3a3b771f25978f37a3e04bee85cc41f9"><![CDATA[{
            if ((ToolInfo.ToolName == "DeletePage"))
            {
                if ((TabController.IsSpecialTab(TabController.CurrentPage.TabID, PortalSettings.PortalId)))
                {
                    return GetString("Tool.DeletePage.Special.ToolTip");
                }
            }

            if ((string.IsNullOrEmpty(Text)))
            {
                string tip = GetString(string.Format("Tool.{0}.ToolTip", ToolInfo.ToolName));
                if ((string.IsNullOrEmpty(tip)))
                {
                    tip = GetString(string.Format("Tool.{0}.Text", ToolInfo.ToolName));
                }
                return tip;
            }

            return ToolTip;
        }]]></body>
          </codeblock>
        </method>
        <method name="HasToolPermissions">
          <declaration><![CDATA[protected virtual bool HasToolPermissions(string toolName)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="366" sc="9" el="452" ec="10">UI\WebControls\DnnRibbonBarTool.cs</location>
            <body hash="c51edd784813349e93002193471049b5"><![CDATA[{
            bool isHostTool = false;
            if ((ToolInfo.ToolName == toolName))
            {
                isHostTool = ToolInfo.IsHostTool;
            }
            else if ((AllTools.ContainsKey(toolName)))
            {
                isHostTool = AllTools[toolName].IsHostTool;
            }

            if ((isHostTool && !UserController.Instance.GetCurrentUserInfo().IsSuperUser))
            {
                return false;
            }

            bool returnValue = true;
            switch (toolName)
            {
                case "PageSettings":
                case "CopyDesignToChildren":
                case "CopyPermissionsToChildren":
                    returnValue = TabPermissionController.CanManagePage();

                    if ((returnValue && toolName == "CopyPermissionsToChildren"))
                    {
                        if ((!PortalSecurity.IsInRole("Administrators")))
                        {
                            returnValue = false;
                        }
                    }
                    break;
                case "CopyPage":
                    returnValue = TabPermissionController.CanCopyPage();
                    break;
                case "DeletePage":
                    returnValue = (TabPermissionController.CanDeletePage());
                    break;
                case "ImportPage":
                    returnValue = TabPermissionController.CanImportPage();
                    break;
                case "ExportPage":
                    returnValue = TabPermissionController.CanExportPage();
                    break;
                case "NewPage":
                    returnValue = TabPermissionController.CanAddPage();
                    break;
                case "Help":
                    returnValue = !string.IsNullOrEmpty(Host.HelpURL);
                    break;
                default:
                    //if it has a module definition, look it up and check permissions
                    //if it doesn't exist, assume no permission
                    string friendlyName = "";
                    if ((ToolInfo.ToolName == toolName))
                    {
                        friendlyName = ToolInfo.ModuleFriendlyName;
                    }
                    else if ((AllTools.ContainsKey(toolName)))
                    {
                        friendlyName = AllTools[toolName].ModuleFriendlyName;
                    }

                    if ((!string.IsNullOrEmpty(friendlyName)))
                    {
                        returnValue = false;
                        ModuleInfo moduleInfo;

                        if ((isHostTool))
                        {
                            moduleInfo = GetInstalledModule(Null.NullInteger, friendlyName);
                        }
                        else
                        {
                            moduleInfo = GetInstalledModule(PortalSettings.PortalId, friendlyName);
                        }

                        if ((moduleInfo != null))
                        {
                            returnValue = ModulePermissionController.CanViewModule(moduleInfo);
                        }
                    }
                    break;
            }

            return returnValue;
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="216" sc="9" el="219" ec="10">UI\WebControls\DnnRibbonBarTool.cs</location>
            <body hash="e264b281544f534fa242c180875cedab"><![CDATA[{
            EnsureChildControls();
            DnnLinkButton.Click += ControlPanelTool_OnClick;
        }]]></body>
          </codeblock>
        </method>
        <method name="OnPreRender">
          <declaration><![CDATA[protected override void OnPreRender(System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="222" sc="9" el="226" ec="10">UI\WebControls\DnnRibbonBarTool.cs</location>
            <body hash="db9783e8db9093ac3b1fa00e1ac17ef6"><![CDATA[{
            ProcessTool();
            Visible = (DnnLink.Visible || DnnLinkButton.Visible);
            base.OnPreRender(e);
        }]]></body>
          </codeblock>
        </method>
        <method name="ProcessTool">
          <declaration><![CDATA[protected virtual void ProcessTool()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="276" sc="9" el="335" ec="10">UI\WebControls\DnnRibbonBarTool.cs</location>
            <body hash="bb66e70d3e24bd9b502e35d8926ce6ff"><![CDATA[{
            DnnLink.Visible = false;
            DnnLinkButton.Visible = false;

            if ((!string.IsNullOrEmpty(ToolInfo.ToolName)))
            {
                if ((ToolInfo.UseButton))
                {
                    DnnLinkButton.Visible = HasToolPermissions(ToolInfo.ToolName);
                    DnnLinkButton.Enabled = EnableTool();
                    DnnLinkButton.Localize = false;

                    DnnLinkButton.CssClass = ToolCssClass;
                    DnnLinkButton.DisabledCssClass = ToolCssClass + " dnnDisabled";

                    DnnLinkButton.Text = GetText();
                    DnnLinkButton.ToolTip = GetToolTip();
                }
                else
                {
                    DnnLink.Visible = HasToolPermissions(ToolInfo.ToolName);
                    DnnLink.Enabled = EnableTool();
                    DnnLink.Localize = false;

                    if ((DnnLink.Enabled))
                    {
                        DnnLink.NavigateUrl = BuildToolUrl();

                        //can't find the page, disable it?
                        if ((string.IsNullOrEmpty(DnnLink.NavigateUrl)))
                        {
                            DnnLink.Enabled = false;
                        }
                        //create popup event 
                        else if (ToolInfo.ShowAsPopUp && PortalSettings.EnablePopUps)
                        {
                            // Prevent PageSettings in a popup if SSL is enabled and enforced, which causes redirection/javascript broswer security issues.
                            if (ToolInfo.ToolName == "PageSettings" || ToolInfo.ToolName == "CopyPage" || ToolInfo.ToolName == "NewPage")
                            {
                                if (!(PortalSettings.SSLEnabled && PortalSettings.SSLEnforced))
                                {
                                    DnnLink.Attributes.Add("onclick", "return " + UrlUtils.PopUpUrl(DnnLink.NavigateUrl, this, PortalSettings, true, false));
                                }
                            }
                            else
                            {
                                DnnLink.Attributes.Add("onclick", "return " + UrlUtils.PopUpUrl(DnnLink.NavigateUrl, this, PortalSettings, true, false));
                            }
                        }
                    }

                    DnnLink.CssClass = ToolCssClass;
                    DnnLink.DisabledCssClass = ToolCssClass + " dnnDisabled";

                    DnnLink.Text = GetText();
                    DnnLink.ToolTip = GetToolTip();
                    DnnLink.Target = ToolInfo.LinkWindowTarget;
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="RestartApplication">
          <declaration><![CDATA[protected virtual void RestartApplication()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="607" sc="9" el="612" ec="10">UI\WebControls\DnnRibbonBarTool.cs</location>
            <body hash="14294cccbca41707d503704a5810b5d3"><![CDATA[{
            var log = new LogInfo { BypassBuffering = true, LogTypeKey = EventLogController.EventLogType.HOST_ALERT.ToString() };
            log.AddProperty("Message", GetString("UserRestart"));
            LogController.Instance.AddLog(log);
            Config.Touch();
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_allTools">
          <declaration><![CDATA[private System.Collections.Generic.IDictionary<string, RibbonBarToolInfo> _allTools;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_dnnLink">
          <declaration><![CDATA[private DnnTextLink _dnnLink;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_dnnLinkButton">
          <declaration><![CDATA[private DnnTextButton _dnnLinkButton;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="AllTools">
          <declaration><![CDATA[protected virtual System.Collections.Generic.IDictionary<string, RibbonBarToolInfo> AllTools]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="147" sc="13" el="174" ec="14">UI\WebControls\DnnRibbonBarTool.cs</location>
            <body hash="c43b636399dad0122b87bd3b81dd022b"><![CDATA[{
                if (_allTools == null)
                {
                    _allTools = new Dictionary<string, RibbonBarToolInfo>
                                    {
										//Framework
                                        {"PageSettings", new RibbonBarToolInfo("PageSettings", false, false, "", "", "", true)},
                                        {"CopyPage", new RibbonBarToolInfo("CopyPage", false, false, "", "", "", true)},
                                        {"DeletePage", new RibbonBarToolInfo("DeletePage", false, true, "", "", "", true)},
                                        {"ImportPage", new RibbonBarToolInfo("ImportPage", false, false, "", "", "", true)},
                                        {"ExportPage", new RibbonBarToolInfo("ExportPage", false, false, "", "", "", true)},
                                        {"NewPage", new RibbonBarToolInfo("NewPage", false, false, "", "", "", true)},
                                        {"CopyPermissionsToChildren", new RibbonBarToolInfo("CopyPermissionsToChildren", false, true, "", "", "", false)},
                                        {"CopyDesignToChildren", new RibbonBarToolInfo("CopyDesignToChildren", false, true, "", "", "", false)},
                                        {"Help", new RibbonBarToolInfo("Help", false, false, "_Blank", "", "", false)},
										//Modules On Tabs
                                        {"Console", new RibbonBarToolInfo("Console", false, false, "", "Console", "", false)},
                                        {"HostConsole", new RibbonBarToolInfo("HostConsole", true, false, "", "Console", "", false)},
                                        {"UploadFile", new RibbonBarToolInfo("UploadFile", false, false, "", "", "WebUpload", true)},
                                        {"NewRole", new RibbonBarToolInfo("NewRole", false, false, "", "Security Roles", "Edit", true)},
                                        {"NewUser", new RibbonBarToolInfo("NewUser", false, false, "", "User Accounts", "Edit", true)},
                                        {"ClearCache", new RibbonBarToolInfo("ClearCache", true, true, "", "", "", false)},
                                        {"RecycleApp", new RibbonBarToolInfo("RecycleApp", true, true, "", "", "", false)}
                                    };
                }

                return _allTools;
            }]]></body>
          </codeblock>
        </property>
        <property name="DnnLink">
          <declaration><![CDATA[protected virtual DnnTextLink DnnLink]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="135" sc="13" el="141" ec="14">UI\WebControls\DnnRibbonBarTool.cs</location>
            <body hash="382fea3c4440f505ccaf937b05d89fad"><![CDATA[{
                if ((_dnnLink == null))
                {
                    _dnnLink = new DnnTextLink();
                }
                return _dnnLink;
            }]]></body>
          </codeblock>
        </property>
        <property name="DnnLinkButton">
          <declaration><![CDATA[protected virtual DnnTextButton DnnLinkButton]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="122" sc="13" el="129" ec="14">UI\WebControls\DnnRibbonBarTool.cs</location>
            <body hash="c3c24cac06f982cba4436c18162cab95"><![CDATA[{
                if ((_dnnLinkButton == null))
                {
                    // Appending _CPCommandBtn is also assumed in the RibbonBar.ascx. If changed, one would need to change in both places.
                    _dnnLinkButton = new DnnTextButton {ID = ID + "_CPCommandBtn"};
                }
                return _dnnLinkButton;
            }]]></body>
          </codeblock>
        </property>
        <property name="NavigateUrl">
          <declaration><![CDATA[public virtual string NavigateUrl]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="74" sc="13" el="76" ec="14">UI\WebControls\DnnRibbonBarTool.cs</location>
            <body hash="8122209c5490f0ddd3fd3cec2f1f2954"><![CDATA[{
                return Utilities.GetViewStateAsString(ViewState["NavigateUrl"], Null.NullString);
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="78" sc="13" el="80" ec="14">UI\WebControls\DnnRibbonBarTool.cs</location>
            <body hash="8a4255dd2b4d3a4f94a8a417749c7e06"><![CDATA[{
                ViewState["NavigateUrl"] = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="PortalSettings">
          <declaration><![CDATA[private static PortalSettings PortalSettings]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="180" sc="13" el="182" ec="14">UI\WebControls\DnnRibbonBarTool.cs</location>
            <body hash="de88f44ddad615520ed6ac528455cb0e"><![CDATA[{
                return PortalSettings.Current;
            }]]></body>
          </codeblock>
        </property>
        <property name="Text">
          <declaration><![CDATA[public virtual string Text]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="98" sc="13" el="100" ec="14">UI\WebControls\DnnRibbonBarTool.cs</location>
            <body hash="8bb825650bd6f5461b38e8c5e397228c"><![CDATA[{
                return Utilities.GetViewStateAsString(ViewState["Text"], Null.NullString);
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="102" sc="13" el="104" ec="14">UI\WebControls\DnnRibbonBarTool.cs</location>
            <body hash="dc9e6c53e4f7e25ad23eda57795e9e26"><![CDATA[{
                ViewState["Text"] = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="ToolCssClass">
          <declaration><![CDATA[public virtual string ToolCssClass]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="86" sc="13" el="88" ec="14">UI\WebControls\DnnRibbonBarTool.cs</location>
            <body hash="e7969a1c76375bb5c7f26e351fcacd4a"><![CDATA[{
                return Utilities.GetViewStateAsString(ViewState["ToolCssClass"], Null.NullString);
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="90" sc="13" el="92" ec="14">UI\WebControls\DnnRibbonBarTool.cs</location>
            <body hash="b067d16409e22ad748808d88622c12b0"><![CDATA[{
                ViewState["ToolCssClass"] = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="ToolInfo">
          <declaration><![CDATA[public virtual RibbonBarToolInfo ToolInfo]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="58" sc="13" el="64" ec="14">UI\WebControls\DnnRibbonBarTool.cs</location>
            <body hash="39cce92882a271ce28a1cf6bd713cf65"><![CDATA[{
                if ((ViewState["ToolInfo"] == null))
                {
                    ViewState.Add("ToolInfo", new RibbonBarToolInfo());
                }
                return (RibbonBarToolInfo) ViewState["ToolInfo"];
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="66" sc="13" el="68" ec="14">UI\WebControls\DnnRibbonBarTool.cs</location>
            <body hash="291f64aea89a792183f42c9ec1edb950"><![CDATA[{
                ViewState["ToolInfo"] = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="ToolName">
          <declaration><![CDATA[public virtual string ToolName]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="188" sc="13" el="190" ec="14">UI\WebControls\DnnRibbonBarTool.cs</location>
            <body hash="0cb2cced6797e623d58ef3c77a8462e7"><![CDATA[{
                return ToolInfo.ToolName;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="192" sc="13" el="201" ec="14">UI\WebControls\DnnRibbonBarTool.cs</location>
            <body hash="49f861b227dbeb6d89c9c1cafb1ad7f4"><![CDATA[{
                if ((AllTools.ContainsKey(value)))
                {
                    ToolInfo = AllTools[value];
                }
                else
                {
                    throw new NotSupportedException("Tool not found [" + value + "]");
                }
            }]]></body>
          </codeblock>
        </property>
        <property name="ToolTip">
          <declaration><![CDATA[public virtual string ToolTip]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="110" sc="13" el="112" ec="14">UI\WebControls\DnnRibbonBarTool.cs</location>
            <body hash="32810e100f54c3a510b8241573643091"><![CDATA[{
                return Utilities.GetViewStateAsString(ViewState["ToolTip"], Null.NullString);
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="114" sc="13" el="116" ec="14">UI\WebControls\DnnRibbonBarTool.cs</location>
            <body hash="5b1868ce4ba7dcacd4779c4ef001966f"><![CDATA[{
                ViewState["ToolTip"] = value;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnRotator">
      <declaration><![CDATA[public class DnnRotator : RadRotator]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnRotator()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnRotatorItem">
      <declaration><![CDATA[public class DnnRotatorItem : RadRotatorItem]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnRotatorItem()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="31" sc="9" el="33" ec="10">UI\WebControls\DnnRotatorItem.cs</location>
            <body hash="c894abf6f9fc61cdac5bdfd4b9b1865f"><![CDATA[public DnnRotatorItem()
        {
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnRotatorItem(object dataItem) : base(dataItem)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="35" sc="9" el="37" ec="10">UI\WebControls\DnnRotatorItem.cs</location>
            <body hash="50b92bffdc72db217baa9d8a414b354d"><![CDATA[public DnnRotatorItem(object dataItem) : base(dataItem)
        {
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnScheduler">
      <declaration><![CDATA[public class DnnScheduler : RadScheduler]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnScheduler()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnSchedulerContextMenu">
      <declaration><![CDATA[public class DnnSchedulerContextMenu : RadSchedulerContextMenu]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnSchedulerContextMenu()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnSchedulerResourceStyleMapping">
      <declaration><![CDATA[public class DnnSchedulerResourceStyleMapping : ResourceStyleMapping]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnSchedulerResourceStyleMapping()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="31" sc="9" el="33" ec="10">UI\WebControls\DnnSchedulerResourceStyleMapping.cs</location>
            <body hash="30bf05eb555fe0e6d349bc861412a3cd"><![CDATA[public DnnSchedulerResourceStyleMapping()
        {
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnSchedulerResourceStyleMapping(string type, string key, string applyCssClass) : base(type, key, applyCssClass)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="35" sc="9" el="37" ec="10">UI\WebControls\DnnSchedulerResourceStyleMapping.cs</location>
            <body hash="2e77a624bdb4546653081a3fc0eaa3f9"><![CDATA[public DnnSchedulerResourceStyleMapping(string type, string key, string applyCssClass) : base(type, key, applyCssClass)
        {
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnSchedulerResourceStyleMapping(string type, string key, string text, string applyCssClass) : base(type, key, text, applyCssClass)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="39" sc="9" el="41" ec="10">UI\WebControls\DnnSchedulerResourceStyleMapping.cs</location>
            <body hash="79c00334254922847712d5694a786e8b"><![CDATA[public DnnSchedulerResourceStyleMapping(string type, string key, string text, string applyCssClass) : base(type, key, text, applyCssClass)
        {
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnSchedulerResourceType">
      <declaration><![CDATA[public class DnnSchedulerResourceType : ResourceType]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnSchedulerResourceType()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="31" sc="9" el="33" ec="10">UI\WebControls\DnnSchedulerResourceType.cs</location>
            <body hash="a7b83841fb973c6828ba805babdad447"><![CDATA[public DnnSchedulerResourceType()
        {
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnSchedulerResourceType(string resourceTypeName) : base(resourceTypeName)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="35" sc="9" el="37" ec="10">UI\WebControls\DnnSchedulerResourceType.cs</location>
            <body hash="d035959c5ac5bae15d50d989f9a54f79"><![CDATA[public DnnSchedulerResourceType(string resourceTypeName) : base(resourceTypeName)
        {
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnSchedulerResourceType(string resourceTypeName, bool allowMultipleResourceValues) : base(resourceTypeName, allowMultipleResourceValues)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="39" sc="9" el="41" ec="10">UI\WebControls\DnnSchedulerResourceType.cs</location>
            <body hash="b75647fd477d7aa2ece659debce57fc0"><![CDATA[public DnnSchedulerResourceType(string resourceTypeName, bool allowMultipleResourceValues) : base(resourceTypeName, allowMultipleResourceValues)
        {
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnScriptBlock">
      <declaration><![CDATA[public class DnnScriptBlock : RadScriptBlock]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnScriptBlock()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnScriptManager">
      <declaration><![CDATA[internal class DnnScriptManager : RadScriptManager]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnScriptManager()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnSiteMap">
      <declaration><![CDATA[public class DnnSiteMap : RadSiteMap]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnSiteMap()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnSiteMapLevelSetting">
      <declaration><![CDATA[public class DnnSiteMapLevelSetting : SiteMapLevelSetting]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnSiteMapLevelSetting()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="31" sc="9" el="33" ec="10">UI\WebControls\DnnSiteMapLevelSetting.cs</location>
            <body hash="69990b8a7803baea3a468e492248dc40"><![CDATA[public DnnSiteMapLevelSetting()
        {
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnSiteMapLevelSetting(int level) : base(level)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="35" sc="9" el="37" ec="10">UI\WebControls\DnnSiteMapLevelSetting.cs</location>
            <body hash="358842d00fa2cfba53e1dfc4feacd5b5"><![CDATA[public DnnSiteMapLevelSetting(int level) : base(level)
        {
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnSiteMapLevelSetting(int level, SiteMapLayout layout) : base(level, layout)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="39" sc="9" el="41" ec="10">UI\WebControls\DnnSiteMapLevelSetting.cs</location>
            <body hash="592f0a43bc7be63c0bedecfa14718187"><![CDATA[public DnnSiteMapLevelSetting(int level, SiteMapLayout layout) : base(level, layout)
        {
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnSiteMapLevelSetting(SiteMapLayout layout) : base(layout)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="43" sc="9" el="45" ec="10">UI\WebControls\DnnSiteMapLevelSetting.cs</location>
            <body hash="21a503def807ac0bb56271dc68dc7e1a"><![CDATA[public DnnSiteMapLevelSetting(SiteMapLayout layout) : base(layout)
        {
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnSiteMapNode">
      <declaration><![CDATA[public class DnnSiteMapNode : RadSiteMapNode]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnSiteMapNode()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="31" sc="9" el="33" ec="10">UI\WebControls\DnnSiteMapNode.cs</location>
            <body hash="567349d80be0a4e3e58122e60ed6de96"><![CDATA[public DnnSiteMapNode()
        {
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnSiteMapNode(string text, string navigateUrl) : base(text, navigateUrl)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="35" sc="9" el="37" ec="10">UI\WebControls\DnnSiteMapNode.cs</location>
            <body hash="16ed1489f6e24606895594d8e5ca5574"><![CDATA[public DnnSiteMapNode(string text, string navigateUrl) : base(text, navigateUrl)
        {
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnSiteMapNodeBinding">
      <declaration><![CDATA[public class DnnSiteMapNodeBinding : RadSiteMapNodeBinding]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnSiteMapNodeBinding()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnSkinComboBox">
      <declaration><![CDATA[public class DnnSkinComboBox : DnnComboBox]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnSkinComboBox()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="65" sc="9" el="68" ec="10">UI\WebControls\DnnSkinComboBox.cs</location>
            <body hash="080a2997c8915789be1bf7312d4e7fdf"><![CDATA[public DnnSkinComboBox()
        {
            PortalId = Null.NullInteger;
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="AttachEvents">
          <declaration><![CDATA[private void AttachEvents()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="101" sc="9" el="138" ec="10">UI\WebControls\DnnSkinComboBox.cs</location>
            <body hash="47fac34648a089e7dab50915505cae6a"><![CDATA[{
            if (!UserController.Instance.GetCurrentUserInfo().IsSuperUser)
            {
                return;
            }

            Attributes.Add("PortalPath", Portal != null ? Portal.HomeDirectory : string.Empty);
            Attributes.Add("HostPath", Globals.HostPath);

            OnClientSelectedIndexChanged = "selectedIndexChangedMethod";
            var indexChangedMethod = @"function selectedIndexChangedMethod(sender, eventArgs){
    var value = eventArgs.get_item().get_value();
    value = value.replace('[L]', sender.get_attributes().getAttribute('PortalPath'));
    value = value.replace('[G]', sender.get_attributes().getAttribute('HostPath'));
    sender.get_inputDomElement().title = value;
}";
            Page.ClientScript.RegisterClientScriptBlock(GetType(), "OnClientSelectedIndexChanged", indexChangedMethod, true);

            foreach (RadComboBoxItem item in Items)
            {
                if (string.IsNullOrEmpty(item.Value))
                {
                    continue;
                }

                var tooltip = item.Value.Replace("[G]", Globals.HostPath);
                if (Portal != null)
                {
                    tooltip = tooltip.Replace("[L]", Portal.HomeDirectory);
                }

                item.ToolTip = tooltip;
                if (item.Value.Equals(SelectedValue))
                {
                    ToolTip = tooltip;
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="75" sc="9" el="94" ec="10">UI\WebControls\DnnSkinComboBox.cs</location>
            <body hash="23f58fff10c4c4b272096ed975356c6e"><![CDATA[{
            base.OnLoad(e);

            DataTextField = "Key";
            DataValueField = "Value";

            if (!Page.IsPostBack && !string.IsNullOrEmpty(RootPath))
            {
                DataSource = SkinController.GetSkins(Portal, RootPath, Scope)
                                           .ToDictionary(skin => skin.Key, skin => skin.Value);
                DataBind(SelectedValue);

                if (IncludeNoneSpecificItem)
                {
                    InsertItem(0, NoneSpecificText, string.Empty);
                }
            }

            AttachEvents();
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="IncludeNoneSpecificItem">
          <declaration><![CDATA[public bool IncludeNoneSpecificItem]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="NoneSpecificText">
          <declaration><![CDATA[public string NoneSpecificText]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Portal">
          <declaration><![CDATA[private PortalInfo Portal]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="PortalId">
          <declaration><![CDATA[public int PortalId]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="RootPath">
          <declaration><![CDATA[public string RootPath]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Scope">
          <declaration><![CDATA[public SkinScope Scope]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnSlider">
      <declaration><![CDATA[public class DnnSlider : RadSlider]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnSlider()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnSliderItem">
      <declaration><![CDATA[public class DnnSliderItem : RadSliderItem]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnSliderItem()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="31" sc="9" el="33" ec="10">UI\WebControls\DnnSliderItem.cs</location>
            <body hash="fa5e40e6a0c0d43d13da02d849b324c8"><![CDATA[public DnnSliderItem()
        {
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnSliderItem(string text) : base(text)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="35" sc="9" el="37" ec="10">UI\WebControls\DnnSliderItem.cs</location>
            <body hash="dd35ea6163be9500da0f3edd5c1cf80b"><![CDATA[public DnnSliderItem(string text) : base(text)
        {
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnSliderItem(string text, string value) : base(text, value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="39" sc="9" el="41" ec="10">UI\WebControls\DnnSliderItem.cs</location>
            <body hash="f83373eea9b1171ef218c03a3049e986"><![CDATA[public DnnSliderItem(string text, string value) : base(text, value)
        {
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnSpell">
      <declaration><![CDATA[public class DnnSpell : RadSpell]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnSpell()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnSplitBar">
      <declaration><![CDATA[public class DnnSplitBar : RadSplitBar]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnSplitBar()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnSplitPane">
      <declaration><![CDATA[public class DnnSplitPane : RadPane]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnSplitPane()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnSplitSlidingPane">
      <declaration><![CDATA[public class DnnSplitSlidingPane : RadSlidingPane]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnSplitSlidingPane()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnSplitSlidingZone">
      <declaration><![CDATA[public class DnnSplitSlidingZone : RadSlidingZone]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnSplitSlidingZone()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnSplitter">
      <declaration><![CDATA[public class DnnSplitter : RadSplitter]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnSplitter()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnTab">
      <declaration><![CDATA[public class DnnTab : System.Web.UI.WebControls.WebControl]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnTab() : base("div")]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="33" sc="9" el="35" ec="10">UI\WebControls\DnnTab.cs</location>
            <body hash="70ee7e4da8792bde7e7e67e11d1a6f62"><![CDATA[public DnnTab() : base("div")
        {
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="CreateChildControls">
          <declaration><![CDATA[protected override void CreateChildControls()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="53" sc="9" el="60" ec="10">UI\WebControls\DnnTab.cs</location>
            <body hash="2a35a30bb4bea202ee7767100158c3ec"><![CDATA[{
            Controls.Clear();

            if (Content != null)
            {
                Content.InstantiateIn(this);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="FindControl">
          <declaration><![CDATA[public override System.Web.UI.Control FindControl(string id)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="63" sc="9" el="66" ec="10">UI\WebControls\DnnTab.cs</location>
            <body hash="44e97ba0ead7c2d29dd09b98fae3d80e"><![CDATA[{
            EnsureChildControls();
            return base.FindControl(id);
        }]]></body>
          </codeblock>
        </method>
        <method name="Render">
          <declaration><![CDATA[protected override void Render(System.Web.UI.HtmlTextWriter writer)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="69" sc="9" el="73" ec="10">UI\WebControls\DnnTab.cs</location>
            <body hash="f7131c131222e8daf71ca07df7f00d79"><![CDATA[{
            base.RenderBeginTag(writer);
            base.RenderChildren(writer);
            base.RenderEndTag(writer);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="Content">
          <declaration><![CDATA[public virtual System.Web.UI.ITemplate Content]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Controls">
          <declaration><![CDATA[public override System.Web.UI.ControlCollection Controls]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="40" sc="13" el="43" ec="14">UI\WebControls\DnnTab.cs</location>
            <body hash="9454f31a88317c388a43ae1cd4816179"><![CDATA[{
                EnsureChildControls();
                return base.Controls;
            }]]></body>
          </codeblock>
        </property>
        <property name="Header">
          <declaration><![CDATA[public virtual System.Web.UI.ITemplate Header]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnTabCollection">
      <declaration><![CDATA[public class DnnTabCollection : System.Web.UI.ControlCollection]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnTabCollection(System.Web.UI.Control owner) : base(owner)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="33" sc="9" el="35" ec="10">UI\WebControls\DnnTabCollection.cs</location>
            <body hash="05966b674416023190ac35b87e70b75e"><![CDATA[public DnnTabCollection(Control owner) : base(owner)
        {
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="Add">
          <declaration><![CDATA[public override void Add(System.Web.UI.Control child)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="46" sc="9" el="55" ec="10">UI\WebControls\DnnTabCollection.cs</location>
            <body hash="a1496e6a5f071e41edb83c45ee3de82e"><![CDATA[{
            if (child is DnnTab)
            {
                base.Add(child);
            }
            else
            {
                throw new ArgumentException("DnnTabCollection must contain controls of type DnnTab");
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="AddAt">
          <declaration><![CDATA[public override void AddAt(int index, System.Web.UI.Control child)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="58" sc="9" el="67" ec="10">UI\WebControls\DnnTabCollection.cs</location>
            <body hash="b8fd1e4fbdad362539b6ef8cd57591cb"><![CDATA[{
            if (child is DnnTab)
            {
                base.AddAt(index, child);
            }
            else
            {
                throw new ArgumentException("DnnTabCollection must contain controls of type DnnTab");
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="Item">
          <declaration><![CDATA[public new DnnTab this[int index]]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="40" sc="13" el="42" ec="14">UI\WebControls\DnnTabCollection.cs</location>
            <body hash="82ab19357768001a90d6c45caa2905c3"><![CDATA[{
                return (DnnTab) base[index];
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnTabPanel">
      <declaration><![CDATA[public class DnnTabPanel : System.Web.UI.WebControls.WebControl]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnTabPanel()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="CreateChildControls">
          <declaration><![CDATA[protected override void CreateChildControls()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="86" sc="9" el="99" ec="10">UI\WebControls\DnnTabPanel.cs</location>
            <body hash="d4e97f3b50887c6bc7b86e6f816b03da"><![CDATA[{
            Controls.Clear();

            TelerikTabs.ID = ID + "_Tabs";
            TelerikTabs.Skin = "Office2007";
            TelerikTabs.EnableEmbeddedSkins = true;

            TelerikPages.ID = ID + "_Pages";

            TelerikTabs.MultiPageID = TelerikPages.ID;

            Controls.Add(TelerikTabs);
            Controls.Add(TelerikPages);
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="81" sc="9" el="83" ec="10">UI\WebControls\DnnTabPanel.cs</location>
            <body hash="8b1b2ebba22d67e398b76eb1d57026c6"><![CDATA[{
            base.EnsureChildControls();
        }]]></body>
          </codeblock>
        </method>
        <method name="OnPreRender">
          <declaration><![CDATA[protected override void OnPreRender(System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="102" sc="9" el="128" ec="10">UI\WebControls\DnnTabPanel.cs</location>
            <body hash="64787b3c167ff7854ea1f2a1289a4a31"><![CDATA[{
            if ((!Page.IsPostBack))
            {
                TelerikTabs.SelectedIndex = 0;
                TelerikPages.SelectedIndex = 0;

                int idIndex = 0;

                foreach (DnnTab t in Tabs)
                {
                    RadTab tab = new RadTab();
                    tab.TabTemplate = t.Header;
                    RadPageView pageView = new RadPageView();
                    pageView.Controls.Add(t);

                    tab.PageViewID = "PV_" + idIndex;
                    pageView.ID = "PV_" + idIndex;

                    TelerikTabs.Tabs.Add(tab);
                    TelerikPages.PageViews.Add(pageView);

                    idIndex = idIndex + 1;
                }
            }

            base.OnPreRender(e);
        }]]></body>
          </codeblock>
        </method>
        <method name="Render">
          <declaration><![CDATA[protected override void Render(System.Web.UI.HtmlTextWriter writer)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="131" sc="9" el="133" ec="10">UI\WebControls\DnnTabPanel.cs</location>
            <body hash="1342de0e357460ce762a83ba287578fd"><![CDATA[{
            base.Render(writer);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_Tabs">
          <declaration><![CDATA[private DnnTabCollection _Tabs;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_TelerikPages">
          <declaration><![CDATA[private RadMultiPage _TelerikPages;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_TelerikTabs">
          <declaration><![CDATA[private RadTabStrip _TelerikTabs;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="Tabs">
          <declaration><![CDATA[public DnnTabCollection Tabs]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="70" sc="13" el="77" ec="14">UI\WebControls\DnnTabPanel.cs</location>
            <body hash="39cad4c1538ffe6946b08242e0ba3dce"><![CDATA[{
                if (_Tabs == null)
                {
                    _Tabs = new DnnTabCollection(this);
                }

                return _Tabs;
            }]]></body>
          </codeblock>
        </property>
        <property name="TelerikPages">
          <declaration><![CDATA[private RadMultiPage TelerikPages]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="57" sc="13" el="64" ec="14">UI\WebControls\DnnTabPanel.cs</location>
            <body hash="3108cb6821eaaee84c5745484a655834"><![CDATA[{
                if (_TelerikPages == null)
                {
                    _TelerikPages = new RadMultiPage();
                }

                return _TelerikPages;
            }]]></body>
          </codeblock>
        </property>
        <property name="TelerikTabs">
          <declaration><![CDATA[private RadTabStrip TelerikTabs]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="44" sc="13" el="51" ec="14">UI\WebControls\DnnTabPanel.cs</location>
            <body hash="12d4fa26d782f5905e05a8701fa97162"><![CDATA[{
                if (_TelerikTabs == null)
                {
                    _TelerikTabs = new RadTabStrip();
                }

                return _TelerikTabs;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnTabStrip">
      <declaration><![CDATA[public class DnnTabStrip : RadTabStrip]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnTabStrip()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="35" sc="9" el="38" ec="10">UI\WebControls\DnnTabStrip.cs</location>
            <body hash="a069090918252cafc03cfd5aafced412"><![CDATA[{
            base.OnInit(e);
            Utilities.ApplySkin(this);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnTagCloud">
      <declaration><![CDATA[public class DnnTagCloud : RadTagCloud]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnTagCloud()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="OnItemDataBound">
          <declaration><![CDATA[protected void OnItemDataBound(DnnTagCloudItem item)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="32" sc="9" el="34" ec="10">UI\WebControls\DnnTagCloud.cs</location>
            <body hash="e3bd0bd1b6e37eb42d6a9828f462f19b"><![CDATA[{
            base.OnItemDataBound(item);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnTagCloudItem">
      <declaration><![CDATA[public class DnnTagCloudItem : RadTagCloudItem]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnTagCloudItem()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="31" sc="9" el="33" ec="10">UI\WebControls\DnnTagCloudItem.cs</location>
            <body hash="828dff5a28cf4fbb13ee8f2776dd50fd"><![CDATA[public DnnTagCloudItem()
        {
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnTagCloudItem(string text) : base(text)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="35" sc="9" el="37" ec="10">UI\WebControls\DnnTagCloudItem.cs</location>
            <body hash="d390cf6835a10b3a5d8439aeed60a1a3"><![CDATA[public DnnTagCloudItem(string text) : base(text)
        {
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnTextBox">
      <declaration><![CDATA[public class DnnTextBox : RadTextBox]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnTextBox()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnTextButton">
      <declaration><![CDATA[public class DnnTextButton : System.Web.UI.WebControls.LinkButton, ILocalizable]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private bool _localize = true;]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="35" sc="9" el="35" ec="39">UI\WebControls\DnnTextButton.cs</location>
            <body hash="b24348cd5aa4ddf90f133e03dabe85ad"><![CDATA[private bool _localize = true]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="LocalizeStrings">
          <declaration><![CDATA[public virtual void LocalizeStrings()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="140" sc="9" el="163" ec="10">UI\WebControls\DnnTextButton.cs</location>
            <body hash="2d86c0e922f2df1b72054dd71a32b2b9"><![CDATA[{
            if ((Localize))
            {
                if ((!string.IsNullOrEmpty(ToolTip)))
                {
                    ToolTip = Localization.GetString(ToolTip, LocalResourceFile);
                }

                if ((!string.IsNullOrEmpty(Text)))
                {
                    Text = Localization.GetString(Text, LocalResourceFile);

                    if ((string.IsNullOrEmpty(ToolTip)))
                    {
                        ToolTip = Localization.GetString(string.Format("{0}.ToolTip", Text), LocalResourceFile);
                    }

                    if ((string.IsNullOrEmpty(ToolTip)))
                    {
                        ToolTip = Text;
                    }
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnPreRender">
          <declaration><![CDATA[protected override void OnPreRender(System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="106" sc="9" el="110" ec="10">UI\WebControls\DnnTextButton.cs</location>
            <body hash="dacd2a41c6652d610a14cc67d79cb667"><![CDATA[{
            base.OnPreRender(e);

            LocalResourceFile = Utilities.GetLocalResourceFile(this);
        }]]></body>
          </codeblock>
        </method>
        <method name="Render">
          <declaration><![CDATA[protected override void Render(System.Web.UI.HtmlTextWriter writer)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="113" sc="9" el="121" ec="10">UI\WebControls\DnnTextButton.cs</location>
            <body hash="7605cdbc506db17516392245239b6f27"><![CDATA[{
            LocalizeStrings();
            if (!Enabled && !string.IsNullOrEmpty(DisabledCssClass))
            {
                CssClass = DisabledCssClass;
            }
            writer.AddAttribute("class", CssClass.Trim());
            base.Render(writer);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_localize">
          <declaration><![CDATA[private bool _localize = true;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="ConfirmMessage">
          <declaration><![CDATA[public string ConfirmMessage]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="46" sc="13" el="48" ec="14">UI\WebControls\DnnTextButton.cs</location>
            <body hash="b3f60faf7acd2cf7514e70aca3206345"><![CDATA[{
                return ViewState["ConfirmMessage"] == null ? string.Empty : (string) ViewState["ConfirmMessage"];
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="50" sc="13" el="52" ec="14">UI\WebControls\DnnTextButton.cs</location>
            <body hash="946474c48c9cab94e54cd15fdd49b9aa"><![CDATA[{
                ViewState["ConfirmMessage"] = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="CssClass">
          <declaration><![CDATA[public override string CssClass]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="62" sc="13" el="64" ec="14">UI\WebControls\DnnTextButton.cs</location>
            <body hash="1aea95097909ff8f50733d977f49773a"><![CDATA[{
                return ViewState["CssClass"] == null ? string.Empty : (string) ViewState["CssClass"];
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="66" sc="13" el="68" ec="14">UI\WebControls\DnnTextButton.cs</location>
            <body hash="f12a5b454c270d2c3ebb9c7477ca10fe"><![CDATA[{
                ViewState["CssClass"] = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="DisabledCssClass">
          <declaration><![CDATA[public new string DisabledCssClass]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="78" sc="13" el="80" ec="14">UI\WebControls\DnnTextButton.cs</location>
            <body hash="21fde0e730c52d2cc1c09047c04a1672"><![CDATA[{
                return ViewState["DisabledCssClass"] == null ? string.Empty : (string) ViewState["DisabledCssClass"];
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="82" sc="13" el="84" ec="14">UI\WebControls\DnnTextButton.cs</location>
            <body hash="bdfc97101fa8b5551d08172d46da84a5"><![CDATA[{
                ViewState["DisabledCssClass"] = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="Localize">
          <declaration><![CDATA[public bool Localize]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="128" sc="13" el="130" ec="14">UI\WebControls\DnnTextButton.cs</location>
            <body hash="c62d334545a882a2a299f0633bdbb890"><![CDATA[{
                return _localize;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="132" sc="13" el="134" ec="14">UI\WebControls\DnnTextButton.cs</location>
            <body hash="813e2e62bb125b8b10afa2a23aaa0b90"><![CDATA[{
                _localize = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="LocalResourceFile">
          <declaration><![CDATA[public string LocalResourceFile]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Text">
          <declaration><![CDATA[public new string Text]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="94" sc="13" el="96" ec="14">UI\WebControls\DnnTextButton.cs</location>
            <body hash="761f1f706c0e9ee2adb8ff61697b55bc"><![CDATA[{
                return ViewState["Text"] == null ? string.Empty : (string) ViewState["Text"];
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="98" sc="13" el="100" ec="14">UI\WebControls\DnnTextButton.cs</location>
            <body hash="dc9e6c53e4f7e25ad23eda57795e9e26"><![CDATA[{
                ViewState["Text"] = value;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnTextLink">
      <declaration><![CDATA[public class DnnTextLink : System.Web.UI.WebControls.WebControl, ILocalizable]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private bool _localize = true;]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="35" sc="9" el="42" ec="10">UI\WebControls\DnnTextLink.cs</location>
            <body hash="283892945a6b48cfbffeb874b01d7949"><![CDATA[private bool _localize = true;
        private HyperLink _textHyperlinkControl;

        public DnnTextLink() : base("span")
        {
            CssClass = "dnnTextLink";
            DisabledCssClass = "dnnTextLink disabled";
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="CreateChildControls">
          <declaration><![CDATA[protected override void CreateChildControls()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="137" sc="9" el="140" ec="10">UI\WebControls\DnnTextLink.cs</location>
            <body hash="b50a1009268379255b99e1fcd1a1c417"><![CDATA[{
            Controls.Clear();
            Controls.Add(TextHyperlinkControl);
        }]]></body>
          </codeblock>
        </method>
        <method name="LocalizeStrings">
          <declaration><![CDATA[public virtual void LocalizeStrings()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="187" sc="9" el="210" ec="10">UI\WebControls\DnnTextLink.cs</location>
            <body hash="2d86c0e922f2df1b72054dd71a32b2b9"><![CDATA[{
            if ((Localize))
            {
                if ((!string.IsNullOrEmpty(ToolTip)))
                {
                    ToolTip = Localization.GetString(ToolTip, LocalResourceFile);
                }

                if ((!string.IsNullOrEmpty(Text)))
                {
                    Text = Localization.GetString(Text, LocalResourceFile);

                    if ((string.IsNullOrEmpty(ToolTip)))
                    {
                        ToolTip = Localization.GetString(string.Format("{0}.ToolTip", Text), LocalResourceFile);
                    }

                    if ((string.IsNullOrEmpty(ToolTip)))
                    {
                        ToolTip = Text;
                    }
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnPreRender">
          <declaration><![CDATA[protected override void OnPreRender(System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="145" sc="9" el="148" ec="10">UI\WebControls\DnnTextLink.cs</location>
            <body hash="28617cbf340629c44366dabf2669a8b0"><![CDATA[{
            base.OnPreRender(e);
            LocalResourceFile = Utilities.GetLocalResourceFile(this);
        }]]></body>
          </codeblock>
        </method>
        <method name="Render">
          <declaration><![CDATA[protected override void Render(System.Web.UI.HtmlTextWriter writer)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="151" sc="9" el="166" ec="10">UI\WebControls\DnnTextLink.cs</location>
            <body hash="4fe4186af4a937697c8fdf26e1459881"><![CDATA[{
            LocalizeStrings();

            if ((!Enabled))
            {
                if ((!string.IsNullOrEmpty(DisabledCssClass)))
                {
                    CssClass = DisabledCssClass;
                }
                NavigateUrl = "javascript:void(0);";
            }

            base.RenderBeginTag(writer);
            base.RenderChildren(writer);
            base.RenderEndTag(writer);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_localize">
          <declaration><![CDATA[private bool _localize = true;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_textHyperlinkControl">
          <declaration><![CDATA[private System.Web.UI.WebControls.HyperLink _textHyperlinkControl;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="DisabledCssClass">
          <declaration><![CDATA[public new string DisabledCssClass]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="115" sc="13" el="117" ec="14">UI\WebControls\DnnTextLink.cs</location>
            <body hash="21fde0e730c52d2cc1c09047c04a1672"><![CDATA[{
                return ViewState["DisabledCssClass"] == null ? string.Empty : (string) ViewState["DisabledCssClass"];
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="119" sc="13" el="121" ec="14">UI\WebControls\DnnTextLink.cs</location>
            <body hash="bdfc97101fa8b5551d08172d46da84a5"><![CDATA[{
                ViewState["DisabledCssClass"] = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="Localize">
          <declaration><![CDATA[public bool Localize]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="175" sc="13" el="177" ec="14">UI\WebControls\DnnTextLink.cs</location>
            <body hash="c62d334545a882a2a299f0633bdbb890"><![CDATA[{
                return _localize;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="179" sc="13" el="181" ec="14">UI\WebControls\DnnTextLink.cs</location>
            <body hash="813e2e62bb125b8b10afa2a23aaa0b90"><![CDATA[{
                _localize = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="LocalResourceFile">
          <declaration><![CDATA[public string LocalResourceFile]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="NavigateUrl">
          <declaration><![CDATA[public string NavigateUrl]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="83" sc="13" el="85" ec="14">UI\WebControls\DnnTextLink.cs</location>
            <body hash="947148f7d6169faa723bffa3d19f5492"><![CDATA[{
                return TextHyperlinkControl.NavigateUrl;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="87" sc="13" el="89" ec="14">UI\WebControls\DnnTextLink.cs</location>
            <body hash="2b7c9c1da8c85c26511ac0784ce46c32"><![CDATA[{
                TextHyperlinkControl.NavigateUrl = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="Target">
          <declaration><![CDATA[public string Target]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="99" sc="13" el="101" ec="14">UI\WebControls\DnnTextLink.cs</location>
            <body hash="51e084f9ca34a17db2cb1fa810e70f88"><![CDATA[{
                return TextHyperlinkControl.Target;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="103" sc="13" el="105" ec="14">UI\WebControls\DnnTextLink.cs</location>
            <body hash="7073559c184e118eb28c9d13b2728467"><![CDATA[{
                TextHyperlinkControl.Target = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="Text">
          <declaration><![CDATA[public string Text]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="51" sc="13" el="53" ec="14">UI\WebControls\DnnTextLink.cs</location>
            <body hash="81560eb6751c10346d3384287d09478a"><![CDATA[{
                return TextHyperlinkControl.Text;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="55" sc="13" el="57" ec="14">UI\WebControls\DnnTextLink.cs</location>
            <body hash="d9156747912a5435eb7410247b1d33e7"><![CDATA[{
                TextHyperlinkControl.Text = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="TextHyperlinkControl">
          <declaration><![CDATA[private System.Web.UI.WebControls.HyperLink TextHyperlinkControl]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="127" sc="13" el="133" ec="14">UI\WebControls\DnnTextLink.cs</location>
            <body hash="4923ebbba5ba708f1d51811139fb3a84"><![CDATA[{
                if (_textHyperlinkControl == null)
                {
                    _textHyperlinkControl = new HyperLink();
                }
                return _textHyperlinkControl;
            }]]></body>
          </codeblock>
        </property>
        <property name="ToolTip">
          <declaration><![CDATA[public override string ToolTip]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="67" sc="13" el="69" ec="14">UI\WebControls\DnnTextLink.cs</location>
            <body hash="2f38a991bb466bf79ce739f247ccdffa"><![CDATA[{
                return TextHyperlinkControl.ToolTip;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="71" sc="13" el="73" ec="14">UI\WebControls\DnnTextLink.cs</location>
            <body hash="548478054a92e54a2f34322b2c5bfabc"><![CDATA[{
                TextHyperlinkControl.ToolTip = value;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnTicker">
      <declaration><![CDATA[public class DnnTicker : RadTicker]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnTicker()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnTickerItem">
      <declaration><![CDATA[public class DnnTickerItem : RadTickerItem]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnTickerItem()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="31" sc="9" el="33" ec="10">UI\WebControls\DnnTickerItem.cs</location>
            <body hash="ec2ab206fc3b70fb2a26091f5ccb3641"><![CDATA[public DnnTickerItem()
        {
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnTickerItem(string text) : base(text)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="35" sc="9" el="37" ec="10">UI\WebControls\DnnTickerItem.cs</location>
            <body hash="346b542b8f2bebc57d22c2a54f34698b"><![CDATA[public DnnTickerItem(string text) : base(text)
        {
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnTickerItem(string text, string navigateUrl) : base(text, navigateUrl)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="39" sc="9" el="41" ec="10">UI\WebControls\DnnTickerItem.cs</location>
            <body hash="d3cc271583bda5d383ddf0448364f437"><![CDATA[public DnnTickerItem(string text, string navigateUrl) : base(text, navigateUrl)
        {
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnTimePicker">
      <declaration><![CDATA[public class DnnTimePicker : RadTimePicker]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnTimePicker()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="35" sc="3" el="39" ec="4">UI\WebControls\DnnTimePicker.cs</location>
            <body hash="25a0a4db813872e3eaf9f436d46e131c"><![CDATA[{
			base.OnInit(e);
			base.EnableEmbeddedBaseStylesheet = true;
			Utilities.ApplySkin(this, string.Empty, "DatePicker");
		}]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnTimeView">
      <declaration><![CDATA[public class DnnTimeView : RadTimeView]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnTimeView()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnTimeZoneComboBox">
      <declaration><![CDATA[public class DnnTimeZoneComboBox : System.Web.UI.WebControls.DropDownList]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnTimeZoneComboBox()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="35" sc="9" el="44" ec="10">UI\WebControls\DnnTimeZoneComboBox.cs</location>
            <body hash="d8e705211a5a1d4927436b6af525c40d"><![CDATA[{
            //Utilities.ApplySkin(this);
            base.OnInit(e);

            this.DataTextField = "DisplayName";
            this.DataValueField = "Id";

            this.DataSource = TimeZoneInfo.GetSystemTimeZones();
			this.DataBind();
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnTimeZoneEditControl">
      <declaration><![CDATA[public class DnnTimeZoneEditControl : TextEditControl]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnTimeZoneEditControl()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="41" sc="9" el="43" ec="10">UI\WebControls\DnnTimeZoneEditControl.cs</location>
            <body hash="886d777afafac9a819ffbac2231c4249"><![CDATA[public DnnTimeZoneEditControl()
        {
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="CreateChildControls">
          <declaration><![CDATA[protected override void CreateChildControls()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="48" sc="9" el="56" ec="10">UI\WebControls\DnnTimeZoneEditControl.cs</location>
            <body hash="881b920098ac77a1373769f9dab4ef09"><![CDATA[{
            TimeZones = new DnnTimeZoneComboBox();
            TimeZones.ViewStateMode = ViewStateMode.Disabled;

            Controls.Clear();
            Controls.Add(TimeZones);

            base.CreateChildControls();
        }]]></body>
          </codeblock>
        </method>
        <method name="LoadPostData">
          <declaration><![CDATA[public override bool LoadPostData(string postDataKey, NameValueCollection postCollection)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="59" sc="9" el="70" ec="10">UI\WebControls\DnnTimeZoneEditControl.cs</location>
            <body hash="1ebe9f216f891be4028eac484a58cf08"><![CDATA[{
            bool dataChanged = false;
            string presentValue = StringValue;
            string postedValue = TimeZones.SelectedValue;
            if (!presentValue.Equals(postedValue))
            {
                Value = postedValue;
                dataChanged = true;
            }

            return dataChanged;
        }]]></body>
          </codeblock>
        </method>
        <method name="OnDataChanged">
          <declaration><![CDATA[protected override void OnDataChanged(System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="73" sc="9" el="79" ec="10">UI\WebControls\DnnTimeZoneEditControl.cs</location>
            <body hash="b6ff01999b1bf00e3aceedfd99a6732e"><![CDATA[{
            var args = new PropertyEditorEventArgs(Name);
            args.Value = TimeZoneInfo.FindSystemTimeZoneById(StringValue);
            args.OldValue = OldStringValue;
            args.StringValue = StringValue;
            base.OnValueChanged(args);
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="82" sc="9" el="85" ec="10">UI\WebControls\DnnTimeZoneEditControl.cs</location>
            <body hash="a6b3f7009441f18a8d5494d716fe41f0"><![CDATA[{
            this.EnsureChildControls();
            base.OnInit(e);
        }]]></body>
          </codeblock>
        </method>
        <method name="OnPreRender">
          <declaration><![CDATA[protected override void OnPreRender(System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="88" sc="9" el="97" ec="10">UI\WebControls\DnnTimeZoneEditControl.cs</location>
            <body hash="91f63768be336cfeaf7ce0e7d421b4dd"><![CDATA[{
            base.OnPreRender(e);

            TimeZones.DataBind(StringValue);

            if ((Page != null) && this.EditMode == PropertyEditorMode.Edit)
            {
                this.Page.RegisterRequiresPostBack(this);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="RenderEditMode">
          <declaration><![CDATA[protected override void RenderEditMode(System.Web.UI.HtmlTextWriter writer)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="100" sc="9" el="102" ec="10">UI\WebControls\DnnTimeZoneEditControl.cs</location>
            <body hash="561efa7f9895a43a295a0e8682c946e1"><![CDATA[{
            this.RenderChildren(writer);
        }]]></body>
          </codeblock>
        </method>
        <method name="RenderViewMode">
          <declaration><![CDATA[protected override void RenderViewMode(System.Web.UI.HtmlTextWriter writer)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="105" sc="9" el="111" ec="10">UI\WebControls\DnnTimeZoneEditControl.cs</location>
            <body hash="202a96e4ec8382d019ac4d9596fed3e2"><![CDATA[{
            string propValue = this.Page.Server.HtmlDecode(Convert.ToString(this.Value));
            ControlStyle.AddAttributesToRender(writer);
            writer.RenderBeginTag(HtmlTextWriterTag.Span);
            writer.Write(propValue);
            writer.RenderEndTag();
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="TimeZones">
          <declaration><![CDATA[private DnnTimeZoneComboBox TimeZones;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnToolBar">
      <declaration><![CDATA[public class DnnToolBar : RadToolBar]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnToolBar()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnToolBarButton">
      <declaration><![CDATA[public class DnnToolBarButton : RadToolBarButton]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnToolBarButton()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="31" sc="9" el="33" ec="10">UI\WebControls\DnnToolBarButton.cs</location>
            <body hash="9e1c84a7500ea6c3f18e90c9aedec208"><![CDATA[public DnnToolBarButton()
        {
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnToolBarButton(string text) : base(text)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="35" sc="9" el="37" ec="10">UI\WebControls\DnnToolBarButton.cs</location>
            <body hash="2823941bf6c83a2c22f356eddad0749b"><![CDATA[public DnnToolBarButton(string text) : base(text)
        {
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnToolBarButton(string text, bool isChecked, string group) : base(text, isChecked, group)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="39" sc="9" el="41" ec="10">UI\WebControls\DnnToolBarButton.cs</location>
            <body hash="588d6922aecc96ec1ea8f27fe37c727f"><![CDATA[public DnnToolBarButton(string text, bool isChecked, string @group) : base(text, isChecked, @group)
        {
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnToolBarDropDown">
      <declaration><![CDATA[public class DnnToolBarDropDown : RadToolBarDropDown]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnToolBarDropDown()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="31" sc="9" el="33" ec="10">UI\WebControls\DnnToolBarDropDown.cs</location>
            <body hash="d625bd3e1beb56b638dd2d5d8aa54ddc"><![CDATA[public DnnToolBarDropDown()
        {
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnToolBarDropDown(string text) : base(text)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="35" sc="9" el="37" ec="10">UI\WebControls\DnnToolBarDropDown.cs</location>
            <body hash="46929e6a33c417b592f8e97ed9d8d622"><![CDATA[public DnnToolBarDropDown(string text) : base(text)
        {
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnToolBarSplitButton">
      <declaration><![CDATA[public class DnnToolBarSplitButton : RadToolBarSplitButton]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnToolBarSplitButton()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="31" sc="9" el="33" ec="10">UI\WebControls\DnnToolBarSplitButton.cs</location>
            <body hash="f4950d52b64eb1911e1eee1339004026"><![CDATA[public DnnToolBarSplitButton()
        {
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnToolBarSplitButton(string text) : base(text)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="35" sc="9" el="37" ec="10">UI\WebControls\DnnToolBarSplitButton.cs</location>
            <body hash="56c4c8f461d346d9f2c817cb0919c833"><![CDATA[public DnnToolBarSplitButton(string text) : base(text)
        {
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnToolTip">
      <declaration><![CDATA[public class DnnToolTip : RadToolTip, ILocalizable]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private bool _localize = true;]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="33" sc="7" el="33" ec="37">UI\WebControls\DnnToolTip.cs</location>
            <body hash="b24348cd5aa4ddf90f133e03dabe85ad"><![CDATA[private bool _localize = true]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="LocalizeStrings">
          <declaration><![CDATA[public virtual void LocalizeStrings()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="63" sc="7" el="81" ec="8">UI\WebControls\DnnToolTip.cs</location>
            <body hash="2a5b37f3282cbc3356bd9e321caf267e"><![CDATA[{
         if ((this.Localize) && (!(String.IsNullOrEmpty(this.ResourceKey))))
         {
            if (!(String.IsNullOrEmpty(base.ManualCloseButtonText)))
            {
               base.ManualCloseButtonText = Utilities.GetLocalizedStringFromParent(String.Format("{0}.ManualCloseButtonText", this.ResourceKey), this);
            }

            if (!(String.IsNullOrEmpty(base.Text)))
            {
               base.Text = Utilities.GetLocalizedStringFromParent(String.Format("{0}.Text", this.ResourceKey), this);
            }

            if (!(String.IsNullOrEmpty(base.ToolTip)))
            {
               base.ToolTip = Utilities.GetLocalizedStringFromParent(String.Format("{0}.ToolTip", this.ResourceKey), this);
            }
         }
      }]]></body>
          </codeblock>
        </method>
        <method name="Render">
          <declaration><![CDATA[protected override void Render(System.Web.UI.HtmlTextWriter writer)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="36" sc="7" el="39" ec="8">UI\WebControls\DnnToolTip.cs</location>
            <body hash="ff599de877d4f5caa0b04ffa0a0d9caf"><![CDATA[{
         LocalizeStrings();
         base.Render(writer);
      }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_localize">
          <declaration><![CDATA[private bool _localize = true;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="Localize">
          <declaration><![CDATA[public bool Localize]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="47" sc="10" el="53" ec="11">UI\WebControls\DnnToolTip.cs</location>
            <body hash="2b93863c47f08d2291cef146e7effbba"><![CDATA[{
            if (base.DesignMode)
            {
               return false;
            }
            return _localize;
         }]]></body>
          </codeblock>
          <codeblock>
            <location sl="55" sc="10" el="57" ec="11">UI\WebControls\DnnToolTip.cs</location>
            <body hash="cb9f2cc6e4f7cf553a9d65becab2ea66"><![CDATA[{
            _localize = value;
         }]]></body>
          </codeblock>
        </property>
        <property name="LocalResourceFile">
          <declaration><![CDATA[public string LocalResourceFile]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ResourceKey">
          <declaration><![CDATA[public string ResourceKey]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnToolTipManager">
      <declaration><![CDATA[public class DnnToolTipManager : RadToolTipManager]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnToolTipManager()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnTreeList">
      <declaration><![CDATA[public class DnnTreeList : RadTreeList]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnTreeList()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnTreeNode">
      <declaration><![CDATA[public class DnnTreeNode : RadTreeNode]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnTreeNode()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnTreeView">
      <declaration><![CDATA[public class DnnTreeView : RadTreeView]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnTreeView()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnTreeViewContextMenu">
      <declaration><![CDATA[public class DnnTreeViewContextMenu : RadTreeViewContextMenu]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnTreeViewContextMenu()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnUnsortedList">
      <declaration><![CDATA[public class DnnUnsortedList : System.Web.UI.WebControls.WebControl, System.Web.UI.INamingContainer]]></declaration>
      <documentation>
        <summary>
 Creates a control that renders its childs as a bulleted list.
 </summary>
 <remarks>
 Control renders an unordered list HTML contol.
 Each child control in <see cref="T:DotNetNuke.Web.UI.WebControls.DnnUnsortedList" /> is rendered as a separate list item.
 To obtain a control over list item style, add a <see cref="T:DotNetNuke.Web.UI.WebControls.DnnUnsortedListItem" /> to a controls list,
 and tune this object appropriately.
 </remarks></documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private UniformControlCollection<DnnUnsortedList, DnnUnsortedListItem> _listItems = null;]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="19" sc="9" el="23" ec="10">UI\WebControls\DnnUnsortedList.cs</location>
            <body hash="d4dea05f1f8c04db48cf91aab37e678c"><![CDATA[private UniformControlCollection<DnnUnsortedList, DnnUnsortedListItem> _listItems = null;

        public DnnUnsortedList() : base(HtmlTextWriterTag.Ul)
        {
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="AddAttributesToRender">
          <declaration><![CDATA[protected override void AddAttributesToRender(System.Web.UI.HtmlTextWriter writer)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="40" sc="9" el="46" ec="10">UI\WebControls\DnnUnsortedList.cs</location>
            <body hash="35e175e296db70609aa0839abdacd277"><![CDATA[{
            writer.AddAttribute(HtmlTextWriterAttribute.Id, ClientID);
            if (!string.IsNullOrEmpty(CssClass))
            {
                writer.AddAttribute(HtmlTextWriterAttribute.Class, CssClass);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="AddListItem">
          <declaration><![CDATA[public void AddListItem(params System.Web.UI.Control[] listItemControls)]]></declaration>
          <documentation>
            <summary>
 A "macro" that adds a set of controls or control as a single list item (li).  Use ListItems.Add(UnsortedListItem) method
 </summary>
 <remarks>
 All controls from the list will be rendered as a childs of a single list item.
 </remarks></documentation>
          <codeblock>
            <location sl="55" sc="9" el="59" ec="10">UI\WebControls\DnnUnsortedList.cs</location>
            <body hash="c5ee5c4dad79b9f456e06cf9c017c98a"><![CDATA[{
            var listItem = new DnnUnsortedListItem();
            listItem.AddControls(listItemControls);
            ListItems.Add(listItem);
        }]]></body>
          </codeblock>
        </method>
        <method name="CreateControlCollection">
          <declaration><![CDATA[protected sealed override System.Web.UI.ControlCollection CreateControlCollection()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="26" sc="9" el="28" ec="10">UI\WebControls\DnnUnsortedList.cs</location>
            <body hash="f078de5e36a1dfc4cd1aa6e5b3309cb9"><![CDATA[{
            return new TypedControlCollection<DnnUnsortedListItem>(this);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_listItems">
          <declaration><![CDATA[private UniformControlCollection<DnnUnsortedList, DnnUnsortedListItem> _listItems = null;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="ListItems">
          <declaration><![CDATA[public virtual UniformControlCollection<DnnUnsortedList, DnnUnsortedListItem> ListItems]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="34" sc="13" el="36" ec="14">UI\WebControls\DnnUnsortedList.cs</location>
            <body hash="afd14949ab372c167403f2b1c5a61c3c"><![CDATA[{
                return _listItems ?? (_listItems = new UniformControlCollection<DnnUnsortedList, DnnUnsortedListItem>(this));
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnUnsortedListItem">
      <declaration><![CDATA[public class DnnUnsortedListItem : System.Web.UI.WebControls.WebControl]]></declaration>
      <documentation>
        <summary>
 Creates a control that render one item in a list ($lt;li&gt; control).
 </summary>
 <remarks></remarks></documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnUnsortedListItem() : base(System.Web.UI.HtmlTextWriterTag.Li)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="15" sc="9" el="17" ec="10">UI\WebControls\DnnUnsortedListItem.cs</location>
            <body hash="171eeadc1b4d9bef7ed68ac70b88dfad"><![CDATA[public DnnUnsortedListItem() : base(HtmlTextWriterTag.Li)
        {
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="AddAttributesToRender">
          <declaration><![CDATA[protected override void AddAttributesToRender(System.Web.UI.HtmlTextWriter writer)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="31" sc="9" el="41" ec="10">UI\WebControls\DnnUnsortedListItem.cs</location>
            <body hash="e4e8537f75620917706f69dbd577231f"><![CDATA[{
            writer.AddAttribute(HtmlTextWriterAttribute.Id, ClientID);
            if (!string.IsNullOrEmpty(CssClass))
            {
                writer.AddAttribute(HtmlTextWriterAttribute.Class, CssClass);
            }
            if (!string.IsNullOrEmpty(ToolTip))
            {
                writer.AddAttribute(HtmlTextWriterAttribute.Title, ToolTip);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="AddControls">
          <declaration><![CDATA[public void AddControls(params System.Web.UI.Control[] childControls)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="20" sc="9" el="28" ec="10">UI\WebControls\DnnUnsortedListItem.cs</location>
            <body hash="d3f84c21c65bbe7f10fe548ab6188f20"><![CDATA[{
            foreach (var childControl in childControls)
            {
                if (childControl != null)
                {
                    Controls.Add(childControl);
                }
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnUpload">
      <declaration><![CDATA[public class DnnUpload : RadUpload]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnUpload()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnUrlControl">
      <declaration><![CDATA[public abstract class DnnUrlControl : UserControlBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[protected DnnUrlControl()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="cmdAdd_Click">
          <declaration><![CDATA[protected void cmdAdd_Click(object sender, System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1053" sc="9" el="1062" ec="10">UI\WebControls\DnnUrlControl.cs</location>
            <body hash="8c0657d17d198a4a3ee72810007f4edb"><![CDATA[{
            cboUrls.Visible = false;
            cmdSelect.Visible = true;
            txtUrl.Visible = true;
            cmdAdd.Visible = false;
            cmdDelete.Visible = false;
            _doRenderTypeControls = false; //Must not render on this postback
            _doRenderTypes = false;
            _doChangeURL = false;
        }]]></body>
          </codeblock>
        </method>
        <method name="cmdDelete_Click">
          <declaration><![CDATA[protected void cmdDelete_Click(object sender, System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1065" sc="9" el="1075" ec="10">UI\WebControls\DnnUrlControl.cs</location>
            <body hash="158057d1a17fecc494be3cff00f57cef"><![CDATA[{
            if (cboUrls.SelectedItem != null)
            {
                var objUrls = new UrlController();
                objUrls.DeleteUrl(_objPortal.PortalID, cboUrls.SelectedItem.Value);
                LoadUrls(); //we must reload the url list
            }
            _doRenderTypeControls = false; //Must not render on this postback
            _doRenderTypes = false;
            _doChangeURL = false;
        }]]></body>
          </codeblock>
        </method>
        <method name="cmdSelect_Click">
          <declaration><![CDATA[protected void cmdSelect_Click(object sender, System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1078" sc="9" el="1093" ec="10">UI\WebControls\DnnUrlControl.cs</location>
            <body hash="0e8e5e1c5581fc36cd5859e7b3aeaeeb"><![CDATA[{
            cboUrls.Visible = true;
            cmdSelect.Visible = false;
            txtUrl.Visible = false;
            cmdAdd.Visible = true;
            cmdDelete.Visible = PortalSecurity.IsInRole(_objPortal.AdministratorRoleName);
            LoadUrls();
            if (cboUrls.Items.FindByValue(txtUrl.Text) != null)
            {
                cboUrls.ClearSelection();
                cboUrls.Items.FindByValue(txtUrl.Text).Selected = true;
            }
            _doRenderTypeControls = false; //Must not render on this postback
            _doRenderTypes = false;
            _doChangeURL = false;
        }]]></body>
          </codeblock>
        </method>
        <method name="DoChangeURL">
          <declaration><![CDATA[private void DoChangeURL()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="575" sc="9" el="672" ec="10">UI\WebControls\DnnUrlControl.cs</location>
            <body hash="3702688f20d46e62bcb1b296d672acad"><![CDATA[{
            string _Url = Convert.ToString(ViewState["Url"]);
            string _Urltype = Convert.ToString(ViewState["UrlType"]);
            if (!String.IsNullOrEmpty(_Url))
            {
                var objUrls = new UrlController();
                string TrackingUrl = _Url;

                _Urltype = Globals.GetURLType(_Url).ToString("g").Substring(0, 1);
                if (_Urltype == "U" && (_Url.StartsWith("~/" + IconController.DefaultIconLocation, StringComparison.InvariantCultureIgnoreCase)))
                {
                    _Urltype = "I";
                }
                ViewState["UrlType"] = _Urltype;
                if (_Urltype == "F")
                {
                    if (_Url.ToLower().StartsWith("fileid="))
                    {
                        TrackingUrl = _Url;
                        var objFile = FileManager.Instance.GetFile(int.Parse(_Url.Substring(7)));
                        if (objFile != null)
                        {
                            _Url = objFile.Folder + objFile.FileName;
                        }
                    }
                    else
                    {
                        //to handle legacy scenarios before the introduction of the FileServerHandler
                        var fileName = Path.GetFileName(_Url);
                        var folderPath = _Url.Substring(0, _Url.LastIndexOf(fileName));
                        var folder = FolderManager.Instance.GetFolder(_objPortal.PortalID, folderPath);
                        var fileId = -1;
                        if (folder != null)
                        {
                            var file = FileManager.Instance.GetFile(folder, fileName);
                            if (file != null)
                            {
                                fileId = file.FileId;
                            }
                        }
                        TrackingUrl = "FileID=" + fileId.ToString();
                    }
                }
                if (_Urltype == "M")
                {
                    if (_Url.ToLower().StartsWith("userid="))
                    {
                        UserInfo objUser = UserController.GetUserById(_objPortal.PortalID, int.Parse(_Url.Substring(7)));
                        if (objUser != null)
                        {
                            _Url = objUser.Username;
                        }
                    }
                }
                UrlTrackingInfo objUrlTracking = objUrls.GetUrlTracking(_objPortal.PortalID, TrackingUrl, ModuleID);
                if (objUrlTracking != null)
                {
                    chkNewWindow.Checked = objUrlTracking.NewWindow;
                    chkTrack.Checked = objUrlTracking.TrackClicks;
                    chkLog.Checked = objUrlTracking.LogActivity;
                }
                else //the url does not exist in the tracking table
                {
                    chkTrack.Checked = false;
                    chkLog.Checked = false;
                }
                ViewState["Url"] = _Url;
            }
            else
            {
                if (!String.IsNullOrEmpty(_Urltype))
                {
                    optType.ClearSelection();
                    if (optType.Items.FindByValue(_Urltype) != null)
                    {
                        optType.Items.FindByValue(_Urltype).Selected = true;
                    }
                    else
                    {
                        optType.Items[0].Selected = true;
                    }
                }
                else
                {
                    if (optType.Items.Count > 0)
                    {
                        optType.ClearSelection();
                        optType.Items[0].Selected = true;
                    }
                }
                chkNewWindow.Checked = false; //Need check
                chkTrack.Checked = false; //Need check
                chkLog.Checked = false; //Need check
            }

            //Url type changed, then we must draw the controlos for that type
            _doRenderTypeControls = true;
        }]]></body>
          </codeblock>
        </method>
        <method name="DoCorrectRadioButtonList">
          <declaration><![CDATA[private void DoCorrectRadioButtonList()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="795" sc="9" el="821" ec="10">UI\WebControls\DnnUrlControl.cs</location>
            <body hash="031ea01bf59e2665ed3f747bc3025218"><![CDATA[{
            string _Urltype = Convert.ToString(ViewState["UrlType"]);

            if (optType.Items.Count > 0)
            {
                optType.ClearSelection();
                if (!String.IsNullOrEmpty(_Urltype))
                {
                    if (optType.Items.FindByValue(_Urltype) != null)
                    {
                        optType.Items.FindByValue(_Urltype).Selected = true;
                    }
                    else
                    {
                        optType.Items[0].Selected = true;
                        _Urltype = optType.Items[0].Value;
                        ViewState["UrlType"] = _Urltype;
                    }
                }
                else
                {
                    optType.Items[0].Selected = true;
                    _Urltype = optType.Items[0].Value;
                    ViewState["UrlType"] = _Urltype;
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="DoRenderTypeControls">
          <declaration><![CDATA[private void DoRenderTypeControls()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="824" sc="9" el="961" ec="10">UI\WebControls\DnnUrlControl.cs</location>
            <body hash="e03290fc7c589b351cd398a936e0edc7"><![CDATA[{
            string _Url = Convert.ToString(ViewState["Url"]);
            string _Urltype = Convert.ToString(ViewState["UrlType"]);
            var objUrls = new UrlController();
            if (!String.IsNullOrEmpty(_Urltype))
            {
                //load listitems
                switch (optType.SelectedItem.Value)
                {
                    case "N": //None
                        URLRow.Visible = false;
                        TabRow.Visible = false;
                        FileRow.Visible = false;
                        UserRow.Visible = false;
                        ImagesRow.Visible = false;
                        break;
                    case "I": //System Image
                        URLRow.Visible = false;
                        TabRow.Visible = false;
                        FileRow.Visible = false;
                        UserRow.Visible = false;
                        ImagesRow.Visible = true;

                        cboImages.Items.Clear();

                        string strImagesFolder = Path.Combine(Globals.ApplicationMapPath, IconController.DefaultIconLocation.Replace('/', '\\'));
                        foreach (string strImage in Directory.GetFiles(strImagesFolder))
                        {
                            string img = strImage.Replace(strImagesFolder, "").Trim('/').Trim('\\');
                            cboImages.Items.Add(new ListItem(img, string.Format("~/{0}/{1}", IconController.DefaultIconLocation, img).ToLower()));
                        }

                        ListItem selecteItem = cboImages.Items.FindByValue(_Url.ToLower());
                        if (selecteItem != null)
                        {
                            selecteItem.Selected = true;
                        }
                        break;

                    case "U": //Url
                        URLRow.Visible = true;
                        TabRow.Visible = false;
                        FileRow.Visible = false;
                        UserRow.Visible = false;
                        ImagesRow.Visible = false;
                        if (String.IsNullOrEmpty(txtUrl.Text))
                        {
                            txtUrl.Text = _Url;
                        }
                        if (String.IsNullOrEmpty(txtUrl.Text))
                        {
                            txtUrl.Text = "http://";
                        }
                        txtUrl.Visible = true;

                        cmdSelect.Visible = true;

                        cboUrls.Visible = false;
                        cmdAdd.Visible = false;
                        cmdDelete.Visible = false;
                        break;
                    case "T": //tab
                        URLRow.Visible = false;
                        TabRow.Visible = true;
                        FileRow.Visible = false;
                        UserRow.Visible = false;
                        ImagesRow.Visible = false;

                        cboTabs.IncludeAllTabTypes = false;
                        cboTabs.IncludeActiveTab = IncludeActiveTab;
                        cboTabs.UndefinedItem = new ListItem(SharedConstants.Unspecified, string.Empty);

                        PortalSettings _settings = PortalController.Instance.GetCurrentPortalSettings();
                        var tabId = Int32.Parse(_Url);
                        var page = TabController.Instance.GetTab(tabId, _settings.PortalId);
                        cboTabs.SelectedPage = page;
                        break;
                    case "F": //file
                        URLRow.Visible = false;
                        TabRow.Visible = false;
                        FileRow.Visible = true;
                        UserRow.Visible = false;
                        ImagesRow.Visible = false;

                        //select folder
                        //We Must check if selected folder has changed because of a property change (Secure, Database)
                        string FileName = string.Empty;
                        string FolderPath = string.Empty;
                        string LastFileName = string.Empty;
                        string LastFolderPath = string.Empty;
                        //Let's try to remember last selection
                        if (ViewState["LastFolderPath"] != null)
                        {
                            LastFolderPath = Convert.ToString(ViewState["LastFolderPath"]);
                        }
                        if (ViewState["LastFileName"] != null)
                        {
                            LastFileName = Convert.ToString(ViewState["LastFileName"]);
                        }
                        if (_Url != string.Empty)
                        {
                            //Let's use the new URL
                            FileName = _Url.Substring(_Url.LastIndexOf("/") + 1);
                            FolderPath = _Url.Replace(FileName, "");
                        }
                        else
                        {
                            //Use last settings
                            FileName = LastFileName;
                            FolderPath = LastFolderPath;
                        }

                        ctlFile.FilePath = FolderPath + FileName;

                        txtUrl.Visible = false;
                        break;
                    case "M": //membership users
                        URLRow.Visible = false;
                        TabRow.Visible = false;
                        FileRow.Visible = false;
                        UserRow.Visible = true;
                        ImagesRow.Visible = false;
                        if (String.IsNullOrEmpty(txtUser.Text))
                        {
                            txtUser.Text = _Url;
                        }
                        break;
                }
            }
            else
            {
                URLRow.Visible = false;
                ImagesRow.Visible = false;
                TabRow.Visible = false;
                FileRow.Visible = false;
                UserRow.Visible = false;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="DoRenderTypes">
          <declaration><![CDATA[private void DoRenderTypes()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="675" sc="9" el="792" ec="10">UI\WebControls\DnnUrlControl.cs</location>
            <body hash="bf9f5e576181963468d020cb2987630f"><![CDATA[{
            //We must clear the list to keep the same item order
            string strCurrent = "";
            if (optType.SelectedIndex >= 0)
            {
                strCurrent = optType.SelectedItem.Value; //Save current selected value
            }
            optType.Items.Clear();
            if (ShowNone)
            {
                if (optType.Items.FindByValue("N") == null)
                {
                    optType.Items.Add(new ListItem(Localization.GetString("NoneType", LocalResourceFile), "N"));
                }
            }
            else
            {
                if (optType.Items.FindByValue("N") != null)
                {
                    optType.Items.Remove(optType.Items.FindByValue("N"));
                }
            }
            if (ShowUrls)
            {
                if (optType.Items.FindByValue("U") == null)
                {
                    optType.Items.Add(new ListItem(Localization.GetString("URLType", LocalResourceFile), "U"));
                }
            }
            else
            {
                if (optType.Items.FindByValue("U") != null)
                {
                    optType.Items.Remove(optType.Items.FindByValue("U"));
                }
            }
            if (ShowTabs)
            {
                if (optType.Items.FindByValue("T") == null)
                {
                    optType.Items.Add(new ListItem(Localization.GetString("TabType", LocalResourceFile), "T"));
                }
            }
            else
            {
                if (optType.Items.FindByValue("T") != null)
                {
                    optType.Items.Remove(optType.Items.FindByValue("T"));
                }
            }
            if (ShowFiles)
            {
                if (optType.Items.FindByValue("F") == null)
                {
                    optType.Items.Add(new ListItem(Localization.GetString("FileType", LocalResourceFile), "F"));
                }
            }
            else
            {
                if (optType.Items.FindByValue("F") != null)
                {
                    optType.Items.Remove(optType.Items.FindByValue("F"));
                }
            }
            if (ShowImages)
            {
                if (optType.Items.FindByValue("I") == null)
                {
                    optType.Items.Add(new ListItem(Localization.GetString("ImageType", LocalResourceFile), "I"));
                }
            }
            else
            {
                if (optType.Items.FindByValue("I") != null)
                {
                    optType.Items.Remove(optType.Items.FindByValue("I"));
                }
            }
            if (ShowUsers)
            {
                if (optType.Items.FindByValue("M") == null)
                {
                    optType.Items.Add(new ListItem(Localization.GetString("UserType", LocalResourceFile), "M"));
                }
            }
            else
            {
                if (optType.Items.FindByValue("M") != null)
                {
                    optType.Items.Remove(optType.Items.FindByValue("M"));
                }
            }
            if (optType.Items.Count > 0)
            {
                if (!String.IsNullOrEmpty(strCurrent))
                {
                    if (optType.Items.FindByValue(strCurrent) != null)
                    {
                        optType.Items.FindByValue(strCurrent).Selected = true;
                    }
                    else
                    {
                        optType.Items[0].Selected = true;
                        _doRenderTypeControls = true; //Type changed, re-draw
                    }
                }
                else
                {
                    optType.Items[0].Selected = true;
                    _doRenderTypeControls = true; //Type changed, re-draw
                }
                TypeRow.Visible = optType.Items.Count > 1;
            }
            else
            {
                TypeRow.Visible = false;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="LoadUrls">
          <declaration><![CDATA[private void LoadUrls()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="567" sc="9" el="572" ec="10">UI\WebControls\DnnUrlControl.cs</location>
            <body hash="3bd1f16487a2b3ee0b8a97534bb4d5ea"><![CDATA[{
            var objUrls = new UrlController();
            cboUrls.Items.Clear();
            cboUrls.DataSource = objUrls.GetUrls(_objPortal.PortalID);
            cboUrls.DataBind();
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="968" sc="9" el="978" ec="10">UI\WebControls\DnnUrlControl.cs</location>
            <body hash="a691bc1bcaa2799dc6c2a91caada2678"><![CDATA[{
            base.OnInit(e);

            //prevent unauthorized access
            if (Request.IsAuthenticated == false)
            {
                Visible = false;
            }

            ClientResourceManager.EnableAsyncPostBackHandler();
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="981" sc="9" el="1018" ec="10">UI\WebControls\DnnUrlControl.cs</location>
            <body hash="ddf90ba7369bfa80aa168dd8763e4c76"><![CDATA[{
            base.OnLoad(e);

            optType.SelectedIndexChanged += optType_SelectedIndexChanged;
            cmdAdd.Click += cmdAdd_Click;
            cmdDelete.Click += cmdDelete_Click;
            cmdSelect.Click += cmdSelect_Click;

            ErrorRow.Visible = false;

            try
            {
                if ((Request.QueryString["pid"] != null) && (Globals.IsHostTab(PortalSettings.ActiveTab.TabID) || UserController.Instance.GetCurrentUserInfo().IsSuperUser))
                {
                    _objPortal = PortalController.Instance.GetPortal(Int32.Parse(Request.QueryString["pid"]));
                }
                else
                {
                    _objPortal = PortalController.Instance.GetPortal(PortalSettings.PortalId);
                }
                if (ViewState["IsUrlControlLoaded"] == null)
                {
                    //If Not Page.IsPostBack Then
                    //let's make at least an initialization
                    //The type radio button must be initialized
                    //The url must be initialized no matter its value
                    _doRenderTypes = true;
                    _doChangeURL = true;
                    ClientAPI.AddButtonConfirm(cmdDelete, Localization.GetString("DeleteItem"));
                    //The following line was mover to the pre-render event to ensure render for the first time
                    //ViewState("IsUrlControlLoaded") = "Loaded"
                }
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnPreRender">
          <declaration><![CDATA[protected override void OnPreRender(System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1021" sc="9" el="1050" ec="10">UI\WebControls\DnnUrlControl.cs</location>
            <body hash="2c8d4f090aa7750a989948f78528b769"><![CDATA[{
            base.OnPreRender(e);

            try
            {
                if (_doRenderTypes)
                {
                    DoRenderTypes();
                }
                if (_doChangeURL)
                {
                    DoChangeURL();
                }
                DoCorrectRadioButtonList();

                if (_doRenderTypeControls)
                {
                    DoRenderTypeControls();
                }
                ViewState["Url"] = null;
                ViewState["IsUrlControlLoaded"] = "Loaded";

                ctlFile.FileFilter = FileFilter;
            }
            catch (Exception exc)
            {
                //Let's detect possible problems
                Exceptions.LogException(new Exception("Error rendering URLControl subcontrols.", exc));
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="optType_SelectedIndexChanged">
          <declaration><![CDATA[protected void optType_SelectedIndexChanged(object sender, System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1096" sc="9" el="1100" ec="10">UI\WebControls\DnnUrlControl.cs</location>
            <body hash="6e01814bebace5b217148d444c2c87b0"><![CDATA[{
            //Type changed, render the correct control set
            ViewState["UrlType"] = optType.SelectedItem.Value;
            _doRenderTypeControls = true;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_doChangeURL">
          <declaration><![CDATA[private bool _doChangeURL;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_doRenderTypeControls">
          <declaration><![CDATA[private bool _doRenderTypeControls;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_doRenderTypes">
          <declaration><![CDATA[private bool _doRenderTypes;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_localResourceFile">
          <declaration><![CDATA[private string _localResourceFile;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_objPortal">
          <declaration><![CDATA[private PortalInfo _objPortal;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cboImages">
          <declaration><![CDATA[protected System.Web.UI.WebControls.DropDownList cboImages;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cboTabs">
          <declaration><![CDATA[protected DnnPageDropDownList cboTabs;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cboUrls">
          <declaration><![CDATA[protected System.Web.UI.WebControls.DropDownList cboUrls;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkLog">
          <declaration><![CDATA[protected System.Web.UI.WebControls.CheckBox chkLog;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkNewWindow">
          <declaration><![CDATA[protected System.Web.UI.WebControls.CheckBox chkNewWindow;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkTrack">
          <declaration><![CDATA[protected System.Web.UI.WebControls.CheckBox chkTrack;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdAdd">
          <declaration><![CDATA[protected System.Web.UI.WebControls.LinkButton cmdAdd;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdDelete">
          <declaration><![CDATA[protected System.Web.UI.WebControls.LinkButton cmdDelete;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdSelect">
          <declaration><![CDATA[protected System.Web.UI.WebControls.LinkButton cmdSelect;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ctlFile">
          <declaration><![CDATA[protected DnnFilePickerUploader ctlFile;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ErrorRow">
          <declaration><![CDATA[protected System.Web.UI.WebControls.Panel ErrorRow;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="FileRow">
          <declaration><![CDATA[protected System.Web.UI.WebControls.Panel FileRow;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ImagesRow">
          <declaration><![CDATA[protected System.Web.UI.WebControls.Panel ImagesRow;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblImages">
          <declaration><![CDATA[protected System.Web.UI.WebControls.Label lblImages;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblMessage">
          <declaration><![CDATA[protected System.Web.UI.WebControls.Label lblMessage;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblTab">
          <declaration><![CDATA[protected System.Web.UI.WebControls.Label lblTab;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblURL">
          <declaration><![CDATA[protected System.Web.UI.WebControls.Label lblURL;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblURLType">
          <declaration><![CDATA[protected System.Web.UI.WebControls.Label lblURLType;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblUser">
          <declaration><![CDATA[protected System.Web.UI.WebControls.Label lblUser;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="optType">
          <declaration><![CDATA[protected System.Web.UI.WebControls.RadioButtonList optType;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="TabRow">
          <declaration><![CDATA[protected System.Web.UI.WebControls.Panel TabRow;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtUrl">
          <declaration><![CDATA[protected System.Web.UI.WebControls.TextBox txtUrl;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtUser">
          <declaration><![CDATA[protected System.Web.UI.WebControls.TextBox txtUser;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="TypeRow">
          <declaration><![CDATA[protected System.Web.UI.WebControls.Panel TypeRow;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="URLRow">
          <declaration><![CDATA[protected System.Web.UI.WebControls.Panel URLRow;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="UserRow">
          <declaration><![CDATA[protected System.Web.UI.WebControls.Panel UserRow;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="FileFilter">
          <declaration><![CDATA[public string FileFilter]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="90" sc="13" el="97" ec="14">UI\WebControls\DnnUrlControl.cs</location>
            <body hash="32101b5a346431949956a167c0613a2b"><![CDATA[{
                if (ViewState["FileFilter"] != null)
                {
                    return ViewState["FileFilter"].ToString();
                }

                return string.Empty;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="99" sc="13" el="101" ec="14">UI\WebControls\DnnUrlControl.cs</location>
            <body hash="972f99f9c390dd572e31e55ce7221bfa"><![CDATA[{
                ViewState["FileFilter"] = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="IncludeActiveTab">
          <declaration><![CDATA[public bool IncludeActiveTab]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="107" sc="13" el="116" ec="14">UI\WebControls\DnnUrlControl.cs</location>
            <body hash="2739d3ba9b4cf209a96c1ff32935adf4"><![CDATA[{
                if (ViewState["IncludeActiveTab"] != null)
                {
                    return Convert.ToBoolean(ViewState["IncludeActiveTab"]);
                }
                else
                {
                    return false; //Set as default
                }
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="118" sc="13" el="124" ec="14">UI\WebControls\DnnUrlControl.cs</location>
            <body hash="aa0d576414d3233a6f747ffc40c1d8b2"><![CDATA[{
                ViewState["IncludeActiveTab"] = value;
                if (IsTrackingViewState)
                {
                    _doRenderTypeControls = true;
                }
            }]]></body>
          </codeblock>
        </property>
        <property name="LocalResourceFile">
          <declaration><![CDATA[public string LocalResourceFile]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="130" sc="13" el="141" ec="14">UI\WebControls\DnnUrlControl.cs</location>
            <body hash="9663bc4926db41813a21940ed83b57ac"><![CDATA[{
                string fileRoot;
                if (String.IsNullOrEmpty(_localResourceFile))
                {
                    fileRoot = TemplateSourceDirectory + "/" + Localization.LocalResourceDirectory + "/URLControl.ascx";
                }
                else
                {
                    fileRoot = _localResourceFile;
                }
                return fileRoot;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="143" sc="13" el="145" ec="14">UI\WebControls\DnnUrlControl.cs</location>
            <body hash="e60ba7145a1304e2111e5932f2fe5b70"><![CDATA[{
                _localResourceFile = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="Log">
          <declaration><![CDATA[public bool Log]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="151" sc="13" el="160" ec="14">UI\WebControls\DnnUrlControl.cs</location>
            <body hash="c5f63b9c8d6f4eec4a6ccba80c06c1f8"><![CDATA[{
                if (chkLog.Visible)
                {
                    return chkLog.Checked;
                }
                else
                {
                    return false;
                }
            }]]></body>
          </codeblock>
        </property>
        <property name="ModuleID">
          <declaration><![CDATA[public int ModuleID]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="166" sc="13" el="177" ec="14">UI\WebControls\DnnUrlControl.cs</location>
            <body hash="e9aebe645ce6e3b9cfec4ee9af9c5ac1"><![CDATA[{
                int myMid = -2;
                if (ViewState["ModuleId"] != null)
                {
                    myMid = Convert.ToInt32(ViewState["ModuleId"]);
                }
                else if (Request.QueryString["mid"] != null)
                {
                    Int32.TryParse(Request.QueryString["mid"], out myMid);
                }
                return myMid;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="179" sc="13" el="181" ec="14">UI\WebControls\DnnUrlControl.cs</location>
            <body hash="cb1b663f0ebb5176997ae2215b634e0c"><![CDATA[{
                ViewState["ModuleId"] = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="NewWindow">
          <declaration><![CDATA[public bool NewWindow]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="187" sc="13" el="189" ec="14">UI\WebControls\DnnUrlControl.cs</location>
            <body hash="32b79bced8bc9248dab8f4e61e6e7d9d"><![CDATA[{
                return chkNewWindow.Visible && chkNewWindow.Checked;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="191" sc="13" el="193" ec="14">UI\WebControls\DnnUrlControl.cs</location>
            <body hash="2101a2feed477bb877b8be2e402979f5"><![CDATA[{
                chkNewWindow.Checked = chkNewWindow.Visible && value;
            }]]></body>
          </codeblock>
        </property>
        <property name="Required">
          <declaration><![CDATA[public bool Required]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="199" sc="13" el="208" ec="14">UI\WebControls\DnnUrlControl.cs</location>
            <body hash="06ba9ddf36b034ce95d239b31f990360"><![CDATA[{
                if (ViewState["Required"] != null)
                {
                    return Convert.ToBoolean(ViewState["Required"]);
                }
                else
                {
                    return true; //Set as default in the old variable
                }
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="210" sc="13" el="216" ec="14">UI\WebControls\DnnUrlControl.cs</location>
            <body hash="2b4639458023c22b609f62622fda5e61"><![CDATA[{
                ViewState["Required"] = value;
                if (IsTrackingViewState)
                {
                    _doRenderTypeControls = true;
                }
            }]]></body>
          </codeblock>
        </property>
        <property name="ShowFiles">
          <declaration><![CDATA[public bool ShowFiles]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="222" sc="13" el="231" ec="14">UI\WebControls\DnnUrlControl.cs</location>
            <body hash="db0a2f305ae658aabf31254aa4ea9c37"><![CDATA[{
                if (ViewState["ShowFiles"] != null)
                {
                    return Convert.ToBoolean(ViewState["ShowFiles"]);
                }
                else
                {
                    return true; //Set as default in the old variable
                }
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="233" sc="13" el="239" ec="14">UI\WebControls\DnnUrlControl.cs</location>
            <body hash="634e46bf3e59cbcd0f6fa1bc48c8c53a"><![CDATA[{
                ViewState["ShowFiles"] = value;
                if (IsTrackingViewState)
                {
                    _doRenderTypes = true;
                }
            }]]></body>
          </codeblock>
        </property>
        <property name="ShowImages">
          <declaration><![CDATA[public bool ShowImages]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="245" sc="13" el="254" ec="14">UI\WebControls\DnnUrlControl.cs</location>
            <body hash="a5f16de6312c055b2b5ae7d3763e2ed5"><![CDATA[{
                if (ViewState["ShowImages"] != null)
                {
                    return Convert.ToBoolean(ViewState["ShowImages"]);
                }
                else
                {
                    return false;
                }
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="256" sc="13" el="262" ec="14">UI\WebControls\DnnUrlControl.cs</location>
            <body hash="45bb1c3cc9fa79d48beb3fd16854c0ef"><![CDATA[{
                ViewState["ShowImages"] = value;
                if (IsTrackingViewState)
                {
                    _doRenderTypes = true;
                }
            }]]></body>
          </codeblock>
        </property>
        <property name="ShowLog">
          <declaration><![CDATA[public bool ShowLog]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="268" sc="13" el="270" ec="14">UI\WebControls\DnnUrlControl.cs</location>
            <body hash="8886761bc60a9f263322611ca3ace088"><![CDATA[{
                return chkLog.Visible;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="272" sc="13" el="274" ec="14">UI\WebControls\DnnUrlControl.cs</location>
            <body hash="3f6afaf0db1363415bc462ff864cb221"><![CDATA[{
                chkLog.Visible = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="ShowNewWindow">
          <declaration><![CDATA[public bool ShowNewWindow]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="280" sc="13" el="282" ec="14">UI\WebControls\DnnUrlControl.cs</location>
            <body hash="7789cd8686c9d3b156ff97b54a982a7a"><![CDATA[{
                return chkNewWindow.Visible;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="284" sc="13" el="286" ec="14">UI\WebControls\DnnUrlControl.cs</location>
            <body hash="05068526fa6ba700da1bb8cd3f239283"><![CDATA[{
                chkNewWindow.Visible = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="ShowNone">
          <declaration><![CDATA[public bool ShowNone]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="292" sc="13" el="301" ec="14">UI\WebControls\DnnUrlControl.cs</location>
            <body hash="675fed79b6c260b321b4f820c54e00c2"><![CDATA[{
                if (ViewState["ShowNone"] != null)
                {
                    return Convert.ToBoolean(ViewState["ShowNone"]);
                }
                else
                {
                    return false; //Set as default in the old variable
                }
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="303" sc="13" el="309" ec="14">UI\WebControls\DnnUrlControl.cs</location>
            <body hash="025bf05fd38916c26f1f159e8aeddad7"><![CDATA[{
                ViewState["ShowNone"] = value;
                if (IsTrackingViewState)
                {
                    _doRenderTypes = true;
                }
            }]]></body>
          </codeblock>
        </property>
        <property name="ShowTabs">
          <declaration><![CDATA[public bool ShowTabs]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="315" sc="13" el="324" ec="14">UI\WebControls\DnnUrlControl.cs</location>
            <body hash="45e1f4109de095ea7175067d17cc1806"><![CDATA[{
                if (ViewState["ShowTabs"] != null)
                {
                    return Convert.ToBoolean(ViewState["ShowTabs"]);
                }
                else
                {
                    return true; //Set as default in the old variable
                }
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="326" sc="13" el="332" ec="14">UI\WebControls\DnnUrlControl.cs</location>
            <body hash="943c1b32c672d2d83edd0bd75d7e7ae1"><![CDATA[{
                ViewState["ShowTabs"] = value;
                if (IsTrackingViewState)
                {
                    _doRenderTypes = true;
                }
            }]]></body>
          </codeblock>
        </property>
        <property name="ShowTrack">
          <declaration><![CDATA[public bool ShowTrack]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="338" sc="13" el="340" ec="14">UI\WebControls\DnnUrlControl.cs</location>
            <body hash="ce19e9818454d487d091df33d71bac9b"><![CDATA[{
                return chkTrack.Visible;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="342" sc="13" el="344" ec="14">UI\WebControls\DnnUrlControl.cs</location>
            <body hash="a1f5354ebc38b88e1279b49c30759fb4"><![CDATA[{
                chkTrack.Visible = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="ShowUpLoad">
          <declaration><![CDATA[public bool ShowUpLoad]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="350" sc="13" el="359" ec="14">UI\WebControls\DnnUrlControl.cs</location>
            <body hash="fa15e8a8ad28d540c342a43c1b9d76e7"><![CDATA[{
                if (ViewState["ShowUpLoad"] != null)
                {
                    return Convert.ToBoolean(ViewState["ShowUpLoad"]);
                }
                else
                {
                    return true; //Set as default in the old variable
                }
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="361" sc="13" el="367" ec="14">UI\WebControls\DnnUrlControl.cs</location>
            <body hash="2d776c29c1f0f17a5bdc890141a7d6e0"><![CDATA[{
                ViewState["ShowUpLoad"] = value;
                if (IsTrackingViewState)
                {
                    _doRenderTypeControls = true;
                }
            }]]></body>
          </codeblock>
        </property>
        <property name="ShowUrls">
          <declaration><![CDATA[public bool ShowUrls]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="373" sc="13" el="382" ec="14">UI\WebControls\DnnUrlControl.cs</location>
            <body hash="bcdf2f990b2933f331383a2adbe8b4f7"><![CDATA[{
                if (ViewState["ShowUrls"] != null)
                {
                    return Convert.ToBoolean(ViewState["ShowUrls"]);
                }
                else
                {
                    return true; //Set as default in the old variable
                }
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="384" sc="13" el="390" ec="14">UI\WebControls\DnnUrlControl.cs</location>
            <body hash="7212a7a08d1e4c24d68d02a06d5f5709"><![CDATA[{
                ViewState["ShowUrls"] = value;
                if (IsTrackingViewState)
                {
                    _doRenderTypes = true;
                }
            }]]></body>
          </codeblock>
        </property>
        <property name="ShowUsers">
          <declaration><![CDATA[public bool ShowUsers]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="396" sc="13" el="405" ec="14">UI\WebControls\DnnUrlControl.cs</location>
            <body hash="d9c01ac1f63a9c11147eef339379965d"><![CDATA[{
                if (ViewState["ShowUsers"] != null)
                {
                    return Convert.ToBoolean(ViewState["ShowUsers"]);
                }
                else
                {
                    return false; //Set as default in the old variable
                }
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="407" sc="13" el="413" ec="14">UI\WebControls\DnnUrlControl.cs</location>
            <body hash="f908273d89487d4157fa8216a34cb527"><![CDATA[{
                ViewState["ShowUsers"] = value;
                if (IsTrackingViewState)
                {
                    _doRenderTypes = true;
                }
            }]]></body>
          </codeblock>
        </property>
        <property name="Track">
          <declaration><![CDATA[public bool Track]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="419" sc="13" el="428" ec="14">UI\WebControls\DnnUrlControl.cs</location>
            <body hash="8da9e04d4ccf14979fb5cdbf0d454346"><![CDATA[{
                if (chkTrack.Visible)
                {
                    return chkTrack.Checked;
                }
                else
                {
                    return false;
                }
            }]]></body>
          </codeblock>
        </property>
        <property name="Url">
          <declaration><![CDATA[public string Url]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="434" sc="13" el="510" ec="14">UI\WebControls\DnnUrlControl.cs</location>
            <body hash="89adc92e05d1be48eee5d8379e239c78"><![CDATA[{
                string r = "";
                string strCurrentType = "";
                if (optType.Items.Count > 0 && optType.SelectedIndex >= 0)
                {
                    strCurrentType = optType.SelectedItem.Value;
                }
                switch (strCurrentType)
                {
                    case "I":
                        if (cboImages.SelectedItem != null)
                        {
                            r = cboImages.SelectedItem.Value;
                        }
                        break;
                    case "U":
                        if (cboUrls.Visible)
                        {
                            if (cboUrls.SelectedItem != null)
                            {
                                r = cboUrls.SelectedItem.Value;
                                txtUrl.Text = r;
                            }
                        }
                        else
                        {
                            string mCustomUrl = txtUrl.Text;
                            if (mCustomUrl.ToLower() == "http://")
                            {
                                r = "";
                            }
                            else
                            {
                                r = Globals.AddHTTP(mCustomUrl);
                            }
                        }
                        break;
                    case "T":
                        string strTab = "";
                        if (cboTabs.SelectedItem != null)
                        {
                            strTab = cboTabs.SelectedItem.Value;
                            if (Regex.IsMatch(strTab, "^\\d+$") && (Convert.ToInt32(strTab) >= 0))
                            {
                                r = strTab;
                            }
                        }
                        break;
                    case "F":
                        if (ctlFile.FileID > Null.NullInteger)
                        {
                            r = "FileID=" + ctlFile.FileID;
                        }
                        else
                        {
                            r = "";
                        }
                        break;
                    case "M":
                        if (!String.IsNullOrEmpty(txtUser.Text))
                        {
                            UserInfo objUser = UserController.GetCachedUser(_objPortal.PortalID, txtUser.Text);
                            if (objUser != null)
                            {
                                r = "UserID=" + objUser.UserID;
                            }
                            else
                            {
                                lblMessage.Text = Localization.GetString("NoUser", LocalResourceFile);
                                ErrorRow.Visible = true;
                                txtUser.Text = "";
                            }
                        }
                        break;
                }
                return r;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="512" sc="13" el="520" ec="14">UI\WebControls\DnnUrlControl.cs</location>
            <body hash="19c803a23b31043dfb3c8d34fdafc87a"><![CDATA[{
                ViewState["Url"] = value;
				txtUrl.Text = string.Empty;

                if (IsTrackingViewState)
                {
                    _doChangeURL = true;
                }
            }]]></body>
          </codeblock>
        </property>
        <property name="UrlType">
          <declaration><![CDATA[public string UrlType]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="526" sc="13" el="528" ec="14">UI\WebControls\DnnUrlControl.cs</location>
            <body hash="8f65aefb596b3da51a917fd8beb3332e"><![CDATA[{
                return Convert.ToString(ViewState["UrlType"]);
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="530" sc="13" el="539" ec="14">UI\WebControls\DnnUrlControl.cs</location>
            <body hash="bb86ad5b81d761df33f6df8a819e718c"><![CDATA[{
                if (value != null && !String.IsNullOrEmpty(value.Trim()))
                {
                    ViewState["UrlType"] = value;
                    if (IsTrackingViewState)
                    {
                        _doChangeURL = true;
                    }
                }
            }]]></body>
          </codeblock>
        </property>
        <property name="Width">
          <declaration><![CDATA[public string Width]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="545" sc="13" el="547" ec="14">UI\WebControls\DnnUrlControl.cs</location>
            <body hash="82f4bc762f561ea5ae0ec1a1640960ac"><![CDATA[{
                return Convert.ToString(ViewState["SkinControlWidth"]);
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="549" sc="13" el="559" ec="14">UI\WebControls\DnnUrlControl.cs</location>
            <body hash="2ab306d82df18db4ad3f69d40044427a"><![CDATA[{
                if (!String.IsNullOrEmpty(value))
                {
                    cboUrls.Width = Unit.Parse(value);
                    txtUrl.Width = Unit.Parse(value);
                    cboImages.Width = Unit.Parse(value);
                    cboTabs.Width = Unit.Parse(value);
                    txtUser.Width = Unit.Parse(value);
                    ViewState["SkinControlWidth"] = value;
                }
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnWindow">
      <declaration><![CDATA[public class DnnWindow : RadWindow]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnWindow()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnWindowManager">
      <declaration><![CDATA[public class DnnWindowManager : RadWindowManager]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnWindowManager()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="IDnnRibbonBarTool">
      <declaration><![CDATA[public interface IDnnRibbonBarTool]]></declaration>
      <documentation>
      </documentation>
      <constructors>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="ToolName">
          <declaration><![CDATA[string ToolName]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="ItemListOptions">
      <declaration><![CDATA[public class ItemListOptions]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public ItemListOptions()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="52" sc="9" el="66" ec="10">UI\WebControls\ItemListOptions.cs</location>
            <body hash="103175c21165c7b83ff48a8da1ad482e"><![CDATA[public ItemListOptions()
        {
            // all the resources are located under the Website\App_GlobalResources\SharedResources.resx
            SortAscendingButtonTitle = Localization.GetString("DropDownList.SortAscendingButtonTitle", Localization.SharedResourceFile);
            UnsortedOrderButtonTooltip = Localization.GetString("DropDownList.UnsortedOrderButtonTooltip", Localization.SharedResourceFile);
            SortAscendingButtonTooltip = Localization.GetString("DropDownList.SortAscendingButtonTooltip", Localization.SharedResourceFile);
            SortDescendingButtonTooltip = Localization.GetString("DropDownList.SortDescendingButtonTooltip", Localization.SharedResourceFile);
            SelectedItemExpandTooltip = Localization.GetString("DropDownList.SelectedItemExpandTooltip", Localization.SharedResourceFile);
            SelectedItemCollapseTooltip = Localization.GetString("DropDownList.SelectedItemCollapseTooltip", Localization.SharedResourceFile);
            SearchInputPlaceHolder = Localization.GetString("DropDownList.SearchInputPlaceHolder", Localization.SharedResourceFile);
            ClearButtonTooltip = Localization.GetString("DropDownList.ClearButtonTooltip", Localization.SharedResourceFile);
            SearchButtonTooltip = Localization.GetString("DropDownList.SearchButtonTooltip", Localization.SharedResourceFile);
            LoadingResultText = Localization.GetString("DropDownList.LoadingResultText", Localization.SharedResourceFile);
            ResultsText = Localization.GetString("DropDownList.Results", Localization.SharedResourceFile);
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
        <field name="ClearButtonTooltip">
          <declaration><![CDATA[public string ClearButtonTooltip;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="DisableUnspecifiedOrder">
          <declaration><![CDATA[public bool DisableUnspecifiedOrder;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="FirstItem">
          <declaration><![CDATA[public SerializableKeyValuePair<string, string> FirstItem;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="LoadingResultText">
          <declaration><![CDATA[public string LoadingResultText;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ResultsText">
          <declaration><![CDATA[public string ResultsText;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="SearchButtonTooltip">
          <declaration><![CDATA[public string SearchButtonTooltip;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="SearchInputPlaceHolder">
          <declaration><![CDATA[public string SearchInputPlaceHolder;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="SelectedItemCollapseTooltip">
          <declaration><![CDATA[public string SelectedItemCollapseTooltip;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="SelectedItemExpandTooltip">
          <declaration><![CDATA[public string SelectedItemExpandTooltip;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="SortAscendingButtonTitle">
          <declaration><![CDATA[public string SortAscendingButtonTitle;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="SortAscendingButtonTooltip">
          <declaration><![CDATA[public string SortAscendingButtonTooltip;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="SortDescendingButtonTooltip">
          <declaration><![CDATA[public string SortDescendingButtonTooltip;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="UnsortedOrderButtonTooltip">
          <declaration><![CDATA[public string UnsortedOrderButtonTooltip;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="ItemListServicesOptions">
      <declaration><![CDATA[public class ItemListServicesOptions]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public string ModuleId = string.Empty;]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="10" sc="9" el="43" ec="39">UI\WebControls\ItemListServicesOptions.cs</location>
            <body hash="89f4b64c44bfb4d30509a83d9c834acf"><![CDATA[[DataMember(Name = "moduleId")]
        public string ModuleId = string.Empty;

        [DataMember(Name = "serviceRoot")]
        public string ServiceRoot;

        [DataMember(Name = "getTreeMethod")]
        public string GetTreeMethod;

        [DataMember(Name = "sortTreeMethod")]
        public string SortTreeMethod;

        [DataMember(Name = "getNodeDescendantsMethod")]
        public string GetNodeDescendantsMethod;

        [DataMember(Name = "searchTreeMethod")]
        public string SearchTreeMethod;

        [DataMember(Name = "getTreeWithNodeMethod")]
        public string GetTreeWithNodeMethod;

        private Dictionary<string, string> _parameters;

        [DataMember(Name = "parameters")]
        public Dictionary<string, string> Parameters
        {
            get
            {
                return _parameters ?? (_parameters = new Dictionary<string, string>());
            }
        }

        [DataMember(Name = "rootId")]
        public string RootId = "Root";]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
        <field name="_parameters">
          <declaration><![CDATA[private System.Collections.Generic.Dictionary<string, string> _parameters;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="GetNodeDescendantsMethod">
          <declaration><![CDATA[public string GetNodeDescendantsMethod;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="GetTreeMethod">
          <declaration><![CDATA[public string GetTreeMethod;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="GetTreeWithNodeMethod">
          <declaration><![CDATA[public string GetTreeWithNodeMethod;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ModuleId">
          <declaration><![CDATA[public string ModuleId = string.Empty;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="RootId">
          <declaration><![CDATA[public string RootId = "Root";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="SearchTreeMethod">
          <declaration><![CDATA[public string SearchTreeMethod;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ServiceRoot">
          <declaration><![CDATA[public string ServiceRoot;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="SortTreeMethod">
          <declaration><![CDATA[public string SortTreeMethod;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="Parameters">
          <declaration><![CDATA[public System.Collections.Generic.Dictionary<string, string> Parameters]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="37" sc="13" el="39" ec="14">UI\WebControls\ItemListServicesOptions.cs</location>
            <body hash="d613397a8573a4cdba8e83b390f6eb50"><![CDATA[{
                return _parameters ?? (_parameters = new Dictionary<string, string>());
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="RibbonBarToolInfo">
      <declaration><![CDATA[public class RibbonBarToolInfo]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public RibbonBarToolInfo()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="32" sc="9" el="38" ec="10">UI\WebControls\RibbonBarToolInfo.cs</location>
            <body hash="66882c5abef87ce30b24bca1ff6e2474"><![CDATA[public RibbonBarToolInfo()
        {
            ControlKey = "";
            ModuleFriendlyName = "";
            LinkWindowTarget = "";
            ToolName = "";
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[public RibbonBarToolInfo(string toolName, bool isHostTool, bool useButton, string linkWindowTarget, string moduleFriendlyName, string controlKey, bool showAsPopUp)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="40" sc="9" el="49" ec="10">UI\WebControls\RibbonBarToolInfo.cs</location>
            <body hash="ea90c81ea3159fd40be61f48d6c35418"><![CDATA[public RibbonBarToolInfo(string toolName, bool isHostTool, bool useButton, string linkWindowTarget, string moduleFriendlyName, string controlKey, bool showAsPopUp)
        {
            ToolName = toolName;
            IsHostTool = isHostTool;
            UseButton = useButton;
            LinkWindowTarget = linkWindowTarget;
            ModuleFriendlyName = moduleFriendlyName;
            ControlKey = controlKey;
            ShowAsPopUp = showAsPopUp;
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="ControlKey">
          <declaration><![CDATA[public string ControlKey]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="IsHostTool">
          <declaration><![CDATA[public bool IsHostTool]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="LinkWindowTarget">
          <declaration><![CDATA[public string LinkWindowTarget]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ModuleFriendlyName">
          <declaration><![CDATA[public string ModuleFriendlyName]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ShowAsPopUp">
          <declaration><![CDATA[public bool ShowAsPopUp]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ToolName">
          <declaration><![CDATA[public string ToolName]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="UseButton">
          <declaration><![CDATA[public bool UseButton]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="Tags">
      <declaration><![CDATA[public class Tags : System.Web.UI.WebControls.WebControl, System.Web.UI.IPostBackEventHandler, System.Web.UI.IPostBackDataHandler]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private string _RepeatDirection = "Horizontal";]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="44" sc="9" el="45" ec="47">UI\WebControls\Tags.cs</location>
            <body hash="252e56499c3c160c8b978659fceb1056"><![CDATA[private string _RepeatDirection = "Horizontal";
        private string _Separator = ",&nbsp;";]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="add_TagsUpdated">
          <declaration><![CDATA[public void add_TagsUpdated(System.EventHandler<System.EventArgs> value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="LoadPostData">
          <declaration><![CDATA[public bool LoadPostData(string postDataKey, NameValueCollection postCollection)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="364" sc="9" el="368" ec="10">UI\WebControls\Tags.cs</location>
            <body hash="ce167a34bd998a38418648f51ebbb6f3"><![CDATA[{
            _Tags = postCollection[postDataKey];

            return true;
        }]]></body>
          </codeblock>
        </method>
        <method name="LocalizeString">
          <declaration><![CDATA[private string LocalizeString(string key)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="122" sc="9" el="134" ec="10">UI\WebControls\Tags.cs</location>
            <body hash="b77d1eb12be9eb1393718095ef543620"><![CDATA[{
            string LocalResourceFile = Utilities.GetLocalResourceFile(this);
            string localizedString = null;
            if (!string.IsNullOrEmpty(key) && !string.IsNullOrEmpty(LocalResourceFile))
            {
                localizedString = Localization.GetString(key, LocalResourceFile);
            }
            else
            {
                localizedString = Null.NullString;
            }
            return localizedString;
        }]]></body>
          </codeblock>
        </method>
        <method name="OnPreRender">
          <declaration><![CDATA[protected override void OnPreRender(System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="226" sc="9" el="248" ec="10">UI\WebControls\Tags.cs</location>
            <body hash="4a08ff0fd6d0c0efc3b2aa8b56ca6a6a"><![CDATA[{
            base.OnPreRender(e);

            if ((!Page.ClientScript.IsClientScriptBlockRegistered(UniqueID)))
            {
                StringBuilder sb = new StringBuilder();

                sb.Append("<script language='javascript' type='text/javascript' >");
                sb.Append(Environment.NewLine);
                sb.Append("function disableEnterKey(e)");
                sb.Append("{");
                sb.Append("var key;");
                sb.Append("if(window.event)");
                sb.Append("key = window.event.keyCode;");
                sb.Append("else ");
                sb.Append("key = e.which;");
                sb.Append("return (key != 13);");
                sb.Append("}");
                sb.Append("</script>");

                Page.ClientScript.RegisterClientScriptBlock(GetType(), UniqueID, sb.ToString());
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnTagsUpdate">
          <declaration><![CDATA[protected void OnTagsUpdate(System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="216" sc="9" el="221" ec="10">UI\WebControls\Tags.cs</location>
            <body hash="cff088d1cdc0f7f8cbcd5fa53600518c"><![CDATA[{
            if (TagsUpdated != null)
            {
                TagsUpdated(this, e);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="RaisePostBackEvent">
          <declaration><![CDATA[public void RaisePostBackEvent(string eventArgument)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="380" sc="9" el="396" ec="10">UI\WebControls\Tags.cs</location>
            <body hash="fb5709a21284cef73677ec5a76f5c847"><![CDATA[{
            switch (eventArgument)
            {
                case "Add":
                    IsEditMode = true;
                    break;
                case "Cancel":
                    IsEditMode = false;
                    break;
                case "Save":
                    SaveTags();
                    break;
                default:
                    IsEditMode = false;
                    break;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="RaisePostDataChangedEvent">
          <declaration><![CDATA[public void RaisePostDataChangedEvent()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="372" sc="9" el="373" ec="10">UI\WebControls\Tags.cs</location>
            <body hash="539fa760ca172337a931519768c64187"><![CDATA[{
        }]]></body>
          </codeblock>
        </method>
        <method name="remove_TagsUpdated">
          <declaration><![CDATA[public void remove_TagsUpdated(System.EventHandler<System.EventArgs> value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="RenderButton">
          <declaration><![CDATA[private void RenderButton(System.Web.UI.HtmlTextWriter writer, string buttonType, string imageUrl)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="137" sc="9" el="152" ec="10">UI\WebControls\Tags.cs</location>
            <body hash="d8db2df65d6a1d5ec50ddb3c24a353d8"><![CDATA[{
            writer.AddAttribute(HtmlTextWriterAttribute.Title, LocalizeString(string.Format("{0}.ToolTip", buttonType)));
            writer.AddAttribute(HtmlTextWriterAttribute.Href, Page.ClientScript.GetPostBackClientHyperlink(this, buttonType));
            writer.RenderBeginTag(HtmlTextWriterTag.A);

            //Image
            if (!string.IsNullOrEmpty(imageUrl))
            {
                writer.AddAttribute(HtmlTextWriterAttribute.Src, ResolveUrl(imageUrl));
                writer.RenderBeginTag(HtmlTextWriterTag.Img);
                writer.RenderEndTag();
            }

            writer.Write(LocalizeString(buttonType));
            writer.RenderEndTag();
        }]]></body>
          </codeblock>
        </method>
        <method name="RenderControl">
          <declaration><![CDATA[public override void RenderControl(System.Web.UI.HtmlTextWriter writer)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="252" sc="9" el="357" ec="10">UI\WebControls\Tags.cs</location>
            <body hash="dd696a1c6ab2c7852a745f2ae987ce24"><![CDATA[{
            //Render Outer Div
            writer.AddAttribute(HtmlTextWriterAttribute.Class, RepeatDirection.ToLower());
            writer.RenderBeginTag(HtmlTextWriterTag.Div);

            //Render Categories
            if (ShowCategories)
            {
                //Render UL
                writer.AddAttribute(HtmlTextWriterAttribute.Class, "categories");
                writer.AddAttribute(HtmlTextWriterAttribute.Title, LocalizeString("Category.ToolTip"));
                writer.RenderBeginTag(HtmlTextWriterTag.Ul);

                //Render Category Links
                var categories = (from cat in ContentItem.Terms where cat.VocabularyId != TagVocabulary.VocabularyId select cat);

                for (int i = 0; i <= categories.Count() - 1; i++)
                {
                    if (i == 0)
                    {
                        //First Category
                        writer.AddAttribute(HtmlTextWriterAttribute.Class, "first_tag");
                    }
                    else if (i == categories.Count() - 1)
                    {
                        //Last Category
                        writer.AddAttribute(HtmlTextWriterAttribute.Class, "last_tag");
                    }
                    writer.RenderBeginTag(HtmlTextWriterTag.Li);

                    RenderTerm(writer, categories.ToList()[i], i < categories.Count() - 1 && RepeatDirection.ToLower() == "horizontal");

                    writer.RenderEndTag();
                }

                writer.RenderEndTag();
            }

            if (ShowTags)
            {
                //Render UL
                writer.AddAttribute(HtmlTextWriterAttribute.Class, "tags");
                writer.AddAttribute(HtmlTextWriterAttribute.Title, LocalizeString("Tag.ToolTip"));
                writer.RenderBeginTag(HtmlTextWriterTag.Ul);

                //Render Tag Links
                var tags = (from cat in ContentItem.Terms where cat.VocabularyId == TagVocabulary.VocabularyId select cat);

                for (int i = 0; i <= tags.Count() - 1; i++)
                {
                    if (i == 0)
                    {
                        //First Tag
                        writer.AddAttribute(HtmlTextWriterAttribute.Class, "first_tag");
                    }
                    else if (i == tags.Count() - 1)
                    {
                        //Last Tag
                        writer.AddAttribute(HtmlTextWriterAttribute.Class, "last_tag");
                    }
                    writer.RenderBeginTag(HtmlTextWriterTag.Li);

                    RenderTerm(writer, tags.ToList()[i], i < tags.Count() - 1 && RepeatDirection.ToLower() == "horizontal");

                    writer.RenderEndTag();
                }

                if (AllowTagging)
                {
                    writer.RenderBeginTag(HtmlTextWriterTag.Li);

                    if (IsEditMode)
                    {
                        writer.Write("&nbsp;&nbsp;");

                        writer.AddAttribute(HtmlTextWriterAttribute.Name, UniqueID);
                        writer.AddAttribute("OnKeyPress", "return disableEnterKey(event)");
                        writer.RenderBeginTag(HtmlTextWriterTag.Input);
                        writer.RenderEndTag();

                        writer.Write("&nbsp;&nbsp;");

                        //Render Save Button
                        RenderButton(writer, "Save", SaveImageUrl);

                        writer.Write("&nbsp;&nbsp;");

                        //Render Add Button
                        RenderButton(writer, "Cancel", CancelImageUrl);
                    }
                    else
                    {
                        writer.Write("&nbsp;&nbsp;");

                        //Render Add Button
                        RenderButton(writer, "Add", AddImageUrl);
                    }

                    writer.RenderEndTag();
                }

                writer.RenderEndTag();
            }

            writer.RenderEndTag();
        }]]></body>
          </codeblock>
        </method>
        <method name="RenderTerm">
          <declaration><![CDATA[private void RenderTerm(System.Web.UI.HtmlTextWriter writer, Term term, bool renderSeparator)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="155" sc="9" el="167" ec="10">UI\WebControls\Tags.cs</location>
            <body hash="a30b317b3f6d372b4e2b59c813fb3e4d"><![CDATA[{
            writer.AddAttribute(HtmlTextWriterAttribute.Href, string.Format(NavigateUrlFormatString, term.Name));
            writer.AddAttribute(HtmlTextWriterAttribute.Title, term.Name);
            writer.AddAttribute(HtmlTextWriterAttribute.Rel, "tag");
            writer.RenderBeginTag(HtmlTextWriterTag.A);
            writer.Write(term.Name);
            writer.RenderEndTag();

            if (renderSeparator)
            {
                writer.Write(Separator);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="SaveTags">
          <declaration><![CDATA[private void SaveTags()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="170" sc="9" el="209" ec="10">UI\WebControls\Tags.cs</location>
            <body hash="bc92d9f1b69e68c373cc8c8456078c57"><![CDATA[{
            string tags = _Tags;

            if (!string.IsNullOrEmpty(tags))
            {
                foreach (string t in tags.Split(','))
                {
                    if (!string.IsNullOrEmpty(t))
                    {
                        string tagName = t.Trim(' ');
                        Term existingTerm = (from term in ContentItem.Terms.AsQueryable() where term.Name.Equals(tagName, StringComparison.CurrentCultureIgnoreCase) select term).SingleOrDefault();

                        if (existingTerm == null)
                        {
                            //Not tagged
                            TermController termController = new TermController();
                            Term term =
                                (from te in termController.GetTermsByVocabulary(TagVocabulary.VocabularyId) where te.Name.Equals(tagName, StringComparison.CurrentCultureIgnoreCase) select te).
                                    SingleOrDefault();
                            if (term == null)
                            {
                                //Add term
                                term = new Term(TagVocabulary.VocabularyId);
                                term.Name = tagName;
                                termController.AddTerm(term);
                            }

                            //Add term to content
                            ContentItem.Terms.Add(term);
                            termController.AddTermToContent(term, ContentItem);
                        }
                    }
                }
            }

            IsEditMode = false;

            //Raise the Tags Updated Event
            OnTagsUpdate(EventArgs.Empty);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_RepeatDirection">
          <declaration><![CDATA[private string _RepeatDirection = "Horizontal";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_Separator">
          <declaration><![CDATA[private string _Separator = ",&nbsp;";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_Tags">
          <declaration><![CDATA[private string _Tags;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="TagsUpdated">
          <declaration><![CDATA[private System.EventHandler<System.EventArgs> TagsUpdated;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="AddImageUrl">
          <declaration><![CDATA[public string AddImageUrl]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="AllowTagging">
          <declaration><![CDATA[public bool AllowTagging]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="CancelImageUrl">
          <declaration><![CDATA[public string CancelImageUrl]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ContentItem">
          <declaration><![CDATA[public ContentItem ContentItem]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="IsEditMode">
          <declaration><![CDATA[public bool IsEditMode]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="71" sc="13" el="78" ec="14">UI\WebControls\Tags.cs</location>
            <body hash="79836fcb7e240d81d99d0aa888ac4e1a"><![CDATA[{
                bool _IsEditMode = false;
                if (ViewState["IsEditMode"] != null)
                {
                    _IsEditMode = Convert.ToBoolean(ViewState["IsEditMode"]);
                }
                return _IsEditMode;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="80" sc="13" el="82" ec="14">UI\WebControls\Tags.cs</location>
            <body hash="84448558c079c4016f8a9b2c807af72d"><![CDATA[{
                ViewState["IsEditMode"] = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="NavigateUrlFormatString">
          <declaration><![CDATA[public string NavigateUrlFormatString]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="RepeatDirection">
          <declaration><![CDATA[public string RepeatDirection]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="90" sc="13" el="92" ec="14">UI\WebControls\Tags.cs</location>
            <body hash="1e45f633d8546ff4c1107ba51da1709b"><![CDATA[{
                return _RepeatDirection;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="94" sc="13" el="96" ec="14">UI\WebControls\Tags.cs</location>
            <body hash="2621413c4582c09a1b88139612d38b65"><![CDATA[{
                _RepeatDirection = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="SaveImageUrl">
          <declaration><![CDATA[public string SaveImageUrl]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Separator">
          <declaration><![CDATA[public string Separator]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="104" sc="13" el="106" ec="14">UI\WebControls\Tags.cs</location>
            <body hash="f1083196f0705ded507d8cf02eb88c65"><![CDATA[{
                return _Separator;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="108" sc="13" el="110" ec="14">UI\WebControls\Tags.cs</location>
            <body hash="cd7c3b5a9d7ec2f1e88dd4fea042ab78"><![CDATA[{
                _Separator = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="ShowCategories">
          <declaration><![CDATA[public bool ShowCategories]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ShowTags">
          <declaration><![CDATA[public bool ShowTags]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="TagVocabulary">
          <declaration><![CDATA[private Vocabulary TagVocabulary]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="52" sc="13" el="55" ec="14">UI\WebControls\Tags.cs</location>
            <body hash="be27dcec67596a0172945c296f67a424"><![CDATA[{
                VocabularyController vocabularyController = new VocabularyController();
                return (from v in vocabularyController.GetVocabularies() where v.IsSystem && v.Name == "Tags" select v).SingleOrDefault();
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
        <event name="TagsUpdated">
          <declaration><![CDATA[public event System.EventHandler<System.EventArgs> TagsUpdated;]]></declaration>
          <documentation>
          </documentation>
        </event>
      </events>
    </class>
    <class name="TermsEventArgs">
      <declaration><![CDATA[public class TermsEventArgs : System.EventArgs]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public TermsEventArgs(Term selectedTerm)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="37" sc="9" el="40" ec="10">UI\WebControls\TermsEventArgs.cs</location>
            <body hash="d8e8f33bda097ff2ff4e525bfcd35260"><![CDATA[public TermsEventArgs(Term selectedTerm)
        {
            _SelectedTerm = selectedTerm;
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
        <field name="_SelectedTerm">
          <declaration><![CDATA[private readonly Term _SelectedTerm;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="SelectedTerm">
          <declaration><![CDATA[public Term SelectedTerm]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="49" sc="13" el="51" ec="14">UI\WebControls\TermsEventArgs.cs</location>
            <body hash="b5b3b8debc77144e75b87c34fc1f8a30"><![CDATA[{
                return _SelectedTerm;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="TermsList">
      <declaration><![CDATA[public class TermsList : System.Web.UI.WebControls.WebControl]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public TermsList()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="add_SelectedTermChanged">
          <declaration><![CDATA[public void add_SelectedTermChanged(System.EventHandler<TermsEventArgs> value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="BindTerms">
          <declaration><![CDATA[public void BindTerms(System.Collections.Generic.List<Term> terms, bool isHeirarchical, bool dataBind)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="192" sc="9" el="203" ec="10">UI\WebControls\TermsList.cs</location>
            <body hash="6b5130a5409271c17fd1c81683749668"><![CDATA[{
            _IsHeirarchical = isHeirarchical;

            _ListBox.DataSource = terms;
            _TreeView.DataSource = terms;

            if (dataBind)
            {
                _ListBox.DataBind();
                _TreeView.DataBind();
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="ClearSelectedTerm">
          <declaration><![CDATA[public void ClearSelectedTerm()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="206" sc="9" el="209" ec="10">UI\WebControls\TermsList.cs</location>
            <body hash="2ff193583d954d8fb1fcc695bf3bfa88"><![CDATA[{
            _ListBox.SelectedIndex = Null.NullInteger;
            _TreeView.UnselectAllNodes();
        }]]></body>
          </codeblock>
        </method>
        <method name="CreateChildControls">
          <declaration><![CDATA[protected override void CreateChildControls()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="120" sc="9" el="140" ec="10">UI\WebControls\TermsList.cs</location>
            <body hash="a3caa0c8857ef956716373b6aec5d275"><![CDATA[{
            Controls.Clear();

            _ListBox = new DnnListBox();
            _ListBox.ID = string.Concat(ID, "_List");
            _ListBox.DataTextField = "Name";
            _ListBox.DataValueField = "TermId";
            _ListBox.AutoPostBack = true;
            _ListBox.SelectedIndexChanged += ListBoxSelectedIndexChanged;

            _TreeView = new DnnTreeView();
            _TreeView.ID = string.Concat(ID, "_Tree");
            _TreeView.DataTextField = "Name";
            _TreeView.DataValueField = "TermId";
            _TreeView.DataFieldID = "TermId";
            _TreeView.DataFieldParentID = "ParentTermId";
            _TreeView.NodeClick += TreeViewNodeClick;

            Controls.Add(_ListBox);
            Controls.Add(_TreeView);
        }]]></body>
          </codeblock>
        </method>
        <method name="ListBoxSelectedIndexChanged">
          <declaration><![CDATA[private void ListBoxSelectedIndexChanged(object sender, System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="176" sc="9" el="179" ec="10">UI\WebControls\TermsList.cs</location>
            <body hash="7b46dd09a755b507d56f42203d6a0017"><![CDATA[{
            //Raise the SelectedTermChanged Event
            OnSelectedTermChanged(new TermsEventArgs(SelectedTerm));
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="143" sc="9" el="145" ec="10">UI\WebControls\TermsList.cs</location>
            <body hash="646808f4eb32fed95e43ff119aba427c"><![CDATA[{
            EnsureChildControls();
        }]]></body>
          </codeblock>
        </method>
        <method name="OnPreRender">
          <declaration><![CDATA[protected override void OnPreRender(System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="148" sc="9" el="160" ec="10">UI\WebControls\TermsList.cs</location>
            <body hash="b739c6b2bff91ca38d1804f5cf940a8a"><![CDATA[{
            _ListBox.Visible = !IsHeirarchical;
            _TreeView.Visible = IsHeirarchical;

            _ListBox.Height = Height;
            _ListBox.Width = Width;
            _TreeView.Height = Height;
            _TreeView.Width = Width;

            _TreeView.ExpandAllNodes();

            base.OnPreRender(e);
        }]]></body>
          </codeblock>
        </method>
        <method name="OnSelectedTermChanged">
          <declaration><![CDATA[protected virtual void OnSelectedTermChanged(TermsEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="163" sc="9" el="169" ec="10">UI\WebControls\TermsList.cs</location>
            <body hash="bdc8ac418bf32f0a46574ab14bd5c006"><![CDATA[{
            //Raise the SelectedTermChanged Event
            if (SelectedTermChanged != null)
            {
                SelectedTermChanged(this, e);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="remove_SelectedTermChanged">
          <declaration><![CDATA[public void remove_SelectedTermChanged(System.EventHandler<TermsEventArgs> value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="TreeViewNodeClick">
          <declaration><![CDATA[private void TreeViewNodeClick(object sender, RadTreeNodeEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="182" sc="9" el="185" ec="10">UI\WebControls\TermsList.cs</location>
            <body hash="7b46dd09a755b507d56f42203d6a0017"><![CDATA[{
            //Raise the SelectedTermChanged Event
            OnSelectedTermChanged(new TermsEventArgs(SelectedTerm));
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_IsHeirarchical">
          <declaration><![CDATA[private bool _IsHeirarchical;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_ListBox">
          <declaration><![CDATA[private DnnListBox _ListBox;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_TreeView">
          <declaration><![CDATA[private DnnTreeView _TreeView;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="SelectedTermChanged">
          <declaration><![CDATA[private System.EventHandler<TermsEventArgs> SelectedTermChanged;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="IsHeirarchical">
          <declaration><![CDATA[public bool IsHeirarchical]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="55" sc="13" el="57" ec="14">UI\WebControls\TermsList.cs</location>
            <body hash="e467d04c1921740ea98c982980538d9b"><![CDATA[{
                return _IsHeirarchical;
            }]]></body>
          </codeblock>
        </property>
        <property name="SelectedTerm">
          <declaration><![CDATA[public Term SelectedTerm]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="63" sc="13" el="78" ec="14">UI\WebControls\TermsList.cs</location>
            <body hash="35930d0c4500a4c330d9dc90981b79fb"><![CDATA[{
                Term _SelectedTerm = null;
                if (!string.IsNullOrEmpty(SelectedValue))
                {
                    int _TermId = int.Parse(SelectedValue);
                    foreach (Term term in Terms)
                    {
                        if (term.TermId == _TermId)
                        {
                            _SelectedTerm = term;
                            break;
                        }
                    }
                }
                return _SelectedTerm;
            }]]></body>
          </codeblock>
        </property>
        <property name="SelectedValue">
          <declaration><![CDATA[public string SelectedValue]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="84" sc="13" el="95" ec="14">UI\WebControls\TermsList.cs</location>
            <body hash="aa4bdf913abb6dcdcb8b22c84409ca1a"><![CDATA[{
                string _SelectedValue = Null.NullString;
                if (IsHeirarchical)
                {
                    _SelectedValue = _TreeView.SelectedValue;
                }
                else
                {
                    _SelectedValue = _ListBox.SelectedValue;
                }
                return _SelectedValue;
            }]]></body>
          </codeblock>
        </property>
        <property name="Terms">
          <declaration><![CDATA[public System.Collections.Generic.List<Term> Terms]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="101" sc="13" el="112" ec="14">UI\WebControls\TermsList.cs</location>
            <body hash="abbbd806182f231f7064ff41811b13e1"><![CDATA[{
                object _DataSource = null;
                if (IsHeirarchical)
                {
                    _DataSource = _TreeView.DataSource;
                }
                else
                {
                    _DataSource = _ListBox.DataSource;
                }
                return _DataSource as List<Term>;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
        <event name="SelectedTermChanged">
          <declaration><![CDATA[public event System.EventHandler<TermsEventArgs> SelectedTermChanged;]]></declaration>
          <documentation>
          </documentation>
        </event>
      </events>
    </class>
    <class name="TermsSelector">
      <declaration><![CDATA[public class TermsSelector : DnnComboBox, IClientAPICallbackEventHandler]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public TermsSelector()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="42" sc="9" el="47" ec="10">UI\WebControls\TermsSelector.cs</location>
            <body hash="ab19eb83b63ca1a1887f6482a87ba983"><![CDATA[public TermsSelector()
        {
            IncludeSystemVocabularies = false;
            IncludeTags = true;
            EnableViewState = false;
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="AddTerms">
          <declaration><![CDATA[private void AddTerms(Vocabulary v, System.Collections.ArrayList terms)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="215" sc="3" el="232" ec="4">UI\WebControls\TermsSelector.cs</location>
            <body hash="8fc6219db29da5595f12bc422db762d2"><![CDATA[{
			ITermController termRep = Util.GetTermController();

			//Add a dummy parent term if simple vocabulary
			if (v.Type == VocabularyType.Simple)
			{
				terms.Add(new { termId = -v.VocabularyId, name = v.Name, parentTermId = Null.NullInteger});
			}
			foreach (Term t in termRep.GetTermsByVocabulary(v.VocabularyId))
			{
				if (v.Type == VocabularyType.Simple)
				{
					t.ParentTermId = -v.VocabularyId;
				}
				terms.Add(new { termId = t.TermId, name = t.Name, parentTermId = t.ParentTermId });
			}

		}]]></body>
          </codeblock>
        </method>
        <method name="GetTerms">
          <declaration><![CDATA[private System.Collections.ArrayList GetTerms()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="191" sc="3" el="212" ec="4">UI\WebControls\TermsSelector.cs</location>
            <body hash="61512f35d51a61b3ca5ddb6e6d0d9805"><![CDATA[{
			var vocabRep = Util.GetVocabularyController();
			var terms = new ArrayList();
			var vocabularies = from v in vocabRep.GetVocabularies() where v.ScopeType.ScopeType == "Application" || (v.ScopeType.ScopeType == "Portal" && v.ScopeId == PortalId) select v;

			foreach (Vocabulary v in vocabularies)
			{
				if (v.IsSystem)
				{
					if (IncludeSystemVocabularies || (IncludeTags && v.Name == "Tags"))
					{
						AddTerms(v, terms);
					}
				}
				else
				{
					AddTerms(v, terms);
				}
			}

			return terms;
		}]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="64" sc="9" el="78" ec="10">UI\WebControls\TermsSelector.cs</location>
            <body hash="dc2d77d5f9366677ac8aa45d3d65b942"><![CDATA[{
            ItemTemplate = new TreeViewTemplate();
            Items.Add(new RadComboBoxItem());
            base.OnInit(e);

			OnClientDropDownOpened = "webcontrols.termsSelector.OnClientDropDownOpened";
			if (!string.IsNullOrEmpty(CssClass))
			{
				CssClass = string.Format("{0} TermsSelector", CssClass);
			}
			else
			{
				CssClass = "TermsSelector";
			}
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="81" sc="3" el="119" ec="4">UI\WebControls\TermsSelector.cs</location>
            <body hash="62eb7750491ad95d04975abba39c9e67"><![CDATA[{
			base.OnLoad(e);

			if(Page.IsPostBack)
			{
				if(Terms == null)
				{
					Terms = new List<Term>();
				}
				else
				{
					Terms.Clear();
				}
				
				if (!string.IsNullOrEmpty(SelectedValue))
				{
					foreach (var id in SelectedValue.Split(','))
					{
						var termId = Convert.ToInt32(id.Trim());
						var term = Util.GetTermController().GetTerm(termId);
						if (term != null)
						{
							Terms.Add(term);
						}
					}

					//clear the append item by client side
					if(Items.Count > 1)
					{
						Items.Remove(1);
					}
				}
			}

			Page.ClientScript.RegisterClientScriptResource(GetType(), "DotNetNuke.Web.UI.WebControls.Resources.TermsSelector.js");

			ClientAPI.RegisterClientVariable(Page, "TermsSelectorCallback",
				ClientAPI.GetCallbackEventReference(this, "'[PARAMS]'", "webcontrols.termsSelector.itemDataLoaded", "this", "webcontrols.termsSelector.itemDataLoadError"), true);
		}]]></body>
          </codeblock>
        </method>
        <method name="OnPreRender">
          <declaration><![CDATA[protected override void OnPreRender(System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="122" sc="9" el="131" ec="10">UI\WebControls\TermsSelector.cs</location>
            <body hash="0963deee61bc77c8fa44305167f31b5c"><![CDATA[{
            base.OnPreRender(e);
            if (Terms != null)
            {
                Attributes.Add("SelectedTerms", String.Join(",", Terms.Select(t => t.TermId.ToString()).ToArray()));
            }
			Attributes.Add("IncludeSystemVocabularies", IncludeSystemVocabularies.ToString().ToLowerInvariant());
			Attributes.Add("IncludeTags", IncludeTags.ToString().ToLowerInvariant());
			Attributes.Add("PortalId", PortalId.ToString());
        }]]></body>
          </codeblock>
        </method>
        <method name="RaiseClientAPICallbackEvent">
          <declaration><![CDATA[public string RaiseClientAPICallbackEvent(string eventArgument)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="175" sc="3" el="184" ec="4">UI\WebControls\TermsSelector.cs</location>
            <body hash="82bc3887df7b5d6c61e6bfdfc1f455a5"><![CDATA[{
			var parameters = eventArgument.Split('-');
			PortalId = Convert.ToInt32(parameters[1]);
			IncludeTags = Convert.ToBoolean(parameters[2]);
			IncludeSystemVocabularies = Convert.ToBoolean(parameters[3]);
			var terms = GetTerms();
			terms.Insert(0, new { clientId = parameters[0]});
			var serializer = new JavaScriptSerializer();
			return serializer.Serialize(terms);
		}]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="IncludeSystemVocabularies">
          <declaration><![CDATA[public bool IncludeSystemVocabularies]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="IncludeTags">
          <declaration><![CDATA[public bool IncludeTags]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="PortalId">
          <declaration><![CDATA[public int PortalId]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Terms">
          <declaration><![CDATA[public System.Collections.Generic.List<Term> Terms]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="TypedControlCollection&lt;T&gt;">
      <declaration><![CDATA[public sealed class TypedControlCollection<T> : System.Web.UI.ControlCollection where T : System.Web.UI.Control]]></declaration>
      <documentation>
        <summary>
 Restricts the client to add only controls of specific type into the control collection
 </summary>
 <remarks></remarks></documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public TypedControlCollection(System.Web.UI.Control owner) : base(owner)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="13" sc="9" el="15" ec="10">UI\WebControls\TypedControlCollection.cs</location>
            <body hash="8240d8573ef369318b74ef1a6f1b7566"><![CDATA[public TypedControlCollection(Control owner) : base(owner)
        {
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="Add">
          <declaration><![CDATA[public override void Add(System.Web.UI.Control child)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="18" sc="9" el="24" ec="10">UI\WebControls\TypedControlCollection.cs</location>
            <body hash="9ef5884fea260669ddf5c6f4f4854f89"><![CDATA[{
            if (!(child is T))
            {
                throw new InvalidOperationException("Not supported");
            }
            base.Add(child);
        }]]></body>
          </codeblock>
        </method>
        <method name="AddAt">
          <declaration><![CDATA[public override void AddAt(int index, System.Web.UI.Control child)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="27" sc="9" el="33" ec="10">UI\WebControls\TypedControlCollection.cs</location>
            <body hash="4a53b574487a01b465433ce915c39d1e"><![CDATA[{
            if (!(child is T))
            {
                throw new InvalidOperationException("Not supported");
            }
            base.AddAt(index, child);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="TChildren&gt;">
      <declaration><![CDATA[public sealed class UniformControlCollection<TOwner, TChildren> : System.Collections.Generic.IList<TChildren>, System.Collections.Generic.ICollection<TChildren>, System.Collections.Generic.IEnumerable<TChildren>, System.Collections.IEnumerable where TOwner : System.Web.UI.Control where TChildren : System.Web.UI.Control]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[internal UniformControlCollection(TOwner owner)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="15" sc="9" el="18" ec="10">UI\WebControls\UniformControlCollection.cs</location>
            <body hash="ec6676485bbe96cacc70fd477e612013"><![CDATA[internal UniformControlCollection(TOwner owner)
        {
            _owner = owner;
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="Add">
          <declaration><![CDATA[public void Add(TChildren item)]]></declaration>
          <documentation>
            <summary>
 Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
 </summary>
 <param name="item">
 The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.
 </param>
 <exception cref="T:System.NotSupportedException">
 The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
 </exception></documentation>
          <codeblock>
            <location sl="187" sc="9" el="189" ec="10">UI\WebControls\UniformControlCollection.cs</location>
            <body hash="bc5dd581d483b98fa81f086fe5d9109f"><![CDATA[{
            _owner.Controls.Add(item);
        }]]></body>
          </codeblock>
        </method>
        <method name="AddAt">
          <declaration><![CDATA[public void AddAt(int index, TChildren childControl)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="21" sc="9" el="23" ec="10">UI\WebControls\UniformControlCollection.cs</location>
            <body hash="b361069bb12911f23fc79922eb0c326b"><![CDATA[{
            _owner.Controls.AddAt(index, childControl);
        }]]></body>
          </codeblock>
        </method>
        <method name="Clear">
          <declaration><![CDATA[public void Clear()]]></declaration>
          <documentation>
            <summary>
 Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
 </summary>
 <exception cref="T:System.NotSupportedException">
 The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
 </exception></documentation>
          <codeblock>
            <location sl="170" sc="9" el="175" ec="10">UI\WebControls\UniformControlCollection.cs</location>
            <body hash="d2b1d5f1e7f13cd782838decb9c3228d"><![CDATA[{
            if (_owner.HasControls())
            {
                _owner.Controls.Clear();
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="Contains">
          <declaration><![CDATA[public bool Contains(TChildren item)]]></declaration>
          <documentation>
            <summary>
 Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
 </summary>
 <returns>
 true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
 </returns>
 <param name="item">
 The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.
 </param></documentation>
          <codeblock>
            <location sl="231" sc="9" el="233" ec="10">UI\WebControls\UniformControlCollection.cs</location>
            <body hash="d7496a59f7afa69578bdc03b4e2f2e28"><![CDATA[{
            return _owner.Controls.Contains(item);
        }]]></body>
          </codeblock>
        </method>
        <method name="CopyTo">
          <declaration><![CDATA[public void CopyTo(TChildren[] array, int arrayIndex)]]></declaration>
          <documentation>
            <summary>
 Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
 </summary>
 <param name="array">
 The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.
 </param>
 <param name="arrayIndex">
 The zero-based index in <paramref name="array" /> at which copying begins.
 </param>
 <exception cref="T:System.ArgumentNullException"><paramref name="array" /> is null.
 </exception>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex" /> is less than 0.
 </exception>
 <exception cref="T:System.ArgumentException"><paramref name="array" /> is multidimensional.
 -or-
 <paramref name="arrayIndex" /> is equal to or greater than the length of <paramref name="array" />.
 -or-
 The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.
 -or-
 Type paramref name="T" cannot be cast automatically to the type of the destination <paramref name="array" />.
 </exception></documentation>
          <codeblock>
            <location sl="213" sc="9" el="219" ec="10">UI\WebControls\UniformControlCollection.cs</location>
            <body hash="c147960a14ef3e8aea7b7ba0d124743e"><![CDATA[{
            var enumerator = GetEnumerator();
            while (enumerator.MoveNext())
            {
                array.SetValue(enumerator.Current, Math.Max(Interlocked.Increment(ref arrayIndex), arrayIndex - 1));
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="EnumerableGetEnumerator">
          <declaration><![CDATA[private System.Collections.IEnumerator EnumerableGetEnumerator()]]></declaration>
          <documentation>
            <summary>
 Returns an enumerator that iterates through a collection.
 </summary>
 <returns>
 An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
 </returns>
 <filterpriority>2</filterpriority></documentation>
          <codeblock>
            <location sl="243" sc="9" el="245" ec="10">UI\WebControls\UniformControlCollection.cs</location>
            <body hash="251165555bb8233a533f6f26e703d947"><![CDATA[{
            return _owner.Controls.GetEnumerator();
        }]]></body>
          </codeblock>
        </method>
        <method name="GetEnumerator">
          <declaration><![CDATA[public System.Collections.Generic.IEnumerator<TChildren> GetEnumerator()]]></declaration>
          <documentation>
            <summary>
 Returns an enumerator that iterates through the collection.
 </summary>
 <returns>
 A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
 </returns>
 <filterpriority>1</filterpriority></documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="IndexOf">
          <declaration><![CDATA[public int IndexOf(TChildren item)]]></declaration>
          <documentation>
            <summary>
 Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1" />.
 </summary>
 <returns>
 The index of <paramref name="item" /> if found in the list; otherwise, -1.
 </returns>
 <param name="item">
 The object to locate in the <see cref="T:System.Collections.Generic.IList`1" />.
 </param></documentation>
          <codeblock>
            <location sl="35" sc="9" el="37" ec="10">UI\WebControls\UniformControlCollection.cs</location>
            <body hash="a181e9b062683c6838955d18def67671"><![CDATA[{
            return _owner.Controls.IndexOf(item);
        }]]></body>
          </codeblock>
        </method>
        <method name="Insert">
          <declaration><![CDATA[public void Insert(int index, TChildren item)]]></declaration>
          <documentation>
            <summary>
  Inserts an item to the <see cref="T:System.Collections.Generic.IList`1" /> at the specified index.
 </summary>
 <param name="index">
  The zero-based index at which <paramref name="item" /> should be inserted.
 </param>
 <param name="item">
  The object to insert into the <see cref="T:System.Collections.Generic.IList`1" />.
 </param>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.
 </exception>
 <exception cref="T:System.NotSupportedException">
 The <see cref="T:System.Collections.Generic.IList`1" /> is read-only.
 </exception></documentation>
          <codeblock>
            <location sl="54" sc="9" el="56" ec="10">UI\WebControls\UniformControlCollection.cs</location>
            <body hash="e22139037df466e2c79460a00e08cbc2"><![CDATA[{
            _owner.Controls.AddAt(index, item);
        }]]></body>
          </codeblock>
        </method>
        <method name="Remove">
          <declaration><![CDATA[public bool Remove(TChildren item)]]></declaration>
          <documentation>
            <summary>
 Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.
 </summary>
 <returns>
 true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.
 </returns>
 <param name="item">
 The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.
 </param>
 <exception cref="T:System.NotSupportedException">
 The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
 </exception></documentation>
          <codeblock>
            <location sl="128" sc="9" el="131" ec="10">UI\WebControls\UniformControlCollection.cs</location>
            <body hash="c6999d5d7760fede3aa62c731c787939"><![CDATA[{
            _owner.Controls.Remove(item);
            return true;
        }]]></body>
          </codeblock>
        </method>
        <method name="RemoveAt">
          <declaration><![CDATA[public void RemoveAt(int index)]]></declaration>
          <documentation>
            <summary>
 Removes the <see cref="T:System.Collections.Generic.IList`1" /> item at the specified index.
 </summary>
 <param name="index">
 The zero-based index of the item to remove.
 </param>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.
 </exception>
 <exception cref="T:System.NotSupportedException">
 The <see cref="T:System.Collections.Generic.IList`1" /> is read-only.
 </exception></documentation>
          <codeblock>
            <location sl="70" sc="9" el="72" ec="10">UI\WebControls\UniformControlCollection.cs</location>
            <body hash="9beb34ab3dc9a171330e42e2cdc39d55"><![CDATA[{
            _owner.Controls.RemoveAt(index);
        }]]></body>
          </codeblock>
        </method>
        <method name="System.Collections.IEnumerable.GetEnumerator">
          <declaration><![CDATA[System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="248" sc="9" el="250" ec="10">UI\WebControls\UniformControlCollection.cs</location>
            <body hash="aea49d2e7b57e449800372649d5a1f6f"><![CDATA[{
            return EnumerableGetEnumerator();
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_owner">
          <declaration><![CDATA[private readonly TOwner _owner;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="Count">
          <declaration><![CDATA[public int Count]]></declaration>
          <documentation>
            <summary>
 Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
 </summary>
 <returns>
 The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
 </returns></documentation>
          <codeblock>
            <location sl="110" sc="13" el="112" ec="14">UI\WebControls\UniformControlCollection.cs</location>
            <body hash="28747f094ea8b2cb982cf50edfbda50b"><![CDATA[{
                return _owner.HasControls() ? _owner.Controls.Count : 0;
            }]]></body>
          </codeblock>
        </property>
        <property name="IsReadOnly">
          <declaration><![CDATA[public bool IsReadOnly]]></declaration>
          <documentation>
            <summary>
 Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
 </summary>
 <returns>
 true if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, false.
 </returns></documentation>
          <codeblock>
            <location sl="142" sc="13" el="144" ec="14">UI\WebControls\UniformControlCollection.cs</location>
            <body hash="479cced518a49e9e626d5350fca9bbad"><![CDATA[{
                return false;
            }]]></body>
          </codeblock>
        </property>
        <property name="Item">
          <declaration><![CDATA[public TChildren this[int index]]]></declaration>
          <documentation>
            <summary>
 Gets or sets the element at the specified index.
 </summary>
 <returns>
 The element at the specified index.
 </returns>
 <param name="index">
 The zero-based index of the element to get or set.
 </param>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.
 </exception>
 <exception cref="T:System.NotSupportedException">
 The property is set and the <see cref="T:System.Collections.Generic.IList`1" /> is read-only.
 </exception></documentation>
          <codeblock>
            <location sl="91" sc="13" el="93" ec="14">UI\WebControls\UniformControlCollection.cs</location>
            <body hash="8e295659ba1035f4eb0ea6211b4a8068"><![CDATA[{
                return _owner.Controls[index] as TChildren;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="95" sc="13" el="98" ec="14">UI\WebControls\UniformControlCollection.cs</location>
            <body hash="d6c47f1552469930f9a1abde208617c0"><![CDATA[{
                RemoveAt(index);
                AddAt(index, value);
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="DotNetNuke.Web.UI.WebControls.Extensions">
    <class name="ListControlExtensions">
      <declaration><![CDATA[public static class ListControlExtensions]]></declaration>
      <documentation>
      </documentation>
      <constructors>
      </constructors>
      <methods>
        <method name="AddItem">
          <declaration><![CDATA[public static void AddItem(this System.Web.UI.WebControls.ListControl control, string text, string value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="30" sc="9" el="32" ec="10">UI\WebControls\Extensions\ListControlExtensions.cs</location>
            <body hash="08509fee212759a7a13232809af2e1b0"><![CDATA[{
            control.Items.Add(new ListItem(text, value));
        }]]></body>
          </codeblock>
        </method>
        <method name="DataBind">
          <declaration><![CDATA[public static void DataBind(this System.Web.UI.WebControls.ListControl control, string initialValue)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="40" sc="9" el="42" ec="10">UI\WebControls\Extensions\ListControlExtensions.cs</location>
            <body hash="934dacef49957d0c43844545e35286fa"><![CDATA[{
            DataBind(control, initialValue, false);
        }]]></body>
          </codeblock>
        </method>
        <method name="DataBind">
          <declaration><![CDATA[public static void DataBind(this System.Web.UI.WebControls.ListControl control, string initial, bool findByText)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="45" sc="9" el="49" ec="10">UI\WebControls\Extensions\ListControlExtensions.cs</location>
            <body hash="cc7fc91ca85052192ecd556e81f914c1"><![CDATA[{
            control.DataBind();

            Select(control, initial, findByText);
        }]]></body>
          </codeblock>
        </method>
        <method name="FindByTextWithIgnoreCase">
          <declaration><![CDATA[public static System.Web.UI.WebControls.ListItem FindByTextWithIgnoreCase(this System.Web.UI.WebControls.ListItemCollection listItems, string text)]]></declaration>
          <documentation>
            <summary>
 Use this method instead of ListItemCollection.FindByText to find the specific item with case-insensitive.
 </summary>
 <param name="listItems">the items.</param>
 <param name="text">the item with this text want to find.</param>
 <returns>the specific item or null if didn't match the text with any item.</returns></documentation>
          <codeblock>
            <location sl="94" sc="3" el="96" ec="4">UI\WebControls\Extensions\ListControlExtensions.cs</location>
            <body hash="9d453ed4d56d7b45d8bb45e4be0521fe"><![CDATA[{
			return listItems.Cast<ListItem>().FirstOrDefault(item => item.Text.Equals(text, StringComparison.InvariantCultureIgnoreCase));
		}]]></body>
          </codeblock>
        </method>
        <method name="FindByValueWithIgnoreCase">
          <declaration><![CDATA[public static System.Web.UI.WebControls.ListItem FindByValueWithIgnoreCase(this System.Web.UI.WebControls.ListItemCollection listItems, string value)]]></declaration>
          <documentation>
            <summary>
 Use this method instead of ListItemCollection.FindBValue to find the specific item with case-insensitive.
 </summary>
 <param name="listItems">the items.</param>
 <param name="value">the item with this value want to find.</param>
 <returns>the specific item or null if didn't match the value with any item.</returns></documentation>
          <codeblock>
            <location sl="105" sc="3" el="107" ec="4">UI\WebControls\Extensions\ListControlExtensions.cs</location>
            <body hash="d031f44631a343d5592917bdd38c9332"><![CDATA[{
			return listItems.Cast<ListItem>().FirstOrDefault(item => item.Value.Equals(value, StringComparison.InvariantCultureIgnoreCase));
		}]]></body>
          </codeblock>
        </method>
        <method name="InsertItem">
          <declaration><![CDATA[public static void InsertItem(this System.Web.UI.WebControls.ListControl control, int index, string text, string value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="35" sc="9" el="37" ec="10">UI\WebControls\Extensions\ListControlExtensions.cs</location>
            <body hash="49bf5d8eef368cf6ad712831a8fb0bc4"><![CDATA[{
            control.Items.Insert(index, new ListItem(text, value));
        }]]></body>
          </codeblock>
        </method>
        <method name="Select">
          <declaration><![CDATA[public static void Select(this System.Web.UI.WebControls.ListControl control, string initial)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="52" sc="9" el="54" ec="10">UI\WebControls\Extensions\ListControlExtensions.cs</location>
            <body hash="62d2eae2805f295be0bdd1a52cd45541"><![CDATA[{
            Select(control, initial, false, -1);
        }]]></body>
          </codeblock>
        </method>
        <method name="Select">
          <declaration><![CDATA[public static void Select(this System.Web.UI.WebControls.ListControl control, string initial, bool findByText)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="57" sc="9" el="59" ec="10">UI\WebControls\Extensions\ListControlExtensions.cs</location>
            <body hash="9d1f62fdf5a8f14619ee0215e3f70efe"><![CDATA[{
            Select(control, initial, findByText, -1);
        }]]></body>
          </codeblock>
        </method>
        <method name="Select">
          <declaration><![CDATA[public static void Select(this System.Web.UI.WebControls.ListControl control, string initial, bool findByText, int fallbackIndex)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="62" sc="9" el="86" ec="10">UI\WebControls\Extensions\ListControlExtensions.cs</location>
            <body hash="b58ce8c350984fe433761cb6c97bc277"><![CDATA[{
            control.ClearSelection(); 
            if (findByText)
            {
				if (control.Items.FindByTextWithIgnoreCase(initial) != null)
                {
					control.Items.FindByTextWithIgnoreCase(initial).Selected = true;
                }
                else if (fallbackIndex > -1)
                {
                    control.Items[fallbackIndex].Selected = true;
                }
            }
            else
            {
				if (control.Items.FindByValueWithIgnoreCase(initial) != null)
                {
					control.Items.FindByValueWithIgnoreCase(initial).Selected = true;
                }
                else if (fallbackIndex > -1)
                {
                    control.Items[fallbackIndex].Selected = true;
                }
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="WebControlExtensions">
      <declaration><![CDATA[public static class WebControlExtensions]]></declaration>
      <documentation>
      </documentation>
      <constructors>
      </constructors>
      <methods>
        <method name="AddCssClass">
          <declaration><![CDATA[public static void AddCssClass(this System.Web.UI.WebControls.WebControl control, string cssClass)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="11" sc="9" el="26" ec="10">UI\WebControls\Extensions\WebControlExtensions.cs</location>
            <body hash="59b9d7c741c4176f6e0545b4a77f1b8e"><![CDATA[{
            if (string.IsNullOrEmpty(control.CssClass))
            {
                control.CssClass = cssClass;
            }
            else
            {
                var cssClasses = control.CssClass.Split(' ');
                var classExists = cssClasses.Any(@class => @class == cssClass);

                if (!classExists)
                {
                    control.CssClass += " " + cssClass;
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="Orientation">
          <declaration><![CDATA[public static System.Web.UI.WebControls.Orientation Orientation(this Size size)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="38" sc="9" el="41" ec="10">UI\WebControls\Extensions\WebControlExtensions.cs</location>
            <body hash="cc0e296324b4a8a7356e1accf591c368"><![CDATA[{
            return size.Width > size.Height ?
                System.Web.UI.WebControls.Orientation.Horizontal : System.Web.UI.WebControls.Orientation.Vertical;
        }]]></body>
          </codeblock>
        </method>
        <method name="RemoveCssClass">
          <declaration><![CDATA[public static void RemoveCssClass(this System.Web.UI.WebControls.WebControl control, string cssClass)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="29" sc="9" el="35" ec="10">UI\WebControls\Extensions\WebControlExtensions.cs</location>
            <body hash="5866ca476bc5a1ebd0043ee1b669fc29"><![CDATA[{
            if (!string.IsNullOrEmpty(control.CssClass))
            {
                var cssClasses = control.CssClass.Split(' ');
                control.CssClass = string.Join(" ", cssClasses.Where(@class => @class != cssClass).ToArray());
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="DotNetNuke.Web.UI.WebControls.PropertyEditorControls">
    <class name="DateEditControl">
      <declaration><![CDATA[public class DateEditControl : EditControl]]></declaration>
      <documentation>-----------------------------------------------------------------------------
 <summary>
 The DateEditControl control provides a standard UI component for editing
 date properties.
 </summary>
 <remarks>
 </remarks>
 -----------------------------------------------------------------------------</documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DateEditControl()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
        <constructor name=".cctor">
          <declaration><![CDATA[static DateEditControl()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="55" sc="6" el="55" ec="102">UI\WebControls\PropertyEditorControls\DateEditControl.cs</location>
            <body hash="dd3f91951cca64e7a0370d1cb4bc530e"><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof (DateEditControl))]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="CreateChildControls">
          <declaration><![CDATA[protected override void CreateChildControls()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="223" sc="9" el="231" ec="10">UI\WebControls\PropertyEditorControls\DateEditControl.cs</location>
            <body hash="a568b1d9ee388820c5874dbb1db59107"><![CDATA[{
            base.CreateChildControls();


			DateControl.ControlStyle.CopyFrom(ControlStyle);
			DateControl.ID = base.ID + "_control";

			Controls.Add(DateControl);
        }]]></body>
          </codeblock>
        </method>
        <method name="LoadDateControls">
          <declaration><![CDATA[protected virtual void LoadDateControls()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="234" sc="9" el="239" ec="10">UI\WebControls\PropertyEditorControls\DateEditControl.cs</location>
            <body hash="6ec9d22a1e479d0bd7b2b97bcc39db81"><![CDATA[{
            if (DateValue != Null.NullDate)
            {
				DateControl.SelectedDate = DateValue.Date;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="LoadPostData">
          <declaration><![CDATA[public override bool LoadPostData(string postDataKey, NameValueCollection postCollection)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="242" sc="9" el="254" ec="10">UI\WebControls\PropertyEditorControls\DateEditControl.cs</location>
            <body hash="6fa906bad107377bef2ccdfa3c2ab43a"><![CDATA[{
            EnsureChildControls();
            bool dataChanged = false;
            string presentValue = StringValue;
			string postedValue = postCollection[postDataKey + "_control"];
            if (!presentValue.Equals(postedValue))
            {
                Value = DateTime.Parse(postedValue).ToString(CultureInfo.InvariantCulture);
                dataChanged = true;
            }
            LoadDateControls();
            return dataChanged;
        }]]></body>
          </codeblock>
        </method>
        <method name="OnDataChanged">
          <declaration><![CDATA[protected override void OnDataChanged(System.EventArgs e)]]></declaration>
          <documentation>
            <summary>
 OnDataChanged is called by the PostBack Handler when the Data has changed
 </summary>
 <param name="e">An EventArgs object</param></documentation>
          <codeblock>
            <location sl="261" sc="9" el="267" ec="10">UI\WebControls\PropertyEditorControls\DateEditControl.cs</location>
            <body hash="3946912378f0fca003296fda605db7f2"><![CDATA[{
            var args = new PropertyEditorEventArgs(Name);
            args.Value = DateValue;
            args.OldValue = OldDateValue;
            args.StringValue = DateValue.ToString(CultureInfo.InvariantCulture);
            base.OnValueChanged(args);
        }]]></body>
          </codeblock>
        </method>
        <method name="OnPreRender">
          <declaration><![CDATA[protected override void OnPreRender(System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="270" sc="9" el="279" ec="10">UI\WebControls\PropertyEditorControls\DateEditControl.cs</location>
            <body hash="9313c537401693cdcb41cbd4cf79559d"><![CDATA[{
            base.OnPreRender(e);

            LoadDateControls();

            if (Page != null && EditMode == PropertyEditorMode.Edit)
            {
                Page.RegisterRequiresPostBack(this);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="RenderEditMode">
          <declaration><![CDATA[protected override void RenderEditMode(System.Web.UI.HtmlTextWriter writer)]]></declaration>
          <documentation>
            <summary>
 RenderEditMode is called by the base control to render the control in Edit Mode
 </summary>
 <param name="writer"></param></documentation>
          <codeblock>
            <location sl="286" sc="9" el="288" ec="10">UI\WebControls\PropertyEditorControls\DateEditControl.cs</location>
            <body hash="42fcc3814ddbb2b2a30d58482b7a6866"><![CDATA[{
            RenderChildren(writer);
        }]]></body>
          </codeblock>
        </method>
        <method name="RenderViewMode">
          <declaration><![CDATA[protected override void RenderViewMode(System.Web.UI.HtmlTextWriter writer)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 RenderViewMode renders the View (readonly) mode of the control
 </summary>
 <param name="writer">A HtmlTextWriter.</param>
 <history>
     [cnurse]	06/11/2007	created
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="300" sc="9" el="305" ec="10">UI\WebControls\PropertyEditorControls\DateEditControl.cs</location>
            <body hash="f33a1d294d91611d30bb98749a4ab035"><![CDATA[{
            ControlStyle.AddAttributesToRender(writer);
            writer.RenderBeginTag(HtmlTextWriterTag.Span);
            writer.Write(StringValue);
            writer.RenderEndTag();
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_dateControl">
          <declaration><![CDATA[private DnnDatePicker _dateControl;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Logger">
          <declaration><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof(DateEditControl));]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="DateControl">
          <declaration><![CDATA[private DnnDatePicker DateControl]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="210" sc="7" el="217" ec="8">UI\WebControls\PropertyEditorControls\DateEditControl.cs</location>
            <body hash="cc235f24d850e9a1ec108103f5031f3d"><![CDATA[{
			    if (_dateControl == null)
			    {
				    _dateControl = new DnnDatePicker();
			    }

			    return _dateControl;
		    }]]></body>
          </codeblock>
        </property>
        <property name="DateValue">
          <declaration><![CDATA[protected System.DateTime DateValue]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 DateValue returns the Date representation of the Value
 </summary>
 <value>A Date representing the Value</value>
 <history>
     [cnurse]	05/22/2007	created
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="72" sc="13" el="85" ec="14">UI\WebControls\PropertyEditorControls\DateEditControl.cs</location>
            <body hash="5b0df99af959a47849e89b57647cdde5"><![CDATA[{
                DateTime dteValue = Null.NullDate;
                try
                {
                    var dteString = Convert.ToString(Value);
                    DateTime.TryParse(dteString, CultureInfo.InvariantCulture, DateTimeStyles.None, out dteValue);
                }
                catch (Exception exc)
                {
                    Logger.Error(exc);

                }
                return dteValue;
            }]]></body>
          </codeblock>
        </property>
        <property name="DefaultFormat">
          <declaration><![CDATA[protected virtual string DefaultFormat]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 DefaultDateFormat is a string that will be used to format the date in the absence of a
 FormatAttribute
 </summary>
 <value>A String representing the default format to use to render the date</value>
 <returns>A Format String</returns>
 <history>
     [cnurse]	10/29/2007	created
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="102" sc="13" el="104" ec="14">UI\WebControls\PropertyEditorControls\DateEditControl.cs</location>
            <body hash="24374c06069974f980535f23892039c8"><![CDATA[{
                return "d";
            }]]></body>
          </codeblock>
        </property>
        <property name="Format">
          <declaration><![CDATA[protected virtual string Format]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 Format is a string that will be used to format the date in View mode
 </summary>
 <value>A String representing the format to use to render the date</value>
 <returns>A Format String</returns>
 <history>
     [cnurse]	06/11/2007	created
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="120" sc="13" el="135" ec="14">UI\WebControls\PropertyEditorControls\DateEditControl.cs</location>
            <body hash="344f48fd9148a42dc5a56a00182fcf1c"><![CDATA[{
                string _Format = DefaultFormat;
                if (CustomAttributes != null)
                {
                    foreach (Attribute attribute in CustomAttributes)
                    {
                        if (attribute is FormatAttribute)
                        {
                            var formatAtt = (FormatAttribute) attribute;
                            _Format = formatAtt.Format;
                            break;
                        }
                    }
                }
                return _Format;
            }]]></body>
          </codeblock>
        </property>
        <property name="ID">
          <declaration><![CDATA[public override string ID]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="194" sc="4" el="196" ec="5">UI\WebControls\PropertyEditorControls\DateEditControl.cs</location>
            <body hash="9d54d39cf10893e53e90598fc72111dc"><![CDATA[{
				return base.ID + "_control";
			}]]></body>
          </codeblock>
          <codeblock>
            <location sl="198" sc="4" el="200" ec="5">UI\WebControls\PropertyEditorControls\DateEditControl.cs</location>
            <body hash="60597c03664dcc81e2e91a8b122ab89e"><![CDATA[{
				base.ID = value;
			}]]></body>
          </codeblock>
        </property>
        <property name="OldDateValue">
          <declaration><![CDATA[protected System.DateTime OldDateValue]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 OldDateValue returns the Date representation of the OldValue
 </summary>
 <value>A Date representing the OldValue</value>
 <history>
     [cnurse]	05/22/2007	created
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="150" sc="13" el="164" ec="14">UI\WebControls\PropertyEditorControls\DateEditControl.cs</location>
            <body hash="ec6e93d7b4de90f7abc66962523d90f5"><![CDATA[{
                DateTime dteValue = Null.NullDate;
                try
                {
					//Try and cast the value to an DateTime
                    var dteString = OldValue as string;
                    dteValue = DateTime.Parse(dteString, CultureInfo.InvariantCulture);
                }
                catch (Exception exc)
                {
                    Logger.Error(exc);

                }
                return dteValue;
            }]]></body>
          </codeblock>
        </property>
        <property name="StringValue">
          <declaration><![CDATA[protected override string StringValue]]></declaration>
          <documentation>
            <summary>
 The Value expressed as a String
 </summary>
          </documentation>
          <codeblock>
            <location sl="173" sc="13" el="180" ec="14">UI\WebControls\PropertyEditorControls\DateEditControl.cs</location>
            <body hash="a040d8cff0b9d4043fd60427b01ba0b7"><![CDATA[{
                string _StringValue = Null.NullString;
                if ((DateValue.ToUniversalTime().Date != (DateTime)SqlDateTime.MinValue && DateValue != Null.NullDate))
                {
                    _StringValue = DateValue.ToString(Format);
                }
                return _StringValue;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="182" sc="13" el="184" ec="14">UI\WebControls\PropertyEditorControls\DateEditControl.cs</location>
            <body hash="7db8ea549f90ec5b64f759bdc0db03fb"><![CDATA[{
                Value = DateTime.Parse(value);
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DateTimeEditControl">
      <declaration><![CDATA[public class DateTimeEditControl : EditControl]]></declaration>
      <documentation>-----------------------------------------------------------------------------
 Project:    DotNetNuke
 Namespace:  DotNetNuke.UI.WebControls
 Class:      DateEditControl
 -----------------------------------------------------------------------------
 <summary>
 The DateEditControl control provides a standard UI component for editing
 date properties.
 </summary>
 <remarks>
 </remarks>
 <history>
     [cnurse]	05/10/2007	created
 </history>
 -----------------------------------------------------------------------------</documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DateTimeEditControl()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
        <constructor name=".cctor">
          <declaration><![CDATA[static DateTimeEditControl()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="62" sc="3" el="62" ec="102">UI\WebControls\PropertyEditorControls\DateTimeEditControl.cs</location>
            <body hash="3a5d89e2fad0cde53ac72db8a1942814"><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof(DateTimeEditControl))]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="CreateChildControls">
          <declaration><![CDATA[protected override void CreateChildControls()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="230" sc="3" el="237" ec="4">UI\WebControls\PropertyEditorControls\DateTimeEditControl.cs</location>
            <body hash="2d196cc5937f54932200845528b12228"><![CDATA[{
			base.CreateChildControls();

			DateControl.ControlStyle.CopyFrom(ControlStyle);
			DateControl.ID = base.ID + "_control";

			Controls.Add(DateControl);
		}]]></body>
          </codeblock>
        </method>
        <method name="LoadDateControls">
          <declaration><![CDATA[protected virtual void LoadDateControls()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="240" sc="3" el="245" ec="4">UI\WebControls\PropertyEditorControls\DateTimeEditControl.cs</location>
            <body hash="72f62088fed4ed8e1436295b66623d78"><![CDATA[{
			if (DateValue != Null.NullDate)
			{
				DateControl.SelectedDate = DateValue.Date;
			}
		}]]></body>
          </codeblock>
        </method>
        <method name="LoadPostData">
          <declaration><![CDATA[public override bool LoadPostData(string postDataKey, NameValueCollection postCollection)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="248" sc="3" el="265" ec="4">UI\WebControls\PropertyEditorControls\DateTimeEditControl.cs</location>
            <body hash="83b33d1f00b6e5a72695ce3b0a4dc2e0"><![CDATA[{
			EnsureChildControls();
			bool dataChanged = false;
			string presentValue = StringValue;
			string postedValue = postCollection[postDataKey + "_control"];
			if (!presentValue.Equals(postedValue))
			{
				DateTime value;
				if (DateTime.TryParseExact(postedValue, "yyyy-MM-dd-HH-mm-ss", CultureInfo.InvariantCulture,
										   DateTimeStyles.None, out value))
				{
					Value = value;
					dataChanged = true;
				}
			}
            LoadDateControls();
			return dataChanged;
		}]]></body>
          </codeblock>
        </method>
        <method name="OnDataChanged">
          <declaration><![CDATA[protected override void OnDataChanged(System.EventArgs e)]]></declaration>
          <documentation>
            <summary>
 OnDataChanged is called by the PostBack Handler when the Data has changed
 </summary>
 <param name="e">An EventArgs object</param></documentation>
          <codeblock>
            <location sl="272" sc="3" el="278" ec="4">UI\WebControls\PropertyEditorControls\DateTimeEditControl.cs</location>
            <body hash="8ecac6ab3a09c54c0b174eeaf118ac61"><![CDATA[{
			var args = new PropertyEditorEventArgs(Name);
			args.Value = DateValue;
			args.OldValue = OldDateValue;
			args.StringValue = DateValue.ToString(CultureInfo.InvariantCulture);
			base.OnValueChanged(args);
		}]]></body>
          </codeblock>
        </method>
        <method name="OnPreRender">
          <declaration><![CDATA[protected override void OnPreRender(System.EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="281" sc="3" el="290" ec="4">UI\WebControls\PropertyEditorControls\DateTimeEditControl.cs</location>
            <body hash="beb371f903993fe07055aecdf803c760"><![CDATA[{
			base.OnPreRender(e);

			LoadDateControls();

			if (Page != null && EditMode == PropertyEditorMode.Edit)
			{
				Page.RegisterRequiresPostBack(this);
			}
		}]]></body>
          </codeblock>
        </method>
        <method name="RenderEditMode">
          <declaration><![CDATA[protected override void RenderEditMode(System.Web.UI.HtmlTextWriter writer)]]></declaration>
          <documentation>
            <summary>
 RenderEditMode is called by the base control to render the control in Edit Mode
 </summary>
 <param name="writer"></param></documentation>
          <codeblock>
            <location sl="297" sc="3" el="299" ec="4">UI\WebControls\PropertyEditorControls\DateTimeEditControl.cs</location>
            <body hash="c4b44b37e8d359bded2f7edf1c7fea1c"><![CDATA[{
			RenderChildren(writer);
		}]]></body>
          </codeblock>
        </method>
        <method name="RenderViewMode">
          <declaration><![CDATA[protected override void RenderViewMode(System.Web.UI.HtmlTextWriter writer)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 RenderViewMode renders the View (readonly) mode of the control
 </summary>
 <param name="writer">A HtmlTextWriter.</param>
 <history>
     [cnurse]	06/11/2007	created
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="311" sc="3" el="316" ec="4">UI\WebControls\PropertyEditorControls\DateTimeEditControl.cs</location>
            <body hash="8cdbb18c97c3a2383fe2bfa0eefc106c"><![CDATA[{
			ControlStyle.AddAttributesToRender(writer);
			writer.RenderBeginTag(HtmlTextWriterTag.Span);
			writer.Write(StringValue);
			writer.RenderEndTag();
		}]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_dateControl">
          <declaration><![CDATA[private DnnDateTimePicker _dateControl;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Logger">
          <declaration><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof(DateTimeEditControl));]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="DateControl">
          <declaration><![CDATA[private DnnDateTimePicker DateControl]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="217" sc="4" el="224" ec="5">UI\WebControls\PropertyEditorControls\DateTimeEditControl.cs</location>
            <body hash="6934efb3f30de53f844df692743769d0"><![CDATA[{
				if (_dateControl == null)
				{
					_dateControl = new DnnDateTimePicker();
				}

				return _dateControl;
			}]]></body>
          </codeblock>
        </property>
        <property name="DateValue">
          <declaration><![CDATA[protected System.DateTime DateValue]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 DateValue returns the Date representation of the Value
 </summary>
 <value>A Date representing the Value</value>
 <history>
     [cnurse]	05/22/2007	created
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="79" sc="4" el="92" ec="5">UI\WebControls\PropertyEditorControls\DateTimeEditControl.cs</location>
            <body hash="a30bce60a752bd73269c1af92a11e0dc"><![CDATA[{
				DateTime dteValue = Null.NullDate;
				try
				{
					var dteString = Convert.ToString(Value);
					DateTime.TryParse(dteString, CultureInfo.InvariantCulture, DateTimeStyles.None, out dteValue);
				}
				catch (Exception exc)
				{
					Logger.Error(exc);

				}
				return dteValue;
			}]]></body>
          </codeblock>
        </property>
        <property name="DefaultFormat">
          <declaration><![CDATA[protected virtual string DefaultFormat]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 DefaultDateFormat is a string that will be used to format the date in the absence of a
 FormatAttribute
 </summary>
 <value>A String representing the default format to use to render the date</value>
 <returns>A Format String</returns>
 <history>
     [cnurse]	10/29/2007	created
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="109" sc="4" el="111" ec="5">UI\WebControls\PropertyEditorControls\DateTimeEditControl.cs</location>
            <body hash="83aff98b56f13837fe3f0906e67a6234"><![CDATA[{
				return "g";
			}]]></body>
          </codeblock>
        </property>
        <property name="Format">
          <declaration><![CDATA[protected virtual string Format]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 Format is a string that will be used to format the date in View mode
 </summary>
 <value>A String representing the format to use to render the date</value>
 <returns>A Format String</returns>
 <history>
     [cnurse]	06/11/2007	created
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="127" sc="4" el="142" ec="5">UI\WebControls\PropertyEditorControls\DateTimeEditControl.cs</location>
            <body hash="7cb17bb069312c9740f058a0709e4d3f"><![CDATA[{
				string _Format = DefaultFormat;
				if (CustomAttributes != null)
				{
					foreach (Attribute attribute in CustomAttributes)
					{
						if (attribute is FormatAttribute)
						{
							var formatAtt = (FormatAttribute)attribute;
							_Format = formatAtt.Format;
							break;
						}
					}
				}
				return _Format;
			}]]></body>
          </codeblock>
        </property>
        <property name="ID">
          <declaration><![CDATA[public override string ID]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="201" sc="4" el="203" ec="5">UI\WebControls\PropertyEditorControls\DateTimeEditControl.cs</location>
            <body hash="9d54d39cf10893e53e90598fc72111dc"><![CDATA[{
				return base.ID + "_control";
			}]]></body>
          </codeblock>
          <codeblock>
            <location sl="205" sc="4" el="207" ec="5">UI\WebControls\PropertyEditorControls\DateTimeEditControl.cs</location>
            <body hash="60597c03664dcc81e2e91a8b122ab89e"><![CDATA[{
				base.ID = value;
			}]]></body>
          </codeblock>
        </property>
        <property name="OldDateValue">
          <declaration><![CDATA[protected System.DateTime OldDateValue]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 OldDateValue returns the Date representation of the OldValue
 </summary>
 <value>A Date representing the OldValue</value>
 <history>
     [cnurse]	05/22/2007	created
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="157" sc="4" el="171" ec="5">UI\WebControls\PropertyEditorControls\DateTimeEditControl.cs</location>
            <body hash="5c508a1ff4666203b9f43871f59707a6"><![CDATA[{
				DateTime dteValue = Null.NullDate;
				try
				{
					//Try and cast the value to an DateTime
					var dteString = OldValue as string;
					dteValue = DateTime.Parse(dteString, CultureInfo.InvariantCulture);
				}
				catch (Exception exc)
				{
					Logger.Error(exc);

				}
				return dteValue;
			}]]></body>
          </codeblock>
        </property>
        <property name="StringValue">
          <declaration><![CDATA[protected override string StringValue]]></declaration>
          <documentation>
            <summary>
 The Value expressed as a String
 </summary>
          </documentation>
          <codeblock>
            <location sl="180" sc="4" el="187" ec="5">UI\WebControls\PropertyEditorControls\DateTimeEditControl.cs</location>
            <body hash="f1e09c8025dca693d1e4f8866c87532e"><![CDATA[{
				string _StringValue = Null.NullString;
                if ((DateValue.ToUniversalTime().Date != (DateTime)SqlDateTime.MinValue && DateValue != Null.NullDate))
				{
					_StringValue = DateValue.ToString(Format);
				}
				return _StringValue;
			}]]></body>
          </codeblock>
          <codeblock>
            <location sl="189" sc="4" el="191" ec="5">UI\WebControls\PropertyEditorControls\DateTimeEditControl.cs</location>
            <body hash="1af9820fe6206f70172eee4f866d7117"><![CDATA[{
				Value = DateTime.Parse(value);
			}]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="DotNetNuke.Web.Validators">
    <class name="AttributeBasedObjectValidator&lt;TAttribute&gt;">
      <declaration><![CDATA[public abstract class AttributeBasedObjectValidator<TAttribute> : PropertyBasedObjectValidator where TAttribute : System.Attribute]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[protected AttributeBasedObjectValidator()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="ValidateAttribute">
          <declaration><![CDATA[protected abstract ValidationResult ValidateAttribute(object target, System.Reflection.PropertyInfo targetProperty, TAttribute attribute);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="ValidateProperty">
          <declaration><![CDATA[protected override ValidationResult ValidateProperty(object target, System.Reflection.PropertyInfo targetProperty)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="34" sc="9" el="38" ec="10">Validators\AttributeBasedObjectValidator.cs</location>
            <body hash="05cd244c359de6a9e375fe2375a2d898"><![CDATA[{
            return targetProperty.GetCustomAttributes(true).OfType<TAttribute>().Aggregate(ValidationResult.Successful,
                                                                                           (result, attribute) =>
                                                                                           result.CombineWith(ValidateAttribute(target, targetProperty, attribute) ?? ValidationResult.Successful));
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DataAnnotationsObjectValidator">
      <declaration><![CDATA[public class DataAnnotationsObjectValidator : AttributeBasedObjectValidator<ValidationAttribute>]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DataAnnotationsObjectValidator()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="CreateError">
          <declaration><![CDATA[protected virtual ValidationError CreateError(string propertyName, ValidationAttribute attribute)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="39" sc="9" el="41" ec="10">Validators\DataAnnotationsObjectValidator.cs</location>
            <body hash="6e18280d7bcaf6daed53462c8b7a8666"><![CDATA[{
            return new ValidationError {ErrorMessage = attribute.FormatErrorMessage(propertyName), PropertyName = propertyName, Validator = attribute};
        }]]></body>
          </codeblock>
        </method>
        <method name="ValidateAttribute">
          <declaration><![CDATA[protected override ValidationResult ValidateAttribute(object target, System.Reflection.PropertyInfo targetProperty, ValidationAttribute attribute)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="33" sc="9" el="35" ec="10">Validators\DataAnnotationsObjectValidator.cs</location>
            <body hash="c7c6359e17c9d133baadabd7c0123caa"><![CDATA[{
            return !attribute.IsValid(targetProperty.GetValue(target, new object[] {})) ? new ValidationResult(new[] {CreateError(targetProperty.Name, attribute)}) : ValidationResult.Successful;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="ObjectValidator">
      <declaration><![CDATA[public abstract class ObjectValidator]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[protected ObjectValidator()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="ValidateObject">
          <declaration><![CDATA[public abstract ValidationResult ValidateObject(object target);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="PropertyBasedObjectValidator">
      <declaration><![CDATA[public abstract class PropertyBasedObjectValidator : ObjectValidator]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[protected PropertyBasedObjectValidator()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="ValidateObject">
          <declaration><![CDATA[public override ValidationResult ValidateObject(object target)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="33" sc="9" el="35" ec="10">Validators\PropertyBasedObjectValidator.cs</location>
            <body hash="095ce68bd4a7c4ef38f3f5f26b284d2a"><![CDATA[{
            return target.GetType().GetProperties().Aggregate(ValidationResult.Successful, (result, member) => result.CombineWith(ValidateProperty(target, member) ?? ValidationResult.Successful));
        }]]></body>
          </codeblock>
        </method>
        <method name="ValidateProperty">
          <declaration><![CDATA[protected abstract ValidationResult ValidateProperty(object target, System.Reflection.PropertyInfo targetProperty);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="ValidationError">
      <declaration><![CDATA[public class ValidationError]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public ValidationError()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="ErrorMessage">
          <declaration><![CDATA[public string ErrorMessage]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="PropertyName">
          <declaration><![CDATA[public string PropertyName]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Validator">
          <declaration><![CDATA[public object Validator]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="ValidationResult">
      <declaration><![CDATA[public class ValidationResult]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public ValidationResult()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="39" sc="9" el="42" ec="10">Validators\ValidationResult.cs</location>
            <body hash="dd9b2e48382aaec0157696a745e7f2f9"><![CDATA[public ValidationResult()
        {
            _Errors = Enumerable.Empty<ValidationError>();
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[public ValidationResult(System.Collections.Generic.IEnumerable<ValidationError> errors)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="44" sc="9" el="48" ec="10">Validators\ValidationResult.cs</location>
            <body hash="3472d8fae094f4e01d12b0e8ad0e7b7e"><![CDATA[public ValidationResult(IEnumerable<ValidationError> errors)
        {
            Requires.NotNull("errors", errors);
            _Errors = errors;
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="CombineWith">
          <declaration><![CDATA[public ValidationResult CombineWith(ValidationResult other)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="83" sc="9" el="88" ec="10">Validators\ValidationResult.cs</location>
            <body hash="be79391f785039382a9e7b548d1b28ae"><![CDATA[{
            Requires.NotNull("other", other);

            //Just concatenate the errors collection
            return new ValidationResult(_Errors.Concat(other.Errors));
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_Errors">
          <declaration><![CDATA[private readonly System.Collections.Generic.IEnumerable<ValidationError> _Errors;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="Errors">
          <declaration><![CDATA[public System.Collections.Generic.IEnumerable<ValidationError> Errors]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="57" sc="13" el="59" ec="14">Validators\ValidationResult.cs</location>
            <body hash="17d379580da6e6981211db3c53a9156a"><![CDATA[{
                return _Errors;
            }]]></body>
          </codeblock>
        </property>
        <property name="IsValid">
          <declaration><![CDATA[public bool IsValid]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="65" sc="13" el="67" ec="14">Validators\ValidationResult.cs</location>
            <body hash="6328b39ca7af46bfc2573c236f9d46da"><![CDATA[{
                return (_Errors.Count() == 0);
            }]]></body>
          </codeblock>
        </property>
        <property name="Successful">
          <declaration><![CDATA[public static ValidationResult Successful]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="73" sc="13" el="75" ec="14">Validators\ValidationResult.cs</location>
            <body hash="819fd16f3570b585ea9745396404730a"><![CDATA[{
                return new ValidationResult();
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="Validator">
      <declaration><![CDATA[public class Validator]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public Validator()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="34" sc="9" el="37" ec="10">Validators\Validator.cs</location>
            <body hash="fa5ecb96552e138f9c25d9802eb9ded6"><![CDATA[public Validator()
        {
            _Validators = new List<ObjectValidator>();
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[public Validator(ObjectValidator validator) : this()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="39" sc="9" el="42" ec="10">Validators\Validator.cs</location>
            <body hash="2cc73219bccbd2b83802a31a6f91a868"><![CDATA[public Validator(ObjectValidator validator) : this()
        {
            _Validators.Add(validator);
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="ValidateObject">
          <declaration><![CDATA[public ValidationResult ValidateObject(object target)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="53" sc="9" el="55" ec="10">Validators\Validator.cs</location>
            <body hash="b23ae655e41aaf34c2a76d77cd0ef2a5"><![CDATA[{
            return _Validators.Aggregate(ValidationResult.Successful, (result, validator) => result.CombineWith(validator.ValidateObject(target) ?? ValidationResult.Successful));
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_Validators">
          <declaration><![CDATA[private readonly System.Collections.Generic.IList<ObjectValidator> _Validators;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="Validators">
          <declaration><![CDATA[public System.Collections.Generic.IList<ObjectValidator> Validators]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="47" sc="13" el="49" ec="14">Validators\Validator.cs</location>
            <body hash="1f42ecfe6a780316447c534e2db6a3bc"><![CDATA[{
                return _Validators;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
</root>