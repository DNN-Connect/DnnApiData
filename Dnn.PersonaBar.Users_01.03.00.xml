<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<root file="Dnn.PersonaBar.Users.dll" version="01.03.00" generated="2017-08-10 13:08:56Z" generationTime="4.9077729">
  <namespace name="Dnn.PersonaBar.Users.Components">
    <class name="Constants">
      <declaration><![CDATA[public static class Constants]]></declaration>
      <documentation>
      </documentation>
      <constructors>
      </constructors>
      <methods>
      </methods>
      <fields>
        <field name="AddUser">
          <declaration><![CDATA[public const string AddUser = "ADD_USER";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="AuthorizeUnAuthorizeUser">
          <declaration><![CDATA[public const string AuthorizeUnAuthorizeUser = "AUTHORIZE_UNAUTHORIZE_USER";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="DeleteUser">
          <declaration><![CDATA[public const string DeleteUser = "DELETE_USER";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="EditSettings">
          <declaration><![CDATA[public const string EditSettings = "EDIT_SETTINGS";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="LocalResourcesFile">
          <declaration><![CDATA[public const string LocalResourcesFile = "~/DesktopModules/admin/Dnn.PersonaBar/Modules/Dnn.Users/App_LocalResources/Users.resx";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ManagePassword">
          <declaration><![CDATA[public const string ManagePassword = "MANAGE_PASSWORD";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ManageProfile">
          <declaration><![CDATA[public const string ManageProfile = "MANAGE_PROFILE";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ManageRoles">
          <declaration><![CDATA[public const string ManageRoles = "MANAGE_ROLES";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="MenuName">
          <declaration><![CDATA[public const string MenuName = "Dnn.Users";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ViewSettings">
          <declaration><![CDATA[public const string ViewSettings = "VIEW_SETTINGS";]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="IRegisterController">
      <declaration><![CDATA[internal interface IRegisterController]]></declaration>
      <documentation>
      </documentation>
      <constructors>
      </constructors>
      <methods>
        <method name="Register">
          <declaration><![CDATA[UserBasicDto Register(RegisterationDetails registerationDetails);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="IUsersController">
      <declaration><![CDATA[public interface IUsersController]]></declaration>
      <documentation>
      </documentation>
      <constructors>
      </constructors>
      <methods>
        <method name="ChangePassword">
          <declaration><![CDATA[bool ChangePassword(int portalId, int userId, string newPassword);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="GetUserDetail">
          <declaration><![CDATA[UserDetailDto GetUserDetail(int portalId, int userId);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="GetUserFilters">
          <declaration><![CDATA[IEnumerable<KeyValuePair<string, int>> GetUserFilters(bool isSuperUser = false);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="GetUsers">
          <declaration><![CDATA[IEnumerable<UserBasicDto> GetUsers(GetUsersContract usersContract, bool isSuperUser, out int totalRecords);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="SaveUserRole">
          <declaration><![CDATA[UserRoleDto SaveUserRole(int portalId, UserInfo userInfo, UserRoleDto userRoleDto, bool notifyUser, bool isOwner);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="UpdateUserBasicInfo">
          <declaration><![CDATA[UserBasicDto UpdateUserBasicInfo(UserBasicDto userBasicDto);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="RegisterController">
      <declaration><![CDATA[internal class RegisterController : ServiceLocator<IRegisterController, RegisterController>, IRegisterController]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public RegisterController()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="GetBoolSetting">
          <declaration><![CDATA[private bool GetBoolSetting(Hashtable settings, string settingKey)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="299" sc="9" el="301" ec="10">Components\RegisterController.cs</location>
            <body hash="d64d7d244e26431ef2a499ccba4e821d"><![CDATA[{
            return settings[settingKey] != null && Convert.ToBoolean(settings[settingKey]);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetExcludeTermsRegex">
          <declaration><![CDATA[private string GetExcludeTermsRegex(Hashtable settings)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="309" sc="9" el="317" ec="10">Components\RegisterController.cs</location>
            <body hash="c4828259f74762751e5e4e701379b2ea"><![CDATA[{
            var excludeTerms = GetStringSetting(settings, "Registration_ExcludeTerms");
            var regex = String.Empty;
            if (!String.IsNullOrEmpty(excludeTerms))
            {
                regex = excludeTerms.Replace(" ", "").Replace(",", "|");
            }
            return regex;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetFactory">
          <declaration><![CDATA[protected override Func<IRegisterController> GetFactory()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="34" sc="9" el="36" ec="10">Components\RegisterController.cs</location>
            <body hash="f8f6c18b79b0771f84856b3ef42edde6"><![CDATA[{
            return () => new RegisterController();
        }]]></body>
          </codeblock>
        </method>
        <method name="GetNotificationBody">
          <declaration><![CDATA[private static string GetNotificationBody(string locale, UserInfo newUser, PortalSettings portalSettings)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="281" sc="9" el="284" ec="10">Components\RegisterController.cs</location>
            <body hash="ae60e81cdbf3a3fdfd5572add8937491"><![CDATA[{
            const string text = "EMAIL_USER_REGISTRATION_ADMINISTRATOR_BODY";
            return LocalizeNotificationText(text, locale, newUser, portalSettings);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetNotificationSubject">
          <declaration><![CDATA[private static string GetNotificationSubject(string locale, UserInfo newUser, PortalSettings portalSettings)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="293" sc="9" el="296" ec="10">Components\RegisterController.cs</location>
            <body hash="68f6da9c1193298e9bd9dfcf3f9408a5"><![CDATA[{
            const string text = "EMAIL_USER_REGISTRATION_ADMINISTRATOR_SUBJECT";
            return LocalizeNotificationText(text, locale, newUser, portalSettings);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetStringSetting">
          <declaration><![CDATA[private string GetStringSetting(Hashtable settings, string settingKey)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="304" sc="9" el="306" ec="10">Components\RegisterController.cs</location>
            <body hash="e79866cd2b59c7ab1719adfea14e4555"><![CDATA[{
            return settings[settingKey] == null ? string.Empty :  settings[settingKey].ToString();
        }]]></body>
          </codeblock>
        </method>
        <method name="LocalizeNotificationText">
          <declaration><![CDATA[private static string LocalizeNotificationText(string text, string locale, UserInfo user, PortalSettings portalSettings)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="287" sc="9" el="290" ec="10">Components\RegisterController.cs</location>
            <body hash="7cb24eca6237e6431655ac31fb2579a1"><![CDATA[{
            //This method could need a custom ArrayList in future notification types. Currently it is null
            return Localization.GetSystemMessage(locale, portalSettings, text, user, Localization.GlobalResourceFile, null, "", portalSettings.AdministratorId);
        }]]></body>
          </codeblock>
        </method>
        <method name="Register">
          <declaration><![CDATA[public UserBasicDto Register(RegisterationDetails registerationDetails)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="45" sc="9" el="252" ec="10">Components\RegisterController.cs</location>
            <body hash="38c7761e00b3626ef43f7377cd1a263b"><![CDATA[{
            var portalSettings = registerationDetails.PortalSettings;
            var username = registerationDetails.UserName;
            var email = registerationDetails.Email;

            Requires.NotNullOrEmpty("email", email);

            var disallowRegistration = !registerationDetails.IgnoreRegistrationMode && 
                                   ((portalSettings.UserRegistration == (int) Globals.PortalRegistrationType.NoRegistration) ||
                                   (portalSettings.UserRegistration == (int) Globals.PortalRegistrationType.PrivateRegistration));

            if (disallowRegistration)
            {
                throw new Exception(Localization.GetString("RegistrationNotAllowed", Library.Constants.SharedResources));
            }

            //initial creation of the new User object
            var newUser = new UserInfo
            {
                PortalID = portalSettings.PortalId,
                Email = email
            };

            //ensure this user doesn't exist
            if (!string.IsNullOrEmpty(username) && UserController.GetUserByName(portalSettings.PortalId, username) != null)
            {
                throw new Exception(Localization.GetString("RegistrationUsernameAlreadyPresent",
                    Library.Constants.SharedResources));
            }

            //set username as email if not specified
            newUser.Username = string.IsNullOrEmpty(username) ? email : username;

            if (!string.IsNullOrEmpty(registerationDetails.Password) && !registerationDetails.RandomPassword)
            {
                newUser.Membership.Password = registerationDetails.Password;
            }
            else
            {
                //Generate a random password for the user
                newUser.Membership.Password = UserController.GeneratePassword();
            }

            newUser.Membership.PasswordConfirm = newUser.Membership.Password;

            //set other profile properties
            newUser.Profile.PreferredLocale = new Localization().CurrentUICulture;
            newUser.Profile.InitialiseProfile(portalSettings.PortalId);
            newUser.Profile.PreferredTimeZone = portalSettings.TimeZone;

            //derive display name from supplied firstname, lastname or from email
            if (!string.IsNullOrEmpty(registerationDetails.FirstName) &&
                !string.IsNullOrEmpty(registerationDetails.LastName))
            {
                newUser.DisplayName = registerationDetails.FirstName + " " + registerationDetails.LastName;
                newUser.FirstName = registerationDetails.FirstName;
                newUser.LastName = registerationDetails.LastName;
            }
            else
                newUser.DisplayName = newUser.Email.Substring(0, newUser.Email.IndexOf("@", StringComparison.Ordinal));

            //read all the user account settings
            var settings = UserController.GetUserSettings(portalSettings.PortalId);

            //Verify Profanity filter
            if (GetBoolSetting(settings, "Registration_UseProfanityFilter"))
            {
                var portalSecurity = new PortalSecurity();
                if (!portalSecurity.ValidateInput(newUser.Username, PortalSecurity.FilterFlag.NoProfanity) || !portalSecurity.ValidateInput(newUser.DisplayName, PortalSecurity.FilterFlag.NoProfanity))
                {
                    throw new Exception(Localization.GetString("RegistrationProfanityNotAllowed",
                        Library.Constants.SharedResources));
                }
            }

            //Email Address Validation
            var emailValidator = GetStringSetting(settings, "Security_EmailValidation");
            if (!string.IsNullOrEmpty(emailValidator))
            {
                var regExp = RegexUtils.GetCachedRegex(emailValidator, RegexOptions.IgnoreCase | RegexOptions.Multiline);
                var matches = regExp.Matches(newUser.Email);
                if (matches.Count == 0)
                {
                    throw new Exception(Localization.GetString("RegistrationInvalidEmailUsed",
                        Library.Constants.SharedResources));
                }
            }

            //Excluded Terms Verification
            var excludeRegex = GetExcludeTermsRegex(settings);
            if (!string.IsNullOrEmpty(excludeRegex))
            {
                var regExp = RegexUtils.GetCachedRegex(excludeRegex, RegexOptions.IgnoreCase | RegexOptions.Multiline);
                var matches = regExp.Matches(newUser.Username);
                if (matches.Count > 0)
                {
                    throw new Exception(Localization.GetString("RegistrationExcludedTermsUsed",
                        Library.Constants.SharedResources));
                }
            }

            //User Name Validation
            var userNameValidator = GetStringSetting(settings, "Security_UserNameValidation");
            if (!string.IsNullOrEmpty(userNameValidator))
            {
                var regExp = RegexUtils.GetCachedRegex(userNameValidator, RegexOptions.IgnoreCase | RegexOptions.Multiline);
                var matches = regExp.Matches(newUser.Username);
                if (matches.Count == 0)
                {
                    throw new Exception(Localization.GetString("RegistrationInvalidUserNameUsed",
                        Library.Constants.SharedResources));
                }
            }

            //ensure unique username
            var user = UserController.GetUserByName(portalSettings.PortalId, newUser.Username);
            if (user != null)
            {
                if (GetBoolSetting(settings, "Registration_UseEmailAsUserName"))
                {
                    throw new Exception(UserController.GetUserCreateStatus(UserCreateStatus.DuplicateEmail));
                }

                var i = 1;
                string userName = null;
                while (user != null)
                {
                    userName = newUser.Username + "0" + i.ToString(CultureInfo.InvariantCulture);
                    user = UserController.GetUserByName(portalSettings.PortalId, userName);
                    i++;
                }
                newUser.Username = userName;
            }

            //ensure unique display name
            if (GetBoolSetting(settings, "Registration_RequireUniqueDisplayName"))
            {
                user = UserController.Instance.GetUserByDisplayname(portalSettings.PortalId, newUser.DisplayName);
                if (user != null)
                {
                    var i = 1;
                    string displayName = null;
                    while (user != null)
                    {
                        displayName = newUser.DisplayName + " 0" + i.ToString(CultureInfo.InvariantCulture);
                        user = UserController.Instance.GetUserByDisplayname(portalSettings.PortalId, displayName);
                        i++;
                    }
                    newUser.DisplayName = displayName;
                }
            }

            //Update display name format
            var displaynameFormat = GetStringSetting(settings, "Security_DisplayNameFormat");
            if (!string.IsNullOrEmpty(displaynameFormat)) newUser.UpdateDisplayName(displaynameFormat);

            //membership is approved only for public registration
            newUser.Membership.Approved = 
                (registerationDetails.IgnoreRegistrationMode || 
                portalSettings.UserRegistration == (int)Globals.PortalRegistrationType.PublicRegistration) && registerationDetails.Authorize;

            //final creation of user
            var createStatus = UserController.CreateUser(ref newUser);

            //clear cache
            if (createStatus == UserCreateStatus.Success)
                DataCache.ClearPortalCache(portalSettings.PortalId, true);

            if (createStatus != UserCreateStatus.Success)
            {
                throw new Exception(UserController.GetUserCreateStatus(createStatus));
            }

//            if (registerationDetails.IgnoreRegistrationMode)
//            {
//                Mail.SendMail(newUser, MessageType.UserRegistrationPublic, portalSettings);
//                return UserBasicDto.FromUserInfo(newUser);
//            }

            //send notification to portal administrator of new user registration
            //check the receive notification setting first, but if register type is Private, we will always send the notification email.
            //because the user need administrators to do the approve action so that he can continue use the website.
            if (!registerationDetails.IgnoreRegistrationMode && 
                    (portalSettings.EnableRegisterNotification || portalSettings.UserRegistration == (int) Globals.PortalRegistrationType.PrivateRegistration))
            {
                Mail.SendMail(newUser, MessageType.UserRegistrationAdmin, portalSettings);
                SendAdminNotification(newUser, portalSettings);
            }

            //send email to user
            if (registerationDetails.Notify)
            {
                switch (portalSettings.UserRegistration)
                {
                    case (int) Globals.PortalRegistrationType.PrivateRegistration:
                        Mail.SendMail(newUser, MessageType.UserRegistrationPrivate, portalSettings);
                        break;
                    case (int) Globals.PortalRegistrationType.PublicRegistration:
                        Mail.SendMail(newUser, MessageType.UserRegistrationPublic, portalSettings);
                        break;
                    case (int) Globals.PortalRegistrationType.VerifiedRegistration:
                        Mail.SendMail(newUser, MessageType.UserRegistrationVerified, portalSettings);
                        break;
                }
            }

            return UserBasicDto.FromUserInfo(newUser);
        }]]></body>
          </codeblock>
        </method>
        <method name="SendAdminNotification">
          <declaration><![CDATA[private static void SendAdminNotification(UserInfo newUser, PortalSettings portalSettings)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="255" sc="9" el="260" ec="10">Components\RegisterController.cs</location>
            <body hash="d92e391da229513cf472c14d9b864678"><![CDATA[{
            var roleController = new RoleController();
            var adminrole = roleController.GetRoleById(portalSettings.PortalId, portalSettings.AdministratorRoleId);
            var roles = new List<RoleInfo> { adminrole };
            SendNewUserNotifications(newUser, portalSettings, roles);
        }]]></body>
          </codeblock>
        </method>
        <method name="SendNewUserNotifications">
          <declaration><![CDATA[public static void SendNewUserNotifications(UserInfo newUser, PortalSettings portalSettings, List<RoleInfo> roles)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="263" sc="9" el="278" ec="10">Components\RegisterController.cs</location>
            <body hash="ff60ddd6b4af10af32999e2523b42545"><![CDATA[{
            var notificationType = newUser.Membership.Approved ? "NewUserRegistration" : "NewUnauthorizedUserRegistration";
            var locale = LocaleController.Instance.GetDefaultLocale(portalSettings.PortalId).Code;
            var notification = new Notification
            {
                NotificationTypeID = NotificationsController.Instance.GetNotificationType(notificationType).NotificationTypeId,
                IncludeDismissAction = newUser.Membership.Approved,
                SenderUserID = portalSettings.AdministratorId,
                Subject = GetNotificationSubject(locale, newUser, portalSettings),
                Body = GetNotificationBody(locale, newUser, portalSettings),
                Context = newUser.UserID.ToString(CultureInfo.InvariantCulture)
            };

            notification.Body = Utilities.FixDoublEntityEncoding(notification.Body);
            NotificationsController.Instance.SendNotification(notification, portalSettings.PortalId, roles, new List<UserInfo>());            
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="UsersController">
      <declaration><![CDATA[public class UsersController : ServiceLocator<IUsersController, UsersController>, IUsersController]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public UsersController()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
        <constructor name=".cctor">
          <declaration><![CDATA[static UsersController()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="62" sc="9" el="62" ec="113">Components\UsersController.cs</location>
            <body hash="97252121e459cbe111a5ee36caea5179"><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof(Services.UsersController))]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="CanUpdateUsername">
          <declaration><![CDATA[private bool CanUpdateUsername(UserInfo user)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="430" sc="5" el="453" ec="6">Components\UsersController.cs</location>
            <body hash="8947ffc872095c7ef817a540fa375a9b"><![CDATA[{
        //can only update username if a host/admin and account being managed is not a superuser
        if (UserController.Instance.GetCurrentUserInfo().IsSuperUser)
        {
            //only allow updates for non-superuser accounts
            if (user.IsSuperUser == false)
            {
                return true;
            }
        }

        //if an admin, check if the user is only within this portal
        if (UserController.Instance.GetCurrentUserInfo().IsInRole(PortalSettings.AdministratorRoleName))
        {
            //only allow updates for non-superuser accounts
            if (user.IsSuperUser)
            {
                return false;
            }
            if (PortalController.GetPortalsByUser(user.UserID).Count == 1) return true;
        }

        return false;
    }]]></body>
          </codeblock>
        </method>
        <method name="ChangePassword">
          <declaration><![CDATA[public bool ChangePassword(int portalId, int userId, string newPassword)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="112" sc="9" el="168" ec="10">Components\UsersController.cs</location>
            <body hash="b2f00fd1c4eb08442c27e16004b9a629"><![CDATA[{
            if (MembershipProviderConfig.RequiresQuestionAndAnswer)
            {
                throw new Exception(Localization.GetString("CannotChangePassword", Constants.LocalResourcesFile));
            }

            var user = UserController.Instance.GetUserById(portalId, userId);
            if (user == null)
            {
                return false;
            }

            var membershipPasswordController = new MembershipPasswordController();
            var settings = new MembershipPasswordSettings(user.PortalID);

            if (settings.EnableBannedList)
            {
                if (membershipPasswordController.FoundBannedPassword(newPassword) || user.Username == newPassword)
                {
                    throw new Exception(Localization.GetString("PasswordResetFailed", Constants.LocalResourcesFile));
                }

            }

            //check new password is not in history
            if (membershipPasswordController.IsPasswordInHistory(user.UserID, user.PortalID, newPassword, false))
            {
                throw new Exception(Localization.GetString("PasswordResetFailed_PasswordInHistory", Constants.LocalResourcesFile));
            }

            try
            {
                var passwordChanged = UserController.ResetAndChangePassword(user, newPassword);
                if (!passwordChanged)
                {
                    throw new Exception(Localization.GetString("PasswordResetFailed", Constants.LocalResourcesFile));
                }

                return true;
            }
            catch (MembershipPasswordException exc)
            {
                //Password Answer missing
                Logger.Error(exc);
                throw new Exception(Localization.GetString("PasswordInvalid", Constants.LocalResourcesFile));
            }
            catch (ThreadAbortException)
            {
                return true;
            }
            catch (Exception exc)
            {
                //Fail
                Logger.Error(exc);
                throw new Exception(Localization.GetString("PasswordResetFailed", Constants.LocalResourcesFile));
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetFactory">
          <declaration><![CDATA[protected override Func<IUsersController> GetFactory()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="68" sc="9" el="70" ec="10">Components\UsersController.cs</location>
            <body hash="72646708c3bcc4b9497881bb57b1abb9"><![CDATA[{
            return () => new UsersController();
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPagedUsers">
          <declaration><![CDATA[private static IEnumerable<UserInfo> GetPagedUsers(IEnumerable<UserInfo> users, int pageSize, int pageIndex)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="392" sc="9" el="395" ec="10">Components\UsersController.cs</location>
            <body hash="c8d8e7709dc2a6a6048cdaeb6af82e50"><![CDATA[{
            return
                users.Skip(pageIndex*pageSize).Take(pageSize);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetSortedUsers">
          <declaration><![CDATA[private static IEnumerable<UserInfo> GetSortedUsers(IEnumerable<UserInfo> users, string sortColumn, bool sortAscending = false)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="372" sc="9" el="389" ec="10">Components\UsersController.cs</location>
            <body hash="dfe35d2430009d3ed54e7aa1199b1328"><![CDATA[{
            switch (sortColumn?.ToLowerInvariant())
            {

                case "displayname":
                    return sortAscending
                        ? users.OrderBy(x => x.DisplayName)
                        : users.OrderByDescending(x => x.DisplayName);
                case "email":
                    return sortAscending
                        ? users.OrderBy(x => x.Email)
                        : users.OrderByDescending(x => x.Email);
                default:
                    return sortAscending
                        ? users.OrderBy(x => x.CreatedOnDate).ThenBy(x => x.LastModifiedOnDate)
                        : users.OrderByDescending(x => x.CreatedOnDate).ThenByDescending(x => x.LastModifiedOnDate);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetUserDetail">
          <declaration><![CDATA[public UserDetailDto GetUserDetail(int portalId, int userId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="101" sc="9" el="109" ec="10">Components\UsersController.cs</location>
            <body hash="9abf6a6ce33c965d4e11c0b58363953b"><![CDATA[{
            var user = UserController.Instance.GetUserById(portalId, userId);
            if (user == null)
            {
                return null;
            }
            user.PortalID = portalId;
            return new UserDetailDto(user);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetUserFilters">
          <declaration><![CDATA[public IEnumerable<KeyValuePair<string, int>> GetUserFilters(bool isSuperUser = false)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="84" sc="9" el="98" ec="10">Components\UsersController.cs</location>
            <body hash="9cfdd75db6c8e98e038e2faef62dad22"><![CDATA[{
            var userFilters = new List<KeyValuePair<string, int>>();
            for (var i = 0; i < 6; i++)
            {
                userFilters.Add(
                    new KeyValuePair<string, int>(
                        Localization.GetString(Convert.ToString((UserFilters) i), Constants.LocalResourcesFile), i));
            }
            if (!isSuperUser)
            {
                userFilters.Remove(userFilters.FirstOrDefault(x => x.Value == Convert.ToInt32(UserFilters.SuperUsers)));
            }
            userFilters.Remove(userFilters.FirstOrDefault(x => x.Value == Convert.ToInt32(UserFilters.RegisteredUsers)));//Temporarily removed registered users.
            return userFilters;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetUsers">
          <declaration><![CDATA[public IEnumerable<UserBasicDto> GetUsers(GetUsersContract usersContract, bool isSuperUser, out int totalRecords)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="75" sc="9" el="81" ec="10">Components\UsersController.cs</location>
            <body hash="0c82ec94a2a513b42b8838ebdf57753f"><![CDATA[{
            return !string.IsNullOrEmpty(usersContract.SearchText) 
                        && usersContract.Filter == UserFilters.Authorized
                        && !HostController.Instance.GetBoolean("DisableUserCrawling", false)
                ? GetUsersFromLucene(usersContract, out totalRecords)
                : GetUsersFromDb(usersContract, isSuperUser, out totalRecords);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetUsersFromDb">
          <declaration><![CDATA[private static IEnumerable<UserBasicDto> GetUsersFromDb(GetUsersContract usersContract, bool isSuperUser, out int totalRecords)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="270" sc="9" el="368" ec="10">Components\UsersController.cs</location>
            <body hash="42adfb345ff6d78256ba835c2107e597"><![CDATA[{
            totalRecords = 0;
            List<UserBasicDto> users = null;
            ArrayList dbUsers = null;
            IEnumerable<UserInfo> userInfos = null;

            var portalId = usersContract.PortalId;
            var pageIndex = usersContract.PageIndex;
            var pageSize = usersContract.PageSize;
            var searchText = usersContract.SearchText;
            var paged = false;

            switch (usersContract.Filter)
            {
                case UserFilters.All:

                    if (string.IsNullOrEmpty(searchText))
                    {
                        dbUsers = UserController.GetUsers(portalId, pageIndex, pageSize, ref totalRecords, true, false);
                    }
                    else
                    {
                        dbUsers = UserController.GetUsersByDisplayName(portalId, searchText + "%", pageIndex, pageSize,
                            ref totalRecords, true, false);
                    }
                    paged = true;
                    userInfos = dbUsers?.OfType<UserInfo>().ToList();
                    break;
                case UserFilters.SuperUsers:
                    if (isSuperUser)
                    {
                        dbUsers = UserController.GetUsers(Null.NullInteger, pageIndex, pageSize, ref totalRecords, true, true);
                        userInfos = dbUsers?.OfType<UserInfo>().ToList();
                    }
                    paged = true;
                    break;
                case UserFilters.UnAuthorized:
                    dbUsers = UserController.GetUnAuthorizedUsers(portalId, false, false);
                    userInfos = dbUsers?.OfType<UserInfo>().ToList();
                    if (!isSuperUser)
                    {
                        userInfos = userInfos?.Where(x => !x.IsSuperUser);
                    }
                    break;
                case UserFilters.Deleted:
                    dbUsers = UserController.GetDeletedUsers(portalId);
                    userInfos = dbUsers?.OfType<UserInfo>().ToList();
                    if (!isSuperUser)
                    {
                        userInfos = userInfos?.Where(x => !x.IsSuperUser);
                    }
                    break;
//                    case UserFilters.Online:
//                        dbUsers = UserController.GetOnlineUsers(usersContract.PortalId);
//                        break;
                case UserFilters.RegisteredUsers:
                    userInfos = RoleController.Instance.GetUsersByRole(portalId,
                        PortalController.Instance.GetCurrentPortalSettings().RegisteredRoleName);
                    if (!isSuperUser)
                    {
                        userInfos = userInfos?.Where(x => !x.IsSuperUser);
                    }
                    break;
                case UserFilters.Authorized:
                    if (string.IsNullOrEmpty(searchText))
                    {
                        var reader = DataProvider.Instance()
                            .ExecuteReader("Personabar_GetUsers", usersContract.PortalId,
                                string.IsNullOrEmpty(usersContract.SortColumn) ? "Joined" : usersContract.SortColumn,
                                usersContract.SortAscending,
                                usersContract.PageIndex,
                                usersContract.PageSize);
                        if (reader.Read())
                        {
                            totalRecords = reader.GetInt32(0);
                            reader.NextResult();
                        }
                        users = CBO.FillCollection<UserBasicDto>(reader);
                    }
                    else
                    {
                        dbUsers = UserController.GetUsersByDisplayName(portalId, searchText + "%", pageIndex, pageSize,
                            ref totalRecords, false, false);
                        users = dbUsers?.OfType<UserInfo>().Select(UserBasicDto.FromUserInfo).ToList();
                    }
                    paged = true;
                    break;
                default:
                    throw new ArgumentOutOfRangeException();
            }
            if (users == null && userInfos != null)
            {
                var enumerable = userInfos as UserInfo[] ?? userInfos.ToArray();
                totalRecords = paged ? totalRecords : enumerable.Length;
                var sorted = GetSortedUsers(enumerable, usersContract.SortColumn, usersContract.SortAscending);
                users = paged ? sorted.Select(UserBasicDto.FromUserInfo).ToList() : GetPagedUsers(sorted, pageSize, pageIndex)?.Select(UserBasicDto.FromUserInfo).ToList();
            }
            return users;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetUsersFromLucene">
          <declaration><![CDATA[private static IList<UserBasicDto> GetUsersFromLucene(GetUsersContract usersContract, out int totalRecords)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="398" sc="9" el="416" ec="10">Components\UsersController.cs</location>
            <body hash="6229fc54e8c62e6827099bce1987ce47"><![CDATA[{
            var query = new SearchQuery
            {
                KeyWords = usersContract.SearchText, PortalIds = new List<int> {usersContract.PortalId}, PageIndex = 1, SearchTypeIds = new List<int> {SearchHelper.Instance.GetSearchTypeByName("user").SearchTypeId}, PageSize = SearchPageSize, WildCardSearch = true, CultureCode = null, NumericKeys = new Dictionary<string, int> {{"superuser", 0}}
            };

            var searchResults = SearchController.Instance.SiteSearch(query);
            var userIds = searchResults.Results.Distinct(new UserSearchResultComparer()).Take(SearchPageSize).Select(r =>
            {
                int userId;
                TryConvertToInt32(r.UniqueKey.Split('_')[0], out userId);
                return userId;
            }).Where(u => u > 0).ToList();

            var currentIds = string.Join(",", userIds.Skip(usersContract.PageIndex*usersContract.PageSize).Take(usersContract.PageSize));
            var users = UsersDataService.Instance.GetUsersByUserIds(usersContract.PortalId, currentIds).Where(u => UserController.GetUserById(usersContract.PortalId, u.UserId).Membership.Approved).ToList();
            totalRecords = users.Count;
            return users;
        }]]></body>
          </codeblock>
        </method>
        <method name="SaveUserRole">
          <declaration><![CDATA[public UserRoleDto SaveUserRole(int portalId, UserInfo userInfo, UserRoleDto userRoleDto, bool notifyUser, bool isOwner)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="226" sc="9" el="263" ec="10">Components\UsersController.cs</location>
            <body hash="a9957b8f40aed6446a79b67421366149"><![CDATA[{
            if (!UserRoleDto.AllowExpiredRole(PortalSettings, userRoleDto.UserId, userRoleDto.RoleId))
            {
                userRoleDto.StartTime = userRoleDto.ExpiresTime = Null.NullDate;
            }

            var user = UserController.Instance.GetUserById(portalId, userRoleDto.UserId);
            var role = RoleController.Instance.GetRoleById(portalId, userRoleDto.RoleId);
            if (role == null || role.Status != RoleStatus.Approved)
            {
                throw new Exception(Localization.GetString("RoleIsNotApproved", Constants.LocalResourcesFile));
            }

            if (userInfo.IsSuperUser || userInfo.Roles.Contains(PortalSettings.AdministratorRoleName) ||
                (!userInfo.IsSuperUser && !userInfo.Roles.Contains(PortalSettings.AdministratorRoleName) &&
                 role.RoleType != RoleType.Administrator))
            {
                if (role.SecurityMode != SecurityMode.SocialGroup && role.SecurityMode != SecurityMode.Both)
                    isOwner = false;

                RoleController.AddUserRole(user, role, PortalSettings, RoleStatus.Approved, userRoleDto.StartTime,
                    userRoleDto.ExpiresTime, notifyUser, isOwner);
                var addedRole = RoleController.Instance.GetUserRole(portalId, userRoleDto.UserId, userRoleDto.RoleId);

                return new UserRoleDto
                {
                    UserId = addedRole.UserID,
                    RoleId = addedRole.RoleID,
                    DisplayName = addedRole.FullName,
                    RoleName = addedRole.RoleName,
                    StartTime = addedRole.EffectiveDate,
                    ExpiresTime = addedRole.ExpiryDate,
                    AllowExpired = UserRoleDto.AllowExpiredRole(PortalSettings, user.UserID, role.RoleID),
                    AllowDelete = RoleController.CanRemoveUserFromRole(PortalSettings, user.UserID, role.RoleID)
                };
            }
            throw new Exception(Localization.GetString("InSufficientPermissions", Constants.LocalResourcesFile));
        }]]></body>
          </codeblock>
        </method>
        <method name="TryConvertToInt32">
          <declaration><![CDATA[private static bool TryConvertToInt32(string paramValue, out int intValue)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="419" sc="9" el="427" ec="10">Components\UsersController.cs</location>
            <body hash="92ba0595869635770b44ec1338af5423"><![CDATA[{
            if (!string.IsNullOrEmpty(paramValue) && Int32.TryParse(paramValue, out intValue))
            {
                return true;
            }

            intValue = Null.NullInteger;
            return false;
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateUserBasicInfo">
          <declaration><![CDATA[public UserBasicDto UpdateUserBasicInfo(UserBasicDto userBasicDto)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="171" sc="9" el="222" ec="10">Components\UsersController.cs</location>
            <body hash="3734bb8d5cc9dfaa454def7654816b83"><![CDATA[{
            var user = UserController.Instance.GetUser(PortalSettings.PortalId, userBasicDto.UserId);
            int portalId = PortalSettings.PortalId;
            if (user == null)
            {
                throw new ArgumentException("UserNotExist");
            }

            if (userBasicDto.UserId == PortalSettings.AdministratorId)
            {
                //Clear the Portal Cache
                DataCache.ClearPortalCache(portalId, true);
            }
            if (user.IsSuperUser)
            {
                DataCache.ClearHostCache(true);
            }
            user.DisplayName = userBasicDto.Displayname;
            user.Email = userBasicDto.Email;

            //Update DisplayName to conform to Format
            if (!string.IsNullOrEmpty(PortalSettings.Registration.DisplayNameFormat))
            {
                user.UpdateDisplayName(PortalSettings.Registration.DisplayNameFormat);
            }
            //either update the username or update the user details

            if (CanUpdateUsername(user) && !PortalSettings.Registration.UseEmailAsUserName)
            {
                UserController.ChangeUsername(user.UserID, userBasicDto.Username);
                user.Username = userBasicDto.Username;
            }

            //DNN-5874 Check if unique display name is required
            if (PortalSettings.Registration.RequireUniqueDisplayName)
            {
                var usersWithSameDisplayName = (List<UserInfo>)MembershipProvider.Instance().GetUsersBasicSearch(portalId, 0, 2, "DisplayName", true, "DisplayName", user.DisplayName);
                if (usersWithSameDisplayName.Any(u => u.UserID != user.UserID))
                {
                    throw new ArgumentException("DisplayNameNotUnique");
                }
            }

            UserController.UpdateUser(portalId, user);

            if (PortalSettings.Registration.UseEmailAsUserName && (user.Username.ToLowerInvariant() != user.Email.ToLowerInvariant()))
            {
                UserController.ChangeUsername(user.UserID, user.Email);
            }
            return
                UserBasicDto.FromUserInfo(UserController.Instance.GetUser(PortalSettings.PortalId, userBasicDto.UserId));
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="Logger">
          <declaration><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof(UsersController));]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="SearchPageSize">
          <declaration><![CDATA[private const int SearchPageSize = 500;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="PortalSettings">
          <declaration><![CDATA[private PortalSettings PortalSettings]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="65" sc="50" el="65" ec="102">Components\UsersController.cs</location>
            <body hash="9a9acd53c40c448eb883c37aefbb294b"><![CDATA[PortalController.Instance.GetCurrentPortalSettings(]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="UsersMenuController">
      <declaration><![CDATA[public class UsersMenuController : IMenuItemController]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public UsersMenuController()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="GetSettings">
          <declaration><![CDATA[public IDictionary<string, object> GetSettings(MenuItem menuItem)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="24" sc="9" el="30" ec="10">Components\UsersMenuController.cs</location>
            <body hash="7629ef96ff49c9512580bfe0403b3533"><![CDATA[{
            var settings = new Dictionary<string, object>();
            settings.Add("isHost", UserController.Instance.GetCurrentUserInfo().IsSuperUser);
            settings.Add("isAdmin", UserController.Instance.GetCurrentUserInfo().Roles.Contains(PortalSettings.AdministratorRoleName));
            settings.Add("userId", UserController.Instance.GetCurrentUserInfo().UserID);
            return settings;
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateParameters">
          <declaration><![CDATA[public void UpdateParameters(MenuItem menuItem)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="15" sc="9" el="16" ec="10">Components\UsersMenuController.cs</location>
            <body hash="539fa760ca172337a931519768c64187"><![CDATA[{
        }]]></body>
          </codeblock>
        </method>
        <method name="Visible">
          <declaration><![CDATA[public bool Visible(MenuItem menuItem)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="19" sc="9" el="21" ec="10">Components\UsersMenuController.cs</location>
            <body hash="f882ca7e6e289653f91b0768029d8a89"><![CDATA[{
            return true;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="PortalSettings">
          <declaration><![CDATA[private PortalSettings PortalSettings]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="12" sc="50" el="12" ec="102">Components\UsersMenuController.cs</location>
            <body hash="9a9acd53c40c448eb883c37aefbb294b"><![CDATA[PortalController.Instance.GetCurrentPortalSettings(]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="Dnn.PersonaBar.Users.Components.Comparers">
    <class name="UserSearchResultComparer">
      <declaration><![CDATA[public class UserSearchResultComparer : IEqualityComparer<SearchResult>]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public UserSearchResultComparer()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="Equals">
          <declaration><![CDATA[public bool Equals(SearchResult x, SearchResult y)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="15" sc="9" el="23" ec="10">Components\Comparers\UserSearchResultComparer.cs</location>
            <body hash="44981688637c2430e8fadac208da5910"><![CDATA[{

            if (Object.ReferenceEquals(x, y)) return true;

            if (Object.ReferenceEquals(x, null) || Object.ReferenceEquals(y, null))
                return false;

            return x.UniqueKey.Split('_')[0] == y.UniqueKey.Split('_')[0];
        }]]></body>
          </codeblock>
        </method>
        <method name="GetHashCode">
          <declaration><![CDATA[public int GetHashCode(SearchResult result)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="26" sc="9" el="31" ec="10">Components\Comparers\UserSearchResultComparer.cs</location>
            <body hash="99867e861b0cf1cec02c9f40c986c51c"><![CDATA[{
            //Check whether the object is null
            if (ReferenceEquals(result, null)) return 0;

            return result.UniqueKey.Split('_')[0].GetHashCode();
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="Dnn.PersonaBar.Users.Components.Contracts">
    <class name="CreateUserContract">
      <declaration><![CDATA[public class CreateUserContract]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public CreateUserContract()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="Authorize">
          <declaration><![CDATA[public bool Authorize]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="31" sc="33" el="31" ec="37">Components\Contracts\CreateUserContract.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="31" sc="38" el="31" ec="42">Components\Contracts\CreateUserContract.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Email">
          <declaration><![CDATA[public string Email]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="19" sc="31" el="19" ec="35">Components\Contracts\CreateUserContract.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="19" sc="36" el="19" ec="40">Components\Contracts\CreateUserContract.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="FirstName">
          <declaration><![CDATA[public string FirstName]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="13" sc="35" el="13" ec="39">Components\Contracts\CreateUserContract.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="13" sc="40" el="13" ec="44">Components\Contracts\CreateUserContract.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="LastName">
          <declaration><![CDATA[public string LastName]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="16" sc="34" el="16" ec="38">Components\Contracts\CreateUserContract.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="16" sc="39" el="16" ec="43">Components\Contracts\CreateUserContract.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Notify">
          <declaration><![CDATA[public bool Notify]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="34" sc="30" el="34" ec="34">Components\Contracts\CreateUserContract.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="34" sc="35" el="34" ec="39">Components\Contracts\CreateUserContract.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Password">
          <declaration><![CDATA[public string Password]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="25" sc="34" el="25" ec="38">Components\Contracts\CreateUserContract.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="25" sc="39" el="25" ec="43">Components\Contracts\CreateUserContract.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="RandomPassword">
          <declaration><![CDATA[public bool RandomPassword]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="28" sc="38" el="28" ec="42">Components\Contracts\CreateUserContract.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="28" sc="43" el="28" ec="47">Components\Contracts\CreateUserContract.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="UserName">
          <declaration><![CDATA[public string UserName]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="22" sc="34" el="22" ec="38">Components\Contracts\CreateUserContract.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="22" sc="39" el="22" ec="43">Components\Contracts\CreateUserContract.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="GetUsersContract">
      <declaration><![CDATA[public class GetUsersContract]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public GetUsersContract()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="13" sc="9" el="17" ec="10">Components\Contracts\GetUsersContract.cs</location>
            <body hash="f6b5ab5317a46aa0c039f6d818e2877d"><![CDATA[public GetUsersContract()
        {
            SortColumn = "Joined";
            SortAscending = false;
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="Filter">
          <declaration><![CDATA[public UserFilters Filter]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="24" sc="37" el="24" ec="41">Components\Contracts\GetUsersContract.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="24" sc="42" el="24" ec="46">Components\Contracts\GetUsersContract.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="PageIndex">
          <declaration><![CDATA[public int PageIndex]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="20" sc="32" el="20" ec="36">Components\Contracts\GetUsersContract.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="20" sc="37" el="20" ec="41">Components\Contracts\GetUsersContract.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="PageSize">
          <declaration><![CDATA[public int PageSize]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="21" sc="31" el="21" ec="35">Components\Contracts\GetUsersContract.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="21" sc="36" el="21" ec="40">Components\Contracts\GetUsersContract.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="PortalId">
          <declaration><![CDATA[public int PortalId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="18" sc="31" el="18" ec="35">Components\Contracts\GetUsersContract.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="18" sc="36" el="18" ec="40">Components\Contracts\GetUsersContract.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="SearchText">
          <declaration><![CDATA[public string SearchText]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="19" sc="36" el="19" ec="40">Components\Contracts\GetUsersContract.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="19" sc="41" el="19" ec="45">Components\Contracts\GetUsersContract.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="SortAscending">
          <declaration><![CDATA[public bool SortAscending]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="23" sc="37" el="23" ec="41">Components\Contracts\GetUsersContract.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="23" sc="42" el="23" ec="46">Components\Contracts\GetUsersContract.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="SortColumn">
          <declaration><![CDATA[public string SortColumn]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="22" sc="36" el="22" ec="40">Components\Contracts\GetUsersContract.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="22" sc="41" el="22" ec="45">Components\Contracts\GetUsersContract.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="RegisterationDetails">
      <declaration><![CDATA[public class RegisterationDetails]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public RegisterationDetails()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="Authorize">
          <declaration><![CDATA[public bool Authorize]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="19" sc="33" el="19" ec="37">Components\Contracts\RegisterationDetails.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="19" sc="38" el="19" ec="42">Components\Contracts\RegisterationDetails.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Email">
          <declaration><![CDATA[public string Email]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="16" sc="31" el="16" ec="35">Components\Contracts\RegisterationDetails.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="16" sc="36" el="16" ec="40">Components\Contracts\RegisterationDetails.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="FirstName">
          <declaration><![CDATA[public string FirstName]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="14" sc="35" el="14" ec="39">Components\Contracts\RegisterationDetails.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="14" sc="40" el="14" ec="44">Components\Contracts\RegisterationDetails.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="IgnoreRegistrationMode">
          <declaration><![CDATA[public bool IgnoreRegistrationMode]]></declaration>
          <documentation>
            <summary>
 When set to true, whatever registration mode is set, it will always add user
 Please check below issue for this property
 https://dnntracker.atlassian.net/browse/SOCIAL-3158
 </summary>
          </documentation>
          <codeblock>
            <location sl="28" sc="46" el="28" ec="50">Components\Contracts\RegisterationDetails.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="28" sc="51" el="28" ec="55">Components\Contracts\RegisterationDetails.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="LastName">
          <declaration><![CDATA[public string LastName]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="15" sc="34" el="15" ec="38">Components\Contracts\RegisterationDetails.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="15" sc="39" el="15" ec="43">Components\Contracts\RegisterationDetails.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Notify">
          <declaration><![CDATA[public bool Notify]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="20" sc="30" el="20" ec="34">Components\Contracts\RegisterationDetails.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="20" sc="35" el="20" ec="39">Components\Contracts\RegisterationDetails.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Password">
          <declaration><![CDATA[public string Password]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="18" sc="34" el="18" ec="38">Components\Contracts\RegisterationDetails.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="18" sc="39" el="18" ec="43">Components\Contracts\RegisterationDetails.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="PortalSettings">
          <declaration><![CDATA[public PortalSettings PortalSettings]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="13" sc="48" el="13" ec="52">Components\Contracts\RegisterationDetails.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="13" sc="53" el="13" ec="57">Components\Contracts\RegisterationDetails.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="RandomPassword">
          <declaration><![CDATA[public bool RandomPassword]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="21" sc="38" el="21" ec="42">Components\Contracts\RegisterationDetails.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="21" sc="43" el="21" ec="47">Components\Contracts\RegisterationDetails.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="UserName">
          <declaration><![CDATA[public string UserName]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="17" sc="34" el="17" ec="38">Components\Contracts\RegisterationDetails.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="17" sc="39" el="17" ec="43">Components\Contracts\RegisterationDetails.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="Dnn.PersonaBar.Users.Components.Dto">
    <class name="ChangePasswordDto">
      <declaration><![CDATA[public class ChangePasswordDto]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public ChangePasswordDto()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="Password">
          <declaration><![CDATA[public string Password]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="16" sc="34" el="16" ec="38">Components\Dto\ChangePasswordDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="16" sc="39" el="16" ec="43">Components\Dto\ChangePasswordDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="UserId">
          <declaration><![CDATA[public int UserId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="13" sc="29" el="13" ec="33">Components\Dto\ChangePasswordDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="13" sc="34" el="13" ec="38">Components\Dto\ChangePasswordDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="ProfileDefinitionDto">
      <declaration><![CDATA[public class ProfileDefinitionDto]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public ProfileDefinitionDto()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="38" sc="9" el="41" ec="10">Components\Dto\ProfileDefinitionDto.cs</location>
            <body hash="0728ea71c943fb9d5953402a7ec80832"><![CDATA[public ProfileDefinitionDto()
        {
            
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[public ProfileDefinitionDto(ProfilePropertyDefinition definition)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="43" sc="9" el="64" ec="10">Components\Dto\ProfileDefinitionDto.cs</location>
            <body hash="b33aa95092efbb4a18162a154ec9b7f4"><![CDATA[public ProfileDefinitionDto(ProfilePropertyDefinition definition)
        {
            PropertyCategory = definition.PropertyCategory;
            PropertyName = definition.PropertyName;
            Required = definition.Required;
            ValidationExpression = definition.ValidationExpression;
            PropertyValue = definition.PropertyValue;
            Visible = definition.Visible;
            Length = definition.Length;

            var dataTypeId = definition.DataType;
            var listController = new ListController();
            var dataTypes = listController.GetListEntryInfoDictionary("DataType");
            if (dataTypes.Any(i => i.Value.EntryID == dataTypeId))
            {
                DataType = dataTypes.First(i => i.Value.EntryID == dataTypeId).Key.ToLowerInvariant().Substring(9);
            }
            else
            {
                DataType = "unknown";
            }
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="DataType">
          <declaration><![CDATA[public string DataType]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="18" sc="34" el="18" ec="38">Components\Dto\ProfileDefinitionDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="18" sc="39" el="18" ec="43">Components\Dto\ProfileDefinitionDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Length">
          <declaration><![CDATA[public int Length]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="36" sc="29" el="36" ec="33">Components\Dto\ProfileDefinitionDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="36" sc="34" el="36" ec="38">Components\Dto\ProfileDefinitionDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="PropertyCategory">
          <declaration><![CDATA[public string PropertyCategory]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="15" sc="42" el="15" ec="46">Components\Dto\ProfileDefinitionDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="15" sc="47" el="15" ec="51">Components\Dto\ProfileDefinitionDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="PropertyName">
          <declaration><![CDATA[public string PropertyName]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="21" sc="38" el="21" ec="42">Components\Dto\ProfileDefinitionDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="21" sc="43" el="21" ec="47">Components\Dto\ProfileDefinitionDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="PropertyValue">
          <declaration><![CDATA[public string PropertyValue]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="30" sc="39" el="30" ec="43">Components\Dto\ProfileDefinitionDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="30" sc="44" el="30" ec="48">Components\Dto\ProfileDefinitionDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Required">
          <declaration><![CDATA[public bool Required]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="24" sc="32" el="24" ec="36">Components\Dto\ProfileDefinitionDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="24" sc="37" el="24" ec="41">Components\Dto\ProfileDefinitionDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ValidationExpression">
          <declaration><![CDATA[public string ValidationExpression]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="27" sc="46" el="27" ec="50">Components\Dto\ProfileDefinitionDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="27" sc="51" el="27" ec="55">Components\Dto\ProfileDefinitionDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Visible">
          <declaration><![CDATA[public bool Visible]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="33" sc="31" el="33" ec="35">Components\Dto\ProfileDefinitionDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="33" sc="36" el="33" ec="40">Components\Dto\ProfileDefinitionDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="ProfileVisibilityDto">
      <declaration><![CDATA[public class ProfileVisibilityDto]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private IList<int> <RoleVisibilities>k__BackingField = new List<int>();]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="18" sc="60" el="26" ec="10">Components\Dto\ProfileVisibilityDto.cs</location>
            <body hash="6f89d8fe3ee532c4e5263faa8430731c"><![CDATA[new List<int>();

        [DataMember(Name = "relationshipVisibilities")]
        public IList<int> RelationshipVisibilities { get; set; } = new List<int>();

        public ProfileVisibilityDto()
        {
            
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[private IList<int> <RoleVisibilities>k__BackingField = new List<int>();]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="18" sc="60" el="33" ec="10">Components\Dto\ProfileVisibilityDto.cs</location>
            <body hash="17ac2b50700e02e1274924e28e704c2e"><![CDATA[new List<int>();

        [DataMember(Name = "relationshipVisibilities")]
        public IList<int> RelationshipVisibilities { get; set; } = new List<int>();

        public ProfileVisibilityDto()
        {
            
        }

        public ProfileVisibilityDto(ProfileVisibility visibility)
        {
            VisibilityMode = visibility.VisibilityMode;
            RoleVisibilities = visibility.RoleVisibilities.Select(r => r.RoleID).ToList();
            RelationshipVisibilities = visibility.RelationshipVisibilities.Select(r => r.RelationshipId).ToList();
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="RelationshipVisibilities">
          <declaration><![CDATA[public IList<int> RelationshipVisibilities]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="21" sc="54" el="21" ec="58">Components\Dto\ProfileVisibilityDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="21" sc="59" el="21" ec="63">Components\Dto\ProfileVisibilityDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="RoleVisibilities">
          <declaration><![CDATA[public IList<int> RoleVisibilities]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="18" sc="46" el="18" ec="50">Components\Dto\ProfileVisibilityDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="18" sc="51" el="18" ec="55">Components\Dto\ProfileVisibilityDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="VisibilityMode">
          <declaration><![CDATA[public UserVisibilityMode VisibilityMode]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="15" sc="52" el="15" ec="56">Components\Dto\ProfileVisibilityDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="15" sc="57" el="15" ec="61">Components\Dto\ProfileVisibilityDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="RelationshipDto">
      <declaration><![CDATA[public class RelationshipDto]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public RelationshipDto()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="Id">
          <declaration><![CDATA[public int Id]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="15" sc="25" el="15" ec="29">Components\Dto\RelationshipDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="15" sc="30" el="15" ec="34">Components\Dto\RelationshipDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Name">
          <declaration><![CDATA[public string Name]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="21" sc="30" el="21" ec="34">Components\Dto\RelationshipDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="21" sc="35" el="21" ec="39">Components\Dto\RelationshipDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="TargetUserId">
          <declaration><![CDATA[public int TargetUserId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="18" sc="35" el="18" ec="39">Components\Dto\RelationshipDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="18" sc="40" el="18" ec="44">Components\Dto\RelationshipDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="UserBasicDto">
      <declaration><![CDATA[public class UserBasicDto]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public UserBasicDto()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="51" sc="9" el="54" ec="10">Components\Dto\UserBasicDto.cs</location>
            <body hash="6767f83df09fa0b672535b287889aabf"><![CDATA[public UserBasicDto()
        {

        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[public UserBasicDto(UserInfo user)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="56" sc="9" el="67" ec="10">Components\Dto\UserBasicDto.cs</location>
            <body hash="83fdde1f5de541295d08d979386abcb1"><![CDATA[public UserBasicDto(UserInfo user)
        {
            UserId = user.UserID;
            Username = user.Username;
            Displayname = user.DisplayName;
            Email = user.Email;
            CreatedOnDate = user.CreatedOnDate;
            IsDeleted = user.IsDeleted;
            Authorized = user.Membership.Approved;
            IsSuperUser = user.IsSuperUser;
            IsAdmin = user.Roles.Contains(PortalSettings.AdministratorRoleName);
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="FromUserDetails">
          <declaration><![CDATA[public static UserBasicDto FromUserDetails(UserDetailDto user)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="85" sc="9" el="98" ec="10">Components\Dto\UserBasicDto.cs</location>
            <body hash="4e2acf0d5c37c8ba21e9ad683660ab03"><![CDATA[{
            if (user == null) return null;
            return new UserBasicDto
            {
                UserId = user.UserId,
                Username = user.Username,
                Displayname = user.Displayname,
                Email = user.Email,
                CreatedOnDate = user.CreatedOnDate,
                IsDeleted = user.IsDeleted,
                Authorized = user.Authorized,
                IsSuperUser = user.IsSuperUser
        };
        }]]></body>
          </codeblock>
        </method>
        <method name="FromUserInfo">
          <declaration><![CDATA[public static UserBasicDto FromUserInfo(UserInfo user)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="70" sc="9" el="83" ec="10">Components\Dto\UserBasicDto.cs</location>
            <body hash="39c6f76bff9b726d6217266b95e717e0"><![CDATA[{
            if (user == null) return null;
            return new UserBasicDto
            {
                UserId = user.UserID,
                Username = user.Username,
                Displayname = user.DisplayName,
                Email = user.Email,
                CreatedOnDate = user.CreatedOnDate,
                IsDeleted = user.IsDeleted,
                Authorized = user.Membership.Approved,
                IsSuperUser = user.IsSuperUser
        };
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="Authorized">
          <declaration><![CDATA[public bool Authorized]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="39" sc="34" el="39" ec="38">Components\Dto\UserBasicDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="39" sc="39" el="39" ec="43">Components\Dto\UserBasicDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="AvatarUrl">
          <declaration><![CDATA[public string AvatarUrl]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="49" sc="36" el="49" ec="70">Components\Dto\UserBasicDto.cs</location>
            <body hash="b973df4f38cd73854a31381d8076c33b"><![CDATA[Utilities.GetProfileAvatar(UserId]]></body>
          </codeblock>
        </property>
        <property name="CreatedOnDate">
          <declaration><![CDATA[public DateTime CreatedOnDate]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="33" sc="41" el="33" ec="45">Components\Dto\UserBasicDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="33" sc="46" el="33" ec="50">Components\Dto\UserBasicDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Displayname">
          <declaration><![CDATA[public string Displayname]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="27" sc="37" el="27" ec="41">Components\Dto\UserBasicDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="27" sc="42" el="27" ec="46">Components\Dto\UserBasicDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Email">
          <declaration><![CDATA[public string Email]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="30" sc="31" el="30" ec="35">Components\Dto\UserBasicDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="30" sc="36" el="30" ec="40">Components\Dto\UserBasicDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="IsAdmin">
          <declaration><![CDATA[public bool IsAdmin]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="45" sc="31" el="45" ec="35">Components\Dto\UserBasicDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="45" sc="36" el="45" ec="40">Components\Dto\UserBasicDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="IsDeleted">
          <declaration><![CDATA[public bool IsDeleted]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="36" sc="33" el="36" ec="37">Components\Dto\UserBasicDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="36" sc="38" el="36" ec="42">Components\Dto\UserBasicDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="IsSuperUser">
          <declaration><![CDATA[public bool IsSuperUser]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="42" sc="35" el="42" ec="39">Components\Dto\UserBasicDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="42" sc="40" el="42" ec="44">Components\Dto\UserBasicDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="PortalSettings">
          <declaration><![CDATA[private PortalSettings PortalSettings]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="18" sc="50" el="18" ec="102">Components\Dto\UserBasicDto.cs</location>
            <body hash="9a9acd53c40c448eb883c37aefbb294b"><![CDATA[PortalController.Instance.GetCurrentPortalSettings(]]></body>
          </codeblock>
        </property>
        <property name="UserId">
          <declaration><![CDATA[public int UserId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="21" sc="29" el="21" ec="33">Components\Dto\UserBasicDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="21" sc="34" el="21" ec="38">Components\Dto\UserBasicDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Username">
          <declaration><![CDATA[public string Username]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="24" sc="34" el="24" ec="38">Components\Dto\UserBasicDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="24" sc="39" el="24" ec="43">Components\Dto\UserBasicDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="UserDetailDto">
      <declaration><![CDATA[public class UserDetailDto : UserBasicDto]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public UserDetailDto()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="62" sc="9" el="65" ec="10">Components\Dto\UserDetailDto.cs</location>
            <body hash="04c9e1d0bea44f6990b545b5564cdbd8"><![CDATA[public UserDetailDto()
        {
            
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[public UserDetailDto(UserInfo user) : base(user)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="67" sc="47" el="87" ec="10">Components\Dto\UserDetailDto.cs</location>
            <body hash="83ff991bcb962255b85ef255e8b1f8c4"><![CDATA[base(user)
        {
            LastLogin = user.Membership.LastLoginDate;
            LastActivity = user.Membership.LastActivityDate;
            LastPasswordChange = user.Membership.LastPasswordChangeDate;
            LastLockout = user.Membership.LastLockoutDate;
            IsOnline = user.Membership.IsOnLine;
            IsLocked = user.Membership.LockedOut;
            NeedUpdatePassword = user.Membership.UpdatePassword;
            PortalId = user.PortalID;
            UserFolder = FolderManager.Instance.GetUserFolder(user).FolderPath.Substring(6);
            var userFolder = FolderManager.Instance.GetUserFolder(user);
            if (userFolder != null)
            {
                UserFolderId = userFolder.FolderID;

                //check whether user had upload files
                var files = FolderManager.Instance.GetFiles(userFolder, true);
                HasUserFiles = files.Any();
            }
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="GetSettingUrl">
          <declaration><![CDATA[private static string GetSettingUrl(int portalId, int userId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="90" sc="9" el="109" ec="10">Components\Dto\UserDetailDto.cs</location>
            <body hash="1782eefdbe29896e9d389883e6ead995"><![CDATA[{
            var module = ModuleController.Instance.GetModulesByDefinition(portalId, "User Accounts")
                .Cast<ModuleInfo>().FirstOrDefault();
            if (module == null)
            {
                return string.Empty;
            }

            var tabId = TabController.Instance.GetTabsByModuleID(module.ModuleID).Keys.FirstOrDefault();
            if (tabId <= 0)
            {
                return string.Empty;
            }
            //ctl/Edit/mid/345/packageid/52
            return Globals.NavigateURL(tabId, PortalSettings.Current, "Edit",
                                            "mid=" + module.ModuleID,
                                            "popUp=true",
                                            "UserId=" + userId,
                                            "editprofile=true");
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="EditProfileUrl">
          <declaration><![CDATA[public string EditProfileUrl]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="51" sc="41" el="51" ec="92">Components\Dto\UserDetailDto.cs</location>
            <body hash="cc4ad7801230cfc447c63fc61232104b"><![CDATA[UserId > 0 ? GetSettingUrl(PortalId, UserId) : nul]]></body>
          </codeblock>
        </property>
        <property name="HasUserFiles">
          <declaration><![CDATA[public bool HasUserFiles]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="60" sc="36" el="60" ec="40">Components\Dto\UserDetailDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="60" sc="41" el="60" ec="45">Components\Dto\UserDetailDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="IsLocked">
          <declaration><![CDATA[public bool IsLocked]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="38" sc="32" el="38" ec="36">Components\Dto\UserDetailDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="38" sc="37" el="38" ec="41">Components\Dto\UserDetailDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="IsOnline">
          <declaration><![CDATA[public bool IsOnline]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="35" sc="32" el="35" ec="36">Components\Dto\UserDetailDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="35" sc="37" el="35" ec="41">Components\Dto\UserDetailDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="LastActivity">
          <declaration><![CDATA[public DateTime LastActivity]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="26" sc="40" el="26" ec="44">Components\Dto\UserDetailDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="26" sc="45" el="26" ec="49">Components\Dto\UserDetailDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="LastLockout">
          <declaration><![CDATA[public DateTime LastLockout]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="32" sc="39" el="32" ec="43">Components\Dto\UserDetailDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="32" sc="44" el="32" ec="48">Components\Dto\UserDetailDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="LastLogin">
          <declaration><![CDATA[public DateTime LastLogin]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="23" sc="37" el="23" ec="41">Components\Dto\UserDetailDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="23" sc="42" el="23" ec="46">Components\Dto\UserDetailDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="LastPasswordChange">
          <declaration><![CDATA[public DateTime LastPasswordChange]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="29" sc="46" el="29" ec="50">Components\Dto\UserDetailDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="29" sc="51" el="29" ec="55">Components\Dto\UserDetailDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="NeedUpdatePassword">
          <declaration><![CDATA[public bool NeedUpdatePassword]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="41" sc="42" el="41" ec="46">Components\Dto\UserDetailDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="41" sc="47" el="41" ec="51">Components\Dto\UserDetailDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="PortalId">
          <declaration><![CDATA[public int PortalId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="44" sc="31" el="44" ec="35">Components\Dto\UserDetailDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="44" sc="36" el="44" ec="40">Components\Dto\UserDetailDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ProfileUrl">
          <declaration><![CDATA[public string ProfileUrl]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="48" sc="37" el="48" ec="87">Components\Dto\UserDetailDto.cs</location>
            <body hash="0bafc60d7f0b13512cae077e4e0623a5"><![CDATA[UserId > 0 ? Globals.UserProfileURL(UserId) : nul]]></body>
          </codeblock>
        </property>
        <property name="UserFolder">
          <declaration><![CDATA[public string UserFolder]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="54" sc="36" el="54" ec="40">Components\Dto\UserDetailDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="54" sc="41" el="54" ec="45">Components\Dto\UserDetailDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="UserFolderId">
          <declaration><![CDATA[public int UserFolderId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="57" sc="35" el="57" ec="39">Components\Dto\UserDetailDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="57" sc="40" el="57" ec="44">Components\Dto\UserDetailDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="UserFilters">
      <declaration><![CDATA[public enum UserFilters]]></declaration>
      <documentation>
      </documentation>
      <constructors>
      </constructors>
      <methods>
      </methods>
      <fields>
        <field name="All">
          <declaration><![CDATA[public const UserFilters All = 5;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Authorized">
          <declaration><![CDATA[public const UserFilters Authorized = 0;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Deleted">
          <declaration><![CDATA[public const UserFilters Deleted = 2;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="RegisteredUsers">
          <declaration><![CDATA[public const UserFilters RegisteredUsers = 4;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="SuperUsers">
          <declaration><![CDATA[public const UserFilters SuperUsers = 3;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="UnAuthorized">
          <declaration><![CDATA[public const UserFilters UnAuthorized = 1;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="UserRoleDto">
      <declaration><![CDATA[public class UserRoleDto]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public UserRoleDto()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="AllowExpiredRole">
          <declaration><![CDATA[internal static bool AllowExpiredRole(PortalSettings portalSettings, int userId, int roleId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="79" sc="9" el="81" ec="10">Components\Dto\UserRoleDto.cs</location>
            <body hash="e45cba7cd7b425bdb5ab6720ece5bfc8"><![CDATA[{
            return userId != portalSettings.AdministratorId || roleId != portalSettings.AdministratorRoleId;
        }]]></body>
          </codeblock>
        </method>
        <method name="FromRoleInfo">
          <declaration><![CDATA[public static UserRoleDto FromRoleInfo(PortalSettings portalSettings, UserRoleInfo userRole)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="43" sc="9" el="62" ec="10">Components\Dto\UserRoleDto.cs</location>
            <body hash="13548a3cf9f10992fbb2c78b11a5e24e"><![CDATA[{
            if (userRole == null)
            {
                return null;
            }

            return new UserRoleDto()
            {
                Id = userRole.UserRoleID,
                UserId = userRole.UserID,
                DisplayName = userRole.FullName,
                RoleId = userRole.RoleID,
                RoleName = userRole.RoleName,
                StartTime = userRole.EffectiveDate,
                ExpiresTime = userRole.ExpiryDate,
                AllowExpired = AllowExpiredRole(portalSettings, userRole.UserID, userRole.RoleID),
                AllowDelete = RoleController.CanRemoveUserFromRole(portalSettings, userRole.UserID, userRole.RoleID),
                AllowOwner = (userRole.SecurityMode == SecurityMode.SocialGroup) || (userRole.SecurityMode == SecurityMode.Both)
            };
        }]]></body>
          </codeblock>
        </method>
        <method name="ToUserRoleInfo">
          <declaration><![CDATA[public UserRoleInfo ToUserRoleInfo()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="65" sc="9" el="76" ec="10">Components\Dto\UserRoleDto.cs</location>
            <body hash="cd3cb52698c9875f2e8e40fe0ca45558"><![CDATA[{
            return new UserRoleInfo()
            {
                UserRoleID = Id,
                UserID = UserId,
                FullName = DisplayName,
                RoleID = RoleId,
                RoleName = RoleName,
                EffectiveDate = StartTime,
                ExpiryDate = ExpiresTime,
            };
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="AllowDelete">
          <declaration><![CDATA[public bool AllowDelete]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="37" sc="35" el="37" ec="39">Components\Dto\UserRoleDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="37" sc="40" el="37" ec="44">Components\Dto\UserRoleDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="AllowExpired">
          <declaration><![CDATA[public bool AllowExpired]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="34" sc="36" el="34" ec="40">Components\Dto\UserRoleDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="34" sc="41" el="34" ec="45">Components\Dto\UserRoleDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="AllowOwner">
          <declaration><![CDATA[public bool AllowOwner]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="40" sc="34" el="40" ec="38">Components\Dto\UserRoleDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="40" sc="39" el="40" ec="43">Components\Dto\UserRoleDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="DisplayName">
          <declaration><![CDATA[public string DisplayName]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="19" sc="37" el="19" ec="41">Components\Dto\UserRoleDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="19" sc="42" el="19" ec="46">Components\Dto\UserRoleDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ExpiresTime">
          <declaration><![CDATA[public DateTime ExpiresTime]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="31" sc="39" el="31" ec="43">Components\Dto\UserRoleDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="31" sc="44" el="31" ec="48">Components\Dto\UserRoleDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Id">
          <declaration><![CDATA[public int Id]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="13" sc="25" el="13" ec="29">Components\Dto\UserRoleDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="13" sc="30" el="13" ec="34">Components\Dto\UserRoleDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="RoleId">
          <declaration><![CDATA[public int RoleId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="22" sc="29" el="22" ec="33">Components\Dto\UserRoleDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="22" sc="34" el="22" ec="38">Components\Dto\UserRoleDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="RoleName">
          <declaration><![CDATA[public string RoleName]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="25" sc="34" el="25" ec="38">Components\Dto\UserRoleDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="25" sc="39" el="25" ec="43">Components\Dto\UserRoleDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="StartTime">
          <declaration><![CDATA[public DateTime StartTime]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="28" sc="37" el="28" ec="41">Components\Dto\UserRoleDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="28" sc="42" el="28" ec="46">Components\Dto\UserRoleDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="UserId">
          <declaration><![CDATA[public int UserId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="16" sc="29" el="16" ec="33">Components\Dto\UserRoleDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="16" sc="34" el="16" ec="38">Components\Dto\UserRoleDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="Dnn.PersonaBar.Users.Data">
    <class name="IUsersDataService">
      <declaration><![CDATA[public interface IUsersDataService]]></declaration>
      <documentation>
      </documentation>
      <constructors>
      </constructors>
      <methods>
        <method name="GetUsersByUserIds">
          <declaration><![CDATA[IList<UserBasicDto> GetUsersByUserIds(int portalId, string userIds);]]></declaration>
          <documentation>
            <summary>
 Get Users basic info by UserId
 </summary>
 <param name="portalId">PortalId</param>
 <param name="userIds">Comma separated user Id</param>
 <returns>List of UserBasic</returns></documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="UsersDataService">
      <declaration><![CDATA[public class UsersDataService : ServiceLocator<IUsersDataService, UsersDataService>, IUsersDataService]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public UsersDataService()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="GetFactory">
          <declaration><![CDATA[protected override Func<IUsersDataService> GetFactory()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="19" sc="9" el="21" ec="10">Data\UsersDataService.cs</location>
            <body hash="071d3c59dda2fa71fecfa72f5cd285d5"><![CDATA[{
            return () => new UsersDataService();
        }]]></body>
          </codeblock>
        </method>
        <method name="GetUsersByUserIds">
          <declaration><![CDATA[public IList<UserBasicDto> GetUsersByUserIds(int portalId, string userIds)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="26" sc="9" el="30" ec="10">Data\UsersDataService.cs</location>
            <body hash="0e5bbef0f054d2592cdca152d7905de3"><![CDATA[{
            return CBO.FillCollection<UserBasicDto>(DotNetNuke.Data.DataProvider.Instance()
                .ExecuteReader("Personabar_GetUsersByUserIds",
                    portalId, userIds));
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="Dnn.PersonaBar.Users.Services">
    <class name="UsersController">
      <declaration><![CDATA[public class UsersController : PersonaBarApiController]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public UsersController()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
        <constructor name=".cctor">
          <declaration><![CDATA[static UsersController()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="39" sc="9" el="39" ec="105">Services\UsersController.cs</location>
            <body hash="cf7ff9b06dc091056708a56130a8edf9"><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof (UsersController))]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="ChangePassword">
          <declaration><![CDATA[public HttpResponseMessage ChangePassword(ChangePasswordDto changePasswordDto)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="186" sc="9" el="206" ec="10">Services\UsersController.cs</location>
            <body hash="200a816049b9185a19402d63633812cc"><![CDATA[{
            try
            {
                var userId = changePasswordDto.UserId;
                var password = changePasswordDto.Password;
                HttpResponseMessage response;
                var user = GetUser(userId, out response);
                if (user == null)
                    return response;

                var controller = Components.UsersController.Instance;
                controller.ChangePassword(PortalId, userId, password);

                return Request.CreateResponse(HttpStatusCode.OK, new {Success = true});
            }
            catch (Exception ex)
            {
                Logger.Error(ex);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, ex.Message);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="CreateUser">
          <declaration><![CDATA[public HttpResponseMessage CreateUser(CreateUserContract contract)]]></declaration>
          <documentation>
            <summary>
 Create a User.
 </summary>
          </documentation>
          <codeblock>
            <location sl="50" sc="9" el="77" ec="10">Services\UsersController.cs</location>
            <body hash="f1634ac371e808af1236bf44ed436d08"><![CDATA[{
            try
            {
                var settings = new RegisterationDetails
                {
                    PortalSettings = PortalSettings,
                    Email = contract.Email,
                    FirstName = contract.FirstName,
                    LastName = contract.LastName,
                    UserName = contract.UserName,
                    Password = contract.Password,
                    Notify = contract.Notify,
                    Authorize = contract.Authorize,
                    RandomPassword = contract.RandomPassword,
                    IgnoreRegistrationMode = true
                };
                var userInfo = RegisterController.Instance.Register(settings);
                return Request.CreateResponse(HttpStatusCode.OK, userInfo != null
                    ? UserBasicDto.FromUserDetails(Components.UsersController.Instance.GetUserDetail(PortalId,
                        userInfo.UserId))
                    : null);
            }
            catch (Exception ex)
            {
                Logger.Error(ex);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, ex.Message);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="ForceChangePassword">
          <declaration><![CDATA[public HttpResponseMessage ForceChangePassword([FromUri] int userId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="212" sc="9" el="244" ec="10">Services\UsersController.cs</location>
            <body hash="409a78517045193b34fd89de5cd6b85e"><![CDATA[{
            try
            {
                HttpResponseMessage response;
                var user = GetUser(userId, out response);
                if (user == null)
                    return response;
                if (IsCurrentUser(userId, out response))
                    return response;

                if (MembershipProviderConfig.PasswordRetrievalEnabled || MembershipProviderConfig.PasswordResetEnabled)
                {
                    UserController.ResetPasswordToken(user);
                }
                var canSend = Mail.SendMail(user, MessageType.PasswordReminder, PortalSettings) == string.Empty;
                if (canSend)
                {
                    user.Membership.UpdatePassword = true;

                    //Update User
                    UserController.UpdateUser(PortalId, user);
                    return Request.CreateResponse(HttpStatusCode.OK, new {Success = true});
                }

                return Request.CreateErrorResponse(HttpStatusCode.BadRequest,
                    Localization.GetString("OptionUnavailable", Components.Constants.LocalResourcesFile));
            }
            catch (Exception ex)
            {
                Logger.Error(ex);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, ex.Message);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetSuggestRoles">
          <declaration><![CDATA[public HttpResponseMessage GetSuggestRoles(string keyword, int count)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="533" sc="9" el="564" ec="10">Services\UsersController.cs</location>
            <body hash="ba89d0a17019a6ab06d8ef6d1df595f2"><![CDATA[{
            try
            {
                if (string.IsNullOrEmpty(keyword))
                {
                    return Request.CreateResponse(HttpStatusCode.OK, new List<UserRoleInfo>());
                }
                var isAdmin = IsAdmin();

                var roles = RoleController.Instance.GetRoles(PortalId,
                    x => x.RoleName.ToUpperInvariant().Contains(keyword.ToUpperInvariant()));
                var matchedRoles = roles
                    .Where(
                        r =>
                            (isAdmin || r.RoleID != PortalSettings.AdministratorRoleId) &&
                            r.Status == RoleStatus.Approved)
                    .ToList().Take(count).Select(u => new UserRoleInfo
                    {
                        RoleID = u.RoleID,
                        RoleName = $"{u.RoleName}",
                        SecurityMode = u.SecurityMode
                    });

                return Request.CreateResponse(HttpStatusCode.OK,
                    matchedRoles.ToList().Select(r => UserRoleDto.FromRoleInfo(PortalSettings, r)));
            }
            catch (Exception ex)
            {
                Logger.Error(ex);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, ex.Message);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetUser">
          <declaration><![CDATA[private UserInfo GetUser(int userId, out HttpResponseMessage response)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="695" sc="9" el="715" ec="10">Services\UsersController.cs</location>
            <body hash="950c8cef7e4e5715b032e554812d7873"><![CDATA[{
            response = null;
            var user = UserController.Instance.GetUserById(PortalId, userId);
            if (user == null)
            {
                response = Request.CreateErrorResponse(HttpStatusCode.NotFound,
                    Localization.GetString("UserNotFound", Components.Constants.LocalResourcesFile));
                return null;
            }
            if (!IsAdmin(user)) return user;

            if ((user.IsSuperUser && !UserInfo.IsSuperUser) || !IsAdmin())
            {
                response = Request.CreateErrorResponse(HttpStatusCode.Unauthorized,
                    Localization.GetString("InSufficientPermissions", Components.Constants.LocalResourcesFile));
                return null;
            }
            if (user.IsSuperUser)
                user = UserController.Instance.GetUserById(Null.NullInteger, userId);
            return user;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetUserDetail">
          <declaration><![CDATA[public HttpResponseMessage GetUserDetail(int userId)]]></declaration>
          <documentation>
            <summary>
 Get User Detail Info.
 </summary>
 <param name="userId"></param>
 <returns></returns></documentation>
          <codeblock>
            <location sl="146" sc="9" el="172" ec="10">Services\UsersController.cs</location>
            <body hash="62bc49f3486017305275ed8c93754671"><![CDATA[{
            try
            {
                var userDetail = Components.UsersController.Instance.GetUserDetail(PortalId, userId);
                if (userDetail == null)
                {
                    return Request.CreateErrorResponse(HttpStatusCode.NotFound,
                        Localization.GetString("UserNotFound", Components.Constants.LocalResourcesFile));
                }
                if (userDetail.IsSuperUser)
                {
                    if (!UserInfo.IsSuperUser)
                    {
                        return Request.CreateErrorResponse(HttpStatusCode.Unauthorized,
                            Localization.GetString("InSufficientPermissions.Text", Components.Constants.LocalResourcesFile));
                    }
                    userDetail = Components.UsersController.Instance.GetUserDetail(Null.NullInteger, userId);
                }

                return Request.CreateResponse(HttpStatusCode.OK, userDetail);
            }
            catch (Exception ex)
            {
                Logger.Error(ex);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, ex.Message);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetUserFilters">
          <declaration><![CDATA[public HttpResponseMessage GetUserFilters()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="126" sc="9" el="137" ec="10">Services\UsersController.cs</location>
            <body hash="a55ab05f98d175096acb3e01e40bac08"><![CDATA[{
            try
            {
                return Request.CreateResponse(HttpStatusCode.OK,
                    Components.UsersController.Instance.GetUserFilters(UserInfo.IsSuperUser));
            }
            catch (Exception exc)
            {
                Logger.Error(exc);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetUserRoles">
          <declaration><![CDATA[public HttpResponseMessage GetUserRoles(string keyword, int userId, int pageIndex, int pageSize)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="569" sc="9" el="599" ec="10">Services\UsersController.cs</location>
            <body hash="eb36e59409e9614b0724af9561becf5c"><![CDATA[{
            try
            {
                HttpResponseMessage response;
                var user = GetUser(userId, out response);
                if (user == null)
                    return response;
                
                var allUserRoles = RoleController.Instance.GetUserRoles(user, true);
                if (!string.IsNullOrEmpty(keyword))
                {
                    allUserRoles =
                        allUserRoles.Where(
                            u => u.FullName.StartsWith(keyword, StringComparison.InvariantCultureIgnoreCase))
                            .ToList();
                }

                var userRoles = allUserRoles
                    .Skip(pageIndex*pageSize)
                    .Take(pageSize)
                    .Select(r => UserRoleDto.FromRoleInfo(PortalSettings, r));

                return Request.CreateResponse(HttpStatusCode.OK,
                    new {UserRoles = userRoles, TotalRecords = allUserRoles.Count});
            }
            catch (Exception ex)
            {
                Logger.Error(ex);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, ex.Message);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetUsers">
          <declaration><![CDATA[public HttpResponseMessage GetUsers(string searchText, UserFilters filter, int pageIndex, int pageSize, string sortColumn, bool sortAscending)]]></declaration>
          <documentation>
            <summary>
 Perform a search on Users registered in the Site.
 </summary>
 <param name="searchText">Search filter text (if any)</param>
 <param name="filter">User filter. Send -1 to disable.</param>
 <param name="pageIndex">Page index to begin from (0, 1, 2)</param>
 <param name="pageSize">Number of records to return per page</param>
 <param name="sortColumn">Column to sort on</param>
 <param name="sortAscending">Sort ascending or descending</param></documentation>
          <codeblock>
            <location sl="92" sc="9" el="122" ec="10">Services\UsersController.cs</location>
            <body hash="274dabb19dc9bc2610f1a758110c1a34"><![CDATA[{
            try
            {
                int totalRecords;
                var getUsersContract = new GetUsersContract
                {
                    SearchText = searchText,
                    PageIndex = pageIndex,
                    PageSize = pageSize,
                    SortColumn = sortColumn,
                    SortAscending = sortAscending,
                    PortalId = PortalId,
                    Filter = filter
                };

                var results = Components.UsersController.Instance.GetUsers(getUsersContract, UserInfo.IsSuperUser,
                    out totalRecords);
                var response = new
                {
                    Results = results,
                    TotalResults = totalRecords
                };

                return Request.CreateResponse(HttpStatusCode.OK, response);
            }
            catch (Exception ex)
            {
                Logger.Error(ex);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, ex.Message);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="HardDeleteUser">
          <declaration><![CDATA[public HttpResponseMessage HardDeleteUser([FromUri] int userId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="376" sc="9" el="396" ec="10">Services\UsersController.cs</location>
            <body hash="4f9f8ae272f99b4c288fc93c49e3255c"><![CDATA[{
            try
            {
                HttpResponseMessage response;
                var user = GetUser(userId, out response);
                if (user == null)
                    return response;

                var deleted = UserController.RemoveUser(user);

                return !deleted
                    ? Request.CreateErrorResponse(HttpStatusCode.InternalServerError,
                        Localization.GetString("UserRemoveError", Components.Constants.LocalResourcesFile))
                    : Request.CreateResponse(HttpStatusCode.OK, new {Success = true});
            }
            catch (Exception ex)
            {
                Logger.Error(ex);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, ex.Message);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="IsAdmin">
          <declaration><![CDATA[private bool IsAdmin()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="685" sc="9" el="688" ec="10">Services\UsersController.cs</location>
            <body hash="68c280626b6fe6c2f5683ad60952329e"><![CDATA[{
            var user = UserController.Instance.GetCurrentUserInfo();
            return user.IsSuperUser || user.IsInRole(PortalSettings.AdministratorRoleName);
        }]]></body>
          </codeblock>
        </method>
        <method name="IsAdmin">
          <declaration><![CDATA[private bool IsAdmin(UserInfo user)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="690" sc="9" el="692" ec="10">Services\UsersController.cs</location>
            <body hash="4443a4e9fdf1722809643a5216dfefd5"><![CDATA[{
            return user.IsSuperUser || user.IsInRole(PortalSettings.AdministratorRoleName);
        }]]></body>
          </codeblock>
        </method>
        <method name="IsCurrentUser">
          <declaration><![CDATA[private bool IsCurrentUser(int userId, out HttpResponseMessage response)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="718" sc="9" el="727" ec="10">Services\UsersController.cs</location>
            <body hash="4fc220734bd8723c45badbaf7f888148"><![CDATA[{
            response = null;
            if (userId == UserInfo.UserID)
            {
                response = Request.CreateErrorResponse(HttpStatusCode.Unauthorized,
                    Localization.GetString("InSufficientPermissions", Components.Constants.LocalResourcesFile));
                return true;
            }
            return false;
        }]]></body>
          </codeblock>
        </method>
        <method name="RemoveUserRole">
          <declaration><![CDATA[public HttpResponseMessage RemoveUserRole(UserRoleDto userRoleDto)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="631" sc="9" el="650" ec="10">Services\UsersController.cs</location>
            <body hash="97fce1eb5d1d30456fa1fc1151ac0cdf"><![CDATA[{
            try
            {
                Validate(userRoleDto);
                HttpResponseMessage response;
                var user = GetUser(userRoleDto.UserId, out response);
                if (user == null)
                    return response;

                RoleController.Instance.UpdateUserRole(PortalId, userRoleDto.UserId, userRoleDto.RoleId,
                    RoleStatus.Approved, false, true);

                return Request.CreateResponse(HttpStatusCode.OK, new {Success = true});
            }
            catch (Exception ex)
            {
                Logger.Error(ex);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, ex.Message);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="RestoreDeletedUser">
          <declaration><![CDATA[public HttpResponseMessage RestoreDeletedUser([FromUri] int userId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="402" sc="9" el="422" ec="10">Services\UsersController.cs</location>
            <body hash="102389b3fc9a0519ab5da75610e7982b"><![CDATA[{
            try
            {
                HttpResponseMessage response;
                var user = GetUser(userId, out response);
                if (user == null)
                    return response;

                var restored = UserController.RestoreUser(ref user);

                return !restored
                    ? Request.CreateErrorResponse(HttpStatusCode.InternalServerError,
                        Localization.GetString("UserRestoreError", Components.Constants.LocalResourcesFile))
                    : Request.CreateResponse(HttpStatusCode.OK, new {Success = true});
            }
            catch (Exception ex)
            {
                Logger.Error(ex);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, ex.Message);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="SaveUserRole">
          <declaration><![CDATA[public HttpResponseMessage SaveUserRole(UserRoleDto userRoleDto, [FromUri] bool notifyUser, [FromUri] bool isOwner)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="606" sc="9" el="625" ec="10">Services\UsersController.cs</location>
            <body hash="47e15b53718dfe3d8a1ee405f03a6941"><![CDATA[{
            try
            {
                Validate(userRoleDto);
                HttpResponseMessage response;
                var user = GetUser(userRoleDto.UserId, out response);
                if (user == null)
                    return response;

                var result = Components.UsersController.Instance.SaveUserRole(PortalId, UserInfo, userRoleDto,
                    notifyUser, isOwner);

                return Request.CreateResponse(HttpStatusCode.OK, result);
            }
            catch (Exception ex)
            {
                Logger.Error(ex);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, ex.Message);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="SendPasswordResetLink">
          <declaration><![CDATA[public HttpResponseMessage SendPasswordResetLink([FromUri] int userId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="250" sc="9" el="299" ec="10">Services\UsersController.cs</location>
            <body hash="4e6bf0f06041022dbbb75bf10d12994b"><![CDATA[{
            try
            {
                HttpResponseMessage response;
                var user = GetUser(userId, out response);
                if (user == null)
                    return response;

                var errorMessage = string.Empty;
                if (MembershipProviderConfig.RequiresQuestionAndAnswer)
                {
                    errorMessage = Localization.GetString("OptionUnavailable", Components.Constants.LocalResourcesFile);
                }
                else
                {
                    try
                    {
                        //create resettoken
                        UserController.ResetPasswordToken(user, Host.AdminMembershipResetLinkValidity);

                        var canSend = Mail.SendMail(user, MessageType.PasswordReminder, PortalSettings) == string.Empty;
                        if (!canSend)
                        {
                            errorMessage = Localization.GetString("OptionUnavailable", Components.Constants.LocalResourcesFile);
                        }
                        else
                        {
                            return Request.CreateResponse(HttpStatusCode.OK, new {Success = true});
                        }
                    }
                    catch (ArgumentException exc)
                    {
                        Logger.Error(exc);
                        errorMessage = Localization.GetString("InvalidPasswordAnswer", Components.Constants.LocalResourcesFile);
                    }
                    catch (Exception exc)
                    {
                        Logger.Error(exc);
                        errorMessage = Localization.GetString("PasswordResetFailed", Components.Constants.LocalResourcesFile);
                    }
                }

                return Request.CreateErrorResponse(HttpStatusCode.BadRequest, errorMessage);
            }
            catch (Exception ex)
            {
                Logger.Error(ex);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, ex.Message);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="SoftDeleteUser">
          <declaration><![CDATA[public HttpResponseMessage SoftDeleteUser([FromUri] int userId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="351" sc="9" el="370" ec="10">Services\UsersController.cs</location>
            <body hash="0dd604cef46fcdd8124013a06925a5f0"><![CDATA[{
            try
            {
                HttpResponseMessage response;
                var user = GetUser(userId, out response);
                if (user == null)
                    return response;

                var deleted = UserController.DeleteUser(ref user, true, false);
                return !deleted
                    ? Request.CreateErrorResponse(HttpStatusCode.InternalServerError,
                        Localization.GetString("UserDeleteError", Components.Constants.LocalResourcesFile))
                    : Request.CreateResponse(HttpStatusCode.OK, new {Success = true});
            }
            catch (Exception ex)
            {
                Logger.Error(ex);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, ex.Message);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="UnlockUser">
          <declaration><![CDATA[public HttpResponseMessage UnlockUser([FromUri] int userId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="503" sc="9" el="524" ec="10">Services\UsersController.cs</location>
            <body hash="af78263167292c14e4883e9eb8d970d6"><![CDATA[{
            try
            {
                HttpResponseMessage response;
                var user = GetUser(userId, out response);
                if (user == null)
                    return response;
                if (IsCurrentUser(userId, out response))
                    return response;

                var unlocked = !user.Membership.LockedOut || UserController.UnLockUser(user);
                return !unlocked
                    ? Request.CreateErrorResponse(HttpStatusCode.InternalServerError,
                        Localization.GetString("UserUnlockError", Components.Constants.LocalResourcesFile))
                    : Request.CreateResponse(HttpStatusCode.OK, new { Success = true });
            }
            catch (Exception ex)
            {
                Logger.Error(ex);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, ex.Message);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateAuthorizeStatus">
          <declaration><![CDATA[public HttpResponseMessage UpdateAuthorizeStatus([FromUri] int userId, [FromUri] bool authorized)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="306" sc="9" el="345" ec="10">Services\UsersController.cs</location>
            <body hash="06da6afcb86e3c5f22f9da7366c4d23f"><![CDATA[{
            try
            {
                HttpResponseMessage response;
                var user = GetUser(userId, out response);
                if (user == null)
                    return response;
                if (IsCurrentUser(userId, out response))
                    return response;
                if (user.Membership.Approved == authorized)//Do nothing if the new status is same as current status.
                    return Request.CreateResponse(HttpStatusCode.OK, new {Success = true});

                user.Membership.Approved = authorized;

                //Update User
                UserController.UpdateUser(PortalId, user);
                if (authorized)
                {
                    //Update User Roles if needed
                    if (!user.IsSuperUser && user.IsInRole("Unverified Users") &&
                        PortalSettings.UserRegistration == (int) Globals.PortalRegistrationType.VerifiedRegistration)
                    {
                        UserController.ApproveUser(user);
                    }

                    Mail.SendMail(user, MessageType.UserAuthorized, PortalSettings);
                }
                else if (PortalController.GetPortalSettingAsBoolean("AlwaysSendUserUnAuthorizedEmail", PortalId,
                    false))
                {
                    Mail.SendMail(user, MessageType.UserUnAuthorized, PortalSettings);
                }
                return Request.CreateResponse(HttpStatusCode.OK, new {Success = true});
            }
            catch (Exception ex)
            {
                Logger.Error(ex);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, ex.Message);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateSuperUserStatus">
          <declaration><![CDATA[public HttpResponseMessage UpdateSuperUserStatus([FromUri] int userId, [FromUri] bool setSuperUser)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="446" sc="9" el="467" ec="10">Services\UsersController.cs</location>
            <body hash="b39885d57a2f97eaf49e36deaecf0220"><![CDATA[{
            try
            {
                HttpResponseMessage response;
                var user = GetUser(userId, out response);
                if (user == null)
                    return response;
                
                user.IsSuperUser = setSuperUser;

                //Update User
                UserController.UpdateUser(PortalId, user);
                DataCache.ClearCache();

                return Request.CreateResponse(HttpStatusCode.OK, new {Success = true});
            }
            catch (Exception ex)
            {
                Logger.Error(ex);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, ex.Message);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateUserBasicInfo">
          <declaration><![CDATA[public HttpResponseMessage UpdateUserBasicInfo(UserBasicDto userBasicDto)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="473" sc="9" el="497" ec="10">Services\UsersController.cs</location>
            <body hash="cb49b017d05b6ade50fa21fd241801f4"><![CDATA[{
            try
            {
                Validate(userBasicDto);
                HttpResponseMessage response;
                var user = GetUser(userBasicDto.UserId, out response);
                if (user == null)
                    return response;

                var upadtedUser = Components.UsersController.Instance.UpdateUserBasicInfo(userBasicDto);

                return Request.CreateResponse(HttpStatusCode.OK, upadtedUser);
            }
            catch (SqlException ex)
            {
                Logger.Error(ex);
                return Request.CreateErrorResponse(HttpStatusCode.BadRequest,
                    Localization.GetString("UsernameNotUnique", Components.Constants.LocalResourcesFile));
            }
            catch (Exception ex)
            {
                Logger.Error(ex);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, ex.Message);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="Validate">
          <declaration><![CDATA[private void Validate(UserRoleDto userRoleDto)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="674" sc="9" el="677" ec="10">Services\UsersController.cs</location>
            <body hash="9bbaa144fc6a093cae931ebd573755c1"><![CDATA[{
            Requires.NotNegative("UserId", userRoleDto.UserId);
            Requires.NotNegative("RoleId", userRoleDto.RoleId);
        }]]></body>
          </codeblock>
        </method>
        <method name="Validate">
          <declaration><![CDATA[private void Validate(UserBasicDto userBasicDto)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="680" sc="9" el="682" ec="10">Services\UsersController.cs</location>
            <body hash="ef8e0b744f724bde394c01da7c6f308a"><![CDATA[{
            Requires.NotNegative("UserId", userBasicDto.UserId);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="Logger">
          <declaration><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof(UsersController));]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
</root>