<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<root file="DotNetNuke.Website.dll" version="08.00.00" generated="2017-06-19 22:18:35Z" generationTime="65.6776166">
  <namespace name="">
    <class name="&lt;PrivateImplementationDetails&gt;">
      <declaration><![CDATA[internal sealed class <PrivateImplementationDetails>]]></declaration>
      <documentation>
      </documentation>
      <constructors>
      </constructors>
      <methods>
        <method name="ComputeStringHash">
          <declaration><![CDATA[internal static uint ComputeStringHash(string s)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="DesktopModules.Admin.Portals">
    <class name="SiteSettings">
      <declaration><![CDATA[public class SiteSettings : PortalModuleBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private int _portalId = -1;]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="92" sc="3" el="92" ec="30">DesktopModules\Admin\Portals\SiteSettings.ascx.cs</location>
            <body hash="2ff96a37bfd21b1ce9ed57e49b786e1e"><![CDATA[private int _portalId = -1]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="AddPortalAlias">
          <declaration><![CDATA[protected string AddPortalAlias(string portalAlias, int portalID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="867" sc="9" el="882" ec="10">DesktopModules\Admin\Portals\SiteSettings.ascx.cs</location>
            <body hash="e48eb112434814ff6dd22d905fc75876"><![CDATA[{
            if (!String.IsNullOrEmpty(portalAlias))
            {
                if (portalAlias.IndexOf("://", StringComparison.Ordinal) != -1)
                {
                    portalAlias = portalAlias.Remove(0, portalAlias.IndexOf("://", StringComparison.Ordinal) + 3);
                }
                var alias = PortalAliasController.Instance.GetPortalAlias(portalAlias, portalID);
                if (alias == null)
                {
                    alias = new PortalAliasInfo { PortalID = portalID, HTTPAlias = portalAlias };
                    PortalAliasController.Instance.AddPortalAlias(alias);
                }
            }
            return portalAlias;
        }]]></body>
          </codeblock>
        </method>
        <method name="BindAliases">
          <declaration><![CDATA[private void BindAliases(PortalInfo portal)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="113" sc="9" el="142" ec="10">DesktopModules\Admin\Portals\SiteSettings.ascx.cs</location>
            <body hash="4ef8f57f78ab98d7e21ed438ac6fc05d"><![CDATA[{
            var portalSettings = new PortalSettings(portal);

            var portalAliasMapping = portalSettings.PortalAliasMappingMode.ToString().ToUpper();
            if (String.IsNullOrEmpty(portalAliasMapping))
            {
                portalAliasMapping = "CANONICALURL";
            }
            portalAliasModeButtonList.Select(portalAliasMapping, false);

            //Auto Add Portal Alias
            //if (Config.GetFriendlyUrlProvider() == "advanced")
            //{
            //    autoAddAlias.Visible = false;
            //}
            //else
            //{
                autoAddAlias.Visible = true;
                if (PortalController.Instance.GetPortals().Count > 1)
                {
                    chkAutoAddPortalAlias.Enabled = false;
                    chkAutoAddPortalAlias.Checked = false;
                }
                else
                {
                    chkAutoAddPortalAlias.Checked = HostController.Instance.GetBoolean("AutoAddPortalAlias");
                }
            //}

        }]]></body>
          </codeblock>
        </method>
        <method name="BindClientResourceManagementUi">
          <declaration><![CDATA[private void BindClientResourceManagementUi(int portalId, bool overrideDefaultSettings)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="497" sc="9" el="538" ec="10">DesktopModules\Admin\Portals\SiteSettings.ascx.cs</location>
            <body hash="34de498bc8b531012f560b73f5e88c4c"><![CDATA[{
            EnableCompositeFilesRow.Visible = overrideDefaultSettings;
            CrmVersionRow.Visible = overrideDefaultSettings;
            MinifyCssRow.Visible = overrideDefaultSettings;
            MinifyJsRow.Visible = overrideDefaultSettings;
            DebugEnabledRow.Visible = HttpContext.Current.IsDebuggingEnabled;
            
            // set up host settings information
            var hostVersion = HostController.Instance.GetInteger(ClientResourceSettings.VersionKey, 1).ToString(CultureInfo.InvariantCulture);
            var hostEnableCompositeFiles = HostController.Instance.GetBoolean(ClientResourceSettings.EnableCompositeFilesKey, false);
            var hostEnableMinifyCss = HostController.Instance.GetBoolean(ClientResourceSettings.MinifyCssKey, false);
            var hostEnableMinifyJs = HostController.Instance.GetBoolean(ClientResourceSettings.MinifyJsKey, false);

            string yes = Localization.GetString("Yes.Text", Localization.SharedResourceFile);
            string no = Localization.GetString("No.Text", Localization.SharedResourceFile);

            CrmHostSettingsSummary.Text = string.Format(LocalizeString("CrmHostSettingsSummary"),
                hostVersion, // {0} = version
                hostEnableCompositeFiles ? yes : no, // {1} = enable composite files
                hostEnableMinifyCss ? yes : no, // {2} = minify css
                hostEnableMinifyJs ? yes : no); // {3} = minify js

            // set up UI for portal-specific options
            if (overrideDefaultSettings)
            {
                chkEnableCompositeFiles.Checked = Boolean.Parse(PortalController.GetPortalSetting(ClientResourceSettings.EnableCompositeFilesKey, portalId, "false"));
                chkMinifyCss.Checked = Boolean.Parse(PortalController.GetPortalSetting(ClientResourceSettings.MinifyCssKey, portalId, "false"));
                chkMinifyJs.Checked = Boolean.Parse(PortalController.GetPortalSetting(ClientResourceSettings.MinifyJsKey, portalId, "false"));

                var settingValue = PortalController.GetPortalSetting(ClientResourceSettings.VersionKey, portalId, "0");
                int version;
                if (int.TryParse(settingValue, out version))
                {
                    if (version == 0)
                    {
                        version = 1;
                        PortalController.UpdatePortalSetting(portalId, ClientResourceSettings.VersionKey, "1", true);
                    }
                    CrmVersionLabel.Text = version.ToString(CultureInfo.InvariantCulture);
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="BindCustomSettings">
          <declaration><![CDATA[private void BindCustomSettings(PortalInfo portal)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="440" sc="9" el="472" ec="10">DesktopModules\Admin\Portals\SiteSettings.ascx.cs</location>
            <body hash="3c747cb7ea4883d742344b0a76ac75da"><![CDATA[{
            var portalId = portal.PortalID;
            var noneSpecifiedText = "<" + Localization.GetString("None_Specified") + ">";
            var undefinedItem = new ListItem(noneSpecifiedText, string.Empty);

            //Set up special page lists
            var listTabs = TabController.GetPortalTabs(TabController.GetTabsBySortOrder(portalId, LocaleController.Instance.GetCurrentLocale(portalId).Code, true),
                                                                 Null.NullInteger,
                                                                 true,
                                                                 noneSpecifiedText,
                                                                 true,
                                                                 false,
                                                                 false,
                                                                 false,
                                                                 false);
           
            cbo404TabId.UndefinedItem = undefinedItem;
            
            if (portal.Custom404TabId > 0)
            {
                cbo404TabId.SelectedPage = listTabs.SingleOrDefault(t => t.TabID == portal.Custom404TabId);
            }

            cbo404TabId.PortalId = portalId;

            cbo500TabId.UndefinedItem = undefinedItem;
            if (portal.Custom500TabId > 0)
            {
                cbo500TabId.SelectedPage = listTabs.SingleOrDefault(t => t.TabID == portal.Custom500TabId); ;
            }

            cbo500TabId.PortalId = portalId;
        }]]></body>
          </codeblock>
        </method>
        <method name="BindDesktopModules">
          <declaration><![CDATA[private void BindDesktopModules()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="145" sc="9" el="165" ec="10">DesktopModules\Admin\Portals\SiteSettings.ascx.cs</location>
            <body hash="8c6ad82490ee2d7d8040ecf9d12b4ebe"><![CDATA[{
            var dicModules = DesktopModuleController.GetDesktopModules(Null.NullInteger);
            var dicPortalDesktopModules = DesktopModuleController.GetPortalDesktopModulesByPortalID(_portalId);

            ctlDesktopModules.Items.Clear();

            foreach (var objDicModule in dicModules.Values)
            {
                DnnComboBoxItem comboBoxItem = new DnnComboBoxItem(objDicModule.FriendlyName, objDicModule.DesktopModuleID.ToString());
                foreach (var objPortalDesktopModule in dicPortalDesktopModules.Values)
                {
                    if (objPortalDesktopModule.DesktopModuleID == objDicModule.DesktopModuleID)
                    {
                        comboBoxItem.Checked = true;
                        break;
                    }
                }

                ctlDesktopModules.Items.Add(comboBoxItem);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="BindDetails">
          <declaration><![CDATA[private void BindDetails(PortalInfo portal)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="168" sc="9" el="177" ec="10">DesktopModules\Admin\Portals\SiteSettings.ascx.cs</location>
            <body hash="036e3e0a99266f6ef6bd72c5fa8ab03d"><![CDATA[{
            if (portal != null)
            {
                txtPortalName.Text = portal.PortalName;
                txtDescription.Text = portal.Description;
                txtKeyWords.Text = portal.KeyWords;
                lblGUID.Text = portal.GUID.ToString().ToUpper();
                txtFooterText.Text = portal.FooterText;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="BindHostSettings">
          <declaration><![CDATA[private void BindHostSettings(PortalInfo portal)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="180" sc="9" el="189" ec="10">DesktopModules\Admin\Portals\SiteSettings.ascx.cs</location>
            <body hash="ed675d5bfb3b80df59ca5ad7d9a1eb06"><![CDATA[{
            if (!Null.IsNull(portal.ExpiryDate))
            {
                datepickerExpiryDate.SelectedDate = portal.ExpiryDate;
            }
            txtHostFee.Text = portal.HostFee.ToString();
            txtHostSpace.Text = portal.HostSpace.ToString();
            txtPageQuota.Text = portal.PageQuota.ToString();
            txtUserQuota.Text = portal.UserQuota.ToString();
        }]]></body>
          </codeblock>
        </method>
        <method name="BindMarketing">
          <declaration><![CDATA[private void BindMarketing(PortalInfo portal)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="192" sc="9" el="220" ec="10">DesktopModules\Admin\Portals\SiteSettings.ascx.cs</location>
            <body hash="5d9cd6748c1d1c809aef5a0575e19f52"><![CDATA[{
            //Load DocTypes
            var searchEngines = new Dictionary<string, string>
                               {
                                   { "Google", "http://www.google.com/addurl?q=" + Globals.HTTPPOSTEncode(Globals.AddHTTP(Globals.GetDomainName(Request))) }, 
                                   { "Yahoo", "http://siteexplorer.search.yahoo.com/submit" }, 
                                   { "Microsoft", "http://search.msn.com.sg/docs/submit.aspx" }
                               };

            cboSearchEngine.DataSource = searchEngines;
            cboSearchEngine.DataBind();

            string portalAlias = !String.IsNullOrEmpty(PortalSettings.DefaultPortalAlias) 
                                ? PortalSettings.DefaultPortalAlias 
                                : PortalSettings.PortalAlias.HTTPAlias;
            txtSiteMap.Text = Globals.AddHTTP(portalAlias) + @"/SiteMap.aspx";

            optBanners.SelectedIndex = portal.BannerAdvertising;
            if (UserInfo.IsSuperUser)
            {
                lblBanners.Visible = false;
            }
            else
            {
                optBanners.Enabled = portal.BannerAdvertising != 2;
                lblBanners.Visible = portal.BannerAdvertising == 2;
            }

        }]]></body>
          </codeblock>
        </method>
        <method name="BindMessaging">
          <declaration><![CDATA[private void BindMessaging(PortalInfo portal)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="223" sc="9" el="246" ec="10">DesktopModules\Admin\Portals\SiteSettings.ascx.cs</location>
            <body hash="2a6d62d0c2655f43f371e4e964ceacd7"><![CDATA[{
            var throttlingIntervals = new Dictionary<int, int>
                               {
                                   { 0, 0 }, { 1, 1 },  { 2, 2 },  { 3, 3 },  { 4, 4 },  { 5, 5 },  { 6, 6 },  { 7, 7 },  { 8, 8 },  { 9, 9 }, { 10, 10 }
                               };

            cboMsgThrottlingInterval.DataSource = throttlingIntervals;
            cboMsgThrottlingInterval.DataBind(PortalController.GetPortalSettingAsInteger("MessagingThrottlingInterval", portal.PortalID, 0).ToString());

            var recipientLimits = new Dictionary<int, int>
                               {
                                   { 1, 1 }, { 5, 5 },  { 10, 10 },  { 15, 15 },  { 25, 25 },  { 50, 50 },  { 75, 75 },  { 100, 100 }
                               };

            cboMsgRecipientLimit.DataSource = recipientLimits;
            cboMsgRecipientLimit.DataBind(PortalController.GetPortalSettingAsInteger("MessagingRecipientLimit", portal.PortalID, 5).ToString());

            optMsgAllowAttachments.Select(PortalController.GetPortalSetting("MessagingAllowAttachments", portal.PortalID, "NO"), false);
            optMsgProfanityFilters.Select(PortalController.GetPortalSetting("MessagingProfanityFilters", portal.PortalID, "NO"), false);
            this.optMsgIncludeAttachments.Select(PortalController.GetPortalSetting("MessagingIncludeAttachments", portal.PortalID, "NO"), false);
            optMsgSendEmail.Select(PortalController.GetPortalSetting("MessagingSendEmail", portal.PortalID, "YES"), false);

	        chkDisablePrivateMessage.Checked = PortalSettings.DisablePrivateMessage;
        }]]></body>
          </codeblock>
        </method>
        <method name="BindPageOutputSettings">
          <declaration><![CDATA[private void BindPageOutputSettings(PortalInfo portal)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="773" sc="9" el="782" ec="10">DesktopModules\Admin\Portals\SiteSettings.ascx.cs</location>
            <body hash="e94f85edc0ec752570ed80ec2e23ae6c"><![CDATA[{
            if (portal != null)
            {
                var portalSettings = new PortalSettings(portal);
                txtPageHeadText.Text = portalSettings.PageHeadText;
                chkInjectModuleHyperLink.Checked = portalSettings.InjectModuleHyperLink;
                txtAddCompatibleHttpHeader.Text = portalSettings.AddCompatibleHttpHeader;
                chkAddCachebusterToResourceUris.Checked = portalSettings.AddCachebusterToResourceUris;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="BindPages">
          <declaration><![CDATA[private void BindPages(PortalInfo portal, string activeLanguage)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="249" sc="9" el="295" ec="10">DesktopModules\Admin\Portals\SiteSettings.ascx.cs</location>
            <body hash="e5ccd5aeb4f61e928ab1d92b5960cc86"><![CDATA[{
            //Set up special page lists
            List<TabInfo> listTabs = TabController.GetPortalTabs(TabController.GetTabsBySortOrder(portal.PortalID, activeLanguage, true),
                                                                 Null.NullInteger,
                                                                 true,
                                                                 "<" + Localization.GetString("None_Specified") + ">",
                                                                 true,
                                                                 true,
                                                                 false,
                                                                 false,
                                                                 false);

            if (portal.SplashTabId > 0)
            {
                cboSplashTabId.SelectedPage = listTabs.SingleOrDefault(t => t.TabID == portal.SplashTabId);
            }

            cboSplashTabId.PortalId = portal.PortalID;

            if (portal.HomeTabId > 0)
            {
                cboHomeTabId.SelectedPage = listTabs.SingleOrDefault(t => t.TabID == portal.HomeTabId);
            }

            cboHomeTabId.PortalId = portal.PortalID;

            cboLoginTabId.DataSource = listTabs.Where(t => (t.TabID > 0 && Globals.ValidateLoginTabID(t.TabID)) || t.TabID == Null.NullInteger).ToList();
            cboLoginTabId.DataBind(portal.LoginTabId.ToString(CultureInfo.InvariantCulture));

            if (portal.RegisterTabId > 0)
            {
                cboRegisterTabId.SelectedPage = listTabs.SingleOrDefault(t => t.TabID == portal.RegisterTabId);
            }

            cboRegisterTabId.PortalId = portal.PortalID;

            cboSearchTabId.DataSource = listTabs.Where(t => (t.TabID > 0 && Globals.ValidateModuleInTab(t.TabID, "Search Results")) || t.TabID == Null.NullInteger).ToList();
            cboSearchTabId.DataBind(portal.SearchTabId.ToString(CultureInfo.InvariantCulture));

            if (portal.UserTabId > 0)
            {
                listTabs = TabController.GetPortalTabs(portal.PortalID, Null.NullInteger, false, true);
                cboUserTabId.SelectedPage = listTabs.SingleOrDefault(t => t.TabID == portal.UserTabId);
            }

            cboUserTabId.PortalId = portal.PortalID;
        }]]></body>
          </codeblock>
        </method>
        <method name="BindPaymentProcessor">
          <declaration><![CDATA[private void BindPaymentProcessor(PortalInfo portal)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="298" sc="9" el="325" ec="10">DesktopModules\Admin\Portals\SiteSettings.ascx.cs</location>
            <body hash="0338268fc6e9802c843787cf7ab95ce6"><![CDATA[{
            var listController = new ListController();
            currencyCombo.DataSource = listController.GetListEntryInfoItems("Currency", "");
            var currency = portal.Currency;
            if (String.IsNullOrEmpty(currency))
            {
                currency = "USD";
            }
            currencyCombo.DataBind(currency);

            processorCombo.DataSource = listController.GetListEntryInfoItems("Processor", "");
            processorCombo.DataBind();
            processorCombo.InsertItem(0, "<" + Localization.GetString("None_Specified") + ">", "");
            processorCombo.Select(Host.PaymentProcessor, true);

            // use sandbox?
            var usePayPalSandbox = Boolean.Parse(PortalController.GetPortalSetting("paypalsandbox", portal.PortalID, "false"));
            chkPayPalSandboxEnabled.Checked = usePayPalSandbox;
            processorLink.NavigateUrl = usePayPalSandbox ? "https://developer.paypal.com" : Globals.AddHTTP(processorCombo.SelectedItem.Value);

            txtUserId.Text = portal.ProcessorUserId;

            // return url after payment or on cancel
            var strPayPalReturnUrl = PortalController.GetPortalSetting("paypalsubscriptionreturn", portal.PortalID, Null.NullString);
            txtPayPalReturnURL.Text = strPayPalReturnUrl;
            var strPayPalCancelUrl = PortalController.GetPortalSetting("paypalsubscriptioncancelreturn", portal.PortalID, Null.NullString);
            txtPayPalCancelURL.Text = strPayPalCancelUrl;
        }]]></body>
          </codeblock>
        </method>
        <method name="BindPortal">
          <declaration><![CDATA[private void BindPortal(int portalId, string activeLanguage)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="328" sc="9" el="437" ec="10">DesktopModules\Admin\Portals\SiteSettings.ascx.cs</location>
            <body hash="568eff9b9fa753e9fa2b646d3f2757d4"><![CDATA[{
            if (portalId != PortalId)
            {
                activeLanguage = LocaleController.Instance.GetDefaultLocale(portalId).Code;
            }

            var portal = PortalController.Instance.GetPortal(portalId, activeLanguage);
            var portalsettings = new PortalSettings(portal);

            if (Page.IsPostBack == false)
            {
                //Ensure localization
                DataProvider.Instance().EnsureLocalizationExists(portalId, activeLanguage);


                BindDetails(portal);

                BindMarketing(portal);

                ctlLogo.FilePath = portal.LogoFile;
                ctlLogo.FileFilter = Globals.glbImageFileTypes;
                ctlBackground.FilePath = portal.BackgroundFile;
                ctlBackground.FileFilter = Globals.glbImageFileTypes;
                ctlFavIcon.FilePath = new FavIcon(portal.PortalID).GetSettingPath();

                BindSkins(portal);

                BindPages(portal, activeLanguage);

                lblHomeDirectory.Text = portal.HomeDirectory;

                optUserRegistration.SelectedIndex = portal.UserRegistration;
                chkEnableRegisterNotification.Checked = PortalController.GetPortalSettingAsBoolean("EnableRegisterNotification", portalId, true);

                BindPaymentProcessor(portal);

                BindUsability(portal);

                BindMessaging(portal);

                BindCustomSettings(portal);

                var objSMTPmode = PortalController.GetPortalSetting("SMTPmode", portal.PortalID, string.Empty);

                if (objSMTPmode.Length == 0)
                {
                    //setting not stored, set host as default don't pull any settings... 
                    rblSMTPmode.Items.FindByValue("h").Selected = true;
                    SmtpSettings.Visible = false;
                }
                else if (objSMTPmode.Length == 1)
                {
                    //settings have been stored, lets fill the form... 
                    switch (objSMTPmode.ToLower())
                    {
                        case "h":
                            //host selected
                            SmtpSettings.Visible = false;
                            break;
                        case "p":
                            //portal selected
                            SmtpSettings.Visible = true;
                            this.BindSmtpSettings(portal.PortalID);
                            break;
                    }

                    if ((rblSMTPmode.Items.FindByValue(objSMTPmode) != null))
                        rblSMTPmode.Items.FindByValue(objSMTPmode).Selected = true;
                }

                cboAdministratorId.DataSource = RoleController.Instance.GetUserRoles(portalId, null, portal.AdministratorRoleName);
                cboAdministratorId.DataBind(portal.AdministratorId.ToString());

                
                //PortalSettings for portal being edited
                var portalSettings = new PortalSettings(portal);

                chkHideLoginControl.Checked = portalSettings.HideLoginControl;

                cboTimeZone.DataBind(portalSettings.TimeZone.Id);


                if (UserInfo.IsSuperUser)
                {
                    BindAliases(portal);

                    BindSSLSettings(portal);

                    BindHostSettings(portal);

                }

                BindUrlSettings(portal);

                SiteSettingAdvancedSettingExtensionControl.BindAction(portalId, TabId, ModuleId);
                SiteSettingsTabExtensionControl.BindAction(portalId, TabId, ModuleId);

                LoadStyleSheet(portal);

                ctlAudit.Entity = portal;

                var overrideDefaultSettings = Boolean.Parse(PortalController.GetPortalSetting(ClientResourceSettings.OverrideDefaultSettingsKey, portalId, "false"));
                chkOverrideDefaultSettings.Checked = overrideDefaultSettings;
                BindClientResourceManagementUi(portal.PortalID, overrideDefaultSettings);
                ManageMinificationUi();
                BindPageOutputSettings(portal);
            }

            BindUserAccountSettings(portal, activeLanguage);
        }]]></body>
          </codeblock>
        </method>
        <method name="BindSkins">
          <declaration><![CDATA[private void BindSkins(PortalInfo portal)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="541" sc="9" el="579" ec="10">DesktopModules\Admin\Portals\SiteSettings.ascx.cs</location>
            <body hash="fbd488db4d2a94aa27d3db124b8b3799"><![CDATA[{
            portalSkinCombo.PortalId = portal.PortalID;
            portalSkinCombo.RootPath = SkinController.RootSkin;
            portalSkinCombo.Scope = SkinScope.All;
            portalSkinCombo.SelectedValue = PortalController.GetPortalSetting("DefaultPortalSkin", portal.PortalID, Host.DefaultPortalSkin, SelectedCultureCode);

            portalContainerCombo.PortalId = portal.PortalID;
            portalContainerCombo.RootPath = SkinController.RootContainer;
            portalContainerCombo.Scope = SkinScope.All;
            portalContainerCombo.SelectedValue = PortalController.GetPortalSetting("DefaultPortalContainer", portal.PortalID, Host.DefaultPortalContainer, SelectedCultureCode);

            editSkinCombo.PortalId = portal.PortalID;
            editSkinCombo.RootPath = SkinController.RootSkin;
            editSkinCombo.Scope = SkinScope.All;
            editSkinCombo.SelectedValue = PortalController.GetPortalSetting("DefaultAdminSkin", portal.PortalID, Host.DefaultAdminSkin, SelectedCultureCode);

            editContainerCombo.PortalId = portal.PortalID;
            editContainerCombo.RootPath = SkinController.RootContainer;
            editContainerCombo.Scope = SkinScope.All;
            editContainerCombo.SelectedValue = PortalController.GetPortalSetting("DefaultAdminContainer", portal.PortalID, Host.DefaultAdminContainer, SelectedCultureCode);

            iconSetCombo.DataSource = IconController.GetIconSets();
            iconSetCombo.DataBind();
            iconSetCombo.SelectedValue = PortalController.GetPortalSetting("DefaultIconLocation", portal.PortalID, "Sigma", SelectedCultureCode).Replace("icons/", "");

            if (ModuleContext.PortalSettings.UserInfo.IsSuperUser)
            {
                uploadSkinLink.NavigateUrl = Util.InstallURL(ModuleContext.TabId, "");

                if (PortalSettings.EnablePopUps)
                {
                    uploadSkinLink.Attributes.Add("onclick", "return " + UrlUtils.PopUpUrl(uploadSkinLink.NavigateUrl, this, PortalSettings, true, false));
                }
            }
            else
            {
                uploadSkinLink.Visible = false;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="BindSmtpSettings">
          <declaration><![CDATA[private void BindSmtpSettings(int portalId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="475" sc="9" el="494" ec="10">DesktopModules\Admin\Portals\SiteSettings.ascx.cs</location>
            <body hash="2ee5e0749f576e11cfbd097d1a8e5666"><![CDATA[{
            txtSMTPServer.Text = Convert.ToString(PortalController.GetPortalSetting("SMTPServer", portalId, String.Empty));
            txtConnectionLimit.Text = Convert.ToString(PortalController.GetPortalSettingAsInteger("SMTPConnectionLimit", PortalSettings.Current.PortalId, 1));
            txtMaxIdleTime.Text = Convert.ToString(PortalController.GetPortalSettingAsInteger("SMTPMaxIdleTime", PortalSettings.Current.PortalId, 0)); 
            optSMTPAuthentication.Items.FindByValue(PortalController.GetPortalSetting("SMTPAuthentication", portalId, "0").ToString()).Selected = true;


            if (PortalController.GetPortalSetting("SMTPEnableSSL", portalId, String.Empty) == "Y")
            {
                chkSMTPEnableSSL.Checked = true;
            }
            else
            {
                chkSMTPEnableSSL.Checked = false;
            }

            txtSMTPUsername.Text = Convert.ToString(PortalController.GetPortalSetting("SMTPUsername", portalId, String.Empty));

            txtSMTPPassword.Attributes.Add("value", Convert.ToString(PortalController.GetPortalSetting("SMTPPassword", portalId, String.Empty)));
        }]]></body>
          </codeblock>
        </method>
        <method name="BindSSLSettings">
          <declaration><![CDATA[private void BindSSLSettings(PortalInfo portal)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="582" sc="9" el="587" ec="10">DesktopModules\Admin\Portals\SiteSettings.ascx.cs</location>
            <body hash="b26b0904243eb63e3b5bb34a13d3117a"><![CDATA[{
            chkSSLEnabled.Checked = PortalController.GetPortalSettingAsBoolean("SSLEnabled", portal.PortalID, false);
            chkSSLEnforced.Checked = PortalController.GetPortalSettingAsBoolean("SSLEnforced", portal.PortalID, false);
            txtSSLURL.Text = PortalController.GetPortalSetting("SSLURL", portal.PortalID, Null.NullString);
            txtSTDURL.Text = PortalController.GetPortalSetting("STDURL", portal.PortalID, Null.NullString);
        }]]></body>
          </codeblock>
        </method>
        <method name="BindUrlSettings">
          <declaration><![CDATA[private void BindUrlSettings(PortalInfo portal)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="590" sc="9" el="596" ec="10">DesktopModules\Admin\Portals\SiteSettings.ascx.cs</location>
            <body hash="cfa4ac51b11f24e9bbb880fcf04445c0"><![CDATA[{
            if (Config.GetFriendlyUrlProvider() == "advanced")
            {
                var urlSettings = new DotNetNuke.Entities.Urls.FriendlyUrlSettings(portal.PortalID);
                redirectOldProfileUrls.Checked = urlSettings.RedirectOldProfileUrl;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="BindUsability">
          <declaration><![CDATA[private void BindUsability(PortalInfo portal)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="599" sc="9" el="612" ec="10">DesktopModules\Admin\Portals\SiteSettings.ascx.cs</location>
            <body hash="6136f4bb1829400eefdc47d3c1a49370"><![CDATA[{
            //PortalSettings for portal being edited
            var portalSettings = new PortalSettings(portal);
            chkInlineEditor.Checked = portalSettings.InlineEditorEnabled;
            enablePopUpsCheckBox.Checked = portalSettings.EnablePopUps;
            chkHideSystemFolders.Checked = portalSettings.HideFoldersEnabled;

            var mode = (portalSettings.DefaultControlPanelMode == PortalSettings.Mode.Edit) ? "EDIT" : "VIEW";
            optControlPanelMode.Select(mode, false);

            optControlPanelVisibility.Select(PortalController.GetPortalSetting("ControlPanelVisibility", portal.PortalID, "MAX"), false);

            optControlPanelSecurity.Select(PortalController.GetPortalSetting("ControlPanelSecurity", portal.PortalID, "MODULE"), false);
        }]]></body>
          </codeblock>
        </method>
        <method name="BindUserAccountSettings">
          <declaration><![CDATA[private void BindUserAccountSettings(PortalInfo portal, string activeLanguage)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="615" sc="9" el="726" ec="10">DesktopModules\Admin\Portals\SiteSettings.ascx.cs</location>
            <body hash="3cf54f09850ba57f33db53e47b437e50"><![CDATA[{
            if (!Page.IsPostBack)
            {
                var settings = UserController.GetUserSettings(portal.PortalID);

                basicRegistrationSettings.DataSource = settings;
                basicRegistrationSettings.DataBind();
                chkRegistrationUseAuthProviders.Checked = PortalController.GetPortalSettingAsBoolean("Registration_UseAuthProviders", portal.PortalID, false);
                chkRegistrationUseProfanityFilter.Checked = PortalController.GetPortalSettingAsBoolean("Registration_UseProfanityFilter", portal.PortalID, false);
				
                registrationFormType.Select(PortalSettings.Registration.RegistrationFormType.ToString(CultureInfo.InvariantCulture));

                //standard registration settings
                chkRegistrationUseEmailAsUserName.Checked = PortalController.GetPortalSettingAsBoolean("Registration_UseEmailAsUserName", portal.PortalID, false);

                validationRegistrationSettings.DataSource = settings;
                validationRegistrationSettings.DataBind();
                chkRegistrationRequireUniqueDisplayName.Checked = PortalController.GetPortalSettingAsBoolean("Registration_RequireUniqueDisplayName", portal.PortalID, false);

				var customRegistrationFields = PortalSettings.Registration.RegistrationFields;

                CustomRegistrationFields = BuildCustomRegistrationFields(customRegistrationFields);

                //password registration settings
                chkRegistrationRandomPassword.Checked = PortalController.GetPortalSettingAsBoolean("Registration_RandomPassword", portal.PortalID, false);
                chkRegistrationRequireConfirmPassword.Checked = PortalController.GetPortalSettingAsBoolean("Registration_RequireConfirmPassword", portal.PortalID, true);

                //other registration settings
                chkSecurityRequireValidProfile.Checked = PortalController.GetPortalSettingAsBoolean("Security_RequireValidProfile", portal.PortalID, false);
                chkSecurityCaptchaRegister.Checked = PortalController.GetPortalSettingAsBoolean("Security_CaptchaRegister", portal.PortalID, false);

                //Set up special page lists
                List<TabInfo> listTabs = TabController.GetPortalTabs(TabController.GetTabsBySortOrder(portal.PortalID, activeLanguage, true),
                                                                     Null.NullInteger,
                                                                     true,
                                                                     "<" + Localization.GetString("None_Specified") + ">",
                                                                     true,
                                                                     false,
                                                                     false,
                                                                     false,
                                                                     false);

                var tabs = listTabs.Where(t => t.DisableLink == false).ToList();

                //using values from current portal
                var redirectTab = PortalSettings.Registration.RedirectAfterRegistration;
                if (redirectTab > 0)
                {
                    RedirectAfterRegistration.SelectedPage = tabs.SingleOrDefault(t => t.TabID == redirectTab);
                }
                RedirectAfterRegistration.PortalId = portal.PortalID;

                RequiresUniqueEmailLabel.Text = MembershipProviderConfig.RequiresUniqueEmail.ToString(CultureInfo.InvariantCulture);
                PasswordFormatLabel.Text = MembershipProviderConfig.PasswordFormat.ToString();
                PasswordRetrievalEnabledLabel.Text = MembershipProviderConfig.PasswordRetrievalEnabled.ToString(CultureInfo.InvariantCulture);
                PasswordResetEnabledLabel.Text = MembershipProviderConfig.PasswordResetEnabled.ToString(CultureInfo.InvariantCulture);
                MinPasswordLengthLabel.Text = MembershipProviderConfig.MinPasswordLength.ToString(CultureInfo.InvariantCulture);
                MinNonAlphanumericCharactersLabel.Text = MembershipProviderConfig.MinNonAlphanumericCharacters.ToString(CultureInfo.InvariantCulture);
                RequiresQuestionAndAnswerLabel.Text = MembershipProviderConfig.RequiresQuestionAndAnswer.ToString(CultureInfo.InvariantCulture);
                PasswordStrengthRegularExpressionLabel.Text = MembershipProviderConfig.PasswordStrengthRegularExpression;
                MaxInvalidPasswordAttemptsLabel.Text = MembershipProviderConfig.MaxInvalidPasswordAttempts.ToString(CultureInfo.InvariantCulture);
                PasswordAttemptWindowLabel.Text = MembershipProviderConfig.PasswordAttemptWindow.ToString(CultureInfo.InvariantCulture);
                //login settings
                chkSecurityCaptchaLogin.Checked = PortalController.GetPortalSettingAsBoolean("Security_CaptchaLogin", portal.PortalID, false);
                chkSecurityRequireValidProfileAtLogin.Checked = PortalController.GetPortalSettingAsBoolean("Security_RequireValidProfileAtLogin", portal.PortalID, true);
                chkSecurityCaptchaRetrivePassword.Checked = PortalController.GetPortalSettingAsBoolean("Security_CaptchaRetrivePassword", portal.PortalID, false);
                chkSecurityCaptchaChangePassword.Checked = PortalController.GetPortalSettingAsBoolean("Security_CaptchaChangePassword", portal.PortalID, false);

                //using values from current portal
                redirectTab = PortalSettings.Registration.RedirectAfterLogin;
                if (redirectTab > 0)
                {
                    RedirectAfterLogin.SelectedPage = tabs.SingleOrDefault(t => t.TabID == redirectTab);
                }
                RedirectAfterLogin.PortalId = portal.PortalID;

                //using values from current portal
				redirectTab = PortalSettings.Registration.RedirectAfterLogout;

                if (redirectTab > 0)
                {
                    RedirectAfterLogout.SelectedPage = tabs.SingleOrDefault(t => t.TabID == redirectTab);
                }
                RedirectAfterLogout.PortalId = portal.PortalID;

                //This needs to be kept explicit to avoid naming conflicts ewith iFinity
                var urlSettings = new DotNetNuke.Entities.Urls.FriendlyUrlSettings(portal.PortalID);

                VanityUrlAlias.Text = String.Format("{0}/", PortalSettings.PortalAlias.HTTPAlias);
                vanilyUrlPrefixTextBox.Text = urlSettings.VanityUrlPrefix;
                VanityUrlExample.Text = String.Format("/{0}", LocalizeString("VanityUrlExample"));

                userVisiblity.EnumType = "DotNetNuke.Entities.Users.UserVisibilityMode, DotNetNuke";
                profileSettings.DataSource = settings;
                profileSettings.DataBind();
                chkProfileDisplayVisibility.Checked = PortalController.GetPortalSettingAsBoolean("Profile_DisplayVisibility", portal.PortalID, true);
                //Bind auth providers
                var authSystems = AuthenticationController.GetEnabledAuthenticationServices();
                var authProviders = (from authProvider in authSystems let authLoginControl = (AuthenticationLoginBase)LoadControl("~/" + authProvider.LoginControlSrc) let oAuthLoginControl = authLoginControl as OAuthLoginBase where oAuthLoginControl ==null && authLoginControl.Enabled select authProvider.AuthenticationType).ToList();
                authProviderCombo.DataSource = authProviders;
                authProviderCombo.DataBind();
                authProviderCombo.InsertItem(0, "<" + Localization.GetString("None_Specified") + ">", "");

                var defaultAuthProvider = PortalController.GetPortalSetting("DefaultAuthProvider", portal.PortalID, "DNN");
                authProviderCombo.Select(defaultAuthProvider ?? "<" + Localization.GetString("None_Specified") + ">", true);
            }
            else
            {
                CustomRegistrationFields = BuildCustomRegistrationFields(registrationFields.Text);
            }

        }]]></body>
          </codeblock>
        </method>
        <method name="BuildCustomRegistrationFields">
          <declaration><![CDATA[private string BuildCustomRegistrationFields(string customRegistrationFields)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="729" sc="9" el="746" ec="10">DesktopModules\Admin\Portals\SiteSettings.ascx.cs</location>
            <body hash="07c465fd10a639ccb20868d98ad7affe"><![CDATA[{
            if (!String.IsNullOrEmpty(customRegistrationFields))
            {
                var sb = new StringBuilder();
                sb.Append("[ ");
                int i = 0;
                foreach (var field in customRegistrationFields.Split(','))
                {
                    if (i != 0) sb.Append(",");
                    sb.Append("{ id: \"" + field + "\", name: \"" + field + "\"}");
                    i++;
                }
                sb.Append(" ]");
                return sb.ToString();
            }

            return "null";
        }]]></body>
          </codeblock>
        </method>
        <method name="ctlDesktopModules_ItemChecked">
          <declaration><![CDATA[protected void ctlDesktopModules_ItemChecked(object sender, RadComboBoxItemEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1585" sc="9" el="1599" ec="10">DesktopModules\Admin\Portals\SiteSettings.ascx.cs</location>
            <body hash="ee7934539f1a39f085a21f5f9d2d58b8"><![CDATA[{
            if (e.Item != null)
            {
                if (!e.Item.Checked) // there is a bug in client side, the checked status..
                {
                    DesktopModuleController.AddDesktopModuleToPortal(_portalId, int.Parse(e.Item.Value), true, true);
                }
                else
                {
                    DesktopModuleController.RemoveDesktopModuleFromPortal(_portalId, int.Parse(e.Item.Value), true);
                }

                BindDesktopModules();
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="DeletePortal">
          <declaration><![CDATA[protected void DeletePortal(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1024" sc="9" el="1070" ec="10">DesktopModules\Admin\Portals\SiteSettings.ascx.cs</location>
            <body hash="79d23e6885e0f8636a6e4ae6e3647827"><![CDATA[{
            try
            {
                PortalInfo objPortalInfo = PortalController.Instance.GetPortal(_portalId);
                if (objPortalInfo != null)
                {
                    string strMessage = PortalController.DeletePortal(objPortalInfo, Globals.GetAbsoluteServerPath(Request));

                    if (string.IsNullOrEmpty(strMessage))
                    {
                        EventLogController.Instance.AddLog("PortalName", objPortalInfo.PortalName, PortalSettings, UserId, EventLogController.EventLogType.PORTAL_DELETED);

                        //Redirect to another site
                        if (_portalId == PortalId)
                        {
                            if (!string.IsNullOrEmpty(Host.HostURL))
                            {
                                Response.Redirect(Globals.AddHTTP(Host.HostURL));
                            }
                            else
                            {
                                Response.End();
                            }
                        }
                        else
                        {
                            if (ViewState["UrlReferrer"] != null)
                            {
                                Response.Redirect(Convert.ToString(ViewState["UrlReferrer"]), true);
                            }
                            else
                            {
                                Response.Redirect(Globals.NavigateURL(), true);
                            }
                        }
                    }
                    else
                    {
                        Skin.AddModuleMessage(this, strMessage, ModuleMessage.ModuleMessageType.RedError);
                    }
                }
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="EnableCompositeFilesChanged">
          <declaration><![CDATA[private void EnableCompositeFilesChanged(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="930" sc="9" el="932" ec="10">DesktopModules\Admin\Portals\SiteSettings.ascx.cs</location>
            <body hash="ec9534cb047865721cf17d6fbedd0a69"><![CDATA[{
            ManageMinificationUi();
        }]]></body>
          </codeblock>
        </method>
        <method name="FormatCurrency">
          <declaration><![CDATA[protected string FormatCurrency()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="797" sc="9" el="808" ec="10">DesktopModules\Admin\Portals\SiteSettings.ascx.cs</location>
            <body hash="b535e22699bf5fd68f826a705e574dfb"><![CDATA[{
            var retValue = "";
            try
            {
                retValue = Host.HostCurrency + " / " + Localization.GetString("Month");
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
            return retValue;
        }]]></body>
          </codeblock>
        </method>
        <method name="FormatFee">
          <declaration><![CDATA[protected string FormatFee(object objHostFee)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="819" sc="9" el="830" ec="10">DesktopModules\Admin\Portals\SiteSettings.ascx.cs</location>
            <body hash="35e231c04a5ee761b29125adc7a3993c"><![CDATA[{
            var retValue = "";
            try
            {
                retValue = objHostFee != DBNull.Value ? ((float)objHostFee).ToString("#,##0.00") : "0";
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
            return retValue;
        }]]></body>
          </codeblock>
        </method>
        <method name="IncrementCrmVersion">
          <declaration><![CDATA[private void IncrementCrmVersion(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="954" sc="9" el="957" ec="10">DesktopModules\Admin\Portals\SiteSettings.ascx.cs</location>
            <body hash="314db1f96056fa084e590cc8d02c0149"><![CDATA[{
            PortalController.IncrementCrmVersion(_portalId);
            Response.Redirect(Request.RawUrl, true); // reload page
        }]]></body>
          </codeblock>
        </method>
        <method name="InitializeDropDownLists">
          <declaration><![CDATA[private void InitializeDropDownLists()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="910" sc="9" el="927" ec="10">DesktopModules\Admin\Portals\SiteSettings.ascx.cs</location>
            <body hash="e88ab22d10f97693fd8d6a1bef16d98e"><![CDATA[{
            var undefinedItem = new ListItem(DynamicSharedConstants.Unspecified, String.Empty);
            cboSplashTabId.UndefinedItem = undefinedItem;
            cboHomeTabId.UndefinedItem = undefinedItem;
            cboRegisterTabId.UndefinedItem = undefinedItem;
            cboUserTabId.UndefinedItem = undefinedItem;
            RedirectAfterLogin.UndefinedItem = undefinedItem;
            RedirectAfterRegistration.UndefinedItem = undefinedItem;
            RedirectAfterLogout.UndefinedItem = undefinedItem;

            RedirectAfterRegistration.Roles.Add(PortalSettings.RegisteredRoleId);
            RedirectAfterRegistration.Roles.Add(int.Parse(Globals.glbRoleAllUsers));

            RedirectAfterLogin.Roles.Add(PortalSettings.RegisteredRoleId);
            RedirectAfterLogin.Roles.Add(int.Parse(Globals.glbRoleAllUsers));

            RedirectAfterLogout.Roles.Add(int.Parse(Globals.glbRoleAllUsers));
        }]]></body>
          </codeblock>
        </method>
        <method name="IsSubscribed">
          <declaration><![CDATA[protected bool IsSubscribed(int portalModuleDefinitionId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="841" sc="9" el="851" ec="10">DesktopModules\Admin\Portals\SiteSettings.ascx.cs</location>
            <body hash="97ddadb00775cff22770b7b23ec28c43"><![CDATA[{
            try
            {
                return Null.IsNull(portalModuleDefinitionId) == false;
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
                return false;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="IsSuperUser">
          <declaration><![CDATA[protected bool IsSuperUser()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="862" sc="9" el="864" ec="10">DesktopModules\Admin\Portals\SiteSettings.ascx.cs</location>
            <body hash="7295b70365bd9ccdcff70e9ca4164b9c"><![CDATA[{
            return UserInfo.IsSuperUser;
        }]]></body>
          </codeblock>
        </method>
        <method name="LoadStyleSheet">
          <declaration><![CDATA[private void LoadStyleSheet(PortalInfo portal)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="755" sc="9" el="771" ec="10">DesktopModules\Admin\Portals\SiteSettings.ascx.cs</location>
            <body hash="0f98444f0c4363d4b4c6160b6ed88806"><![CDATA[{
            string uploadDirectory = "";
            if (portal != null)
            {
                uploadDirectory = portal.HomeDirectoryMapPath;
            }

            //read CSS file
            if (File.Exists(uploadDirectory + "portal.css"))
            {
                using (var text = File.OpenText(uploadDirectory + "portal.css"))
                {
                    txtStyleSheet.Text = text.ReadToEnd();
                }
            }

        }]]></body>
          </codeblock>
        </method>
        <method name="ManageMinificationUi">
          <declaration><![CDATA[private void ManageMinificationUi()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="935" sc="9" el="946" ec="10">DesktopModules\Admin\Portals\SiteSettings.ascx.cs</location>
            <body hash="210ebb2bb3ec3f2ab870c9faf5986114"><![CDATA[{
            var enableCompositeFiles = chkEnableCompositeFiles.Checked;

            if (!enableCompositeFiles)
            {
                chkMinifyCss.Checked = false;
                chkMinifyJs.Checked = false;
            }

            chkMinifyCss.Enabled = enableCompositeFiles;
            chkMinifyJs.Enabled = enableCompositeFiles;
        }]]></body>
          </codeblock>
        </method>
        <method name="OnChkPayPalSandboxChanged">
          <declaration><![CDATA[protected void OnChkPayPalSandboxChanged(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1602" sc="9" el="1604" ec="10">DesktopModules\Admin\Portals\SiteSettings.ascx.cs</location>
            <body hash="9c5c9b65e2e483b314d3d8e556f99cfc"><![CDATA[{
            processorLink.NavigateUrl = chkPayPalSandboxEnabled.Checked ? "https://developer.paypal.com" : Globals.AddHTTP(processorCombo.SelectedItem.Value);
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="889" sc="9" el="904" ec="10">DesktopModules\Admin\Portals\SiteSettings.ascx.cs</location>
            <body hash="99f2153451a105844ef100a39ea60a5c"><![CDATA[{
            base.OnInit(e);

			JavaScript.RequestRegistration(CommonJs.DnnPlugins);
            ServicesFramework.Instance.RequestAjaxAntiForgerySupport();

            cmdEmail.Click += TestEmail;
            rblSMTPmode.SelectedIndexChanged += OnSmtpModeChanged;
            chkPayPalSandboxEnabled.CheckedChanged += OnChkPayPalSandboxChanged;
            IncrementCrmVersionButton.Click += IncrementCrmVersion;
            chkOverrideDefaultSettings.CheckedChanged += OverrideDefaultSettingsChanged;
            chkEnableCompositeFiles.CheckedChanged += EnableCompositeFilesChanged;

            InitializeDropDownLists();

        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="966" sc="9" el="1013" ec="10">DesktopModules\Admin\Portals\SiteSettings.ascx.cs</location>
            <body hash="e241e8b6867595dc25a0616e9484d7ab"><![CDATA[{
            base.OnLoad(e);

            cmdDelete.Click += DeletePortal;
            cmdRestore.Click += OnRestoreClick;
            cmdSave.Click += OnSaveClick;
            cmdUpdate.Click += UpdatePortal;
            cmdVerification.Click += OnVerifyClick;
            ctlDesktopModules.ItemChecked += ctlDesktopModules_ItemChecked;
            
            try
            {
                if ((Request.QueryString["pid"] != null) && (Globals.IsHostTab(PortalSettings.ActiveTab.TabID) || UserInfo.IsSuperUser))
                {
                    _portalId = Int32.Parse(Request.QueryString["pid"]);
	                cancelHyperLink.NavigateUrl = Globals.NavigateURL();
                }
                else
                {
                    _portalId = PortalId;
                    cancelHyperLink.Visible = false;
                }

				ctlLogo.PortalId = ctlBackground.PortalId = ctlFavIcon.PortalId = _portalId;

                ////this needs to execute always to the client script code is registred in InvokePopupCal
                
                BindDesktopModules();
                
                BindPortal(_portalId, SelectedCultureCode);

                if (UserInfo.IsSuperUser)
                {
                    hostSections.Visible = true;
                    cmdDelete.Visible = (_portalId != PortalId && !PortalController.IsMemberOfPortalGroup(_portalId));
                }
                else
                {
                    hostSections.Visible = false;
                    cmdDelete.Visible = false;
                }

            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnRestoreClick">
          <declaration><![CDATA[protected void OnRestoreClick(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1149" sc="9" el="1173" ec="10">DesktopModules\Admin\Portals\SiteSettings.ascx.cs</location>
            <body hash="b81788e6b1b08dd7e17e9f0b6c8df7be"><![CDATA[{
            try
            {
                PortalInfo portal = PortalController.Instance.GetPortal(_portalId);
                if (portal != null)
                {
                    if (File.Exists(portal.HomeDirectoryMapPath + "portal.css"))
                    {
                        //delete existing style sheet
                        File.Delete(portal.HomeDirectoryMapPath + "portal.css");
                    }

                    //copy file from Host
                    if (File.Exists(Globals.HostMapPath + "portal.css"))
                    {
                        File.Copy(Globals.HostMapPath + "portal.css", portal.HomeDirectoryMapPath + "portal.css");
                    }
                }
                LoadStyleSheet(portal);
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnSaveClick">
          <declaration><![CDATA[protected void OnSaveClick(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1183" sc="9" el="1227" ec="10">DesktopModules\Admin\Portals\SiteSettings.ascx.cs</location>
            <body hash="ebd6ca02df8ea54d4ad9a220a62d300f"><![CDATA[{
            try
            {
                string strUploadDirectory = "";

                PortalInfo objPortal = PortalController.Instance.GetPortal(_portalId);
                if (objPortal != null)
                {
                    strUploadDirectory = objPortal.HomeDirectoryMapPath;
                }

                //reset attributes
                if (File.Exists(strUploadDirectory + "portal.css"))
                {
                    File.SetAttributes(strUploadDirectory + "portal.css", FileAttributes.Normal);
                }

                //write CSS file
                using (var writer = File.CreateText(strUploadDirectory + "portal.css"))
                {
                    writer.WriteLine(txtStyleSheet.Text);
                }

                //Clear client resource cache
                var overrideSetting = PortalController.GetPortalSetting(ClientResourceSettings.OverrideDefaultSettingsKey, _portalId, "False");
                bool overridePortal;
                if (bool.TryParse(overrideSetting, out overridePortal))
                {
                    if (overridePortal)
                    {
                        // increment this portal version only
                        PortalController.IncrementCrmVersion(_portalId);
                    }
                    else
                    {
                        // increment host version, do not increment other portal versions though.
                        HostController.Instance.IncrementCrmVersion(false);
                    }   
                }
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnSmtpModeChanged">
          <declaration><![CDATA[protected void OnSmtpModeChanged(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1607" sc="9" el="1620" ec="10">DesktopModules\Admin\Portals\SiteSettings.ascx.cs</location>
            <body hash="c5880d6aea3ec77bb493c55bf24f1941"><![CDATA[{
            switch (rblSMTPmode.SelectedValue.ToLower())
            {
                case "h":
                    //host
                    SmtpSettings.Visible = false;
                    break;
                case "p":
                    //portal
                    SmtpSettings.Visible = true;
                    this.BindSmtpSettings(_portalId);
                    break;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnVerifyClick">
          <declaration><![CDATA[protected void OnVerifyClick(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1570" sc="9" el="1582" ec="10">DesktopModules\Admin\Portals\SiteSettings.ascx.cs</location>
            <body hash="2c94a034116eaa1454331f088555324e"><![CDATA[{
            if (!String.IsNullOrEmpty(txtVerification.Text) && txtVerification.Text.EndsWith(".html"))
            {
                if (!File.Exists(Globals.ApplicationMapPath + "\\" + txtVerification.Text))
                {
                    //write SiteMap verification file
                    using (var writer = File.CreateText(Globals.ApplicationMapPath + "\\" + txtVerification.Text))
                    {
                        writer.WriteLine("google-site-verification: " + txtVerification.Text);
                    }
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OverrideDefaultSettingsChanged">
          <declaration><![CDATA[private void OverrideDefaultSettingsChanged(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="949" sc="9" el="951" ec="10">DesktopModules\Admin\Portals\SiteSettings.ascx.cs</location>
            <body hash="a2a4f3c13959c7896685f59b0e2349e1"><![CDATA[{
            BindClientResourceManagementUi(_portalId, chkOverrideDefaultSettings.Checked);
        }]]></body>
          </codeblock>
        </method>
        <method name="TestEmail">
          <declaration><![CDATA[protected void TestEmail(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1073" sc="9" el="1139" ec="10">DesktopModules\Admin\Portals\SiteSettings.ascx.cs</location>
            <body hash="a9d4ea5324227f4e38fc31c5520069ef"><![CDATA[{
            try
            {
                if (!String.IsNullOrEmpty(Host.HostEmail) && !String.IsNullOrEmpty(PortalSettings.UserInfo.Email))
                {
                    txtSMTPPassword.Attributes.Add("value", txtSMTPPassword.Text);

                    string strMessage;

                    if (SmtpSettings.Visible)
                    {
                        //portal mode
                        strMessage = Mail.SendMail(
                            Host.HostEmail,
                            PortalSettings.UserInfo.Email,
                            "",
                            "",
                            MailPriority.Normal,
                            Localization.GetSystemMessage(PortalSettings, "EMAIL_SMTP_TEST_SUBJECT"),
                            MailFormat.Text,
                            Encoding.UTF8,
                            "",
                            "",
                            txtSMTPServer.Text,
                            optSMTPAuthentication.SelectedItem.Value,
                            txtSMTPUsername.Text,
                            txtSMTPPassword.Text,
                            chkSMTPEnableSSL.Checked);
                    }
                    else
                    {
                        strMessage = Mail.SendMail(
                            Host.HostEmail,
                            PortalSettings.UserInfo.Email,
                            "",
                            "",
                            MailPriority.Normal,
                            Localization.GetSystemMessage(PortalSettings, "EMAIL_SMTP_TEST_SUBJECT"),
                            MailFormat.Text,
                            Encoding.UTF8,
                            "",
                            "",
                            Host.SMTPServer,
                            Host.SMTPAuthentication,
                            Host.SMTPUsername,
                            Host.SMTPPassword,
                            Host.EnableSMTPSSL);
                    }
                    if (!String.IsNullOrEmpty(strMessage))
                    {
                        Skin.AddModuleMessage(this, "", String.Format(Localization.GetString("EmailErrorMessage", LocalResourceFile), strMessage), ModuleMessage.ModuleMessageType.RedError);
                    }
                    else
                    {
                        Skin.AddModuleMessage(this, "", String.Format(Localization.GetString("EmailSentMessage", LocalResourceFile), Host.HostEmail, PortalSettings.UserInfo.Email), ModuleMessage.ModuleMessageType.GreenSuccess);
                    }
                }
                else
                {
                    Skin.AddModuleMessage(this, "", Localization.GetString("SpecifyHostEmailMessage", LocalResourceFile), ModuleMessage.ModuleMessageType.RedError);
                }
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdatePortal">
          <declaration><![CDATA[protected void UpdatePortal(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1237" sc="9" el="1567" ec="10">DesktopModules\Admin\Portals\SiteSettings.ascx.cs</location>
            <body hash="bf6830a97e6f4a0a485dd7abeb87aae9"><![CDATA[{
            if (Page.IsValid)
            {
                try
                {
                    PortalInfo existingPortal = PortalController.Instance.GetPortal(_portalId);

                    string logo = String.Format("FileID={0}", ctlLogo.FileID);
                    string background = String.Format("FileID={0}", ctlBackground.FileID);

                    //Refresh if Background or Logo file have changed
                    bool refreshPage = (background == existingPortal.BackgroundFile || logo == existingPortal.LogoFile);

                    float hostFee = existingPortal.HostFee;
                    if (!String.IsNullOrEmpty(txtHostFee.Text))
                    {
                        hostFee = float.Parse(txtHostFee.Text);
                    }

                    int hostSpace = existingPortal.HostSpace;
                    if (!String.IsNullOrEmpty(txtHostSpace.Text))
                    {
                        hostSpace = int.Parse(txtHostSpace.Text);
                    }

                    int pageQuota = existingPortal.PageQuota;
                    if (!String.IsNullOrEmpty(txtPageQuota.Text))
                    {
                        pageQuota = int.Parse(txtPageQuota.Text);
                    }

                    int userQuota = existingPortal.UserQuota;
                    if (!String.IsNullOrEmpty(txtUserQuota.Text))
                    {
                        userQuota = int.Parse(txtUserQuota.Text);
                    }

                    DateTime expiryDate = existingPortal.ExpiryDate;
                    if (datepickerExpiryDate.SelectedDate.HasValue)
                    {
                        expiryDate = datepickerExpiryDate.SelectedDate.Value;
                    }
                    else
                    {
                        expiryDate = DateTime.MinValue;
                    }

                    var intSplashTabId = cboSplashTabId.SelectedItemValueAsInt;

                    var intHomeTabId = cboHomeTabId.SelectedItemValueAsInt;

                    var intLoginTabId = Null.NullInteger;
                    if (cboLoginTabId.SelectedItem != null)
                    {
                        int.TryParse(cboLoginTabId.SelectedItem.Value, out intLoginTabId);
                    }

                    var intRegisterTabId = cboRegisterTabId.SelectedItemValueAsInt;

                    var intUserTabId = cboUserTabId.SelectedItemValueAsInt;

                    var intSearchTabId = Null.NullInteger;
                    if (cboSearchTabId.SelectedItem != null)
                    {
                        int.TryParse(cboSearchTabId.SelectedItem.Value, out intSearchTabId);
                    }

                    var portal = new PortalInfo
                                            {
                                                PortalID = _portalId,
                                                PortalGroupID = existingPortal.PortalGroupID,
                                                PortalName = txtPortalName.Text,
                                                LogoFile = logo,
                                                FooterText = txtFooterText.Text,
                                                ExpiryDate = expiryDate,
                                                UserRegistration = optUserRegistration.SelectedIndex,
                                                BannerAdvertising = optBanners.SelectedIndex,
                                                Currency = currencyCombo.SelectedItem.Value,
                                                AdministratorId = Convert.ToInt32(cboAdministratorId.SelectedItem.Value),
                                                HostFee = hostFee,
                                                HostSpace = hostSpace,
                                                PageQuota = pageQuota,
                                                UserQuota = userQuota,
                                                PaymentProcessor =
                                                    String.IsNullOrEmpty(processorCombo.SelectedValue)
                                                        ? ""
                                                        : processorCombo.SelectedItem.Text,
                                                ProcessorUserId = txtUserId.Text,
                                                ProcessorPassword = !string.IsNullOrEmpty(txtPassword.Text) ? txtPassword.Text : existingPortal.ProcessorPassword,
                                                Description = txtDescription.Text,
                                                KeyWords = txtKeyWords.Text,
                                                BackgroundFile = background,
                                                SplashTabId = intSplashTabId,
                                                HomeTabId = intHomeTabId,
                                                LoginTabId = intLoginTabId,
                                                RegisterTabId = intRegisterTabId,
                                                UserTabId = intUserTabId,
                                                SearchTabId = intSearchTabId,
                                                DefaultLanguage = existingPortal.DefaultLanguage,
                                                HomeDirectory = lblHomeDirectory.Text,
                                                CultureCode = SelectedCultureCode,
                                                Custom404TabId = cbo404TabId.SelectedItem != null ? cbo404TabId.SelectedItemValueAsInt
                                                                                                    : Null.NullInteger,
                                                Custom500TabId = cbo500TabId.SelectedItem != null ? cbo500TabId.SelectedItemValueAsInt
                                                                                                    : Null.NullInteger
                                            };
                    //portalController.UpdatePortalInfo(portal);
                    PortalController.Instance.UpdatePortalInfo(portal);

                    if (!refreshPage)
                    {
						refreshPage = PortalSettings.DefaultPortalSkin != portalSkinCombo.SelectedValue ||
										PortalSettings.DefaultPortalContainer != portalContainerCombo.SelectedValue ||
										PortalSettings.DefaultAdminSkin != editSkinCombo.SelectedValue ||
                                        PortalSettings.DefaultAdminContainer != editContainerCombo.SelectedValue;
                    }

                    PortalController.UpdatePortalSetting(_portalId, ClientResourceSettings.OverrideDefaultSettingsKey, chkOverrideDefaultSettings.Checked.ToString(CultureInfo.InvariantCulture), false);
                    PortalController.UpdatePortalSetting(_portalId, ClientResourceSettings.EnableCompositeFilesKey, chkEnableCompositeFiles.Checked.ToString(CultureInfo.InvariantCulture), false);
                    PortalController.UpdatePortalSetting(_portalId, ClientResourceSettings.MinifyCssKey, chkMinifyCss.Checked.ToString(CultureInfo.InvariantCulture), false);
                    PortalController.UpdatePortalSetting(_portalId, ClientResourceSettings.MinifyJsKey, chkMinifyJs.Checked.ToString(CultureInfo.InvariantCulture), false);

                    PortalController.UpdatePortalSetting(_portalId, "DefaultAdminSkin", editSkinCombo.SelectedValue, false, SelectedCultureCode);
                    PortalController.UpdatePortalSetting(_portalId, "DefaultPortalSkin", portalSkinCombo.SelectedValue, false, SelectedCultureCode);
                    PortalController.UpdatePortalSetting(_portalId, "DefaultAdminContainer", editContainerCombo.SelectedValue, false, SelectedCultureCode);
                    PortalController.UpdatePortalSetting(_portalId, "DefaultPortalContainer", portalContainerCombo.SelectedValue, false, SelectedCultureCode);
                    PortalController.UpdatePortalSetting(_portalId, "DefaultIconLocation", "icons/" + iconSetCombo.SelectedValue, false, SelectedCultureCode);
                    PortalController.UpdatePortalSetting(_portalId, "EnablePopUps", enablePopUpsCheckBox.Checked.ToString(), false);
                    PortalController.UpdatePortalSetting(_portalId, "InlineEditorEnabled", chkInlineEditor.Checked.ToString(), false);
                    PortalController.UpdatePortalSetting(_portalId, "HideFoldersEnabled", chkHideSystemFolders.Checked.ToString(), false);
                    PortalController.UpdatePortalSetting(_portalId, "ControlPanelMode", optControlPanelMode.SelectedItem.Value, false);
                    PortalController.UpdatePortalSetting(_portalId, "ControlPanelVisibility", optControlPanelVisibility.SelectedItem.Value, false);
                    PortalController.UpdatePortalSetting(_portalId, "ControlPanelSecurity", optControlPanelSecurity.SelectedItem.Value, false);

                    PortalController.UpdatePortalSetting(_portalId, "MessagingThrottlingInterval", cboMsgThrottlingInterval.SelectedItem.Value, false);
                    PortalController.UpdatePortalSetting(_portalId, "MessagingRecipientLimit", cboMsgRecipientLimit.SelectedItem.Value, false);
                    PortalController.UpdatePortalSetting(_portalId, "MessagingAllowAttachments", optMsgAllowAttachments.SelectedItem.Value, false);
                    PortalController.UpdatePortalSetting(_portalId, "MessagingIncludeAttachments", this.optMsgIncludeAttachments.SelectedItem.Value, false);
                    
                    PortalController.UpdatePortalSetting(_portalId, "MessagingProfanityFilters", optMsgProfanityFilters.SelectedItem.Value, false);
					PortalController.UpdatePortalSetting(_portalId, "MessagingSendEmail", optMsgSendEmail.SelectedItem.Value, false);
					PortalController.UpdatePortalSetting(_portalId, "DisablePrivateMessage", chkDisablePrivateMessage.Checked ? "Y" : "N", false);

                    PortalController.UpdatePortalSetting(_portalId, "paypalsandbox", chkPayPalSandboxEnabled.Checked.ToString(), false);
                    PortalController.UpdatePortalSetting(_portalId, "paypalsubscriptionreturn", txtPayPalReturnURL.Text, false);
                    PortalController.UpdatePortalSetting(_portalId, "paypalsubscriptioncancelreturn", txtPayPalCancelURL.Text, false);
                    PortalController.UpdatePortalSetting(_portalId, "TimeZone", cboTimeZone.SelectedValue, false);

					PortalController.UpdatePortalSetting(_portalId, "HideLoginControl", chkHideLoginControl.Checked.ToString(), false);
					PortalController.UpdatePortalSetting(_portalId, "EnableRegisterNotification", chkEnableRegisterNotification.Checked.ToString(), false);

                    PortalController.UpdatePortalSetting(_portalId, "SMTPmode", rblSMTPmode.SelectedValue);
                    PortalController.UpdatePortalSetting(_portalId, "SMTPServer", txtSMTPServer.Text);
                    PortalController.UpdatePortalSetting(_portalId, "SMTPConnectionLimit", txtConnectionLimit.Text);
                    PortalController.UpdatePortalSetting(_portalId, "SMTPMaxIdleTime", txtMaxIdleTime.Text);
                    PortalController.UpdatePortalSetting(_portalId, "SMTPAuthentication", optSMTPAuthentication.SelectedValue);
                    PortalController.UpdatePortalSetting(_portalId, "SMTPUsername", txtSMTPUsername.Text);
                    PortalController.UpdateEncryptedString(_portalId, "SMTPPassword", txtSMTPPassword.Text, Config.GetDecryptionkey());
                    PortalController.UpdatePortalSetting(_portalId, "SMTPEnableSSL", chkSMTPEnableSSL.Checked ? "Y" : "N");

                    SiteSettingAdvancedSettingExtensionControl.SaveAction(_portalId, TabId, ModuleId);
                    SiteSettingsTabExtensionControl.SaveAction(_portalId, TabId, ModuleId);

                    if (Config.GetFriendlyUrlProvider() == "advanced")
                    {
						PortalController.UpdatePortalSetting(_portalId, DotNetNuke.Entities.Urls.FriendlyUrlSettings.RedirectOldProfileUrlSetting, redirectOldProfileUrls.Checked ? "Y" : "N", false);
                    }

                    new FavIcon(_portalId).Update(ctlFavIcon.FileID);

                    if (IsSuperUser())
                    {
                        PortalController.UpdatePortalSetting(_portalId, "PortalAliasMapping", portalAliasModeButtonList.SelectedValue, false);
                        HostController.Instance.Update("AutoAddPortalAlias", chkAutoAddPortalAlias.Checked ? "Y" : "N", true);

                        PortalController.UpdatePortalSetting(_portalId, "SSLEnabled", chkSSLEnabled.Checked.ToString(), false);
                        PortalController.UpdatePortalSetting(_portalId, "SSLEnforced", chkSSLEnforced.Checked.ToString(), false);
                        PortalController.UpdatePortalSetting(_portalId, "SSLURL", AddPortalAlias(txtSSLURL.Text, _portalId), false);
                        PortalController.UpdatePortalSetting(_portalId, "STDURL", AddPortalAlias(txtSTDURL.Text, _portalId), false);
                    }

                    if(registrationFormType.SelectedValue == "1")
                    {
                        var setting = registrationFields.Text;
                        if (!setting.Contains("Email"))
                        {
                            Skin.AddModuleMessage(this, Localization.GetString("NoEmail", LocalResourceFile), ModuleMessage.ModuleMessageType.RedError);
                            return;
                        }

                        if (!setting.Contains("DisplayName") && chkRegistrationRequireUniqueDisplayName.Checked)
                        {
                            PortalController.UpdatePortalSetting(_portalId, "Registration_RegistrationFormType", "0", false);
                            Skin.AddModuleMessage(this, Localization.GetString("NoDisplayName", LocalResourceFile), ModuleMessage.ModuleMessageType.RedError);
                            return;
                        }

                        PortalController.UpdatePortalSetting(_portalId, "Registration_RegistrationFields", setting);
                    }

                    PortalController.UpdatePortalSetting(_portalId, "Registration_RegistrationFormType", registrationFormType.SelectedValue, false);

                    foreach (DnnFormItemBase item in basicRegistrationSettings.Items)
                    {
                        PortalController.UpdatePortalSetting(_portalId, item.DataField, item.Value.ToString());
                    }
                    PortalController.UpdatePortalSetting(_portalId, "Registration_UseProfanityFilter", chkRegistrationUseProfanityFilter.Checked.ToString(), false);
                    PortalController.UpdatePortalSetting(_portalId, "Registration_UseAuthProviders", chkRegistrationUseAuthProviders.Checked.ToString(), false);


                    if (chkRegistrationUseEmailAsUserName.Checked && UserController.GetDuplicateEmailCount() > 0)
                    {
                        string message = Localization.GetString("ContainsDuplicateAddresses", LocalResourceFile);
                        DotNetNuke.UI.Skins.Skin.AddModuleMessage(this, message, ModuleMessage.ModuleMessageType.RedError);
                        return;
                    }
                    else
                    {
                        PortalController.UpdatePortalSetting(_portalId, "Registration_UseEmailAsUserName", chkRegistrationUseEmailAsUserName.Checked.ToString(), false);
                    }
                            
                    // can't actualy use this as web.config settings are system wide.

                    //if (MembershipProvider.Instance().RequiresUniqueEmail == false)
                    //{
                    //    string message = Localization.GetString("MustEnableUniqueEmail", LocalResourceFile);
                    //    DotNetNuke.UI.Skins.Skin.AddModuleMessage(this, message, ModuleMessage.ModuleMessageType.RedError);
                    //    return;
                    //}

                    
                    PortalController.UpdatePortalSetting(_portalId, "Registration_RequireUniqueDisplayName", chkRegistrationRequireUniqueDisplayName.Checked.ToString(), false);
                    
                    foreach (DnnFormItemBase item in validationRegistrationSettings.Items)
                    {
                        try
                        {
                            var regex = RegexUtils.GetCachedRegex(item.Value.ToString());
                            PortalController.UpdatePortalSetting(_portalId, item.DataField, item.Value.ToString());
                        }
                        catch
                        {

                            string message = String.Format(Localization.GetString("InvalidRegularExpression", LocalResourceFile),
                                                           Localization.GetString(item.DataField, LocalResourceFile), item.Value);
                            DotNetNuke.UI.Skins.Skin.AddModuleMessage(this, message, ModuleMessage.ModuleMessageType.RedError);
                            return;
                        }
                    }

                    PortalController.UpdatePortalSetting(_portalId, "Registration_RandomPassword", chkRegistrationRandomPassword.Checked.ToString(), false);
                    PortalController.UpdatePortalSetting(_portalId, "Registration_RequireConfirmPassword", chkRegistrationRequireConfirmPassword.Checked.ToString(), true);

                    PortalController.UpdatePortalSetting(_portalId, "Security_RequireValidProfile", chkSecurityRequireValidProfile.Checked.ToString(), false);
                    PortalController.UpdatePortalSetting(_portalId, "Security_CaptchaRegister", chkSecurityCaptchaRegister.Checked.ToString(), false);

                    var redirectTabId = !String.IsNullOrEmpty(RedirectAfterRegistration.SelectedItem.Value) ?
                                        RedirectAfterRegistration.SelectedItem.Value
                                        : "-1";
                    PortalController.UpdatePortalSetting(_portalId, "Redirect_AfterRegistration", redirectTabId, SelectedCultureCode);

                    PortalController.UpdatePortalSetting(_portalId, "Security_CaptchaLogin", chkSecurityCaptchaLogin.Checked.ToString(), false);
                    PortalController.UpdatePortalSetting(_portalId, "Security_RequireValidProfileAtLogin", chkSecurityRequireValidProfileAtLogin.Checked.ToString(), true);
                    PortalController.UpdatePortalSetting(_portalId, "Security_CaptchaRetrivePassword", chkSecurityCaptchaRetrivePassword.Checked.ToString(), false);
                    PortalController.UpdatePortalSetting(_portalId, "Security_CaptchaChangePassword", chkSecurityCaptchaChangePassword.Checked.ToString(), false);

                    redirectTabId = !String.IsNullOrEmpty(RedirectAfterLogin.SelectedItem.Value) ?
                                        RedirectAfterLogin.SelectedItem.Value
                                        : "-1";
                    PortalController.UpdatePortalSetting(_portalId, "Redirect_AfterLogin", redirectTabId, SelectedCultureCode);
                    redirectTabId = !String.IsNullOrEmpty(RedirectAfterLogout.SelectedItem.Value) ?
                                        RedirectAfterLogout.SelectedItem.Value
                                        : "-1";
                    PortalController.UpdatePortalSetting(_portalId, "Redirect_AfterLogout", redirectTabId, SelectedCultureCode);

                    var defaultAuthProvider = !String.IsNullOrEmpty(authProviderCombo.SelectedItem.Value) ?
                                        authProviderCombo.SelectedItem.Value
                                        : "DNN";
                    PortalController.UpdatePortalSetting(_portalId, "DefaultAuthProvider", defaultAuthProvider);

                    PortalController.UpdatePortalSetting(_portalId, DotNetNuke.Entities.Urls.FriendlyUrlSettings.VanityUrlPrefixSetting, vanilyUrlPrefixTextBox.Text, false);
                    foreach (DnnFormItemBase item in profileSettings.Items)
                    {
                        PortalController.UpdatePortalSetting(_portalId, item.DataField,
                                                                item.Value.GetType().IsEnum
                                                                    ? Convert.ToInt32(item.Value).ToString(CultureInfo.InvariantCulture)
                                                                    : item.Value.ToString()
                                                                );
                    }
                    PortalController.UpdatePortalSetting(_portalId, "Profile_DisplayVisibility", chkProfileDisplayVisibility.Checked.ToString(), true);

                    PortalController.UpdatePortalSetting(_portalId, "PageHeadText", string.IsNullOrEmpty(txtPageHeadText.Text) ? "false" : txtPageHeadText.Text); // Hack to store empty string portalsetting with non empty default value
                    PortalController.UpdatePortalSetting(_portalId, "InjectModuleHyperLink", chkInjectModuleHyperLink.Checked.ToString());
                    PortalController.UpdatePortalSetting(_portalId, "AddCompatibleHttpHeader", string.IsNullOrEmpty(txtAddCompatibleHttpHeader.Text) ? "false" : txtAddCompatibleHttpHeader.Text); // Hack to store empty string portalsetting with non empty default value
                    PortalController.UpdatePortalSetting(_portalId, "AddCachebusterToResourceUris", chkAddCachebusterToResourceUris.Checked.ToString());


                    profileDefinitions.Update();

                    DataCache.ClearPortalCache(PortalId, false);

                    

                    //Redirect to this site to refresh only if admin skin changed or either of the images have changed
                    if (refreshPage)
                    {
                        Response.Redirect(Request.RawUrl, true);
                    }
                    else if (!Response.IsRequestBeingRedirected)
	                {
						//Because portal info changed, we need update current portal setting to load the correct value.
						HttpContext.Current.Items["PortalSettings"] = new PortalSettings(TabId, PortalSettings.PortalAlias);
						PortalSettingsController.Instance().ConfigureActiveTab(PortalSettings);

		                BindPortal(_portalId, SelectedCultureCode);
	                }
                }
                catch (ThreadAbortException)
                {
                    //Do nothing Response.redirect
                }
                catch (Exception exc)
                {
                    Exceptions.ProcessModuleLoadException(this, exc);
                }
                finally
                {
                    DataCache.ClearPortalCache(_portalId, false);
                }
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_portalId">
          <declaration><![CDATA[private int _portalId = -1;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="advancedSettingsLink">
          <declaration><![CDATA[protected Label advancedSettingsLink;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="authProviderCombo">
          <declaration><![CDATA[protected DnnComboBox authProviderCombo;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="autoAddAlias">
          <declaration><![CDATA[protected HtmlGenericControl autoAddAlias;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="basicRegistrationSettings">
          <declaration><![CDATA[protected DnnFormEditor basicRegistrationSettings;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="basicSettingsLink">
          <declaration><![CDATA[protected Label basicSettingsLink;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cancelHyperLink">
          <declaration><![CDATA[protected HyperLink cancelHyperLink;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cbo404TabId">
          <declaration><![CDATA[protected DnnPageDropDownList cbo404TabId;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cbo500TabId">
          <declaration><![CDATA[protected DnnPageDropDownList cbo500TabId;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cboAdministratorId">
          <declaration><![CDATA[protected DnnComboBox cboAdministratorId;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cboHomeTabId">
          <declaration><![CDATA[protected DnnPageDropDownList cboHomeTabId;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cboLoginTabId">
          <declaration><![CDATA[protected DnnComboBox cboLoginTabId;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cboMsgRecipientLimit">
          <declaration><![CDATA[protected DnnComboBox cboMsgRecipientLimit;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cboMsgThrottlingInterval">
          <declaration><![CDATA[protected DnnComboBox cboMsgThrottlingInterval;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cboRegisterTabId">
          <declaration><![CDATA[protected DnnPageDropDownList cboRegisterTabId;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cboSearchEngine">
          <declaration><![CDATA[protected DnnComboBox cboSearchEngine;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cboSearchTabId">
          <declaration><![CDATA[protected DnnComboBox cboSearchTabId;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cboSplashTabId">
          <declaration><![CDATA[protected DnnPageDropDownList cboSplashTabId;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cboTimeZone">
          <declaration><![CDATA[protected DnnTimeZoneComboBox cboTimeZone;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cboUserTabId">
          <declaration><![CDATA[protected DnnPageDropDownList cboUserTabId;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkAddCachebusterToResourceUris">
          <declaration><![CDATA[protected CheckBox chkAddCachebusterToResourceUris;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkAutoAddPortalAlias">
          <declaration><![CDATA[protected CheckBox chkAutoAddPortalAlias;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkDisablePrivateMessage">
          <declaration><![CDATA[protected CheckBox chkDisablePrivateMessage;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkEnableCompositeFiles">
          <declaration><![CDATA[protected CheckBox chkEnableCompositeFiles;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkEnableRegisterNotification">
          <declaration><![CDATA[protected CheckBox chkEnableRegisterNotification;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkHideLoginControl">
          <declaration><![CDATA[protected CheckBox chkHideLoginControl;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkHideSystemFolders">
          <declaration><![CDATA[protected CheckBox chkHideSystemFolders;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkInjectModuleHyperLink">
          <declaration><![CDATA[protected CheckBox chkInjectModuleHyperLink;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkInlineEditor">
          <declaration><![CDATA[protected CheckBox chkInlineEditor;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkMinifyCss">
          <declaration><![CDATA[protected CheckBox chkMinifyCss;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkMinifyJs">
          <declaration><![CDATA[protected CheckBox chkMinifyJs;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkOverrideDefaultSettings">
          <declaration><![CDATA[protected CheckBox chkOverrideDefaultSettings;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkPayPalSandboxEnabled">
          <declaration><![CDATA[protected CheckBox chkPayPalSandboxEnabled;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkProfileDisplayVisibility">
          <declaration><![CDATA[protected CheckBox chkProfileDisplayVisibility;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkRegistrationRandomPassword">
          <declaration><![CDATA[protected CheckBox chkRegistrationRandomPassword;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkRegistrationRequireConfirmPassword">
          <declaration><![CDATA[protected CheckBox chkRegistrationRequireConfirmPassword;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkRegistrationRequireUniqueDisplayName">
          <declaration><![CDATA[protected CheckBox chkRegistrationRequireUniqueDisplayName;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkRegistrationUseAuthProviders">
          <declaration><![CDATA[protected CheckBox chkRegistrationUseAuthProviders;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkRegistrationUseEmailAsUserName">
          <declaration><![CDATA[protected CheckBox chkRegistrationUseEmailAsUserName;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkRegistrationUseProfanityFilter">
          <declaration><![CDATA[protected CheckBox chkRegistrationUseProfanityFilter;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkSecurityCaptchaChangePassword">
          <declaration><![CDATA[protected CheckBox chkSecurityCaptchaChangePassword;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkSecurityCaptchaLogin">
          <declaration><![CDATA[protected CheckBox chkSecurityCaptchaLogin;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkSecurityCaptchaRegister">
          <declaration><![CDATA[protected CheckBox chkSecurityCaptchaRegister;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkSecurityCaptchaRetrivePassword">
          <declaration><![CDATA[protected CheckBox chkSecurityCaptchaRetrivePassword;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkSecurityRequireValidProfile">
          <declaration><![CDATA[protected CheckBox chkSecurityRequireValidProfile;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkSecurityRequireValidProfileAtLogin">
          <declaration><![CDATA[protected CheckBox chkSecurityRequireValidProfileAtLogin;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkSMTPEnableSSL">
          <declaration><![CDATA[protected CheckBox chkSMTPEnableSSL;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkSSLEnabled">
          <declaration><![CDATA[protected CheckBox chkSSLEnabled;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkSSLEnforced">
          <declaration><![CDATA[protected CheckBox chkSSLEnforced;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdDelete">
          <declaration><![CDATA[protected LinkButton cmdDelete;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdEmail">
          <declaration><![CDATA[protected LinkButton cmdEmail;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdRestore">
          <declaration><![CDATA[protected LinkButton cmdRestore;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdSave">
          <declaration><![CDATA[protected LinkButton cmdSave;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdUpdate">
          <declaration><![CDATA[protected LinkButton cmdUpdate;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdVerification">
          <declaration><![CDATA[protected LinkButton cmdVerification;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="CrmHostSettingsSummary">
          <declaration><![CDATA[protected Literal CrmHostSettingsSummary;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="CrmVersionLabel">
          <declaration><![CDATA[protected Label CrmVersionLabel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="CrmVersionRow">
          <declaration><![CDATA[protected HtmlGenericControl CrmVersionRow;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ctlAudit">
          <declaration><![CDATA[protected ModuleAuditControl ctlAudit;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ctlBackground">
          <declaration><![CDATA[protected DnnFilePickerUploader ctlBackground;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ctlDesktopModules">
          <declaration><![CDATA[protected DnnComboBox ctlDesktopModules;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ctlFavIcon">
          <declaration><![CDATA[protected DnnFilePickerUploader ctlFavIcon;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ctlLogo">
          <declaration><![CDATA[protected DnnFilePickerUploader ctlLogo;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="currencyCombo">
          <declaration><![CDATA[protected DnnComboBox currencyCombo;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="datepickerExpiryDate">
          <declaration><![CDATA[protected DnnDatePicker datepickerExpiryDate;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="DebugEnabledRow">
          <declaration><![CDATA[protected HtmlGenericControl DebugEnabledRow;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="DefaultAuthProviderLabel">
          <declaration><![CDATA[protected LabelControl DefaultAuthProviderLabel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="DnnCssInclude1">
          <declaration><![CDATA[protected DnnCssInclude DnnCssInclude1;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="DnnFormTextBoxItem1">
          <declaration><![CDATA[protected DnnFormTextBoxItem DnnFormTextBoxItem1;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="DnnFormTextBoxItem2">
          <declaration><![CDATA[protected DnnFormTextBoxItem DnnFormTextBoxItem2;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="DnnFormTextBoxItem3">
          <declaration><![CDATA[protected DnnFormTextBoxItem DnnFormTextBoxItem3;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="DnnFormTextBoxItem4">
          <declaration><![CDATA[protected DnnFormTextBoxItem DnnFormTextBoxItem4;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="DnnJsInclude1">
          <declaration><![CDATA[protected DnnJsInclude DnnJsInclude1;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="editContainerCombo">
          <declaration><![CDATA[protected DnnSkinComboBox editContainerCombo;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="editSkinCombo">
          <declaration><![CDATA[protected DnnSkinComboBox editSkinCombo;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="EnableCompositeFilesRow">
          <declaration><![CDATA[protected HtmlGenericControl EnableCompositeFilesRow;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="enablePopUpsCheckBox">
          <declaration><![CDATA[protected CheckBox enablePopUpsCheckBox;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="enablePopUpsLabel">
          <declaration><![CDATA[protected LabelControl enablePopUpsLabel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="hostSections">
          <declaration><![CDATA[protected HtmlGenericControl hostSections;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="iconSetCombo">
          <declaration><![CDATA[protected DropDownList iconSetCombo;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="IncrementCrmVersionButton">
          <declaration><![CDATA[protected LinkButton IncrementCrmVersionButton;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblBanners">
          <declaration><![CDATA[protected Label lblBanners;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblGUID">
          <declaration><![CDATA[protected Label lblGUID;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblHomeDirectory">
          <declaration><![CDATA[protected Label lblHomeDirectory;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="manageAliasesLabel">
          <declaration><![CDATA[protected LabelControl manageAliasesLabel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="MaxInvalidPasswordAttemptsLabel">
          <declaration><![CDATA[protected Label MaxInvalidPasswordAttemptsLabel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="MaxInvalidPasswordAttemptsRow">
          <declaration><![CDATA[protected HtmlGenericControl MaxInvalidPasswordAttemptsRow;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="MaxInvalidPasswordAttemptsTitle">
          <declaration><![CDATA[protected LabelControl MaxInvalidPasswordAttemptsTitle;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="MinifyCssRow">
          <declaration><![CDATA[protected HtmlGenericControl MinifyCssRow;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="MinifyJsRow">
          <declaration><![CDATA[protected HtmlGenericControl MinifyJsRow;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="MinNonAlphanumericCharactersLabel">
          <declaration><![CDATA[protected Label MinNonAlphanumericCharactersLabel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="MinNonAlphanumericCharactersRow">
          <declaration><![CDATA[protected HtmlGenericControl MinNonAlphanumericCharactersRow;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="MinNonAlphanumericCharactersTitle">
          <declaration><![CDATA[protected LabelControl MinNonAlphanumericCharactersTitle;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="MinPasswordLengthLabel">
          <declaration><![CDATA[protected Label MinPasswordLengthLabel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="MinPasswordLengthRow">
          <declaration><![CDATA[protected HtmlGenericControl MinPasswordLengthRow;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="MinPasswordLengthTitle">
          <declaration><![CDATA[protected LabelControl MinPasswordLengthTitle;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="optBanners">
          <declaration><![CDATA[protected RadioButtonList optBanners;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="optControlPanelMode">
          <declaration><![CDATA[protected RadioButtonList optControlPanelMode;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="optControlPanelSecurity">
          <declaration><![CDATA[protected RadioButtonList optControlPanelSecurity;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="optControlPanelVisibility">
          <declaration><![CDATA[protected RadioButtonList optControlPanelVisibility;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="optMsgAllowAttachments">
          <declaration><![CDATA[protected RadioButtonList optMsgAllowAttachments;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="optMsgIncludeAttachments">
          <declaration><![CDATA[protected RadioButtonList optMsgIncludeAttachments;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="optMsgProfanityFilters">
          <declaration><![CDATA[protected RadioButtonList optMsgProfanityFilters;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="optMsgSendEmail">
          <declaration><![CDATA[protected RadioButtonList optMsgSendEmail;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="optSMTPAuthentication">
          <declaration><![CDATA[protected RadioButtonList optSMTPAuthentication;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="optUserRegistration">
          <declaration><![CDATA[protected RadioButtonList optUserRegistration;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="PasswordAttemptWindowLabel">
          <declaration><![CDATA[protected Label PasswordAttemptWindowLabel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="PasswordAttemptWindowRow">
          <declaration><![CDATA[protected HtmlGenericControl PasswordAttemptWindowRow;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="PasswordAttemptWindowTitle">
          <declaration><![CDATA[protected LabelControl PasswordAttemptWindowTitle;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="PasswordFormatLabel">
          <declaration><![CDATA[protected Label PasswordFormatLabel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="PasswordFormatRow">
          <declaration><![CDATA[protected HtmlGenericControl PasswordFormatRow;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="PasswordFormatTitle">
          <declaration><![CDATA[protected LabelControl PasswordFormatTitle;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="PasswordResetEnabledLabel">
          <declaration><![CDATA[protected Label PasswordResetEnabledLabel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="PasswordResetEnabledRow">
          <declaration><![CDATA[protected HtmlGenericControl PasswordResetEnabledRow;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="PasswordResetEnabledTitle">
          <declaration><![CDATA[protected LabelControl PasswordResetEnabledTitle;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="PasswordRetrievalEnabledLabel">
          <declaration><![CDATA[protected Label PasswordRetrievalEnabledLabel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="PasswordRetrievalEnabledRow">
          <declaration><![CDATA[protected HtmlGenericControl PasswordRetrievalEnabledRow;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="PasswordRetrievalEnabledTitle">
          <declaration><![CDATA[protected LabelControl PasswordRetrievalEnabledTitle;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="PasswordStrengthRegularExpressionLabel">
          <declaration><![CDATA[protected Label PasswordStrengthRegularExpressionLabel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="PasswordStrengthRegularExpressionRow">
          <declaration><![CDATA[protected HtmlGenericControl PasswordStrengthRegularExpressionRow;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="PasswordStrengthRegularExpressionTitle">
          <declaration><![CDATA[protected LabelControl PasswordStrengthRegularExpressionTitle;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="pl404TabId">
          <declaration><![CDATA[protected LabelControl pl404TabId;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="pl500TabId">
          <declaration><![CDATA[protected LabelControl pl500TabId;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plAddCachebusterToResourceUris">
          <declaration><![CDATA[protected LabelControl plAddCachebusterToResourceUris;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plAddCompatibleHttpHeader">
          <declaration><![CDATA[protected LabelControl plAddCompatibleHttpHeader;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plAdminContainer">
          <declaration><![CDATA[protected LabelControl plAdminContainer;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plAdministrator">
          <declaration><![CDATA[protected LabelControl plAdministrator;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plAdminSkin">
          <declaration><![CDATA[protected LabelControl plAdminSkin;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plAutoAddPortalAlias">
          <declaration><![CDATA[protected LabelControl plAutoAddPortalAlias;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plBackground">
          <declaration><![CDATA[protected LabelControl plBackground;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plBanners">
          <declaration><![CDATA[protected LabelControl plBanners;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plConnectionLimit">
          <declaration><![CDATA[protected LabelControl plConnectionLimit;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plControlPanelMode">
          <declaration><![CDATA[protected LabelControl plControlPanelMode;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plControlPanelSecurity">
          <declaration><![CDATA[protected LabelControl plControlPanelSecurity;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plControlPanelVisibility">
          <declaration><![CDATA[protected LabelControl plControlPanelVisibility;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plCrmVersion">
          <declaration><![CDATA[protected LabelControl plCrmVersion;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plCurrency">
          <declaration><![CDATA[protected LabelControl plCurrency;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plDescription">
          <declaration><![CDATA[protected LabelControl plDescription;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plDesktopModules">
          <declaration><![CDATA[protected LabelControl plDesktopModules;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plDisablePrivateMessage">
          <declaration><![CDATA[protected LabelControl plDisablePrivateMessage;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plEnableCompositeFiles">
          <declaration><![CDATA[protected LabelControl plEnableCompositeFiles;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plEnableRegisterNotification">
          <declaration><![CDATA[protected LabelControl plEnableRegisterNotification;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plExpiryDate">
          <declaration><![CDATA[protected LabelControl plExpiryDate;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plFavIcon">
          <declaration><![CDATA[protected LabelControl plFavIcon;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plFooterText">
          <declaration><![CDATA[protected LabelControl plFooterText;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plGUID">
          <declaration><![CDATA[protected LabelControl plGUID;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plHideLoginControl">
          <declaration><![CDATA[protected LabelControl plHideLoginControl;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plHideSystemFolders">
          <declaration><![CDATA[protected LabelControl plHideSystemFolders;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plHomeDirectory">
          <declaration><![CDATA[protected LabelControl plHomeDirectory;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plHomeTabId">
          <declaration><![CDATA[protected LabelControl plHomeTabId;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plHostFee">
          <declaration><![CDATA[protected LabelControl plHostFee;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plHostSpace">
          <declaration><![CDATA[protected LabelControl plHostSpace;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plIconSet">
          <declaration><![CDATA[protected LabelControl plIconSet;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plIncludeAttachments">
          <declaration><![CDATA[protected LabelControl plIncludeAttachments;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plInjectModuleHyperLink">
          <declaration><![CDATA[protected LabelControl plInjectModuleHyperLink;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plInlineEditor">
          <declaration><![CDATA[protected LabelControl plInlineEditor;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plKeyWords">
          <declaration><![CDATA[protected LabelControl plKeyWords;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plLoginTabId">
          <declaration><![CDATA[protected LabelControl plLoginTabId;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plLogo">
          <declaration><![CDATA[protected LabelControl plLogo;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plMaxIdleTime">
          <declaration><![CDATA[protected LabelControl plMaxIdleTime;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plMinifyCss">
          <declaration><![CDATA[protected LabelControl plMinifyCss;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plMinifyJs">
          <declaration><![CDATA[protected LabelControl plMinifyJs;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plMsgAllowAttachments">
          <declaration><![CDATA[protected LabelControl plMsgAllowAttachments;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plMsgProfanityFilters">
          <declaration><![CDATA[protected LabelControl plMsgProfanityFilters;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plMsgRecipientLimit">
          <declaration><![CDATA[protected LabelControl plMsgRecipientLimit;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plMsgSendEmail">
          <declaration><![CDATA[protected LabelControl plMsgSendEmail;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plMsgThrottlingInterval">
          <declaration><![CDATA[protected LabelControl plMsgThrottlingInterval;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plOverrideDefaultSettings">
          <declaration><![CDATA[protected LabelControl plOverrideDefaultSettings;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plPageHeadText">
          <declaration><![CDATA[protected LabelControl plPageHeadText;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plPageQuota">
          <declaration><![CDATA[protected LabelControl plPageQuota;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plPassword">
          <declaration><![CDATA[protected LabelControl plPassword;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plPayPalSandboxEnabled">
          <declaration><![CDATA[protected LabelControl plPayPalSandboxEnabled;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plPayPaylCancelURL">
          <declaration><![CDATA[protected LabelControl plPayPaylCancelURL;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plPayPaylReturnURL">
          <declaration><![CDATA[protected LabelControl plPayPaylReturnURL;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plPortalContainer">
          <declaration><![CDATA[protected LabelControl plPortalContainer;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plPortalName">
          <declaration><![CDATA[protected LabelControl plPortalName;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plPortalSkin">
          <declaration><![CDATA[protected LabelControl plPortalSkin;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plProcessor">
          <declaration><![CDATA[protected LabelControl plProcessor;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plRegisterTabId">
          <declaration><![CDATA[protected LabelControl plRegisterTabId;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plSearchEngine">
          <declaration><![CDATA[protected LabelControl plSearchEngine;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plSearchTabId">
          <declaration><![CDATA[protected LabelControl plSearchTabId;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plSiteMap">
          <declaration><![CDATA[protected LabelControl plSiteMap;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plSMTPAuthentication">
          <declaration><![CDATA[protected LabelControl plSMTPAuthentication;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plSMTPEnableSSL">
          <declaration><![CDATA[protected LabelControl plSMTPEnableSSL;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plSMTPMode">
          <declaration><![CDATA[protected LabelControl plSMTPMode;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plSMTPPassword">
          <declaration><![CDATA[protected LabelControl plSMTPPassword;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plSMTPServer">
          <declaration><![CDATA[protected LabelControl plSMTPServer;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plSMTPUsername">
          <declaration><![CDATA[protected LabelControl plSMTPUsername;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plSplashTabId">
          <declaration><![CDATA[protected LabelControl plSplashTabId;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plSSLEnabled">
          <declaration><![CDATA[protected LabelControl plSSLEnabled;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plSSLEnforced">
          <declaration><![CDATA[protected LabelControl plSSLEnforced;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plSSLURL">
          <declaration><![CDATA[protected LabelControl plSSLURL;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plSTDURL">
          <declaration><![CDATA[protected LabelControl plSTDURL;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plTimeZone">
          <declaration><![CDATA[protected LabelControl plTimeZone;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plUserId">
          <declaration><![CDATA[protected LabelControl plUserId;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plUserQuota">
          <declaration><![CDATA[protected LabelControl plUserQuota;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plUserRegistration">
          <declaration><![CDATA[protected LabelControl plUserRegistration;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plUserTabId">
          <declaration><![CDATA[protected LabelControl plUserTabId;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plVerification">
          <declaration><![CDATA[protected LabelControl plVerification;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="portalAliasesExtensionPoint">
          <declaration><![CDATA[protected UserControlExtensionControl portalAliasesExtensionPoint;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="portalAliasModeButtonList">
          <declaration><![CDATA[protected RadioButtonList portalAliasModeButtonList;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="portalAliasModeButtonListLabel">
          <declaration><![CDATA[protected LabelControl portalAliasModeButtonListLabel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="portalContainerCombo">
          <declaration><![CDATA[protected DnnSkinComboBox portalContainerCombo;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="portalSkinCombo">
          <declaration><![CDATA[protected DnnSkinComboBox portalSkinCombo;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="processorCombo">
          <declaration><![CDATA[protected DnnComboBox processorCombo;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="processorLink">
          <declaration><![CDATA[protected HyperLink processorLink;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Profile_DisplayVisibility">
          <declaration><![CDATA[protected LabelControl Profile_DisplayVisibility;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="profileDefinitions">
          <declaration><![CDATA[protected ProfileDefinitions profileDefinitions;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="profileSettings">
          <declaration><![CDATA[protected DnnFormEditor profileSettings;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="rblSMTPmode">
          <declaration><![CDATA[protected RadioButtonList rblSMTPmode;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="RedirectAfterLogin">
          <declaration><![CDATA[protected DnnPageDropDownList RedirectAfterLogin;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="RedirectAfterLoginLabel">
          <declaration><![CDATA[protected LabelControl RedirectAfterLoginLabel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="RedirectAfterLogout">
          <declaration><![CDATA[protected DnnPageDropDownList RedirectAfterLogout;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="RedirectAfterLogoutLabel">
          <declaration><![CDATA[protected LabelControl RedirectAfterLogoutLabel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="RedirectAfterRegistration">
          <declaration><![CDATA[protected DnnPageDropDownList RedirectAfterRegistration;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="RedirectAfterRegistrationLabel">
          <declaration><![CDATA[protected LabelControl RedirectAfterRegistrationLabel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="redirectOldProfileUrls">
          <declaration><![CDATA[protected CheckBox redirectOldProfileUrls;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="redirectOldProfileUrlsLabel">
          <declaration><![CDATA[protected LabelControl redirectOldProfileUrlsLabel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Registration_RandomPassword">
          <declaration><![CDATA[protected LabelControl Registration_RandomPassword;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Registration_RequireConfirmPassword">
          <declaration><![CDATA[protected LabelControl Registration_RequireConfirmPassword;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Registration_RequireUniqueDisplayName">
          <declaration><![CDATA[protected LabelControl Registration_RequireUniqueDisplayName;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Registration_UseAuthProviders">
          <declaration><![CDATA[protected LabelControl Registration_UseAuthProviders;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Registration_UseEmailAsUserName">
          <declaration><![CDATA[protected LabelControl Registration_UseEmailAsUserName;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Registration_UseProfanityFilter">
          <declaration><![CDATA[protected LabelControl Registration_UseProfanityFilter;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="registrationFields">
          <declaration><![CDATA[protected TextBox registrationFields;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="registrationFieldsLabel">
          <declaration><![CDATA[protected LabelControl registrationFieldsLabel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="registrationFormType">
          <declaration><![CDATA[protected RadioButtonList registrationFormType;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="registrationFormTypeLabel">
          <declaration><![CDATA[protected LabelControl registrationFormTypeLabel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="RegularExpressionValidator2">
          <declaration><![CDATA[protected RegularExpressionValidator RegularExpressionValidator2;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="RequiresQuestionAndAnswerLabel">
          <declaration><![CDATA[protected Label RequiresQuestionAndAnswerLabel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="RequiresQuestionAndAnswerRow">
          <declaration><![CDATA[protected HtmlGenericControl RequiresQuestionAndAnswerRow;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="RequiresQuestionAndAnswerTitle">
          <declaration><![CDATA[protected LabelControl RequiresQuestionAndAnswerTitle;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="RequiresUniqueEmail">
          <declaration><![CDATA[protected LabelControl RequiresUniqueEmail;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="RequiresUniqueEmailLabel">
          <declaration><![CDATA[protected Label RequiresUniqueEmailLabel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="rexNumber1">
          <declaration><![CDATA[protected RangeValidator rexNumber1;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="rexNumber2">
          <declaration><![CDATA[protected RangeValidator rexNumber2;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Security_CaptchaChangePassword">
          <declaration><![CDATA[protected LabelControl Security_CaptchaChangePassword;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Security_CaptchaLogin">
          <declaration><![CDATA[protected LabelControl Security_CaptchaLogin;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Security_CaptchaRegister">
          <declaration><![CDATA[protected LabelControl Security_CaptchaRegister;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Security_CaptchaRetrivePassword">
          <declaration><![CDATA[protected LabelControl Security_CaptchaRetrivePassword;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Security_RequireValidProfile">
          <declaration><![CDATA[protected LabelControl Security_RequireValidProfile;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Security_RequireValidProfileAtLogin">
          <declaration><![CDATA[protected LabelControl Security_RequireValidProfileAtLogin;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="SiteSettingAdvancedSettingExtensionControl">
          <declaration><![CDATA[protected EditPagePanelExtensionControl SiteSettingAdvancedSettingExtensionControl;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="siteSettingsPanes">
          <declaration><![CDATA[protected PlaceHolder siteSettingsPanes;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="SiteSettingsTabExtensionControl">
          <declaration><![CDATA[protected EditPageTabExtensionControl SiteSettingsTabExtensionControl;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="siteSettingsTabs">
          <declaration><![CDATA[protected HtmlGenericControl siteSettingsTabs;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="SmtpSettings">
          <declaration><![CDATA[protected HtmlGenericControl SmtpSettings;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="stylesheetLink">
          <declaration><![CDATA[protected Label stylesheetLink;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtAddCompatibleHttpHeader">
          <declaration><![CDATA[protected TextBox txtAddCompatibleHttpHeader;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtConnectionLimit">
          <declaration><![CDATA[protected TextBox txtConnectionLimit;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtDescription">
          <declaration><![CDATA[protected TextBox txtDescription;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtFooterText">
          <declaration><![CDATA[protected TextBox txtFooterText;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtHostFee">
          <declaration><![CDATA[protected TextBox txtHostFee;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtHostSpace">
          <declaration><![CDATA[protected TextBox txtHostSpace;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtKeyWords">
          <declaration><![CDATA[protected TextBox txtKeyWords;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtMaxIdleTime">
          <declaration><![CDATA[protected TextBox txtMaxIdleTime;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtPageHeadText">
          <declaration><![CDATA[protected TextBox txtPageHeadText;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtPageQuota">
          <declaration><![CDATA[protected TextBox txtPageQuota;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtPassword">
          <declaration><![CDATA[protected TextBox txtPassword;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtPayPalCancelURL">
          <declaration><![CDATA[protected TextBox txtPayPalCancelURL;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtPayPalReturnURL">
          <declaration><![CDATA[protected TextBox txtPayPalReturnURL;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtPortalName">
          <declaration><![CDATA[protected TextBox txtPortalName;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtSiteMap">
          <declaration><![CDATA[protected TextBox txtSiteMap;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtSMTPPassword">
          <declaration><![CDATA[protected TextBox txtSMTPPassword;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtSMTPServer">
          <declaration><![CDATA[protected TextBox txtSMTPServer;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtSMTPUsername">
          <declaration><![CDATA[protected TextBox txtSMTPUsername;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtSSLURL">
          <declaration><![CDATA[protected TextBox txtSSLURL;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtSTDURL">
          <declaration><![CDATA[protected TextBox txtSTDURL;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtStyleSheet">
          <declaration><![CDATA[protected TextBox txtStyleSheet;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtUserId">
          <declaration><![CDATA[protected TextBox txtUserId;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtUserQuota">
          <declaration><![CDATA[protected TextBox txtUserQuota;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtVerification">
          <declaration><![CDATA[protected TextBox txtVerification;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="uploadSkinLink">
          <declaration><![CDATA[protected HyperLink uploadSkinLink;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="userSettingsLink">
          <declaration><![CDATA[protected Label userSettingsLink;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="userVisiblity">
          <declaration><![CDATA[protected DnnFormEnumItem userVisiblity;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="valHostFee">
          <declaration><![CDATA[protected CompareValidator valHostFee;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="validationRegistrationSettings">
          <declaration><![CDATA[protected DnnFormEditor validationRegistrationSettings;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="valPortalName">
          <declaration><![CDATA[protected RequiredFieldValidator valPortalName;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="vanilyUrlPrefixLabel">
          <declaration><![CDATA[protected LabelControl vanilyUrlPrefixLabel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="vanilyUrlPrefixTextBox">
          <declaration><![CDATA[protected TextBox vanilyUrlPrefixTextBox;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="VanityUrlAlias">
          <declaration><![CDATA[protected Label VanityUrlAlias;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="VanityUrlExample">
          <declaration><![CDATA[protected Label VanityUrlExample;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="VanityUrlHeader">
          <declaration><![CDATA[protected Label VanityUrlHeader;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="VanityUrlPanel">
          <declaration><![CDATA[protected HtmlGenericControl VanityUrlPanel;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="CustomRegistrationFields">
          <declaration><![CDATA[protected string CustomRegistrationFields]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="106" sc="53" el="106" ec="57">DesktopModules\Admin\Portals\SiteSettings.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="106" sc="58" el="106" ec="62">DesktopModules\Admin\Portals\SiteSettings.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="SelectedCultureCode">
          <declaration><![CDATA[private string SelectedCultureCode]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="97" sc="13" el="99" ec="14">DesktopModules\Admin\Portals\SiteSettings.ascx.cs</location>
            <body hash="7e8ce1cb0721386487714e40f29f5e2a"><![CDATA[{
                return LocaleController.Instance.GetCurrentLocale(PortalId).Code;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="DesktopModules.Admin.Security">
    <class name="DNNProfile">
      <declaration><![CDATA[public class DNNProfile : ProfileUserControlBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DNNProfile()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="cmdUpdate_Click">
          <declaration><![CDATA[private void cmdUpdate_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="215" sc="9" el="253" ec="10">DesktopModules\Admin\Security\Profile.ascx.cs</location>
            <body hash="35ad10f13b7678ab64ca1ab531a88d00"><![CDATA[{
            if (IsUserOrAdmin == false && UserId == Null.NullInteger)
            {
                return;
            }

            if (IsValid)
            {
                if (User.UserID == PortalSettings.AdministratorId)
                {
                    //Clear the Portal Cache
                    DataCache.ClearPortalCache(UserPortalID, true);
                }

                //Update DisplayName to conform to Format
                UpdateDisplayName();

                //update the user details
                DataCache.ClearCache();

                if (PortalSettings.Registration.RequireUniqueDisplayName)
                {
                    var usersWithSameDisplayName = (List<UserInfo>)MembershipProvider.Instance().GetUsersBasicSearch(PortalId, 0, 2, "DisplayName", true, "DisplayName", User.DisplayName);
                    if (usersWithSameDisplayName.Any(user => user.UserID != User.UserID))
                    {
                        AddModuleMessage("DisplayNameNotUnique", ModuleMessage.ModuleMessageType.RedError, true);
                        return;
                    }
                }

                var properties = (ProfilePropertyDefinitionCollection)ProfileProperties.DataSource;

                //Update User's profile
                User = ProfileController.UpdateUserProfile(User, properties);

                OnProfileUpdated(EventArgs.Empty);
                OnProfileUpdateCompleted(EventArgs.Empty);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="DataBind">
          <declaration><![CDATA[public override void DataBind()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="144" sc="9" el="166" ec="10">DesktopModules\Admin\Security\Profile.ascx.cs</location>
            <body hash="eb9711574626e57b4f264b4430d64a90"><![CDATA[{
		
            //Before we bind the Profile to the editor we need to "update" the visible data
            var properties = new ProfilePropertyDefinitionCollection();
			var imageType = new ListController().GetListEntryInfo("DataType", "Image");
            foreach (ProfilePropertyDefinition profProperty in UserProfile.ProfileProperties)
            {
                if (IsAdmin && !IsProfile)
                {
                    profProperty.Visible = true;
                }

                if (!profProperty.Deleted && (Request.IsAuthenticated || profProperty.DataType != imageType.EntryID))
                {
                    properties.Add(profProperty);
                }
            }

            ProfileProperties.User = User;
            ProfileProperties.ShowVisibility = ShowVisibility;
            ProfileProperties.DataSource = properties;
            ProfileProperties.DataBind();
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="180" sc="9" el="192" ec="10">DesktopModules\Admin\Security\Profile.ascx.cs</location>
            <body hash="5ed7d4db31c8cff0422696b6f7bf6921"><![CDATA[{
            base.OnInit(e);
            ID = "Profile.ascx";

            //Get the base Page
            var basePage = Page as PageBase;
            if (basePage != null)
            {
				//Check if culture is RTL
                ProfileProperties.LabelMode = basePage.PageCulture.TextInfo.IsRightToLeft ? LabelMode.Right : LabelMode.Left;
            }
            ProfileProperties.LocalResourceFile = LocalResourceFile;
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="202" sc="9" el="205" ec="10">DesktopModules\Admin\Security\Profile.ascx.cs</location>
            <body hash="fc7b718e43625bb201a70614adb0ebb4"><![CDATA[{
            base.OnLoad(e);
            cmdUpdate.Click += cmdUpdate_Click;
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateDisplayName">
          <declaration><![CDATA[private void UpdateDisplayName()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="256" sc="9" el="261" ec="10">DesktopModules\Admin\Security\Profile.ascx.cs</location>
            <body hash="11979d15df2d88d0240177496a616ca8"><![CDATA[{
            if (!string.IsNullOrEmpty(PortalSettings.Registration.DisplayNameFormat))
            {
                User.UpdateDisplayName(PortalSettings.Registration.DisplayNameFormat);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="actionsRow">
          <declaration><![CDATA[protected HtmlGenericControl actionsRow;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdUpdate">
          <declaration><![CDATA[protected LinkButton cmdUpdate;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ProfileProperties">
          <declaration><![CDATA[protected ProfileEditorControl ProfileProperties;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="EditorMode">
          <declaration><![CDATA[public PropertyEditorMode EditorMode]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="77" sc="13" el="79" ec="14">DesktopModules\Admin\Security\Profile.ascx.cs</location>
            <body hash="761be2a684b13d3d16f8aa580946f316"><![CDATA[{
                return ProfileProperties.EditMode;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="81" sc="13" el="83" ec="14">DesktopModules\Admin\Security\Profile.ascx.cs</location>
            <body hash="02b413b70fff6f2eb130828eeb827031"><![CDATA[{
                ProfileProperties.EditMode = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="IsValid">
          <declaration><![CDATA[public bool IsValid]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="94" sc="13" el="96" ec="14">DesktopModules\Admin\Security\Profile.ascx.cs</location>
            <body hash="3c5ccaa62a9b86046bc6989ac0f8e987"><![CDATA[{
                return ProfileProperties.IsValid || IsAdmin;
            }]]></body>
          </codeblock>
        </property>
        <property name="ShowUpdate">
          <declaration><![CDATA[public bool ShowUpdate]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="107" sc="13" el="109" ec="14">DesktopModules\Admin\Security\Profile.ascx.cs</location>
            <body hash="34fb05653c52198c2daa314f4768a1ba"><![CDATA[{
                return actionsRow.Visible;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="111" sc="13" el="113" ec="14">DesktopModules\Admin\Security\Profile.ascx.cs</location>
            <body hash="a0512fc3e1223b76f4fe3c6ad017b843"><![CDATA[{
                actionsRow.Visible = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="ShowVisibility">
          <declaration><![CDATA[protected bool ShowVisibility]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="59" sc="13" el="62" ec="14">DesktopModules\Admin\Security\Profile.ascx.cs</location>
            <body hash="438e95a9ee9803aeb99047b4e7a9ac79"><![CDATA[{
                object setting = GetSetting(PortalId, "Profile_DisplayVisibility");
                return Convert.ToBoolean(setting) && IsUser;
            }]]></body>
          </codeblock>
        </property>
        <property name="UserProfile">
          <declaration><![CDATA[public UserProfile UserProfile]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="124" sc="13" el="131" ec="14">DesktopModules\Admin\Security\Profile.ascx.cs</location>
            <body hash="ecc5b5633a7f4e5c80eea5b662f4ed42"><![CDATA[{
                UserProfile _Profile = null;
                if (User != null)
                {
                    _Profile = User.Profile;
                }
                return _Profile;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="Roles">
      <declaration><![CDATA[public class Roles : PortalModuleBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private int _roleGroupId = -1;]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="61" sc="9" el="61" ec="39">DesktopModules\Admin\Security\Roles.ascx.cs</location>
            <body hash="37dfd7ff8cef44aff3f2d20aa866d807"><![CDATA[private int _roleGroupId = -1]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="BindData">
          <declaration><![CDATA[private void BindData()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="68" sc="9" el="87" ec="10">DesktopModules\Admin\Security\Roles.ascx.cs</location>
            <body hash="095a90c0fb5023f72ad9d75b4982e860"><![CDATA[{
            var roles = _roleGroupId < -1
                                ? RoleController.Instance.GetRoles(PortalId)
                                : RoleController.Instance.GetRoles(PortalId, r => r.RoleGroupID == _roleGroupId);
            grdRoles.DataSource = roles;

            if (_roleGroupId < 0)
            {
                lnkEditGroup.Visible = false;
                cmdDelete.Visible = false;
            }
            else
            {
                lnkEditGroup.Visible = true;
                lnkEditGroup.NavigateUrl = EditUrl("RoleGroupId", _roleGroupId.ToString(CultureInfo.InvariantCulture), "EditGroup");
                cmdDelete.Visible = roles.Count == 0;
            }
            
            grdRoles.DataBind();
        }]]></body>
          </codeblock>
        </method>
        <method name="BindGroups">
          <declaration><![CDATA[private void BindGroups()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="90" sc="9" el="123" ec="10">DesktopModules\Admin\Security\Roles.ascx.cs</location>
            <body hash="e3d4b90ba518834edf8e47ae348ae1be"><![CDATA[{
            ArrayList arrGroups = RoleController.GetRoleGroups(PortalId);

            if (arrGroups.Count > 0)
            {
                cboRoleGroups.Items.Clear();
                //cboRoleGroups.Items.Add(new ListItem(Localization.GetString("AllRoles"), "-2"));
                cboRoleGroups.AddItem(Localization.GetString("AllRoles"), "-2");

				var item = new DnnComboBoxItem(Localization.GetString("GlobalRoles"), "-1");
                if (_roleGroupId == -1)
                {
                    item.Selected = true;
                }
                cboRoleGroups.Items.Add(item);

                foreach (RoleGroupInfo roleGroup in arrGroups)
                {
					item = new DnnComboBoxItem(roleGroup.RoleGroupName, roleGroup.RoleGroupID.ToString(CultureInfo.InvariantCulture));
                    if (_roleGroupId == roleGroup.RoleGroupID)
                    {
                        item.Selected = true;
                    }
                    cboRoleGroups.Items.Add(item);
                }
                divGroups.Visible = true;
            }
            else
            {
                _roleGroupId = -2;
                divGroups.Visible = false;
            }
            BindData();
        }]]></body>
          </codeblock>
        </method>
        <method name="cmdAddRole_Click">
          <declaration><![CDATA[private void cmdAddRole_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="247" sc="9" el="249" ec="10">DesktopModules\Admin\Security\Roles.ascx.cs</location>
            <body hash="544718a3061077f5544caabbe9d4916a"><![CDATA[{
            Response.Redirect(EditUrl("RoleGroupID", Request.QueryString["RoleGroupID"]));
        }]]></body>
          </codeblock>
        </method>
        <method name="cmdAddRoleGroup_Click">
          <declaration><![CDATA[private void cmdAddRoleGroup_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="242" sc="9" el="244" ec="10">DesktopModules\Admin\Security\Roles.ascx.cs</location>
            <body hash="d6953ff3593fb882b54815973b4a19cb"><![CDATA[{
            Response.Redirect(EditUrl("EditGroup"));
        }]]></body>
          </codeblock>
        </method>
        <method name="FormatFrequency">
          <declaration><![CDATA[protected string FormatFrequency(string frequency)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="133" sc="9" el="139" ec="10">DesktopModules\Admin\Security\Roles.ascx.cs</location>
            <body hash="f6c07565f3fefffb8b0bc18bce97caa1"><![CDATA[{
            if (frequency == "N") return string.Empty;

            var ctlEntry = new ListController();
            ListEntryInfo entry = ctlEntry.GetListEntryInfo("Frequency", frequency);
            return entry != null ? entry.Text : frequency;
        }]]></body>
          </codeblock>
        </method>
        <method name="FormatPeriod">
          <declaration><![CDATA[public string FormatPeriod(int period)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="149" sc="9" el="163" ec="10">DesktopModules\Admin\Security\Roles.ascx.cs</location>
            <body hash="32ed63297e0b9e2584a0a39fd7b66e0f"><![CDATA[{
            var formatPeriod = Null.NullString;
            try
            {
                if (period != Null.NullInteger)
                {
                    formatPeriod = period.ToString(CultureInfo.InvariantCulture);
                }
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
            return formatPeriod;
        }]]></body>
          </codeblock>
        </method>
        <method name="FormatPrice">
          <declaration><![CDATA[public string FormatPrice(float price)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="169" sc="9" el="185" ec="10">DesktopModules\Admin\Security\Roles.ascx.cs</location>
            <body hash="a13fbe71baf6d83c677c2e3c67fadabc"><![CDATA[{
            var formatPrice = Null.NullString;
            try
            {
// ReSharper disable CompareOfFloatsByEqualityOperator
                if (price != Null.NullSingle)
// ReSharper restore CompareOfFloatsByEqualityOperator
                {
                    formatPrice = price.ToString("##0.00");
                }
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
            return formatPrice;
        }]]></body>
          </codeblock>
        </method>
        <method name="OnDeleteClick">
          <declaration><![CDATA[protected void OnDeleteClick(object sender, ImageClickEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="282" sc="9" el="290" ec="10">DesktopModules\Admin\Security\Roles.ascx.cs</location>
            <body hash="a4d05eaca02a81d7c776134dd29c4041"><![CDATA[{
            _roleGroupId = Int32.Parse(cboRoleGroups.SelectedValue);
            if (_roleGroupId > -1)
            {
                RoleController.DeleteRoleGroup(PortalId, _roleGroupId);
                _roleGroupId = -1;
            }
            BindGroups();
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="192" sc="9" el="239" ec="10">DesktopModules\Admin\Security\Roles.ascx.cs</location>
            <body hash="7f5b1c7449b77b59c57e1bfcb59cc380"><![CDATA[{
            base.OnInit(e);

            cmdAddRole.Click += cmdAddRole_Click;
            cmdAddRoleGroup.Click += cmdAddRoleGroup_Click;

			JavaScript.RequestRegistration(CommonJs.DnnPlugins);

            foreach (var column in grdRoles.Columns)
            {
                if (ReferenceEquals(column.GetType(), typeof (DnnGridImageCommandColumn)))
                {
					//Manage Delete Confirm JS
                    var imageColumn = (DnnGridImageCommandColumn)column;
                    imageColumn.Visible = ModulePermissionController.HasModulePermission(ModuleConfiguration.ModulePermissions, "EDIT");
                    if (imageColumn.CommandName == "Delete")
                    {
                        imageColumn.OnClickJs = Localization.GetString("DeleteItem");
                    }
					
                    //Manage Edit Column NavigateURLFormatString
                    if (imageColumn.CommandName == "Edit")
                    {
                        //so first create the format string with a dummy value and then
                        //replace the dummy value with the FormatString place holder
                        string formatString = EditUrl("RoleID", "KEYFIELD", "Edit");
                        formatString = formatString.Replace("KEYFIELD", "{0}");
                        imageColumn.NavigateURLFormatString = formatString;
                    }
					
                    //Manage Roles Column NavigateURLFormatString
                    if (imageColumn.CommandName == "UserRoles")
                    {
                        //so first create the format string with a dummy value and then
                        //replace the dummy value with the FormatString place holder
                        string formatString = EditUrl("RoleId", "KEYFIELD", "User Roles");
                        formatString = formatString.Replace("KEYFIELD", "{0}");
                        imageColumn.NavigateURLFormatString = formatString;
                    }
					
                    //Localize Image Column Text
                    if (!String.IsNullOrEmpty(imageColumn.CommandName))
                    {
                        imageColumn.Text = Localization.GetString(imageColumn.CommandName, LocalResourceFile);
                    }
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="252" sc="9" el="274" ec="10">DesktopModules\Admin\Security\Roles.ascx.cs</location>
            <body hash="80fb0eca76e1767bc9ee68418ae5d404"><![CDATA[{
            base.OnLoad(e);

            cboRoleGroups.SelectedIndexChanged += OnRoleGroupIndexChanged;
            cmdDelete.Click += OnDeleteClick;
            grdRoles.ItemDataBound += OnRolesGridItemDataBound;

            try
            {
                if (!Page.IsPostBack)
                {
                    if ((Request.QueryString["RoleGroupID"] != null))
                    {
                        _roleGroupId = Int32.Parse(Request.QueryString["RoleGroupID"]);
                    }
                    BindGroups();
                }
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnRoleGroupIndexChanged">
          <declaration><![CDATA[protected void OnRoleGroupIndexChanged(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="277" sc="9" el="279" ec="10">DesktopModules\Admin\Security\Roles.ascx.cs</location>
            <body hash="9c3f900cb555d745ef7e80b5ac857013"><![CDATA[{
			Response.Redirect(Globals.NavigateURL("", string.Format("RoleGroupID={0}", cboRoleGroups.SelectedValue)));
        }]]></body>
          </codeblock>
        </method>
        <method name="OnRolesGridItemDataBound">
          <declaration><![CDATA[protected void OnRolesGridItemDataBound(object sender, GridItemEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="293" sc="9" el="319" ec="10">DesktopModules\Admin\Security\Roles.ascx.cs</location>
            <body hash="5ee24fd69e2d111e571a8ed3eaa50d20"><![CDATA[{
            var item = e.Item;
            switch (item.ItemType)
            {
                case GridItemType.SelectedItem:
                case GridItemType.AlternatingItem:
                case GridItemType.Item:
                    {
                        var gridDataItem = (GridDataItem) item;

                        var editLink = gridDataItem["EditButton"].Controls[0] as HyperLink;
                        if (editLink != null)
                        {
                            var role = (RoleInfo) item.DataItem;
                            editLink.Visible = role.RoleName != PortalSettings.AdministratorRoleName || (PortalSecurity.IsInRole(PortalSettings.AdministratorRoleName));
                        }

                        var rolesLink = gridDataItem["RolesButton"].Controls[0] as HyperLink;
                        if (rolesLink != null)
                        {
                            var role = (RoleInfo) item.DataItem;
                            rolesLink.Visible = (role.Status == RoleStatus.Approved) && (role.RoleName != PortalSettings.AdministratorRoleName || (PortalSecurity.IsInRole(PortalSettings.AdministratorRoleName)));
                        }
                    }
                    break;
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_roleGroupId">
          <declaration><![CDATA[private int _roleGroupId = -1;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cboRoleGroups">
          <declaration><![CDATA[protected DnnComboBox cboRoleGroups;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdAddRole">
          <declaration><![CDATA[protected LinkButton cmdAddRole;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdAddRoleGroup">
          <declaration><![CDATA[protected LinkButton cmdAddRoleGroup;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdDelete">
          <declaration><![CDATA[protected DnnImageButton cmdDelete;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="divGroups">
          <declaration><![CDATA[protected HtmlGenericControl divGroups;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="grdRoles">
          <declaration><![CDATA[protected DnnGrid grdRoles;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="imgEditGroup">
          <declaration><![CDATA[protected DnnImage imgEditGroup;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lnkEditGroup">
          <declaration><![CDATA[protected HyperLink lnkEditGroup;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plRoleGroups">
          <declaration><![CDATA[protected LabelControl plRoleGroups;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="UserSettings">
      <declaration><![CDATA[public class UserSettings : ModuleSettingsBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public UserSettings()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="LoadSettings">
          <declaration><![CDATA[public override void LoadSettings()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="64" sc="9" el="71" ec="10">DesktopModules\Admin\Security\UserSettings.ascx.cs</location>
            <body hash="b87097e93f71158a17feff7d2e0ee3ee"><![CDATA[{
            displayMode.EnumType = "DotNetNuke.Entities.Modules.DisplayMode, DotNetNuke";
            usersControl.EnumType = "DotNetNuke.Entities.Modules.UsersControl, DotNetNuke";

            settingsEditor.DataSource = UserController.GetUserSettings(PortalId);
            settingsEditor.DataBind();

        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="51" sc="9" el="61" ec="10">DesktopModules\Admin\Security\UserSettings.ascx.cs</location>
            <body hash="6be68fa9f97aa6d63f59c929980e792e"><![CDATA[{
            base.OnLoad(e);

			if (PortalController.IsMemberOfPortalGroup(PortalId) && PortalController.GetEffectivePortalId(PortalId) != PortalId)
			{
				dnnUserSettings.Visible = false;
				CannotChangeSettingsMessage.Visible = true;
			}

            manageServiceItem.Visible = usersControl.Visible = !IsHostMenu;
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateSettings">
          <declaration><![CDATA[public override void UpdateSettings()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="74" sc="9" el="86" ec="10">DesktopModules\Admin\Security\UserSettings.ascx.cs</location>
            <body hash="14e992dce1c4813f9353842beb6d6bcc"><![CDATA[{
            foreach (DnnFormItemBase item in settingsEditor.Items)
            {
                PortalController.UpdatePortalSetting(PortalId, item.DataField,
                                                        item.Value.GetType().IsEnum
                                                            ? Convert.ToInt32(item.Value).ToString(CultureInfo.InvariantCulture)
                                                            : item.Value.ToString()
                                                        );
            }

            //Clear the UserSettings Cache
            DataCache.RemoveCache(UserController.SettingsKey(PortalId));
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="CannotChangeSettingsMessage">
          <declaration><![CDATA[protected Panel CannotChangeSettingsMessage;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="displayMode">
          <declaration><![CDATA[protected DnnFormEnumItem displayMode;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="dnnUserSettings">
          <declaration><![CDATA[protected HtmlGenericControl dnnUserSettings;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="manageServiceItem">
          <declaration><![CDATA[protected DnnFormToggleButtonItem manageServiceItem;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="settingsEditor">
          <declaration><![CDATA[protected DnnFormEditor settingsEditor;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="usersControl">
          <declaration><![CDATA[protected DnnFormEnumItem usersControl;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="DotNetNuke.Admin.Containers">
    <class name="ModuleActions">
      <declaration><![CDATA[public class ModuleActions : ActionBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private readonly List<int> validIDs = new List<int>();]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="50" sc="9" el="50" ec="63">admin\Menus\ModuleActions\ModuleActions.ascx.cs</location>
            <body hash="77c4fbab3290b688adf775edd9e39ba8"><![CDATA[private readonly List<int> validIDs = new List<int>()]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="actionButton_Click">
          <declaration><![CDATA[private void actionButton_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="104" sc="9" el="106" ec="10">admin\Menus\ModuleActions\ModuleActions.ascx.cs</location>
            <body hash="59fce813587be4b0ff254049e958d77e"><![CDATA[{
            ProcessAction(Request.Params["__EVENTARGUMENT"]);
        }]]></body>
          </codeblock>
        </method>
        <method name="LocalizeString">
          <declaration><![CDATA[protected string LocalizeString(string key)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="82" sc="9" el="84" ec="10">admin\Menus\ModuleActions\ModuleActions.ascx.cs</location>
            <body hash="cff9df9bab78d59970f02ecbe0a4241d"><![CDATA[{
            return Localization.GetString(key, Localization.GlobalResourceFile);
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="87" sc="9" el="101" ec="10">admin\Menus\ModuleActions\ModuleActions.ascx.cs</location>
            <body hash="ff7124fca3e9b26cb3b4406206abe284"><![CDATA[{
            base.OnInit(e);

            ID = "ModuleActions";

            actionButton.Click += actionButton_Click;

            JavaScript.RequestRegistration(CommonJs.DnnPlugins);

            ClientResourceManager.RegisterStyleSheet(Page, "~/admin/menus/ModuleActions/ModuleActions.css", FileOrder.Css.ModuleCss);
            ClientResourceManager.RegisterStyleSheet(Page, "https://maxcdn.bootstrapcdn.com/font-awesome/4.4.0/css/font-awesome.min.css", FileOrder.Css.ModuleCss);
            ClientResourceManager.RegisterScript(Page, "~/admin/menus/ModuleActions/ModuleActions.js");

            ServicesFramework.Instance.RequestAjaxAntiForgerySupport();
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="109" sc="9" el="194" ec="10">admin\Menus\ModuleActions\ModuleActions.ascx.cs</location>
            <body hash="b3ac4545d061ef4a39ac34c4a0096b01"><![CDATA[{
            base.OnLoad(e);

            AdminActionsJSON = "[]";
            CustomActionsJSON = "[]";
            Panes = "[]";
            try
            {
                SupportsQuickSettings = false;
                DisplayQuickSettings = false;

                var moduleDefinitionId = ModuleContext.Configuration.ModuleDefID;
                var quickSettingsControl = ModuleControlController.GetModuleControlByControlKey("QuickSettings", moduleDefinitionId);

                if (quickSettingsControl != null)
                {
                    SupportsQuickSettings = true;
                    var control  = ModuleControlFactory.LoadModuleControl(Page, ModuleContext.Configuration, "QuickSettings", quickSettingsControl.ControlSrc);
                    quickSettings.Controls.Add(control);

                    DisplayQuickSettings = ModuleContext.Configuration.ModuleSettings.GetValueOrDefault("QS_FirstLoad", true);
                    ModuleController.Instance.UpdateModuleSetting(ModuleContext.ModuleId, "QS_FirstLoad", "False");
                }

                if (ActionRoot.Visible)
                {
                    //Add Menu Items
                    foreach (ModuleAction rootAction in ActionRoot.Actions)
                    {
                        //Process Children
                        var actions = new List<ModuleAction>();
                        foreach (ModuleAction action in rootAction.Actions)
                        {
                            if (action.Visible)
                            {
                                if ((EditMode && Globals.IsAdminControl() == false) ||
                                    (action.Secure != SecurityAccessLevel.Anonymous && action.Secure != SecurityAccessLevel.View))
                                {
                                    if (!action.Icon.Contains("://")
                                            && !action.Icon.StartsWith("/")
                                            && !action.Icon.StartsWith("~/"))
                                    {
                                        action.Icon = "~/images/" + action.Icon;
                                    }
                                    if (action.Icon.StartsWith("~/"))
                                    {
                                        action.Icon = Globals.ResolveUrl(action.Icon);
                                    }

                                    actions.Add(action);

                                    if(String.IsNullOrEmpty(action.Url))
                                    {
                                        validIDs.Add(action.ID);
                                    }
                                }
                            }

                        }

                        var oSerializer = new JavaScriptSerializer();
                        if (rootAction.Title == Localization.GetString("ModuleGenericActions.Action", Localization.GlobalResourceFile))
                        {
                            AdminActionsJSON = oSerializer.Serialize(actions);
                        }
                        else
                        {
                            if (rootAction.Title == Localization.GetString("ModuleSpecificActions.Action", Localization.GlobalResourceFile))
                            {
                                CustomActionsJSON = oSerializer.Serialize(actions);
                            }
                            else
                            {
                                SupportsMove = (actions.Count > 0);
                                Panes = oSerializer.Serialize(PortalSettings.ActiveTab.Panes);
                            }
                        }
                    }
                    IsShared = PortalGroupController.Instance.IsModuleShared(ModuleContext.ModuleId, PortalController.Instance.GetPortal(PortalSettings.PortalId));
                }
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="Render">
          <declaration><![CDATA[protected override void Render(HtmlTextWriter writer)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="197" sc="9" el="204" ec="10">admin\Menus\ModuleActions\ModuleActions.ascx.cs</location>
            <body hash="0ee9b0bea056d562d82c66c092dd2d10"><![CDATA[{
            base.Render(writer);

            foreach(int id in validIDs)
            {
                Page.ClientScript.RegisterForEventValidation(actionButton.UniqueID, id.ToString());
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="actionButton">
          <declaration><![CDATA[protected LinkButton actionButton;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="quickSettings">
          <declaration><![CDATA[protected Panel quickSettings;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="validIDs">
          <declaration><![CDATA[private readonly List<int> validIDs = new List<int>();]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="AdminActionsJSON">
          <declaration><![CDATA[protected string AdminActionsJSON]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="52" sc="45" el="52" ec="49">admin\Menus\ModuleActions\ModuleActions.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="52" sc="50" el="52" ec="54">admin\Menus\ModuleActions\ModuleActions.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="AdminText">
          <declaration><![CDATA[protected string AdminText]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="CustomActionsJSON">
          <declaration><![CDATA[protected string CustomActionsJSON]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="59" sc="46" el="59" ec="50">admin\Menus\ModuleActions\ModuleActions.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="59" sc="51" el="59" ec="55">admin\Menus\ModuleActions\ModuleActions.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="CustomText">
          <declaration><![CDATA[protected string CustomText]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="DisplayQuickSettings">
          <declaration><![CDATA[protected bool DisplayQuickSettings]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="66" sc="47" el="66" ec="51">admin\Menus\ModuleActions\ModuleActions.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="66" sc="52" el="66" ec="56">admin\Menus\ModuleActions\ModuleActions.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="IsShared">
          <declaration><![CDATA[protected bool IsShared]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="79" sc="35" el="79" ec="39">admin\Menus\ModuleActions\ModuleActions.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="79" sc="40" el="79" ec="44">admin\Menus\ModuleActions\ModuleActions.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="MoveText">
          <declaration><![CDATA[protected string MoveText]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Panes">
          <declaration><![CDATA[protected string Panes]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="73" sc="34" el="73" ec="38">admin\Menus\ModuleActions\ModuleActions.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="73" sc="39" el="73" ec="43">admin\Menus\ModuleActions\ModuleActions.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="SupportsMove">
          <declaration><![CDATA[protected bool SupportsMove]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="75" sc="39" el="75" ec="43">admin\Menus\ModuleActions\ModuleActions.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="75" sc="44" el="75" ec="48">admin\Menus\ModuleActions\ModuleActions.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="SupportsQuickSettings">
          <declaration><![CDATA[protected bool SupportsQuickSettings]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="77" sc="48" el="77" ec="52">admin\Menus\ModuleActions\ModuleActions.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="77" sc="53" el="77" ec="57">admin\Menus\ModuleActions\ModuleActions.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="DotNetNuke.Admin.Modules">
    <class name="ModuleLocalization">
      <declaration><![CDATA[public class ModuleLocalization : UserControlBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private bool _ShowEditColumn = Null.NullBoolean;]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="44" sc="3" el="55" ec="10">admin\Modules\ModuleLocalization.ascx.cs</location>
            <body hash="acacf79b4769de8ca3e87cf0ec9edf39"><![CDATA[private bool _ShowEditColumn = Null.NullBoolean;
		private bool _ShowFooter = true;

		private bool _ShowLanguageColumn = true;

        #region Contructors

        public ModuleLocalization()
        {
            ModuleId = Null.NullInteger;
            TabId = Null.NullInteger;
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="add_ModuleLocalizationChanged">
          <declaration><![CDATA[public void add_ModuleLocalizationChanged(EventHandler<EventArgs> value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="DataBind">
          <declaration><![CDATA[public override void DataBind()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="221" sc="3" el="227" ec="4">admin\Modules\ModuleLocalization.ascx.cs</location>
            <body hash="8c83e4e1f23e5388733b89236a20a534"><![CDATA[{
			if (TabId != Null.NullInteger)
			{
				localizedModulesGrid.DataSource = Modules;
			}
			localizedModulesGrid.DataBind();
		}]]></body>
          </codeblock>
        </method>
        <method name="delocalizeModuleButton_Click">
          <declaration><![CDATA[protected void delocalizeModuleButton_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="314" sc="3" el="316" ec="4">admin\Modules\ModuleLocalization.ascx.cs</location>
            <body hash="735686f8d2db0ee3df9928325f24e4e9"><![CDATA[{
			LocalizeSelectedItems(false);
		}]]></body>
          </codeblock>
        </method>
        <method name="LoadTabModules">
          <declaration><![CDATA[private List<ModuleInfo> LoadTabModules()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="148" sc="3" el="182" ec="4">admin\Modules\ModuleLocalization.ascx.cs</location>
            <body hash="8b1e598cc81994449ebeb86543b1b188"><![CDATA[{
			var moduleList = new List<ModuleInfo>();

			//Check if we have module scope
			if (ModuleId > Null.NullInteger)
			{
                ModuleInfo sourceModule = ModuleController.Instance.GetModule(ModuleId, TabId, false);
				if (sourceModule.LocalizedModules != null)
				{
					foreach (ModuleInfo localizedModule in sourceModule.LocalizedModules.Values)
					{
						moduleList.Add(localizedModule);
					}
				}
			}
			else
			{
                foreach (ModuleInfo m in ModuleController.Instance.GetTabModules(TabId).Values)
				{
					if (!m.IsDeleted)
					{
						moduleList.Add(m);
						if (m.LocalizedModules != null)
						{
							foreach (ModuleInfo localizedModule in m.LocalizedModules.Values)
							{
								moduleList.Add(localizedModule);
							}
						}
					}
				}
			}

			return moduleList;
		}]]></body>
          </codeblock>
        </method>
        <method name="localizedModulesGrid_PreRender">
          <declaration><![CDATA[protected void localizedModulesGrid_PreRender(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="341" sc="3" el="356" ec="4">admin\Modules\ModuleLocalization.ascx.cs</location>
            <body hash="c8cee537caf5c383ecc5128e1f1919e9"><![CDATA[{
			foreach (GridColumn column in localizedModulesGrid.Columns)
			{
				if ((column.UniqueName == "Edit"))
				{
					column.Visible = ShowEditColumn;
				}
				if ((column.UniqueName == "Language"))
				{
					column.Visible = ShowLanguageColumn;
				}
			}
			localizedModulesGrid.Rebind();

			footerPlaceHolder.Visible = ShowFooter && Modules.Where(m => !m.IsDefaultLanguage).Count() > 0;
		}]]></body>
          </codeblock>
        </method>
        <method name="localizeModuleButton_Click">
          <declaration><![CDATA[protected void localizeModuleButton_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="319" sc="3" el="321" ec="4">admin\Modules\ModuleLocalization.ascx.cs</location>
            <body hash="3f22e0afb0e583d7ff2be638a8d43282"><![CDATA[{
			LocalizeSelectedItems(true);
		}]]></body>
          </codeblock>
        </method>
        <method name="LocalizeSelectedItems">
          <declaration><![CDATA[public void LocalizeSelectedItems(bool localize)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="230" sc="3" el="265" ec="4">admin\Modules\ModuleLocalization.ascx.cs</location>
            <body hash="d4c331fb22760f4e1dca6518ed924a26"><![CDATA[{
			foreach (GridDataItem row in localizedModulesGrid.SelectedItems)
			{
				var localizedModuleId = (int)row.OwnerTableView.DataKeyValues[row.ItemIndex]["ModuleId"];
				var localizedTabId = (int)row.OwnerTableView.DataKeyValues[row.ItemIndex]["TabId"];
                ModuleInfo sourceModule = ModuleController.Instance.GetModule(localizedModuleId, localizedTabId, false);

				if (sourceModule != null)
				{
					if (sourceModule.DefaultLanguageModule != null)
					{
						if (localize)
						{
							//Localize
                            ModuleController.Instance.LocalizeModule(sourceModule, LocaleController.Instance.GetLocale(sourceModule.CultureCode));
						}
						else
						{
							//Delocalize
                            ModuleController.Instance.DeLocalizeModule(sourceModule);

							//Mark module as Not Translated
                            ModuleController.Instance.UpdateTranslationStatus(sourceModule, false);
						}
					}
				}
			}

            ModuleController.Instance.ClearCache(TabId);

			//Rebind localized Modules
			DataBind();

			//Raise Changed event
			OnModuleLocalizationChanged(EventArgs.Empty);
		}]]></body>
          </codeblock>
        </method>
        <method name="markModuleTranslatedButton_Click">
          <declaration><![CDATA[protected void markModuleTranslatedButton_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="359" sc="3" el="361" ec="4">admin\Modules\ModuleLocalization.ascx.cs</location>
            <body hash="cb8ca0b1fc4b590cd3990a839351b2d8"><![CDATA[{
			MarkTranslatedSelectedItems(true);
		}]]></body>
          </codeblock>
        </method>
        <method name="markModuleUnTranslatedButton_Click">
          <declaration><![CDATA[protected void markModuleUnTranslatedButton_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="364" sc="3" el="366" ec="4">admin\Modules\ModuleLocalization.ascx.cs</location>
            <body hash="a7d4cab1c2d1c91ccf777ebf507107f9"><![CDATA[{
			MarkTranslatedSelectedItems(false);
		}]]></body>
          </codeblock>
        </method>
        <method name="MarkTranslatedSelectedItems">
          <declaration><![CDATA[public void MarkTranslatedSelectedItems(bool translated)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="268" sc="3" el="288" ec="4">admin\Modules\ModuleLocalization.ascx.cs</location>
            <body hash="7e2b3c3d66150b29914e218e10f26c56"><![CDATA[{
			foreach (GridDataItem row in localizedModulesGrid.SelectedItems)
			{
				var localizedModuleId = (int)row.OwnerTableView.DataKeyValues[row.ItemIndex]["ModuleId"];
				var localizedTabId = (int)row.OwnerTableView.DataKeyValues[row.ItemIndex]["TabId"];
                ModuleInfo sourceModule = ModuleController.Instance.GetModule(localizedModuleId, localizedTabId, false);

				if (sourceModule.IsLocalized)
				{
                    ModuleController.Instance.UpdateTranslationStatus(sourceModule, translated);
				}
			}

			ModuleController.Instance.ClearCache(TabId);

            //Raise Changed event
            OnModuleLocalizationChanged(EventArgs.Empty);
            
            //Rebind localized Modules
			DataBind();
		}]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="295" sc="3" el="304" ec="4">admin\Modules\ModuleLocalization.ascx.cs</location>
            <body hash="f589189b12c208bb0e79cefc23ac63be"><![CDATA[{
			base.OnInit(e);

			delocalizeModuleButton.Click += delocalizeModuleButton_Click;
			localizeModuleButton.Click += localizeModuleButton_Click;
			//localizedModulesGrid.ItemDataBound += localizedModulesGrid_ItemDataBound;
			localizedModulesGrid.PreRender += localizedModulesGrid_PreRender;
			markModuleTranslatedButton.Click += markModuleTranslatedButton_Click;
			markModuleUnTranslatedButton.Click += markModuleUnTranslatedButton_Click;
		}]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="307" sc="3" el="311" ec="4">admin\Modules\ModuleLocalization.ascx.cs</location>
            <body hash="0a6cfab6d6d77b1527eaade195524895"><![CDATA[{
			base.OnLoad(e);

			ClientAPI.AddButtonConfirm(delocalizeModuleButton, Localization.GetString("BindConfirm", LocalResourceFile));
		}]]></body>
          </codeblock>
        </method>
        <method name="OnModuleLocalizationChanged">
          <declaration><![CDATA[protected void OnModuleLocalizationChanged(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="209" sc="3" el="214" ec="4">admin\Modules\ModuleLocalization.ascx.cs</location>
            <body hash="98c439645d7adddf2ef2c0d51b8cf698"><![CDATA[{
			if (ModuleLocalizationChanged != null)
			{
				ModuleLocalizationChanged(this, e);
			}
		}]]></body>
          </codeblock>
        </method>
        <method name="remove_ModuleLocalizationChanged">
          <declaration><![CDATA[public void remove_ModuleLocalizationChanged(EventHandler<EventArgs> value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="ShowHeaderCheckBox">
          <declaration><![CDATA[protected bool ShowHeaderCheckBox()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="199" sc="3" el="206" ec="4">admin\Modules\ModuleLocalization.ascx.cs</location>
            <body hash="58e62a1ea6a893ce291fc5fb2fadaf63"><![CDATA[{
			bool showCheckBox = Null.NullBoolean;
			if (Modules != null)
			{
				showCheckBox = Modules.Where(m => !m.IsDefaultLanguage).Count() > 0;
			}
			return showCheckBox;
		}]]></body>
          </codeblock>
        </method>
        <method name="ToggleCheckBox">
          <declaration><![CDATA[private void ToggleCheckBox(GridDataItem dataItem, bool toggleValue)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="185" sc="3" el="192" ec="4">admin\Modules\ModuleLocalization.ascx.cs</location>
            <body hash="67a747c7984e01d4c71ac13ce4b81ac3"><![CDATA[{
			var rowCheckBox = (CheckBox)dataItem.FindControl("rowCheckBox");
			if (rowCheckBox.Visible)
			{
				rowCheckBox.Checked = toggleValue;
				dataItem.Selected = toggleValue;
			}
		}]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_Modules">
          <declaration><![CDATA[private List<ModuleInfo> _Modules;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_ShowEditColumn">
          <declaration><![CDATA[private bool _ShowEditColumn = Null.NullBoolean;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_ShowFooter">
          <declaration><![CDATA[private bool _ShowFooter = true;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_ShowLanguageColumn">
          <declaration><![CDATA[private bool _ShowLanguageColumn = true;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="delocalizeModuleButton">
          <declaration><![CDATA[protected LinkButton delocalizeModuleButton;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="footerPlaceHolder">
          <declaration><![CDATA[protected PlaceHolder footerPlaceHolder;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="localizedModulesGrid">
          <declaration><![CDATA[protected DnnGrid localizedModulesGrid;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="localizeModuleButton">
          <declaration><![CDATA[protected LinkButton localizeModuleButton;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="markModuleTranslatedButton">
          <declaration><![CDATA[protected LinkButton markModuleTranslatedButton;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="markModuleUnTranslatedButton">
          <declaration><![CDATA[protected LinkButton markModuleUnTranslatedButton;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ModuleLocalizationChanged">
          <declaration><![CDATA[private EventHandler<EventArgs> ModuleLocalizationChanged;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="LocalResourceFile">
          <declaration><![CDATA[public string LocalResourceFile]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="78" sc="4" el="80" ec="5">admin\Modules\ModuleLocalization.ascx.cs</location>
            <body hash="22e0f7e974459584464a5f4ed6d876ea"><![CDATA[{
				return Localization.GetResourceFile(this, "ModuleLocalization.ascx");
			}]]></body>
          </codeblock>
        </property>
        <property name="ModuleId">
          <declaration><![CDATA[public int ModuleId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="86" sc="4" el="88" ec="5">admin\Modules\ModuleLocalization.ascx.cs</location>
            <body hash="02b3d9812763435a09b6202ea416d22c"><![CDATA[{
				return (int)ViewState["ModuleId"];
			}]]></body>
          </codeblock>
          <codeblock>
            <location sl="90" sc="4" el="92" ec="5">admin\Modules\ModuleLocalization.ascx.cs</location>
            <body hash="c1c1c3f8d42d0023d2c8e50c73d83769"><![CDATA[{
				ViewState["ModuleId"] = value;
			}]]></body>
          </codeblock>
        </property>
        <property name="Modules">
          <declaration><![CDATA[protected List<ModuleInfo> Modules]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="64" sc="4" el="70" ec="5">admin\Modules\ModuleLocalization.ascx.cs</location>
            <body hash="a6fc791abcb0191b51cd34bc2d0cfb5d"><![CDATA[{
				if (_Modules == null)
				{
					_Modules = LoadTabModules();
				}
				return _Modules;
			}]]></body>
          </codeblock>
        </property>
        <property name="ShowEditColumn">
          <declaration><![CDATA[public bool ShowEditColumn]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="98" sc="4" el="100" ec="5">admin\Modules\ModuleLocalization.ascx.cs</location>
            <body hash="f3f712e65ce6dfc8ab52d41686730251"><![CDATA[{
				return _ShowEditColumn;
			}]]></body>
          </codeblock>
          <codeblock>
            <location sl="102" sc="4" el="104" ec="5">admin\Modules\ModuleLocalization.ascx.cs</location>
            <body hash="ea5ea838236ce721aa804dbb88fa069c"><![CDATA[{
				_ShowEditColumn = value;
			}]]></body>
          </codeblock>
        </property>
        <property name="ShowFooter">
          <declaration><![CDATA[public bool ShowFooter]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="110" sc="4" el="112" ec="5">admin\Modules\ModuleLocalization.ascx.cs</location>
            <body hash="bd0eeee354a2934dfca87feffcd7b5fd"><![CDATA[{
				return _ShowFooter;
			}]]></body>
          </codeblock>
          <codeblock>
            <location sl="114" sc="4" el="116" ec="5">admin\Modules\ModuleLocalization.ascx.cs</location>
            <body hash="64ced15e763bab592bcd18d35b42a85f"><![CDATA[{
				_ShowFooter = value;
			}]]></body>
          </codeblock>
        </property>
        <property name="ShowLanguageColumn">
          <declaration><![CDATA[public bool ShowLanguageColumn]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="122" sc="4" el="124" ec="5">admin\Modules\ModuleLocalization.ascx.cs</location>
            <body hash="c0d556a18320f3e4e89e32f88164f226"><![CDATA[{
				return _ShowLanguageColumn;
			}]]></body>
          </codeblock>
          <codeblock>
            <location sl="126" sc="4" el="128" ec="5">admin\Modules\ModuleLocalization.ascx.cs</location>
            <body hash="ac24c9e6c75ebf7c8d263503f0bd5a9d"><![CDATA[{
				_ShowLanguageColumn = value;
			}]]></body>
          </codeblock>
        </property>
        <property name="TabId">
          <declaration><![CDATA[public int TabId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="134" sc="4" el="136" ec="5">admin\Modules\ModuleLocalization.ascx.cs</location>
            <body hash="e148e470fa705557f966904c1aea902a"><![CDATA[{
				return (int)ViewState["TabId"];
			}]]></body>
          </codeblock>
          <codeblock>
            <location sl="138" sc="4" el="140" ec="5">admin\Modules\ModuleLocalization.ascx.cs</location>
            <body hash="47739391172dca7bdc8b9cc296b018dc"><![CDATA[{
				ViewState["TabId"] = value;
			}]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
        <event name="ModuleLocalizationChanged">
          <declaration><![CDATA[public event EventHandler<EventArgs> ModuleLocalizationChanged;]]></declaration>
          <documentation>
          </documentation>
        </event>
      </events>
    </class>
  </namespace>
  <namespace name="DotNetNuke.Common.Controls">
    <class name="Message">
      <declaration><![CDATA[public class Message : PortalModuleBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public Message()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="InitializeComponent">
          <declaration><![CDATA[private void InitializeComponent()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="34" sc="9" el="36" ec="10">admin\Portal\Message.ascx.cs</location>
            <body hash="afc55569510008a3f5a481d7ba3c1f04"><![CDATA[{
            ID = "Message";
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="39" sc="9" el="42" ec="10">admin\Portal\Message.ascx.cs</location>
            <body hash="7a35dd60373e6508aff5615fbef58343"><![CDATA[{
            base.OnInit(e);
            InitializeComponent();
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="lblMessage">
          <declaration><![CDATA[protected Label lblMessage;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="NoContent">
      <declaration><![CDATA[public class NoContent : PortalModuleBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public NoContent()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="InitializeComponent">
          <declaration><![CDATA[private void InitializeComponent()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="34" sc="9" el="35" ec="10">admin\Portal\NoContent.ascx.cs</location>
            <body hash="539fa760ca172337a931519768c64187"><![CDATA[{
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="38" sc="9" el="42" ec="10">admin\Portal\NoContent.ascx.cs</location>
            <body hash="5f3c8c20cc44d36b74ae4760af9b8276"><![CDATA[{
            base.OnInit(e);

            InitializeComponent();
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="Privacy">
      <declaration><![CDATA[public class Privacy : PortalModuleBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public Privacy()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="InitializeComponent">
          <declaration><![CDATA[private void InitializeComponent()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="46" sc="9" el="47" ec="10">admin\Portal\Privacy.ascx.cs</location>
            <body hash="539fa760ca172337a931519768c64187"><![CDATA[{
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="54" sc="9" el="60" ec="10">admin\Portal\Privacy.ascx.cs</location>
            <body hash="541f1d075b3258e186334898ede883ab"><![CDATA[{
            base.OnInit(e);

            //CODEGEN: This method call is required by the Web Form Designer
			//Do not modify it using the code editor.
			InitializeComponent();
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="71" sc="9" el="84" ec="10">admin\Portal\Privacy.ascx.cs</location>
            <body hash="2d826be28e01eed008a3a78b34c4f151"><![CDATA[{
            base.OnLoad(e);
            try
            {
                if (!Page.IsPostBack)
                {
                    lblPrivacy.Text = Localization.GetSystemMessage(PortalSettings, "MESSAGE_PORTAL_PRIVACY");
                }
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="lblPrivacy">
          <declaration><![CDATA[protected Label lblPrivacy;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="Terms">
      <declaration><![CDATA[public class Terms : PortalModuleBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public Terms()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="InitializeComponent">
          <declaration><![CDATA[private void InitializeComponent()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="39" sc="9" el="40" ec="10">admin\Portal\Terms.ascx.cs</location>
            <body hash="539fa760ca172337a931519768c64187"><![CDATA[{
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="45" sc="9" el="52" ec="10">admin\Portal\Terms.ascx.cs</location>
            <body hash="5ecf9f3ced5c456bde3a1ed8a4f8a19e"><![CDATA[{
            base.OnInit(e);

            
			//CODEGEN: This method call is required by the Web Form Designer
            //Do not modify it using the code editor.
			InitializeComponent();
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="56" sc="9" el="69" ec="10">admin\Portal\Terms.ascx.cs</location>
            <body hash="4d5ab29b4a80bf61bd82ee0139fba793"><![CDATA[{
            base.OnLoad(e);
            try
            {
                if (!Page.IsPostBack)
                {
                    lblTerms.Text = Localization.GetSystemMessage(PortalSettings, "MESSAGE_PORTAL_TERMS");
                }
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="lblTerms">
          <declaration><![CDATA[protected Label lblTerms;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="DotNetNuke.Common.Utilities">
    <class name="KeepAlive">
      <declaration><![CDATA[public class KeepAlive : Page]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public KeepAlive()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="InitializeComponent">
          <declaration><![CDATA[private void InitializeComponent()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="34" sc="9" el="35" ec="10">KeepAlive.aspx.cs</location>
            <body hash="539fa760ca172337a931519768c64187"><![CDATA[{
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="38" sc="9" el="44" ec="10">KeepAlive.aspx.cs</location>
            <body hash="b6fea7385d31b21d16d91967db98a8f8"><![CDATA[{
            base.OnInit(e);

			//CODEGEN: This method call is required by the Web Form Designer
			//Do not modify it using the code editor.
            InitializeComponent();
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="47" sc="9" el="49" ec="10">KeepAlive.aspx.cs</location>
            <body hash="45f462e0d93b418cd3992d8ec86c9cc6"><![CDATA[{
            base.OnLoad(e);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="DotNetNuke.Framework">
    <class name="DefaultPage">
      <declaration><![CDATA[public class DefaultPage : CDefault, IClientAPICallbackEventHandler]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DefaultPage()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
        <constructor name=".cctor">
          <declaration><![CDATA[static DefaultPage()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="76" sc="6" el="79" ec="87">Default.aspx.cs</location>
            <body hash="70669937f21fe9433209b03a6f3299c6"><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof (DefaultPage));

        private static readonly Regex HeaderTextRegex = new Regex("<meta([^>])+name=('|\")robots('|\")",
            RegexOptions.IgnoreCase | RegexOptions.Multiline | RegexOptions.Compiled);]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="GetBackgroundFileInfo">
          <declaration><![CDATA[private IFileInfo GetBackgroundFileInfo()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="549" sc="9" el="555" ec="10">Default.aspx.cs</location>
            <body hash="6804420505b6466e1590db37b6d2e5f4"><![CDATA[{
            string cacheKey = String.Format(Common.Utilities.DataCache.PortalCacheKey, PortalSettings.PortalId, "BackgroundFile");
            var file = CBO.GetCachedObject<Services.FileSystem.FileInfo>(new CacheItemArgs(cacheKey, Common.Utilities.DataCache.PortalCacheTimeOut, Common.Utilities.DataCache.PortalCachePriority),
                                                    GetBackgroundFileInfoCallBack);

            return file;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetBackgroundFileInfoCallBack">
          <declaration><![CDATA[private IFileInfo GetBackgroundFileInfoCallBack(CacheItemArgs itemArgs)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="558" sc="9" el="560" ec="10">Default.aspx.cs</location>
            <body hash="5d3583c850e770d50c1135dbb5d8f1d0"><![CDATA[{
            return FileManager.Instance.GetFile(PortalSettings.PortalId, PortalSettings.BackgroundFile);
        }]]></body>
          </codeblock>
        </method>
        <method name="InitializePage">
          <declaration><![CDATA[private void InitializePage()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="194" sc="9" el="449" ec="10">Default.aspx.cs</location>
            <body hash="49288f958749e714479f6fcde5f5b2eb"><![CDATA[{
            //There could be a pending installation/upgrade process
            if (InstallBlocker.Instance.IsInstallInProgress())
            {
                Exceptions.ProcessHttpException(new HttpException(503, Localization.GetString("SiteAccessedWhileInstallationWasInProgress.Error", Localization.GlobalResourceFile)));
            }

            //Configure the ActiveTab with Skin/Container information
            PortalSettingsController.Instance().ConfigureActiveTab(PortalSettings);

            //redirect to a specific tab based on name
            if (!String.IsNullOrEmpty(Request.QueryString["tabname"]))
            {
                TabInfo tab = TabController.Instance.GetTabByName(Request.QueryString["TabName"], PortalSettings.PortalId);
                if (tab != null)
                {
                    var parameters = new List<string>(); //maximum number of elements
                    for (int intParam = 0; intParam <= Request.QueryString.Count - 1; intParam++)
                    {
                        switch (Request.QueryString.Keys[intParam].ToLower())
                        {
                            case "tabid":
                            case "tabname":
                                break;
                            default:
                                parameters.Add(
                                    Request.QueryString.Keys[intParam] + "=" + Request.QueryString[intParam]);
                                break;
                        }
                    }
                    Response.Redirect(Globals.NavigateURL(tab.TabID, Null.NullString, parameters.ToArray()), true);
                }
                else
                {
                    //404 Error - Redirect to ErrorPage
                    Exceptions.ProcessHttpException(Request);
                }
            }
            string cacheability = Request.IsAuthenticated ? Host.AuthenticatedCacheability : Host.UnauthenticatedCacheability;

            switch (cacheability)
            {
                case "0":
                    Response.Cache.SetCacheability(HttpCacheability.NoCache);
                    break;
                case "1":
                    Response.Cache.SetCacheability(HttpCacheability.Private);
                    break;
                case "2":
                    Response.Cache.SetCacheability(HttpCacheability.Public);
                    break;
                case "3":
                    Response.Cache.SetCacheability(HttpCacheability.Server);
                    break;
                case "4":
                    Response.Cache.SetCacheability(HttpCacheability.ServerAndNoCache);
                    break;
                case "5":
                    Response.Cache.SetCacheability(HttpCacheability.ServerAndPrivate);
                    break;
            }

            //page comment
            if (Host.DisplayCopyright)
            {
                Comment += string.Concat(Environment.NewLine,
                                         "<!--*********************************************-->",
                                         Environment.NewLine,
                                         "<!-- DNN Platform - http://www.dnnsoftware.com   -->",
                                         Environment.NewLine,
                                         "<!-- Copyright (c) 2002-2015, by DNN Corporation -->",
                                         Environment.NewLine,
                                         "<!--*********************************************-->",
                                         Environment.NewLine);
            }

            //Only insert the header control if a comment is needed
            if(!String.IsNullOrWhiteSpace(Comment))
                Page.Header.Controls.AddAt(0, new LiteralControl(Comment));

            if (PortalSettings.ActiveTab.PageHeadText != Null.NullString && !Globals.IsAdminControl())
            {
                Page.Header.Controls.Add(new LiteralControl(PortalSettings.ActiveTab.PageHeadText));
            }

            if (!string.IsNullOrEmpty(PortalSettings.PageHeadText))
            {
                metaPanel.Controls.Add(new LiteralControl(PortalSettings.PageHeadText));
            }
            
            //set page title
            if (UrlUtils.InPopUp())
            {
                var strTitle = new StringBuilder(PortalSettings.PortalName);
                var slaveModule = UIUtilities.GetSlaveModule(PortalSettings.ActiveTab.TabID);

                //Skip is popup is just a tab (no slave module)
                if (slaveModule.DesktopModuleID != Null.NullInteger)
                {
                    var control = ModuleControlFactory.CreateModuleControl(slaveModule) as IModuleControl;
                    string extension = Path.GetExtension(slaveModule.ModuleControl.ControlSrc.ToLower());
                    switch (extension)
                    {
                        case ".mvc":
                            var segments = slaveModule.ModuleControl.ControlSrc.Replace(".mvc", "").Split('/');

                            control.LocalResourceFile = String.Format("~/DesktopModules/MVC/{0}/{1}/{2}.resx",
                                slaveModule.DesktopModule.FolderName,
                                Localization.LocalResourceDirectory,
                                segments[0]);
                            break;
                        default:
                            control.LocalResourceFile = string.Concat(
                                slaveModule.ModuleControl.ControlSrc.Replace(
                                    Path.GetFileName(slaveModule.ModuleControl.ControlSrc), string.Empty),
                                Localization.LocalResourceDirectory, "/",
                                Path.GetFileName(slaveModule.ModuleControl.ControlSrc));
                            break;
                    }
                    var title = Localization.LocalizeControlTitle(control);
                    
                    strTitle.Append(string.Concat(" > ", PortalSettings.ActiveTab.LocalizedTabName));
                    strTitle.Append(string.Concat(" > ", title));
                }
                else
                {
                    strTitle.Append(string.Concat(" > ", PortalSettings.ActiveTab.LocalizedTabName));
                }

                //Set to page
                Title = strTitle.ToString();
            }
            else
            {
                //If tab is named, use that title, otherwise build it out via breadcrumbs
                if (!string.IsNullOrEmpty(PortalSettings.ActiveTab.Title))
                {
                    Title = PortalSettings.ActiveTab.Title;
                }
                else
                {
                    //Elected for SB over true concatenation here due to potential for long nesting depth
                    var strTitle = new StringBuilder(PortalSettings.PortalName);
                    foreach (TabInfo tab in PortalSettings.ActiveTab.BreadCrumbs)
                    {
                        strTitle.Append(string.Concat(" > ", tab.TabName));
                    }
                    Title = strTitle.ToString();
                }
            }

            //set the background image if there is one selected
            if (!UrlUtils.InPopUp() && FindControl("Body") != null)
            {
                if (!string.IsNullOrEmpty(PortalSettings.BackgroundFile))
                {
                    var fileInfo = GetBackgroundFileInfo();
                    var url = FileManager.Instance.GetUrl(fileInfo);

                    ((HtmlGenericControl)FindControl("Body")).Attributes["style"] = string.Concat("background-image: url('", url, "')");
                }
            }

            //META Refresh
            // Only autorefresh the page if we are in VIEW-mode and if we aren't displaying some module's subcontrol.
            if (PortalSettings.ActiveTab.RefreshInterval > 0 && this.PortalSettings.UserMode == PortalSettings.Mode.View && Request.QueryString["ctl"] == null)
            {
                MetaRefresh.Content = PortalSettings.ActiveTab.RefreshInterval.ToString();
                MetaRefresh.Visible = true;
            }
            else
            {
                MetaRefresh.Visible = false;
            }

            //META description
            if (!string.IsNullOrEmpty(PortalSettings.ActiveTab.Description))
            {
                Description = PortalSettings.ActiveTab.Description;
            }
            else
            {
                Description = PortalSettings.Description;
            }

            //META keywords
            if (!string.IsNullOrEmpty(PortalSettings.ActiveTab.KeyWords))
            {
                KeyWords = PortalSettings.ActiveTab.KeyWords;
            }
            else
            {
                KeyWords = PortalSettings.KeyWords;
            }
            if (Host.DisplayCopyright)
            {
                KeyWords += ",DotNetNuke,DNN";
            }

            //META copyright
            if (!string.IsNullOrEmpty(PortalSettings.FooterText))
            {
                Copyright = PortalSettings.FooterText.Replace("[year]", DateTime.Now.Year.ToString());
            }
            else
            {
                Copyright = string.Concat("Copyright (c) ", DateTime.Now.Year, " by ", PortalSettings.PortalName);
            }

            //META generator
            if (Host.DisplayCopyright)
            {
                Generator = "DotNetNuke ";
            }
            else
            {
                Generator = "";
            }

            //META Robots - hide it inside popups and if PageHeadText of current tab already contains a robots meta tag
            if (!UrlUtils.InPopUp() &&
                !(HeaderTextRegex.IsMatch(PortalSettings.ActiveTab.PageHeadText) ||
                  HeaderTextRegex.IsMatch(PortalSettings.PageHeadText)))
            {
                MetaRobots.Visible = true;
                var allowIndex = true;
                if ((PortalSettings.ActiveTab.TabSettings.ContainsKey("AllowIndex") &&
                     bool.TryParse(PortalSettings.ActiveTab.TabSettings["AllowIndex"].ToString(), out allowIndex) &&
                     !allowIndex)
                    ||
                    (Request.QueryString["ctl"] != null &&
                     (Request.QueryString["ctl"] == "Login" || Request.QueryString["ctl"] == "Register")))
                {
                    MetaRobots.Content = "NOINDEX, NOFOLLOW";
                }
                else
                {
                    MetaRobots.Content = "INDEX, FOLLOW";
                }
            }

            //NonProduction Label Injection
            if (NonProductionVersion() && Host.DisplayBetaNotice && !UrlUtils.InPopUp())
            {
                string versionString = string.Format(" ({0} Version: {1})", DotNetNukeContext.Current.Application.Status,
                                                     DotNetNukeContext.Current.Application.Version);
                Title += versionString;
            }

			//register the custom stylesheet of current page
			if (PortalSettings.ActiveTab.TabSettings.ContainsKey("CustomStylesheet") && !string.IsNullOrEmpty(PortalSettings.ActiveTab.TabSettings["CustomStylesheet"].ToString()))
			{
				var customStylesheet = Path.Combine(PortalSettings.HomeDirectory, PortalSettings.ActiveTab.TabSettings["CustomStylesheet"].ToString());
				ClientResourceManager.RegisterStyleSheet(this, customStylesheet);
			}
        }]]></body>
          </codeblock>
        </method>
        <method name="ManageFavicon">
          <declaration><![CDATA[private void ManageFavicon()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="488" sc="9" el="495" ec="10">Default.aspx.cs</location>
            <body hash="d9c33cc0ae474d9e252e6e383ed5bc33"><![CDATA[{
            string headerLink = FavIcon.GetHeaderLink(PortalSettings.PortalId);

            if (!String.IsNullOrEmpty(headerLink))
            {
                Page.Header.Controls.Add(new Literal { Text = headerLink });
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="NonProductionVersion">
          <declaration><![CDATA[protected bool NonProductionVersion()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="567" sc="9" el="569" ec="10">Default.aspx.cs</location>
            <body hash="ac70da180feb6ff50f5cbb7443d25eaf"><![CDATA[{
            return DotNetNukeContext.Current.Application.Status != ReleaseMode.Stable;
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="584" sc="9" el="707" ec="10">Default.aspx.cs</location>
            <body hash="947d234e2d28e5ba5627ef57a4c799e4"><![CDATA[{
            base.OnInit(e);

            //set global page settings
            InitializePage();

            //load skin control and register UI js
            UI.Skins.Skin ctlSkin;
            if (PortalSettings.EnablePopUps)
            {
                ctlSkin = UrlUtils.InPopUp() ? UI.Skins.Skin.GetPopUpSkin(this) : UI.Skins.Skin.GetSkin(this);

                //register popup js
                JavaScript.RequestRegistration(CommonJs.jQueryUI);

                var popupFilePath = HttpContext.Current.IsDebuggingEnabled
                                   ? "~/js/Debug/dnn.modalpopup.js"
                                   : "~/js/dnn.modalpopup.js";

                ClientResourceManager.RegisterScript(this, popupFilePath, FileOrder.Js.DnnModalPopup);
            }
            else
            {
                ctlSkin = UI.Skins.Skin.GetSkin(this);
            }

            // DataBind common paths for the client resource loader
            ClientResourceLoader.DataBind();
            ClientResourceLoader.PreRender += (sender, args) => JavaScript.Register(Page);

            //check for and read skin package level doctype
            SetSkinDoctype();

            //Manage disabled pages
            if (PortalSettings.ActiveTab.DisableLink)
            {
                if (TabPermissionController.CanAdminPage())
                {
                    var heading = Localization.GetString("PageDisabled.Header");
                    var message = Localization.GetString("PageDisabled.Text");
                    UI.Skins.Skin.AddPageMessage(ctlSkin, heading, message,
                                                 ModuleMessage.ModuleMessageType.YellowWarning);
                }
                else
                {
                    if (PortalSettings.HomeTabId > 0)
                    {
                        Response.Redirect(Globals.NavigateURL(PortalSettings.HomeTabId), true);
                    }
                    else
                    {
                        Response.Redirect(Globals.GetPortalDomainName(PortalSettings.PortalAlias.HTTPAlias, Request, true), true);
                    }
                }
            }
            //Manage canonical urls
            if (PortalSettings.PortalAliasMappingMode == PortalSettings.PortalAliasMapping.CanonicalUrl)
            {
                string primaryHttpAlias = null;
                if (Config.GetFriendlyUrlProvider() == "advanced")  //advanced mode compares on the primary alias as set during alias identification
                {
                    if (PortalSettings.PrimaryAlias != null && PortalSettings.PortalAlias != null)
                    {
                        if (string.Compare(PortalSettings.PrimaryAlias.HTTPAlias, PortalSettings.PortalAlias.HTTPAlias, StringComparison.InvariantCulture ) != 0)
                        {
                            primaryHttpAlias = PortalSettings.PrimaryAlias.HTTPAlias;
                        }
                    }
                }
                else //other modes just depend on the default alias
                {
                    if (string.Compare(PortalSettings.PortalAlias.HTTPAlias, PortalSettings.DefaultPortalAlias, StringComparison.InvariantCulture ) != 0) 
                        primaryHttpAlias = PortalSettings.DefaultPortalAlias;
                }
                if (primaryHttpAlias != null && string.IsNullOrEmpty(CanonicalLinkUrl))//a primary http alias was identified
                {
                    var originalurl = Context.Items["UrlRewrite:OriginalUrl"].ToString();
                    CanonicalLinkUrl = originalurl.Replace(PortalSettings.PortalAlias.HTTPAlias, primaryHttpAlias);
                }
            }

            //check if running with known account defaults
            if (Request.IsAuthenticated && string.IsNullOrEmpty(Request.QueryString["runningDefault"]) == false)
            {
                var userInfo = HttpContext.Current.Items["UserInfo"] as UserInfo;
                //only show message to default users
                if ((userInfo.Username.ToLower() == "admin") || (userInfo.Username.ToLower() == "host"))
                {
                    var messageText = RenderDefaultsWarning();
                    var messageTitle = Localization.GetString("InsecureDefaults.Title", Localization.GlobalResourceFile);
                    UI.Skins.Skin.AddPageMessage(ctlSkin, messageTitle, messageText, ModuleMessage.ModuleMessageType.RedError);
                }
            }

            //add CSS links
            ClientResourceManager.RegisterDefaultStylesheet(this, string.Concat(Globals.ApplicationPath, "/Resources/Shared/stylesheets/dnndefault/7.0.0/default.css"));
            ClientResourceManager.RegisterIEStylesheet(this, string.Concat(Globals.HostPath, "ie.css"));

            ClientResourceManager.RegisterStyleSheet(this, string.Concat(ctlSkin.SkinPath, "skin.css"), FileOrder.Css.SkinCss);
            ClientResourceManager.RegisterStyleSheet(this, ctlSkin.SkinSrc.Replace(".ascx", ".css"), FileOrder.Css.SpecificSkinCss);

            //add skin to page
            SkinPlaceHolder.Controls.Add(ctlSkin);

            ClientResourceManager.RegisterStyleSheet(this, string.Concat(PortalSettings.HomeDirectory, "portal.css"), FileOrder.Css.PortalCss);

            //add Favicon
            ManageFavicon();

            //ClientCallback Logic 
            ClientAPI.HandleClientAPICallbackEvent(this);

            //add viewstateuserkey to protect against CSRF attacks
            if (User.Identity.IsAuthenticated)
            {
                ViewStateUserKey = User.Identity.Name;
            }

			//set the async postback timeout.
	        if (AJAX.IsEnabled())
	        {
		        AJAX.GetScriptManager(this).AsyncPostBackTimeout = Host.AsyncTimeout;
	        }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="718" sc="9" el="728" ec="10">Default.aspx.cs</location>
            <body hash="30d81b09b89ff1380090d46bbfff2f49"><![CDATA[{
            base.OnLoad(e);

            ManageInstallerFiles();

            if (!String.IsNullOrEmpty(ScrollTop.Value))
            {
                DNNClientAPI.SetScrollTop(Page);
                ScrollTop.Value = ScrollTop.Value;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnPreRender">
          <declaration><![CDATA[protected override void OnPreRender(EventArgs evt)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="731" sc="9" el="768" ec="10">Default.aspx.cs</location>
            <body hash="c2785b553a1fb509cb2e646d971690b6"><![CDATA[{
            base.OnPreRender(evt);

            //Set the Head tags
            metaPanel.Visible = !UrlUtils.InPopUp();
            if (!UrlUtils.InPopUp())
            {
                MetaGenerator.Content = Generator;
                MetaGenerator.Visible = (!String.IsNullOrEmpty(Generator));
                MetaAuthor.Content = PortalSettings.PortalName;
                /*
                 * Never show to be html5 compatible and stay backward compatible
                 * 
                 * MetaCopyright.Content = Copyright;
                 * MetaCopyright.Visible = (!String.IsNullOrEmpty(Copyright));
                 */
                MetaKeywords.Content = KeyWords;
                MetaKeywords.Visible = (!String.IsNullOrEmpty(KeyWords));
                MetaDescription.Content = Description;
                MetaDescription.Visible = (!String.IsNullOrEmpty(Description));
            }
            Page.Header.Title = Title;
            if (!string.IsNullOrEmpty(PortalSettings.AddCompatibleHttpHeader) && !HeaderIsWritten)
            {
                Page.Response.AddHeader("X-UA-Compatible", PortalSettings.AddCompatibleHttpHeader);
            }

	        if (!string.IsNullOrEmpty(CanonicalLinkUrl))
	        {
				//Add Canonical <link> using the primary alias
				var canonicalLink = new HtmlLink();
				canonicalLink.Href = CanonicalLinkUrl;
				canonicalLink.Attributes.Add("rel", "canonical");

				// Add the HtmlLink to the Head section of the page.
				Page.Header.Controls.Add(canonicalLink);
	        }
        }]]></body>
          </codeblock>
        </method>
        <method name="ParsePageCallBackArgs">
          <declaration><![CDATA[private Dictionary<string, string> ParsePageCallBackArgs(string strArg)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="501" sc="9" el="522" ec="10">Default.aspx.cs</location>
            <body hash="bb2d07ace76268d9b9ce0331c91563a7"><![CDATA[{
            string[] aryVals = strArg.Split(new[] { ClientAPI.COLUMN_DELIMITER }, StringSplitOptions.None);
            var objDict = new Dictionary<string, string>();
            if (aryVals.Length > 0)
            {
                objDict.Add("type", aryVals[0]);
                switch (
                    (DNNClientAPI.PageCallBackType)Enum.Parse(typeof(DNNClientAPI.PageCallBackType), objDict["type"]))
                {
                    case DNNClientAPI.PageCallBackType.GetPersonalization:
                        objDict.Add("namingcontainer", aryVals[1]);
                        objDict.Add("key", aryVals[2]);
                        break;
                    case DNNClientAPI.PageCallBackType.SetPersonalization:
                        objDict.Add("namingcontainer", aryVals[1]);
                        objDict.Add("key", aryVals[2]);
                        objDict.Add("value", aryVals[3]);
                        break;
                }
            }
            return objDict;
        }]]></body>
          </codeblock>
        </method>
        <method name="RaiseClientAPICallbackEvent">
          <declaration><![CDATA[public string RaiseClientAPICallbackEvent(string eventArgument)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="153" sc="9" el="173" ec="10">Default.aspx.cs</location>
            <body hash="88bfd282ab847128d232c5eba15fc842"><![CDATA[{
            var dict = ParsePageCallBackArgs(eventArgument);
            if (dict.ContainsKey("type"))
            {
                if (DNNClientAPI.IsPersonalizationKeyRegistered(dict["namingcontainer"] + ClientAPI.CUSTOM_COLUMN_DELIMITER + dict["key"]) == false)
                {
                    throw new Exception(string.Format("This personalization key has not been enabled ({0}:{1}).  Make sure you enable it with DNNClientAPI.EnableClientPersonalization", dict["namingcontainer"], dict["key"]));
                }
                switch ((DNNClientAPI.PageCallBackType)Enum.Parse(typeof(DNNClientAPI.PageCallBackType), dict["type"]))
                {
                    case DNNClientAPI.PageCallBackType.GetPersonalization:
                        return Personalization.GetProfile(dict["namingcontainer"], dict["key"]).ToString();
                    case DNNClientAPI.PageCallBackType.SetPersonalization:
                        Personalization.SetProfile(dict["namingcontainer"], dict["key"], dict["value"]);
                        return dict["value"];
                    default:
                        throw new Exception("Unknown Callback Type");
                }
            }
            return string.Empty;
        }]]></body>
          </codeblock>
        </method>
        <method name="Render">
          <declaration><![CDATA[protected override void Render(HtmlTextWriter writer)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="771" sc="3" el="788" ec="4">Default.aspx.cs</location>
            <body hash="659e2c9cec08767210795d8d433fe82e"><![CDATA[{
			if (PortalSettings.UserMode == PortalSettings.Mode.Edit)
			{
			    var editClass = "dnnEditState";

				var bodyClass = Body.Attributes["class"];
				if (!string.IsNullOrEmpty(bodyClass))
				{
                    Body.Attributes["class"] = string.Format("{0} {1}", bodyClass, editClass);
				}
				else
				{
                    Body.Attributes["class"] = editClass;
				}
			}

			base.Render(writer);
		}]]></body>
          </codeblock>
        </method>
        <method name="RenderDefaultsWarning">
          <declaration><![CDATA[private string RenderDefaultsWarning()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="530" sc="9" el="546" ec="10">Default.aspx.cs</location>
            <body hash="3863c228d95c919baea81d8a6d28054a"><![CDATA[{
            var warningLevel = Request.QueryString["runningDefault"];
            var warningMessage = string.Empty;
            switch (warningLevel)
            {
                case "1":
                    warningMessage = Localization.GetString("InsecureAdmin.Text", Localization.SharedResourceFile);
                    break;
                case "2":
                    warningMessage = Localization.GetString("InsecureHost.Text", Localization.SharedResourceFile);
                    break;
                case "3":
                    warningMessage = Localization.GetString("InsecureDefaults.Text", Localization.SharedResourceFile);
                    break;
            }
            return warningMessage;
        }]]></body>
          </codeblock>
        </method>
        <method name="SetSkinDoctype">
          <declaration><![CDATA[private void SetSkinDoctype()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="461" sc="9" el="485" ec="10">Default.aspx.cs</location>
            <body hash="37484a3355081a6a4d6c33b90316faaa"><![CDATA[{
            string strLang = CultureInfo.CurrentCulture.ToString();
            string strDocType = PortalSettings.ActiveTab.SkinDoctype;
            if (strDocType.Contains("XHTML 1.0"))
            {
                //XHTML 1.0
                HtmlAttributes.Add("xml:lang", strLang);
                HtmlAttributes.Add("lang", strLang);
                HtmlAttributes.Add("xmlns", "http://www.w3.org/1999/xhtml");
            }
            else if (strDocType.Contains("XHTML 1.1"))
            {
                //XHTML 1.1
                HtmlAttributes.Add("xml:lang", strLang);
                HtmlAttributes.Add("xmlns", "http://www.w3.org/1999/xhtml");
            }
            else
            {
                //other
                HtmlAttributes.Add("lang", strLang);
            }
            //Find the placeholder control and render the doctype
            skinDocType.Text = PortalSettings.ActiveTab.SkinDoctype;
            attributeList.Text = HtmlAttributeList;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="attributeList">
          <declaration><![CDATA[protected Literal attributeList;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Body">
          <declaration><![CDATA[protected HtmlGenericControl Body;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="BodySCRIPTS">
          <declaration><![CDATA[protected PlaceHolder BodySCRIPTS;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ClientDependencyHeadCss">
          <declaration><![CDATA[protected PlaceHolder ClientDependencyHeadCss;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ClientDependencyHeadJs">
          <declaration><![CDATA[protected PlaceHolder ClientDependencyHeadJs;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ClientResourceIncludes">
          <declaration><![CDATA[protected PlaceHolder ClientResourceIncludes;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ClientResourceLoader">
          <declaration><![CDATA[protected ClientResourceLoader ClientResourceLoader;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ClientResourcesFormBottom">
          <declaration><![CDATA[protected PlaceHolder ClientResourcesFormBottom;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="CSS">
          <declaration><![CDATA[protected PlaceHolder CSS;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Form">
          <declaration><![CDATA[protected new Form Form;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Head">
          <declaration><![CDATA[protected HtmlHead Head;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="HeaderTextRegex">
          <declaration><![CDATA[private static readonly Regex HeaderTextRegex = new Regex("<meta([^>])+name=('|\")robots('|\")", RegexOptions.IgnoreCase | RegexOptions.Multiline | RegexOptions.Compiled);]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Logger">
          <declaration><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof(DefaultPage));]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="MetaAuthor">
          <declaration><![CDATA[protected HtmlMeta MetaAuthor;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="MetaCopyright">
          <declaration><![CDATA[protected HtmlMeta MetaCopyright;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="MetaDescription">
          <declaration><![CDATA[protected new HtmlMeta MetaDescription;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="MetaGenerator">
          <declaration><![CDATA[protected HtmlMeta MetaGenerator;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="MetaKeywords">
          <declaration><![CDATA[protected new HtmlMeta MetaKeywords;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="metaPanel">
          <declaration><![CDATA[protected PlaceHolder metaPanel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="MetaRefresh">
          <declaration><![CDATA[protected HtmlMeta MetaRefresh;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="MetaRobots">
          <declaration><![CDATA[protected HtmlMeta MetaRobots;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="SCRIPTS">
          <declaration><![CDATA[protected PlaceHolder SCRIPTS;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ScrollTop">
          <declaration><![CDATA[protected HtmlInputHidden ScrollTop;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="skinDocType">
          <declaration><![CDATA[protected Literal skinDocType;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="SkinError">
          <declaration><![CDATA[protected Label SkinError;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="SkinPlaceHolder">
          <declaration><![CDATA[protected PlaceHolder SkinPlaceHolder;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="CurrentSkinPath">
          <declaration><![CDATA[public string CurrentSkinPath]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="143" sc="13" el="145" ec="14">Default.aspx.cs</location>
            <body hash="7862c095d202f3207638c00a91200cab"><![CDATA[{
                return ((PortalSettings)HttpContext.Current.Items["PortalSettings"]).ActiveTab.SkinPath;
            }]]></body>
          </codeblock>
        </property>
        <property name="HtmlAttributeList">
          <declaration><![CDATA[protected string HtmlAttributeList]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="109" sc="13" el="137" ec="14">Default.aspx.cs</location>
            <body hash="f9364cfb2f05cc892cd8a1b00e29bd28"><![CDATA[{
                if ((HtmlAttributes != null) && (HtmlAttributes.Count > 0))
                {
                    var attr = new StringBuilder();
                    foreach (string attributeName in HtmlAttributes.Keys)
                    {
                        if ((!String.IsNullOrEmpty(attributeName)) && (HtmlAttributes[attributeName] != null))
                        {
                            string attributeValue = HtmlAttributes[attributeName];
                            if ((attributeValue.IndexOf(",") > 0))
                            {
                                var attributeValues = attributeValue.Split(',');
                                for (var attributeCounter = 0;
                                     attributeCounter <= attributeValues.Length - 1;
                                     attributeCounter++)
                                {
                                    attr.Append(string.Concat(" ", attributeName, "=\"", attributeValues[attributeCounter], "\""));
                                }
                            }
                            else
                            {
                                attr.Append(string.Concat(" ", attributeName, "=\"", attributeValue, "\""));
                            }
                        }
                    }
                    return attr.ToString();
                }
                return string.Empty;
            }]]></body>
          </codeblock>
        </property>
        <property name="PageScrollTop">
          <declaration><![CDATA[public int PageScrollTop]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="94" sc="13" el="102" ec="14">Default.aspx.cs</location>
            <body hash="ac2c6930cb6b605ffaa735fc6b5aee4b"><![CDATA[{
                int pageScrollTop;
                var scrollValue = ScrollTop != null ? ScrollTop.Value : "";
                if (!int.TryParse(scrollValue, out pageScrollTop) || pageScrollTop < 0)
                {
                    pageScrollTop = Null.NullInteger;
                }
                return pageScrollTop;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="DotNetNuke.Modules.Admin.Authentication">
    <class name="Authentication">
      <declaration><![CDATA[public class Authentication : PortalModuleBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private readonly List<AuthenticationSettingsBase> _settingControls = new List<AuthenticationSettingsBase>();]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="47" sc="3" el="47" ec="111">DesktopModules\Admin\Authentication\Authentication.ascx.cs</location>
            <body hash="df44973e5573f9b40d49d5af643987b5"><![CDATA[private readonly List<AuthenticationSettingsBase> _settingControls = new List<AuthenticationSettingsBase>()]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="50" sc="3" el="94" ec="4">DesktopModules\Admin\Authentication\Authentication.ascx.cs</location>
            <body hash="0574f491b0aa822f64fbd197336b559a"><![CDATA[{
			base.OnLoad(e);

			cmdUpdate.Click += OnUpdateClick;

			var authSystems = AuthenticationController.GetEnabledAuthenticationServices();

			foreach (var authSystem in authSystems)
			{
				//Add a Section Header
				var sectionHeadControl = (SectionHeadControl) LoadControl("~/controls/SectionHeadControl.ascx");
				sectionHeadControl.IncludeRule = true;
				sectionHeadControl.CssClass = "Head";

				//Create a <div> to hold the control
				var container = new HtmlGenericControl();
				container.ID = authSystem.AuthenticationType;

				var authSettingsControl = (AuthenticationSettingsBase) LoadControl("~/" + authSystem.SettingsControlSrc);

				//set the control ID to the resource file name ( ie. controlname.ascx = controlname )
				//this is necessary for the Localization in PageBase
				authSettingsControl.ID = Path.GetFileNameWithoutExtension(authSystem.SettingsControlSrc) + "_" + authSystem.AuthenticationType;

				//Add Settings Control to Container
				container.Controls.Add(authSettingsControl);
				_settingControls.Add(authSettingsControl);

				//Add Section Head Control to Container
				pnlSettings.Controls.Add(sectionHeadControl);

				//Add Container to Controls
				pnlSettings.Controls.Add(container);

				//Attach Settings Control's container to Section Head Control
				sectionHeadControl.Section = container.ID;

				//Get Section Head Text from the setting controls LocalResourceFile
				authSettingsControl.LocalResourceFile = authSettingsControl.TemplateSourceDirectory + "/" + Localization.LocalResourceDirectory + "/" +
														Path.GetFileNameWithoutExtension(authSystem.SettingsControlSrc);
				sectionHeadControl.Text = Localization.GetString("Title", authSettingsControl.LocalResourceFile);
				pnlSettings.Controls.Add(new LiteralControl("<br/>"));
				cmdUpdate.Visible = IsEditable;
			}
		}]]></body>
          </codeblock>
        </method>
        <method name="OnUpdateClick">
          <declaration><![CDATA[protected void OnUpdateClick(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="97" sc="3" el="122" ec="4">DesktopModules\Admin\Authentication\Authentication.ascx.cs</location>
            <body hash="9db5b5a31015e763ca5847cd5e08d5b8"><![CDATA[{
			foreach (var settingControl in _settingControls)
			{
				settingControl.UpdateSettings();
			}
			
			//Validate Enabled
			var enabled = false;
			var authSystems = AuthenticationController.GetEnabledAuthenticationServices();
			foreach (var authSystem in authSystems)
			{
				var authLoginControl = (AuthenticationLoginBase) LoadControl("~/" + authSystem.LoginControlSrc);

				//Check if AuthSystem is Enabled
				if (authLoginControl.Enabled)
				{
					enabled = true;
					break;
				}
			}
			if (!enabled)
			{
				//Display warning
				UI.Skins.Skin.AddModuleMessage(this, Localization.GetString("NoProvidersEnabled", LocalResourceFile), ModuleMessage.ModuleMessageType.YellowWarning);
			}
		}]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_settingControls">
          <declaration><![CDATA[private readonly List<AuthenticationSettingsBase> _settingControls = new List<AuthenticationSettingsBase>();]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdUpdate">
          <declaration><![CDATA[protected LinkButton cmdUpdate;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="pnlSettings">
          <declaration><![CDATA[protected Panel pnlSettings;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="Login">
      <declaration><![CDATA[public class Login : UserModuleBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private readonly List<AuthenticationLoginBase> _loginControls = new List<AuthenticationLoginBase>();]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="77" sc="3" el="79" ec="91">DesktopModules\Admin\Authentication\Login.ascx.cs</location>
            <body hash="175988c6b8a5c17609fc3ed962533c82"><![CDATA[private readonly List<AuthenticationLoginBase> _loginControls = new List<AuthenticationLoginBase>();
        private readonly  List<AuthenticationLoginBase> _defaultauthLogin = new List<AuthenticationLoginBase>();
        private readonly List<OAuthLoginBase> _oAuthControls = new List<OAuthLoginBase>();]]></body>
          </codeblock>
        </constructor>
        <constructor name=".cctor">
          <declaration><![CDATA[static Login()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="70" sc="3" el="73" ec="62">DesktopModules\Admin\Authentication\Login.ascx.cs</location>
            <body hash="82190f4b3ec788fb4e979486608a55ec"><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof (Login));

        private static readonly Regex UserLanguageRegex = new Regex("(.*)(&|\\?)(language=)([^&\\?]+)(.*)",
            RegexOptions.IgnoreCase | RegexOptions.Compiled);]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="AddLoginControlAttributes">
          <declaration><![CDATA[private void AddLoginControlAttributes(AuthenticationLoginBase loginControl)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="340" sc="3" el="353" ec="4">DesktopModules\Admin\Authentication\Login.ascx.cs</location>
            <body hash="efa71ec3e8dab331a26b6c2b7b1121ab"><![CDATA[{
			//search selected authentication control for username and password fields
			//and inject autocomplete=off so browsers do not remember sensitive details
			var username = loginControl.FindControl("txtUsername") as WebControl;
			if (username != null)
			{
				username.Attributes.Add("AUTOCOMPLETE", "off");
			}
			var password = loginControl.FindControl("txtPassword") as WebControl;
			if (password != null)
			{
				password.Attributes.Add("AUTOCOMPLETE", "off");
			}
		}]]></body>
          </codeblock>
        </method>
        <method name="BindLogin">
          <declaration><![CDATA[private void BindLogin()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="356" sc="9" el="452" ec="10">DesktopModules\Admin\Authentication\Login.ascx.cs</location>
            <body hash="d1f6effc5deef452199058b38adfe651"><![CDATA[{
            List<AuthenticationInfo> authSystems = AuthenticationController.GetEnabledAuthenticationServices();
            AuthenticationLoginBase defaultLoginControl = null;
            var defaultAuthProvider = PortalController.GetPortalSetting("DefaultAuthProvider", PortalId, "DNN");
            foreach (AuthenticationInfo authSystem in authSystems)
            {
                try
                {
                    //Figure out if known Auth types are enabled (so we can improve perf and stop loading the control)
                    bool enabled = true;
                    if (authSystem.AuthenticationType == "Facebook" || authSystem.AuthenticationType == "Google"
                        || authSystem.AuthenticationType == "Live" || authSystem.AuthenticationType == "Twitter")
                    {
                        enabled = PortalController.GetPortalSettingAsBoolean(authSystem.AuthenticationType + "_Enabled", PortalId, false);
                    }

                    if (enabled)
                    {
                        var authLoginControl = (AuthenticationLoginBase)LoadControl("~/" + authSystem.LoginControlSrc);
                        BindLoginControl(authLoginControl, authSystem);
                        if (authSystem.AuthenticationType == "DNN")
                        {
                            defaultLoginControl = authLoginControl;
                        }

                        //Check if AuthSystem is Enabled
                        if (authLoginControl.Enabled)
                        {
                            var oAuthLoginControl = authLoginControl as OAuthLoginBase;
                            if (oAuthLoginControl != null)
                            {
                                //Add Login Control to List
                                _oAuthControls.Add(oAuthLoginControl);
                            }
                            else
                            {
                                if (authLoginControl.AuthenticationType == defaultAuthProvider)
                                {
                                    _defaultauthLogin.Add(authLoginControl);
                                }
                                else
                                {
                                    //Add Login Control to List
                                    _loginControls.Add(authLoginControl);
                                }
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    Exceptions.LogException(ex);
                }
            }
            int authCount = _loginControls.Count + _defaultauthLogin.Count;
            switch (authCount)
            {
                case 0:
                    //No enabled controls - inject default dnn control
                    if (defaultLoginControl == null)
                    {
                        //No controls enabled for portal, and default DNN control is not enabled by host, so load system default (DNN)
                        AuthenticationInfo authSystem = AuthenticationController.GetAuthenticationServiceByType("DNN");
                        var authLoginControl = (AuthenticationLoginBase)LoadControl("~/" + authSystem.LoginControlSrc);
                        BindLoginControl(authLoginControl, authSystem);
                        DisplayLoginControl(authLoginControl, false, false);
                    }
                    else
                    {
                        //if there are social authprovider only
                        if (_oAuthControls.Count == 0)
                        //Portal has no login controls enabled so load default DNN control
                        DisplayLoginControl(defaultLoginControl, false, false);
                    }
                    break;
                case 1:
                    //We don't want the control to render with tabbed interface
                    DisplayLoginControl(_defaultauthLogin.Count == 1 
                                            ? _defaultauthLogin[0] 
                                            : _loginControls.Count == 1 
                                                ? _loginControls[0] 
                                                : _oAuthControls[0], 
                                        false,
                                        false);
                    break;
                default:
                    //make sure defaultAuth provider control is diplayed first
                    if (_defaultauthLogin.Count>0) DisplayTabbedLoginControl(_defaultauthLogin[0], tsLogin.Tabs);
                    foreach (AuthenticationLoginBase authLoginControl in _loginControls)
                    {
                        DisplayTabbedLoginControl(authLoginControl, tsLogin.Tabs);
                    }

                    break;
            }
            BindOAuthControls();
        }]]></body>
          </codeblock>
        </method>
        <method name="BindLoginControl">
          <declaration><![CDATA[private void BindLoginControl(AuthenticationLoginBase authLoginControl, AuthenticationInfo authSystem)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="463" sc="9" el="480" ec="10">DesktopModules\Admin\Authentication\Login.ascx.cs</location>
            <body hash="2b340ec424bdb02e5186e1c1435ea88c"><![CDATA[{
            //set the control ID to the resource file name ( ie. controlname.ascx = controlname )
            //this is necessary for the Localization in PageBase
            authLoginControl.AuthenticationType = authSystem.AuthenticationType;
            authLoginControl.ID = Path.GetFileNameWithoutExtension(authSystem.LoginControlSrc) + "_" + authSystem.AuthenticationType;
            authLoginControl.LocalResourceFile = authLoginControl.TemplateSourceDirectory + "/" + Localization.LocalResourceDirectory + "/" +
                                                 Path.GetFileNameWithoutExtension(authSystem.LoginControlSrc);
            authLoginControl.RedirectURL = RedirectURL;
            authLoginControl.ModuleConfiguration = ModuleConfiguration;
            if (authSystem.AuthenticationType != "DNN")
            {
                authLoginControl.ViewStateMode = ViewStateMode.Enabled;
            }

            //attempt to inject control attributes
            AddLoginControlAttributes(authLoginControl);
            authLoginControl.UserAuthenticated += UserAuthenticated;
        }]]></body>
          </codeblock>
        </method>
        <method name="BindOAuthControls">
          <declaration><![CDATA[private void BindOAuthControls()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="455" sc="9" el="460" ec="10">DesktopModules\Admin\Authentication\Login.ascx.cs</location>
            <body hash="5cc419f8a95ced152ecc3091e804a585"><![CDATA[{
            foreach (OAuthLoginBase oAuthLoginControl in _oAuthControls)
            {
                socialLoginControls.Controls.Add(oAuthLoginControl);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="BindRegister">
          <declaration><![CDATA[private void BindRegister()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="483" sc="3" el="530" ec="4">DesktopModules\Admin\Authentication\Login.ascx.cs</location>
            <body hash="8b05348ab1029f21ba20aae9ce679b0d"><![CDATA[{
			lblType.Text = AuthenticationType;
			lblToken.Text = UserToken;

			//Verify that the current user has access to this page
			if (PortalSettings.UserRegistration == (int) Globals.PortalRegistrationType.NoRegistration && Request.IsAuthenticated == false)
			{
				Response.Redirect(Globals.NavigateURL("Access Denied"), true);
			}
			lblRegisterHelp.Text = Localization.GetSystemMessage(PortalSettings, "MESSAGE_REGISTRATION_INSTRUCTIONS");
			switch (PortalSettings.UserRegistration)
			{
				case (int) Globals.PortalRegistrationType.PrivateRegistration:
					lblRegisterHelp.Text += Localization.GetString("PrivateMembership", Localization.SharedResourceFile);
					break;
				case (int) Globals.PortalRegistrationType.PublicRegistration:
					lblRegisterHelp.Text += Localization.GetString("PublicMembership", Localization.SharedResourceFile);
					break;
				case (int) Globals.PortalRegistrationType.VerifiedRegistration:
					lblRegisterHelp.Text += Localization.GetString("VerifiedMembership", Localization.SharedResourceFile);
					break;
			}
			if (AutoRegister)
			{
				InitialiseUser();
			}
			bool UserValid = true;
			if (string.IsNullOrEmpty(User.Username) || string.IsNullOrEmpty(User.Email) || string.IsNullOrEmpty(User.FirstName) || string.IsNullOrEmpty(User.LastName))
			{
				UserValid = Null.NullBoolean;
			}
			if (AutoRegister && UserValid)
			{
				ctlUser.Visible = false;
				lblRegisterTitle.Text = Localization.GetString("CreateTitle", LocalResourceFile);
				cmdCreateUser.Text = Localization.GetString("cmdCreate", LocalResourceFile);
			}
			else
			{
				lblRegisterHelp.Text += Localization.GetString("Required", Localization.SharedResourceFile);
				lblRegisterTitle.Text = Localization.GetString("RegisterTitle", LocalResourceFile);
				cmdCreateUser.Text = Localization.GetString("cmdRegister", LocalResourceFile);
				ctlUser.ShowPassword = false;
				ctlUser.ShowUpdate = false;
				ctlUser.User = User;
				ctlUser.DataBind();
			}
		}]]></body>
          </codeblock>
        </method>
        <method name="cmdAssociate_Click">
          <declaration><![CDATA[protected void cmdAssociate_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1032" sc="3" el="1059" ec="4">DesktopModules\Admin\Authentication\Login.ascx.cs</location>
            <body hash="4f896981db5d93ae1f06e1bdc9016b1c"><![CDATA[{
			if ((UseCaptcha && ctlCaptcha.IsValid) || (!UseCaptcha))
			{
				UserLoginStatus loginStatus = UserLoginStatus.LOGIN_FAILURE;
				UserInfo objUser = UserController.ValidateUser(PortalId,
															   txtUsername.Text,
															   txtPassword.Text,
															   "DNN",
															   "",
															   PortalSettings.PortalName,
															   AuthenticationLoginBase.GetIPAddress(),
															   ref loginStatus);
				if (loginStatus == UserLoginStatus.LOGIN_SUCCESS)
				{
					//Assocate alternate Login with User and proceed with Login
					AuthenticationController.AddUserAuthentication(objUser.UserID, AuthenticationType, UserToken);
					if (objUser != null)
					{
						UpdateProfile(objUser, true);
					}
					ValidateUser(objUser, true);
				}
				else
				{
					AddModuleMessage("AssociationFailed", ModuleMessage.ModuleMessageType.RedError, true);
				}
			}
		}]]></body>
          </codeblock>
        </method>
        <method name="cmdCreateUser_Click">
          <declaration><![CDATA[protected void cmdCreateUser_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1067" sc="3" el="1087" ec="4">DesktopModules\Admin\Authentication\Login.ascx.cs</location>
            <body hash="cb5194f07e14d479ee4ec3b9abe3f846"><![CDATA[{
			User.Membership.Password = UserController.GeneratePassword();

			if (AutoRegister)
			{
				ctlUser.User = User;

				//Call the Create User method of the User control so that it can create
				//the user and raise the appropriate event(s)
				ctlUser.CreateUser();
			}
			else
			{
				if (ctlUser.IsValid)
				{
					//Call the Create User method of the User control so that it can create
					//the user and raise the appropriate event(s)
					ctlUser.CreateUser();
				}
			}
		}]]></body>
          </codeblock>
        </method>
        <method name="cmdProceed_Click">
          <declaration><![CDATA[protected void cmdProceed_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1095" sc="3" el="1098" ec="4">DesktopModules\Admin\Authentication\Login.ascx.cs</location>
            <body hash="4f242b3e5891641f97466a622e19007c"><![CDATA[{
			var user = ctlPassword.User;
			ValidateUser(user, true);
		}]]></body>
          </codeblock>
        </method>
        <method name="DisplayLoginControl">
          <declaration><![CDATA[private void DisplayLoginControl(AuthenticationLoginBase authLoginControl, bool addHeader, bool addFooter)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="533" sc="9" el="565" ec="10">DesktopModules\Admin\Authentication\Login.ascx.cs</location>
            <body hash="e14c568218994561e68833807ba19be8"><![CDATA[{
            //Create a <div> to hold the control
            var container = new HtmlGenericControl { TagName = "div", ID = authLoginControl.AuthenticationType, ViewStateMode = ViewStateMode.Disabled};

            //Add Settings Control to Container
            container.Controls.Add(authLoginControl);

            //Add a Section Header
            SectionHeadControl sectionHeadControl;
            if (addHeader)
            {
                sectionHeadControl = (SectionHeadControl)LoadControl("~/controls/SectionHeadControl.ascx");
                sectionHeadControl.IncludeRule = true;
                sectionHeadControl.CssClass = "Head";
                sectionHeadControl.Text = Localization.GetString("Title", authLoginControl.LocalResourceFile);

                sectionHeadControl.Section = container.ID;

                //Add Section Head Control to Container
                pnlLoginContainer.Controls.Add(sectionHeadControl);
            }

            //Add Container to Controls
            pnlLoginContainer.Controls.Add(container);


            //Add LineBreak
            if (addFooter)
            {
                pnlLoginContainer.Controls.Add(new LiteralControl("<br />"));
            }
            pnlLoginContainer.Visible = true;
        }]]></body>
          </codeblock>
        </method>
        <method name="DisplayTabbedLoginControl">
          <declaration><![CDATA[private void DisplayTabbedLoginControl(AuthenticationLoginBase authLoginControl, TabStripTabCollection Tabs)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="568" sc="9" el="575" ec="10">DesktopModules\Admin\Authentication\Login.ascx.cs</location>
            <body hash="d4843f4f36c97c767dff16de58cc4b4e"><![CDATA[{
            var tab = new DNNTab(Localization.GetString("Title", authLoginControl.LocalResourceFile)) { ID = authLoginControl.AuthenticationType };
            
            tab.Controls.Add(authLoginControl);
            Tabs.Add(tab);
            
            tsLogin.Visible = true;
        }]]></body>
          </codeblock>
        </method>
        <method name="GenerateUserName">
          <declaration><![CDATA[private string GenerateUserName()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="611" sc="9" el="687" ec="10">DesktopModules\Admin\Authentication\Login.ascx.cs</location>
            <body hash="63b1d77876e3cbb8ec4184ac489093c6"><![CDATA[{
            //Try the best username. Default it to UserToken
            var userName = UserToken.Replace("http://", "").TrimEnd('/');

            //Try Email prefix
            var emailPrefix = string.Empty;
            if (!string.IsNullOrEmpty(User.Email))
            {                
                if (User.Email.IndexOf("@", StringComparison.Ordinal) != -1)
                {
                    emailPrefix = User.Email.Substring(0, User.Email.IndexOf("@", StringComparison.Ordinal));
                    var user = UserController.GetUserByName(PortalId, emailPrefix);
                    if (user == null)
                    {
                        return emailPrefix;
                    }
                }
            }

            //Try First Name
            if (!string.IsNullOrEmpty(User.FirstName))
            {
                var user = UserController.GetUserByName(PortalId, User.FirstName);
                if (user == null)
                {
                    return User.FirstName;
                }
            }

            //Try Last Name
            if (!string.IsNullOrEmpty(User.LastName))
            {
                var user = UserController.GetUserByName(PortalId, User.LastName);
                if (user == null)
                {
                    return User.LastName;
                }
            }

            //Try First Name + space + First letter last name            
            if (!string.IsNullOrEmpty(User.LastName) && !string.IsNullOrEmpty(User.FirstName))
            {
                var newUserName = User.FirstName + " " + User.LastName.Substring(0,1);
                var user = UserController.GetUserByName(PortalId, newUserName);
                if (user == null)
                {
                    return newUserName;
                }
            }

            //Try First letter of First Name + lastname
            if (!string.IsNullOrEmpty(User.LastName) && !string.IsNullOrEmpty(User.FirstName))
            {
                var newUserName = User.FirstName.Substring(0, 1) + User.LastName;
                var user = UserController.GetUserByName(PortalId, newUserName);
                if (user == null)
                {
                    return newUserName;
                }
            }

            //Try Email Prefix + incremental numbers until unique name found
            if (!string.IsNullOrEmpty(emailPrefix))
            {
                for (var i = 1; i < 10000; i++)
                {
                    var newUserName = emailPrefix + i;
                    var user = UserController.GetUserByName(PortalId, newUserName);
                    if (user == null)
                    {
                        return newUserName;
                    }
                }
            }

            return userName;
        }]]></body>
          </codeblock>
        </method>
        <method name="InitialiseUser">
          <declaration><![CDATA[private void InitialiseUser()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="578" sc="3" el="608" ec="4">DesktopModules\Admin\Authentication\Login.ascx.cs</location>
            <body hash="5a2405a645dcdf2f459e630373fab1a6"><![CDATA[{
			//Load any Profile properties that may have been returned
			UpdateProfile(User, false);

            //Set UserName to authentication Token            
            User.Username = GenerateUserName();

			//Set DisplayName to UserToken if null
			if (string.IsNullOrEmpty(User.DisplayName))
			{
				User.DisplayName = UserToken.Replace("http://", "").TrimEnd('/');
			}
			
			//Parse DisplayName into FirstName/LastName
			if (User.DisplayName.IndexOf(' ') > 0)
			{
				User.FirstName = User.DisplayName.Substring(0, User.DisplayName.IndexOf(' '));
				User.LastName = User.DisplayName.Substring(User.DisplayName.IndexOf(' ') + 1);
			}
			
			//Set FirstName to Authentication Type (if null)
			if (string.IsNullOrEmpty(User.FirstName))
			{
				User.FirstName = AuthenticationType;
			}
			//Set FirstName to "User" (if null)
			if (string.IsNullOrEmpty(User.LastName))
			{
				User.LastName = "User";
			}
		}]]></body>
          </codeblock>
        </method>
        <method name="LocaleEnabled">
          <declaration><![CDATA[private bool LocaleEnabled(string locale)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="895" sc="3" el="897" ec="4">DesktopModules\Admin\Authentication\Login.ascx.cs</location>
            <body hash="87b67ac9bc1f119b4fff576a7160ff95"><![CDATA[{
			return LocaleController.Instance.GetLocales(PortalSettings.PortalId).ContainsKey(locale);
		}]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="909" sc="3" el="937" ec="4">DesktopModules\Admin\Authentication\Login.ascx.cs</location>
            <body hash="1e4237ab3e62bf39379a7d1ac9a4b6c8"><![CDATA[{
			base.OnInit(e);

			ctlPassword.PasswordUpdated += PasswordUpdated;
			ctlProfile.ProfileUpdated += ProfileUpdated;
			ctlUser.UserCreateCompleted += UserCreateCompleted;

			//Set the User Control Properties
			ctlUser.ID = "User";

			//Set the Profile Control Properties
			ctlPassword.ID = "Password";

			//Set the Profile Control Properties
			ctlProfile.ID = "Profile";

			//Override the redirected page title if page has loaded with ctl=Login
			if (Request.QueryString["ctl"] != null)
			{
				if (Request.QueryString["ctl"].ToLower() == "login")
				{
					var myPage = (CDefault) Page;
					if (myPage.PortalSettings.LoginTabId == TabId || myPage.PortalSettings.LoginTabId == -1)
					{
						myPage.Title = Localization.GetString("ControlTitle_login", LocalResourceFile);
					}
				}
			}
		}]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="945" sc="3" el="1024" ec="4">DesktopModules\Admin\Authentication\Login.ascx.cs</location>
            <body hash="b698131a932c5b2a8e6fdd6d55e20720"><![CDATA[{
			base.OnLoad(e);

			cmdAssociate.Click += cmdAssociate_Click;
			cmdCreateUser.Click += cmdCreateUser_Click;
			cmdProceed.Click += cmdProceed_Click;

			//Verify if portal has a customized login page
			if (!Null.IsNull(PortalSettings.LoginTabId) && Globals.IsAdminControl())
			{
				if (Globals.ValidateLoginTabID(PortalSettings.LoginTabId))
				{
					//login page exists and trying to access this control directly with url param -> not allowed
					var parameters = new string[3];
					if (!string.IsNullOrEmpty(Request.QueryString["returnUrl"]))
					{
						parameters[0] = "returnUrl=" + Request.QueryString["returnUrl"];
					}
					if (!string.IsNullOrEmpty(Request.QueryString["username"]))
					{
						parameters[1] = "username=" + Request.QueryString["username"];
					}
					if (!string.IsNullOrEmpty(Request.QueryString["verificationcode"]))
					{
						parameters[2] = "verificationcode=" + Request.QueryString["verificationcode"];
					}
					Response.Redirect(Globals.NavigateURL(PortalSettings.LoginTabId, "", parameters));
				}
			}
			if (Page.IsPostBack == false)
			{
				try
				{
					PageNo = 0;
				}
				catch (Exception ex)
				{
					//control not there 
					Logger.Error(ex);
				}
			}
			if (!Request.IsAuthenticated || UserNeedsVerification())
			{
				ShowPanel();
			}
			else //user is already authenticated
			{
				//if a Login Page has not been specified for the portal
				if (Globals.IsAdminControl())
				{
                    //redirect browser 
                    Response.Redirect(RedirectURL, true);
				}
				else //make module container invisible if user is not a page admin
				{
                    var path = RedirectURL.Split('?')[0];
                    if (path != Globals.NavigateURL() && path != Globals.NavigateURL(PortalSettings.HomeTabId))
                    {
                        Response.Redirect(RedirectURL, true);
                    }

					if (TabPermissionController.CanAdminPage())
					{
						ShowPanel();
					}
					else
					{
						ContainerControl.Visible = false;
					}
				}
			}
			divCaptcha.Visible = UseCaptcha;

			if (UseCaptcha)
			{
				ctlCaptcha.ErrorMessage = Localization.GetString("InvalidCaptcha", Localization.SharedResourceFile);
				ctlCaptcha.Text = Localization.GetString("CaptchaText", Localization.SharedResourceFile);
			}

		}]]></body>
          </codeblock>
        </method>
        <method name="PasswordUpdated">
          <declaration><![CDATA[protected void PasswordUpdated(object sender, Password.PasswordUpdatedEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1106" sc="3" el="1124" ec="4">DesktopModules\Admin\Authentication\Login.ascx.cs</location>
            <body hash="4e9eae9a37a7a197899d786893c2fc9d"><![CDATA[{
			PasswordUpdateStatus status = e.UpdateStatus;
			if (status == PasswordUpdateStatus.Success)
			{
				AddModuleMessage("PasswordChanged", ModuleMessage.ModuleMessageType.GreenSuccess, true);
				var user = ctlPassword.User;
				user.Membership.LastPasswordChangeDate = DateTime.Now;
				user.Membership.UpdatePassword = false;
				LoginStatus = user.IsSuperUser ? UserLoginStatus.LOGIN_SUPERUSER : UserLoginStatus.LOGIN_SUCCESS;
				UserLoginStatus userstatus = UserLoginStatus.LOGIN_FAILURE;
				UserController.CheckInsecurePassword(user.Username, user.Membership.Password, ref userstatus);
				LoginStatus = userstatus;
				ValidateUser(user, true);
			}
			else
			{
				AddModuleMessage(status.ToString(), ModuleMessage.ModuleMessageType.RedError, true);
			}
		}]]></body>
          </codeblock>
        </method>
        <method name="ProfileUpdated">
          <declaration><![CDATA[protected void ProfileUpdated(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1130" sc="3" el="1133" ec="4">DesktopModules\Admin\Authentication\Login.ascx.cs</location>
            <body hash="f6fe6eb2668e1715c2fb63d00e9da362"><![CDATA[{
			//Authorize User
			ValidateUser(ctlProfile.User, true);
		}]]></body>
          </codeblock>
        </method>
        <method name="ReplaceLanguage">
          <declaration><![CDATA[private static string ReplaceLanguage(string Url, string originalLanguage, string newLanguage)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="258" sc="9" el="263" ec="10">DesktopModules\Admin\Authentication\Login.ascx.cs</location>
            <body hash="8e4fa4ae17cce0a3b78e57826f5f7ef5"><![CDATA[{
            var returnValue = Host.UseFriendlyUrls
                ? Regex.Replace(Url, "(.*)(/" + originalLanguage + "/)(.*)", "$1/" + newLanguage + "/$3", RegexOptions.IgnoreCase)
                : UserLanguageRegex.Replace(Url, "$1$2$3" + newLanguage + "$5");
            return returnValue;
        }]]></body>
          </codeblock>
        </method>
        <method name="ShowPanel">
          <declaration><![CDATA[private void ShowPanel()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="695" sc="3" el="727" ec="4">DesktopModules\Admin\Authentication\Login.ascx.cs</location>
            <body hash="b28bb2c7e7804c3341d1359430b1a516"><![CDATA[{
			bool showLogin = (PageNo == 0);
			bool showRegister = (PageNo == 1);
			bool showPassword = (PageNo == 2);
			bool showProfile = (PageNo == 3);
			pnlProfile.Visible = showProfile;
			pnlPassword.Visible = showPassword;
			pnlLogin.Visible = showLogin;
			pnlRegister.Visible = showRegister;
			pnlAssociate.Visible = showRegister;
			switch (PageNo)
			{
				case 0:
					BindLogin();
					break;
				case 1:
					BindRegister();
					break;
				case 2:
					ctlPassword.UserId = UserId;
					ctlPassword.DataBind();
					break;
				case 3:
					ctlProfile.UserId = UserId;
					ctlProfile.DataBind();
					break;
			}

            if (showProfile && UrlUtils.InPopUp())
			{
				ScriptManager.RegisterClientScriptBlock(this, GetType(), "ResizePopup", "if(parent.$('#iPopUp').length > 0 && parent.$('#iPopUp').dialog('isOpen')){parent.$('#iPopUp').dialog({width: 950, height: 550}).dialog({position: 'center'});};", true);
			}
		}]]></body>
          </codeblock>
        </method>
        <method name="UpdateProfile">
          <declaration><![CDATA[private void UpdateProfile(UserInfo objUser, bool update)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="730" sc="3" el="780" ec="4">DesktopModules\Admin\Authentication\Login.ascx.cs</location>
            <body hash="9ac7055883f5f58e311c783cf5950ebe"><![CDATA[{
			bool bUpdateUser = false;
			if (ProfileProperties.Count > 0)
			{
				foreach (string key in ProfileProperties)
				{
					switch (key)
					{
						case "FirstName":
							if (objUser.FirstName != ProfileProperties[key])
							{
								objUser.FirstName = ProfileProperties[key];
								bUpdateUser = true;
							}
							break;
						case "LastName":
							if (objUser.LastName != ProfileProperties[key])
							{
								objUser.LastName = ProfileProperties[key];
								bUpdateUser = true;
							}
							break;
						case "Email":
							if (objUser.Email != ProfileProperties[key])
							{
								objUser.Email = ProfileProperties[key];
								bUpdateUser = true;
							}
							break;
						case "DisplayName":
							if (objUser.DisplayName != ProfileProperties[key])
							{
								objUser.DisplayName = ProfileProperties[key];
								bUpdateUser = true;
							}
							break;
						default:
							objUser.Profile.SetProfileProperty(key, ProfileProperties[key]);
							break;
					}
				}
				if (update)
				{
					if (bUpdateUser)
					{
						UserController.UpdateUser(PortalId, objUser);
					}
					ProfileController.UpdateUserProfile(objUser);
				}
			}
		}]]></body>
          </codeblock>
        </method>
        <method name="UserAuthenticated">
          <declaration><![CDATA[protected void UserAuthenticated(object sender, UserAuthenticatedEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1140" sc="3" el="1247" ec="4">DesktopModules\Admin\Authentication\Login.ascx.cs</location>
            <body hash="075d0507b35831fd6a66e2b4d1d906c8"><![CDATA[{
			LoginStatus = e.LoginStatus;

			//Check the Login Status
			switch (LoginStatus)
			{
				case UserLoginStatus.LOGIN_USERNOTAPPROVED:
					switch (e.Message)
					{
                        case "UnverifiedUser":
                            if (e.User != null)
                            {
                                //First update the profile (if any properties have been passed)
                                AuthenticationType = e.AuthenticationType;
                                ProfileProperties = e.Profile;
                                RememberMe = e.RememberMe;
                                UpdateProfile(e.User, true);
                                ValidateUser(e.User, false);
                            }
					        break;
						case "EnterCode":
							AddModuleMessage(e.Message, ModuleMessage.ModuleMessageType.YellowWarning, true);
							break;
						case "InvalidCode":
						case "UserNotAuthorized":
							AddModuleMessage(e.Message, ModuleMessage.ModuleMessageType.RedError, true);
							break;
						default:
							AddLocalizedModuleMessage(e.Message, ModuleMessage.ModuleMessageType.RedError, true);
							break;
					}
					break;
				case UserLoginStatus.LOGIN_USERLOCKEDOUT:
                    if (Host.AutoAccountUnlockDuration > 0)
                    {
                        AddLocalizedModuleMessage(string.Format(Localization.GetString("UserLockedOut", LocalResourceFile), Host.AutoAccountUnlockDuration), ModuleMessage.ModuleMessageType.RedError, true);
                    }
                    else
                    {
                        AddLocalizedModuleMessage(Localization.GetString("UserLockedOut_ContactAdmin", LocalResourceFile), ModuleMessage.ModuleMessageType.RedError, true);
                    }
					//notify administrator about account lockout ( possible hack attempt )
					var Custom = new ArrayList {e.UserToken};

					var message = new Message
									  {
										  FromUserID = PortalSettings.AdministratorId,
										  ToUserID = PortalSettings.AdministratorId,
										  Subject = Localization.GetSystemMessage(PortalSettings, "EMAIL_USER_LOCKOUT_SUBJECT", Localization.GlobalResourceFile, Custom),
										  Body = Localization.GetSystemMessage(PortalSettings, "EMAIL_USER_LOCKOUT_BODY", Localization.GlobalResourceFile, Custom),
										  Status = MessageStatusType.Unread
									  };
					//_messagingController.SaveMessage(_message);

					Mail.SendEmail(PortalSettings.Email, PortalSettings.Email, message.Subject, message.Body);
					break;
				case UserLoginStatus.LOGIN_FAILURE:
					//A Login Failure can mean one of two things:
					//  1 - User was authenticated by the Authentication System but is not "affiliated" with a DNN Account
					//  2 - User was not authenticated
					if (e.Authenticated)
					{
                        AutoRegister = e.AutoRegister;
                        AuthenticationType = e.AuthenticationType;
                        ProfileProperties = e.Profile;
                        UserToken = e.UserToken;
                        if (AutoRegister)
                        {
                            InitialiseUser();
                            User.Membership.Password = UserController.GeneratePassword();

                            ctlUser.User = User;

                            //Call the Create User method of the User control so that it can create
                            //the user and raise the appropriate event(s)
                            ctlUser.CreateUser();
                        }
                        else
                        {
                            PageNo = 1;
                            ShowPanel();
                        }
					}
					else
					{
						if (string.IsNullOrEmpty(e.Message))
						{
							AddModuleMessage("LoginFailed", ModuleMessage.ModuleMessageType.RedError, true);
						}
						else
						{
							AddLocalizedModuleMessage(e.Message, ModuleMessage.ModuleMessageType.RedError, true);
						}
					}
					break;
				default:
					if (e.User != null)
					{
						//First update the profile (if any properties have been passed)
						AuthenticationType = e.AuthenticationType;
						ProfileProperties = e.Profile;
                        RememberMe = e.RememberMe;
						UpdateProfile(e.User, true);
						ValidateUser(e.User, (e.AuthenticationType != "DNN"));
					}
					break;
			}
		}]]></body>
          </codeblock>
        </method>
        <method name="UserCreateCompleted">
          <declaration><![CDATA[protected void UserCreateCompleted(object sender, UserUserControlBase.UserCreatedEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1255" sc="3" el="1282" ec="4">DesktopModules\Admin\Authentication\Login.ascx.cs</location>
            <body hash="52245e905f8e664e16c20aab9f424fad"><![CDATA[{
			var strMessage = "";
			try
			{
				if (e.CreateStatus == UserCreateStatus.Success)
				{
					//Assocate alternate Login with User and proceed with Login
					AuthenticationController.AddUserAuthentication(e.NewUser.UserID, AuthenticationType, UserToken);

					strMessage = CompleteUserCreation(e.CreateStatus, e.NewUser, e.Notify, true);
					if ((string.IsNullOrEmpty(strMessage)))
					{
						//First update the profile (if any properties have been passed)
						UpdateProfile(e.NewUser, true);

						ValidateUser(e.NewUser, true);
					}
				}
				else
				{
					AddLocalizedModuleMessage(UserController.GetUserCreateStatus(e.CreateStatus), ModuleMessage.ModuleMessageType.RedError, true);
				}
			}
			catch (Exception exc) //Module failed to load
			{
				Exceptions.ProcessModuleLoadException(this, exc);
			}
		}]]></body>
          </codeblock>
        </method>
        <method name="UserNeedsVerification">
          <declaration><![CDATA[private bool UserNeedsVerification()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="886" sc="9" el="892" ec="10">DesktopModules\Admin\Authentication\Login.ascx.cs</location>
            <body hash="5d78e5db0e3ef5a869c94faa731490f9"><![CDATA[{
            var userInfo = UserController.Instance.GetCurrentUserInfo();

            return !userInfo.IsSuperUser && userInfo.IsInRole("Unverified Users") &&
                PortalSettings.UserRegistration == (int)Globals.PortalRegistrationType.VerifiedRegistration &&
                !string.IsNullOrEmpty(Request.QueryString["verificationcode"]);
        }]]></body>
          </codeblock>
        </method>
        <method name="ValidateUser">
          <declaration><![CDATA[private void ValidateUser(UserInfo objUser, bool ignoreExpiring)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="791" sc="3" el="883" ec="4">DesktopModules\Admin\Authentication\Login.ascx.cs</location>
            <body hash="628928333318c82d10e44fa81b1e54f8"><![CDATA[{
			UserValidStatus validStatus = UserValidStatus.VALID;
			string strMessage = Null.NullString;
			DateTime expiryDate = Null.NullDate;
		    bool okToShowPanel = true;

			validStatus = UserController.ValidateUser(objUser, PortalId, ignoreExpiring);

			if (PasswordConfig.PasswordExpiry > 0)
			{
				expiryDate = objUser.Membership.LastPasswordChangeDate.AddDays(PasswordConfig.PasswordExpiry);
			}
			UserId = objUser.UserID;

			//Check if the User has valid Password/Profile
			switch (validStatus)
			{
				case UserValidStatus.VALID:
                    //check if the user is an admin/host and validate their IP
                    if (Host.EnableIPChecking)
                    {
                        bool isAdminUser = objUser.IsSuperUser || PortalSettings.UserInfo.IsInRole(PortalSettings.AdministratorRoleName); ;
                        if (isAdminUser) 
                        {
                            if (IPFilterController.Instance.IsIPBanned(Request.UserHostAddress))
                            {
                                new PortalSecurity().SignOut();
                                AddModuleMessage("IPAddressBanned", ModuleMessage.ModuleMessageType.RedError, true);
                                okToShowPanel = false;
                                break;
                            }
                        }
                    }

					//Set the Page Culture(Language) based on the Users Preferred Locale
					if ((objUser.Profile != null) && (objUser.Profile.PreferredLocale != null) && LocaleEnabled(objUser.Profile.PreferredLocale))
					{
						Localization.SetLanguage(objUser.Profile.PreferredLocale);
					}
					else
					{
						Localization.SetLanguage(PortalSettings.DefaultLanguage);
					}
					
					//Set the Authentication Type used 
					AuthenticationController.SetAuthenticationType(AuthenticationType);

					//Complete Login
                    UserController.UserLogin(PortalId, objUser, PortalSettings.PortalName, AuthenticationLoginBase.GetIPAddress(), RememberMe);

					//redirect browser
			        var redirectUrl = RedirectURL;

                    //Clear the cookie
                    HttpContext.Current.Response.Cookies.Set(new HttpCookie("returnurl", "")
                    {
                        Expires = DateTime.Now.AddDays(-1),
                        Path = (!string.IsNullOrEmpty(Globals.ApplicationPath) ? Globals.ApplicationPath : "/")
                    });

                    Response.Redirect(redirectUrl, true);
					break;
				case UserValidStatus.PASSWORDEXPIRED:
					strMessage = string.Format(Localization.GetString("PasswordExpired", LocalResourceFile), expiryDate.ToLongDateString());
					AddLocalizedModuleMessage(strMessage, ModuleMessage.ModuleMessageType.YellowWarning, true);
					PageNo = 2;
					pnlProceed.Visible = false;
					break;
				case UserValidStatus.PASSWORDEXPIRING:
					strMessage = string.Format(Localization.GetString("PasswordExpiring", LocalResourceFile), expiryDate.ToLongDateString());
					AddLocalizedModuleMessage(strMessage, ModuleMessage.ModuleMessageType.YellowWarning, true);
					PageNo = 2;
					pnlProceed.Visible = true;
					break;
				case UserValidStatus.UPDATEPASSWORD:
					var portalAlias = Globals.AddHTTP(PortalSettings.PortalAlias.HTTPAlias);
					var redirTo = string.Format("{0}/default.aspx?ctl=PasswordReset&resetToken={1}&forced=true", portalAlias, objUser.PasswordResetToken);
			        Response.Redirect(redirTo);
					break;
				case UserValidStatus.UPDATEPROFILE:
					//Save UserID in ViewState so that can update profile later.
					UserId = objUser.UserID;

					//When the user need update its profile to complete login, we need clear the login status because if the logrin is from
					//3rd party login provider, it may call UserController.UserLogin because they doesn't check this situation.
					new PortalSecurity().SignOut();
					//Admin has forced profile update
					AddModuleMessage("ProfileUpdate", ModuleMessage.ModuleMessageType.YellowWarning, true);
					PageNo = 3;
					break;
			}
		    if (okToShowPanel) ShowPanel();
		}]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_defaultauthLogin">
          <declaration><![CDATA[private readonly List<AuthenticationLoginBase> _defaultauthLogin = new List<AuthenticationLoginBase>();]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_loginControls">
          <declaration><![CDATA[private readonly List<AuthenticationLoginBase> _loginControls = new List<AuthenticationLoginBase>();]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_oAuthControls">
          <declaration><![CDATA[private readonly List<OAuthLoginBase> _oAuthControls = new List<OAuthLoginBase>();]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdAssociate">
          <declaration><![CDATA[protected LinkButton cmdAssociate;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdCreateUser">
          <declaration><![CDATA[protected LinkButton cmdCreateUser;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdProceed">
          <declaration><![CDATA[protected CommandButton cmdProceed;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ctlCaptcha">
          <declaration><![CDATA[protected CaptchaControl ctlCaptcha;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ctlPassword">
          <declaration><![CDATA[protected Password ctlPassword;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ctlProfile">
          <declaration><![CDATA[protected DNNProfile ctlProfile;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ctlUser">
          <declaration><![CDATA[protected DotNetNuke.Modules.Admin.Users.User ctlUser;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="divCaptcha">
          <declaration><![CDATA[protected HtmlGenericControl divCaptcha;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblAssociateHelp">
          <declaration><![CDATA[protected Label lblAssociateHelp;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblAssociateTitle">
          <declaration><![CDATA[protected Label lblAssociateTitle;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblAuthenticatedHelp">
          <declaration><![CDATA[protected Label lblAuthenticatedHelp;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblAuthenticatedTitle">
          <declaration><![CDATA[protected Label lblAuthenticatedTitle;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblRegisterHelp">
          <declaration><![CDATA[protected Label lblRegisterHelp;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblRegisterTitle">
          <declaration><![CDATA[protected Label lblRegisterTitle;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblToken">
          <declaration><![CDATA[protected Label lblToken;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblType">
          <declaration><![CDATA[protected Label lblType;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Logger">
          <declaration><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof(Login));]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plCaptcha">
          <declaration><![CDATA[protected LabelControl plCaptcha;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plPassword">
          <declaration><![CDATA[protected LabelControl plPassword;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plToken">
          <declaration><![CDATA[protected LabelControl plToken;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plType">
          <declaration><![CDATA[protected LabelControl plType;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plUsername">
          <declaration><![CDATA[protected LabelControl plUsername;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="pnlAssociate">
          <declaration><![CDATA[protected Panel pnlAssociate;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="pnlLogin">
          <declaration><![CDATA[protected Panel pnlLogin;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="pnlLoginContainer">
          <declaration><![CDATA[protected Panel pnlLoginContainer;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="pnlPassword">
          <declaration><![CDATA[protected Panel pnlPassword;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="pnlProceed">
          <declaration><![CDATA[protected Panel pnlProceed;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="pnlProfile">
          <declaration><![CDATA[protected Panel pnlProfile;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="pnlRegister">
          <declaration><![CDATA[protected Panel pnlRegister;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="socialLoginControls">
          <declaration><![CDATA[protected PlaceHolder socialLoginControls;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="tsLogin">
          <declaration><![CDATA[protected DNNTabStrip tsLogin;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtPassword">
          <declaration><![CDATA[protected TextBox txtPassword;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtUsername">
          <declaration><![CDATA[protected TextBox txtUsername;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="UserLanguageRegex">
          <declaration><![CDATA[private static readonly Regex UserLanguageRegex = new Regex("(.*)(&|\\?)(language=)([^&\\?]+)(.*)", RegexOptions.IgnoreCase | RegexOptions.Compiled);]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="AuthenticationType">
          <declaration><![CDATA[protected string AuthenticationType]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="91" sc="4" el="98" ec="5">DesktopModules\Admin\Authentication\Login.ascx.cs</location>
            <body hash="c87e38f5f62182265390b38207daa810"><![CDATA[{
				var authenticationType = Null.NullString;
				if (ViewState["AuthenticationType"] != null)
				{
					authenticationType = Convert.ToString(ViewState["AuthenticationType"]);
				}
				return authenticationType;
			}]]></body>
          </codeblock>
          <codeblock>
            <location sl="100" sc="4" el="102" ec="5">DesktopModules\Admin\Authentication\Login.ascx.cs</location>
            <body hash="e1c5b3b58961b2fa9930ed04459214d8"><![CDATA[{
				ViewState["AuthenticationType"] = value;
			}]]></body>
          </codeblock>
        </property>
        <property name="AutoRegister">
          <declaration><![CDATA[protected bool AutoRegister]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="111" sc="4" el="118" ec="5">DesktopModules\Admin\Authentication\Login.ascx.cs</location>
            <body hash="30bd4406d801c97e54700f35f879e5fb"><![CDATA[{
				var autoRegister = Null.NullBoolean;
				if (ViewState["AutoRegister"] != null)
				{
					autoRegister = Convert.ToBoolean(ViewState["AutoRegister"]);
				}
				return autoRegister;
			}]]></body>
          </codeblock>
          <codeblock>
            <location sl="120" sc="4" el="122" ec="5">DesktopModules\Admin\Authentication\Login.ascx.cs</location>
            <body hash="ff41970e98b0a997373fde2ee5fd4cb7"><![CDATA[{
				ViewState["AutoRegister"] = value;
			}]]></body>
          </codeblock>
        </property>
        <property name="LoginStatus">
          <declaration><![CDATA[protected UserLoginStatus LoginStatus]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="301" sc="4" el="308" ec="5">DesktopModules\Admin\Authentication\Login.ascx.cs</location>
            <body hash="54fdde19b13347fca579480091740b7b"><![CDATA[{
				UserLoginStatus loginStatus = UserLoginStatus.LOGIN_FAILURE;
				if (ViewState["LoginStatus"] != null)
				{
					loginStatus = (UserLoginStatus) ViewState["LoginStatus"];
				}
				return loginStatus;
			}]]></body>
          </codeblock>
          <codeblock>
            <location sl="310" sc="4" el="312" ec="5">DesktopModules\Admin\Authentication\Login.ascx.cs</location>
            <body hash="1b7cbec89c3fc7c776ec6924e7ecb21b"><![CDATA[{
				ViewState["LoginStatus"] = value;
			}]]></body>
          </codeblock>
        </property>
        <property name="PageNo">
          <declaration><![CDATA[protected int PageNo]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="148" sc="4" el="155" ec="5">DesktopModules\Admin\Authentication\Login.ascx.cs</location>
            <body hash="b5621a7b2c81f6b8258043b92669b5b7"><![CDATA[{
				var pageNo = 0;
				if (ViewState["PageNo"] != null)
				{
					pageNo = Convert.ToInt32(ViewState["PageNo"]);
				}
				return pageNo;
			}]]></body>
          </codeblock>
          <codeblock>
            <location sl="157" sc="4" el="159" ec="5">DesktopModules\Admin\Authentication\Login.ascx.cs</location>
            <body hash="771257e362a714ef6e42d9efa4925ba8"><![CDATA[{
				ViewState["PageNo"] = value;
			}]]></body>
          </codeblock>
        </property>
        <property name="ProfileProperties">
          <declaration><![CDATA[protected NameValueCollection ProfileProperties]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="128" sc="4" el="135" ec="5">DesktopModules\Admin\Authentication\Login.ascx.cs</location>
            <body hash="7d53fa1a16c0610bcd6328f6fda725c9"><![CDATA[{
				var profile = new NameValueCollection();
				if (ViewState["ProfileProperties"] != null)
				{
					profile = (NameValueCollection) ViewState["ProfileProperties"];
				}
				return profile;
			}]]></body>
          </codeblock>
          <codeblock>
            <location sl="137" sc="4" el="139" ec="5">DesktopModules\Admin\Authentication\Login.ascx.cs</location>
            <body hash="2dada4eb3398dfc8d0c644bea583937b"><![CDATA[{
				ViewState["ProfileProperties"] = value;
			}]]></body>
          </codeblock>
        </property>
        <property name="RedirectURL">
          <declaration><![CDATA[protected string RedirectURL]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="168" sc="4" el="247" ec="5">DesktopModules\Admin\Authentication\Login.ascx.cs</location>
            <body hash="8f6001a905c43e6f84622271fdacb1e8"><![CDATA[{
				var redirectURL = "";

				var setting = GetSetting(PortalId, "Redirect_AfterLogin");
                
                //first we need to check if there is a returnurl
				if (Request.QueryString["returnurl"] != null)
				{
					//return to the url passed to signin
                    redirectURL = HttpUtility.UrlDecode(Request.QueryString["returnurl"]);

                    //clean the return url to avoid possible XSS attack.
                    redirectURL = UrlUtils.ValidReturnUrl(redirectURL);
                }
                if (Request.Cookies["returnurl"] != null)
                {
                    //return to the url passed to signin
                    redirectURL = HttpUtility.UrlDecode(Request.Cookies["returnurl"].Value);

                    //clean the return url to avoid possible XSS attack.
                    redirectURL = UrlUtils.ValidReturnUrl(redirectURL);
                }
                if (Request.Params["appctx"] != null)
				{
					//HACK return to the url passed to signin (LiveID) 
					redirectURL = HttpUtility.UrlDecode(Request.Params["appctx"]);

                    //clean the return url to avoid possible XSS attack.
                    redirectURL = UrlUtils.ValidReturnUrl(redirectURL);
                }
                if (String.IsNullOrEmpty(redirectURL) || redirectURL=="/")
				{
                    if (Convert.ToInt32(setting) != Null.NullInteger)
                    {
                        redirectURL = Globals.NavigateURL(Convert.ToInt32(setting));
                    }
                    else
                    {
                        if (PortalSettings.LoginTabId != -1 && PortalSettings.HomeTabId != -1)
                        {
                            //redirect to portal home page specified
                            redirectURL = Globals.NavigateURL(PortalSettings.HomeTabId);
                        }
                        else
                        {
                            //redirect to current page 
                            redirectURL = Globals.NavigateURL();
                        }
                    }

				}

				
				//replace language parameter in querystring, to make sure that user will see page in correct language
				if (UserId != -1 && User != null)
				{
					if (!String.IsNullOrEmpty(User.Profile.PreferredLocale) 
							&& User.Profile.PreferredLocale != CultureInfo.CurrentCulture.Name
							&& LocaleEnabled(User.Profile.PreferredLocale))
					{
                        redirectURL = ReplaceLanguage(redirectURL, CultureInfo.CurrentCulture.Name, User.Profile.PreferredLocale);
					}
				}
				
				//check for insecure account defaults
				var qsDelimiter = "?";
				if (redirectURL.Contains("?"))
				{
					qsDelimiter = "&";
				}
				if (LoginStatus == UserLoginStatus.LOGIN_INSECUREADMINPASSWORD)
				{
					redirectURL = redirectURL + qsDelimiter + "runningDefault=1";
				}
				else if (LoginStatus == UserLoginStatus.LOGIN_INSECUREHOSTPASSWORD)
				{
					redirectURL = redirectURL + qsDelimiter + "runningDefault=2";
				}
				return redirectURL;
			}]]></body>
          </codeblock>
        </property>
        <property name="RememberMe">
          <declaration><![CDATA[protected bool RememberMe]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="272" sc="13" el="279" ec="14">DesktopModules\Admin\Authentication\Login.ascx.cs</location>
            <body hash="f55b53875523dc8d9e49a0e0ba49ebcb"><![CDATA[{
                var rememberMe = Null.NullBoolean;
                if (ViewState["RememberMe"] != null)
                {
                    rememberMe = Convert.ToBoolean(ViewState["RememberMe"]);
                }
                return rememberMe;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="281" sc="13" el="283" ec="14">DesktopModules\Admin\Authentication\Login.ascx.cs</location>
            <body hash="7b529b935463fe48f906352891a4f760"><![CDATA[{
                ViewState["RememberMe"] = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="UseCaptcha">
          <declaration><![CDATA[protected bool UseCaptcha]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="292" sc="4" el="295" ec="5">DesktopModules\Admin\Authentication\Login.ascx.cs</location>
            <body hash="fa8af3e3f70f93235894822d6097091b"><![CDATA[{
				object setting = GetSetting(PortalId, "Security_CaptchaLogin");
				return Convert.ToBoolean(setting);
			}]]></body>
          </codeblock>
        </property>
        <property name="UserToken">
          <declaration><![CDATA[protected string UserToken]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="321" sc="4" el="328" ec="5">DesktopModules\Admin\Authentication\Login.ascx.cs</location>
            <body hash="58a86a8d348492a3a445d6347b154d95"><![CDATA[{
				var userToken = "";
				if (ViewState["UserToken"] != null)
				{
					userToken = Convert.ToString(ViewState["UserToken"]);
				}
				return userToken;
			}]]></body>
          </codeblock>
          <codeblock>
            <location sl="330" sc="4" el="332" ec="5">DesktopModules\Admin\Authentication\Login.ascx.cs</location>
            <body hash="405a801317e7b4f85818326aca1a3eb9"><![CDATA[{
				ViewState["UserToken"] = value;
			}]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="Logoff">
      <declaration><![CDATA[public class Logoff : UserModuleBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public Logoff()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="DoLogoff">
          <declaration><![CDATA[private void DoLogoff()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="55" sc="3" el="70" ec="4">DesktopModules\Admin\Authentication\Logoff.ascx.cs</location>
            <body hash="50ed4bed53d929a4ff152229848bd865"><![CDATA[{
			try
			{
				//Remove user from cache
				if (User != null)
				{
					DataCache.ClearUserCache(PortalSettings.PortalId, Context.User.Identity.Name);
				}
				var objPortalSecurity = new PortalSecurity();
				objPortalSecurity.SignOut();
			}
			catch (Exception exc)	//Page failed to load
			{
				Exceptions.ProcessPageLoadException(exc);
			}
		}]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="82" sc="3" el="122" ec="4">DesktopModules\Admin\Authentication\Logoff.ascx.cs</location>
            <body hash="8c6e3732ddc4b9c455d82bf114885cd0"><![CDATA[{
			base.OnLoad(e);
			try
			{
				//Get the Authentication System associated with the current User
				var authSystem = AuthenticationController.GetAuthenticationType();

				if (authSystem != null && !string.IsNullOrEmpty(authSystem.LogoffControlSrc))
				{
					var authLogoffControl = (AuthenticationLogoffBase) LoadControl("~/" + authSystem.LogoffControlSrc);

					//set the control ID to the resource file name ( ie. controlname.ascx = controlname )
					//this is necessary for the Localization in PageBase
					authLogoffControl.AuthenticationType = authSystem.AuthenticationType;
					authLogoffControl.ID = Path.GetFileNameWithoutExtension(authSystem.LogoffControlSrc) + "_" + authSystem.AuthenticationType;
					authLogoffControl.LocalResourceFile = authLogoffControl.TemplateSourceDirectory + "/" + Localization.LocalResourceDirectory + "/" +
														  Path.GetFileNameWithoutExtension(authSystem.LogoffControlSrc);
					authLogoffControl.ModuleConfiguration = ModuleConfiguration;

					authLogoffControl.LogOff += UserLogOff;
					authLogoffControl.Redirect += UserRedirect;

					//Add Login Control to Control
					pnlLogoffContainer.Controls.Add(authLogoffControl);
				}
				else
				{
					//The current auth system has no custom logoff control so LogOff
					DoLogoff();
					Redirect();
				}
			}
			catch (ThreadAbortException)
			{
				//Do nothing Response.redirect
			}
			catch (Exception exc) //Page failed to load
			{
				Exceptions.ProcessPageLoadException(exc);
			}
		}]]></body>
          </codeblock>
        </method>
        <method name="Redirect">
          <declaration><![CDATA[private void Redirect()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="49" sc="3" el="52" ec="4">DesktopModules\Admin\Authentication\Logoff.ascx.cs</location>
            <body hash="606c7e7689e4bb30eae59f770b64baa8"><![CDATA[{
			//Redirect browser back to portal 
			Response.Redirect(AuthenticationController.GetLogoffRedirectURL(PortalSettings, Request), true);
		}]]></body>
          </codeblock>
        </method>
        <method name="UserLogOff">
          <declaration><![CDATA[protected void UserLogOff(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="125" sc="3" el="127" ec="4">DesktopModules\Admin\Authentication\Logoff.ascx.cs</location>
            <body hash="71bb35d15975f5c00fc13d9ca78e98a0"><![CDATA[{
			DoLogoff();
		}]]></body>
          </codeblock>
        </method>
        <method name="UserRedirect">
          <declaration><![CDATA[protected void UserRedirect(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="130" sc="3" el="132" ec="4">DesktopModules\Admin\Authentication\Logoff.ascx.cs</location>
            <body hash="abd8bbd6ec2d079b9e24818923a21b0b"><![CDATA[{
			Redirect();
		}]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="pnlLogoffContainer">
          <declaration><![CDATA[protected Panel pnlLogoffContainer;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="Settings">
      <declaration><![CDATA[public class Settings : AuthenticationSettingsBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public Settings()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="44" sc="9" el="57" ec="10">DesktopModules\AuthenticationServices\DNN\Settings.ascx.cs</location>
            <body hash="bea28648df3e5c8f1d9b6ce13736f1ca"><![CDATA[{
            base.OnLoad(e);

            try
            {
                AuthenticationConfig config = AuthenticationConfig.GetConfig(PortalId);
                SettingsEditor.DataSource = config;
                SettingsEditor.DataBind();
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateSettings">
          <declaration><![CDATA[public override void UpdateSettings()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="35" sc="9" el="41" ec="10">DesktopModules\AuthenticationServices\DNN\Settings.ascx.cs</location>
            <body hash="ca2cf7f438a2a144389d53d139d4df0b"><![CDATA[{
            if (SettingsEditor.IsValid && SettingsEditor.IsDirty)
            {
                var config = (AuthenticationConfig) SettingsEditor.DataSource;
                AuthenticationConfig.UpdateConfig(config);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="SettingsEditor">
          <declaration><![CDATA[protected PropertyEditorControl SettingsEditor;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="DotNetNuke.Modules.Admin.Authentication.DNN">
    <class name="Login">
      <declaration><![CDATA[public class Login : AuthenticationLoginBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public Login()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
        <constructor name=".cctor">
          <declaration><![CDATA[static Login()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="54" sc="3" el="54" ec="89">DesktopModules\AuthenticationServices\DNN\Login.ascx.cs</location>
            <body hash="242fa60852d1270db60e3c6fb1ae75a5"><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof (Login))]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="GetRedirectUrl">
          <declaration><![CDATA[protected string GetRedirectUrl(bool checkSettings = true)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="327" sc="3" el="362" ec="4">DesktopModules\AuthenticationServices\DNN\Login.ascx.cs</location>
            <body hash="4319b67b286cde85b9f3ae7a78b2412e"><![CDATA[{
			var redirectUrl = "";
			var redirectAfterLogin = PortalSettings.Registration.RedirectAfterLogin;
			if (checkSettings && redirectAfterLogin > 0) //redirect to after registration page
			{
				redirectUrl = Globals.NavigateURL(redirectAfterLogin);
			}
			else
			{
				if (Request.QueryString["returnurl"] != null)
				{
					//return to the url passed to register
					redirectUrl = HttpUtility.UrlDecode(Request.QueryString["returnurl"]);

                    //clean the return url to avoid possible XSS attack.
                    redirectUrl = UrlUtils.ValidReturnUrl(redirectUrl);

                    if (redirectUrl.Contains("?returnurl"))
					{
						string baseURL = redirectUrl.Substring(0,
							redirectUrl.IndexOf("?returnurl", StringComparison.Ordinal));
						string returnURL =
							redirectUrl.Substring(redirectUrl.IndexOf("?returnurl", StringComparison.Ordinal) + 11);

						redirectUrl = string.Concat(baseURL, "?returnurl", HttpUtility.UrlEncode(returnURL));
					}
				}
				if (String.IsNullOrEmpty(redirectUrl))
				{
					//redirect to current page 
					redirectUrl = Globals.NavigateURL();
				}
			}

			return redirectUrl;
		}]]></body>
          </codeblock>
        </method>
        <method name="HasSocialAuthenticationEnabled">
          <declaration><![CDATA[private bool HasSocialAuthenticationEnabled()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="310" sc="9" el="320" ec="10">DesktopModules\AuthenticationServices\DNN\Login.ascx.cs</location>
            <body hash="6f49b302711dcbf74c238bfbce5b8144"><![CDATA[{
            return (from a in AuthenticationController.GetEnabledAuthenticationServices()
                    let enabled = (a.AuthenticationType == "Facebook"
                                     || a.AuthenticationType == "Google"
                                     || a.AuthenticationType == "Live"
                                     || a.AuthenticationType == "Twitter")
                                  ? PortalController.GetPortalSettingAsBoolean(a.AuthenticationType + "_Enabled", PortalSettings.PortalId, false)
                                  : !string.IsNullOrEmpty(a.LoginControlSrc) && (LoadControl("~/" + a.LoginControlSrc) as AuthenticationLoginBase).Enabled
                    where a.AuthenticationType != "DNN" && enabled
                    select a).Any();
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="90" sc="3" el="252" ec="4">DesktopModules\AuthenticationServices\DNN\Login.ascx.cs</location>
            <body hash="81daf8989c36296c1ea9d2f434561182"><![CDATA[{
			base.OnLoad(e);

			cmdLogin.Click += OnLoginClick;

			cancelLink.NavigateUrl = GetRedirectUrl(false);

			ClientAPI.RegisterKeyCapture(Parent, cmdLogin, 13);

            if (PortalSettings.UserRegistration == (int)Globals.PortalRegistrationType.NoRegistration)
            {
                liRegister.Visible = false;
            }
            lblLogin.Text = Localization.GetSystemMessage(PortalSettings, "MESSAGE_LOGIN_INSTRUCTIONS");

            if (!string.IsNullOrEmpty(Response.Cookies["USERNAME_CHANGED"].Value))
            {
                txtUsername.Text = Response.Cookies["USERNAME_CHANGED"].Value;
                DotNetNuke.UI.Skins.Skin.AddModuleMessage(this, Localization.GetSystemMessage(PortalSettings, "MESSAGE_USERNAME_CHANGED_INSTRUCTIONS"), ModuleMessage.ModuleMessageType.BlueInfo);
            }

            var returnUrl = Globals.NavigateURL();
            string url;
            if (PortalSettings.UserRegistration != (int)Globals.PortalRegistrationType.NoRegistration)
            {
                if (!string.IsNullOrEmpty(UrlUtils.ValidReturnUrl(Request.QueryString["returnurl"])))
                {
                    returnUrl = Request.QueryString["returnurl"];
                }
                returnUrl = HttpUtility.UrlEncode(returnUrl);

                url = Globals.RegisterURL(returnUrl, Null.NullString);
                registerLink.NavigateUrl = url;
                if (PortalSettings.EnablePopUps && PortalSettings.RegisterTabId == Null.NullInteger
                    && !HasSocialAuthenticationEnabled())
                {
                    registerLink.Attributes.Add("onclick", "return " + UrlUtils.PopUpUrl(url, this, PortalSettings, true, false, 600, 950));
                }
            }
            else
            {
                registerLink.Visible = false;
            }

            //see if the portal supports persistant cookies
            chkCookie.Visible = Host.RememberCheckbox;



            // no need to show password link if feature is disabled, let's check this first
            if (MembershipProviderConfig.PasswordRetrievalEnabled || MembershipProviderConfig.PasswordResetEnabled)
            {
                url = Globals.NavigateURL("SendPassword", "returnurl=" + returnUrl);
                passwordLink.NavigateUrl = url;
                if (PortalSettings.EnablePopUps)
                {
                    passwordLink.Attributes.Add("onclick", "return " + UrlUtils.PopUpUrl(url, this, PortalSettings, true, false, 300, 650));
                }
            }
            else
            {
                passwordLink.Visible = false;
            }


            if (!IsPostBack)
            {
                if (!string.IsNullOrEmpty(Request.QueryString["verificationcode"]) && PortalSettings.UserRegistration == (int) Globals.PortalRegistrationType.VerifiedRegistration)
                {
                    if (Request.IsAuthenticated)
                    {
                        Controls.Clear();
                    }

                    var verificationCode = Request.QueryString["verificationcode"];


                    try
                    {
                        UserController.VerifyUser(verificationCode.Replace(".", "+").Replace("-", "/").Replace("_", "="));

						var redirectTabId = PortalSettings.Registration.RedirectAfterRegistration;

	                    if (Request.IsAuthenticated)
	                    {
                            Response.Redirect(Globals.NavigateURL(redirectTabId > 0 ? redirectTabId : PortalSettings.HomeTabId, string.Empty, "VerificationSuccess=true"), true);
	                    }
	                    else
	                    {
                            if (redirectTabId > 0)
                            {
                                var redirectUrl = Globals.NavigateURL(redirectTabId, string.Empty, "VerificationSuccess=true");
                                redirectUrl = redirectUrl.Replace(Globals.AddHTTP(PortalSettings.PortalAlias.HTTPAlias), string.Empty);
                                Response.Cookies.Add(new HttpCookie("returnurl", redirectUrl) { Path = (!string.IsNullOrEmpty(Globals.ApplicationPath) ? Globals.ApplicationPath : "/") });
                            }

		                    UI.Skins.Skin.AddModuleMessage(this, Localization.GetString("VerificationSuccess", LocalResourceFile), ModuleMessage.ModuleMessageType.GreenSuccess);
	                    }
                    }
                    catch (UserAlreadyVerifiedException)
                    {
                        UI.Skins.Skin.AddModuleMessage(this, Localization.GetString("UserAlreadyVerified", LocalResourceFile), ModuleMessage.ModuleMessageType.YellowWarning);
                    }
                    catch (InvalidVerificationCodeException)
                    {
                        UI.Skins.Skin.AddModuleMessage(this, Localization.GetString("InvalidVerificationCode", LocalResourceFile), ModuleMessage.ModuleMessageType.RedError);
                    }
                    catch (UserDoesNotExistException)
                    {
                        UI.Skins.Skin.AddModuleMessage(this, Localization.GetString("UserDoesNotExist", LocalResourceFile), ModuleMessage.ModuleMessageType.RedError);
                    }
                    catch (Exception)
                    {
                        UI.Skins.Skin.AddModuleMessage(this, Localization.GetString("InvalidVerificationCode", LocalResourceFile), ModuleMessage.ModuleMessageType.RedError);
                    }
                }
            }

			if (!Request.IsAuthenticated)
			{
				if (!Page.IsPostBack)
				{
					try
					{
						if (Request.QueryString["username"] != null)
						{
							txtUsername.Text = Request.QueryString["username"];
						}
					}
					catch (Exception ex)
					{
						//control not there 
						Logger.Error(ex);
					}
				}
				try
				{
					Globals.SetFormFocus(string.IsNullOrEmpty(txtUsername.Text) ? txtUsername : txtPassword);
				}
				catch (Exception ex)
				{
					//Not sure why this Try/Catch may be necessary, logic was there in old setFormFocus location stating the following
					//control not there or error setting focus
					Logger.Error(ex);
				}
			}

			var registrationType = PortalSettings.Registration.RegistrationFormType;
		    bool useEmailAsUserName;
            if (registrationType == 0)
            {
				useEmailAsUserName = PortalSettings.Registration.UseEmailAsUserName;
            }
            else
            {
				var registrationFields = PortalSettings.Registration.RegistrationFields;
                useEmailAsUserName = !registrationFields.Contains("Username");
            }

		    plUsername.Text = LocalizeString(useEmailAsUserName ? "Email" : "Username");
		    divCaptcha1.Visible = UseCaptcha;
			divCaptcha2.Visible = UseCaptcha;
		}]]></body>
          </codeblock>
        </method>
        <method name="OnLoginClick">
          <declaration><![CDATA[private void OnLoginClick(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="255" sc="3" el="307" ec="4">DesktopModules\AuthenticationServices\DNN\Login.ascx.cs</location>
            <body hash="551e6447fe7ff750a6dc0477e23ba833"><![CDATA[{
			if ((UseCaptcha && ctlCaptcha.IsValid) || !UseCaptcha)
			{
				var loginStatus = UserLoginStatus.LOGIN_FAILURE;
				string userName = new PortalSecurity().InputFilter(txtUsername.Text, 
										PortalSecurity.FilterFlag.NoScripting | 
                                        PortalSecurity.FilterFlag.NoAngleBrackets | 
                                        PortalSecurity.FilterFlag.NoMarkup);

                //DNN-6093
                //check if we use email address here rather than username
                if(PortalController.GetPortalSettingAsBoolean("Registration_UseEmailAsUserName", PortalId, false))
                {
                    var testUser = UserController.GetUserByEmail(PortalId, userName); // one additonal call to db to see if an account with that email actually exists
                    if(testUser != null)
                    {
                        userName = testUser.Username; //we need the username of the account in order to authenticate in the next step
                    }
                }

				var objUser = UserController.ValidateUser(PortalId, userName, txtPassword.Text, "DNN", string.Empty, PortalSettings.PortalName, IPAddress, ref loginStatus);
				var authenticated = Null.NullBoolean;
				var message = Null.NullString;
				if (loginStatus == UserLoginStatus.LOGIN_USERNOTAPPROVED)
				{
				    message = "UserNotAuthorized";
				}
				else
				{
					authenticated = (loginStatus != UserLoginStatus.LOGIN_FAILURE);
				}

                if (loginStatus != UserLoginStatus.LOGIN_FAILURE && PortalController.GetPortalSettingAsBoolean("Registration_UseEmailAsUserName", PortalId, false))
                {
                    //make sure internal username matches current e-mail address
                    if (objUser.Username.ToLower() != objUser.Email.ToLower())
                    {
                        UserController.ChangeUsername(objUser.UserID, objUser.Email);
                    }

                    Response.Cookies.Remove("USERNAME_CHANGED");
                }
				
				//Raise UserAuthenticated Event
				var eventArgs = new UserAuthenticatedEventArgs(objUser, userName, loginStatus, "DNN")
				                    {
				                        Authenticated = authenticated, 
                                        Message = message,
                                        RememberMe = chkCookie.Checked
				                    };
				OnUserAuthenticated(eventArgs);
			}
		}]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="cancelLink">
          <declaration><![CDATA[protected HyperLink cancelLink;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkCookie">
          <declaration><![CDATA[protected CheckBox chkCookie;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdLogin">
          <declaration><![CDATA[protected LinkButton cmdLogin;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ctlCaptcha">
          <declaration><![CDATA[protected CaptchaControl ctlCaptcha;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="divCaptcha1">
          <declaration><![CDATA[protected HtmlGenericControl divCaptcha1;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="divCaptcha2">
          <declaration><![CDATA[protected HtmlGenericControl divCaptcha2;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblLogin">
          <declaration><![CDATA[protected Label lblLogin;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblLoginRememberMe">
          <declaration><![CDATA[protected Label lblLoginRememberMe;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="liPassword">
          <declaration><![CDATA[protected HtmlGenericControl liPassword;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="liRegister">
          <declaration><![CDATA[protected HtmlGenericControl liRegister;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Logger">
          <declaration><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof(Login));]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="passwordLink">
          <declaration><![CDATA[protected HyperLink passwordLink;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plCaptcha">
          <declaration><![CDATA[protected Label plCaptcha;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plPassword">
          <declaration><![CDATA[protected Label plPassword;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plUsername">
          <declaration><![CDATA[protected Label plUsername;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="registerLink">
          <declaration><![CDATA[protected HyperLink registerLink;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtPassword">
          <declaration><![CDATA[protected TextBox txtPassword;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtUsername">
          <declaration><![CDATA[protected TextBox txtUsername;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="Enabled">
          <declaration><![CDATA[public override bool Enabled]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="80" sc="4" el="82" ec="5">DesktopModules\AuthenticationServices\DNN\Login.ascx.cs</location>
            <body hash="5c38a43ecd4375bceccd55484e5b7900"><![CDATA[{
				return AuthenticationConfig.GetConfig(PortalId).Enabled;
			}]]></body>
          </codeblock>
        </property>
        <property name="UseCaptcha">
          <declaration><![CDATA[protected bool UseCaptcha]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="64" sc="4" el="66" ec="5">DesktopModules\AuthenticationServices\DNN\Login.ascx.cs</location>
            <body hash="3826644a5b3139cb17d9b45864ce58d9"><![CDATA[{
				return AuthenticationConfig.GetConfig(PortalId).UseCaptcha;
			}]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="DotNetNuke.Modules.Admin.Extensions">
    <class name="AuthenticationEditor">
      <declaration><![CDATA[public class AuthenticationEditor : PackageEditorBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public AuthenticationEditor()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="BindAuthentication">
          <declaration><![CDATA[private void BindAuthentication()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="95" sc="9" el="126" ec="10">DesktopModules\Admin\Extensions\Editors\AuthenticationEditor.ascx.cs</location>
            <body hash="b5b3f11d3de7111b44a97ab3dfa0a1f4"><![CDATA[{
            if (AuthSystem != null)
            {
                if (AuthSystem.AuthenticationType == "DNN")
                {
                    authenticationFormReadOnly.DataSource = AuthSystem;
                    authenticationFormReadOnly.DataBind();
                }
                else
                {
                    authenticationForm.DataSource = AuthSystem;
                    authenticationForm.DataBind();
                }
                authenticationFormReadOnly.Visible = IsSuperTab && (AuthSystem.AuthenticationType == "DNN");
                authenticationForm.Visible = IsSuperTab && AuthSystem.AuthenticationType != "DNN";


                if (SettingsControl != null)
                {
					//set the control ID to the resource file name ( ie. controlname.ascx = controlname )
                    //this is necessary for the Localization in PageBase
                    SettingsControl.ID = Path.GetFileNameWithoutExtension(AuthSystem.SettingsControlSrc);

                    //Add Container to Controls
                    pnlSettings.Controls.AddAt(0, SettingsControl);
                }
                else
                {
                    cmdUpdate.Visible = false;
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="cmdUpdate_Click">
          <declaration><![CDATA[protected void cmdUpdate_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="176" sc="9" el="183" ec="10">DesktopModules\Admin\Extensions\Editors\AuthenticationEditor.ascx.cs</location>
            <body hash="4fc74c7dc0841a18144f1dac038d137e"><![CDATA[{
            if (SettingsControl != null)
            {
                SettingsControl.UpdateSettings();
            }

            Response.Redirect(Globals.NavigateURL(), true);
        }]]></body>
          </codeblock>
        </method>
        <method name="Initialize">
          <declaration><![CDATA[public override void Initialize()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="133" sc="9" el="151" ec="10">DesktopModules\Admin\Extensions\Editors\AuthenticationEditor.ascx.cs</location>
            <body hash="9c35287a17a75bcaabd61dfeb2e30b8b"><![CDATA[{
            pnlSettings.Visible = !IsSuperTab;
            if (IsSuperTab)
            {
                lblHelp.Text = Localization.GetString("HostHelp", LocalResourceFile);
            }
            else
            {
                if (SettingsControl == null)
                {
                    lblHelp.Text = Localization.GetString("NoSettings", LocalResourceFile);
                }
                else
                {
                    lblHelp.Text = Localization.GetString("AdminHelp", LocalResourceFile);
                }
            }
            BindAuthentication();
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="170" sc="9" el="173" ec="10">DesktopModules\Admin\Extensions\Editors\AuthenticationEditor.ascx.cs</location>
            <body hash="fc7b718e43625bb201a70614adb0ebb4"><![CDATA[{
            base.OnLoad(e);
            cmdUpdate.Click += cmdUpdate_Click;
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdatePackage">
          <declaration><![CDATA[public override void UpdatePackage()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="154" sc="9" el="163" ec="10">DesktopModules\Admin\Extensions\Editors\AuthenticationEditor.ascx.cs</location>
            <body hash="babf4f8b96831d0f7f8647ebf35e9dac"><![CDATA[{
            if (authenticationForm.IsValid)
            {
                var authInfo = authenticationForm.DataSource as AuthenticationInfo;
                if (authInfo != null)
                {
                    AuthenticationController.UpdateAuthentication(authInfo);
                }
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_AuthSystem">
          <declaration><![CDATA[private AuthenticationInfo _AuthSystem;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_SettingsControl">
          <declaration><![CDATA[private AuthenticationSettingsBase _SettingsControl;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="authenticationForm">
          <declaration><![CDATA[protected DnnFormEditor authenticationForm;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="authenticationFormReadOnly">
          <declaration><![CDATA[protected DnnFormEditor authenticationFormReadOnly;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="authenticationType">
          <declaration><![CDATA[protected DnnFormTextBoxItem authenticationType;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdUpdate">
          <declaration><![CDATA[protected LinkButton cmdUpdate;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="DnnFormTextBoxItem1">
          <declaration><![CDATA[protected DnnFormLiteralItem DnnFormTextBoxItem1;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="DnnFormTextBoxItem2">
          <declaration><![CDATA[protected DnnFormLiteralItem DnnFormTextBoxItem2;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="DnnFormTextBoxItem3">
          <declaration><![CDATA[protected DnnFormLiteralItem DnnFormTextBoxItem3;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="DnnFormTextBoxItem4">
          <declaration><![CDATA[protected DnnFormLiteralItem DnnFormTextBoxItem4;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="DnnFormToggleButtonItem1">
          <declaration><![CDATA[protected DnnFormLiteralItem DnnFormToggleButtonItem1;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="isEnabled">
          <declaration><![CDATA[protected DnnFormToggleButtonItem isEnabled;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblHelp">
          <declaration><![CDATA[protected Label lblHelp;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="loginControlSrc">
          <declaration><![CDATA[protected DnnFormTextBoxItem loginControlSrc;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="logoffControlSrc">
          <declaration><![CDATA[protected DnnFormTextBoxItem logoffControlSrc;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="pnlSettings">
          <declaration><![CDATA[protected Panel pnlSettings;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="settingsControlSrc">
          <declaration><![CDATA[protected DnnFormTextBoxItem settingsControlSrc;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="AuthSystem">
          <declaration><![CDATA[protected AuthenticationInfo AuthSystem]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="56" sc="13" el="62" ec="14">DesktopModules\Admin\Extensions\Editors\AuthenticationEditor.ascx.cs</location>
            <body hash="a151f38e0bc1b76d358f69d0b15cee05"><![CDATA[{
                if (_AuthSystem == null)
                {
                    _AuthSystem = AuthenticationController.GetAuthenticationServiceByPackageID(PackageID);
                }
                return _AuthSystem;
            }]]></body>
          </codeblock>
        </property>
        <property name="EditorID">
          <declaration><![CDATA[protected override string EditorID]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="68" sc="13" el="70" ec="14">DesktopModules\Admin\Extensions\Editors\AuthenticationEditor.ascx.cs</location>
            <body hash="f64cd8f77500ce57c3d99145200d8366"><![CDATA[{
                return "AuthenticationEditor";
            }]]></body>
          </codeblock>
        </property>
        <property name="SettingsControl">
          <declaration><![CDATA[protected AuthenticationSettingsBase SettingsControl]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="76" sc="13" el="82" ec="14">DesktopModules\Admin\Extensions\Editors\AuthenticationEditor.ascx.cs</location>
            <body hash="1c7d4108d69d3fece2cb1312ebcc5977"><![CDATA[{
                if (_SettingsControl == null && !string.IsNullOrEmpty(AuthSystem.SettingsControlSrc))
                {
                    _SettingsControl = (AuthenticationSettingsBase) LoadControl("~/" + AuthSystem.SettingsControlSrc);
                }
                return _SettingsControl;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="AvailableExtensions">
      <declaration><![CDATA[public class AvailableExtensions : ModuleUserControlBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public AvailableExtensions()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="BindGrid">
          <declaration><![CDATA[private void BindGrid(string installPath, DataGrid grid)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="107" sc="9" el="127" ec="10">DesktopModules\Admin\Extensions\AvailableExtensions.ascx.cs</location>
            <body hash="69844435cccf3a6615f5a1eacefe130d"><![CDATA[{
            var packages = new Dictionary<string, PackageInfo>();
            var invalidPackages = new List<string>();

            foreach (string file in Directory.GetFiles(installPath))
            {
                if (file.ToLower().EndsWith(".zip") || file.ToLower().EndsWith(".resources"))
                {
                    PackageController.ParsePackage(file, installPath, packages, invalidPackages);
                }
            }

            if (invalidPackages.Count > 0)
            {
                var pkgErrorsMsg = invalidPackages.Aggregate(string.Empty, (current, pkg) => current + (pkg + "<br />"));
                UI.Skins.Skin.AddModuleMessage(this, Localization.GetString("PackageErrors.Text", LocalResourceFile) + pkgErrorsMsg, ModuleMessage.ModuleMessageType.RedError);
            }
            
            grid.DataSource = packages.Values;
            grid.DataBind();
        }]]></body>
          </codeblock>
        </method>
        <method name="BindPackageTypes">
          <declaration><![CDATA[private void BindPackageTypes()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="130" sc="9" el="133" ec="10">DesktopModules\Admin\Extensions\AvailableExtensions.ascx.cs</location>
            <body hash="dc0653deda3788db1e7c8318522af0b0"><![CDATA[{
            extensionTypeRepeater.DataSource = PackageTypesList;
            extensionTypeRepeater.DataBind();
        }]]></body>
          </codeblock>
        </method>
        <method name="extensionsGrid_ItemDataBound">
          <declaration><![CDATA[private void extensionsGrid_ItemDataBound(object sender, DataGridItemEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="311" sc="9" el="331" ec="10">DesktopModules\Admin\Extensions\AvailableExtensions.ascx.cs</location>
            <body hash="6d2e0fd636766276c23aa58ac6d44e2b"><![CDATA[{
            DataGridItem item = e.Item;
            if (e.Item.ItemType == ListItemType.Item || e.Item.ItemType == ListItemType.AlternatingItem)
            {
                var package = (PackageInfo) e.Item.DataItem;

                var installLink = (HyperLink)item.Controls[4].Controls[1];
                var downloadLink = (HyperLink)item.Controls[4].Controls[3];

                installLink.NavigateUrl = Util.InstallURL(ModuleContext.TabId, "", package.PackageType, package.FileName);
                if (ModuleContext.PortalSettings.UserInfo.IsSuperUser)
                {
                    downloadLink.NavigateUrl = Globals.NavigateURL(ModuleContext.TabId, "", "action=download",
                        "ptype=" + package.PackageType, "package=" + package.FileName);
                }
                else
                {
                    downloadLink.Visible = false;
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="extensionTypeRepeater_ItemDataBound">
          <declaration><![CDATA[private void extensionTypeRepeater_ItemDataBound(object sender, RepeaterItemEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="296" sc="9" el="308" ec="10">DesktopModules\Admin\Extensions\AvailableExtensions.ascx.cs</location>
            <body hash="9112787a85560cf022f0901af645e430"><![CDATA[{
            RepeaterItem item = e.Item;
            if (e.Item.ItemType == ListItemType.Item || e.Item.ItemType == ListItemType.AlternatingItem)
            {
                var kvp = (KeyValuePair<string, string>)e.Item.DataItem;

                DataGrid extensionsGrid = item.FindControl("extensionsGrid") as DataGrid;
                extensionsGrid.ItemDataBound += extensionsGrid_ItemDataBound;

                Localization.LocalizeDataGrid(ref extensionsGrid, LocalResourceFile);
                BindGrid(kvp.Value, extensionsGrid);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="FormatVersion">
          <declaration><![CDATA[protected string FormatVersion(object version)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="186" sc="9" el="194" ec="10">DesktopModules\Admin\Extensions\AvailableExtensions.ascx.cs</location>
            <body hash="32a0f9f352e290d9c18789267e88a7f4"><![CDATA[{
            var package = version as PackageInfo;
            string retValue = Null.NullString;
            if (package != null)
            {
                retValue = package.Version.ToString(3);
            }
            return retValue;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetAboutTooltip">
          <declaration><![CDATA[protected string GetAboutTooltip(object dataItem)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="197" sc="9" el="220" ec="10">DesktopModules\Admin\Extensions\AvailableExtensions.ascx.cs</location>
            <body hash="2b2788217149905dcc78df9461c7adb0"><![CDATA[{
            string returnValue = string.Empty;
            try
            {
                if ((ModuleContext.PortalSettings.ActiveTab.IsSuperTab))
                {
                    int portalID = Convert.ToInt32(DataBinder.Eval(dataItem, "PortalID"));
                    if ((portalID != Null.NullInteger && portalID != int.MinValue))
                    {
                        var portal = PortalController.Instance.GetPortal(portalID);
                        returnValue = string.Format(Localization.GetString("InstalledOnPortal.Tooltip", LocalResourceFile), portal.PortalName);
                    }
                    else
                    {
                        returnValue = Localization.GetString("InstalledOnHost.Tooltip", LocalResourceFile);
                    }
                }
            }
            catch (Exception ex)
            {
                Exceptions.ProcessModuleLoadException(this, ex);
            }
            return returnValue;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPackageDescription">
          <declaration><![CDATA[protected string GetPackageDescription(object dataItem)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="223" sc="9" el="231" ec="10">DesktopModules\Admin\Extensions\AvailableExtensions.ascx.cs</location>
            <body hash="79a1fb5dfb39cb954313250a920e7fe4"><![CDATA[{
            var package = dataItem as PackageInfo;
            string retValue = Null.NullString;
            if (package != null)
            {
                retValue = package.Description;
            }
            return retValue;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPackageIcon">
          <declaration><![CDATA[protected string GetPackageIcon(object dataItem)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="234" sc="9" el="250" ec="10">DesktopModules\Admin\Extensions\AvailableExtensions.ascx.cs</location>
            <body hash="e6ebde6bd3b62f7bccb4ac34978352b9"><![CDATA[{
            var package = dataItem as PackageInfo;
            switch (package.PackageType)
            {
                case "Container":
                    return (IconExists(package.IconFile)) ? package.IconFile : Globals.ImagePath + DefaultContainerImage;
                case "Skin":
                    return (IconExists(package.IconFile)) ? package.IconFile : Globals.ImagePath + DefaultSkinImage;
                case "AuthenticationSystem":
                case "Auth_System":
                    return (IconExists(package.IconFile)) ? package.IconFile : Globals.ImagePath + DefaultAuthenicationImage;
                case "Provider":
                    return (IconExists(package.IconFile)) ? package.IconFile : Globals.ImagePath + DefaultProviderImage;
                default:
                    return (IconExists(package.IconFile)) ? package.IconFile : Globals.ImagePath + DefaultExtensionImage;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPackageType">
          <declaration><![CDATA[protected string GetPackageType(object dataItem)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="269" sc="9" el="273" ec="10">DesktopModules\Admin\Extensions\AvailableExtensions.ascx.cs</location>
            <body hash="15092dd2756334a4a0a808d4a044bb70"><![CDATA[{
            var kvp = (KeyValuePair<string, string>)dataItem;

            return Localization.GetString(kvp.Key + ".Type", LocalResourceFile);
        }]]></body>
          </codeblock>
        </method>
        <method name="IconExists">
          <declaration><![CDATA[private bool IconExists(string imagePath)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="253" sc="9" el="266" ec="10">DesktopModules\Admin\Extensions\AvailableExtensions.ascx.cs</location>
            <body hash="a28a245d4c9c3ed81ca0cccf425dc824"><![CDATA[{
            if (String.IsNullOrWhiteSpace(imagePath)) return false;

            string path;
            try
            {
                path = Server.MapPath(imagePath);
            }
            catch (HttpException)
            {
                return false;
            }
            return File.Exists(path);
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="276" sc="9" el="287" ec="10">DesktopModules\Admin\Extensions\AvailableExtensions.ascx.cs</location>
            <body hash="09abb6c8ec2b7bf8396d64dd5fca243b"><![CDATA[{
            base.OnLoad(e);

            languagePacks.ModuleContext.Configuration = ModuleContext.Configuration;
            extensionTypeRepeater.ItemDataBound += extensionTypeRepeater_ItemDataBound;

            if (Request.QueryString["action"] != null
                && Request.QueryString["action"].ToLowerInvariant() == "download")
            {
                ProcessDownload();
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnPreRender">
          <declaration><![CDATA[protected override void OnPreRender(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="290" sc="9" el="293" ec="10">DesktopModules\Admin\Extensions\AvailableExtensions.ascx.cs</location>
            <body hash="f35f9782a9d10359f3efd76753e9372d"><![CDATA[{
            base.OnPreRender(e);
            BindPackageTypes();
        }]]></body>
          </codeblock>
        </method>
        <method name="ProcessDownload">
          <declaration><![CDATA[private void ProcessDownload()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="136" sc="9" el="183" ec="10">DesktopModules\Admin\Extensions\AvailableExtensions.ascx.cs</location>
            <body hash="54fc864811e3df636e71685b05e100b6"><![CDATA[{
            // make sure only host users can download the packge.
            if (!ModuleContext.PortalSettings.UserInfo.IsSuperUser)
            {
                return;
            }

            var packageType = Request.QueryString["ptype"];
            var packageName = Request.QueryString["package"];
            if (string.IsNullOrEmpty(packageType) || string.IsNullOrEmpty(packageName))
            {
                return;
            }

            if (!PackageTypesList.ContainsKey(packageType))
            {
                //try to remove the underscore in package type.
                packageType = packageType.Replace("_", "");
                if (!PackageTypesList.ContainsKey(packageType))
                {
                    return;
                }
            }

            var packageFile = new FileInfo(Path.Combine(PackageTypesList[packageType], packageName));
            if (!packageFile.Exists)
            {
                return;
            }

            try
            {
                var fileName = packageName;
                if (fileName.EndsWith(".resources"))
                {
                    fileName = fileName.Replace(".resources", "") + ".zip";
                }
                Response.Clear();
                Response.AppendHeader("Content-Disposition", "attachment; filename=\"" + fileName + "\"");
                Response.AppendHeader("Content-Length", packageFile.Length.ToString());
                Response.ContentType = "application/zip, application/octet-stream";
                Response.WriteFile(packageFile.FullName);
            }
            catch (Exception)
            {
                //do nothing here, just ignore the error.
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_packageTypes">
          <declaration><![CDATA[private IDictionary<string, string> _packageTypes;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="DefaultAuthenicationImage">
          <declaration><![CDATA[private const string DefaultAuthenicationImage = "icon_authentication.png";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="DefaultContainerImage">
          <declaration><![CDATA[private const string DefaultContainerImage = "icon_container.gif";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="DefaultExtensionImage">
          <declaration><![CDATA[private const string DefaultExtensionImage = "icon_extensions_32px.png";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="DefaultProviderImage">
          <declaration><![CDATA[private const string DefaultProviderImage = "icon_provider.gif";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="DefaultSkinImage">
          <declaration><![CDATA[private const string DefaultSkinImage = "icon_skin.gif";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="extensionTypeRepeater">
          <declaration><![CDATA[protected Repeater extensionTypeRepeater;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="languagePacks">
          <declaration><![CDATA[protected LanguagePacks languagePacks;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="PackageTypesList">
          <declaration><![CDATA[protected IDictionary<string, string> PackageTypesList]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="65" sc="13" el="103" ec="14">DesktopModules\Admin\Extensions\AvailableExtensions.ascx.cs</location>
            <body hash="1f5160e8c1e98d301d29065116b58607"><![CDATA[{
                if ((_packageTypes == null))
                {
                    _packageTypes = new Dictionary<string, string>();
                    foreach (PackageType packageType in PackageController.Instance.GetExtensionPackageTypes())
                    {
                        string installPath;
                        string type;
                        switch (packageType.PackageType)
                        {
                            case "Auth_System":
                                type = "AuthSystem";
                                installPath = Globals.ApplicationMapPath + "\\Install\\AuthSystem";
                                break;
                            case "JavaScript_Library":
                                type = "JavaScript_Library";
                                installPath = Globals.ApplicationMapPath + "\\Install\\JavaScriptLibrary";
                                break;
                            case "Module":
                            case "Skin":
                            case "Container":
                            case "Provider":
                                type = packageType.PackageType;
                                installPath = Globals.ApplicationMapPath + "\\Install\\" + packageType.PackageType;
                                break;
                            default:
                                type = String.Empty;
                                installPath = String.Empty;
                                break;
                        }
                        if (!String.IsNullOrEmpty(type) && Directory.Exists(installPath) && 
                            (Directory.GetFiles(installPath, "*.zip").Length > 0 || Directory.GetFiles(installPath, "*.resources").Length > 0))
                        {
                            _packageTypes[type] = installPath;
                        }
                    }
                }
                return _packageTypes;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="BatchInstall">
      <declaration><![CDATA[public class BatchInstall : ModuleUserControlBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public BatchInstall()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
        <constructor name=".cctor">
          <declaration><![CDATA[static BatchInstall()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="52" sc="6" el="52" ec="99">DesktopModules\Admin\Extensions\BatchInstall.ascx.cs</location>
            <body hash="4cd4a71e38fe58c64de1505f336fb907"><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof (BatchInstall))]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="BindAuthSystems">
          <declaration><![CDATA[private void BindAuthSystems()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="61" sc="9" el="63" ec="10">DesktopModules\Admin\Extensions\BatchInstall.ascx.cs</location>
            <body hash="f61448f18440d63bac3d04d1753b708b"><![CDATA[{
            BindPackageItems("AuthSystem", lstAuthSystems, lblNoAuthSystems, "NoAuthSystems", lblAuthSystemsError);
        }]]></body>
          </codeblock>
        </method>
        <method name="BindLanguages">
          <declaration><![CDATA[private void BindLanguages()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="73" sc="9" el="75" ec="10">DesktopModules\Admin\Extensions\BatchInstall.ascx.cs</location>
            <body hash="6b9c9363ad43346046f59536acf4723c"><![CDATA[{
            BindPackageItems("Language", lstLanguages, lblNoLanguages, "NoLanguages", lblLanguagesError);
        }]]></body>
          </codeblock>
        </method>
        <method name="BindModules">
          <declaration><![CDATA[private void BindModules()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="85" sc="9" el="87" ec="10">DesktopModules\Admin\Extensions\BatchInstall.ascx.cs</location>
            <body hash="6a13d38757e7315fd002ed1514131a96"><![CDATA[{
            BindPackageItems("Module", lstModules, lblNoModules, "NoModules", lblModulesError);
        }]]></body>
          </codeblock>
        </method>
        <method name="BindPackageItems">
          <declaration><![CDATA[private void BindPackageItems(string packageType, CheckBoxList list, Label noItemsLabel, string noItemsKey, Label errorLabel)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="90" sc="9" el="131" ec="10">DesktopModules\Admin\Extensions\BatchInstall.ascx.cs</location>
            <body hash="dae07d412cb61073def3b16b456886b2"><![CDATA[{
            string[] arrFiles;

            string InstallPath = Globals.ApplicationMapPath + "\\Install\\" + packageType;
            list.Items.Clear();
            if (Directory.Exists(InstallPath))
            {
                arrFiles = Directory.GetFiles(InstallPath);
                foreach (string strFile in arrFiles)
                {
                    string strResource = strFile.Replace(InstallPath + "\\", "");
                    if (strResource.ToLower().EndsWith(".zip") || strResource.ToLower().EndsWith(".resources"))
                    {
                        var packageItem = new ListItem();
                        packageItem.Value = strResource;
                        strResource = strResource.Replace(".zip", "");
                        strResource = strResource.Replace(".resources", "");
                        strResource = strResource.Replace("_Install", ")");
                        strResource = strResource.Replace("_install", ")");
                        strResource = strResource.Replace("_Source", ")");
                        strResource = strResource.Replace("_source", ")");
                        strResource = strResource.Replace("_", " (");
                        packageItem.Text = strResource;

                        list.Items.Add(packageItem);
                    }
                }
            }
            if (list.Items.Count > 0)
            {
                noItemsLabel.Visible = false;
            }
            else
            {
                noItemsLabel.Visible = true;
                noItemsLabel.Text = Localization.GetString(noItemsKey, LocalResourceFile);
            }
            if (errorLabel != null)
            {
                errorLabel.Text = Null.NullString;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="BindSkins">
          <declaration><![CDATA[private void BindSkins()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="141" sc="9" el="145" ec="10">DesktopModules\Admin\Extensions\BatchInstall.ascx.cs</location>
            <body hash="65dea69d4431374389080dd049da6044"><![CDATA[{
            BindPackageItems("Skin", lstSkins, lblNoSkins, "NoSkins", lblSkinsError);

            BindPackageItems("Container", lstContainers, lblNoContainers, "NoContainers", null);
        }]]></body>
          </codeblock>
        </method>
        <method name="cmdInstall_Click">
          <declaration><![CDATA[protected void cmdInstall_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="256" sc="9" el="276" ec="10">DesktopModules\Admin\Extensions\BatchInstall.ascx.cs</location>
            <body hash="505eb24180e4efebb862e242b6b0c2f8"><![CDATA[{
            bool moduleSuccess;
            bool skinSuccess;
            bool languagesSuccess;
            bool AuthSystemSuccess;
            if (lstAuthSystems.SelectedIndex == Null.NullInteger && lstContainers.SelectedIndex == Null.NullInteger && lstSkins.SelectedIndex == Null.NullInteger &&
                lstModules.SelectedIndex == Null.NullInteger && lstLanguages.SelectedIndex == Null.NullInteger)
            {
                UI.Skins.Skin.AddModuleMessage(this, Localization.GetString("NoneSelected", LocalResourceFile), ModuleMessage.ModuleMessageType.YellowWarning);
                return;
            }
            moduleSuccess = InstallModules();
            skinSuccess = InstallSkins();
            languagesSuccess = InstallLanguages();
            AuthSystemSuccess = InstallAuthSystems();
            if (moduleSuccess && skinSuccess && languagesSuccess && AuthSystemSuccess)
            {
				//Refesh page to update lists
                Response.Redirect(Request.RawUrl, true);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="InstallAuthSystems">
          <declaration><![CDATA[private bool InstallAuthSystems()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="155" sc="9" el="157" ec="10">DesktopModules\Admin\Extensions\BatchInstall.ascx.cs</location>
            <body hash="4a2c9e2e18da539d039ed887d9d69a5c"><![CDATA[{
            return InstallPackageItems("AuthSystem", lstAuthSystems, lblNoAuthSystems, "InstallAuthSystemError");
        }]]></body>
          </codeblock>
        </method>
        <method name="InstallLanguages">
          <declaration><![CDATA[private bool InstallLanguages()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="167" sc="9" el="169" ec="10">DesktopModules\Admin\Extensions\BatchInstall.ascx.cs</location>
            <body hash="0f4152864622e608cb13980a7c61b4d0"><![CDATA[{
            return InstallPackageItems("Language", lstLanguages, lblLanguagesError, "InstallLanguageError");
        }]]></body>
          </codeblock>
        </method>
        <method name="InstallModules">
          <declaration><![CDATA[private bool InstallModules()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="179" sc="9" el="181" ec="10">DesktopModules\Admin\Extensions\BatchInstall.ascx.cs</location>
            <body hash="0173512328665fa3cc49a2ad36bd1ea0"><![CDATA[{
            return InstallPackageItems("Module", lstModules, lblModulesError, "InstallModuleError");
        }]]></body>
          </codeblock>
        </method>
        <method name="InstallPackageItems">
          <declaration><![CDATA[private bool InstallPackageItems(string packageType, CheckBoxList list, Label errorLabel, string errorKey)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="184" sc="9" el="224" ec="10">DesktopModules\Admin\Extensions\BatchInstall.ascx.cs</location>
            <body hash="791bc7b393653db91c89cd476ba3e307"><![CDATA[{
            bool success = false;
            string strErrorMessage = Null.NullString;

            //Get current Script time-out
            int scriptTimeOut = Server.ScriptTimeout;
            try
            {
                //Set Script timeout to MAX value
                Server.ScriptTimeout = int.MaxValue;

                string InstallPath = Globals.ApplicationMapPath + "\\Install\\" + packageType;
                foreach (ListItem packageItem in list.Items)
                {
                    if (packageItem.Selected)
                    {
                        success = Upgrade.InstallPackage(InstallPath + "\\" + packageItem.Value, packageType, false);
                        if (!success)
                        {
                            strErrorMessage += string.Format(Localization.GetString(errorKey, LocalResourceFile), packageItem.Text);
                        }
                    }
                }
                success = string.IsNullOrEmpty(strErrorMessage);
            }
            catch (Exception ex)
            {
                Logger.Debug(ex);
                strErrorMessage = ex.StackTrace;
            }
            finally
            {
				//restore Script timeout
                Server.ScriptTimeout = scriptTimeOut;
            }
            if (!success)
            {
                errorLabel.Text += strErrorMessage;
            }
            return success;
        }]]></body>
          </codeblock>
        </method>
        <method name="InstallSkins">
          <declaration><![CDATA[private bool InstallSkins()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="234" sc="9" el="238" ec="10">DesktopModules\Admin\Extensions\BatchInstall.ascx.cs</location>
            <body hash="3cc8316e30bd26e09d3b146661de1a74"><![CDATA[{
            bool skinSuccess = InstallPackageItems("Skin", lstSkins, lblSkinsError, "InstallSkinError");
            bool containerSuccess = InstallPackageItems("Container", lstContainers, lblSkinsError, "InstallContainerError");
            return skinSuccess && containerSuccess;
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="241" sc="9" el="253" ec="10">DesktopModules\Admin\Extensions\BatchInstall.ascx.cs</location>
            <body hash="b959d978c8a76449a28aba7c449ed37f"><![CDATA[{
            base.OnLoad(e);

            cmdInstall.Click += cmdInstall_Click;

            if (!Page.IsPostBack)
            {
                BindModules();
                BindSkins();
                BindLanguages();
                BindAuthSystems();
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="cmdInstall">
          <declaration><![CDATA[protected CommandButton cmdInstall;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblAuthSystems">
          <declaration><![CDATA[protected Label lblAuthSystems;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblAuthSystemsError">
          <declaration><![CDATA[protected Label lblAuthSystemsError;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblContainers">
          <declaration><![CDATA[protected Label lblContainers;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblHelp">
          <declaration><![CDATA[protected Label lblHelp;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblLanguages">
          <declaration><![CDATA[protected Label lblLanguages;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblLanguagesError">
          <declaration><![CDATA[protected Label lblLanguagesError;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblModules">
          <declaration><![CDATA[protected Label lblModules;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblModulesError">
          <declaration><![CDATA[protected Label lblModulesError;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblNoAuthSystems">
          <declaration><![CDATA[protected Label lblNoAuthSystems;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblNoContainers">
          <declaration><![CDATA[protected Label lblNoContainers;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblNoLanguages">
          <declaration><![CDATA[protected Label lblNoLanguages;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblNoModules">
          <declaration><![CDATA[protected Label lblNoModules;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblNoSkins">
          <declaration><![CDATA[protected Label lblNoSkins;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblSkins">
          <declaration><![CDATA[protected Label lblSkins;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblSkinsError">
          <declaration><![CDATA[protected Label lblSkinsError;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Logger">
          <declaration><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof(BatchInstall));]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lstAuthSystems">
          <declaration><![CDATA[protected CheckBoxList lstAuthSystems;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lstContainers">
          <declaration><![CDATA[protected CheckBoxList lstContainers;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lstLanguages">
          <declaration><![CDATA[protected CheckBoxList lstLanguages;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lstModules">
          <declaration><![CDATA[protected CheckBoxList lstModules;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lstSkins">
          <declaration><![CDATA[protected CheckBoxList lstSkins;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="Download">
      <declaration><![CDATA[public class Download : ModuleUserControlBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public Download()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
        <constructor name=".cctor">
          <declaration><![CDATA[static Download()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="51" sc="9" el="51" ec="45">DesktopModules\Admin\Extensions\Download.ascx.cs</location>
            <body hash="7ed2cffab333e10d849e43cf6bf85595"><![CDATA[public static int BufferSize = 1024]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="cancel_Click">
          <declaration><![CDATA[protected void cancel_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="505" sc="9" el="507" ec="10">DesktopModules\Admin\Extensions\Download.ascx.cs</location>
            <body hash="4524639d370035c8c7dcfeb64bd09bcd"><![CDATA[{
            Response.Redirect(Globals.NavigateURL(), true);
        }]]></body>
          </codeblock>
        </method>
        <method name="deployExtension_Click">
          <declaration><![CDATA[protected void deployExtension_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="500" sc="9" el="502" ec="10">DesktopModules\Admin\Extensions\Download.ascx.cs</location>
            <body hash="e76c0a479047a012454e60e3ead388b6"><![CDATA[{
            ProcessRequest("deploy", false);
        }]]></body>
          </codeblock>
        </method>
        <method name="DownloadDeploy">
          <declaration><![CDATA[private void DownloadDeploy(WebResponse wr, string myfile, string installFolder, string catalogAction)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="314" sc="9" el="384" ec="10">DesktopModules\Admin\Extensions\Download.ascx.cs</location>
            <body hash="42e7db31b62f980ad591ec6ca9b442bc"><![CDATA[{
            if (catalogAction == "download")
            {
                var objResponse = HttpContext.Current.Response;
                var aByteArray = new byte[wr.ContentLength];
                objResponse.AppendHeader("Content-Disposition", "attachment; filename=\"" + myfile + "\"");
                objResponse.AppendHeader("Content-Length", wr.ContentLength.ToString());
                objResponse.ContentType = wr.ContentType;

                const int bufferLength = 4096;
                byte[] byteBuffer = new byte[bufferLength];
                Stream rs = wr.GetResponseStream();
                int len = 0;
                while ((len = rs.Read(byteBuffer, 0, byteBuffer.Length)) > 0)
                {
                    if (len < bufferLength)
                    { objResponse.BinaryWrite(byteBuffer.Take(len).ToArray()); }
                    else
                    { objResponse.BinaryWrite(byteBuffer); }
                    objResponse.Flush();
                }
                
            }
            else
            {
                Stream remoteStream = null;
                Stream localStream = null;

                try
                {
                    // Once the WebResponse object has been retrieved,
                    // get the stream object associated with the response's data
                    remoteStream = wr.GetResponseStream();

                    // Create the local file
                    localStream = File.Create(installFolder + "/" + myfile.ToLower().Replace(".zip",".resources"));

                    // Allocate a 1k buffer
                    var buffer = new byte[1024];
                    int bytesRead;

                    // Simple do/while loop to read from stream until
                    // no bytes are returned
                    do
                    {
                        // Read data (up to 1k) from the stream
                        bytesRead = remoteStream.Read(buffer, 0, buffer.Length);

                        // Write the data to the local file
                        localStream.Write(buffer, 0, bytesRead);

                        // Increment total bytes processed
                        //TODO fix this line bytesProcessed += bytesRead;
                    } while (bytesRead > 0);
                }
                finally
                {
                    // Close the response and streams objects here 
                    // to make sure they're closed even if an exception
                    // is thrown at some point
                    if (remoteStream != null)
                    {
                        remoteStream.Close();
                    }
                    if (localStream != null)
                    {
                        localStream.Close();
                    }
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="downloadExtension_Click">
          <declaration><![CDATA[protected void downloadExtension_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="495" sc="9" el="497" ec="10">DesktopModules\Admin\Extensions\Download.ascx.cs</location>
            <body hash="628dc756c484c52e82214539391ed861"><![CDATA[{
            ProcessRequest("download",false);
        }]]></body>
          </codeblock>
        </method>
        <method name="ExtensionRequest">
          <declaration><![CDATA[private void ExtensionRequest()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="104" sc="9" el="174" ec="10">DesktopModules\Admin\Extensions\Download.ascx.cs</location>
            <body hash="a254986e74381cbeb48e1ec2564b5000"><![CDATA[{
            var extensionId = Request.QueryString["ExtensionID"];
            var extensionRequest = "http://" + LocalizeString("feedEndpoint") + "/AppGalleryService.svc/Extensions(" + extensionId + ")";
                
            var xmlDoc = new XmlDocument();
            var xml = GetOData(extensionRequest);

            var xmlNsMgr = new XmlNamespaceManager(xmlDoc.NameTable);
            xmlNsMgr.AddNamespace("atom", "http://www.w3.org/2005/Atom");
            xmlNsMgr.AddNamespace("m", "http://schemas.microsoft.com/ado/2007/08/dataservices/metadata");
            xmlNsMgr.AddNamespace("d", "http://schemas.microsoft.com/ado/2007/08/dataservices");
            xmlDoc.LoadXml(xml);

            if (xmlDoc.DocumentElement != null)
            {
                var elements = xmlDoc.DocumentElement.SelectNodes("/atom:entry", xmlNsMgr);
                string extName="";
                string extType = "";
                string extDesc = "";
                string extURL = "";
                string extCatalogID = "";
                foreach (XmlNode element in elements)
                {
                    var properties = element.SelectSingleNode("./atom:content/m:properties", xmlNsMgr).ChildNodes;
                
                    foreach (XmlNode property in properties)
                    {
                        string propertyName = property.LocalName;
                        switch (propertyName)
                        {
                            case "ExtensionName":
                                extName = property.InnerText;
                                ViewState["extName"] = extName;
                                break;
                            case "ExtensionType":
                                extType = property.InnerText;
                                ViewState["extType"] = extType;
                                break;
                            case "Description":
                                extDesc = property.InnerText;
                                break;
                            case "DownloadURL":
                                extURL = property.InnerText;
                                ViewState["extURL"] = extURL;
                                break;
                            case "CatalogID":
                                extCatalogID = property.InnerText;
                                break;
                            default:
                                break;   
                        }
                    }
                }

                extensionType.Text = extType;
                extensionName.Text = extName;
                extensionDesc.Text = extDesc;

                if (extURL == "")
                {
                    UI.Skins.Skin.AddModuleMessage(this, GetString("unexpectedRequest"), ModuleMessage.ModuleMessageType.RedError);
                    return;
                }
                downloadExtension.Visible = true;
                if (extCatalogID=="2")
                {
                    deployExtension.Visible = true;
                
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="FileRequest">
          <declaration><![CDATA[private void FileRequest()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="82" sc="13" el="101" ec="14">DesktopModules\Admin\Extensions\Download.ascx.cs</location>
            <body hash="b7f008956ce7c427d537b57af1d08916"><![CDATA[{
                if (Request["package"]!=null)
                {
                    ViewState["extName"] = Request["package"].ToString();    
                }
                else
                {
                    ViewState["extName"] = "N/A";    
                }
                
                ViewState["extType"] = "Module";
                ViewState["extURL"] = Localization.GetString("StoreFile", LocalResourceFile);
                ViewState["fileId"] = Request.QueryString["FileID"].ToString();
                extensionType.Text = ViewState["extType"].ToString();
                extensionName.Text = ViewState["extName"].ToString();
                extensionDesc.Text = "N/A";
                downloadExtension.Visible = true;
                deployExtension.Visible = true;
                
            }]]></body>
          </codeblock>
        </method>
        <method name="GetInstallationFolder">
          <declaration><![CDATA[private static string GetInstallationFolder(string extensionType)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="460" sc="9" el="487" ec="10">DesktopModules\Admin\Extensions\Download.ascx.cs</location>
            <body hash="b78ee44b129012120ea999fbc27d3734"><![CDATA[{
            var extensionFolder = "";
            switch (extensionType)
            {
                case "Library":
                    extensionFolder = "Module";
                    break;
                case "Module":
                    extensionFolder = "Module";
                    break;
                case "Provider":
                    extensionFolder = "Provider";
                    break;
                case "Skin":
                    extensionFolder = "Skin";
                    break;
                case "Skin Object":
                    extensionFolder = "Skin";
                    break;
                case "Widget":
                    extensionFolder = "Module";
                    break;
                case "Other":
                    extensionFolder = "Module";
                    break;
            }
            return extensionFolder;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetOData">
          <declaration><![CDATA[private static string GetOData(string extensionRequest)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="197" sc="9" el="209" ec="10">DesktopModules\Admin\Extensions\Download.ascx.cs</location>
            <body hash="38db6c3477f79d510d69b6a4136ee354"><![CDATA[{
            var request = Globals.GetExternalRequest(extensionRequest);
            request.Method = "GET";
            request.Accept = "application/atom+xml";
            using (var response = (HttpWebResponse)request.GetResponse())
            {
                using (var readStream = new StreamReader(response.GetResponseStream(), Encoding.GetEncoding("utf-8")))
                {
                    return readStream.ReadToEnd();
                }
            }
 
        }]]></body>
          </codeblock>
        </method>
        <method name="GetString">
          <declaration><![CDATA[protected string GetString(string key)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="490" sc="9" el="492" ec="10">DesktopModules\Admin\Extensions\Download.ascx.cs</location>
            <body hash="fdb9cfd70aff46a9da06e018de02d9c8"><![CDATA[{
            return Localization.GetString(key, LocalResourceFile);
        }]]></body>
          </codeblock>
        </method>
        <method name="HttpAsWebResponse">
          <declaration><![CDATA[public static WebResponse HttpAsWebResponse(string URL, byte[] Data, string Username, string Password, string Domain, string ProxyAddress, int ProxyPort, bool DoPOST, string UserAgent, string Referer, out string Filename)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="387" sc="9" el="457" ec="10">DesktopModules\Admin\Extensions\Download.ascx.cs</location>
            <body hash="65193c8a73133f1d3920e41847a617e1"><![CDATA[{
            if (!DoPOST && Data != null && Data.Length > 0)
            {
                var restoftheurl = Encoding.ASCII.GetString(Data);
                if (URL.IndexOf("?") <= 0)
                {
                    URL = URL + "?";
                }
                URL = URL + restoftheurl;
            }

            var wreq = Globals.GetExternalRequest(URL);
            wreq.UserAgent = UserAgent;
            wreq.Referer = Referer;
            wreq.Method = "GET";
            if (DoPOST)
            {
                wreq.Method = "POST";
            }
           
            wreq.Timeout = Host.WebRequestTimeout;
            
            if (!string.IsNullOrEmpty(Host.ProxyServer))
            {
                var proxy = new WebProxy(Host.ProxyServer, Host.ProxyPort);
                if (!string.IsNullOrEmpty(Host.ProxyUsername))
                {
                    var proxyCredentials = new NetworkCredential(Host.ProxyUsername, Host.ProxyPassword);
                    proxy.Credentials = proxyCredentials;
                }
                wreq.Proxy = proxy;
            }

            if (Username != null && Password != null && Domain != null && Username.Trim() != "" && Password.Trim() != null && Domain.Trim() != null)
            {
                wreq.Credentials = new NetworkCredential(Username, Password, Domain);
            }
            else if (Username != null && Password != null && Username.Trim() != "" && Password.Trim() != null)
            {
                wreq.Credentials = new NetworkCredential(Username, Password);
            }

            if (DoPOST && Data != null && Data.Length > 0)
            {
                wreq.ContentType = "application/x-www-form-urlencoded";
                var request = wreq.GetRequestStream();
                request.Write(Data, 0, Data.Length);
                request.Close();
            }

            Filename = "";
            var wrsp = wreq.GetResponse();
            var cd = wrsp.Headers["Content-Disposition"];
            if (cd != null && cd.Trim() != string.Empty && cd.StartsWith("attachment"))
            {
                if (cd.IndexOf("filename") > -1 && cd.Substring(cd.IndexOf("filename")).IndexOf("=") > -1)
                {
                    var filenameParam = cd.Substring(cd.IndexOf("filename"));

                    if (filenameParam.IndexOf("\"") > -1)
                    {
                        Filename = filenameParam.Substring(filenameParam.IndexOf("\"") + 1).TrimEnd(Convert.ToChar("\"")).TrimEnd(Convert.ToChar("\\"));
                    }
                    else
                    {
                        Filename = filenameParam.Substring(filenameParam.IndexOf("=") + 1);
                    }
                }
            }
            return wrsp;
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="54" sc="9" el="60" ec="10">DesktopModules\Admin\Extensions\Download.ascx.cs</location>
            <body hash="b4695ee1816778510d967d7cd5576f7d"><![CDATA[{
            base.OnInit(e);

            cancel.Click += cancel_Click;
            deployExtension.Click += deployExtension_Click;
            downloadExtension.Click += downloadExtension_Click;
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="63" sc="9" el="79" ec="10">DesktopModules\Admin\Extensions\Download.ascx.cs</location>
            <body hash="d42134ec620c366fec26f391129c3f8c"><![CDATA[{
            base.OnLoad(e);

            if (!Page.IsPostBack)
            {
                if (Request.QueryString["ExtensionID"]!=null)
                {
                    ExtensionRequest();
                    return;
                }
                else
                {
                    FileRequest();
                    return;
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="ProcessCodeplex">
          <declaration><![CDATA[private void ProcessCodeplex(string downloadURL, string installFolder, string catalogAction)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="270" sc="9" el="311" ec="10">DesktopModules\Admin\Extensions\Download.ascx.cs</location>
            <body hash="f279b448c37e705bca72a19430b98a96"><![CDATA[{
            string myfile = "";
            try
            {
                var url = new Uri(downloadURL);
                var host = url.Host;

                //convert path to download version
                string directdownloadURL = "";
                if (downloadURL.Contains("#DownloadId="))
                {
                    int start = downloadURL.IndexOf("DownloadId=");
                    directdownloadURL = "http://" + host + "/Project/Download/FileDownload.aspx?" + downloadURL.Substring(start);
                }
                else
                {
                    directdownloadURL = downloadURL;
                }
                var wr = HttpAsWebResponse(directdownloadURL,
                                       null,
                                       null,
                                       null,
                                       null,
                                       null,
                                       -1,
                                       false,
                                       "DotNetNuke-Appgallery/1.0.0.0(Microsoft Windows NT 6.1.7600.0",
                                       "wpi://2.1.0.0/Microsoft Windows NT 6.1.7600.0",
                                       out myfile);
                DownloadDeploy(wr, myfile, installFolder, catalogAction);

                UI.Skins.Skin.AddModuleMessage(this, String.Format(GetString("deploySuccess"), ViewState["extName"]), ModuleMessage.ModuleMessageType.GreenSuccess);
                installExtension.NavigateUrl = Util.InstallURL(ModuleContext.TabId, "", ViewState["extType"].ToString(), myfile.ToLower().Replace(".zip", ".resources").ToString());
                installExtension.Visible = true;
                deployExtension.Visible = false;
            }
            catch (Exception ex)
            {
                Exceptions.ProcessModuleLoadException(this, ex);
            }
 
        }]]></body>
          </codeblock>
        </method>
        <method name="ProcessRequest">
          <declaration><![CDATA[private void ProcessRequest(string action, bool doInstall)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="177" sc="9" el="194" ec="10">DesktopModules\Admin\Extensions\Download.ascx.cs</location>
            <body hash="23e4582384ccd683560a45e14b4ce2cd"><![CDATA[{
            var downloadURL = ViewState["extURL"].ToString();
            var extensionFolder = GetInstallationFolder(ViewState["extType"].ToString());
            var installFolder = HttpContext.Current.Server.MapPath("~/Install/") + extensionFolder;

            if (downloadURL.Contains("codeplex.com"))
            {
                ProcessCodeplex(downloadURL, installFolder, action);
            }
            else if (downloadURL.Contains("snowcovered.com"))
            {
                ProcessSnowcovered(downloadURL, installFolder, action);
            }
            else
            {
                ProcessUnknown(downloadURL, installFolder, action);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="ProcessSnowcovered">
          <declaration><![CDATA[private void ProcessSnowcovered(string downloadURL, string installFolder, string catalogAction)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="229" sc="9" el="267" ec="10">DesktopModules\Admin\Extensions\Download.ascx.cs</location>
            <body hash="63a6d2368531c93ab04d68549ea5ea56"><![CDATA[{
            string fileCheck = downloadURL;
            string postData = "";
            Dictionary<string, string> settings = PortalController.Instance.GetPortalSettings(ModuleContext.PortalId);
            PortalSecurity ps = new PortalSecurity();
            string username = ps.DecryptString(settings["Store_Username"], Config.GetDecryptionkey());
            string password = ps.DecryptString(settings["Store_Password"], Config.GetDecryptionkey());
            postData = postData + "username=" + username + "&password=" + password + "&fileid=" + ViewState["fileId"].ToString();

            WebRequest request = Globals.GetExternalRequest(fileCheck);

            request.Method = "POST";
            // Create POST data and convert it to a byte array.
            byte[] byteArray = Encoding.UTF8.GetBytes(postData);

            request.ContentType = "application/x-www-form-urlencoded";
            request.ContentLength = byteArray.Length;

            Stream dataStream = request.GetRequestStream();
            dataStream.Write(byteArray, 0, byteArray.Length);
            dataStream.Close();

            WebResponse response = request.GetResponse();

            string myfile = "";

            var cd = response.Headers["Content-Disposition"];
            if (cd != null && cd.Trim() != "" && cd.StartsWith("inline;filename="))
            {
                myfile =cd.Replace("inline;filename=", "");
            }

            DownloadDeploy(response, myfile, installFolder, catalogAction);

            UI.Skins.Skin.AddModuleMessage(this, String.Format(GetString("deploySuccess"), ViewState["extName"]), ModuleMessage.ModuleMessageType.GreenSuccess);
            installExtension.NavigateUrl = Util.InstallURL(ModuleContext.TabId, "", ViewState["extType"].ToString(), myfile.ToLower().Replace(".zip", ".resources").ToString());
            installExtension.Visible = true;
            deployExtension.Visible = false;
        }]]></body>
          </codeblock>
        </method>
        <method name="ProcessUnknown">
          <declaration><![CDATA[private void ProcessUnknown(string downloadURL, string installFolder, string catalogAction)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="212" sc="9" el="226" ec="10">DesktopModules\Admin\Extensions\Download.ascx.cs</location>
            <body hash="9f46d8abce30324f932346c46e48d024"><![CDATA[{
            string myfile = "";
            var wr = HttpAsWebResponse(downloadURL,
                                   null,
                                   null,
                                   null,
                                   null,
                                   null,
                                   -1,
                                   false,
                                   "DotNetNuke-Appgallery/1.0.0.0(Microsoft Windows NT 6.1.7600.0",
                                   "wpi://2.1.0.0/Microsoft Windows NT 6.1.7600.0",
                                   out myfile);
            DownloadDeploy(wr, myfile, installFolder, catalogAction);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="BufferSize">
          <declaration><![CDATA[public static int BufferSize = 1024;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cancel">
          <declaration><![CDATA[protected LinkButton cancel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="deployExtension">
          <declaration><![CDATA[protected LinkButton deployExtension;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="downloadExtension">
          <declaration><![CDATA[protected LinkButton downloadExtension;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="extensionDesc">
          <declaration><![CDATA[protected Label extensionDesc;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="extensionDescLabel">
          <declaration><![CDATA[protected LabelControl extensionDescLabel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="extensionName">
          <declaration><![CDATA[protected Label extensionName;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="extensionNamelabel">
          <declaration><![CDATA[protected LabelControl extensionNamelabel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="extensionType">
          <declaration><![CDATA[protected Label extensionType;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="extensionTypeLabel">
          <declaration><![CDATA[protected LabelControl extensionTypeLabel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="installExtension">
          <declaration><![CDATA[protected HyperLink installExtension;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblHelp">
          <declaration><![CDATA[protected Label lblHelp;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblTitle">
          <declaration><![CDATA[protected Label lblTitle;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="EditExtension">
      <declaration><![CDATA[public class EditExtension : ModuleUserControlBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public EditExtension()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="BindData">
          <declaration><![CDATA[private void BindData()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="135" sc="9" el="219" ec="10">DesktopModules\Admin\Extensions\EditExtension.ascx.cs</location>
            <body hash="b120645a005a208d70318fffb4b33147"><![CDATA[{
            email.ValidationExpression = Globals.glbEmailRegEx;
            trLanguagePackType.Visible = false;
            switch (Mode)
            {
                case "All":
                    lblHelp.Text = Localization.GetString("EditHelp", LocalResourceFile);
                    cmdUpdate.Text = Localization.GetString("cmdUpdate", LocalResourceFile);
                    break;
                case "LanguagePack":
                    lblHelp.Text = Localization.GetString("EditLanguageHelp", LocalResourceFile);
                    cmdUpdate.Text = Localization.GetString("cmdUpdateLanguage", LocalResourceFile);
                    break;
                case "Module":
                    lblHelp.Text = Localization.GetString("EditModuleHelp", LocalResourceFile);
                    cmdUpdate.Text = Localization.GetString("cmdUpdateModule", LocalResourceFile);
                    break;
                case "Skin":
                    lblHelp.Text = Localization.GetString("EditSkinHelp", LocalResourceFile);
                    cmdUpdate.Text = Localization.GetString("cmdUpdateSkin", LocalResourceFile);
                    break;
            }

            cmdPackage.Visible = IsSuperTab;
            cmdUpdate.Visible = IsSuperTab;
            if (Package != null)
            {
                
                if (PackageEditor == null || PackageID == Null.NullInteger)
                {
                    extensionSection.Visible = false;
                }
                else
                {
                    phEditor.Controls.Clear();
                    phEditor.Controls.Add(PackageEditor as Control);
                    var moduleControl = PackageEditor as IModuleControl;
                    if (moduleControl != null)
                    {
                        moduleControl.ModuleContext.Configuration = ModuleContext.Configuration;
                    }
                    PackageEditor.PackageID = PackageID;
                    PackageEditor.Initialize();

                    Package.IconFile = Util.ParsePackageIconFileName(Package);
                }
                
                switch (Package.PackageType)
                {                                        
                    case "Auth_System":
                    case "Container":
                    case "Module":
                    case "Skin":
                        iconFile.Enabled = true;
                        Package.IconFile = Util.ParsePackageIconFileName(Package);
                        break;
                    default:
                        iconFile.Enabled = false;
                        Package.IconFile = "Not Available";
                        break;
                }
                
                if (Mode != "All")
                {
                    packageType.Visible = false;
                }
                //Determine if Package is ready for packaging
                PackageWriterBase writer = PackageWriterFactory.GetWriter(Package);
                cmdPackage.Visible = IsSuperTab && writer != null && Directory.Exists(Path.Combine(Globals.ApplicationMapPath, writer.BasePath));

                cmdDelete.Visible = IsSuperTab && (!Package.IsSystemPackage) && (PackageController.CanDeletePackage(Package, ModuleContext.PortalSettings));
                ctlAudit.Entity = Package;

                packageForm.DataSource = Package;
                packageFormReadOnly.DataSource = Package;
                if(!Page.IsPostBack)
                {
                    packageForm.DataBind();
                    packageFormReadOnly.DataBind();
                }
                packageForm.Visible = IsSuperTab;
                packageFormReadOnly.Visible = !IsSuperTab;

            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnCancelClick">
          <declaration><![CDATA[protected void OnCancelClick(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="282" sc="9" el="284" ec="10">DesktopModules\Admin\Extensions\EditExtension.ascx.cs</location>
            <body hash="31face256e9e17dc6ce2e47fd2ab9985"><![CDATA[{
            Response.Redirect(ReturnUrl);
        }]]></body>
          </codeblock>
        </method>
        <method name="OnDeleteClick">
          <declaration><![CDATA[protected void OnDeleteClick(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="287" sc="9" el="289" ec="10">DesktopModules\Admin\Extensions\EditExtension.ascx.cs</location>
            <body hash="fc3e50768817c637e390bba831b4c0dc"><![CDATA[{
            Response.Redirect(Util.UnInstallURL(ModuleContext.TabId, PackageID));
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="244" sc="9" el="247" ec="10">DesktopModules\Admin\Extensions\EditExtension.ascx.cs</location>
            <body hash="8af52e5e60d8a8767ab5ab01869387c6"><![CDATA[{
            base.OnInit(e);
			JavaScript.RequestRegistration(CommonJs.DnnPlugins);
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="256" sc="9" el="279" ec="10">DesktopModules\Admin\Extensions\EditExtension.ascx.cs</location>
            <body hash="e6f0710de64e87761cffa78cadfee6aa"><![CDATA[{
            base.OnLoad(e);

            cmdCancel.Click += OnCancelClick;
            cmdDelete.Click += OnDeleteClick;
            cmdPackage.Click += OnPackageClick;
            cmdUpdate.Click += OnUpdateClick;
            Page.PreRenderComplete += (sender, args) =>
                                          {
                                              if (UrlUtils.InPopUp())
                                              {
                                                  var title = string.Format("{0} > {1}", Page.Title, Package.FriendlyName);
                                                  Page.Title = title;
                                              }
                                          };

            BindData();

            if (!IsPostBack)
            {
                ReturnUrl = Request.UrlReferrer != null ? Request.UrlReferrer.ToString() : Globals.NavigateURL();
            }

        }]]></body>
          </codeblock>
        </method>
        <method name="OnPackageClick">
          <declaration><![CDATA[protected void OnPackageClick(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="292" sc="9" el="302" ec="10">DesktopModules\Admin\Extensions\EditExtension.ascx.cs</location>
            <body hash="e266c99266b2a69a94b6376962a149cd"><![CDATA[{
            try
            {
                UpdatePackage(false);
                Response.Redirect(Util.PackageWriterURL(ModuleContext, PackageID));
            }
            catch (Exception ex)
            {
                Exceptions.ProcessModuleLoadException(this, ex);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnUpdateClick">
          <declaration><![CDATA[protected void OnUpdateClick(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="305" sc="9" el="314" ec="10">DesktopModules\Admin\Extensions\EditExtension.ascx.cs</location>
            <body hash="fd5864ec825ec996b31fe86a3ef4beff"><![CDATA[{
            try
            {
                UpdatePackage(true);
            }
            catch (Exception ex)
            {
                Exceptions.ProcessModuleLoadException(this, ex);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdatePackage">
          <declaration><![CDATA[private void UpdatePackage(bool displayMessage)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="222" sc="9" el="241" ec="10">DesktopModules\Admin\Extensions\EditExtension.ascx.cs</location>
            <body hash="f0698d4d81a147644b16e0835209f4e4"><![CDATA[{
            if (packageForm.IsValid)
            {
                var package = packageForm.DataSource as PackageInfo;
                if (package != null)
                {
                    var pkgIconFile = Util.ParsePackageIconFileName(package);
                    package.IconFile = (pkgIconFile.Trim().Length > 0)? Util.ParsePackageIconFile(package) : null;
                    PackageController.Instance.SaveExtensionPackage(package);
                }
                if (displayMessage)
                {
                    UI.Skins.Skin.AddModuleMessage(this, Localization.GetString("PackageUpdated", LocalResourceFile), ModuleMessage.ModuleMessageType.GreenSuccess);
                }
            }
            if (PackageEditor != null)
            {
                PackageEditor.UpdatePackage();
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_control">
          <declaration><![CDATA[private Control _control;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_package">
          <declaration><![CDATA[private PackageInfo _package;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdCancel">
          <declaration><![CDATA[protected LinkButton cmdCancel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdDelete">
          <declaration><![CDATA[protected LinkButton cmdDelete;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdPackage">
          <declaration><![CDATA[protected LinkButton cmdPackage;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdUpdate">
          <declaration><![CDATA[protected LinkButton cmdUpdate;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ctlAudit">
          <declaration><![CDATA[protected ModuleAuditControl ctlAudit;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="description">
          <declaration><![CDATA[protected DnnFormTextBoxItem description;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="DnnFormEditControlItem1">
          <declaration><![CDATA[protected DnnFormLiteralItem DnnFormEditControlItem1;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="DnnFormLiteralItem1">
          <declaration><![CDATA[protected DnnFormLiteralItem DnnFormLiteralItem1;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="DnnFormLiteralItem2">
          <declaration><![CDATA[protected DnnFormLiteralItem DnnFormLiteralItem2;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="DnnFormTextBoxItem1">
          <declaration><![CDATA[protected DnnFormLiteralItem DnnFormTextBoxItem1;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="DnnFormTextBoxItem2">
          <declaration><![CDATA[protected DnnFormLiteralItem DnnFormTextBoxItem2;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="DnnFormTextBoxItem3">
          <declaration><![CDATA[protected DnnFormLiteralItem DnnFormTextBoxItem3;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="DnnFormTextBoxItem4">
          <declaration><![CDATA[protected DnnFormLiteralItem DnnFormTextBoxItem4;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="DnnFormTextBoxItem5">
          <declaration><![CDATA[protected DnnFormLiteralItem DnnFormTextBoxItem5;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="DnnFormTextBoxItem6">
          <declaration><![CDATA[protected DnnFormLiteralItem DnnFormTextBoxItem6;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="DnnFormTextBoxItem7">
          <declaration><![CDATA[protected DnnFormLiteralItem DnnFormTextBoxItem7;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="DnnFormTextBoxItem8">
          <declaration><![CDATA[protected DnnFormLiteralItem DnnFormTextBoxItem8;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="DnnFormTextBoxItem9">
          <declaration><![CDATA[protected DnnFormLiteralItem DnnFormTextBoxItem9;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="email">
          <declaration><![CDATA[protected DnnFormTextBoxItem email;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="extensionSection">
          <declaration><![CDATA[protected HtmlGenericControl extensionSection;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="iconFile">
          <declaration><![CDATA[protected DnnFormTextBoxItem iconFile;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblHelp">
          <declaration><![CDATA[protected Label lblHelp;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="license">
          <declaration><![CDATA[protected DnnFormTextBoxItem license;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="moduleName">
          <declaration><![CDATA[protected DnnFormLiteralItem moduleName;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="organization">
          <declaration><![CDATA[protected DnnFormTextBoxItem organization;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="owner">
          <declaration><![CDATA[protected DnnFormTextBoxItem owner;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="packageForm">
          <declaration><![CDATA[protected DnnFormEditor packageForm;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="packageFormReadOnly">
          <declaration><![CDATA[protected DnnFormEditor packageFormReadOnly;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="packageFriendlyName">
          <declaration><![CDATA[protected DnnFormTextBoxItem packageFriendlyName;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="packageType">
          <declaration><![CDATA[protected DnnFormLiteralItem packageType;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="phEditor">
          <declaration><![CDATA[protected PlaceHolder phEditor;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plPackageType">
          <declaration><![CDATA[protected LabelControl plPackageType;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="rbPackageType">
          <declaration><![CDATA[protected RadioButtonList rbPackageType;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="releaseNotes">
          <declaration><![CDATA[protected DnnFormTextBoxItem releaseNotes;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="trLanguagePackType">
          <declaration><![CDATA[protected HtmlGenericControl trLanguagePackType;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="url">
          <declaration><![CDATA[protected DnnFormTextBoxItem url;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="valPackageType">
          <declaration><![CDATA[protected RequiredFieldValidator valPackageType;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="version">
          <declaration><![CDATA[protected DnnFormEditControlItem version;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="IsSuperTab">
          <declaration><![CDATA[protected bool IsSuperTab]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="62" sc="13" el="64" ec="14">DesktopModules\Admin\Extensions\EditExtension.ascx.cs</location>
            <body hash="b298f648aad827575060e3a4d3fb3f81"><![CDATA[{
                return (ModuleContext.PortalSettings.ActiveTab.IsSuperTab);
            }]]></body>
          </codeblock>
        </property>
        <property name="Mode">
          <declaration><![CDATA[public string Mode]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="76" sc="13" el="78" ec="14">DesktopModules\Admin\Extensions\EditExtension.ascx.cs</location>
            <body hash="b906ecef61d6bd1388ef25359fa112cc"><![CDATA[{
                return Convert.ToString(ModuleContext.Settings["Extensions_Mode"]);
            }]]></body>
          </codeblock>
        </property>
        <property name="Package">
          <declaration><![CDATA[protected PackageInfo Package]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="84" sc="13" el="86" ec="14">DesktopModules\Admin\Extensions\EditExtension.ascx.cs</location>
            <body hash="ae2a4d789de8bf5fd5f77763d5b959e1"><![CDATA[{
                return _package ?? (_package = PackageID == Null.NullInteger ? new PackageInfo() : PackageController.Instance.GetExtensionPackage(Null.NullInteger, p => p.PackageID == PackageID, true));
            }]]></body>
          </codeblock>
        </property>
        <property name="PackageEditor">
          <declaration><![CDATA[protected IPackageEditor PackageEditor]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="92" sc="13" el="105" ec="14">DesktopModules\Admin\Extensions\EditExtension.ascx.cs</location>
            <body hash="54139a35f15966f26aaf54b9681c910f"><![CDATA[{
                if (_control == null)
                {
                    if (Package != null)
                    {
                        var pkgType = PackageController.Instance.GetExtensionPackageType(t => t.PackageType == Package.PackageType);
                        if ((pkgType != null) && (!string.IsNullOrEmpty(pkgType.EditorControlSrc)))
                        {
                            _control = ControlUtilities.LoadControl<Control>(this, pkgType.EditorControlSrc);
                        }
                    }
                }
                return _control as IPackageEditor;
            }]]></body>
          </codeblock>
        </property>
        <property name="PackageID">
          <declaration><![CDATA[public int PackageID]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="111" sc="13" el="118" ec="14">DesktopModules\Admin\Extensions\EditExtension.ascx.cs</location>
            <body hash="a252ce6e7d01e898a1b350f23eab0003"><![CDATA[{
                var packageID = Null.NullInteger;
                if ((Request.QueryString["PackageID"] != null))
                {
                    packageID = Int32.Parse(Request.QueryString["PackageID"]);
                }
                return packageID;
            }]]></body>
          </codeblock>
        </property>
        <property name="ReturnUrl">
          <declaration><![CDATA[protected string ReturnUrl]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ViewMode">
          <declaration><![CDATA[protected PropertyEditorMode ViewMode]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="124" sc="13" el="131" ec="14">DesktopModules\Admin\Extensions\EditExtension.ascx.cs</location>
            <body hash="f6a256f230d81f42d6ff2f3583592e59"><![CDATA[{
                var viewMode = PropertyEditorMode.View;
                if (Request.IsLocal && IsSuperTab)
                {
                    viewMode = PropertyEditorMode.Edit;
                }
                return viewMode;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="Extensions">
      <declaration><![CDATA[public class Extensions : ModuleUserControlBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public Extensions()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="50" sc="9" el="92" ec="10">DesktopModules\Admin\Extensions\Extensions.ascx.cs</location>
            <body hash="3518f26db6223f58c0027fe0e46e73e1"><![CDATA[{
            base.OnInit(e);

            cmdInstall.NavigateUrl = Util.InstallURL(ModuleContext.TabId, "");

            cmdInstall.Visible = ModuleContext.PortalSettings.UserInfo.IsSuperUser;
            createExtensionLink.Visible = ModuleContext.IsHostMenu;
            createModuleLink.Visible = ModuleContext.IsHostMenu;

			JavaScript.RequestRegistration(CommonJs.DnnPlugins);

            installedExtensionsControl.LocalResourceFile = LocalResourceFile;
            installedExtensionsControl.ModuleContext.Configuration = ModuleContext.Configuration;
            installedExtensionsTab.Visible = true;
            installedExtensionsControl.Visible = true;
 
            if (ModuleContext.PortalSettings.ActiveTab.IsSuperTab)
            {
                availableExtensionsControl.LocalResourceFile = LocalResourceFile;
                availableExtensionsControl.ModuleContext.Configuration = ModuleContext.Configuration;
                availableExtensionsTab.Visible = true;
                availableExtensionsControl.Visible = true;
                availableExtensionsTabExpand.Visible = true;
            }

            if (ModuleContext.PortalSettings.ActiveTab.IsSuperTab)
            {
                purchasedExtensionsControl.LocalResourceFile = LocalResourceFile;
                purchasedExtensionsControl.ModuleContext.Configuration = ModuleContext.Configuration;
                purchasedExtensionsTab.Visible = true;
                purchasedExtensionsControl.Visible = true;
            }

            if (ModuleContext.PortalSettings.ActiveTab.IsSuperTab)
            {
                moreExtensionsControl.LocalResourceFile = LocalResourceFile;
                moreExtensionsControl.ModuleContext.Configuration = ModuleContext.Configuration;
                moreExtensionsTab.Visible = true;
                moreExtensionsControl.Visible = true;
                availableExtensionsTabExpand.Visible = true;
            }

        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="availableExtensionsControl">
          <declaration><![CDATA[protected AvailableExtensions availableExtensionsControl;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="availableExtensionsTab">
          <declaration><![CDATA[protected HtmlGenericControl availableExtensionsTab;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="availableExtensionsTabExpand">
          <declaration><![CDATA[protected HtmlGenericControl availableExtensionsTabExpand;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdInstall">
          <declaration><![CDATA[protected HyperLink cmdInstall;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="createExtensionLink">
          <declaration><![CDATA[protected ActionLink createExtensionLink;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="createModuleLink">
          <declaration><![CDATA[protected ActionLink createModuleLink;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="installedExtensionsControl">
          <declaration><![CDATA[protected InstalledExtensions installedExtensionsControl;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="installedExtensionsTab">
          <declaration><![CDATA[protected HtmlGenericControl installedExtensionsTab;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="moreExtensionsControl">
          <declaration><![CDATA[protected MoreExtensions moreExtensionsControl;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="moreExtensionsTab">
          <declaration><![CDATA[protected HtmlGenericControl moreExtensionsTab;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="purchasedExtensionsControl">
          <declaration><![CDATA[protected PurchasedExtensions purchasedExtensionsControl;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="purchasedExtensionsTab">
          <declaration><![CDATA[protected HtmlGenericControl purchasedExtensionsTab;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="ExtensionWizard">
      <declaration><![CDATA[public class ExtensionWizard : ModuleUserControlBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public ExtensionWizard()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="BindExtensionTypes">
          <declaration><![CDATA[private void BindExtensionTypes()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="147" sc="9" el="150" ec="10">DesktopModules\Admin\Extensions\ExtensionWizard.ascx.cs</location>
            <body hash="37c637d3e932bb262badebce41bcaed1"><![CDATA[{
            cboExtensionType.DataSource = PackageController.Instance.GetExtensionPackageTypes();
            cboExtensionType.DataBind();
        }]]></body>
          </codeblock>
        </method>
        <method name="BindPackageEditor">
          <declaration><![CDATA[private void BindPackageEditor()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="153" sc="9" el="169" ec="10">DesktopModules\Admin\Extensions\ExtensionWizard.ascx.cs</location>
            <body hash="bf70b72270d0bb1cad417d58290e19f0"><![CDATA[{
            phEditor.Controls.Clear();
            if (PackageEditor != null)
            {
                PackageEditor.PackageID = PackageID;
                PackageEditor.Initialize();
                PackageEditor.IsWizard = true;

                phEditor.Controls.Add(PackageEditor as Control);

                var moduleControl = PackageEditor as IModuleControl;
                if (moduleControl != null)
                {
                    moduleControl.ModuleContext.Configuration = ModuleContext.Configuration;
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="DisplayLanguageHelp">
          <declaration><![CDATA[private void DisplayLanguageHelp()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="172" sc="9" el="188" ec="10">DesktopModules\Admin\Extensions\ExtensionWizard.ascx.cs</location>
            <body hash="77d61946fde1b5289f5984facbdca2a8"><![CDATA[{
            switch (cboExtensionType.SelectedValue)
            {
                case "CoreLanguagePack":
                    lblLanguageHelp.Visible = true;
                    lblExtensionLanguageHelp.Visible = false;
                    break;
                case "ExtensionLanguagePack":
                    lblLanguageHelp.Visible = true;
                    lblExtensionLanguageHelp.Visible = true;
                    break;
                default:
                    lblLanguageHelp.Visible = false;
                    lblExtensionLanguageHelp.Visible = false;
                    break;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetText">
          <declaration><![CDATA[protected string GetText(string type)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="191" sc="9" el="214" ec="10">DesktopModules\Admin\Extensions\ExtensionWizard.ascx.cs</location>
            <body hash="62ed227e64da7d53e2fdf4b294a7aa38"><![CDATA[{
            string text = Null.NullString;
            string pageName = wizNewExtension.ActiveStep.Title;
            if (wizNewExtension.ActiveStepIndex == 1)
            {
                if (string.IsNullOrEmpty(Package.PackageType))
                {
                    pageName += "_" + Mode;
                }
                else
                {
                    pageName += "_" + Package.PackageType;
                }
            }
            if (type == "Title")
            {
                text = Localization.GetString(pageName + ".Title", LocalResourceFile);
            }
            else if (type == "Help")
            {
                text = Localization.GetString(pageName + ".Help", LocalResourceFile);
            }
            return text;
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="217" sc="9" el="235" ec="10">DesktopModules\Admin\Extensions\ExtensionWizard.ascx.cs</location>
            <body hash="263643d90db97e580f11485cfd30acec"><![CDATA[{
            base.OnInit(e);
            switch (Mode)
            {
                case "All":
                    extensionTypeRow.Visible = true;
                    break;
                case "Module":
                    extensionTypeRow.Visible = false;
                    break;
                case "CoreLanguagePack, ExtensionLanguagePack":
                    extensionTypeRow.Visible = false;
                    break;
                case "Skin":
                case "Container":
                    extensionTypeRow.Visible = false;
                    break;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="238" sc="9" el="263" ec="10">DesktopModules\Admin\Extensions\ExtensionWizard.ascx.cs</location>
            <body hash="e4ab79566054438cdace6953cbd8364c"><![CDATA[{
            base.OnLoad(e);

            wizNewExtension.ActiveStepChanged += wizNewExtension_ActiveStepChanged;
            wizNewExtension.CancelButtonClick += wizNewExtension_CancelButtonClick;
            wizNewExtension.NextButtonClick += wizNewExtension_NextButtonClick;

            extensionForm.DataSource = Package;

            //Bind the Owner control
            ownerForm.DataSource = Package;
            if (Package != null)
            {
                if (PackageEditor != null && PackageID > Null.NullInteger)
                {
                    BindPackageEditor();
                }
            }
            if (!Page.IsPostBack)
            {
                BindExtensionTypes();
                extensionForm.DataBind();
                ownerForm.DataBind();
            }
            DisplayLanguageHelp();
        }]]></body>
          </codeblock>
        </method>
        <method name="wizNewExtension_ActiveStepChanged">
          <declaration><![CDATA[protected void wizNewExtension_ActiveStepChanged(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="266" sc="9" el="281" ec="10">DesktopModules\Admin\Extensions\ExtensionWizard.ascx.cs</location>
            <body hash="063fa2757396a5b15c2f1a6691af6192"><![CDATA[{
            switch (wizNewExtension.ActiveStepIndex)
            {
                case 1:
                    if (Package.PackageType != "Module" && 
                        Package.PackageType != "CoreLanguagePack" && 
                        Package.PackageType != "ExtensionLanguagePack")
                    {
                        wizNewExtension.ActiveStepIndex = 2;
                    }
                    break;
                case 2:
                    wizNewExtension.DisplayCancelButton = false;
                    break;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="wizNewExtension_CancelButtonClick">
          <declaration><![CDATA[protected void wizNewExtension_CancelButtonClick(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="291" sc="9" el="294" ec="10">DesktopModules\Admin\Extensions\ExtensionWizard.ascx.cs</location>
            <body hash="2c896c815f910acee90ff4d780c8876c"><![CDATA[{
			//Redirect to Definitions page
            Response.Redirect(Globals.NavigateURL(), true);
        }]]></body>
          </codeblock>
        </method>
        <method name="wizNewExtension_NextButtonClick">
          <declaration><![CDATA[protected void wizNewExtension_NextButtonClick(object sender, WizardNavigationEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="305" sc="9" el="421" ec="10">DesktopModules\Admin\Extensions\ExtensionWizard.ascx.cs</location>
            <body hash="86c86887bad199446a7171e3464320c3"><![CDATA[{
            switch (e.CurrentStepIndex)
            {
                case 0:
                    if (extensionForm.IsValid)
                    {
                        var newPackage = extensionForm.DataSource as PackageInfo;
                        PackageInfo tmpPackage = PackageController.Instance.GetExtensionPackage(Null.NullInteger, p => p.Name == newPackage.Name);
                        if (tmpPackage == null)
                        {
                            switch (Mode)
                            {
                                case "All":
                                    newPackage.PackageType = cboExtensionType.SelectedValue;
                                    break;
                                default:
                                    newPackage.PackageType = Mode;
                                    break;
                            }
                            PackageController.Instance.SaveExtensionPackage(newPackage);
                            PackageID = newPackage.PackageID;
                            Locale locale;
                            LanguagePackInfo languagePack;
                            switch (newPackage.PackageType)
                            {
                                case "Auth_System":
                                    //Create a new Auth System
                                    var authSystem = new AuthenticationInfo
                                    {
                                        AuthenticationType = newPackage.Name,
                                        IsEnabled = Null.NullBoolean,
                                        PackageID = newPackage.PackageID
                                    };
                                    AuthenticationController.AddAuthentication(authSystem);
                                    break;
                                case "Container":
                                case "Skin":
                                    var skinPackage = new SkinPackageInfo
                                    {
                                        SkinName = newPackage.Name,
                                        PackageID = newPackage.PackageID,
                                        SkinType = newPackage.PackageType
                                    };
                                    SkinController.AddSkinPackage(skinPackage);
                                    break;
                                case "CoreLanguagePack":
                                    locale = LocaleController.Instance.GetLocale(PortalController.Instance.GetCurrentPortalSettings().DefaultLanguage);
                                    languagePack = new LanguagePackInfo
                                    {
                                        PackageID = newPackage.PackageID,
                                        LanguageID = locale.LanguageId,
                                        DependentPackageID = -2
                                    };
                                    LanguagePackController.SaveLanguagePack(languagePack);
                                    break;
                                case "ExtensionLanguagePack":
                                    locale = LocaleController.Instance.GetLocale(PortalController.Instance.GetCurrentPortalSettings().DefaultLanguage);
                                    languagePack = new LanguagePackInfo
                                    {
                                        PackageID = newPackage.PackageID,
                                        LanguageID = locale.LanguageId,
                                        DependentPackageID = Null.NullInteger
                                    };
                                    LanguagePackController.SaveLanguagePack(languagePack);
                                    break;
                                case "Module":
                                    //Create a new DesktopModule
                                    var desktopModule = new DesktopModuleInfo
                                    {
                                        PackageID = newPackage.PackageID,
                                        ModuleName = newPackage.Name,
                                        FriendlyName = newPackage.FriendlyName,
                                        FolderName = newPackage.Name,
                                        Description = newPackage.Description,
                                        Version = newPackage.Version.ToString(3),
                                        SupportedFeatures = 0
                                    };
                                    int desktopModuleId = DesktopModuleController.SaveDesktopModule(desktopModule, false, true);
                                    if (desktopModuleId > Null.NullInteger)
                                    {
                                        DesktopModuleController.AddDesktopModuleToPortals(desktopModuleId);
                                    }
                                    break;
                                case "SkinObject":
                                    var skinControl = new SkinControlInfo { PackageID = newPackage.PackageID, ControlKey = newPackage.Name };
                                    SkinControlController.SaveSkinControl(skinControl);
                                    break;
                            }

                        }
                        else
                        {
                            e.Cancel = true;
                            lblError.Text = string.Format(Localization.GetString("DuplicateName", LocalResourceFile), newPackage.Name);
                        	lblError.Visible = true;
                        }
                    }
                    if (PackageEditor != null && PackageID > Null.NullInteger)
                    {
                        BindPackageEditor();
                    }
                    break;
                case 1:
                    if (PackageEditor != null)
                    {
                        PackageEditor.UpdatePackage();
                    }
                    break;
                case 2:
                    if (ownerForm.IsValid)
                    {
                        PackageController.Instance.SaveExtensionPackage(ownerForm.DataSource as PackageInfo);
                    }
                    Response.Redirect(Globals.NavigateURL(), true);
                    break;
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_Control">
          <declaration><![CDATA[private Control _Control;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_Package">
          <declaration><![CDATA[private PackageInfo _Package;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cboExtensionType">
          <declaration><![CDATA[protected DnnComboBox cboExtensionType;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="description">
          <declaration><![CDATA[protected DnnFormTextBoxItem description;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="email">
          <declaration><![CDATA[protected DnnFormTextBoxItem email;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="extensionForm">
          <declaration><![CDATA[protected DnnFormEditor extensionForm;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="extensionFriendlyName">
          <declaration><![CDATA[protected DnnFormTextBoxItem extensionFriendlyName;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="extensionName">
          <declaration><![CDATA[protected DnnFormTextBoxItem extensionName;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="extensionTypeRow">
          <declaration><![CDATA[protected HtmlGenericControl extensionTypeRow;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblError">
          <declaration><![CDATA[protected Label lblError;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblExtensionLanguageHelp">
          <declaration><![CDATA[protected Label lblExtensionLanguageHelp;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblHelp">
          <declaration><![CDATA[protected Label lblHelp;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblLanguageHelp">
          <declaration><![CDATA[protected Label lblLanguageHelp;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="organization">
          <declaration><![CDATA[protected DnnFormTextBoxItem organization;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="owner">
          <declaration><![CDATA[protected DnnFormTextBoxItem owner;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ownerForm">
          <declaration><![CDATA[protected DnnFormEditor ownerForm;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="phEditor">
          <declaration><![CDATA[protected PlaceHolder phEditor;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plExtensionType">
          <declaration><![CDATA[protected LabelControl plExtensionType;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Step0">
          <declaration><![CDATA[protected WizardStep Step0;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Step1">
          <declaration><![CDATA[protected WizardStep Step1;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Step2">
          <declaration><![CDATA[protected WizardStep Step2;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="url">
          <declaration><![CDATA[protected DnnFormTextBoxItem url;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="version">
          <declaration><![CDATA[protected DnnFormEditControlItem version;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="wizNewExtension">
          <declaration><![CDATA[protected Wizard wizNewExtension;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="ExtensionType">
          <declaration><![CDATA[protected string ExtensionType]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="56" sc="13" el="72" ec="14">DesktopModules\Admin\Extensions\ExtensionWizard.ascx.cs</location>
            <body hash="b58aff81e4803d1fe5a484e9f5422b24"><![CDATA[{
                if (Mode == "All")
                {
                    return cboExtensionType.Text;
                }
                else
                {
                    if (!string.IsNullOrEmpty(Request.QueryString["SkinType"]))
                    {
                        return Request.QueryString["SkinType"];
                    }
                    else
                    {
                        return Mode;
                    }
                }
            }]]></body>
          </codeblock>
        </property>
        <property name="Mode">
          <declaration><![CDATA[protected string Mode]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="78" sc="13" el="85" ec="14">DesktopModules\Admin\Extensions\ExtensionWizard.ascx.cs</location>
            <body hash="7e93fa3518184a7a1655fbded3b75536"><![CDATA[{
                string _Mode = "All";
                if (!string.IsNullOrEmpty(Request.QueryString["Type"]))
                {
                    _Mode = Request.QueryString["Type"];
                }
                return _Mode;
            }]]></body>
          </codeblock>
        </property>
        <property name="Package">
          <declaration><![CDATA[protected PackageInfo Package]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="91" sc="13" el="107" ec="14">DesktopModules\Admin\Extensions\ExtensionWizard.ascx.cs</location>
            <body hash="8635f7abc148bc29846c1081c56f59fa"><![CDATA[{
                if (ViewState["Package"] == null)
                {
                    if (PackageID == Null.NullInteger)
                    {
                        _Package = new PackageInfo();
                        _Package.PackageType = ExtensionType;
                    }
                    else
                    {
                        _Package = PackageController.Instance.GetExtensionPackage(Null.NullInteger, p => p.PackageID == PackageID);
                    }

                    ViewState["Package"] = _Package;
                }
                return ViewState["Package"] as PackageInfo;
            }]]></body>
          </codeblock>
        </property>
        <property name="PackageEditor">
          <declaration><![CDATA[protected IPackageEditor PackageEditor]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="113" sc="13" el="126" ec="14">DesktopModules\Admin\Extensions\ExtensionWizard.ascx.cs</location>
            <body hash="260bdc6c44fccea9c480c457b0d4c866"><![CDATA[{
                if (_Control == null)
                {
                    if (Package != null)
                    {
                        PackageType _PackageType = PackageController.Instance.GetExtensionPackageType(t => t.PackageType == Package.PackageType);
                        if ((_PackageType != null) && (!string.IsNullOrEmpty(_PackageType.EditorControlSrc)))
                        {
                            _Control = ControlUtilities.LoadControl<Control>(this, _PackageType.EditorControlSrc);
                        }
                    }
                }
                return _Control as IPackageEditor;
            }]]></body>
          </codeblock>
        </property>
        <property name="PackageID">
          <declaration><![CDATA[protected int PackageID]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="132" sc="13" el="139" ec="14">DesktopModules\Admin\Extensions\ExtensionWizard.ascx.cs</location>
            <body hash="ab6799b8b711820bcc4b25fe9d95a235"><![CDATA[{
                int _PackageID = Null.NullInteger;
                if (ViewState["PackageID"] != null)
                {
                    _PackageID = Int32.Parse(ViewState["PackageID"].ToString());
                }
                return _PackageID;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="141" sc="13" el="143" ec="14">DesktopModules\Admin\Extensions\ExtensionWizard.ascx.cs</location>
            <body hash="0a16f7b9926306e364b22a7d6c8fa33b"><![CDATA[{
                ViewState["PackageID"] = value;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="Install">
      <declaration><![CDATA[public class Install : ModuleUserControlBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public Install()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
        <constructor name=".cctor">
          <declaration><![CDATA[static Install()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="59" sc="6" el="59" ec="94">DesktopModules\Admin\Extensions\Install.ascx.cs</location>
            <body hash="bfaa558b4f4ecc41388e84ee10da07e0"><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof (Install))]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="AzureCompact">
          <declaration><![CDATA[private bool? AzureCompact()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="564" sc="3" el="602" ec="4">DesktopModules\Admin\Extensions\Install.ascx.cs</location>
            <body hash="709f199f5de11ae1def6bc08abf04601"><![CDATA[{
			bool? compact = null;
			string manifestFile = null;
            if (Installer.InstallerInfo.ManifestFile != null)
            {
                manifestFile = Installer.InstallerInfo.ManifestFile.TempFileName;
            }
            if (PackageType!=null)
            {
		        if (PackageType.PackageType == "CoreLanguagePack" || PackageType.PackageType == "ExtensionLanguagePack")
		        {
		            compact = true;
		        }
            }
            if (!IsAzureDatabase())
            {
                compact = true;
            }
            else if (manifestFile != null && File.Exists(manifestFile))
			{
				try
				{
					var document = new XmlDocument();
					document.Load(manifestFile);
					var compactNode = document.SelectSingleNode("/dotnetnuke/packages/package/azureCompatible");
					if (compactNode != null && !string.IsNullOrEmpty(compactNode.InnerText))
					{
					    compact = compactNode.InnerText.ToLowerInvariant() == "true";
					}
				}
				catch (Exception ex)
				{
					Logger.Error(ex);
				}
				
			}

			return compact;
		}]]></body>
          </codeblock>
        </method>
        <method name="BindPackage">
          <declaration><![CDATA[private void BindPackage()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="230" sc="9" el="267" ec="10">DesktopModules\Admin\Extensions\Install.ascx.cs</location>
            <body hash="8cf724e9a822cb07134fcf82558cb6a1"><![CDATA[{
            CreateInstaller();
            if (Installer.IsValid)
            {
                if (_Installer.Packages.Count > 0)
                {
                    _Package = _Installer.Packages[0].Package;
                }
                
				//Bind Package Info
				packageForm.DataSource = _Package;
                packageForm.DataBind();

                //Bind License Info
                licenseForm.DataSource = _Package;
                licenseForm.DataBind();

                //Bind ReleaseNotes Info
                releaseNotesForm.DataSource = _Package;
                releaseNotesForm.DataBind();
            }
            else
            {
				//Error reading Manifest
                switch (wizInstall.ActiveStepIndex)
                {
                    case 0:
                        lblLoadMessage.Text = Localization.GetString("InstallError", LocalResourceFile);
                        phLoadLogs.Controls.Add(Installer.InstallerInfo.Log.GetLogsTable());
                        break;
                    case 3:
                        lblAcceptMessage.Text = Localization.GetString("InstallError", LocalResourceFile);
                        lblAcceptMessage.Visible = true;
                        phAcceptLogs.Controls.Add(Installer.InstallerInfo.Log.GetLogsTable());
                        break;
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="CheckSecurity">
          <declaration><![CDATA[private void CheckSecurity()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="275" sc="9" el="280" ec="10">DesktopModules\Admin\Extensions\Install.ascx.cs</location>
            <body hash="bf882486f9a65497ae701dcc1f2d1e03"><![CDATA[{
            if (!ModuleContext.PortalSettings.UserInfo.IsSuperUser)
            {
                Response.Redirect(Globals.NavigateURL("Access Denied"), true);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="chkAzureCompact_CheckedChanged">
          <declaration><![CDATA[protected void chkAzureCompact_CheckedChanged(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="723" sc="9" el="732" ec="10">DesktopModules\Admin\Extensions\Install.ascx.cs</location>
            <body hash="bd96968ab29f8b3c238c1f506331e709"><![CDATA[{
            if (chkAzureCompact.Checked)
            {
                lblWarningMessage.Text = Localization.GetString("AzureCompactWarning", LocalResourceFile);
            }
            else
            {
				lblWarningMessage.Text = Localization.GetString("AzureCompactMessage", LocalResourceFile);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="chkIgnoreRestrictedFiles_CheckedChanged">
          <declaration><![CDATA[protected void chkIgnoreRestrictedFiles_CheckedChanged(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="699" sc="9" el="708" ec="10">DesktopModules\Admin\Extensions\Install.ascx.cs</location>
            <body hash="3dee08d94b68b1c3abc1d53cbdac57a4"><![CDATA[{
            if ((chkIgnoreWhiteList.Checked))
            {
                lblWarningMessage.Text = Localization.GetString("IgnoreRestrictedFilesWarning", LocalResourceFile);
            }
            else
            {
                lblWarningMessage.Text = "";
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="chkRepairInstall_CheckedChanged">
          <declaration><![CDATA[protected void chkRepairInstall_CheckedChanged(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="711" sc="9" el="720" ec="10">DesktopModules\Admin\Extensions\Install.ascx.cs</location>
            <body hash="97380d4038a78883ed41411d3719c71c"><![CDATA[{
            if ((chkRepairInstall.Checked))
            {
                lblWarningMessage.Text = Localization.GetString("RepairInstallWarning", LocalResourceFile);
            }
            else
            {
                lblWarningMessage.Text = Localization.GetString("PackageInstalled", LocalResourceFile);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="CreateInstaller">
          <declaration><![CDATA[private void CreateInstaller()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="288" sc="9" el="323" ec="10">DesktopModules\Admin\Extensions\Install.ascx.cs</location>
            <body hash="0466effae21c59cd40b0cad0c42e1ef4"><![CDATA[{
            CheckSecurity();
            _Installer = new Installer(TempInstallFolder, ManifestFile, Request.MapPath("."), false);

            //The Installer is created automatically with a SecurityAccessLevel of Host
            //Check if the User has lowere Security and update as neccessary
            if (!ModuleContext.PortalSettings.UserInfo.IsSuperUser)
            {
                if (ModuleContext.PortalSettings.UserInfo.IsInRole(ModuleContext.PortalSettings.AdministratorRoleName))
                {
					//Admin User
                    Installer.InstallerInfo.SecurityAccessLevel = SecurityAccessLevel.Admin;
                }
                else if (ModulePermissionController.CanAdminModule(ModuleContext.Configuration))
                {
					//Has Edit rights
                    Installer.InstallerInfo.SecurityAccessLevel = SecurityAccessLevel.Edit;
                }
                else if (ModulePermissionController.CanViewModule(ModuleContext.Configuration))
                {
					//Has View rights
                    Installer.InstallerInfo.SecurityAccessLevel = SecurityAccessLevel.View;
                }
                else
                {
                    Installer.InstallerInfo.SecurityAccessLevel = SecurityAccessLevel.Anonymous;
                }
            }
            Installer.InstallerInfo.PortalID = InstallPortalId;

            //Read the manifest
            if (Installer.InstallerInfo.ManifestFile != null)
            {
                Installer.ReadManifest(true);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="CreateManifest">
          <declaration><![CDATA[private void CreateManifest()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="326" sc="9" el="331" ec="10">DesktopModules\Admin\Extensions\Install.ascx.cs</location>
            <body hash="1e5dcd601614dc3f2700ec884ce33438"><![CDATA[{
            ManifestFile = Path.Combine(TempInstallFolder, Path.GetFileNameWithoutExtension(FileName) + ".dnn");
            StreamWriter manifestWriter = new StreamWriter(ManifestFile);
            manifestWriter.Write(LegacyUtil.CreateSkinManifest(FileName, rblLegacySkin.SelectedValue, TempInstallFolder));
            manifestWriter.Close();
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteInstallFile">
          <declaration><![CDATA[private void DeleteInstallFile()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="610" sc="3" el="636" ec="4">DesktopModules\Admin\Extensions\Install.ascx.cs</location>
            <body hash="a29b7556c5b9e4c152f1758e42e547ad"><![CDATA[{
			try
			{
				if (!String.IsNullOrEmpty(TempInstallFolder) && Directory.Exists(TempInstallFolder))
				{
					Directory.Delete(TempInstallFolder, true);
				}

				if (DeleteFile && File.Exists(FileName))
				{
					// delete file
					try
					{
						File.SetAttributes(FileName, FileAttributes.Normal);
						File.Delete(FileName);
					}
					catch (Exception exc)
					{
						Logger.Error(exc);
					}
				}
			}
			catch (Exception exc)
			{
				Exceptions.ProcessModuleLoadException(this, exc);
			}
		}]]></body>
          </codeblock>
        </method>
        <method name="GetText">
          <declaration><![CDATA[protected string GetText(string type)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="643" sc="9" el="654" ec="10">DesktopModules\Admin\Extensions\Install.ascx.cs</location>
            <body hash="64a461fb97c89cb3a07d1a99a2c345c0"><![CDATA[{
            string text = Null.NullString;
            if (type == "Title")
            {
                text = Localization.GetString(wizInstall.ActiveStep.Title + ".Title", LocalResourceFile);
            }
            else if (type == "Help")
            {
                text = Localization.GetString(wizInstall.ActiveStep.Title + ".Help", LocalResourceFile);
            }
            return text;
        }]]></body>
          </codeblock>
        </method>
        <method name="Initialize">
          <declaration><![CDATA[private void Initialize()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="334" sc="9" el="345" ec="10">DesktopModules\Admin\Extensions\Install.ascx.cs</location>
            <body hash="954ebe07633c46e59551ab6f3f3cc56e"><![CDATA[{
            var package = String.Empty;
            if (!String.IsNullOrEmpty(Request.QueryString["package"]))
            {
                package = Request.QueryString["package"];
            }

            if (!String.IsNullOrEmpty(package))
            {
                LoadPackage(package);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="InstallPackage">
          <declaration><![CDATA[private void InstallPackage(WizardNavigationEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="353" sc="9" el="396" ec="10">DesktopModules\Admin\Extensions\Install.ascx.cs</location>
            <body hash="625c095a7f6bc04e08a0ae8fe7f9be25"><![CDATA[{
            CreateInstaller();
            if (Installer.IsValid)
            {
				//Reset Log
                Installer.InstallerInfo.Log.Logs.Clear();

                //Set the IgnnoreWhiteList flag
                Installer.InstallerInfo.IgnoreWhiteList = chkIgnoreWhiteList.Checked;

                //Set the Repair flag
                Installer.InstallerInfo.RepairInstall = chkRepairInstall.Checked;

                //Install
                Installer.Install();

                if (!Installer.IsValid)
                {
                    lblInstallMessage.Text = Localization.GetString("InstallError", LocalResourceFile);
                }
                phInstallLogs.Controls.Add(Installer.InstallerInfo.Log.GetLogsTable());

				DeleteInstallFile();
            }
            else
            {
				//Error reading Manifest
                switch (e.CurrentStepIndex)
                {
                    case 3:
                        lblAcceptMessage.Text = Localization.GetString("InstallError", LocalResourceFile);
                        lblAcceptMessage.Visible = true;
                        phAcceptLogs.Controls.Add(Installer.InstallerInfo.Log.GetLogsTable());
                        break;
                    case 4:
                        lblInstallMessage.Text = Localization.GetString("InstallError", LocalResourceFile);
                        phInstallLogs.Controls.Add(Installer.InstallerInfo.Log.GetLogsTable());
                        break;
                }
                e.Cancel = true;
            }

        	lblInstallMessageRow.Visible = !string.IsNullOrEmpty(lblInstallMessage.Text);
        }]]></body>
          </codeblock>
        </method>
        <method name="IsAzureDatabase">
          <declaration><![CDATA[private bool IsAzureDatabase()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="605" sc="3" el="607" ec="4">DesktopModules\Admin\Extensions\Install.ascx.cs</location>
            <body hash="4931a1afae7ffa5efed5943d94f89cee"><![CDATA[{
			return PetaPocoHelper.ExecuteScalar<int>(DataProvider.Instance().ConnectionString, CommandType.Text, "SELECT CAST(ServerProperty('EngineEdition') as INT)") == 5;
		}]]></body>
          </codeblock>
        </method>
        <method name="LoadPackage">
          <declaration><![CDATA[private void LoadPackage(string package)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="399" sc="9" el="453" ec="10">DesktopModules\Admin\Extensions\Install.ascx.cs</location>
            <body hash="aff049230d2debddb6f1a1c94a7d87c5"><![CDATA[{
            var packageType = String.Empty;
            var installFolder = String.Empty;

            if (!String.IsNullOrEmpty(Request.QueryString["ptype"]))
            {
                packageType = Request.QueryString["ptype"];
            }
            switch (packageType.ToLowerInvariant())
            {
                case "auth_system":
                    installFolder = "AuthSystem";
                    break;
                case "corelanguagepack":
                case "extensionlanguagepack":
                    installFolder = "Language";
                    break;
                case "javascript_library":
                    installFolder = "JavaScriptLibrary";
                    break;
                case "module":
                case "skin":
                case "container":
                case "provider":
                    installFolder = packageType;
                    break;
                case "library":
                    installFolder = "Module";
                    break;
                default:
                    break;
            }

            if (!String.IsNullOrEmpty(installFolder))
            {
                FileName = String.Format("{0}\\Install\\{1}\\{2}", Globals.ApplicationMapPath, installFolder, package);
                if (File.Exists(FileName) &&
                        (Path.GetExtension(FileName.ToLower()) == ".zip"
                            || Path.GetExtension(FileName.ToLower()) == ".resources"))
                {
                    _Installer = new Installer(new FileStream(FileName, FileMode.Open, FileAccess.Read), 
                                                    Globals.ApplicationMapPath, 
                                                    true, 
                                                    false);
                    TempInstallFolder = Installer.TempInstallFolder;
                    if (Installer.InstallerInfo.ManifestFile != null)
                    {
                        ManifestFile = Path.GetFileName(Installer.InstallerInfo.ManifestFile.TempFileName);
                    }

                    DeleteFile = true;
                    wizInstall.ActiveStepIndex = 1;
                }
            }           
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="670" sc="9" el="696" ec="10">DesktopModules\Admin\Extensions\Install.ascx.cs</location>
            <body hash="6f43c441f4a257c462d8edf4acecc6dd"><![CDATA[{
            base.OnLoad(e);

            chkIgnoreWhiteList.CheckedChanged += chkIgnoreRestrictedFiles_CheckedChanged;
            chkRepairInstall.CheckedChanged += chkRepairInstall_CheckedChanged;
			chkAzureCompact.CheckedChanged += chkAzureCompact_CheckedChanged;
            wizInstall.ActiveStepChanged += wizInstall_ActiveStepChanged;
            wizInstall.CancelButtonClick += wizInstall_CancelButtonClick;
            wizInstall.NextButtonClick += wizInstall_NextButtonClick;
            wizInstall.FinishButtonClick += wizInstall_FinishButtonClick;

            try
            {
                CheckSecurity();

                maxSizeWarningLabel.Text = String.Format(Localization.GetString("FileSizeRestriction", LocalResourceFile), (Config.GetMaxUploadSize() / (1024 * 1024)));

                if(!Page.IsPostBack)
                {
                    Initialize();
                }
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="ValidatePackage">
          <declaration><![CDATA[private bool ValidatePackage()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="456" sc="9" el="561" ec="10">DesktopModules\Admin\Extensions\Install.ascx.cs</location>
            <body hash="4f6284d1dff4b2943754c089ec67a9ee"><![CDATA[{
            bool isValid = Null.NullBoolean;

            CreateInstaller();
            if (Installer.InstallerInfo.ManifestFile != null)
            {
                ManifestFile = Path.GetFileName(Installer.InstallerInfo.ManifestFile.TempFileName);
            }

            var azureCompact = AzureCompact();
            if (string.IsNullOrEmpty(ManifestFile))
            {
                if (!string.IsNullOrEmpty(rblLegacySkin.SelectedValue))
                {
					//We need to create a manifest file so the installer can continue to run
                    CreateManifest();

                    //Revalidate Package
                    isValid = ValidatePackage();
                }
                else
                {
                    lblWarningMessageWrapper.Visible = true;
                    pnlRepair.Visible = false;
                    pnlWhitelist.Visible = false;
	                pnlAzureCompact.Visible = false;
                    pnlLegacy.Visible = true;
                    lblWarningMessage.Text = Localization.GetString("NoManifest", LocalResourceFile);
                }
            }
            else if (Installer == null)
            {
                lblWarningMessageWrapper.Visible = true;
                pnlRepair.Visible = false;
                pnlWhitelist.Visible = false;
                pnlLegacy.Visible = false;
				pnlAzureCompact.Visible = false;
                lblWarningMessage.Text = Localization.GetString("ZipCriticalError", LocalResourceFile);
                wizInstall.FindControl("StepNavigationTemplateContainerID").FindControl("nextButtonStep").Visible = false;
            }
            else if (!Installer.IsValid)
            {
                lblWarningMessageWrapper.Visible = true;
                pnlRepair.Visible = false;
                pnlWhitelist.Visible = false;
                pnlLegacy.Visible = false;
				pnlAzureCompact.Visible = false;
                lblWarningMessage.Text = Localization.GetString("ZipError", LocalResourceFile);

                //Error parsing zip
                phLoadLogs.Controls.Add(Installer.InstallerInfo.Log.GetLogsTable());
                wizInstall.FindControl("StepNavigationTemplateContainerID").FindControl("nextButtonStep").Visible = false;
            }
            else if (!string.IsNullOrEmpty(Installer.InstallerInfo.LegacyError))
            {
                lblWarningMessageWrapper.Visible = true;
                pnlRepair.Visible = false;
                pnlWhitelist.Visible = false;
                pnlLegacy.Visible = false;
				pnlAzureCompact.Visible = false;
                lblWarningMessage.Text = Localization.GetString(Installer.InstallerInfo.LegacyError, LocalResourceFile);
            }
            else if (!Installer.InstallerInfo.HasValidFiles && !chkIgnoreWhiteList.Checked)
            {
                lblWarningMessageWrapper.Visible = true;
                pnlRepair.Visible = false;
                pnlWhitelist.Visible = true;
                pnlLegacy.Visible = false;
				pnlAzureCompact.Visible = false;
                lblWarningMessage.Text = string.Format(Localization.GetString("InvalidFiles", LocalResourceFile), Installer.InstallerInfo.InvalidFileExtensions);
            }
            else if (Installer.InstallerInfo.Installed && !chkRepairInstall.Checked)
            {
                lblWarningMessageWrapper.Visible = true;
				if (UserController.Instance.GetCurrentUserInfo().IsSuperUser || Installer.InstallerInfo.PortalID == InstallPortalId)
                {
                    pnlRepair.Visible = true;
                }
                pnlWhitelist.Visible = false;
                pnlLegacy.Visible = false;
				pnlAzureCompact.Visible = false;
                lblWarningMessage.Text = Localization.GetString("PackageInstalled", LocalResourceFile);
            }
			else if ((!azureCompact.HasValue || !azureCompact.Value) && !chkAzureCompact.Checked)
			{
				lblWarningMessageWrapper.Visible = true;
				pnlRepair.Visible = false;
				pnlWhitelist.Visible = false;
				pnlLegacy.Visible = false;
				pnlAzureCompact.Visible = true;
				lblWarningMessage.Text = Localization.GetString("AzureCompactMessage", LocalResourceFile);
                lblAzureCompact.Text = Localization.GetString("AzureCompactHelp", LocalResourceFile);
                if (azureCompact.HasValue)
                {
                    wizInstall.FindControl("StepNavigationTemplateContainerID").FindControl("nextButtonStep").Visible = chkAzureCompact.Visible = false;

                    lblWarningMessage.Text = Localization.GetString("NoAzureCompactMessage", LocalResourceFile);
                    lblAzureCompact.Text = Localization.GetString("NoAzureCompactHelp", LocalResourceFile);
                }
			}
            else
            {
                isValid = true;
            }
            return isValid;
        }]]></body>
          </codeblock>
        </method>
        <method name="wizInstall_ActiveStepChanged">
          <declaration><![CDATA[protected void wizInstall_ActiveStepChanged(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="735" sc="9" el="754" ec="10">DesktopModules\Admin\Extensions\Install.ascx.cs</location>
            <body hash="e68e0b764769e5160e947b17b1cb14a4"><![CDATA[{
            switch (wizInstall.ActiveStepIndex)
            {
                case 1: //Warning Page
                    if (ValidatePackage())
                    {
						//Skip Warning Page
                        wizInstall.ActiveStepIndex = 2;
                    }
                    break;
                case 2:
                case 3:
                case 4:
                    BindPackage();
                    break;
                case 5:
                    wizInstall.DisplayCancelButton = false;
                    break;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="wizInstall_CancelButtonClick">
          <declaration><![CDATA[protected void wizInstall_CancelButtonClick(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="764" sc="9" el="792" ec="10">DesktopModules\Admin\Extensions\Install.ascx.cs</location>
            <body hash="a5cd7870dfba5b35bdfaa8cf8ce639c8"><![CDATA[{
            try
            {
                if (!String.IsNullOrEmpty(TempInstallFolder) && Directory.Exists(TempInstallFolder))
                {
                    Globals.DeleteFolderRecursive(TempInstallFolder);
                }

                if (PackageType != null)
                {
                    if (PackageType.PackageType == "CoreLanguagePack" || PackageType.PackageType == "ExtensionLanguagePack")
                    {
                        var lpInstallFileName = String.Format("{0}\\Install\\{1}\\{2}", Globals.ApplicationMapPath,
                            "Language", "installlanguage.resources");
                        if (File.Exists(lpInstallFileName))
                        {
                            File.Delete(lpInstallFileName);
                        }
                    }
                }

				//Redirect to Definitions page
                Response.Redirect(ReturnURL, true);
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="wizInstall_FinishButtonClick">
          <declaration><![CDATA[protected void wizInstall_FinishButtonClick(object sender, WizardNavigationEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="802" sc="9" el="804" ec="10">DesktopModules\Admin\Extensions\Install.ascx.cs</location>
            <body hash="51375712e9d20555becf7121756e3c3c"><![CDATA[{
            Response.Redirect(ReturnURL, true);
        }]]></body>
          </codeblock>
        </method>
        <method name="wizInstall_NextButtonClick">
          <declaration><![CDATA[protected void wizInstall_NextButtonClick(object sender, WizardNavigationEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="815" sc="9" el="877" ec="10">DesktopModules\Admin\Extensions\Install.ascx.cs</location>
            <body hash="6bd5bb84e905b63d335b58adf4484b67"><![CDATA[{
            switch (e.CurrentStepIndex)
            {
                case 0:
                    var postedFile = cmdBrowse.PostedFile;
                    var strMessage = string.Empty;
                    FileName = Path.GetFileName(postedFile.FileName);
                    var strExtension = Path.GetExtension(FileName);
                    if (string.IsNullOrEmpty(postedFile.FileName))
                    {
                        strMessage = Localization.GetString("NoFile", LocalResourceFile);
                    }
                    else if (strExtension.ToLower() != ".zip")
                    {
                        strMessage = string.Format(Localization.GetString("InvalidExt", LocalResourceFile), FileName);
                    } 
                    else 
                    {
                        try
                        {
                            _Installer = new Installer(postedFile.InputStream, Request.MapPath("."), true, false);
                        }
                        catch (ICSharpCode.SharpZipLib.ZipException)
                        {
                            strMessage = Localization.GetString("ZipCriticalError.Text", LocalResourceFile);  
                        }
                    }

                    if (!string.IsNullOrEmpty(strMessage))
                    {
                        lblLoadMessage.Text = strMessage;
                        lblLoadMessage.Visible = true;
                        e.Cancel = true;
                    }
                    else
                    {
                        TempInstallFolder = Installer.TempInstallFolder;
                        if (Installer.InstallerInfo.ManifestFile != null)
                        {
                            ManifestFile = Path.GetFileName(Installer.InstallerInfo.ManifestFile.TempFileName);
                        }
                    }
                    break;
                case 1: //Warning Page
                    e.Cancel = !ValidatePackage();
                    break;
                case 4: //Accept Terms 
                    if (chkAcceptLicense.Checked)
                    {
                        InstallPackage(e);
                    }
                    else
                    {
                        lblAcceptMessage.Text = Localization.GetString("AcceptTerms", LocalResourceFile);
                        lblAcceptMessage.Visible = true;
                        e.Cancel = true;

                        //Rebind package
                        BindPackage();
                    }
                    break;
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_Installer">
          <declaration><![CDATA[private Installer _Installer;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_Package">
          <declaration><![CDATA[private PackageInfo _Package;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_PackageType">
          <declaration><![CDATA[private PackageType _PackageType;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkAcceptLicense">
          <declaration><![CDATA[protected CheckBox chkAcceptLicense;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkAzureCompact">
          <declaration><![CDATA[protected CheckBox chkAzureCompact;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkIgnoreWhiteList">
          <declaration><![CDATA[protected CheckBox chkIgnoreWhiteList;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkRepairInstall">
          <declaration><![CDATA[protected CheckBox chkRepairInstall;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdBrowse">
          <declaration><![CDATA[protected HtmlInputFile cmdBrowse;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="description">
          <declaration><![CDATA[protected DnnFormLiteralItem description;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="email">
          <declaration><![CDATA[protected DnnFormLiteralItem email;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="iconFile">
          <declaration><![CDATA[protected DnnFormLiteralItem iconFile;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblAcceptMessage">
          <declaration><![CDATA[protected Label lblAcceptMessage;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblAzureCompact">
          <declaration><![CDATA[protected Label lblAzureCompact;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblBrowseFileHelp">
          <declaration><![CDATA[protected Label lblBrowseFileHelp;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblIgnoreWhiteListHelp">
          <declaration><![CDATA[protected Label lblIgnoreWhiteListHelp;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblInstallMessage">
          <declaration><![CDATA[protected Label lblInstallMessage;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblInstallMessageRow">
          <declaration><![CDATA[protected HtmlGenericControl lblInstallMessageRow;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblLoadMessage">
          <declaration><![CDATA[protected Label lblLoadMessage;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblRepairInstallHelp">
          <declaration><![CDATA[protected Label lblRepairInstallHelp;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblWarningMessage">
          <declaration><![CDATA[protected Label lblWarningMessage;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblWarningMessageWrapper">
          <declaration><![CDATA[protected HtmlGenericControl lblWarningMessageWrapper;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="license">
          <declaration><![CDATA[protected DnnFormLiteralItem license;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="licenseForm">
          <declaration><![CDATA[protected DnnFormEditor licenseForm;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Logger">
          <declaration><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof(Install));]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="maxSizeWarningLabel">
          <declaration><![CDATA[protected Label maxSizeWarningLabel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="moduleName">
          <declaration><![CDATA[protected DnnFormLiteralItem moduleName;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="organization">
          <declaration><![CDATA[protected DnnFormLiteralItem organization;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="owner">
          <declaration><![CDATA[protected DnnFormLiteralItem owner;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="packageForm">
          <declaration><![CDATA[protected DnnFormEditor packageForm;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="packageFriendlyName">
          <declaration><![CDATA[protected DnnFormLiteralItem packageFriendlyName;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="packageType">
          <declaration><![CDATA[protected DnnFormLiteralItem packageType;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="phAcceptLogs">
          <declaration><![CDATA[protected PlaceHolder phAcceptLogs;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="phInstallLogs">
          <declaration><![CDATA[protected PlaceHolder phInstallLogs;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="phLoadLogs">
          <declaration><![CDATA[protected PlaceHolder phLoadLogs;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plAcceptLicense">
          <declaration><![CDATA[protected LabelControl plAcceptLicense;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="pnlAzureCompact">
          <declaration><![CDATA[protected Panel pnlAzureCompact;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="pnlLegacy">
          <declaration><![CDATA[protected Panel pnlLegacy;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="pnlRepair">
          <declaration><![CDATA[protected Panel pnlRepair;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="pnlWhitelist">
          <declaration><![CDATA[protected Panel pnlWhitelist;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="rblLegacySkin">
          <declaration><![CDATA[protected RadioButtonList rblLegacySkin;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="releaseNotes">
          <declaration><![CDATA[protected DnnFormLiteralItem releaseNotes;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="releaseNotesForm">
          <declaration><![CDATA[protected DnnFormEditor releaseNotesForm;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Step0">
          <declaration><![CDATA[protected WizardStep Step0;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Step1">
          <declaration><![CDATA[protected WizardStep Step1;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Step2">
          <declaration><![CDATA[protected WizardStep Step2;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Step3">
          <declaration><![CDATA[protected WizardStep Step3;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Step4">
          <declaration><![CDATA[protected WizardStep Step4;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Step5">
          <declaration><![CDATA[protected WizardStep Step5;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="url">
          <declaration><![CDATA[protected DnnFormLiteralItem url;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="version">
          <declaration><![CDATA[protected DnnFormLiteralItem version;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="wizInstall">
          <declaration><![CDATA[protected Wizard wizInstall;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="DeleteFile">
          <declaration><![CDATA[protected bool DeleteFile]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="73" sc="13" el="75" ec="14">DesktopModules\Admin\Extensions\Install.ascx.cs</location>
            <body hash="d6dbf693554997bad14e674df4790624"><![CDATA[{
                return Convert.ToBoolean(ViewState["DeleteFile"]);
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="77" sc="13" el="79" ec="14">DesktopModules\Admin\Extensions\Install.ascx.cs</location>
            <body hash="0c30f301e149be1f1049458019140f68"><![CDATA[{
                ViewState["DeleteFile"] = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="FileName">
          <declaration><![CDATA[protected string FileName]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="91" sc="13" el="93" ec="14">DesktopModules\Admin\Extensions\Install.ascx.cs</location>
            <body hash="ebbfdd41785e36098bb047f8f94ed908"><![CDATA[{
                return Convert.ToString(ViewState["FileName"]);
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="95" sc="13" el="97" ec="14">DesktopModules\Admin\Extensions\Install.ascx.cs</location>
            <body hash="f922894b246fbfbe8949338b6c1a4818"><![CDATA[{
                ViewState["FileName"] = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="Installer">
          <declaration><![CDATA[protected Installer Installer]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="108" sc="13" el="110" ec="14">DesktopModules\Admin\Extensions\Install.ascx.cs</location>
            <body hash="20a41ef05414194d910794f18701a757"><![CDATA[{
                return _Installer;
            }]]></body>
          </codeblock>
        </property>
        <property name="InstallPortalId">
          <declaration><![CDATA[protected int InstallPortalId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="168" sc="13" el="175" ec="14">DesktopModules\Admin\Extensions\Install.ascx.cs</location>
            <body hash="bc78e5da907d08e8feb1bf7446ea2ba9"><![CDATA[{
                int _PortalId = ModuleContext.PortalId;
                if (ModuleContext.IsHostMenu)
                {
                    _PortalId = Null.NullInteger;
                }
                return _PortalId;
            }]]></body>
          </codeblock>
        </property>
        <property name="ManifestFile">
          <declaration><![CDATA[protected string ManifestFile]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="121" sc="13" el="123" ec="14">DesktopModules\Admin\Extensions\Install.ascx.cs</location>
            <body hash="2fe45d2a78e6567803f4778db2db6700"><![CDATA[{
                return Convert.ToString(ViewState["ManifestFile"]);
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="125" sc="13" el="127" ec="14">DesktopModules\Admin\Extensions\Install.ascx.cs</location>
            <body hash="44ed7ad7da82839ab9e5a64f994bfe7b"><![CDATA[{
                ViewState["ManifestFile"] = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="Package">
          <declaration><![CDATA[protected PackageInfo Package]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="138" sc="13" el="140" ec="14">DesktopModules\Admin\Extensions\Install.ascx.cs</location>
            <body hash="657f78cbd32a9985939235ad8da964d5"><![CDATA[{
                return _Package;
            }]]></body>
          </codeblock>
        </property>
        <property name="PackageType">
          <declaration><![CDATA[protected PackageType PackageType]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="151" sc="13" el="162" ec="14">DesktopModules\Admin\Extensions\Install.ascx.cs</location>
            <body hash="d9ecb3c789f0703615f5d88b606bbb89"><![CDATA[{
                if (_PackageType == null)
                {
                    string pType = Null.NullString;
                    if (!string.IsNullOrEmpty(Request.QueryString["ptype"]))
                    {
                        pType = Request.QueryString["ptype"];
                    }
                    _PackageType = PackageController.Instance.GetExtensionPackageType(t => t.PackageType.Equals(pType, StringComparison.OrdinalIgnoreCase));
                }
                return _PackageType;
            }]]></body>
          </codeblock>
        </property>
        <property name="ReturnURL">
          <declaration><![CDATA[protected string ReturnURL]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="186" sc="13" el="200" ec="14">DesktopModules\Admin\Extensions\Install.ascx.cs</location>
            <body hash="e3686114dd1bc3ece5002ea39ae51681"><![CDATA[{
                string _ReturnUrl = Server.UrlDecode(Request.Params["returnUrl"]);

                if (string.IsNullOrEmpty(_ReturnUrl))
                {
                    int TabID = ModuleContext.PortalSettings.HomeTabId;

                    if (Request.Params["rtab"] != null)
                    {
                        TabID = int.Parse(Request.Params["rtab"]);
                    }
                    _ReturnUrl = Globals.NavigateURL(TabID);
                }
                return _ReturnUrl;
            }]]></body>
          </codeblock>
        </property>
        <property name="TempInstallFolder">
          <declaration><![CDATA[protected string TempInstallFolder]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="211" sc="13" el="213" ec="14">DesktopModules\Admin\Extensions\Install.ascx.cs</location>
            <body hash="a3d936e0bbf2ab5263a95b9b4d8436be"><![CDATA[{
                return Convert.ToString(ViewState["TempInstallFolder"]);
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="215" sc="13" el="217" ec="14">DesktopModules\Admin\Extensions\Install.ascx.cs</location>
            <body hash="5eb6d716924c67d4b0d54231597ab193"><![CDATA[{
                ViewState["TempInstallFolder"] = value;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="InstalledExtensions">
      <declaration><![CDATA[public class InstalledExtensions : ModuleUserControlBase, IActionable]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public InstalledExtensions()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="AddModulesToList">
          <declaration><![CDATA[private void AddModulesToList(List<PackageInfo> packages)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="106" sc="9" el="113" ec="10">DesktopModules\Admin\Extensions\InstalledExtensions.ascx.cs</location>
            <body hash="31d14e8aed336c1a9539ca261169b851"><![CDATA[{
            Dictionary<int, PortalDesktopModuleInfo> portalModules = DesktopModuleController.GetPortalDesktopModulesByPortalID(ModuleContext.PortalId);
            packages.AddRange(from modulePackage in PackageController.Instance.GetExtensionPackages(Null.NullInteger, p => p.PackageType == "Module") 
                              let desktopModule = DesktopModuleController.GetDesktopModuleByPackageID(modulePackage.PackageID) 
                                from portalModule in portalModules.Values 
                                where desktopModule != null && portalModule.DesktopModuleID == desktopModule.DesktopModuleID 
                                select modulePackage);
        }]]></body>
          </codeblock>
        </method>
        <method name="BindGrid">
          <declaration><![CDATA[private void BindGrid(string packageType, DataGrid grid, Label noResultsLabel)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="116" sc="9" el="164" ec="10">DesktopModules\Admin\Extensions\InstalledExtensions.ascx.cs</location>
            <body hash="f5f22cf4d7938dd27d45d2c91b667c10"><![CDATA[{
            var packages = new List<PackageInfo>();

            grid.ItemDataBound += extensionsGrid_ItemDataBound;

            UpdateGridColumns(grid);

			if (String.IsNullOrEmpty(Upgrade.UpgradeIndicator(DotNetNukeContext.Current.Application.Version, "", "~", "", Request.IsLocal, Request.IsSecureConnection)))
			{
				lblUpdateRow.Visible = false;
				grid.Columns[8].HeaderText = "";
			}

			Localization.LocalizeDataGrid(ref grid, LocalResourceFile);

            switch (packageType)
            {
                case "Module":
                    if (!ModuleContext.PortalSettings.ActiveTab.IsSuperTab)
                    {
                        AddModulesToList(packages);
                    }
                    else
                    {
                        packages = PackageController.Instance.GetExtensionPackages(Null.NullInteger, p => p.PackageType == "Module").ToList();
                    }
                    break;
                case "Skin":
                case "Container":
                    packages = PackageController.Instance.GetExtensionPackages(ModuleContext.PortalSettings.ActiveTab.IsSuperTab ? Null.NullInteger : ModuleContext.PortalId, p => p.PackageType == packageType).ToList();
                    break;
                default:
                    packages = PackageController.Instance.GetExtensionPackages(Null.NullInteger, p => p.PackageType == packageType).ToList();
                    break;
            }

            if (packages.Count > 0)
            {
                noResultsLabel.Visible = false;
                grid.Visible = true;
                grid.DataSource = packages;
                grid.DataBind();
            }
            else
            {
                grid.Visible = false;
                noResultsLabel.Visible = true;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="BindPackageTypes">
          <declaration><![CDATA[private void BindPackageTypes()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="167" sc="9" el="171" ec="10">DesktopModules\Admin\Extensions\InstalledExtensions.ascx.cs</location>
            <body hash="c97d75eb1001866be99e862508debd06"><![CDATA[{
            //force modules to be the first in the list
            extensionTypeRepeater.DataSource = PackageTypesList.OrderBy(p => p.Value.PackageType != "Module");
            extensionTypeRepeater.DataBind();
        }]]></body>
          </codeblock>
        </method>
        <method name="cboLocales_SelectedIndexChanged">
          <declaration><![CDATA[protected void cboLocales_SelectedIndexChanged(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="397" sc="9" el="399" ec="10">DesktopModules\Admin\Extensions\InstalledExtensions.ascx.cs</location>
            <body hash="77f601901b79e0c292dde093ff73b024"><![CDATA[{
            BindPackageTypes();
        }]]></body>
          </codeblock>
        </method>
        <method name="extensionsGrid_ItemDataBound">
          <declaration><![CDATA[protected void extensionsGrid_ItemDataBound(object sender, DataGridItemEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="402" sc="9" el="425" ec="10">DesktopModules\Admin\Extensions\InstalledExtensions.ascx.cs</location>
            <body hash="27d49a7b1fad7d231bd08232569eb1b7"><![CDATA[{
            DataGridItem item = e.Item;
            if (item.ItemType == ListItemType.Item || item.ItemType == ListItemType.AlternatingItem || item.ItemType == ListItemType.SelectedItem)
            {
                var editHyperlink = item.Controls[8].Controls[0] as HyperLink;
                if (editHyperlink != null)
                {
                    var package = (PackageInfo) item.DataItem;
                    if (ModuleContext.PortalSettings.ActiveTab.IsSuperTab)
                    {
                        editHyperlink.Visible = !package.IsSystemPackage && PackageController.CanDeletePackage(package, ModuleContext.PortalSettings);
                    }
                    else
                    {
                        editHyperlink.Visible = false;
                    }
                }
                editHyperlink = item.Controls[0].Controls[0] as HyperLink;
                if (editHyperlink != null)
                {
                    editHyperlink.Visible = ModuleContext.IsEditable;
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="extensionTypeRepeater_ItemDataBound">
          <declaration><![CDATA[private void extensionTypeRepeater_ItemDataBound(object sender, RepeaterItemEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="428" sc="9" el="440" ec="10">DesktopModules\Admin\Extensions\InstalledExtensions.ascx.cs</location>
            <body hash="a172e6a906e9f496fb15bc433452bedb"><![CDATA[{
            RepeaterItem item = e.Item;
            if (e.Item.ItemType == ListItemType.Item || e.Item.ItemType == ListItemType.AlternatingItem)
            {
                var kvp = (KeyValuePair<string, PackageType>)e.Item.DataItem;

                var extensionsGrid = item.FindControl("extensionsGrid") as DataGrid;

                var noResultsLabel = item.FindControl("noResultsLabel") as Label;

                BindGrid(kvp.Key, extensionsGrid, noResultsLabel);				
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="FormatVersion">
          <declaration><![CDATA[protected string FormatVersion(object version)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="224" sc="9" el="232" ec="10">DesktopModules\Admin\Extensions\InstalledExtensions.ascx.cs</location>
            <body hash="6758dcdf77fbe057906a6369ca1501d5"><![CDATA[{
            var package = version as PackageInfo;
            var retValue = Null.NullString;
            if (package != null)
            {
                retValue = package.Version.ToString(3);
            }
            return retValue;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetAboutTooltip">
          <declaration><![CDATA[protected string GetAboutTooltip(object dataItem)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="235" sc="9" el="258" ec="10">DesktopModules\Admin\Extensions\InstalledExtensions.ascx.cs</location>
            <body hash="6285fd357dbbed90f265782f87836c64"><![CDATA[{
            var returnValue = string.Empty;
            try
            {
                if ((ModuleContext.PortalSettings.ActiveTab.IsSuperTab))
                {
                    var portalID = Convert.ToInt32(DataBinder.Eval(dataItem, "PortalID"));
                    if ((portalID != Null.NullInteger && portalID != int.MinValue))
                    {
                        var portal = PortalController.Instance.GetPortal(portalID);
                        returnValue = string.Format(Localization.GetString("InstalledOnPortal.Tooltip", LocalResourceFile), portal.PortalName);
                    }
                    else
                    {
                        returnValue = Localization.GetString("InstalledOnHost.Tooltip", LocalResourceFile);
                    }
                }
            }
            catch (Exception ex)
            {
                Exceptions.ProcessModuleLoadException(this, ex);
            }
            return returnValue;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetIsPackageInUseInfo">
          <declaration><![CDATA[protected string GetIsPackageInUseInfo(object dataItem)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="261" sc="9" el="272" ec="10">DesktopModules\Admin\Extensions\InstalledExtensions.ascx.cs</location>
            <body hash="a9d12748588ec9ea4c7e86a4ec164ca4"><![CDATA[{
            var info = dataItem as PackageInfo;
            if (info != null)
            {
                var package = info;
                if ((package.PackageType.ToUpper() == "MODULE"))
                {
                    return PackagesInUse.ContainsKey(package.PackageID) ? "<a href=\"" + ModuleContext.EditUrl("PackageID", package.PackageID.ToString(CultureInfo.InvariantCulture), "UsageDetails") + "\">" + LocalizeString("Yes") + "</a>" : LocalizeString("No");
                }
            }
            return string.Empty;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPackageDescription">
          <declaration><![CDATA[protected string GetPackageDescription(object dataItem)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="285" sc="9" el="293" ec="10">DesktopModules\Admin\Extensions\InstalledExtensions.ascx.cs</location>
            <body hash="6342dad92751fec04681cf47df1b25e9"><![CDATA[{
            var package = dataItem as PackageInfo;
            var retValue = Null.NullString;
            if (package != null)
            {
                retValue = package.Description;
            }
            return retValue;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPackageIcon">
          <declaration><![CDATA[protected string GetPackageIcon(object dataItem)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="296" sc="9" el="328" ec="10">DesktopModules\Admin\Extensions\InstalledExtensions.ascx.cs</location>
            <body hash="dbb84bcf4a533b6a38a2818350050d22"><![CDATA[{
            var package = dataItem as PackageInfo;
            if (package != null)
            {
                switch (package.PackageType)
                {
                    case "Module":
                        return (package.IconFile != string.Empty) ? package.IconFile : Globals.ImagePath + DefaultExtensionImage;
                    case "Container":
                        return (package.IconFile != string.Empty) ? package.IconFile : Globals.ImagePath + DefaultContainerImage;
                    case "Skin":
                    case "SkinObject":
                        return (package.IconFile != string.Empty) ? package.IconFile : Globals.ImagePath + DefaultSkinImage;
                    case "AuthenticationSystem":
                    case "Auth_System":
                        return (package.IconFile != string.Empty) ? package.IconFile : Globals.ImagePath + DefaultAuthenicationImage;
                    case "CoreLanguagePack":
                    case "ExtensionLanguagePack":
                        return (package.IconFile != string.Empty) ? package.IconFile : Globals.ImagePath + DefaultLanguageImage;
                    case "Provider":
                        return (package.IconFile != string.Empty) ? package.IconFile : Globals.ImagePath + DefaultProviderImage;
                    case "Widget":
                        return (package.IconFile != string.Empty) ? package.IconFile : Globals.ImagePath + DefaultWidgetImage;
                    case "DashboardControl":
                        return (package.IconFile != string.Empty) ? package.IconFile : Globals.ImagePath + DefaultDashboardImage;
                    case "Library":
                        return (package.IconFile != string.Empty) ? package.IconFile : Globals.ImagePath + DefaultLibraryImage;
                    default:
                        return (package.IconFile != string.Empty) ? package.IconFile : Globals.ImagePath + DefaultExtensionImage;
                }
            }
            return null;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPackageType">
          <declaration><![CDATA[protected string GetPackageType(object dataItem)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="331" sc="9" el="343" ec="10">DesktopModules\Admin\Extensions\InstalledExtensions.ascx.cs</location>
            <body hash="82a01a7a8e9801a5e7b2d41ca2259bec"><![CDATA[{
            var kvp = (KeyValuePair<string, PackageType>) dataItem;

            var localizeName = Localization.GetString(kvp.Key + ".Type", LocalResourceFile);

			//catch empty resource key because some module will add itself package type.
			if(string.IsNullOrEmpty(localizeName))
			{
				localizeName = kvp.Key;
			}

        	return localizeName;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPackageTypeDescription">
          <declaration><![CDATA[protected string GetPackageTypeDescription(string typeKey)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="275" sc="9" el="282" ec="10">DesktopModules\Admin\Extensions\InstalledExtensions.ascx.cs</location>
            <body hash="118d1d25548da609dcf693ffb7c499c2"><![CDATA[{
            var returnValue = typeKey;
            if ((PackageTypesList.ContainsKey(typeKey)))
            {
                returnValue = PackageTypesList[typeKey].Description;
            }
            return returnValue;
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="346" sc="9" el="373" ec="10">DesktopModules\Admin\Extensions\InstalledExtensions.ascx.cs</location>
            <body hash="9da81a8637f331be1f15cc7e63a07963"><![CDATA[{
            base.OnLoad(e);

            #region Bind Handlers

            cboLocales.SelectedIndexChanged += cboLocales_SelectedIndexChanged;
            extensionTypeRepeater.ItemDataBound += extensionTypeRepeater_ItemDataBound;

            #endregion

            if (!Page.IsPostBack)
            {

                cboLocales.DataSource = LocaleController.Instance.GetLocales(Null.NullInteger).Values;
                cboLocales.DataBind();
                cboLocales.Items.Insert(0, new ListItem(Localization.GetString("Not_Specified", Localization.SharedResourceFile), ""));
            }

            if (ModuleContext.PortalSettings.ActiveTab.IsSuperTab)
            {
                languageSelectorRow.Visible = !Request.IsLocal;
            }
            else
            {
                languageSelectorRow.Visible = false;
            }
            BindPackageTypes();
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateGridColumns">
          <declaration><![CDATA[private void UpdateGridColumns(DataGrid grid)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="174" sc="9" el="202" ec="10">DesktopModules\Admin\Extensions\InstalledExtensions.ascx.cs</location>
            <body hash="69b978351be207954897bec6390569d1"><![CDATA[{
            foreach (DataGridColumn column in grid.Columns)
            {
                if (ReferenceEquals(column.GetType(), typeof(ImageCommandColumn)))
                {
                    var imageColumn = (ImageCommandColumn)column;
                    if (!String.IsNullOrEmpty(imageColumn.CommandName))
                    {
                        imageColumn.Text = Localization.GetString(imageColumn.CommandName, LocalResourceFile);
                    }
                    if (imageColumn.CommandName == "Delete")
                    {
                        var parameters = new string[2];
                        parameters[0] = "rtab=" + ModuleContext.TabId;
                        parameters[1] = "packageId=keyfield";
                        var formatString = ModuleContext.NavigateUrl(ModuleContext.TabId, "UnInstall", false, parameters);                        
                        formatString = formatString.Replace("keyfield", "{0}");
                        imageColumn.NavigateURLFormatString = formatString;
                        imageColumn.Visible = UserController.Instance.GetCurrentUserInfo().IsSuperUser;
                    }
                    if (imageColumn.CommandName == "Edit")
                    {
                        string formatString = ModuleContext.EditUrl("packageid", "keyfield", "Edit");
                        formatString = formatString.Replace("keyfield", "{0}");
                        imageColumn.NavigateURLFormatString = formatString;
                    }
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="UpgradeIndicator">
          <declaration><![CDATA[private string UpgradeIndicator(Version version, string packageType, string packageName, string culture)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="205" sc="9" el="212" ec="10">DesktopModules\Admin\Extensions\InstalledExtensions.ascx.cs</location>
            <body hash="ca343e66f2ef8be10ddd9929cfce7c31"><![CDATA[{
            string strURL = Upgrade.UpgradeIndicator(version, packageType, packageName, culture, Request.IsLocal, Request.IsSecureConnection);
            if (String.IsNullOrEmpty(strURL))
            {
                strURL = Globals.ApplicationPath + "/images/spacer.gif";
            }
            return strURL;
        }]]></body>
          </codeblock>
        </method>
        <method name="UpgradeRedirect">
          <declaration><![CDATA[private string UpgradeRedirect(Version version, string packageType, string packageName, string culture)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="215" sc="9" el="217" ec="10">DesktopModules\Admin\Extensions\InstalledExtensions.ascx.cs</location>
            <body hash="e131b75673b522e7e15e55bf6d2d91e8"><![CDATA[{
            return Upgrade.UpgradeRedirect(version, packageType, packageName, culture);
        }]]></body>
          </codeblock>
        </method>
        <method name="UpgradeService">
          <declaration><![CDATA[protected string UpgradeService(Version version, string packageType, string packageName)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="376" sc="9" el="390" ec="10">DesktopModules\Admin\Extensions\InstalledExtensions.ascx.cs</location>
            <body hash="e98683fde7d95f00e644fce1f95c4241"><![CDATA[{
            var strUpgradeService = "";
            strUpgradeService += "<a title=\"" + Localization.GetString("UpgradeMessage", LocalResourceFile) + "\" href=\"" + UpgradeRedirect(version, packageType, packageName, "") +
                                 "\" target=\"_blank\"><img title=\"" + Localization.GetString("UpgradeMessage", LocalResourceFile) + "\" src=\"" +
                                 UpgradeIndicator(version, packageType, packageName, "") + "\" border=\"0\" /></a>";
            if (!string.IsNullOrEmpty(cboLocales.SelectedValue))
            {
                strUpgradeService += "<br />";
                strUpgradeService += "<a title=\"" + Localization.GetString("LanguageMessage", LocalResourceFile) + "\" href=\"" +
                                     UpgradeRedirect(version, packageType, packageName, cboLocales.SelectedItem.Value) + "\" target=\"_blank\"><img title=\"" +
                                     Localization.GetString("LanguageMessage", LocalResourceFile) + "\" src=\"" + UpgradeIndicator(version, packageType, packageName, cboLocales.SelectedItem.Value) +
                                     "\" border=\"0\" /></a>";
            }
            return strUpgradeService;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_packagesInUse">
          <declaration><![CDATA[private IDictionary<int, PackageInfo> _packagesInUse;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_packageTypes">
          <declaration><![CDATA[private IDictionary<string, PackageType> _packageTypes;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cboLocales">
          <declaration><![CDATA[protected DropDownList cboLocales;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="DefaultAuthenicationImage">
          <declaration><![CDATA[private const string DefaultAuthenicationImage = "icon_authentication.png";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="DefaultContainerImage">
          <declaration><![CDATA[private const string DefaultContainerImage = "icon_container.gif";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="DefaultDashboardImage">
          <declaration><![CDATA[private const string DefaultDashboardImage = "icon_dashboard.png";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="DefaultExtensionImage">
          <declaration><![CDATA[private const string DefaultExtensionImage = "icon_extensions_32px.png";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="DefaultLanguageImage">
          <declaration><![CDATA[private const string DefaultLanguageImage = "icon_languagePack.gif";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="DefaultLibraryImage">
          <declaration><![CDATA[private const string DefaultLibraryImage = "icon_library.png";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="DefaultProviderImage">
          <declaration><![CDATA[private const string DefaultProviderImage = "icon_provider.gif";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="DefaultSkinImage">
          <declaration><![CDATA[private const string DefaultSkinImage = "icon_skin.gif";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="DefaultWidgetImage">
          <declaration><![CDATA[private const string DefaultWidgetImage = "icon_widget.png";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="extensionTypeRepeater">
          <declaration><![CDATA[protected Repeater extensionTypeRepeater;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="languageSelectorRow">
          <declaration><![CDATA[protected HtmlGenericControl languageSelectorRow;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblUpdate">
          <declaration><![CDATA[protected Label lblUpdate;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblUpdateRow">
          <declaration><![CDATA[protected HtmlGenericControl lblUpdateRow;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plLocales">
          <declaration><![CDATA[protected LabelControl plLocales;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="ModuleActions">
          <declaration><![CDATA[public ModuleActionCollection ModuleActions]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="449" sc="13" el="525" ec="14">DesktopModules\Admin\Extensions\InstalledExtensions.ascx.cs</location>
            <body hash="f1de838d3eeaf666f6a1a6955176020d"><![CDATA[{
                var Actions = new ModuleActionCollection();
                if (ModuleContext.IsHostMenu)
                {
                    Actions.Add(ModuleContext.GetNextActionID(),
                                Localization.GetString("ExtensionInstall.Action", LocalResourceFile),
                                ModuleActionType.AddContent,
                                "",
                                "action_import.gif",
                                Util.InstallURL(ModuleContext.TabId, ""),
                                false,
                                SecurityAccessLevel.Host,
                                true,
                                false);
                    Actions.Add(ModuleContext.GetNextActionID(),
                                Localization.GetString("InstallExtensions.Action", LocalResourceFile),
                                ModuleActionType.AddContent,
                                "",
                                "action_import.gif",
                                ModuleContext.EditUrl("BatchInstall"),
                                false,
                                SecurityAccessLevel.Host,
                                true,
                                false);
                    Actions.Add(ModuleContext.GetNextActionID(),
                                Localization.GetString("CreateExtension.Action", LocalResourceFile),
                                ModuleActionType.AddContent,
                                "",
                                "add.gif",
                                ModuleContext.EditUrl("NewExtension"),
                                false,
                                SecurityAccessLevel.Host,
                                true,
                                false);
                    Actions.Add(ModuleContext.GetNextActionID(),
                                Localization.GetString("CreateModule.Action", LocalResourceFile),
                                ModuleActionType.AddContent,
                                "",
                                "add.gif",
                                ModuleContext.EditUrl("EditModuleDefinition"),
                                false,
                                SecurityAccessLevel.Host,
                                true,
                                false);
                    Actions.Add(ModuleContext.GetNextActionID(),
                                Localization.GetString("CreateLanguagePack.Action", LocalResourceFile),
                                ModuleActionType.AddContent,
                                "",
                                "add.gif",
                                ModuleContext.EditUrl("Type", "LanguagePack", "NewExtension"),
                                false,
                                SecurityAccessLevel.Host,
                                true,
                                false);
                    Actions.Add(ModuleContext.GetNextActionID(),
                                Localization.GetString("CreateSkin.Action", LocalResourceFile),
                                ModuleActionType.AddContent,
                                "",
                                "add.gif",
                                ModuleContext.EditUrl("Type", "Skin", "NewExtension"),
                                false,
                                SecurityAccessLevel.Host,
                                true,
                                false);
                    Actions.Add(ModuleContext.GetNextActionID(),
                                Localization.GetString("CreateContainer.Action", LocalResourceFile),
                                ModuleActionType.AddContent,
                                "",
                                "add.gif",
                                ModuleContext.EditUrl("Type", "Container", "NewExtension"),
                                false,
                                SecurityAccessLevel.Host,
                                true,
                                false);
                }
                return Actions;
            }]]></body>
          </codeblock>
        </property>
        <property name="PackagesInUse">
          <declaration><![CDATA[protected IDictionary<int, PackageInfo> PackagesInUse]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="76" sc="13" el="82" ec="14">DesktopModules\Admin\Extensions\InstalledExtensions.ascx.cs</location>
            <body hash="d7135159ea1cd1f7754c7fe51200c5e1"><![CDATA[{
                if ((_packagesInUse == null))
                {
                    _packagesInUse = PackageController.GetModulePackagesInUse(PortalController.Instance.GetCurrentPortalSettings().PortalId, ModuleContext.PortalSettings.ActiveTab.IsSuperTab);
                }
                return _packagesInUse;
            }]]></body>
          </codeblock>
        </property>
        <property name="PackageTypesList">
          <declaration><![CDATA[protected IDictionary<string, PackageType> PackageTypesList]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="88" sc="13" el="98" ec="14">DesktopModules\Admin\Extensions\InstalledExtensions.ascx.cs</location>
            <body hash="2a79b8ff62dc0881cb2b9f2ffb508e75"><![CDATA[{
                if ((_packageTypes == null))
                {
                    _packageTypes = new Dictionary<string, PackageType>();
                    foreach (PackageType packageType in PackageController.Instance.GetExtensionPackageTypes())
                    {
                        _packageTypes[packageType.PackageType] = packageType;
                    }
                }
                return _packageTypes;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="JavaScriptLibraryEditor">
      <declaration><![CDATA[public class JavaScriptLibraryEditor : PackageEditorBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public JavaScriptLibraryEditor()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="FormatVersion">
          <declaration><![CDATA[protected string FormatVersion(object v)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="46" sc="9" el="55" ec="10">DesktopModules\Admin\Extensions\Editors\JavaScriptLibraryEditor.ascx.cs</location>
            <body hash="f60de36b53a169be78a349d3891d300e"><![CDATA[{
            var version = v as System.Version;
            if (version == null)
            {
                return Null.NullString;
            }
            
            var fieldCount = version.Build > -1 ? 3 : 2;
            return version.ToString(fieldCount);
        }]]></body>
          </codeblock>
        </method>
        <method name="Initialize">
          <declaration><![CDATA[public override void Initialize()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="67" sc="9" el="95" ec="10">DesktopModules\Admin\Extensions\Editors\JavaScriptLibraryEditor.ascx.cs</location>
            <body hash="3b998430cf7aa71a0a69f0b6233b0f94"><![CDATA[{
            LibraryName.Text = JavaScriptLibrary.LibraryName;
            Version.Text = JavaScriptLibrary.Version.ToString();
            ObjectName.Text = JavaScriptLibrary.ObjectName;
            CDN.Text = JavaScriptLibrary.CDNPath;
            FileName.Text = JavaScriptLibrary.FileName;
            Location.Text = LocalizeString(JavaScriptLibrary.PreferredScriptLocation.ToString());
            CustomCDN.Text = HostController.Instance.GetString("CustomCDN_" + JavaScriptLibrary.LibraryName);

            if (Package.Dependencies.Count > 0)
            {
                DependOnPackages.DataSource = Package.Dependencies;
                DependOnPackages.DataBind();
            }

            var usedBy = PackageController.Instance.GetPackageDependencies(d => d.PackageName == Package.Name && d.Version <= Package.Version).Select(d => d.PackageId);

            var usedByPackages = from p in PackageController.Instance.GetExtensionPackages(Package.PortalID)
                                 where usedBy.Contains(p.PackageID)
                                 select p;



            if (usedByPackages.Any())
            {
                UsedByPackages.DataSource = usedByPackages;
                UsedByPackages.DataBind();
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdatePackage">
          <declaration><![CDATA[public override void UpdatePackage()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="98" sc="9" el="101" ec="10">DesktopModules\Admin\Extensions\Editors\JavaScriptLibraryEditor.ascx.cs</location>
            <body hash="e19b37ef98aed635a26f1e4f714da08f"><![CDATA[{
            base.UpdatePackage();
            HostController.Instance.Update("CustomCDN_" + JavaScriptLibrary.LibraryName, CustomCDN.Text, true);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_javaScriptLibrary">
          <declaration><![CDATA[private JavaScriptLibrary _javaScriptLibrary;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="CDN">
          <declaration><![CDATA[protected Label CDN;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="CDNLabel">
          <declaration><![CDATA[protected LabelControl CDNLabel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="CustomCDN">
          <declaration><![CDATA[protected TextBox CustomCDN;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="CustomCDNLabel">
          <declaration><![CDATA[protected LabelControl CustomCDNLabel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="DependOnPackages">
          <declaration><![CDATA[protected DataGrid DependOnPackages;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="DependOnPackagesLabel">
          <declaration><![CDATA[protected LabelControl DependOnPackagesLabel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="FileName">
          <declaration><![CDATA[protected Label FileName;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="FileNameLabel">
          <declaration><![CDATA[protected LabelControl FileNameLabel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="LibraryName">
          <declaration><![CDATA[protected Label LibraryName;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="LibraryNameLabel">
          <declaration><![CDATA[protected LabelControl LibraryNameLabel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Location">
          <declaration><![CDATA[protected Label Location;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="LocationLabel">
          <declaration><![CDATA[protected LabelControl LocationLabel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ObjectName">
          <declaration><![CDATA[protected Label ObjectName;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ObjectNameLabel">
          <declaration><![CDATA[protected LabelControl ObjectNameLabel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="UsedByPackages">
          <declaration><![CDATA[protected DataGrid UsedByPackages;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="UsedByPackagesLabel">
          <declaration><![CDATA[protected LabelControl UsedByPackagesLabel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Version">
          <declaration><![CDATA[protected Label Version;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="VersionLabel">
          <declaration><![CDATA[protected LabelControl VersionLabel;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="EditorID">
          <declaration><![CDATA[protected override string EditorID]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="40" sc="13" el="42" ec="14">DesktopModules\Admin\Extensions\Editors\JavaScriptLibraryEditor.ascx.cs</location>
            <body hash="876c1ba3d04773a04e828817d7415091"><![CDATA[{
                return "JavaScriptLibraryEditor";
            }]]></body>
          </codeblock>
        </property>
        <property name="JavaScriptLibrary">
          <declaration><![CDATA[public JavaScriptLibrary JavaScriptLibrary]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="61" sc="13" el="63" ec="14">DesktopModules\Admin\Extensions\Editors\JavaScriptLibraryEditor.ascx.cs</location>
            <body hash="8ec06d13894131a6d374046a444892cb"><![CDATA[{
                return _javaScriptLibrary ?? (_javaScriptLibrary = JavaScriptLibraryController.Instance.GetLibrary(l => l.PackageID == PackageID));
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="LanguagePackEditor">
      <declaration><![CDATA[public class LanguagePackEditor : PackageEditorBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public LanguagePackEditor()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="BindLanguagePack">
          <declaration><![CDATA[private void BindLanguagePack()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="86" sc="9" el="119" ec="10">DesktopModules\Admin\Extensions\Editors\LanguagePackEditor.ascx.cs</location>
            <body hash="03da45479dfd16e59e920266a275d67f"><![CDATA[{
            cboLanguage.DataSource = LocaleController.Instance.GetLocales(Null.NullInteger).Values;
            cboLanguage.DataBind();
            if (cboLanguage.FindItemByValue(LanguagePack.LanguageID.ToString()) != null)
            {
                cboLanguage.FindItemByValue(LanguagePack.LanguageID.ToString()).Selected = true;
            }
            if (LanguagePack != null)
            {
                if (LanguagePack.PackageType == LanguagePackType.Extension)
                {
					//Get all the packages but only bind to combo if not a language package
                    var packages = new List<PackageInfo>();
                    foreach (PackageInfo package in PackageController.Instance.GetExtensionPackages(Null.NullInteger))
                    {
                        if (package.PackageType != "CoreLanguagePack" && package.PackageType != "ExtensionLanguagePack")
                        {
                            packages.Add(package);
                        }
                    }
                    cboPackage.DataSource = packages;
                    cboPackage.DataBind();
                    if (cboPackage.FindItemByValue(LanguagePack.DependentPackageID.ToString()) != null)
                    {
                        cboPackage.FindItemByValue(LanguagePack.DependentPackageID.ToString()).Selected = true;
                    }
                    packageRow.Visible = true;
                }
                else
                {
                    packageRow.Visible = false;
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="cmdEdit_Click">
          <declaration><![CDATA[protected void cmdEdit_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="161" sc="9" el="164" ec="10">DesktopModules\Admin\Extensions\Editors\LanguagePackEditor.ascx.cs</location>
            <body hash="bd8d0b8a1fb0584167cdbf57b03554bd"><![CDATA[{
            int languagesTab = TabController.GetTabByTabPath(ModuleContext.PortalId, "//Admin//Languages", Null.NullString);
            Response.Redirect(Globals.NavigateURL(languagesTab, "", "Locale=" + Language.Code), true);
        }]]></body>
          </codeblock>
        </method>
        <method name="Initialize">
          <declaration><![CDATA[public override void Initialize()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="136" sc="9" el="138" ec="10">DesktopModules\Admin\Extensions\Editors\LanguagePackEditor.ascx.cs</location>
            <body hash="6018393c9725d13b4449f013ba92ffa7"><![CDATA[{
            BindLanguagePack();
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="151" sc="9" el="154" ec="10">DesktopModules\Admin\Extensions\Editors\LanguagePackEditor.ascx.cs</location>
            <body hash="df1c179772f9172eaccd2f627fe614f5"><![CDATA[{
            base.OnLoad(e);
            cmdEdit.Click += cmdEdit_Click;
        }]]></body>
          </codeblock>
        </method>
        <method name="OnPreRender">
          <declaration><![CDATA[protected override void OnPreRender(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="126" sc="9" el="129" ec="10">DesktopModules\Admin\Extensions\Editors\LanguagePackEditor.ascx.cs</location>
            <body hash="0a7783500690fa621dce2fafb3244bfc"><![CDATA[{
            base.OnPreRender(e);
            cmdEdit.Visible = !IsWizard;
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdatePackage">
          <declaration><![CDATA[public override void UpdatePackage()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="141" sc="9" el="148" ec="10">DesktopModules\Admin\Extensions\Editors\LanguagePackEditor.ascx.cs</location>
            <body hash="421be8d3022cceee1f6ceff463ff7d98"><![CDATA[{
            LanguagePack.LanguageID = int.Parse(cboLanguage.SelectedValue);
            if (LanguagePack.PackageType == LanguagePackType.Extension)
            {
                LanguagePack.DependentPackageID = int.Parse(cboPackage.SelectedValue);
            }
            LanguagePackController.SaveLanguagePack(LanguagePack);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_languagePack">
          <declaration><![CDATA[private LanguagePackInfo _languagePack;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cboLanguage">
          <declaration><![CDATA[protected DnnComboBox cboLanguage;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cboPackage">
          <declaration><![CDATA[protected DnnComboBox cboPackage;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdEdit">
          <declaration><![CDATA[protected LinkButton cmdEdit;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="packageRow">
          <declaration><![CDATA[protected HtmlGenericControl packageRow;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plPackage">
          <declaration><![CDATA[protected LabelControl plPackage;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plPackageLanguage">
          <declaration><![CDATA[protected LabelControl plPackageLanguage;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="EditorID">
          <declaration><![CDATA[protected override string EditorID]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="56" sc="13" el="58" ec="14">DesktopModules\Admin\Extensions\Editors\LanguagePackEditor.ascx.cs</location>
            <body hash="741e68355d805a4860146afbb31dca05"><![CDATA[{
                return "LanguagePackEditor";
            }]]></body>
          </codeblock>
        </property>
        <property name="Language">
          <declaration><![CDATA[protected Locale Language]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="64" sc="13" el="66" ec="14">DesktopModules\Admin\Extensions\Editors\LanguagePackEditor.ascx.cs</location>
            <body hash="5f891a1612a7a69d728a4de69d0a7fe8"><![CDATA[{
                return LocaleController.Instance.GetLocale(LanguagePack.LanguageID);
            }]]></body>
          </codeblock>
        </property>
        <property name="LanguagePack">
          <declaration><![CDATA[protected LanguagePackInfo LanguagePack]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="72" sc="13" el="78" ec="14">DesktopModules\Admin\Extensions\Editors\LanguagePackEditor.ascx.cs</location>
            <body hash="9ac6bd85a86cab6a51ce76920b427cd1"><![CDATA[{
                if (_languagePack == null)
                {
                    _languagePack = LanguagePackController.GetLanguagePackByPackage(PackageID);
                }
                return _languagePack;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="ModuleEditor">
      <declaration><![CDATA[public class ModuleEditor : PackageEditorBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public ModuleEditor()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="BindDefinition">
          <declaration><![CDATA[private void BindDefinition()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="130" sc="9" el="178" ec="10">DesktopModules\Admin\Extensions\Editors\ModuleEditor.ascx.cs</location>
            <body hash="fa58c4efe8b5a2b585852a6667b39b04"><![CDATA[{
            if (IsAddDefinitionMode)
            {
                var definition = new ModuleDefinitionInfo {DesktopModuleID = DesktopModule.DesktopModuleID, ModuleDefID = Null.NullInteger};
                definitionsEditor.DataSource = definition;
                definitionsEditor.DataBind();

                cmdDeleteDefinition.Visible = false;
                cmdUpdateDefinition.Text = Localization.GetString("cmdCreateDefinition", LocalResourceFile);
                cmdCancelDefinition.Visible = true;
                pnlDefinition.Visible = true;
                pnlControls.Visible = false;
            	definitionSelectRow.Visible = false;

                definitionName.Visible = true;
                definitionNameLiteral.Visible = false;
            }
            else
            {
                if (ModuleDefinition != null && ModuleDefinition.DesktopModuleID == DesktopModule.DesktopModuleID)
                {
                    definitionsEditor.DataSource = ModuleDefinition;
                    definitionsEditor.DataBind();

                    cmdDeleteDefinition.Visible = true;
                    cmdUpdateDefinition.Text = Localization.GetString("cmdUpdateDefinition", LocalResourceFile);

                    if (!Page.IsPostBack)
                    {
                        Localization.LocalizeDataGrid(ref grdControls, LocalResourceFile);
                    }
                    grdControls.DataSource = ModuleDefinition.ModuleControls.Values;
                    grdControls.DataBind();

                    pnlDefinition.Visible = true;
                    pnlControls.Visible = true;
                	definitionSelectRow.Visible = true;

                    definitionName.Visible = false;
                    definitionNameLiteral.Visible = true;

                    cmdAddControl.NavigateUrl = ModuleContext.EditUrl("ModuleControlID", "-1", "EditControl", "packageId=" + PackageID, "moduledefid=" + ModuleDefinition.ModuleDefID);
                }
                else
                {
                    pnlDefinition.Visible = false;
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="BindDesktopModule">
          <declaration><![CDATA[private void BindDesktopModule(bool refreshDefinitions)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="186" sc="9" el="248" ec="10">DesktopModules\Admin\Extensions\Editors\ModuleEditor.ascx.cs</location>
            <body hash="ee6de54298f30052696ac47437f84941"><![CDATA[{
            if (DesktopModule != null)
            {
                ITermController termController = Util.GetTermController();
                category.ListSource = termController.GetTermsByVocabulary("Module_Categories").OrderBy(t => t.Weight).ToList();

                Shareable.ListSource =
                    Enum.GetNames(typeof (ModuleSharing)).Select(
                        x => new {Name = x}).ToList();

                desktopModuleForm.DataSource = DesktopModule;
                desktopModuleForm.DataBind();

                IsPremiumm.Visible = !DesktopModule.IsAdmin;

                if (!Page.IsPostBack)
                {
                    if ((Request.QueryString["ModuleDefinitionID"] != null))
                    {
                        ModuleDefinitionID = Int32.Parse(Request.QueryString["ModuleDefinitionID"]);
                    }
                }
                if (!Page.IsPostBack || refreshDefinitions)
                {
                    cboDefinitions.DataSource = DesktopModule.ModuleDefinitions.Values;
                    cboDefinitions.DataBind();

                    if (ModuleDefinitionID == Null.NullInteger && cboDefinitions.Items.Count > 0)
                    {
                        ModuleDefinitionID = int.Parse(cboDefinitions.SelectedValue);
                    }
                    if (ModuleDefinitionID != Null.NullInteger)
                    {
						//Set the Combos selected value
                        //ListItem selectedDefinition = cboDefinitions.Items.FindByValue(ModuleDefinitionID.ToString());
                        //if (selectedDefinition != null)
                        //{
                        //    cboDefinitions.SelectedIndex = -1;
                        //    selectedDefinition.Selected = true;
                        //}

                        var selectedDefinition = cboDefinitions.FindItemByValue(ModuleDefinitionID.ToString());
                        if (selectedDefinition != null)
                        {
                            selectedDefinition.Selected = true;
                        }
                    }
                }
                if (!IsSuperTab)
                {
                    BindPermissions();
                }
                else
                {
                    pnlPermissions.Visible = false;
                }
                BindPortalDesktopModules();

                BindDefinition();

                lblDefinitionError.Visible = false;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="BindPermissions">
          <declaration><![CDATA[private void BindPermissions()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="251" sc="9" el="265" ec="10">DesktopModules\Admin\Extensions\Editors\ModuleEditor.ascx.cs</location>
            <body hash="b43501bb0f2a723bd127f89e1084a701"><![CDATA[{
            PortalDesktopModuleInfo portalModule = DesktopModuleController.GetPortalDesktopModule(ModuleContext.PortalSettings.PortalId, DesktopModule.DesktopModuleID);
            if (portalModule != null)
            {
                dgPermissions.PortalDesktopModuleID = portalModule.PortalDesktopModuleID;
                bool isVisible =
                    DesktopModulePermissionController.HasDesktopModulePermission(DesktopModulePermissionController.GetDesktopModulePermissions(portalModule.PortalDesktopModuleID), "DEPLOY") ||
                    ModuleContext.PortalSettings.UserInfo.IsInRole(ModuleContext.PortalSettings.AdministratorRoleName) || ModuleContext.PortalSettings.UserInfo.IsSuperUser;
                pnlPermissions.Visible = isVisible;
                if (!isVisible)
                {
                    lblHelp.Text = Localization.GetString("NoPermission", LocalResourceFile);
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="BindPortalDesktopModules">
          <declaration><![CDATA[private void BindPortalDesktopModules()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="268" sc="9" el="288" ec="10">DesktopModules\Admin\Extensions\Editors\ModuleEditor.ascx.cs</location>
            <body hash="039df106c4a46a17ff1f35e5f6165e95"><![CDATA[{
			if (!IsWizard && !DesktopModule.IsAdmin)
			{
                var arrPortals = PortalController.Instance.GetPortals();
				Dictionary<int, PortalDesktopModuleInfo> dicPortalDesktopModules = DesktopModuleController.GetPortalDesktopModulesByDesktopModuleID(DesktopModule.DesktopModuleID);
				foreach (PortalDesktopModuleInfo objPortalDesktopModule in dicPortalDesktopModules.Values)
				{
					foreach (PortalInfo objPortal in arrPortals)
					{
						if (objPortal.PortalID == objPortalDesktopModule.PortalID)
						{
							arrPortals.Remove(objPortal);
							break;
						}
					}
				}

				ctlPortals.AvailableDataSource = arrPortals;
				ctlPortals.SelectedDataSource = dicPortalDesktopModules.Values;
			}
        }]]></body>
          </codeblock>
        </method>
        <method name="cboDefinitions_SelectedIndexChanged">
          <declaration><![CDATA[protected void cboDefinitions_SelectedIndexChanged(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="430" sc="9" el="444" ec="10">DesktopModules\Admin\Extensions\Editors\ModuleEditor.ascx.cs</location>
            <body hash="d900ab73db7c5b79fa42d9d404e6d577"><![CDATA[{
            if (!IsAddDefinitionMode)
            {
                ModuleDefinitionID = int.Parse(cboDefinitions.SelectedValue);
                //Force Module Definition to refresh
                _ModuleDefinition = null;

				//empty definition form's content
				definitionsEditor.Items.ForEach(i =>
				                                	{
				                                		i.Value = null;
				                                	});
                BindDefinition();
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="cmdAddDefinition_Click">
          <declaration><![CDATA[protected void cmdAddDefinition_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="447" sc="9" el="459" ec="10">DesktopModules\Admin\Extensions\Editors\ModuleEditor.ascx.cs</location>
            <body hash="bc02c609bbd94ccd76310bad97f34f41"><![CDATA[{
            IsAddDefinitionMode = true;
            ModuleDefinitionID = Null.NullInteger;
            _ModuleDefinition = null;

			////empty definition form's content
        	definitionsEditor.Items.ForEach(i =>
        	                                	{
        	                                		i.Value = null;
        	                                	});
			
            BindDefinition();
        }]]></body>
          </codeblock>
        </method>
        <method name="cmdCancelDefinition_Click">
          <declaration><![CDATA[private void cmdCancelDefinition_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="353" sc="9" el="355" ec="10">DesktopModules\Admin\Extensions\Editors\ModuleEditor.ascx.cs</location>
            <body hash="d5fa94f3f4471650bbc61a749ae8ba40"><![CDATA[{
            Response.Redirect(Globals.NavigateURL(ModuleContext.PortalSettings.ActiveTab.TabID));
        }]]></body>
          </codeblock>
        </method>
        <method name="cmdDeleteDefinition_Click">
          <declaration><![CDATA[protected void cmdDeleteDefinition_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="462" sc="9" el="477" ec="10">DesktopModules\Admin\Extensions\Editors\ModuleEditor.ascx.cs</location>
            <body hash="09c7b45f2abc69ab80f3b55dcfdbf351"><![CDATA[{
            var objModuleDefinitions = new ModuleDefinitionController();
            objModuleDefinitions.DeleteModuleDefinition(ModuleDefinitionID);

            //Force Definitions list to refresh by rebinding DesktopModule
            ModuleDefinitionID = Null.NullInteger;
            _ModuleDefinition = null;
            _DesktopModule = null;

			//empty definition form's content
			definitionsEditor.Items.ForEach(i =>
			                                	{
			                                		i.Value = null;
			                                	});
            BindDesktopModule(true);
        }]]></body>
          </codeblock>
        </method>
        <method name="cmdUpdate_Click">
          <declaration><![CDATA[private void cmdUpdate_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="480" sc="9" el="502" ec="10">DesktopModules\Admin\Extensions\Editors\ModuleEditor.ascx.cs</location>
            <body hash="b492890caa7bac272a81b8c4a211a2e6"><![CDATA[{
            if (ModuleContext.PortalSettings.ActiveTab.IsSuperTab)
            {
                UpdatePackage();
            }
            else
            {
				//Update DesktopModule Permissions
                DesktopModulePermissionCollection objCurrentPermissions = DesktopModulePermissionController.GetDesktopModulePermissions(dgPermissions.PortalDesktopModuleID);
                if (!objCurrentPermissions.CompareTo(dgPermissions.Permissions))
                {
                    DesktopModulePermissionController.DeleteDesktopModulePermissionsByPortalDesktopModuleID(dgPermissions.PortalDesktopModuleID);
                    foreach (DesktopModulePermissionInfo objPermission in dgPermissions.Permissions)
                    {
                        DesktopModulePermissionController.AddDesktopModulePermission(objPermission);
                    }
                }
                DataCache.RemoveCache(string.Format(DataCache.PortalDesktopModuleCacheKey, ModuleContext.PortalId));

                dgPermissions.ResetPermissions();
                Response.Redirect(Globals.NavigateURL(ModuleContext.PortalSettings.ActiveTab.TabID));
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="cmdUpdateDefinition_Click">
          <declaration><![CDATA[protected void cmdUpdateDefinition_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="505" sc="9" el="527" ec="10">DesktopModules\Admin\Extensions\Editors\ModuleEditor.ascx.cs</location>
            <body hash="89cd7602df322f7d15a77f8b9b04df60"><![CDATA[{
            if (definitionsEditor.IsValid)
            {
                var definition = definitionsEditor.DataSource as ModuleDefinitionInfo;
                if (definition != null)
                {
                    if ((IsAddDefinitionMode && ModuleDefinitionController.GetModuleDefinitionByFriendlyName(definition.FriendlyName) == null) || (!IsAddDefinitionMode))
                    {
                        ModuleDefinitionID = ModuleDefinitionController.SaveModuleDefinition(definition, false, true);

                        //Force Definitions list to refresh by rebinding DesktopModule
                        IsAddDefinitionMode = false;
                        _DesktopModule = null;
                        BindDesktopModule(true);
                    }
                    else
                    {
						//The FriendlyName is being used
                        lblDefinitionError.Visible = true;
                    }
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="ctlPortals_AddAllButtonClick">
          <declaration><![CDATA[protected void ctlPortals_AddAllButtonClick(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="530" sc="9" el="539" ec="10">DesktopModules\Admin\Extensions\Editors\ModuleEditor.ascx.cs</location>
            <body hash="362c0191de90019ecfb338f520a330cb"><![CDATA[{
			//Add all Portals
            foreach (PortalInfo portal in PortalController.Instance.GetPortals())
            {
                DesktopModuleController.AddDesktopModuleToPortal(portal.PortalID, DesktopModule.DesktopModuleID, true, false);
            }
            DataCache.ClearHostCache(true);

            BindDesktopModule(false);
        }]]></body>
          </codeblock>
        </method>
        <method name="ctlPortals_AddButtonClick">
          <declaration><![CDATA[protected void ctlPortals_AddButtonClick(object sender, DualListBoxEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="542" sc="9" el="553" ec="10">DesktopModules\Admin\Extensions\Editors\ModuleEditor.ascx.cs</location>
            <body hash="8a5b71b639289833fa6369ff64cdccde"><![CDATA[{
            if (e.Items != null)
            {
                foreach (string portal in e.Items)
                {
                    DesktopModuleController.AddDesktopModuleToPortal(int.Parse(portal), DesktopModule.DesktopModuleID, true, false);
                }
            }
            DataCache.ClearHostCache(true);

            BindDesktopModule(false);
        }]]></body>
          </codeblock>
        </method>
        <method name="ctlPortals_RemoveAllButtonClick">
          <declaration><![CDATA[protected void ctlPortals_RemoveAllButtonClick(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="556" sc="9" el="565" ec="10">DesktopModules\Admin\Extensions\Editors\ModuleEditor.ascx.cs</location>
            <body hash="d51f72c66e2ddf18064e2e2f2dc65987"><![CDATA[{
			//Add all Portals
            foreach (PortalInfo objPortal in PortalController.Instance.GetPortals())
            {
                DesktopModuleController.RemoveDesktopModuleFromPortal(objPortal.PortalID, DesktopModule.DesktopModuleID, false);
            }
            DataCache.ClearHostCache(true);

            BindDesktopModule(false);
        }]]></body>
          </codeblock>
        </method>
        <method name="ctlPortals_RemoveButtonClick">
          <declaration><![CDATA[protected void ctlPortals_RemoveButtonClick(object sender, DualListBoxEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="568" sc="9" el="579" ec="10">DesktopModules\Admin\Extensions\Editors\ModuleEditor.ascx.cs</location>
            <body hash="84136d32190057ac7052459bad217388"><![CDATA[{
            if (e.Items != null)
            {
                foreach (string portal in e.Items)
                {
                    DesktopModuleController.RemoveDesktopModuleFromPortal(int.Parse(portal), DesktopModule.DesktopModuleID, false);
                }
            }
            DataCache.ClearHostCache(true);

            BindDesktopModule(false);
        }]]></body>
          </codeblock>
        </method>
        <method name="grdControls_DeleteCommand">
          <declaration><![CDATA[protected void grdControls_DeleteCommand(object source, DataGridCommandEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="582" sc="9" el="589" ec="10">DesktopModules\Admin\Extensions\Editors\ModuleEditor.ascx.cs</location>
            <body hash="cc83c79a923cf452796b0170ad3314b4"><![CDATA[{
            int controlID = Int32.Parse(e.CommandArgument.ToString());
            ModuleControlController.DeleteModuleControl(controlID);

            //Force Module Definition to refresh
            _ModuleDefinition = null;
            BindDefinition();
        }]]></body>
          </codeblock>
        </method>
        <method name="grdControls_ItemDataBound">
          <declaration><![CDATA[protected void grdControls_ItemDataBound(object sender, DataGridItemEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="592" sc="9" el="606" ec="10">DesktopModules\Admin\Extensions\Editors\ModuleEditor.ascx.cs</location>
            <body hash="86bc532b96ee1f65d97e2a3549e2199c"><![CDATA[{
            DataGridItem item = e.Item;
            if (item.ItemType == ListItemType.Item || item.ItemType == ListItemType.AlternatingItem || item.ItemType == ListItemType.SelectedItem)
            {
                var editHyperlink = item.Controls[3].Controls[0] as HyperLink;
                if (editHyperlink != null)
                {
                    editHyperlink.NavigateUrl = ModuleContext.EditUrl("ModuleControlID",
                                                                      editHyperlink.NavigateUrl,
                                                                      "EditControl",
                                                                      "packageId=" + PackageID,
                                                                      "moduledefid=" + ModuleDefinition.ModuleDefID);
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="Initialize">
          <declaration><![CDATA[public override void Initialize()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="388" sc="9" el="392" ec="10">DesktopModules\Admin\Extensions\Editors\ModuleEditor.ascx.cs</location>
            <body hash="e65c3bcebbc35ec0958b9a10d3d60e18"><![CDATA[{
            desktopModuleForm.Visible = IsSuperTab;
            moduleSettingsHead.Visible = !IsWizard;
            BindDesktopModule(false);
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="323" sc="9" el="350" ec="10">DesktopModules\Admin\Extensions\Editors\ModuleEditor.ascx.cs</location>
            <body hash="38929369bc0c3531eb44a34e903a994f"><![CDATA[{
            base.OnInit(e);

            cmdAddDefinition.Click += cmdAddDefinition_Click;
            cmdDeleteDefinition.Click += cmdDeleteDefinition_Click;
            cmdUpdate.Click += cmdUpdate_Click;
            cmdUpdateDefinition.Click += cmdUpdateDefinition_Click;
            cmdCancelDefinition.Click += cmdCancelDefinition_Click;
            grdControls.DeleteCommand += grdControls_DeleteCommand;
            grdControls.ItemDataBound += grdControls_ItemDataBound;

            cboDefinitions.SelectedIndexChanged += cboDefinitions_SelectedIndexChanged;


            lblHelp.Text = Localization.GetString(IsSuperTab ? "HostHelp" : "AdminHelp", LocalResourceFile);
            foreach (DataGridColumn column in grdControls.Columns)
            {
                if (ReferenceEquals(column.GetType(), typeof (ImageCommandColumn)))
                {
					//Manage Delete Confirm JS
                    var imageColumn = (ImageCommandColumn) column;
                    if (imageColumn.CommandName == "Delete")
                    {
                        imageColumn.OnClickJS = Localization.GetString("DeleteItem");
                    }
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="358" sc="9" el="371" ec="10">DesktopModules\Admin\Extensions\Editors\ModuleEditor.ascx.cs</location>
            <body hash="541a7b5ab46b9805c2982f7f7af6dcf3"><![CDATA[{
            base.OnLoad(e);

            ctlPortals.LocalResourceFile = LocalResourceFile;
            if (!IsWizard)
            {
                ctlPortals.AddButtonClick += ctlPortals_AddButtonClick;
                ctlPortals.AddAllButtonClick += ctlPortals_AddAllButtonClick;
                ctlPortals.RemoveAllButtonClick += ctlPortals_RemoveAllButtonClick;
                ctlPortals.RemoveButtonClick += ctlPortals_RemoveButtonClick;
            }

            ClientAPI.AddButtonConfirm(cmdDeleteDefinition, Localization.GetString("DeleteItem"));
        }]]></body>
          </codeblock>
        </method>
        <method name="OnPreRender">
          <declaration><![CDATA[protected override void OnPreRender(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="374" sc="9" el="381" ec="10">DesktopModules\Admin\Extensions\Editors\ModuleEditor.ascx.cs</location>
            <body hash="f4bd7efc24793c7838901ae7b758c2d7"><![CDATA[{
            base.OnPreRender(e);
            ctlPortals.LocalResourceFile = LocalResourceFile;
            helpPanel.Visible = !IsWizard;
            pnlDefinitions.Visible = (!IsWizard) && IsSuperTab;
            cmdUpdate.Visible = (!IsWizard) && (!IsSuperTab && pnlPermissions.Visible);
			PremiumModules.Visible = !IsWizard && !DesktopModule.IsAdmin;
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateModuleInterfaces">
          <declaration><![CDATA[private void UpdateModuleInterfaces(string BusinessControllerClass)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="291" sc="9" el="316" ec="10">DesktopModules\Admin\Extensions\Editors\ModuleEditor.ascx.cs</location>
            <body hash="464631b9ee2a7f675d13a5b32c07f20a"><![CDATA[{
			//this cannot be done directly at this time because 
            //the module may not be loaded into the app domain yet
            //So send an EventMessage that will process the update 
            //after the App recycles
            var oAppStartMessage = new EventMessage
                                       {
                                           Sender = ModuleContext.PortalSettings.UserInfo.Username,
                                           Priority = MessagePriority.High,
                                           ExpirationDate = DateTime.Now.AddYears(-1),
                                           SentDate = DateTime.Now,
                                           Body = "",
                                           ProcessorType = "DotNetNuke.Entities.Modules.EventMessageProcessor, DotNetNuke",
                                           ProcessorCommand = "UpdateSupportedFeatures"
                                       };
									   
            //Add custom Attributes for this message
            oAppStartMessage.Attributes.Add("BusinessControllerClass", BusinessControllerClass);
            oAppStartMessage.Attributes.Add("DesktopModuleId", DesktopModule.DesktopModuleID.ToString());

            //send it to occur on next App_Start Event
            EventQueueController.SendMessage(oAppStartMessage, "Application_Start");
			
			//force an app restart
            Config.Touch();
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdatePackage">
          <declaration><![CDATA[public override void UpdatePackage()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="395" sc="9" el="423" ec="10">DesktopModules\Admin\Extensions\Editors\ModuleEditor.ascx.cs</location>
            <body hash="2ca538126fc0fcae835404dcc50fe1e6"><![CDATA[{
            bool bUpdateSupportedFeatures = Null.NullBoolean;
            PackageInfo _Package = PackageController.Instance.GetExtensionPackage(Null.NullInteger, p => p.PackageID == PackageID);

            //Update module settings
            if (desktopModuleForm.IsValid)
            {
                var desktopModule = desktopModuleForm.DataSource as DesktopModuleInfo;
                if (desktopModule != null && _Package != null)
                {
                    desktopModule.Shareable = (ModuleSharing) Enum.Parse(typeof (ModuleSharing), Shareable.ComboBox.SelectedValue.ToString());
                    desktopModule.FriendlyName = _Package.FriendlyName;
                    desktopModule.Version = Globals.FormatVersion(_Package.Version);
                    if (string.IsNullOrEmpty(desktopModule.BusinessControllerClass))
                    {
                        desktopModule.SupportedFeatures = 0;
                        //If there is no BusinessControllerClass, then there is no any implementation
                        
                    }
                    else
                    {
                        DesktopModuleController controller = new DesktopModuleController();
                        controller.UpdateModuleInterfaces(ref desktopModule);
                    }
                    DesktopModuleController.SaveDesktopModule(desktopModule, false, true);
                }

            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_DesktopModule">
          <declaration><![CDATA[private DesktopModuleInfo _DesktopModule;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_ModuleDefinition">
          <declaration><![CDATA[private ModuleDefinitionInfo _ModuleDefinition;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cacheTime">
          <declaration><![CDATA[protected DnnFormTextBoxItem cacheTime;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="category">
          <declaration><![CDATA[protected DnnFormComboBoxItem category;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cboDefinitions">
          <declaration><![CDATA[protected DnnComboBox cboDefinitions;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdAddControl">
          <declaration><![CDATA[protected HyperLink cmdAddControl;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdAddDefinition">
          <declaration><![CDATA[protected LinkButton cmdAddDefinition;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdCancelDefinition">
          <declaration><![CDATA[protected LinkButton cmdCancelDefinition;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdDeleteDefinition">
          <declaration><![CDATA[protected LinkButton cmdDeleteDefinition;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdUpdate">
          <declaration><![CDATA[protected LinkButton cmdUpdate;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdUpdateDefinition">
          <declaration><![CDATA[protected LinkButton cmdUpdateDefinition;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="controllerClass">
          <declaration><![CDATA[protected DnnFormTextBoxItem controllerClass;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ctlPortals">
          <declaration><![CDATA[protected DualListBox ctlPortals;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="definitionName">
          <declaration><![CDATA[protected DnnFormTextBoxItem definitionName;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="definitionNameLiteral">
          <declaration><![CDATA[protected DnnFormLiteralItem definitionNameLiteral;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="definitionsEditor">
          <declaration><![CDATA[protected DnnFormEditor definitionsEditor;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="definitionSelectRow">
          <declaration><![CDATA[protected HtmlGenericControl definitionSelectRow;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="dependencies">
          <declaration><![CDATA[protected DnnFormTextBoxItem dependencies;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="desktopModuleForm">
          <declaration><![CDATA[protected DnnFormEditor desktopModuleForm;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="dgPermissions">
          <declaration><![CDATA[protected DesktopModulePermissionsGrid dgPermissions;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="folderName">
          <declaration><![CDATA[protected DnnFormTextBoxItem folderName;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="friendlyName">
          <declaration><![CDATA[protected DnnFormTextBoxItem friendlyName;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="grdControls">
          <declaration><![CDATA[protected DataGrid grdControls;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="helpPanel">
          <declaration><![CDATA[protected Panel helpPanel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="isPortable">
          <declaration><![CDATA[protected DnnFormLiteralItem isPortable;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="IsPremiumm">
          <declaration><![CDATA[protected DnnFormToggleButtonItem IsPremiumm;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="isSearchable">
          <declaration><![CDATA[protected DnnFormLiteralItem isSearchable;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="isUpgradable">
          <declaration><![CDATA[protected DnnFormLiteralItem isUpgradable;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblControls">
          <declaration><![CDATA[protected LabelControl lblControls;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblDefinitionError">
          <declaration><![CDATA[protected Label lblDefinitionError;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblHelp">
          <declaration><![CDATA[protected Label lblHelp;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="moduleName">
          <declaration><![CDATA[protected DnnFormLiteralItem moduleName;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="moduleSettingsHead">
          <declaration><![CDATA[protected HtmlGenericControl moduleSettingsHead;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="permissions">
          <declaration><![CDATA[protected DnnFormTextBoxItem permissions;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plPremium">
          <declaration><![CDATA[protected LabelControl plPremium;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plSelectDefinition">
          <declaration><![CDATA[protected LabelControl plSelectDefinition;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="pnlControls">
          <declaration><![CDATA[protected Panel pnlControls;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="pnlDefinition">
          <declaration><![CDATA[protected Panel pnlDefinition;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="pnlDefinitions">
          <declaration><![CDATA[protected Panel pnlDefinitions;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="pnlPermissions">
          <declaration><![CDATA[protected Panel pnlPermissions;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="PremiumModules">
          <declaration><![CDATA[protected DnnFormTemplateItem PremiumModules;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Shareable">
          <declaration><![CDATA[protected DnnFormComboBoxItem Shareable;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="DesktopModule">
          <declaration><![CDATA[protected DesktopModuleInfo DesktopModule]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="69" sc="13" el="71" ec="14">DesktopModules\Admin\Extensions\Editors\ModuleEditor.ascx.cs</location>
            <body hash="ff2ec18c811474b2e7bbd1b601611b78"><![CDATA[{
                return _DesktopModule ?? (_DesktopModule = DesktopModuleController.GetDesktopModuleByPackageID(PackageID));
            }]]></body>
          </codeblock>
        </property>
        <property name="EditorID">
          <declaration><![CDATA[protected override string EditorID]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="77" sc="13" el="79" ec="14">DesktopModules\Admin\Extensions\Editors\ModuleEditor.ascx.cs</location>
            <body hash="485c42bcc9438ea0763d44e4322bfa7d"><![CDATA[{
                return "ModuleEditor";
            }]]></body>
          </codeblock>
        </property>
        <property name="IsAddDefinitionMode">
          <declaration><![CDATA[protected bool IsAddDefinitionMode]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="85" sc="13" el="92" ec="14">DesktopModules\Admin\Extensions\Editors\ModuleEditor.ascx.cs</location>
            <body hash="a43d2ddf19af77afe752d008675ab943"><![CDATA[{
                bool _IsAddDefinitionMode = Null.NullBoolean;
                if (ViewState["IsAddDefinitionMode"] != null)
                {
                    _IsAddDefinitionMode = Convert.ToBoolean(ViewState["IsAddDefinitionMode"]);
                }
                return _IsAddDefinitionMode;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="94" sc="13" el="96" ec="14">DesktopModules\Admin\Extensions\Editors\ModuleEditor.ascx.cs</location>
            <body hash="01fa9f72828565bb76148897316f7b02"><![CDATA[{
                ViewState["IsAddDefinitionMode"] = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="ModuleDefinition">
          <declaration><![CDATA[protected ModuleDefinitionInfo ModuleDefinition]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="119" sc="13" el="121" ec="14">DesktopModules\Admin\Extensions\Editors\ModuleEditor.ascx.cs</location>
            <body hash="d48efc5f47c3b024c5879c011599969e"><![CDATA[{
                return _ModuleDefinition ?? (_ModuleDefinition = ModuleDefinitionController.GetModuleDefinitionByID(ModuleDefinitionID));
            }]]></body>
          </codeblock>
        </property>
        <property name="ModuleDefinitionID">
          <declaration><![CDATA[protected int ModuleDefinitionID]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="102" sc="13" el="109" ec="14">DesktopModules\Admin\Extensions\Editors\ModuleEditor.ascx.cs</location>
            <body hash="d0a398eea4a4a3c92d7cc5e6e3f8b39e"><![CDATA[{
                int _ModuleDefinitionID = Null.NullInteger;
                if (ViewState["ModuleDefinitionID"] != null)
                {
                    _ModuleDefinitionID = Convert.ToInt32(ViewState["ModuleDefinitionID"]);
                }
                return _ModuleDefinitionID;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="111" sc="13" el="113" ec="14">DesktopModules\Admin\Extensions\Editors\ModuleEditor.ascx.cs</location>
            <body hash="dfe3e74071bf0de40cdc473db126d396"><![CDATA[{
                ViewState["ModuleDefinitionID"] = value;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="MoreExtensions">
      <declaration><![CDATA[public class MoreExtensions : ModuleUserControlBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public MoreExtensions()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="IsDebugEnabled">
          <declaration><![CDATA[protected bool IsDebugEnabled()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="50" sc="9" el="52" ec="10">DesktopModules\Admin\Extensions\MoreExtensions.ascx.cs</location>
            <body hash="bc5e798f239877ff57a7eef7da3aa69c"><![CDATA[{
            return (System.Web.HttpContext.Current != null && System.Web.HttpContext.Current.IsDebuggingEnabled);
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="41" sc="9" el="47" ec="10">DesktopModules\Admin\Extensions\MoreExtensions.ascx.cs</location>
            <body hash="227426a376e39b0f0fa7f285b43d32e2"><![CDATA[{
            base.OnLoad(e);
			JavaScript.RequestRegistration(CommonJs.jQuery);
            ClientResourceManager.RegisterScript(this.Page, "~/Resources/Shared/Scripts/jquery/jquery.tmpl.js");
            ClientResourceManager.RegisterScript(this.Page, "~/Resources/Shared/Scripts/json2.js");
            ClientResourceManager.RegisterScript(this.Page, "~/DesktopModules/Admin/Extensions/Scripts/Gallery.js");
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="dnnlblType">
          <declaration><![CDATA[protected LabelControl dnnlblType;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="typeDDL">
          <declaration><![CDATA[protected DnnComboBox typeDDL;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="PackageWriter">
      <declaration><![CDATA[public class PackageWriter : ModuleUserControlBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public PackageWriter()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="CheckSecurity">
          <declaration><![CDATA[private void CheckSecurity()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="119" sc="9" el="124" ec="10">DesktopModules\Admin\Extensions\PackageWriter.ascx.cs</location>
            <body hash="bf882486f9a65497ae701dcc1f2d1e03"><![CDATA[{
            if (!ModuleContext.PortalSettings.UserInfo.IsSuperUser)
            {
                Response.Redirect(Globals.NavigateURL("Access Denied"), true);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="chkUseManifest_CheckedChanged">
          <declaration><![CDATA[protected void chkUseManifest_CheckedChanged(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="382" sc="9" el="384" ec="10">DesktopModules\Admin\Extensions\PackageWriter.ascx.cs</location>
            <body hash="f5a912e286d583f72c4857e72e41a7ea"><![CDATA[{
            trManifestList.Visible = chkUseManifest.Checked;
        }]]></body>
          </codeblock>
        </method>
        <method name="cmdGetFiles_Click">
          <declaration><![CDATA[protected void cmdGetFiles_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="387" sc="9" el="389" ec="10">DesktopModules\Admin\Extensions\PackageWriter.ascx.cs</location>
            <body hash="5beab4e9ae918056f2209c3be1cfaf7b"><![CDATA[{
            GetFiles(true);
        }]]></body>
          </codeblock>
        </method>
        <method name="CreateManifest">
          <declaration><![CDATA[private void CreateManifest()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="127" sc="9" el="147" ec="10">DesktopModules\Admin\Extensions\PackageWriter.ascx.cs</location>
            <body hash="20e52ec2560905ca8878627c0e97664f"><![CDATA[{
            foreach (string fileName in Regex.Split(txtFiles.Text, Environment.NewLine))
            {
                string name = fileName.Trim();
                if (!string.IsNullOrEmpty(name))
                {
                    var file = new InstallFile(name);
                    _Writer.AddFile(file);
                }
            }
            foreach (string fileName in Regex.Split(txtAssemblies.Text, Environment.NewLine))
            {
                string name = fileName.Trim();
                if (!string.IsNullOrEmpty(name))
                {
                    var file = new InstallFile(name);
                    _Writer.AddFile(file);
                }
            }
            txtManifest.Text = _Writer.WriteManifest(false);
        }]]></body>
          </codeblock>
        </method>
        <method name="CreatePackage">
          <declaration><![CDATA[private void CreatePackage()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="150" sc="9" el="210" ec="10">DesktopModules\Admin\Extensions\PackageWriter.ascx.cs</location>
            <body hash="1758437610078a7d51289bfaa4d8696e"><![CDATA[{
            CheckSecurity();
            string manifestName = txtManifestName.Text;
            if (string.IsNullOrEmpty(manifestName))
            {
                manifestName = txtArchiveName.Text.ToLower().Replace("zip", "dnn");
            }
            if (chkPackage.Checked)
            {
                //Use the installer to parse the manifest and load the files that need to be packaged
                var installer = new Installer(Package, Request.MapPath("."));
                foreach (InstallFile file in installer.InstallerInfo.Files.Values)
                {
                    _Writer.AddFile(file);
                }
                string basePath;
                switch (Package.PackageType)
                {
                    case "Auth_System":
                        basePath = Globals.InstallMapPath + ("AuthSystem");
                        break;
                    case "Container":
                        basePath = Globals.InstallMapPath + ("Container");
                        break;
                    case "CoreLanguagePack":
                    case "ExtensionLanguagePack":
                        basePath = Globals.InstallMapPath + ("Language");
                        break;
                    case "Module":
                        basePath = Globals.InstallMapPath + ("Module");
                        break;
                    case "Provider":
                        basePath = Globals.InstallMapPath + ("Provider");
                        break;
                    case "Skin":
                        basePath = Globals.InstallMapPath + ("Skin");
                        break;
                    default:
                        basePath = Globals.HostMapPath;
                        break;
                }
                if (!manifestName.EndsWith(".dnn"))
                {
                    manifestName += ".dnn";
                }
                if (!txtArchiveName.Text.EndsWith(".zip"))
                {
                    txtArchiveName.Text += ".zip";
                }
                _Writer.CreatePackage(Path.Combine(basePath, txtArchiveName.Text), manifestName, Package.Manifest, true);
                UI.Skins.Skin.AddModuleMessage(this,
                                               string.Format(Localization.GetString("Success", LocalResourceFile),
                                                             ModuleContext.PortalSettings.PortalAlias.HTTPAlias + basePath.Replace(Globals.ApplicationMapPath, "").Replace("\\", "/")),
                                               ModuleMessage.ModuleMessageType.GreenSuccess);
            }
            else if (chkManifest.Checked)
            {
                _Writer.WriteManifest(manifestName, Package.Manifest);
            }
            phInstallLogs.Controls.Add(_Writer.Log.GetLogsTable());
        }]]></body>
          </codeblock>
        </method>
        <method name="GetAssemblies">
          <declaration><![CDATA[private void GetAssemblies(bool refreshList)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="213" sc="9" el="223" ec="10">DesktopModules\Admin\Extensions\PackageWriter.ascx.cs</location>
            <body hash="ffebb1806978e87e2193153cc4475624"><![CDATA[{
            GetFiles(string.IsNullOrEmpty(txtFiles.Text));
            if (refreshList)
            {
                txtAssemblies.Text = Null.NullString;
                foreach (InstallFile file in _Writer.Assemblies.Values)
                {
                    txtAssemblies.Text += file.FullName + Environment.NewLine;
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetFiles">
          <declaration><![CDATA[private void GetFiles(bool refreshList)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="226" sc="9" el="255" ec="10">DesktopModules\Admin\Extensions\PackageWriter.ascx.cs</location>
            <body hash="8c75149c40e9f7a1fced84323a639df4"><![CDATA[{
            _Writer.GetFiles(chkIncludeSource.Checked);
            if (refreshList)
            {
                txtFiles.Text = Null.NullString;
				
                //Display App Code files
                foreach (InstallFile file in _Writer.AppCodeFiles.Values)
                {
                    txtFiles.Text += "[app_code]" + file.FullName + Environment.NewLine;
                }
				
                //Display Script files
                foreach (InstallFile file in _Writer.Scripts.Values)
                {
                    txtFiles.Text += file.FullName + Environment.NewLine;
                }
				
                //Display regular files
                foreach (InstallFile file in _Writer.Files.Values)
                {
                    if (file.Path.StartsWith(".git"))
                        continue;
                    if (!file.Name.StartsWith(".git"))
                    {
                        txtFiles.Text += file.FullName + Environment.NewLine;
                    }
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetText">
          <declaration><![CDATA[protected string GetText(string type)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="262" sc="9" el="273" ec="10">DesktopModules\Admin\Extensions\PackageWriter.ascx.cs</location>
            <body hash="15337db921c8349a92dc9cbd144036ba"><![CDATA[{
            string text = Null.NullString;
            if (type == "Title")
            {
                text = Localization.GetString(wizPackage.ActiveStep.Title + ".Title", LocalResourceFile);
            }
            else if (type == "Help")
            {
                text = Localization.GetString(wizPackage.ActiveStep.Title + ".Help", LocalResourceFile);
            }
            return text;
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="286" sc="9" el="297" ec="10">DesktopModules\Admin\Extensions\PackageWriter.ascx.cs</location>
            <body hash="e5e7ebcd275160735c090ba555e59676"><![CDATA[{
            base.OnInit(e);

            if ((Request.QueryString["packageid"] != null))
            {
                PackageID = Int32.Parse(Request.QueryString["packageid"]);
            }
            else
            {
                PackageID = Null.NullInteger;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="308" sc="9" el="379" ec="10">DesktopModules\Admin\Extensions\PackageWriter.ascx.cs</location>
            <body hash="f3305c927c15abec497e093843b87d4e"><![CDATA[{
            base.OnLoad(e);

            chkUseManifest.CheckedChanged += chkUseManifest_CheckedChanged;
            cmdGetFiles.Click += cmdGetFiles_Click;
            wizPackage.ActiveStepChanged += wizPackage_ActiveStepChanged;
            wizPackage.CancelButtonClick += wizPackage_CancelButtonClick;
            wizPackage.FinishButtonClick += wizPackage_FinishButtonClick;
            wizPackage.NextButtonClick += wizPackage_NextButtonClick;

            try
            {
                CheckSecurity();

                ctlPackage.EditMode = PropertyEditorMode.View;            
                
                switch (Package.PackageType)
                {
                    case "CoreLanguagePack":
                        Package.IconFile = "N\\A";
                        break;
                    default:
                        Package.IconFile = Util.ParsePackageIconFileName(Package);
                        break;
                }

                ctlPackage.DataSource = Package;
                ctlPackage.DataBind();

                _Writer = PackageWriterFactory.GetWriter(Package);

                if (Page.IsPostBack)
                {
                    _Writer.BasePath = txtBasePath.Text;
                }
                else
                {
                    txtBasePath.Text = _Writer.BasePath;

                    //Load Manifests
                    if (!string.IsNullOrEmpty(Package.Manifest))
                    {
                        cboManifests.Items.Add(new ListItem("Database version", ""));
                    }
                    string filePath = Server.MapPath(_Writer.BasePath);
                    if (!string.IsNullOrEmpty(filePath))
                    {
                        if (Directory.Exists(filePath))
                        {
                            foreach (string file in Directory.GetFiles(filePath, "*.dnn"))
                            {
                                string fileName = file.Replace(filePath + "\\", "");
                                cboManifests.Items.Add(new ListItem(fileName, fileName));
                            }
                            foreach (string file in Directory.GetFiles(filePath, "*.dnn.resources"))
                            {
                                string fileName = file.Replace(filePath + "\\", "");
                                cboManifests.Items.Add(new ListItem(fileName, fileName));
                            }
                        }
                    }
                    if (cboManifests.Items.Count > 0)
                    {
                        trUseManifest.Visible = true;
                    }
                }
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="wizPackage_ActiveStepChanged">
          <declaration><![CDATA[protected void wizPackage_ActiveStepChanged(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="392" sc="9" el="472" ec="10">DesktopModules\Admin\Extensions\PackageWriter.ascx.cs</location>
            <body hash="7107853f2cc74a22312ed92138d56c29"><![CDATA[{
            switch (wizPackage.ActiveStepIndex)
            {
                case 1: //Display the files
                    if (chkUseManifest.Checked)
                    {
                        wizPackage.ActiveStepIndex = 3;
                    }
                    GetFiles(string.IsNullOrEmpty(txtFiles.Text));
                    includeSourceRow.Visible = _Writer.HasProjectFile || _Writer.AppCodeFiles.Count > 0;
                    break;
                case 2: //Display the assemblies
                    if (_Writer.IncludeAssemblies)
                    {
                        GetAssemblies(string.IsNullOrEmpty(txtAssemblies.Text));
                    }
                    else
                    {
                        wizPackage.ActiveStepIndex = 3;
                    }
                    break;
                case 3: //Display the manfest
                    if (chkUseManifest.Checked)
                    {
                        if (string.IsNullOrEmpty(cboManifests.SelectedValue))
                        {
							//Use Database
                            var sb = new StringBuilder();
                            var settings = new XmlWriterSettings();
                            settings.ConformanceLevel = ConformanceLevel.Fragment;
                            settings.OmitXmlDeclaration = true;
                            settings.Indent = true;

                            _Writer.WriteManifest(XmlWriter.Create(sb, settings), Package.Manifest);

                            txtManifest.Text = sb.ToString();
                        }
                        else
                        {
                            string filename = Path.Combine(Server.MapPath(_Writer.BasePath), cboManifests.SelectedValue);
                            StreamReader objStreamReader = File.OpenText(filename);
                            txtManifest.Text = objStreamReader.ReadToEnd();
                        }
                    }
                    else
                    {
                        CreateManifest();
                    }
                    if (!chkReviewManifest.Checked)
                    {
                        wizPackage.ActiveStepIndex = 4;
                    }
                    break;
                case 4:
                    txtManifestName.Text = Package.Owner + "_" + Package.Name;
                    if (chkUseManifest.Checked)
                    {
                        txtArchiveName.Text = Package.Owner + "_" + Package.Name + "_" + Globals.FormatVersion(Package.Version) + "_Install.zip";
                        chkManifest.Checked = true;
                        trManifest1.Visible = false;
                        trManifest2.Visible = false;
                    }
                    else
                    {
                        if (chkIncludeSource.Checked)
                        {
                            txtArchiveName.Text = Package.Owner + "_" + Package.Name + "_" + Globals.FormatVersion(Package.Version) + "_Source.zip";
                        }
                        else
                        {
                            txtArchiveName.Text = Package.Owner + "_" + Package.Name + "_" + Globals.FormatVersion(Package.Version) + "_Install.zip";
                        }
                    }
                    if (!txtManifestName.Text.ToLower().EndsWith(".dnn"))
                    {
                        txtManifestName.Text = txtManifestName.Text + ".dnn";
                    }
                    wizPackage.DisplayCancelButton = false;
                    break;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="wizPackage_CancelButtonClick">
          <declaration><![CDATA[protected void wizPackage_CancelButtonClick(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="481" sc="9" el="491" ec="10">DesktopModules\Admin\Extensions\PackageWriter.ascx.cs</location>
            <body hash="888ef0a7ef5ca74a324c9d08e3565bf2"><![CDATA[{
            try
            {
				//Redirect to Definitions page
                Response.Redirect(ReturnURL, true);
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="wizPackage_FinishButtonClick">
          <declaration><![CDATA[protected void wizPackage_FinishButtonClick(object sender, WizardNavigationEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="500" sc="9" el="510" ec="10">DesktopModules\Admin\Extensions\PackageWriter.ascx.cs</location>
            <body hash="888ef0a7ef5ca74a324c9d08e3565bf2"><![CDATA[{
            try
            {
				//Redirect to Definitions page
                Response.Redirect(ReturnURL, true);
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="wizPackage_NextButtonClick">
          <declaration><![CDATA[protected void wizPackage_NextButtonClick(object sender, WizardNavigationEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="520" sc="9" el="558" ec="10">DesktopModules\Admin\Extensions\PackageWriter.ascx.cs</location>
            <body hash="33984f9fbace79c1ff1fcb31cf194eb2"><![CDATA[{
            switch (e.CurrentStepIndex)
            {
                case 3: //Save the Manifest
                    var doc = new XPathDocument(new StringReader(txtManifest.Text));
                    XPathNavigator nav = doc.CreateNavigator();
                    XPathNavigator packageNav = nav.SelectSingleNode("dotnetnuke/packages");
                    Package.Manifest = packageNav.InnerXml;
                    var pkgIconFile = Util.ParsePackageIconFileName(Package);
                    Package.IconFile = (pkgIconFile.Trim().Length > 0) ? Util.ParsePackageIconFile(Package) : null;
                    PackageController.Instance.SaveExtensionPackage(Package);
                    break;
                case 4:
                    if (chkManifest.Checked && (!string.IsNullOrEmpty(txtManifestName.Text)) && (!txtManifestName.Text.ToLower().EndsWith(".dnn")))
                    {
                        lblMessage.Text = Localization.GetString("InvalidManifestExtension", LocalResourceFile);
                        lblMessage.Parent.Visible = true;
                        e.Cancel = true;
                    }
                    else if (chkPackage.Checked && string.IsNullOrEmpty(txtArchiveName.Text))
                    {
                        lblMessage.Text = Localization.GetString("NoFileName", LocalResourceFile);
                        lblMessage.Parent.Visible = true;
                        e.Cancel = true;
                    }
                    else if (chkPackage.Checked && !txtArchiveName.Text.ToLower().EndsWith(".zip"))
                    {
                        lblMessage.Text = Localization.GetString("InvalidPackageName", LocalResourceFile);
                        lblMessage.Parent.Visible = true;
                        e.Cancel = true;
                    }
                    else
                    {
						//Create the Package
                        CreatePackage();
                    }
                    break;
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_Package">
          <declaration><![CDATA[private PackageInfo _Package;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_Writer">
          <declaration><![CDATA[private PackageWriterBase _Writer;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cboManifests">
          <declaration><![CDATA[protected DropDownList cboManifests;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkIncludeSource">
          <declaration><![CDATA[protected CheckBox chkIncludeSource;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkManifest">
          <declaration><![CDATA[protected CheckBox chkManifest;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkPackage">
          <declaration><![CDATA[protected CheckBox chkPackage;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkReviewManifest">
          <declaration><![CDATA[protected CheckBox chkReviewManifest;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkUseManifest">
          <declaration><![CDATA[protected CheckBox chkUseManifest;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdGetFiles">
          <declaration><![CDATA[protected CommandButton cmdGetFiles;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ctlPackage">
          <declaration><![CDATA[protected PropertyEditorControl ctlPackage;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="fldFriendlyName">
          <declaration><![CDATA[protected FieldEditorControl fldFriendlyName;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="fldIconFile">
          <declaration><![CDATA[protected FieldEditorControl fldIconFile;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="fldName">
          <declaration><![CDATA[protected FieldEditorControl fldName;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="fldPackageType">
          <declaration><![CDATA[protected FieldEditorControl fldPackageType;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="fldVersion">
          <declaration><![CDATA[protected FieldEditorControl fldVersion;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="includeSourceRow">
          <declaration><![CDATA[protected HtmlGenericControl includeSourceRow;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblManifestHelp">
          <declaration><![CDATA[protected Label lblManifestHelp;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblMessage">
          <declaration><![CDATA[protected Label lblMessage;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblTitle">
          <declaration><![CDATA[protected Label lblTitle;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="phInstallLogs">
          <declaration><![CDATA[protected PlaceHolder phInstallLogs;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plArchiveName">
          <declaration><![CDATA[protected LabelControl plArchiveName;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plBasePath">
          <declaration><![CDATA[protected LabelControl plBasePath;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plChooseManifest">
          <declaration><![CDATA[protected LabelControl plChooseManifest;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plManifest">
          <declaration><![CDATA[protected LabelControl plManifest;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plManifestName">
          <declaration><![CDATA[protected LabelControl plManifestName;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plPackage">
          <declaration><![CDATA[protected LabelControl plPackage;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plReviewManifest">
          <declaration><![CDATA[protected LabelControl plReviewManifest;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plUseManifest">
          <declaration><![CDATA[protected LabelControl plUseManifest;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Step0">
          <declaration><![CDATA[protected WizardStep Step0;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Step1">
          <declaration><![CDATA[protected WizardStep Step1;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Step2">
          <declaration><![CDATA[protected WizardStep Step2;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Step3">
          <declaration><![CDATA[protected WizardStep Step3;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="StepFinish">
          <declaration><![CDATA[protected WizardStep StepFinish;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="StepLast">
          <declaration><![CDATA[protected WizardStep StepLast;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="trManifest1">
          <declaration><![CDATA[protected HtmlGenericControl trManifest1;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="trManifest2">
          <declaration><![CDATA[protected HtmlGenericControl trManifest2;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="trManifestList">
          <declaration><![CDATA[protected HtmlGenericControl trManifestList;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="trUseManifest">
          <declaration><![CDATA[protected HtmlGenericControl trUseManifest;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtArchiveName">
          <declaration><![CDATA[protected TextBox txtArchiveName;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtAssemblies">
          <declaration><![CDATA[protected TextBox txtAssemblies;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtBasePath">
          <declaration><![CDATA[protected TextBox txtBasePath;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtFiles">
          <declaration><![CDATA[protected TextBox txtFiles;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtManifest">
          <declaration><![CDATA[protected TextBox txtManifest;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtManifestName">
          <declaration><![CDATA[protected TextBox txtManifestName;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="wizPackage">
          <declaration><![CDATA[protected Wizard wizPackage;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="Package">
          <declaration><![CDATA[public PackageInfo Package]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="84" sc="13" el="90" ec="14">DesktopModules\Admin\Extensions\PackageWriter.ascx.cs</location>
            <body hash="f9212ce6615d084ddde5a064578a7c55"><![CDATA[{
                if (_Package == null && PackageID > Null.NullInteger)
                {
                    _Package = PackageController.Instance.GetExtensionPackage(Null.NullInteger, p => p.PackageID == PackageID);
                }
                return _Package;
            }]]></body>
          </codeblock>
        </property>
        <property name="PackageID">
          <declaration><![CDATA[public int PackageID]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="67" sc="13" el="74" ec="14">DesktopModules\Admin\Extensions\PackageWriter.ascx.cs</location>
            <body hash="96402493ebe73caced42083ef9c4595d"><![CDATA[{
                int _PageNo = 0;
                if (ViewState["PackageID"] != null)
                {
                    _PageNo = Convert.ToInt32(ViewState["PackageID"]);
                }
                return _PageNo;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="76" sc="13" el="78" ec="14">DesktopModules\Admin\Extensions\PackageWriter.ascx.cs</location>
            <body hash="0a16f7b9926306e364b22a7d6c8fa33b"><![CDATA[{
                ViewState["PackageID"] = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="ReturnURL">
          <declaration><![CDATA[public string ReturnURL]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="100" sc="13" el="107" ec="14">DesktopModules\Admin\Extensions\PackageWriter.ascx.cs</location>
            <body hash="b304ce42e1160ac981aee77ea4ee72e9"><![CDATA[{
                int TabID = ModuleContext.PortalSettings.HomeTabId;
                if (Request.Params["rtab"] != null)
                {
                    TabID = int.Parse(Request.Params["rtab"]);
                }
                return Globals.NavigateURL(TabID);
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="PurchasedExtensions">
      <declaration><![CDATA[public class PurchasedExtensions : ModuleUserControlBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public PurchasedExtensions()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="FetchExtensionsClick">
          <declaration><![CDATA[protected void FetchExtensionsClick(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="129" sc="9" el="131" ec="10">DesktopModules\Admin\Extensions\PurchasedExtensions.ascx.cs</location>
            <body hash="922b65791faeb89086c07dee20b8643b"><![CDATA[{
            GetExtensions();
        }]]></body>
          </codeblock>
        </method>
        <method name="GetExtensions">
          <declaration><![CDATA[protected void GetExtensions()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="134" sc="9" el="245" ec="10">DesktopModules\Admin\Extensions\PurchasedExtensions.ascx.cs</location>
            <body hash="90954e13a9116f202dd7158f71ac737e"><![CDATA[{
            try
            {
                string fileCheck = Localization.GetString("StoreFile", LocalResourceFile);
                string postData = "";
                Stream oStream;
                Dictionary<string, string> settings = PortalController.Instance.GetPortalSettings(ModuleContext.PortalId);
                var ps = new PortalSecurity();
                string username = ps.DecryptString(settings["Store_Username"], Config.GetDecryptionkey());
                string password = ps.DecryptString(settings["Store_Password"], Config.GetDecryptionkey());
                postData = postData + "username=" + username + "&password=" + password;

                WebRequest request = WebRequest.Create(fileCheck);

                request.Method = "POST";
                // Create POST data and convert it to a byte array.
                byte[] byteArray = Encoding.UTF8.GetBytes(postData);

                request.ContentType = "application/x-www-form-urlencoded";
                request.ContentLength = byteArray.Length;

                Stream dataStream = request.GetRequestStream();
                dataStream.Write(byteArray, 0, byteArray.Length);
                dataStream.Close();

                WebResponse response = request.GetResponse();
                oStream = response.GetResponseStream();
                XmlTextReader oReader;
                XPathDocument oXMLDocument;
                oReader = new XmlTextReader((oStream));


                var dt = new DataTable();
                //instance of a datarow  
                DataRow drow;
                //creating two datacolums Column1 and Column2   
                var dcol1 = new DataColumn("Package", typeof (string));
                var dcol2 = new DataColumn("Filename", typeof (string));
                var dcol3 = new DataColumn("Download", typeof (string));

                var dcol4 = new DataColumn("Deploy", typeof (string));
                //adding datacolumn to datatable  
                dt.Columns.Add(dcol1);
                dt.Columns.Add(dcol2);
                dt.Columns.Add(dcol3);
                dt.Columns.Add(dcol4);
                oReader.XmlResolver = null;
                try
                {
                    oXMLDocument = new XPathDocument(oReader);
                }
                catch (Exception)
                {
                    grdSnow.EmptyDataText = LocalizeString("NoData");
                    grdSnow.DataBind();
                    return;
                }

                var nav = oXMLDocument.CreateNavigator();
                var orderDetailIterator = nav.Select("orders/order/orderdetails/orderdetail");
                var i = 0;
                while (orderDetailIterator.MoveNext())
                {
                    var packageName = orderDetailIterator.Current.GetAttribute("packagename", "").Replace("'", "''").Trim();

                    var filesIterator = orderDetailIterator.Current.Select("files/file");
                    while (filesIterator.MoveNext())
                    {

                        //instance of a datarow  
                        drow = dt.NewRow();
                        //add rows to datatable  
                        dt.Rows.Add(drow);
                        var fileName = filesIterator.Current.GetAttribute("filename", "");
                        var fileId = filesIterator.Current.GetAttribute("fileid", "");
                        var deploy = filesIterator.Current.GetAttribute("deploy", "");
                        //add Column values  
                        dt.Rows[i][dcol1] = packageName;
                        dt.Rows[i][dcol2] = fileName;

                        var portalSettings = PortalController.Instance.GetCurrentPortalSettings();
                        dt.Rows[i][dcol3] = "<a class='dnnPrimaryAction' href='" +
                                            Globals.NavigateURL(portalSettings.ActiveTab.TabID, Null.NullString,
                                                                "fileAction",
                                                                "download", "fileid", fileId) + "'>" +
                                            LocalizeString("download") + "</a>";


                        if (deploy == "true")
                        {
                            dt.Rows[i][dcol4] = "<a class='dnnPrimaryAction' href=" + "\"" +
                                                ModuleContext.EditUrl("fileID", fileId, "Download", "package",
                                                                      Server.UrlPathEncode(packageName)) + "\"" + ">" +
                                                LocalizeString("deploy") + "</a>";
                        }
                        else
                        {
                            dt.Rows[i][dcol4] = "N/A";
                        }
                        i = i + 1;
                    }
                }

                grdSnow.DataSource = dt;
                grdSnow.DataBind();
            }
            catch (Exception)
            {
                grdSnow.EmptyDataText = LocalizeString("NoData");
                grdSnow.DataBind();
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetFile">
          <declaration><![CDATA[private void GetFile(string fileAction, string fileId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="74" sc="9" el="126" ec="10">DesktopModules\Admin\Extensions\PurchasedExtensions.ascx.cs</location>
            <body hash="887edb0d43e89ecd1ab1f7588e3926fb"><![CDATA[{
            string fileCheck = Localization.GetString("StoreFile", LocalResourceFile);
            string postData = "";
            Dictionary<string, string> settings = PortalController.Instance.GetPortalSettings(ModuleContext.PortalId);
            var ps = new PortalSecurity();
            string username = ps.DecryptString(settings["Store_Username"], Config.GetDecryptionkey());
            string password = ps.DecryptString(settings["Store_Password"], Config.GetDecryptionkey());
            postData = postData + "username=" + username + "&password=" + password + "&fileid=" + fileId;

            WebRequest request = WebRequest.Create(fileCheck);

            request.Method = "POST";
            // Create POST data and convert it to a byte array.

            byte[] byteArray = Encoding.UTF8.GetBytes(postData);

            request.ContentType = "application/x-www-form-urlencoded";
            request.ContentLength = byteArray.Length;

            Stream dataStream = request.GetRequestStream();
            dataStream.Write(byteArray, 0, byteArray.Length);
            dataStream.Close();

            WebResponse wr = request.GetResponse();
            string myfile = "";
            string cd = wr.Headers["Content-Disposition"];
            if (cd != null && cd.Trim() != "" && cd.StartsWith("inline;filename="))
            {
                myfile = cd.Replace("inline;filename=", "");
            }

            var objResponse = HttpContext.Current.Response;

            if (fileAction == "download")
            {
                objResponse.AppendHeader("Content-Disposition", "attachment; filename=\"" + myfile + "\"");
                objResponse.AppendHeader("Content-Length", wr.ContentLength.ToString());
                objResponse.ContentType = wr.ContentType;

                const int bufferLength = 4096;
                byte[] byteBuffer = new byte[bufferLength];
                Stream rs = wr.GetResponseStream();
                int len = 0;
                while ((len = rs.Read(byteBuffer, 0, byteBuffer.Length)) > 0)
                {
                    if (len < bufferLength)
                    { objResponse.BinaryWrite(byteBuffer.Take(len).ToArray()); }
                    else
                    { objResponse.BinaryWrite(byteBuffer); }
                    objResponse.Flush();
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="47" sc="9" el="71" ec="10">DesktopModules\Admin\Extensions\PurchasedExtensions.ascx.cs</location>
            <body hash="ad8edec2e41938b22593019d801b32c2"><![CDATA[{
            base.OnLoad(e);
            if (Request["fileid"] != null && Request["fileAction"] != null)
            {
                GetFile(Request["fileAction"], Request["fileid"]);
            }
            fetchExtensions.Click += FetchExtensionsClick;

            setupCredentials.Visible = false;
            updateCredentials.Visible = false;
            fetchExtensions.Visible = false;

            setupCredentials.NavigateUrl = ModuleContext.EditUrl("Store");
            updateCredentials.NavigateUrl = ModuleContext.EditUrl("Store");
            Dictionary<string, string> settings = PortalController.Instance.GetPortalSettings(ModuleContext.PortalId);
            if (settings.ContainsKey("Store_Username"))
            {
                fetchExtensions.Visible = true;
                updateCredentials.Visible = true;
            }
            else
            {
                setupCredentials.Visible = true;
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="ajaxPanel">
          <declaration><![CDATA[protected DnnAjaxPanel ajaxPanel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="error">
          <declaration><![CDATA[protected HtmlGenericControl error;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="fetchExtensions">
          <declaration><![CDATA[protected LinkButton fetchExtensions;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="grdSnow">
          <declaration><![CDATA[protected GridView grdSnow;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Label1">
          <declaration><![CDATA[protected Label Label1;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Label2">
          <declaration><![CDATA[protected Label Label2;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblHelp">
          <declaration><![CDATA[protected Label lblHelp;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblTitle">
          <declaration><![CDATA[protected Label lblTitle;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="loadingPanel">
          <declaration><![CDATA[protected DnnAjaxLoadingPanel loadingPanel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="loginWarning">
          <declaration><![CDATA[protected HtmlGenericControl loginWarning;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="setupCredentials">
          <declaration><![CDATA[protected HyperLink setupCredentials;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="updateCredentials">
          <declaration><![CDATA[protected HyperLink updateCredentials;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="SkinEditor">
      <declaration><![CDATA[public class SkinEditor : PackageEditorBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public SkinEditor()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="BindSkin">
          <declaration><![CDATA[private void BindSkin()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="45" sc="9" el="62" ec="10">DesktopModules\Admin\Extensions\Editors\SkinEditor.ascx.cs</location>
            <body hash="2fdd4841dc35b215835e7f8a26ba92bd"><![CDATA[{
            SkinPackageInfo skin = SkinController.GetSkinByPackageID(PackageID);
            if (!ModuleContext.PortalSettings.ActiveTab.IsSuperTab)
            {
                skinFormReadOnly.DataSource = skin;
                skinFormReadOnly.DataBind();
                skinFormReadOnly.Visible = true;

                pnlHelp.Visible = false;
            }
            if (skin != null && ModuleContext.PortalSettings.ActiveTab.IsSuperTab)
            {

                skinForm.DataSource = skin;
                skinForm.DataBind();
                skinForm.Visible = true;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="ctlSkin_ItemAdded">
          <declaration><![CDATA[protected void ctlSkin_ItemAdded(object sender, PropertyEditorEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="98" sc="9" el="105" ec="10">DesktopModules\Admin\Extensions\Editors\SkinEditor.ascx.cs</location>
            <body hash="abe599f8de121e944610ffa6395903eb"><![CDATA[{
            if (!string.IsNullOrEmpty(e.StringValue))
            {
                SkinPackageInfo skin = SkinController.GetSkinByPackageID(PackageID);
                SkinController.AddSkin(skin.SkinPackageID, e.StringValue);
            }
            BindSkin();
        }]]></body>
          </codeblock>
        </method>
        <method name="ctlSkin_ItemDeleted">
          <declaration><![CDATA[protected void ctlSkin_ItemDeleted(object sender, PropertyEditorEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="108" sc="9" el="114" ec="10">DesktopModules\Admin\Extensions\Editors\SkinEditor.ascx.cs</location>
            <body hash="b7b73f553985ae085696909460c75685"><![CDATA[{
            if (e.Key != null)
            {
                SkinController.DeleteSkin(Convert.ToInt32(e.Key));
            }
            BindSkin();
        }]]></body>
          </codeblock>
        </method>
        <method name="Initialize">
          <declaration><![CDATA[public override void Initialize()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="72" sc="9" el="83" ec="10">DesktopModules\Admin\Extensions\Editors\SkinEditor.ascx.cs</location>
            <body hash="bd522cf1a6ce7930174ce97e83a60888"><![CDATA[{
            if (Package.PackageType == "Skin")
            {
                lblTitle.Text = Localization.GetString("SkinTitle", LocalResourceFile);
                lblHelp.Text = Localization.GetString("SkinHelp", LocalResourceFile);
            }
            else
            {
                lblTitle.Text = Localization.GetString("ContainerTitle", LocalResourceFile);
                lblHelp.Text = Localization.GetString("ContainerHelp", LocalResourceFile);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="65" sc="9" el="69" ec="10">DesktopModules\Admin\Extensions\Editors\SkinEditor.ascx.cs</location>
            <body hash="63eecc4967547bde817379e02090ecb6"><![CDATA[{
            base.OnLoad(e);

            BindSkin();
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdatePackage">
          <declaration><![CDATA[public override void UpdatePackage()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="86" sc="9" el="95" ec="10">DesktopModules\Admin\Extensions\Editors\SkinEditor.ascx.cs</location>
            <body hash="90966ef3f1de8b5b280cdda7d75d51fe"><![CDATA[{
            if (skinForm.IsValid)
            {
                var skin = skinForm.DataSource as SkinPackageInfo;
                if (skin != null)
                {
                    SkinController.UpdateSkinPackage(skin);
                }
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="lblHelp">
          <declaration><![CDATA[protected Label lblHelp;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblTitle">
          <declaration><![CDATA[protected Label lblTitle;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="name">
          <declaration><![CDATA[protected DnnFormTextBoxItem name;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="nameReadOnly">
          <declaration><![CDATA[protected DnnFormLiteralItem nameReadOnly;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="pnlHelp">
          <declaration><![CDATA[protected HtmlGenericControl pnlHelp;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="skinForm">
          <declaration><![CDATA[protected DnnFormEditor skinForm;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="skinFormReadOnly">
          <declaration><![CDATA[protected DnnFormEditor skinFormReadOnly;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="EditorID">
          <declaration><![CDATA[protected override string EditorID]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="39" sc="13" el="41" ec="14">DesktopModules\Admin\Extensions\Editors\SkinEditor.ascx.cs</location>
            <body hash="e472d70a1a4c830523d9d57e708a43b5"><![CDATA[{
                return "SkinEditor";
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="Store">
      <declaration><![CDATA[public class Store : PortalModuleBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public Store()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="OnCancelClick">
          <declaration><![CDATA[protected void OnCancelClick(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="85" sc="9" el="87" ec="10">DesktopModules\Admin\Extensions\Store.ascx.cs</location>
            <body hash="50dd0865bc16a940b0b2529b9cff1341"><![CDATA[{
            Response.Redirect(Globals.NavigateURL());
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="53" sc="9" el="58" ec="10">DesktopModules\Admin\Extensions\Store.ascx.cs</location>
            <body hash="7607db9259c44b8d8f1b42f7febbe0f3"><![CDATA[{
            base.OnInit(e);
            cmdSave.Click += OnSaveClick;
            cmdCancel.Click += OnCancelClick;

        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="61" sc="9" el="75" ec="9">DesktopModules\Admin\Extensions\Store.ascx.cs</location>
            <body hash="3ff66fff8626698fcc519c17c53b2f15"><![CDATA[{
            base.OnLoad(e);

            if (!Page.IsPostBack)
            {
                PortalSecurity ps = new PortalSecurity();
                Dictionary<string, string> settings = PortalController.Instance.GetPortalSettings(ModuleContext.PortalId);
                if (settings.ContainsKey("Store_Username"))
                { txtUsername.Text = ps.DecryptString(settings["Store_Username"], Config.GetDecryptionkey()); }

                if (settings.ContainsKey("Store_Username"))
                { txtPassword.Text = ps.DecryptString(settings["Store_Password"], Config.GetDecryptionkey()); }
            }

       }]]></body>
          </codeblock>
        </method>
        <method name="OnSaveClick">
          <declaration><![CDATA[private void OnSaveClick(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="77" sc="9" el="82" ec="10">DesktopModules\Admin\Extensions\Store.ascx.cs</location>
            <body hash="ca505bb6745cf6c8c73000b9edccb917"><![CDATA[{
            PortalSecurity ps = new PortalSecurity();
            PortalController.UpdatePortalSetting(PortalId, "Store_Username", ps.EncryptString(txtUsername.Text, Config.GetDecryptionkey()));
            PortalController.UpdatePortalSetting(PortalId, "Store_Password", ps.EncryptString(txtPassword.Text, Config.GetDecryptionkey()));
            Response.Redirect(Globals.NavigateURL());
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="cmdCancel">
          <declaration><![CDATA[protected LinkButton cmdCancel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdSave">
          <declaration><![CDATA[protected LinkButton cmdSave;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plPassword">
          <declaration><![CDATA[protected LabelControl plPassword;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plUsername">
          <declaration><![CDATA[protected LabelControl plUsername;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtPassword">
          <declaration><![CDATA[protected TextBox txtPassword;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtUsername">
          <declaration><![CDATA[protected TextBox txtUsername;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="UnInstall">
      <declaration><![CDATA[public class UnInstall : ModuleUserControlBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public UnInstall()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="CheckSecurity">
          <declaration><![CDATA[private void CheckSecurity()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="122" sc="9" el="127" ec="10">DesktopModules\Admin\Extensions\UnInstall.ascx.cs</location>
            <body hash="bf882486f9a65497ae701dcc1f2d1e03"><![CDATA[{
            if (!ModuleContext.PortalSettings.UserInfo.IsSuperUser)
            {
                Response.Redirect(Globals.NavigateURL("Access Denied"), true);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="cmdUninstall_Click">
          <declaration><![CDATA[private void cmdUninstall_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="234" sc="9" el="250" ec="10">DesktopModules\Admin\Extensions\UnInstall.ascx.cs</location>
            <body hash="3b06802ce9052fe50d62866aef94540f"><![CDATA[{
            CheckSecurity();
            try
            {
                UnInstallPackage();

                if (phPaLogs.Controls.Count > 0)
                {
					dnnUnInstallExtension.Visible = false; 
                    tblLogs.Visible = true;
                }
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="154" sc="9" el="167" ec="10">DesktopModules\Admin\Extensions\UnInstall.ascx.cs</location>
            <body hash="21a3c4f340f78bfcd95345ffc717b4ad"><![CDATA[{
            base.OnInit(e);

            if ((Request.QueryString["packageid"] != null))
            {
                PackageID = Int32.Parse(Request.QueryString["packageid"]);
            }
            else
            {
                PackageID = Null.NullInteger;
            }
            cmdReturn1.NavigateUrl = ReturnURL;
            cmdReturn2.NavigateUrl = ReturnURL;
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="179" sc="9" el="222" ec="10">DesktopModules\Admin\Extensions\UnInstall.ascx.cs</location>
            <body hash="64dd532fdf7965d0f608bdfc2436ff52"><![CDATA[{
            base.OnLoad(e);

            cmdUninstall.Click += cmdUninstall_Click;
            CheckSecurity();
            try
            {
                if (Package != null && string.IsNullOrEmpty(Package.Manifest))
                {
                    deleteRow.Visible = false;
                }
				
                //Make Uninstall and Delete Files option unavailable if package cannot be deleted. Also display a message to the user
                if (Package != null && !PackageController.CanDeletePackage(Package, ModuleContext.PortalSettings))
                {
                    cmdUninstall.Visible = false;
                    deleteRow.Visible = false;
                    lblMessage.CssClass = "NormalRed";
                    switch (Package.PackageType)
                    {
                        case "Skin":
                            lblMessage.Text = Localization.GetString("CannotDeleteSkin.ErrorMessage", LocalResourceFile);
                            break;
                        case "Container":
                            lblMessage.Text = Localization.GetString("CannotDeleteContainer.ErrorMessage", LocalResourceFile);
                            break;
                        case "Provider":
                            lblMessage.Text = Localization.GetString("CannotDeleteProvider.ErrorMessage", LocalResourceFile);
                            break;
                    }
                }
                else
                {
                    lblMessage.CssClass = "Normal";
                    lblMessage.Text = "";
                }
                packageForm.DataSource = Package;
                packageForm.DataBind();
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="UnInstallPackage">
          <declaration><![CDATA[private void UnInstallPackage()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="135" sc="9" el="140" ec="10">DesktopModules\Admin\Extensions\UnInstall.ascx.cs</location>
            <body hash="0a8bc84a7e9925b800a4fce379068fff"><![CDATA[{
            phPaLogs.Visible = true;
            var installer = new Installer(Package, Request.MapPath("."));
            installer.UnInstall(chkDelete.Checked);
            phPaLogs.Controls.Add(installer.InstallerInfo.Log.GetLogsTable());
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_Package">
          <declaration><![CDATA[private PackageInfo _Package;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkDelete">
          <declaration><![CDATA[protected CheckBox chkDelete;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdReturn1">
          <declaration><![CDATA[protected HyperLink cmdReturn1;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdReturn2">
          <declaration><![CDATA[protected HyperLink cmdReturn2;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdUninstall">
          <declaration><![CDATA[protected LinkButton cmdUninstall;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="deleteRow">
          <declaration><![CDATA[protected HtmlGenericControl deleteRow;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="description">
          <declaration><![CDATA[protected DnnFormLiteralItem description;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="dnnUnInstallExtension">
          <declaration><![CDATA[protected HtmlGenericControl dnnUnInstallExtension;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="friendlyName">
          <declaration><![CDATA[protected DnnFormLiteralItem friendlyName;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblLogTitle">
          <declaration><![CDATA[protected Label lblLogTitle;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblMessage">
          <declaration><![CDATA[protected Label lblMessage;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="license">
          <declaration><![CDATA[protected DnnFormLiteralItem license;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="name">
          <declaration><![CDATA[protected DnnFormLiteralItem name;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="packageForm">
          <declaration><![CDATA[protected DnnFormEditor packageForm;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="packageType">
          <declaration><![CDATA[protected DnnFormLiteralItem packageType;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="phPaLogs">
          <declaration><![CDATA[protected PlaceHolder phPaLogs;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plDelete">
          <declaration><![CDATA[protected LabelControl plDelete;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="scriptBlock1">
          <declaration><![CDATA[protected DnnScriptBlock scriptBlock1;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="tblLogs">
          <declaration><![CDATA[protected HtmlGenericControl tblLogs;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="version">
          <declaration><![CDATA[protected DnnFormLiteralItem version;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="Package">
          <declaration><![CDATA[public PackageInfo Package]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="80" sc="13" el="86" ec="14">DesktopModules\Admin\Extensions\UnInstall.ascx.cs</location>
            <body hash="f9212ce6615d084ddde5a064578a7c55"><![CDATA[{
                if (_Package == null && PackageID > Null.NullInteger)
                {
                    _Package = PackageController.Instance.GetExtensionPackage(Null.NullInteger, p => p.PackageID == PackageID);
                }
                return _Package;
            }]]></body>
          </codeblock>
        </property>
        <property name="PackageID">
          <declaration><![CDATA[public int PackageID]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="63" sc="13" el="70" ec="14">DesktopModules\Admin\Extensions\UnInstall.ascx.cs</location>
            <body hash="96402493ebe73caced42083ef9c4595d"><![CDATA[{
                int _PageNo = 0;
                if (ViewState["PackageID"] != null)
                {
                    _PageNo = Convert.ToInt32(ViewState["PackageID"]);
                }
                return _PageNo;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="72" sc="13" el="74" ec="14">DesktopModules\Admin\Extensions\UnInstall.ascx.cs</location>
            <body hash="0a16f7b9926306e364b22a7d6c8fa33b"><![CDATA[{
                ViewState["PackageID"] = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="ReturnURL">
          <declaration><![CDATA[public string ReturnURL]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="97" sc="13" el="109" ec="14">DesktopModules\Admin\Extensions\UnInstall.ascx.cs</location>
            <body hash="74a84e92254b6341e6b4139cbf7af606"><![CDATA[{
                string _ReturnUrl = Server.UrlDecode(Request.Params["returnUrl"]);
                if (string.IsNullOrEmpty(_ReturnUrl))
                {
                    int TabID = ModuleContext.PortalSettings.HomeTabId;
                    if (Request.Params["rtab"] != null)
                    {
                        TabID = int.Parse(Request.Params["rtab"]);
                    }
                    _ReturnUrl = Globals.NavigateURL(TabID);
                }
                return _ReturnUrl;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="UsageDetails">
      <declaration><![CDATA[public class UsageDetails : PortalModuleBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private int _PackageID = Null.NullInteger;]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="52" sc="9" el="52" ec="51">DesktopModules\Admin\Extensions\UsageDetails.ascx.cs</location>
            <body hash="cfcd4dc25649f3e754e928a1e747015d"><![CDATA[private int _PackageID = Null.NullInteger]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="AddChildTabsToList">
          <declaration><![CDATA[private void AddChildTabsToList(TabInfo currentTab, ref TabCollection allPortalTabs, ref IDictionary<int, TabInfo> tabsWithModule, ref IDictionary<int, TabInfo> tabsInOrder)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="303" sc="9" el="314" ec="10">DesktopModules\Admin\Extensions\UsageDetails.ascx.cs</location>
            <body hash="e25afececab21db070b7f2621ba1fdf2"><![CDATA[{
            if ((tabsWithModule.ContainsKey(currentTab.TabID) && !tabsInOrder.ContainsKey(currentTab.TabID)))
            {
				//add current tab
                tabsInOrder.Add(currentTab.TabID, currentTab);
				//add children of current tab
                foreach (TabInfo tab in allPortalTabs.WithParentId(currentTab.TabID))
                {
                    AddChildTabsToList(tab, ref allPortalTabs, ref tabsWithModule, ref tabsInOrder);
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="BindFilterList">
          <declaration><![CDATA[private void BindFilterList()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="215" sc="9" el="236" ec="10">DesktopModules\Admin\Extensions\UsageDetails.ascx.cs</location>
            <body hash="054991ffd5b17c56c5692bdecda5a94a"><![CDATA[{
            if ((PackageID != Null.NullInteger && Package != null && Package.PackageType.ToUpper() == "MODULE"))
            {
                tblFilterUsage.Visible = IsSuperTab;
                if (!IsPostBack)
                {
                    if ((FilterUsageList.Visible))
                    {
                        FilterUsageList.DataSource = Portals.Values;
                        FilterUsageList.DataTextField = "PortalName";
                        FilterUsageList.DataValueField = "PortalID";
                        FilterUsageList.DataBind();
                        //FilterUsageList.Items.Insert(0, new ListItem(Localization.GetString("FilterOptionHost", LocalResourceFile), Null.NullInteger.ToString()));
                        //FilterUsageList.Items.Insert(0, new ListItem(Localization.GetString("FilterOptionSelect", LocalResourceFile), "-2"));

                        FilterUsageList.InsertItem(0, Localization.GetString("FilterOptionHost", LocalResourceFile), Null.NullInteger.ToString());
                        FilterUsageList.InsertItem(0, Localization.GetString("FilterOptionSelect", LocalResourceFile), "-2");
                        FilterUsageList.Items[0].Selected = true;
                    }
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="BindUsageList">
          <declaration><![CDATA[private void BindUsageList(int selectedPortalID, string selectedPortalName)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="239" sc="9" el="286" ec="10">DesktopModules\Admin\Extensions\UsageDetails.ascx.cs</location>
            <body hash="783ef785ce6258bc5eb36a9f4ad50a99"><![CDATA[{
            if ((_IsListBound))
            {
                return;
            }
            _IsListBound = true;
            IDictionary<int, TabInfo> tabs = null;
            string portalName = string.Empty;

            if (PackageID != Null.NullInteger && Package != null)
            {
                if (IsSuperTab)
                {
                    if (selectedPortalID == -2)
                    {
                        portalName = string.Empty;
                    }
                    else
                    {
                        tabs = BuildData(selectedPortalID);
                        portalName = selectedPortalName;
                    }
                }
                else
                {
                    tabs = BuildData(PortalId);
                    portalName = string.Empty;
                }
            }
            if ((tabs != null && tabs.Count > 0))
            {
                UsageList.Visible = true;
                UsageList.DataSource = tabs.Values;
                UsageList.DataBind();

                UsageListMsg.Text = string.Format(Localization.GetString("Msg.InUseBy", LocalResourceFile), tabs.Count, portalName);
            }
            else if ((portalName != string.Empty))
            {
                UsageList.Visible = false;
                UsageListMsg.Text = string.Format(Localization.GetString("Msg.NotUsedBy", LocalResourceFile), portalName);
            }
            else
            {
                UsageList.Visible = false;
                UsageListMsg.Text = string.Empty;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="BuildData">
          <declaration><![CDATA[private IDictionary<int, TabInfo> BuildData(int portalID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="289" sc="9" el="300" ec="10">DesktopModules\Admin\Extensions\UsageDetails.ascx.cs</location>
            <body hash="9893131c17008b68f19e5fe3ec553a20"><![CDATA[{
            IDictionary<int, TabInfo> tabsWithModule = TabController.Instance.GetTabsByPackageID(portalID, PackageID, false);
            TabCollection allPortalTabs = TabController.Instance.GetTabsByPortal(portalID);
            IDictionary<int, TabInfo> tabsInOrder = new Dictionary<int, TabInfo>();

			//must get each tab, they parent may not exist
            foreach (TabInfo tab in allPortalTabs.Values)
            {
                AddChildTabsToList(tab, ref allPortalTabs, ref tabsWithModule, ref tabsInOrder);
            }
            return tabsInOrder;
        }]]></body>
          </codeblock>
        </method>
        <method name="FilterUsageList_SelectedIndexChanged">
          <declaration><![CDATA[protected void FilterUsageList_SelectedIndexChanged(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="151" sc="9" el="164" ec="10">DesktopModules\Admin\Extensions\UsageDetails.ascx.cs</location>
            <body hash="30f59cd9eb70922ed8e216023fa0f07d"><![CDATA[{
            try
            {
                if ((FilterUsageList.SelectedValue != null))
                {
                    UsageList.PageIndex = 0;
                    BindUsageList(int.Parse(FilterUsageList.SelectedValue), FilterUsageList.SelectedItem.Text);
                }
            }
            catch (Exception ex)
            {
                Exceptions.ProcessModuleLoadException(this, ex);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetFormattedLink">
          <declaration><![CDATA[protected string GetFormattedLink(object dataItem)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="180" sc="9" el="212" ec="10">DesktopModules\Admin\Extensions\UsageDetails.ascx.cs</location>
            <body hash="4acf038448203fd158f3a4d0eb6b20e4"><![CDATA[{
            var returnValue = new StringBuilder();
            if ((dataItem is TabInfo))
            {
                var tab = (TabInfo) dataItem;
                if ((tab != null))
                {
                    int index = 0;
                    TabController.Instance.PopulateBreadCrumbs(ref tab);
                    foreach (TabInfo t in tab.BreadCrumbs)
                    {
                        if ((index > 0))
                        {
                            returnValue.Append(" > ");
                        }
                        if ((tab.BreadCrumbs.Count - 1 == index))
                        {
                            string url;
                            var aliases = PortalAliasController.Instance.GetPortalAliasesByPortalId(t.PortalID).ToList();
                            var alias = aliases[0];
                            url = Globals.AddHTTP(alias.HTTPAlias) + "/Default.aspx?tabId=" + t.TabID;
                            returnValue.AppendFormat("<a href=\"{0}\">{1}</a>", url, t.LocalizedTabName);
                        }
                        else
                        {
                            returnValue.AppendFormat("{0}", t.LocalizedTabName);
                        }
                        index = index + 1;
                    }
                }
            }
            return returnValue.ToString();
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="112" sc="9" el="126" ec="10">DesktopModules\Admin\Extensions\UsageDetails.ascx.cs</location>
            <body hash="5497a462c7c0baab272c825ffca8d0be"><![CDATA[{
            base.OnLoad(e);
            try
            {
                lblTitle.Text = Localization.GetString("Usage", LocalResourceFile) + Package.FriendlyName;
                UsageList.PagerSettings.FirstPageText = Localization.GetString("grd.PagerSettings.FirstPageText", LocalResourceFile);
                UsageList.PagerSettings.LastPageText = Localization.GetString("grd.PagerSettings.LastPageText", LocalResourceFile);
                UsageList.PagerSettings.NextPageText = Localization.GetString("grd.PagerSettings.NextPageText", LocalResourceFile);
                UsageList.PagerSettings.PreviousPageText = Localization.GetString("grd.PagerSettings.PreviousPageText", LocalResourceFile);
            }
            catch (Exception ex)
            {
                Exceptions.ProcessModuleLoadException(this, ex);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnPreRender">
          <declaration><![CDATA[protected override void OnPreRender(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="129" sc="9" el="148" ec="10">DesktopModules\Admin\Extensions\UsageDetails.ascx.cs</location>
            <body hash="ad9abd61e46f326829edc568f879bcf9"><![CDATA[{
            base.OnPreRender(e);

            try
            {
                BindFilterList();
                if ((FilterUsageList.Visible))
                {
                    BindUsageList(int.Parse(FilterUsageList.SelectedValue), FilterUsageList.SelectedItem.Text);
                }
                else
                {
                    BindUsageList(PortalId, PortalController.Instance.GetCurrentPortalSettings().PortalName);
                }
            }
            catch (Exception ex)
            {
                Exceptions.ProcessModuleLoadException(this, ex);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="UsageList_PageIndexChanging">
          <declaration><![CDATA[protected void UsageList_PageIndexChanging(object sender, GridViewPageEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="167" sc="9" el="177" ec="10">DesktopModules\Admin\Extensions\UsageDetails.ascx.cs</location>
            <body hash="6704a0e365a8bb0aaa146ef1b25370e7"><![CDATA[{
            try
            {
                UsageList.PageIndex = e.NewPageIndex;
                BindUsageList(int.Parse(FilterUsageList.SelectedValue), FilterUsageList.SelectedItem.Text);
            }
            catch (Exception ex)
            {
                Exceptions.ProcessModuleLoadException(this, ex);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_IsListBound">
          <declaration><![CDATA[private bool _IsListBound;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_Package">
          <declaration><![CDATA[private PackageInfo _Package;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_PackageID">
          <declaration><![CDATA[private int _PackageID = Null.NullInteger;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_Portals">
          <declaration><![CDATA[private IDictionary<int, PortalInfo> _Portals;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="FilterUsageList">
          <declaration><![CDATA[protected DnnComboBox FilterUsageList;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblFilterUsageList">
          <declaration><![CDATA[protected LabelControl lblFilterUsageList;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblTitle">
          <declaration><![CDATA[protected Literal lblTitle;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="PnlUsageDetails">
          <declaration><![CDATA[protected UpdatePanel PnlUsageDetails;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="tblFilterUsage">
          <declaration><![CDATA[protected Panel tblFilterUsage;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="UsageList">
          <declaration><![CDATA[protected GridView UsageList;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="UsageListMsg">
          <declaration><![CDATA[protected Label UsageListMsg;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="IsSuperTab">
          <declaration><![CDATA[protected bool IsSuperTab]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="106" sc="13" el="108" ec="14">DesktopModules\Admin\Extensions\UsageDetails.ascx.cs</location>
            <body hash="b298f648aad827575060e3a4d3fb3f81"><![CDATA[{
                return (ModuleContext.PortalSettings.ActiveTab.IsSuperTab);
            }]]></body>
          </codeblock>
        </property>
        <property name="Package">
          <declaration><![CDATA[protected PackageInfo Package]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="70" sc="13" el="83" ec="14">DesktopModules\Admin\Extensions\UsageDetails.ascx.cs</location>
            <body hash="d28a9b310407654d29e3b207450d5208"><![CDATA[{
                if (_Package == null)
                {
                    if (PackageID == Null.NullInteger)
                    {
                        _Package = new PackageInfo();
                    }
                    else
                    {
                        _Package = PackageController.Instance.GetExtensionPackage(Null.NullInteger, p => p.PackageID == PackageID);
                    }
                }
                return _Package;
            }]]></body>
          </codeblock>
        </property>
        <property name="PackageID">
          <declaration><![CDATA[protected int PackageID]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="58" sc="13" el="64" ec="14">DesktopModules\Admin\Extensions\UsageDetails.ascx.cs</location>
            <body hash="c87340caa37c88dc5113166330a88af1"><![CDATA[{
                if ((_PackageID == Null.NullInteger && Request.QueryString["PackageID"] != null))
                {
                    _PackageID = Int32.Parse(Request.QueryString["PackageID"]);
                }
                return _PackageID;
            }]]></body>
          </codeblock>
        </property>
        <property name="Portals">
          <declaration><![CDATA[protected IDictionary<int, PortalInfo> Portals]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="89" sc="13" el="100" ec="14">DesktopModules\Admin\Extensions\UsageDetails.ascx.cs</location>
            <body hash="8235899a3810e160b1d862b84cce3cf6"><![CDATA[{
                if (_Portals == null)
                {
                    _Portals = new Dictionary<int, PortalInfo>();
                    var items = PortalController.Instance.GetPortals();
                    foreach (PortalInfo item in items)
                    {
                        _Portals.Add(item.PortalID, item);
                    }
                }
                return _Portals;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="DotNetNuke.Modules.Admin.FileManager">
    <class name="WebUpload">
      <declaration><![CDATA[public class WebUpload : PortalModuleBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public WebUpload()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
        <constructor name=".cctor">
          <declaration><![CDATA[static WebUpload()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="62" sc="6" el="62" ec="96">admin\ControlPanel\WebUpload.ascx.cs</location>
            <body hash="1baca7ffd3bb543df50615a2ce8ac903"><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof (WebUpload))]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="CheckSecurity">
          <declaration><![CDATA[private void CheckSecurity()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="185" sc="9" el="190" ec="10">admin\ControlPanel\WebUpload.ascx.cs</location>
            <body hash="4ce7348e67f1ab67a37d6027dfe22b45"><![CDATA[{
            if (!ModulePermissionController.HasModulePermission(ModuleConfiguration.ModulePermissions, "CONTENT,EDIT") && !UserController.Instance.GetCurrentUserInfo().IsInRole("Administrators"))
            {
                Response.Redirect(Globals.NavigateURL("Access Denied"), true);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="cmdAdd_Click">
          <declaration><![CDATA[private void cmdAdd_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="317" sc="9" el="387" ec="10">admin\ControlPanel\WebUpload.ascx.cs</location>
            <body hash="254980c8cafa6d569a562a004db7d63e"><![CDATA[{
            try
            {
                CheckSecurity();
                var strMessage = "";

                var postedFile = cmdBrowse.PostedFile;

                //Get localized Strings
                Localization.GetString("InvalidExt", LocalResourceFile);
                var strFileName = Path.GetFileName(postedFile.FileName);
                if (!String.IsNullOrEmpty(postedFile.FileName))
                {
                    switch (FileType)
                    {
                        case UploadType.File: //content files
                            try
                            {
                                var folder = FolderManager.Instance.GetFolder(ddlFolders.SelectedItemValueAsInt);
                                var fileManager = Services.FileSystem.FileManager.Instance;
                                var file = fileManager.AddFile(folder, strFileName, postedFile.InputStream, true, true, postedFile.ContentType);
                                if (chkUnzip.Checked && file.Extension == "zip")
                                {
                                    fileManager.UnzipFile(file, folder);
                                }
                            }
                            catch (PermissionsNotMetException exc)
                            {
                                Logger.Warn(exc);
                                strMessage += "<br />" + string.Format(Localization.GetString("InsufficientFolderPermission"), ddlFolders.SelectedItemValueAsInt);
                            }
                            catch (NoSpaceAvailableException exc)
                            {
                                Logger.Warn(exc);
                                strMessage += "<br />" + string.Format(Localization.GetString("DiskSpaceExceeded"), strFileName);
                            }
                            catch (InvalidFileExtensionException exc)
                            {
                                Logger.Warn(exc);
                                strMessage += "<br />" + string.Format(Localization.GetString("RestrictedFileType"), strFileName, Host.AllowedExtensionWhitelist.ToDisplayString());
                            }
                            catch (Exception exc)
                            {
                                Logger.Error(exc);
                                strMessage += "<br />" + string.Format(Localization.GetString("SaveFileError"), strFileName);
                            }
                            break;
                    }
                }
                else
                {
                    strMessage = Localization.GetString("NoFile", LocalResourceFile);
                }
                if (phPaLogs.Controls.Count > 0)
                {
                    tblLogs.Visible = true;
                }
                else if (String.IsNullOrEmpty(strMessage))
                {
                    Skin.AddModuleMessage(this, String.Format(Localization.GetString("FileUploadSuccess", LocalResourceFile), strFileName), ModuleMessage.ModuleMessageType.GreenSuccess);
                }
                else
                {
                    lblMessage.Text = strMessage;
                }
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="cmdReturn_Click">
          <declaration><![CDATA[private void cmdReturn_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="399" sc="9" el="401" ec="10">admin\ControlPanel\WebUpload.ascx.cs</location>
            <body hash="b969d3703b3969c563d8a0ded511edd4"><![CDATA[{
            Response.Redirect(ReturnURL(), true);
        }]]></body>
          </codeblock>
        </method>
        <method name="LoadFolders">
          <declaration><![CDATA[private void LoadFolders()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="201" sc="9" el="218" ec="10">admin\ControlPanel\WebUpload.ascx.cs</location>
            <body hash="c922e2a311bb48db3420ecdcff0185f9"><![CDATA[{
            var user = UserController.Instance.GetCurrentUserInfo();

            var folders = FolderManager.Instance.GetFolders(FolderPortalID, "ADD", user.UserID);
            ddlFolders.Services.Parameters.Add("permission", "ADD");
            if (!String.IsNullOrEmpty(DestinationFolder))
            {
                ddlFolders.SelectedFolder = folders.SingleOrDefault(f => f.FolderPath == DestinationFolder);
            }
            else
            {
                var rootFolder = folders.SingleOrDefault(f => f.FolderPath == "");
                if (rootFolder != null)
                {
                    ddlFolders.SelectedItem = new ListItem() { Text = DynamicSharedConstants.RootFolder, Value = rootFolder.FolderID.ToString() };
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="243" sc="9" el="248" ec="10">admin\ControlPanel\WebUpload.ascx.cs</location>
            <body hash="3387e4a1b0626ad2895fa11a98d637bd"><![CDATA[{
            base.OnInit(e);

            //Customise the Control Title
            ModuleConfiguration.ModuleTitle = Localization.GetString("UploadType" + FileType, LocalResourceFile);
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="260" sc="9" el="305" ec="10">admin\ControlPanel\WebUpload.ascx.cs</location>
            <body hash="90d3235d88a6a9a8be506f3ec379ea4a"><![CDATA[{
            base.OnLoad(e);

            cmdAdd.Click += cmdAdd_Click;
            cmdReturn1.Click += cmdReturn_Click;
            cmdReturn2.Click += cmdReturn_Click;

            try
            {
                CheckSecurity();

                //Get localized Strings
                string strHost = Localization.GetString("HostRoot", LocalResourceFile);
                string strPortal = Localization.GetString("PortalRoot", LocalResourceFile);

                maxSizeWarningLabel.Text = String.Format(Localization.GetString("FileSizeRestriction", LocalResourceFile), (Config.GetMaxUploadSize()/(1024 *1024)));

                if (!Page.IsPostBack)
                {
                    cmdAdd.Text = Localization.GetString("UploadType" + FileType, LocalResourceFile);
                    if (FileType == UploadType.File)
                    {
                        foldersRow.Visible = true;
                        rootRow.Visible = true;
                        unzipRow.Visible = true;

                        if (IsHostMenu)
                        {
                            lblRootType.Text = strHost + ":";
                            lblRootFolder.Text = RootFolder;
                        }
                        else
                        {
                            lblRootType.Text = strPortal + ":";
                            lblRootFolder.Text = RootFolder;
                        }
                        LoadFolders();
                    }
                    chkUnzip.Checked = false;
                }
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="ReturnURL">
          <declaration><![CDATA[public string ReturnURL()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="232" sc="9" el="240" ec="10">admin\ControlPanel\WebUpload.ascx.cs</location>
            <body hash="9914f657956fbaa9f2d75c81c1e622e4"><![CDATA[{
            int TabID = PortalSettings.HomeTabId;

            if (Request.Params["rtab"] != null)
            {
                TabID = int.Parse(Request.Params["rtab"]);
            }
            return Globals.NavigateURL(TabID);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_DestinationFolder">
          <declaration><![CDATA[private string _DestinationFolder;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_FileType">
          <declaration><![CDATA[private UploadType _FileType;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_FileTypeName">
          <declaration><![CDATA[private string _FileTypeName;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_RootFolder">
          <declaration><![CDATA[private string _RootFolder;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_UploadRoles">
          <declaration><![CDATA[private string _UploadRoles;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkUnzip">
          <declaration><![CDATA[protected CheckBox chkUnzip;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdAdd">
          <declaration><![CDATA[protected LinkButton cmdAdd;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdBrowse">
          <declaration><![CDATA[protected HtmlInputFile cmdBrowse;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdReturn1">
          <declaration><![CDATA[protected LinkButton cmdReturn1;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdReturn2">
          <declaration><![CDATA[protected LinkButton cmdReturn2;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ddlFolders">
          <declaration><![CDATA[protected DnnFolderDropDownList ddlFolders;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="foldersRow">
          <declaration><![CDATA[protected HtmlGenericControl foldersRow;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Label1">
          <declaration><![CDATA[protected LabelControl Label1;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblLogTitle">
          <declaration><![CDATA[protected Label lblLogTitle;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblMessage">
          <declaration><![CDATA[protected Label lblMessage;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblRootFolder">
          <declaration><![CDATA[protected Label lblRootFolder;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblRootType">
          <declaration><![CDATA[protected Label lblRootType;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Logger">
          <declaration><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof(WebUpload));]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="maxSizeWarningLabel">
          <declaration><![CDATA[protected Label maxSizeWarningLabel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="phPaLogs">
          <declaration><![CDATA[protected PlaceHolder phPaLogs;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plBrowse">
          <declaration><![CDATA[protected LabelControl plBrowse;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plFolder">
          <declaration><![CDATA[protected LabelControl plFolder;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="rootRow">
          <declaration><![CDATA[protected HtmlGenericControl rootRow;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="tblLogs">
          <declaration><![CDATA[protected HtmlGenericControl tblLogs;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="unzipRow">
          <declaration><![CDATA[protected HtmlGenericControl unzipRow;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="DestinationFolder">
          <declaration><![CDATA[public string DestinationFolder]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="78" sc="13" el="88" ec="14">admin\ControlPanel\WebUpload.ascx.cs</location>
            <body hash="b4cd55f7ba522dd19cde020267a34f62"><![CDATA[{
                if (_DestinationFolder == null)
                {
                    _DestinationFolder = string.Empty;
                    if ((Request.QueryString["dest"] != null))
                    {
                        _DestinationFolder = Globals.QueryStringDecode(Request.QueryString["dest"]);
                    }
                }
                return PathUtils.Instance.RemoveTrailingSlash(_DestinationFolder.Replace("\\", "/"));
            }]]></body>
          </codeblock>
        </property>
        <property name="FileType">
          <declaration><![CDATA[public UploadType FileType]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="94" sc="13" el="107" ec="14">admin\ControlPanel\WebUpload.ascx.cs</location>
            <body hash="5e6522e7248ff06d81b2e8d34f3726ff"><![CDATA[{
                _FileType = UploadType.File;
                if ((Request.QueryString["ftype"] != null))
                {
					//The select statement ensures that the parameter can be converted to UploadType
                    switch (Request.QueryString["ftype"].ToLower())
                    {
                        case "file":
                            _FileType = (UploadType) Enum.Parse(typeof (UploadType), Request.QueryString["ftype"]);
                            break;
                    }
                }
                return _FileType;
            }]]></body>
          </codeblock>
        </property>
        <property name="FileTypeName">
          <declaration><![CDATA[public string FileTypeName]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="113" sc="13" el="119" ec="14">admin\ControlPanel\WebUpload.ascx.cs</location>
            <body hash="0a1ad6b96c91a2966be3c83effe58a40"><![CDATA[{
                if (_FileTypeName == null)
                {
                    _FileTypeName = Localization.GetString(FileType.ToString(), LocalResourceFile);
                }
                return _FileTypeName;
            }]]></body>
          </codeblock>
        </property>
        <property name="FolderPortalID">
          <declaration><![CDATA[public int FolderPortalID]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="125" sc="13" el="134" ec="14">admin\ControlPanel\WebUpload.ascx.cs</location>
            <body hash="424dd61fc0294012893c6e3e7d2721b8"><![CDATA[{
                if (IsHostMenu)
                {
                    return Null.NullInteger;
                }
                else
                {
                    return PortalId;
                }
            }]]></body>
          </codeblock>
        </property>
        <property name="RootFolder">
          <declaration><![CDATA[public string RootFolder]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="140" sc="13" el="153" ec="14">admin\ControlPanel\WebUpload.ascx.cs</location>
            <body hash="e82531366dc2e7952811d8a76f78a2ee"><![CDATA[{
                if (_RootFolder == null)
                {
                    if (IsHostMenu)
                    {
                        _RootFolder = Globals.HostMapPath;
                    }
                    else
                    {
                        _RootFolder = PortalSettings.HomeDirectoryMapPath;
                    }
                }
                return _RootFolder;
            }]]></body>
          </codeblock>
        </property>
        <property name="UploadRoles">
          <declaration><![CDATA[public string UploadRoles]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="159" sc="13" el="170" ec="14">admin\ControlPanel\WebUpload.ascx.cs</location>
            <body hash="29a97da10a76754ab9328a8c39a764da"><![CDATA[{
                if (_UploadRoles == null)
                {
                    _UploadRoles = string.Empty;

                    if (Convert.ToString(Settings["uploadroles"]) != null)
                    {
                        _UploadRoles = Convert.ToString(Settings["uploadroles"]);
                    }
                }
                return _UploadRoles;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="DotNetNuke.Modules.Admin.Host">
    <class name="EditIPFilters">
      <declaration><![CDATA[public class EditIPFilters : PortalModuleBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public EditIPFilters()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
        <constructor name=".cctor">
          <declaration><![CDATA[static EditIPFilters()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="51" sc="9" el="51" ec="103">DesktopModules\Admin\HostSettings\EditIPFilters.ascx.cs</location>
            <body hash="e3820a4c806d1bf368bb31cb3cf2ea10"><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof (EditIPFilters))]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="lnkCancel_OnClick">
          <declaration><![CDATA[private void lnkCancel_OnClick(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="60" sc="9" el="69" ec="10">DesktopModules\Admin\HostSettings\EditIPFilters.ascx.cs</location>
            <body hash="264e8b47f9a0e93d75e8b08c0971d6ee"><![CDATA[{
            try
            {
                Response.Redirect(ModuleContext.NavigateUrl(ModuleContext.TabId, "", true), true);
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="54" sc="9" el="57" ec="10">DesktopModules\Admin\HostSettings\EditIPFilters.ascx.cs</location>
            <body hash="1ec57150f3fbab7a750738c195a93486"><![CDATA[{
            base.OnInit(e);
            lnkCancel.Click += lnkCancel_OnClick;
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="73" sc="9" el="91" ec="10">DesktopModules\Admin\HostSettings\EditIPFilters.ascx.cs</location>
            <body hash="cc4796e051fba6744ea98eb20f801c3d"><![CDATA[{
            base.OnLoad(e);
            if (!Page.IsPostBack)
            {
                if (!String.IsNullOrEmpty(Request.QueryString["IPFilterID"]))
                {
                    IPFilterInfo editFilter = IPFilterController.Instance.GetIPFilter(Convert.ToInt32(Request.QueryString["IPFilterID"]));
                    txtFirstIP.Text = editFilter.IPAddress;
                    txtSubnet.Text = editFilter.SubnetMask;
                    if (cboType.Items.FindByValue(editFilter.RuleType.ToString()) != null)
                    {
                        cboType.ClearSelection();
                        cboType.Items.FindByValue(editFilter.RuleType.ToString()).Selected = true;
                    }
                }
            }

            cmdSaveFilter.Click += OnSaveFilterClick;
        }]]></body>
          </codeblock>
        </method>
        <method name="OnSaveFilterClick">
          <declaration><![CDATA[private void OnSaveFilterClick(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="96" sc="9" el="124" ec="10">DesktopModules\Admin\HostSettings\EditIPFilters.ascx.cs</location>
            <body hash="67fbfd0c2ed3db69e94d9a1e7e2364f9"><![CDATA[{
            var ipf = new IPFilterInfo();
            ipf.IPAddress = txtFirstIP.Text;
            ipf.SubnetMask = txtSubnet.Text;
            ipf.RuleType = Convert.ToInt32(cboType.SelectedValue);

            if ((ipf.IPAddress == "127.0.0.1" || ipf.IPAddress == "localhost" || ipf.IPAddress == "::1" || ipf.IPAddress=="*" ) && ipf.RuleType == 2)
            {
                Skin.AddModuleMessage(this, Localization.GetString("CannotDeleteLocalhost.Text", LocalResourceFile), ModuleMessage.ModuleMessageType.RedError);
                return;
            }

            if (IPFilterController.Instance.IsAllowableDeny(Request.UserHostAddress, ipf) == false)
            {
                Skin.AddModuleMessage(this, Localization.GetString("CannotDeleteIPInUse.Text", LocalResourceFile), ModuleMessage.ModuleMessageType.RedError);
                return;
            }

            if (!String.IsNullOrEmpty(Request.QueryString["IPFilterID"]))
            {
                ipf.IPFilterID = Convert.ToInt32(Request.QueryString["IPFilterID"]);
                IPFilterController.Instance.UpdateIPFilter(ipf);
            }
            else
            {
                IPFilterController.Instance.AddIPFilter(ipf);
            }
            Response.Redirect(Globals.NavigateURL(TabId), true);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="cboType">
          <declaration><![CDATA[protected DropDownList cboType;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdSaveFilter">
          <declaration><![CDATA[protected LinkButton cmdSaveFilter;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ipValidator">
          <declaration><![CDATA[protected RegularExpressionValidator ipValidator;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lnkCancel">
          <declaration><![CDATA[protected LinkButton lnkCancel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Logger">
          <declaration><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof(EditIPFilters));]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plFirstIP">
          <declaration><![CDATA[protected LabelControl plFirstIP;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plRuleSpecifity">
          <declaration><![CDATA[protected LabelControl plRuleSpecifity;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plRuleType">
          <declaration><![CDATA[protected LabelControl plRuleType;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plSubnet">
          <declaration><![CDATA[protected LabelControl plSubnet;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="radIPOrRange">
          <declaration><![CDATA[protected RadioButtonList radIPOrRange;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="subnetValidator">
          <declaration><![CDATA[protected RegularExpressionValidator subnetValidator;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtFirstIP">
          <declaration><![CDATA[protected TextBox txtFirstIP;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtSubnet">
          <declaration><![CDATA[protected TextBox txtSubnet;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="valFirstIP">
          <declaration><![CDATA[protected RequiredFieldValidator valFirstIP;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="FriendlyUrls">
      <declaration><![CDATA[public class FriendlyUrls : PortalModuleBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public FriendlyUrls()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="AddRule">
          <declaration><![CDATA[private void AddRule(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="216" sc="9" el="226" ec="10">DesktopModules\Admin\HostSettings\FriendlyUrls.ascx.cs</location>
            <body hash="fbbddb61b40a06ee9487d7df6099607e"><![CDATA[{
            //Add a new empty rule and set the editrow to the new row
            Rules.Add(new RewriterRule());
            grdRules.EditItemIndex = Rules.Count - 1;

            //Set the AddMode to true
            AddMode = true;

            //Rebind the collection
            BindRules();
        }]]></body>
          </codeblock>
        </method>
        <method name="BindRules">
          <declaration><![CDATA[private void BindRules()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="106" sc="9" el="109" ec="10">DesktopModules\Admin\HostSettings\FriendlyUrls.ascx.cs</location>
            <body hash="65530474480a4fba50ecd135f4158ed5"><![CDATA[{
            grdRules.DataSource = Rules;
            grdRules.DataBind();
        }]]></body>
          </codeblock>
        </method>
        <method name="CancelEdit">
          <declaration><![CDATA[protected void CancelEdit(object source, CommandEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="293" sc="9" el="306" ec="10">DesktopModules\Admin\HostSettings\FriendlyUrls.ascx.cs</location>
            <body hash="ed62f41205bf010869c0bd6c8ec776c3"><![CDATA[{
            if (AddMode)
            {
				//Remove the temporary added row
                Rules.RemoveAt(Rules.Count - 1);
                AddMode = false;
            }
			
			//Clear editrow
            grdRules.EditItemIndex = -1;

            //Rebind the collection
            BindRules();
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteRule">
          <declaration><![CDATA[private void DeleteRule(object source, DataGridCommandEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="236" sc="9" el="248" ec="10">DesktopModules\Admin\HostSettings\FriendlyUrls.ascx.cs</location>
            <body hash="feb65cb0043f6b21a80eabd11e199a75"><![CDATA[{
            //Get the index of the row to delete
            int index = e.Item.ItemIndex;

            //Remove the rule from the rules collection
            Rules.RemoveAt(index);

            //Save the new collection
            RewriterConfiguration.SaveConfig(Rules);

            //Rebind the collection
            BindRules();
        }]]></body>
          </codeblock>
        </method>
        <method name="EditRule">
          <declaration><![CDATA[private void EditRule(object source, DataGridCommandEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="251" sc="9" el="260" ec="10">DesktopModules\Admin\HostSettings\FriendlyUrls.ascx.cs</location>
            <body hash="de68a524816392afe7f639cceb8e1002"><![CDATA[{
            //Set the AddMode to false
            AddMode = false;

            //Set the editrow
            grdRules.EditItemIndex = e.Item.ItemIndex;

            //Rebind the collection
            BindRules();
        }]]></body>
          </codeblock>
        </method>
        <method name="LoadViewState">
          <declaration><![CDATA[protected override void LoadViewState(object savedState)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="116" sc="9" el="132" ec="10">DesktopModules\Admin\HostSettings\FriendlyUrls.ascx.cs</location>
            <body hash="34803b10471876d157632776c362a168"><![CDATA[{
            var myState = (object[]) savedState;
            if ((myState[0] != null))
            {
                base.LoadViewState(myState[0]);
            }
            if ((myState[1] != null))
            {
                var config = new RewriterConfiguration();

                //Deserialize into RewriterConfiguration
	            var xmlDocument = new XmlDocument();
				xmlDocument.LoadXml(Convert.ToString(myState[1]));
				config = CBO.DeserializeObject<RewriterConfiguration>(xmlDocument);
                Rules = config.Rules;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="159" sc="9" el="186" ec="10">DesktopModules\Admin\HostSettings\FriendlyUrls.ascx.cs</location>
            <body hash="bb2f2666ee47676f101ffc9a976dbf1e"><![CDATA[{
            base.OnInit(e);

            cmdAddRule.Click += AddRule;
            grdRules.EditCommand += EditRule;
            grdRules.DeleteCommand += DeleteRule;
            grdRules.UpdateCommand += SaveRule;
            grdRules.CancelCommand += CancelEdit;

            foreach (DataGridColumn column in grdRules.Columns)
            {
                if (ReferenceEquals(column.GetType(), typeof (ImageCommandColumn)))
                {
					//Manage Delete Confirm JS
                    var imageColumn = (ImageCommandColumn) column;
                    if (imageColumn.CommandName == "Delete")
                    {
                        imageColumn.OnClickJS = Localization.GetString("DeleteItem");
                    }
					
					//Localize Image Column Text
                    if (!String.IsNullOrEmpty(imageColumn.CommandName))
                    {
                        imageColumn.Text = Localization.GetString(imageColumn.CommandName, LocalResourceFile);
                    }
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="196" sc="9" el="206" ec="10">DesktopModules\Admin\HostSettings\FriendlyUrls.ascx.cs</location>
            <body hash="47c3268204c529e9dc24f3a1d6b7e447"><![CDATA[{
            base.OnLoad(e);
			
			//Bind the rules (as long as not postback)
            if (!Page.IsPostBack)
            {
				//Localize the Data Grid
                Localization.LocalizeDataGrid(ref grdRules, LocalResourceFile);
                BindRules();
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="SaveRule">
          <declaration><![CDATA[protected void SaveRule(object source, CommandEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="263" sc="9" el="290" ec="10">DesktopModules\Admin\HostSettings\FriendlyUrls.ascx.cs</location>
            <body hash="f1cb62c72a3a5feb4524603d76abef27"><![CDATA[{
            //Get the index of the row to save
            int index = grdRules.EditItemIndex;

            RewriterRule rule = Rules[index];
            var ctlMatch = (TextBox) grdRules.Items[index].Cells[2].FindControl("txtMatch");
            var ctlReplace = (TextBox) grdRules.Items[index].Cells[2].FindControl("txtReplace");
            if (!String.IsNullOrEmpty(ctlMatch.Text) && !String.IsNullOrEmpty(ctlReplace.Text))
            {
                rule.LookFor = ctlMatch.Text;
                rule.SendTo = ctlReplace.Text;
                //Save the modified collection
                RewriterConfiguration.SaveConfig(Rules);
            }
            else
            {
                if (AddMode)
                {
					//Remove the temporary added row
                    Rules.RemoveAt(Rules.Count - 1);
                    AddMode = false;
                }
            }
			
            //Reset Edit Index
            grdRules.EditItemIndex = -1;
            BindRules();
        }]]></body>
          </codeblock>
        </method>
        <method name="SaveViewState">
          <declaration><![CDATA[protected override object SaveViewState()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="135" sc="9" el="145" ec="10">DesktopModules\Admin\HostSettings\FriendlyUrls.ascx.cs</location>
            <body hash="acdf7b2734296e3a95afbcfb80747fd6"><![CDATA[{
            var config = new RewriterConfiguration();
            config.Rules = Rules;

            object baseState = base.SaveViewState();
            var allStates = new object[2];
            allStates[0] = baseState;
            allStates[1] = XmlUtils.Serialize(config);

            return allStates;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_Rules">
          <declaration><![CDATA[private RewriterRuleCollection _Rules;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdAddRule">
          <declaration><![CDATA[protected LinkButton cmdAddRule;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="grdRules">
          <declaration><![CDATA[protected DataGrid grdRules;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="AddMode">
          <declaration><![CDATA[private bool AddMode]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="64" sc="13" el="71" ec="14">DesktopModules\Admin\HostSettings\FriendlyUrls.ascx.cs</location>
            <body hash="30ff27eb6e5af91c3ff37fd2e344938f"><![CDATA[{
                bool _Mode = Null.NullBoolean;
                if (ViewState["Mode"] != null)
                {
                    _Mode = Convert.ToBoolean(ViewState["Mode"]);
                }
                return _Mode;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="73" sc="13" el="75" ec="14">DesktopModules\Admin\HostSettings\FriendlyUrls.ascx.cs</location>
            <body hash="177a71d978b3132501675561f96e7121"><![CDATA[{
                ViewState["Mode"] = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="Rules">
          <declaration><![CDATA[private RewriterRuleCollection Rules]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="88" sc="13" el="94" ec="14">DesktopModules\Admin\HostSettings\FriendlyUrls.ascx.cs</location>
            <body hash="305c56ef0e1448dfd90cf5814e6d4513"><![CDATA[{
                if (_Rules == null)
                {
                    _Rules = RewriterConfiguration.GetConfig().Rules;
                }
                return _Rules;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="96" sc="13" el="98" ec="14">DesktopModules\Admin\HostSettings\FriendlyUrls.ascx.cs</location>
            <body hash="c43c1ba939e20394a1893808e77bdaef"><![CDATA[{
                _Rules = value;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="HostSettings">
      <declaration><![CDATA[public class HostSettings : PortalModuleBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public HostSettings()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="BindCdnSettings">
          <declaration><![CDATA[private void BindCdnSettings()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="205" sc="3" el="211" ec="4">DesktopModules\Admin\HostSettings\HostSettings.ascx.cs</location>
            <body hash="73083616b5c3b38fe88217b0561770ff"><![CDATA[{
			chkMsAjaxCdn.Checked = Entities.Host.Host.EnableMsAjaxCdn;
			chkTelerikCdn.Checked = Entities.Host.Host.EnableTelerikCdn;
			txtTelerikBasicUrl.Text = Entities.Host.Host.TelerikCdnBasicUrl;
			txtTelerikSecureUrl.Text = Entities.Host.Host.TelerikCdnSecureUrl;
		    chkEnableCDN.Checked = Entities.Host.Host.CdnEnabled;
		}]]></body>
          </codeblock>
        </method>
        <method name="BindClientResourceManagement">
          <declaration><![CDATA[private void BindClientResourceManagement()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="414" sc="9" el="420" ec="10">DesktopModules\Admin\HostSettings\HostSettings.ascx.cs</location>
            <body hash="117388533dfd5677bd0e5f8aa4cd446b"><![CDATA[{
            DebugEnabledRow.Visible = HttpContext.Current.IsDebuggingEnabled;
            CrmVersion.Text = Entities.Host.Host.CrmVersion.ToString(CultureInfo.InvariantCulture);
            chkCrmEnableCompositeFiles.Checked = Entities.Host.Host.CrmEnableCompositeFiles;
            chkCrmMinifyCss.Checked = Entities.Host.Host.CrmMinifyCss;
            chkCrmMinifyJs.Checked = Entities.Host.Host.CrmMinifyJs;
        }]]></body>
          </codeblock>
        </method>
        <method name="BindConfiguration">
          <declaration><![CDATA[private void BindConfiguration()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="112" sc="9" el="151" ec="10">DesktopModules\Admin\HostSettings\HostSettings.ascx.cs</location>
            <body hash="fa84bfdda7ed71e580ff0e978a12eb9b"><![CDATA[{
            lblProduct.Text = DotNetNukeContext.Current.Application.Description;
            lblVersion.Text = Globals.FormatVersion(DotNetNukeContext.Current.Application.Version, true);

            betaRow.Visible = (DotNetNukeContext.Current.Application.Status != ReleaseMode.Stable);
            chkBetaNotice.Checked = Entities.Host.Host.DisplayBetaNotice;

            chkUpgrade.Checked = Entities.Host.Host.CheckUpgrade;
            hypUpgrade.ImageUrl = Upgrade.UpgradeIndicator(DotNetNukeContext.Current.Application.Version, Request.IsLocal, Request.IsSecureConnection);
            if (String.IsNullOrEmpty(hypUpgrade.ImageUrl))
            {
                hypUpgrade.Visible = false;
            }
            else
            {
                hypUpgrade.NavigateUrl = Upgrade.UpgradeRedirect();
            }
            lblDataProvider.Text = ProviderConfiguration.GetProviderConfiguration("data").DefaultProvider;
            lblFramework.Text = Globals.NETFrameworkVersion.ToString(2);

            if (WindowsIdentity.GetCurrent() != null)
            {
                // ReSharper disable PossibleNullReferenceException
                lblIdentity.Text = WindowsIdentity.GetCurrent().Name;
                // ReSharper restore PossibleNullReferenceException
            }
            lblHostName.Text = Dns.GetHostName();
            lblIPAddress.Text = Dns.GetHostEntry(lblHostName.Text).AddressList[0].ToString();
            lblPermissions.Text = SecurityPolicy.Permissions;
            if (string.IsNullOrEmpty(lblPermissions.Text))
            {
                lblPermissions.Text = Localization.GetString("None", LocalResourceFile);
            }
            lblApplicationPath.Text = string.IsNullOrEmpty(Globals.ApplicationPath) ? "/" : Globals.ApplicationPath;
            lblApplicationMapPath.Text = Globals.ApplicationMapPath;
            lblServerTime.Text = DateTime.Now.ToString();
            lblGUID.Text = Entities.Host.Host.GUID;
            chkWebFarm.Checked = CachingProvider.Instance().IsWebFarm();

        }]]></body>
          </codeblock>
        </method>
        <method name="BindData">
          <declaration><![CDATA[private void BindData()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="330" sc="9" el="400" ec="10">DesktopModules\Admin\HostSettings\HostSettings.ascx.cs</location>
            <body hash="2fc2782ccbd09c50f4b62f45c2b748b4"><![CDATA[{
            BindConfiguration();
            BindHostDetails();
            chkCopyright.Checked = Entities.Host.Host.DisplayCopyright;
            chkUseCustomErrorMessages.Checked = Entities.Host.Host.UseCustomErrorMessages;
            chkUseCustomModuleCssClass.Checked = Entities.Host.Host.EnableCustomModuleCssClass;
            BindSkins();
            BindPaymentProcessor();
            BindFriendlyUrlsRequestFilters();
            BindProxyServer();
            BindSmtpServer();
            BindPerformance();
            BindJQuery();
	        BindCdnSettings();
            BindClientResourceManagement();
            BindLogList();
            BindIpFilters();
            ManageMinificationUi();

            foreach (KeyValuePair<string, ModuleControlInfo> kvp in ModuleControlController.GetModuleControlsByModuleDefinitionID(Null.NullInteger))
            {
                if (kvp.Value.ControlType == SecurityAccessLevel.ControlPanel)
                {
                    cboControlPanel.AddItem(kvp.Value.ControlKey.Replace("CONTROLPANEL:", ""), kvp.Value.ControlSrc);
                }
            }
            if (string.IsNullOrEmpty(Entities.Host.Host.ControlPanel))
            {
                if (cboControlPanel.FindItemByValue(Globals.glbDefaultControlPanel) != null)
                {
                    cboControlPanel.FindItemByValue(Globals.glbDefaultControlPanel).Selected = true;
                }
            }
            else
            {
                if (cboControlPanel.FindItemByValue(Entities.Host.Host.ControlPanel) != null)
                {
                    cboControlPanel.FindItemByValue(Entities.Host.Host.ControlPanel).Selected = true;
                }
            }

            chkUsersOnline.Checked = Entities.Host.Host.EnableUsersOnline;
            txtUsersOnlineTime.Text = Entities.Host.Host.UsersOnlineTimeWindow.ToString();
            txtAutoAccountUnlock.Text = Entities.Host.Host.AutoAccountUnlockDuration.ToString();

            txtFileExtensions.Text = Entities.Host.Host.AllowedExtensionWhitelist.ToStorageString();

            chkLogBuffer.Checked = Entities.Host.Host.EventLogBuffer;
            txtHelpURL.Text = Entities.Host.Host.HelpURL;
            chkEnableHelp.Checked = Entities.Host.Host.EnableModuleOnLineHelp;
            chkAutoSync.Checked = Entities.Host.Host.EnableFileAutoSync;
            chkEnableContentLocalization.Checked = Entities.Host.Host.EnableContentLocalization;
            chkDebugMode.Checked = Entities.Host.Host.DebugMode;
            chkCriticalErrors.Checked = Entities.Host.Host.ShowCriticalErrors;
            txtBatch.Text = Entities.Host.Host.MessageSchedulerBatchSize.ToString();
            txtMaxUploadSize.Text = (Config.GetMaxUploadSize() / (1024 * 1024)).ToString();
			txtAsyncTimeout.Text = Entities.Host.Host.AsyncTimeout.ToString();

            chkBannedList.Checked = Entities.Host.Host.EnableBannedList;
            chkStrengthMeter.Checked = Entities.Host.Host.EnableStrengthMeter;
            chkIPChecking.Checked = Entities.Host.Host.EnableIPChecking;
            chkEnablePasswordHistory.Checked = Entities.Host.Host.EnablePasswordHistory;
            txtResetLinkValidity.Text = Entities.Host.Host.MembershipResetLinkValidity.ToString();
            txtAdminResetLinkValidity.Text = Entities.Host.Host.AdminMembershipResetLinkValidity.ToString();
            txtNumberPasswords.Text = Entities.Host.Host.MembershipNumberPasswords.ToString();
           
            ViewState["SelectedLogBufferEnabled"] = chkLogBuffer.Checked;
            ViewState["SelectedUsersOnlineEnabled"] = chkUsersOnline.Checked;

            BindUpgradeLogs();
        }]]></body>
          </codeblock>
        </method>
        <method name="BindFriendlyUrlsRequestFilters">
          <declaration><![CDATA[private void BindFriendlyUrlsRequestFilters()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="154" sc="9" el="157" ec="10">DesktopModules\Admin\HostSettings\HostSettings.ascx.cs</location>
            <body hash="1b5db70893c92f2bba1f3f0ee8de9051"><![CDATA[{
            FriendlyUrlsExtensionControl.BindAction(-1, -1, -1);
            chkEnableRequestFilters.Checked = Entities.Host.Host.EnableRequestFilters;
        }]]></body>
          </codeblock>
        </method>
        <method name="BindHostDetails">
          <declaration><![CDATA[private void BindHostDetails()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="160" sc="9" el="196" ec="10">DesktopModules\Admin\HostSettings\HostSettings.ascx.cs</location>
            <body hash="712b713cb99a93405ce1e8b0aea49849"><![CDATA[{
            hostPortalsCombo.DataSource = PortalController.Instance.GetPortals();
            hostPortalsCombo.DataBind(Entities.Host.Host.HostPortalID.ToString());

            txtHostTitle.Text = Entities.Host.Host.HostTitle;
            txtHostURL.Text = Entities.Host.Host.HostURL;
            txtHostEmail.Text = Entities.Host.Host.HostEmail;
            valHostEmail.ValidationExpression = Globals.glbEmailRegEx;

            //Load DocTypes
            var docTypes = new Dictionary<string, string>
                               {
                                   { "0", string.IsNullOrEmpty(LocalizeString("LegacyDoctype")) ? "Legacy" : LocalizeString("LegacyDoctype") }, 
                                   { "1", string.IsNullOrEmpty(LocalizeString("TransDoctype")) ? "Trans" : LocalizeString("TransDoctype") }, 
                                   { "2", string.IsNullOrEmpty(LocalizeString("StrictDoctype")) ? "Strict" : LocalizeString("StrictDoctype") },
                                   { "3", string.IsNullOrEmpty(LocalizeString("Html5Doctype")) ? "Html5" : LocalizeString("Html5Doctype") }
                               };

            docTypeCombo.DataSource = docTypes;
            docTypeCombo.DataBind();

            string docTypesetting = string.Empty;
            if (Globals.DataBaseVersion != null)
            {
                HostController.Instance.GetSettingsDictionary().TryGetValue("DefaultDocType", out docTypesetting);
            }
            if (string.IsNullOrEmpty(docTypesetting))
            {
                docTypesetting = "0";
            }
            docTypeCombo.DataBind(docTypesetting);

            chkRemember.Checked = Entities.Host.Host.RememberCheckbox;

            chkUpgradeForceSSL.Checked = Entities.Host.Host.UpgradeForceSsl;
            txtSSLDomain.Text = Entities.Host.Host.SslDomain;
        }]]></body>
          </codeblock>
        </method>
        <method name="BindIpFilters">
          <declaration><![CDATA[private void BindIpFilters()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="423" sc="9" el="425" ec="10">DesktopModules\Admin\HostSettings\HostSettings.ascx.cs</location>
            <body hash="e94245694a074f089d3fc629e4aec4eb"><![CDATA[{
            divFiltersDisabled.Visible = !Entities.Host.Host.EnableIPChecking;
        }]]></body>
          </codeblock>
        </method>
        <method name="BindJQuery">
          <declaration><![CDATA[private void BindJQuery()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="199" sc="9" el="202" ec="10">DesktopModules\Admin\HostSettings\HostSettings.ascx.cs</location>
            <body hash="59d56794ee079e7624802f59e09046f0"><![CDATA[{
            jQueryVersion.Text = Framework.jQuery.Version;
            jQueryUIVersion.Text = Framework.jQuery.UIVersion;            
        }]]></body>
          </codeblock>
        </method>
        <method name="BindLogList">
          <declaration><![CDATA[private void BindLogList()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="403" sc="9" el="411" ec="10">DesktopModules\Admin\HostSettings\HostSettings.ascx.cs</location>
            <body hash="2aa1fd0f341954ca3d1b9cda0fa973ee"><![CDATA[{
            var files = Directory.GetFiles(Globals.ApplicationMapPath + @"\portals\_default\logs", "*.resources");
            IEnumerable<string> fileList = (from file in files select Path.GetFileName(file));
            ddlLogs.DataSource = fileList;
            ddlLogs.DataBind();
            var selectItem = new ListItem(Localization.GetString("SelectLog", LocalResourceFile), "-1");
            ddlLogs.InsertItem(0, selectItem.Text, selectItem.Value);
            ddlLogs.SelectedIndex = 0;
        }]]></body>
          </codeblock>
        </method>
        <method name="BindModuleCacheProviderList">
          <declaration><![CDATA[private void BindModuleCacheProviderList()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="428" sc="9" el="451" ec="10">DesktopModules\Admin\HostSettings\HostSettings.ascx.cs</location>
            <body hash="9827d07fcafe72278521d7c78a355bb8"><![CDATA[{
            cboModuleCacheProvider.DataSource = GetFilteredProviders(ModuleCachingProvider.GetProviderList(), "ModuleCachingProvider");
            cboModuleCacheProvider.DataBind();
            if (cboModuleCacheProvider.Items.Count > 0)
            {
                var defaultModuleCache = ComponentFactory.GetComponent<ModuleCachingProvider>();
                string providerKey = (from provider in ModuleCachingProvider.GetProviderList() where provider.Value.Equals(defaultModuleCache) select provider.Key).SingleOrDefault();
                if (!string.IsNullOrEmpty(Entities.Host.Host.ModuleCachingMethod))
                {
                    if (cboModuleCacheProvider.FindItemByValue(Entities.Host.Host.ModuleCachingMethod) != null)
                    {
                        cboModuleCacheProvider.FindItemByValue(Entities.Host.Host.ModuleCachingMethod).Selected = true;
                    }
                    else
                    {
                        cboModuleCacheProvider.FindItemByValue(providerKey).Selected = true;
                    }
                }
                else
                {
                    cboModuleCacheProvider.FindItemByValue(providerKey).Selected = true;
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="BindPageCacheProviderList">
          <declaration><![CDATA[private void BindPageCacheProviderList()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="454" sc="9" el="485" ec="10">DesktopModules\Admin\HostSettings\HostSettings.ascx.cs</location>
            <body hash="44177725b3ba8590cd0ad7bb073ae191"><![CDATA[{
            cboPageCacheProvider.DataSource = GetFilteredProviders(OutputCachingProvider.GetProviderList(), "OutputCachingProvider");
            cboPageCacheProvider.DataBind();
            if (cboPageCacheProvider.Items.Count > 0)
            {
                var defaultPageCache = ComponentFactory.GetComponent<OutputCachingProvider>();
                var providerKey = (from provider in OutputCachingProvider.GetProviderList() where provider.Value.Equals(defaultPageCache) select provider.Key).SingleOrDefault();
                if (defaultPageCache != null)
                {
                    PageCacheRow.Visible = true;
                    if (!string.IsNullOrEmpty(Entities.Host.Host.PageCachingMethod))
                    {
                        if (cboPageCacheProvider.FindItemByValue(Entities.Host.Host.PageCachingMethod) != null)
                        {
                            cboPageCacheProvider.FindItemByValue(Entities.Host.Host.PageCachingMethod).Selected = true;
                        }
                        else
                        {
                            cboPageCacheProvider.FindItemByValue(providerKey).Selected = true;
                        }
                    }
                    else
                    {
                        cboPageCacheProvider.FindItemByValue(providerKey).Selected = true;
                    }
                }
            }
            else
            {
                PageCacheRow.Visible = false;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="BindPaymentProcessor">
          <declaration><![CDATA[private void BindPaymentProcessor()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="231" sc="9" el="258" ec="10">DesktopModules\Admin\HostSettings\HostSettings.ascx.cs</location>
            <body hash="1a03cb7f7cf007a84fb8e0f9166b2b68"><![CDATA[{
            var listController = new ListController();
            processorCombo.DataSource = listController.GetListEntryInfoItems("Processor", "");
            processorCombo.DataBind();
            processorCombo.InsertItem(0, "<" + Localization.GetString("None_Specified") + ">", "");
            processorCombo.Select(Entities.Host.Host.PaymentProcessor, true);

            processorLink.NavigateUrl = Globals.AddHTTP(processorCombo.SelectedItem.Value);

            txtUserId.Text = Entities.Host.Host.ProcessorUserId;
            txtPassword.Attributes.Add("value", Entities.Host.Host.ProcessorPassword);
            txtHostFee.Text = Entities.Host.Host.HostFee.ToString();

            currencyCombo.DataSource = listController.GetListEntryInfoItems("Currency", "");
            var currency = Entities.Host.Host.HostCurrency;
            if (String.IsNullOrEmpty(currency))
            {
                currency = "USD";
            }
            currencyCombo.DataBind(currency);

            txtHostSpace.Text = Entities.Host.Host.HostSpace.ToString();
            txtPageQuota.Text = Entities.Host.Host.PageQuota.ToString();
            txtUserQuota.Text = Entities.Host.Host.UserQuota.ToString();

            txtDemoPeriod.Text = Entities.Host.Host.DemoPeriod.ToString();
            chkDemoSignup.Checked = Entities.Host.Host.DemoSignup;
        }]]></body>
          </codeblock>
        </method>
        <method name="BindPerformance">
          <declaration><![CDATA[private void BindPerformance()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="214" sc="9" el="228" ec="10">DesktopModules\Admin\HostSettings\HostSettings.ascx.cs</location>
            <body hash="574e7fd07223af4f716da37a61438cab"><![CDATA[{
            cboPageState.Items.FindByValue(Entities.Host.Host.PageStatePersister).Selected = true; 
            BindModuleCacheProviderList();
            BindPageCacheProviderList();
            if (cboPerformance.FindItemByValue(((int)Entities.Host.Host.PerformanceSetting).ToString()) != null)
            {
                cboPerformance.FindItemByValue(((int)Entities.Host.Host.PerformanceSetting).ToString()).Selected = true;
            }
            else
            {
                cboPerformance.FindItemByValue("3").Selected = true;
            }
            cboCacheability.FindItemByValue(Entities.Host.Host.AuthenticatedCacheability).Selected = true;
            cboUnauthCacheability.FindItemByValue(Entities.Host.Host.UnauthenticatedCacheability).Selected = true;
        }]]></body>
          </codeblock>
        </method>
        <method name="BindProxyServer">
          <declaration><![CDATA[private void BindProxyServer()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="261" sc="9" el="267" ec="10">DesktopModules\Admin\HostSettings\HostSettings.ascx.cs</location>
            <body hash="16ce121aa6d8099cba11b31907a3f83a"><![CDATA[{
            txtProxyServer.Text = Entities.Host.Host.ProxyServer;
            txtProxyPort.Text = Entities.Host.Host.ProxyPort.ToString();
            txtProxyUsername.Text = Entities.Host.Host.ProxyUsername;
            txtProxyPassword.Attributes.Add("value", Entities.Host.Host.ProxyPassword);
            txtWebRequestTimeout.Text = Entities.Host.Host.WebRequestTimeout.ToString();
        }]]></body>
          </codeblock>
        </method>
        <method name="BindSearchIndex">
          <declaration><![CDATA[private void BindSearchIndex()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="581" sc="9" el="604" ec="10">DesktopModules\Admin\HostSettings\HostSettings.ascx.cs</location>
            <body hash="9e23a116f028501d0ce5c21d3e0bf6bc"><![CDATA[{
            var folder = HostController.Instance.GetString("SearchFolder", @"App_Data\Search");
            var indexFolder = Path.Combine(Globals.ApplicationMapPath, folder);
            lblSearchIndexPath.Text = indexFolder;

            var minWordLength = HostController.Instance.GetInteger("Search_MinKeyWordLength", 3);
            var maxWordLength = HostController.Instance.GetInteger("Search_MaxKeyWordLength", 255);
            txtIndexWordMinLength.Text = minWordLength.ToString(CultureInfo.InvariantCulture);
            txtIndexWordMaxLength.Text = maxWordLength.ToString(CultureInfo.InvariantCulture);
			chkAllowLeadingWildcard.Checked = HostController.Instance.GetString("Search_AllowLeadingWildcard", "N") == "Y";

            var noneSpecified = "<" + Localization.GetString("None_Specified") + ">";

            cbCustomAnalyzer.DataSource = GetAvailableAnalyzers();
            cbCustomAnalyzer.DataBind();
            cbCustomAnalyzer.Items.Insert(0, new DnnComboBoxItem(noneSpecified, string.Empty));
            cbCustomAnalyzer.Select(HostController.Instance.GetString("Search_CustomAnalyzer", string.Empty), false);

			txtTitleBoost.Text = HostController.Instance.GetInteger(SearchTitleBoostSetting, DefaultSearchTitleBoost).ToString();
			txtTagBoost.Text = HostController.Instance.GetInteger(SearchTagBoostSetting, DefaultSearchTagBoost).ToString();
			txtContentBoost.Text = HostController.Instance.GetInteger(SearchContentBoostSetting, DefaultSearchContentBoost).ToString();
			txtDescriptionBoost.Text = HostController.Instance.GetInteger(SearchDescriptionBoostSetting, DefaultSearchDescriptionBoost).ToString();
			txtAuthorBoost.Text = HostController.Instance.GetInteger(SearchAuthorBoostSetting, DefaultSearchAuthorBoost).ToString();
        }]]></body>
          </codeblock>
        </method>
        <method name="BindSkins">
          <declaration><![CDATA[private void BindSkins()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="270" sc="9" el="293" ec="10">DesktopModules\Admin\HostSettings\HostSettings.ascx.cs</location>
            <body hash="1d7a9e1055ac40027bb03fb073f75c40"><![CDATA[{
            hostSkinCombo.RootPath = SkinController.RootSkin;
            hostSkinCombo.Scope = SkinScope.Host;
            hostSkinCombo.SelectedValue = Entities.Host.Host.DefaultPortalSkin;

            hostContainerCombo.RootPath = SkinController.RootContainer;
            hostContainerCombo.Scope = SkinScope.Host;
            hostContainerCombo.SelectedValue = Entities.Host.Host.DefaultPortalContainer;

            editSkinCombo.RootPath = SkinController.RootSkin;
            editSkinCombo.Scope = SkinScope.Host;
            editSkinCombo.SelectedValue = Entities.Host.Host.DefaultAdminSkin;

            editContainerCombo.RootPath = SkinController.RootContainer;
            editContainerCombo.Scope = SkinScope.Host;
            editContainerCombo.SelectedValue = Entities.Host.Host.DefaultAdminContainer;

            uploadSkinLink.NavigateUrl = Util.InstallURL(ModuleContext.TabId, "");

            if (PortalSettings.EnablePopUps)
            {
                uploadSkinLink.Attributes.Add("onclick", "return " + UrlUtils.PopUpUrl(uploadSkinLink.NavigateUrl, this, PortalSettings, true, false));
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="BindSmtpServer">
          <declaration><![CDATA[private void BindSmtpServer()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="296" sc="9" el="312" ec="10">DesktopModules\Admin\HostSettings\HostSettings.ascx.cs</location>
            <body hash="eea077c2c3f5b3ffa4daf6ff52eb5a4c"><![CDATA[{
            txtSMTPServer.Text = Entities.Host.Host.SMTPServer;
            txtConnectionLimit.Text = Entities.Host.Host.SMTPConnectionLimit.ToString(CultureInfo.InvariantCulture);
            txtMaxIdleTime.Text = Entities.Host.Host.SMTPMaxIdleTime.ToString(CultureInfo.InvariantCulture);

            if (!string.IsNullOrEmpty(Entities.Host.Host.SMTPAuthentication))
            {
                optSMTPAuthentication.Items.FindByValue(Entities.Host.Host.SMTPAuthentication).Selected = true;
            }
            else
            {
                optSMTPAuthentication.Items.FindByValue("0").Selected = true;
            }
            chkSMTPEnableSSL.Checked = Entities.Host.Host.EnableSMTPSSL;
            txtSMTPUsername.Text = Entities.Host.Host.SMTPUsername;
            txtSMTPPassword.Attributes.Add("value", Entities.Host.Host.SMTPPassword);
        }]]></body>
          </codeblock>
        </method>
        <method name="BindUpgradeLogs">
          <declaration><![CDATA[private void BindUpgradeLogs()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="315" sc="9" el="327" ec="10">DesktopModules\Admin\HostSettings\HostSettings.ascx.cs</location>
            <body hash="f68ab4dcbe6e157d76b807fa94d85557"><![CDATA[{
            ProviderConfiguration objProviderConfiguration = ProviderConfiguration.GetProviderConfiguration("data");
            string strProviderPath = DataProvider.Instance().GetProviderPath();
            var arrScriptFiles = new ArrayList();
            string[] arrFiles = Directory.GetFiles(strProviderPath, "*." + objProviderConfiguration.DefaultProvider);
            foreach (string strFile in arrFiles)
            {
                arrScriptFiles.Add(Path.GetFileNameWithoutExtension(strFile));
            }
            arrScriptFiles.Sort();
            cboVersion.DataSource = arrScriptFiles;
            cboVersion.DataBind();
        }]]></body>
          </codeblock>
        </method>
        <method name="CheckSecurity">
          <declaration><![CDATA[private void CheckSecurity()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="488" sc="9" el="494" ec="10">DesktopModules\Admin\HostSettings\HostSettings.ascx.cs</location>
            <body hash="5c607960f91e6cd5659741b725b46d89"><![CDATA[{
			//Verify that the current user has access to access this page
            if (!UserInfo.IsSuperUser)
            {
                Response.Redirect(Globals.NavigateURL("Access Denied"), true);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="ClearCache">
          <declaration><![CDATA[protected void ClearCache(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="698" sc="9" el="702" ec="10">DesktopModules\Admin\HostSettings\HostSettings.ascx.cs</location>
            <body hash="4a5e1f809170c8d3e19d2619db281547"><![CDATA[{
            DataCache.ClearCache();
			ClientResourceManager.ClearCache();
            Response.Redirect(Request.RawUrl, true);
        }]]></body>
          </codeblock>
        </method>
        <method name="CompactSearchIndex">
          <declaration><![CDATA[protected void CompactSearchIndex(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="931" sc="9" el="933" ec="10">DesktopModules\Admin\HostSettings\HostSettings.ascx.cs</location>
            <body hash="a9af89bd5df1a331c8cd5b0524947919"><![CDATA[{
            SearchHelper.Instance.SetSearchReindexRequestTime(true);
        }]]></body>
          </codeblock>
        </method>
        <method name="EnableCompositeFilesChanged">
          <declaration><![CDATA[private void EnableCompositeFilesChanged(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="638" sc="9" el="640" ec="10">DesktopModules\Admin\HostSettings\HostSettings.ascx.cs</location>
            <body hash="ec9534cb047865721cf17d6fbedd0a69"><![CDATA[{
            ManageMinificationUi();
        }]]></body>
          </codeblock>
        </method>
        <method name="GetAvailableAnalyzers">
          <declaration><![CDATA[private IList<string> GetAvailableAnalyzers()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="607" sc="9" el="625" ec="10">DesktopModules\Admin\HostSettings\HostSettings.ascx.cs</location>
            <body hash="07231be4bb3a08bc29646c8bb2a32db3"><![CDATA[{
            var analyzers = new List<string>();

            foreach (var assembly in AppDomain.CurrentDomain.GetAssemblies())
            {
                try
                {
                    analyzers.AddRange(from t in assembly.GetTypes() where IsAnalyzerType(t) && IsAllowType(t) select string.Format("{0}, {1}", t.FullName, assembly.GetName().Name));
                }
                catch (Exception)
                {
                    //do nothing but just ignore the error.
                }
                    
            }


            return analyzers;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetFilteredProviders">
          <declaration><![CDATA[private static IEnumerable GetFilteredProviders<T>(Dictionary<string, T> providerList, string keyFilter)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="497" sc="9" el="501" ec="10">DesktopModules\Admin\HostSettings\HostSettings.ascx.cs</location>
            <body hash="5f3289b95a30b5d70349a44df6c812de"><![CDATA[{
            var providers = from provider in providerList let filteredkey = provider.Key.Replace(keyFilter, String.Empty) select new { filteredkey, provider.Key };

            return providers;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetSearchIndexStatistics">
          <declaration><![CDATA[protected void GetSearchIndexStatistics(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="941" sc="9" el="949" ec="10">DesktopModules\Admin\HostSettings\HostSettings.ascx.cs</location>
            <body hash="26a4809cd1454024155f564c723acf9f"><![CDATA[{
            var searchStatistics = InternalSearchController.Instance.GetSearchStatistics();
            pnlSearchGetMoreButton.Visible = false;
            pnlSearchStatistics.Visible = true;
            lblSearchIndexDbSize.Text = ((searchStatistics.IndexDbSize/1024f)/1024f).ToString("N") + " MB";
            lblSearchIndexLastModifedOn.Text = DateUtils.CalculateDateForDisplay(searchStatistics.LastModifiedOn);
            lblSearchIndexTotalActiveDocuments.Text = searchStatistics.TotalActiveDocuments.ToString(CultureInfo.InvariantCulture);
            lblSearchIndexTotalDeletedDocuments.Text = searchStatistics.TotalDeletedDocuments.ToString(CultureInfo.InvariantCulture);
        }]]></body>
          </codeblock>
        </method>
        <method name="HostSearchReindex">
          <declaration><![CDATA[protected void HostSearchReindex(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="936" sc="9" el="938" ec="10">DesktopModules\Admin\HostSettings\HostSettings.ascx.cs</location>
            <body hash="8b8090ddd542295e0b3c9f4f280bd80b"><![CDATA[{
            SearchHelper.Instance.SetSearchReindexRequestTime(-1);
        }]]></body>
          </codeblock>
        </method>
        <method name="IncrementCrmVersion">
          <declaration><![CDATA[private void IncrementCrmVersion(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="657" sc="9" el="662" ec="10">DesktopModules\Admin\HostSettings\HostSettings.ascx.cs</location>
            <body hash="8d6a2b16334f2325aea8ddbc225c533d"><![CDATA[{
            var currentVersion = Entities.Host.Host.CrmVersion;
            var newVersion = currentVersion + 1;
            HostController.Instance.Update(ClientResourceSettings.VersionKey, newVersion.ToString(CultureInfo.InvariantCulture), true);
            Response.Redirect(Request.RawUrl, true); // reload page
        }]]></body>
          </codeblock>
        </method>
        <method name="IsAllowType">
          <declaration><![CDATA[private bool IsAllowType(Type type)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="633" sc="9" el="635" ec="10">DesktopModules\Admin\HostSettings\HostSettings.ascx.cs</location>
            <body hash="07e003dfd8be88c18f71add2ef3ca70f"><![CDATA[{
            return !type.FullName.Contains("Lucene.Net.Analysis.Analyzer") && !type.FullName.Contains("DotNetNuke");
        }]]></body>
          </codeblock>
        </method>
        <method name="IsAnalyzerType">
          <declaration><![CDATA[private bool IsAnalyzerType(Type type)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="628" sc="9" el="630" ec="10">DesktopModules\Admin\HostSettings\HostSettings.ascx.cs</location>
            <body hash="e4cae8e6f368334b5ad362366910621f"><![CDATA[{
            return type != null && type.FullName != null && (type.FullName.Contains("Lucene.Net.Analysis.Analyzer") || IsAnalyzerType(type.BaseType));
        }]]></body>
          </codeblock>
        </method>
        <method name="ManageMinificationUi">
          <declaration><![CDATA[private void ManageMinificationUi()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="643" sc="9" el="654" ec="10">DesktopModules\Admin\HostSettings\HostSettings.ascx.cs</location>
            <body hash="d2f77e7665f2ac522ca366cabba55cef"><![CDATA[{
            var enableCompositeFiles = chkCrmEnableCompositeFiles.Checked;

            if (!enableCompositeFiles)
            {
                chkCrmMinifyCss.Checked = false;
                chkCrmMinifyJs.Checked = false;
            }

            chkCrmMinifyCss.Enabled = enableCompositeFiles;
            chkCrmMinifyJs.Enabled = enableCompositeFiles;
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="527" sc="9" el="531" ec="10">DesktopModules\Admin\HostSettings\HostSettings.ascx.cs</location>
            <body hash="d9ee7ab6bec7cab133f3eed366f7fd27"><![CDATA[{
            base.OnInit(e);
			JavaScript.RequestRegistration(CommonJs.DnnPlugins);
            ddlLogs.SelectedIndexChanged += OnLogFileIndexChanged;
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="540" sc="9" el="578" ec="10">DesktopModules\Admin\HostSettings\HostSettings.ascx.cs</location>
            <body hash="3814bfcd4d9f4563c6b5f89878c6bb50"><![CDATA[{
            base.OnLoad(e);

            cmdEmail.Click += TestEmail;
            cmdRestart.Click += RestartApplication;
            cmdUpdate.Click += UpdateSettings;
            cmdUpgrade.Click += OnUpgradeClick;
            cmdCache.Click += ClearCache;
            IncrementCrmVersionButton.Click += IncrementCrmVersion;
            chkCrmEnableCompositeFiles.CheckedChanged += EnableCompositeFilesChanged;
            try
            {
                CheckSecurity();

                //If this is the first visit to the page, populate the site data
                if (!Page.IsPostBack)
                {
                    BindData();
                    BindSearchIndex();
                   
                    rangeUploadSize.MaximumValue = Config.GetRequestFilterSize().ToString();
                    rangeUploadSize.Text = String.Format(Localization.GetString("maxUploadSize.Error", LocalResourceFile),rangeUploadSize.MaximumValue);
                    rangeUploadSize.ErrorMessage = String.Format(Localization.GetString("maxUploadSize.Error", LocalResourceFile), rangeUploadSize.MaximumValue);

                    if(Request.QueryString["smtpwarning"] != null)
                    {
                        Skin.AddModuleMessage(this, Localization.GetString("SmtpServerWarning", LocalResourceFile), ModuleMessage.ModuleMessageType.YellowWarning);
                    }
                }
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
            passwordSettings.EditMode = PropertyEditorMode.Edit ;
            passwordSettings.LocalResourceFile = LocalResourceFile;
            passwordSettings.DataSource = new PasswordConfig();
            passwordSettings.DataBind();
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLogFileIndexChanged">
          <declaration><![CDATA[private void OnLogFileIndexChanged(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="504" sc="9" el="521" ec="10">DesktopModules\Admin\HostSettings\HostSettings.ascx.cs</location>
            <body hash="9e9de4c4abe38d492855beda99be041a"><![CDATA[{
            if (ddlLogs.SelectedItem.Value == "-1")
            {
                txtLogContents.Text = string.Empty;
                txtLogContents.Visible = false;
                return;
            }

            var objStreamReader = File.OpenText(Globals.ApplicationMapPath + @"\portals\_default\logs\" + ddlLogs.SelectedItem.Text);
            var logText = objStreamReader.ReadToEnd();
            if (String.IsNullOrEmpty(logText.Trim()))
            {
                logText = Localization.GetString("LogEmpty", LocalResourceFile);
            }
            txtLogContents.Text = logText;
            txtLogContents.Visible = true;
            objStreamReader.Close();
        }]]></body>
          </codeblock>
        </method>
        <method name="OnUpgradeClick">
          <declaration><![CDATA[protected void OnUpgradeClick(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="665" sc="9" el="689" ec="10">DesktopModules\Admin\HostSettings\HostSettings.ascx.cs</location>
            <body hash="1d1cadeb4a4bf8e1a61a4f72ef54d727"><![CDATA[{
            try
            {
                var strProviderPath = DataProvider.Instance().GetProviderPath();
                if (File.Exists(strProviderPath + cboVersion.SelectedItem.Text + ".log.resources"))
                {
                    var objStreamReader = File.OpenText(strProviderPath + cboVersion.SelectedItem.Text + ".log.resources");
                    var upgradeText = objStreamReader.ReadToEnd();
                    if (String.IsNullOrEmpty(upgradeText.Trim()))
                    {
                        upgradeText = Localization.GetString("LogEmpty", LocalResourceFile);
                    }
                    lblUpgrade.Text = upgradeText.Replace("\n", "<br>");
                    objStreamReader.Close();
                }
                else
                {
                    lblUpgrade.Text = Localization.GetString("NoLog", LocalResourceFile);
                }
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="RestartApplication">
          <declaration><![CDATA[protected void RestartApplication(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="705" sc="9" el="711" ec="10">DesktopModules\Admin\HostSettings\HostSettings.ascx.cs</location>
            <body hash="5100d544c7a360659a604a3b9e88c9f7"><![CDATA[{
            var log = new LogInfo { BypassBuffering = true, LogTypeKey = EventLogController.EventLogType.HOST_ALERT.ToString() };
            log.AddProperty("Message", Localization.GetString("UserRestart", LocalResourceFile));
            LogController.Instance.AddLog(log);
            Config.Touch();
            Response.Redirect(Globals.NavigateURL(), true);
        }]]></body>
          </codeblock>
        </method>
        <method name="TestEmail">
          <declaration><![CDATA[protected void TestEmail(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="720" sc="9" el="760" ec="10">DesktopModules\Admin\HostSettings\HostSettings.ascx.cs</location>
            <body hash="c44637b1f93cb0ad4e41db3a9ce5fee6"><![CDATA[{
            try
            {
                if (!String.IsNullOrEmpty(txtHostEmail.Text))
                {
                    txtSMTPPassword.Attributes.Add("value", txtSMTPPassword.Text);

                    string strMessage = Mail.SendMail(txtHostEmail.Text,
                                                      txtHostEmail.Text,
                                                      "",
                                                      "",
                                                      MailPriority.Normal,
                                                      Localization.GetSystemMessage(PortalSettings, "EMAIL_SMTP_TEST_SUBJECT"),
                                                      MailFormat.Text,
                                                      Encoding.UTF8,
                                                      "",
                                                      "",
                                                      txtSMTPServer.Text,
                                                      optSMTPAuthentication.SelectedItem.Value,
                                                      txtSMTPUsername.Text,
                                                      txtSMTPPassword.Text,
                                                      chkSMTPEnableSSL.Checked);
                    if (!String.IsNullOrEmpty(strMessage))
                    {
                        UI.Skins.Skin.AddModuleMessage(this, "", String.Format(Localization.GetString("EmailErrorMessage", LocalResourceFile), strMessage), ModuleMessage.ModuleMessageType.RedError);
                    }
                    else
                    {
                        UI.Skins.Skin.AddModuleMessage(this, "", String.Format(Localization.GetString("EmailSentMessage", LocalResourceFile), txtHostEmail.Text), ModuleMessage.ModuleMessageType.GreenSuccess);
                    }
                }
                else
                {
                    UI.Skins.Skin.AddModuleMessage(this, "", Localization.GetString("SpecifyHostEmailMessage", LocalResourceFile), ModuleMessage.ModuleMessageType.RedError);
                }
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateSchedule">
          <declaration><![CDATA[protected void UpdateSchedule()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="763" sc="9" el="785" ec="10">DesktopModules\Admin\HostSettings\HostSettings.ascx.cs</location>
            <body hash="3209a1721814b0980f1c6bfc5a2d56d1"><![CDATA[{
            bool usersOnLineChanged = (Convert.ToBoolean(ViewState["SelectedUsersOnlineEnabled"]) != chkUsersOnline.Checked);
            if (usersOnLineChanged)
            {
                ScheduleItem scheduleItem = SchedulingProvider.Instance().GetSchedule("DotNetNuke.Entities.Users.PurgeUsersOnline, DOTNETNUKE", Null.NullString);
                if (scheduleItem != null)
                {
                    scheduleItem.Enabled = chkUsersOnline.Checked;
                    SchedulingProvider.Instance().UpdateSchedule(scheduleItem);
                }
            }

            bool logBufferChanged = (Convert.ToBoolean(ViewState["SelectedLogBufferEnabled"]) != chkLogBuffer.Checked);
            if (logBufferChanged)
            {
                var scheduleItem = SchedulingProvider.Instance().GetSchedule("DotNetNuke.Services.Log.EventLog.PurgeLogBuffer, DOTNETNUKE", Null.NullString);
                if (scheduleItem != null)
                {
                    scheduleItem.Enabled = chkLogBuffer.Checked;
                    SchedulingProvider.Instance().UpdateSchedule(scheduleItem);
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateSearchIndexConfiguration">
          <declaration><![CDATA[protected void UpdateSearchIndexConfiguration()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="952" sc="9" el="990" ec="10">DesktopModules\Admin\HostSettings\HostSettings.ascx.cs</location>
            <body hash="eb7b9b781c78bf921509f6e2a84e195b"><![CDATA[{
            int newMinLength;
            if (int.TryParse(txtIndexWordMinLength.Text, out newMinLength))
            {
                var oldMinLength = HostController.Instance.GetInteger("Search_MinKeyWordLength", 3);
                if (newMinLength != oldMinLength)
                {
                    HostController.Instance.Update("Search_MinKeyWordLength", txtIndexWordMinLength.Text);
                }
            }

            int newMaxLength;
            if (int.TryParse(txtIndexWordMaxLength.Text, out newMaxLength))
            {
                var oldMaxLength = HostController.Instance.GetInteger("Search_MaxKeyWordLength", 255);
                if (newMaxLength != oldMaxLength)
                {
                    HostController.Instance.Update("Search_MaxKeyWordLength", txtIndexWordMaxLength.Text);
                }
            }

			HostController.Instance.Update("Search_AllowLeadingWildcard", chkAllowLeadingWildcard.Checked ? "Y" : "N");

			HostController.Instance.Update(SearchTitleBoostSetting, string.IsNullOrEmpty(txtTitleBoost.Text) ? DefaultSearchTitleBoost.ToString() : txtTitleBoost.Text);
			HostController.Instance.Update(SearchTagBoostSetting, string.IsNullOrEmpty(txtTagBoost.Text) ? DefaultSearchTagBoost.ToString() : txtTagBoost.Text);
			HostController.Instance.Update(SearchContentBoostSetting, string.IsNullOrEmpty(txtContentBoost.Text) ? DefaultSearchContentBoost.ToString() : txtContentBoost.Text);
			HostController.Instance.Update(SearchDescriptionBoostSetting, string.IsNullOrEmpty(txtDescriptionBoost.Text) ? DefaultSearchDescriptionBoost.ToString() : txtDescriptionBoost.Text);
			HostController.Instance.Update(SearchAuthorBoostSetting, string.IsNullOrEmpty(txtAuthorBoost.Text) ? DefaultSearchAuthorBoost.ToString() : txtAuthorBoost.Text);

            var oldAnalyzer = HostController.Instance.GetString("Search_CustomAnalyzer", string.Empty);
            var newAnalyzer = cbCustomAnalyzer.SelectedValue.Trim();
            if (!oldAnalyzer.Equals(newAnalyzer))
            {
                HostController.Instance.Update("Search_CustomAnalyzer", newAnalyzer);
                
                //force the app restart to use new analyzer.
                Config.Touch();
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateSettings">
          <declaration><![CDATA[protected void UpdateSettings(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="794" sc="9" el="927" ec="10">DesktopModules\Admin\HostSettings\HostSettings.ascx.cs</location>
            <body hash="def972e1073e239b05a2216229eb974d"><![CDATA[{
            if (Page.IsValid)
            {
                try
                {
                    // TODO: Remove after refactor: this code/functionality has been copied to ..\AdvancedSettings\SmtpServerSettings.aspx) 
                    //show warning message when set custom smtp port and app running under medium trust, but still can
                    //save the settings because maybe some host providers use a modified medium trusy config and allow
                    //this permission.
                    var smtpServer = txtSMTPServer.Text;
                    var smtpWarning = !string.IsNullOrEmpty(smtpServer)
                                        && smtpServer != DotNetNuke.Entities.Host.Host.SMTPServer
                                        && smtpServer.Contains(":") 
                                        && smtpServer.Split(':')[1] != "25" 
                                        && !SecurityPolicy.HasAspNetHostingPermission();

                    HostController.Instance.Update("CheckUpgrade", chkUpgrade.Checked ? "Y" : "N", false);
                    HostController.Instance.Update("DisplayBetaNotice", chkBetaNotice.Checked ? "Y" : "N", false);
                    HostController.Instance.Update("HostPortalId", hostPortalsCombo.SelectedValue);
                    HostController.Instance.Update("HostTitle", txtHostTitle.Text, false);
                    HostController.Instance.Update("HostURL", txtHostURL.Text, false);
                    HostController.Instance.Update("HostEmail", txtHostEmail.Text.Trim(), false);
                    HostController.Instance.Update("PaymentProcessor", processorCombo.SelectedItem.Text, false);
                    HostController.Instance.Update("ProcessorUserId", txtUserId.Text, false);
                    HostController.Instance.Update("ProcessorPassword", txtPassword.Text, false);
                    HostController.Instance.Update("HostFee", txtHostFee.Text, false);
                    HostController.Instance.Update("HostCurrency", currencyCombo.SelectedValue, false);
                    HostController.Instance.Update("HostSpace", txtHostSpace.Text, false);
                    HostController.Instance.Update("PageQuota", txtPageQuota.Text, false);
                    HostController.Instance.Update("UserQuota", txtUserQuota.Text, false);
                    HostController.Instance.Update("DemoPeriod", txtDemoPeriod.Text, false);
                    HostController.Instance.Update("DemoSignup", chkDemoSignup.Checked ? "Y" : "N", false);
                    HostController.Instance.Update("Copyright", chkCopyright.Checked ? "Y" : "N", false);
                    HostController.Instance.Update("DefaultDocType", docTypeCombo.SelectedValue, false);
                    HostController.Instance.Update("RememberCheckbox", chkRemember.Checked ? "Y" : "N", false);
                    HostController.Instance.Update("EnableCustomModuleCssClass", chkUseCustomModuleCssClass.Checked ? "Y" : "N", false);
                    HostController.Instance.Update("DisableUsersOnline", chkUsersOnline.Checked ? "N" : "Y", false);
                    HostController.Instance.Update("AutoAccountUnlockDuration", txtAutoAccountUnlock.Text, false);
                    HostController.Instance.Update("UsersOnlineTime", txtUsersOnlineTime.Text, false);
                    HostController.Instance.Update("ProxyServer", txtProxyServer.Text, false);
                    HostController.Instance.Update("ProxyPort", txtProxyPort.Text, false);
                    HostController.Instance.Update("ProxyUsername", txtProxyUsername.Text, false);
                    HostController.Instance.Update("ProxyPassword", txtProxyPassword.Text, false);
                    HostController.Instance.Update("WebRequestTimeout", txtWebRequestTimeout.Text, false);
                    // TODO: Refactor: call smtpServerSettings.Update(); This code/functionality has been copied to ..\AdvancedSettings\SmtpServerSettings.aspx) 
                    HostController.Instance.Update("SMTPServer", txtSMTPServer.Text, false);
                    HostController.Instance.Update("SMTPConnectionLimit", txtConnectionLimit.Text, false);
                    HostController.Instance.Update("SMTPMaxIdleTime", txtMaxIdleTime.Text, false);
                    HostController.Instance.Update("SMTPAuthentication", optSMTPAuthentication.SelectedItem.Value, false);
                    HostController.Instance.Update("SMTPUsername", txtSMTPUsername.Text, false);
                    HostController.Instance.UpdateEncryptedString("SMTPPassword", txtSMTPPassword.Text, Config.GetDecryptionkey());
                    HostController.Instance.Update("SMTPEnableSSL", chkSMTPEnableSSL.Checked ? "Y" : "N", false);
                    // end of code copied to smtpServerSettings.Update()
                    HostController.Instance.Update("FileExtensions", txtFileExtensions.Text, false);
                    HostController.Instance.Update("UseCustomErrorMessages", chkUseCustomErrorMessages.Checked ? "Y" : "N", false);
                    HostController.Instance.Update("EnableRequestFilters", chkEnableRequestFilters.Checked ? "Y" : "N", false);
                    HostController.Instance.Update("ControlPanel", cboControlPanel.SelectedItem.Value, false);
                    HostController.Instance.Update("PerformanceSetting", cboPerformance.SelectedItem.Value, false);
                    Entities.Host.Host.PerformanceSetting = (Globals.PerformanceSettings)Enum.Parse(typeof(Globals.PerformanceSettings), cboPerformance.SelectedItem.Value);
                    HostController.Instance.Update("AuthenticatedCacheability", cboCacheability.SelectedItem.Value, false);
                    HostController.Instance.Update("UnauthenticatedCacheability", cboUnauthCacheability.SelectedItem.Value, false);
                    HostController.Instance.Update("PageStatePersister", cboPageState.SelectedItem.Value); 
                    HostController.Instance.Update("ModuleCaching", cboModuleCacheProvider.SelectedItem.Value, false);
                    if (PageCacheRow.Visible)
                    {
                        HostController.Instance.Update("PageCaching", cboPageCacheProvider.SelectedItem.Value, false);
                    }
                    HostController.Instance.Update("EnableModuleOnLineHelp", chkEnableHelp.Checked ? "Y" : "N", false);
                    HostController.Instance.Update("EnableFileAutoSync", chkAutoSync.Checked ? "Y" : "N", false);
                    HostController.Instance.Update("HelpURL", txtHelpURL.Text, false);
                    HostController.Instance.Update("EnableContentLocalization", chkEnableContentLocalization.Checked ? "Y" : "N", false);
                    HostController.Instance.Update("DebugMode", chkDebugMode.Checked ? "Y" : "N", false);
                    HostController.Instance.Update("ShowCriticalErrors", chkCriticalErrors.Checked ? "Y" : "N", true);
                    HostController.Instance.Update("MessageSchedulerBatchSize", txtBatch.Text, false);
                    HostController.Instance.Update("UpgradeForceSSL", chkUpgradeForceSSL.Checked ? "Y" : "N", false);
                    HostController.Instance.Update("SSLDomain", txtSSLDomain.Text, false);
                    
                    HostController.Instance.Update("EventLogBuffer", chkLogBuffer.Checked ? "Y" : "N", false);
                    HostController.Instance.Update("DefaultPortalSkin", hostSkinCombo.SelectedValue, false);
                    HostController.Instance.Update("DefaultAdminSkin", editSkinCombo.SelectedValue, false);
                    HostController.Instance.Update("DefaultPortalContainer", hostContainerCombo.SelectedValue, false);
                    HostController.Instance.Update("DefaultAdminContainer", editContainerCombo.SelectedValue, false);
                    
					HostController.Instance.Update("EnableMsAjaxCDN", chkMsAjaxCdn.Checked ? "Y" : "N", false);
					HostController.Instance.Update("EnableTelerikCDN", chkTelerikCdn.Checked ? "Y" : "N", false);
                    HostController.Instance.Update("CDNEnabled", chkEnableCDN.Checked ? "Y" : "N", false);
					HostController.Instance.Update("TelerikCDNBasicUrl", txtTelerikBasicUrl.Text, false);
					HostController.Instance.Update("TelerikCDNSecureUrl", txtTelerikSecureUrl.Text, false);
                    var maxUpload = 12;
                    if (int.TryParse(txtMaxUploadSize.Text, out maxUpload))
                    {
                        var maxCurrentRequest = Config.GetMaxUploadSize();
                        var maxUploadByMb = (maxUpload*1024*1024);
                        if (maxCurrentRequest != maxUploadByMb)
                        {
                            Config.SetMaxUploadSize(maxUpload * 1024 * 1024);  
                        }
                    };
					HostController.Instance.Update("AsyncTimeout", txtAsyncTimeout.Text, false);
                    HostController.Instance.Update(ClientResourceSettings.EnableCompositeFilesKey, chkCrmEnableCompositeFiles.Checked.ToString(CultureInfo.InvariantCulture));
                    HostController.Instance.Update(ClientResourceSettings.MinifyCssKey, chkCrmMinifyCss.Checked.ToString(CultureInfo.InvariantCulture));
                    HostController.Instance.Update(ClientResourceSettings.MinifyJsKey, chkCrmMinifyJs.Checked.ToString(CultureInfo.InvariantCulture));

                    HostController.Instance.Update("EnableBannedList", chkBannedList.Checked ? "Y" : "N", false);
                    HostController.Instance.Update("EnableStrengthMeter", chkStrengthMeter.Checked ? "Y" : "N", false);
                    HostController.Instance.Update("EnableIPChecking", chkIPChecking.Checked ? "Y" : "N", false);
                    HostController.Instance.Update("EnablePasswordHistory", chkEnablePasswordHistory.Checked ? "Y" : "N", false);
                    HostController.Instance.Update("MembershipResetLinkValidity", txtResetLinkValidity.Text, false);
                    HostController.Instance.Update("AdminMembershipResetLinkValidity", txtAdminResetLinkValidity.Text, false);
                    HostController.Instance.Update("MembershipNumberPasswords", txtNumberPasswords.Text, false);

                    FriendlyUrlsExtensionControl.SaveAction(-1, -1, -1);
                    UpdateSchedule();
                    UpdateSearchIndexConfiguration();

                    // TODO: Remove after refactor: this code/functionality has been copied to ..\AdvancedSettings\SmtpServerSettings.aspx) 
                    var redirectUrl = Request.RawUrl;
                    if (smtpWarning && redirectUrl.IndexOf("smtpwarning=true", StringComparison.InvariantCultureIgnoreCase) == -1)
                    {
                        redirectUrl = string.Format("{0}{1}smtpwarning=true", redirectUrl, redirectUrl.Contains("?") ? "&" : "?");
                    }
                    Response.Redirect(redirectUrl, true);
                }
                catch (Exception exc)
                {
                    Exceptions.ProcessModuleLoadException(this, exc);
                }
                finally
                {
                    //TODO: this is temporary until the AUM Caching is moved into the core.                    
                    DataCache.ClearCache();
                }
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="allowLeadingWildcardSettingRow">
          <declaration><![CDATA[protected HtmlGenericControl allowLeadingWildcardSettingRow;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="betaRow">
          <declaration><![CDATA[protected HtmlGenericControl betaRow;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="btnCompactSearchIndex">
          <declaration><![CDATA[protected LinkButton btnCompactSearchIndex;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="btnHostSearchReindex">
          <declaration><![CDATA[protected LinkButton btnHostSearchReindex;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="btnSearchGetMoreInfo">
          <declaration><![CDATA[protected LinkButton btnSearchGetMoreInfo;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cbCustomAnalyzer">
          <declaration><![CDATA[protected DnnComboBox cbCustomAnalyzer;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cboCacheability">
          <declaration><![CDATA[protected DnnComboBox cboCacheability;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cboControlPanel">
          <declaration><![CDATA[protected DnnComboBox cboControlPanel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cboModuleCacheProvider">
          <declaration><![CDATA[protected DnnComboBox cboModuleCacheProvider;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cboPageCacheProvider">
          <declaration><![CDATA[protected DnnComboBox cboPageCacheProvider;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cboPageState">
          <declaration><![CDATA[protected RadioButtonList cboPageState;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cboPerformance">
          <declaration><![CDATA[protected DnnComboBox cboPerformance;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cboUnauthCacheability">
          <declaration><![CDATA[protected DnnComboBox cboUnauthCacheability;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cboVersion">
          <declaration><![CDATA[protected DnnComboBox cboVersion;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkAllowLeadingWildcard">
          <declaration><![CDATA[protected CheckBox chkAllowLeadingWildcard;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkAutoSync">
          <declaration><![CDATA[protected CheckBox chkAutoSync;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkBannedList">
          <declaration><![CDATA[protected CheckBox chkBannedList;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkBetaNotice">
          <declaration><![CDATA[protected CheckBox chkBetaNotice;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkCopyright">
          <declaration><![CDATA[protected CheckBox chkCopyright;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkCriticalErrors">
          <declaration><![CDATA[protected CheckBox chkCriticalErrors;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkCrmEnableCompositeFiles">
          <declaration><![CDATA[protected CheckBox chkCrmEnableCompositeFiles;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkCrmMinifyCss">
          <declaration><![CDATA[protected CheckBox chkCrmMinifyCss;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkCrmMinifyJs">
          <declaration><![CDATA[protected CheckBox chkCrmMinifyJs;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkDebugMode">
          <declaration><![CDATA[protected CheckBox chkDebugMode;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkDemoSignup">
          <declaration><![CDATA[protected CheckBox chkDemoSignup;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkEnableCDN">
          <declaration><![CDATA[protected CheckBox chkEnableCDN;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkEnableContentLocalization">
          <declaration><![CDATA[protected CheckBox chkEnableContentLocalization;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkEnableHelp">
          <declaration><![CDATA[protected CheckBox chkEnableHelp;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkEnablePasswordHistory">
          <declaration><![CDATA[protected CheckBox chkEnablePasswordHistory;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkEnableRequestFilters">
          <declaration><![CDATA[protected CheckBox chkEnableRequestFilters;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkIPChecking">
          <declaration><![CDATA[protected CheckBox chkIPChecking;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkLogBuffer">
          <declaration><![CDATA[protected CheckBox chkLogBuffer;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkMsAjaxCdn">
          <declaration><![CDATA[protected CheckBox chkMsAjaxCdn;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkRemember">
          <declaration><![CDATA[protected CheckBox chkRemember;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkSMTPEnableSSL">
          <declaration><![CDATA[protected CheckBox chkSMTPEnableSSL;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkStrengthMeter">
          <declaration><![CDATA[protected CheckBox chkStrengthMeter;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkTelerikCdn">
          <declaration><![CDATA[protected CheckBox chkTelerikCdn;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkUpgrade">
          <declaration><![CDATA[protected CheckBox chkUpgrade;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkUpgradeForceSSL">
          <declaration><![CDATA[protected CheckBox chkUpgradeForceSSL;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkUseCustomErrorMessages">
          <declaration><![CDATA[protected CheckBox chkUseCustomErrorMessages;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkUseCustomModuleCssClass">
          <declaration><![CDATA[protected CheckBox chkUseCustomModuleCssClass;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkUsersOnline">
          <declaration><![CDATA[protected CheckBox chkUsersOnline;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkWebFarm">
          <declaration><![CDATA[protected HtmlInputCheckBox chkWebFarm;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdCache">
          <declaration><![CDATA[protected LinkButton cmdCache;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdEmail">
          <declaration><![CDATA[protected LinkButton cmdEmail;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdRestart">
          <declaration><![CDATA[protected LinkButton cmdRestart;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdUpdate">
          <declaration><![CDATA[protected LinkButton cmdUpdate;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdUpgrade">
          <declaration><![CDATA[protected CommandButton cmdUpgrade;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="CrmVersion">
          <declaration><![CDATA[protected Label CrmVersion;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="currencyCombo">
          <declaration><![CDATA[protected DnnComboBox currencyCombo;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ddlLogs">
          <declaration><![CDATA[protected DnnComboBox ddlLogs;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="DebugEnabledRow">
          <declaration><![CDATA[protected HtmlGenericControl DebugEnabledRow;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="DefaultSearchAuthorBoost">
          <declaration><![CDATA[internal const int DefaultSearchAuthorBoost = 15;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="DefaultSearchContentBoost">
          <declaration><![CDATA[internal const int DefaultSearchContentBoost = 35;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="DefaultSearchDescriptionBoost">
          <declaration><![CDATA[internal const int DefaultSearchDescriptionBoost = 20;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="DefaultSearchTagBoost">
          <declaration><![CDATA[internal const int DefaultSearchTagBoost = 40;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="DefaultSearchTitleBoost">
          <declaration><![CDATA[internal const int DefaultSearchTitleBoost = 50;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="divFiltersDisabled">
          <declaration><![CDATA[protected HtmlGenericControl divFiltersDisabled;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="docTypeCombo">
          <declaration><![CDATA[protected DnnComboBox docTypeCombo;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="editContainerCombo">
          <declaration><![CDATA[protected DnnSkinComboBox editContainerCombo;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="editSkinCombo">
          <declaration><![CDATA[protected DnnSkinComboBox editSkinCombo;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="FileCrawlerSettingsExtensionControl">
          <declaration><![CDATA[protected EditPagePanelExtensionControl FileCrawlerSettingsExtensionControl;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="FriendlyUrlsExtensionControl">
          <declaration><![CDATA[protected EditPagePanelExtensionControl FriendlyUrlsExtensionControl;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="hostContainerCombo">
          <declaration><![CDATA[protected DnnSkinComboBox hostContainerCombo;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="hostPortalsCombo">
          <declaration><![CDATA[protected DnnComboBox hostPortalsCombo;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="hostSkinCombo">
          <declaration><![CDATA[protected DnnSkinComboBox hostSkinCombo;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="hypUpgrade">
          <declaration><![CDATA[protected HyperLink hypUpgrade;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="IncrementCrmVersionButton">
          <declaration><![CDATA[protected LinkButton IncrementCrmVersionButton;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="IPFilters">
          <declaration><![CDATA[protected IPFilters IPFilters;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="IPFiltersRow">
          <declaration><![CDATA[protected HtmlGenericControl IPFiltersRow;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="jQueryUIVersion">
          <declaration><![CDATA[protected Label jQueryUIVersion;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="jQueryVersion">
          <declaration><![CDATA[protected Label jQueryVersion;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Label1">
          <declaration><![CDATA[protected Label Label1;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblAdminResetLinkValidity">
          <declaration><![CDATA[protected Label lblAdminResetLinkValidity;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblAllowLeadingWildcard">
          <declaration><![CDATA[protected LabelControl lblAllowLeadingWildcard;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblApplicationMapPath">
          <declaration><![CDATA[protected Label lblApplicationMapPath;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblApplicationPath">
          <declaration><![CDATA[protected Label lblApplicationPath;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblAutoAccountUnlock">
          <declaration><![CDATA[protected Label lblAutoAccountUnlock;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblDataProvider">
          <declaration><![CDATA[protected Label lblDataProvider;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblDemoPeriod">
          <declaration><![CDATA[protected Label lblDemoPeriod;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblFramework">
          <declaration><![CDATA[protected Label lblFramework;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblGUID">
          <declaration><![CDATA[protected Label lblGUID;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblHostName">
          <declaration><![CDATA[protected Label lblHostName;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblIdentity">
          <declaration><![CDATA[protected Label lblIdentity;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblIPAddress">
          <declaration><![CDATA[protected Label lblIPAddress;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblModuleCacheProvider">
          <declaration><![CDATA[protected LabelControl lblModuleCacheProvider;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblNumberPasswords">
          <declaration><![CDATA[protected Label lblNumberPasswords;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblPageCacheProvider">
          <declaration><![CDATA[protected LabelControl lblPageCacheProvider;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblPermissions">
          <declaration><![CDATA[protected Label lblPermissions;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblProduct">
          <declaration><![CDATA[protected Label lblProduct;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblResetLinkValidity">
          <declaration><![CDATA[protected Label lblResetLinkValidity;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblSearchIndexDbSize">
          <declaration><![CDATA[protected Label lblSearchIndexDbSize;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblSearchIndexLastModifedOn">
          <declaration><![CDATA[protected Label lblSearchIndexLastModifedOn;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblSearchIndexPath">
          <declaration><![CDATA[protected Label lblSearchIndexPath;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblSearchIndexTotalActiveDocuments">
          <declaration><![CDATA[protected Label lblSearchIndexTotalActiveDocuments;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblSearchIndexTotalDeletedDocuments">
          <declaration><![CDATA[protected Label lblSearchIndexTotalDeletedDocuments;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblServerTime">
          <declaration><![CDATA[protected Label lblServerTime;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblUpgrade">
          <declaration><![CDATA[protected Label lblUpgrade;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblUsersOnlineTime">
          <declaration><![CDATA[protected Label lblUsersOnlineTime;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblVersion">
          <declaration><![CDATA[protected Label lblVersion;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="optSMTPAuthentication">
          <declaration><![CDATA[protected RadioButtonList optSMTPAuthentication;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="PageCacheRow">
          <declaration><![CDATA[protected HtmlGenericControl PageCacheRow;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="passwordSettings">
          <declaration><![CDATA[protected PropertyEditorControl passwordSettings;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plAdminContainer">
          <declaration><![CDATA[protected LabelControl plAdminContainer;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plAdminResetLinkValidity">
          <declaration><![CDATA[protected LabelControl plAdminResetLinkValidity;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plAdminSkin">
          <declaration><![CDATA[protected LabelControl plAdminSkin;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plApplicationMapPath">
          <declaration><![CDATA[protected LabelControl plApplicationMapPath;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plApplicationPath">
          <declaration><![CDATA[protected LabelControl plApplicationPath;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plAsyncTimeout">
          <declaration><![CDATA[protected LabelControl plAsyncTimeout;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plAuthorBoost">
          <declaration><![CDATA[protected LabelControl plAuthorBoost;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plAutoAccountUnlock">
          <declaration><![CDATA[protected LabelControl plAutoAccountUnlock;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plAutoSync">
          <declaration><![CDATA[protected LabelControl plAutoSync;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plAvailable">
          <declaration><![CDATA[protected LabelControl plAvailable;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plBatch">
          <declaration><![CDATA[protected LabelControl plBatch;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plBetaNotice">
          <declaration><![CDATA[protected LabelControl plBetaNotice;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plCacheability">
          <declaration><![CDATA[protected LabelControl plCacheability;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plcboUnauthCacheability">
          <declaration><![CDATA[protected LabelControl plcboUnauthCacheability;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plConnectionLimit">
          <declaration><![CDATA[protected LabelControl plConnectionLimit;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plContentBoost">
          <declaration><![CDATA[protected LabelControl plContentBoost;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plControlPanel">
          <declaration><![CDATA[protected LabelControl plControlPanel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plCopyright">
          <declaration><![CDATA[protected LabelControl plCopyright;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plCustomAnalyzer">
          <declaration><![CDATA[protected LabelControl plCustomAnalyzer;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plDataProvider">
          <declaration><![CDATA[protected LabelControl plDataProvider;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plDebugMode">
          <declaration><![CDATA[protected LabelControl plDebugMode;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plDemoPeriod">
          <declaration><![CDATA[protected LabelControl plDemoPeriod;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plDemoSignup">
          <declaration><![CDATA[protected LabelControl plDemoSignup;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plDescriptionBoost">
          <declaration><![CDATA[protected LabelControl plDescriptionBoost;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plEnableBannedList">
          <declaration><![CDATA[protected LabelControl plEnableBannedList;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plEnableCDN">
          <declaration><![CDATA[protected LabelControl plEnableCDN;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plEnableContentLocalization">
          <declaration><![CDATA[protected LabelControl plEnableContentLocalization;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plEnableHelp">
          <declaration><![CDATA[protected LabelControl plEnableHelp;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plEnableIPChecking">
          <declaration><![CDATA[protected LabelControl plEnableIPChecking;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plEnablePasswordHistory">
          <declaration><![CDATA[protected LabelControl plEnablePasswordHistory;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plEnableRequestFilters">
          <declaration><![CDATA[protected LabelControl plEnableRequestFilters;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plEnableStrengthMeter">
          <declaration><![CDATA[protected LabelControl plEnableStrengthMeter;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plFileExtensions">
          <declaration><![CDATA[protected LabelControl plFileExtensions;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plFramework">
          <declaration><![CDATA[protected LabelControl plFramework;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plGUID">
          <declaration><![CDATA[protected LabelControl plGUID;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plHelpUrl">
          <declaration><![CDATA[protected LabelControl plHelpUrl;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plHostContainer">
          <declaration><![CDATA[protected LabelControl plHostContainer;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plHostCurrency">
          <declaration><![CDATA[protected LabelControl plHostCurrency;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plHostDefaultDocType">
          <declaration><![CDATA[protected LabelControl plHostDefaultDocType;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plHostEmail">
          <declaration><![CDATA[protected LabelControl plHostEmail;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plHostFee">
          <declaration><![CDATA[protected LabelControl plHostFee;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plHostName">
          <declaration><![CDATA[protected LabelControl plHostName;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plHostPortal">
          <declaration><![CDATA[protected LabelControl plHostPortal;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plHostSkin">
          <declaration><![CDATA[protected LabelControl plHostSkin;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plHostSpace">
          <declaration><![CDATA[protected LabelControl plHostSpace;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plHostTitle">
          <declaration><![CDATA[protected LabelControl plHostTitle;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plHostURL">
          <declaration><![CDATA[protected LabelControl plHostURL;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plIdentity">
          <declaration><![CDATA[protected LabelControl plIdentity;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plIndexWordMaxLength">
          <declaration><![CDATA[protected LabelControl plIndexWordMaxLength;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plIndexWordMinLength">
          <declaration><![CDATA[protected LabelControl plIndexWordMinLength;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plIPAddress">
          <declaration><![CDATA[protected LabelControl plIPAddress;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plJQueryUIVersion">
          <declaration><![CDATA[protected LabelControl plJQueryUIVersion;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plJQueryVersion">
          <declaration><![CDATA[protected LabelControl plJQueryVersion;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plLog">
          <declaration><![CDATA[protected LabelControl plLog;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plLogBuffer">
          <declaration><![CDATA[protected LabelControl plLogBuffer;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plLogs">
          <declaration><![CDATA[protected LabelControl plLogs;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plMaxIdleTime">
          <declaration><![CDATA[protected LabelControl plMaxIdleTime;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plMaxUploadSize">
          <declaration><![CDATA[protected LabelControl plMaxUploadSize;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plMsAjaxCdn">
          <declaration><![CDATA[protected LabelControl plMsAjaxCdn;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plNumberPasswords">
          <declaration><![CDATA[protected LabelControl plNumberPasswords;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plPageQuota">
          <declaration><![CDATA[protected LabelControl plPageQuota;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plPageState">
          <declaration><![CDATA[protected LabelControl plPageState;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plPassword">
          <declaration><![CDATA[protected LabelControl plPassword;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plPerformance">
          <declaration><![CDATA[protected LabelControl plPerformance;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plPermissions">
          <declaration><![CDATA[protected LabelControl plPermissions;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plProcessor">
          <declaration><![CDATA[protected LabelControl plProcessor;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plProduct">
          <declaration><![CDATA[protected LabelControl plProduct;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plProxyPassword">
          <declaration><![CDATA[protected LabelControl plProxyPassword;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plProxyPort">
          <declaration><![CDATA[protected LabelControl plProxyPort;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plProxyServer">
          <declaration><![CDATA[protected LabelControl plProxyServer;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plProxyUsername">
          <declaration><![CDATA[protected LabelControl plProxyUsername;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plPsWarning">
          <declaration><![CDATA[protected Label plPsWarning;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plRememberMe">
          <declaration><![CDATA[protected LabelControl plRememberMe;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plResetLinkValidity">
          <declaration><![CDATA[protected LabelControl plResetLinkValidity;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plSearchIndexDbSize">
          <declaration><![CDATA[protected LabelControl plSearchIndexDbSize;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plSearchIndexLastModifiedOn">
          <declaration><![CDATA[protected LabelControl plSearchIndexLastModifiedOn;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plSearchIndexPath">
          <declaration><![CDATA[protected LabelControl plSearchIndexPath;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plSearchIndexTotalActiveDocuments">
          <declaration><![CDATA[protected LabelControl plSearchIndexTotalActiveDocuments;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plSearchIndexTotalDeletedDocuments">
          <declaration><![CDATA[protected LabelControl plSearchIndexTotalDeletedDocuments;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plServerTime">
          <declaration><![CDATA[protected LabelControl plServerTime;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plShowCriticalErrors">
          <declaration><![CDATA[protected LabelControl plShowCriticalErrors;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plSMTPAuthentication">
          <declaration><![CDATA[protected LabelControl plSMTPAuthentication;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plSMTPEnableSSL">
          <declaration><![CDATA[protected LabelControl plSMTPEnableSSL;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plSMTPPassword">
          <declaration><![CDATA[protected LabelControl plSMTPPassword;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plSMTPServer">
          <declaration><![CDATA[protected LabelControl plSMTPServer;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plSMTPUsername">
          <declaration><![CDATA[protected LabelControl plSMTPUsername;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plSSLDomain">
          <declaration><![CDATA[protected LabelControl plSSLDomain;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plTagBoost">
          <declaration><![CDATA[protected LabelControl plTagBoost;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plTelerikBasicUrl">
          <declaration><![CDATA[protected LabelControl plTelerikBasicUrl;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plTelerikCdn">
          <declaration><![CDATA[protected LabelControl plTelerikCdn;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plTelerikSecureUrl">
          <declaration><![CDATA[protected LabelControl plTelerikSecureUrl;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plTitleBoost">
          <declaration><![CDATA[protected LabelControl plTitleBoost;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plUpgrade">
          <declaration><![CDATA[protected LabelControl plUpgrade;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plUpgradeForceSSL">
          <declaration><![CDATA[protected LabelControl plUpgradeForceSSL;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plUseCustomErrorMessages">
          <declaration><![CDATA[protected LabelControl plUseCustomErrorMessages;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plUseCustomModuleCssClass">
          <declaration><![CDATA[protected LabelControl plUseCustomModuleCssClass;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plUserId">
          <declaration><![CDATA[protected LabelControl plUserId;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plUserQuota">
          <declaration><![CDATA[protected LabelControl plUserQuota;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plUsersOnline">
          <declaration><![CDATA[protected LabelControl plUsersOnline;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plUsersOnlineTime">
          <declaration><![CDATA[protected LabelControl plUsersOnlineTime;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plVersion">
          <declaration><![CDATA[protected LabelControl plVersion;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plWebFarm">
          <declaration><![CDATA[protected LabelControl plWebFarm;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plWebRequestTimeout">
          <declaration><![CDATA[protected LabelControl plWebRequestTimeout;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="pnlSearchGetMoreButton">
          <declaration><![CDATA[protected HtmlGenericControl pnlSearchGetMoreButton;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="pnlSearchStatistics">
          <declaration><![CDATA[protected HtmlGenericControl pnlSearchStatistics;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="processorCombo">
          <declaration><![CDATA[protected DnnComboBox processorCombo;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="processorLink">
          <declaration><![CDATA[protected HyperLink processorLink;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="rangeUploadSize">
          <declaration><![CDATA[protected RangeValidator rangeUploadSize;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="RegularExpressionValidator2">
          <declaration><![CDATA[protected RegularExpressionValidator RegularExpressionValidator2;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="requestFilters">
          <declaration><![CDATA[protected RequestFilters requestFilters;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="rexNumber1">
          <declaration><![CDATA[protected RangeValidator rexNumber1;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="rexNumber2">
          <declaration><![CDATA[protected RangeValidator rexNumber2;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="SearchAuthorBoostSetting">
          <declaration><![CDATA[internal const string SearchAuthorBoostSetting = "Search_Author_Boost";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="SearchContentBoostSetting">
          <declaration><![CDATA[internal const string SearchContentBoostSetting = "Search_Content_Boost";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="SearchDescriptionBoostSetting">
          <declaration><![CDATA[internal const string SearchDescriptionBoostSetting = "Search_Description_Boost";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="SearchTagBoostSetting">
          <declaration><![CDATA[internal const string SearchTagBoostSetting = "Search_Tag_Boost";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="SearchTitleBoostSetting">
          <declaration><![CDATA[internal const string SearchTitleBoostSetting = "Search_Title_Boost";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtAdminResetLinkValidity">
          <declaration><![CDATA[protected TextBox txtAdminResetLinkValidity;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtAsyncTimeout">
          <declaration><![CDATA[protected TextBox txtAsyncTimeout;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtAuthorBoost">
          <declaration><![CDATA[protected TextBox txtAuthorBoost;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtAutoAccountUnlock">
          <declaration><![CDATA[protected TextBox txtAutoAccountUnlock;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtBatch">
          <declaration><![CDATA[protected TextBox txtBatch;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtConnectionLimit">
          <declaration><![CDATA[protected TextBox txtConnectionLimit;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtContentBoost">
          <declaration><![CDATA[protected TextBox txtContentBoost;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtDemoPeriod">
          <declaration><![CDATA[protected TextBox txtDemoPeriod;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtDescriptionBoost">
          <declaration><![CDATA[protected TextBox txtDescriptionBoost;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtFileExtensions">
          <declaration><![CDATA[protected TextBox txtFileExtensions;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtHelpURL">
          <declaration><![CDATA[protected TextBox txtHelpURL;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtHostEmail">
          <declaration><![CDATA[protected TextBox txtHostEmail;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtHostFee">
          <declaration><![CDATA[protected TextBox txtHostFee;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtHostSpace">
          <declaration><![CDATA[protected TextBox txtHostSpace;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtHostTitle">
          <declaration><![CDATA[protected TextBox txtHostTitle;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtHostURL">
          <declaration><![CDATA[protected TextBox txtHostURL;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtIndexWordMaxLength">
          <declaration><![CDATA[protected TextBox txtIndexWordMaxLength;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtIndexWordMinLength">
          <declaration><![CDATA[protected TextBox txtIndexWordMinLength;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtLogContents">
          <declaration><![CDATA[protected TextBox txtLogContents;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtMaxIdleTime">
          <declaration><![CDATA[protected TextBox txtMaxIdleTime;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtMaxUploadSize">
          <declaration><![CDATA[protected TextBox txtMaxUploadSize;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtNumberPasswords">
          <declaration><![CDATA[protected TextBox txtNumberPasswords;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtPageQuota">
          <declaration><![CDATA[protected TextBox txtPageQuota;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtPassword">
          <declaration><![CDATA[protected TextBox txtPassword;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtProxyPassword">
          <declaration><![CDATA[protected TextBox txtProxyPassword;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtProxyPort">
          <declaration><![CDATA[protected TextBox txtProxyPort;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtProxyServer">
          <declaration><![CDATA[protected TextBox txtProxyServer;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtProxyUsername">
          <declaration><![CDATA[protected TextBox txtProxyUsername;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtResetLinkValidity">
          <declaration><![CDATA[protected TextBox txtResetLinkValidity;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtSMTPPassword">
          <declaration><![CDATA[protected TextBox txtSMTPPassword;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtSMTPServer">
          <declaration><![CDATA[protected TextBox txtSMTPServer;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtSMTPUsername">
          <declaration><![CDATA[protected TextBox txtSMTPUsername;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtSSLDomain">
          <declaration><![CDATA[protected TextBox txtSSLDomain;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtTagBoost">
          <declaration><![CDATA[protected TextBox txtTagBoost;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtTelerikBasicUrl">
          <declaration><![CDATA[protected TextBox txtTelerikBasicUrl;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtTelerikSecureUrl">
          <declaration><![CDATA[protected TextBox txtTelerikSecureUrl;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtTitleBoost">
          <declaration><![CDATA[protected TextBox txtTitleBoost;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtUserId">
          <declaration><![CDATA[protected TextBox txtUserId;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtUserQuota">
          <declaration><![CDATA[protected TextBox txtUserQuota;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtUsersOnlineTime">
          <declaration><![CDATA[protected TextBox txtUsersOnlineTime;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtWebRequestTimeout">
          <declaration><![CDATA[protected TextBox txtWebRequestTimeout;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="uploadSkinLink">
          <declaration><![CDATA[protected HyperLink uploadSkinLink;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="valAdminResetLink">
          <declaration><![CDATA[protected CompareValidator valAdminResetLink;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="valFileExtensions">
          <declaration><![CDATA[protected RegularExpressionValidator valFileExtensions;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="valHostEmail">
          <declaration><![CDATA[protected RegularExpressionValidator valHostEmail;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="valHostFee">
          <declaration><![CDATA[protected CompareValidator valHostFee;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="validatorIndexWordMaxLengthCompared">
          <declaration><![CDATA[protected CompareValidator validatorIndexWordMaxLengthCompared;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="validatorIndexWordMaxLengthRequired">
          <declaration><![CDATA[protected RequiredFieldValidator validatorIndexWordMaxLengthRequired;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="validatorIndexWordMinLengthCompared">
          <declaration><![CDATA[protected CompareValidator validatorIndexWordMinLengthCompared;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="validatorIndexWordMinLengthRequired">
          <declaration><![CDATA[protected RequiredFieldValidator validatorIndexWordMinLengthRequired;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="valResetLink">
          <declaration><![CDATA[protected CompareValidator valResetLink;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="valSummary">
          <declaration><![CDATA[protected ValidationSummary valSummary;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="IPFilters">
      <declaration><![CDATA[public class IPFilters : PortalModuleBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public IPFilters()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="BindFilters">
          <declaration><![CDATA[private void BindFilters()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="98" sc="9" el="101" ec="10">DesktopModules\Admin\HostSettings\IPFilters.ascx.cs</location>
            <body hash="5198b70961b07ea00d13bc91a1416b96"><![CDATA[{
            grdFilters.DataSource = IPFilterController.Instance.GetIPFilters();
            grdFilters.DataBind();
        }]]></body>
          </codeblock>
        </method>
        <method name="CheckSecurity">
          <declaration><![CDATA[private void CheckSecurity()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="127" sc="9" el="136" ec="10">DesktopModules\Admin\HostSettings\IPFilters.ascx.cs</location>
            <body hash="b9eb6fd877170df13740f8803aa0e59d"><![CDATA[{

            if (!UserInfo.IsSuperUser)
            {

                Response.Redirect(Globals.NavigateURL("Access Denied"), true);

            }

        }]]></body>
          </codeblock>
        </method>
        <method name="ConvertCIDR">
          <declaration><![CDATA[protected string ConvertCIDR(object ip, object subnet)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="67" sc="9" el="69" ec="10">DesktopModules\Admin\HostSettings\IPFilters.ascx.cs</location>
            <body hash="e5bed5d84ae87f4e5da42bede2d6e332"><![CDATA[{
            return NetworkUtils.FormatAsCidr(ip.ToString(), subnet.ToString());
        }]]></body>
          </codeblock>
        </method>
        <method name="ConvertType">
          <declaration><![CDATA[protected string ConvertType(object ipFilterType)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="72" sc="9" el="82" ec="10">DesktopModules\Admin\HostSettings\IPFilters.ascx.cs</location>
            <body hash="4e3f94f758dba2b20918e3b51ded7e83"><![CDATA[{
            int filterType = Convert.ToInt32(ipFilterType);
            switch (filterType)
            {
                case 1:
                    return ResolveUrl("images/checkmark.png");
                case 2:
                    return ResolveUrl("images/block.png");
            }
            return String.Empty;
        }]]></body>
          </codeblock>
        </method>
        <method name="ConvertTypeAlt">
          <declaration><![CDATA[protected string ConvertTypeAlt(object ipFilterType)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="85" sc="9" el="95" ec="10">DesktopModules\Admin\HostSettings\IPFilters.ascx.cs</location>
            <body hash="e263a2d73aeb2d445b4f9fe0fc08f2be"><![CDATA[{
            int filterType = Convert.ToInt32(ipFilterType);
            switch (filterType)
            {
                case 1:
                    return Localization.GetString("AllowIP.Text", LocalResourceFile);
                case 2:
                    return Localization.GetString("DenyIP.Text", LocalResourceFile);
            }
            return String.Empty;
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteFilter">
          <declaration><![CDATA[protected void DeleteFilter(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="104" sc="9" el="124" ec="10">DesktopModules\Admin\HostSettings\IPFilters.ascx.cs</location>
            <body hash="a3b6b8ca3e73005baf61106eed324896"><![CDATA[{
            //Get the index of the row to delete
            var btnDel = ((LinkButton) (sender));
            int removedIpf = Convert.ToInt32(btnDel.CommandArgument);

            IList<IPFilterInfo> currentRules = IPFilterController.Instance.GetIPFilters();

            List<IPFilterInfo> currentWithDeleteRemoved = (from p in currentRules where p.IPFilterID != removedIpf select p).ToList();

            if (IPFilterController.Instance.CanIPStillAccess(Request.UserHostAddress, currentWithDeleteRemoved) == false)
            {
                Skin.AddModuleMessage(this, Localization.GetString("CannotDelete.Text", LocalResourceFile), ModuleMessage.ModuleMessageType.RedError);
            }
            else
            {
                var ipf = new IPFilterInfo();
                ipf.IPFilterID = removedIpf;
                IPFilterController.Instance.DeleteIPFilter(ipf);
                BindFilters();
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetEditUrl">
          <declaration><![CDATA[protected string GetEditUrl(string ipfilterId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="57" sc="9" el="64" ec="10">DesktopModules\Admin\HostSettings\IPFilters.ascx.cs</location>
            <body hash="e3d3b764e444d7d4852e4c3884f0c0b3"><![CDATA[{
            string editUrl = ModuleContext.EditUrl("IPFilterID", ipfilterId, "EditIPFilters");
            if (ModuleContext.PortalSettings.EnablePopUps)
            {
                editUrl = UrlUtils.PopUpUrl(editUrl, this, ModuleContext.PortalSettings, false, false);
            }
            return editUrl;
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="149" sc="9" el="155" ec="10">DesktopModules\Admin\HostSettings\IPFilters.ascx.cs</location>
            <body hash="111a0dd7af0dca2eba6d8c246079a45f"><![CDATA[{
            base.OnInit(e);

            CheckSecurity();

            cmdAddFilter.NavigateUrl = EditUrl("EditIPFilters");
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="158" sc="9" el="166" ec="10">DesktopModules\Admin\HostSettings\IPFilters.ascx.cs</location>
            <body hash="d30c5daee85ab51c56b7a203378d152d"><![CDATA[{
            base.OnLoad(e);

            if (!IsPostBack)
            {
                Localization.LocalizeDataGrid(ref grdFilters, LocalResourceFile);
                BindFilters();
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="cmdAddFilter">
          <declaration><![CDATA[protected HyperLink cmdAddFilter;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="dvRedirectionsGrid">
          <declaration><![CDATA[protected HtmlGenericControl dvRedirectionsGrid;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="grdFilters">
          <declaration><![CDATA[protected DataGrid grdFilters;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="RequestFilters">
      <declaration><![CDATA[public class RequestFilters : PortalModuleBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public RequestFilters()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
        <constructor name=".cctor">
          <declaration><![CDATA[static RequestFilters()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="48" sc="6" el="48" ec="101">DesktopModules\Admin\HostSettings\RequestFilters.ascx.cs</location>
            <body hash="8ccc575cbedbbfb78ad02bfa2079beb2"><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof (RequestFilters))]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="AddConfirmActiontoDeleteButton">
          <declaration><![CDATA[private static void AddConfirmActiontoDeleteButton(DataListItemEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="120" sc="9" el="123" ec="10">DesktopModules\Admin\HostSettings\RequestFilters.ascx.cs</location>
            <body hash="a43885d3c2375dddbfc656c58dc5af03"><![CDATA[{
            var cmdDelete = (ImageButton) e.Item.FindControl("cmdDelete");
            ClientAPI.AddButtonConfirm(cmdDelete, Localization.GetString("DeleteItem"));
        }]]></body>
          </codeblock>
        </method>
        <method name="AddRule">
          <declaration><![CDATA[protected void AddRule(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="248" sc="9" el="258" ec="10">DesktopModules\Admin\HostSettings\RequestFilters.ascx.cs</location>
            <body hash="7c923f667ca993cf3ff55098e65ba263"><![CDATA[{
            //Add a new empty rule and set the editrow to the new row
            Rules.Add(new RequestFilterRule());
            rptRules.EditItemIndex = Rules.Count - 1;

            //Set the AddMode to true
            AddMode = true;

            //Rebind the collection
            BindRules();
        }]]></body>
          </codeblock>
        </method>
        <method name="BindDropDownValues">
          <declaration><![CDATA[private void BindDropDownValues(DataListItemEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="131" sc="9" el="144" ec="10">DesktopModules\Admin\HostSettings\RequestFilters.ascx.cs</location>
            <body hash="ad55c4429b5cd877aa385abbc45245ef"><![CDATA[{
            var rule = (RequestFilterRule) e.Item.DataItem;

            var ddlOperator = (DnnComboBox) e.Item.FindControl("ddlOperator");
            if (ddlOperator != null && rule != null)
            {
                ddlOperator.SelectedValue = rule.Operator.ToString();
            }
			var ddlAction = (DnnComboBox)e.Item.FindControl("ddlAction");
            if (ddlAction != null && rule != null)
            {
                ddlAction.SelectedValue = rule.Action.ToString();
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="BindRules">
          <declaration><![CDATA[private void BindRules()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="151" sc="9" el="154" ec="10">DesktopModules\Admin\HostSettings\RequestFilters.ascx.cs</location>
            <body hash="69d305ce19ca7e249bc1164327286d46"><![CDATA[{
            rptRules.DataSource = Rules;
            rptRules.DataBind();
        }]]></body>
          </codeblock>
        </method>
        <method name="CancelEdit">
          <declaration><![CDATA[protected void CancelEdit(object source, DataListCommandEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="375" sc="9" el="387" ec="10">DesktopModules\Admin\HostSettings\RequestFilters.ascx.cs</location>
            <body hash="ca95cd881b55bd3e114c19f61bd2e30e"><![CDATA[{
            if (AddMode)
            {
				//Remove the temporary added row
                Rules.RemoveAt(Rules.Count - 1);
                AddMode = false;
            }
            //Clear editrow
            rptRules.EditItemIndex = -1;

            //Rebind the collection
            BindRules();
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteRule">
          <declaration><![CDATA[protected void DeleteRule(object source, DataListCommandEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="268" sc="9" el="292" ec="10">DesktopModules\Admin\HostSettings\RequestFilters.ascx.cs</location>
            <body hash="45801e85be45a93f659f9018b508458f"><![CDATA[{
            //Get the index of the row to delete
            int index = e.Item.ItemIndex;

            //Remove the rule from the rules collection
            Rules.RemoveAt(index);
            try
            {
                //Save the new collection
                RequestFilterSettings.Save(Rules);
            }
            catch (UnauthorizedAccessException exc)
            {
                Logger.Debug(exc);

                lblErr.InnerText = Localization.GetString("unauthorized", LocalResourceFile);
                lblErr.Visible = true;
                //This forces the system to reload the settings from DotNetNuke.Config
                //since we have already deleted the entry from the Rules list.
                Rules = null;
            }
			
            //Rebind the collection
            BindRules();
        }]]></body>
          </codeblock>
        </method>
        <method name="EditRule">
          <declaration><![CDATA[protected void EditRule(object source, DataListCommandEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="301" sc="9" el="312" ec="10">DesktopModules\Admin\HostSettings\RequestFilters.ascx.cs</location>
            <body hash="535a2a1cf40369b96492a1a83a2c1aee"><![CDATA[{
            lblErr.Visible = true;

            //Set the AddMode to false
            AddMode = false;

            //Set the editrow
            rptRules.EditItemIndex = e.Item.ItemIndex;

            //Rebind the collection
            BindRules();
        }]]></body>
          </codeblock>
        </method>
        <method name="LoadViewState">
          <declaration><![CDATA[protected override void LoadViewState(object savedState)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="167" sc="9" el="192" ec="10">DesktopModules\Admin\HostSettings\RequestFilters.ascx.cs</location>
            <body hash="80bf8756d8f2bc5312fc95ca9a26c1d2"><![CDATA[{
            var myState = (object[]) savedState;
            if ((myState[0] != null))
            {
                base.LoadViewState(myState[0]);
            }
            if ((myState[1] != null))
            {
                var configRules = new List<RequestFilterRule>();

                //Deserialize into RewriterConfiguration
				var xmlDocument = new XmlDocument();
				xmlDocument.LoadXml(Convert.ToString(myState[1]));
	            var nodesList = xmlDocument.SelectNodes("/ArrayOfRequestFilterRule/RequestFilterRule");
	            if (nodesList != null)
	            {
		            foreach (XmlNode node in nodesList)
		            {
			            var rule = CBO.DeserializeObject<RequestFilterRule>(XmlReader.Create(new StringReader(node.OuterXml)));
			            configRules.Add(rule);
		            }
	            }

	            Rules = configRules;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="223" sc="9" el="238" ec="10">DesktopModules\Admin\HostSettings\RequestFilters.ascx.cs</location>
            <body hash="8114393155f1ec2300e03785521768fc"><![CDATA[{
            base.OnLoad(e);

            cmdAddRule.Click += AddRule;
            rptRules.ItemDataBound += rptRules_ItemDataBound;
            rptRules.EditCommand += EditRule;
            rptRules.DeleteCommand += DeleteRule;
            rptRules.UpdateCommand += SaveRule;
            rptRules.CancelCommand += CancelEdit;

            //Bind the rules (as long as not postback)
            if (!Page.IsPostBack)
            {
                BindRules();
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnPreRender">
          <declaration><![CDATA[protected override void OnPreRender(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="419" sc="9" el="424" ec="10">DesktopModules\Admin\HostSettings\RequestFilters.ascx.cs</location>
            <body hash="06b4e58506bcf86b4c88d16ca0a54311"><![CDATA[{
            base.OnPreRender(e);

            //If the user is editing a rule, then disable the "Add Rule" button
            cmdAddRule.Visible = rptRules.EditItemIndex == -1 || !AddMode;
        }]]></body>
          </codeblock>
        </method>
        <method name="rptRules_ItemDataBound">
          <declaration><![CDATA[protected void rptRules_ItemDataBound(object sender, DataListItemEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="397" sc="9" el="410" ec="10">DesktopModules\Admin\HostSettings\RequestFilters.ascx.cs</location>
            <body hash="4129b0d87b64e2986027bb804f03729d"><![CDATA[{
            switch (e.Item.ItemType)
            {
                case ListItemType.AlternatingItem:
                    AddConfirmActiontoDeleteButton(e);
                    break;
                case ListItemType.Item:
                    AddConfirmActiontoDeleteButton(e);
                    break;
                case ListItemType.EditItem:
                    BindDropDownValues(e);
                    break;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="SaveRule">
          <declaration><![CDATA[protected void SaveRule(object source, DataListCommandEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="324" sc="9" el="361" ec="10">DesktopModules\Admin\HostSettings\RequestFilters.ascx.cs</location>
            <body hash="ec85e8f581d3c95e6ef8856976573da5"><![CDATA[{
            //Get the index of the row to save
            int index = rptRules.EditItemIndex;

            RequestFilterRule rule = Rules[index];
            var txtServerVar = (TextBox) e.Item.FindControl("txtServerVar");
            var txtValue = (TextBox) e.Item.FindControl("txtValue");
            var txtLocation = (TextBox) e.Item.FindControl("txtLocation");
			var ddlOperator = (DnnComboBox)e.Item.FindControl("ddlOperator");
			var ddlAction = (DnnComboBox)e.Item.FindControl("ddlAction");
            if (!String.IsNullOrEmpty(txtServerVar.Text) && !String.IsNullOrEmpty(txtValue.Text))
            {
                rule.ServerVariable = txtServerVar.Text;
                rule.Location = txtLocation.Text;
                rule.Operator = (RequestFilterOperatorType) Enum.Parse(typeof (RequestFilterOperatorType), ddlOperator.SelectedValue);
                rule.Action = (RequestFilterRuleType) Enum.Parse(typeof (RequestFilterRuleType), ddlAction.SelectedValue);

                //A rule value may be a semicolon delimited list of values.  So we need to use a helper function to 
                //parse the list.  If this is a regex, then only one value is supported.
                rule.SetValues(txtValue.Text, rule.Operator);

                //Save the modified collection
                RequestFilterSettings.Save(Rules);
            }
            else
            {
                if (AddMode)
                {
					//Remove the temporary added row
                    Rules.RemoveAt(Rules.Count - 1);
                }
            }
            AddMode = false;

            //Reset Edit Index
            rptRules.EditItemIndex = -1;
            BindRules();
        }]]></body>
          </codeblock>
        </method>
        <method name="SaveViewState">
          <declaration><![CDATA[protected override object SaveViewState()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="201" sc="9" el="211" ec="10">DesktopModules\Admin\HostSettings\RequestFilters.ascx.cs</location>
            <body hash="3c76d905a326ea8eae274f332116a1c2"><![CDATA[{
            var configRules = new List<RequestFilterRule>();
            configRules = Rules;

            object baseState = base.SaveViewState();
            var allStates = new object[2];
            allStates[0] = baseState;
            allStates[1] = XmlUtils.Serialize(configRules);

            return allStates;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_Rules">
          <declaration><![CDATA[private List<RequestFilterRule> _Rules;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdAddRule">
          <declaration><![CDATA[protected LinkButton cmdAddRule;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblErr">
          <declaration><![CDATA[protected HtmlGenericControl lblErr;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Logger">
          <declaration><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof(RequestFilters));]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="rptRules">
          <declaration><![CDATA[protected DataList rptRules;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="AddMode">
          <declaration><![CDATA[private bool AddMode]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="70" sc="13" el="77" ec="14">DesktopModules\Admin\HostSettings\RequestFilters.ascx.cs</location>
            <body hash="30ff27eb6e5af91c3ff37fd2e344938f"><![CDATA[{
                bool _Mode = Null.NullBoolean;
                if (ViewState["Mode"] != null)
                {
                    _Mode = Convert.ToBoolean(ViewState["Mode"]);
                }
                return _Mode;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="79" sc="13" el="81" ec="14">DesktopModules\Admin\HostSettings\RequestFilters.ascx.cs</location>
            <body hash="177a71d978b3132501675561f96e7121"><![CDATA[{
                ViewState["Mode"] = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="Rules">
          <declaration><![CDATA[private List<RequestFilterRule> Rules]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="97" sc="13" el="103" ec="14">DesktopModules\Admin\HostSettings\RequestFilters.ascx.cs</location>
            <body hash="022601351b7472edcc5c281da2d23cf9"><![CDATA[{
                if (_Rules == null)
                {
                    _Rules = RequestFilterSettings.GetSettings().Rules;
                }
                return _Rules;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="105" sc="13" el="107" ec="14">DesktopModules\Admin\HostSettings\RequestFilters.ascx.cs</location>
            <body hash="c43c1ba939e20394a1893808e77bdaef"><![CDATA[{
                _Rules = value;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="DotNetNuke.Modules.Admin.MobilePreview">
    <class name="Preview">
      <declaration><![CDATA[public class Preview : PortalModuleBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public Preview()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
        <constructor name=".cctor">
          <declaration><![CDATA[static Preview()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="51" sc="9" el="51" ec="124">DesktopModules\Admin\MobilePreview\Preview.ascx.cs</location>
            <body hash="8fab7920234fea1d4b8bd452cadb069d"><![CDATA[private static readonly Regex PathRegex = new Regex("(src|href)=['\"]?([^>'\"\\s]+)['\"]?", RegexOptions.Compiled)]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="BindProfiles">
          <declaration><![CDATA[private void BindProfiles()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="104" sc="3" el="126" ec="4">DesktopModules\Admin\MobilePreview\Preview.ascx.cs</location>
            <body hash="3dd4d4ba29a1b2a6a71358593fd08a19"><![CDATA[{
			var profiles = new PreviewProfileController().GetProfilesByPortal(ModuleContext.PortalId);
			ddlProfileList.Items.Clear();

			var selectedProfile = -1;
			if (Request.QueryString["profile"] != null)
			{
				selectedProfile = Convert.ToInt32(Request.QueryString["profile"]);
			}

			foreach (var previewProfile in profiles)
			{
				var value = string.Format("width : \"{0}\", height : \"{1}\", userAgent: \"{2}\"", previewProfile.Width, previewProfile.Height, UrlUtils.EncryptParameter(previewProfile.UserAgent));

				var listItem = new ListItem(previewProfile.Name, value);
				if (selectedProfile == previewProfile.Id)
				{
					listItem.Selected = true;
				}

				ddlProfileList.AddItem(listItem.Text, listItem.Value);
			}
		}]]></body>
          </codeblock>
        </method>
        <method name="CreateViewProxy">
          <declaration><![CDATA[private void CreateViewProxy(string userAgent)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="129" sc="3" el="136" ec="4">DesktopModules\Admin\MobilePreview\Preview.ascx.cs</location>
            <body hash="6db198fdd69974f5670f204c4d7850d9"><![CDATA[{
			Response.Clear();

            //Depending on number of redirects, GetHttpContent can be a self-recursive call.
			Response.Write(GetHttpContent(PreviewUrl, userAgent));

			Response.End();
		}]]></body>
          </codeblock>
        </method>
        <method name="GetHttpContent">
          <declaration><![CDATA[private string GetHttpContent(string url, string userAgent)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="139" sc="3" el="198" ec="4">DesktopModules\Admin\MobilePreview\Preview.ascx.cs</location>
            <body hash="a0c0fb0e124012ef13a133276890321d"><![CDATA[{
			try
			{
				//add dnnprintmode in url so that all DNN page will display in normal.
				var requestUrl = url;
				if (requestUrl.IndexOf("dnnprintmode") == -1)
				{
					requestUrl = string.Format("{0}{1}dnnprintmode=true", url, url.IndexOf("?") == -1 ? "?" : "&");
				}

				var wreq = Globals.GetExternalRequest(requestUrl);
				wreq.UserAgent = userAgent;
				wreq.Referer = Request.Url.ToString();
				wreq.Method = "GET";
				wreq.Timeout = Host.WebRequestTimeout;
				wreq.AllowAutoRedirect = false;
				wreq.ContentType = "application/x-www-form-urlencoded";
				SetCookies(wreq);

				if (requestUrl.StartsWith("https://"))
				{
					ServicePointManager.ServerCertificateValidationCallback = delegate { return true; };
				}

				var httpResponse = wreq.GetResponse() as HttpWebResponse;

				//if the request has been redirect, add PrintMode in url and re-request
				if (httpResponse.StatusCode == HttpStatusCode.Found || httpResponse.StatusCode == HttpStatusCode.MovedPermanently)
				{
					var redirectUrl = httpResponse.Headers["Location"];

                    //calling same method recursive.
					return GetHttpContent(redirectUrl, userAgent);
				}

				//get content from http response
				var responseStream = httpResponse.GetResponseStream();

				using (var reader = new StreamReader(responseStream, true))
				{
					var content = reader.ReadToEnd();

					var requestUri = wreq.Address;

					content = MakeAbsoluteUrl(content, requestUri);

					//append current url to a js variable, so that can be used in client side.
					content += string.Format("<script type=\"text/javascript\">window.dnnPreviewUrl = '{0}';</script>", url);
					return content;
				}
			}
			catch (SecurityException)
			{
				return string.Format("<span style=\"color: red;\">{0}</span>", "You must change your website's trust level to full trust if you want to preview an SSL path.");
			}
			catch (Exception ex)
			{
				return string.Format("<span style=\"color: red;\">{0}</span>", "ERROR:" + ex.Message);
			}
		}]]></body>
          </codeblock>
        </method>
        <method name="GetSessionCookieName">
          <declaration><![CDATA[private string GetSessionCookieName()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="243" sc="9" el="245" ec="10">DesktopModules\Admin\MobilePreview\Preview.ascx.cs</location>
            <body hash="0ad5df5655a2d128da5f32bd634410ba"><![CDATA[{
            return "ASP.NET_SessionId";
        }]]></body>
          </codeblock>
        </method>
        <method name="MakeAbsoluteUrl">
          <declaration><![CDATA[private string MakeAbsoluteUrl(string content, Uri requestUri)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="219" sc="3" el="240" ec="4">DesktopModules\Admin\MobilePreview\Preview.ascx.cs</location>
            <body hash="949edc21aaf3667395927dae5e8fb558"><![CDATA[{
			var domain = requestUri.AbsoluteUri.Replace(requestUri.PathAndQuery, string.Empty);
			var currDirectory = domain;
			for (var i = 0; i < requestUri.Segments.Length - 1; i++)
			{
				currDirectory += requestUri.Segments[i];

			}

			MatchCollection matches = PathRegex.Matches(content);
			foreach (Match match in matches)
			{
                var path = match.Groups[2].Value;
                if (!string.IsNullOrEmpty(path) && path.IndexOf(":") == -1 && !path.StartsWith("#"))
                {
					var prefix = path.StartsWith("/") ? domain : currDirectory;
					content = content.Replace(match.Value, string.Format("{0}=\"{1}{2}\"", match.Groups[1].Value, prefix, path));
				}
			}

			return content;
		}]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="75" sc="3" el="97" ec="4">DesktopModules\Admin\MobilePreview\Preview.ascx.cs</location>
            <body hash="f23156f76bcf9ff8127c8bb76af5c32a"><![CDATA[{
			base.OnLoad(e);

			if (!string.IsNullOrEmpty(Request.QueryString["UserAgent"]))
			{
				var userAgent = UrlUtils.DecryptParameter(Request.QueryString["UserAgent"]);
				if (Request.QueryString["SendAgent"] != "true")
				{
					userAgent = Request.UserAgent;
				}

				CreateViewProxy(userAgent);
			}

			this.Page.Title = LocalizeString("PageTitle");

			ClientResourceManager.RegisterScript(this.Page, string.Format("{0}Scripts/PreviewEmulator.js", this.ControlPath));

			if (!IsPostBack)
			{
				BindProfiles();
			}
		}]]></body>
          </codeblock>
        </method>
        <method name="SetCookies">
          <declaration><![CDATA[private void SetCookies(HttpWebRequest proxyRequest)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="202" sc="9" el="216" ec="10">DesktopModules\Admin\MobilePreview\Preview.ascx.cs</location>
            <body hash="898a0025f37ef400ef5f1ea5e9a9d286"><![CDATA[{
            proxyRequest.CookieContainer = new CookieContainer();
            var sessionCookie = GetSessionCookieName();
            foreach (var key in Request.Cookies.AllKeys)
            {
                if (key == sessionCookie)
                {
                    continue;
                }

                var value = Request.Cookies[key] == null ? string.Empty : Request.Cookies[key].Value;
                var cookie = new Cookie(key, value, Globals.ApplicationPath, proxyRequest.RequestUri.Host);
                proxyRequest.CookieContainer.Add(cookie);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="cbSendAgent">
          <declaration><![CDATA[protected CheckBox cbSendAgent;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cbShowDimensions">
          <declaration><![CDATA[protected CheckBox cbShowDimensions;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ddlProfileList">
          <declaration><![CDATA[protected DnnComboBox ddlProfileList;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblDimensions">
          <declaration><![CDATA[protected LabelControl lblDimensions;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblOrientation">
          <declaration><![CDATA[protected LabelControl lblOrientation;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblPreviewInfo">
          <declaration><![CDATA[protected LabelControl lblPreviewInfo;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblProfile">
          <declaration><![CDATA[protected LabelControl lblProfile;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblSendAgent">
          <declaration><![CDATA[protected LabelControl lblSendAgent;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="PathRegex">
          <declaration><![CDATA[private static readonly Regex PathRegex = new Regex("(src|href)=['\"]?([^>'\"\\s]+)['\"]?", RegexOptions.Compiled);]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="rblOrientation">
          <declaration><![CDATA[protected RadioButtonList rblOrientation;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="PreviewUrl">
          <declaration><![CDATA[protected string PreviewUrl]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="58" sc="4" el="67" ec="5">DesktopModules\Admin\MobilePreview\Preview.ascx.cs</location>
            <body hash="f09f1900dcf5a2e9d82049073d43f94c"><![CDATA[{
				var tabId = PortalSettings.HomeTabId;

				if (Request.QueryString["previewTab"] != null)
				{
					int.TryParse(Request.QueryString["previewTab"], out tabId);
				}

				return Globals.NavigateURL(tabId, string.Empty, string.Empty);
			}]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="DotNetNuke.Modules.Admin.ModuleDefinitions">
    <class name="CreateModuleDefinition">
      <declaration><![CDATA[public class CreateModuleDefinition : ModuleUserControlBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public CreateModuleDefinition()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
        <constructor name=".cctor">
          <declaration><![CDATA[static CreateModuleDefinition()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="65" sc="9" el="65" ec="79">DesktopModules\Admin\Extensions\Editors\EditModuleDefinition.ascx.cs</location>
            <body hash="85ac1bea974d244de3e7f76dda427507"><![CDATA[private static readonly string[] SpecialModuleFolders = new[] {"mvc"}]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="AddFolder">
          <declaration><![CDATA[private static void AddFolder(string parentFolder, string newFolder)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="106" sc="3" el="118" ec="4">DesktopModules\Admin\Extensions\Editors\EditModuleDefinition.ascx.cs</location>
            <body hash="f4e01893e48b17675d1c8c889e4112d4"><![CDATA[{
			var parentFolderPath = Globals.ApplicationMapPath + "\\DesktopModules";
			if (!string.IsNullOrEmpty(parentFolder))
			{
				parentFolderPath += "\\" + parentFolder;
			}
			var dinfo = new DirectoryInfo(parentFolderPath);
			var dinfoNew = new DirectoryInfo(parentFolderPath + "\\" + newFolder);
			if (!dinfoNew.Exists)
			{
				dinfo.CreateSubdirectory(newFolder);
			}
		}]]></body>
          </codeblock>
        </method>
        <method name="cboCreate_SelectedIndexChanged">
          <declaration><![CDATA[protected void cboCreate_SelectedIndexChanged(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="527" sc="3" el="607" ec="4">DesktopModules\Admin\Extensions\Editors\EditModuleDefinition.ascx.cs</location>
            <body hash="4110eacd2160d75a62a3bbe41f2b3d86"><![CDATA[{
			LoadOwnerFolders(Null.NullString);
			LoadModuleFolders(Null.NullString);
			cboFile.Items.Clear();
			txtModule.Text = "";
			txtDescription.Text = "";

			switch (cboCreate.SelectedValue)
			{
				case "":
					rowOwner1.Visible = false;
					cmdAddOwner.Visible = false;
					rowModule1.Visible = false;
					cmdAddModule.Visible = false;
					rowFile1.Visible = false;
					rowFile2.Visible = false;
					rowLang.Visible = false;
					rowName.Visible = false;
					rowDescription.Visible = false;
					rowSource.Visible = false;
					rowAddPage.Visible = false;
					cmdCreate.Visible = false;
					break;
				case "New":
					rowOwner1.Visible = true;
					cmdAddOwner.Visible = true;
					rowModule1.Visible = true;
					cmdAddModule.Visible = true;
					rowFile1.Visible = false;
					rowFile2.Visible = true;
					rowLang.Visible = true;
					rowName.Visible = true;
					rowDescription.Visible = true;
					rowSource.Visible = false;
					rowAddPage.Visible = true;
					cmdCreate.Visible = true;
					break;
				case "Control":
					rowOwner1.Visible = true;
					cmdAddOwner.Visible = false;
					rowModule1.Visible = true;
					cmdAddModule.Visible = false;
					rowFile1.Visible = true;
					rowFile2.Visible = false;
					rowLang.Visible = false;
					rowName.Visible = true;
					rowDescription.Visible = true;
					rowSource.Visible = false;
					rowAddPage.Visible = true;
					cmdCreate.Visible = true;
					break;
				case "Template":
					rowOwner1.Visible = true;
					cmdAddOwner.Visible = true;
					rowModule1.Visible = true;
					cmdAddModule.Visible = true;
					rowFile1.Visible = true;
					rowFile2.Visible = false;
					rowLang.Visible = false;
					rowName.Visible = true;
					rowDescription.Visible = true;
					rowSource.Visible = false;
					rowAddPage.Visible = false;
					cmdCreate.Visible = true;
					break;
				case "Manifest":
					rowOwner1.Visible = true;
					cmdAddOwner.Visible = false;
					rowModule1.Visible = true;
					cmdAddModule.Visible = false;
					rowFile1.Visible = true;
					rowFile2.Visible = false;
					rowLang.Visible = false;
					rowName.Visible = false;
					rowDescription.Visible = false;
					rowSource.Visible = false;
					rowAddPage.Visible = true;
					cmdCreate.Visible = true;
					break;
			}
		}]]></body>
          </codeblock>
        </method>
        <method name="cboModule_SelectedIndexChanged">
          <declaration><![CDATA[protected void cboModule_SelectedIndexChanged(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="610" sc="3" el="612" ec="4">DesktopModules\Admin\Extensions\Editors\EditModuleDefinition.ascx.cs</location>
            <body hash="db3274e4963a2c88a17bcac1b4e5439f"><![CDATA[{
			SetupModuleFolders();
		}]]></body>
          </codeblock>
        </method>
        <method name="cboOwner_SelectedIndexChanged">
          <declaration><![CDATA[protected void cboOwner_SelectedIndexChanged(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="615" sc="3" el="617" ec="4">DesktopModules\Admin\Extensions\Editors\EditModuleDefinition.ascx.cs</location>
            <body hash="3a306f5ee5f3f3088478b7b6f883c099"><![CDATA[{
			SetupOwnerFolders();
		}]]></body>
          </codeblock>
        </method>
        <method name="cmdAddModule_Click">
          <declaration><![CDATA[protected void cmdAddModule_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="620" sc="3" el="623" ec="4">DesktopModules\Admin\Extensions\Editors\EditModuleDefinition.ascx.cs</location>
            <body hash="ee7ef29b06e61e3a994346835af53951"><![CDATA[{
			rowModule1.Visible = false;
			rowModule2.Visible = true;
		}]]></body>
          </codeblock>
        </method>
        <method name="cmdAddOwner_Click">
          <declaration><![CDATA[protected void cmdAddOwner_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="626" sc="3" el="629" ec="4">DesktopModules\Admin\Extensions\Editors\EditModuleDefinition.ascx.cs</location>
            <body hash="88f2231e0e35dd9db49c54c8c607078d"><![CDATA[{
			rowOwner1.Visible = false;
			rowOwner2.Visible = true;
		}]]></body>
          </codeblock>
        </method>
        <method name="cmdCancel_Click">
          <declaration><![CDATA[protected void cmdCancel_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="632" sc="3" el="641" ec="4">DesktopModules\Admin\Extensions\Editors\EditModuleDefinition.ascx.cs</location>
            <body hash="ed4d71bd3856ea1309bd00f8c5bf10bf"><![CDATA[{
			try
			{
				Response.Redirect(Globals.NavigateURL(), true);
			}
			catch (Exception exc)
			{
				Exceptions.ProcessModuleLoadException(this, exc);
			}
		}]]></body>
          </codeblock>
        </method>
        <method name="cmdCancelModule_Click">
          <declaration><![CDATA[protected void cmdCancelModule_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="644" sc="3" el="647" ec="4">DesktopModules\Admin\Extensions\Editors\EditModuleDefinition.ascx.cs</location>
            <body hash="f0fb5ff4d91e7d350d1389317a3eaae7"><![CDATA[{
			rowModule1.Visible = true;
			rowModule2.Visible = false;
		}]]></body>
          </codeblock>
        </method>
        <method name="cmdCancelOwner_Click">
          <declaration><![CDATA[protected void cmdCancelOwner_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="650" sc="3" el="653" ec="4">DesktopModules\Admin\Extensions\Editors\EditModuleDefinition.ascx.cs</location>
            <body hash="66485d2652d817f5df8f59da7670c991"><![CDATA[{
			rowOwner1.Visible = true;
			rowOwner2.Visible = false;
		}]]></body>
          </codeblock>
        </method>
        <method name="cmdCreate_Click">
          <declaration><![CDATA[protected void cmdCreate_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="656" sc="3" el="797" ec="4">DesktopModules\Admin\Extensions\Editors\EditModuleDefinition.ascx.cs</location>
            <body hash="2f674de87456e19535308b9d15a7aa2c"><![CDATA[{
			try
			{
				ModuleDefinitionInfo moduleDefinition = null;
				string strMessage = Null.NullString;
				switch (cboCreate.SelectedValue)
				{
					case "":
						break;
					case "New":
						if (String.IsNullOrEmpty(cboModule.SelectedValue))
						{
							strMessage = Localization.GetString("ModuleFolder", LocalResourceFile);
							break;
						}

						if (String.IsNullOrEmpty(rblLanguage.SelectedValue))
						{
							strMessage = Localization.GetString("LanguageError", LocalResourceFile);
							break;
						}

						//remove spaces so file is created correctly
						var controlSrc = txtFile.Text.Replace(" ", "");
						if (InvalidFilename(controlSrc))
						{
							strMessage = Localization.GetString("InvalidFilename", LocalResourceFile);
							break;
						}

						if (String.IsNullOrEmpty(controlSrc))
						{
							strMessage = Localization.GetString("MissingControl", LocalResourceFile);
							break;
						}
						if (String.IsNullOrEmpty(txtName.Text))
						{
							strMessage = Localization.GetString("MissingFriendlyname", LocalResourceFile);
							break;
						}
						if (!controlSrc.EndsWith(".ascx"))
						{
							controlSrc += ".ascx";
						}

						var uniqueName = true;
						var packages = new List<PackageInfo>();
						foreach (var package in PackageController.Instance.GetExtensionPackages(Null.NullInteger))
						{
							if (package.Name == txtName.Text || package.FriendlyName == txtName.Text)
							{
								uniqueName = false;
								break;
							}
						}

						if (!uniqueName)
						{
							strMessage = Localization.GetString("NonuniqueName", LocalResourceFile);
							break;
						}
						//First create the control
						strMessage = CreateControl(controlSrc);
						if (String.IsNullOrEmpty(strMessage))
						{
							//Next import the control
							moduleDefinition = ImportControl(controlSrc);
						}
						break;
					case "Control":
						if (!String.IsNullOrEmpty(cboFile.SelectedValue))
						{
							moduleDefinition = ImportControl(cboFile.SelectedValue);
						}
						else
						{
							strMessage = Localization.GetString("NoControl", LocalResourceFile);
						}
						break;
					case "Template":
						break;
					case "Manifest":
						if (String.IsNullOrEmpty(cboFile.SelectedValue))
						{
							strMessage = Localization.GetString("MissingManifest", LocalResourceFile);
						}
						else
						{
							moduleDefinition = ImportManifest();
						}
						break;
				}
				if (moduleDefinition == null)
				{
					UI.Skins.Skin.AddModuleMessage(this, strMessage, ModuleMessage.ModuleMessageType.RedError);
				}
				else
				{
					if (!string.IsNullOrEmpty(cboCreate.SelectedValue) && chkAddPage.Checked)
					{
						var tabName = "Test " + txtName.Text + " Page";
						var tabPath = Globals.GenerateTabPath(Null.NullInteger, tabName);
						var tabID = TabController.GetTabByTabPath(ModuleContext.PortalId, tabPath, Null.NullString);
						if (tabID == Null.NullInteger)
						{
							//Create a new page
							var newTab = new TabInfo();
							newTab.TabName = "Test " + txtName.Text + " Page";
							newTab.ParentId = Null.NullInteger;
							newTab.PortalID = ModuleContext.PortalId;
							newTab.IsVisible = true;
							newTab.TabID = TabController.Instance.AddTabBefore(newTab, ModuleContext.PortalSettings.AdminTabId);
							var objModule = new ModuleInfo();
							objModule.Initialize(ModuleContext.PortalId);
							objModule.PortalID = ModuleContext.PortalId;
							objModule.TabID = newTab.TabID;
							objModule.ModuleOrder = Null.NullInteger;
							objModule.ModuleTitle = moduleDefinition.FriendlyName;
							objModule.PaneName = Globals.glbDefaultPane;
							objModule.ModuleDefID = moduleDefinition.ModuleDefID;
							objModule.InheritViewPermissions = true;
							objModule.AllTabs = false;
                            ModuleController.Instance.AddModule(objModule);
							Response.Redirect(Globals.NavigateURL(newTab.TabID), true);
						}
						else
						{
							UI.Skins.Skin.AddModuleMessage(this, Localization.GetString("TabExists", LocalResourceFile), ModuleMessage.ModuleMessageType.RedError);
						}
					}
					else
					{
						//Redirect to main extensions page
						Response.Redirect(Globals.NavigateURL(), true);
					}
				}
			}
			catch (Exception ex)
			{
				Exceptions.ProcessModuleLoadException(this, ex);
			}
		}]]></body>
          </codeblock>
        </method>
        <method name="cmdSaveModule_Click">
          <declaration><![CDATA[protected void cmdSaveModule_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="800" sc="3" el="806" ec="4">DesktopModules\Admin\Extensions\Editors\EditModuleDefinition.ascx.cs</location>
            <body hash="e062319f11ae897c6d09f1c65aee3778"><![CDATA[{
			AddFolder(cboOwner.SelectedValue, txtModule.Text);
			LoadModuleFolders(txtModule.Text);
			SetupModuleFolders();
			rowModule1.Visible = true;
			rowModule2.Visible = false;
		}]]></body>
          </codeblock>
        </method>
        <method name="cmdSaveOwner_Click">
          <declaration><![CDATA[protected void cmdSaveOwner_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="809" sc="3" el="815" ec="4">DesktopModules\Admin\Extensions\Editors\EditModuleDefinition.ascx.cs</location>
            <body hash="f2a8cf6df09f81b4ef37b5c886e9c99d"><![CDATA[{
			AddFolder("", txtOwner.Text);
			LoadOwnerFolders(txtOwner.Text);
			SetupOwnerFolders();
			rowOwner1.Visible = true;
			rowOwner2.Visible = false;
		}]]></body>
          </codeblock>
        </method>
        <method name="CreateControl">
          <declaration><![CDATA[private string CreateControl(string controlSrc)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="127" sc="3" el="148" ec="4">DesktopModules\Admin\Extensions\Editors\EditModuleDefinition.ascx.cs</location>
            <body hash="d002e64b16f9d8fffca650c580e70c71"><![CDATA[{
			var folder = PathUtils.Instance.RemoveTrailingSlash(GetSourceFolder());
			var className = GetClassName();
			var moduleControlPath = Server.MapPath("DesktopModules/" + folder + "/" + controlSrc);
			var message = Null.NullString;

			var source = string.Format(Localization.GetString("ModuleControlTemplate", LocalResourceFile), rblLanguage.SelectedValue, className);

			//reset attributes
			if (File.Exists(moduleControlPath))
			{
				message = Localization.GetString("FileExists", LocalResourceFile);
			}
			else
			{
				StreamWriter objStream;
				objStream = File.CreateText(moduleControlPath);
				objStream.WriteLine(source);
				objStream.Close();
			}
			return message;
		}]]></body>
          </codeblock>
        </method>
        <method name="GetClassName">
          <declaration><![CDATA[private string GetClassName()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="151" sc="3" el="163" ec="4">DesktopModules\Admin\Extensions\Editors\EditModuleDefinition.ascx.cs</location>
            <body hash="a5ea59d8d70c30dd6def4cae9cbb2764"><![CDATA[{
			var strClass = Null.NullString;
			if (!String.IsNullOrEmpty(cboOwner.SelectedValue))
			{
				strClass += cboOwner.SelectedValue + ".";
			}
			if (!String.IsNullOrEmpty(cboModule.SelectedValue))
			{
				strClass += cboModule.SelectedValue;
			}
			//return class and remove any spaces that might appear in folder structure
			return strClass.Replace(" ", "");
		}]]></body>
          </codeblock>
        </method>
        <method name="GetModulesFolders">
          <declaration><![CDATA[private List<CreateModuleDefinition.ModuleDefinitionFolder> GetModulesFolders()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="363" sc="6" el="373" ec="7">DesktopModules\Admin\Extensions\Editors\EditModuleDefinition.ascx.cs</location>
            <body hash="93c7d4527414732de88f20d87dab8a2b"><![CDATA[{
            if (!String.IsNullOrEmpty(cboOwner.SelectedValue))
            {
                return Directory.GetDirectories(Globals.ApplicationMapPath + "\\DesktopModules\\" +
                                                         cboOwner.SelectedValue)
                    .ToList()
                    .ConvertAll(folder => new ModuleDefinitionFolder { Path = folder, SpecialOwner = false });
            }

            return GetRootModuleDefinitionFolders();
	    }]]></body>
          </codeblock>
        </method>
        <method name="GetPathForComboBox">
          <declaration><![CDATA[private string GetPathForComboBox(CreateModuleDefinition.ModuleDefinitionFolder folder)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="400" sc="6" el="408" ec="7">DesktopModules\Admin\Extensions\Editors\EditModuleDefinition.ascx.cs</location>
            <body hash="596e36edba020e732812f3f83ba5b2d9"><![CDATA[{
            var path = folder.Path.Replace(Path.GetDirectoryName(folder.Path) + "\\", "");
            if (folder.SpecialOwner)
            {
                path = folder.SpecialFolderType + "\\" + path;
            }

	        return path;
	    }]]></body>
          </codeblock>
        </method>
        <method name="GetRootModuleDefinitionFolders">
          <declaration><![CDATA[private List<CreateModuleDefinition.ModuleDefinitionFolder> GetRootModuleDefinitionFolders()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="411" sc="6" el="441" ec="7">DesktopModules\Admin\Extensions\Editors\EditModuleDefinition.ascx.cs</location>
            <body hash="c96f2f97e20ea6cf45be151554e64a88"><![CDATA[{
            var ModuleDefinitionFolders = new List<ModuleDefinitionFolder>();
            var rootFolders = Directory.GetDirectories(Globals.ApplicationMapPath + "\\DesktopModules\\").ToList();

            foreach (var folderPath in rootFolders)
            {
                var folderName = folderPath.Replace(Path.GetDirectoryName(folderPath) + "\\", "");
	            if (IsSpecialFolder(folderName))
	            {
                    Directory.GetDirectories(folderPath).ToList()
	                    .ForEach(specialFolderChild =>
	                        ModuleDefinitionFolders.Add(new ModuleDefinitionFolder
	                        {
	                            Path = specialFolderChild,
	                            SpecialOwner = true,
                                SpecialFolderType = folderName
	                        })
	                    );
	            }
	            else
	            {
                    ModuleDefinitionFolders.Add(new ModuleDefinitionFolder
                    {
                        Path = folderPath,
                        SpecialOwner = false
                    });   
	            }
	        }

	        return ModuleDefinitionFolders;
	    }]]></body>
          </codeblock>
        </method>
        <method name="GetSourceFolder">
          <declaration><![CDATA[private string GetSourceFolder()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="166" sc="3" el="177" ec="4">DesktopModules\Admin\Extensions\Editors\EditModuleDefinition.ascx.cs</location>
            <body hash="e65767d0d59f0b77c8bfb21e1541781d"><![CDATA[{
			var strFolder = Null.NullString;
			if (!String.IsNullOrEmpty(cboOwner.SelectedValue))
			{
				strFolder += cboOwner.SelectedValue + "/";
			}
			if (!String.IsNullOrEmpty(cboModule.SelectedValue))
			{
				strFolder += cboModule.SelectedValue + "/";
			}
			return strFolder;
		}]]></body>
          </codeblock>
        </method>
        <method name="ImportControl">
          <declaration><![CDATA[private ModuleDefinitionInfo ImportControl(string controlSrc)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="185" sc="3" el="269" ec="4">DesktopModules\Admin\Extensions\Editors\EditModuleDefinition.ascx.cs</location>
            <body hash="9d090c5bfe7c1a11d4d9e3dec818b7dd"><![CDATA[{
			ModuleDefinitionInfo moduleDefinition = null;
			try
			{
				string folder = PathUtils.Instance.RemoveTrailingSlash(GetSourceFolder());
				string friendlyName = txtName.Text;
				string name = GetClassName();
				string moduleControl = "DesktopModules/" + folder + "/" + controlSrc;

                var packageInfo = PackageController.Instance.GetExtensionPackage(Null.NullInteger, p => p.Name == name || p.FriendlyName == friendlyName);
                if (packageInfo != null)
                {
                    UI.Skins.Skin.AddModuleMessage(this, String.Format(Localization.GetString("NonuniqueNameModule", LocalResourceFile), packageInfo.FriendlyName), ModuleMessage.ModuleMessageType.RedError);
                }
                else
                {
                    var package = new PackageInfo
                        {
                            Name = name,
                            FriendlyName = friendlyName,
                            Description = txtDescription.Text,
                            Version = new Version(1, 0, 0),
                            PackageType = "Module",
                            License = Util.PACKAGE_NoLicense
                        };

                    //Save Package
                    PackageController.Instance.SaveExtensionPackage(package);

                    var objDesktopModule = new DesktopModuleInfo
                        {
                            DesktopModuleID = Null.NullInteger,
                            ModuleName = name,
                            FolderName = folder,
                            FriendlyName = friendlyName,
                            Description = txtDescription.Text,
                            IsPremium = false,
                            IsAdmin = false,
                            Version = "01.00.00",
                            BusinessControllerClass = "",
                            CompatibleVersions = "",
                            Dependencies = "",
                            Permissions = "",
                            PackageID = package.PackageID
                        };

                    objDesktopModule.DesktopModuleID = DesktopModuleController.SaveDesktopModule(objDesktopModule, false, true);

                    //Add module to all portals
                    DesktopModuleController.AddDesktopModuleToPortals(objDesktopModule.DesktopModuleID);

                    //Save module definition
                    moduleDefinition = new ModuleDefinitionInfo();

                    moduleDefinition.ModuleDefID = Null.NullInteger;
                    moduleDefinition.DesktopModuleID = objDesktopModule.DesktopModuleID;
                    moduleDefinition.FriendlyName = friendlyName;
                    moduleDefinition.DefaultCacheTime = 0;

                    moduleDefinition.ModuleDefID = ModuleDefinitionController.SaveModuleDefinition(moduleDefinition, false, true);

                    //Save module control
                    var objModuleControl = new ModuleControlInfo();

                    objModuleControl.ModuleControlID = Null.NullInteger;
                    objModuleControl.ModuleDefID = moduleDefinition.ModuleDefID;
                    objModuleControl.ControlKey = "";
                    objModuleControl.ControlSrc = moduleControl;
                    objModuleControl.ControlTitle = "";
                    objModuleControl.ControlType = SecurityAccessLevel.View;
                    objModuleControl.HelpURL = "";
                    objModuleControl.IconFile = "";
                    objModuleControl.ViewOrder = 0;
                    objModuleControl.SupportsPartialRendering = false;

                    ModuleControlController.AddModuleControl(objModuleControl);
                }
			}
			catch (Exception exc)
			{
				Exceptions.LogException(exc);
				UI.Skins.Skin.AddModuleMessage(this, Localization.GetString("ImportControl.ErrorMessage", LocalResourceFile), ModuleMessage.ModuleMessageType.RedError);
			}
			return moduleDefinition;
		}]]></body>
          </codeblock>
        </method>
        <method name="ImportManifest">
          <declaration><![CDATA[private ModuleDefinitionInfo ImportManifest()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="272" sc="3" el="316" ec="4">DesktopModules\Admin\Extensions\Editors\EditModuleDefinition.ascx.cs</location>
            <body hash="000abdfb9c766682b81dfa46310f2cc9"><![CDATA[{
			ModuleDefinitionInfo moduleDefinition = null;
			try
			{
				var folder = PathUtils.Instance.RemoveTrailingSlash(GetSourceFolder());
				var manifest = Server.MapPath("~/DesktopModules/" + folder + "/" + cboFile.SelectedValue);
				var installer = new Installer(manifest, Request.MapPath("."), true);

				if (installer.IsValid)
				{
					installer.InstallerInfo.Log.Logs.Clear();
					installer.Install();

					if (installer.IsValid)
					{
						var desktopModule = DesktopModuleController.GetDesktopModuleByPackageID(installer.InstallerInfo.PackageID);
						if (desktopModule != null && desktopModule.ModuleDefinitions.Count > 0)
						{
							foreach (var kvp in desktopModule.ModuleDefinitions)
							{
								moduleDefinition = kvp.Value;
								break; // TODO: might not be correct. Was : Exit For
							}
						}
					}
					else
					{
						UI.Skins.Skin.AddModuleMessage(this, Localization.GetString("InstallError.Text", LocalResourceFile), UI.Skins.Controls.ModuleMessage.ModuleMessageType.RedError);
						phInstallLogs.Controls.Add(installer.InstallerInfo.Log.GetLogsTable());
					}
				}
				else
				{
					UI.Skins.Skin.AddModuleMessage(this, Localization.GetString("InstallError.Text", LocalResourceFile), UI.Skins.Controls.ModuleMessage.ModuleMessageType.RedError);
					phInstallLogs.Controls.Add(installer.InstallerInfo.Log.GetLogsTable());
				}
			}
			catch (Exception exc)
			{
				Exceptions.LogException(exc);
				UI.Skins.Skin.AddModuleMessage(this, Localization.GetString("ImportControl.ErrorMessage", LocalResourceFile), UI.Skins.Controls.ModuleMessage.ModuleMessageType.RedError);
			}

			return moduleDefinition;
		}]]></body>
          </codeblock>
        </method>
        <method name="InvalidFilename">
          <declaration><![CDATA[private static bool InvalidFilename(string fileName)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="121" sc="3" el="124" ec="4">DesktopModules\Admin\Extensions\Editors\EditModuleDefinition.ascx.cs</location>
            <body hash="2399af6c634d337e089a2f368c86d77e"><![CDATA[{
			var invalidFilenameChars = RegexUtils.GetCachedRegex("[" + Regex.Escape(new string(Path.GetInvalidFileNameChars())) + "]");
			return invalidFilenameChars.IsMatch(fileName);
		}]]></body>
          </codeblock>
        </method>
        <method name="IsSpecialFolder">
          <declaration><![CDATA[private bool IsSpecialFolder(string folderName)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="444" sc="6" el="446" ec="7">DesktopModules\Admin\Extensions\Editors\EditModuleDefinition.ascx.cs</location>
            <body hash="0b4dace741e2ca6dde2eb6b3b2213b53"><![CDATA[{
            return SpecialModuleFolders.Any(specialFolder => specialFolder.ToLower().Equals(folderName.ToLower()));
	    }]]></body>
          </codeblock>
        </method>
        <method name="LoadFiles">
          <declaration><![CDATA[private void LoadFiles(string extensions)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="319" sc="3" el="321" ec="4">DesktopModules\Admin\Extensions\Editors\EditModuleDefinition.ascx.cs</location>
            <body hash="72eb57018b664c646b1bd58ae07ac493"><![CDATA[{
			LoadFiles(extensions, String.Empty);
		}]]></body>
          </codeblock>
        </method>
        <method name="LoadFiles">
          <declaration><![CDATA[private void LoadFiles(string extensions, string folder)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="324" sc="3" el="340" ec="4">DesktopModules\Admin\Extensions\Editors\EditModuleDefinition.ascx.cs</location>
            <body hash="1e419c7dc36e86695ee11596c62810d7"><![CDATA[{
			if (String.IsNullOrEmpty(folder))
			{
				folder = Server.MapPath("~/DesktopModules/" + GetSourceFolder());
			}
			var files = Directory.GetFiles(folder);
			foreach (var file in files)
			{
				string extension = Path.GetExtension(file);
				if (extension != null && extensions.Contains(extension))
				{
					//cboFile.Items.Add(Path.GetFileName(file));
                    var fileName = Path.GetFileName(file);
                    cboFile.AddItem(fileName, fileName); 
				}
			}
		}]]></body>
          </codeblock>
        </method>
        <method name="LoadModuleFolders">
          <declaration><![CDATA[private void LoadModuleFolders(string selectedValue)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="343" sc="3" el="360" ec="4">DesktopModules\Admin\Extensions\Editors\EditModuleDefinition.ascx.cs</location>
            <body hash="603e156a450373213f7140132c38beb4"><![CDATA[{
			cboModule.Items.Clear();

		    var moduleFolders = GetModulesFolders();
		    
            foreach (var moduleFolder in moduleFolders)
			{
                var path = GetPathForComboBox(moduleFolder);
				var item = new DnnComboBoxItem(path, path);
				if (item.Value == selectedValue)
				{
					item.Selected = true;
				}
				cboModule.Items.Add(item);
			}
			//cboModule.Items.Insert(0, new ListItem("<" + Localization.GetString("Not_Specified", Localization.SharedResourceFile) + ">", ""));
            cboModule.InsertItem(0, "<" + Localization.GetString("Not_Specified", Localization.SharedResourceFile) + ">", "");
		}]]></body>
          </codeblock>
        </method>
        <method name="LoadOwnerFolders">
          <declaration><![CDATA[private void LoadOwnerFolders(string selectedValue)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="376" sc="3" el="397" ec="4">DesktopModules\Admin\Extensions\Editors\EditModuleDefinition.ascx.cs</location>
            <body hash="fbbba8abf8fdb0b2632f0a3dd3e3936e"><![CDATA[{
            cboOwner.Items.Clear();

            var arrFolders = GetRootModuleDefinitionFolders();
			foreach (var folder in arrFolders)
			{
				var files = Directory.GetFiles(folder.Path, "*.ascx");
				//exclude module folders
                if (files.Length == 0 || folder.Path.ToLower() == "admin")
                {
                    var path = GetPathForComboBox(folder);
					var item = new DnnComboBoxItem(path, path);
					if (item.Value == selectedValue)
					{
						item.Selected = true;
					}
					cboOwner.Items.Add(item);
				}
			}
			//cboOwner.Items.Insert(0, new ListItem("<" + Localization.GetString("Not_Specified", Localization.SharedResourceFile) + ">", ""));
            cboOwner.InsertItem(0, "<" + Localization.GetString("Not_Specified", Localization.SharedResourceFile) + ">", "");
		}]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="484" sc="3" el="500" ec="4">DesktopModules\Admin\Extensions\Editors\EditModuleDefinition.ascx.cs</location>
            <body hash="a2690ce21ac4d627854aebaecb7bf70f"><![CDATA[{
			base.OnInit(e);

			cboCreate.SelectedIndexChanged += cboCreate_SelectedIndexChanged;
			cboModule.SelectedIndexChanged += cboModule_SelectedIndexChanged;
			cboOwner.SelectedIndexChanged += cboOwner_SelectedIndexChanged;
			cmdAddModule.Click += cmdAddModule_Click;
			cmdAddOwner.Click += cmdAddOwner_Click;
			cmdCancel.Click += cmdCancel_Click;
			cmdCancelModule.Click += cmdCancelModule_Click;
			cmdCancelOwner.Click += cmdCancelOwner_Click;
			cmdCreate.Click += cmdCreate_Click;
			cmdSaveModule.Click += cmdSaveModule_Click;
			cmdSaveOwner.Click += cmdSaveOwner_Click;

			ModuleContext.Configuration.ModuleTitle = Localization.GetString(IsAddMode ? "Add.Title" : "Edit.Title", LocalResourceFile);
		}]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="507" sc="3" el="524" ec="4">DesktopModules\Admin\Extensions\Editors\EditModuleDefinition.ascx.cs</location>
            <body hash="b66221a244ab8ece9623afe3902bbdd3"><![CDATA[{
			base.OnLoad(e);

			try
			{
				if (!Page.IsPostBack)
				{
					//cboCreate.Items.Insert(0, new ListItem("<" + Localization.GetString("None_Specified") + ">", ""));
                    cboCreate.InsertItem(0, "<" + Localization.GetString("None_Specified") + ">", "");
					LoadOwnerFolders(Null.NullString);
					LoadModuleFolders(Null.NullString);
				}
			}
			catch (Exception exc)
			{
				Exceptions.ProcessModuleLoadException(this, exc);
			}
		}]]></body>
          </codeblock>
        </method>
        <method name="SetupModuleFolders">
          <declaration><![CDATA[private void SetupModuleFolders()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="449" sc="3" el="466" ec="4">DesktopModules\Admin\Extensions\Editors\EditModuleDefinition.ascx.cs</location>
            <body hash="4d6acbf00189e1cacdb840af42399c59"><![CDATA[{
			cboFile.Items.Clear();

			switch (cboCreate.SelectedValue)
			{
				case "Control":
					LoadFiles(".ascx");
					LoadFiles(".cshtml");
					LoadFiles(".vbhtml");
					break;
				case "Template":
					LoadFiles(".module.template", Globals.HostMapPath + "Templates\\");
					break;
				case "Manifest":
					LoadFiles(".dnn,.dnn5");
					break;
			}
		}]]></body>
          </codeblock>
        </method>
        <method name="SetupOwnerFolders">
          <declaration><![CDATA[private void SetupOwnerFolders()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="469" sc="3" el="472" ec="4">DesktopModules\Admin\Extensions\Editors\EditModuleDefinition.ascx.cs</location>
            <body hash="081543040def0f4ab2f5b380c097a8f9"><![CDATA[{
			LoadModuleFolders(Null.NullString);
			SetupModuleFolders();
		}]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_Package">
          <declaration><![CDATA[private PackageInfo _Package;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cboCreate">
          <declaration><![CDATA[protected DnnComboBox cboCreate;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cboFile">
          <declaration><![CDATA[protected DnnComboBox cboFile;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cboModule">
          <declaration><![CDATA[protected DnnComboBox cboModule;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cboOwner">
          <declaration><![CDATA[protected DnnComboBox cboOwner;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkAddPage">
          <declaration><![CDATA[protected CheckBox chkAddPage;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdAddModule">
          <declaration><![CDATA[protected LinkButton cmdAddModule;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdAddOwner">
          <declaration><![CDATA[protected LinkButton cmdAddOwner;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdCancel">
          <declaration><![CDATA[protected LinkButton cmdCancel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdCancelModule">
          <declaration><![CDATA[protected LinkButton cmdCancelModule;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdCancelOwner">
          <declaration><![CDATA[protected LinkButton cmdCancelOwner;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdCreate">
          <declaration><![CDATA[protected LinkButton cmdCreate;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdSaveModule">
          <declaration><![CDATA[protected LinkButton cmdSaveModule;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdSaveOwner">
          <declaration><![CDATA[protected LinkButton cmdSaveOwner;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="phInstallLogs">
          <declaration><![CDATA[protected PlaceHolder phInstallLogs;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plAddPage">
          <declaration><![CDATA[protected LabelControl plAddPage;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plCreate">
          <declaration><![CDATA[protected LabelControl plCreate;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plDescription">
          <declaration><![CDATA[protected LabelControl plDescription;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plFile1">
          <declaration><![CDATA[protected LabelControl plFile1;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plFile2">
          <declaration><![CDATA[protected LabelControl plFile2;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plLang">
          <declaration><![CDATA[protected LabelControl plLang;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plModule1">
          <declaration><![CDATA[protected LabelControl plModule1;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plModule2">
          <declaration><![CDATA[protected LabelControl plModule2;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plName">
          <declaration><![CDATA[protected LabelControl plName;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plOwner1">
          <declaration><![CDATA[protected LabelControl plOwner1;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plOwner2">
          <declaration><![CDATA[protected LabelControl plOwner2;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plSource">
          <declaration><![CDATA[protected LabelControl plSource;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="rblLanguage">
          <declaration><![CDATA[protected RadioButtonList rblLanguage;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="rowAddPage">
          <declaration><![CDATA[protected HtmlGenericControl rowAddPage;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="rowDescription">
          <declaration><![CDATA[protected HtmlGenericControl rowDescription;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="rowFile1">
          <declaration><![CDATA[protected HtmlGenericControl rowFile1;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="rowFile2">
          <declaration><![CDATA[protected HtmlGenericControl rowFile2;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="rowLang">
          <declaration><![CDATA[protected HtmlGenericControl rowLang;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="rowModule1">
          <declaration><![CDATA[protected HtmlGenericControl rowModule1;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="rowModule2">
          <declaration><![CDATA[protected HtmlGenericControl rowModule2;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="rowName">
          <declaration><![CDATA[protected HtmlGenericControl rowName;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="rowOwner1">
          <declaration><![CDATA[protected HtmlGenericControl rowOwner1;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="rowOwner2">
          <declaration><![CDATA[protected HtmlGenericControl rowOwner2;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="rowSource">
          <declaration><![CDATA[protected HtmlGenericControl rowSource;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="SpecialModuleFolders">
          <declaration><![CDATA[private static readonly string[] SpecialModuleFolders = new string[]]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtDescription">
          <declaration><![CDATA[protected TextBox txtDescription;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtFile">
          <declaration><![CDATA[protected TextBox txtFile;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtModule">
          <declaration><![CDATA[protected TextBox txtModule;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtName">
          <declaration><![CDATA[protected TextBox txtName;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtOwner">
          <declaration><![CDATA[protected TextBox txtOwner;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtSource">
          <declaration><![CDATA[protected TextBox txtSource;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="IsAddMode">
          <declaration><![CDATA[protected bool IsAddMode]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="75" sc="4" el="77" ec="5">DesktopModules\Admin\Extensions\Editors\EditModuleDefinition.ascx.cs</location>
            <body hash="08b24125b8e10e4dd2a2e36bf24e84f8"><![CDATA[{
				return (PackageID == Null.NullInteger);
			}]]></body>
          </codeblock>
        </property>
        <property name="Package">
          <declaration><![CDATA[protected PackageInfo Package]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="83" sc="4" el="85" ec="5">DesktopModules\Admin\Extensions\Editors\EditModuleDefinition.ascx.cs</location>
            <body hash="dd1cea370381d2344b263ac787a2e048"><![CDATA[{
				return _Package ?? (_Package = PackageID == Null.NullInteger ? new PackageInfo() : PackageController.Instance.GetExtensionPackage(Null.NullInteger, p => p.PackageID == PackageID));
			}]]></body>
          </codeblock>
        </property>
        <property name="PackageID">
          <declaration><![CDATA[public int PackageID]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="91" sc="4" el="98" ec="5">DesktopModules\Admin\Extensions\Editors\EditModuleDefinition.ascx.cs</location>
            <body hash="6d4c9a5e61a5160d8873a0e4767bbf01"><![CDATA[{
				var packageID = Null.NullInteger;
				if ((Request.QueryString["PackageID"] != null))
				{
					packageID = Int32.Parse(Request.QueryString["PackageID"]);
				}
				return packageID;
			}]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="EditModuleControl">
      <declaration><![CDATA[public class EditModuleControl : PortalModuleBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public EditModuleControl()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="AddFiles">
          <declaration><![CDATA[private void AddFiles(string root, string filter)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="117" sc="9" el="131" ec="10">DesktopModules\Admin\Extensions\Editors\EditModuleControl.ascx.cs</location>
            <body hash="e23f8b203bbb04ec5cff227c9bf6085b"><![CDATA[{
            string[] files = Directory.GetFiles(Request.MapPath(Globals.ApplicationPath + "/" + root), filter);
            foreach (string strFile in files)
            {
                string file = root.Replace('\\', '/') + "/" + Path.GetFileName(strFile);

                var item = new DnnComboBoxItem(file, file.ToLower());
                if (ModuleControl != null && item.Value.Equals(ModuleControl.ControlSrc.ToLower()))
                {
                    item.Selected = true;
                }
                cboSource.Items.Add(item);
            }

        }]]></body>
          </codeblock>
        </method>
        <method name="BindControlList">
          <declaration><![CDATA[private void BindControlList()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="134" sc="9" el="146" ec="10">DesktopModules\Admin\Extensions\Editors\EditModuleControl.ascx.cs</location>
            <body hash="97251ac665c91f561cad1b23e1fcb68d"><![CDATA[{
            cboSource.Items.Clear();
            cboSource.InsertItem(0, "<" + Localization.GetString("None_Specified") + ">", "");

            var root = cboSourceFolder.SelectedValue;
            if (Directory.Exists(Request.MapPath(Globals.ApplicationPath + "/" + root)))
            {
                AddFiles(root, "*.ascx");
                AddFiles(root, "*.cshtml");
                AddFiles(root, "*.vbhtml");
                AddFiles(root, "*.html");
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="BindSourceFolders">
          <declaration><![CDATA[private void BindSourceFolders()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="149" sc="9" el="170" ec="10">DesktopModules\Admin\Extensions\Editors\EditModuleControl.ascx.cs</location>
            <body hash="3a5858db2f532f1cb324107c0da0aa80"><![CDATA[{
            IList<string> controlfolders = GetSubdirectories(Request.MapPath(Globals.ApplicationPath + "/DesktopModules"));
            controlfolders.Insert(0, Request.MapPath(Globals.ApplicationPath + "/Admin/Skins"));

            var currentControlFolder = ModuleControl != null ? Path.GetDirectoryName(ModuleControl.ControlSrc.ToLower()).Replace('\\', '/') : string.Empty;

            foreach (var folder in controlfolders)
            {
                var moduleControls = Directory.EnumerateFiles(folder, "*.*", SearchOption.TopDirectoryOnly).Count(s => s.EndsWith(".ascx") || s.EndsWith(".cshtml") || s.EndsWith(".vbhtml") || s.EndsWith(".html") || s.EndsWith(".htm"));
                    if (moduleControls > 0)
                    {
                        var shortFolder =folder.Substring(Request.MapPath(Globals.ApplicationPath).Length + 1).Replace('\\', '/');

                        var item = new DnnComboBoxItem(shortFolder, shortFolder.ToLower());
                        if (item.Value.Equals(currentControlFolder))
                        {
                            item.Selected = true;
                        }
                        cboSourceFolder.Items.Add(item);
                    }                
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="cboSource_SelectedIndexChanged">
          <declaration><![CDATA[private void cboSource_SelectedIndexChanged(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="299" sc="9" el="301" ec="10">DesktopModules\Admin\Extensions\Editors\EditModuleControl.ascx.cs</location>
            <body hash="41fe74e4ed2765baf6defcac12527ae5"><![CDATA[{
            LoadIcons();
        }]]></body>
          </codeblock>
        </method>
        <method name="cboSourceFolder_SelectedIndexChanged">
          <declaration><![CDATA[private void cboSourceFolder_SelectedIndexChanged(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="304" sc="9" el="306" ec="10">DesktopModules\Admin\Extensions\Editors\EditModuleControl.ascx.cs</location>
            <body hash="84897972bb7956a9847ff0033b89e4b6"><![CDATA[{
            BindControlList();
        }]]></body>
          </codeblock>
        </method>
        <method name="cmdCancel_Click">
          <declaration><![CDATA[private void cmdCancel_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="309" sc="9" el="318" ec="10">DesktopModules\Admin\Extensions\Editors\EditModuleControl.ascx.cs</location>
            <body hash="b6863011b5218a22627dec77fc2232b9"><![CDATA[{
            try
            {
                Response.Redirect(ReturnUrl, true);
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="cmdDelete_Click">
          <declaration><![CDATA[private void cmdDelete_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="321" sc="9" el="334" ec="10">DesktopModules\Admin\Extensions\Editors\EditModuleControl.ascx.cs</location>
            <body hash="ae95073457f25b57ed202b92934eeba2"><![CDATA[{
            try
            {
                if (!Null.IsNull(ModuleControlId))
                {
                    ModuleControlController.DeleteModuleControl(ModuleControlId);
                }
                Response.Redirect(ReturnUrl, true);
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="cmdUpdate_Click">
          <declaration><![CDATA[private void cmdUpdate_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="337" sc="9" el="389" ec="10">DesktopModules\Admin\Extensions\Editors\EditModuleControl.ascx.cs</location>
            <body hash="b12bd0df8ea24f95cd36f1e626a76c3b"><![CDATA[{
            try
            {
                if (Page.IsValid)
                {
                    if (cboSource.SelectedIndex != 0 || !String.IsNullOrEmpty(txtSource.Text))
                    {
                        //check whether have a same control key in the module definition
                        var controlKey = !String.IsNullOrEmpty(txtKey.Text) ? txtKey.Text : Null.NullString;
                        var moduleControls = ModuleControlController.GetModuleControlsByModuleDefinitionID(ModuleDefId).Values;
                        var keyExists = moduleControls.Any(c => c.ControlKey.Equals(controlKey, StringComparison.InvariantCultureIgnoreCase)
                                                            && c.ModuleControlID != ModuleControlId);
                        if(keyExists)
                        {
                            UI.Skins.Skin.AddModuleMessage(this, Localization.GetString("DuplicateKey.ErrorMessage", LocalResourceFile), ModuleMessage.ModuleMessageType.RedError);
                            return;
                        }
                        var moduleControl = new ModuleControlInfo
                                                {
                                                    ModuleControlID = ModuleControlId,
                                                    ModuleDefID = ModuleDefId,
                                                    ControlKey = controlKey,
                                                    ControlTitle = !String.IsNullOrEmpty(txtTitle.Text) ? txtTitle.Text : Null.NullString,
                                                    ControlSrc = !String.IsNullOrEmpty(txtSource.Text) ? txtSource.Text : cboSource.SelectedItem.Text,
                                                    ControlType = (SecurityAccessLevel) Enum.Parse(typeof (SecurityAccessLevel), cboType.SelectedItem.Value),
                                                    ViewOrder = !String.IsNullOrEmpty(txtViewOrder.Text) ? int.Parse(txtViewOrder.Text) : Null.NullInteger,
                                                    IconFile = cboIcon.SelectedIndex > 0 ? cboIcon.SelectedItem.Text : Null.NullString,
                                                    HelpURL = !String.IsNullOrEmpty(txtHelpURL.Text) ? txtHelpURL.Text : Null.NullString,
                                                    SupportsPartialRendering = chkSupportsPartialRendering.Checked,
                                                    SupportsPopUps = supportsModalPopUpsCheckBox.Checked
                                                };
                        try
                        {
                            ModuleControlController.SaveModuleControl(moduleControl, true);
                        }
                        catch
                        {
                            UI.Skins.Skin.AddModuleMessage(this, Localization.GetString("AddControl.ErrorMessage", LocalResourceFile), ModuleMessage.ModuleMessageType.RedError);
                            return;
                        }
                        Response.Redirect(ReturnUrl, true);
                    }
                    else
                    {
                        UI.Skins.Skin.AddModuleMessage(this, Localization.GetString("MissingSource.ErrorMessage", LocalResourceFile), ModuleMessage.ModuleMessageType.RedError);
                    }
                }
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetSubdirectories">
          <declaration><![CDATA[private IList<string> GetSubdirectories(string path)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="173" sc="9" el="176" ec="10">DesktopModules\Admin\Extensions\Editors\EditModuleControl.ascx.cs</location>
            <body hash="c2f199908a39f09fd979b652f299f384"><![CDATA[{
            return (from subdirectory in Directory.GetDirectories(path, "*", SearchOption.AllDirectories)
                   select subdirectory).ToList();
        }]]></body>
          </codeblock>
        </method>
        <method name="LoadIcons">
          <declaration><![CDATA[private void LoadIcons()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="179" sc="9" el="208" ec="10">DesktopModules\Admin\Extensions\Editors\EditModuleControl.ascx.cs</location>
            <body hash="2ffc5e93a2dedb8daeae8a9a8a6b8007"><![CDATA[{
            string root;
            cboIcon.Items.Clear();
            cboIcon.AddItem("<" + Localization.GetString("Not_Specified") + ">", "");
            if (!String.IsNullOrEmpty(cboSource.SelectedItem.Value))
            {
                root = cboSource.SelectedItem.Value;
                root = Request.MapPath(Globals.ApplicationPath + "/" + root.Substring(0, root.LastIndexOf("/")));
                if (Directory.Exists(root))
                {
                    string[] files = Directory.GetFiles(root);
                    foreach (string file in files)
                    {
                        string extension = Path.GetExtension(file);
                        if (extension != null)
                        {
                            extension = extension.Replace(".", "");
                        }
                        if ((Globals.glbImageFileTypes + ",").IndexOf(extension + ",") != -1)
                        {
                            string path = Path.GetFileName(file);
                            if (path != null)
                            {
                                cboIcon.AddItem(Path.GetFileName(file), path.ToLower());
                            }
                        }
                    }
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="215" sc="9" el="296" ec="10">DesktopModules\Admin\Extensions\Editors\EditModuleControl.ascx.cs</location>
            <body hash="5735d00a01677189d5fda6d7c4a332bf"><![CDATA[{
            base.OnLoad(e);

            cboSource.SelectedIndexChanged += cboSource_SelectedIndexChanged;
            cboSourceFolder.SelectedIndexChanged += cboSourceFolder_SelectedIndexChanged;
            cmdCancel.Click += cmdCancel_Click;
            cmdDelete.Click += cmdDelete_Click;
            cmdUpdate.Click += cmdUpdate_Click;

            try
            {
                if (!Page.IsPostBack)
                {
                    lblModule.Text = DesktopModule.FriendlyName;
                    var objModuleDefinition = ModuleDefinitionController.GetModuleDefinitionByID(ModuleDefId);
                    if (objModuleDefinition != null)
                    {
                        lblDefinition.Text = objModuleDefinition.FriendlyName;
                    }
                    ClientAPI.AddButtonConfirm(cmdDelete, Localization.GetString("DeleteItem"));
                    
                    
                    BindSourceFolders();
                    BindControlList();
                    
                    if (!Null.IsNull(ModuleControlId))
                    {
                        if (ModuleControl != null)
                        {
                            txtKey.Text = ModuleControl.ControlKey;
                            txtTitle.Text = ModuleControl.ControlTitle;

                            if (!string.IsNullOrEmpty(cboSource.SelectedValue))
                            {
                                LoadIcons();
                            }
                            else
                            {
                                txtSource.Text = ModuleControl.ControlSrc;
                            }

                            if (cboType.FindItemByValue(Convert.ToInt32(ModuleControl.ControlType).ToString()) != null)
                            {
                                cboType.FindItemByValue(Convert.ToInt32(ModuleControl.ControlType).ToString()).Selected = true;
                            }
                            if (!Null.IsNull(ModuleControl.ViewOrder))
                            {
                                txtViewOrder.Text = ModuleControl.ViewOrder.ToString();
                            }
                            if (cboIcon.FindItemByValue(ModuleControl.IconFile.ToLower()) != null)
                            {
                                cboIcon.FindItemByValue(ModuleControl.IconFile.ToLower()).Selected = true;
                            }
                            if (!Null.IsNull(ModuleControl.HelpURL))
                            {
                                txtHelpURL.Text = ModuleControl.HelpURL;
                            }
                            if (ModuleControl.SupportsPartialRendering)
                            {
                                chkSupportsPartialRendering.Checked = true;
                            }
                            supportsModalPopUpsCheckBox.Checked = ModuleControl.SupportsPopUps;
                        }
                    }
                    else
                    {
                        if (cboType.Enabled)
                        {
                            cboType.FindItemByValue("0").Selected = true;
                        }
                        else
                        {
                            cboType.FindItemByValue("-2").Selected = true;
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_desktopModule">
          <declaration><![CDATA[private DesktopModuleInfo _desktopModule;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_moduleControl">
          <declaration><![CDATA[private ModuleControlInfo _moduleControl;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cboIcon">
          <declaration><![CDATA[protected DnnComboBox cboIcon;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cboSource">
          <declaration><![CDATA[protected DnnComboBox cboSource;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cboSourceFolder">
          <declaration><![CDATA[protected DnnComboBox cboSourceFolder;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cboType">
          <declaration><![CDATA[protected DnnComboBox cboType;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkSupportsPartialRendering">
          <declaration><![CDATA[protected CheckBox chkSupportsPartialRendering;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdCancel">
          <declaration><![CDATA[protected LinkButton cmdCancel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdDelete">
          <declaration><![CDATA[protected LinkButton cmdDelete;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdUpdate">
          <declaration><![CDATA[protected LinkButton cmdUpdate;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblDefinition">
          <declaration><![CDATA[protected Label lblDefinition;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblModule">
          <declaration><![CDATA[protected Label lblModule;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plDefinition">
          <declaration><![CDATA[protected LabelControl plDefinition;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plHelpURL">
          <declaration><![CDATA[protected LabelControl plHelpURL;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plIcon">
          <declaration><![CDATA[protected LabelControl plIcon;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plKey">
          <declaration><![CDATA[protected LabelControl plKey;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plModule">
          <declaration><![CDATA[protected LabelControl plModule;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plSource">
          <declaration><![CDATA[protected LabelControl plSource;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plSourceFolder">
          <declaration><![CDATA[protected LabelControl plSourceFolder;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plSupportsPartialRendering">
          <declaration><![CDATA[protected LabelControl plSupportsPartialRendering;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plTitle">
          <declaration><![CDATA[protected LabelControl plTitle;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plType">
          <declaration><![CDATA[protected LabelControl plType;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plViewOrder">
          <declaration><![CDATA[protected LabelControl plViewOrder;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="supportsModalPopUpsCheckBox">
          <declaration><![CDATA[protected CheckBox supportsModalPopUpsCheckBox;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="supportsModalPopUpsLabel">
          <declaration><![CDATA[protected LabelControl supportsModalPopUpsLabel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtHelpURL">
          <declaration><![CDATA[protected TextBox txtHelpURL;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtKey">
          <declaration><![CDATA[protected TextBox txtKey;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtSource">
          <declaration><![CDATA[protected TextBox txtSource;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtTitle">
          <declaration><![CDATA[protected TextBox txtTitle;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtViewOrder">
          <declaration><![CDATA[protected TextBox txtViewOrder;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="DesktopModule">
          <declaration><![CDATA[protected DesktopModuleInfo DesktopModule]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="59" sc="13" el="61" ec="14">DesktopModules\Admin\Extensions\Editors\EditModuleControl.ascx.cs</location>
            <body hash="3d4be601e18f143423dee47ebbce1f95"><![CDATA[{
                return _desktopModule ?? (_desktopModule = DesktopModuleController.GetDesktopModuleByPackageID(PackageId));
            }]]></body>
          </codeblock>
        </property>
        <property name="ModuleControl">
          <declaration><![CDATA[protected ModuleControlInfo ModuleControl]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="102" sc="13" el="109" ec="14">DesktopModules\Admin\Extensions\Editors\EditModuleControl.ascx.cs</location>
            <body hash="a24c92ca8fdc1fa411b28f4b5dbeefd9"><![CDATA[{
                if (_moduleControl == null && ModuleControlId > Null.NullInteger)
                {
                    _moduleControl = ModuleControlController.GetModuleControl(ModuleControlId);
                }

                return _moduleControl;
            }]]></body>
          </codeblock>
        </property>
        <property name="ModuleControlId">
          <declaration><![CDATA[private int ModuleControlId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="67" sc="13" el="69" ec="14">DesktopModules\Admin\Extensions\Editors\EditModuleControl.ascx.cs</location>
            <body hash="1cda093fe24d1d2e36203aebfb228174"><![CDATA[{
                return Request.QueryString["modulecontrolid"] != null ? Int32.Parse(Request.QueryString["modulecontrolid"]) : Null.NullInteger;
            }]]></body>
          </codeblock>
        </property>
        <property name="ModuleDefId">
          <declaration><![CDATA[private int ModuleDefId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="74" sc="13" el="76" ec="14">DesktopModules\Admin\Extensions\Editors\EditModuleControl.ascx.cs</location>
            <body hash="eca65caad91bd849ea3eff54750584cd"><![CDATA[{
                return Request.QueryString["moduledefid"] != null ? Int32.Parse(Request.QueryString["moduledefid"]) : Null.NullInteger;
            }]]></body>
          </codeblock>
        </property>
        <property name="PackageId">
          <declaration><![CDATA[public int PackageId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="82" sc="13" el="88" ec="14">DesktopModules\Admin\Extensions\Editors\EditModuleControl.ascx.cs</location>
            <body hash="d794beb0939868d886c8c9ed8e2509b5"><![CDATA[{
                if (Request.QueryString["PackageID"] != null)
                {
                    return Int32.Parse(Request.QueryString["PackageID"]);
                }
                return Null.NullInteger;
            }]]></body>
          </codeblock>
        </property>
        <property name="ReturnUrl">
          <declaration><![CDATA[protected string ReturnUrl]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="94" sc="13" el="96" ec="14">DesktopModules\Admin\Extensions\Editors\EditModuleControl.ascx.cs</location>
            <body hash="bbaf6a72e8c1d4323d6a5f2d8aa126a9"><![CDATA[{
                return EditUrl(TabId, "Edit", true, "PackageID=" + PackageId, "mid=" + ModuleId);
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="DotNetNuke.Modules.Admin.Modules">
    <class name="Export">
      <declaration><![CDATA[public class Export : PortalModuleBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private new int ModuleId = -1;]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="60" sc="9" el="60" ec="39">admin\Modules\Export.ascx.cs</location>
            <body hash="371ad81b25f464a0f6e408d08352de9a"><![CDATA[private new int ModuleId = -1]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="CleanName">
          <declaration><![CDATA[private static string CleanName(string name)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="160" sc="9" el="170" ec="10">admin\Modules\Export.ascx.cs</location>
            <body hash="d069da5f47f47ecbe593af9e38de6956"><![CDATA[{
            var strName = name;
            const string strBadChars = ". ~`!@#$%^&*()-_+={[}]|\\:;<,>?/\"'";

            int intCounter;
            for (intCounter = 0; intCounter <= strBadChars.Length - 1; intCounter++)
            {
                strName = strName.Replace(strBadChars.Substring(intCounter, 1), "");
            }
            return strName;
        }]]></body>
          </codeblock>
        </method>
        <method name="ExportModule">
          <declaration><![CDATA[private string ExportModule(int moduleID, string fileName, IFolderInfo folder)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="84" sc="9" el="157" ec="10">admin\Modules\Export.ascx.cs</location>
            <body hash="5ce924c6f07cffea5907b9be7f719001"><![CDATA[{
            var strMessage = "";
            if (Module != null)
            {
                if (!String.IsNullOrEmpty(Module.DesktopModule.BusinessControllerClass) && Module.DesktopModule.IsPortable)
                {
                    try
                    {
                        var objObject = Reflection.CreateObject(Module.DesktopModule.BusinessControllerClass, Module.DesktopModule.BusinessControllerClass);
                        
						//Double-check
						if (objObject is IPortable)
                        {
                            XmlDocument moduleXml = new XmlDocument();
                            XmlNode moduleNode = ModuleController.SerializeModule(moduleXml, Module, true);

                            //add attributes to XML document
                            XmlAttribute typeAttribute = moduleXml.CreateAttribute("type");
                            typeAttribute.Value = CleanName(Module.DesktopModule.ModuleName);
                            moduleNode.Attributes.Append(typeAttribute);

                            XmlAttribute versionAttribute = moduleXml.CreateAttribute("version");
                            versionAttribute.Value = Module.DesktopModule.Version;
                            moduleNode.Attributes.Append(versionAttribute);

                            // Create content from XmlNode
                            StringWriter sw = new StringWriter();
                            XmlTextWriter xw = new XmlTextWriter(sw);
                            moduleNode.WriteTo(xw);
                            var content = sw.ToString();
                            if (!String.IsNullOrEmpty(content))
                            {
								//remove invalid chars in content -> DNN 26810: Handled by ModuleController.SerializeModule
	                            //content = Regex.Replace(content, _invalidCharsRegex, string.Empty);
								//add attributes to XML document
                                //content = "<?xml version=\"1.0\" encoding=\"utf-8\" ?>" + "<content type=\"" + CleanName(Module.DesktopModule.ModuleName) + "\" version=\"" +
                                //          Module.DesktopModule.Version + "\">" + content + "</content>";

                                //First check the Portal limits will not be exceeded (this is approximate)
                                if (PortalController.Instance.HasSpaceAvailable(PortalId, content.Length))
                                {
                                    //add file to Files table
									using (var fileContent = new MemoryStream(Encoding.UTF8.GetBytes(content)))
									{
                                        Services.FileSystem.FileManager.Instance.AddFile(folder, fileName, fileContent, true, true, "application/octet-stream");
									}
                                }
                                else
                                {
                                    strMessage += "<br>" + string.Format(Localization.GetString("DiskSpaceExceeded"), fileName);
                                }
                            }
                            else
                            {
                                strMessage = Localization.GetString("NoContent", LocalResourceFile);
                            }
                        }
                        else
                        {
                            strMessage = Localization.GetString("ExportNotSupported", LocalResourceFile);
                        }
                    }
                    catch
                    {
                        strMessage = Localization.GetString("Error", LocalResourceFile);
                    }
                }
                else
                {
                    strMessage = Localization.GetString("ExportNotSupported", LocalResourceFile);
                }
            }
            return strMessage;
        }]]></body>
          </codeblock>
        </method>
        <method name="OnExportClick">
          <declaration><![CDATA[protected void OnExportClick(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="221" sc="9" el="251" ec="10">admin\Modules\Export.ascx.cs</location>
            <body hash="78287106e2b908d9c926f311495f50dd"><![CDATA[{
            try
            {
                if (cboFolders.SelectedItem != null && !String.IsNullOrEmpty(txtFile.Text))
                {
                    var folder = FolderManager.Instance.GetFolder(cboFolders.SelectedItemValueAsInt);
                    if (folder != null)
                    {
                        var strFile = "content." + CleanName(Module.DesktopModule.ModuleName) + "." + CleanName(txtFile.Text) + ".xml";
                        var strMessage = ExportModule(ModuleId, strFile, folder);
                        if (String.IsNullOrEmpty(strMessage))
                        {
                            Response.Redirect(ReturnURL, true);
                        }
                        else
                        {
                            UI.Skins.Skin.AddModuleMessage(this, strMessage, ModuleMessage.ModuleMessageType.RedError);
                        }
                        }
                    
                }
                else
                {
                    UI.Skins.Skin.AddModuleMessage(this, Localization.GetString("Validation", LocalResourceFile), ModuleMessage.ModuleMessageType.RedError);
                }
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="177" sc="9" el="188" ec="10">admin\Modules\Export.ascx.cs</location>
            <body hash="24b3d5f1d96137dfb3e1e12234709daa"><![CDATA[{
            base.OnInit(e);

            if (Request.QueryString["moduleid"] != null)
            {
                Int32.TryParse(Request.QueryString["moduleid"], out ModuleId);
            }
            if (!ModulePermissionController.HasModuleAccess(SecurityAccessLevel.Edit, "EXPORT", Module))
            {
                Response.Redirect(Globals.AccessDeniedURL(), true);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="191" sc="9" el="218" ec="10">admin\Modules\Export.ascx.cs</location>
            <body hash="086ed05c11c73ebd257ff11e86b89fc7"><![CDATA[{
            base.OnLoad(e);

            cmdExport.Click += OnExportClick;

            try
            {
                if (Request.QueryString["moduleid"] != null)
                {
                    Int32.TryParse(Request.QueryString["moduleid"], out ModuleId);
                }
                if (!Page.IsPostBack)
                {
                    cmdCancel.NavigateUrl = ReturnURL;

                    cboFolders.UndefinedItem = new ListItem("<" + Localization.GetString("None_Specified") + ">", string.Empty);
                    cboFolders.Services.Parameters.Add("permission", "ADD");
                    if (Module != null)
                    {
                        txtFile.Text = CleanName(Module.ModuleTitle);
                    }
                }
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_module">
          <declaration><![CDATA[private ModuleInfo _module;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cboFolders">
          <declaration><![CDATA[protected DnnFolderDropDownList cboFolders;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdCancel">
          <declaration><![CDATA[protected HyperLink cmdCancel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdExport">
          <declaration><![CDATA[protected LinkButton cmdExport;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ModuleId">
          <declaration><![CDATA[private new int ModuleId = -1;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plFile">
          <declaration><![CDATA[protected LabelControl plFile;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plFolder">
          <declaration><![CDATA[protected LabelControl plFolder;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtFile">
          <declaration><![CDATA[protected TextBox txtFile;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="Module">
          <declaration><![CDATA[private ModuleInfo Module]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="66" sc="13" el="68" ec="14">admin\Modules\Export.ascx.cs</location>
            <body hash="99c0dddcf239f2d554d4042b5a9d2ba8"><![CDATA[{
                return _module ?? (_module = ModuleController.Instance.GetModule(ModuleId, TabId, false));
            }]]></body>
          </codeblock>
        </property>
        <property name="ReturnURL">
          <declaration><![CDATA[private string ReturnURL]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="74" sc="13" el="76" ec="14">admin\Modules\Export.ascx.cs</location>
            <body hash="886024cc288178771d5df7a287e8cdef"><![CDATA[{
                return UrlUtils.ValidReturnUrl(Request.Params["ReturnURL"]) ?? Globals.NavigateURL();
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="Import">
      <declaration><![CDATA[public class Import : PortalModuleBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private new int ModuleId = -1;]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="54" sc="9" el="54" ec="39">admin\Modules\Import.ascx.cs</location>
            <body hash="371ad81b25f464a0f6e408d08352de9a"><![CDATA[private new int ModuleId = -1]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="ImportModule">
          <declaration><![CDATA[private string ImportModule()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="78" sc="9" el="139" ec="10">admin\Modules\Import.ascx.cs</location>
            <body hash="54707f9e94f150cc010f3a94ede825aa"><![CDATA[{
            var strMessage = "";
            if (Module != null)
            {
                if (!String.IsNullOrEmpty(Module.DesktopModule.BusinessControllerClass) && Module.DesktopModule.IsPortable)
                {
                    try
                    {
                        var objObject = Reflection.CreateObject(Module.DesktopModule.BusinessControllerClass, Module.DesktopModule.BusinessControllerClass);
                        if (objObject is IPortable)
                        {
                            var xmlDoc = new XmlDocument();
                            try
                            {
                                var content = XmlUtils.RemoveInvalidXmlCharacters(txtContent.Text);
                                xmlDoc.LoadXml(content);
                            }
                            catch
                            {
                                strMessage = Localization.GetString("NotValidXml", LocalResourceFile);
                            }
                            if (String.IsNullOrEmpty(strMessage))
                            {
                                var strType = xmlDoc.DocumentElement.GetAttribute("type");
                                if (strType == Globals.CleanName(Module.DesktopModule.ModuleName) || strType == Globals.CleanName(Module.DesktopModule.FriendlyName))
                                {
                                    var strVersion = xmlDoc.DocumentElement.GetAttribute("version");
                                    // DNN26810 if rootnode = "content", import only content(the old way)
                                    if (xmlDoc.DocumentElement.Name.ToLower() == "content" )
                                    {
                                        ((IPortable)objObject).ImportModule(ModuleId, xmlDoc.DocumentElement.InnerXml, strVersion, UserInfo.UserID);
                                    }
                                    // otherwise (="module") import the new way
                                    else
                                    {
                                        ModuleController.DeserializeModule(xmlDoc.DocumentElement, Module, PortalId, TabId);
                                    }
                                    Response.Redirect(Globals.NavigateURL(), true);
                                }
                                else
                                {
                                    strMessage = Localization.GetString("NotCorrectType", LocalResourceFile);
                                }
                            }
                        }
                        else
                        {
                            strMessage = Localization.GetString("ImportNotSupported", LocalResourceFile);
                        }
                    }
                    catch
                    {
                        strMessage = Localization.GetString("Error", LocalResourceFile);
                    }
                }
                else
                {
                    strMessage = Localization.GetString("ImportNotSupported", LocalResourceFile);
                }
            }
            return strMessage;
        }]]></body>
          </codeblock>
        </method>
        <method name="OnFilesIndexChanged">
          <declaration><![CDATA[protected void OnFilesIndexChanged(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="222" sc="9" el="245" ec="10">admin\Modules\Import.ascx.cs</location>
            <body hash="7c7f60dbb90b0549a24406b2017bb313"><![CDATA[{
            if (cboFolders.SelectedItem == null) return;
            var folder = FolderManager.Instance.GetFolder(cboFolders.SelectedItemValueAsInt);
            if (folder == null) return;

	        if (string.IsNullOrEmpty(cboFiles.SelectedValue) || cboFiles.SelectedValue == "-")
	        {
				txtContent.Text = string.Empty;
		        return;
	        }
	        try
	        {
				var fileId = Convert.ToInt32(cboFiles.SelectedValue);
		        var file = DotNetNuke.Services.FileSystem.FileManager.Instance.GetFile(fileId);
				using (var streamReader = new StreamReader(DotNetNuke.Services.FileSystem.FileManager.Instance.GetFileContent(file)))
				{
					txtContent.Text = streamReader.ReadToEnd();
				}
	        }
	        catch (Exception)
	        {
		        txtContent.Text = string.Empty;
	        }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnFoldersIndexChanged">
          <declaration><![CDATA[protected void OnFoldersIndexChanged(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="185" sc="9" el="219" ec="10">admin\Modules\Import.ascx.cs</location>
            <body hash="5a8b7650c6b6ffed00fd3841c21918e0"><![CDATA[{
            cboFiles.Items.Clear();
            cboFiles.InsertItem(0, "<" + Localization.GetString("None_Specified") + ">", "-");
            if (cboFolders.SelectedItem == null)
            {
                return;
            }
            if (Module == null)
            {
                return;
            }

            var folder = FolderManager.Instance.GetFolder(cboFolders.SelectedItemValueAsInt);
            if (folder == null) return;

            var files = Globals.GetFileList(PortalId, "xml", false, folder.FolderPath);
            foreach (FileItem file in files)
            {
				if (file.Text.IndexOf("content." + Globals.CleanName(Module.DesktopModule.ModuleName) + ".", System.StringComparison.Ordinal) != -1)
                {
					cboFiles.AddItem(file.Text.Replace("content." + Globals.CleanName(Module.DesktopModule.ModuleName) + ".", ""), file.Value);
                }

                //legacy support for files which used the FriendlyName
                if (Globals.CleanName(Module.DesktopModule.ModuleName) == Globals.CleanName(Module.DesktopModule.FriendlyName))
                {
                    continue;
                }

				if (file.Text.IndexOf("content." + Globals.CleanName(Module.DesktopModule.FriendlyName) + ".", System.StringComparison.Ordinal) != -1)
                {
					cboFiles.AddItem(file.Text.Replace("content." + Globals.CleanName(Module.DesktopModule.FriendlyName) + ".", ""), file.Value);
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnImportClick">
          <declaration><![CDATA[protected void OnImportClick(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="248" sc="9" el="268" ec="10">admin\Modules\Import.ascx.cs</location>
            <body hash="3269e4746bf8156087e2df0029e7ad59"><![CDATA[{
            try
            {
                if (Module != null)
                {
                    var strMessage = ImportModule();
                    if (String.IsNullOrEmpty(strMessage))
                    {
                        Response.Redirect(ReturnURL, true);
                    }
                    else
                    {
                        UI.Skins.Skin.AddModuleMessage(this, strMessage, ModuleMessage.ModuleMessageType.RedError);
                    }
                }
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="146" sc="9" el="159" ec="10">admin\Modules\Import.ascx.cs</location>
            <body hash="69bb57b886586a616ff5f6ebf07666ed"><![CDATA[{
            base.OnInit(e);

            if (Request.QueryString["moduleid"] != null)
            {
                Int32.TryParse(Request.QueryString["moduleid"], out ModuleId);
            }

            //Verify that the current user has access to edit this module
            if (!ModulePermissionController.HasModuleAccess(SecurityAccessLevel.Edit, "IMPORT", Module))
            {
                Response.Redirect(Globals.AccessDeniedURL(), true);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="162" sc="9" el="182" ec="10">admin\Modules\Import.ascx.cs</location>
            <body hash="4fa1364b6ac8f3740e98800dd772f7b8"><![CDATA[{
            base.OnLoad(e);

            cboFolders.SelectionChanged += OnFoldersIndexChanged;
            cboFiles.SelectedIndexChanged += OnFilesIndexChanged;
            cmdImport.Click += OnImportClick;

            try
            {
                if (!Page.IsPostBack)
                {
                    cmdCancel.NavigateUrl = ReturnURL;
                    cboFolders.UndefinedItem = new ListItem("<" + Localization.GetString("None_Specified") + ">", string.Empty);
                    cboFolders.Services.Parameters.Add("permission", "ADD");
                }
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_module">
          <declaration><![CDATA[private ModuleInfo _module;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cboFiles">
          <declaration><![CDATA[protected DnnComboBox cboFiles;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cboFolders">
          <declaration><![CDATA[protected DnnFolderDropDownList cboFolders;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdCancel">
          <declaration><![CDATA[protected HyperLink cmdCancel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdImport">
          <declaration><![CDATA[protected LinkButton cmdImport;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ModuleId">
          <declaration><![CDATA[private new int ModuleId = -1;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plFile">
          <declaration><![CDATA[protected LabelControl plFile;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plFolder">
          <declaration><![CDATA[protected LabelControl plFolder;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtContent">
          <declaration><![CDATA[protected TextBox txtContent;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="Module">
          <declaration><![CDATA[private ModuleInfo Module]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="60" sc="13" el="62" ec="14">admin\Modules\Import.ascx.cs</location>
            <body hash="99c0dddcf239f2d554d4042b5a9d2ba8"><![CDATA[{
                return _module ?? (_module = ModuleController.Instance.GetModule(ModuleId, TabId, false));
            }]]></body>
          </codeblock>
        </property>
        <property name="ReturnURL">
          <declaration><![CDATA[private string ReturnURL]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="68" sc="13" el="70" ec="14">admin\Modules\Import.ascx.cs</location>
            <body hash="886024cc288178771d5df7a287e8cdef"><![CDATA[{
                return UrlUtils.ValidReturnUrl(Request.Params["ReturnURL"]) ?? Globals.NavigateURL();
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="ModulePermissions">
      <declaration><![CDATA[public class ModulePermissions : PortalModuleBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private int _moduleId = -1;]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="68" sc="9" el="68" ec="36">admin\Modules\ModulePermissions.ascx.cs</location>
            <body hash="ff6ed5765a819dbc529d8366ad5259da"><![CDATA[private int _moduleId = -1]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="89" sc="9" el="103" ec="10">admin\Modules\ModulePermissions.ascx.cs</location>
            <body hash="eb4404d0785182f513bb2e8c32233244"><![CDATA[{
            base.OnInit(e);

            //get ModuleId
            if ((Request.QueryString["ModuleId"] != null))
            {
                _moduleId = Int32.Parse(Request.QueryString["ModuleId"]);
            }

            //Verify that the current user has access to edit this module
            if (!ModulePermissionController.HasModuleAccess(SecurityAccessLevel.ViewPermissions, String.Empty, Module))
            {
                Response.Redirect(Globals.AccessDeniedURL(), true);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="106" sc="9" el="131" ec="10">admin\Modules\ModulePermissions.ascx.cs</location>
            <body hash="24de7a5a151b39bc9c2914e11b502d19"><![CDATA[{
            base.OnLoad(e);

            cmdUpdate.Click += OnUpdateClick;

            try
            {
                cancelHyperLink.NavigateUrl = ReturnURL;

                if (Page.IsPostBack == false)
                {
                    dgPermissions.TabId = PortalSettings.ActiveTab.TabID;
                    dgPermissions.ModuleID = _moduleId;

                    if (Module != null)
                    {
                        cmdUpdate.Visible = ModulePermissionController.HasModulePermission(Module.ModulePermissions, "EDIT,MANAGE") || TabPermissionController.CanAddContentToPage();
                        permissionsRow.Visible = ModulePermissionController.CanAdminModule(Module) || TabPermissionController.CanAddContentToPage();
                    }
                }
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnUpdateClick">
          <declaration><![CDATA[protected void OnUpdateClick(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="134" sc="9" el="152" ec="10">admin\Modules\ModulePermissions.ascx.cs</location>
            <body hash="b2db4a79ff0b95e052589515db8c8995"><![CDATA[{
            try
            {
                if (Page.IsValid)
                {
                    Module.ModulePermissions.Clear();
                    Module.ModulePermissions.AddRange(dgPermissions.Permissions);

                    ModulePermissionController.SaveModulePermissions(Module);

                    //Navigate back to admin page
                    Response.Redirect(ReturnURL, true);
                }
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_module">
          <declaration><![CDATA[private ModuleInfo _module;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_moduleId">
          <declaration><![CDATA[private int _moduleId = -1;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cancelHyperLink">
          <declaration><![CDATA[protected HyperLink cancelHyperLink;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdUpdate">
          <declaration><![CDATA[protected LinkButton cmdUpdate;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="dgPermissions">
          <declaration><![CDATA[protected ModulePermissionsGrid dgPermissions;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="permissionsRow">
          <declaration><![CDATA[protected HtmlGenericControl permissionsRow;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="Module">
          <declaration><![CDATA[private ModuleInfo Module]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ReturnURL">
          <declaration><![CDATA[private string ReturnURL]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="79" sc="13" el="81" ec="14">admin\Modules\ModulePermissions.ascx.cs</location>
            <body hash="886024cc288178771d5df7a287e8cdef"><![CDATA[{
                return UrlUtils.ValidReturnUrl(Request.Params["ReturnURL"]) ?? Globals.NavigateURL();
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="ModuleSettingsPage">
      <declaration><![CDATA[public class ModuleSettingsPage : PortalModuleBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private int _moduleId = -1;]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="67" sc="9" el="67" ec="36">admin\Modules\Modulesettings.ascx.cs</location>
            <body hash="ff6ed5765a819dbc529d8366ad5259da"><![CDATA[private int _moduleId = -1]]></body>
          </codeblock>
        </constructor>
        <constructor name=".cctor">
          <declaration><![CDATA[static ModuleSettingsPage()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="63" sc="9" el="63" ec="107">admin\Modules\Modulesettings.ascx.cs</location>
            <body hash="f8a1f0d69b7073b7b6ce6292e84c148f"><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof(ModuleSettingsPage))]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="BindContainers">
          <declaration><![CDATA[private void BindContainers()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="195" sc="9" el="202" ec="10">admin\Modules\Modulesettings.ascx.cs</location>
            <body hash="4b4a158e6abd1522a81bd07948840248"><![CDATA[{
            moduleContainerCombo.PortalId = PortalId;
            moduleContainerCombo.RootPath = SkinController.RootContainer;
            moduleContainerCombo.Scope = SkinScope.All;
            moduleContainerCombo.IncludeNoneSpecificItem = true;
            moduleContainerCombo.NoneSpecificText = "<" + Localization.GetString("None_Specified") + ">";
            moduleContainerCombo.SelectedValue = Module.ContainerSrc;
        }]]></body>
          </codeblock>
        </method>
        <method name="BindData">
          <declaration><![CDATA[private void BindData()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="97" sc="9" el="192" ec="10">admin\Modules\Modulesettings.ascx.cs</location>
            <body hash="db0c17e6fea753af41e32ee4f10ef21b"><![CDATA[{
            if (Module != null)
            {
                var desktopModule = DesktopModuleController.GetDesktopModule(Module.DesktopModuleID, PortalId);
                dgPermissions.ResourceFile = Globals.ApplicationPath + "/DesktopModules/" + desktopModule.FolderName + "/" + Localization.LocalResourceDirectory + "/" +
                                             Localization.LocalSharedResourceFile;
                if (!Module.IsShared)
                {
                    chkInheritPermissions.Checked = Module.InheritViewPermissions;
                    dgPermissions.InheritViewPermissionsFromTab = Module.InheritViewPermissions;
                }
                txtFriendlyName.Text = Module.DesktopModule.FriendlyName;
                txtTitle.Text = Module.ModuleTitle;
                ctlIcon.Url = Module.IconFile;

                if (cboTab.FindItemByValue(Module.TabID.ToString()) != null)
                {
                    cboTab.FindItemByValue(Module.TabID.ToString()).Selected = true;
                }

                rowTab.Visible = cboTab.Items.Count != 1;
                chkAllTabs.Checked = Module.AllTabs;
                trnewPages.Visible = chkAllTabs.Checked;
                allowIndexRow.Visible = desktopModule.IsSearchable;
                chkAllowIndex.Checked = Settings["AllowIndex"] == null || Settings["AllowIndex"] != null && bool.Parse(Settings["AllowIndex"].ToString());
                txtMoniker.Text = (string)Settings["Moniker"] ?? "";

                cboVisibility.SelectedIndex = (int)Module.Visibility;
                chkAdminBorder.Checked = Settings["hideadminborder"] != null && bool.Parse(Settings["hideadminborder"].ToString());

                var objModuleDef = ModuleDefinitionController.GetModuleDefinitionByID(Module.ModuleDefID);
                if (objModuleDef.DefaultCacheTime == Null.NullInteger)
                {
                    cacheWarningRow.Visible = true;
                    txtCacheDuration.Text = Module.CacheTime.ToString();
                }
                else
                {
                    cacheWarningRow.Visible = false;
                    txtCacheDuration.Text = Module.CacheTime.ToString();
                }
                BindModuleCacheProviderList();

                ShowCacheRows();

                cboAlign.Items.FindByValue(Module.Alignment).Selected = true;
                txtColor.Text = Module.Color;
                txtBorder.Text = Module.Border;

                txtHeader.Text = Module.Header;
                txtFooter.Text = Module.Footer;

                if (!Null.IsNull(Module.StartDate))
                {
                    startDatePicker.SelectedDate = Module.StartDate;
                }
				if (!Null.IsNull(Module.EndDate) && Module.EndDate <= endDatePicker.MaxDate)
                {
                    endDatePicker.SelectedDate = Module.EndDate;
                }

                BindContainers();

                chkDisplayTitle.Checked = Module.DisplayTitle;
                chkDisplayPrint.Checked = Module.DisplayPrint;
                chkDisplaySyndicate.Checked = Module.DisplaySyndicate;

                chkWebSlice.Checked = Module.IsWebSlice;
                webSliceTitle.Visible = Module.IsWebSlice;
                webSliceExpiry.Visible = Module.IsWebSlice;
                webSliceTTL.Visible = Module.IsWebSlice;

                txtWebSliceTitle.Text = Module.WebSliceTitle;
                if (!Null.IsNull(Module.WebSliceExpiryDate))
                {
                    diWebSliceExpiry.SelectedDate = Module.WebSliceExpiryDate;
                }
                if (!Null.IsNull(Module.WebSliceTTL))
                {
                    txtWebSliceTTL.Text = Module.WebSliceTTL.ToString();
                }
                if (Module.ModuleID == PortalSettings.Current.DefaultModuleId && Module.TabID == PortalSettings.Current.DefaultTabId)
                {
                    chkDefault.Checked = true;
                }

                if (!Module.IsShared && Module.DesktopModule.Shareable != ModuleSharing.Unsupported)
                {
                    isShareableCheckBox.Checked = Module.IsShareable;
                    isShareableViewOnlyCheckBox.Checked = Module.IsShareableViewOnly;
                    isShareableRow.Visible = true;

                    chkInheritPermissions.Visible = true;
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="BindModuleCacheProviderList">
          <declaration><![CDATA[private void BindModuleCacheProviderList()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="205" sc="9" el="225" ec="10">admin\Modules\Modulesettings.ascx.cs</location>
            <body hash="7732261cb6992d242c532c6c49957c8c"><![CDATA[{
            cboCacheProvider.DataSource = GetFilteredProviders(ModuleCachingProvider.GetProviderList(), "ModuleCachingProvider");
            cboCacheProvider.DataBind();

            //cboCacheProvider.Items.Insert(0, new ListItem(Localization.GetString("None_Specified"), ""));
            cboCacheProvider.InsertItem(0, Localization.GetString("None_Specified"), "");

            //if (!string.IsNullOrEmpty(Module.GetEffectiveCacheMethod()) && cboCacheProvider.Items.FindByValue(Module.GetEffectiveCacheMethod()) != null)
            if (!string.IsNullOrEmpty(Module.GetEffectiveCacheMethod()) && cboCacheProvider.FindItemByValue(Module.GetEffectiveCacheMethod()) != null)
            {
                //cboCacheProvider.Items.FindByValue(Module.GetEffectiveCacheMethod()).Selected = true;
                cboCacheProvider.FindItemByValue(Module.GetEffectiveCacheMethod()).Selected = true;
            }
            else
            {
                //select the None Specified value
                cboCacheProvider.Items[0].Selected = true;
            }

            lblCacheInherited.Visible = Module.CacheMethod != Module.GetEffectiveCacheMethod();
        }]]></body>
          </codeblock>
        </method>
        <method name="GetFilteredProviders">
          <declaration><![CDATA[private IEnumerable GetFilteredProviders<T>(Dictionary<string, T> providerList, string keyFilter)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="228" sc="9" el="232" ec="10">admin\Modules\Modulesettings.ascx.cs</location>
            <body hash="5f3289b95a30b5d70349a44df6c812de"><![CDATA[{
            var providers = from provider in providerList let filteredkey = provider.Key.Replace(keyFilter, String.Empty) select new { filteredkey, provider.Key };

            return providers;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetInstalledOnLink">
          <declaration><![CDATA[protected string GetInstalledOnLink(object dataItem)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="244" sc="9" el="279" ec="10">admin\Modules\Modulesettings.ascx.cs</location>
            <body hash="306cd7376933a99e81902cf2ea45f0c7"><![CDATA[{
            var returnValue = new StringBuilder();
            var tab = dataItem as TabInfo;
            if (tab != null)
            {
                var index = 0;
                TabController.Instance.PopulateBreadCrumbs(ref tab);
                var defaultAlias = PortalAliasController.Instance.GetPortalAliasesByPortalId(tab.PortalID)
                                        .OrderByDescending(a => a.IsPrimary)
                                        .FirstOrDefault();
                var portalSettings = new PortalSettings(tab.PortalID)
                                         {
                                             PortalAlias = defaultAlias
                                         };

                var tabUrl = Globals.NavigateURL(tab.TabID, portalSettings, string.Empty);

                foreach (TabInfo t in tab.BreadCrumbs)
                {
                    if (index > 0)
                    {
                        returnValue.Append(" > ");
                    }
                    if (tab.BreadCrumbs.Count - 1 == index)
                    {
                        returnValue.AppendFormat("<a href=\"{0}\">{1}</a>", tabUrl, t.LocalizedTabName);
                    }
                    else
                    {
                        returnValue.AppendFormat("{0}", t.LocalizedTabName);
                    }
                    index = index + 1;
                }
            }
            return returnValue.ToString();
        }]]></body>
          </codeblock>
        </method>
        <method name="GetInstalledOnSite">
          <declaration><![CDATA[protected string GetInstalledOnSite(object dataItem)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="282" sc="9" el="294" ec="10">admin\Modules\Modulesettings.ascx.cs</location>
            <body hash="a98ad85d8f8cd4d515541c263d675412"><![CDATA[{
            string returnValue = String.Empty;
            var tab = dataItem as TabInfo;
            if (tab != null)
            {
                var portal = PortalController.Instance.GetPortal(tab.PortalID);
                if (portal != null)
                {
                    returnValue = portal.PortalName;
                }
            }
            return returnValue;
        }]]></body>
          </codeblock>
        </method>
        <method name="IsSharedViewOnly">
          <declaration><![CDATA[protected bool IsSharedViewOnly()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="297" sc="9" el="299" ec="10">admin\Modules\Modulesettings.ascx.cs</location>
            <body hash="7b9a98127a56481cca78081e4f50b17b"><![CDATA[{
            return ModuleContext.Configuration.IsShared && ModuleContext.Configuration.IsShareableViewOnly;
        }]]></body>
          </codeblock>
        </method>
        <method name="OnAllTabsCheckChanged">
          <declaration><![CDATA[protected void OnAllTabsCheckChanged(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="480" sc="9" el="482" ec="10">admin\Modules\Modulesettings.ascx.cs</location>
            <body hash="f0e99ddb3f712243e8a800435ca5ffb5"><![CDATA[{
            trnewPages.Visible = chkAllTabs.Checked;
        }]]></body>
          </codeblock>
        </method>
        <method name="OnCacheProviderIndexChanged">
          <declaration><![CDATA[protected void OnCacheProviderIndexChanged(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="485" sc="9" el="487" ec="10">admin\Modules\Modulesettings.ascx.cs</location>
            <body hash="bc47e203c9d72cff366e8aaed4ad12f3"><![CDATA[{
            ShowCacheRows();
        }]]></body>
          </codeblock>
        </method>
        <method name="OnDeleteClick">
          <declaration><![CDATA[protected void OnDeleteClick(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="490" sc="9" el="500" ec="10">admin\Modules\Modulesettings.ascx.cs</location>
            <body hash="2b66a0b7d448a80c05a84e9d98fd1411"><![CDATA[{
            try
            {
                ModuleController.Instance.DeleteTabModule(TabId, _moduleId, true);
                Response.Redirect(ReturnURL, true);
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInheritPermissionsChanged">
          <declaration><![CDATA[protected void OnInheritPermissionsChanged(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="503" sc="9" el="505" ec="10">admin\Modules\Modulesettings.ascx.cs</location>
            <body hash="e968bc017ebef842c00fcff5a13dd978"><![CDATA[{
            dgPermissions.InheritViewPermissionsFromTab = chkInheritPermissions.Checked;
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="306" sc="9" el="374" ec="10">admin\Modules\Modulesettings.ascx.cs</location>
            <body hash="85db2015ec92c1bc90e8bdd7dec3d605"><![CDATA[{
            base.OnInit(e);
            try
            {
                chkAllTabs.CheckedChanged += OnAllTabsCheckChanged;
                chkInheritPermissions.CheckedChanged += OnInheritPermissionsChanged;
                chkWebSlice.CheckedChanged += OnWebSliceCheckChanged;
                cboCacheProvider.TextChanged += OnCacheProviderIndexChanged;
                cmdDelete.Click += OnDeleteClick;
                cmdUpdate.Click += OnUpdateClick;
                dgOnTabs.NeedDataSource += OnPagesGridNeedDataSource;

			    JavaScript.RequestRegistration(CommonJs.DnnPlugins);

                //get ModuleId
                if ((Request.QueryString["ModuleId"] != null))
                {
                    _moduleId = Int32.Parse(Request.QueryString["ModuleId"]);
                }
                if (Module.ContentItemId == Null.NullInteger && Module.ModuleID != Null.NullInteger)
                {
                    //This tab does not have a valid ContentItem
                    ModuleController.Instance.CreateContentItem(Module);

                    ModuleController.Instance.UpdateModule(Module);
                }

                //Verify that the current user has access to edit this module
                if (!ModulePermissionController.HasModuleAccess(SecurityAccessLevel.Edit, "MANAGE", Module))
                {
                    if (!(IsSharedViewOnly() && TabPermissionController.CanAddContentToPage()))
                    {
                        Response.Redirect(Globals.AccessDeniedURL(), true);
                    }
                }
                if (Module != null)
                {
                    //get module
                    TabModuleId = Module.TabModuleID;

                    //get Settings Control
                    ModuleControlInfo moduleControlInfo = ModuleControlController.GetModuleControlByControlKey("Settings", Module.ModuleDefID);

                    if (moduleControlInfo != null)
                    {
                    
                        _control = ModuleControlFactory.LoadSettingsControl(Page, Module, moduleControlInfo.ControlSrc);

                        var settingsControl = _control as ISettingsControl;
                        if (settingsControl != null)
                        {
                            hlSpecificSettings.Text = Localization.GetString("ControlTitle_settings",
                                settingsControl.LocalResourceFile);
                            if (String.IsNullOrEmpty(hlSpecificSettings.Text))
                            {
                                hlSpecificSettings.Text =
                                    String.Format(Localization.GetString("ControlTitle_settings", LocalResourceFile),
                                        Module.DesktopModule.FriendlyName);
                            }
                            pnlSpecific.Controls.Add(_control);
                        }
                    }
                }
            }
            catch (Exception err)
            {
                Exceptions.ProcessModuleLoadException(this, err);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="377" sc="9" el="477" ec="10">admin\Modules\Modulesettings.ascx.cs</location>
            <body hash="8550a1269a264f37ebcbc0cd6b365d93"><![CDATA[{
            base.OnLoad(e);

            try
            {
                cancelHyperLink.NavigateUrl = ReturnURL;

                if (_moduleId != -1)
                {
                    ctlAudit.Entity = Module;
                }
                if (Page.IsPostBack == false)
                {
                    ctlIcon.FileFilter = Globals.glbImageFileTypes;

                    dgPermissions.TabId = PortalSettings.ActiveTab.TabID;
                    dgPermissions.ModuleID = _moduleId;


                    cboTab.DataSource = TabController.GetPortalTabs(PortalId, -1, false, Null.NullString, true, false, true, false, true);
                    cboTab.DataBind();

                    //if tab is a  host tab, then add current tab
                    if (Globals.IsHostTab(PortalSettings.ActiveTab.TabID))
                    {
                        cboTab.InsertItem(0, PortalSettings.ActiveTab.LocalizedTabName, PortalSettings.ActiveTab.TabID.ToString());
                    }
                    if (Module != null)
                    {
                        if (cboTab.FindItemByValue(Module.TabID.ToString()) == null)
                        {
                            var objTab = TabController.Instance.GetTab(Module.TabID, Module.PortalID, false);
                            cboTab.AddItem(objTab.LocalizedTabName, objTab.TabID.ToString());
                        }
                    }

                    //only Portal Administrators can manage the visibility on all Tabs
                    rowAllTabs.Visible = PortalSecurity.IsInRole("Administrators");

                    //tab administrators can only manage their own tab
                    if (!TabPermissionController.CanAdminPage())
                    {
                        chkNewTabs.Enabled = false;
                        chkDefault.Enabled = false;
                        chkAllModules.Enabled = false;
                        chkAllowIndex.Enabled = false;
                        cboTab.Enabled = false;
                    }
                    if (_moduleId != -1)
                    {
                        BindData();
                        cmdDelete.Visible = ModulePermissionController.CanDeleteModule(Module) || TabPermissionController.CanAddContentToPage();
                    }
                    else
                    {
                        isShareableCheckBox.Checked = true;
                        isShareableViewOnlyCheckBox.Checked = true;
                        isShareableRow.Visible = true;

                        cboVisibility.SelectedIndex = 0; //maximized
                        chkAllTabs.Checked = false;
                        cmdDelete.Visible = false;
                    }
                    if (Module != null)
                    {
                        cmdUpdate.Visible = ModulePermissionController.HasModulePermission(Module.ModulePermissions, "EDIT,MANAGE") || TabPermissionController.CanAddContentToPage();
                        permissionsRow.Visible = ModulePermissionController.CanAdminModule(Module) || TabPermissionController.CanAddContentToPage();
                    }

                    //Set visibility of Specific Settings
                    if (SettingsControl == null == false)
                    {
                        //Get the module settings from the PortalSettings and pass the
                        //two settings hashtables to the sub control to process
                        SettingsControl.LoadSettings();
                        specificSettingsTab.Visible = true;
                        fsSpecific.Visible = true;
                    }
                    else
                    {
                        specificSettingsTab.Visible = false;
                        fsSpecific.Visible = false;
                    }

                    if (Module != null)
                    {
                        termsSelector.PortalId = Module.PortalID;
                        termsSelector.Terms = Module.Terms;
                    }
                    termsSelector.DataBind();
                }
                if (Module != null)
                {
                    cultureLanguageLabel.Language = Module.CultureCode;
                }
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnPagesGridNeedDataSource">
          <declaration><![CDATA[protected void OnPagesGridNeedDataSource(object sender, GridNeedDataSourceEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="508" sc="9" el="512" ec="10">admin\Modules\Modulesettings.ascx.cs</location>
            <body hash="a785f1c8c407c253feb4bfa5fe287540"><![CDATA[{
            var tabsByModule = TabController.Instance.GetTabsByModuleID(_moduleId);
            tabsByModule.Remove(TabId);
            dgOnTabs.DataSource = tabsByModule.Values;
        }]]></body>
          </codeblock>
        </method>
        <method name="OnUpdateClick">
          <declaration><![CDATA[protected void OnUpdateClick(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="515" sc="9" el="723" ec="10">admin\Modules\Modulesettings.ascx.cs</location>
            <body hash="fb78ba457e59392d56358903d232eea7"><![CDATA[{
            try
            {
                if (Page.IsValid)
                {
                    var allTabsChanged = false;
                    //TODO: REMOVE IF UNUSED
                    //var allowIndexChanged = false;

                    //tab administrators can only manage their own tab
                    if (!TabPermissionController.CanAdminPage())
                    {
                        chkAllTabs.Enabled = false;
                        chkNewTabs.Enabled = false;
                        chkDefault.Enabled = false;
                        chkAllModules.Enabled = false;
                        chkAllowIndex.Enabled = false;
                        cboTab.Enabled = false;
                    }
                    Module.ModuleID = _moduleId;
                    Module.ModuleTitle = txtTitle.Text;
                    Module.Alignment = cboAlign.SelectedItem.Value;
                    Module.Color = txtColor.Text;
                    Module.Border = txtBorder.Text;
                    Module.IconFile = ctlIcon.Url;
                    Module.CacheTime = !String.IsNullOrEmpty(txtCacheDuration.Text)
                                            ? Int32.Parse(txtCacheDuration.Text)
                                            : 0;
                    Module.CacheMethod = cboCacheProvider.SelectedValue;
                    Module.TabID = TabId;
                    if (Module.AllTabs != chkAllTabs.Checked)
                    {
                        allTabsChanged = true;
                    }
                    Module.AllTabs = chkAllTabs.Checked;

                    // collect these first as any settings update will clear the cache
                    var originalChecked = Settings["hideadminborder"] != null && bool.Parse(Settings["hideadminborder"].ToString());
                    var allowIndex = Settings.ContainsKey("AllowIndex") && Convert.ToBoolean(Settings["AllowIndex"]);
                    var oldMoniker = ((string)Settings["Moniker"] ?? "").TrimToLength(100);
                    var newMoniker = txtMoniker.Text.TrimToLength(100);
                    if (!oldMoniker.Equals(txtMoniker.Text))
                    {
                        var ids = TabModulesController.Instance.GetTabModuleIdsBySetting("Moniker", newMoniker);
                        if (ids != null && ids.Count > 0)
                        {
                            //Warn user - duplicate moniker value
                            Skin.AddModuleMessage(this, Localization.GetString("MonikerExists", LocalResourceFile), ModuleMessage.ModuleMessageType.RedError);
                            return;
                        }
                        ModuleController.Instance.UpdateTabModuleSetting(Module.TabModuleID, "Moniker", newMoniker);
                    }

                    if (originalChecked != chkAdminBorder.Checked)
                    {
                        ModuleController.Instance.UpdateTabModuleSetting(Module.TabModuleID, "hideadminborder", chkAdminBorder.Checked.ToString());
                    }

                    //check whether allow index value is changed
                    if (allowIndex != chkAllowIndex.Checked)
                    {
                        ModuleController.Instance.UpdateTabModuleSetting(Module.TabModuleID, "AllowIndex", chkAllowIndex.Checked.ToString());
                    }

                    switch (Int32.Parse(cboVisibility.SelectedItem.Value))
                    {
                        case 0:
                            Module.Visibility = VisibilityState.Maximized;
                            break;
                        case 1:
                            Module.Visibility = VisibilityState.Minimized;
                            break;
                        //case 2:
                        default:
                            Module.Visibility = VisibilityState.None;
                            break;
                    }

                    Module.IsDeleted = false;
                    Module.Header = txtHeader.Text;
                    Module.Footer = txtFooter.Text;

                    Module.StartDate = startDatePicker.SelectedDate != null
                                        ? startDatePicker.SelectedDate.Value
                                        : Null.NullDate;

                    Module.EndDate = endDatePicker.SelectedDate != null
                                        ? endDatePicker.SelectedDate.Value
                                        : Null.NullDate;

                    Module.ContainerSrc = moduleContainerCombo.SelectedValue;
                    Module.ModulePermissions.Clear();
                    Module.ModulePermissions.AddRange(dgPermissions.Permissions);
                    Module.Terms.Clear();
                    Module.Terms.AddRange(termsSelector.Terms);

                    if (!Module.IsShared)
                    {
                        Module.InheritViewPermissions = chkInheritPermissions.Checked;
                        Module.IsShareable = isShareableCheckBox.Checked;
                        Module.IsShareableViewOnly = isShareableViewOnlyCheckBox.Checked;
                    }

                    Module.DisplayTitle = chkDisplayTitle.Checked;
                    Module.DisplayPrint = chkDisplayPrint.Checked;
                    Module.DisplaySyndicate = chkDisplaySyndicate.Checked;
                    Module.IsWebSlice = chkWebSlice.Checked;
                    Module.WebSliceTitle = txtWebSliceTitle.Text;

                    Module.WebSliceExpiryDate = diWebSliceExpiry.SelectedDate != null
                                                ? diWebSliceExpiry.SelectedDate.Value
                                                : Null.NullDate;

                    if (!string.IsNullOrEmpty(txtWebSliceTTL.Text))
                    {
                        Module.WebSliceTTL = Convert.ToInt32(txtWebSliceTTL.Text);
                    }
                    Module.IsDefaultModule = chkDefault.Checked;
                    Module.AllModules = chkAllModules.Checked;
                    ModuleController.Instance.UpdateModule(Module);

                    //Update Custom Settings
                    if (SettingsControl != null)
                    {
                        try
                        {
                            SettingsControl.UpdateSettings();
                        }
                        catch (ThreadAbortException exc)
                        {
                            Logger.Debug(exc);

                            Thread.ResetAbort(); //necessary
                        }
                        catch (Exception ex)
                        {
                            Exceptions.LogException(ex);
                        }
                    }

                    //These Module Copy/Move statements must be 
                    //at the end of the Update as the Controller code assumes all the 
                    //Updates to the Module have been carried out.

                    //Check if the Module is to be Moved to a new Tab
                    if (!chkAllTabs.Checked)
                    {
                        var newTabId = Int32.Parse(cboTab.SelectedValue);
                        if (TabId != newTabId)
                        {
                            //First check if there already is an instance of the module on the target page
                            var tmpModule = ModuleController.Instance.GetModule(_moduleId, newTabId, false);
                            if (tmpModule == null)
                            {
                                //Move module
                                ModuleController.Instance.MoveModule(_moduleId, TabId, newTabId, Globals.glbDefaultPane);
                            }
                            else
                            {
                                //Warn user
                                Skin.AddModuleMessage(this, Localization.GetString("ModuleExists", LocalResourceFile), ModuleMessage.ModuleMessageType.RedError);
                                return;
                            }
                        }
                    }

                    //Check if Module is to be Added/Removed from all Tabs
                    if (allTabsChanged)
                    {
                        var listTabs = TabController.GetPortalTabs(PortalSettings.PortalId, Null.NullInteger, false, true);
                        if (chkAllTabs.Checked)
                        {
                            if (!chkNewTabs.Checked)
                            {
                                foreach (var destinationTab in listTabs)
                                {
                                    var module = ModuleController.Instance.GetModule(_moduleId, destinationTab.TabID, false);
                                    if (module != null)
                                    {
                                        if (module.IsDeleted)
                                        {
                                            ModuleController.Instance.RestoreModule(module);
                                        }
                                    }
                                    else
                                    {
                                        if (!PortalSettings.ContentLocalizationEnabled || (Module.CultureCode == destinationTab.CultureCode))
                                        {
                                            ModuleController.Instance.CopyModule(Module, destinationTab, Module.PaneName, true);
                                        }
                                    }
                                }
                            }
                        }
                        else
                        {
                            ModuleController.Instance.DeleteAllModules(_moduleId, TabId, listTabs, true, false, false);
                        }
                    }

                    //Navigate back to admin page
                    Response.Redirect(ReturnURL, true);
                }
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnWebSliceCheckChanged">
          <declaration><![CDATA[protected void OnWebSliceCheckChanged(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="726" sc="9" el="730" ec="10">admin\Modules\Modulesettings.ascx.cs</location>
            <body hash="0437a72c0c30d33f675e6f5de6515c0f"><![CDATA[{
            webSliceTitle.Visible = chkWebSlice.Checked;
            webSliceExpiry.Visible = chkWebSlice.Checked;
            webSliceTTL.Visible = chkWebSlice.Checked;
        }]]></body>
          </codeblock>
        </method>
        <method name="ShowCacheRows">
          <declaration><![CDATA[private void ShowCacheRows()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="235" sc="9" el="237" ec="10">admin\Modules\Modulesettings.ascx.cs</location>
            <body hash="a4f00155e8ee71c9f1b66cef801428c6"><![CDATA[{
            divCacheDuration.Visible = !string.IsNullOrEmpty(cboCacheProvider.SelectedValue);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_control">
          <declaration><![CDATA[private Control _control;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_module">
          <declaration><![CDATA[private ModuleInfo _module;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_moduleId">
          <declaration><![CDATA[private int _moduleId = -1;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="AllowIndexLabel">
          <declaration><![CDATA[protected LabelControl AllowIndexLabel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="allowIndexRow">
          <declaration><![CDATA[protected HtmlGenericControl allowIndexRow;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cacheWarningRow">
          <declaration><![CDATA[protected Panel cacheWarningRow;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cancelHyperLink">
          <declaration><![CDATA[protected HyperLink cancelHyperLink;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cboAlign">
          <declaration><![CDATA[protected RadioButtonList cboAlign;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cboCacheProvider">
          <declaration><![CDATA[protected DnnComboBox cboCacheProvider;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cboTab">
          <declaration><![CDATA[protected DnnComboBox cboTab;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cboVisibility">
          <declaration><![CDATA[protected RadioButtonList cboVisibility;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkAdminBorder">
          <declaration><![CDATA[protected CheckBox chkAdminBorder;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkAllModules">
          <declaration><![CDATA[protected CheckBox chkAllModules;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkAllowIndex">
          <declaration><![CDATA[protected CheckBox chkAllowIndex;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkAllTabs">
          <declaration><![CDATA[protected CheckBox chkAllTabs;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkDefault">
          <declaration><![CDATA[protected CheckBox chkDefault;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkDisplayPrint">
          <declaration><![CDATA[protected CheckBox chkDisplayPrint;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkDisplaySyndicate">
          <declaration><![CDATA[protected CheckBox chkDisplaySyndicate;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkDisplayTitle">
          <declaration><![CDATA[protected CheckBox chkDisplayTitle;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkInheritPermissions">
          <declaration><![CDATA[protected CheckBox chkInheritPermissions;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkNewTabs">
          <declaration><![CDATA[protected CheckBox chkNewTabs;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkWebSlice">
          <declaration><![CDATA[protected CheckBox chkWebSlice;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdDelete">
          <declaration><![CDATA[protected LinkButton cmdDelete;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdUpdate">
          <declaration><![CDATA[protected LinkButton cmdUpdate;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ctlAudit">
          <declaration><![CDATA[protected ModuleAuditControl ctlAudit;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ctlIcon">
          <declaration><![CDATA[protected DnnUrlControl ctlIcon;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cultureLabel">
          <declaration><![CDATA[protected LabelControl cultureLabel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cultureLanguageLabel">
          <declaration><![CDATA[protected DnnLanguageLabel cultureLanguageLabel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cultureRow">
          <declaration><![CDATA[protected HtmlGenericControl cultureRow;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="dgOnTabs">
          <declaration><![CDATA[protected DnnGrid dgOnTabs;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="dgPermissions">
          <declaration><![CDATA[protected ModulePermissionsGrid dgPermissions;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="divCacheDuration">
          <declaration><![CDATA[protected HtmlGenericControl divCacheDuration;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="diWebSliceExpiry">
          <declaration><![CDATA[protected DnnDatePicker diWebSliceExpiry;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="endDatePicker">
          <declaration><![CDATA[protected DnnDateTimePicker endDatePicker;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="fsSpecific">
          <declaration><![CDATA[protected HtmlGenericControl fsSpecific;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="hlSpecificSettings">
          <declaration><![CDATA[protected HyperLink hlSpecificSettings;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="isShareableCheckBox">
          <declaration><![CDATA[protected CheckBox isShareableCheckBox;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="isShareableLabel">
          <declaration><![CDATA[protected LabelControl isShareableLabel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="isShareableRow">
          <declaration><![CDATA[protected HtmlGenericControl isShareableRow;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="isShareableViewOnlyCheckBox">
          <declaration><![CDATA[protected CheckBox isShareableViewOnlyCheckBox;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="isShareableViewOnlyLabel">
          <declaration><![CDATA[protected LabelControl isShareableViewOnlyLabel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblCacheDuration">
          <declaration><![CDATA[protected LabelControl lblCacheDuration;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblCacheDurationWarning">
          <declaration><![CDATA[protected Label lblCacheDurationWarning;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblCacheInherited">
          <declaration><![CDATA[protected Label lblCacheInherited;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblCacheProvider">
          <declaration><![CDATA[protected LabelControl lblCacheProvider;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Logger">
          <declaration><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof(ModuleSettingsPage));]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="moduleContainerCombo">
          <declaration><![CDATA[protected DnnSkinComboBox moduleContainerCombo;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="permissionsRow">
          <declaration><![CDATA[protected HtmlGenericControl permissionsRow;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plAdminBorder">
          <declaration><![CDATA[protected LabelControl plAdminBorder;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plAlign">
          <declaration><![CDATA[protected LabelControl plAlign;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plAllModules">
          <declaration><![CDATA[protected LabelControl plAllModules;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plAllTabs">
          <declaration><![CDATA[protected LabelControl plAllTabs;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plBorder">
          <declaration><![CDATA[protected LabelControl plBorder;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plColor">
          <declaration><![CDATA[protected LabelControl plColor;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plDefault">
          <declaration><![CDATA[protected LabelControl plDefault;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plDisplayPrint">
          <declaration><![CDATA[protected LabelControl plDisplayPrint;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plDisplaySyndicate">
          <declaration><![CDATA[protected LabelControl plDisplaySyndicate;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plDisplayTitle">
          <declaration><![CDATA[protected LabelControl plDisplayTitle;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plEndDate">
          <declaration><![CDATA[protected LabelControl plEndDate;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plFooter">
          <declaration><![CDATA[protected LabelControl plFooter;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plFriendlyName">
          <declaration><![CDATA[protected LabelControl plFriendlyName;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plHeader">
          <declaration><![CDATA[protected LabelControl plHeader;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plIcon">
          <declaration><![CDATA[protected LabelControl plIcon;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plModuleContainer">
          <declaration><![CDATA[protected LabelControl plModuleContainer;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plMoniker">
          <declaration><![CDATA[protected LabelControl plMoniker;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plNewTabs">
          <declaration><![CDATA[protected LabelControl plNewTabs;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plStartDate">
          <declaration><![CDATA[protected LabelControl plStartDate;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plTab">
          <declaration><![CDATA[protected LabelControl plTab;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plTags">
          <declaration><![CDATA[protected LabelControl plTags;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plTitle">
          <declaration><![CDATA[protected LabelControl plTitle;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plVisibility">
          <declaration><![CDATA[protected LabelControl plVisibility;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plWebSlice">
          <declaration><![CDATA[protected LabelControl plWebSlice;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plWebSliceExpiry">
          <declaration><![CDATA[protected LabelControl plWebSliceExpiry;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plWebSliceTitle">
          <declaration><![CDATA[protected LabelControl plWebSliceTitle;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plWebSliceTTL">
          <declaration><![CDATA[protected LabelControl plWebSliceTTL;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="pnlSpecific">
          <declaration><![CDATA[protected Panel pnlSpecific;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="rowAllTabs">
          <declaration><![CDATA[protected HtmlGenericControl rowAllTabs;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="rowTab">
          <declaration><![CDATA[protected HtmlGenericControl rowTab;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="specificSettingsTab">
          <declaration><![CDATA[protected HtmlGenericControl specificSettingsTab;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="startDatePicker">
          <declaration><![CDATA[protected DnnDateTimePicker startDatePicker;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="termsSelector">
          <declaration><![CDATA[protected TermsSelector termsSelector;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="trnewPages">
          <declaration><![CDATA[protected HtmlGenericControl trnewPages;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtBorder">
          <declaration><![CDATA[protected TextBox txtBorder;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtCacheDuration">
          <declaration><![CDATA[protected TextBox txtCacheDuration;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtColor">
          <declaration><![CDATA[protected TextBox txtColor;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtFooter">
          <declaration><![CDATA[protected TextBox txtFooter;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtFriendlyName">
          <declaration><![CDATA[protected TextBox txtFriendlyName;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtHeader">
          <declaration><![CDATA[protected TextBox txtHeader;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtMoniker">
          <declaration><![CDATA[protected TextBox txtMoniker;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtTitle">
          <declaration><![CDATA[protected TextBox txtTitle;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtWebSliceTitle">
          <declaration><![CDATA[protected TextBox txtWebSliceTitle;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtWebSliceTTL">
          <declaration><![CDATA[protected TextBox txtWebSliceTTL;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="valBorder">
          <declaration><![CDATA[protected CompareValidator valBorder;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="valCacheTime">
          <declaration><![CDATA[protected CompareValidator valCacheTime;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="valWebSliceExpiry">
          <declaration><![CDATA[protected CompareValidator valWebSliceExpiry;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="valWebSliceTTL">
          <declaration><![CDATA[protected CompareValidator valWebSliceTTL;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="webSliceExpiry">
          <declaration><![CDATA[protected HtmlGenericControl webSliceExpiry;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="webSliceTitle">
          <declaration><![CDATA[protected HtmlGenericControl webSliceTitle;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="webSliceTTL">
          <declaration><![CDATA[protected HtmlGenericControl webSliceTTL;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="Module">
          <declaration><![CDATA[private ModuleInfo Module]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ReturnURL">
          <declaration><![CDATA[private string ReturnURL]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="87" sc="13" el="89" ec="14">admin\Modules\Modulesettings.ascx.cs</location>
            <body hash="886024cc288178771d5df7a287e8cdef"><![CDATA[{
                return UrlUtils.ValidReturnUrl(Request.Params["ReturnURL"]) ?? Globals.NavigateURL();
            }]]></body>
          </codeblock>
        </property>
        <property name="SettingsControl">
          <declaration><![CDATA[private ISettingsControl SettingsControl]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="79" sc="13" el="81" ec="14">admin\Modules\Modulesettings.ascx.cs</location>
            <body hash="919bb4862e04c3eac040c148ee8d2432"><![CDATA[{
                return _control as ISettingsControl;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="ViewSource">
      <declaration><![CDATA[public class ViewSource : PortalModuleBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public ViewSource()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="BindFiles">
          <declaration><![CDATA[private void BindFiles(string controlSrc)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="78" sc="9" el="98" ec="10">admin\Modules\viewsource.ascx.cs</location>
            <body hash="9d986eeb27c166cfa72a34b5cb3f98ee"><![CDATA[{
            cboFile.Items.Clear();
            //cboFile.Items.Add(new ListItem(Localization.GetString("None_Specified"), "None"));
            //cboFile.Items.Add(new ListItem("User Control", "UserControl"));
            cboFile.AddItem(Localization.GetString("None_Specified"), "None");
            cboFile.AddItem("User Control", "UserControl");

            var srcPhysicalPath = Server.MapPath(controlSrc);
            if (File.Exists(srcPhysicalPath + ".vb") || File.Exists(srcPhysicalPath + ".cs"))
            {
                //cboFile.Items.Add(new ListItem("Code File", "CodeFile"));
                cboFile.AddItem("Code File", "CodeFile");
            }
            var fileName = Path.GetFileName(srcPhysicalPath);
            var folder = Path.GetDirectoryName(srcPhysicalPath);
            if (File.Exists(folder + "\\App_LocalResources\\" + fileName + ".resx"))
            {
                //cboFile.Items.Add(new ListItem("Resource File", "ResourceFile"));
                cboFile.AddItem("Resource File", "ResourceFile");
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="DisplayFile">
          <declaration><![CDATA[private void DisplayFile()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="129" sc="9" el="149" ec="10">admin\Modules\viewsource.ascx.cs</location>
            <body hash="aad6b19cccd7c0d176c17883f0a1e6ba"><![CDATA[{
            var objModuleControl = ModuleControlController.GetModuleControl(ModuleControlId);
            if (objModuleControl != null)
            {
                var srcVirtualPath = objModuleControl.ControlSrc;
                var srcFile = Null.NullString;
                var displaySource = cboFile.SelectedValue != "None";

                if (displaySource)
                {
                    srcFile = GetSourceFileName(srcVirtualPath);
                    lblSourceFile.Text = string.Format(Localization.GetString("SourceFile", LocalResourceFile), srcFile);

                    var objStreamReader = File.OpenText(srcFile);
                    txtSource.Text = objStreamReader.ReadToEnd();
                    objStreamReader.Close();
                }
                lblSourceFile.Visible = displaySource;
                trSource.Visible = displaySource;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetSourceFileName">
          <declaration><![CDATA[private string GetSourceFileName(string controlSrc)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="101" sc="9" el="126" ec="10">admin\Modules\viewsource.ascx.cs</location>
            <body hash="b0b26342b35429adcc4731f02e429066"><![CDATA[{
            var srcPhysicalPath = Server.MapPath(controlSrc);
            var srcFile = Null.NullString;
            switch (cboFile.SelectedValue)
            {
                case "UserControl":
                    srcFile = srcPhysicalPath;
                    break;
                case "CodeFile":
                    if (File.Exists(srcPhysicalPath + ".vb"))
                    {
                        srcFile = srcPhysicalPath + ".vb";
                    }
                    else if (File.Exists(srcPhysicalPath + ".cs"))
                    {
                        srcFile = srcPhysicalPath + ".cs";
                    }
                    break;
                case "ResourceFile":
                    var fileName = Path.GetFileName(srcPhysicalPath);
                    var folder = Path.GetDirectoryName(srcPhysicalPath);
                    srcFile = folder + "\\App_LocalResources\\" + fileName + ".resx";
                    break;
            }
            return srcFile;
        }]]></body>
          </codeblock>
        </method>
        <method name="OnFileIndexChanged">
          <declaration><![CDATA[protected void OnFileIndexChanged(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="185" sc="9" el="187" ec="10">admin\Modules\viewsource.ascx.cs</location>
            <body hash="304205dc8110914bdbe1f82468184942"><![CDATA[{
            DisplayFile();
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="156" sc="9" el="182" ec="10">admin\Modules\viewsource.ascx.cs</location>
            <body hash="df2531c087d5aeb3def6c1e2dceea936"><![CDATA[{
            base.OnLoad(e);

            cboFile.SelectedIndexChanged += OnFileIndexChanged;
            cmdUpdate.Click += OnUpdateClick;

            if (Page.IsPostBack == false)
            {
                cmdCancel.NavigateUrl = ReturnURL;

                var objModuleControl = ModuleControlController.GetModuleControl(ModuleControlId);
                if (objModuleControl != null)
                {
                    BindFiles(objModuleControl.ControlSrc);
                }
                if (Request.UrlReferrer != null)
                {
                    ViewState["UrlReferrer"] = Convert.ToString(Request.UrlReferrer);
                }
                else
                {
                    ViewState["UrlReferrer"] = "";
                }
            }
            cmdUpdate.Visible = CanEditSource;
            txtSource.Enabled = CanEditSource;
        }]]></body>
          </codeblock>
        </method>
        <method name="OnUpdateClick">
          <declaration><![CDATA[private void OnUpdateClick(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="190" sc="9" el="220" ec="10">admin\Modules\viewsource.ascx.cs</location>
            <body hash="3f3119b88af95a90f7481d97f300e1d1"><![CDATA[{
            try
            {
                if (cboFile.SelectedValue == "None")
                {
                    //No file type selected
                    UI.Skins.Skin.AddModuleMessage(this, Localization.GetString("NoFileTypeSelected", LocalResourceFile), ModuleMessage.ModuleMessageType.RedError);
                }
                else
                {
                    var objModuleControl = ModuleControlController.GetModuleControl(ModuleControlId);
                    if (objModuleControl != null)
                    {
                        var srcVirtualPath = objModuleControl.ControlSrc;
                        var srcPhysicalPath = GetSourceFileName(srcVirtualPath);
                        if (File.Exists(srcPhysicalPath))
                        {
                            File.SetAttributes(srcPhysicalPath, FileAttributes.Normal);
                            var objStream = File.CreateText(srcPhysicalPath);
                            objStream.WriteLine(txtSource.Text);
                            objStream.Close();
                        }
                    }
                    Response.Redirect(ReturnURL, true);
                }
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="cboFile">
          <declaration><![CDATA[protected DnnComboBox cboFile;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdCancel">
          <declaration><![CDATA[protected HyperLink cmdCancel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdUpdate">
          <declaration><![CDATA[protected LinkButton cmdUpdate;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblSourceFile">
          <declaration><![CDATA[protected Label lblSourceFile;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plFile">
          <declaration><![CDATA[protected LabelControl plFile;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plSource">
          <declaration><![CDATA[protected LabelControl plSource;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="trSource">
          <declaration><![CDATA[protected HtmlGenericControl trSource;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtSource">
          <declaration><![CDATA[protected TextBox txtSource;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="CanEditSource">
          <declaration><![CDATA[protected bool CanEditSource]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="47" sc="13" el="49" ec="14">admin\Modules\viewsource.ascx.cs</location>
            <body hash="d2b8eacbab9820b32802f28be0d70d61"><![CDATA[{
                return Request.IsLocal;
            }]]></body>
          </codeblock>
        </property>
        <property name="ModuleControlId">
          <declaration><![CDATA[protected int ModuleControlId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="55" sc="13" el="62" ec="14">admin\Modules\viewsource.ascx.cs</location>
            <body hash="b2f0e454edcdb8708604cbb8368e4cfd"><![CDATA[{
                var moduleControlId = Null.NullInteger;
                if ((Request.QueryString["ctlid"] != null))
                {
                    moduleControlId = Int32.Parse(Request.QueryString["ctlid"]);
                }
                return moduleControlId;
            }]]></body>
          </codeblock>
        </property>
        <property name="ReturnURL">
          <declaration><![CDATA[private string ReturnURL]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="68" sc="13" el="70" ec="14">admin\Modules\viewsource.ascx.cs</location>
            <body hash="886024cc288178771d5df7a287e8cdef"><![CDATA[{
                return UrlUtils.ValidReturnUrl(Request.Params["ReturnURL"]) ?? Globals.NavigateURL();
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="DotNetNuke.Modules.Admin.Portals">
    <class name="Portals">
      <declaration><![CDATA[public class Portals : PortalModuleBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public Portals()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="56" sc="9" el="59" ec="7">DesktopModules\Admin\Portals\Portals.ascx.cs</location>
            <body hash="c87dbf9afdb5a9e0b93fe4f5e104d81a"><![CDATA[public Portals()
	    {
	        Filter = "";
	    }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="BindData">
          <declaration><![CDATA[private void BindData()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="75" sc="9" el="91" ec="10">DesktopModules\Admin\Portals\Portals.ascx.cs</location>
            <body hash="2f369f39676cf7dd680eb7b646ce5819"><![CDATA[{
            CreateLetterSearch();

		    int totalRecords = 0;
		    ArrayList portals;
            if (Filter.Equals(Localization.GetString("Expired", LocalResourceFile), StringComparison.InvariantCultureIgnoreCase))
            {
                portals = PortalController.GetExpiredPortals();
                totalRecords = portals.Count;
            }
            else
            {
                portals = PortalController.GetPortalsByName(Filter + "%", grdPortals.CurrentPageIndex, grdPortals.PageSize, ref totalRecords);
            }
		    grdPortals.VirtualItemCount = totalRecords;
            grdPortals.DataSource = portals;
        }]]></body>
          </codeblock>
        </method>
        <method name="CheckSecurity">
          <declaration><![CDATA[private void CheckSecurity()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="94" sc="9" el="99" ec="10">DesktopModules\Admin\Portals\Portals.ascx.cs</location>
            <body hash="edc1f8f66b7da3cb5769ecf5d7cd2626"><![CDATA[{
            if (!UserInfo.IsSuperUser)
            {
                Response.Redirect(Globals.NavigateURL("Access Denied"), true);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="cmdDeleteExpired_Click">
          <declaration><![CDATA[private void cmdDeleteExpired_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="247" sc="9" el="249" ec="10">DesktopModules\Admin\Portals\Portals.ascx.cs</location>
            <body hash="08aecb095e36916e5b873197ef965bb1"><![CDATA[{
            DeleteExpiredPortals();
        }]]></body>
          </codeblock>
        </method>
        <method name="CreateLetterSearch">
          <declaration><![CDATA[private void CreateLetterSearch()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="105" sc="9" el="114" ec="10">DesktopModules\Admin\Portals\Portals.ascx.cs</location>
            <body hash="4eb57a94ea167e0fae5f0954e65a9649"><![CDATA[{
            var filters = Localization.GetString("Filter.Text", LocalResourceFile);

            filters += "," + Localization.GetString("All");
            filters += "," + Localization.GetString("Expired", LocalResourceFile);

            var strAlphabet = filters.Split(',');
            rptLetterSearch.DataSource = strAlphabet;
            rptLetterSearch.DataBind();
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteExpiredPortals">
          <declaration><![CDATA[private void DeleteExpiredPortals()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="120" sc="9" el="132" ec="10">DesktopModules\Admin\Portals\Portals.ascx.cs</location>
            <body hash="ff056bc6d8c26103eb9c54a389fa6f16"><![CDATA[{
            try
            {
                CheckSecurity();
                PortalController.DeleteExpiredPortals(Globals.GetAbsoluteServerPath(Request));

                BindData();
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="FilterURL">
          <declaration><![CDATA[protected string FilterURL(string filter, string currentPage)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="142" sc="9" el="153" ec="10">DesktopModules\Admin\Portals\Portals.ascx.cs</location>
            <body hash="f51ced6c7d85e0e178f053552d6a0615"><![CDATA[{
            string url;
            if (!String.IsNullOrEmpty(filter))
            {
                url = !String.IsNullOrEmpty(currentPage) ? Globals.NavigateURL(TabId, "", "filter=" + filter, "currentpage=" + grdPortals.CurrentPageIndex) : Globals.NavigateURL(TabId, "", "filter=" + filter);
            }
            else
            {
                url = !String.IsNullOrEmpty(currentPage) ? Globals.NavigateURL(TabId, "", "currentpage=" + grdPortals.CurrentPageIndex) : Globals.NavigateURL(TabId, "");
            }
            return url;
        }]]></body>
          </codeblock>
        </method>
        <method name="FormatExpiryDate">
          <declaration><![CDATA[public string FormatExpiryDate(DateTime dateTime)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="163" sc="9" el="177" ec="10">DesktopModules\Admin\Portals\Portals.ascx.cs</location>
            <body hash="11c3be2019a8846e7498791f04a45167"><![CDATA[{
            var strDate = string.Empty;
            try
            {
                if (!Null.IsNull(dateTime))
                {
                    strDate = dateTime.ToShortDateString();
                }
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
            return strDate;
        }]]></body>
          </codeblock>
        </method>
        <method name="FormatPortalAliases">
          <declaration><![CDATA[public string FormatPortalAliases(int portalID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="183" sc="9" el="203" ec="10">DesktopModules\Admin\Portals\Portals.ascx.cs</location>
            <body hash="b11612330153f2ecc9f5b1c42d5d51d0"><![CDATA[{
            var str = new StringBuilder();
            try
            {
                var arr = PortalAliasController.Instance.GetPortalAliasesByPortalId(portalID).ToList();
                foreach ( PortalAliasInfo portalAliasInfo in arr)
                {
                    var httpAlias = Globals.AddHTTP(portalAliasInfo.HTTPAlias);
                    var originalUrl = HttpContext.Current.Items["UrlRewrite:OriginalUrl"].ToString().ToLowerInvariant();

                    httpAlias = Globals.AddPort(httpAlias, originalUrl);

                    str.Append("<a href=\"" + httpAlias + "\">" + portalAliasInfo.HTTPAlias + "</a>" + "<BR>");
                }
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
            return str.ToString();
        }]]></body>
          </codeblock>
        </method>
        <method name="GridNeedsDataSource">
          <declaration><![CDATA[protected void GridNeedsDataSource(object sender, GridNeedDataSourceEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="339" sc="6" el="341" ec="7">DesktopModules\Admin\Portals\Portals.ascx.cs</location>
            <body hash="f787b8bbd85e61fb37edd7740b0dc7b6"><![CDATA[{
	        BindData();
	    }]]></body>
          </codeblock>
        </method>
        <method name="OnGridDeleteCommand">
          <declaration><![CDATA[protected void OnGridDeleteCommand(object source, GridCommandEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="290" sc="9" el="313" ec="10">DesktopModules\Admin\Portals\Portals.ascx.cs</location>
            <body hash="62187149a577c761c0658040f0074cda"><![CDATA[{
            try
            {
                var portal = PortalController.Instance.GetPortal(Int32.Parse(e.CommandArgument.ToString()));
                if (portal != null)
                {
                    var strMessage = PortalController.DeletePortal(portal, Globals.GetAbsoluteServerPath(Request));
                    if (string.IsNullOrEmpty(strMessage))
                    {
                        EventLogController.Instance.AddLog("PortalName", portal.PortalName, PortalSettings, UserId, EventLogController.EventLogType.PORTAL_DELETED);
                        UI.Skins.Skin.AddModuleMessage(this, Localization.GetString("PortalDeleted", LocalResourceFile), ModuleMessage.ModuleMessageType.GreenSuccess);
                    }
                    else
                    {
                        UI.Skins.Skin.AddModuleMessage(this, strMessage, ModuleMessage.ModuleMessageType.RedError);
                    }
                }
                BindData();
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnGridItemDataBound">
          <declaration><![CDATA[protected void OnGridItemDataBound(object sender, GridItemEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="316" sc="9" el="334" ec="10">DesktopModules\Admin\Portals\Portals.ascx.cs</location>
            <body hash="201442735ec63534fbd1e33da33e3b88"><![CDATA[{
            var item = e.Item;
            switch (item.ItemType)
            {
                case GridItemType.SelectedItem:
                case GridItemType.AlternatingItem:
                case GridItemType.Item:
                    {
                        var imgColumnControl = ((GridDataItem)item)["DeleteColumn"].Controls[0];
                        if (imgColumnControl is ImageButton)
                        {
                            var delImage = (ImageButton) imgColumnControl;
                            var portal = (PortalInfo) item.DataItem;
                            delImage.Visible = (portal.PortalID != PortalSettings.PortalId && !PortalController.IsMemberOfPortalGroup(portal.PortalID));
                        }
                    }
                    break;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="210" sc="9" el="244" ec="10">DesktopModules\Admin\Portals\Portals.ascx.cs</location>
            <body hash="518697d185ef50179d3d0917b22999b7"><![CDATA[{
            base.OnInit(e);

            cmdDeleteExpired.Visible = PortalController.GetExpiredPortals().Count > 0;
            cmdDeleteExpired.Click += cmdDeleteExpired_Click;

            foreach (GridColumn column in grdPortals.Columns)
            {
                if (ReferenceEquals(column.GetType(), typeof (DnnGridImageCommandColumn)))
                {
					//Manage Delete Confirm JS
                    var imageColumn = (DnnGridImageCommandColumn)column;
                    if (imageColumn.CommandName == "Delete")
                    {
                        imageColumn.OnClickJs = Localization.GetString("DeleteItem");
                    }
					
                    //Manage Edit Column NavigateURLFormatString
                    if (imageColumn.CommandName == "Edit")
                    {
                        //so first create the format string with a dummy value and then
                        //replace the dummy value with the FormatString place holder
                        var formatString = EditUrl("pid", "keyfield", "Edit");
                        formatString = formatString.Replace("keyfield", "{0}");
                        imageColumn.NavigateURLFormatString = formatString;
                    }
					
                    //Localize Image Column Text
                    if (!String.IsNullOrEmpty(imageColumn.CommandName))
                    {
                        imageColumn.Text = Localization.GetString(imageColumn.CommandName, LocalResourceFile);
                    }
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="252" sc="9" el="287" ec="10">DesktopModules\Admin\Portals\Portals.ascx.cs</location>
            <body hash="2969e7e0cf2196e5b01f998030bf7a37"><![CDATA[{
            base.OnLoad(e);

            grdPortals.DeleteCommand += OnGridDeleteCommand;
            grdPortals.ItemDataBound += OnGridItemDataBound;

            try
            {

                if (!UserInfo.IsSuperUser)
                {
                    Response.Redirect(Globals.NavigateURL("Access Denied"), true);
                }
                if (Request.QueryString["CurrentPage"] != null)
                {
                    grdPortals.CurrentPageIndex = Convert.ToInt32(Request.QueryString["CurrentPage"]);
                }
                if (Request.QueryString["filter"] != null)
                {
                    Filter = Request.QueryString["filter"];
                }
                if (Filter.Equals(Localization.GetString("All"), StringComparison.InvariantCultureIgnoreCase))
                {
                    Filter = "";
                }
                if (!Page.IsPostBack)
                {
					BindData();
                }
            }
            catch (Exception exc)
            {
				//Module failed to load
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="cmdDeleteExpired">
          <declaration><![CDATA[protected LinkButton cmdDeleteExpired;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="createSite">
          <declaration><![CDATA[protected ActionLink createSite;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="exportSite">
          <declaration><![CDATA[protected ActionLink exportSite;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="grdPortals">
          <declaration><![CDATA[protected DnnGrid grdPortals;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="rptLetterSearch">
          <declaration><![CDATA[protected Repeater rptLetterSearch;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="Filter">
          <declaration><![CDATA[protected string Filter]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="65" sc="32" el="65" ec="36">DesktopModules\Admin\Portals\Portals.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="65" sc="37" el="65" ec="41">DesktopModules\Admin\Portals\Portals.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="Signup">
      <declaration><![CDATA[public class Signup : PortalModuleBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public Signup()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
        <constructor name=".cctor">
          <declaration><![CDATA[static Signup()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="59" sc="6" el="59" ec="93">DesktopModules\Admin\Portals\Signup.ascx.cs</location>
            <body hash="830ef850036e6da1b90af318c092cac6"><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof (Signup))]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="BindSiteGroups">
          <declaration><![CDATA[private void BindSiteGroups()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="197" sc="9" el="209" ec="10">DesktopModules\Admin\Portals\Signup.ascx.cs</location>
            <body hash="b947bf92c13f9ecf1974ea601e4661b7"><![CDATA[{
            var portalGroups = PortalGroupController.Instance.GetPortalGroups().ToList();
            var showGroups = portalGroups.Any();
            if (showGroups)
            {
                cboSiteGroups.Items.Add(new RadComboBoxItem(LocalizeString("None_Specified"), "-1"));
                foreach (var portalGroup in portalGroups)
                {
                    cboSiteGroups.Items.Add(new RadComboBoxItem(portalGroup.PortalGroupName, portalGroup.PortalGroupId.ToString()));
                }
            }
            pnlSiteGroups.Visible = showGroups;
        }]]></body>
          </codeblock>
        </method>
        <method name="BindTemplates">
          <declaration><![CDATA[private void BindTemplates()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="177" sc="9" el="194" ec="10">DesktopModules\Admin\Portals\Signup.ascx.cs</location>
            <body hash="c8d3165673c4342cff4b4a895c342f25"><![CDATA[{
            var templates = PortalController.Instance.GetAvailablePortalTemplates();
            templates = templates.OrderBy(x => x, new TemplateDisplayComparer()).ToList();

            foreach (var template in templates)
            {
                var item = CreateListItem(template);
                cboTemplate.AddItem(item.Text, item.Value);
            }

            SelectADefaultTemplate(templates);

            if (cboTemplate.Items.Count == 0)
            {
                UI.Skins.Skin.AddModuleMessage(this, "", Localization.GetString("PortalMissing", LocalResourceFile), ModuleMessage.ModuleMessageType.RedError);
                cmdUpdate.Enabled = false;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="btnCustomizeHomeDir_Click">
          <declaration><![CDATA[private void btnCustomizeHomeDir_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="583" sc="9" el="603" ec="10">DesktopModules\Admin\Portals\Signup.ascx.cs</location>
            <body hash="1cb9749462f5b4f3459788418385f4c9"><![CDATA[{
            try
            {
                if (txtHomeDirectory.Enabled)
                {
                    btnCustomizeHomeDir.Text = Localization.GetString("Customize", LocalResourceFile);
                    txtHomeDirectory.Text = @"Portals/[PortalID]";
                    txtHomeDirectory.Enabled = false;
                }
                else
                {
                    btnCustomizeHomeDir.Text = Localization.GetString("AutoGenerate", LocalResourceFile);
                    txtHomeDirectory.Text = "";
                    txtHomeDirectory.Enabled = true;
                }
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="cboTemplate_SelectedIndexChanged">
          <declaration><![CDATA[private void cboTemplate_SelectedIndexChanged(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="606" sc="9" el="632" ec="10">DesktopModules\Admin\Portals\Signup.ascx.cs</location>
            <body hash="c0f16aad1c3c50360d1112744a54e994"><![CDATA[{
            try
            {
                if (cboTemplate.SelectedIndex > 0)
                {
                    var template = LoadPortalTemplateInfoForSelectedItem();
                    
                    if (!String.IsNullOrEmpty(template.Description))
                    {
                        rowTemplateDescription.Visible = true;
                        lblTemplateDescription.Text = Server.HtmlDecode(template.Description);
                    }
                    else
                    {
                        rowTemplateDescription.Visible = false;
                    }
                }
                else
                {
                    rowTemplateDescription.Visible = false;
                }
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="cmdCancel_Click">
          <declaration><![CDATA[private void cmdCancel_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="269" sc="9" el="278" ec="10">DesktopModules\Admin\Portals\Signup.ascx.cs</location>
            <body hash="8ee647e2ee5134e6e5bed39060e6d656"><![CDATA[{
            try
            {
                Response.Redirect(IsHostMenu ? Globals.NavigateURL() : Globals.GetPortalDomainName(PortalAlias.HTTPAlias, Request, true), true);
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="cmdUpdate_Click">
          <declaration><![CDATA[private void cmdUpdate_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="281" sc="9" el="568" ec="10">DesktopModules\Admin\Portals\Signup.ascx.cs</location>
            <body hash="810e1a00f2057f6e9a5d0bf9f40991c7"><![CDATA[{
            if (Page.IsValid)
            {
                PortalController.PortalTemplateInfo template = LoadPortalTemplateInfoForSelectedItem();
                
                try
                {
                    bool blnChild;
                    string strPortalAlias;
                    string strChildPath = string.Empty;
                    var closePopUpStr = string.Empty;

                    //check template validity
                    var messages = new ArrayList();
                    string schemaFilename = Server.MapPath(string.Concat(AppRelativeTemplateSourceDirectory, "portal.template.xsd"));
                    string xmlFilename = template.TemplateFilePath;
                    var xval = new PortalTemplateValidator();
                    if (!xval.Validate(xmlFilename, schemaFilename))
                    {
                        UI.Skins.Skin.AddModuleMessage(this, "", String.Format(Localization.GetString("InvalidTemplate", LocalResourceFile), Path.GetFileName(template.TemplateFilePath)), ModuleMessage.ModuleMessageType.RedError);
                        messages.AddRange(xval.Errors);
                        lstResults.Visible = true;
                        lstResults.DataSource = messages;
                        lstResults.DataBind();
                        validationPanel.Visible = true;
                        return;
                    }

                    //Set Portal Name
					txtPortalAlias.Text = txtPortalAlias.Text.ToLowerInvariant();
					txtPortalAlias.Text = txtPortalAlias.Text.Replace("http://", "");

                    //Validate Portal Name
                    if (!Globals.IsHostTab(PortalSettings.ActiveTab.TabID))
                    {
                        blnChild = true;
						strPortalAlias = txtPortalAlias.Text;
                    }
                    else
                    {
                        blnChild = (optType.SelectedValue == "C");

                        strPortalAlias = blnChild ? PortalController.GetPortalFolder(txtPortalAlias.Text) : txtPortalAlias.Text;
                    }

                    string message = String.Empty;
                    ModuleMessage.ModuleMessageType messageType = ModuleMessage.ModuleMessageType.RedError;
                    if (!PortalAliasController.ValidateAlias(strPortalAlias, blnChild))
                    {
                        message = Localization.GetString("InvalidName", LocalResourceFile);
                    }

                    //check whether have conflict between tab path and portal alias.
                    var checkTabPath = string.Format("//{0}", strPortalAlias);
                    if (TabController.GetTabByTabPath(PortalSettings.PortalId, checkTabPath, string.Empty) != Null.NullInteger
						|| TabController.GetTabByTabPath(Null.NullInteger, checkTabPath, string.Empty) != Null.NullInteger)
                    {
                        message = Localization.GetString("DuplicateWithTab", LocalResourceFile);
                    }

                    //Validate Password
                    if (txtPassword.Text != txtConfirm.Text)
                    {
                        if (!String.IsNullOrEmpty(message)) message += "<br/>";
                        message += Localization.GetString("InvalidPassword", LocalResourceFile);
                    }
                    string strServerPath = Globals.GetAbsoluteServerPath(Request);

                    //Set Portal Alias for Child Portals
                    if (String.IsNullOrEmpty(message))
                    {
                        if (blnChild)
                        {
                            strChildPath = strServerPath + strPortalAlias;

                            if (Directory.Exists(strChildPath))
                            {
                                message = Localization.GetString("ChildExists", LocalResourceFile);
                            }
                            else
                            {
                                if (!Globals.IsHostTab(PortalSettings.ActiveTab.TabID))
                                {
                                    strPortalAlias = Globals.GetDomainName(Request, true) + "/" + strPortalAlias;
                                }
                                else
                                {
									strPortalAlias = txtPortalAlias.Text;
                                }
                            }
                        }
                    }

                    //Get Home Directory
                    string homeDir = txtHomeDirectory.Text != @"Portals/[PortalID]" ? txtHomeDirectory.Text : "";

                    //Validate Home Folder
                    if (!string.IsNullOrEmpty(homeDir))
                    {
                        if (string.IsNullOrEmpty(String.Format("{0}\\{1}\\", Globals.ApplicationMapPath, homeDir).Replace("/", "\\")))
                        {
                            message = Localization.GetString("InvalidHomeFolder", LocalResourceFile);
                        }
                        if (homeDir.Contains("admin") || homeDir.Contains("DesktopModules") || homeDir.ToLowerInvariant() == "portals/")
                        {
                            message = Localization.GetString("InvalidHomeFolder", LocalResourceFile);
                        }
                    }

                    //Validate Portal Alias
                    if (!string.IsNullOrEmpty(strPortalAlias))
                    {
                        PortalAliasInfo portalAlias = null;
                        foreach (PortalAliasInfo alias in PortalAliasController.Instance.GetPortalAliases().Values)
                        {
                            if (String.Equals(alias.HTTPAlias, strPortalAlias, StringComparison.InvariantCultureIgnoreCase))
                            {
                                portalAlias = alias;
                                break;
                            }
                        }

                        if (portalAlias != null)
                        {
                            message = Localization.GetString("DuplicatePortalAlias", LocalResourceFile);
                        }
                    }

                    //Create Portal
                    if (String.IsNullOrEmpty(message))
                    {
                        //Attempt to create the portal
                        UserInfo adminUser = new UserInfo();
                        int intPortalId;
                        try
                        {
                            if (useCurrent.Checked)
                            {
                                adminUser = UserInfo;
                                intPortalId = PortalController.Instance.CreatePortal(txtPortalName.Text,
                                                                           adminUser.UserID,
                                                                           txtDescription.Text,
                                                                           txtKeyWords.Text,
                                                                           template,
                                                                           homeDir,
                                                                           strPortalAlias,
                                                                           strServerPath,
                                                                           strChildPath,
                                                                           blnChild);
                            }
                            else
                            {
                                adminUser = new UserInfo
                                                {
                                                    FirstName = txtFirstName.Text,
                                                    LastName = txtLastName.Text,
                                                    Username = txtUsername.Text,
                                                    DisplayName = txtFirstName.Text + " " + txtLastName.Text,
                                                    Email = txtEmail.Text,
                                                    IsSuperUser = false,
                                                    Membership =
                                                        {
                                                            Approved = true, 
                                                            Password = txtPassword.Text, 
                                                            PasswordQuestion = txtQuestion.Text, 
                                                            PasswordAnswer = txtAnswer.Text
                                                        },
                                                    Profile =
                                                        {
                                                            FirstName = txtFirstName.Text, 
                                                            LastName = txtLastName.Text
                                                        }
                                                };

                                intPortalId = PortalController.Instance.CreatePortal(txtPortalName.Text,
                                                                           adminUser,
                                                                           txtDescription.Text,
                                                                           txtKeyWords.Text,
                                                                           template,
                                                                           homeDir,
                                                                           strPortalAlias,
                                                                           strServerPath,
                                                                           strChildPath,
                                                                           blnChild);
                            }
							
                        }
                        catch (Exception ex)
                        {
                            Logger.Error(ex);

                            intPortalId = Null.NullInteger;
                            message = ex.Message;
                        }

                        if (intPortalId != -1)
                        {
                            //Add new portal to Site Group
                            if (cboSiteGroups.SelectedValue != "-1")
                            {
                                var portal = PortalController.Instance.GetPortal(intPortalId);
                                var portalGroup = PortalGroupController.Instance.GetPortalGroups().SingleOrDefault(g => g.PortalGroupId == Int32.Parse(cboSiteGroups.SelectedValue));
                                if (portalGroup != null)
                                {
                                    PortalGroupController.Instance.AddPortalToGroup(portal, portalGroup, args => { });
                                }
                            }

                            //Create a Portal Settings object for the new Portal
                            PortalInfo objPortal = PortalController.Instance.GetPortal(intPortalId);
                            var newSettings = new PortalSettings { PortalAlias = new PortalAliasInfo { HTTPAlias = strPortalAlias }, PortalId = intPortalId, DefaultLanguage = objPortal.DefaultLanguage };
                            string webUrl = Globals.AddHTTP(strPortalAlias);
                            try
                            {
                                if (!Globals.IsHostTab(PortalSettings.ActiveTab.TabID))
                                {
                                    message = (String.IsNullOrEmpty(PortalSettings.Email) &&
                                        String.IsNullOrEmpty(Host.HostEmail)) ?
                                        string.Format(Localization.GetString("UnknownEmailAddress.Error", LocalResourceFile), message, webUrl, closePopUpStr):
                                        Mail.SendMail(PortalSettings.Email,
                                                               txtEmail.Text,
                                                               string.IsNullOrEmpty(PortalSettings.Email)? Host.HostEmail : string.IsNullOrEmpty(Host.HostEmail)? PortalSettings.Email : PortalSettings.Email  + ";" + Host.HostEmail,
                                                               Localization.GetSystemMessage(newSettings, "EMAIL_PORTAL_SIGNUP_SUBJECT", adminUser),
                                                               Localization.GetSystemMessage(newSettings, "EMAIL_PORTAL_SIGNUP_BODY", adminUser),
                                                               "",
                                                               "",
                                                               "",
                                                               "",
                                                               "",
                                                               "");
                                    
                                }
                                else
                                {
                                    message = String.IsNullOrEmpty(Host.HostEmail)?
                                        string.Format(Localization.GetString("UnknownEmailAddress.Error", LocalResourceFile), message, webUrl, closePopUpStr) :
                                        Mail.SendMail(Host.HostEmail,
                                                               txtEmail.Text,
                                                               Host.HostEmail,
                                                               Localization.GetSystemMessage(newSettings, "EMAIL_PORTAL_SIGNUP_SUBJECT", adminUser),
                                                               Localization.GetSystemMessage(newSettings, "EMAIL_PORTAL_SIGNUP_BODY", adminUser),
                                                               "",
                                                               "",
                                                               "",
                                                               "",
                                                               "",
                                                               "");
                                }
                            }
                            catch (Exception exc)
                            {
                                Logger.Error(exc);

                                closePopUpStr = (PortalSettings.EnablePopUps) ? "onclick=\"return " + UrlUtils.ClosePopUp(true,webUrl,true) + "\"" : "";
                                message = string.Format(Localization.GetString("UnknownSendMail.Error", LocalResourceFile), webUrl, closePopUpStr);
                            }
                            EventLogController.Instance.AddLog(PortalController.Instance.GetPortal(intPortalId), PortalSettings, UserId, "", EventLogController.EventLogType.PORTAL_CREATED);

                            // mark default language as published if content localization is enabled
                            bool ContentLocalizationEnabled = PortalController.GetPortalSettingAsBoolean("ContentLocalizationEnabled", PortalId, false);
                            if (ContentLocalizationEnabled)
                            {
                                LocaleController lc = new LocaleController();
                                lc.PublishLanguage(intPortalId, objPortal.DefaultLanguage, true);
                            }

                            //Redirect to this new site
                            if (message == Null.NullString)
                            {
                                webUrl = (PortalSettings.EnablePopUps) ? UrlUtils.ClosePopUp(true, webUrl, false) : webUrl;
                                Response.Redirect(webUrl,true);
                            }
                            else
                            {
                                closePopUpStr = (PortalSettings.EnablePopUps) ? "onclick=\"return " + UrlUtils.ClosePopUp(true, webUrl, true) + "\"" : "";
                                message = string.Format(Localization.GetString("SendMail.Error", LocalResourceFile), message, webUrl, closePopUpStr);
                                messageType = ModuleMessage.ModuleMessageType.YellowWarning;
                            }
                        }
                    }
                    UI.Skins.Skin.AddModuleMessage(this, "", message, messageType);
                }
                catch (Exception exc) //Module failed to load
                {
                    Exceptions.ProcessModuleLoadException(this, exc);
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="CreateListItem">
          <declaration><![CDATA[private ListItem CreateListItem(PortalController.PortalTemplateInfo template)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="235" sc="9" el="266" ec="10">DesktopModules\Admin\Portals\Signup.ascx.cs</location>
            <body hash="b08deb68757aee2441e3e9471ff7afa6"><![CDATA[{
            string text, value;
            if (string.IsNullOrEmpty(template.CultureCode))
            {
                text = template.Name;
                value = Path.GetFileName(template.TemplateFilePath);
            }
            else
            {
                if (DisplayType == 0)
                {
                    string _ViewType = Convert.ToString(Services.Personalization.Personalization.GetProfile("LanguageDisplayMode", "ViewType" + PortalId));
                    switch (_ViewType)
                    {
                        case "NATIVE":
                            DisplayType = CultureDropDownTypes.NativeName;
                            break;
                        case "ENGLISH":
                            DisplayType = CultureDropDownTypes.EnglishName;
                            break;
                        default:
                            DisplayType = CultureDropDownTypes.DisplayName;
                            break;
                    }
                }

                text = string.Format("{0} - {1}", template.Name, Localization.GetLocaleName(template.CultureCode, DisplayType));
                value = string.Format("{0}|{1}", Path.GetFileName(template.TemplateFilePath), template.CultureCode);
            }
            
            return new ListItem(text, value);
        }]]></body>
          </codeblock>
        </method>
        <method name="LoadPortalTemplateInfoForSelectedItem">
          <declaration><![CDATA[private PortalController.PortalTemplateInfo LoadPortalTemplateInfoForSelectedItem()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="635" sc="9" el="639" ec="10">DesktopModules\Admin\Portals\Signup.ascx.cs</location>
            <body hash="fc1ddc9c359d12d55d0b8dac01b922f0"><![CDATA[{
            var values = cboTemplate.SelectedItem.Value.Split('|');

            return PortalController.Instance.GetPortalTemplate(Path.Combine(TestableGlobals.Instance.HostMapPath, values[0]), values.Length > 1 ? values[1] : null);
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="68" sc="9" el="85" ec="10">DesktopModules\Admin\Portals\Signup.ascx.cs</location>
            <body hash="94343a55c1abd54264235e5db78430b6"><![CDATA[{
            base.OnInit(e);

            cmdCancel.Click += cmdCancel_Click;
            cmdUpdate.Click += cmdUpdate_Click;
            optType.SelectedIndexChanged += optType_SelectedIndexChanged;
            btnCustomizeHomeDir.Click += btnCustomizeHomeDir_Click;
            cboTemplate.SelectedIndexChanged += cboTemplate_SelectedIndexChanged;
            useCurrent.CheckedChanged += useCurrent_CheckedChanged;

            //Customise the Control Title
            if (IsHostMenu)
            {
                ModuleConfiguration.ModuleTitle = Localization.GetString("AddPortal", LocalResourceFile);
            }

			JavaScript.RequestRegistration(CommonJs.DnnPlugins);
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="93" sc="9" el="155" ec="10">DesktopModules\Admin\Portals\Signup.ascx.cs</location>
            <body hash="fb418bfeb9b575b4b7e7f7038cd5aff1"><![CDATA[{
            base.OnLoad(e);
 
            try
            {
                //ensure portal signup is allowed
                if ((!IsHostMenu || UserInfo.IsSuperUser == false) && !Host.DemoSignup)
                {
                    Response.Redirect(Globals.NavigateURL("Access Denied"), true);
                }
                valEmail2.ValidationExpression = Globals.glbEmailRegEx;

                //set the async timeout same with script time out
                AJAX.GetScriptManager(Page).AsyncPostBackTimeout = 900;

                if (!Page.IsPostBack)
                {
                    BindTemplates();
                    BindSiteGroups();
                    // load template description
                    cboTemplate_SelectedIndexChanged(null, null);

                    if (UserInfo.IsSuperUser)
                    {
                        rowType.Visible = true;
                        useCurrentPanel.Visible = true;
                        useCurrent.Checked = true;
                        adminUserPanel.Visible = false;

                        optType.SelectedValue = "P";
                    }
                    else
                    {
                        useCurrentPanel.Visible = false;
                        useCurrent.Checked = false;
                        adminUserPanel.Visible = true;

                        optType.SelectedValue = "C";

						txtPortalAlias.Text = Globals.GetDomainName(Request) + @"/";
                        rowType.Visible = false;
                        string strMessage = string.Format(Localization.GetString("DemoMessage", LocalResourceFile),
                                                          Host.DemoPeriod != Null.NullInteger ? " for " + Host.DemoPeriod + " days" : "",
                                                          Globals.GetDomainName(Request));
                        lblInstructions.Text = strMessage;
                        lblInstructions.Visible = true;
                        btnCustomizeHomeDir.Visible = false;
                    }

                    txtHomeDirectory.Text = @"Portals/[PortalID]";
                    txtHomeDirectory.Enabled = false;
                    if (MembershipProviderConfig.RequiresQuestionAndAnswer)
                    {
                        questionRow.Visible = true;
                        answerRow.Visible = true;
                    }
                }
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="optType_SelectedIndexChanged">
          <declaration><![CDATA[private void optType_SelectedIndexChanged(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="571" sc="9" el="580" ec="10">DesktopModules\Admin\Portals\Signup.ascx.cs</location>
            <body hash="b0ff19d1de4b2e52720d587922351ef2"><![CDATA[{
            try
            {
                txtPortalAlias.Text = optType.SelectedValue == "C" ? Globals.GetDomainName(Request) + @"/" : "";
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="SelectADefaultTemplate">
          <declaration><![CDATA[private void SelectADefaultTemplate(IList<PortalController.PortalTemplateInfo> templates)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="212" sc="9" el="232" ec="10">DesktopModules\Admin\Portals\Signup.ascx.cs</location>
            <body hash="b4e6ef873668bd169c26cbc373ae7fb1"><![CDATA[{
            string currentCulture = Thread.CurrentThread.CurrentUICulture.Name;

            var defaultTemplates =
                templates.Where(x => Path.GetFileNameWithoutExtension(x.TemplateFilePath) == "Default Website").ToList();

            var match = defaultTemplates.FirstOrDefault(x => x.CultureCode == currentCulture);
            if(match == null)
            {
                match = defaultTemplates.FirstOrDefault(x => x.CultureCode.StartsWith(currentCulture.Substring(0, 2)));
            }
            if(match == null)
            {
                match = defaultTemplates.FirstOrDefault(x => String.IsNullOrEmpty(x.CultureCode));
            }

            if(match != null)
            {
                cboTemplate.SelectedIndex = templates.IndexOf(match);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="useCurrent_CheckedChanged">
          <declaration><![CDATA[private void useCurrent_CheckedChanged(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="642" sc="9" el="644" ec="10">DesktopModules\Admin\Portals\Signup.ascx.cs</location>
            <body hash="4969f285b45d955dc72d7e9648b4e3d0"><![CDATA[{
            adminUserPanel.Visible = !useCurrent.Checked;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="adminUserPanel">
          <declaration><![CDATA[protected Panel adminUserPanel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="answerRow">
          <declaration><![CDATA[protected HtmlGenericControl answerRow;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="btnCustomizeHomeDir">
          <declaration><![CDATA[protected LinkButton btnCustomizeHomeDir;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cboSiteGroups">
          <declaration><![CDATA[protected DnnComboBox cboSiteGroups;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cboTemplate">
          <declaration><![CDATA[protected DnnComboBox cboTemplate;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdCancel">
          <declaration><![CDATA[protected LinkButton cmdCancel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdUpdate">
          <declaration><![CDATA[protected LinkButton cmdUpdate;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblInstructions">
          <declaration><![CDATA[protected Label lblInstructions;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblMessage">
          <declaration><![CDATA[protected Label lblMessage;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblNote">
          <declaration><![CDATA[protected Label lblNote;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblTemplateDescription">
          <declaration><![CDATA[protected Label lblTemplateDescription;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Logger">
          <declaration><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof(Signup));]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lstResults">
          <declaration><![CDATA[protected DataList lstResults;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="optType">
          <declaration><![CDATA[protected RadioButtonList optType;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plAnswer">
          <declaration><![CDATA[protected LabelControl plAnswer;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plConfirm">
          <declaration><![CDATA[protected LabelControl plConfirm;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plDescription">
          <declaration><![CDATA[protected LabelControl plDescription;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plEmail">
          <declaration><![CDATA[protected LabelControl plEmail;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plFirstName">
          <declaration><![CDATA[protected LabelControl plFirstName;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plHomeDirectory">
          <declaration><![CDATA[protected LabelControl plHomeDirectory;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plKeyWords">
          <declaration><![CDATA[protected LabelControl plKeyWords;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plLastName">
          <declaration><![CDATA[protected LabelControl plLastName;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plPassword">
          <declaration><![CDATA[protected LabelControl plPassword;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plPortalAlias">
          <declaration><![CDATA[protected LabelControl plPortalAlias;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plQuestion">
          <declaration><![CDATA[protected LabelControl plQuestion;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plSiteGroups">
          <declaration><![CDATA[protected LabelControl plSiteGroups;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plTemplate">
          <declaration><![CDATA[protected LabelControl plTemplate;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plTitle">
          <declaration><![CDATA[protected LabelControl plTitle;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plType">
          <declaration><![CDATA[protected LabelControl plType;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plUsername">
          <declaration><![CDATA[protected LabelControl plUsername;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="pnlSiteGroups">
          <declaration><![CDATA[protected HtmlGenericControl pnlSiteGroups;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="questionRow">
          <declaration><![CDATA[protected HtmlGenericControl questionRow;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="rowTemplateDescription">
          <declaration><![CDATA[protected HtmlGenericControl rowTemplateDescription;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="rowType">
          <declaration><![CDATA[protected HtmlGenericControl rowType;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtAnswer">
          <declaration><![CDATA[protected TextBox txtAnswer;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtConfirm">
          <declaration><![CDATA[protected TextBox txtConfirm;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtDescription">
          <declaration><![CDATA[protected TextBox txtDescription;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtEmail">
          <declaration><![CDATA[protected TextBox txtEmail;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtFirstName">
          <declaration><![CDATA[protected TextBox txtFirstName;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtHomeDirectory">
          <declaration><![CDATA[protected TextBox txtHomeDirectory;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtKeyWords">
          <declaration><![CDATA[protected TextBox txtKeyWords;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtLastName">
          <declaration><![CDATA[protected TextBox txtLastName;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtPassword">
          <declaration><![CDATA[protected TextBox txtPassword;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtPortalAlias">
          <declaration><![CDATA[protected TextBox txtPortalAlias;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtPortalName">
          <declaration><![CDATA[protected TextBox txtPortalName;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtQuestion">
          <declaration><![CDATA[protected TextBox txtQuestion;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtUsername">
          <declaration><![CDATA[protected TextBox txtUsername;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="useCurrent">
          <declaration><![CDATA[protected CheckBox useCurrent;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="useCurrentLabel">
          <declaration><![CDATA[protected LabelControl useCurrentLabel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="useCurrentPanel">
          <declaration><![CDATA[protected HtmlGenericControl useCurrentPanel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="valConfirm">
          <declaration><![CDATA[protected RequiredFieldValidator valConfirm;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="valEmail">
          <declaration><![CDATA[protected RequiredFieldValidator valEmail;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="valEmail2">
          <declaration><![CDATA[protected RegularExpressionValidator valEmail2;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="valFirstName">
          <declaration><![CDATA[protected RequiredFieldValidator valFirstName;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="validationPanel">
          <declaration><![CDATA[protected HtmlGenericControl validationPanel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="valLastName">
          <declaration><![CDATA[protected RequiredFieldValidator valLastName;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="valPassword">
          <declaration><![CDATA[protected RequiredFieldValidator valPassword;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="valPortalAlias">
          <declaration><![CDATA[protected RequiredFieldValidator valPortalAlias;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="valPortalName">
          <declaration><![CDATA[protected RequiredFieldValidator valPortalName;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="valUsername">
          <declaration><![CDATA[protected RequiredFieldValidator valUsername;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="DisplayType">
          <declaration><![CDATA[private CultureDropDownTypes DisplayType]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="63" sc="52" el="63" ec="56">DesktopModules\Admin\Portals\Signup.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="63" sc="57" el="63" ec="61">DesktopModules\Admin\Portals\Signup.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="Template">
      <declaration><![CDATA[public class Template : PortalModuleBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public Template()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="AddChildNodes">
          <declaration><![CDATA[private void AddChildNodes(RadTreeNode parentNode, PortalInfo portal)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="744" sc="9" el="771" ec="10">DesktopModules\Admin\Portals\Template.ascx.cs</location>
            <body hash="58c750b5ec8e0ba48de8b2b2d4b90d9e"><![CDATA[{
            parentNode.Nodes.Clear();

            var parentId = int.Parse(parentNode.Value);

            var tabs = GetExportableTabs(TabController.Instance.GetTabsByPortal(portal.PortalID).WithCulture(languageComboBox.SelectedValue, true)).WithParentId(parentId);


            foreach (var tab in tabs)
            {
                if (tab.ParentId == parentId)
                {
                    string tooltip;
                    var nodeIcon = GetNodeIcon(tab, out tooltip);
                    var node = new RadTreeNode
                    {
                        Text = string.Format("{0} {1}", tab.TabName, GetNodeStatusIcon(tab)),
                        Value = tab.TabID.ToString(CultureInfo.InvariantCulture),
                        AllowEdit = true,
                        ImageUrl = nodeIcon,
                        ToolTip = tooltip,
                        Checked = true
                    };
                    AddChildNodes(node, portal);
                    parentNode.Nodes.Add(node);
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="BindLocales">
          <declaration><![CDATA[private void BindLocales(PortalInfo portalInfo)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="531" sc="9" el="564" ec="10">DesktopModules\Admin\Portals\Template.ascx.cs</location>
            <body hash="3a7ef440c834476bae4cd4170c54f70c"><![CDATA[{
            var locales = LocaleController.Instance.GetLocales(portalInfo.PortalID).Values;
            MultiselectLanguages.Visible = false;
            SingleSelectLanguages.Visible = false;
            if (chkMultilanguage.Checked)
            {
                MultiselectLanguages.Visible = true;
                chkLanguages.DataTextField = "EnglishName";
                chkLanguages.DataValueField = "Code";
                chkLanguages.DataSource = locales;
                chkLanguages.DataBind();

                foreach (ListItem item in chkLanguages.Items)
                {
                    if (item.Value == portalInfo.DefaultLanguage)
                    {
                        item.Enabled = false;
                        item.Attributes.Add("title", string.Format(LocalizeString("DefaultLanguage"), item.Text));
                        lblNote.Text = string.Format(LocalizeString("lblNote"), item.Text);
                    }
                    item.Selected = true;
                }

            }
            else
            {
                languageComboBox.BindData(true);
                languageComboBox.SetLanguage(portalInfo.DefaultLanguage);

                SingleSelectLanguages.Visible = true;
                lblNoteSingleLanguage.Text = string.Format(LocalizeString("lblNoteSingleLanguage"), new CultureInfo(portalInfo.DefaultLanguage).EnglishName);

            }
        }]]></body>
          </codeblock>
        </method>
        <method name="BindTree">
          <declaration><![CDATA[private void BindTree(PortalInfo portal)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="702" sc="9" el="742" ec="10">DesktopModules\Admin\Portals\Template.ascx.cs</location>
            <body hash="84edc3679308636b5c78ae88c8b7c661"><![CDATA[{
            ctlPages.Nodes.Clear();

            var rootNode = new RadTreeNode
                {
                    Text = PortalSettings.PortalName,
                    ImageUrl = IconPortal,
                    Value = Null.NullInteger.ToString(CultureInfo.InvariantCulture),
                    Expanded = true,
                    AllowEdit = false,
                    EnableContextMenu = true,
                    Checked = true
                };
            rootNode.Attributes.Add("isPortalRoot", "True");

            //var tabs = new TabCollection();
            var tabs = TabController.GetPortalTabs(chkMultilanguage.Checked ? TabController.GetTabsBySortOrder(portal.PortalID, portal.DefaultLanguage, true) : TabController.GetTabsBySortOrder(portal.PortalID, languageComboBox.SelectedValue, true), Null.NullInteger, false, "<" + Localization.GetString("None_Specified") + ">", true, false, true, false, false).Where(t => !t.IsSystem).ToList();

            foreach (var tab in tabs) 
            {
                if (tab.Level == 0 && tab.TabID != portal.AdminTabId)
                {
                    string tooltip;
                    var nodeIcon = GetNodeIcon(tab, out tooltip);
                    var node = new RadTreeNode
                    {
                        Text = string.Format("{0} {1}", tab.TabName, GetNodeStatusIcon(tab)),
                        Value = tab.TabID.ToString(CultureInfo.InvariantCulture),
                        AllowEdit = true,
                        ImageUrl = nodeIcon,
                        ToolTip = tooltip,
                        Checked = true
                    };

                    AddChildNodes(node, portal);
                    rootNode.Nodes.Add(node);
                }
            }

            ctlPages.Nodes.Add(rootNode);
        }]]></body>
          </codeblock>
        </method>
        <method name="cboPortals_SelectedIndexChanged">
          <declaration><![CDATA[private void cboPortals_SelectedIndexChanged(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="934" sc="9" el="936" ec="10">DesktopModules\Admin\Portals\Template.ascx.cs</location>
            <body hash="a9124ff39a6914806a43350fef42d540"><![CDATA[{
            SetupSettings();
        }]]></body>
          </codeblock>
        </method>
        <method name="chkMultilanguage_OnCheckedChanged">
          <declaration><![CDATA[protected void chkMultilanguage_OnCheckedChanged(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="939" sc="9" el="944" ec="10">DesktopModules\Admin\Portals\Template.ascx.cs</location>
            <body hash="55489d14c9b9c906455413d5ade7bc86"><![CDATA[{
            var portalInfo = PortalController.Instance.GetPortal(Convert.ToInt32(cboPortals.SelectedValue));

            BindLocales(portalInfo);
            BindTree(portalInfo);
        }]]></body>
          </codeblock>
        </method>
        <method name="cmdCancel_Click">
          <declaration><![CDATA[private void cmdCancel_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="811" sc="9" el="820" ec="10">DesktopModules\Admin\Portals\Template.ascx.cs</location>
            <body hash="0b02640b70a9ac4bddbce5cea29d4621"><![CDATA[{
            try
            {
                Response.Redirect(Globals.NavigateURL(), true);
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="cmdExport_Click">
          <declaration><![CDATA[private void cmdExport_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="834" sc="9" el="931" ec="10">DesktopModules\Admin\Portals\Template.ascx.cs</location>
            <body hash="6a9e1660a8383b74389f2b3fd8e63854"><![CDATA[{
            try
            {
                // Validations
                bool isValid = true;

                // Verify all ancestor pages are selected
                foreach (RadTreeNode page in ctlPages.CheckedNodes)
                {
                    if (page.ParentNode != null && page.ParentNode.Value != "-1" && !page.ParentNode.Checked)
                        isValid = false;
                }
                if (!isValid)
                {
                    UI.Skins.Skin.AddModuleMessage(this, LocalizeString("ErrorAncestorPages"), ModuleMessage.ModuleMessageType.RedError);
                }

                if (ctlPages.CheckedNodes.Count == 0)
                {
                    isValid = false;
                    UI.Skins.Skin.AddModuleMessage(this, LocalizeString("ErrorPages"), ModuleMessage.ModuleMessageType.RedError);
                }

                if (!Page.IsValid || !isValid)
                {
                    return;
                }

                var settings = new XmlWriterSettings();
                settings.ConformanceLevel = ConformanceLevel.Fragment;
                settings.OmitXmlDeclaration = true;
                settings.Indent = true;

                var filename = Globals.HostMapPath + txtTemplateName.Text;
                if (!filename.EndsWith(".template"))
                {
                    filename += ".template";
                }
                XmlWriter writer = XmlWriter.Create(filename, settings);

                writer.WriteStartElement("portal");
                writer.WriteAttributeString("version", "5.0");

                //Add template description
                writer.WriteElementString("description", Server.HtmlEncode(txtDescription.Text));

                //Serialize portal settings
                var portal = PortalController.Instance.GetPortal(Convert.ToInt32(cboPortals.SelectedValue));

                SerializePortalSettings(writer, portal);
                SerializeEnabledLocales(writer, portal);
                SerializeExtensionUrlProviders(writer, portal.PortalID);

                if (chkProfile.Checked)
                {
                    //Serialize Profile Definitions
                    SerializeProfileDefinitions(writer, portal);
                }

                if (chkModules.Checked)
                {
                    //Serialize Portal Desktop Modules
                    DesktopModuleController.SerializePortalDesktopModules(writer, portal.PortalID);
                }

                if (chkRoles.Checked)
                {
                    //Serialize Roles
                    RoleController.SerializeRoleGroups(writer, portal.PortalID);
                }

                //Serialize tabs
                SerializeTabs(writer, portal);

                if (chkFiles.Checked)
                {
                    //Create Zip File to hold files
                    var resourcesFile = new ZipOutputStream(File.Create(filename + ".resources"));
                    resourcesFile.SetLevel(6);

                    //Serialize folders (while adding files to zip file)
                    SerializeFolders(writer, portal, ref resourcesFile);

                    //Finish and Close Zip file
                    resourcesFile.Finish();
                    resourcesFile.Close();
                }
                writer.WriteEndElement();

                writer.Close();

                UI.Skins.Skin.AddModuleMessage(this, "", string.Format(Localization.GetString("ExportedMessage", LocalResourceFile), filename), ModuleMessage.ModuleMessageType.GreenSuccess);
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetActualFileName">
          <declaration><![CDATA[private string GetActualFileName(FileInfo objFile)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="568" sc="9" el="572" ec="10">DesktopModules\Admin\Portals\Template.ascx.cs</location>
            <body hash="1e1ef2533be7990ff4fca4769b023fb8"><![CDATA[{
            return (objFile.StorageLocation == (int) FolderController.StorageLocationTypes.SecureFileSystem)
                ? objFile.FileName + ProtectedExtension
                : objFile.FileName;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetExportableTabs">
          <declaration><![CDATA[private TabCollection GetExportableTabs(TabCollection tabs)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="307" sc="9" el="310" ec="10">DesktopModules\Admin\Portals\Template.ascx.cs</location>
            <body hash="c467180a09f3f0e172cd3620b5c7b7d8"><![CDATA[{
            var exportableTabs = tabs.Where(kvp => !kvp.Value.IsSystem).Select(kvp => kvp.Value);
            return new TabCollection(exportableTabs);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetNodeIcon">
          <declaration><![CDATA[private string GetNodeIcon(TabInfo tab, out string toolTip)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="672" sc="9" el="699" ec="10">DesktopModules\Admin\Portals\Template.ascx.cs</location>
            <body hash="4544243fd14e797a6c84a731c71205a0"><![CDATA[{
            if (PortalSettings.HomeTabId == tab.TabID)
            {
                toolTip = LocalizeString("lblHome");
                return IconHome;
            }

            if (IsSecuredTab(tab))
            {
                if (IsAdminTab(tab))
                {
                    toolTip = LocalizeString("lblAdminOnly");
                    return AdminOnlyIcon;
                }

                if (IsRegisteredUserTab(tab))
                {
                    toolTip = LocalizeString("lblRegistered");
                    return RegisteredUsersIcon;
                }

                toolTip = LocalizeString("lblSecure");
                return SecuredIcon;
            }

            toolTip = LocalizeString("lblEveryone");
            return AllUsersIcon;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetNodeStatusIcon">
          <declaration><![CDATA[private string GetNodeStatusIcon(TabInfo tab)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="599" sc="9" el="614" ec="10">DesktopModules\Admin\Portals\Template.ascx.cs</location>
            <body hash="fc1ad32e14a33690a4ff3426782ce8ef"><![CDATA[{
            string s = "";
            if (tab.DisableLink)
            {
                s = s + string.Format("<img src=\"{0}\" alt=\"\" title=\"{1}\" class=\"statusicon\" />", IconPageDisabled, LocalizeString("lblDisabled"));
            }
            if (tab.IsVisible == false)
            {
                s = s + string.Format("<img src=\"{0}\" alt=\"\" title=\"{1}\" class=\"statusicon\" />", IconPageHidden, LocalizeString("lblHidden"));
            }
            if (tab.Url != "")
            {
                s = s + string.Format("<img src=\"{0}\" alt=\"\" title=\"{1}\" class=\"statusicon\" />", IconRedirect, LocalizeString("lblRedirect"));
            }
            return s;
        }]]></body>
          </codeblock>
        </method>
        <method name="IsAdminTab">
          <declaration><![CDATA[private bool IsAdminTab(TabInfo tab)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="576" sc="9" el="579" ec="10">DesktopModules\Admin\Portals\Template.ascx.cs</location>
            <body hash="f23159c09c9bfd7e0e16321064a20b0e"><![CDATA[{
            var perms = tab.TabPermissions;
            return perms.Cast<TabPermissionInfo>().All(perm => perm.RoleName == PortalSettings.AdministratorRoleName || !perm.AllowAccess);
        }]]></body>
          </codeblock>
        </method>
        <method name="IsRegisteredUserTab">
          <declaration><![CDATA[private bool IsRegisteredUserTab(TabInfo tab)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="581" sc="9" el="584" ec="10">DesktopModules\Admin\Portals\Template.ascx.cs</location>
            <body hash="9851e2b8008aa69df6cde7887726a0c0"><![CDATA[{
            var perms = tab.TabPermissions;
            return perms.Cast<TabPermissionInfo>().Any(perm => perm.RoleName == PortalSettings.RegisteredRoleName && perm.AllowAccess);
        }]]></body>
          </codeblock>
        </method>
        <method name="IsSecuredTab">
          <declaration><![CDATA[private static bool IsSecuredTab(TabInfo tab)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="586" sc="9" el="589" ec="10">DesktopModules\Admin\Portals\Template.ascx.cs</location>
            <body hash="9e0795f8962416810baa39b8f9e9768b"><![CDATA[{
            var perms = tab.TabPermissions;
            return perms.Cast<TabPermissionInfo>().All(perm => perm.RoleName != Globals.glbRoleAllUsersName || !perm.AllowAccess);
        }]]></body>
          </codeblock>
        </method>
        <method name="languageComboBox_OnItemChanged">
          <declaration><![CDATA[protected void languageComboBox_OnItemChanged(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="950" sc="9" el="953" ec="10">DesktopModules\Admin\Portals\Template.ascx.cs</location>
            <body hash="79a60f276e63f5755d151db477981142"><![CDATA[{
            var portalInfo = PortalController.Instance.GetPortal(Convert.ToInt32(cboPortals.SelectedValue));
            BindTree(portalInfo);
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="779" sc="9" el="801" ec="10">DesktopModules\Admin\Portals\Template.ascx.cs</location>
            <body hash="bc1ec35858b2be2dc88389966612cdc6"><![CDATA[{
            base.OnLoad(e);

            cmdCancel.Click += cmdCancel_Click;
            cmdExport.Click += cmdExport_Click;
            cboPortals.SelectedIndexChanged += cboPortals_SelectedIndexChanged;
            try
            {
                if (!Page.IsPostBack)
                {
                    cboPortals.DataTextField = "PortalName";
                    cboPortals.DataValueField = "PortalId";
                    cboPortals.DataSource = PortalController.Instance.GetPortals();
                    cboPortals.DataBind();
                    cboPortals.SelectedValue = PortalId.ToString(CultureInfo.InvariantCulture);
                    SetupSettings();
                }
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="SerializeEnabledLocales">
          <declaration><![CDATA[private void SerializeEnabledLocales(XmlWriter writer, PortalInfo portal)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="425" sc="9" el="450" ec="10">DesktopModules\Admin\Portals\Template.ascx.cs</location>
            <body hash="add20eeaef8102364a9d9384489e53e4"><![CDATA[{
            var enabledLocales = LocaleController.Instance.GetLocales(portal.PortalID);
            if (enabledLocales.Count > 1)
            {
                writer.WriteStartElement("locales");
                if (chkMultilanguage.Checked)
                {
                    foreach (ListItem item in this.chkLanguages.Items)
                    {
                        if (item.Selected)
                        {
                            writer.WriteElementString("locale", item.Value);
                        }
                    }
                }
                else
                {
                    foreach (var enabledLocale in enabledLocales)
                    {
                        writer.WriteElementString("locale", enabledLocale.Value.Code);
                    }
                }

                writer.WriteEndElement();
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="SerializeExtensionUrlProviders">
          <declaration><![CDATA[private static void SerializeExtensionUrlProviders(XmlWriter writer, int portalId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="453" sc="9" el="497" ec="10">DesktopModules\Admin\Portals\Template.ascx.cs</location>
            <body hash="b05802137460da39b617ad3175ea4266"><![CDATA[{
            var providers = ExtensionUrlProviderController.GetModuleProviders(portalId);
            if (!providers.Any())
            {
                return;
            }

            writer.WriteStartElement("extensionUrlProviders");

            foreach (var provider in providers)
            {
                writer.WriteStartElement("extensionUrlProvider");
                writer.WriteElementString("name", provider.ProviderConfig.ProviderName);
                writer.WriteElementString("active", provider.ProviderConfig.IsActive.ToString());
                var settings = provider.ProviderConfig.Settings;
                if (settings.Any())
                {
                    writer.WriteStartElement("settings");
                    foreach (var setting in settings)
                    {
                        writer.WriteStartElement("setting");
                        writer.WriteAttributeString("name", setting.Key);
                        writer.WriteAttributeString("value", setting.Value);
                        writer.WriteEndElement();
                    }

                    writer.WriteEndElement();
                }

                ////if (provider.ProviderConfig.TabIds.Any())
                ////{
                ////    writer.WriteStartElement("tabIds");
                ////    foreach (var tabId in provider.ProviderConfig.TabIds)
                ////    {
                ////        // TODO: translate to tab path?
                ////        writer.WriteElementString("tabId", tabId.ToString(CultureInfo.InvariantCulture));
                ////    }
                ////    writer.WriteEndElement();
                ////}

                writer.WriteEndElement();
            }

            writer.WriteEndElement();
        }]]></body>
          </codeblock>
        </method>
        <method name="SerializeFiles">
          <declaration><![CDATA[private void SerializeFiles(XmlWriter writer, PortalInfo objportal, string folderPath, ref ZipOutputStream zipFile)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="93" sc="9" el="119" ec="10">DesktopModules\Admin\Portals\Template.ascx.cs</location>
            <body hash="cda292ee6b0c117db981763a8e8ddf64"><![CDATA[{
            var folderManager = FolderManager.Instance;
            var objFolder = folderManager.GetFolder(objportal.PortalID, folderPath);

            writer.WriteStartElement("files");
            foreach (FileInfo objFile in folderManager.GetFiles(objFolder))
            {
                //verify that the file exists on the file system
                var filePath = objportal.HomeDirectoryMapPath + folderPath + GetActualFileName(objFile);
                if (File.Exists(filePath))
                {
                    writer.WriteStartElement("file");

                    writer.WriteElementString("contenttype", objFile.ContentType);
                    writer.WriteElementString("extension", objFile.Extension);
                    writer.WriteElementString("filename", objFile.FileName);
                    writer.WriteElementString("height", objFile.Height.ToString(CultureInfo.InvariantCulture));
                    writer.WriteElementString("size", objFile.Size.ToString(CultureInfo.InvariantCulture));
                    writer.WriteElementString("width", objFile.Width.ToString(CultureInfo.InvariantCulture));

                    writer.WriteEndElement();

                    FileSystemUtils.AddToZip(ref zipFile, filePath, GetActualFileName(objFile), folderPath);
                }
            }
            writer.WriteEndElement();
        }]]></body>
          </codeblock>
        </method>
        <method name="SerializeFolderPermissions">
          <declaration><![CDATA[private void SerializeFolderPermissions(XmlWriter writer, PortalInfo objportal, string folderPath)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="166" sc="9" el="183" ec="10">DesktopModules\Admin\Portals\Template.ascx.cs</location>
            <body hash="c529c28e9468237dbb09510d249ed965"><![CDATA[{
            FolderPermissionCollection permissions = FolderPermissionController.GetFolderPermissionsCollectionByFolder(objportal.PortalID, folderPath);

            writer.WriteStartElement("folderpermissions");

            foreach (FolderPermissionInfo permission in permissions)
            {
                writer.WriteStartElement("permission");

                writer.WriteElementString("permissioncode", permission.PermissionCode);
                writer.WriteElementString("permissionkey", permission.PermissionKey);
                writer.WriteElementString("rolename", permission.RoleName);
                writer.WriteElementString("allowaccess", permission.AllowAccess.ToString().ToLowerInvariant());

                writer.WriteEndElement();
            }
            writer.WriteEndElement();
        }]]></body>
          </codeblock>
        </method>
        <method name="SerializeFolders">
          <declaration><![CDATA[private void SerializeFolders(XmlWriter writer, PortalInfo objportal, ref ZipOutputStream zipFile)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="131" sc="9" el="153" ec="10">DesktopModules\Admin\Portals\Template.ascx.cs</location>
            <body hash="e6f7c606cbefc1b9d2297b8c203b0a91"><![CDATA[{
            //Sync db and filesystem before exporting so all required files are found
            var folderManager = FolderManager.Instance;
            folderManager.Synchronize(objportal.PortalID);
            writer.WriteStartElement("folders");

            foreach (FolderInfo folder in folderManager.GetFolders(objportal.PortalID))
            {
                writer.WriteStartElement("folder");

                writer.WriteElementString("folderpath", folder.FolderPath);
                writer.WriteElementString("storagelocation", folder.StorageLocation.ToString());

                //Serialize Folder Permissions
                SerializeFolderPermissions(writer, objportal, folder.FolderPath);

                //Serialize files
                SerializeFiles(writer, objportal, folder.FolderPath, ref zipFile);

                writer.WriteEndElement();
            }
            writer.WriteEndElement();
        }]]></body>
          </codeblock>
        </method>
        <method name="SerializePortalSettings">
          <declaration><![CDATA[private void SerializePortalSettings(XmlWriter writer, PortalInfo portal)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="313" sc="9" el="422" ec="10">DesktopModules\Admin\Portals\Template.ascx.cs</location>
            <body hash="65cdca9718cc15d0c82d4d77c1a13264"><![CDATA[{
            writer.WriteStartElement("settings");

            writer.WriteElementString("logofile", portal.LogoFile);
            writer.WriteElementString("footertext", portal.FooterText);
            writer.WriteElementString("userregistration", portal.UserRegistration.ToString(CultureInfo.InvariantCulture));
            writer.WriteElementString("banneradvertising", portal.BannerAdvertising.ToString(CultureInfo.InvariantCulture));
            writer.WriteElementString("defaultlanguage", portal.DefaultLanguage);

            Dictionary<string, string> settingsDictionary = PortalController.Instance.GetPortalSettings(portal.PortalID);

            string setting;
            settingsDictionary.TryGetValue("DefaultPortalSkin", out setting);
            if (!string.IsNullOrEmpty(setting))
            {
                writer.WriteElementString("skinsrc", setting);
            }
            settingsDictionary.TryGetValue("DefaultAdminSkin", out setting);
            if (!string.IsNullOrEmpty(setting))
            {
                writer.WriteElementString("skinsrcadmin", setting);
            }
            settingsDictionary.TryGetValue("DefaultPortalContainer", out setting);
            if (!string.IsNullOrEmpty(setting))
            {
                writer.WriteElementString("containersrc", setting);
            }
            settingsDictionary.TryGetValue("DefaultAdminContainer", out setting);
            if (!string.IsNullOrEmpty(setting))
            {
                writer.WriteElementString("containersrcadmin", setting);
            }
            settingsDictionary.TryGetValue("EnableSkinWidgets", out setting);
            if (!string.IsNullOrEmpty(setting))
            {
                writer.WriteElementString("enableskinwidgets", setting);
            }
            settingsDictionary.TryGetValue("portalaliasmapping", out setting);
            if (!string.IsNullOrEmpty(setting))
            {
                writer.WriteElementString("portalaliasmapping", setting);
            }

            writer.WriteElementString("contentlocalizationenabled", chkMultilanguage.Checked.ToString());

            settingsDictionary.TryGetValue("TimeZone", out setting);
            if (!string.IsNullOrEmpty(setting))
            {
                writer.WriteElementString("timezone", setting);
            }

            settingsDictionary.TryGetValue("EnablePopUps", out setting);
            if (!string.IsNullOrEmpty(setting))
            {
                writer.WriteElementString("enablepopups", setting);
            }

            settingsDictionary.TryGetValue("InlineEditorEnabled", out setting);
            if (!string.IsNullOrEmpty(setting))
            {
                writer.WriteElementString("inlineeditorenabled", setting);
            }

            settingsDictionary.TryGetValue("HideFoldersEnabled", out setting);
            if (!string.IsNullOrEmpty(setting))
            {
                writer.WriteElementString("hidefoldersenabled", setting);
            }

            settingsDictionary.TryGetValue("ControlPanelMode", out setting);
            if (!string.IsNullOrEmpty(setting))
            {
                writer.WriteElementString("controlpanelmode", setting);
            }

            settingsDictionary.TryGetValue("ControlPanelSecurity", out setting);
            if (!string.IsNullOrEmpty(setting))
            {
                writer.WriteElementString("controlpanelsecurity", setting);
            }

            settingsDictionary.TryGetValue("ControlPanelVisibility", out setting);
            if (!string.IsNullOrEmpty(setting))
            {
                writer.WriteElementString("controlpanelvisibility", setting);
            }

            writer.WriteElementString("hostspace", portal.HostSpace.ToString(CultureInfo.InvariantCulture));
            writer.WriteElementString("userquota", portal.UserQuota.ToString(CultureInfo.InvariantCulture));
            writer.WriteElementString("pagequota", portal.PageQuota.ToString(CultureInfo.InvariantCulture));

            settingsDictionary.TryGetValue("PageHeadText", out setting);
            if (!string.IsNullOrEmpty(setting))
            {
                writer.WriteElementString("pageheadtext", setting);
            }
            settingsDictionary.TryGetValue("InjectModuleHyperLink", out setting);
            if (!string.IsNullOrEmpty(setting))
            {
                writer.WriteElementString("injectmodulehyperlink", setting);
            }
            settingsDictionary.TryGetValue("AddCompatibleHttpHeader", out setting);
            if (!string.IsNullOrEmpty(setting))
            {
                writer.WriteElementString("addcompatiblehttpheader", setting);
            }

            //End Portal Settings
            writer.WriteEndElement();
        }]]></body>
          </codeblock>
        </method>
        <method name="SerializeProfileDefinitions">
          <declaration><![CDATA[private void SerializeProfileDefinitions(XmlWriter writer, PortalInfo objportal)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="195" sc="9" el="214" ec="10">DesktopModules\Admin\Portals\Template.ascx.cs</location>
            <body hash="e63f3241f42748a9d5fe7c999c625b6f"><![CDATA[{
            var objListController = new ListController();

            writer.WriteStartElement("profiledefinitions");
            foreach (ProfilePropertyDefinition objProfileProperty in
                ProfileController.GetPropertyDefinitionsByPortal(objportal.PortalID, false, false))
            {
                writer.WriteStartElement("profiledefinition");

                writer.WriteElementString("propertycategory", objProfileProperty.PropertyCategory);
                writer.WriteElementString("propertyname", objProfileProperty.PropertyName);

                var objList = objListController.GetListEntryInfo("DataType", objProfileProperty.DataType);
                writer.WriteElementString("datatype", objList == null ? "Unknown" : objList.Value);
                writer.WriteElementString("length", objProfileProperty.Length.ToString(CultureInfo.InvariantCulture));
                writer.WriteElementString("defaultvisibility", Convert.ToInt32(objProfileProperty.DefaultVisibility).ToString(CultureInfo.InvariantCulture));
                writer.WriteEndElement();
            }
            writer.WriteEndElement();
        }]]></body>
          </codeblock>
        </method>
        <method name="SerializeTabs">
          <declaration><![CDATA[private void SerializeTabs(XmlWriter writer, PortalInfo portal, Hashtable tabs, TabCollection tabCollection)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="217" sc="9" el="251" ec="10">DesktopModules\Admin\Portals\Template.ascx.cs</location>
            <body hash="57eec800ce63e8981a272d45812d05fe"><![CDATA[{
            foreach (TabInfo tab in tabCollection.Values)
            {
                //if not deleted
                if (!tab.IsDeleted)
                {
                    XmlNode tabNode = null;
                    if (string.IsNullOrEmpty(tab.CultureCode) || tab.CultureCode == portal.DefaultLanguage)
                    {
                        // page in default culture and checked or page doesn't exist in tree(which should always export).
                        var tabId = tab.TabID.ToString(CultureInfo.InvariantCulture);
                        if (ctlPages.FindNodeByValue(tabId) == null || ctlPages.CheckedNodes.Any(p => p.Value == tabId))
                        {
                            tabNode = TabController.SerializeTab(new XmlDocument(), tabs, tab, portal, chkContent.Checked);
                        }
                    }
                    else
                    {
                        // check if default culture page is selected or default page doesn't exist in tree(which should always export).
                        TabInfo defaultTab = tab.DefaultLanguageTab;
                        var tabId = defaultTab.TabID.ToString(CultureInfo.InvariantCulture);
                        if (defaultTab == null
                            || ctlPages.FindNodeByValue(tabId) == null
                            || ctlPages.CheckedNodes.Count(p => p.Value == defaultTab.TabID.ToString(CultureInfo.InvariantCulture)) > 0)
                        {
                            tabNode = TabController.SerializeTab(new XmlDocument(), tabs, tab, portal, chkContent.Checked);
                        }
                    }

                    if (tabNode != null)
                        tabNode.WriteTo(writer);
                }
            }

        }]]></body>
          </codeblock>
        </method>
        <method name="SerializeTabs">
          <declaration><![CDATA[private void SerializeTabs(XmlWriter writer, PortalInfo portal)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="265" sc="9" el="304" ec="10">DesktopModules\Admin\Portals\Template.ascx.cs</location>
            <body hash="8e6ed829b14efc184b738a4182e8d55f"><![CDATA[{
            //supporting object to build the tab hierarchy
            var tabs = new Hashtable();

            writer.WriteStartElement("tabs");

            if (chkMultilanguage.Checked)
            {
                //Process Default Language first
                SerializeTabs(writer, portal, tabs, 
                    GetExportableTabs(TabController.Instance.GetTabsByPortal(portal.PortalID).WithCulture(portal.DefaultLanguage, true)));

                //Process other locales
                foreach (ListItem language in chkLanguages.Items)
                {
                    if (language.Selected && language.Value != portal.DefaultLanguage)
                    {
                        SerializeTabs(writer, portal, tabs,
                            GetExportableTabs(TabController.Instance.GetTabsByPortal(portal.PortalID).WithCulture(language.Value, false)));
                    }                        
                }
            }
            else
            {
                if (chkMultilanguage.Enabled)
                {
                    // only export 1 language
                    string language = languageComboBox.SelectedValue;
                    SerializeTabs(writer, portal, tabs, 
                        GetExportableTabs(TabController.Instance.GetTabsByPortal(portal.PortalID).WithCulture(language, true)));
                }
                else
                {
                    SerializeTabs(writer, portal, tabs, 
                        GetExportableTabs(TabController.Instance.GetTabsByPortal(portal.PortalID)));
                }
            }

            writer.WriteEndElement();
        }]]></body>
          </codeblock>
        </method>
        <method name="SetupSettings">
          <declaration><![CDATA[private void SetupSettings()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="500" sc="9" el="528" ec="10">DesktopModules\Admin\Portals\Template.ascx.cs</location>
            <body hash="8a7e2fef01055a3d0ed7cfd23185c5ee"><![CDATA[{
            var portalInfo = PortalController.Instance.GetPortal(Convert.ToInt32(cboPortals.SelectedValue));

            Dictionary<string, string> settingsDictionary = PortalController.Instance.GetPortalSettings(portalInfo.PortalID);
            string setting;
            bool contentLocalizable = false;
            settingsDictionary.TryGetValue("ContentLocalizationEnabled", out setting);

            if (!String.IsNullOrEmpty(setting))
            {
                bool.TryParse(setting, out contentLocalizable);
            }
            if (contentLocalizable)
            {
                chkMultilanguage.Enabled = true;
                chkMultilanguage.Checked = true;
                rowLanguages.Visible = true;

                BindLocales(portalInfo);
            }
            else
            {
                chkMultilanguage.Enabled = false;
                chkMultilanguage.Checked = false;
                rowLanguages.Visible = false;
                rowMultiLanguage.Visible = false;
            }
            BindTree(portalInfo);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="cboPortals">
          <declaration><![CDATA[protected DnnComboBox cboPortals;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkContent">
          <declaration><![CDATA[protected CheckBox chkContent;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkFiles">
          <declaration><![CDATA[protected CheckBox chkFiles;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkLanguages">
          <declaration><![CDATA[protected CheckBoxList chkLanguages;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkModules">
          <declaration><![CDATA[protected CheckBox chkModules;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkMultilanguage">
          <declaration><![CDATA[protected CheckBox chkMultilanguage;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkProfile">
          <declaration><![CDATA[protected CheckBox chkProfile;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkRoles">
          <declaration><![CDATA[protected CheckBox chkRoles;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdCancel">
          <declaration><![CDATA[protected LinkButton cmdCancel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdExport">
          <declaration><![CDATA[protected LinkButton cmdExport;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ctlPages">
          <declaration><![CDATA[protected DnnTreeView ctlPages;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="languageComboBox">
          <declaration><![CDATA[protected DnnLanguageComboBox languageComboBox;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblFiles">
          <declaration><![CDATA[protected LabelControl lblFiles;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblLanguages">
          <declaration><![CDATA[protected LabelControl lblLanguages;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblModules">
          <declaration><![CDATA[protected LabelControl lblModules;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblMultilanguage">
          <declaration><![CDATA[protected LabelControl lblMultilanguage;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblNote">
          <declaration><![CDATA[protected Label lblNote;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblNoteSingleLanguage">
          <declaration><![CDATA[protected Label lblNoteSingleLanguage;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblPages">
          <declaration><![CDATA[protected LabelControl lblPages;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblProfile">
          <declaration><![CDATA[protected LabelControl lblProfile;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblRoles">
          <declaration><![CDATA[protected LabelControl lblRoles;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="MultiselectLanguages">
          <declaration><![CDATA[protected HtmlGenericControl MultiselectLanguages;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plContent">
          <declaration><![CDATA[protected LabelControl plContent;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plDescription">
          <declaration><![CDATA[protected LabelControl plDescription;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plPortals">
          <declaration><![CDATA[protected LabelControl plPortals;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plTemplateName">
          <declaration><![CDATA[protected LabelControl plTemplateName;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="rowLanguages">
          <declaration><![CDATA[protected HtmlGenericControl rowLanguages;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="rowMultiLanguage">
          <declaration><![CDATA[protected HtmlGenericControl rowMultiLanguage;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="SingleSelectLanguages">
          <declaration><![CDATA[protected HtmlGenericControl SingleSelectLanguages;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtDescription">
          <declaration><![CDATA[protected TextBox txtDescription;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtTemplateName">
          <declaration><![CDATA[protected TextBox txtTemplateName;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="valDescription">
          <declaration><![CDATA[protected RequiredFieldValidator valDescription;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="valFileName">
          <declaration><![CDATA[protected RequiredFieldValidator valFileName;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="AdminOnlyIcon">
          <declaration><![CDATA[private string AdminOnlyIcon]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="639" sc="13" el="641" ec="14">DesktopModules\Admin\Portals\Template.ascx.cs</location>
            <body hash="304be65a903e4d2b8bdc9c2e3544de0a"><![CDATA[{
                return ResolveUrl("~/DesktopModules/Admin/Tabs/images/Icon_UserAdmin.png");
            }]]></body>
          </codeblock>
        </property>
        <property name="AllUsersIcon">
          <declaration><![CDATA[private string AllUsersIcon]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="632" sc="13" el="634" ec="14">DesktopModules\Admin\Portals\Template.ascx.cs</location>
            <body hash="ba35de012ff035cd38466792acd12884"><![CDATA[{
                return ResolveUrl("~/DesktopModules/Admin/Tabs/images/Icon_Everyone.png");
            }]]></body>
          </codeblock>
        </property>
        <property name="IconHome">
          <declaration><![CDATA[private string IconHome]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="646" sc="13" el="648" ec="14">DesktopModules\Admin\Portals\Template.ascx.cs</location>
            <body hash="53f1a8c46803258bf261aec75e1c2bd9"><![CDATA[{
                return ResolveUrl("~/DesktopModules/Admin/Tabs/images/Icon_Home.png");
            }]]></body>
          </codeblock>
        </property>
        <property name="IconPageDisabled">
          <declaration><![CDATA[private string IconPageDisabled]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="618" sc="13" el="620" ec="14">DesktopModules\Admin\Portals\Template.ascx.cs</location>
            <body hash="1a21860294e21978b9bee22e1480e253"><![CDATA[{
                return ResolveUrl("~/DesktopModules/Admin/Tabs/images/Icon_Disabled.png");
            }]]></body>
          </codeblock>
        </property>
        <property name="IconPageHidden">
          <declaration><![CDATA[private string IconPageHidden]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="625" sc="13" el="627" ec="14">DesktopModules\Admin\Portals\Template.ascx.cs</location>
            <body hash="5b3ea26294da425f8ebbfe62496c2f79"><![CDATA[{
                return ResolveUrl("~/DesktopModules/Admin/Tabs/images/Icon_Hidden.png");
            }]]></body>
          </codeblock>
        </property>
        <property name="IconPortal">
          <declaration><![CDATA[private string IconPortal]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="594" sc="13" el="596" ec="14">DesktopModules\Admin\Portals\Template.ascx.cs</location>
            <body hash="18a9c6d3e8e6573332804f3deaa75503"><![CDATA[{
                return ResolveUrl("~/DesktopModules/Admin/Tabs/images/Icon_Portal.png");
            }]]></body>
          </codeblock>
        </property>
        <property name="IconRedirect">
          <declaration><![CDATA[private string IconRedirect]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="667" sc="13" el="669" ec="14">DesktopModules\Admin\Portals\Template.ascx.cs</location>
            <body hash="21ea37cb00a7384b5a55c9901cd49254"><![CDATA[{
                return ResolveUrl("~/DesktopModules/Admin/Tabs/images/Icon_Redirect.png");
            }]]></body>
          </codeblock>
        </property>
        <property name="ProtectedExtension">
          <declaration><![CDATA[private string ProtectedExtension]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="73" sc="13" el="75" ec="14">DesktopModules\Admin\Portals\Template.ascx.cs</location>
            <body hash="928ace66c91e5ff8a238b689b39e51d4"><![CDATA[{
                return Globals.glbProtectedExtension;
            }]]></body>
          </codeblock>
        </property>
        <property name="RegisteredUsersIcon">
          <declaration><![CDATA[private string RegisteredUsersIcon]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="653" sc="13" el="655" ec="14">DesktopModules\Admin\Portals\Template.ascx.cs</location>
            <body hash="a054f8bfee840d7ae89d4d44b5dbeb8c"><![CDATA[{
                return ResolveUrl("~/DesktopModules/Admin/Tabs/images/Icon_User.png");
            }]]></body>
          </codeblock>
        </property>
        <property name="SecuredIcon">
          <declaration><![CDATA[private string SecuredIcon]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="660" sc="13" el="662" ec="14">DesktopModules\Admin\Portals\Template.ascx.cs</location>
            <body hash="93da49cc8a394aba610b6743d63334d2"><![CDATA[{
                return ResolveUrl("~/DesktopModules/Admin/Tabs/images/Icon_UserSecure.png");
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="DotNetNuke.Modules.Admin.Sales">
    <class name="PayPalIPN">
      <declaration><![CDATA[public class PayPalIPN : PageBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public PayPalIPN()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="InitializeComponent">
          <declaration><![CDATA[private void InitializeComponent()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="49" sc="9" el="50" ec="10">admin\Sales\PayPalIPN.aspx.cs</location>
            <body hash="539fa760ca172337a931519768c64187"><![CDATA[{
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="53" sc="9" el="57" ec="10">admin\Sales\PayPalIPN.aspx.cs</location>
            <body hash="5f3c8c20cc44d36b74ae4760af9b8276"><![CDATA[{
            base.OnInit(e);

            InitializeComponent();
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="60" sc="9" el="232" ec="10">admin\Sales\PayPalIPN.aspx.cs</location>
            <body hash="d96b47a45b5b1513f6fd62bba15c11cb"><![CDATA[{
            base.OnLoad(e);
            try
            {
                bool blnValid = true;
//                string strTransactionID;
                int intRoleID = 0;
                int intPortalID = PortalSettings.PortalId;
                int intUserID = 0;
//                string strDescription;
                double dblAmount = 0;
//                string strEmail;
                bool blnCancel = false;
                string strPayPalID = Null.NullString;
                string strPost = "cmd=_notify-validate";
                foreach (string strName in Request.Form)
                {
                    string strValue = Request.Form[strName];
                    switch (strName)
                    {
                        case "txn_type": //get the transaction type
                            string strTransactionType = strValue;
                            switch (strTransactionType)
                            {
                                case "subscr_signup":
                                case "subscr_payment":
                                case "web_accept":
                                    break;
                                case "subscr_cancel":
                                    blnCancel = true;
                                    break;
                                default:
                                    blnValid = false;
                                    break;
                            }
                            break;
                        case "payment_status": //verify the status
                            if (strValue != "Completed")
                            {
                                blnValid = false;
                            }
                            break;
                        case "txn_id": //verify the transaction id for duplicates
//                            strTransactionID = strValue;
                            break;
                        case "receiver_email": //verify the PayPalId
                            strPayPalID = strValue;
                            break;
                        case "mc_gross": // verify the price
                            dblAmount = double.Parse(strValue);
                            break;
                        case "item_number": //get the RoleID
                            intRoleID = Int32.Parse(strValue);
                            //RoleInfo objRole = objRoles.GetRole(intRoleID, intPortalID);
                            break;
                        case "item_name": //get the product description
//                            strDescription = strValue;
                            break;
                        case "custom": //get the UserID
                            intUserID = Int32.Parse(strValue);
                            break;
                        case "email": //get the email
//                            strEmail = strValue;
                            break;
                    }
                    
					//reconstruct post for postback validation
					strPost += string.Format("&{0}={1}", Globals.HTTPPOSTEncode(strName), Globals.HTTPPOSTEncode(strValue));
                }
                
				//postback to verify the source
				if (blnValid)
                {
                    Dictionary<string, string> settings = PortalController.Instance.GetPortalSettings(PortalSettings.PortalId);
                    string strPayPalURL;

                    // Sandbox mode
                    if (settings.ContainsKey("paypalsandbox") && !String.IsNullOrEmpty(settings["paypalsandbox"]) && settings["paypalsandbox"].Equals("true", StringComparison.InvariantCultureIgnoreCase))
                    {
                        strPayPalURL = "https://www.sandbox.paypal.com/cgi-bin/webscr?";
                    }
                    else
                    {
                        strPayPalURL = "https://www.paypal.com/cgi-bin/webscr?";
                    }
                    var objRequest = Globals.GetExternalRequest(strPayPalURL);
                    objRequest.Method = "POST";
                    objRequest.ContentLength = strPost.Length;
                    objRequest.ContentType = "application/x-www-form-urlencoded";
                    using (var objStream = new StreamWriter(objRequest.GetRequestStream()))
                    {
                        objStream.Write(strPost);
                    }

                    string strResponse;
                    using (var objResponse = (HttpWebResponse) objRequest.GetResponse())
                    {
                        using (var sr = new StreamReader(objResponse.GetResponseStream()))
                        {
                            strResponse = sr.ReadToEnd();
                        }
                    }
                    switch (strResponse)
                    {
                        case "VERIFIED":
                            break;
                        default:
                            //possible fraud
							blnValid = false;
                            break;
                    }
                }
                if (blnValid)
                {
                    int intAdministratorRoleId = 0;
                    string strProcessorID = Null.NullString;
                    PortalInfo objPortalInfo = PortalController.Instance.GetPortal(intPortalID);
                    if (objPortalInfo != null)
                    {
                        intAdministratorRoleId = objPortalInfo.AdministratorRoleId;
                        strProcessorID = objPortalInfo.ProcessorUserId.ToLower();
                    }

                    if (intRoleID == intAdministratorRoleId)
                    {
						//admin portal renewal
                        strProcessorID = Host.ProcessorUserId.ToLower();
                        float portalPrice = objPortalInfo.HostFee;
                        if ((portalPrice.ToString() == dblAmount.ToString()) && (HttpUtility.UrlDecode(strPayPalID.ToLower()) == strProcessorID))
                        {
                            PortalController.Instance.UpdatePortalExpiry(intPortalID, PortalController.GetActivePortalLanguage(intPortalID));
                        }
                        else
                        {
                            var log = new LogInfo
                            {
                                LogPortalID = intPortalID,
                                LogPortalName = PortalSettings.PortalName,
                                LogUserID = intUserID,
                                LogTypeKey = EventLogController.EventLogType.POTENTIAL_PAYPAL_PAYMENT_FRAUD.ToString()
                            };
                            LogController.Instance.AddLog(log);
                        }
                    }
                    else
                    {
						//user subscription
                        RoleInfo objRoleInfo = RoleController.Instance.GetRole(intPortalID, r => r.RoleID == intRoleID);
                        float rolePrice = objRoleInfo.ServiceFee;
                        float trialPrice = objRoleInfo.TrialFee;
                        if ((rolePrice.ToString() == dblAmount.ToString() || trialPrice.ToString() == dblAmount.ToString()) && (HttpUtility.UrlDecode(strPayPalID.ToLower()) == strProcessorID))
                        {
                            RoleController.Instance.UpdateUserRole(intPortalID, intUserID, intRoleID, RoleStatus.Approved, false, blnCancel);
                        }
                        else
                        {
                            var log = new LogInfo
                            {
                                LogPortalID = intPortalID,
                                LogPortalName = PortalSettings.PortalName,
                                LogUserID = intUserID,
                                LogTypeKey = EventLogController.EventLogType.POTENTIAL_PAYPAL_PAYMENT_FRAUD.ToString()
                            };
                            LogController.Instance.AddLog(log);
                        }
                    }
                }
            }
            catch (Exception exc) //Page failed to load
            {
                Exceptions.ProcessPageLoadException(exc);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="PayPalSubscription">
      <declaration><![CDATA[public class PayPalSubscription : PageBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public PayPalSubscription()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
        <constructor name=".cctor">
          <declaration><![CDATA[static PayPalSubscription()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="43" sc="6" el="43" ec="105">admin\Sales\PayPalSubscription.aspx.cs</location>
            <body hash="de9228d751ff821fb2869b3a1b18b8d0"><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof (PayPalSubscription))]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="GetBillingFrequencyText">
          <declaration><![CDATA[private string GetBillingFrequencyText(string value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="242" sc="9" el="246" ec="10">admin\Sales\PayPalSubscription.aspx.cs</location>
            <body hash="a66de6ec7fe6c991a2ad87eecff5d502"><![CDATA[{
            var ctlEntry = new ListController();
            ListEntryInfo entry = ctlEntry.GetListEntryInfo("Frequency", value);
            return entry.Text;
        }]]></body>
          </codeblock>
        </method>
        <method name="InitializeComponent">
          <declaration><![CDATA[private void InitializeComponent()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="45" sc="9" el="46" ec="10">admin\Sales\PayPalSubscription.aspx.cs</location>
            <body hash="539fa760ca172337a931519768c64187"><![CDATA[{
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="49" sc="9" el="53" ec="10">admin\Sales\PayPalSubscription.aspx.cs</location>
            <body hash="5f3c8c20cc44d36b74ae4760af9b8276"><![CDATA[{
            base.OnInit(e);

            InitializeComponent();
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="56" sc="9" el="234" ec="10">admin\Sales\PayPalSubscription.aspx.cs</location>
            <body hash="a3b6cc20d69b0d92caf60cf5bacda740"><![CDATA[{
            base.OnLoad(e);
            try
            {
                UserInfo objUserInfo = null;
                int intUserID = -1;
                if (Request.IsAuthenticated)
                {
                    objUserInfo = UserController.Instance.GetCurrentUserInfo();
                    if (objUserInfo != null)
                    {
                        intUserID = objUserInfo.UserID;
                    }
                }
                int intRoleId = -1;
                if (Request.QueryString["roleid"] != null)
                {
                    intRoleId = int.Parse(Request.QueryString["roleid"]);
                }
                string strProcessorUserId = "";
                PortalInfo objPortalInfo = PortalController.Instance.GetPortal(PortalSettings.PortalId);
                if (objPortalInfo != null)
                {
                    strProcessorUserId = objPortalInfo.ProcessorUserId;
                }
                Dictionary<string, string> settings = PortalController.Instance.GetPortalSettings(PortalSettings.PortalId);
                string strPayPalURL;
                if (intUserID != -1 && intRoleId != -1 && !String.IsNullOrEmpty(strProcessorUserId))
                {
                    // Sandbox mode
                    if (settings.ContainsKey("paypalsandbox") && !String.IsNullOrEmpty(settings["paypalsandbox"]) && settings["paypalsandbox"].ToLower() == "true")
                    {
                        strPayPalURL = "https://www.sandbox.paypal.com/cgi-bin/webscr?";
                    }
                    else
                    {
                        strPayPalURL = "https://www.paypal.com/cgi-bin/webscr?";
                    }

                    if (Request.QueryString["cancel"] != null)
                    {
						//build the cancellation PayPal URL
                        strPayPalURL += "cmd=_subscr-find&alias=" + Globals.HTTPPOSTEncode(strProcessorUserId);
                    }
                    else
                    {
                        strPayPalURL += "cmd=_ext-enter";
                        RoleInfo objRole = RoleController.Instance.GetRole(PortalSettings.PortalId, r => r.RoleID == intRoleId);
                        if (objRole.RoleID != -1)
                        {
                            int intTrialPeriod = 1;
                            if (objRole.TrialPeriod != 0)
                            {
                                intTrialPeriod = objRole.TrialPeriod;
                            }
                            int intBillingPeriod = 1;
                            if (objRole.BillingPeriod != 0)
                            {
                                intBillingPeriod = objRole.BillingPeriod;
                            }
							
							//explicitely format numbers using en-US so numbers are correctly built
                            var enFormat = new CultureInfo("en-US");
                            string strService = string.Format(enFormat.NumberFormat, "{0:#####0.00}", objRole.ServiceFee);
                            string strTrial = string.Format(enFormat.NumberFormat, "{0:#####0.00}", objRole.TrialFee);
                            if (objRole.BillingFrequency == "O" || objRole.TrialFrequency == "O")
                            {
								//build the payment PayPal URL
                                strPayPalURL += "&redirect_cmd=_xclick&business=" + Globals.HTTPPOSTEncode(strProcessorUserId);
                                strPayPalURL += "&item_name=" +
                                                Globals.HTTPPOSTEncode(PortalSettings.PortalName + " - " + objRole.RoleName + " ( " + objRole.ServiceFee.ToString("#.##") + " " +
                                                                       PortalSettings.Currency + " )");
                                strPayPalURL += "&item_number=" + Globals.HTTPPOSTEncode(intRoleId.ToString());
                                strPayPalURL += "&no_shipping=1&no_note=1";
                                strPayPalURL += "&quantity=1";
                                strPayPalURL += "&amount=" + Globals.HTTPPOSTEncode(strService);
                                strPayPalURL += "&currency_code=" + Globals.HTTPPOSTEncode(PortalSettings.Currency);
                            }
                            else //recurring payments
                            {
								//build the subscription PayPal URL
                                strPayPalURL += "&redirect_cmd=_xclick-subscriptions&business=" + Globals.HTTPPOSTEncode(strProcessorUserId);
                                strPayPalURL += "&item_name=" +
                                                Globals.HTTPPOSTEncode(PortalSettings.PortalName + " - " + objRole.RoleName + " ( " + objRole.ServiceFee.ToString("#.##") + " " +
                                                                       PortalSettings.Currency + " every " + intBillingPeriod + " " + GetBillingFrequencyText(objRole.BillingFrequency) + " )");
                                strPayPalURL += "&item_number=" + Globals.HTTPPOSTEncode(intRoleId.ToString());
                                strPayPalURL += "&no_shipping=1&no_note=1";
                                if (objRole.TrialFrequency != "N")
                                {
                                    strPayPalURL += "&a1=" + Globals.HTTPPOSTEncode(strTrial);
                                    strPayPalURL += "&p1=" + Globals.HTTPPOSTEncode(intTrialPeriod.ToString());
                                    strPayPalURL += "&t1=" + Globals.HTTPPOSTEncode(objRole.TrialFrequency);
                                }
                                strPayPalURL += "&a3=" + Globals.HTTPPOSTEncode(strService);
                                strPayPalURL += "&p3=" + Globals.HTTPPOSTEncode(intBillingPeriod.ToString());
                                strPayPalURL += "&t3=" + Globals.HTTPPOSTEncode(objRole.BillingFrequency);
                                strPayPalURL += "&src=1";
                                strPayPalURL += "&currency_code=" + Globals.HTTPPOSTEncode(PortalSettings.Currency);
                            }
                        }
                        var ctlList = new ListController();

                        strPayPalURL += "&custom=" + Globals.HTTPPOSTEncode(intUserID.ToString());
                        strPayPalURL += "&first_name=" + Globals.HTTPPOSTEncode(objUserInfo.Profile.FirstName);
                        strPayPalURL += "&last_name=" + Globals.HTTPPOSTEncode(objUserInfo.Profile.LastName);
                        try
                        {
                            if (objUserInfo.Profile.Country == "United States")
                            {
                                ListEntryInfo colList = ctlList.GetListEntryInfo("Region", objUserInfo.Profile.Region);
                                strPayPalURL += "&address1=" +
                                                Globals.HTTPPOSTEncode(Convert.ToString(!String.IsNullOrEmpty(objUserInfo.Profile.Unit) ? objUserInfo.Profile.Unit + " " : "") +
                                                                       objUserInfo.Profile.Street);
                                strPayPalURL += "&city=" + Globals.HTTPPOSTEncode(objUserInfo.Profile.City);
                                strPayPalURL += "&state=" + Globals.HTTPPOSTEncode(colList.Value);
                                strPayPalURL += "&zip=" + Globals.HTTPPOSTEncode(objUserInfo.Profile.PostalCode);
                            }
                        }
						catch (Exception ex)
						{
							//issue getting user address
							Logger.Error(ex);
						}
						
                        //Return URL
                        if (settings.ContainsKey("paypalsubscriptionreturn") && !string.IsNullOrEmpty(settings["paypalsubscriptionreturn"]))
                        {
                            strPayPalURL += "&return=" + Globals.HTTPPOSTEncode(settings["paypalsubscriptionreturn"]);
                        }
                        else
                        {
                            strPayPalURL += "&return=" + Globals.HTTPPOSTEncode(Globals.AddHTTP(Globals.GetDomainName(Request)));
                        }
						
                        //Cancellation URL
                        if (settings.ContainsKey("paypalsubscriptioncancelreturn") && !string.IsNullOrEmpty(settings["paypalsubscriptioncancelreturn"]))
                        {
                            strPayPalURL += "&cancel_return=" + Globals.HTTPPOSTEncode(settings["paypalsubscriptioncancelreturn"]);
                        }
                        else
                        {
                            strPayPalURL += "&cancel_return=" + Globals.HTTPPOSTEncode(Globals.AddHTTP(Globals.GetDomainName(Request)));
                        }
						
                        //Instant Payment Notification URL
                        if (settings.ContainsKey("paypalsubscriptionnotifyurl") && !string.IsNullOrEmpty(settings["paypalsubscriptionnotifyurl"]))
                        {
                            strPayPalURL += "&notify_url=" + Globals.HTTPPOSTEncode(settings["paypalsubscriptionnotifyurl"]);
                        }
                        else
                        {
                            strPayPalURL += "&notify_url=" + Globals.HTTPPOSTEncode(Globals.AddHTTP(Globals.GetDomainName(Request)) + "/admin/Sales/PayPalIPN.aspx");
                        }
                        strPayPalURL += "&sra=1"; //reattempt on failure
                    }
					
					//redirect to PayPal
                    Response.Redirect(strPayPalURL, true);
                }
                else
                {
                    if ((settings.ContainsKey("paypalsubscriptioncancelreturn") && !string.IsNullOrEmpty(settings["paypalsubscriptioncancelreturn"])))
                    {
                        strPayPalURL = settings["paypalsubscriptioncancelreturn"];
                    }
                    else
                    {
                        strPayPalURL = Globals.AddHTTP(Globals.GetDomainName(Request));
                    }
					
					//redirect to PayPal
                    Response.Redirect(strPayPalURL, true);
                }
            }
            catch (Exception exc) //Page failed to load
            {
                Exceptions.ProcessPageLoadException(exc);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="Logger">
          <declaration><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof(PayPalSubscription));]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="Purchase">
      <declaration><![CDATA[public class Purchase : PortalModuleBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private int RoleID = -1;]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="46" sc="9" el="46" ec="33">admin\Sales\Purchase.ascx.cs</location>
            <body hash="097bd39092b8eb1e0ecb84295250296b"><![CDATA[private int RoleID = -1]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="cmdCancel_Click">
          <declaration><![CDATA[private void cmdCancel_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="197" sc="9" el="206" ec="10">admin\Sales\Purchase.ascx.cs</location>
            <body hash="c0543068aca9a229c0d529155d3c287a"><![CDATA[{
            try
            {
                Response.Redirect(Convert.ToString(ViewState["UrlReferrer"]), true);
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="cmdPurchase_Click">
          <declaration><![CDATA[private void cmdPurchase_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="151" sc="9" el="194" ec="10">admin\Sales\Purchase.ascx.cs</location>
            <body hash="aede6b4a866545e850fbe460ff182cea"><![CDATA[{
            try
            {
                string strPaymentProcessor = "";
                string strProcessorUserId = "";
                string strProcessorPassword = "";

                if (Page.IsValid)
                {
                    PortalInfo objPortalInfo = PortalController.Instance.GetPortal(PortalSettings.PortalId);
                    if (objPortalInfo != null)
                    {
                        strPaymentProcessor = objPortalInfo.PaymentProcessor;
                        strProcessorUserId = objPortalInfo.ProcessorUserId;
                        strProcessorPassword = objPortalInfo.ProcessorPassword;
                    }
                    if (strPaymentProcessor == "PayPal")
                    {
						//build secure PayPal URL
                        string strPayPalURL = "";
                        strPayPalURL = "https://www.paypal.com/xclick/business=" + Globals.HTTPPOSTEncode(strProcessorUserId);
                        strPayPalURL = strPayPalURL + "&item_name=" +
                                       Globals.HTTPPOSTEncode(PortalSettings.PortalName + " - " + lblDescription.Text + " ( " + txtUnits.Text + " units @ " + lblFee.Text + " " + lblFeeCurrency.Text +
                                                              " per " + lblFrequency.Text + " )");
                        strPayPalURL = strPayPalURL + "&item_number=" + Globals.HTTPPOSTEncode(Convert.ToString(RoleID));
                        strPayPalURL = strPayPalURL + "&quantity=1";
                        strPayPalURL = strPayPalURL + "&custom=" + Globals.HTTPPOSTEncode(UserInfo.UserID.ToString());
                        strPayPalURL = strPayPalURL + "&amount=" + Globals.HTTPPOSTEncode(lblTotal.Text);
                        strPayPalURL = strPayPalURL + "&currency_code=" + Globals.HTTPPOSTEncode(lblTotalCurrency.Text);
                        strPayPalURL = strPayPalURL + "&return=" + Globals.HTTPPOSTEncode("http://" + Globals.GetDomainName(Request));
                        strPayPalURL = strPayPalURL + "&cancel_return=" + Globals.HTTPPOSTEncode("http://" + Globals.GetDomainName(Request));
                        strPayPalURL = strPayPalURL + "&notify_url=" + Globals.HTTPPOSTEncode("http://" + Globals.GetDomainName(Request) + "/admin/Sales/PayPalIPN.aspx");
                        strPayPalURL = strPayPalURL + "&undefined_quantity=&no_note=1&no_shipping=1";

                        //redirect to PayPal
                        Response.Redirect(strPayPalURL, true);
                    }
                }
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="ConvertCurrency">
          <declaration><![CDATA[private double ConvertCurrency(string Amount, string FromCurrency, string ToCurrency)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="209" sc="9" el="240" ec="10">admin\Sales\Purchase.ascx.cs</location>
            <body hash="59743102bb9468b90b2845bcff0ef648"><![CDATA[{
            string strPost = "Amount=" + Amount + "&From=" + FromCurrency + "&To=" + ToCurrency;
            StreamWriter objStream;
            double retValue = 0;
            try
            {
                var objRequest = Globals.GetExternalRequest("http://www.xe.com/ucc/convert.cgi");
                objRequest.Method = "POST";
                objRequest.ContentLength = strPost.Length;
                objRequest.ContentType = "application/x-www-form-urlencoded";

                objStream = new StreamWriter(objRequest.GetRequestStream());
                objStream.Write(strPost);
                objStream.Close();

                var objResponse = (HttpWebResponse) objRequest.GetResponse();
                StreamReader sr;
                sr = new StreamReader(objResponse.GetResponseStream());
                string strResponse = sr.ReadToEnd();
                sr.Close();

                int intPos1 = strResponse.IndexOf(ToCurrency + "</B>");
                int intPos2 = strResponse.LastIndexOf("<B>", intPos1);

                retValue = Convert.ToDouble(strResponse.Substring(intPos2 + 3, (intPos1 - intPos2) - 4));
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
            return retValue;
        }]]></body>
          </codeblock>
        </method>
        <method name="InitializeComponent">
          <declaration><![CDATA[private void InitializeComponent()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="49" sc="9" el="50" ec="10">admin\Sales\Purchase.ascx.cs</location>
            <body hash="539fa760ca172337a931519768c64187"><![CDATA[{
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="53" sc="9" el="57" ec="10">admin\Sales\Purchase.ascx.cs</location>
            <body hash="5f3c8c20cc44d36b74ae4760af9b8276"><![CDATA[{
            base.OnInit(e);

            InitializeComponent();
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="60" sc="9" el="148" ec="10">admin\Sales\Purchase.ascx.cs</location>
            <body hash="bfdac93fda858308711f890eb946d6ba"><![CDATA[{
            base.OnLoad(e);

            cmdPurchase.Click += cmdPurchase_Click;
            cmdCancel.Click += cmdCancel_Click;

            try
            {
                double dblTotal;
                string strCurrency;

                if ((Request.QueryString["RoleID"] != null))
                {
                    RoleID = Int32.Parse(Request.QueryString["RoleID"]);
                }
                if (Page.IsPostBack == false)
                {
                    if (RoleID != -1)
                    {
                        RoleInfo objRole = RoleController.Instance.GetRole(PortalSettings.PortalId, r => r.RoleID == RoleID);

                        if (objRole.RoleID != -1)
                        {
                            lblServiceName.Text = objRole.RoleName;
                            if (!Null.IsNull(objRole.Description))
                            {
                                lblDescription.Text = objRole.Description;
                            }
                            if (RoleID == PortalSettings.AdministratorRoleId)
                            {
                                if (!Null.IsNull(PortalSettings.HostFee))
                                {
                                    lblFee.Text = PortalSettings.HostFee.ToString("#,##0.00");
                                }
                            }
                            else
                            {
                                if (!Null.IsNull(objRole.ServiceFee))
                                {
                                    lblFee.Text = objRole.ServiceFee.ToString("#,##0.00");
                                }
                            }
                            if (!Null.IsNull(objRole.BillingFrequency))
                            {
                                var ctlEntry = new ListController();
                                ListEntryInfo entry = ctlEntry.GetListEntryInfo("Frequency", objRole.BillingFrequency);
                                lblFrequency.Text = entry.Text;
                            }
                            txtUnits.Text = "1";
                            if (objRole.BillingFrequency == "O") //one-time fee
                            {
                                txtUnits.Enabled = false;
                            }
                        }
                        else //security violation attempt to access item not related to this Module
                        {
                            Response.Redirect(Globals.NavigateURL(), true);
                        }
                    }
					
                    //Store URL Referrer to return to portal
                    if (Request.UrlReferrer != null)
                    {
                        ViewState["UrlReferrer"] = Convert.ToString(Request.UrlReferrer);
                    }
                    else
                    {
                        ViewState["UrlReferrer"] = "";
                    }
                }
                if (RoleID == PortalSettings.AdministratorRoleId)
                {
                    strCurrency = Host.HostCurrency;
                }
                else
                {
                    strCurrency = PortalSettings.Currency;
                }
                dblTotal = Convert.ToDouble(lblFee.Text)*Convert.ToDouble(txtUnits.Text);
                lblTotal.Text = dblTotal.ToString("#.##");

                lblFeeCurrency.Text = strCurrency;
                lblTotalCurrency.Text = strCurrency;
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="cmdCancel">
          <declaration><![CDATA[protected LinkButton cmdCancel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdPurchase">
          <declaration><![CDATA[protected LinkButton cmdPurchase;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdUpdate">
          <declaration><![CDATA[protected LinkButton cmdUpdate;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblDescription">
          <declaration><![CDATA[protected Label lblDescription;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblFee">
          <declaration><![CDATA[protected Label lblFee;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblFeeCurrency">
          <declaration><![CDATA[protected Label lblFeeCurrency;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblFrequency">
          <declaration><![CDATA[protected Label lblFrequency;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblServiceName">
          <declaration><![CDATA[protected Label lblServiceName;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblTotal">
          <declaration><![CDATA[protected Label lblTotal;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblTotalCurrency">
          <declaration><![CDATA[protected Label lblTotalCurrency;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="RoleID">
          <declaration><![CDATA[private int RoleID = -1;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtUnits">
          <declaration><![CDATA[protected TextBox txtUnits;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="valUnits1">
          <declaration><![CDATA[protected RequiredFieldValidator valUnits1;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="valUnits2">
          <declaration><![CDATA[protected CompareValidator valUnits2;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="valUnits3">
          <declaration><![CDATA[protected CompareValidator valUnits3;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="DotNetNuke.Modules.Admin.Scheduler">
    <class name="EditSchedule">
      <declaration><![CDATA[public class EditSchedule : PortalModuleBase, IActionable]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public EditSchedule()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="BindData">
          <declaration><![CDATA[private void BindData()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="90" sc="9" el="136" ec="10">DesktopModules\Admin\Scheduler\EditSchedule.ascx.cs</location>
            <body hash="ed64a50b332503b22ba6b8387ef8f831"><![CDATA[{
            if (Request.QueryString["ScheduleID"] != null)
            {
                ViewState["ScheduleID"] = Request.QueryString["ScheduleID"];
                ScheduleItem scheduleItem = SchedulingProvider.Instance().GetSchedule(Convert.ToInt32(Request.QueryString["ScheduleID"]));
                txtFriendlyName.Text = scheduleItem.FriendlyName;
                txtType.Text = scheduleItem.TypeFullName;
                chkEnabled.Checked = scheduleItem.Enabled;
                if (!Null.IsNull(scheduleItem.ScheduleStartDate))
                {
                    startScheduleDatePicker.SelectedDate = scheduleItem.ScheduleStartDate;
                }
                txtTimeLapse.Text = Convert.ToString(scheduleItem.TimeLapse);
                if (ddlTimeLapseMeasurement.FindItemByValue(scheduleItem.TimeLapseMeasurement) != null)
                {
                    ddlTimeLapseMeasurement.FindItemByValue(scheduleItem.TimeLapseMeasurement).Selected = true;
                }
                txtRetryTimeLapse.Text = scheduleItem.RetryTimeLapse == Null.NullInteger ? string.Empty : Convert.ToString(scheduleItem.RetryTimeLapse);
                if (ddlRetryTimeLapseMeasurement.FindItemByValue(scheduleItem.RetryTimeLapseMeasurement) != null)
                {
                    ddlRetryTimeLapseMeasurement.FindItemByValue(scheduleItem.RetryTimeLapseMeasurement).Selected = true;
                }
                if (ddlRetainHistoryNum.FindItemByValue(Convert.ToString(scheduleItem.RetainHistoryNum)) != null)
                {
                    ddlRetainHistoryNum.FindItemByValue(Convert.ToString(scheduleItem.RetainHistoryNum)).Selected = true;
                }
                else
                {
                    string scheduleItemRetainHistoryNum = scheduleItem.RetainHistoryNum.ToString();
                    ddlRetainHistoryNum.AddItem(scheduleItemRetainHistoryNum, scheduleItemRetainHistoryNum);
                    ddlRetainHistoryNum.FindItemByValue(Convert.ToString(scheduleItem.RetainHistoryNum)).Selected = true;
                }
                if (ddlAttachToEvent.FindItemByValue(scheduleItem.AttachToEvent) != null)
                {
                    ddlAttachToEvent.FindItemByValue(scheduleItem.AttachToEvent).Selected = true;
                }
                chkCatchUpEnabled.Checked = scheduleItem.CatchUpEnabled;
                txtObjectDependencies.Text = scheduleItem.ObjectDependencies;
                txtServers.Text = scheduleItem.Servers.Trim(',');
            }
            else
            {
                cmdDelete.Visible = false;
                cmdRun.Visible = false;
                txtType.Enabled = true;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="CalculateTime">
          <declaration><![CDATA[private static DateTime CalculateTime(int lapse, string measurement)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="331" sc="9" el="358" ec="10">DesktopModules\Admin\Scheduler\EditSchedule.ascx.cs</location>
            <body hash="45b94a5c145ef5a2cfe6779f062a9a6c"><![CDATA[{
            var nextTime = new DateTime();
            switch (measurement)
            {
                case "s":
                    nextTime = DateTime.Now.AddSeconds(lapse);
                    break;
                case "m":
                    nextTime = DateTime.Now.AddMinutes(lapse);
                    break;
                case "h":
                    nextTime = DateTime.Now.AddHours(lapse);
                    break;
                case "d":
                    nextTime = DateTime.Now.AddDays(lapse);
                    break;
                case "w":
                    nextTime = DateTime.Now.AddDays(lapse);
                    break;
                case "mo":
                    nextTime = DateTime.Now.AddMonths(lapse);
                    break;
                case "y":
                    nextTime = DateTime.Now.AddYears(lapse);
                    break;
            }
            return nextTime;
        }]]></body>
          </codeblock>
        </method>
        <method name="CreateScheduleItem">
          <declaration><![CDATA[private ScheduleItem CreateScheduleItem()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="139" sc="9" el="179" ec="10">DesktopModules\Admin\Scheduler\EditSchedule.ascx.cs</location>
            <body hash="a79a23a2ee7b60f0b03e3d056945f622"><![CDATA[{
            var scheduleItem = new ScheduleItem();
            scheduleItem.TypeFullName = txtType.Text.Replace(" ", "");
            scheduleItem.FriendlyName = txtFriendlyName.Text;
            //DNN-4964 - values for time lapse can't be set to 0, -1 or left empty (client side validation has been added)
            scheduleItem.TimeLapse = Convert.ToInt32(txtTimeLapse.Text);
            scheduleItem.TimeLapseMeasurement = ddlTimeLapseMeasurement.SelectedItem.Value;
            scheduleItem.RetryTimeLapse = string.IsNullOrWhiteSpace(txtRetryTimeLapse.Text) ? Null.NullInteger : Convert.ToInt32(txtRetryTimeLapse.Text);
            scheduleItem.RetryTimeLapseMeasurement = ddlRetryTimeLapseMeasurement.SelectedItem.Value;
            scheduleItem.RetainHistoryNum = Convert.ToInt32(ddlRetainHistoryNum.SelectedItem.Value);
            scheduleItem.AttachToEvent = ddlAttachToEvent.SelectedItem.Value;
            scheduleItem.CatchUpEnabled = chkCatchUpEnabled.Checked;
            scheduleItem.Enabled = chkEnabled.Checked;
            scheduleItem.ObjectDependencies = txtObjectDependencies.Text;
            scheduleItem.ScheduleStartDate = startScheduleDatePicker.SelectedDate != null
                                                 ? startScheduleDatePicker.SelectedDate.Value
                                                 : Null.NullDate;

            //if servers are specified, the concatenated string needs to be prefixed and suffixed by commas ( ie. ",SERVER1,SERVER2," )
            var servers = Null.NullString;

            if (!String.IsNullOrEmpty(txtServers.Text))
            {
                servers = txtServers.Text;

            }

            if (!string.IsNullOrEmpty(servers))
            {
                if (!servers.StartsWith(","))
                {
                    servers = "," + servers;
                }
                if (!servers.EndsWith(","))
                {
                    servers = servers + ",";
                }
            }
            scheduleItem.Servers = servers;
            return scheduleItem;
        }]]></body>
          </codeblock>
        </method>
        <method name="OnDeleteClick">
          <declaration><![CDATA[protected void OnDeleteClick(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="244" sc="9" el="249" ec="10">DesktopModules\Admin\Scheduler\EditSchedule.ascx.cs</location>
            <body hash="685401d204cf7b9261b8dd0265cec8e4"><![CDATA[{
            var objScheduleItem = new ScheduleItem { ScheduleID = Convert.ToInt32(ViewState["ScheduleID"]) };
            SchedulingProvider.Instance().DeleteSchedule(objScheduleItem);
            var strMessage = Localization.GetString("DeleteSuccess", LocalResourceFile);
            UI.Skins.Skin.AddModuleMessage(this, strMessage, ModuleMessage.ModuleMessageType.GreenSuccess);
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="191" sc="9" el="236" ec="10">DesktopModules\Admin\Scheduler\EditSchedule.ascx.cs</location>
            <body hash="f5ad553764a3796ab37691b55e89794b"><![CDATA[{
            base.OnLoad(e);

			JavaScript.RequestRegistration(CommonJs.DnnPlugins);

            cmdDelete.Click += OnDeleteClick;
            cmdRun.Click += OnRunClick;
            cmdUpdate.Click += OnUpdateClick;

            try
            {
                if (!Page.IsPostBack)
                {
                    cmdCancel.NavigateUrl = Globals.NavigateURL();
                    BindData();
                }

                if (chkEnabled.Checked)
                {
                    //if startdate is in the future Run Now will change NextStart value, to prevent this disable it if start date is in the future or present
                    if ((startScheduleDatePicker.SelectedDate ?? Null.NullDate) >= DateTime.Now)
                    {
                        cmdRun.Visible = false;
                    }
                    else
                    {
                        // Hide "Run now" if scheduler should not run on this server
                        if (!SchedulingController.CanRunOnThisServer(txtServers.Text))
                        {
                            cmdRun.Visible = false;
                        }
                    }
                }
                else
                {
                    cmdRun.Enabled = false;
                    cmdRun.Visible = false;
                }


            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnRunClick">
          <declaration><![CDATA[protected void OnRunClick(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="252" sc="9" el="267" ec="10">DesktopModules\Admin\Scheduler\EditSchedule.ascx.cs</location>
            <body hash="30a90737c351db705db348f7d1986838"><![CDATA[{
            var scheduleItem = CreateScheduleItem();
            if (ViewState["ScheduleID"] != null)
            {
                scheduleItem.ScheduleID = Convert.ToInt32(ViewState["ScheduleID"]);
                SchedulingProvider.Instance().RunScheduleItemNow(scheduleItem, true);
            }
            SchedulingProvider.Instance().RunScheduleItemNow(scheduleItem, true);

            UI.Skins.Skin.AddModuleMessage(this, Localization.GetString("RunNow", LocalResourceFile), ModuleMessage.ModuleMessageType.GreenSuccess);

            if (SchedulingProvider.SchedulerMode == SchedulerMode.TIMER_METHOD)
            {
                SchedulingProvider.Instance().ReStart("Change made to schedule.");
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnUpdateClick">
          <declaration><![CDATA[protected void OnUpdateClick(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="276" sc="9" el="313" ec="10">DesktopModules\Admin\Scheduler\EditSchedule.ascx.cs</location>
            <body hash="62a841a0f69cca6c1c8c6f5ce7414c6c"><![CDATA[{
            if (VerifyValidTimeLapseRetry() == false)
            {
                return;
            }
            var objScheduleItem = CreateScheduleItem();
            if (ViewState["ScheduleID"] != null)
            {
                objScheduleItem.ScheduleID = Convert.ToInt32(ViewState["ScheduleID"]);
                var scheduleItem = SchedulingProvider.Instance().GetSchedule(Convert.ToInt32(Request.QueryString["ScheduleID"]));
                if ((startScheduleDatePicker.SelectedDate != scheduleItem.ScheduleStartDate) || 
                    (chkEnabled.Checked) ||
                    (txtTimeLapse.Text != Convert.ToString(scheduleItem.TimeLapse)) ||
                    (txtRetryTimeLapse.Text.Trim() != (scheduleItem.RetryTimeLapse == Null.NullInteger ? string.Empty : Convert.ToString(scheduleItem.RetryTimeLapse))) ||
                    (ddlRetryTimeLapseMeasurement.SelectedValue != scheduleItem.RetryTimeLapseMeasurement) ||
                    (ddlTimeLapseMeasurement.SelectedValue != scheduleItem.TimeLapseMeasurement))
                {
                    SchedulingProvider.Instance().UpdateSchedule(objScheduleItem);     
                }
                else
                {
                    SchedulingProvider.Instance().UpdateScheduleWithoutExecution(objScheduleItem);
                                 
                }

            }
            else
            {
                SchedulingProvider.Instance().AddSchedule(objScheduleItem);
            }
            var strMessage = Localization.GetString("UpdateSuccess", LocalResourceFile);
            UI.Skins.Skin.AddModuleMessage(this, strMessage, ModuleMessage.ModuleMessageType.GreenSuccess);
            if (SchedulingProvider.SchedulerMode == SchedulerMode.TIMER_METHOD)
            {
                SchedulingProvider.Instance().ReStart("Change made to schedule.");
            }
            Response.Redirect(Globals.NavigateURL(), true);
        }]]></body>
          </codeblock>
        </method>
        <method name="VerifyValidTimeLapseRetry">
          <declaration><![CDATA[private bool VerifyValidTimeLapseRetry()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="316" sc="9" el="328" ec="10">DesktopModules\Admin\Scheduler\EditSchedule.ascx.cs</location>
            <body hash="b6733a6da29dd8acb1b3fe1269e721f1"><![CDATA[{
            // Do not validate, if retry time lapse is not defined
            if (string.IsNullOrWhiteSpace(txtRetryTimeLapse.Text)) return true;
            
            var timeLapse = CalculateTime(Convert.ToInt32(txtTimeLapse.Text), ddlTimeLapseMeasurement.SelectedItem.Value);
            var retry = CalculateTime(Convert.ToInt32(txtRetryTimeLapse.Text), ddlRetryTimeLapseMeasurement.SelectedItem.Value);
            if (retry > timeLapse)
            {
                UI.Skins.Skin.AddModuleMessage(this, Localization.GetString("InvalidFrequencyAndRetry", LocalResourceFile), ModuleMessage.ModuleMessageType.RedError);
                return false;
            }
            return true;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="chkCatchUpEnabled">
          <declaration><![CDATA[protected CheckBox chkCatchUpEnabled;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkEnabled">
          <declaration><![CDATA[protected CheckBox chkEnabled;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdCancel">
          <declaration><![CDATA[protected HyperLink cmdCancel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdDelete">
          <declaration><![CDATA[protected LinkButton cmdDelete;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdRun">
          <declaration><![CDATA[protected LinkButton cmdRun;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdUpdate">
          <declaration><![CDATA[protected LinkButton cmdUpdate;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ddlAttachToEvent">
          <declaration><![CDATA[protected DnnComboBox ddlAttachToEvent;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ddlRetainHistoryNum">
          <declaration><![CDATA[protected DnnComboBox ddlRetainHistoryNum;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ddlRetryTimeLapseMeasurement">
          <declaration><![CDATA[protected DnnComboBox ddlRetryTimeLapseMeasurement;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ddlTimeLapseMeasurement">
          <declaration><![CDATA[protected DnnComboBox ddlTimeLapseMeasurement;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plAttachToEvent">
          <declaration><![CDATA[protected LabelControl plAttachToEvent;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plCatchUpEnabled">
          <declaration><![CDATA[protected LabelControl plCatchUpEnabled;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plEnabled">
          <declaration><![CDATA[protected LabelControl plEnabled;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plFriendlyName">
          <declaration><![CDATA[protected LabelControl plFriendlyName;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plObjectDependencies">
          <declaration><![CDATA[protected LabelControl plObjectDependencies;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plRetainHistoryNum">
          <declaration><![CDATA[protected LabelControl plRetainHistoryNum;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plRetryTimeLapse">
          <declaration><![CDATA[protected LabelControl plRetryTimeLapse;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plScheduleStartDate">
          <declaration><![CDATA[protected LabelControl plScheduleStartDate;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plServers">
          <declaration><![CDATA[protected LabelControl plServers;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plTimeLapse">
          <declaration><![CDATA[protected LabelControl plTimeLapse;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plType">
          <declaration><![CDATA[protected LabelControl plType;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="RetryTimeLapseValidator">
          <declaration><![CDATA[protected RangeValidator RetryTimeLapseValidator;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="startScheduleDatePicker">
          <declaration><![CDATA[protected DnnDateTimePicker startScheduleDatePicker;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="TimeLapseRequiredValidator">
          <declaration><![CDATA[protected RequiredFieldValidator TimeLapseRequiredValidator;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="TimeLapseValidator">
          <declaration><![CDATA[protected RangeValidator TimeLapseValidator;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtFriendlyName">
          <declaration><![CDATA[protected TextBox txtFriendlyName;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtObjectDependencies">
          <declaration><![CDATA[protected TextBox txtObjectDependencies;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtRetryTimeLapse">
          <declaration><![CDATA[protected TextBox txtRetryTimeLapse;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtServers">
          <declaration><![CDATA[protected TextBox txtServers;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtTimeLapse">
          <declaration><![CDATA[protected TextBox txtTimeLapse;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtType">
          <declaration><![CDATA[protected TextBox txtType;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="valType">
          <declaration><![CDATA[protected RequiredFieldValidator valType;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="ModuleActions">
          <declaration><![CDATA[public ModuleActionCollection ModuleActions]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="59" sc="13" el="82" ec="14">DesktopModules\Admin\Scheduler\EditSchedule.ascx.cs</location>
            <body hash="41e6eb7cb675348d05b0ebbfb059a2c9"><![CDATA[{
                var actionCollection = new ModuleActionCollection
                                  {
                                      {
                                          GetNextActionID(), Localization.GetString(ModuleActionType.ContentOptions, LocalResourceFile), ModuleActionType.AddContent, "", "icon_scheduler_16px.gif",
                                          EditUrl("", "", "Status"), false, SecurityAccessLevel.Host, true, false
                                          }
                                  };
                if (Request.QueryString["ScheduleID"] != null)
                {
                    var scheduleID = Convert.ToInt32(Request.QueryString["ScheduleID"]);
                    actionCollection.Add(GetNextActionID(),
                                Localization.GetString("ScheduleHistory.Action", LocalResourceFile),
                                ModuleActionType.AddContent,
                                "",
                                "icon_profile_16px.gif",
                                EditUrl("ScheduleID", scheduleID.ToString(), "History"),
                                false,
                                SecurityAccessLevel.Host,
                                true,
                                false);
                }
                return actionCollection;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="ViewSchedule">
      <declaration><![CDATA[public class ViewSchedule : PortalModuleBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public ViewSchedule()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="BindServers">
          <declaration><![CDATA[private void BindServers()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="195" sc="9" el="205" ec="10">DesktopModules\Admin\Scheduler\ViewSchedule.ascx.cs</location>
            <body hash="a0877e2e264bac081e2e8378eb8c91cc"><![CDATA[{
            var servers = ServerController.GetServers();
            foreach (var webServer in servers)
            {
                if (webServer.Enabled)
                {
                    var serverName = ServerController.GetServerName(webServer);
                    ddlServerName.AddItem(serverName, serverName);
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="BindSettings">
          <declaration><![CDATA[private void BindSettings()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="181" sc="9" el="192" ec="10">DesktopModules\Admin\Scheduler\ViewSchedule.ascx.cs</location>
            <body hash="c267babec56663afe62635eb94dccee3"><![CDATA[{
            if (cboSchedulerMode.FindItemByValue(((int)Entities.Host.Host.SchedulerMode).ToString()) != null)
            {
                cboSchedulerMode.FindItemByValue(((int)Entities.Host.Host.SchedulerMode).ToString()).Selected = true;
            }
            else
            {
                cboSchedulerMode.FindItemByValue("1").Selected = true;
            }
            ViewState["SelectedSchedulerMode"] = cboSchedulerMode.SelectedItem.Value;
            txtScheduleAppStartDelay.Text = HostController.Instance.GetInteger("SchedulerdelayAtAppStart", 1).ToString();
        }]]></body>
          </codeblock>
        </method>
        <method name="cmdUpdate_Click">
          <declaration><![CDATA[private void cmdUpdate_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="174" sc="9" el="178" ec="10">DesktopModules\Admin\Scheduler\ViewSchedule.ascx.cs</location>
            <body hash="41a594bb3a2e46966644621ed68040b2"><![CDATA[{
            UpdateSchedule();
            HostController.Instance.Update("SchedulerMode", cboSchedulerMode.SelectedItem.Value, false);
            HostController.Instance.Update("SchedulerdelayAtAppStart", txtScheduleAppStartDelay.Text);
        }]]></body>
          </codeblock>
        </method>
        <method name="ddlServerName_SelectedIndexChanged">
          <declaration><![CDATA[private void ddlServerName_SelectedIndexChanged(object sender, RadComboBoxSelectedIndexChangedEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="148" sc="9" el="150" ec="10">DesktopModules\Admin\Scheduler\ViewSchedule.ascx.cs</location>
            <body hash="a8a4dc0e9a52533703e777291060655b"><![CDATA[{
            dgSchedule.Rebind();
        }]]></body>
          </codeblock>
        </method>
        <method name="GetTimeLapse">
          <declaration><![CDATA[protected string GetTimeLapse(int timeLapse, string timeLapseMeasurement)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="62" sc="9" el="108" ec="10">DesktopModules\Admin\Scheduler\ViewSchedule.ascx.cs</location>
            <body hash="3acb9e7f7d18e91ca8f8516ad35059c6"><![CDATA[{
            if (timeLapse != Null.NullInteger)
            {
                var str = Null.NullString;
                var strPrefix = Localization.GetString("TimeLapsePrefix", LocalResourceFile);
                var strSec = Localization.GetString("Second", LocalResourceFile);
                var strMn = Localization.GetString("Minute", LocalResourceFile);
                var strHour = Localization.GetString("Hour", LocalResourceFile);
                var strDay = Localization.GetString("Day", LocalResourceFile);
                var strWeek = Localization.GetString("Week", LocalResourceFile);
                var strMonth = Localization.GetString("Month", LocalResourceFile);
                var strYear = Localization.GetString("Year", LocalResourceFile);
                var strSecs = Localization.GetString("Seconds");
                var strMns = Localization.GetString("Minutes");
                var strHours = Localization.GetString("Hours");
                var strDays = Localization.GetString("Days");
                var strWeeks = Localization.GetString("Weeks");
                var strMonths = Localization.GetString("Months");
                var strYears = Localization.GetString("Years");
                switch (timeLapseMeasurement)
                {
                    case "s":
                        str = strPrefix + " " + timeLapse + " " + (timeLapse > 1 ? strSecs : strSec);
                        break;
                    case "m":
                        str = strPrefix + " " + timeLapse + " " + (timeLapse > 1 ? strMns : strMn);
                        break;
                    case "h":
                        str = strPrefix + " " + timeLapse + " " + (timeLapse > 1 ? strHours : strHour);
                        break;
                    case "d":
                        str = strPrefix + " " + timeLapse + " " + (timeLapse > 1 ? strDays : strDay);
                        break;
                    case "w":
                        str = strPrefix + " " + timeLapse + " " + (timeLapse > 1 ? strWeeks : strWeek);
                        break;
                    case "mo":
                        str = strPrefix + " " + timeLapse + " " + (timeLapse > 1 ? strMonths : strMonth);
                        break;
                    case "y":
                        str = strPrefix + " " + timeLapse + " " + (timeLapse > 1 ? strYears : strYear);
                        break;
                }
                return str;
            }
            return Localization.GetString("n/a", LocalResourceFile);
        }]]></body>
          </codeblock>
        </method>
        <method name="OnGridItemDataBound">
          <declaration><![CDATA[protected void OnGridItemDataBound(object sender, GridItemEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="227" sc="9" el="265" ec="10">DesktopModules\Admin\Scheduler\ViewSchedule.ascx.cs</location>
            <body hash="150fa9fcec9a99bad4205c9249387a8f"><![CDATA[{
            if (!(e.Item is GridDataItem)) return;
            var scheduleKey = (int)e.Item.OwnerTableView.DataKeyValues[e.Item.ItemIndex]["ScheduleID"];
            var enabledKey = (bool)e.Item.OwnerTableView.DataKeyValues[e.Item.ItemIndex]["Enabled"];
            var timeLapseKey = (int)e.Item.OwnerTableView.DataKeyValues[e.Item.ItemIndex]["TimeLapse"];
            var retryTimeLapseKey = (int)e.Item.OwnerTableView.DataKeyValues[e.Item.ItemIndex]["RetryTimeLapse"];
            var timeLapseMeasurementKey = e.Item.OwnerTableView.DataKeyValues[e.Item.ItemIndex]["TimeLapseMeasurement"].ToString();
            var retryTimeLapseMeasurementKey = e.Item.OwnerTableView.DataKeyValues[e.Item.ItemIndex]["RetryTimeLapseMeasurement"].ToString();
            var nextStart = e.Item.OwnerTableView.DataKeyValues[e.Item.ItemIndex]["NextStart"];

            var dataItem = (GridDataItem)e.Item;

            var hlEdit = ((HyperLink)(dataItem)["EditItem"].FindControl("hlEdit"));
            hlEdit.NavigateUrl = EditUrl("ScheduleID", scheduleKey.ToString());
            hlEdit.Visible = IsEditable;

            var imgEdit = ((Image)(dataItem)["EditItem"].FindControl("imgEdit"));
            imgEdit.AlternateText = Localization.GetString("Edit", LocalResourceFile);
            imgEdit.ToolTip = Localization.GetString("Edit", LocalResourceFile);
            imgEdit.Visible = IsEditable;

            var lblFrequency = ((Label)(dataItem)["Frequency"].FindControl("lblFrequency"));
            lblFrequency.Text = GetTimeLapse(timeLapseKey, timeLapseMeasurementKey);

            var lblRetryTimeLapse = ((Label)(dataItem)["RetryTimeLapse"].FindControl("lblRetryTimeLapse"));
            lblRetryTimeLapse.Text = GetTimeLapse(retryTimeLapseKey, retryTimeLapseMeasurementKey);

            var lblNextStart = ((Label)(dataItem)["NextStart"].FindControl("lblNextStart"));
            lblNextStart.Text = nextStart.ToString();
            // hide next start if scheduler is not enabled or no next start could be calculated
            lblNextStart.Visible = enabledKey && !Null.IsNull(nextStart);

            var hlHistory = ((HyperLink)(dataItem)["ViewHistory"].FindControl("hlHistory"));
            hlHistory.NavigateUrl = EditUrl("ScheduleID", scheduleKey.ToString(), "History");

            var imgHistory = ((Image)(dataItem)["ViewHistory"].FindControl("imgHistory"));
            imgHistory.AlternateText = Localization.GetString("History", LocalResourceFile);
            imgHistory.ToolTip = Localization.GetString("History", LocalResourceFile);
        }]]></body>
          </codeblock>
        </method>
        <method name="OnGridNeedDataSource">
          <declaration><![CDATA[protected void OnGridNeedDataSource(object sender, GridNeedDataSourceEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="208" sc="9" el="224" ec="10">DesktopModules\Admin\Scheduler\ViewSchedule.ascx.cs</location>
            <body hash="b78bfc214cdd4b3325e3a2011ce27755"><![CDATA[{
            List<ScheduleItem> scheduleviews;
            if (ddlServerName.SelectedIndex == 0)
            {
                scheduleviews = SchedulingController.GetSchedule();
            }
            else
            {
                scheduleviews = SchedulingController.GetSchedule(ddlServerName.SelectedValue);
            }

            foreach (var item in scheduleviews.Where(x => x.NextStart == Null.NullDate))
                if (item.ScheduleStartDate != Null.NullDate)
                    item.NextStart = item.ScheduleStartDate;
            var arrSchedule = scheduleviews.ToArray();
            dgSchedule.DataSource = arrSchedule;
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="120" sc="9" el="145" ec="10">DesktopModules\Admin\Scheduler\ViewSchedule.ascx.cs</location>
            <body hash="0ffd0c6b9a580ac3c47cfa55ff1e45bb"><![CDATA[{
            base.OnLoad(e);

            cmdAdd.NavigateUrl = EditUrl();
            cmdStatus.NavigateUrl = EditUrl("", "", "Status");
            cmdHistory.NavigateUrl = EditUrl("", "", "History");
            cmdUpdate.Click+=cmdUpdate_Click;
            ddlServerName.SelectedIndexChanged+=ddlServerName_SelectedIndexChanged;

            try
            {

                dgSchedule.NeedDataSource += OnGridNeedDataSource;
                dgSchedule.ItemDataBound += OnGridItemDataBound;
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }

            if (!Page.IsPostBack)
            {
                BindSettings();
                BindServers();
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateSchedule">
          <declaration><![CDATA[protected void UpdateSchedule()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="153" sc="9" el="172" ec="14">DesktopModules\Admin\Scheduler\ViewSchedule.ascx.cs</location>
            <body hash="f0a0dc8cc07160469374816f1f1caf70"><![CDATA[{
         var originalSchedulerMode = (SchedulerMode)Convert.ToInt32(ViewState["SelectedSchedulerMode"]);
            var newSchedulerMode = (SchedulerMode)Enum.Parse(typeof(SchedulerMode), cboSchedulerMode.SelectedItem.Value);
            if (originalSchedulerMode != newSchedulerMode)
            {
                switch (newSchedulerMode)
                {
                    case SchedulerMode.DISABLED:
                        SchedulingProvider.Instance().Halt("Host Settings");
                        break;
                    case SchedulerMode.TIMER_METHOD:
                        var newThread = new Thread(SchedulingProvider.Instance().Start) { IsBackground = true };
                        newThread.Start();
                        break;
                    default:
                        SchedulingProvider.Instance().Halt("Host Settings");
                        break;
                }
            }
            }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="cboSchedulerMode">
          <declaration><![CDATA[protected DnnComboBox cboSchedulerMode;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdAdd">
          <declaration><![CDATA[protected HyperLink cmdAdd;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdHistory">
          <declaration><![CDATA[protected HyperLink cmdHistory;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdStatus">
          <declaration><![CDATA[protected HyperLink cmdStatus;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdUpdate">
          <declaration><![CDATA[protected LinkButton cmdUpdate;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ddlServerName">
          <declaration><![CDATA[protected DnnComboBox ddlServerName;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="dgSchedule">
          <declaration><![CDATA[protected DnnGrid dgSchedule;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plScheduleAppStartDelay">
          <declaration><![CDATA[protected LabelControl plScheduleAppStartDelay;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plSchedulerMode">
          <declaration><![CDATA[protected LabelControl plSchedulerMode;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plServers">
          <declaration><![CDATA[protected LabelControl plServers;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtScheduleAppStartDelay">
          <declaration><![CDATA[protected TextBox txtScheduleAppStartDelay;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="ViewScheduleHistory">
      <declaration><![CDATA[public class ViewScheduleHistory : PortalModuleBase, IActionable]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public ViewScheduleHistory()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="GetNotesText">
          <declaration><![CDATA[protected string GetNotesText(string notes)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="129" sc="9" el="136" ec="10">DesktopModules\Admin\Scheduler\ViewScheduleHistory.ascx.cs</location>
            <body hash="f70c05ea6c18e03f36ef95239802cf74"><![CDATA[{
            if (!String.IsNullOrEmpty(notes))
            {
                notes = "<textarea rows=\"5\" cols=\"65\">" + notes + "</textarea>";
                return notes;
            }
            return "";
        }]]></body>
          </codeblock>
        </method>
        <method name="OnGridNeedDataSource">
          <declaration><![CDATA[protected void OnGridNeedDataSource(object sender, GridNeedDataSourceEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="106" sc="9" el="122" ec="10">DesktopModules\Admin\Scheduler\ViewScheduleHistory.ascx.cs</location>
            <body hash="5680b3f0e371b97bafdf17b3e7dc7627"><![CDATA[{
            int scheduleID;
            if (Request.QueryString["ScheduleID"] != null)
            {
                //get history for specific scheduleid
                scheduleID = Convert.ToInt32(Request.QueryString["ScheduleID"]);
            }
            else
            {
                //get history for all schedules
                scheduleID = -1;
            }

            var arrSchedule = SchedulingProvider.Instance().GetScheduleHistory(scheduleID);

            dgHistory.DataSource = arrSchedule;
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="91" sc="9" el="103" ec="10">DesktopModules\Admin\Scheduler\ViewScheduleHistory.ascx.cs</location>
            <body hash="f41ee0a4dec227d4c43e4c14c0ecf4d3"><![CDATA[{
            base.OnLoad(e);

            try
            {
				cmdCancel.NavigateUrl = Globals.NavigateURL();
                dgHistory.NeedDataSource += OnGridNeedDataSource;
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="cmdCancel">
          <declaration><![CDATA[protected HyperLink cmdCancel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="dgHistory">
          <declaration><![CDATA[protected DnnGrid dgHistory;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="ModuleActions">
          <declaration><![CDATA[public ModuleActionCollection ModuleActions]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="55" sc="13" el="78" ec="14">DesktopModules\Admin\Scheduler\ViewScheduleHistory.ascx.cs</location>
            <body hash="b56715e7022108111d728a2f2834b920"><![CDATA[{
                var Actions = new ModuleActionCollection();
                Actions.Add(GetNextActionID(),
                            Localization.GetString(ModuleActionType.AddContent, LocalResourceFile),
                            ModuleActionType.AddContent,
                            "",
                            "add.gif",
                            EditUrl(),
                            false,
                            SecurityAccessLevel.Host,
                            true,
                            false);
                Actions.Add(GetNextActionID(),
                            Localization.GetString(ModuleActionType.ContentOptions, LocalResourceFile),
                            ModuleActionType.AddContent,
                            "",
                            "icon_scheduler_16px.gif",
                            EditUrl("", "", "Status"),
                            false,
                            SecurityAccessLevel.Host,
                            true,
                            false);
                return Actions;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="ViewScheduleStatus">
      <declaration><![CDATA[public class ViewScheduleStatus : PortalModuleBase, IActionable]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public ViewScheduleStatus()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="BindData">
          <declaration><![CDATA[private void BindData()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="79" sc="3" el="111" ec="4">DesktopModules\Admin\Scheduler\ViewScheduleStatus.ascx.cs</location>
            <body hash="ecb2007c5352455990a370ccc62713f7"><![CDATA[{
			lblFreeThreads.Text = SchedulingProvider.Instance().GetFreeThreadCount().ToString();
			lblActiveThreads.Text = SchedulingProvider.Instance().GetActiveThreadCount().ToString();
			lblMaxThreads.Text = SchedulingProvider.Instance().GetMaxThreadCount().ToString();

			Collection arrScheduleQueue = SchedulingProvider.Instance().GetScheduleQueue();
			if (arrScheduleQueue.Count == 0)
			{
				pnlScheduleQueue.Visible = false;
			}
			else
			{
				dgScheduleQueue.DataSource = arrScheduleQueue;
				dgScheduleQueue.DataBind();
			}
			
			Collection arrScheduleProcessing = SchedulingProvider.Instance().GetScheduleProcessing();
			if (arrScheduleProcessing.Count == 0)
			{
				pnlScheduleProcessing.Visible = false;
			}
			else
			{

				dgScheduleProcessing.DataSource = arrScheduleProcessing;
				dgScheduleProcessing.DataBind();
			}
			if (arrScheduleProcessing.Count == 0 && arrScheduleQueue.Count == 0)
			{
				var strMessage = Localization.GetString("NoTasks", LocalResourceFile);
				UI.Skins.Skin.AddModuleMessage(this, strMessage, ModuleMessage.ModuleMessageType.YellowWarning);
			}
		}]]></body>
          </codeblock>
        </method>
        <method name="BindStatus">
          <declaration><![CDATA[private void BindStatus()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="114" sc="3" el="135" ec="4">DesktopModules\Admin\Scheduler\ViewScheduleStatus.ascx.cs</location>
            <body hash="311584f25b1b8a37de0d17a907126bc9"><![CDATA[{
			Status = SchedulingProvider.Instance().GetScheduleStatus();
			lblStatus.Text = Status.ToString();

			placeCommands.Visible = SchedulingProvider.SchedulerMode == SchedulerMode.TIMER_METHOD;

			if (Status == ScheduleStatus.STOPPED && SchedulingProvider.SchedulerMode != SchedulerMode.DISABLED)
			{
				cmdStart.Enabled = true;
				cmdStop.Enabled = false;
			}
			else if (Status == ScheduleStatus.WAITING_FOR_REQUEST || SchedulingProvider.SchedulerMode == SchedulerMode.DISABLED)
			{
				cmdStart.Enabled = false;
				cmdStop.Enabled = false;
			}
			else
			{
				cmdStart.Enabled = false;
				cmdStop.Enabled = true;
			}
		}]]></body>
          </codeblock>
        </method>
        <method name="CmdStopScheduleClick">
          <declaration><![CDATA[public void CmdStopScheduleClick(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="138" sc="9" el="146" ec="10">DesktopModules\Admin\Scheduler\ViewScheduleStatus.ascx.cs</location>
            <body hash="d26d613a8c1f773268382a94344f218e"><![CDATA[{
            var stopBtn = (LinkButton)sender;
            ScheduleItem scheduleItem = SchedulingProvider.Instance().GetSchedule(Convert.ToInt32(stopBtn.CommandArgument));
            //Stop from execution
            SchedulingProvider.Instance().RemoveFromScheduleInProgress(scheduleItem);
            BindData();
            BindStatus();

        }]]></body>
          </codeblock>
        </method>
        <method name="GetOverdueText">
          <declaration><![CDATA[protected string GetOverdueText(double overdueBy)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="152" sc="3" el="154" ec="4">DesktopModules\Admin\Scheduler\ViewScheduleStatus.ascx.cs</location>
            <body hash="84ee0be25ccdb1f724b081eafd747fec"><![CDATA[{
			return overdueBy > 0 ? overdueBy.ToString() : "";
		}]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="166" sc="3" el="200" ec="4">DesktopModules\Admin\Scheduler\ViewScheduleStatus.ascx.cs</location>
            <body hash="dc3446b3a58b2a8d5485c549c73c00b4"><![CDATA[{
			base.OnLoad(e);

			cmdStart.Click += OnStartClick;
			cmdStop.Click += OnStopClick;
			cmdCancel.NavigateUrl = Globals.NavigateURL();

			try
			{
				if (SchedulingProvider.Enabled)
				{
					if (!Page.IsPostBack)
					{
						BindData();
						BindStatus();
					}
				}
				else
				{
					UI.Skins.Skin.AddModuleMessage(this, Localization.GetString("DisabledMessage", LocalResourceFile), ModuleMessage.ModuleMessageType.RedError);
					lblStatus.Text = Localization.GetString("Disabled", LocalResourceFile);
					cmdStart.Enabled = false;
					cmdStop.Enabled = false;
					lblFreeThreads.Text = "0";
					lblActiveThreads.Text = "0";
					lblMaxThreads.Text = "0";
					pnlScheduleQueue.Visible = false;
					pnlScheduleProcessing.Visible = false;
				}
			}
			catch (Exception exc) //Module failed to load
			{
				Exceptions.ProcessModuleLoadException(this, exc);
			}
		}]]></body>
          </codeblock>
        </method>
        <method name="OnStartClick">
          <declaration><![CDATA[protected void OnStartClick(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="208" sc="3" el="212" ec="4">DesktopModules\Admin\Scheduler\ViewScheduleStatus.ascx.cs</location>
            <body hash="30b64cd377f1fac31257155b78b6b3e7"><![CDATA[{
			SchedulingProvider.Instance().StartAndWaitForResponse();
			BindData();
			BindStatus();
		}]]></body>
          </codeblock>
        </method>
        <method name="OnStopClick">
          <declaration><![CDATA[protected void OnStopClick(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="220" sc="3" el="224" ec="4">DesktopModules\Admin\Scheduler\ViewScheduleStatus.ascx.cs</location>
            <body hash="df8ee19cdf7634f3d4cf451e2f6c1fd1"><![CDATA[{
			SchedulingProvider.Instance().Halt(Localization.GetString("ManuallyStopped", LocalResourceFile));
			BindData();
			BindStatus();
		}]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="cmdCancel">
          <declaration><![CDATA[protected HyperLink cmdCancel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdStart">
          <declaration><![CDATA[protected LinkButton cmdStart;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdStop">
          <declaration><![CDATA[protected LinkButton cmdStop;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="dgScheduleProcessing">
          <declaration><![CDATA[protected DnnGrid dgScheduleProcessing;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="dgScheduleQueue">
          <declaration><![CDATA[protected DnnGrid dgScheduleQueue;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblActiveThreads">
          <declaration><![CDATA[protected Label lblActiveThreads;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblActiveThreadsLabel">
          <declaration><![CDATA[protected LabelControl lblActiveThreadsLabel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblCommand">
          <declaration><![CDATA[protected LabelControl lblCommand;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblFreeThreads">
          <declaration><![CDATA[protected Label lblFreeThreads;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblFreeThreadsLabel">
          <declaration><![CDATA[protected LabelControl lblFreeThreadsLabel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblMaxThreads">
          <declaration><![CDATA[protected Label lblMaxThreads;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblMaxThreadsLabel">
          <declaration><![CDATA[protected LabelControl lblMaxThreadsLabel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblProcessing">
          <declaration><![CDATA[protected Label lblProcessing;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblQueue">
          <declaration><![CDATA[protected Label lblQueue;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblStatus">
          <declaration><![CDATA[protected Label lblStatus;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblStatusLabel">
          <declaration><![CDATA[protected LabelControl lblStatusLabel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="placeCommands">
          <declaration><![CDATA[protected PlaceHolder placeCommands;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="pnlScheduleProcessing">
          <declaration><![CDATA[protected Panel pnlScheduleProcessing;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="pnlScheduleQueue">
          <declaration><![CDATA[protected Panel pnlScheduleQueue;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Status">
          <declaration><![CDATA[private ScheduleStatus Status;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="ModuleActions">
          <declaration><![CDATA[public ModuleActionCollection ModuleActions]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="58" sc="4" el="71" ec="5">DesktopModules\Admin\Scheduler\ViewScheduleStatus.ascx.cs</location>
            <body hash="ced0f3be9ca5128782d606fcaa5ef1d6"><![CDATA[{
				var actionCollection = new ModuleActionCollection
								  {
									  {
										  GetNextActionID(), Localization.GetString(ModuleActionType.AddContent, LocalResourceFile), ModuleActionType.AddContent, "", "add.gif", EditUrl(), false,
										  SecurityAccessLevel.Admin, true, false
										  },
									  {
										  GetNextActionID(), Localization.GetString("ScheduleHistory.Action", LocalResourceFile), ModuleActionType.AddContent, "", "icon_profile_16px.gif",
										  EditUrl("", "", "History"), false, SecurityAccessLevel.Host, true, false
										  }
								  };
				return actionCollection;
			}]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="DotNetNuke.Modules.Admin.Search">
    <class name="SearchAdmin">
      <declaration><![CDATA[public class SearchAdmin : ModuleUserControlBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public SearchAdmin()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="LoadCultureCodeList">
          <declaration><![CDATA[protected IEnumerable<string> LoadCultureCodeList(int portalId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="129" sc="9" el="132" ec="10">DesktopModules\Admin\SearchAdmin\SearchAdmin.ascx.cs</location>
            <body hash="279005f0c5091052f34de6940f2f11d7"><![CDATA[{
            var locals = LocaleController.Instance.GetLocales(portalId).Values;
            return locals.Select(local => local.Code).ToList();
        }]]></body>
          </codeblock>
        </method>
        <method name="LoadSearchStopWords">
          <declaration><![CDATA[protected SearchStopWords LoadSearchStopWords(int portalId, string cultureCode)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="140" sc="9" el="142" ec="10">DesktopModules\Admin\SearchAdmin\SearchAdmin.ascx.cs</location>
            <body hash="98578348bae9a8fe1702e9871a53c659"><![CDATA[{
            return SearchHelper.Instance.GetSearchStopWords(portalId, cultureCode);
        }]]></body>
          </codeblock>
        </method>
        <method name="LoadSynonymsGroup">
          <declaration><![CDATA[protected IEnumerable<SynonymsGroup> LoadSynonymsGroup(int portalId, string cultureCode)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="135" sc="9" el="137" ec="10">DesktopModules\Admin\SearchAdmin\SearchAdmin.ascx.cs</location>
            <body hash="951b082bd5c6ae5cedaf7abda516c4e7"><![CDATA[{
            return SearchHelper.Instance.GetSynonymsGroups(portalId, cultureCode);
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="60" sc="9" el="73" ec="10">DesktopModules\Admin\SearchAdmin\SearchAdmin.ascx.cs</location>
            <body hash="eb94af4eeea56322e55fe75b9d658ff2"><![CDATA[{
            base.OnLoad(e);
            ServicesFramework.Instance.RequestAjaxAntiForgerySupport();
            ClientResourceManager.RegisterScript(Page, "~/desktopmodules/admin/searchAdmin/dnn.SearchAdmin.js");
            rptStopWordsCultureList.ItemDataBound += RptLanguagesItemDataBound;
            rptStopWordsCultureList.ItemCommand += RptStopWordsLanguagesItemOnCommand;

            rptSynonymsCultureList.ItemDataBound += RptLanguagesItemDataBound;
            rptSynonymsCultureList.ItemCommand += RptSynonymsLanguagesItemOnCommand;
            
            //set init value
            SynonymsSelectedPortalId = PortalSettings.Current.PortalId;
            StopWordsSeletedPortalId = PortalSettings.Current.PortalId;
        }]]></body>
          </codeblock>
        </method>
        <method name="OnPreRender">
          <declaration><![CDATA[protected override void OnPreRender(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="76" sc="9" el="112" ec="10">DesktopModules\Admin\SearchAdmin\SearchAdmin.ascx.cs</location>
            <body hash="37e8a2953d203ab73073511d480a7e06"><![CDATA[{
            base.OnPreRender(e);

            CurrentCultureCodeList = LoadCultureCodeList(StopWordsSeletedPortalId);

            var currentCultureCodeList = CurrentCultureCodeList as IList<string> ?? CurrentCultureCodeList.ToList();
            if (string.IsNullOrEmpty(StopWordsSeletedCulture)) 
                StopWordsSeletedCulture = currentCultureCodeList.FirstOrDefault();

            if (string.IsNullOrEmpty(StopWordsSeletedCulture)) StopWordsSeletedCulture = "en-US";

            if (string.IsNullOrEmpty(SynonymsSeletedCulture)) 
                SynonymsSeletedCulture= currentCultureCodeList.FirstOrDefault();

            if (string.IsNullOrEmpty(SynonymsSeletedCulture)) SynonymsSeletedCulture = "en-US";

	        if (CurrentCultureCodeList.Count() > 1)
	        {
		        rptStopWordsCultureList.DataSource = CurrentCultureCodeList;
		        rptStopWordsCultureList.DataBind();

		        rptSynonymsCultureList.DataSource = CurrentCultureCodeList;
		        rptSynonymsCultureList.DataBind();
	        }
	        else
	        {
				plCultureList.Visible = rptStopWordsCultureList.Visible = plSynonymsCultureList.Visible = rptSynonymsCultureList.Visible = false;
	        }

	        CurrentSearchStopWords = LoadSearchStopWords(StopWordsSeletedPortalId, StopWordsSeletedCulture);
            CurrentPortalSynonymsGroups = LoadSynonymsGroup(SynonymsSelectedPortalId, SynonymsSeletedCulture);
            
            hdnSynonymsSelectedPortalID.Value = SynonymsSelectedPortalId.ToString(CultureInfo.InvariantCulture);
            hdnStopWordsSelectedPortalID.Value = StopWordsSeletedPortalId.ToString(CultureInfo.InvariantCulture);
            hdnSynonymsSelectedCultureCode.Value = SynonymsSeletedCulture.ToString(CultureInfo.InvariantCulture);
            hdnStopWordsSelectedCultureCode.Value = StopWordsSeletedCulture.ToString(CultureInfo.InvariantCulture);
        }]]></body>
          </codeblock>
        </method>
        <method name="ReIndex">
          <declaration><![CDATA[protected void ReIndex(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="163" sc="9" el="165" ec="10">DesktopModules\Admin\SearchAdmin\SearchAdmin.ascx.cs</location>
            <body hash="854b8f5c07fab0401a4939c077d1a864"><![CDATA[{
            SearchHelper.Instance.SetSearchReindexRequestTime(PortalSettings.Current.PortalId);
        }]]></body>
          </codeblock>
        </method>
        <method name="RptLanguagesItemDataBound">
          <declaration><![CDATA[protected void RptLanguagesItemDataBound(object sender, RepeaterItemEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="145" sc="9" el="160" ec="10">DesktopModules\Admin\SearchAdmin\SearchAdmin.ascx.cs</location>
            <body hash="f696c7d4272be8129c8cf614ddc59304"><![CDATA[{
            var imgBtn = e.Item.FindControl("imgBtnStopWordsCulture") as ImageButton;
            if (imgBtn == null) return;
            if (e.Item.DataItem != null)
            {
                var locale = e.Item.DataItem as String;
                imgBtn.ImageUrl = "~/images/flags/" + locale + ".gif";
                imgBtn.CommandArgument = locale;

				if ((sender == rptStopWordsCultureList && locale == StopWordsSeletedCulture)
						|| (sender == rptSynonymsCultureList && locale == SynonymsSeletedCulture))
				{
					imgBtn.CssClass = "stopwordsCultureSelected";
				}
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="RptStopWordsLanguagesItemOnCommand">
          <declaration><![CDATA[protected void RptStopWordsLanguagesItemOnCommand(object sender, RepeaterCommandEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="117" sc="9" el="120" ec="10">DesktopModules\Admin\SearchAdmin\SearchAdmin.ascx.cs</location>
            <body hash="7c6b363bde9fcb08f2afbf7ccfe9c84d"><![CDATA[{
            StopWordsSeletedPortalId = PortalSettings.Current.PortalId;
            StopWordsSeletedCulture = e.CommandArgument.ToString();
        }]]></body>
          </codeblock>
        </method>
        <method name="RptSynonymsLanguagesItemOnCommand">
          <declaration><![CDATA[protected void RptSynonymsLanguagesItemOnCommand(object sender, RepeaterCommandEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="123" sc="9" el="126" ec="10">DesktopModules\Admin\SearchAdmin\SearchAdmin.ascx.cs</location>
            <body hash="54904d850ccc78b0fb8e410e70096a87"><![CDATA[{
            SynonymsSelectedPortalId = PortalSettings.Current.PortalId;
            SynonymsSeletedCulture = e.CommandArgument.ToString();
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="btnReIndex">
          <declaration><![CDATA[protected LinkButton btnReIndex;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="generalLink">
          <declaration><![CDATA[protected Label generalLink;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="hdnStopWordsSelectedCultureCode">
          <declaration><![CDATA[protected HtmlInputHidden hdnStopWordsSelectedCultureCode;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="hdnStopWordsSelectedPortalID">
          <declaration><![CDATA[protected HtmlInputHidden hdnStopWordsSelectedPortalID;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="hdnSynonymsSelectedCultureCode">
          <declaration><![CDATA[protected HtmlInputHidden hdnSynonymsSelectedCultureCode;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="hdnSynonymsSelectedPortalID">
          <declaration><![CDATA[protected HtmlInputHidden hdnSynonymsSelectedPortalID;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="MyFileName">
          <declaration><![CDATA[protected const string MyFileName = "SearchAdmin.ascx";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plCultureList">
          <declaration><![CDATA[protected LabelControl plCultureList;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plSynonymsCultureList">
          <declaration><![CDATA[protected LabelControl plSynonymsCultureList;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="rptStopWordsCultureList">
          <declaration><![CDATA[protected Repeater rptStopWordsCultureList;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="rptSynonymsCultureList">
          <declaration><![CDATA[protected Repeater rptSynonymsCultureList;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="searchAdminPanes">
          <declaration><![CDATA[protected PlaceHolder searchAdminPanes;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="SearchAdminTabExtensionControl">
          <declaration><![CDATA[protected EditPageTabExtensionControl SearchAdminTabExtensionControl;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="searchAdminTabs">
          <declaration><![CDATA[protected HtmlGenericControl searchAdminTabs;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="stopWordsLink">
          <declaration><![CDATA[protected Label stopWordsLink;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="synonymsLink">
          <declaration><![CDATA[protected Label synonymsLink;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="CurrentCultureCodeList">
          <declaration><![CDATA[protected IEnumerable<string> CurrentCultureCodeList]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="50" sc="64" el="50" ec="68">DesktopModules\Admin\SearchAdmin\SearchAdmin.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="50" sc="69" el="50" ec="73">DesktopModules\Admin\SearchAdmin\SearchAdmin.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="CurrentPortalSynonymsGroups">
          <declaration><![CDATA[protected IEnumerable<SynonymsGroup> CurrentPortalSynonymsGroups]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="46" sc="76" el="46" ec="80">DesktopModules\Admin\SearchAdmin\SearchAdmin.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="46" sc="81" el="46" ec="85">DesktopModules\Admin\SearchAdmin\SearchAdmin.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="CurrentSearchStopWords">
          <declaration><![CDATA[protected SearchStopWords CurrentSearchStopWords]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="51" sc="60" el="51" ec="64">DesktopModules\Admin\SearchAdmin\SearchAdmin.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="51" sc="65" el="51" ec="69">DesktopModules\Admin\SearchAdmin\SearchAdmin.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="StopWordsSeletedCulture">
          <declaration><![CDATA[protected string StopWordsSeletedCulture]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="53" sc="52" el="53" ec="56">DesktopModules\Admin\SearchAdmin\SearchAdmin.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="53" sc="57" el="53" ec="61">DesktopModules\Admin\SearchAdmin\SearchAdmin.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="StopWordsSeletedPortalId">
          <declaration><![CDATA[protected int StopWordsSeletedPortalId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="52" sc="50" el="52" ec="54">DesktopModules\Admin\SearchAdmin\SearchAdmin.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="52" sc="55" el="52" ec="59">DesktopModules\Admin\SearchAdmin\SearchAdmin.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="SynonymsSelectedPortalId">
          <declaration><![CDATA[protected int SynonymsSelectedPortalId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="47" sc="50" el="47" ec="54">DesktopModules\Admin\SearchAdmin\SearchAdmin.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="47" sc="55" el="47" ec="59">DesktopModules\Admin\SearchAdmin\SearchAdmin.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="SynonymsSeletedCulture">
          <declaration><![CDATA[protected string SynonymsSeletedCulture]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="48" sc="51" el="48" ec="55">DesktopModules\Admin\SearchAdmin\SearchAdmin.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="48" sc="56" el="48" ec="60">DesktopModules\Admin\SearchAdmin\SearchAdmin.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="DotNetNuke.Modules.Admin.Security">
    <class name="AccessDeniedPage">
      <declaration><![CDATA[public class AccessDeniedPage : PortalModuleBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public AccessDeniedPage()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="InitializeComponent">
          <declaration><![CDATA[private void InitializeComponent()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="37" sc="9" el="38" ec="10">admin\Security\AccessDenied.ascx.cs</location>
            <body hash="539fa760ca172337a931519768c64187"><![CDATA[{
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="41" sc="9" el="45" ec="10">admin\Security\AccessDenied.ascx.cs</location>
            <body hash="5f3c8c20cc44d36b74ae4760af9b8276"><![CDATA[{
            base.OnInit(e);

            InitializeComponent();
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="48" sc="9" el="58" ec="10">admin\Security\AccessDenied.ascx.cs</location>
            <body hash="9200603dbcb61df85aaa54eafe7ee775"><![CDATA[{
            base.OnLoad(e);
            if (!String.IsNullOrEmpty(Request.QueryString["message"]))
            {
                UI.Skins.Skin.AddModuleMessage(this, HttpUtility.HtmlEncode(HttpUtility.UrlDecode(Request.QueryString["message"])), ModuleMessage.ModuleMessageType.YellowWarning);
            }
            else
            {
                UI.Skins.Skin.AddModuleMessage(this, Localization.GetString("AccessDenied", LocalResourceFile), ModuleMessage.ModuleMessageType.YellowWarning);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="EditGroups">
      <declaration><![CDATA[public class EditGroups : PortalModuleBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private int RoleGroupID = -1;]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="50" sc="9" el="50" ec="38">DesktopModules\Admin\Security\EditGroups.ascx.cs</location>
            <body hash="11cf6d9673e2fbbbb434230f3edc4962"><![CDATA[private int RoleGroupID = -1]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="cmdCancel_Click">
          <declaration><![CDATA[private void cmdCancel_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="186" sc="9" el="202" ec="10">DesktopModules\Admin\Security\EditGroups.ascx.cs</location>
            <body hash="4fb6662b560c76e1266279849e468d87"><![CDATA[{
            try
            {
                if (RoleGroupID == -1)
                {
                    Response.Redirect(Globals.NavigateURL(TabId, ""));
                }
                else
                {
                    Response.Redirect(Globals.NavigateURL(TabId, "", "RoleGroupID=" + RoleGroupID));
                }
            }
            catch (Exception exc) //
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="cmdDelete_Click">
          <declaration><![CDATA[private void cmdDelete_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="166" sc="9" el="176" ec="10">DesktopModules\Admin\Security\EditGroups.ascx.cs</location>
            <body hash="7e49f5ffb0e4c323e34bb3d5738534f0"><![CDATA[{
            try
            {
                RoleController.DeleteRoleGroup(PortalId, RoleGroupID);
                Response.Redirect(Globals.NavigateURL());
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="cmdUpdate_Click">
          <declaration><![CDATA[private void cmdUpdate_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="122" sc="9" el="156" ec="10">DesktopModules\Admin\Security\EditGroups.ascx.cs</location>
            <body hash="38ea252c047e449354dfb733cbeaaf4a"><![CDATA[{
            try
            {
                if (Page.IsValid)
                {
                    var objRoleGroupInfo = new RoleGroupInfo();
                    objRoleGroupInfo.PortalID = PortalId;
                    objRoleGroupInfo.RoleGroupID = RoleGroupID;
                    objRoleGroupInfo.RoleGroupName = txtRoleGroupName.Text;
                    objRoleGroupInfo.Description = txtDescription.Text;
                    if (RoleGroupID == -1)
                    {
                        try
                        {
                            RoleController.AddRoleGroup(objRoleGroupInfo);
                        }
                        catch
                        {
                            UI.Skins.Skin.AddModuleMessage(this, Localization.GetString("DuplicateRoleGroup", LocalResourceFile), ModuleMessage.ModuleMessageType.RedError);
                            return;
                        }
                        Response.Redirect(Globals.NavigateURL(TabId, ""));
                    }
                    else
                    {
                        RoleController.UpdateRoleGroup(objRoleGroupInfo);
                        Response.Redirect(Globals.NavigateURL(TabId, "", "RoleGroupID=" + RoleGroupID));
                    }
                }
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="64" sc="9" el="112" ec="10">DesktopModules\Admin\Security\EditGroups.ascx.cs</location>
            <body hash="180fe7e82c6c2de313a014b421f67672"><![CDATA[{
            base.OnLoad(e);

            cmdCancel.Click += cmdCancel_Click;
            cmdDelete.Click += cmdDelete_Click;
            cmdUpdate.Click += cmdUpdate_Click;

            try
            {
                if ((Request.QueryString["RoleGroupID"] != null))
                {
                    RoleGroupID = Int32.Parse(Request.QueryString["RoleGroupID"]);
                }
                if (Page.IsPostBack == false)
                {
                    ClientAPI.AddButtonConfirm(cmdDelete, Localization.GetString("DeleteItem"));

                    if (RoleGroupID != -1)
                    {
                        RoleGroupInfo objRoleGroupInfo = RoleController.GetRoleGroup(PortalId, RoleGroupID);
                        if (objRoleGroupInfo != null)
                        {
                            txtRoleGroupName.Text = objRoleGroupInfo.RoleGroupName;
                            txtDescription.Text = objRoleGroupInfo.Description;

                            //Check if Group has any roles assigned
                            int roleCount = RoleController.Instance.GetRoles(PortalId, r => r.RoleGroupID == RoleGroupID).Count;

                            if (roleCount > 0)
                            {
                                cmdDelete.Visible = false;
                            }
                        }
                        else //security violation attempt to access item not related to this Module
                        {
                            Response.Redirect(Globals.NavigateURL("Security Roles"));
                        }
                    }
                    else
                    {
                        cmdDelete.Visible = false;
                    }
                }
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="cmdCancel">
          <declaration><![CDATA[protected LinkButton cmdCancel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdDelete">
          <declaration><![CDATA[protected LinkButton cmdDelete;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdUpdate">
          <declaration><![CDATA[protected LinkButton cmdUpdate;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plDescription">
          <declaration><![CDATA[protected LabelControl plDescription;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plRoleGroupName">
          <declaration><![CDATA[protected LabelControl plRoleGroupName;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="RoleGroupID">
          <declaration><![CDATA[private int RoleGroupID = -1;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtDescription">
          <declaration><![CDATA[protected TextBox txtDescription;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtRoleGroupName">
          <declaration><![CDATA[protected TextBox txtRoleGroupName;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="valRoleGroupName">
          <declaration><![CDATA[protected RequiredFieldValidator valRoleGroupName;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="EditRoles">
      <declaration><![CDATA[public class EditRoles : PortalModuleBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private int _roleID = -1;]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="60" sc="9" el="60" ec="34">DesktopModules\Admin\Security\EditRoles.ascx.cs</location>
            <body hash="5910af96ba9551225c41f41e27766afa"><![CDATA[private int _roleID = -1]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="ActivateControls">
          <declaration><![CDATA[private void ActivateControls(bool enabled)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="67" sc="9" el="81" ec="10">DesktopModules\Admin\Security\EditRoles.ascx.cs</location>
            <body hash="ce89c5fec3267a1fbd645b48bcb25b9d"><![CDATA[{
            securityModeList.Enabled = enabled;
            cboRoleGroups.Enabled = enabled;
            chkIsPublic.Enabled = enabled;
            chkAutoAssignment.Enabled = enabled;
            txtServiceFee.Enabled = enabled;
            txtBillingPeriod.Enabled = enabled;
            cboBillingFrequency.Enabled = enabled;
            txtTrialFee.Enabled = enabled;
            txtTrialPeriod.Enabled = enabled;
            cboTrialFrequency.Enabled = enabled;
            txtRSVPCode.Enabled = enabled;
            cmdDelete.Visible = enabled;
            statusList.Enabled = enabled;
        }]]></body>
          </codeblock>
        </method>
        <method name="BindGroups">
          <declaration><![CDATA[private void BindGroups()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="90" sc="9" el="99" ec="10">DesktopModules\Admin\Security\EditRoles.ascx.cs</location>
            <body hash="b73d9452bf65768217ec44d375a35b21"><![CDATA[{
            var arrGroups = RoleController.GetRoleGroups(PortalId);

            cboRoleGroups.AddItem(Localization.GetString("GlobalRoles"), "-1");

            foreach (RoleGroupInfo roleGroup in arrGroups)
            {
                cboRoleGroups.AddItem(roleGroup.RoleGroupName, roleGroup.RoleGroupID.ToString());
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnBillingFrequencyIndexChanged">
          <declaration><![CDATA[protected void OnBillingFrequencyIndexChanged(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="315" sc="9" el="317" ec="10">DesktopModules\Admin\Security\EditRoles.ascx.cs</location>
            <body hash="ab511ca42ba890dc1591886f9710574a"><![CDATA[{
            UpdateFeeTextBoxes();
        }]]></body>
          </codeblock>
        </method>
        <method name="OnDeleteClick">
          <declaration><![CDATA[protected void OnDeleteClick(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="424" sc="9" el="440" ec="10">DesktopModules\Admin\Security\EditRoles.ascx.cs</location>
            <body hash="78d2c699d82ef975b6bc4e14e5c68819"><![CDATA[{
            try
            {
                var role = RoleController.Instance.GetRole(PortalSettings.PortalId, r => r.RoleID == _roleID);

                RoleController.Instance.DeleteRole(role);

                //Clear Roles Cache
                DataCache.RemoveCache("GetRoles");

                Response.Redirect(Globals.NavigateURL());
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="134" sc="9" el="312" ec="10">DesktopModules\Admin\Security\EditRoles.ascx.cs</location>
            <body hash="fdae7a3b7c78f4e59220e9d82c4648ce"><![CDATA[{
            base.OnLoad(e);

			JavaScript.RequestRegistration(CommonJs.DnnPlugins);

            cboBillingFrequency.SelectedIndexChanged += OnBillingFrequencyIndexChanged;
            cboTrialFrequency.SelectedIndexChanged += OnTrialFrequencyIndexChanged;
            cmdDelete.Click += OnDeleteClick;
            cmdManage.Click += OnManageClick;
            cmdUpdate.Click += OnUpdateClick;
            txtRSVPCode.TextChanged += OnRsvpCodeChanged;

            try
            {
                if ((Request.QueryString["RoleID"] != null))
                {
                    _roleID = Int32.Parse(Request.QueryString["RoleID"]);
                }
                var objPortalInfo = PortalController.Instance.GetPortal(PortalSettings.PortalId);
                if ((objPortalInfo == null || string.IsNullOrEmpty(objPortalInfo.ProcessorUserId)))
                {
                    //Warn users about fee based roles if we have a Processor Id
                    lblProcessorWarning.Visible = true;
                }
                else
                {
                    divServiceFee.Visible = true;
                    divBillingPeriod.Visible = true;
                    divTrialFee.Visible = true;
                    divTrialPeriod.Visible = true;
                }
                if (Page.IsPostBack == false)
                {
                    cmdCancel.NavigateUrl = Globals.NavigateURL();

                    var ctlList = new ListController();
                    var colFrequencies = ctlList.GetListEntryInfoItems("Frequency", "");

                    cboBillingFrequency.DataSource = colFrequencies;
                    cboBillingFrequency.DataBind();
                    cboBillingFrequency.FindItemByValue("N").Selected = true;

                    cboTrialFrequency.DataSource = colFrequencies;
                    cboTrialFrequency.DataBind();
                    cboTrialFrequency.FindItemByValue("N").Selected = true;

                    securityModeList.Items.Clear();
                    foreach (var enumValue in Enum.GetValues(typeof(SecurityMode)))
                    {
                        var enumName = Enum.GetName(typeof(SecurityMode), enumValue);
                        var enumItem = new ListItem(enumName, ((int)enumValue).ToString(CultureInfo.InvariantCulture));

                        securityModeList.AddItem(enumItem.Text, enumItem.Value);
                    }

                    statusList.Items.Clear();
                    foreach (var enumValue in Enum.GetValues(typeof(RoleStatus)))
                    {
                        var enumName = Enum.GetName(typeof(RoleStatus), enumValue);
                        var enumItem = new ListItem(enumName, ((int)enumValue).ToString(CultureInfo.InvariantCulture));

                        statusList.AddItem(enumItem.Text, enumItem.Value);
                    }

                    BindGroups();

                    ctlIcon.FileFilter = Globals.glbImageFileTypes;
                    if (_roleID != -1)
                    {
                        var role = RoleController.Instance.GetRole(PortalSettings.PortalId, r => r.RoleID == _roleID);
                        if (role != null)
                        {
                            lblRoleName.Visible = role.IsSystemRole;
                            txtRoleName.Visible = !role.IsSystemRole;
                            valRoleName.Enabled = !role.IsSystemRole;

                            lblRoleName.Text = role.RoleName;
                            txtRoleName.Text = role.RoleName;

                            txtDescription.Text = role.Description;
                            if (cboRoleGroups.FindItemByValue(role.RoleGroupID.ToString(CultureInfo.InvariantCulture)) != null)
                            {
                                cboRoleGroups.ClearSelection();
                                cboRoleGroups.FindItemByValue(role.RoleGroupID.ToString(CultureInfo.InvariantCulture)).Selected = true;
                            }
                            if (!String.IsNullOrEmpty(role.BillingFrequency))
                            {
                                if (role.ServiceFee > 0)
                                {
                                    txtServiceFee.Text = role.ServiceFee.ToString("N2", CultureInfo.CurrentCulture);
                                    txtBillingPeriod.Text = role.BillingPeriod.ToString(CultureInfo.InvariantCulture);
                                    if (cboBillingFrequency.FindItemByValue(role.BillingFrequency) != null)
                                    {
                                        cboBillingFrequency.ClearSelection();
                                        cboBillingFrequency.FindItemByValue(role.BillingFrequency).Selected = true;
                                    }
                                }
                            }
                            if (!String.IsNullOrEmpty(role.TrialFrequency))
                            {
                                if (role.TrialFee > 0)
                                {
                                    txtTrialFee.Text = role.TrialFee.ToString("N2", CultureInfo.CurrentCulture);
                                    txtTrialPeriod.Text = role.TrialPeriod.ToString(CultureInfo.InvariantCulture);
                                    if (cboTrialFrequency.FindItemByValue(role.TrialFrequency) != null)
                                    {
                                        cboTrialFrequency.ClearSelection();
                                        cboTrialFrequency.FindItemByValue(role.TrialFrequency).Selected = true;
                                    }
                                }
                            }

                            if (securityModeList.FindItemByValue(Convert.ToString((int)role.SecurityMode)) != null)
                            {
                                securityModeList.ClearSelection();
                                securityModeList.FindItemByValue(Convert.ToString((int)role.SecurityMode)).Selected = true;
                            }

                            if (statusList.FindItemByValue(Convert.ToString((int)role.Status)) != null)
                            {
                                statusList.ClearSelection();
                                statusList.FindItemByValue(Convert.ToString((int)role.Status)).Selected = true;
                            }

                            chkIsPublic.Checked = role.IsPublic;
                            chkAutoAssignment.Checked = role.AutoAssignment;
                            txtRSVPCode.Text = role.RSVPCode;
                            if (!String.IsNullOrEmpty(txtRSVPCode.Text))
                            {
                                lblRSVPLink.Text = Globals.AddHTTP(Globals.GetDomainName(Request)) + "/" + Globals.glbDefaultPage + "?rsvp=" + txtRSVPCode.Text + "&portalid=" + PortalId;
                            }
                            ctlIcon.Url = role.IconFile;

                            UpdateFeeTextBoxes();
                            cmdManage.Visible = role.Status == RoleStatus.Approved;
                        }
                        else //security violation attempt to access item not related to this Module
                        {
                            Response.Redirect(Globals.NavigateURL("Security Roles"));
                        }

                        if (role.IsSystemRole) //disable controls if it's a system role
                        {
                            UI.Skins.Skin.AddModuleMessage(this, Localization.GetString("SystemRoleWarning.Text", LocalResourceFile), ModuleMessage.ModuleMessageType.BlueInfo);
                            ActivateControls(false);
                        }

                        if (_roleID == PortalSettings.RegisteredRoleId)
                        {
                            cmdManage.Visible = false;
                        }
                    }
                    else
                    {
                        cmdDelete.Visible = false;
                        cmdManage.Visible = false;
                        lblRoleName.Visible = false;
                        txtRoleName.Visible = true;

                        statusList.SelectedIndex = 1;

                        //select default role group id
                        if (Request.QueryString["RoleGroupID"] != null)
                        {
                            var roleGroupID = Request.QueryString["RoleGroupID"];
                            if (cboRoleGroups.FindItemByValue(roleGroupID) != null)
                            {
                                cboRoleGroups.ClearSelection();
                                cboRoleGroups.FindItemByValue(roleGroupID).Selected = true;
                            }
                        }
                    }
                }
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnManageClick">
          <declaration><![CDATA[protected void OnManageClick(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="449" sc="9" el="458" ec="10">DesktopModules\Admin\Security\EditRoles.ascx.cs</location>
            <body hash="cc8d88e0f0c5af95f16e18d4e36618a8"><![CDATA[{
            try
            {
                Response.Redirect(EditUrl("RoleId", _roleID.ToString(), "User Roles"));
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnRsvpCodeChanged">
          <declaration><![CDATA[protected void OnRsvpCodeChanged(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="461" sc="9" el="463" ec="10">DesktopModules\Admin\Security\EditRoles.ascx.cs</location>
            <body hash="bd3fcc31b37447b6a1e5a583df69952a"><![CDATA[{
            lblRSVPLink.Text = Globals.AddHTTP(Globals.GetDomainName(Request)) + @"/" + Globals.glbDefaultPage + @"?rsvp=" + txtRSVPCode.Text + @"&portalid=" + PortalId;
        }]]></body>
          </codeblock>
        </method>
        <method name="OnTrialFrequencyIndexChanged">
          <declaration><![CDATA[protected void OnTrialFrequencyIndexChanged(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="320" sc="9" el="322" ec="10">DesktopModules\Admin\Security\EditRoles.ascx.cs</location>
            <body hash="ab511ca42ba890dc1591886f9710574a"><![CDATA[{
            UpdateFeeTextBoxes();
        }]]></body>
          </codeblock>
        </method>
        <method name="OnUpdateClick">
          <declaration><![CDATA[protected void OnUpdateClick(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="331" sc="9" el="415" ec="10">DesktopModules\Admin\Security\EditRoles.ascx.cs</location>
            <body hash="04148157597fb96081e7b1d3441a6ee1"><![CDATA[{
            try
            {
                if (Page.IsValid)
                {
                    float sglServiceFee = 0;
                    var intBillingPeriod = Null.NullInteger;
                    var strBillingFrequency = "N";

                    float sglTrialFee = 0;
                    var intTrialPeriod = Null.NullInteger;
                    var strTrialFrequency = "N";


                    if (cboBillingFrequency.SelectedItem.Value == "N" && !String.IsNullOrEmpty(txtServiceFee.Text))
                    {
                        UI.Skins.Skin.AddModuleMessage(this, Localization.GetString("IncompatibleFee", LocalResourceFile), ModuleMessage.ModuleMessageType.RedError);
                        return;
                    }

                    if (!String.IsNullOrEmpty(txtServiceFee.Text) && cboBillingFrequency.SelectedItem.Value != "N")
                    {
                        sglServiceFee = float.Parse(txtServiceFee.Text);
                        intBillingPeriod = String.IsNullOrEmpty(txtBillingPeriod.Text) ? 1 : int.Parse(txtBillingPeriod.Text);
                        strBillingFrequency = cboBillingFrequency.SelectedItem.Value;
                    }

                    if (sglServiceFee != 0 && !String.IsNullOrEmpty(txtTrialFee.Text) && cboTrialFrequency.SelectedItem.Value != "N")
                    {
                        sglTrialFee = float.Parse(txtTrialFee.Text);
                        intTrialPeriod = string.IsNullOrEmpty(txtTrialPeriod.Text) ? 1 : int.Parse(txtTrialPeriod.Text);
                        strTrialFrequency = cboTrialFrequency.SelectedItem.Value;
                    }

                    var role = new RoleInfo
                    {
                        PortalID = PortalId,
                        RoleID = _roleID,
                        RoleGroupID = int.Parse(cboRoleGroups.SelectedValue),
                        RoleName = txtRoleName.Text.Trim(),
                        Description = txtDescription.Text,
                        ServiceFee = sglServiceFee,
                        BillingPeriod = intBillingPeriod,
                        BillingFrequency = strBillingFrequency,
                        TrialFee = sglTrialFee,
                        TrialPeriod = intTrialPeriod,
                        TrialFrequency = strTrialFrequency,
                        IsPublic = chkIsPublic.Checked,
                        AutoAssignment = chkAutoAssignment.Checked,
                        SecurityMode = (SecurityMode)Enum.Parse(typeof(SecurityMode), securityModeList.SelectedValue),
                        Status = (RoleStatus)Enum.Parse(typeof(RoleStatus), statusList.SelectedValue),
                        RSVPCode = txtRSVPCode.Text,
                        IconFile = ctlIcon.Url
                    };

                    if (_roleID == -1)
                    {
                        var rolename = role.RoleName.ToUpper();
                        if (RoleController.Instance.GetRole(PortalId,
                            r => rolename.Equals(r.RoleName, StringComparison.InvariantCultureIgnoreCase)) == null)
                        {
                            RoleController.Instance.AddRole(role, chkAssignToExistUsers.Checked);
                        }
                        else
                        {
                            UI.Skins.Skin.AddModuleMessage(this, Localization.GetString("DuplicateRole", LocalResourceFile), ModuleMessage.ModuleMessageType.RedError);
                            return;
                        }
                    }
                    else
                    {
                        RoleController.Instance.UpdateRole(role, chkAssignToExistUsers.Checked);
                    }

                    //Clear Roles Cache
                    DataCache.RemoveCache("GetRoles");

                    Response.Redirect(Globals.NavigateURL(string.Empty, "RoleGroupID=" + role.RoleGroupID));
                }
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateFeeTextBoxes">
          <declaration><![CDATA[private void UpdateFeeTextBoxes()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="102" sc="9" el="121" ec="10">DesktopModules\Admin\Security\EditRoles.ascx.cs</location>
            <body hash="7ac6ccc25156b2e5b33a595a2a4acf24"><![CDATA[{
            if (cboBillingFrequency.SelectedValue == "O")
            {
                txtBillingPeriod.Text = "1";
                txtBillingPeriod.Enabled = false;
            }
            else
            {
                txtBillingPeriod.Enabled = true;
            }
            if (cboTrialFrequency.SelectedValue == "O")
            {
                txtTrialPeriod.Text = "1";
                txtTrialPeriod.Enabled = false;
            }
            else
            {
                txtTrialPeriod.Enabled = true;
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_roleID">
          <declaration><![CDATA[private int _roleID = -1;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cboBillingFrequency">
          <declaration><![CDATA[protected DnnComboBox cboBillingFrequency;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cboRoleGroups">
          <declaration><![CDATA[protected DnnComboBox cboRoleGroups;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cboTrialFrequency">
          <declaration><![CDATA[protected DnnComboBox cboTrialFrequency;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkAssignToExistUsers">
          <declaration><![CDATA[protected CheckBox chkAssignToExistUsers;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkAutoAssignment">
          <declaration><![CDATA[protected CheckBox chkAutoAssignment;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkIsPublic">
          <declaration><![CDATA[protected CheckBox chkIsPublic;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdCancel">
          <declaration><![CDATA[protected HyperLink cmdCancel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdDelete">
          <declaration><![CDATA[protected LinkButton cmdDelete;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdManage">
          <declaration><![CDATA[protected LinkButton cmdManage;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdUpdate">
          <declaration><![CDATA[protected LinkButton cmdUpdate;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ctlIcon">
          <declaration><![CDATA[protected DnnUrlControl ctlIcon;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="divBillingPeriod">
          <declaration><![CDATA[protected HtmlGenericControl divBillingPeriod;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="divServiceFee">
          <declaration><![CDATA[protected HtmlGenericControl divServiceFee;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="divTrialFee">
          <declaration><![CDATA[protected HtmlGenericControl divTrialFee;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="divTrialPeriod">
          <declaration><![CDATA[protected HtmlGenericControl divTrialPeriod;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblProcessorWarning">
          <declaration><![CDATA[protected Label lblProcessorWarning;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblRoleName">
          <declaration><![CDATA[protected Label lblRoleName;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblRSVPLink">
          <declaration><![CDATA[protected Label lblRSVPLink;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plAssignToExistUsers">
          <declaration><![CDATA[protected LabelControl plAssignToExistUsers;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plAutoAssignment">
          <declaration><![CDATA[protected LabelControl plAutoAssignment;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plBillingPeriod">
          <declaration><![CDATA[protected LabelControl plBillingPeriod;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plDescription">
          <declaration><![CDATA[protected LabelControl plDescription;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plIcon">
          <declaration><![CDATA[protected LabelControl plIcon;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plIsPublic">
          <declaration><![CDATA[protected LabelControl plIsPublic;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plRoleGroups">
          <declaration><![CDATA[protected LabelControl plRoleGroups;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plRoleName">
          <declaration><![CDATA[protected LabelControl plRoleName;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plRSVPCode">
          <declaration><![CDATA[protected LabelControl plRSVPCode;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plRSVPLink">
          <declaration><![CDATA[protected LabelControl plRSVPLink;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plServiceFee">
          <declaration><![CDATA[protected LabelControl plServiceFee;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plTrialFee">
          <declaration><![CDATA[protected LabelControl plTrialFee;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plTrialPeriod">
          <declaration><![CDATA[protected LabelControl plTrialPeriod;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="securityModeList">
          <declaration><![CDATA[protected DnnComboBox securityModeList;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="securityModeListLabel">
          <declaration><![CDATA[protected LabelControl securityModeListLabel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="statusList">
          <declaration><![CDATA[protected DnnComboBox statusList;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="statusListLabel">
          <declaration><![CDATA[protected LabelControl statusListLabel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtBillingPeriod">
          <declaration><![CDATA[protected TextBox txtBillingPeriod;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtDescription">
          <declaration><![CDATA[protected TextBox txtDescription;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtRoleName">
          <declaration><![CDATA[protected TextBox txtRoleName;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtRSVPCode">
          <declaration><![CDATA[protected TextBox txtRSVPCode;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtServiceFee">
          <declaration><![CDATA[protected TextBox txtServiceFee;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtTrialFee">
          <declaration><![CDATA[protected TextBox txtTrialFee;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtTrialPeriod">
          <declaration><![CDATA[protected TextBox txtTrialPeriod;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="valBillingPeriod1">
          <declaration><![CDATA[protected CompareValidator valBillingPeriod1;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="valBillingPeriod2">
          <declaration><![CDATA[protected CompareValidator valBillingPeriod2;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="valRoleName">
          <declaration><![CDATA[protected RequiredFieldValidator valRoleName;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="valRoleName2">
          <declaration><![CDATA[protected RegularExpressionValidator valRoleName2;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="valServiceFee1">
          <declaration><![CDATA[protected CompareValidator valServiceFee1;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="valServiceFee2">
          <declaration><![CDATA[protected CompareValidator valServiceFee2;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="valTrialFee1">
          <declaration><![CDATA[protected CompareValidator valTrialFee1;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="valTrialFee2">
          <declaration><![CDATA[protected CompareValidator valTrialFee2;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="valTrialPeriod1">
          <declaration><![CDATA[protected CompareValidator valTrialPeriod1;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="valTrialPeriod2">
          <declaration><![CDATA[protected CompareValidator valTrialPeriod2;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="MemberServices">
      <declaration><![CDATA[public class MemberServices : UserModuleBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public MemberServices()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="add_SubscriptionUpdated">
          <declaration><![CDATA[public void add_SubscriptionUpdated(MemberServices.SubscriptionUpdatedEventHandler value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="cmdRSVP_Click">
          <declaration><![CDATA[private void cmdRSVP_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="433" sc="9" el="467" ec="10">DesktopModules\Admin\Security\MemberServices.ascx.cs</location>
            <body hash="4964b0d0b6c4fd0166f93a277951282d"><![CDATA[{
            if (IsUserOrAdmin == false)
            {
                return;
            }
            //Get the RSVP code
            string code = txtRSVPCode.Text;
            bool rsvpCodeExists = false;
            if (!String.IsNullOrEmpty(code))
            {
                //Parse the roles
                foreach (RoleInfo objRole in RoleController.Instance.GetRoles(PortalSettings.PortalId))
                {
                    if (objRole.RSVPCode == code)
                    {
                        RoleController.Instance.UpdateUserRole(PortalId, UserInfo.UserID, objRole.RoleID, RoleStatus.Approved, false, false);
                        rsvpCodeExists = true;

                        //Raise SubscriptionUpdated Event
                        OnSubscriptionUpdated(new SubscriptionUpdatedEventArgs(false, objRole.RoleName));
                    }
                }
                if (rsvpCodeExists)
                {
                    lblRSVP.Text = Localization.GetString("RSVPSuccess", LocalResourceFile);
                    //Reset RSVP Code field
                    txtRSVPCode.Text = "";
                }
                else
                {
                    lblRSVP.Text = Localization.GetString("RSVPFailure", LocalResourceFile);
                }
            }
            DataBind();
        }]]></body>
          </codeblock>
        </method>
        <method name="DataBind">
          <declaration><![CDATA[public override void DataBind()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="358" sc="9" el="367" ec="10">DesktopModules\Admin\Security\MemberServices.ascx.cs</location>
            <body hash="21a34f7091fd147758e63750ae5f6729"><![CDATA[{
            if (Request.IsAuthenticated)
            {
                grdServices.DataSource = RoleController.Instance.GetUserRoles(UserInfo, false);
                grdServices.DataBind();

                //if no service available then hide options
                ServicesRow.Visible = (grdServices.Items.Count > 0);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="FormatExpiryDate">
          <declaration><![CDATA[protected string FormatExpiryDate(DateTime expiryDate)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="149" sc="9" el="170" ec="10">DesktopModules\Admin\Security\MemberServices.ascx.cs</location>
            <body hash="da90200696e05efb077d9e340d4f8cd9"><![CDATA[{
            string formatExpiryDate = Null.NullString;
            try
            {
                if (!Null.IsNull(expiryDate))
                {
                    if (expiryDate > DateTime.Today)
                    {
                        formatExpiryDate = expiryDate.ToShortDateString();
                    }
                    else
                    {
                        formatExpiryDate = Localization.GetString("Expired", LocalResourceFile);
                    }
                }
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
            return formatExpiryDate;
        }]]></body>
          </codeblock>
        </method>
        <method name="FormatPrice">
          <declaration><![CDATA[private string FormatPrice(float price)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="74" sc="9" el="92" ec="10">DesktopModules\Admin\Security\MemberServices.ascx.cs</location>
            <body hash="3556a18345dea6ec3ad7ef026a4c177a"><![CDATA[{
            string formatPrice = Null.NullString;
            try
            {
                if (price != Null.NullSingle)
                {
                    formatPrice = price.ToString("##0.00");
                }
                else
                {
                    formatPrice = "";
                }
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
            return formatPrice;
        }]]></body>
          </codeblock>
        </method>
        <method name="FormatPrice">
          <declaration><![CDATA[protected string FormatPrice(float price, int period, string frequency)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="182" sc="9" el="205" ec="10">DesktopModules\Admin\Security\MemberServices.ascx.cs</location>
            <body hash="af2244274e3fa0a8160159a4dff6bb70"><![CDATA[{
            string formatPrice = Null.NullString;
            try
            {
                switch (frequency)
                {
                    case "N":
                    case "":
                        formatPrice = Localization.GetString("NoFee", LocalResourceFile);
                        break;
                    case "O":
                        formatPrice = FormatPrice(price);
                        break;
                    default:
                        formatPrice = string.Format(Localization.GetString("Fee", LocalResourceFile), FormatPrice(price), period, Localization.GetString("Frequency_" + frequency, LocalResourceFile));
                        break;
                }
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
            return formatPrice;
        }]]></body>
          </codeblock>
        </method>
        <method name="FormatTrial">
          <declaration><![CDATA[protected string FormatTrial(float price, int period, string frequency)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="217" sc="9" el="243" ec="10">DesktopModules\Admin\Security\MemberServices.ascx.cs</location>
            <body hash="ffc1cddf2860c4f6e448b06abdad574c"><![CDATA[{
            string formatTrial = Null.NullString;
            try
            {
                switch (frequency)
                {
                    case "N":
                    case "":
                        formatTrial = Localization.GetString("NoFee", LocalResourceFile);
                        break;
                    case "O":
                        formatTrial = FormatPrice(price);
                        break;
                    default:
                        formatTrial = string.Format(Localization.GetString("TrialFee", LocalResourceFile),
                                                     FormatPrice(price),
                                                     period,
                                                     Localization.GetString("Frequency_" + frequency, LocalResourceFile));
                        break;
                }
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
            return formatTrial;
        }]]></body>
          </codeblock>
        </method>
        <method name="FormatURL">
          <declaration><![CDATA[protected string FormatURL()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="254" sc="9" el="270" ec="10">DesktopModules\Admin\Security\MemberServices.ascx.cs</location>
            <body hash="58230087f9de2523abb58c4652c902f8"><![CDATA[{
            string formatURL = Null.NullString;
            try
            {
                string serverPath = Request.ApplicationPath;
                if (!serverPath.EndsWith("/"))
                {
                    serverPath += "/";
                }
                formatURL = serverPath + "Register.aspx?tabid=" + TabId;
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
            return formatURL;
        }]]></body>
          </codeblock>
        </method>
        <method name="grdServices_ItemCommand">
          <declaration><![CDATA[protected void grdServices_ItemCommand(object source, DataGridCommandEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="470" sc="9" el="496" ec="10">DesktopModules\Admin\Security\MemberServices.ascx.cs</location>
            <body hash="abfff2bb710df55808d457c7427c1f5e"><![CDATA[{
            string commandName = e.CommandName;
            int roleID = Convert.ToInt32(e.CommandArgument);
            if (commandName == Localization.GetString("Subscribe", LocalResourceFile) || commandName == Localization.GetString("Renew", LocalResourceFile))
            {
				//Subscribe
                Subscribe(roleID, false);
            }
            else if (commandName == Localization.GetString("Unsubscribe", LocalResourceFile))
            {
				//Unsubscribe
                Subscribe(roleID, true);
            }
            else if (commandName == Localization.GetString("Unsubscribe", LocalResourceFile))
            {
				//Unsubscribe
                Subscribe(roleID, true);
            }
            else if (commandName == "UseTrial")
            {
				//Use Trial
                UseTrial(roleID);
            }
			
			//Rebind Grid
            DataBind();
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="402" sc="9" el="423" ec="10">DesktopModules\Admin\Security\MemberServices.ascx.cs</location>
            <body hash="02cd7213bcd44194d7f18fb2916f980d"><![CDATA[{
            base.OnLoad(e);

            cmdRSVP.Click += cmdRSVP_Click;
            grdServices.ItemCommand += grdServices_ItemCommand;

            try
            {
                lblRSVP.Text = "";

                //If this is the first visit to the page, localize the datalist
                if (Page.IsPostBack == false)
                {
					//Localize the Headers
                    Localization.LocalizeDataGrid(ref grdServices, LocalResourceFile);
                }
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnSubscriptionUpdated">
          <declaration><![CDATA[public void OnSubscriptionUpdated(MemberServices.SubscriptionUpdatedEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="379" sc="9" el="388" ec="10">DesktopModules\Admin\Security\MemberServices.ascx.cs</location>
            <body hash="d1dd23acedb9d2c3a3059c11aef9af9e"><![CDATA[{
            if (IsUserOrAdmin == false)
            {
                return;
            }
            if (SubscriptionUpdated != null)
            {
                SubscriptionUpdated(this, e);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="remove_SubscriptionUpdated">
          <declaration><![CDATA[public void remove_SubscriptionUpdated(MemberServices.SubscriptionUpdatedEventHandler value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="ServiceText">
          <declaration><![CDATA[protected string ServiceText(bool subscribed, DateTime expiryDate)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="282" sc="9" el="307" ec="10">DesktopModules\Admin\Security\MemberServices.ascx.cs</location>
            <body hash="0becf31214083ee468d59bd8a87f62ff"><![CDATA[{
            string serviceText = Null.NullString;
            try
            {
                if (!subscribed)
                {
                    serviceText = Localization.GetString("Subscribe", LocalResourceFile);
                }
                else
                {
                    serviceText = Localization.GetString("Unsubscribe", LocalResourceFile);
                    if (!Null.IsNull(expiryDate))
                    {
                        if (expiryDate < DateTime.Today)
                        {
                            serviceText = Localization.GetString("Renew", LocalResourceFile);
                        }
                    }
                }
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
            return serviceText;
        }]]></body>
          </codeblock>
        </method>
        <method name="ShowSubscribe">
          <declaration><![CDATA[protected bool ShowSubscribe(int roleID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="310" sc="9" el="326" ec="10">DesktopModules\Admin\Security\MemberServices.ascx.cs</location>
            <body hash="6e55f44b1dd893fdca455a942d06203b"><![CDATA[{
            bool showSubscribe = Null.NullBoolean;
            RoleInfo objRole = RoleController.Instance.GetRole(PortalSettings.PortalId, r => r.RoleID == roleID); ;
            if (objRole.IsPublic)
            {
                PortalInfo objPortal = PortalController.Instance.GetPortal(PortalSettings.PortalId);
                if (objRole.ServiceFee == 0.0)
                {
                    showSubscribe = true;
                }
                else if (objPortal != null && !string.IsNullOrEmpty(objPortal.ProcessorUserId))
                {
                    showSubscribe = true;
                }
            }
            return showSubscribe;
        }]]></body>
          </codeblock>
        </method>
        <method name="ShowTrial">
          <declaration><![CDATA[protected bool ShowTrial(int roleID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="329" sc="9" el="346" ec="10">DesktopModules\Admin\Security\MemberServices.ascx.cs</location>
            <body hash="c9a253adddbda8ec0201dace82fdfa28"><![CDATA[{
            bool showTrial = Null.NullBoolean;
            RoleInfo objRole = RoleController.Instance.GetRole(PortalSettings.PortalId, r => r.RoleID == roleID); ;
            if (string.IsNullOrEmpty(objRole.TrialFrequency) || objRole.TrialFrequency == "N" || (objRole.IsPublic && objRole.ServiceFee == 0.0))
            {
                showTrial = Null.NullBoolean;
            }
            else if (objRole.IsPublic && objRole.TrialFee == 0.0)
            {
				//Use Trial?
                UserRoleInfo objUserRole = RoleController.Instance.GetUserRole(PortalId, UserInfo.UserID, roleID);
                if ((objUserRole == null) || (!objUserRole.IsTrialUsed))
                {
                    showTrial = true;
                }
            }
            return showTrial;
        }]]></body>
          </codeblock>
        </method>
        <method name="Subscribe">
          <declaration><![CDATA[private void Subscribe(int roleID, bool cancel)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="95" sc="9" el="116" ec="10">DesktopModules\Admin\Security\MemberServices.ascx.cs</location>
            <body hash="2d953954aa2c5089df268c0fb47eacee"><![CDATA[{
            RoleInfo objRole = RoleController.Instance.GetRole(PortalSettings.PortalId, r => r.RoleID == roleID);

            if (objRole.IsPublic && objRole.ServiceFee == 0.0)
            {
                RoleController.Instance.UpdateUserRole(PortalId, UserInfo.UserID, roleID, RoleStatus.Approved, false, cancel);

                //Raise SubscriptionUpdated Event
                OnSubscriptionUpdated(new SubscriptionUpdatedEventArgs(cancel, objRole.RoleName));
            }
            else
            {
                if (!cancel)
                {
                    Response.Redirect("~/admin/Sales/PayPalSubscription.aspx?tabid=" + TabId + "&RoleID=" + roleID, true);
                }
                else
                {
                    Response.Redirect("~/admin/Sales/PayPalSubscription.aspx?tabid=" + TabId + "&RoleID=" + roleID + "&cancel=1", true);
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="UseTrial">
          <declaration><![CDATA[private void UseTrial(int roleID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="119" sc="9" el="133" ec="10">DesktopModules\Admin\Security\MemberServices.ascx.cs</location>
            <body hash="20be6ddeee58ff29ce5a0a9c03ba1906"><![CDATA[{
            RoleInfo objRole = RoleController.Instance.GetRole(PortalSettings.PortalId, r => r.RoleID == roleID); ;

            if (objRole.IsPublic && objRole.TrialFee == 0.0)
            {
                RoleController.Instance.UpdateUserRole(PortalId, UserInfo.UserID, roleID, RoleStatus.Approved, false, false);

                //Raise SubscriptionUpdated Event
                OnSubscriptionUpdated(new SubscriptionUpdatedEventArgs(false, objRole.RoleName));
            }
            else
            {
                Response.Redirect("~/admin/Sales/PayPalSubscription.aspx?tabid=" + TabId + "&RoleID=" + roleID, true);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="cmdRSVP">
          <declaration><![CDATA[protected LinkButton cmdRSVP;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="grdServices">
          <declaration><![CDATA[protected DataGrid grdServices;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblRSVP">
          <declaration><![CDATA[protected Label lblRSVP;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblRSVPHelp">
          <declaration><![CDATA[protected Label lblRSVPHelp;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblServices">
          <declaration><![CDATA[protected Label lblServices;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblServicesHelp">
          <declaration><![CDATA[protected Label lblServicesHelp;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plRSVPCode">
          <declaration><![CDATA[protected LabelControl plRSVPCode;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ServicesRow">
          <declaration><![CDATA[protected HtmlGenericControl ServicesRow;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="SubscriptionUpdated">
          <declaration><![CDATA[private MemberServices.SubscriptionUpdatedEventHandler SubscriptionUpdated;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtRSVPCode">
          <declaration><![CDATA[protected TextBox txtRSVPCode;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
        <event name="SubscriptionUpdated">
          <declaration><![CDATA[public event MemberServices.SubscriptionUpdatedEventHandler SubscriptionUpdated;]]></declaration>
          <documentation>
          </documentation>
        </event>
      </events>
    </class>
    <class name="PasswordReset">
      <declaration><![CDATA[public class PasswordReset : UserModuleBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public PasswordReset()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="cmdChangePassword_Click">
          <declaration><![CDATA[private void cmdChangePassword_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="165" sc="9" el="256" ec="10">admin\Security\PasswordReset.ascx.cs</location>
            <body hash="d2b2285aecb7dc0dc3e5e86e0e8ba01f"><![CDATA[{
            string username = txtUsername.Text;

            if (MembershipProviderConfig.RequiresQuestionAndAnswer && String.IsNullOrEmpty(txtAnswer.Text))
            {
                var user = UserController.GetUserByName(username);
                if (user != null)
                {
                    lblQuestion.Text = user.Membership.PasswordQuestion;
                }
                divQA.Visible = true;
                return;
            }

            //1. Check New Password and Confirm are the same
            if (txtPassword.Text != txtConfirmPassword.Text)
            {
                resetMessages.Visible = true;
                var failed = Localization.GetString("PasswordMismatch");
                LogFailure(failed);
                lblHelp.Text = failed;
                return;
            }

            if (UserController.ValidatePassword(txtPassword.Text)==false)
            {
                resetMessages.Visible = true;
                var failed = Localization.GetString("PasswordResetFailed");
                LogFailure(failed);
                lblHelp.Text = failed;
                return;    
            }

            //Check New Password is not same as username or banned
            var settings = new MembershipPasswordSettings(User.PortalID);

            if (settings.EnableBannedList)
            {
                var m = new MembershipPasswordController();
                if (m.FoundBannedPassword(txtPassword.Text) || txtUsername.Text == txtPassword.Text)
                {
                    resetMessages.Visible = true;
                    var failed = Localization.GetString("PasswordResetFailed");
                    LogFailure(failed);
                    lblHelp.Text = failed;
                    return;  
                }
            }

            if (PortalController.GetPortalSettingAsBoolean("Registration_UseEmailAsUserName", PortalId, false))
            {
                var testUser = UserController.GetUserByEmail(PortalId, username); // one additonal call to db to see if an account with that email actually exists
                if (testUser != null)
                {
                    username = testUser.Username; //we need the username of the account in order to change the password in the next step
                }
            }
            string errorMessage;
            string answer = String.Empty;
            if (MembershipProviderConfig.RequiresQuestionAndAnswer)
            {
                answer = txtAnswer.Text;
            }

            if (UserController.ChangePasswordByToken(PortalSettings.PortalId, username, txtPassword.Text, answer, ResetToken, out errorMessage) == false)
            {
                resetMessages.Visible = true;
                var failed = errorMessage;
                LogFailure(failed);
                lblHelp.Text = failed;
            }
            else
            {
                //check user has a valid profile
                var user = UserController.GetUserByName(PortalSettings.PortalId, username);
                var validStatus = UserController.ValidateUser(user, PortalSettings.PortalId, false);
                if (validStatus == UserValidStatus.UPDATEPROFILE)
                {
                    LogSuccess();
                    ViewState.Add("PageNo", 3);
                    Response.Redirect(Globals.NavigateURL(PortalSettings.ActiveTab.TabID, "Login"));
                }
                else
                {
                    //Log user in to site
                    LogSuccess();
                    var loginStatus = UserLoginStatus.LOGIN_FAILURE;
                    UserController.UserLogin(PortalSettings.PortalId, username, txtPassword.Text, "", "", "", ref loginStatus, false);
                    RedirectAfterLogin();
                }            
            }           
        }]]></body>
          </codeblock>
        </method>
        <method name="LogFailure">
          <declaration><![CDATA[private void LogFailure(string reason)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="324" sc="9" el="326" ec="10">admin\Security\PasswordReset.ascx.cs</location>
            <body hash="6ae11ec85f2fbb19f9a679a3e43b8a41"><![CDATA[{
            LogResult(reason);
        }]]></body>
          </codeblock>
        </method>
        <method name="LogResult">
          <declaration><![CDATA[private void LogResult(string message)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="329" sc="9" el="349" ec="10">admin\Security\PasswordReset.ascx.cs</location>
            <body hash="60082b06e6e94fb6d02d52319e16d28c"><![CDATA[{
            var log = new LogInfo
            {
                LogPortalID = PortalSettings.PortalId,
                LogPortalName = PortalSettings.PortalName,
                LogUserID = UserId
            };

            if (string.IsNullOrEmpty(message))
            {
                log.LogTypeKey = "PASSWORD_SENT_SUCCESS";
            }
            else
            {
                log.LogTypeKey = "PASSWORD_SENT_FAILURE";
                log.LogProperties.Add(new LogDetailInfo("Cause", message));
            }
            log.AddProperty("IP", _ipAddress);
            
            LogController.Instance.AddLog(log);
        }]]></body>
          </codeblock>
        </method>
        <method name="LogSuccess">
          <declaration><![CDATA[private void LogSuccess()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="319" sc="9" el="321" ec="10">admin\Security\PasswordReset.ascx.cs</location>
            <body hash="dac4dc755ecca3dcb125aec00a771ee8"><![CDATA[{
            LogResult(string.Empty);
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="73" sc="9" el="118" ec="10">admin\Security\PasswordReset.ascx.cs</location>
            <body hash="f51cfd199b988e3361cce03f3704dd5e"><![CDATA[{
            base.OnLoad(e);
            _ipAddress = Request.UserHostAddress;

			JavaScript.RequestRegistration(CommonJs.DnnPlugins);
			ClientResourceManager.RegisterScript(Page, "~/Resources/Shared/scripts/dnn.jquery.extensions.js");
			ClientResourceManager.RegisterScript(Page, "~/Resources/Shared/scripts/dnn.jquery.tooltip.js");
			ClientResourceManager.RegisterScript(Page, "~/Resources/Shared/scripts/dnn.PasswordStrength.js");
			ClientResourceManager.RegisterScript(Page, "~/DesktopModules/Admin/Security/Scripts/dnn.PasswordComparer.js");

			ClientResourceManager.RegisterStyleSheet(Page, "~/Resources/Shared/stylesheets/dnn.PasswordStrength.css", FileOrder.Css.ResourceCss);

            if (PortalSettings.LoginTabId != -1 && PortalSettings.ActiveTab.TabID != PortalSettings.LoginTabId)
            {
                Response.Redirect(Globals.NavigateURL(PortalSettings.LoginTabId) + Request.Url.Query);
            }
            cmdChangePassword.Click +=cmdChangePassword_Click;
            
            hlCancel.NavigateUrl = Globals.NavigateURL();

            if (Request.QueryString["resetToken"] != null)
            {
                ResetToken = Request.QueryString["resetToken"];
                
            }

	        var useEmailAsUserName = PortalController.GetPortalSettingAsBoolean("Registration_UseEmailAsUserName", PortalId, false);
			if (useEmailAsUserName)
            {
                valUsername.Text = Localization.GetString("Email.Required", LocalResourceFile);
            }
            else
            {
                valUsername.Text = Localization.GetString("Username.Required", LocalResourceFile);
            }

            if (Request.QueryString["forced"] == "true")
            {
                lblInfo.Text = Localization.GetString("ForcedResetInfo", LocalResourceFile);
            }

			txtUsername.Attributes.Add("data-default",useEmailAsUserName ? LocalizeString("Email") : LocalizeString("Username"));
			txtPassword.Attributes.Add("data-default", LocalizeString("Password"));
			txtConfirmPassword.Attributes.Add("data-default", LocalizeString("Confirm"));
            txtAnswer.Attributes.Add("data-default", LocalizeString("Answer"));
        }]]></body>
          </codeblock>
        </method>
        <method name="OnPreRender">
          <declaration><![CDATA[protected override void OnPreRender(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="121" sc="9" el="162" ec="10">admin\Security\PasswordReset.ascx.cs</location>
            <body hash="534f78863bcc5073bd6651cfc120aad1"><![CDATA[{
            base.OnPreRender(e);
            if (!string.IsNullOrEmpty(lblHelp.Text) || !string.IsNullOrEmpty(lblInfo.Text))
                resetMessages.Visible = true;

			var options = new DnnPaswordStrengthOptions();
			var optionsAsJsonString = Json.Serialize(options);
			var script = string.Format("dnn.initializePasswordStrength('.{0}', {1});{2}",
				"password-strength", optionsAsJsonString, Environment.NewLine);

			if (ScriptManager.GetCurrent(Page) != null)
			{
				// respect MS AJAX
				ScriptManager.RegisterStartupScript(Page, GetType(), "PasswordStrength", script, true);
			}
			else
			{
				Page.ClientScript.RegisterStartupScript(GetType(), "PasswordStrength", script, true);
			}

			var confirmPasswordOptions = new DnnConfirmPasswordOptions()
			{
				FirstElementSelector = ".password-strength",
				SecondElementSelector = ".password-confirm",
				ContainerSelector = ".dnnPasswordReset",
				UnmatchedCssClass = "unmatched",
				MatchedCssClass = "matched"
			};

			optionsAsJsonString = Json.Serialize(confirmPasswordOptions);
			script = string.Format("dnn.initializePasswordComparer({0});{1}", optionsAsJsonString, Environment.NewLine);

			if (ScriptManager.GetCurrent(Page) != null)
			{
				// respect MS AJAX
				ScriptManager.RegisterStartupScript(Page, GetType(), "ConfirmPassword", script, true);
			}
			else
			{
				Page.ClientScript.RegisterStartupScript(GetType(), "ConfirmPassword", script, true);
			}
        }]]></body>
          </codeblock>
        </method>
        <method name="RedirectAfterLogin">
          <declaration><![CDATA[protected void RedirectAfterLogin()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="259" sc="9" el="316" ec="10">admin\Security\PasswordReset.ascx.cs</location>
            <body hash="44e2ae9880fc16cbfa936804027a8a00"><![CDATA[{
            var redirectURL = "";

            var setting = GetSetting(PortalId, "Redirect_AfterLogin");

            if (Convert.ToInt32(setting) == Null.NullInteger)
            {
                if (Request.QueryString["returnurl"] != null)
                {
                    //return to the url passed to signin
                    redirectURL = HttpUtility.UrlDecode(Request.QueryString["returnurl"]);

                    //clean the return url to avoid possible XSS attack.
                    redirectURL = UrlUtils.ValidReturnUrl(redirectURL);
                }

                if (Request.Cookies["returnurl"] != null)
                {
                    //return to the url passed to signin
                    redirectURL = HttpUtility.UrlDecode(Request.Cookies["returnurl"].Value);

                    //clean the return url to avoid possible XSS attack.
                    redirectURL = UrlUtils.ValidReturnUrl(redirectURL);
                }
                if (String.IsNullOrEmpty(redirectURL))
                {
                    if (PortalSettings.LoginTabId != -1 && PortalSettings.HomeTabId != -1)
                    {
                        //redirect to portal home page specified
                        redirectURL = Globals.NavigateURL(PortalSettings.HomeTabId);
                    }
                    else
                    {
                        //redirect to current page 
                        redirectURL = Globals.NavigateURL();
                    }
                }
            }
            else //redirect to after login page
            {
                redirectURL = Globals.NavigateURL(Convert.ToInt32(setting));
            }

			AddModuleMessage("ChangeSuccessful", ModuleMessage.ModuleMessageType.GreenSuccess, true);
	        resetMessages.Visible = divPassword.Visible = false;

			//redirect page after 5 seconds
	        var script = string.Format("setTimeout(function(){{location.href = '{0}';}}, {1});", redirectURL, RedirectTimeout);
			if (ScriptManager.GetCurrent(Page) != null)
			{
				// respect MS AJAX
				ScriptManager.RegisterStartupScript(Page, GetType(), "ChangePasswordSuccessful", script, true);
			}
			else
			{
				Page.ClientScript.RegisterStartupScript(GetType(), "ChangePasswordSuccessful", script, true);
			}
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_ipAddress">
          <declaration><![CDATA[private string _ipAddress;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdChangePassword">
          <declaration><![CDATA[protected LinkButton cmdChangePassword;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="divPassword">
          <declaration><![CDATA[protected Panel divPassword;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="divQA">
          <declaration><![CDATA[protected HtmlGenericControl divQA;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="hlCancel">
          <declaration><![CDATA[protected HyperLink hlCancel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblHelp">
          <declaration><![CDATA[protected Label lblHelp;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblInfo">
          <declaration><![CDATA[protected Label lblInfo;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblQuestion">
          <declaration><![CDATA[protected Label lblQuestion;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="liLogin">
          <declaration><![CDATA[protected HtmlGenericControl liLogin;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="passwordContainer">
          <declaration><![CDATA[protected Panel passwordContainer;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="RedirectTimeout">
          <declaration><![CDATA[private const int RedirectTimeout = 3000;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="resetMessages">
          <declaration><![CDATA[protected HtmlGenericControl resetMessages;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtAnswer">
          <declaration><![CDATA[protected TextBox txtAnswer;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtConfirmPassword">
          <declaration><![CDATA[protected TextBox txtConfirmPassword;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtPassword">
          <declaration><![CDATA[protected TextBox txtPassword;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtUsername">
          <declaration><![CDATA[protected TextBox txtUsername;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="valConfirmPassword">
          <declaration><![CDATA[protected RequiredFieldValidator valConfirmPassword;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="valPassword">
          <declaration><![CDATA[protected RegularExpressionValidator valPassword;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="valUsername">
          <declaration><![CDATA[protected RequiredFieldValidator valUsername;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="ResetToken">
          <declaration><![CDATA[private string ResetToken]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="59" sc="13" el="61" ec="14">admin\Security\PasswordReset.ascx.cs</location>
            <body hash="dc3ced555daeff0ff7ad3360f0852019"><![CDATA[{
                return ViewState["ResetToken"] != null ? Request.QueryString["resetToken"] : String.Empty;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="63" sc="13" el="65" ec="14">admin\Security\PasswordReset.ascx.cs</location>
            <body hash="401155e363c9013bb2f0ee95b1fa9026"><![CDATA[{
                ViewState.Add("ResetToken", value);
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="SecurityRoles">
      <declaration><![CDATA[public class SecurityRoles : PortalModuleBase, IActionable]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private int RoleId = Null.NullInteger;]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="65" sc="9" el="71" ec="37">DesktopModules\Admin\Security\SecurityRoles.ascx.cs</location>
            <body hash="613df31946d5e067a8ff63e595a6e6f7"><![CDATA[private int RoleId = Null.NullInteger;
        private new int UserId = Null.NullInteger;
        private RoleInfo _Role;
        private int _SelectedUserID = Null.NullInteger;
        private UserInfo _User;

        private int _totalPages = 1;]]></body>
          </codeblock>
        </constructor>
        <constructor name=".cctor">
          <declaration><![CDATA[static SecurityRoles()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="62" sc="6" el="62" ec="100">DesktopModules\Admin\Security\SecurityRoles.ascx.cs</location>
            <body hash="b7e102f747d231214899c8e244059744"><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof (SecurityRoles))]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="BindData">
          <declaration><![CDATA[private void BindData()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="229" sc="9" el="319" ec="10">DesktopModules\Admin\Security\SecurityRoles.ascx.cs</location>
            <body hash="25314b6a7457853f04405859d7df43d2"><![CDATA[{
            //bind all portal roles to dropdownlist
            if (RoleId == Null.NullInteger)
            {
                if (cboRoles.Items.Count == 0)
                {
                    var roles = RoleController.Instance.GetRoles(PortalId, x => x.Status == RoleStatus.Approved);

                    //Remove access to Admin Role if use is not a member of the role
                    int roleIndex = Null.NullInteger;
                    foreach (RoleInfo tmpRole in roles)
                    {
                        if (tmpRole.RoleName == PortalSettings.AdministratorRoleName)
                        {
                            if (!PortalSecurity.IsInRole(PortalSettings.AdministratorRoleName))
                            {
                                roleIndex = roles.IndexOf(tmpRole);
                            }
                        }
                        break;
                    }
                    if (roleIndex > Null.NullInteger)
                    {
                        roles.RemoveAt(roleIndex);
                    }
                    cboRoles.DataSource = roles;
                    cboRoles.DataBind();
                }
            }
            else
            {
                if (!Page.IsPostBack)
                {
                    if (Role != null)
                    {
                        //cboRoles.Items.Add(new ListItem(Role.RoleName, Role.RoleID.ToString()));
                        cboRoles.AddItem(Role.RoleName, Role.RoleID.ToString());
                        cboRoles.Items[0].Selected = true;
                        lblTitle.Text = string.Format(Localization.GetString("RoleTitle.Text", LocalResourceFile), Role.RoleName, Role.RoleID);
                    }
                    cboRoles.Visible = false;
                    plRoles.Visible = false;
                }
            }
			
            //bind all portal users to dropdownlist
            if (UserId == -1)
            {
				//Make sure user has enough permissions
                if (Role.RoleName == PortalSettings.AdministratorRoleName && !PortalSecurity.IsInRole(PortalSettings.AdministratorRoleName))
                {
                    UI.Skins.Skin.AddModuleMessage(this, Localization.GetString("NotAuthorized", LocalResourceFile), ModuleMessage.ModuleMessageType.YellowWarning);
                    pnlRoles.Visible = false;
                    pnlUserRoles.Visible = false;
                    chkNotify.Visible = false;
                    return;
                }
                if (UsersControl == UsersControl.Combo)
                {
                    if (cboUsers.Items.Count == 0)
                    {
                        foreach (UserInfo objUser in UserController.GetUsers(PortalId))
                        {
                            //cboUsers.Items.Add(new ListItem(objUser.DisplayName + " (" + objUser.Username + ")", objUser.UserID.ToString()));
                            cboUsers.AddItem(objUser.DisplayName + " (" + objUser.Username + ")", objUser.UserID.ToString());
                        }
                    }
                    txtUsers.Visible = false;
                    cboUsers.Visible = true;
                    cmdValidate.Visible = false;
                }
                else
                {
                    txtUsers.Visible = true;
                    cboUsers.Visible = false;
                    cmdValidate.Visible = true;
                }
            }
            else
            {
                if (User != null)
                {
                    txtUsers.Text = User.UserID.ToString();
                    lblTitle.Text = string.Format(Localization.GetString("UserTitle.Text", LocalResourceFile), User.Username, User.UserID);
                }
                txtUsers.Visible = false;
                cboUsers.Visible = false;
                cmdValidate.Visible = false;
                plUsers.Visible = false;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="BindGrid">
          <declaration><![CDATA[private void BindGrid()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="329" sc="9" el="360" ec="10">DesktopModules\Admin\Security\SecurityRoles.ascx.cs</location>
            <body hash="bc0c72d69ac3a598e460f438fce4d76f"><![CDATA[{
            

            if (RoleId != Null.NullInteger)
            {
                cmdAdd.Text = Localization.GetString("AddUser.Text", LocalResourceFile);
                grdUserRoles.DataKeyField = "UserId";
                grdUserRoles.Columns[2].Visible = false;
            }
            if (UserId != Null.NullInteger)
            {
                cmdAdd.Text = Localization.GetString("AddRole.Text", LocalResourceFile);
                grdUserRoles.DataKeyField = "RoleId";
                grdUserRoles.Columns[1].Visible = false;
            }

            grdUserRoles.DataSource = GetPagedDataSource();
            grdUserRoles.DataBind();

            ctlPagingControl.TotalRecords = _totalRecords;
            ctlPagingControl.PageSize = PageSize;
            ctlPagingControl.CurrentPage = CurrentPage;
            ctlPagingControl.TabID = TabId;
            ctlPagingControl.QuerystringParams = System.Web.HttpUtility.UrlDecode(string.Join("&", Request.QueryString.ToString().Split('&').
                                                                        ToList().
                                                                        Where(s => s.StartsWith("ctl", StringComparison.OrdinalIgnoreCase) 
                                                                            || s.StartsWith("mid", StringComparison.OrdinalIgnoreCase)
                                                                            || s.StartsWith("RoleId", StringComparison.OrdinalIgnoreCase)
                                                                            || s.StartsWith("UserId", StringComparison.OrdinalIgnoreCase)
                                                                            || s.StartsWith("filter", StringComparison.OrdinalIgnoreCase)
                                                                            || s.StartsWith("popUp", StringComparison.OrdinalIgnoreCase)).ToArray()));
        }]]></body>
          </codeblock>
        </method>
        <method name="cboRoles_SelectedIndexChanged">
          <declaration><![CDATA[private void cboRoles_SelectedIndexChanged(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="648" sc="9" el="651" ec="10">DesktopModules\Admin\Security\SecurityRoles.ascx.cs</location>
            <body hash="c6e40376dea5d3aa906af30504ff490d"><![CDATA[{
            GetDates(UserId, Int32.Parse(cboRoles.SelectedItem.Value));
            BindGrid();
        }]]></body>
          </codeblock>
        </method>
        <method name="cboUsers_SelectedIndexChanged">
          <declaration><![CDATA[private void cboUsers_SelectedIndexChanged(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="599" sc="9" el="606" ec="10">DesktopModules\Admin\Security\SecurityRoles.ascx.cs</location>
            <body hash="2abbe37ec3c510c4b6c6bb93b3d82c84"><![CDATA[{
            if ((cboUsers.SelectedItem != null) && (cboRoles.SelectedItem != null))
            {
                SelectedUserID = Int32.Parse(cboUsers.SelectedItem.Value);
                GetDates(SelectedUserID, Int32.Parse(cboRoles.SelectedItem.Value));
            }
            BindGrid();
        }]]></body>
          </codeblock>
        </method>
        <method name="cmdAdd_Click">
          <declaration><![CDATA[private void cmdAdd_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="661" sc="9" el="715" ec="10">DesktopModules\Admin\Security\SecurityRoles.ascx.cs</location>
            <body hash="cc4999abdbdb7d8b6c7e84c03d6b0f1f"><![CDATA[{
            if (PortalSecurity.IsInRole(PortalSettings.AdministratorRoleName) == false)
            {
                return;
            }
            try
            {
                if (Page.IsValid)
                {
                    if ((Role != null) && (User != null))
                    {
						//do not modify the portal Administrator account dates
                        if (User.UserID == PortalSettings.AdministratorId && Role.RoleID == PortalSettings.AdministratorRoleId)
                        {
                        	effectiveDatePicker.SelectedDate = null;
                        	expiryDatePicker.SelectedDate = null;
                        }

                        DateTime datEffectiveDate;
                        if (effectiveDatePicker.SelectedDate != null)
                        {
							datEffectiveDate = effectiveDatePicker.SelectedDate.Value;
                        }
                        else
                        {
                            datEffectiveDate = Null.NullDate;
                        }

                        DateTime datExpiryDate;
                        if (expiryDatePicker.SelectedDate != null)
                        {
							datExpiryDate = expiryDatePicker.SelectedDate.Value;
                        }
                        else
                        {
                            datExpiryDate = Null.NullDate;
                        }
						
                        //Add User to Role
                        var isOwner = false;
                        
                        if(((Role.SecurityMode == SecurityMode.SocialGroup) || (Role.SecurityMode == SecurityMode.Both)))
                            isOwner = chkIsOwner.Checked;

                        RoleController.AddUserRole(User, Role, PortalSettings, RoleStatus.Approved, datEffectiveDate, datExpiryDate, chkNotify.Checked, isOwner);
                        chkIsOwner.Checked = false; //reset the checkbox
                    }
                }
                BindGrid();
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="cmdDeleteUserRole_click">
          <declaration><![CDATA[public void cmdDeleteUserRole_click(object sender, ImageClickEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="718" sc="9" el="741" ec="10">DesktopModules\Admin\Security\SecurityRoles.ascx.cs</location>
            <body hash="76eb618f82fe21453e0c830d4784b460"><![CDATA[{
            if (PortalSecurity.IsInRole(PortalSettings.AdministratorRoleName) == false)
            {
                return;
            }
            try
            {
                var cmdDeleteUserRole = (ImageButton) sender;
                int roleId = Convert.ToInt32(cmdDeleteUserRole.Attributes["roleId"]);
                int userId = Convert.ToInt32(cmdDeleteUserRole.Attributes["userId"]);

                RoleInfo role = RoleController.Instance.GetRole(PortalId, r => r.RoleID == roleId);
                if (!RoleController.DeleteUserRole(UserController.GetUserById(PortalId, userId), role, PortalSettings, chkNotify.Checked))
                {
                    UI.Skins.Skin.AddModuleMessage(this, Localization.GetString("RoleRemoveError", LocalResourceFile), ModuleMessage.ModuleMessageType.RedError);
                }
                BindGrid();
            }
            catch (Exception exc)
            {
                Exceptions.LogException(exc);
                UI.Skins.Skin.AddModuleMessage(this, Localization.GetString("RoleRemoveError", LocalResourceFile), ModuleMessage.ModuleMessageType.RedError);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="cmdValidate_Click">
          <declaration><![CDATA[private void cmdValidate_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="616" sc="9" el="637" ec="10">DesktopModules\Admin\Security\SecurityRoles.ascx.cs</location>
            <body hash="d371438b9ed89d4805b2b4cb7efa27fa"><![CDATA[{
            if (PortalSecurity.IsInRole(PortalSettings.AdministratorRoleName) == false)
            {
                return;
            }

            if (!String.IsNullOrEmpty(txtUsers.Text))
            {
				//validate username
                UserInfo objUser = UserController.GetUserByName(PortalId, txtUsers.Text);
                if (objUser != null)
                {
                    GetDates(objUser.UserID, RoleId);
                    SelectedUserID = objUser.UserID;
                }
                else
                {
                    txtUsers.Text = "";
                }
            }
            BindGrid();
        }]]></body>
          </codeblock>
        </method>
        <method name="DataBind">
          <declaration><![CDATA[public override void DataBind()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="437" sc="9" el="451" ec="10">DesktopModules\Admin\Security\SecurityRoles.ascx.cs</location>
            <body hash="7191b95f737c67e71e11dff28e16f72b"><![CDATA[{
            if (!ModulePermissionController.CanEditModuleContent(ModuleConfiguration))
            {
                Response.Redirect(Globals.NavigateURL("Access Denied"), true);
            }
            base.DataBind();

            //Localize Headers
            Localization.LocalizeDataGrid(ref grdUserRoles, LocalResourceFile);

            //Bind the role data to the datalist
            BindData();

            BindGrid();
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteButtonVisible">
          <declaration><![CDATA[public bool DeleteButtonVisible(int UserID, int RoleID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="464" sc="9" el="473" ec="10">DesktopModules\Admin\Security\SecurityRoles.ascx.cs</location>
            <body hash="451e0b058a5d25ec5aea4e517569cee9"><![CDATA[{
            //[DNN-4285] Check if the role can be removed (only handles case of Administrator and Administrator Role
            bool canDelete = RoleController.CanRemoveUserFromRole(PortalSettings, UserID, RoleID);
            if (RoleID == PortalSettings.AdministratorRoleId && canDelete)
            {
				//User can only delete if in Admin role
                canDelete = PortalSecurity.IsInRole(PortalSettings.AdministratorRoleName);
            }
            return canDelete;
        }]]></body>
          </codeblock>
        </method>
        <method name="FormatDate">
          <declaration><![CDATA[public string FormatDate(DateTime DateTime)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="484" sc="9" el="493" ec="10">DesktopModules\Admin\Security\SecurityRoles.ascx.cs</location>
            <body hash="8f61fea510f2f838c2d451f820e663c2"><![CDATA[{
            if (!Null.IsNull(DateTime))
            {
                return DateTime.ToShortDateString();
            }
            else
            {
                return "";
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="FormatUser">
          <declaration><![CDATA[public string FormatUser(int UserID, string DisplayName)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="501" sc="9" el="503" ec="10">DesktopModules\Admin\Security\SecurityRoles.ascx.cs</location>
            <body hash="e7c703541455f1c989a59935313b7e88"><![CDATA[{
            return "<a href=\"" + Globals.LinkClick("userid=" + UserID, TabId, ModuleId) + "\" class=\"CommandButton\">" + DisplayName + "</a>";
        }]]></body>
          </codeblock>
        </method>
        <method name="GetDates">
          <declaration><![CDATA[private void GetDates(int UserId, int RoleId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="384" sc="9" el="425" ec="10">DesktopModules\Admin\Security\SecurityRoles.ascx.cs</location>
            <body hash="ce2bc0c3c5dfaf2a4fc99231fb2dfd16"><![CDATA[{
        	DateTime? expiryDate = null;
        	DateTime? effectiveDate = null;

            UserRoleInfo objUserRole = RoleController.Instance.GetUserRole(PortalId, UserId, RoleId);
            if (objUserRole != null)
            {
                if (Null.IsNull(objUserRole.EffectiveDate) == false)
                {
                    effectiveDate = objUserRole.EffectiveDate;
                }
                if (Null.IsNull(objUserRole.ExpiryDate) == false)
                {
                    expiryDate = objUserRole.ExpiryDate;
                }
            }
            else //new role assignment
            {
                RoleInfo objRole = RoleController.Instance.GetRole(PortalId, r => r.RoleID == RoleId);

                if (objRole.BillingPeriod > 0)
                {
                    switch (objRole.BillingFrequency)
                    {
                        case "D":
                            expiryDate = DateTime.Now.AddDays(objRole.BillingPeriod);
                            break;
                        case "W":
                            expiryDate = DateTime.Now.AddDays(objRole.BillingPeriod*7);
                            break;
                        case "M":
                            expiryDate = DateTime.Now.AddMonths(objRole.BillingPeriod);
                            break;
                        case "Y":
                            expiryDate = DateTime.Now.AddYears(objRole.BillingPeriod);
                            break;
                    }
                }
            }
			effectiveDatePicker.SelectedDate = effectiveDate;
			expiryDatePicker.SelectedDate = expiryDate;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPagedDataSource">
          <declaration><![CDATA[private IList<UserRoleInfo> GetPagedDataSource()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="363" sc="9" el="372" ec="10">DesktopModules\Admin\Security\SecurityRoles.ascx.cs</location>
            <body hash="f382f116c446022f231a3d0ba5a29bec"><![CDATA[{
            var roleName = RoleId != Null.NullInteger ? Role.RoleName : Null.NullString;
            var userName = UserId != Null.NullInteger ? User.Username : Null.NullString;

            var userList = RoleController.Instance.GetUserRoles(PortalId, userName, roleName);
            _totalRecords = userList.Count;
            _totalPages = _totalRecords%PageSize == 0 ? _totalRecords/PageSize : _totalRecords/PageSize + 1;

            return userList.Skip((CurrentPage - 1 )*PageSize).Take(PageSize).ToList();
        }]]></body>
          </codeblock>
        </method>
        <method name="grdUserRoles_ItemCreated">
          <declaration><![CDATA[private void grdUserRoles_ItemCreated(object sender, DataGridItemEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="751" sc="9" el="780" ec="10">DesktopModules\Admin\Security\SecurityRoles.ascx.cs</location>
            <body hash="5ff34ce5c3d43cb4bbf6985bfeb95e7f"><![CDATA[{
            try
            {
                DataGridItem item = e.Item;

                var cmdDeleteUserRole = e.Item.FindControl("cmdDeleteUserRole") as ImageButton;
                var role = e.Item.DataItem as UserRoleInfo;

                if (cmdDeleteUserRole != null)
                {
                    if (RoleId == Null.NullInteger)
                    {
                        ClientAPI.AddButtonConfirm(cmdDeleteUserRole, String.Format(Localization.GetString("DeleteRoleFromUser.Text", LocalResourceFile), role.FullName, role.RoleName));
                    }
                    else
                    {
                        ClientAPI.AddButtonConfirm(cmdDeleteUserRole, String.Format(Localization.GetString("DeleteUsersFromRole.Text", LocalResourceFile), role.FullName, role.RoleName));
                    }
                    cmdDeleteUserRole.Attributes.Add("roleId", role.RoleID.ToString());
                    cmdDeleteUserRole.Attributes.Add("userId", role.UserID.ToString());
                }

                item.Cells[5].Visible = ((Role.SecurityMode == SecurityMode.SocialGroup) || (Role.SecurityMode == SecurityMode.Both));

            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="grdUserRoles_ItemDataBound">
          <declaration><![CDATA[protected void grdUserRoles_ItemDataBound(object sender, DataGridItemEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="783" sc="9" el="803" ec="10">DesktopModules\Admin\Security\SecurityRoles.ascx.cs</location>
            <body hash="59546fa9d3d02f6731ef2ac1b408d310"><![CDATA[{
            DataGridItem item = e.Item;
            if (item.ItemType == ListItemType.Item || item.ItemType == ListItemType.AlternatingItem || item.ItemType == ListItemType.SelectedItem)
            {
                var userRole = (UserRoleInfo) item.DataItem;
                if (RoleId == Null.NullInteger)
                {
                    if (userRole.RoleID == Convert.ToInt32(cboRoles.SelectedValue))
                    {
                        cmdAdd.Text = Localization.GetString("UpdateRole.Text", LocalResourceFile);
                    }
                }
                if (UserId == Null.NullInteger)
                {
                    if (userRole.UserID == SelectedUserID)
                    {
                        cmdAdd.Text = Localization.GetString("UpdateRole.Text", LocalResourceFile);
                    }
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="517" sc="9" el="552" ec="10">DesktopModules\Admin\Security\SecurityRoles.ascx.cs</location>
            <body hash="e641dab70951d5594a57cffa9046796b"><![CDATA[{
            base.OnInit(e);

            if ((Request.QueryString["RoleId"] != null))
            {
                RoleId = Int32.Parse(Request.QueryString["RoleId"]);
            }
            if ((Request.QueryString["UserId"] != null))
            {
                int userId;
                // Use Int32.MaxValue as invalid UserId
                UserId = Int32.TryParse(Request.QueryString["UserId"], out userId) ? userId : Int32.MaxValue;
            }

            CurrentPage = 1;
            if (Request.QueryString["CurrentPage"] != null)
            {
                var currentPage = 0;
                if (int.TryParse(Request.QueryString["CurrentPage"], out currentPage)
                    && currentPage > 0)
                {
                    CurrentPage = currentPage;
                }
                else
                {
                    CurrentPage = 1;
                }
            }

            cboRoles.SelectedIndexChanged += cboRoles_SelectedIndexChanged;
            cboUsers.SelectedIndexChanged += cboUsers_SelectedIndexChanged;
            cmdAdd.Click += cmdAdd_Click;
            cmdValidate.Click += cmdValidate_Click;
            grdUserRoles.ItemCreated += grdUserRoles_ItemCreated;
            grdUserRoles.ItemDataBound += grdUserRoles_ItemDataBound;
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="562" sc="9" el="588" ec="10">DesktopModules\Admin\Security\SecurityRoles.ascx.cs</location>
            <body hash="880fdcb9ca16516eca6478d5ccd6335e"><![CDATA[{
            base.OnLoad(e);

            try
            {
                cmdCancel.NavigateUrl = ReturnUrl;
                if (ParentModule == null)
                {
                    DataBind();
                }

                if (Role == null)
                    return;

                placeIsOwner.Visible = ((Role.SecurityMode == SecurityMode.SocialGroup) || (Role.SecurityMode == SecurityMode.Both));
                placeIsOwnerHeader.Visible = ((Role.SecurityMode == SecurityMode.SocialGroup) || (Role.SecurityMode == SecurityMode.Both));
            }
            catch (ThreadAbortException exc) //Do nothing if ThreadAbort as this is caused by a redirect
            {
                Logger.Debug(exc);

            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_Role">
          <declaration><![CDATA[private RoleInfo _Role;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_SelectedUserID">
          <declaration><![CDATA[private int _SelectedUserID = Null.NullInteger;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_totalPages">
          <declaration><![CDATA[private int _totalPages = 1;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_totalRecords">
          <declaration><![CDATA[private int _totalRecords;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_User">
          <declaration><![CDATA[private UserInfo _User;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="actionsRow">
          <declaration><![CDATA[protected HtmlGenericControl actionsRow;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cboRoles">
          <declaration><![CDATA[protected DnnComboBox cboRoles;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cboUsers">
          <declaration><![CDATA[protected DnnComboBox cboUsers;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkIsOwner">
          <declaration><![CDATA[protected CheckBox chkIsOwner;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkNotify">
          <declaration><![CDATA[protected CheckBox chkNotify;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdAdd">
          <declaration><![CDATA[protected LinkButton cmdAdd;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdCancel">
          <declaration><![CDATA[protected HyperLink cmdCancel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdValidate">
          <declaration><![CDATA[protected LinkButton cmdValidate;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ctlPagingControl">
          <declaration><![CDATA[protected PagingControl ctlPagingControl;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="effectiveDatePicker">
          <declaration><![CDATA[protected DnnDatePicker effectiveDatePicker;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="expiryDatePicker">
          <declaration><![CDATA[protected DnnDatePicker expiryDatePicker;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="grdUserRoles">
          <declaration><![CDATA[protected DataGrid grdUserRoles;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblIsOwner">
          <declaration><![CDATA[protected LabelControl lblIsOwner;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblTitle">
          <declaration><![CDATA[protected Label lblTitle;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Logger">
          <declaration><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof(SecurityRoles));]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="placeIsOwner">
          <declaration><![CDATA[protected PlaceHolder placeIsOwner;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="placeIsOwnerHeader">
          <declaration><![CDATA[protected PlaceHolder placeIsOwnerHeader;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plEffectiveDate">
          <declaration><![CDATA[protected LabelControl plEffectiveDate;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plExpiryDate">
          <declaration><![CDATA[protected LabelControl plExpiryDate;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plRoles">
          <declaration><![CDATA[protected LabelControl plRoles;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plUsers">
          <declaration><![CDATA[protected LabelControl plUsers;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="pnlRoles">
          <declaration><![CDATA[protected Panel pnlRoles;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="pnlUserRoles">
          <declaration><![CDATA[protected Panel pnlUserRoles;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="RoleId">
          <declaration><![CDATA[private int RoleId = Null.NullInteger;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtUsers">
          <declaration><![CDATA[protected TextBox txtUsers;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="UserId">
          <declaration><![CDATA[private new int UserId = Null.NullInteger;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="valDates">
          <declaration><![CDATA[protected CompareValidator valDates;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="valEffectiveDate">
          <declaration><![CDATA[protected CompareValidator valEffectiveDate;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="valExpiryDate">
          <declaration><![CDATA[protected CompareValidator valExpiryDate;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="CurrentPage">
          <declaration><![CDATA[protected int CurrentPage]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="181" sc="37" el="181" ec="41">DesktopModules\Admin\Security\SecurityRoles.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="181" sc="42" el="181" ec="46">DesktopModules\Admin\Security\SecurityRoles.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ModuleActions">
          <declaration><![CDATA[public ModuleActionCollection ModuleActions]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="212" sc="13" el="214" ec="14">DesktopModules\Admin\Security\SecurityRoles.ascx.cs</location>
            <body hash="7409d6d55919619a76ff7c16577b0a06"><![CDATA[{
                return new ModuleActionCollection();
            }]]></body>
          </codeblock>
        </property>
        <property name="PageSize">
          <declaration><![CDATA[protected int PageSize]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="186" sc="13" el="189" ec="14">DesktopModules\Admin\Security\SecurityRoles.ascx.cs</location>
            <body hash="668471b132b3d418e5da53bec9c4e4d9"><![CDATA[{
                var setting = UserModuleBase.GetSetting(PortalId, "Records_PerPage");
                return Convert.ToInt32(setting);
            }]]></body>
          </codeblock>
        </property>
        <property name="ParentModule">
          <declaration><![CDATA[public PortalModuleBase ParentModule]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="203" sc="48" el="203" ec="52">DesktopModules\Admin\Security\SecurityRoles.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="203" sc="53" el="203" ec="57">DesktopModules\Admin\Security\SecurityRoles.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ReturnUrl">
          <declaration><![CDATA[protected string ReturnUrl]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="86" sc="13" el="110" ec="14">DesktopModules\Admin\Security\SecurityRoles.ascx.cs</location>
            <body hash="d8783ce16871787fa3e6dba191adef49"><![CDATA[{
                string _ReturnURL;
                var FilterParams = new string[String.IsNullOrEmpty(Request.QueryString["filterproperty"]) ? 2 : 3];

                if (String.IsNullOrEmpty(Request.QueryString["filterProperty"]))
                {
                    FilterParams.SetValue("filter=" + Request.QueryString["filter"], 0);
                    FilterParams.SetValue("currentpage=" + Request.QueryString["currentpage"], 1);
                }
                else
                {
                    FilterParams.SetValue("filter=" + Request.QueryString["filter"], 0);
                    FilterParams.SetValue("filterProperty=" + Request.QueryString["filterProperty"], 1);
                    FilterParams.SetValue("currentpage=" + Request.QueryString["currentpage"], 2);
                }
                if (string.IsNullOrEmpty(Request.QueryString["filter"]))
                {
                    _ReturnURL = Globals.NavigateURL(TabId);
                }
                else
                {
                    _ReturnURL = Globals.NavigateURL(TabId, "", FilterParams);
                }
                return _ReturnURL;
            }]]></body>
          </codeblock>
        </property>
        <property name="Role">
          <declaration><![CDATA[protected RoleInfo Role]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="116" sc="13" el="129" ec="14">DesktopModules\Admin\Security\SecurityRoles.ascx.cs</location>
            <body hash="70bce5086ed56d98b0fc1f5442854288"><![CDATA[{
                if (_Role == null)
                {
                    if (RoleId != Null.NullInteger)
                    {
                        _Role = RoleController.Instance.GetRole(PortalId, r => r.RoleID == RoleId); ;
                    }
                    else if (cboRoles.SelectedItem != null)
                    {
                        _Role = RoleController.Instance.GetRole(PortalId, r => r.RoleID == Convert.ToInt32(cboRoles.SelectedItem.Value));
                    }
                }
                return _Role;
            }]]></body>
          </codeblock>
        </property>
        <property name="SelectedUserID">
          <declaration><![CDATA[protected int SelectedUserID]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="158" sc="13" el="160" ec="14">DesktopModules\Admin\Security\SecurityRoles.ascx.cs</location>
            <body hash="f9dfb1f24d159549fbda7ac8dfc23d69"><![CDATA[{
                return _SelectedUserID;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="162" sc="13" el="164" ec="14">DesktopModules\Admin\Security\SecurityRoles.ascx.cs</location>
            <body hash="7b80fa3747d81ca0bd42202716cb1fb6"><![CDATA[{
                _SelectedUserID = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="User">
          <declaration><![CDATA[protected UserInfo User]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="135" sc="13" el="152" ec="14">DesktopModules\Admin\Security\SecurityRoles.ascx.cs</location>
            <body hash="3b167e280b31a7f9feaea96cbe0d76f8"><![CDATA[{
                if (_User == null)
                {
                    if (UserId != Null.NullInteger)
                    {
                        _User = UserController.GetUserById(PortalId, UserId);
                    }
                    else if (UsersControl == UsersControl.TextBox && !String.IsNullOrEmpty(txtUsers.Text))
                    {
                        _User = UserController.GetUserByName(PortalId, txtUsers.Text);
                    }
                    else if (UsersControl == UsersControl.Combo && (cboUsers.SelectedItem != null))
                    {
                        _User = UserController.GetUserById(PortalId, Convert.ToInt32(cboUsers.SelectedItem.Value));
                    }
                }
                return _User;
            }]]></body>
          </codeblock>
        </property>
        <property name="UsersControl">
          <declaration><![CDATA[protected UsersControl UsersControl]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="175" sc="13" el="178" ec="14">DesktopModules\Admin\Security\SecurityRoles.ascx.cs</location>
            <body hash="4291b97ea9b60e2ab8a6ec35d6c28f9f"><![CDATA[{
                var setting = UserModuleBase.GetSetting(PortalId, "Security_UsersControl");
                return (UsersControl)setting;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="SendPassword">
      <declaration><![CDATA[public class SendPassword : UserModuleBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private int _userCount = Null.NullInteger;]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="61" sc="9" el="61" ec="51">admin\Security\SendPassword.ascx.cs</location>
            <body hash="baa40ca2c8de4fbc2b19b077507b91cf"><![CDATA[private int _userCount = Null.NullInteger]]></body>
          </codeblock>
        </constructor>
        <constructor name=".cctor">
          <declaration><![CDATA[static SendPassword()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="56" sc="6" el="56" ec="99">admin\Security\SendPassword.ascx.cs</location>
            <body hash="a4212baf7466149b64aacfdae167fc82"><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof (SendPassword))]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="cancelButton_Click">
          <declaration><![CDATA[private void cancelButton_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="403" sc="9" el="405" ec="10">admin\Security\SendPassword.ascx.cs</location>
            <body hash="14a37fce4c25612e2a60c126a89caec8"><![CDATA[{
            Response.Redirect(RedirectURL, true);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetUser">
          <declaration><![CDATA[private void GetUser()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="156" sc="9" el="170" ec="10">admin\Security\SendPassword.ascx.cs</location>
            <body hash="04fd0299e1ce9bdd0c6a72bcd5866d95"><![CDATA[{
            ArrayList arrUsers;
			if (MembershipProviderConfig.RequiresUniqueEmail && !String.IsNullOrEmpty(txtEmail.Text.Trim()) && (String.IsNullOrEmpty(txtUsername.Text.Trim()) || divUsername.Visible == false))
            {
                arrUsers = UserController.GetUsersByEmail(PortalSettings.PortalId, txtEmail.Text, 0, Int32.MaxValue, ref _userCount);
                if (arrUsers != null && arrUsers.Count == 1)
                {
                    _user = (UserInfo)arrUsers[0];
                }
            }
            else
            {
                _user = UserController.GetUserByName(PortalSettings.PortalId, txtUsername.Text);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="LogFailure">
          <declaration><![CDATA[private void LogFailure(string reason)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="370" sc="9" el="372" ec="10">admin\Security\SendPassword.ascx.cs</location>
            <body hash="6ae11ec85f2fbb19f9a679a3e43b8a41"><![CDATA[{
            LogResult(reason);
        }]]></body>
          </codeblock>
        </method>
        <method name="LogResult">
          <declaration><![CDATA[private void LogResult(string message)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="375" sc="9" el="400" ec="10">admin\Security\SendPassword.ascx.cs</location>
            <body hash="0109ea3a41259e9ef0c67f631fbfc11b"><![CDATA[{
            var portalSecurity = new PortalSecurity();

			var log = new LogInfo
            {
                LogPortalID = PortalSettings.PortalId,
                LogPortalName = PortalSettings.PortalName,
                LogUserID = UserId,
                LogUserName = portalSecurity.InputFilter(txtUsername.Text, PortalSecurity.FilterFlag.NoScripting | PortalSecurity.FilterFlag.NoAngleBrackets | PortalSecurity.FilterFlag.NoMarkup)
            };
			
            if (string.IsNullOrEmpty(message))
            {
                log.LogTypeKey = "PASSWORD_SENT_SUCCESS";
            }
            else
            {
                log.LogTypeKey = "PASSWORD_SENT_FAILURE";
                log.LogProperties.Add(new LogDetailInfo("Cause", message));
            }
            
			log.AddProperty("IP", _ipAddress);
            
            LogController.Instance.AddLog(log);

        }]]></body>
          </codeblock>
        </method>
        <method name="LogSuccess">
          <declaration><![CDATA[private void LogSuccess()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="365" sc="9" el="367" ec="10">admin\Security\SendPassword.ascx.cs</location>
            <body hash="dac4dc755ecca3dcb125aec00a771ee8"><![CDATA[{
            LogResult(string.Empty);
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="177" sc="9" el="213" ec="10">admin\Security\SendPassword.ascx.cs</location>
            <body hash="32933b2737de8929275ea0ee2adb117e"><![CDATA[{
            base.OnInit(e);

            var isEnabled = true;
			
            //both retrieval and reset now use password token resets
            if (MembershipProviderConfig.PasswordRetrievalEnabled || MembershipProviderConfig.PasswordResetEnabled)
            {
                lblHelp.Text = Localization.GetString("ResetTokenHelp", LocalResourceFile);
                cmdSendPassword.Text = Localization.GetString("ResetToken", LocalResourceFile);
            }
            else
            {
                isEnabled = false;
                lblHelp.Text = Localization.GetString("DisabledPasswordHelp", LocalResourceFile);
                divPassword.Visible = false;
            }
			
			if (!MembershipProviderConfig.PasswordResetEnabled)
            {
                isEnabled = false;
                lblHelp.Text = Localization.GetString("DisabledPasswordHelp", LocalResourceFile);
                divPassword.Visible = false;
            }

            if (MembershipProviderConfig.RequiresUniqueEmail && isEnabled && !PortalController.GetPortalSettingAsBoolean("Registration_UseEmailAsUserName", PortalId, false))
            {
                lblHelp.Text += Localization.GetString("RequiresUniqueEmail", LocalResourceFile);
            }
			
            if (MembershipProviderConfig.RequiresQuestionAndAnswer && isEnabled)
            {
                lblHelp.Text += Localization.GetString("RequiresQuestionAndAnswer", LocalResourceFile);
            }


        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="221" sc="9" el="242" ec="10">admin\Security\SendPassword.ascx.cs</location>
            <body hash="e037a76eccfdf121afc8a6aab24c83ad"><![CDATA[{
            base.OnLoad(e);

            cmdSendPassword.Click += OnSendPasswordClick;
			cancelButton.Click += cancelButton_Click;

            if (Request.UserHostAddress != null)
            {
                _ipAddress = Request.UserHostAddress;
            }


			divEmail.Visible = ShowEmailField;
			divUsername.Visible = !UsernameDisabled;
            divCaptcha.Visible = UseCaptcha;

            if (UseCaptcha)
            {
                ctlCaptcha.ErrorMessage = Localization.GetString("InvalidCaptcha", LocalResourceFile);
                ctlCaptcha.Text = Localization.GetString("CaptchaText", LocalResourceFile);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnSendPasswordClick">
          <declaration><![CDATA[protected void OnSendPasswordClick(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="250" sc="9" el="362" ec="10">admin\Security\SendPassword.ascx.cs</location>
            <body hash="7acc4e2a3ace9233fb31c73c223aa676"><![CDATA[{
            //pretty much alwasy display the same message to avoid hinting on the existance of a user name
            var message = Localization.GetString("PasswordSent", LocalResourceFile);
            var moduleMessageType = ModuleMessage.ModuleMessageType.GreenSuccess;
            var canSend = true;

            if ((UseCaptcha && ctlCaptcha.IsValid) || (!UseCaptcha))
            {
                if (String.IsNullOrEmpty(txtUsername.Text.Trim()))
                {
                    //No UserName provided
                    if (ShowEmailField)
                    {
                        if (String.IsNullOrEmpty(txtEmail.Text.Trim()))
                        {
                            //No email address either (cannot retrieve password)
                            canSend = false;
                            message = Localization.GetString("EnterUsernameEmail", LocalResourceFile);
                            moduleMessageType = ModuleMessage.ModuleMessageType.RedError;
                        }
                    }
                    else
                    {
                        //Cannot retrieve password
                        canSend = false;
                        message = Localization.GetString("EnterUsername", LocalResourceFile);
                        moduleMessageType = ModuleMessage.ModuleMessageType.RedError;
                    }
                }

                if (string.IsNullOrEmpty(Host.SMTPServer))
                {
                    //SMTP Server is not configured
                    canSend = false;
                    message = Localization.GetString("OptionUnavailable", LocalResourceFile);
                    moduleMessageType = ModuleMessage.ModuleMessageType.YellowWarning;

                    var logMessage = Localization.GetString("SMTPNotConfigured", LocalResourceFile);

                    LogResult(logMessage);
                }

                if (canSend)
                {
                    GetUser();
                    if (_user != null)
                    {
                        if (_user.IsDeleted)
                        {
                            canSend = false;
                        }
                        else 
                        {
                            if (_user.Membership.Approved == false)
                            {
                                Mail.SendMail(_user, MessageType.PasswordReminderUserIsNotApproved, PortalSettings);
                                canSend = false;
                            }
                            if (MembershipProviderConfig.PasswordRetrievalEnabled || MembershipProviderConfig.PasswordResetEnabled)
                            {
                                UserController.ResetPasswordToken(_user);
                            }
                            if (canSend)
                            {
                                if (Mail.SendMail(_user, MessageType.PasswordReminder, PortalSettings) != string.Empty)
                                {
                                    canSend = false;
                                }
                            }
                        }
                    }
                    else
                    {
                        if (_userCount > 1)
                        {
                            message = Localization.GetString("MultipleUsers", LocalResourceFile);
                        }

                        canSend = false;
                    }

                    if (canSend)
                    {
                        LogSuccess();
						cancelButton.Attributes["resourcekey"] = "cmdClose";
                    }
                    else
                    {
                        LogFailure(message);
                    }

					//always hide panel so as to not reveal if username exists.
                    pnlRecover.Visible = false;
                    UI.Skins.Skin.AddModuleMessage(this, message, moduleMessageType);
                    liSend.Visible = false;
                    liCancel.Visible = true;

                    // don't hide panel when e-mail only in use and error occured. We must provide negative feedback to the user, in case he doesn't rember what e-mail address he has used
                    if (!canSend && _user == null && MembershipProviderConfig.RequiresUniqueEmail && PortalController.GetPortalSettingAsBoolean("Registration_UseEmailAsUserName", PortalId, false))
                    {
                        message = Localization.GetString("EmailNotFound", LocalResourceFile);
                        pnlRecover.Visible = true;
                        UI.Skins.Skin.AddModuleMessage(this, message, moduleMessageType);
                        liSend.Visible = true;
                        liCancel.Visible = true;
                    }
                }
                else
                {
                    UI.Skins.Skin.AddModuleMessage(this, message, moduleMessageType);
                }
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_ipAddress">
          <declaration><![CDATA[private string _ipAddress;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_user">
          <declaration><![CDATA[private UserInfo _user;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_userCount">
          <declaration><![CDATA[private int _userCount = Null.NullInteger;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cancelButton">
          <declaration><![CDATA[protected LinkButton cancelButton;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdSendPassword">
          <declaration><![CDATA[protected LinkButton cmdSendPassword;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ctlCaptcha">
          <declaration><![CDATA[protected CaptchaControl ctlCaptcha;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="divCaptcha">
          <declaration><![CDATA[protected HtmlGenericControl divCaptcha;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="divEmail">
          <declaration><![CDATA[protected HtmlGenericControl divEmail;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="divPassword">
          <declaration><![CDATA[protected HtmlGenericControl divPassword;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="divUsername">
          <declaration><![CDATA[protected HtmlGenericControl divUsername;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblHelp">
          <declaration><![CDATA[protected Label lblHelp;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="liCancel">
          <declaration><![CDATA[protected HtmlGenericControl liCancel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="liSend">
          <declaration><![CDATA[protected HtmlGenericControl liSend;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Logger">
          <declaration><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof(SendPassword));]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plCaptcha">
          <declaration><![CDATA[protected LabelControl plCaptcha;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plEmail">
          <declaration><![CDATA[protected LabelControl plEmail;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plUsername">
          <declaration><![CDATA[protected LabelControl plUsername;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="pnlRecover">
          <declaration><![CDATA[protected Panel pnlRecover;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtEmail">
          <declaration><![CDATA[protected TextBox txtEmail;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtUsername">
          <declaration><![CDATA[protected TextBox txtUsername;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="RedirectURL">
          <declaration><![CDATA[protected string RedirectURL]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="74" sc="13" el="119" ec="14">admin\Security\SendPassword.ascx.cs</location>
            <body hash="30e6f32a843584f4f4fcc3d3e0889339"><![CDATA[{
                var _RedirectURL = "";

                object setting = GetSetting(PortalId, "Redirect_AfterRegistration");

                if (Convert.ToInt32(setting) > 0) //redirect to after registration page
                {
                    _RedirectURL = Globals.NavigateURL(Convert.ToInt32(setting));
                }
                else
                {
                
                if (Convert.ToInt32(setting) <= 0)
                {
                    if (Request.QueryString["returnurl"] != null)
                    {
                        //return to the url passed to register
                        _RedirectURL = HttpUtility.UrlDecode(Request.QueryString["returnurl"]);

                        //clean the return url to avoid possible XSS attack.
                        _RedirectURL = UrlUtils.ValidReturnUrl(_RedirectURL);

                        if (_RedirectURL.Contains("?returnurl"))
                        {
                            string baseURL = _RedirectURL.Substring(0,
                                _RedirectURL.IndexOf("?returnurl", StringComparison.Ordinal));
                            string returnURL =
                                _RedirectURL.Substring(_RedirectURL.IndexOf("?returnurl", StringComparison.Ordinal) + 11);

                            _RedirectURL = string.Concat(baseURL, "?returnurl", HttpUtility.UrlEncode(returnURL));
                        }
                    }
                    if (String.IsNullOrEmpty(_RedirectURL))
                    {
                        //redirect to current page 
                        _RedirectURL = Globals.NavigateURL();
                    }
                }
                else //redirect to after registration page
                {
                    _RedirectURL = Globals.NavigateURL(Convert.ToInt32(setting));
                }
                }

                return _RedirectURL;
            }]]></body>
          </codeblock>
        </property>
        <property name="ShowEmailField">
          <declaration><![CDATA[private bool ShowEmailField]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="146" sc="7" el="148" ec="8">admin\Security\SendPassword.ascx.cs</location>
            <body hash="f4a92c33d15fb353eaf85ede2bd50104"><![CDATA[{
			    return MembershipProviderConfig.RequiresUniqueEmail || UsernameDisabled;
		    }]]></body>
          </codeblock>
        </property>
        <property name="UseCaptcha">
          <declaration><![CDATA[protected bool UseCaptcha]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="129" sc="13" el="132" ec="14">admin\Security\SendPassword.ascx.cs</location>
            <body hash="9bbdea60b0a3aceaa32ae028dd46f17a"><![CDATA[{
                var setting = GetSetting(PortalId, "Security_CaptchaRetrivePassword");
                return Convert.ToBoolean(setting);
            }]]></body>
          </codeblock>
        </property>
        <property name="UsernameDisabled">
          <declaration><![CDATA[protected bool UsernameDisabled]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="138" sc="7" el="140" ec="8">admin\Security\SendPassword.ascx.cs</location>
            <body hash="c49cace2ea4ed406a83db0d889e7c5fa"><![CDATA[{
				return PortalController.GetPortalSettingAsBoolean("Registration_UseEmailAsUserName", PortalId, false);
		    }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="DotNetNuke.Modules.Admin.SkinObjects">
    <class name="SkinObjectEditor">
      <declaration><![CDATA[public class SkinObjectEditor : PackageEditorBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public SkinObjectEditor()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="BindSkinObject">
          <declaration><![CDATA[private void BindSkinObject()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="44" sc="9" el="58" ec="10">DesktopModules\Admin\Extensions\Editors\SkinObjectEditor.ascx.cs</location>
            <body hash="df455ab3434aaf7884383035be4e5bd5"><![CDATA[{
            SkinControlInfo skinControl = SkinControlController.GetSkinControlByPackageID(PackageID);
            if (!ModuleContext.PortalSettings.ActiveTab.IsSuperTab)
            {
                skinObjectFormReadOnly.DataSource = skinControl;
                skinObjectFormReadOnly.DataBind();
                helpPanel.Visible = false;
            }
            if (skinControl != null && ModuleContext.PortalSettings.ActiveTab.IsSuperTab)
            {
                skinObjectForm.DataSource = skinControl;
                skinObjectForm.DataBind();
                helpPanel.Visible = true;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="61" sc="9" el="64" ec="10">DesktopModules\Admin\Extensions\Editors\SkinObjectEditor.ascx.cs</location>
            <body hash="3a1ca6b2b006653b21ebbb019da70874"><![CDATA[{
            base.OnLoad(e);
            BindSkinObject();
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdatePackage">
          <declaration><![CDATA[public override void UpdatePackage()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="67" sc="9" el="76" ec="10">DesktopModules\Admin\Extensions\Editors\SkinObjectEditor.ascx.cs</location>
            <body hash="429a94c76f1906d38f14fe5aaf3497a2"><![CDATA[{
            if (skinObjectForm.IsValid)
            {
                var skinControl = skinObjectForm.DataSource as SkinControlInfo;
                if (skinControl != null)
                {
                    SkinControlController.SaveSkinControl(skinControl);
                }
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="controlKey">
          <declaration><![CDATA[protected DnnFormTextBoxItem controlKey;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="controlKeyReadOnly">
          <declaration><![CDATA[protected DnnFormLiteralItem controlKeyReadOnly;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="controlSrc">
          <declaration><![CDATA[protected DnnFormTextBoxItem controlSrc;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="controlSrcReadOnly">
          <declaration><![CDATA[protected DnnFormLiteralItem controlSrcReadOnly;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="helpPanel">
          <declaration><![CDATA[protected HtmlGenericControl helpPanel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblHelp">
          <declaration><![CDATA[protected Label lblHelp;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="moduleSettingsHead">
          <declaration><![CDATA[protected HtmlGenericControl moduleSettingsHead;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="skinObjectForm">
          <declaration><![CDATA[protected DnnFormEditor skinObjectForm;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="skinObjectFormReadOnly">
          <declaration><![CDATA[protected DnnFormEditor skinObjectFormReadOnly;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="supportsPartialRendering">
          <declaration><![CDATA[protected DnnFormToggleButtonItem supportsPartialRendering;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="supportsPartialRenderingReadOnly">
          <declaration><![CDATA[protected DnnFormLiteralItem supportsPartialRenderingReadOnly;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="EditorID">
          <declaration><![CDATA[protected override string EditorID]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="38" sc="13" el="40" ec="14">DesktopModules\Admin\Extensions\Editors\SkinObjectEditor.ascx.cs</location>
            <body hash="bdcc43caba70786a6f6e47bdda715fe3"><![CDATA[{
                return "SkinObjectEditor";
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="DotNetNuke.Modules.Admin.Tabs">
    <class name="Export">
      <declaration><![CDATA[public class Export : PortalModuleBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public Export()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="OnExportClick">
          <declaration><![CDATA[protected void OnExportClick(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="117" sc="9" el="165" ec="10">admin\Tabs\Export.ascx.cs</location>
            <body hash="3a69a2b57d9dab50b48843ba2358acf4"><![CDATA[{
            try
            {
                if (!Page.IsValid)
                {
                    return;
                }

                if (cboFolders.SelectedItem != null)
                {
                    var folder = FolderManager.Instance.GetFolder(cboFolders.SelectedItemValueAsInt);
                    if (folder != null)
                    {
                        var filename = folder.FolderPath + txtFile.Text + ".page.template";
                        filename = filename.Replace("/", "\\");

                        var xmlTemplate = new XmlDocument();
                        XmlNode nodePortal = xmlTemplate.AppendChild(xmlTemplate.CreateElement("portal"));
                        if (nodePortal.Attributes != null)
                        {
                            nodePortal.Attributes.Append(XmlUtils.CreateAttribute(xmlTemplate, "version", "3.0"));
                        }

                        //Add template description
                        XmlElement node = xmlTemplate.CreateElement("description");
                        node.InnerXml = Server.HtmlEncode(txtDescription.Text);
                        nodePortal.AppendChild(node);

                        //Serialize tabs
                        XmlNode nodeTabs = nodePortal.AppendChild(xmlTemplate.CreateElement("tabs"));
                        SerializeTab(xmlTemplate, nodeTabs);

                        UI.Skins.Skin.AddModuleMessage(this, "", string.Format(Localization.GetString("ExportedMessage", LocalResourceFile), filename), ModuleMessage.ModuleMessageType.BlueInfo);

                        //add file to Files table
						using (var fileContent = new MemoryStream(Encoding.UTF8.GetBytes(xmlTemplate.OuterXml)))
						{
							Services.FileSystem.FileManager.Instance.AddFile(folder, txtFile.Text + ".page.template", fileContent, true, true, "application/octet-stream");
						}
						
                    }
                }
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }

        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="81" sc="9" el="88" ec="10">admin\Tabs\Export.ascx.cs</location>
            <body hash="c39267356422cb3fac22d17a76f1f896"><![CDATA[{
            base.OnInit(e);

            if (!TabPermissionController.CanExportPage())
            {
                Response.Redirect(Globals.AccessDeniedURL(), true);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="91" sc="9" el="114" ec="10">admin\Tabs\Export.ascx.cs</location>
            <body hash="a8f8138a0318c597dc00a4f1047adc67"><![CDATA[{
            base.OnLoad(e);

            cmdExport.Click += OnExportClick;

            try
            {
                if (Page.IsPostBack) return;
                cmdCancel.NavigateUrl = Globals.NavigateURL();
                var folders = FolderManager.Instance.GetFolders(UserInfo, "ADD");
                cboFolders.Services.Parameters.Add("permission", "ADD");
                var templateFolder = folders.SingleOrDefault(f => f.FolderPath == "Templates/");
                if (templateFolder != null) cboFolders.SelectedFolder = templateFolder;
                
                if (Tab != null)
                {
                    txtFile.Text = Globals.CleanName(Tab.TabName);
                }
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="SerializeTab">
          <declaration><![CDATA[private void SerializeTab(XmlDocument xmlTemplate, XmlNode nodeTabs)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="72" sc="9" el="76" ec="10">admin\Tabs\Export.ascx.cs</location>
            <body hash="1bb7820dddc844537950929d62a5547f"><![CDATA[{
            var xmlTab = new XmlDocument();
            var nodeTab = TabController.SerializeTab(xmlTab, Tab, chkContent.Checked);
            nodeTabs.AppendChild(xmlTemplate.ImportNode(nodeTab, true));
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_tab">
          <declaration><![CDATA[private TabInfo _tab;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cboFolders">
          <declaration><![CDATA[protected DnnFolderDropDownList cboFolders;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkContent">
          <declaration><![CDATA[protected CheckBox chkContent;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdCancel">
          <declaration><![CDATA[protected HyperLink cmdCancel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdExport">
          <declaration><![CDATA[protected LinkButton cmdExport;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plContent">
          <declaration><![CDATA[protected LabelControl plContent;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plDescription">
          <declaration><![CDATA[protected LabelControl plDescription;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plFile">
          <declaration><![CDATA[protected LabelControl plFile;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plFolder">
          <declaration><![CDATA[protected LabelControl plFolder;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtDescription">
          <declaration><![CDATA[protected TextBox txtDescription;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtFile">
          <declaration><![CDATA[protected TextBox txtFile;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="valDescription">
          <declaration><![CDATA[protected RequiredFieldValidator valDescription;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="valFileName">
          <declaration><![CDATA[protected RequiredFieldValidator valFileName;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="Tab">
          <declaration><![CDATA[public TabInfo Tab]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="55" sc="13" el="61" ec="14">admin\Tabs\Export.ascx.cs</location>
            <body hash="02c80ece1eda13b490795ce4e9b5c9c3"><![CDATA[{
                if (_tab == null)
                {
                    _tab = TabController.Instance.GetTab(TabId, PortalId, false);
                }
                return _tab;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="Import">
      <declaration><![CDATA[public class Import : PortalModuleBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public Import()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="BindBeforeAfterTabControls">
          <declaration><![CDATA[private void BindBeforeAfterTabControls()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="65" sc="9" el="79" ec="10">admin\Tabs\Import.ascx.cs</location>
            <body hash="b00b27e4ab8bb63325f5aa230628e3a0"><![CDATA[{
            var noneSpecified = "<" + Localization.GetString("None_Specified") + ">";
            cboParentTab.UndefinedItem = new ListItem(noneSpecified, string.Empty);
            var parentTab = cboParentTab.SelectedPage;

            List<TabInfo> listTabs = parentTab != null ? TabController.Instance.GetTabsByPortal(parentTab.PortalID).WithParentId(parentTab.TabID) : TabController.Instance.GetTabsByPortal(PortalId).WithParentId(Null.NullInteger);
            listTabs = TabController.GetPortalTabs(listTabs, Null.NullInteger, true, noneSpecified, false, false, false, false, true);
            cboPositionTab.DataSource = listTabs;
            cboPositionTab.DataBind();
            rbInsertPosition.Items.Clear();
            rbInsertPosition.Items.Add(new ListItem(Localization.GetString("InsertBefore", LocalResourceFile), "Before"));
            rbInsertPosition.Items.Add(new ListItem(Localization.GetString("InsertAfter", LocalResourceFile), "After"));
            rbInsertPosition.Items.Add(new ListItem(Localization.GetString("InsertAtEnd", LocalResourceFile), "AtEnd"));
            rbInsertPosition.SelectedValue = "After";
        }]]></body>
          </codeblock>
        </method>
        <method name="BindFiles">
          <declaration><![CDATA[private void BindFiles()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="82" sc="9" el="100" ec="10">admin\Tabs\Import.ascx.cs</location>
            <body hash="8d4f6ffde9f9faf2347e705e4992e309"><![CDATA[{
            cboTemplate.Items.Clear();
            if (cboFolders.SelectedItem != null)
            {
                var folder = FolderManager.Instance.GetFolder(cboFolders.SelectedItemValueAsInt);
                if (folder != null)
                {
                    //var files = Directory.GetFiles(PortalSettings.HomeDirectoryMapPath + folder.FolderPath, "*.page.template");
                    var files = Globals.GetFileList(PortalId, "page.template", false, folder.FolderPath);
                    foreach (FileItem file in files)
                    {
                        cboTemplate.AddItem(file.Text.Replace(".page.template", ""), file.Value);
                    }
                    cboTemplate.InsertItem(0, "<" + Localization.GetString("None_Specified") + ">", "None_Specified");
                    cboTemplate.SelectedIndex = 0;
                }

            }
        }]]></body>
          </codeblock>
        </method>
        <method name="BindTabControls">
          <declaration><![CDATA[private void BindTabControls()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="103" sc="9" el="112" ec="10">admin\Tabs\Import.ascx.cs</location>
            <body hash="32dac8623f9ac576b406a0ff74be7d7c"><![CDATA[{
            BindBeforeAfterTabControls();
            divInsertPositionRow.Visible = cboPositionTab.Items.Count > 0;
            cboParentTab.AutoPostBack = true;
            if (cboPositionTab.FindItemByValue(TabId.ToString(CultureInfo.InvariantCulture)) != null)
            {
                cboPositionTab.ClearSelection();
                cboPositionTab.FindItemByValue(TabId.ToString(CultureInfo.InvariantCulture)).Selected = true;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="DisplayNewRows">
          <declaration><![CDATA[private void DisplayNewRows()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="115" sc="9" el="120" ec="10">admin\Tabs\Import.ascx.cs</location>
            <body hash="b7707de8ea699fa20ada218af6146ee3"><![CDATA[{
            divTabName.Visible = (optMode.SelectedIndex == 0);
            divParentTab.Visible = (optMode.SelectedIndex == 0);
            divInsertPositionRow.Visible = (optMode.SelectedIndex == 0);
            divInsertPositionRow.Visible = (optMode.SelectedIndex == 0);
        }]]></body>
          </codeblock>
        </method>
        <method name="OnFolderIndexChanged">
          <declaration><![CDATA[protected void OnFolderIndexChanged(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="164" sc="9" el="166" ec="10">admin\Tabs\Import.ascx.cs</location>
            <body hash="4246d55d82d7b0d3cac30cefd82c9480"><![CDATA[{
            BindFiles();
        }]]></body>
          </codeblock>
        </method>
        <method name="OnImportClick">
          <declaration><![CDATA[protected void OnImportClick(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="169" sc="9" el="296" ec="10">admin\Tabs\Import.ascx.cs</location>
            <body hash="ccf7eba5085eff7f66e7f77a5a60ae80"><![CDATA[{
            try
            {
                if (cboTemplate.SelectedItem == null || cboTemplate.SelectedValue == "None_Specified")
                {
                    UI.Skins.Skin.AddModuleMessage(this, Localization.GetString("SpecifyFile", LocalResourceFile), ModuleMessage.ModuleMessageType.RedError);
                    return;
                }
                if (optMode.SelectedIndex == -1)
                {
                    UI.Skins.Skin.AddModuleMessage(this, Localization.GetString("SpecifyMode", LocalResourceFile), ModuleMessage.ModuleMessageType.RedError);
                    return;
                }
                if (cboFolders.SelectedItem == null) return;
                var selectedFolder = FolderManager.Instance.GetFolder(cboFolders.SelectedItemValueAsInt);
                if (selectedFolder == null) return;

                var selectedFile = Services.FileSystem.FileManager.Instance.GetFile(Convert.ToInt32(cboTemplate.SelectedValue));
                var xmlDoc = new XmlDocument();
                using (var content = Services.FileSystem.FileManager.Instance.GetFileContent(selectedFile))
                {
                    xmlDoc.Load(content);
                }

                var tabNodes = new List<XmlNode>();
                var selectSingleNode = xmlDoc.SelectSingleNode("//portal/tabs");
                if (selectSingleNode != null)
                {
                    tabNodes.AddRange(selectSingleNode.ChildNodes.Cast<XmlNode>());
                }
                if (tabNodes.Count == 0)
                {
                    UI.Skins.Skin.AddModuleMessage(this, Localization.GetString("NoTabsInTemplate", LocalResourceFile), ModuleMessage.ModuleMessageType.RedError);
                    return;
                }

                TabInfo objTab;
                if (optMode.SelectedValue == "ADD")
                {
                    if (string.IsNullOrEmpty(txtTabName.Text))
                    {
                        UI.Skins.Skin.AddModuleMessage(this, Localization.GetString("SpecifyName", LocalResourceFile), ModuleMessage.ModuleMessageType.RedError);
                        return;
                    }

                    //New Tab
                    objTab = new TabInfo { PortalID = PortalId, TabName = txtTabName.Text, IsVisible = true };
                    var parentId = cboParentTab.SelectedItemValueAsInt;
                    if (parentId != Null.NullInteger)
                    {
                        objTab.ParentId = parentId;
                    }
                    objTab.TabPath = Globals.GenerateTabPath(objTab.ParentId, objTab.TabName);
                    var tabId = TabController.GetTabByTabPath(objTab.PortalID, objTab.TabPath, Null.NullString);

                    //Check if tab exists
                    if (tabId != Null.NullInteger)
                    {
                        TabInfo existingTab = TabController.Instance.GetTab(tabId, PortalId, false);
                        if (existingTab != null && existingTab.IsDeleted)
                        {
                            UI.Skins.Skin.AddModuleMessage(this, Localization.GetString("TabRecycled", LocalResourceFile), ModuleMessage.ModuleMessageType.YellowWarning);
                        }
                        else
                        {
                            UI.Skins.Skin.AddModuleMessage(this, Localization.GetString("TabExists", LocalResourceFile), ModuleMessage.ModuleMessageType.RedError);
                        }
                        return;
                    }

                    var positionTabId = Int32.Parse(cboPositionTab.SelectedItem.Value);

                    if (rbInsertPosition.SelectedValue == "After" && positionTabId > Null.NullInteger)
                    {
                        objTab.TabID = TabController.Instance.AddTabAfter(objTab, positionTabId);
                    }
                    else if (rbInsertPosition.SelectedValue == "Before" && positionTabId > Null.NullInteger)
                    {
                        objTab.TabID = TabController.Instance.AddTabBefore(objTab, positionTabId);
                    }
                    else
                    {
                        objTab.TabID = TabController.Instance.AddTab(objTab);
                    }
                    EventLogController.Instance.AddLog(objTab, PortalSettings, UserId, "", EventLogController.EventLogType.TAB_CREATED);

                    objTab = TabController.DeserializeTab(tabNodes[0], objTab, PortalId, PortalTemplateModuleAction.Replace);

                    var exceptions = string.Empty;
                    //Create second tabs onwards. For firs tab, we like to use tab details from text box, for rest it'll come from template
                    for (var tab = 1; tab < tabNodes.Count; tab++)
                    {
                        try
                        {
                            TabController.DeserializeTab(tabNodes[tab], null, PortalId, PortalTemplateModuleAction.Replace);
                        }
                        catch (Exception ex)
                        {
                            Exceptions.LogException(ex);
                            exceptions += string.Format("Template Tab # {0}. Error {1}<br/>", tab + 1, ex.Message);
                        }
                    }
                    if (!string.IsNullOrEmpty(exceptions))
                    {
                        UI.Skins.Skin.AddModuleMessage(this, exceptions, ModuleMessage.ModuleMessageType.RedError);
                        return;
                    }
                }
                else
                {
                    //Replace Existing Tab
                    objTab = TabController.DeserializeTab(tabNodes[0], Tab, PortalId, PortalTemplateModuleAction.Replace);
                }
                switch (optRedirect.SelectedValue)
                {
                    case "VIEW":
                        Response.Redirect(Globals.NavigateURL(objTab.TabID), true);
                        break;
                    default:
                        Response.Redirect(Globals.NavigateURL(objTab.TabID, "Tab", "action=edit"), true);
                        break;
                }
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="123" sc="9" el="130" ec="10">admin\Tabs\Import.ascx.cs</location>
            <body hash="5a4f94eaabf003dbf120901e7b6b550e"><![CDATA[{
            base.OnInit(e);

            if (!TabPermissionController.CanImportPage())
            {
                Response.Redirect(Globals.AccessDeniedURL(), true);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="133" sc="9" el="161" ec="10">admin\Tabs\Import.ascx.cs</location>
            <body hash="59258e4872a9715a418fd88cbe148551"><![CDATA[{
            base.OnLoad(e);

            cboFolders.SelectionChanged += OnFolderIndexChanged;
            cmdImport.Click += OnImportClick;
            cboParentTab.SelectionChanged += OnParentTabIndexChanged;
            cboTemplate.SelectedIndexChanged += OnTemplateIndexChanged;
            optMode.SelectedIndexChanged += OptModeSelectedIndexChanged;

            try
            {
                if (!Page.IsPostBack)
                {
                    cmdCancel.NavigateUrl = Globals.NavigateURL();
                    cboFolders.UndefinedItem = new ListItem("<" + Localization.GetString("None_Specified") + ">", string.Empty);
                    var folders = FolderManager.Instance.GetFolders(UserInfo, "BROWSE, ADD");
                    var templateFolder = folders.SingleOrDefault(f => f.FolderPath == "Templates/");
                    if (templateFolder != null) cboFolders.SelectedFolder = templateFolder;

                    BindFiles();
                    BindTabControls();
                    DisplayNewRows();
                }
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnParentTabIndexChanged">
          <declaration><![CDATA[protected void OnParentTabIndexChanged(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="299" sc="9" el="301" ec="10">admin\Tabs\Import.ascx.cs</location>
            <body hash="f93f1d83c1e50eacd8eeb92a8e412d84"><![CDATA[{
            BindBeforeAfterTabControls();
        }]]></body>
          </codeblock>
        </method>
        <method name="OnTemplateIndexChanged">
          <declaration><![CDATA[protected void OnTemplateIndexChanged(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="304" sc="9" el="336" ec="10">admin\Tabs\Import.ascx.cs</location>
            <body hash="1dff0d142dc492c694462a65b1234f0a"><![CDATA[{
            try
            {
                if (cboTemplate.SelectedIndex > 0 && cboFolders.SelectedItem != null)
                {
                    var selectedFile = Services.FileSystem.FileManager.Instance.GetFile(Convert.ToInt32(cboTemplate.SelectedValue));
                    var xmldoc = new XmlDocument();
                    using (var fileContent = Services.FileSystem.FileManager.Instance.GetFileContent(selectedFile))
                    {
                        xmldoc.Load(fileContent);
                        var node = xmldoc.SelectSingleNode("//portal/description");
                        if (node != null && !String.IsNullOrEmpty(node.InnerXml))
                        {
                            lblTemplateDescription.Visible = true;
                            lblTemplateDescription.Text = Server.HtmlDecode(node.InnerXml);
                            txtTabName.Text = cboTemplate.SelectedItem.Text;
                        }
                        else
                        {
                            lblTemplateDescription.Visible = false;
                        }
                    }
                }
                else
                {
                    lblTemplateDescription.Visible = false;
                }
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OptModeSelectedIndexChanged">
          <declaration><![CDATA[protected void OptModeSelectedIndexChanged(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="339" sc="9" el="341" ec="10">admin\Tabs\Import.ascx.cs</location>
            <body hash="5b0ad6b723a2fe980110bc38141f3bd2"><![CDATA[{
            DisplayNewRows();
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_tab">
          <declaration><![CDATA[private TabInfo _tab;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cboFolders">
          <declaration><![CDATA[protected DnnFolderDropDownList cboFolders;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cboParentTab">
          <declaration><![CDATA[protected DnnPageDropDownList cboParentTab;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cboPositionTab">
          <declaration><![CDATA[protected DnnComboBox cboPositionTab;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cboTemplate">
          <declaration><![CDATA[protected DnnComboBox cboTemplate;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdCancel">
          <declaration><![CDATA[protected HyperLink cmdCancel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdImport">
          <declaration><![CDATA[protected LinkButton cmdImport;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="divInsertPositionRow">
          <declaration><![CDATA[protected HtmlGenericControl divInsertPositionRow;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="divParentTab">
          <declaration><![CDATA[protected HtmlGenericControl divParentTab;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="divTabName">
          <declaration><![CDATA[protected HtmlGenericControl divTabName;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblTemplateDescription">
          <declaration><![CDATA[protected Label lblTemplateDescription;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="optMode">
          <declaration><![CDATA[protected RadioButtonList optMode;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="optRedirect">
          <declaration><![CDATA[protected RadioButtonList optRedirect;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plFolder">
          <declaration><![CDATA[protected LabelControl plFolder;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plInsertPosition">
          <declaration><![CDATA[protected LabelControl plInsertPosition;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plMode">
          <declaration><![CDATA[protected LabelControl plMode;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plParentTab">
          <declaration><![CDATA[protected LabelControl plParentTab;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plRedirect">
          <declaration><![CDATA[protected LabelControl plRedirect;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plTabName">
          <declaration><![CDATA[protected LabelControl plTabName;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plTemplate">
          <declaration><![CDATA[protected LabelControl plTemplate;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="rbInsertPosition">
          <declaration><![CDATA[protected RadioButtonList rbInsertPosition;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtTabName">
          <declaration><![CDATA[protected TextBox txtTabName;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="valTemplate">
          <declaration><![CDATA[protected RequiredFieldValidator valTemplate;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="Tab">
          <declaration><![CDATA[public TabInfo Tab]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="55" sc="13" el="61" ec="14">admin\Tabs\Import.ascx.cs</location>
            <body hash="02c80ece1eda13b490795ce4e9b5c9c3"><![CDATA[{
                if (_tab == null)
                {
                    _tab = TabController.Instance.GetTab(TabId, PortalId, false);
                }
                return _tab;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="DotNetNuke.Modules.Admin.Users">
    <class name="EditProfileDefinition">
      <declaration><![CDATA[public class EditProfileDefinition : PortalModuleBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private string ResourceFile = "~/DesktopModules/Admin/Security/App_LocalResources/Profile.ascx";]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="60" sc="9" el="61" ec="51">DesktopModules\Admin\Security\EditProfileDefinition.ascx.cs</location>
            <body hash="6a7eab6a05a34d14de217dc426d971da"><![CDATA[private string ResourceFile = "~/DesktopModules/Admin/Security/App_LocalResources/Profile.ascx";
        private string _Message = Null.NullString;]]></body>
          </codeblock>
        </constructor>
        <constructor name=".cctor">
          <declaration><![CDATA[static EditProfileDefinition()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="57" sc="6" el="57" ec="108">DesktopModules\Admin\Security\EditProfileDefinition.ascx.cs</location>
            <body hash="6b0c486a1b6fd15cac8aa038eb54acc0"><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof (EditProfileDefinition))]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="BindLanguages">
          <declaration><![CDATA[private void BindLanguages()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="186" sc="9" el="192" ec="10">DesktopModules\Admin\Security\EditProfileDefinition.ascx.cs</location>
            <body hash="04469b7aed20d2712d359b9bcb5be55d"><![CDATA[{
            txtPropertyName.Text = Localization.GetString("ProfileProperties_" + PropertyDefinition.PropertyName, ResourceFile, cboLocales.SelectedValue);
            txtPropertyHelp.Text = Localization.GetString("ProfileProperties_" + PropertyDefinition.PropertyName + ".Help", ResourceFile, cboLocales.SelectedValue);
            txtPropertyRequired.Text = Localization.GetString("ProfileProperties_" + PropertyDefinition.PropertyName + ".Required", ResourceFile, cboLocales.SelectedValue);
            txtPropertyValidation.Text = Localization.GetString("ProfileProperties_" + PropertyDefinition.PropertyName + ".Validation", ResourceFile, cboLocales.SelectedValue);
            txtCategoryName.Text = Localization.GetString("ProfileProperties_" + PropertyDefinition.PropertyCategory + ".Header", ResourceFile, cboLocales.SelectedValue);
        }]]></body>
          </codeblock>
        </method>
        <method name="BindList">
          <declaration><![CDATA[private void BindList()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="195" sc="9" el="204" ec="10">DesktopModules\Admin\Security\EditProfileDefinition.ascx.cs</location>
            <body hash="24194d33f2e3d2a939e8e01df1e1ce3e"><![CDATA[{
            if (IsList)
            {
                lstEntries.Mode = "ListEntries";
                lstEntries.SelectedKey = PropertyDefinition.PropertyName;
                lstEntries.ListPortalID = PortalController.GetEffectivePortalId(UsersPortalId);
                lstEntries.ShowDelete = false;
                lstEntries.DataBind();
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="cboLocales_SelectedIndexChanged">
          <declaration><![CDATA[protected void cboLocales_SelectedIndexChanged(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="450" sc="9" el="452" ec="10">DesktopModules\Admin\Security\EditProfileDefinition.ascx.cs</location>
            <body hash="941d31e21d67ec746ab5209fa50ac83a"><![CDATA[{
            BindLanguages();
        }]]></body>
          </codeblock>
        </method>
        <method name="GetResourceFile">
          <declaration><![CDATA[private string GetResourceFile(string type, string language)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="207" sc="9" el="222" ec="10">DesktopModules\Admin\Security\EditProfileDefinition.ascx.cs</location>
            <body hash="f8a204b74af63104b771ac9a4c436da4"><![CDATA[{
            string resourcefilename = ResourceFile;
            if (language != Localization.SystemLocale)
            {
                resourcefilename = resourcefilename + "." + language;
            }
            if (type == "Portal")
            {
                resourcefilename = resourcefilename + "." + "Portal-" + PortalId;
            }
            else if (type == "Host")
            {
                resourcefilename = resourcefilename + "." + "Host";
            }
            return HttpContext.Current.Server.MapPath(resourcefilename + ".resx");
        }]]></body>
          </codeblock>
        </method>
        <method name="GetText">
          <declaration><![CDATA[public string GetText(string type)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="321" sc="9" el="346" ec="10">DesktopModules\Admin\Security\EditProfileDefinition.ascx.cs</location>
            <body hash="634e0bc05709e8cc6b415615b3c68dde"><![CDATA[{
            string text = Null.NullString;
            if (IsAddMode && Wizard.ActiveStepIndex == 0)
            {
                if (type == "Title")
                {
                    text = Localization.GetString(Wizard.ActiveStep.Title + "_Add.Title", LocalResourceFile);
                }
                else if (type == "Help")
                {
                    text = Localization.GetString(Wizard.ActiveStep.Title + "_Add.Help", LocalResourceFile);
                }
            }
            else
            {
                if (type == "Title")
                {
                    text = Localization.GetString(Wizard.ActiveStep.Title + ".Title", LocalResourceFile);
                }
                else if (type == "Help")
                {
                    text = Localization.GetString(Wizard.ActiveStep.Title + ".Help", LocalResourceFile);
                }
            }
            return text;
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="358" sc="9" el="380" ec="10">DesktopModules\Admin\Security\EditProfileDefinition.ascx.cs</location>
            <body hash="b10b4c3d81715cc5d1f73fefbf081a5b"><![CDATA[{
            base.OnInit(e);

            //Set the List Entries Control Properties
            lstEntries.ID = "ListEntries";

            //Get Property Definition Id from Querystring
            if (PropertyDefinitionID == Null.NullInteger)
            {
                if ((Request.QueryString["PropertyDefinitionId"] != null))
                {
                    PropertyDefinitionID = Int32.Parse(Request.QueryString["PropertyDefinitionId"]);
                }
            }
            if (IsAddMode)
            {
                ModuleConfiguration.ModuleTitle = Localization.GetString("AddProperty", LocalResourceFile);
            }
            else
            {
                ModuleConfiguration.ModuleTitle = Localization.GetString("EditProperty", LocalResourceFile);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="388" sc="9" el="447" ec="10">DesktopModules\Admin\Security\EditProfileDefinition.ascx.cs</location>
            <body hash="c945c7c4734b477a26f19183206e07aa"><![CDATA[{
            base.OnLoad(e);

            cboLocales.SelectedIndexChanged += cboLocales_SelectedIndexChanged;
            Wizard.ActiveStepChanged += Wizard_ActiveStepChanged;
            Wizard.CancelButtonClick += Wizard_CancelButtonClick;
            Wizard.FinishButtonClick += Wizard_FinishButtonClick;
            Wizard.NextButtonClick += Wizard_NextButtonClick;

            try
            {
                if (!Page.IsPostBack)
                {
                    //Localization.LoadCultureDropDownList(cboLocales, CultureDropDownTypes.NativeName, ((PageBase) Page).PageCulture.Name);
                    IEnumerable<ListItem> cultureList = Localization.LoadCultureInListItems(CultureDropDownTypes.NativeName, ((PageBase)Page).PageCulture.Name, "", false);
                    //If the drop down list already has items, clear the list
                    if (cboLocales.Items.Count > 0)
                    {
                        cboLocales.Items.Clear();
                    }

                    foreach (var listItem in cultureList)
                    {
                        cboLocales.AddItem(listItem.Text, listItem.Value);
                    }

                    var selectedItem = cboLocales.FindItemByValue(((PageBase)Page).PageCulture.Name);
                    if (selectedItem != null)
                    {
                        selectedItem.Selected = true;
                    }
                    

                    if (cboLocales.SelectedItem != null)
                    {
                        lblLocales.Text = cboLocales.SelectedItem.Text;
                    }

                    cboLocales.Visible = cboLocales.Items.Count != 1;
                    lblLocales.Visible = cboLocales.Items.Count == 1;
                }
				
                //Bind Property Definition to Data Store
                Properties.LocalResourceFile = LocalResourceFile;
                Properties.DataSource = PropertyDefinition;
                Properties.DataBind();

                foreach (FieldEditorControl editor in Properties.Fields)
                {
                    if (editor.DataField == "Required")
                    {
                        editor.Visible = UsersPortalId != Null.NullInteger;
                    }
                }
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="SaveLocalizedKeys">
          <declaration><![CDATA[private void SaveLocalizedKeys()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="245" sc="9" el="314" ec="10">DesktopModules\Admin\Security\EditProfileDefinition.ascx.cs</location>
            <body hash="178cf9c14c6014b886c43982496165ce"><![CDATA[{
            var portalResources = new XmlDocument();
            var defaultResources = new XmlDocument();
            XmlNode parent;
            string filename;
            try
            {
                defaultResources.Load(GetResourceFile("", Localization.SystemLocale));
                if (IsHostMenu)
                {
                    filename = GetResourceFile("Host", cboLocales.SelectedValue);
                }
                else
                {
                    filename = GetResourceFile("Portal", cboLocales.SelectedValue);
                }
                if (File.Exists(filename))
                {
                    portalResources.Load(filename);
                }
                else
                {
                    portalResources.Load(GetResourceFile("", Localization.SystemLocale));
                }
                UpdateResourceFileNode(portalResources, "ProfileProperties_" + PropertyDefinition.PropertyName + ".Text", txtPropertyName.Text);
                UpdateResourceFileNode(portalResources, "ProfileProperties_" + PropertyDefinition.PropertyName + ".Help", txtPropertyHelp.Text);
                UpdateResourceFileNode(portalResources, "ProfileProperties_" + PropertyDefinition.PropertyName + ".Required", txtPropertyRequired.Text);
                UpdateResourceFileNode(portalResources, "ProfileProperties_" + PropertyDefinition.PropertyName + ".Validation", txtPropertyValidation.Text);
                UpdateResourceFileNode(portalResources, "ProfileProperties_" + PropertyDefinition.PropertyCategory + ".Header", txtCategoryName.Text);

                //remove unmodified keys
                foreach (XmlNode node in portalResources.SelectNodes("//root/data"))
                {
                    XmlNode defaultNode = defaultResources.SelectSingleNode("//root/data[@name='" + node.Attributes["name"].Value + "']");
                    if (defaultNode != null && defaultNode.InnerXml == node.InnerXml)
                    {
                        parent = node.ParentNode;
                        parent.RemoveChild(node);
                    }
                }

                //remove duplicate keys
                foreach (XmlNode node in portalResources.SelectNodes("//root/data"))
                {
                    if (portalResources.SelectNodes("//root/data[@name='" + node.Attributes["name"].Value + "']").Count > 1)
                    {
                        parent = node.ParentNode;
                        parent.RemoveChild(node);
                    }
                }
                if (portalResources.SelectNodes("//root/data").Count > 0)
                {
                    //there's something to save
                    portalResources.Save(filename);
                }
                else
                {
                    //nothing to be saved, if file exists delete
                    if (File.Exists(filename))
                    {
                        File.Delete(filename);
                    }
                }
            }
            catch (Exception exc) //Module failed to load
            {
                Logger.Error(exc);
                UI.Skins.Skin.AddModuleMessage(this, Localization.GetString("Save.ErrorMessage", LocalResourceFile), ModuleMessage.ModuleMessageType.YellowWarning);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateResourceFileNode">
          <declaration><![CDATA[private void UpdateResourceFileNode(XmlDocument xmlDoc, string key, string text)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="167" sc="9" el="183" ec="10">DesktopModules\Admin\Security\EditProfileDefinition.ascx.cs</location>
            <body hash="04348418baf85868a0ed10d78692dde3"><![CDATA[{
            XmlNode node;
            XmlNode nodeData;
            XmlAttribute attr;
            node = xmlDoc.SelectSingleNode("//root/data[@name='" + key + "']/value");
            if (node == null)
            {
				//missing entry
                nodeData = xmlDoc.CreateElement("data");
                attr = xmlDoc.CreateAttribute("name");
                attr.Value = key;
                nodeData.Attributes.Append(attr);
                xmlDoc.SelectSingleNode("//root").AppendChild(nodeData);
                node = nodeData.AppendChild(xmlDoc.CreateElement("value"));
            }
            node.InnerXml = Server.HtmlEncode(text);
        }]]></body>
          </codeblock>
        </method>
        <method name="ValidateProperty">
          <declaration><![CDATA[private bool ValidateProperty(ProfilePropertyDefinition definition)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="225" sc="9" el="242" ec="10">DesktopModules\Admin\Security\EditProfileDefinition.ascx.cs</location>
            <body hash="9b202f34e2fa15f0d76147ac9bd65cd8"><![CDATA[{
            bool isValid = true;

            var objListController = new ListController();
            string strDataType = objListController.GetListEntryInfo("DataType", definition.DataType).Value;

            switch (strDataType)
            {
                case "Text":
                    if (definition.Required && definition.Length == 0)
                    {
                        _Message = "RequiredTextBox";
                        isValid = Null.NullBoolean;
                    }
                    break;
            }
            return isValid;
        }]]></body>
          </codeblock>
        </method>
        <method name="Wizard_ActiveStepChanged">
          <declaration><![CDATA[protected void Wizard_ActiveStepChanged(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="462" sc="9" el="480" ec="10">DesktopModules\Admin\Security\EditProfileDefinition.ascx.cs</location>
            <body hash="60d436d6f9c6b9e88870061c4a948bce"><![CDATA[{
            switch (Wizard.ActiveStepIndex)
            {
                case 1: //Lists
                    if (!IsList)
                    {
                        Wizard.ActiveStepIndex = 2;
                    }
                    else
                    {
                        BindList();
                    }
                    break;
                case 2:
                    BindLanguages();
                    Wizard.DisplayCancelButton = false;
                    break;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="Wizard_CancelButtonClick">
          <declaration><![CDATA[protected void Wizard_CancelButtonClick(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="490" sc="9" el="500" ec="10">DesktopModules\Admin\Security\EditProfileDefinition.ascx.cs</location>
            <body hash="4d2d70003d0e88e337a27fba3f15a859"><![CDATA[{
            try
            {
				//Redirect to Definitions page
                Response.Redirect(Globals.NavigateURL(TabId), true);
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="Wizard_FinishButtonClick">
          <declaration><![CDATA[protected void Wizard_FinishButtonClick(object sender, WizardNavigationEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="510" sc="9" el="526" ec="10">DesktopModules\Admin\Security\EditProfileDefinition.ascx.cs</location>
            <body hash="fda0feef55e3074ce5e4431e0156ee68"><![CDATA[{
            try
            {
                if(!Page.IsValid)
                {
                    return;
                }

                SaveLocalizedKeys();
				//Redirect to Definitions page
                Response.Redirect(Globals.NavigateURL(TabId), true);
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="Wizard_NextButtonClick">
          <declaration><![CDATA[protected void Wizard_NextButtonClick(object sender, WizardNavigationEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="537" sc="9" el="589" ec="10">DesktopModules\Admin\Security\EditProfileDefinition.ascx.cs</location>
            <body hash="b0fce723d6bb3c62cf9cedf31b9f03f5"><![CDATA[{
            if(!Page.IsValid)
            {
                return;
            }

            switch (e.CurrentStepIndex)
            {
                case 0: //Property Details
                    try
                    {
						//Check if Property Editor has been updated by user
                        if (Properties.IsDirty && Properties.IsValid)
                        {
							//Declare Definition and "retrieve" it from the Property Editor
                            ProfilePropertyDefinition propertyDefinition;
                            propertyDefinition = (ProfilePropertyDefinition) Properties.DataSource;
                            if (UsersPortalId == Null.NullInteger)
                            {
                                propertyDefinition.Required = false;
                            }
                            if (ValidateProperty(propertyDefinition))
                            {
                                if (PropertyDefinitionID == Null.NullInteger)
                                {
									//Add the Property Definition
                                    PropertyDefinitionID = ProfileController.AddPropertyDefinition(propertyDefinition);
                                    if (PropertyDefinitionID < Null.NullInteger)
                                    {
                                        UI.Skins.Skin.AddModuleMessage(this, Localization.GetString("DuplicateName", LocalResourceFile), ModuleMessage.ModuleMessageType.RedError);
                                        e.Cancel = true;
                                    }
                                }
                                else
                                {
									//Update the Property Definition
                                    ProfileController.UpdatePropertyDefinition(propertyDefinition);
                                }
                            }
                            else
                            {
                                UI.Skins.Skin.AddModuleMessage(this, Localization.GetString(_Message, LocalResourceFile), ModuleMessage.ModuleMessageType.RedError);
                                e.Cancel = true;
                            }
                        }
                    }
                    catch (Exception exc) //Module failed to load
                    {
                        Exceptions.ProcessModuleLoadException(this, exc);
                    }
                    break;
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_Message">
          <declaration><![CDATA[private string _Message = Null.NullString;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_PropertyDefinition">
          <declaration><![CDATA[private ProfilePropertyDefinition _PropertyDefinition;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cboLocales">
          <declaration><![CDATA[protected DnnComboBox cboLocales;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblLocales">
          <declaration><![CDATA[protected Label lblLocales;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Logger">
          <declaration><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof(EditProfileDefinition));]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lstEntries">
          <declaration><![CDATA[protected ListEntries lstEntries;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plCategoryName">
          <declaration><![CDATA[protected LabelControl plCategoryName;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plLocales">
          <declaration><![CDATA[protected LabelControl plLocales;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plPropertyHelp">
          <declaration><![CDATA[protected LabelControl plPropertyHelp;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plPropertyName">
          <declaration><![CDATA[protected LabelControl plPropertyName;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plPropertyRequired">
          <declaration><![CDATA[protected LabelControl plPropertyRequired;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plPropertyValidation">
          <declaration><![CDATA[protected LabelControl plPropertyValidation;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Properties">
          <declaration><![CDATA[protected PropertyEditorControl Properties;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ResourceFile">
          <declaration><![CDATA[private string ResourceFile = "~/DesktopModules/Admin/Security/App_LocalResources/Profile.ascx";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtCategoryName">
          <declaration><![CDATA[protected TextBox txtCategoryName;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtPropertyHelp">
          <declaration><![CDATA[protected TextBox txtPropertyHelp;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtPropertyName">
          <declaration><![CDATA[protected TextBox txtPropertyName;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtPropertyRequired">
          <declaration><![CDATA[protected TextBox txtPropertyRequired;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtPropertyValidation">
          <declaration><![CDATA[protected TextBox txtPropertyValidation;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="valPropertyName">
          <declaration><![CDATA[protected RequiredFieldValidator valPropertyName;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Wizard">
          <declaration><![CDATA[protected Wizard Wizard;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="wizIntroduction">
          <declaration><![CDATA[protected WizardStep wizIntroduction;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="wizLists">
          <declaration><![CDATA[protected WizardStep wizLists;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="wizLocalization">
          <declaration><![CDATA[protected WizardStep wizLocalization;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="IsAddMode">
          <declaration><![CDATA[protected bool IsAddMode]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="71" sc="13" el="73" ec="14">DesktopModules\Admin\Security\EditProfileDefinition.ascx.cs</location>
            <body hash="7c3a0a32980493fcee34703d26c873e6"><![CDATA[{
                return (PropertyDefinitionID == Null.NullInteger);
            }]]></body>
          </codeblock>
        </property>
        <property name="IsList">
          <declaration><![CDATA[protected bool IsList]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="79" sc="13" el="89" ec="14">DesktopModules\Admin\Security\EditProfileDefinition.ascx.cs</location>
            <body hash="384ef962bd6b5602b36b68429acb2b6c"><![CDATA[{
                bool _IsList = false;
                var objListController = new ListController();
                ListEntryInfo dataType = objListController.GetListEntryInfo("DataType", PropertyDefinition.DataType);

                if ((dataType != null) && (dataType.Value == "List"))
                {
                    _IsList = true;
                }
                return _IsList;
            }]]></body>
          </codeblock>
        </property>
        <property name="IsSuperUser">
          <declaration><![CDATA[protected bool IsSuperUser]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="100" sc="13" el="102" ec="14">DesktopModules\Admin\Security\EditProfileDefinition.ascx.cs</location>
            <body hash="804e83cca62dcf42b38c6c5ab3f88aa1"><![CDATA[{
            	return Globals.IsHostTab(PortalSettings.ActiveTab.TabID);
            }]]></body>
          </codeblock>
        </property>
        <property name="PropertyDefinition">
          <declaration><![CDATA[protected ProfilePropertyDefinition PropertyDefinition]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="108" sc="13" el="124" ec="14">DesktopModules\Admin\Security\EditProfileDefinition.ascx.cs</location>
            <body hash="83bd4c5940a8575bf0be35492aa13e40"><![CDATA[{
                if (_PropertyDefinition == null)
                {
                    if (IsAddMode)
                    {
						//Create New Property Definition
                        _PropertyDefinition = new ProfilePropertyDefinition();
                        _PropertyDefinition.PortalId = UsersPortalId;
                    }
                    else
                    {
						//Get Property Definition from Data Store
                        _PropertyDefinition = ProfileController.GetPropertyDefinition(PropertyDefinitionID, UsersPortalId);
                    }
                }
                return _PropertyDefinition;
            }]]></body>
          </codeblock>
        </property>
        <property name="PropertyDefinitionID">
          <declaration><![CDATA[protected int PropertyDefinitionID]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="130" sc="13" el="137" ec="14">DesktopModules\Admin\Security\EditProfileDefinition.ascx.cs</location>
            <body hash="cd0fcad61b500abeb021cac0c332d7f2"><![CDATA[{
                int _DefinitionID = Null.NullInteger;
                if (ViewState["PropertyDefinitionID"] != null)
                {
                    _DefinitionID = Int32.Parse(ViewState["PropertyDefinitionID"].ToString());
                }
                return _DefinitionID;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="139" sc="13" el="141" ec="14">DesktopModules\Admin\Security\EditProfileDefinition.ascx.cs</location>
            <body hash="4faeb26c03ae3f3c3fee752f696a798d"><![CDATA[{
                ViewState["PropertyDefinitionID"] = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="UsersPortalId">
          <declaration><![CDATA[protected int UsersPortalId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="152" sc="13" el="159" ec="14">DesktopModules\Admin\Security\EditProfileDefinition.ascx.cs</location>
            <body hash="49679f096e540eb6b49afdc6faf9f474"><![CDATA[{
                int intPortalId = PortalId;
                if (IsSuperUser)
                {
                    intPortalId = Null.NullInteger;
                }
                return intPortalId;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="EditUser">
      <declaration><![CDATA[public class EditUser : UserModuleBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public EditUser()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
        <constructor name=".cctor">
          <declaration><![CDATA[static EditUser()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="57" sc="9" el="57" ec="97">DesktopModules\Admin\Security\EditUser.ascx.cs</location>
            <body hash="d7f017782d3bce2ffa684bf56909bcda"><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof(EditUser))]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="BindData">
          <declaration><![CDATA[private void BindData()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="188" sc="9" el="271" ec="10">DesktopModules\Admin\Security\EditUser.ascx.cs</location>
            <body hash="cc12acb183187875363054253a93dd48"><![CDATA[{
            if (User != null)
            {
                //If trying to add a SuperUser - check that user is a SuperUser
                if (VerifyUserPermissions() == false)
                {
                    return;
                }

                if (!Page.IsPostBack)
                {
                    if ((Request.QueryString["pageno"] != null))
                    {
                        PageNo = int.Parse(Request.QueryString["pageno"]);
                    }
                    else
                    {
                        PageNo = 0;
                    }
                }
                userForm.DataSource = User;


                // hide username field in UseEmailAsUserName mode
                bool disableUsername = PortalController.GetPortalSettingAsBoolean("Registration_UseEmailAsUserName", PortalId, false);
                if (disableUsername)
                {
                    userForm.Items[0].Visible = false;
                }

                if (!Page.IsPostBack)
                {
                    userForm.DataBind();
                }

                ctlPassword.User = User;
                ctlPassword.DataBind();

                if ((!DisplayServices))
                {
                    servicesTab.Visible = false;
                }
                else
                {
                    ctlServices.User = User;
                    ctlServices.DataBind();
                }

                BindUser();
                ctlProfile.User = User;
                ctlProfile.DataBind();

                dnnServicesDetails.Visible = DisplayServices;

                var urlSettings = new DotNetNuke.Entities.Urls.FriendlyUrlSettings(PortalSettings.PortalId);
                var showVanityUrl = (Config.GetFriendlyUrlProvider() == "advanced") && !User.IsSuperUser;
                if (showVanityUrl)
                {
                    VanityUrlRow.Visible = true;
                    if (String.IsNullOrEmpty(User.VanityUrl))
                    {
                        //Clean Display Name
                        bool modified;
                        var options = UrlRewriterUtils.GetOptionsFromSettings(urlSettings);
                        var cleanUrl = FriendlyUrlController.CleanNameForUrl(User.DisplayName, options, out modified);
                        var uniqueUrl = FriendlyUrlController.ValidateUrl(cleanUrl, -1, PortalSettings, out modified).ToLowerInvariant();

                        VanityUrlAlias.Text = String.Format("{0}/{1}/", PortalSettings.PortalAlias.HTTPAlias, urlSettings.VanityUrlPrefix);
                        VanityUrlTextBox.Text = uniqueUrl;
                        ShowVanityUrl = true;
                    }
                    else
                    {
                        VanityUrl.Text = String.Format("{0}/{1}/{2}", PortalSettings.PortalAlias.HTTPAlias, urlSettings.VanityUrlPrefix, User.VanityUrl);
                        ShowVanityUrl = false;
                    }
                }
            }
            else
            {
                AddModuleMessage("NoUser", ModuleMessage.ModuleMessageType.YellowWarning, true);
                DisableForm();
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="BindMembership">
          <declaration><![CDATA[private void BindMembership()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="334" sc="9" el="338" ec="10">DesktopModules\Admin\Security\EditUser.ascx.cs</location>
            <body hash="80203d001cb5a8717da98c47676034c0"><![CDATA[{
            ctlMembership.User = User;
            ctlMembership.DataBind();
            AddModuleMessage("UserLockedOut", ModuleMessage.ModuleMessageType.YellowWarning, ctlMembership.UserMembership.LockedOut && (!Page.IsPostBack));
        }]]></body>
          </codeblock>
        </method>
        <method name="BindUser">
          <declaration><![CDATA[private void BindUser()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="341" sc="9" el="344" ec="10">DesktopModules\Admin\Security\EditUser.ascx.cs</location>
            <body hash="6868959214085b8eb7b264fd30af2824"><![CDATA[{
            BindMembership();
          
        }]]></body>
          </codeblock>
        </method>
        <method name="cmdDelete_Click">
          <declaration><![CDATA[protected void cmdDelete_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="443" sc="9" el="453" ec="10">DesktopModules\Admin\Security\EditUser.ascx.cs</location>
            <body hash="7f3811bafe2b02aeeeaa99ed2ace7161"><![CDATA[{
            UserInfo user = User;
            if (!UserController.DeleteUser(ref user, true, false))
            {
                AddModuleMessage("UserDeleteError", ModuleMessage.ModuleMessageType.RedError, true);
            }

            //DNN-26777 
            new PortalSecurity().SignOut();
            Response.Redirect(Globals.NavigateURL(PortalSettings.HomeTabId));
        }]]></body>
          </codeblock>
        </method>
        <method name="cmdUpdate_Click">
          <declaration><![CDATA[protected void cmdUpdate_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="456" sc="9" el="509" ec="10">DesktopModules\Admin\Security\EditUser.ascx.cs</location>
            <body hash="f3afcde4650c0dfe613513e7afdc47db"><![CDATA[{
            if (userForm.IsValid && (User != null))
            {
                if (User.UserID == PortalSettings.AdministratorId)
                {
                    //Clear the Portal Cache
                    DataCache.ClearPortalCache(UserPortalID, true);
                }
                try
                {
                    //Update DisplayName to conform to Format
                    UpdateDisplayName();

                    //DNN-5874 Check if unique display name is required
                    if (PortalSettings.Registration.RequireUniqueDisplayName)
                    {
                        var usersWithSameDisplayName = (List<UserInfo>)MembershipProvider.Instance().GetUsersBasicSearch(PortalId, 0, 2, "DisplayName", true, "DisplayName", User.DisplayName);
                        if (usersWithSameDisplayName.Any(user => user.UserID != User.UserID))
                        {
                            throw new Exception("Display Name must be unique");
                        }
                    }

                    UserController.UpdateUser(UserPortalID, User);

                    // make sure username matches possibly changed email address
                    if (PortalSettings.Registration.UseEmailAsUserName)
                    {
                        if (User.Username.ToLower() != User.Email.ToLower())
                        {
                            UserController.ChangeUsername(User.UserID, User.Email);

                            //note that this effectively will cause a signout due to the cookie not matching anymore.
                            Response.Cookies.Add(new HttpCookie("USERNAME_CHANGED", User.Email) { Path = (!string.IsNullOrEmpty(Globals.ApplicationPath) ? Globals.ApplicationPath : "/") });
                        }
                    }

                    Response.Redirect(Request.RawUrl);
                }
                catch (Exception exc)
                {
                    Logger.Error(exc);
                    if (exc.Message == "Display Name must be unique")
                    {
                        AddModuleMessage("DisplayNameNotUnique", ModuleMessage.ModuleMessageType.RedError, true);
                    }
                    else
                    {
                        AddModuleMessage("UserUpdatedError", ModuleMessage.ModuleMessageType.RedError, true);
                    }
                }
            }

        }]]></body>
          </codeblock>
        </method>
        <method name="DisableForm">
          <declaration><![CDATA[private void DisableForm()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="347" sc="9" el="353" ec="10">DesktopModules\Admin\Security\EditUser.ascx.cs</location>
            <body hash="82f0ee189b73564ce8f696c7a7285f90"><![CDATA[{
            adminTabNav.Visible = false;
            dnnProfileDetails.Visible = false;
            dnnServicesDetails.Visible = false;
            actionsRow.Visible = false;
            ctlMembership.Visible = false;
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="376" sc="9" el="419" ec="10">DesktopModules\Admin\Security\EditUser.ascx.cs</location>
            <body hash="80e486c4da39e4257cc0d8fcc15abdcc"><![CDATA[{
            base.OnInit(e);

            cmdDelete.Click += cmdDelete_Click;
            cmdUpdate.Click += cmdUpdate_Click;
            
            ctlServices.SubscriptionUpdated += SubscriptionUpdated;
            ctlProfile.ProfileUpdateCompleted += ProfileUpdateCompleted;
            ctlPassword.PasswordUpdated += PasswordUpdated;
            ctlPassword.PasswordQuestionAnswerUpdated += PasswordQuestionAnswerUpdated;

			email.ValidationExpression = PortalSettings.Registration.EmailValidator;

			JavaScript.RequestRegistration(CommonJs.DnnPlugins);
            JavaScript.RequestRegistration(CommonJs.Knockout);


            //Set the Membership Control Properties
            ctlMembership.ID = "Membership";
            ctlMembership.ModuleConfiguration = ModuleConfiguration;
            ctlMembership.UserId = UserId;

            //Set the Password Control Properties
            ctlPassword.ID = "Password";
            ctlPassword.ModuleConfiguration = ModuleConfiguration;
            ctlPassword.UserId = UserId;

            //Set the Profile Control Properties
            ctlProfile.ID = "Profile";
            ctlProfile.ModuleConfiguration = ModuleConfiguration;
            ctlProfile.UserId = UserId;

            //Set the Services Control Properties
            ctlServices.ID = "MemberServices";
            ctlServices.ModuleConfiguration = ModuleConfiguration;
            ctlServices.UserId = UserId;

            //Define DisplayName filed Enabled Property:
            object setting = GetSetting(UserPortalID, "Security_DisplayNameFormat");
            if ((setting != null) && (!string.IsNullOrEmpty(Convert.ToString(setting))))
            {
                displayName.Enabled = false;
            }            
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="428" sc="9" el="440" ec="10">DesktopModules\Admin\Security\EditUser.ascx.cs</location>
            <body hash="eba0726e612686ad0f4f0fcd6e2d0d84"><![CDATA[{
            base.OnLoad(e);

            try
            {
                //Bind the User information to the controls
                BindData();
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="PasswordQuestionAnswerUpdated">
          <declaration><![CDATA[private void PasswordQuestionAnswerUpdated(object sender, Password.PasswordUpdatedEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="518" sc="9" el="532" ec="10">DesktopModules\Admin\Security\EditUser.ascx.cs</location>
            <body hash="ac494dcdb7d8a7bd235b0f2eeba8de32"><![CDATA[{
            if (IsUserOrAdmin == false)
            {
                return;
            }
            PasswordUpdateStatus status = e.UpdateStatus;
            if (status == PasswordUpdateStatus.Success)
            {
                AddModuleMessage("PasswordQAChanged", ModuleMessage.ModuleMessageType.GreenSuccess, true);
            }
            else
            {
                AddModuleMessage(status.ToString(), ModuleMessage.ModuleMessageType.RedError, true);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="PasswordUpdated">
          <declaration><![CDATA[private void PasswordUpdated(object sender, Password.PasswordUpdatedEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="541" sc="9" el="576" ec="10">DesktopModules\Admin\Security\EditUser.ascx.cs</location>
            <body hash="1338630f3fb8ca2716c7d96057d61deb"><![CDATA[{
            if (IsUserOrAdmin == false)
            {
                return;
            }
            PasswordUpdateStatus status = e.UpdateStatus;

            if (status == PasswordUpdateStatus.Success)
            {
                //Send Notification to User
                try
                {
                    var accessingUser = (UserInfo)HttpContext.Current.Items["UserInfo"];
                    if (accessingUser.UserID != User.UserID)
                    {
                        //The password was changed by someone else 
                        Mail.SendMail(User, MessageType.PasswordReminder, PortalSettings);
                    }
                    else
                    {
                        //The User changed his own password
                        Mail.SendMail(User, MessageType.UserUpdatedOwnPassword, PortalSettings);
                    }
                    AddModuleMessage("PasswordChanged", ModuleMessage.ModuleMessageType.GreenSuccess, true);
                }
                catch (Exception ex)
                {
                    AddModuleMessage("PasswordMailError", ModuleMessage.ModuleMessageType.YellowWarning, true);
                    Exceptions.LogException(ex);
                }
            }
            else
            {
                AddModuleMessage(status.ToString(), ModuleMessage.ModuleMessageType.RedError, true);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="ProfileUpdateCompleted">
          <declaration><![CDATA[private void ProfileUpdateCompleted(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="585" sc="9" el="613" ec="10">DesktopModules\Admin\Security\EditUser.ascx.cs</location>
            <body hash="3f89edcc8e50dd7a7fa788a1f3ccae14"><![CDATA[{
            if (IsUserOrAdmin == false)
            {
                return;
            }
            if (IsUser)
            {
                //Notify the user that his/her profile was updated
                Mail.SendMail(User, MessageType.ProfileUpdated, PortalSettings);

                ProfilePropertyDefinition localeProperty = User.Profile.GetProperty("PreferredLocale");
                if (localeProperty.IsDirty)
                {
                    //store preferredlocale in cookie, if none specified set to portal default.
                    if (User.Profile.PreferredLocale == string.Empty)
                    {
                        Localization.SetLanguage(PortalController.GetPortalDefaultLanguage(User.PortalID));
                    }
                    else
                    {
                        Localization.SetLanguage(User.Profile.PreferredLocale);
                    }
                }
            }

            //Redirect to same page (this will update all controls for any changes to profile
            //and leave us at Page 0 (User Credentials)
            Response.Redirect(Request.RawUrl, true);
        }]]></body>
          </codeblock>
        </method>
        <method name="SubscriptionUpdated">
          <declaration><![CDATA[private void SubscriptionUpdated(object sender, MemberServices.SubscriptionUpdatedEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="616" sc="9" el="627" ec="10">DesktopModules\Admin\Security\EditUser.ascx.cs</location>
            <body hash="e49e6b015d5cf505f42cb646a4e5cc4c"><![CDATA[{
            string message;
            if (e.Cancel)
            {
                message = string.Format(Localization.GetString("UserUnSubscribed", LocalResourceFile), e.RoleName);
            }
            else
            {
                message = string.Format(Localization.GetString("UserSubscribed", LocalResourceFile), e.RoleName);
            }
            AddLocalizedModuleMessage(message, ModuleMessage.ModuleMessageType.GreenSuccess, true);
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateDisplayName">
          <declaration><![CDATA[private void UpdateDisplayName()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="356" sc="9" el="362" ec="10">DesktopModules\Admin\Security\EditUser.ascx.cs</location>
            <body hash="16f88f916693fbc7a91131de9983ff6f"><![CDATA[{
            //Update DisplayName to conform to Format
            if (!string.IsNullOrEmpty(PortalSettings.Registration.DisplayNameFormat))
            {
                User.UpdateDisplayName(PortalSettings.Registration.DisplayNameFormat);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="VerifyUserPermissions">
          <declaration><![CDATA[private bool VerifyUserPermissions()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="274" sc="9" el="331" ec="10">DesktopModules\Admin\Security\EditUser.ascx.cs</location>
            <body hash="ef9c0b9866635124236d131dc97c50a4"><![CDATA[{
            if (IsHostMenu && !UserInfo.IsSuperUser)
            {
                AddModuleMessage("NoUser", ModuleMessage.ModuleMessageType.YellowWarning, true);
                DisableForm();
                return false;
            }

            //Check if User is a member of the Current Portal (or a member of the MasterPortal if PortalGroups enabled)
            if (User.PortalID != Null.NullInteger && User.PortalID != PortalId)
            {
                AddModuleMessage("InvalidUser", ModuleMessage.ModuleMessageType.YellowWarning, true);
                DisableForm();
                return false;
            }

            //Check if User is a SuperUser and that the current User is a SuperUser
            if (User.IsSuperUser && !UserInfo.IsSuperUser)
            {
                AddModuleMessage("NoUser", ModuleMessage.ModuleMessageType.YellowWarning, true);
                DisableForm();
                return false;
            }
            if (IsEdit)
            {
                //Check if user has admin rights
                if (!IsAdmin || (User.IsInRole(PortalSettings.AdministratorRoleName) && !PortalSecurity.IsInRole(PortalSettings.AdministratorRoleName)))
                {
                    AddModuleMessage("NotAuthorized", ModuleMessage.ModuleMessageType.YellowWarning, true);
                    DisableForm();
                    return false;
                }
            }
            else
            {
                if (!IsUser)
                {
                    if (Request.IsAuthenticated)
                    {
                        if (!PortalSecurity.IsInRole(PortalSettings.AdministratorRoleName))
                        {
                            //Display current user's profile
                            Response.Redirect(Globals.NavigateURL(PortalSettings.UserTabId, "", "UserID=" + UserInfo.UserID), true);
                        }
                    }
                    else
                    {
                        if ((User.UserID > Null.NullInteger))
                        {
                            AddModuleMessage("NotAuthorized", ModuleMessage.ModuleMessageType.YellowWarning, true);
                            DisableForm();
                            return false;
                        }
                    }
                }
            }
            return true;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="actionsRow">
          <declaration><![CDATA[protected HtmlGenericControl actionsRow;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="adminTabNav">
          <declaration><![CDATA[protected HtmlGenericControl adminTabNav;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdDelete">
          <declaration><![CDATA[protected LinkButton cmdDelete;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdUpdate">
          <declaration><![CDATA[protected LinkButton cmdUpdate;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ctlMembership">
          <declaration><![CDATA[protected Membership ctlMembership;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ctlPassword">
          <declaration><![CDATA[protected Password ctlPassword;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ctlProfile">
          <declaration><![CDATA[protected DNNProfile ctlProfile;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ctlServices">
          <declaration><![CDATA[protected MemberServices ctlServices;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="displayName">
          <declaration><![CDATA[protected DnnFormTextBoxItem displayName;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="dnnEditUser">
          <declaration><![CDATA[protected HtmlGenericControl dnnEditUser;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="dnnProfileDetails">
          <declaration><![CDATA[protected Panel dnnProfileDetails;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="dnnServicesDetails">
          <declaration><![CDATA[protected HtmlGenericControl dnnServicesDetails;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="email">
          <declaration><![CDATA[protected DnnFormTextBoxItem email;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Logger">
          <declaration><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof(EditUser));]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="servicesTab">
          <declaration><![CDATA[protected HtmlGenericControl servicesTab;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="userForm">
          <declaration><![CDATA[protected DnnFormEditor userForm;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="userNameReadOnly">
          <declaration><![CDATA[protected DnnFormLiteralItem userNameReadOnly;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="UserSubscriptions">
          <declaration><![CDATA[protected Subscriptions UserSubscriptions;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="VanityUrl">
          <declaration><![CDATA[protected Label VanityUrl;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="VanityUrlAlias">
          <declaration><![CDATA[protected Label VanityUrlAlias;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="VanityUrlHeader">
          <declaration><![CDATA[protected Label VanityUrlHeader;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="VanityUrlLabel">
          <declaration><![CDATA[protected LabelControl VanityUrlLabel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="VanityUrlPanel">
          <declaration><![CDATA[protected HtmlGenericControl VanityUrlPanel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="VanityUrlRow">
          <declaration><![CDATA[protected Panel VanityUrlRow;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="VanityUrlTextBox">
          <declaration><![CDATA[protected TextBox VanityUrlTextBox;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="DisplayServices">
          <declaration><![CDATA[protected bool DisplayServices]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="68" sc="13" el="71" ec="14">DesktopModules\Admin\Security\EditUser.ascx.cs</location>
            <body hash="83f59ce4ed648eb2fd72980c234020cb"><![CDATA[{
                object setting = GetSetting(PortalId, "Profile_ManageServices");
                return Convert.ToBoolean(setting) && !(IsEdit || User.IsSuperUser);
            }]]></body>
          </codeblock>
        </property>
        <property name="PageNo">
          <declaration><![CDATA[public int PageNo]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="167" sc="13" el="174" ec="14">DesktopModules\Admin\Security\EditUser.ascx.cs</location>
            <body hash="d2791811541ca3eb4c473299b899bb7e"><![CDATA[{
                int _PageNo = 0;
                if (ViewState["PageNo"] != null && !IsPostBack)
                {
                    _PageNo = Convert.ToInt32(ViewState["PageNo"]);
                }
                return _PageNo;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="176" sc="13" el="178" ec="14">DesktopModules\Admin\Security\EditUser.ascx.cs</location>
            <body hash="ce992fd07f483cfce68e5f8558df4b03"><![CDATA[{
                ViewState["PageNo"] = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="RedirectURL">
          <declaration><![CDATA[protected string RedirectURL]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="81" sc="13" el="113" ec="14">DesktopModules\Admin\Security\EditUser.ascx.cs</location>
            <body hash="abcc503d5a1fdaf0313e7b9f5d334f4d"><![CDATA[{
                string _RedirectURL = "";

                if (PortalSettings.Registration.RedirectAfterRegistration == Null.NullInteger)
                {
                    if (Request.QueryString["returnurl"] != null)
                    {
                        //return to the url passed to register
                        _RedirectURL = HttpUtility.UrlDecode(Request.QueryString["returnurl"]);

                        //clean the return url to avoid possible XSS attack.
                        _RedirectURL = UrlUtils.ValidReturnUrl(_RedirectURL);

                        if (_RedirectURL.Contains("?returnurl"))
                        {
                            string baseURL = _RedirectURL.Substring(0, _RedirectURL.IndexOf("?returnurl"));
                            string returnURL = _RedirectURL.Substring(_RedirectURL.IndexOf("?returnurl") + 11);

                            _RedirectURL = string.Concat(baseURL, "?returnurl", HttpUtility.UrlEncode(returnURL));
                        }
                    }
                    if (String.IsNullOrEmpty(_RedirectURL))
                    {
                        //redirect to current page 
                        _RedirectURL = Globals.NavigateURL();
                    }
                }
                else //redirect to after registration page
                {
                    _RedirectURL = Globals.NavigateURL(PortalSettings.Registration.RedirectAfterRegistration);
                }
                return _RedirectURL;
            }]]></body>
          </codeblock>
        </property>
        <property name="ReturnUrl">
          <declaration><![CDATA[protected string ReturnUrl]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="123" sc="13" el="125" ec="14">DesktopModules\Admin\Security\EditUser.ascx.cs</location>
            <body hash="d0232d91d812af59558316c0360d79e3"><![CDATA[{
                return Globals.NavigateURL(TabId, "", !String.IsNullOrEmpty(UserFilter) ? UserFilter : "");
            }]]></body>
          </codeblock>
        </property>
        <property name="ShowVanityUrl">
          <declaration><![CDATA[public bool ShowVanityUrl]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="181" sc="37" el="181" ec="41">DesktopModules\Admin\Security\EditUser.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="181" sc="42" el="181" ec="54">DesktopModules\Admin\Security\EditUser.ascx.cs</location>
            <body hash="5dbe2cc086ebbf5db6b03610487cca4c"><![CDATA[private set]]></body>
          </codeblock>
        </property>
        <property name="UserFilter">
          <declaration><![CDATA[protected string UserFilter]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="135" sc="13" el="153" ec="14">DesktopModules\Admin\Security\EditUser.ascx.cs</location>
            <body hash="45824ccf213085ea5affa3c6ced1940b"><![CDATA[{
                string filterString = !string.IsNullOrEmpty(Request["filter"]) ? "filter=" + Request["filter"] : "";
                string filterProperty = !string.IsNullOrEmpty(Request["filterproperty"]) ? "filterproperty=" + Request["filterproperty"] : "";
                string page = !string.IsNullOrEmpty(Request["currentpage"]) ? "currentpage=" + Request["currentpage"] : "";

                if (!string.IsNullOrEmpty(filterString))
                {
                    filterString += "&";
                }
                if (!string.IsNullOrEmpty(filterProperty))
                {
                    filterString += filterProperty + "&";
                }
                if (!string.IsNullOrEmpty(page))
                {
                    filterString += page;
                }
                return filterString;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="ManageUsers">
      <declaration><![CDATA[public class ManageUsers : UserModuleBase, IActionable]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public ManageUsers()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="BindData">
          <declaration><![CDATA[private void BindData()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="236" sc="9" el="286" ec="10">DesktopModules\Admin\Security\ManageUsers.ascx.cs</location>
            <body hash="9b3ec53be6d303f8d0c35eb90d056608"><![CDATA[{
            if (User != null)
            {
				//If trying to add a SuperUser - check that user is a SuperUser
                if (VerifyUserPermissions()==false)
                {
                    return;
                }
				
                if (AddUser)
                {
                    cmdAdd.Text = Localization.GetString("AddUser", LocalResourceFile);
                    lblTitle.Text = Localization.GetString("AddUser", LocalResourceFile);
                }
                else
                {
                    if (!Request.IsAuthenticated)
                    {
                        titleRow.Visible = false;
                    }
                    else
                    {
                        if (IsProfile)
                        {
                            titleRow.Visible = false;
                        }
                        else
                        {
                            lblTitle.Text = string.Format(Localization.GetString("UserTitle", LocalResourceFile), User.Username, User.UserID);
                        }
                    }
                }
                if (!Page.IsPostBack)
                {
                    if ((Request.QueryString["pageno"] != null))
                    {
                        PageNo = int.Parse(Request.QueryString["pageno"]);
                    }
                    else
                    {
                        PageNo = 0;
                    }
                }
                ShowPanel();
            }
            else
            {
                AddModuleMessage("NoUser", ModuleMessage.ModuleMessageType.YellowWarning, true);
                DisableForm();
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="BindMembership">
          <declaration><![CDATA[private void BindMembership()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="349" sc="9" el="355" ec="10">DesktopModules\Admin\Security\ManageUsers.ascx.cs</location>
            <body hash="c6f59afa912f9c83fbeb522fa57020ce"><![CDATA[{
            ctlMembership.User = User;
            ctlMembership.DataBind();
            AddModuleMessage("UserLockedOut", ModuleMessage.ModuleMessageType.YellowWarning, ctlMembership.UserMembership.LockedOut && (!Page.IsPostBack));
            imgLockedOut.Visible = ctlMembership.UserMembership.LockedOut;
            imgOnline.Visible = ctlMembership.UserMembership.IsOnLine;
        }]]></body>
          </codeblock>
        </method>
        <method name="BindUser">
          <declaration><![CDATA[private void BindUser()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="358" sc="9" el="376" ec="10">DesktopModules\Admin\Security\ManageUsers.ascx.cs</location>
            <body hash="a1475ebbea66c57819e162f2c71b7570"><![CDATA[{
            if (AddUser)
            {
                ctlUser.ShowUpdate = false;
                CheckQuota();
            }
            ctlUser.User = User;
            ctlUser.DataBind();

            //Bind the Membership
            if (AddUser || (!IsAdmin))
            {
				membershipRow.Visible = false;
            }
            else
            {
                BindMembership();
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="CheckQuota">
          <declaration><![CDATA[private void CheckQuota()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="379" sc="9" el="389" ec="10">DesktopModules\Admin\Security\ManageUsers.ascx.cs</location>
            <body hash="e634b99c6b21da048d986e8030ab9024"><![CDATA[{
            if (PortalSettings.Users < PortalSettings.UserQuota || UserInfo.IsSuperUser || PortalSettings.UserQuota == 0)
            {
                cmdAdd.Enabled = true;
            }
            else
            {
                cmdAdd.Enabled = false;
                AddModuleMessage("ExceededUserQuota", ModuleMessage.ModuleMessageType.YellowWarning, true);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="cmdAdd_Click">
          <declaration><![CDATA[protected void cmdAdd_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="578" sc="9" el="594" ec="10">DesktopModules\Admin\Security\ManageUsers.ascx.cs</location>
            <body hash="d517aa005a9f291aeabd51e6b96cad10"><![CDATA[{
            if (IsAdmin == false && HasManageUsersModulePermission() == false)
            {
                return;
            }
            if (ctlUser.IsValid && (ctlProfile.IsValid))
            {
                ctlUser.CreateUser();
            }
            else
            {
                if (ctlUser.CreateStatus != UserCreateStatus.AddUser)
                {
                    AddLocalizedModuleMessage(UserController.GetUserCreateStatus(ctlUser.CreateStatus), ModuleMessage.ModuleMessageType.RedError, true);
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="cmdCancel_Click">
          <declaration><![CDATA[protected void cmdCancel_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="562" sc="9" el="564" ec="10">DesktopModules\Admin\Security\ManageUsers.ascx.cs</location>
            <body hash="4524639d370035c8c7dcfeb64bd09bcd"><![CDATA[{
            Response.Redirect(Globals.NavigateURL(), true);
        }]]></body>
          </codeblock>
        </method>
        <method name="DisableForm">
          <declaration><![CDATA[private void DisableForm()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="392" sc="9" el="400" ec="10">DesktopModules\Admin\Security\ManageUsers.ascx.cs</location>
            <body hash="5bebe45255f2ad1a7506cfece9da58b9"><![CDATA[{
            adminTabNav.Visible = false;
            dnnRoleDetails.Visible = false;
            dnnPasswordDetails.Visible = false;
            dnnProfileDetails.Visible = false;
            actionsRow.Visible = false;
            ctlMembership.Visible = false;
            ctlUser.Visible = false;
        }]]></body>
          </codeblock>
        </method>
        <method name="HasManageUsersModulePermission">
          <declaration><![CDATA[private bool HasManageUsersModulePermission()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="567" sc="9" el="569" ec="10">DesktopModules\Admin\Security\ManageUsers.ascx.cs</location>
            <body hash="ec1874f820880daf61651e0a6fda9c04"><![CDATA[{
            return ModulePermissionController.HasModulePermission(ModuleConfiguration.ModulePermissions, "MANAGEUSER");
        }]]></body>
          </codeblock>
        </method>
        <method name="MembershipAuthorized">
          <declaration><![CDATA[private void MembershipAuthorized(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="632" sc="9" el="654" ec="10">DesktopModules\Admin\Security\ManageUsers.ascx.cs</location>
            <body hash="89a9daf4399beeb3397b3fa7ed3bf28e"><![CDATA[{
            if (IsAdmin == false)
            {
                return;
            }
            try
            {
                AddModuleMessage("UserAuthorized", ModuleMessage.ModuleMessageType.GreenSuccess, true);
                
				//Send Notification to User
				if (string.IsNullOrEmpty(User.Membership.Password) && !MembershipProviderConfig.RequiresQuestionAndAnswer && MembershipProviderConfig.PasswordRetrievalEnabled)
                {
                    UserInfo user = User;
                    User.Membership.Password = UserController.GetPassword(ref user, "");
                }

                BindMembership();
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="MembershipDemoteFromSuperuser">
          <declaration><![CDATA[private void MembershipDemoteFromSuperuser(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="715" sc="9" el="730" ec="10">DesktopModules\Admin\Security\ManageUsers.ascx.cs</location>
            <body hash="85010c4d8d35928d8ef5e862314dd572"><![CDATA[{
            if (IsAdmin == false)
            {
                return;
            }
            try
            {
                AddModuleMessage("UserDemotedFromSuperuser", ModuleMessage.ModuleMessageType.GreenSuccess, true);

                BindMembership();
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="MembershipPasswordUpdateChanged">
          <declaration><![CDATA[protected void MembershipPasswordUpdateChanged(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="663" sc="9" el="678" ec="10">DesktopModules\Admin\Security\ManageUsers.ascx.cs</location>
            <body hash="df2825ffcea615ab2d86f2ead915a9ba"><![CDATA[{
            if (IsAdmin == false)
            {
                return;
            }
            try
            {
                AddModuleMessage("UserPasswordUpdateChanged", ModuleMessage.ModuleMessageType.GreenSuccess, true);

                BindMembership();
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="MembershipPromoteToSuperuser">
          <declaration><![CDATA[private void MembershipPromoteToSuperuser(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="690" sc="9" el="705" ec="10">DesktopModules\Admin\Security\ManageUsers.ascx.cs</location>
            <body hash="7436a140d000919df288ab32ec4b9155"><![CDATA[{
            if (IsAdmin == false)
            {
                return;
            }
            try
            {
                AddModuleMessage("UserPromotedToSuperuser", ModuleMessage.ModuleMessageType.GreenSuccess, true);

                BindMembership();
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="MembershipUnAuthorized">
          <declaration><![CDATA[private void MembershipUnAuthorized(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="739" sc="9" el="754" ec="10">DesktopModules\Admin\Security\ManageUsers.ascx.cs</location>
            <body hash="8e8e8851f1541e99e18ae280573ca4ec"><![CDATA[{
            if (IsAdmin == false)
            {
                return;
            }
            try
            {
                AddModuleMessage("UserUnAuthorized", ModuleMessage.ModuleMessageType.GreenSuccess, true);

                BindMembership();
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="MembershipUnLocked">
          <declaration><![CDATA[private void MembershipUnLocked(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="763" sc="9" el="777" ec="10">DesktopModules\Admin\Security\ManageUsers.ascx.cs</location>
            <body hash="70c1efda5895bd279783da9189ef90b6"><![CDATA[{
            if (IsAdmin == false)
            {
                return;
            }
            try
            {
                AddModuleMessage("UserUnLocked", ModuleMessage.ModuleMessageType.GreenSuccess, true);
                BindMembership();
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="ModuleAction_Click">
          <declaration><![CDATA[private void ModuleAction_Click(object sender, ActionEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="605" sc="9" el="623" ec="10">DesktopModules\Admin\Security\ManageUsers.ascx.cs</location>
            <body hash="3ff685969ddc233556af105056b4a470"><![CDATA[{
            switch (e.Action.CommandArgument)
            {
                case "ManageRoles":
                    //pnlRoles.Visible = true;
                    //pnlUser.Visible = false;
                    break;
                case "Cancel":
                    break;
                case "Delete":
                    break;
                case "Edit":
                    break;
                case "Save":
                    break;
                default:
                    break;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="462" sc="9" el="528" ec="10">DesktopModules\Admin\Security\ManageUsers.ascx.cs</location>
            <body hash="4d0e17e1461fa8f0b6fa5e6451b57d31"><![CDATA[{
            base.OnInit(e);

            cmdCancel.Click += cmdCancel_Click;
            cmdAdd.Click += cmdAdd_Click;

            ctlUser.UserCreateCompleted += UserCreateCompleted;
            ctlUser.UserDeleted += UserDeleted;
            ctlUser.UserRemoved += UserRemoved;
            ctlUser.UserRestored += UserRestored;
            ctlUser.UserUpdateCompleted += UserUpdateCompleted;
            ctlUser.UserUpdateError += UserUpdateError;

            ctlProfile.ProfileUpdateCompleted += ProfileUpdateCompleted;
            ctlPassword.PasswordUpdated += PasswordUpdated;
            ctlPassword.PasswordQuestionAnswerUpdated += PasswordQuestionAnswerUpdated;
            ctlMembership.MembershipAuthorized += MembershipAuthorized;
            ctlMembership.MembershipPasswordUpdateChanged += MembershipPasswordUpdateChanged;
            ctlMembership.MembershipUnAuthorized += MembershipUnAuthorized;
            ctlMembership.MembershipUnLocked += MembershipUnLocked;
            ctlMembership.MembershipDemoteFromSuperuser += MembershipDemoteFromSuperuser;
            ctlMembership.MembershipPromoteToSuperuser += MembershipPromoteToSuperuser;

			JavaScript.RequestRegistration(CommonJs.DnnPlugins);

            //Set the Membership Control Properties
            ctlMembership.ID = "Membership";
            ctlMembership.ModuleConfiguration = ModuleConfiguration;
            ctlMembership.UserId = UserId;

            //Set the User Control Properties
            ctlUser.ID = "User";
            ctlUser.ModuleConfiguration = ModuleConfiguration;
            ctlUser.UserId = UserId;

            //Set the Roles Control Properties
            ctlRoles.ID = "SecurityRoles";
            ctlRoles.ModuleConfiguration = ModuleConfiguration;
            ctlRoles.ParentModule = this;

            //Set the Password Control Properties
            ctlPassword.ID = "Password";
            ctlPassword.ModuleConfiguration = ModuleConfiguration;
            ctlPassword.UserId = UserId;

            //Set the Profile Control Properties
            ctlProfile.ID = "Profile";
            ctlProfile.ModuleConfiguration = ModuleConfiguration;
            ctlProfile.UserId = UserId;

            //Customise the Control Title
            if (AddUser)
            {
                if (!Request.IsAuthenticated)
                {
					//Register
                    ModuleConfiguration.ModuleTitle = Localization.GetString("Register.Title", LocalResourceFile);
                }
                else
                {
					//Add User
                    ModuleConfiguration.ModuleTitle = Localization.GetString("AddUser.Title", LocalResourceFile);
                }

                userContainer.CssClass += " register";
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="537" sc="9" el="559" ec="10">DesktopModules\Admin\Security\ManageUsers.ascx.cs</location>
            <body hash="967ac289010734dcc2161f634d937bff"><![CDATA[{
            base.OnLoad(e);

            try
            {
                //Add an Action Event Handler to the Skin
                AddActionHandler(ModuleAction_Click);

                //Bind the User information to the controls
                BindData();

                loginLink.NavigateUrl = Globals.LoginURL(RedirectURL, (Request.QueryString["override"] != null));

                if (PortalSettings.EnablePopUps)
                {
                    loginLink.Attributes.Add("onclick", "return " + UrlUtils.PopUpUrl(loginLink.NavigateUrl, this, PortalSettings, true, false, 300, 650));
                }
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="PasswordQuestionAnswerUpdated">
          <declaration><![CDATA[private void PasswordQuestionAnswerUpdated(object sender, Password.PasswordUpdatedEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="786" sc="9" el="800" ec="10">DesktopModules\Admin\Security\ManageUsers.ascx.cs</location>
            <body hash="4bcd42b9ce3ea9fea2f242b0e5944abc"><![CDATA[{
            if (IsAdmin == false)
            {
                return;
            }
            PasswordUpdateStatus status = e.UpdateStatus;
            if (status == PasswordUpdateStatus.Success)
            {
                AddModuleMessage("PasswordQAChanged", ModuleMessage.ModuleMessageType.GreenSuccess, true);
            }
            else
            {
                AddModuleMessage(status.ToString(), ModuleMessage.ModuleMessageType.RedError, true);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="PasswordUpdated">
          <declaration><![CDATA[private void PasswordUpdated(object sender, Password.PasswordUpdatedEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="809" sc="9" el="844" ec="10">DesktopModules\Admin\Security\ManageUsers.ascx.cs</location>
            <body hash="7fd7a134b949c2c9f35394d3708a1e67"><![CDATA[{
            if (IsAdmin == false)
            {
                return;
            }
            PasswordUpdateStatus status = e.UpdateStatus;

            if (status == PasswordUpdateStatus.Success)
            {
				//Send Notification to User
                try
                {
                    var accessingUser = (UserInfo) HttpContext.Current.Items["UserInfo"];
                    if (accessingUser.UserID != User.UserID)
                    {
						//The password was changed by someone else 
                        Mail.SendMail(User, MessageType.PasswordUpdated, PortalSettings);
                    }
                    else
                    {
						//The User changed his own password
                        Mail.SendMail(User, MessageType.UserUpdatedOwnPassword, PortalSettings);
                    }
                    AddModuleMessage("PasswordChanged", ModuleMessage.ModuleMessageType.GreenSuccess, true);
                }
                catch (Exception ex)
                {
                    AddModuleMessage("PasswordMailError", ModuleMessage.ModuleMessageType.YellowWarning, true);
                    Exceptions.LogException(ex);
                }
            }
            else
            {
                AddModuleMessage(status.ToString(), ModuleMessage.ModuleMessageType.RedError, true);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="ProfileUpdateCompleted">
          <declaration><![CDATA[private void ProfileUpdateCompleted(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="853" sc="9" el="862" ec="10">DesktopModules\Admin\Security\ManageUsers.ascx.cs</location>
            <body hash="a7ef065bb4be69d9c1f6fe2abaa7b422"><![CDATA[{
            if (IsAdmin == false)
            {
                return;
            }
			
            //Redirect to same page (this will update all controls for any changes to profile
            //and leave us at Page 0 (User Credentials)
            Response.Redirect(Request.RawUrl, true);
        }]]></body>
          </codeblock>
        </method>
        <method name="ShowPanel">
          <declaration><![CDATA[private void ShowPanel()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="403" sc="9" el="449" ec="10">DesktopModules\Admin\Security\ManageUsers.ascx.cs</location>
            <body hash="a2579dc10d2571c4312ddf908b4bb2d0"><![CDATA[{
            if (AddUser)
            {
                adminTabNav.Visible = false;
                if (Request.IsAuthenticated && MembershipProviderConfig.RequiresQuestionAndAnswer)
                {
					//Admin adding user
					dnnManageUsers.Visible = false;
                    actionsRow.Visible = false;
                    AddModuleMessage("CannotAddUser", ModuleMessage.ModuleMessageType.YellowWarning, true);
                }
                else
                {
					dnnManageUsers.Visible = true;
                    actionsRow.Visible = true;
                }
                BindUser();
                dnnProfileDetails.Visible = false;
            }
            else
            {
                if ((!IsAdmin))
                {
                    passwordTab.Visible = false;
                }
                else
                {
                    ctlPassword.User = User;
                    ctlPassword.DataBind();
                }
                if ((!IsEdit || User.IsSuperUser))
                {
                    rolesTab.Visible = false;
                }
                else
                {
                    ctlRoles.DataBind();
                }

                BindUser();
                ctlProfile.User = User;
                ctlProfile.DataBind(); 
            }

            dnnRoleDetails.Visible = IsEdit && !User.IsSuperUser && !AddUser;
            dnnPasswordDetails.Visible = (IsAdmin) && !AddUser;
        }]]></body>
          </codeblock>
        </method>
        <method name="SubscriptionUpdated">
          <declaration><![CDATA[private void SubscriptionUpdated(object sender, MemberServices.SubscriptionUpdatedEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="865" sc="9" el="876" ec="10">DesktopModules\Admin\Security\ManageUsers.ascx.cs</location>
            <body hash="ee41e780f4b098e6f6da42554de151bd"><![CDATA[{
            string message = Null.NullString;
            if (e.Cancel)
            {
                message = string.Format(Localization.GetString("UserUnSubscribed", LocalResourceFile), e.RoleName);
            }
            else
            {
                message = string.Format(Localization.GetString("UserSubscribed", LocalResourceFile), e.RoleName);
            }
            AddLocalizedModuleMessage(message, ModuleMessage.ModuleMessageType.GreenSuccess, true);
        }]]></body>
          </codeblock>
        </method>
        <method name="UserCreateCompleted">
          <declaration><![CDATA[private void UserCreateCompleted(object sender, UserUserControlBase.UserCreatedEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="885" sc="9" el="902" ec="10">DesktopModules\Admin\Security\ManageUsers.ascx.cs</location>
            <body hash="ce8143d1ba65d5904d66311deb84c2f3"><![CDATA[{
            try
            {
                if (e.CreateStatus == UserCreateStatus.Success)
                {
                    CompleteUserCreation(e.CreateStatus, e.NewUser, e.Notify, false);
                    Response.Redirect(ReturnUrl, true);
                }
                else
                {
                    AddLocalizedModuleMessage(UserController.GetUserCreateStatus(e.CreateStatus), ModuleMessage.ModuleMessageType.RedError, true);
                }
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="UserDeleted">
          <declaration><![CDATA[private void UserDeleted(object sender, UserUserControlBase.UserDeletedEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="911" sc="9" el="920" ec="10">DesktopModules\Admin\Security\ManageUsers.ascx.cs</location>
            <body hash="2805bfefe0434ea794b5d1ffb9ed634e"><![CDATA[{
            try
            {
                Response.Redirect(ReturnUrl, true);
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="UserRemoved">
          <declaration><![CDATA[private void UserRemoved(object sender, UserUserControlBase.UserRemovedEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="942" sc="9" el="952" ec="10">DesktopModules\Admin\Security\ManageUsers.ascx.cs</location>
            <body hash="cea346c7f900790935d0a9ed34406638"><![CDATA[{
            try
            {
                Response.Redirect(ReturnUrl, true);
                //Module failed to load
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="UserRestored">
          <declaration><![CDATA[private void UserRestored(object sender, UserUserControlBase.UserRestoredEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="929" sc="9" el="939" ec="10">DesktopModules\Admin\Security\ManageUsers.ascx.cs</location>
            <body hash="cea346c7f900790935d0a9ed34406638"><![CDATA[{
            try
            {
                Response.Redirect(ReturnUrl, true);
                //Module failed to load
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="UserUpdateCompleted">
          <declaration><![CDATA[private void UserUpdateCompleted(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="955" sc="9" el="958" ec="10">DesktopModules\Admin\Security\ManageUsers.ascx.cs</location>
            <body hash="03f14ac8b3597f0f9c6206dc79edbfe2"><![CDATA[{
            Response.Redirect(Request.RawUrl, false);
            HttpContext.Current.ApplicationInstance.CompleteRequest();
        }]]></body>
          </codeblock>
        </method>
        <method name="UserUpdateError">
          <declaration><![CDATA[private void UserUpdateError(object sender, UserUserControlBase.UserUpdateErrorArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="967" sc="9" el="969" ec="10">DesktopModules\Admin\Security\ManageUsers.ascx.cs</location>
            <body hash="dbb34a7f7bd43b3eb26dfd285ff4230f"><![CDATA[{
            AddModuleMessage(e.Message, ModuleMessage.ModuleMessageType.RedError, true);
        }]]></body>
          </codeblock>
        </method>
        <method name="VerifyUserPermissions">
          <declaration><![CDATA[private bool VerifyUserPermissions()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="289" sc="9" el="346" ec="10">DesktopModules\Admin\Security\ManageUsers.ascx.cs</location>
            <body hash="009aca9402aaf6b09e0e7533c2d96b28"><![CDATA[{
            if (AddUser && IsHostMenu && !UserInfo.IsSuperUser)
            {
                AddModuleMessage("NoUser", ModuleMessage.ModuleMessageType.YellowWarning, true);
                DisableForm();
                return false;
            }
				
            //Check if User is a member of the Current Portal (or a member of the MasterPortal if PortalGroups enabled)
            if (User.PortalID != Null.NullInteger && User.PortalID != PortalId)
            {
                AddModuleMessage("InvalidUser", ModuleMessage.ModuleMessageType.YellowWarning, true);
                DisableForm();
                return false;
            }
				
            //Check if User is a SuperUser and that the current User is a SuperUser
            if (User.IsSuperUser && !UserInfo.IsSuperUser)
            {
                AddModuleMessage("NoUser", ModuleMessage.ModuleMessageType.YellowWarning, true);
                DisableForm();
                return false;
            }
            if (IsEdit)
            {
                //Check if user has admin rights
                if (!IsAdmin || (User.IsInRole(PortalSettings.AdministratorRoleName) && !PortalSecurity.IsInRole(PortalSettings.AdministratorRoleName)))
                {
                    AddModuleMessage("NotAuthorized", ModuleMessage.ModuleMessageType.YellowWarning, true);
                    DisableForm();
                    return false;
                }
            }
            else
            {
                if (Request.IsAuthenticated)
                {
                    if (!PortalSecurity.IsInRole(PortalSettings.AdministratorRoleName) )
                    {
                        if (HasManageUsersModulePermission() == false)
                        {
                            //Display current user's profile
                            Response.Redirect(Globals.NavigateURL(PortalSettings.UserTabId, "", "UserID=" + UserInfo.UserID), true);
                        }
                    }
                }
                else
                {
                    if ((User.UserID > Null.NullInteger))
                    {
                        AddModuleMessage("NotAuthorized", ModuleMessage.ModuleMessageType.YellowWarning, true);
                        DisableForm();
                        return false;
                    }
                }
            }
            return true;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="actionsRow">
          <declaration><![CDATA[protected HtmlGenericControl actionsRow;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="adminTabNav">
          <declaration><![CDATA[protected HtmlGenericControl adminTabNav;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdAdd">
          <declaration><![CDATA[protected LinkButton cmdAdd;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdCancel">
          <declaration><![CDATA[protected LinkButton cmdCancel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ctlMembership">
          <declaration><![CDATA[protected Membership ctlMembership;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ctlPassword">
          <declaration><![CDATA[protected Password ctlPassword;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ctlProfile">
          <declaration><![CDATA[protected DNNProfile ctlProfile;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ctlRoles">
          <declaration><![CDATA[protected SecurityRoles ctlRoles;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ctlUser">
          <declaration><![CDATA[protected User ctlUser;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="dnnManageUsers">
          <declaration><![CDATA[protected HtmlGenericControl dnnManageUsers;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="dnnPasswordDetails">
          <declaration><![CDATA[protected HtmlGenericControl dnnPasswordDetails;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="dnnProfileDetails">
          <declaration><![CDATA[protected Panel dnnProfileDetails;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="dnnRoleDetails">
          <declaration><![CDATA[protected HtmlGenericControl dnnRoleDetails;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="helpRow">
          <declaration><![CDATA[protected HtmlGenericControl helpRow;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="imgLockedOut">
          <declaration><![CDATA[protected DnnImage imgLockedOut;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="imgOnline">
          <declaration><![CDATA[protected DnnImage imgOnline;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblTitle">
          <declaration><![CDATA[protected Label lblTitle;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblUserHelp">
          <declaration><![CDATA[protected Label lblUserHelp;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="loginLink">
          <declaration><![CDATA[protected HyperLink loginLink;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="membershipRow">
          <declaration><![CDATA[protected HtmlGenericControl membershipRow;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="passwordTab">
          <declaration><![CDATA[protected HtmlGenericControl passwordTab;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="rolesTab">
          <declaration><![CDATA[protected HtmlGenericControl rolesTab;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="titleRow">
          <declaration><![CDATA[protected HtmlGenericControl titleRow;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="userContainer">
          <declaration><![CDATA[protected Panel userContainer;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="userRow">
          <declaration><![CDATA[protected HtmlGenericControl userRow;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="DisplayServices">
          <declaration><![CDATA[protected bool DisplayServices]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="66" sc="13" el="69" ec="14">DesktopModules\Admin\Security\ManageUsers.ascx.cs</location>
            <body hash="83f59ce4ed648eb2fd72980c234020cb"><![CDATA[{
                object setting = GetSetting(PortalId, "Profile_ManageServices");
                return Convert.ToBoolean(setting) && !(IsEdit || User.IsSuperUser);
            }]]></body>
          </codeblock>
        </property>
        <property name="ModuleActions">
          <declaration><![CDATA[public ModuleActionCollection ModuleActions]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="186" sc="13" el="228" ec="14">DesktopModules\Admin\Security\ManageUsers.ascx.cs</location>
            <body hash="46c429f943ac142e64ad9403cb67094a"><![CDATA[{
                var Actions = new ModuleActionCollection();
                if (!IsProfile)
                {
                    if (!AddUser && !IsEdit)
                    {
                        Actions.Add(GetNextActionID(),
                                    Localization.GetString(ModuleActionType.AddContent, LocalResourceFile),
                                    ModuleActionType.AddContent,
                                    "",
                                    "add.gif",
                                    EditUrl(),
                                    false,
                                    SecurityAccessLevel.Admin,
                                    true,
                                    false);
                        if (ProfileProviderConfig.CanEditProviderProperties)
                        {
                            Actions.Add(GetNextActionID(),
                                        Localization.GetString("ManageProfile.Action", LocalResourceFile),
                                        ModuleActionType.AddContent,
                                        "",
                                        "icon_profile_16px.gif",
                                        EditUrl("ManageProfile"),
                                        false,
                                        SecurityAccessLevel.Admin,
                                        true,
                                        false);
                        }
                        Actions.Add(GetNextActionID(),
                                    Localization.GetString("Cancel.Action", LocalResourceFile),
                                    ModuleActionType.AddContent,
                                    "",
                                    "lt.gif",
                                    ReturnUrl,
                                    false,
                                    SecurityAccessLevel.Admin,
                                    true,
                                    false);
                    }
                }
                return Actions;
            }]]></body>
          </codeblock>
        </property>
        <property name="PageNo">
          <declaration><![CDATA[public int PageNo]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="165" sc="13" el="172" ec="14">DesktopModules\Admin\Security\ManageUsers.ascx.cs</location>
            <body hash="d2791811541ca3eb4c473299b899bb7e"><![CDATA[{
                int _PageNo = 0;
                if (ViewState["PageNo"] != null && !IsPostBack)
                {
                    _PageNo = Convert.ToInt32(ViewState["PageNo"]);
                }
                return _PageNo;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="174" sc="13" el="176" ec="14">DesktopModules\Admin\Security\ManageUsers.ascx.cs</location>
            <body hash="ce992fd07f483cfce68e5f8558df4b03"><![CDATA[{
                ViewState["PageNo"] = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="RedirectURL">
          <declaration><![CDATA[protected string RedirectURL]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="79" sc="13" el="111" ec="14">DesktopModules\Admin\Security\ManageUsers.ascx.cs</location>
            <body hash="8f47722b05451d9a7bb0e6b34c227555"><![CDATA[{
                string _RedirectURL = "";

				if (PortalSettings.Registration.RedirectAfterRegistration == Null.NullInteger)
                {
                    if (Request.QueryString["returnurl"] != null)
                    {
						//return to the url passed to register
                        _RedirectURL = HttpUtility.UrlDecode(Request.QueryString["returnurl"]);

                        //clean the return url to avoid possible XSS attack.
                        _RedirectURL = UrlUtils.ValidReturnUrl(_RedirectURL);

                        if (_RedirectURL.Contains("?returnurl"))
                        {
                            string baseURL = _RedirectURL.Substring(0, _RedirectURL.IndexOf("?returnurl"));
                            string returnURL = _RedirectURL.Substring(_RedirectURL.IndexOf("?returnurl") + 11);

                            _RedirectURL = string.Concat(baseURL, "?returnurl", HttpUtility.UrlEncode(returnURL));
                        }
                    }
                    if (String.IsNullOrEmpty(_RedirectURL))
                    {
						//redirect to current page 
                        _RedirectURL = Globals.NavigateURL();
                    }
                }
                else //redirect to after registration page
                {
					_RedirectURL = Globals.NavigateURL(PortalSettings.Registration.RedirectAfterRegistration);
                }
                return _RedirectURL;
            }]]></body>
          </codeblock>
        </property>
        <property name="ReturnUrl">
          <declaration><![CDATA[protected string ReturnUrl]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="121" sc="13" el="123" ec="14">DesktopModules\Admin\Security\ManageUsers.ascx.cs</location>
            <body hash="d0232d91d812af59558316c0360d79e3"><![CDATA[{
                return Globals.NavigateURL(TabId, "", !String.IsNullOrEmpty(UserFilter) ? UserFilter : "");
            }]]></body>
          </codeblock>
        </property>
        <property name="UserFilter">
          <declaration><![CDATA[protected string UserFilter]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="133" sc="13" el="151" ec="14">DesktopModules\Admin\Security\ManageUsers.ascx.cs</location>
            <body hash="45824ccf213085ea5affa3c6ced1940b"><![CDATA[{
                string filterString = !string.IsNullOrEmpty(Request["filter"]) ? "filter=" + Request["filter"] : "";
                string filterProperty = !string.IsNullOrEmpty(Request["filterproperty"]) ? "filterproperty=" + Request["filterproperty"] : "";
                string page = !string.IsNullOrEmpty(Request["currentpage"]) ? "currentpage=" + Request["currentpage"] : "";

                if (!string.IsNullOrEmpty(filterString))
                {
                    filterString += "&";
                }
                if (!string.IsNullOrEmpty(filterProperty))
                {
                    filterString += filterProperty + "&";
                }
                if (!string.IsNullOrEmpty(page))
                {
                    filterString += page;
                }
                return filterString;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="Membership">
      <declaration><![CDATA[public class Membership : UserModuleBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public Membership()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="add_MembershipAuthorized">
          <declaration><![CDATA[public void add_MembershipAuthorized(EventHandler value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="add_MembershipDemoteFromSuperuser">
          <declaration><![CDATA[public void add_MembershipDemoteFromSuperuser(EventHandler value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="add_MembershipPasswordUpdateChanged">
          <declaration><![CDATA[public void add_MembershipPasswordUpdateChanged(EventHandler value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="add_MembershipPromoteToSuperuser">
          <declaration><![CDATA[public void add_MembershipPromoteToSuperuser(EventHandler value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="add_MembershipUnAuthorized">
          <declaration><![CDATA[public void add_MembershipUnAuthorized(EventHandler value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="add_MembershipUnLocked">
          <declaration><![CDATA[public void add_MembershipUnLocked(EventHandler value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="cmdAuthorize_Click">
          <declaration><![CDATA[private void cmdAuthorize_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="293" sc="9" el="315" ec="10">DesktopModules\Admin\Security\Membership.ascx.cs</location>
            <body hash="b9265be7e0a66198edd68782d103af3d"><![CDATA[{
            if (IsUserOrAdmin == false)
            {
                return;
            }
            if (Request.IsAuthenticated != true) return;

			//Get the Membership Information from the property editors
            User.Membership = (UserMembership)membershipForm.DataSource;

            User.Membership.Approved = true;

            //Update User
            UserController.UpdateUser(PortalId, User);

            //Update User Roles if needed
            if (!User.IsSuperUser && User.IsInRole("Unverified Users") && PortalSettings.UserRegistration == (int)Common.Globals.PortalRegistrationType.VerifiedRegistration)
            {
                UserController.ApproveUser(User);
            }

            OnMembershipAuthorized(EventArgs.Empty);
        }]]></body>
          </codeblock>
        </method>
        <method name="cmdPassword_Click">
          <declaration><![CDATA[private void cmdPassword_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="323" sc="9" el="354" ec="10">DesktopModules\Admin\Security\Membership.ascx.cs</location>
            <body hash="87d3e6b5071f0646f51bf7284311561a"><![CDATA[{
            if (IsUserOrAdmin == false)
            {
                return;
            }
            if (Request.IsAuthenticated != true) return;

            if (MembershipProviderConfig.PasswordRetrievalEnabled || MembershipProviderConfig.PasswordResetEnabled)
            {
                UserController.ResetPasswordToken(User);
            }
            bool canSend = Mail.SendMail(User, MessageType.PasswordReminder, PortalSettings) == string.Empty;
            var message = String.Empty;
            if (canSend)
            {
                //Get the Membership Information from the property editors
                User.Membership = (UserMembership)membershipForm.DataSource;

                User.Membership.UpdatePassword = true;

                //Update User
                UserController.UpdateUser(PortalId, User);

                OnMembershipPasswordUpdateChanged(EventArgs.Empty); 
            }
            else
            {
                message = Localization.GetString("OptionUnavailable", LocalResourceFile);
                UI.Skins.Skin.AddModuleMessage(this, message, ModuleMessage.ModuleMessageType.YellowWarning);
            }
			
        }]]></body>
          </codeblock>
        </method>
        <method name="cmdToggleSuperuser_Click">
          <declaration><![CDATA[private void cmdToggleSuperuser_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="385" sc="9" el="409" ec="10">DesktopModules\Admin\Security\Membership.ascx.cs</location>
            <body hash="f2e30f7fb227b02dac42dd830f70640b"><![CDATA[{
            if (IsUserOrAdmin == false)
            {
                return;
            }
            if (Request.IsAuthenticated != true) return;
            ////ensure only superusers can change user superuser state
            if (UserController.Instance.GetCurrentUserInfo().IsSuperUser != true) return;
            
            var currentSuperUserState = User.IsSuperUser;
            User.IsSuperUser = !currentSuperUserState;
            //Update User
            UserController.UpdateUser(PortalId, User);
            DataCache.ClearCache();
   
            if (currentSuperUserState)
            {
                OnMembershipDemoteFromSuperuser(EventArgs.Empty);
            }
            else
            {
                OnMembershipPromoteToSuperuser(EventArgs.Empty);
            }

        }]]></body>
          </codeblock>
        </method>
        <method name="cmdUnAuthorize_Click">
          <declaration><![CDATA[private void cmdUnAuthorize_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="362" sc="9" el="378" ec="10">DesktopModules\Admin\Security\Membership.ascx.cs</location>
            <body hash="ba1dcfd2f4271018d426f347d0cbebc0"><![CDATA[{
            if (IsUserOrAdmin == false)
            {
                return;
            }
            if (Request.IsAuthenticated != true) return;

			//Get the Membership Information from the property editors
            User.Membership = (UserMembership)membershipForm.DataSource;

            User.Membership.Approved = false;

            //Update User
            UserController.UpdateUser(PortalId, User);

            OnMembershipUnAuthorized(EventArgs.Empty);
        }]]></body>
          </codeblock>
        </method>
        <method name="cmdUnLock_Click">
          <declaration><![CDATA[private void cmdUnLock_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="416" sc="9" el="432" ec="10">DesktopModules\Admin\Security\Membership.ascx.cs</location>
            <body hash="012c08d2331703b331a407bcaed676db"><![CDATA[{
            if (IsUserOrAdmin == false)
            {
                return;
            }
            if (Request.IsAuthenticated != true) return;

			//update the user record in the database
            bool isUnLocked = UserController.UnLockUser(User);

            if (isUnLocked)
            {
                User.Membership.LockedOut = false;

                OnMembershipUnLocked(EventArgs.Empty);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="DataBind">
          <declaration><![CDATA[public override void DataBind()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="208" sc="9" el="262" ec="10">DesktopModules\Admin\Security\Membership.ascx.cs</location>
            <body hash="918049c2a6390ce6e80857dc405e9e55"><![CDATA[{
			//disable/enable buttons
            if (UserInfo.UserID == User.UserID)
            {
                cmdAuthorize.Visible = false;
                cmdUnAuthorize.Visible = false;
                cmdUnLock.Visible = false;
                cmdPassword.Visible = false;
            }
            else
            {
                cmdUnLock.Visible = UserMembership.LockedOut;
                cmdUnAuthorize.Visible = UserMembership.Approved && !User.IsInRole("Unverified Users");
                cmdAuthorize.Visible = !UserMembership.Approved || User.IsInRole("Unverified Users");
                cmdPassword.Visible = !UserMembership.UpdatePassword;
            }
            if (UserController.Instance.GetCurrentUserInfo().IsSuperUser && UserController.Instance.GetCurrentUserInfo().UserID!=User.UserID)
            {
                cmdToggleSuperuser.Visible = true;
               
                if (User.IsSuperUser)
                {
                    cmdToggleSuperuser.Text = Localization.GetString("DemoteFromSuperUser", LocalResourceFile);
                }
                else
                {
                    cmdToggleSuperuser.Text = Localization.GetString("PromoteToSuperUser", LocalResourceFile);
                }
                if (PortalController.GetPortalsByUser(User.UserID).Count == 0)
                {
                    cmdToggleSuperuser.Visible = false;
                }
            }
            lastLockoutDate.Value = UserMembership.LastLockoutDate.Year > 2000 
                                        ? (object) UserMembership.LastLockoutDate 
                                        : LocalizeString("Never");
            // ReSharper disable SpecifyACultureInStringConversionExplicitly
            isOnLine.Value = LocalizeString(UserMembership.IsOnLine.ToString());
            lockedOut.Value = LocalizeString(UserMembership.LockedOut.ToString());
            approved.Value = LocalizeString(UserMembership.Approved.ToString());
            updatePassword.Value = LocalizeString(UserMembership.UpdatePassword.ToString());
            isDeleted.Value = LocalizeString(UserMembership.IsDeleted.ToString());
            
            //show the user folder path without default parent folder, and only visible to admin.
            userFolder.Visible = UserInfo.IsInRole(PortalSettings.AdministratorRoleName);
            if (userFolder.Visible)
            {
                userFolder.Value = FolderManager.Instance.GetUserFolder(User).FolderPath.Substring(6);
            }

            // ReSharper restore SpecifyACultureInStringConversionExplicitly

            membershipForm.DataSource = UserMembership;
            membershipForm.DataBind();
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="276" sc="9" el="284" ec="10">DesktopModules\Admin\Security\Membership.ascx.cs</location>
            <body hash="4a2656678510903820f5e46938222489"><![CDATA[{
            base.OnLoad(e);

            cmdAuthorize.Click += cmdAuthorize_Click;
            cmdPassword.Click += cmdPassword_Click;
            cmdUnAuthorize.Click += cmdUnAuthorize_Click;
            cmdUnLock.Click += cmdUnLock_Click;
            cmdToggleSuperuser.Click+=cmdToggleSuperuser_Click;
        }]]></body>
          </codeblock>
        </method>
        <method name="OnMembershipAuthorized">
          <declaration><![CDATA[public void OnMembershipAuthorized(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="136" sc="9" el="145" ec="10">DesktopModules\Admin\Security\Membership.ascx.cs</location>
            <body hash="8dbd361d11a4e4be8402ccad9ff18651"><![CDATA[{
            if (IsUserOrAdmin == false)
            {
                return;
            }
            if (MembershipAuthorized != null)
            {
                MembershipAuthorized(this, e);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnMembershipDemoteFromSuperuser">
          <declaration><![CDATA[public void OnMembershipDemoteFromSuperuser(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="117" sc="9" el="127" ec="10">DesktopModules\Admin\Security\Membership.ascx.cs</location>
            <body hash="80c590e49be056083922a5503be51934"><![CDATA[{
            if (IsUserOrAdmin == false)
            {
                return;
            }
            if (MembershipDemoteFromSuperuser != null)
            {
                MembershipDemoteFromSuperuser(this, e);
                Response.Redirect(Globals.NavigateURL(), true);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnMembershipPasswordUpdateChanged">
          <declaration><![CDATA[public void OnMembershipPasswordUpdateChanged(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="153" sc="9" el="162" ec="10">DesktopModules\Admin\Security\Membership.ascx.cs</location>
            <body hash="22c74f3743a85cd2545e07de86f56bc2"><![CDATA[{
            if (IsUserOrAdmin == false)
            {
                return;
            }
            if (MembershipPasswordUpdateChanged != null)
            {
                MembershipPasswordUpdateChanged(this, e);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnMembershipPromoteToSuperuser">
          <declaration><![CDATA[public void OnMembershipPromoteToSuperuser(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="99" sc="9" el="109" ec="10">DesktopModules\Admin\Security\Membership.ascx.cs</location>
            <body hash="068d4fdfeb0f191921feedf57b711d2d"><![CDATA[{
            if (IsUserOrAdmin == false)
            {
                return;
            }
            if (MembershipPromoteToSuperuser != null)
            {
                MembershipPromoteToSuperuser(this, e);
                Response.Redirect(Globals.NavigateURL(), true);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnMembershipUnAuthorized">
          <declaration><![CDATA[public void OnMembershipUnAuthorized(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="170" sc="9" el="179" ec="10">DesktopModules\Admin\Security\Membership.ascx.cs</location>
            <body hash="83a147e6b6878090d6b6f149b0f8b8a4"><![CDATA[{
            if (IsUserOrAdmin == false)
            {
                return;
            }
            if (MembershipUnAuthorized != null)
            {
                MembershipUnAuthorized(this, e);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnMembershipUnLocked">
          <declaration><![CDATA[public void OnMembershipUnLocked(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="187" sc="9" el="196" ec="10">DesktopModules\Admin\Security\Membership.ascx.cs</location>
            <body hash="8aa4dcdc19c3eb9021f9f50b12655cc2"><![CDATA[{
            if (IsUserOrAdmin == false)
            {
                return;
            }
            if (MembershipUnLocked != null)
            {
                MembershipUnLocked(this, e);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="remove_MembershipAuthorized">
          <declaration><![CDATA[public void remove_MembershipAuthorized(EventHandler value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="remove_MembershipDemoteFromSuperuser">
          <declaration><![CDATA[public void remove_MembershipDemoteFromSuperuser(EventHandler value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="remove_MembershipPasswordUpdateChanged">
          <declaration><![CDATA[public void remove_MembershipPasswordUpdateChanged(EventHandler value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="remove_MembershipPromoteToSuperuser">
          <declaration><![CDATA[public void remove_MembershipPromoteToSuperuser(EventHandler value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="remove_MembershipUnAuthorized">
          <declaration><![CDATA[public void remove_MembershipUnAuthorized(EventHandler value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="remove_MembershipUnLocked">
          <declaration><![CDATA[public void remove_MembershipUnLocked(EventHandler value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="actionsRow">
          <declaration><![CDATA[protected HtmlGenericControl actionsRow;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="approved">
          <declaration><![CDATA[protected DnnFormLiteralItem approved;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdAuthorize">
          <declaration><![CDATA[protected LinkButton cmdAuthorize;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdPassword">
          <declaration><![CDATA[protected LinkButton cmdPassword;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdToggleSuperuser">
          <declaration><![CDATA[protected LinkButton cmdToggleSuperuser;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdUnAuthorize">
          <declaration><![CDATA[protected LinkButton cmdUnAuthorize;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdUnLock">
          <declaration><![CDATA[protected LinkButton cmdUnLock;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="createdDate">
          <declaration><![CDATA[protected DnnFormLiteralItem createdDate;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="isDeleted">
          <declaration><![CDATA[protected DnnFormLiteralItem isDeleted;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="isOnLine">
          <declaration><![CDATA[protected DnnFormLiteralItem isOnLine;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lastActivityDate">
          <declaration><![CDATA[protected DnnFormLiteralItem lastActivityDate;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lastLockoutDate">
          <declaration><![CDATA[protected DnnFormLiteralItem lastLockoutDate;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lastLoginDate">
          <declaration><![CDATA[protected DnnFormLiteralItem lastLoginDate;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lastPasswordChangeDate">
          <declaration><![CDATA[protected DnnFormLiteralItem lastPasswordChangeDate;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lockedOut">
          <declaration><![CDATA[protected DnnFormLiteralItem lockedOut;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="MembershipAuthorized">
          <declaration><![CDATA[private EventHandler MembershipAuthorized;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="MembershipDemoteFromSuperuser">
          <declaration><![CDATA[private EventHandler MembershipDemoteFromSuperuser;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="membershipForm">
          <declaration><![CDATA[protected DnnFormEditor membershipForm;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="MembershipPasswordUpdateChanged">
          <declaration><![CDATA[private EventHandler MembershipPasswordUpdateChanged;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="MembershipPromoteToSuperuser">
          <declaration><![CDATA[private EventHandler MembershipPromoteToSuperuser;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="MembershipUnAuthorized">
          <declaration><![CDATA[private EventHandler MembershipUnAuthorized;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="MembershipUnLocked">
          <declaration><![CDATA[private EventHandler MembershipUnLocked;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="updatePassword">
          <declaration><![CDATA[protected DnnFormLiteralItem updatePassword;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="userFolder">
          <declaration><![CDATA[protected DnnFormLiteralItem userFolder;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="UserMembership">
          <declaration><![CDATA[public UserMembership UserMembership]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="62" sc="13" el="69" ec="14">DesktopModules\Admin\Security\Membership.ascx.cs</location>
            <body hash="be33e3812159c9a63c8945582165e734"><![CDATA[{
                UserMembership membership = null;
                if (User != null)
                {
                    membership = User.Membership;
                }
                return membership;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
        <event name="MembershipAuthorized">
          <declaration><![CDATA[public event EventHandler MembershipAuthorized;]]></declaration>
          <documentation>
          </documentation>
        </event>
        <event name="MembershipDemoteFromSuperuser">
          <declaration><![CDATA[public event EventHandler MembershipDemoteFromSuperuser;]]></declaration>
          <documentation>
          </documentation>
        </event>
        <event name="MembershipPasswordUpdateChanged">
          <declaration><![CDATA[public event EventHandler MembershipPasswordUpdateChanged;]]></declaration>
          <documentation>
          </documentation>
        </event>
        <event name="MembershipPromoteToSuperuser">
          <declaration><![CDATA[public event EventHandler MembershipPromoteToSuperuser;]]></declaration>
          <documentation>
          </documentation>
        </event>
        <event name="MembershipUnAuthorized">
          <declaration><![CDATA[public event EventHandler MembershipUnAuthorized;]]></declaration>
          <documentation>
          </documentation>
        </event>
        <event name="MembershipUnLocked">
          <declaration><![CDATA[public event EventHandler MembershipUnLocked;]]></declaration>
          <documentation>
          </documentation>
        </event>
      </events>
    </class>
    <class name="Password">
      <declaration><![CDATA[public class Password : UserModuleBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public Password()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
        <constructor name=".cctor">
          <declaration><![CDATA[static Password()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="62" sc="6" el="62" ec="95">DesktopModules\Admin\Security\Password.ascx.cs</location>
            <body hash="942d7fcea06df8bf33578a6542b514c1"><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof (Password))]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="add_PasswordQuestionAnswerUpdated">
          <declaration><![CDATA[public void add_PasswordQuestionAnswerUpdated(Password.PasswordUpdatedEventHandler value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="add_PasswordUpdated">
          <declaration><![CDATA[public void add_PasswordUpdated(Password.PasswordUpdatedEventHandler value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="cmdReset_Click">
          <declaration><![CDATA[private void cmdReset_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="342" sc="9" el="390" ec="10">DesktopModules\Admin\Security\Password.ascx.cs</location>
            <body hash="3b4f336a988bd43f9971cb0bf3015b0f"><![CDATA[{
            if (IsUserOrAdmin == false)
            {
                return;
            }
            string answer = "";
            if (MembershipProviderConfig.RequiresQuestionAndAnswer && !IsAdmin)
            {
                if (String.IsNullOrEmpty(txtAnswer.Text))
                {
                    OnPasswordUpdated(new PasswordUpdatedEventArgs(PasswordUpdateStatus.InvalidPasswordAnswer));
                    return;
                }
                answer = txtAnswer.Text;
            }
            try
            {
                //create resettoken
                UserController.ResetPasswordToken(User, Entities.Host.Host.AdminMembershipResetLinkValidity);

                bool canSend = Mail.SendMail(User, MessageType.PasswordReminder, PortalSettings) == string.Empty;
                var message = String.Empty;
                var moduleMessageType = ModuleMessage.ModuleMessageType.GreenSuccess;
                if (canSend)
                {
                    message = Localization.GetString("PasswordSent", LocalResourceFile);
                    LogSuccess();
                }
                else
                {
                    message = Localization.GetString("OptionUnavailable", LocalResourceFile);
                    moduleMessageType=ModuleMessage.ModuleMessageType.RedError;
                    LogFailure(message);
                }

               
                UI.Skins.Skin.AddModuleMessage(this, message, moduleMessageType);
            }
            catch (ArgumentException exc)
            {
                Logger.Error(exc);
                OnPasswordUpdated(new PasswordUpdatedEventArgs(PasswordUpdateStatus.InvalidPasswordAnswer));
            }
            catch (Exception exc)
            {
                Logger.Error(exc);
                OnPasswordUpdated(new PasswordUpdatedEventArgs(PasswordUpdateStatus.PasswordResetFailed));
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="cmdUpdate_Click">
          <declaration><![CDATA[private void cmdUpdate_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="464" sc="9" el="580" ec="10">DesktopModules\Admin\Security\Password.ascx.cs</location>
            <body hash="aa7c71e4cf61c6603ad4da4250a9f2db"><![CDATA[{
            if ((UseCaptcha && ctlCaptcha.IsValid) || !UseCaptcha)
            {
                if (IsUserOrAdmin == false)
                {
                    return;
                }
                //1. Check New Password and Confirm are the same
                if (txtNewPassword.Text != txtNewConfirm.Text)
                {
                    OnPasswordUpdated(new PasswordUpdatedEventArgs(PasswordUpdateStatus.PasswordMismatch));
                    return;
                }

                //2. Check New Password is Valid
                if (!UserController.ValidatePassword(txtNewPassword.Text))
                {
                    OnPasswordUpdated(new PasswordUpdatedEventArgs(PasswordUpdateStatus.PasswordInvalid));
                    return;
                }

                //3. Check old Password is Provided
                if (!IsAdmin && String.IsNullOrEmpty(txtOldPassword.Text))
                {
                    OnPasswordUpdated(new PasswordUpdatedEventArgs(PasswordUpdateStatus.PasswordMissing));
                    return;
                }

                //4. Check New Password is ddifferent
                if (!IsAdmin && txtNewPassword.Text == txtOldPassword.Text)
                {
                    OnPasswordUpdated(new PasswordUpdatedEventArgs(PasswordUpdateStatus.PasswordNotDifferent));
                    return;
                }
                //5. Check New Password is not same as username or banned
				var membershipPasswordController = new MembershipPasswordController();
                var settings = new MembershipPasswordSettings(User.PortalID);

                if (settings.EnableBannedList)
                {
					if (membershipPasswordController.FoundBannedPassword(txtNewPassword.Text) || User.Username == txtNewPassword.Text)
                    {
                        OnPasswordUpdated(new PasswordUpdatedEventArgs(PasswordUpdateStatus.BannedPasswordUsed));
                        return;
                    }

                }

				//check new password is not in history
				if (membershipPasswordController.IsPasswordInHistory(User.UserID, User.PortalID, txtNewPassword.Text, false))
				{
					OnPasswordUpdated(new PasswordUpdatedEventArgs(PasswordUpdateStatus.PasswordResetFailed));
					return;
				}

                if (!IsAdmin && txtNewPassword.Text == txtOldPassword.Text)
                {
                    OnPasswordUpdated(new PasswordUpdatedEventArgs(PasswordUpdateStatus.PasswordNotDifferent));
                    return;
                }

                if (!IsAdmin)
                {
                    try
                    {
                        OnPasswordUpdated(UserController.ChangePassword(User, txtOldPassword.Text, txtNewPassword.Text)
                                              ? new PasswordUpdatedEventArgs(PasswordUpdateStatus.Success)
                                              : new PasswordUpdatedEventArgs(PasswordUpdateStatus.PasswordResetFailed));
                    }
                    catch (MembershipPasswordException exc)
                    {
                        //Password Answer missing
                        Logger.Error(exc);

                        OnPasswordUpdated(new PasswordUpdatedEventArgs(PasswordUpdateStatus.InvalidPasswordAnswer));
                    }
                    catch (ThreadAbortException)
                    {
                        //Do nothing we are not logging ThreadAbortxceptions caused by redirects    
                    }
                    catch (Exception exc)
                    {
                        //Fail
                        Logger.Error(exc);

                        OnPasswordUpdated(new PasswordUpdatedEventArgs(PasswordUpdateStatus.PasswordResetFailed));
                    }
                }
                else
                {
                    try
                    {
                        OnPasswordUpdated(UserController.ResetAndChangePassword(User, txtNewPassword.Text)
                                              ? new PasswordUpdatedEventArgs(PasswordUpdateStatus.Success)
                                              : new PasswordUpdatedEventArgs(PasswordUpdateStatus.PasswordResetFailed));
                    }
                    catch (MembershipPasswordException exc)
                    {
                        //Password Answer missing
                        Logger.Error(exc);

                        OnPasswordUpdated(new PasswordUpdatedEventArgs(PasswordUpdateStatus.InvalidPasswordAnswer));
                    }
                    catch (ThreadAbortException)
                    {
                        //Do nothing we are not logging ThreadAbortxceptions caused by redirects    
                    }
                    catch (Exception exc)
                    {
                        //Fail
                        Logger.Error(exc);

                        OnPasswordUpdated(new PasswordUpdatedEventArgs(PasswordUpdateStatus.PasswordResetFailed));
                    }
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="cmdUpdateQA_Click">
          <declaration><![CDATA[private void cmdUpdateQA_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="589" sc="9" el="615" ec="10">DesktopModules\Admin\Security\Password.ascx.cs</location>
            <body hash="57df99142cd26b78ff1f27d836dde50e"><![CDATA[{
            if (IsUserOrAdmin == false)
            {
                return;
            }
            if (String.IsNullOrEmpty(txtQAPassword.Text))
            {
                OnPasswordQuestionAnswerUpdated(new PasswordUpdatedEventArgs(PasswordUpdateStatus.PasswordInvalid));
                return;
            }
            if (String.IsNullOrEmpty(txtEditQuestion.Text))
            {
                OnPasswordQuestionAnswerUpdated(new PasswordUpdatedEventArgs(PasswordUpdateStatus.InvalidPasswordQuestion));
                return;
            }
            if (String.IsNullOrEmpty(txtEditAnswer.Text))
            {
                OnPasswordQuestionAnswerUpdated(new PasswordUpdatedEventArgs(PasswordUpdateStatus.InvalidPasswordAnswer));
                return;
            }
			
            //Try and set password Q and A
            UserInfo objUser = UserController.GetUserById(PortalId, UserId);
            OnPasswordQuestionAnswerUpdated(UserController.ChangePasswordQuestionAndAnswer(objUser, txtQAPassword.Text, txtEditQuestion.Text, txtEditAnswer.Text)
                                                ? new PasswordUpdatedEventArgs(PasswordUpdateStatus.Success)
                                                : new PasswordUpdatedEventArgs(PasswordUpdateStatus.PasswordResetFailed));
        }]]></body>
          </codeblock>
        </method>
        <method name="cmdUserReset_Click">
          <declaration><![CDATA[private void cmdUserReset_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="393" sc="9" el="426" ec="10">DesktopModules\Admin\Security\Password.ascx.cs</location>
            <body hash="54d7c41e4e901725c21331587beb59f9"><![CDATA[{
            try
            {
                //send fresh resettoken copy
                bool canSend = UserController.ResetPasswordToken(User,true);

                var message = String.Empty;
                var moduleMessageType = ModuleMessage.ModuleMessageType.GreenSuccess;
                if (canSend)
                {
                    message = Localization.GetString("PasswordSent", LocalResourceFile);
                    LogSuccess();
                }
                else
                {
                    message = Localization.GetString("OptionUnavailable", LocalResourceFile);
                    moduleMessageType = ModuleMessage.ModuleMessageType.RedError;
                    LogFailure(message);
                }


                UI.Skins.Skin.AddModuleMessage(this, message, moduleMessageType);
            }
            catch (ArgumentException exc)
            {
                Logger.Error(exc);
                OnPasswordUpdated(new PasswordUpdatedEventArgs(PasswordUpdateStatus.InvalidPasswordAnswer));
            }
            catch (Exception exc)
            {
                Logger.Error(exc);
                OnPasswordUpdated(new PasswordUpdatedEventArgs(PasswordUpdateStatus.PasswordResetFailed));
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="DataBind">
          <declaration><![CDATA[public override void DataBind()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="149" sc="9" el="253" ec="10">DesktopModules\Admin\Security\Password.ascx.cs</location>
            <body hash="ec4b1fc15ef6ff19df2cf762175726cf"><![CDATA[{
            lblLastChanged.Text = User.Membership.LastPasswordChangeDate.ToLongDateString();

            //Set Password Expiry Label
            if (User.Membership.UpdatePassword)
            {
                lblExpires.Text = Localization.GetString("ForcedExpiry", LocalResourceFile);
            }
            else
            {
                lblExpires.Text = PasswordConfig.PasswordExpiry > 0 ? User.Membership.LastPasswordChangeDate.AddDays(PasswordConfig.PasswordExpiry).ToLongDateString() : Localization.GetString("NoExpiry", LocalResourceFile);
            }
			
           if (((!MembershipProviderConfig.PasswordRetrievalEnabled) && IsAdmin && (!IsUser)))
            {
                pnlChange.Visible = true;
                cmdUpdate.Visible = true;
                oldPasswordRow.Visible = false;
                lblChangeHelp.Text = Localization.GetString("AdminChangeHelp", LocalResourceFile);
            }
            else
            {
                pnlChange.Visible = true;
                cmdUpdate.Visible = true;
				
				//Set up Change Password
                if (IsAdmin && !IsUser)
                {
                    lblChangeHelp.Text = Localization.GetString("AdminChangeHelp", LocalResourceFile);
                    oldPasswordRow.Visible = false;
                }
                else
                {
                    lblChangeHelp.Text = Localization.GetString("UserChangeHelp", LocalResourceFile);
                    if (Request.IsAuthenticated)
                    {
                        pnlChange.Visible = true;
                        cmdUserReset.Visible = false;
                        cmdUpdate.Visible = true;
                    }
                    else
                    {
                        pnlChange.Visible = false;
                        cmdUserReset.Visible = true;
                        cmdUpdate.Visible = false;
                    }
                }
            }
			
            //If Password Reset is not enabled then only the Admin can reset the 
            //Password, a User must Update
            if (!MembershipProviderConfig.PasswordResetEnabled)
            {
                pnlReset.Visible = false;
                cmdReset.Visible = false;
            }
            else
            {
                pnlReset.Visible = true;
                cmdReset.Visible = true;
				
				//Set up Reset Password
                if (IsAdmin && !IsUser)
                {
                    if (MembershipProviderConfig.RequiresQuestionAndAnswer)
                    {
                        pnlReset.Visible = false;
                        cmdReset.Visible = false;
                    }
                    else
                    {
                        lblResetHelp.Text = Localization.GetString("AdminResetHelp", LocalResourceFile);
                    }
                    questionRow.Visible = false;
                    answerRow.Visible = false;
                }
                else
                {
                    if (MembershipProviderConfig.RequiresQuestionAndAnswer && IsUser)
                    {
                        lblResetHelp.Text = Localization.GetString("UserResetHelp", LocalResourceFile);
                        lblQuestion.Text = User.Membership.PasswordQuestion;
                        questionRow.Visible = true;
                        answerRow.Visible = true;
                    }
                    else
                    {
                        pnlReset.Visible = false;
                        cmdReset.Visible = false;
                    }
                }
            }
			
            //Set up Edit Question and Answer area
            if (MembershipProviderConfig.RequiresQuestionAndAnswer && IsUser)
            {
                pnlQA.Visible = true;
                cmdUpdateQA.Visible = true;
            }
            else
            {
                pnlQA.Visible = false;
                cmdUpdateQA.Visible = false;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="LogFailure">
          <declaration><![CDATA[private void LogFailure(string reason)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="434" sc="9" el="436" ec="10">DesktopModules\Admin\Security\Password.ascx.cs</location>
            <body hash="6ae11ec85f2fbb19f9a679a3e43b8a41"><![CDATA[{
            LogResult(reason);
        }]]></body>
          </codeblock>
        </method>
        <method name="LogResult">
          <declaration><![CDATA[private void LogResult(string message)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="439" sc="9" el="461" ec="10">DesktopModules\Admin\Security\Password.ascx.cs</location>
            <body hash="1ed30a2eace28c7109eff14ecd9ddd89"><![CDATA[{
            var portalSecurity = new PortalSecurity();

            var log = new LogInfo
            {
                LogPortalID = PortalSettings.PortalId,
                LogPortalName = PortalSettings.PortalName,
                LogUserID = UserId,
                LogUserName = portalSecurity.InputFilter(User.Username, PortalSecurity.FilterFlag.NoScripting | PortalSecurity.FilterFlag.NoAngleBrackets | PortalSecurity.FilterFlag.NoMarkup)
            };

            if (string.IsNullOrEmpty(message))
            {
                log.LogTypeKey = "PASSWORD_SENT_SUCCESS";
            }
            else
            {
                log.LogTypeKey = "PASSWORD_SENT_FAILURE";
                log.LogProperties.Add(new LogDetailInfo("Cause", message));
            }

            LogController.Instance.AddLog(log);
        }]]></body>
          </codeblock>
        </method>
        <method name="LogSuccess">
          <declaration><![CDATA[private void LogSuccess()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="429" sc="9" el="431" ec="10">DesktopModules\Admin\Security\Password.ascx.cs</location>
            <body hash="dac4dc755ecca3dcb125aec00a771ee8"><![CDATA[{
            LogResult(string.Empty);
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="260" sc="9" el="281" ec="10">DesktopModules\Admin\Security\Password.ascx.cs</location>
            <body hash="ec3c95274ddbbba186b1c26985582da5"><![CDATA[{
            base.OnLoad(e);
            cmdReset.Click += cmdReset_Click;
            cmdUserReset.Click += cmdUserReset_Click;
            cmdUpdate.Click += cmdUpdate_Click;
            cmdUpdateQA.Click += cmdUpdateQA_Click;

			if (MembershipProviderConfig.RequiresQuestionAndAnswer && User.UserID != UserController.Instance.GetCurrentUserInfo().UserID)
			{
				pnlChange.Visible = false;
			    cmdUpdate.Visible = false;
				CannotChangePasswordMessage.Visible = true;
			}

            if (UseCaptcha)
            {
                captchaRow.Visible = true;
                ctlCaptcha.ErrorMessage = Localization.GetString("InvalidCaptcha", LocalResourceFile);
                ctlCaptcha.Text = Localization.GetString("CaptchaText", LocalResourceFile);
            }
           
        }]]></body>
          </codeblock>
        </method>
        <method name="OnPasswordQuestionAnswerUpdated">
          <declaration><![CDATA[public void OnPasswordQuestionAnswerUpdated(Password.PasswordUpdatedEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="129" sc="9" el="138" ec="10">DesktopModules\Admin\Security\Password.ascx.cs</location>
            <body hash="b519a5a72deb60e0df6030cc3eeee2dc"><![CDATA[{
            if (IsUserOrAdmin == false)
            {
                return;
            }
            if (PasswordQuestionAnswerUpdated != null)
            {
                PasswordQuestionAnswerUpdated(this, e);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnPasswordUpdated">
          <declaration><![CDATA[public void OnPasswordUpdated(Password.PasswordUpdatedEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="113" sc="9" el="122" ec="10">DesktopModules\Admin\Security\Password.ascx.cs</location>
            <body hash="b2fc91efb267e01445b37f69dd8b5bca"><![CDATA[{
            if (IsUserOrAdmin == false)
            {
                return;
            }
            if (PasswordUpdated != null)
            {
                PasswordUpdated(this, e);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnPreRender">
          <declaration><![CDATA[protected override void OnPreRender(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="285" sc="9" el="338" ec="10">DesktopModules\Admin\Security\Password.ascx.cs</location>
            <body hash="b1242366e2034a25a3d444cb799bbc27"><![CDATA[{
            ClientResourceManager.RegisterScript(Page, "~/Resources/Shared/scripts/dnn.jquery.extensions.js");
            ClientResourceManager.RegisterScript(Page, "~/Resources/Shared/scripts/dnn.jquery.tooltip.js");
            ClientResourceManager.RegisterScript(Page, "~/Resources/Shared/scripts/dnn.PasswordStrength.js");
            ClientResourceManager.RegisterScript(Page, "~/DesktopModules/Admin/Security/Scripts/dnn.PasswordComparer.js");

			ClientResourceManager.RegisterStyleSheet(Page, "~/Resources/Shared/stylesheets/dnn.PasswordStrength.css", FileOrder.Css.ResourceCss);

			JavaScript.RequestRegistration(CommonJs.DnnPlugins);

            base.OnPreRender(e);

			if (Host.EnableStrengthMeter)
			{
				passwordContainer.CssClass = "password-strength-container";
				txtNewPassword.CssClass = "password-strength";

				var options = new DnnPaswordStrengthOptions();
				var optionsAsJsonString = Json.Serialize(options);
				var script = string.Format("dnn.initializePasswordStrength('.{0}', {1});{2}", "password-strength", optionsAsJsonString, Environment.NewLine);

				if (ScriptManager.GetCurrent(Page) != null)
				{
					// respect MS AJAX
					ScriptManager.RegisterStartupScript(Page, GetType(), "PasswordStrength", script, true);
				}
				else
				{
					Page.ClientScript.RegisterStartupScript(GetType(), "PasswordStrength", script, true);
				}
			}

			var confirmPasswordOptions = new DnnConfirmPasswordOptions()
			{
				FirstElementSelector = "#" + passwordContainer.ClientID + " input[type=password]",
				SecondElementSelector = ".password-confirm",
				ContainerSelector = ".dnnPassword",
				UnmatchedCssClass = "unmatched",
				MatchedCssClass = "matched"
			};

			var confirmOptionsAsJsonString = Json.Serialize(confirmPasswordOptions);
			var confirmScript = string.Format("dnn.initializePasswordComparer({0});{1}", confirmOptionsAsJsonString, Environment.NewLine);

			if (ScriptManager.GetCurrent(Page) != null)
			{
				// respect MS AJAX
				ScriptManager.RegisterStartupScript(Page, GetType(), "ConfirmPassword", confirmScript, true);
			}
			else
			{
				Page.ClientScript.RegisterStartupScript(GetType(), "ConfirmPassword", confirmScript, true);
			}
        }]]></body>
          </codeblock>
        </method>
        <method name="remove_PasswordQuestionAnswerUpdated">
          <declaration><![CDATA[public void remove_PasswordQuestionAnswerUpdated(Password.PasswordUpdatedEventHandler value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="remove_PasswordUpdated">
          <declaration><![CDATA[public void remove_PasswordUpdated(Password.PasswordUpdatedEventHandler value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="answerRow">
          <declaration><![CDATA[protected HtmlGenericControl answerRow;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="CannotChangePasswordMessage">
          <declaration><![CDATA[protected Panel CannotChangePasswordMessage;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="captchaLabel">
          <declaration><![CDATA[protected LabelControl captchaLabel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="captchaRow">
          <declaration><![CDATA[protected HtmlGenericControl captchaRow;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdReset">
          <declaration><![CDATA[protected LinkButton cmdReset;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdUpdate">
          <declaration><![CDATA[protected LinkButton cmdUpdate;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdUpdateQA">
          <declaration><![CDATA[protected LinkButton cmdUpdateQA;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdUserReset">
          <declaration><![CDATA[protected LinkButton cmdUserReset;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ctlCaptcha">
          <declaration><![CDATA[protected CaptchaControl ctlCaptcha;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblChangeHelp">
          <declaration><![CDATA[protected Label lblChangeHelp;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblChangePasswordHeading">
          <declaration><![CDATA[protected Label lblChangePasswordHeading;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblChangeQA">
          <declaration><![CDATA[protected Label lblChangeQA;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblExpires">
          <declaration><![CDATA[protected Label lblExpires;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblLastChanged">
          <declaration><![CDATA[protected Label lblLastChanged;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblQAHelp">
          <declaration><![CDATA[protected Label lblQAHelp;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblQuestion">
          <declaration><![CDATA[protected Label lblQuestion;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblResetHeading">
          <declaration><![CDATA[protected Label lblResetHeading;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblResetHelp">
          <declaration><![CDATA[protected Label lblResetHelp;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Logger">
          <declaration><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof(Password));]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="oldPasswordRow">
          <declaration><![CDATA[protected HtmlGenericControl oldPasswordRow;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="passwordContainer">
          <declaration><![CDATA[protected Panel passwordContainer;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="PasswordQuestionAnswerUpdated">
          <declaration><![CDATA[private Password.PasswordUpdatedEventHandler PasswordQuestionAnswerUpdated;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="PasswordUpdated">
          <declaration><![CDATA[private Password.PasswordUpdatedEventHandler PasswordUpdated;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plAnswer">
          <declaration><![CDATA[protected LabelControl plAnswer;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plEditAnswer">
          <declaration><![CDATA[protected LabelControl plEditAnswer;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plEditQuestion">
          <declaration><![CDATA[protected LabelControl plEditQuestion;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plExpires">
          <declaration><![CDATA[protected LabelControl plExpires;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plLastChanged">
          <declaration><![CDATA[protected LabelControl plLastChanged;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plNewConfirm">
          <declaration><![CDATA[protected LabelControl plNewConfirm;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plNewPassword">
          <declaration><![CDATA[protected LabelControl plNewPassword;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plOldPassword">
          <declaration><![CDATA[protected LabelControl plOldPassword;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plQAPassword">
          <declaration><![CDATA[protected LabelControl plQAPassword;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plQuestion">
          <declaration><![CDATA[protected LabelControl plQuestion;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="pnlChange">
          <declaration><![CDATA[protected Panel pnlChange;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="pnlQA">
          <declaration><![CDATA[protected Panel pnlQA;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="pnlReset">
          <declaration><![CDATA[protected Panel pnlReset;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="questionRow">
          <declaration><![CDATA[protected HtmlGenericControl questionRow;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtAnswer">
          <declaration><![CDATA[protected TextBox txtAnswer;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtEditAnswer">
          <declaration><![CDATA[protected TextBox txtEditAnswer;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtEditQuestion">
          <declaration><![CDATA[protected TextBox txtEditQuestion;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtNewConfirm">
          <declaration><![CDATA[protected TextBox txtNewConfirm;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtNewPassword">
          <declaration><![CDATA[protected TextBox txtNewPassword;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtOldPassword">
          <declaration><![CDATA[protected TextBox txtOldPassword;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtQAPassword">
          <declaration><![CDATA[protected TextBox txtQAPassword;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="Membership">
          <declaration><![CDATA[public UserMembership Membership]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="85" sc="13" el="92" ec="14">DesktopModules\Admin\Security\Password.ascx.cs</location>
            <body hash="7282a6ba20c9687f69bf24b4e318908a"><![CDATA[{
                UserMembership _Membership = null;
                if (User != null)
                {
                    _Membership = User.Membership;
                }
                return _Membership;
            }]]></body>
          </codeblock>
        </property>
        <property name="UseCaptcha">
          <declaration><![CDATA[protected bool UseCaptcha]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="66" sc="13" el="68" ec="14">DesktopModules\Admin\Security\Password.ascx.cs</location>
            <body hash="5774a6952a97286c789a2c777cfbb01a"><![CDATA[{
                return Convert.ToBoolean(GetSetting(PortalId, "Security_CaptchaChangePassword"));
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
        <event name="PasswordQuestionAnswerUpdated">
          <declaration><![CDATA[public event Password.PasswordUpdatedEventHandler PasswordQuestionAnswerUpdated;]]></declaration>
          <documentation>
          </documentation>
        </event>
        <event name="PasswordUpdated">
          <declaration><![CDATA[public event Password.PasswordUpdatedEventHandler PasswordUpdated;]]></declaration>
          <documentation>
          </documentation>
        </event>
      </events>
    </class>
    <class name="ProfileDefinitions">
      <declaration><![CDATA[public class ProfileDefinitions : PortalModuleBase, IActionable]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private bool _requiredColumnHidden = false;]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="66" sc="9" el="66" ec="52">DesktopModules\Admin\Security\ProfileDefinitions.ascx.cs</location>
            <body hash="50a8b3bfc902b1fec3244e07dca09a48"><![CDATA[private bool _requiredColumnHidden = false]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="BindGrid">
          <declaration><![CDATA[private void BindGrid()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="261" sc="9" el="299" ec="10">DesktopModules\Admin\Security\ProfileDefinitions.ascx.cs</location>
            <body hash="51190c2696dcee993bfc69e9d9ffed2c"><![CDATA[{
            bool allRequired = true;
            bool allVisible = true;

            //Check whether the checkbox column headers are true or false
            foreach (ProfilePropertyDefinition profProperty in ProfileProperties)
            {
                if (profProperty.Required == false)
                {
                    allRequired = false;
                }
                if (profProperty.Visible == false)
                {
                    allVisible = false;
                }
                if (!allRequired && !allVisible)
                {
                    break;
                }
            }
            foreach (DataGridColumn column in grdProfileProperties.Columns)
            {
                if (ReferenceEquals(column.GetType(), typeof(CheckBoxColumn)))
                {
                    //Manage CheckBox column events
                    var checkBoxColumn = (CheckBoxColumn)column;
                    if (checkBoxColumn.DataField == "Required")
                    {
                        checkBoxColumn.Checked = allRequired;
                    }
                    if (checkBoxColumn.DataField == "Visible")
                    {
                        checkBoxColumn.Checked = allVisible;
                    }
                }
            }
            grdProfileProperties.DataSource = ProfileProperties;
            grdProfileProperties.DataBind();
        }]]></body>
          </codeblock>
        </method>
        <method name="cmdRefresh_Click">
          <declaration><![CDATA[private void cmdRefresh_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="531" sc="9" el="533" ec="10">DesktopModules\Admin\Security\ProfileDefinitions.ascx.cs</location>
            <body hash="4f596e0ae1641ed8afb538315ae3d912"><![CDATA[{
            RefreshGrid();
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteProperty">
          <declaration><![CDATA[private void DeleteProperty(int index)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="203" sc="9" el="207" ec="10">DesktopModules\Admin\Security\ProfileDefinitions.ascx.cs</location>
            <body hash="bb22c05c2596988df217aa3ce25ec9c6"><![CDATA[{
            ProfileController.DeletePropertyDefinition(ProfileProperties[index]);

            RefreshGrid();
        }]]></body>
          </codeblock>
        </method>
        <method name="DisplayDataType">
          <declaration><![CDATA[public string DisplayDataType(ProfilePropertyDefinition definition)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="402" sc="9" el="411" ec="10">DesktopModules\Admin\Security\ProfileDefinitions.ascx.cs</location>
            <body hash="cbd791bee82fee7db2c27f5ddc0b1b67"><![CDATA[{
            string retValue = Null.NullString;
            var listController = new ListController();
            ListEntryInfo definitionEntry = listController.GetListEntryInfo("DataType", definition.DataType);
            if (definitionEntry != null)
            {
                retValue = definitionEntry.Value;
            }
            return retValue;
        }]]></body>
          </codeblock>
        </method>
        <method name="DisplayDefaultVisibility">
          <declaration><![CDATA[public string DisplayDefaultVisibility(ProfilePropertyDefinition definition)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="414" sc="9" el="421" ec="10">DesktopModules\Admin\Security\ProfileDefinitions.ascx.cs</location>
            <body hash="b4cb6edc99766415b68f4daaf97007ce"><![CDATA[{
            string retValue = Null.NullString;
            if (!String.IsNullOrEmpty(definition.DefaultVisibility.ToString()))
            {
                retValue = LocalizeString(definition.DefaultVisibility.ToString()) ?? definition.DefaultVisibility.ToString();
            }
            return retValue;
        }]]></body>
          </codeblock>
        </method>
        <method name="grdProfileProperties_ItemCheckedChanged">
          <declaration><![CDATA[private void grdProfileProperties_ItemCheckedChanged(object sender, DNNDataGridCheckChangedEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="544" sc="9" el="579" ec="10">DesktopModules\Admin\Security\ProfileDefinitions.ascx.cs</location>
            <body hash="2c0ad181bcbcfe8c0d9beab00b0052fe"><![CDATA[{
            string propertyName = e.Field;
            bool propertyValue = e.Checked;

            if (e.IsAll)
            {
                //Update All the properties
                foreach (ProfilePropertyDefinition profProperty in ProfileProperties)
                {
                    switch (propertyName)
                    {
                        case "Required":
                            profProperty.Required = propertyValue;
                            break;
                        case "Visible":
                            profProperty.Visible = propertyValue;
                            break;
                    }
                }
            }
            else
            {
                //Update the indexed property
                ProfilePropertyDefinition profileProperty = ProfileProperties[e.Item.ItemIndex];
                switch (propertyName)
                {
                    case "Required":
                        profileProperty.Required = propertyValue;
                        break;
                    case "Visible":
                        profileProperty.Visible = propertyValue;
                        break;
                }
            }
            BindGrid();
        }]]></body>
          </codeblock>
        </method>
        <method name="grdProfileProperties_ItemCommand">
          <declaration><![CDATA[private void grdProfileProperties_ItemCommand(object source, DataGridCommandEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="590" sc="9" el="605" ec="10">DesktopModules\Admin\Security\ProfileDefinitions.ascx.cs</location>
            <body hash="51e2883863b65f7b0e0024988cf4ca26"><![CDATA[{
            int index = e.Item.ItemIndex;

            switch (e.CommandName)
            {
                case "Delete":
                    DeleteProperty(index);
                    break;
                case "MoveUp":
                    MovePropertyUp(index);
                    break;
                case "MoveDown":
                    MovePropertyDown(index);
                    break;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="grdProfileProperties_ItemCreated">
          <declaration><![CDATA[private void grdProfileProperties_ItemCreated(object sender, DataGridItemEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="617" sc="9" el="640" ec="10">DesktopModules\Admin\Security\ProfileDefinitions.ascx.cs</location>
            <body hash="dbc06715d6005b159f2c30040dc4cbaf"><![CDATA[{
            if (SupportsRichClient())
            {
                switch (e.Item.ItemType)
                {
                    case ListItemType.Header:
                        //we combined the header label and checkbox in same place, so it is control 1 instead of 0                       
                        ((WebControl)e.Item.Cells[COLUMN_REQUIRED].Controls[1]).Attributes.Add("onclick", "dnn.util.checkallChecked(this," + COLUMN_REQUIRED + ");");
                        ((CheckBox)e.Item.Cells[COLUMN_REQUIRED].Controls[1]).AutoPostBack = false;

                        int column_visible = _requiredColumnHidden ? COLUMN_VISIBLE - 1 : COLUMN_VISIBLE;
                        ((WebControl)e.Item.Cells[COLUMN_VISIBLE].Controls[1]).Attributes.Add("onclick", "dnn.util.checkallChecked(this," + column_visible + ");");
                        ((CheckBox)e.Item.Cells[COLUMN_VISIBLE].Controls[1]).AutoPostBack = false;
                        break;
                    case ListItemType.AlternatingItem:
                    case ListItemType.Item:
                        ((CheckBox)e.Item.Cells[COLUMN_REQUIRED].Controls[0]).AutoPostBack = false;
                        ((CheckBox)e.Item.Cells[COLUMN_VISIBLE].Controls[0]).AutoPostBack = false;
                        ClientAPI.EnableClientSideReorder(e.Item.Cells[COLUMN_MOVE_DOWN].Controls[0], Page, false, grdProfileProperties.ClientID);
                        ClientAPI.EnableClientSideReorder(e.Item.Cells[COLUMN_MOVE_UP].Controls[0], Page, true, grdProfileProperties.ClientID);
                        break;
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="grdProfileProperties_ItemDataBound">
          <declaration><![CDATA[protected void grdProfileProperties_ItemDataBound(object sender, DataGridItemEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="651" sc="9" el="675" ec="10">DesktopModules\Admin\Security\ProfileDefinitions.ascx.cs</location>
            <body hash="4cff902195aa03d0799aaeb7ca959e2c"><![CDATA[{
            DataGridItem item = e.Item;
            if (item.ItemType == ListItemType.Item || item.ItemType == ListItemType.AlternatingItem || item.ItemType == ListItemType.SelectedItem)
            {
                Control imgColumnControl = item.Controls[1].Controls[0];
                if (imgColumnControl is ImageButton)
                {
                    var delImage = (ImageButton)imgColumnControl;
                    var profProperty = (ProfilePropertyDefinition)item.DataItem;

                    switch (profProperty.PropertyName.ToLower())
                    {
                        case "lastname":
                        case "firstname":
                        case "preferredtimezone":
                        case "preferredlocale":
                            delImage.Visible = false;
                            break;
                        default:
                            delImage.Visible = true;
                            break;
                    }
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="LoadViewState">
          <declaration><![CDATA[protected override void LoadViewState(object savedState)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="366" sc="9" el="384" ec="10">DesktopModules\Admin\Security\ProfileDefinitions.ascx.cs</location>
            <body hash="932f4ca3241f9c6646d029afba87cda5"><![CDATA[{
            if (savedState != null)
            {
                //Load State from the array of objects that was saved with SaveViewState.
                var myState = (object[])savedState;

                //Load Base Controls ViewState
                if (myState[0] != null)
                {
                    base.LoadViewState(myState[0]);
                }

                //Load ModuleID
                if (myState[1] != null)
                {
                    _profileProperties = (ProfilePropertyDefinitionCollection)myState[1];
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="MoveProperty">
          <declaration><![CDATA[private void MoveProperty(int index, int destIndex)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="217" sc="9" el="231" ec="10">DesktopModules\Admin\Security\ProfileDefinitions.ascx.cs</location>
            <body hash="f19295d20b0dcbade2d082927efefc13"><![CDATA[{
            ProfilePropertyDefinition profileProperty = ProfileProperties[index];
            ProfilePropertyDefinition nextProfileProperty = ProfileProperties[destIndex];

            int currentOrder = profileProperty.ViewOrder;
            int nextOrder = nextProfileProperty.ViewOrder;

            //Swap ViewOrders
            profileProperty.ViewOrder = nextOrder;
            nextProfileProperty.ViewOrder = currentOrder;

            //Refresh Grid
            ProfileProperties.Sort();
            BindGrid();
        }]]></body>
          </codeblock>
        </method>
        <method name="MovePropertyDown">
          <declaration><![CDATA[private void MovePropertyDown(int index)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="240" sc="9" el="242" ec="10">DesktopModules\Admin\Security\ProfileDefinitions.ascx.cs</location>
            <body hash="c5ef18f0661238d947563ba156a17c5d"><![CDATA[{
            MoveProperty(index, index + 1);
        }]]></body>
          </codeblock>
        </method>
        <method name="MovePropertyUp">
          <declaration><![CDATA[private void MovePropertyUp(int index)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="251" sc="9" el="253" ec="10">DesktopModules\Admin\Security\ProfileDefinitions.ascx.cs</location>
            <body hash="850245a22cfed7d9c2a683d1749601bd"><![CDATA[{
            MoveProperty(index, index - 1);
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="450" sc="9" el="496" ec="10">DesktopModules\Admin\Security\ProfileDefinitions.ascx.cs</location>
            <body hash="516feab52206ed30c0ea3e0f57203d6f"><![CDATA[{
            base.OnInit(e);

            foreach (DataGridColumn column in grdProfileProperties.Columns)
            {
                if (ReferenceEquals(column.GetType(), typeof(CheckBoxColumn)))
                {
                    var checkBoxColumn = (CheckBoxColumn)column;
                    if (checkBoxColumn.DataField == "Required" && UsersPortalId == Null.NullInteger)
                    {
                        checkBoxColumn.Visible = false;
                        _requiredColumnHidden = true;
                    }
                    if (SupportsRichClient() == false)
                    {
                        checkBoxColumn.CheckedChanged += grdProfileProperties_ItemCheckedChanged;
                    }
                }
                else if (ReferenceEquals(column.GetType(), typeof(ImageCommandColumn)))
                {
                    //Manage Delete Confirm JS
                    var imageColumn = (ImageCommandColumn)column;
                    switch (imageColumn.CommandName)
                    {
                        case "Delete":
                            imageColumn.OnClickJS = Localization.GetString("DeleteItem");
                            imageColumn.Text = Localization.GetString("Delete", LocalResourceFile);
                            break;
                        case "Edit":
                            //The Friendly URL parser does not like non-alphanumeric characters
                            //so first create the format string with a dummy value and then
                            //replace the dummy value with the FormatString place holder
                            string formatString = EditUrl("PropertyDefinitionID", "KEYFIELD", "EditProfileProperty");
                            formatString = formatString.Replace("KEYFIELD", "{0}");
                            imageColumn.NavigateURLFormatString = formatString;
                            imageColumn.Text = Localization.GetString("Edit", LocalResourceFile);
                            break;
                        case "MoveUp":
                            imageColumn.Text = Localization.GetString("MoveUp", LocalResourceFile);
                            break;
                        case "MoveDown":
                            imageColumn.Text = Localization.GetString("MoveDown", LocalResourceFile);
                            break;
                    }
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="499" sc="9" el="521" ec="10">DesktopModules\Admin\Security\ProfileDefinitions.ascx.cs</location>
            <body hash="569a558ec693c84831012f821c50eef5"><![CDATA[{
            base.OnLoad(e);

            cmdRefresh.Click += cmdRefresh_Click;
            grdProfileProperties.ItemCommand += grdProfileProperties_ItemCommand;
            grdProfileProperties.ItemCreated += grdProfileProperties_ItemCreated;
            grdProfileProperties.ItemDataBound += grdProfileProperties_ItemDataBound;

            cmdAdd.NavigateUrl = EditUrl("EditProfileProperty");

            try
            {
                if (!Page.IsPostBack)
                {
                    Localization.LocalizeDataGrid(ref grdProfileProperties, LocalResourceFile);
                    BindGrid();
                }
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="ProcessPostBack">
          <declaration><![CDATA[private void ProcessPostBack()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="340" sc="9" el="359" ec="10">DesktopModules\Admin\Security\ProfileDefinitions.ascx.cs</location>
            <body hash="6f623cefcc7c18425357d1358177be7b"><![CDATA[{

            string[] newOrder = ClientAPI.GetClientSideReorder(grdProfileProperties.ClientID, Page);
            for (int i = 0; i <= grdProfileProperties.Items.Count - 1; i++)
            {
                DataGridItem dataGridItem = grdProfileProperties.Items[i];
                ProfilePropertyDefinition profileProperty = ProfileProperties[i];
                CheckBox checkBox = (CheckBox)dataGridItem.Cells[COLUMN_REQUIRED].Controls[0];
                profileProperty.Required = checkBox.Checked;
                checkBox = (CheckBox)dataGridItem.Cells[COLUMN_VISIBLE].Controls[0];
                profileProperty.Visible = checkBox.Checked;
            }

            //assign vieworder
            for (int i = 0; i <= newOrder.Length - 1; i++)
            {
                ProfileProperties[Convert.ToInt32(newOrder[i])].ViewOrder = i;
            }
            ProfileProperties.Sort();
        }]]></body>
          </codeblock>
        </method>
        <method name="RefreshGrid">
          <declaration><![CDATA[private void RefreshGrid()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="307" sc="9" el="310" ec="10">DesktopModules\Admin\Security\ProfileDefinitions.ascx.cs</location>
            <body hash="58fe734b70e841de44a27d81ec5224e7"><![CDATA[{
            _profileProperties = null;
            BindGrid();
        }]]></body>
          </codeblock>
        </method>
        <method name="SaveViewState">
          <declaration><![CDATA[protected override object SaveViewState()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="387" sc="9" el="395" ec="10">DesktopModules\Admin\Security\ProfileDefinitions.ascx.cs</location>
            <body hash="842f6f7085e6b7026d686f999a2a169f"><![CDATA[{
            var allStates = new object[2];

            //Save the Base Controls ViewState
            allStates[0] = base.SaveViewState();
            allStates[1] = ProfileProperties;

            return allStates;
        }]]></body>
          </codeblock>
        </method>
        <method name="SupportsRichClient">
          <declaration><![CDATA[private bool SupportsRichClient()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="192" sc="9" el="194" ec="10">DesktopModules\Admin\Security\ProfileDefinitions.ascx.cs</location>
            <body hash="9753d8c569c0bf4f17f8b5c29c6699f1"><![CDATA[{
            return ClientAPI.BrowserSupportsFunctionality(ClientAPI.ClientFunctionality.DHTML);
        }]]></body>
          </codeblock>
        </method>
        <method name="Update">
          <declaration><![CDATA[public void Update()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="424" sc="9" el="436" ec="10">DesktopModules\Admin\Security\ProfileDefinitions.ascx.cs</location>
            <body hash="52323f35ee81b49bd562bb2ff05d61e8"><![CDATA[{
            try
            {
                UpdateProperties();

                //Redirect to upadte page
                Response.Redirect(Request.RawUrl, true);
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }            
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateProperties">
          <declaration><![CDATA[private void UpdateProperties()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="318" sc="9" el="331" ec="10">DesktopModules\Admin\Security\ProfileDefinitions.ascx.cs</location>
            <body hash="726d783ec7c894a2603b3af96631b355"><![CDATA[{
            ProcessPostBack();
            foreach (ProfilePropertyDefinition property in ProfileProperties)
            {
                if (property.IsDirty)
                {
                    if (UsersPortalId == Null.NullInteger)
                    {
                        property.Required = false;
                    }
                    ProfileController.UpdatePropertyDefinition(property);
                }
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_profileProperties">
          <declaration><![CDATA[private ProfilePropertyDefinitionCollection _profileProperties;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_requiredColumnHidden">
          <declaration><![CDATA[private bool _requiredColumnHidden = false;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="actionsRow">
          <declaration><![CDATA[protected HtmlGenericControl actionsRow;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdAdd">
          <declaration><![CDATA[protected HyperLink cmdAdd;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdRefresh">
          <declaration><![CDATA[protected LinkButton cmdRefresh;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="COLUMN_MOVE_DOWN">
          <declaration><![CDATA[private const int COLUMN_MOVE_DOWN = 2;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="COLUMN_MOVE_UP">
          <declaration><![CDATA[private const int COLUMN_MOVE_UP = 3;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="COLUMN_REQUIRED">
          <declaration><![CDATA[private const int COLUMN_REQUIRED = 11;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="COLUMN_VISIBLE">
          <declaration><![CDATA[private const int COLUMN_VISIBLE = 12;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="grdProfileProperties">
          <declaration><![CDATA[protected DataGrid grdProfileProperties;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="IsSuperUser">
          <declaration><![CDATA[protected bool IsSuperUser]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="80" sc="13" el="82" ec="14">DesktopModules\Admin\Security\ProfileDefinitions.ascx.cs</location>
            <body hash="804e83cca62dcf42b38c6c5ab3f88aa1"><![CDATA[{
            	return Globals.IsHostTab(PortalSettings.ActiveTab.TabID);
            }]]></body>
          </codeblock>
        </property>
        <property name="ModuleActions">
          <declaration><![CDATA[public ModuleActionCollection ModuleActions]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="156" sc="13" el="179" ec="14">DesktopModules\Admin\Security\ProfileDefinitions.ascx.cs</location>
            <body hash="593d9bfc626bd63fd73a198269d7e3a5"><![CDATA[{
                var actions = new ModuleActionCollection();
                actions.Add(GetNextActionID(),
                            Localization.GetString(ModuleActionType.AddContent, LocalResourceFile),
                            ModuleActionType.AddContent,
                            "",
                            "add.gif",
                            EditUrl("EditProfileProperty"),
                            false,
                            SecurityAccessLevel.Admin,
                            true,
                            false);
                actions.Add(GetNextActionID(),
                            Localization.GetString("Cancel.Action", LocalResourceFile),
                            ModuleActionType.AddContent,
                            "",
                            "lt.gif",
                            ReturnUrl,
                            false,
                            SecurityAccessLevel.Admin,
                            true,
                            false);
                return actions;
            }]]></body>
          </codeblock>
        </property>
        <property name="ProfileProperties">
          <declaration><![CDATA[protected ProfilePropertyDefinitionCollection ProfileProperties]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="93" sc="13" el="95" ec="14">DesktopModules\Admin\Security\ProfileDefinitions.ascx.cs</location>
            <body hash="6ddfa675201810132b733b4d832f102e"><![CDATA[{
                return _profileProperties ?? (_profileProperties = ProfileController.GetPropertyDefinitionsByPortal(UsersPortalId, false, false));
            }]]></body>
          </codeblock>
        </property>
        <property name="ReturnUrl">
          <declaration><![CDATA[public string ReturnUrl]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="106" sc="13" el="128" ec="14">DesktopModules\Admin\Security\ProfileDefinitions.ascx.cs</location>
            <body hash="0f53a21a3b7805ea035992e8f09f035d"><![CDATA[{
                string returnURL;
                var filterParams = new string[String.IsNullOrEmpty(Request.QueryString["filterproperty"]) ? 1 : 2];

                if (String.IsNullOrEmpty(Request.QueryString["filterProperty"]))
                {
                    filterParams.SetValue("filter=" + Request.QueryString["filter"], 0);
                }
                else
                {
                    filterParams.SetValue("filter=" + Request.QueryString["filter"], 0);
                    filterParams.SetValue("filterProperty=" + Request.QueryString["filterProperty"], 1);
                }
                if (string.IsNullOrEmpty(Request.QueryString["filter"]))
                {
                    returnURL = Globals.NavigateURL(TabId);
                }
                else
                {
                    returnURL = Globals.NavigateURL(TabId, "", filterParams);
                }
                return returnURL;
            }]]></body>
          </codeblock>
        </property>
        <property name="UsersPortalId">
          <declaration><![CDATA[protected int UsersPortalId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="139" sc="13" el="146" ec="14">DesktopModules\Admin\Security\ProfileDefinitions.ascx.cs</location>
            <body hash="49679f096e540eb6b49afdc6faf9f474"><![CDATA[{
                int intPortalId = PortalId;
                if (IsSuperUser)
                {
                    intPortalId = Null.NullInteger;
                }
                return intPortalId;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="Register">
      <declaration><![CDATA[public class Register : UserUserControlBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private readonly List<AuthenticationLoginBase> _loginControls = new List<AuthenticationLoginBase>();]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="69" sc="3" el="69" ec="103">DesktopModules\Admin\Security\Register.ascx.cs</location>
            <body hash="acb6234a30f85a2b513e5e38984aa845"><![CDATA[private readonly List<AuthenticationLoginBase> _loginControls = new List<AuthenticationLoginBase>()]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="AddField">
          <declaration><![CDATA[private void AddField(string dataField, string dataMember, bool required, string regexValidator, TextBoxMode textMode)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="373" sc="3" el="393" ec="4">DesktopModules\Admin\Security\Register.ascx.cs</location>
            <body hash="37c3e3a94eedc0c5314cc071c6e50667"><![CDATA[{
			if (userForm.Items.Any(i => i.ID == dataField))
			{
				return;
			}

			var formItem = new DnnFormTextBoxItem
			{
				ID = dataField,
				DataField = dataField,
				DataMember = dataMember,
				Visible = true,
				Required = required,
				TextMode = textMode
			};
			if (!String.IsNullOrEmpty(regexValidator))
			{
				formItem.ValidationExpression = regexValidator;
			}
			userForm.Items.Add(formItem);
		}]]></body>
          </codeblock>
        </method>
        <method name="AddPasswordConfirmField">
          <declaration><![CDATA[private void AddPasswordConfirmField(string dataField, string dataMember, bool required)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="427" sc="3" el="443" ec="4">DesktopModules\Admin\Security\Register.ascx.cs</location>
            <body hash="609c2c680b2484b9b4aa6835ac74db30"><![CDATA[{

			var formItem = new DnnFormTextBoxItem
			{
				ID = dataField,
				DataField = dataField,
				DataMember = dataMember,
				Visible = true,
				Required = required,
				TextMode = TextBoxMode.Password,
				TextBoxCssClass = ConfirmPasswordTextBoxCssClass,
				ClearContentInPasswordMode = true,
                MaxLength = 39
			};
			userForm.Items.Add(formItem);

		}]]></body>
          </codeblock>
        </method>
        <method name="AddPasswordStrengthField">
          <declaration><![CDATA[private void AddPasswordStrengthField(string dataField, string dataMember, bool required)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="396" sc="3" el="424" ec="4">DesktopModules\Admin\Security\Register.ascx.cs</location>
            <body hash="9a5d97e65c5b8e123f7e19183dc06c4c"><![CDATA[{
			DnnFormItemBase formItem;

			if (Host.EnableStrengthMeter)
			{
				formItem = new DnnFormPasswordItem
				{
					TextBoxCssClass = PasswordStrengthTextBoxCssClass,
					ContainerCssClass = "password-strength-container"
				};
			}
			else
			{
				formItem = new DnnFormTextBoxItem
				{
					TextMode = TextBoxMode.Password,
					TextBoxCssClass = PasswordStrengthTextBoxCssClass,
				};
			}

			formItem.ID = dataField;
			formItem.DataField = dataField;
			formItem.DataMember = dataMember;
			formItem.Visible = true;
			formItem.Required = required;

			userForm.Items.Add(formItem);

		}]]></body>
          </codeblock>
        </method>
        <method name="AddProperty">
          <declaration><![CDATA[private void AddProperty(ProfilePropertyDefinition property)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="446" sc="3" el="480" ec="4">DesktopModules\Admin\Security\Register.ascx.cs</location>
            <body hash="2a2f44e8ca747595f316306d7d31c43e"><![CDATA[{
			if (userForm.Items.Any(i => i.ID == property.PropertyName))
			{
				return;
			}

			var controller = new ListController();
			ListEntryInfo imageType = controller.GetListEntryInfo("DataType", "Image");
			if (property.DataType != imageType.EntryID)
			{
				DnnFormEditControlItem formItem = new DnnFormEditControlItem
				{
					ID = property.PropertyName,
					ResourceKey = String.Format("ProfileProperties_{0}", property.PropertyName),
					LocalResourceFile = "~/DesktopModules/Admin/Security/App_LocalResources/Profile.ascx.resx",
					ValidationMessageSuffix = ".Validation",
					ControlType = EditorInfo.GetEditor(property.DataType),
					DataMember = "Profile",
					DataField = property.PropertyName,
					Visible = property.Visible,
					Required = property.Required
				};
				//To check if the property has a deafult value
				if (!String.IsNullOrEmpty(property.DefaultValue))
				{
					formItem.Value = property.DefaultValue;
				}
				if (!String.IsNullOrEmpty(property.ValidationExpression))
				{
					formItem.ValidationExpression = property.ValidationExpression;
				}
				userForm.Items.Add(formItem);
			}

		}]]></body>
          </codeblock>
        </method>
        <method name="BindLoginControl">
          <declaration><![CDATA[private void BindLoginControl(AuthenticationLoginBase authLoginControl, AuthenticationInfo authSystem)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="483" sc="3" el="494" ec="4">DesktopModules\Admin\Security\Register.ascx.cs</location>
            <body hash="8607bc4657c69168e4e802dd0278ef7c"><![CDATA[{
			//set the control ID to the resource file name ( ie. controlname.ascx = controlname )
			//this is necessary for the Localization in PageBase
			authLoginControl.AuthenticationType = authSystem.AuthenticationType;
			authLoginControl.ID = Path.GetFileNameWithoutExtension(authSystem.LoginControlSrc) + "_" + authSystem.AuthenticationType;
			authLoginControl.LocalResourceFile = authLoginControl.TemplateSourceDirectory + "/" + Localization.LocalResourceDirectory + "/" +
												 Path.GetFileNameWithoutExtension(authSystem.LoginControlSrc);
			authLoginControl.RedirectURL = GetRedirectUrl();
			authLoginControl.ModuleConfiguration = ModuleConfiguration;

			authLoginControl.UserAuthenticated += UserAuthenticated;
		}]]></body>
          </codeblock>
        </method>
        <method name="CreateUser">
          <declaration><![CDATA[private void CreateUser()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="497" sc="3" el="543" ec="4">DesktopModules\Admin\Security\Register.ascx.cs</location>
            <body hash="3b512418d91592295ecaf0146a96a2f3"><![CDATA[{
			//Update DisplayName to conform to Format
			UpdateDisplayName();

			User.Membership.Approved = PortalSettings.UserRegistration == (int)Globals.PortalRegistrationType.PublicRegistration;
			var user = User;
			CreateStatus = UserController.CreateUser(ref user);

			DataCache.ClearPortalCache(PortalId, true);

			try
			{
				if (CreateStatus == UserCreateStatus.Success)
				{
					//hide the succesful captcha
					captchaRow.Visible = false;

					//Assocate alternate Login with User and proceed with Login
					if (!String.IsNullOrEmpty(AuthenticationType))
					{
						AuthenticationController.AddUserAuthentication(User.UserID, AuthenticationType, UserToken);
					}

					string strMessage = CompleteUserCreation(CreateStatus, user, true, IsRegister);

					if ((string.IsNullOrEmpty(strMessage)))
					{
						Response.Redirect(GetRedirectUrl(), true);
					}
					else
					{
						RegistrationForm.Visible = false;
						registerButton.Visible = false;
						cancelLink.Attributes["resourcekey"] = "Close";
						RegistrationForm.Parent.Controls.Add(cancelLink);
					}
				}
				else
				{
					AddLocalizedModuleMessage(UserController.GetUserCreateStatus(CreateStatus), ModuleMessage.ModuleMessageType.RedError, true);
				}
			}
			catch (Exception exc) //Module failed to load
			{
				Exceptions.ProcessModuleLoadException(this, exc);
			}
		}]]></body>
          </codeblock>
        </method>
        <method name="GetRedirectUrl">
          <declaration><![CDATA[private string GetRedirectUrl(bool checkSetting = true)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="733" sc="3" el="768" ec="4">DesktopModules\Admin\Security\Register.ascx.cs</location>
            <body hash="b2da93d7f75c0a35e9d899cccddbd763"><![CDATA[{
			var redirectUrl = "";
			var redirectAfterRegistration = PortalSettings.Registration.RedirectAfterRegistration;
			if (checkSetting && redirectAfterRegistration > 0) //redirect to after registration page
			{
				redirectUrl = Globals.NavigateURL(redirectAfterRegistration);
			}
			else
			{
				if (Request.QueryString["returnurl"] != null)
				{
					//return to the url passed to register
					redirectUrl = HttpUtility.UrlDecode(Request.QueryString["returnurl"]);

                    //clean the return url to avoid possible XSS attack.
                    redirectUrl = UrlUtils.ValidReturnUrl(redirectUrl);

                    if (redirectUrl.Contains("?returnurl"))
					{
						string baseURL = redirectUrl.Substring(0,
							redirectUrl.IndexOf("?returnurl", StringComparison.Ordinal));
						string returnURL =
							redirectUrl.Substring(redirectUrl.IndexOf("?returnurl", StringComparison.Ordinal) + 11);

						redirectUrl = string.Concat(baseURL, "?returnurl", HttpUtility.UrlEncode(returnURL));
					}
				}
				if (String.IsNullOrEmpty(redirectUrl))
				{
					//redirect to current page 
					redirectUrl = Globals.NavigateURL();
				}
			}

			return redirectUrl;
		}]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="125" sc="3" el="278" ec="4">DesktopModules\Admin\Security\Register.ascx.cs</location>
            <body hash="139ab9176ac5b950069b6c63219ba804"><![CDATA[{
			base.OnInit(e);

			JavaScript.RequestRegistration(CommonJs.DnnPlugins);

			ClientResourceManager.RegisterScript(Page, "~/Resources/Shared/scripts/dnn.jquery.extensions.js");
			ClientResourceManager.RegisterScript(Page, "~/Resources/Shared/scripts/dnn.jquery.tooltip.js");
			ClientResourceManager.RegisterScript(Page, "~/DesktopModules/Admin/Security/Scripts/dnn.PasswordComparer.js");

			if (PortalSettings.Registration.RegistrationFormType == 0)
			{
				//UserName
				if (!PortalSettings.Registration.UseEmailAsUserName)
				{

					AddField("Username", String.Empty, true,
							String.IsNullOrEmpty(PortalSettings.Registration.UserNameValidator) ? ExcludeTerms : PortalSettings.Registration.UserNameValidator,
							TextBoxMode.SingleLine);
				}

				//Password
				if (!PortalSettings.Registration.RandomPassword)
				{
					AddPasswordStrengthField("Password", "Membership", true);

					if (PortalSettings.Registration.RequirePasswordConfirm)
					{
						AddPasswordConfirmField("PasswordConfirm", "Membership", true);
					}
				}

				//Password Q&A
				if (MembershipProviderConfig.RequiresQuestionAndAnswer)
				{
					AddField("PasswordQuestion", "Membership", true, String.Empty, TextBoxMode.SingleLine);
					AddField("PasswordAnswer", "Membership", true, String.Empty, TextBoxMode.SingleLine);
				}

				//DisplayName
				if (String.IsNullOrEmpty(PortalSettings.Registration.DisplayNameFormat))
				{
					AddField("DisplayName", String.Empty, true, String.Empty, TextBoxMode.SingleLine);
				}
				else
				{
					AddField("FirstName", String.Empty, true, String.Empty, TextBoxMode.SingleLine);
					AddField("LastName", String.Empty, true, String.Empty, TextBoxMode.SingleLine);
				}

				//Email
				AddField("Email", String.Empty, true, PortalSettings.Registration.EmailValidator, TextBoxMode.SingleLine);

				if (PortalSettings.Registration.RequireValidProfile)
				{
					foreach (ProfilePropertyDefinition property in User.Profile.ProfileProperties)
					{
						if (property.Required)
						{
							AddProperty(property);
						}
					}
				}
			}
			else
			{
				var fields = PortalSettings.Registration.RegistrationFields.Split(',').ToList();
				//append question/answer field when RequiresQuestionAndAnswer is enabled in config.
				if (MembershipProviderConfig.RequiresQuestionAndAnswer)
				{
					if (!fields.Contains("PasswordQuestion"))
					{
						fields.Add("PasswordQuestion");
					}
					if (!fields.Contains("PasswordAnswer"))
					{
						fields.Add("PasswordAnswer");
					}
				}

				foreach (string field in fields)
				{
					var trimmedField = field.Trim();
					switch (trimmedField)
					{
						case "Username":
							AddField("Username", String.Empty, true, String.IsNullOrEmpty(PortalSettings.Registration.UserNameValidator)
																		? ExcludeTerms : PortalSettings.Registration.UserNameValidator,
																		TextBoxMode.SingleLine);
							break;
						case "Email":
							AddField("Email", String.Empty, true, PortalSettings.Registration.EmailValidator, TextBoxMode.SingleLine);
							break;
						case "Password":
							AddPasswordStrengthField(trimmedField, "Membership", true);
							break;
						case "PasswordConfirm":
							AddPasswordConfirmField(trimmedField, "Membership", true);
							break;
						case "PasswordQuestion":
						case "PasswordAnswer":
							AddField(trimmedField, "Membership", true, String.Empty, TextBoxMode.SingleLine);
							break;
						case "DisplayName":
							AddField(trimmedField, String.Empty, true, ExcludeTerms, TextBoxMode.SingleLine);
							break;
						default:
							ProfilePropertyDefinition property = User.Profile.GetProperty(trimmedField);
							if (property != null)
							{
								AddProperty(property);
							}
							break;
					}
				}
			}

			//Verify that the current user has access to this page
			if (PortalSettings.UserRegistration == (int)Globals.PortalRegistrationType.NoRegistration && Request.IsAuthenticated == false)
			{
				Response.Redirect(Globals.NavigateURL("Access Denied"), false);
				Context.ApplicationInstance.CompleteRequest();
			}

			cancelLink.NavigateUrl = GetRedirectUrl(false);
			registerButton.Click += registerButton_Click;

			if (PortalSettings.Registration.UseAuthProviders)
			{
				List<AuthenticationInfo> authSystems = AuthenticationController.GetEnabledAuthenticationServices();
				foreach (AuthenticationInfo authSystem in authSystems)
				{
					try
					{
						var authLoginControl = (AuthenticationLoginBase)LoadControl("~/" + authSystem.LoginControlSrc);
						if (authSystem.AuthenticationType != "DNN")
						{
							BindLoginControl(authLoginControl, authSystem);
							//Check if AuthSystem is Enabled
							if (authLoginControl.Enabled && authLoginControl.SupportsRegistration)
							{
								authLoginControl.Mode = AuthMode.Register;

								//Add Login Control to List
								_loginControls.Add(authLoginControl);
							}
						}
					}
					catch (Exception ex)
					{
						Exceptions.LogException(ex);
					}
				}
			}
		}]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="281" sc="3" el="338" ec="4">DesktopModules\Admin\Security\Register.ascx.cs</location>
            <body hash="39a73081d19ade372ca52b9abf29c662"><![CDATA[{
			base.OnLoad(e);

			if (Request.IsAuthenticated)
			{
				//if a Login Page has not been specified for the portal
				if (Globals.IsAdminControl())
				{
					//redirect to current page 
					Response.Redirect(Globals.NavigateURL(), true);
				}
				else //make module container invisible if user is not a page admin
				{
					if (!TabPermissionController.CanAdminPage())
					{
						ContainerControl.Visible = false;
					}
				}
			}

			if (PortalSettings.Registration.UseCaptcha)
			{
				captchaRow.Visible = true;
				ctlCaptcha.ErrorMessage = Localization.GetString("InvalidCaptcha", LocalResourceFile);
				ctlCaptcha.Text = Localization.GetString("CaptchaText", LocalResourceFile);
			}

			if (PortalSettings.Registration.UseAuthProviders && String.IsNullOrEmpty(AuthenticationType))
			{
				foreach (AuthenticationLoginBase authLoginControl in _loginControls)
				{
					socialLoginControls.Controls.Add(authLoginControl);
				}
			}

			//Display relevant message
			userHelpLabel.Text = Localization.GetSystemMessage(PortalSettings, "MESSAGE_REGISTRATION_INSTRUCTIONS");
			switch (PortalSettings.UserRegistration)
			{
				case (int)Globals.PortalRegistrationType.PrivateRegistration:
					userHelpLabel.Text += Localization.GetString("PrivateMembership", Localization.SharedResourceFile);
					break;
				case (int)Globals.PortalRegistrationType.PublicRegistration:
					userHelpLabel.Text += Localization.GetString("PublicMembership", Localization.SharedResourceFile);
					break;
				case (int)Globals.PortalRegistrationType.VerifiedRegistration:
					userHelpLabel.Text += Localization.GetString("VerifiedMembership", Localization.SharedResourceFile);
					break;
			}
			userHelpLabel.Text += Localization.GetString("Required", LocalResourceFile);
			userHelpLabel.Text += Localization.GetString("RegisterWarning", LocalResourceFile);

			userForm.DataSource = User;
			if (!Page.IsPostBack)
			{
				userForm.DataBind();
			}
		}]]></body>
          </codeblock>
        </method>
        <method name="OnPreRender">
          <declaration><![CDATA[protected override void OnPreRender(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="341" sc="3" el="366" ec="4">DesktopModules\Admin\Security\Register.ascx.cs</location>
            <body hash="7d1cb2b6b80b96afa94a4bf85436d3a1"><![CDATA[{
			base.OnPreRender(e);

			var confirmPasswordOptions = new DnnConfirmPasswordOptions()
			{
				FirstElementSelector = "." + PasswordStrengthTextBoxCssClass,
				SecondElementSelector = "." + ConfirmPasswordTextBoxCssClass,
				ContainerSelector = ".dnnRegistrationForm",
				UnmatchedCssClass = "unmatched",
				MatchedCssClass = "matched"
			};

			var optionsAsJsonString = Json.Serialize(confirmPasswordOptions);
			var script = string.Format("dnn.initializePasswordComparer({0});{1}", optionsAsJsonString, Environment.NewLine);

			if (ScriptManager.GetCurrent(Page) != null)
			{
				// respect MS AJAX
				ScriptManager.RegisterStartupScript(Page, GetType(), "ConfirmPassword", script, true);
			}
			else
			{
				Page.ClientScript.RegisterStartupScript(GetType(), "ConfirmPassword", script, true);
			}

		}]]></body>
          </codeblock>
        </method>
        <method name="registerButton_Click">
          <declaration><![CDATA[private void registerButton_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="771" sc="3" el="790" ec="4">DesktopModules\Admin\Security\Register.ascx.cs</location>
            <body hash="d2eeb67c3eb0f51f37f027adac4ff8b1"><![CDATA[{
			if ((PortalSettings.Registration.UseCaptcha && ctlCaptcha.IsValid) || !PortalSettings.Registration.UseCaptcha)
			{
				if (IsValid)
				{
                    if (PortalSettings.UserRegistration != (int)Globals.PortalRegistrationType.NoRegistration)
                    {
                        CreateUser();
                    }

				}
				else
				{
					if (CreateStatus != UserCreateStatus.AddUser)
					{
						AddLocalizedModuleMessage(UserController.GetUserCreateStatus(CreateStatus), ModuleMessage.ModuleMessageType.RedError, true);
					}
				}
			}
		}]]></body>
          </codeblock>
        </method>
        <method name="UpdateDisplayName">
          <declaration><![CDATA[private void UpdateDisplayName()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="546" sc="3" el="552" ec="4">DesktopModules\Admin\Security\Register.ascx.cs</location>
            <body hash="62612d9a11b9563ff749214ff0601cca"><![CDATA[{
			//Update DisplayName to conform to Format
			if (!string.IsNullOrEmpty(PortalSettings.Registration.DisplayNameFormat))
			{
				User.UpdateDisplayName(PortalSettings.Registration.DisplayNameFormat);
			}
		}]]></body>
          </codeblock>
        </method>
        <method name="UserAuthenticated">
          <declaration><![CDATA[private void UserAuthenticated(object sender, UserAuthenticatedEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="793" sc="3" el="838" ec="4">DesktopModules\Admin\Security\Register.ascx.cs</location>
            <body hash="a7048ff97fa6c222d33145718e0f20d6"><![CDATA[{
			NameValueCollection profileProperties = e.Profile;

			User.Username = e.UserToken;
			AuthenticationType = e.AuthenticationType;
			UserToken = e.UserToken;

			foreach (string key in profileProperties)
			{
				switch (key)
				{
					case "FirstName":
						User.FirstName = profileProperties[key];
						break;
					case "LastName":
						User.LastName = profileProperties[key];
						break;
					case "Email":
						User.Email = profileProperties[key];
						break;
					case "DisplayName":
						User.DisplayName = profileProperties[key];
						break;
					default:
						User.Profile.SetProfileProperty(key, profileProperties[key]);
						break;
				}
			}

			//Generate a random password for the user
			User.Membership.Password = UserController.GeneratePassword();

			if (!String.IsNullOrEmpty(User.Email))
			{
				CreateUser();
			}
			else
			{
				AddLocalizedModuleMessage(LocalizeString("NoEmail"), ModuleMessage.ModuleMessageType.RedError, true);
				foreach (DnnFormItemBase formItem in userForm.Items)
				{
					formItem.Visible = formItem.DataField == "Email";
				}
				userForm.DataBind();
			}
		}]]></body>
          </codeblock>
        </method>
        <method name="Validate">
          <declaration><![CDATA[private bool Validate()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="555" sc="3" el="730" ec="4">DesktopModules\Admin\Security\Register.ascx.cs</location>
            <body hash="f8f202bf8612f4a7001b1f385661db39"><![CDATA[{
		    if (!string.IsNullOrEmpty(gotcha.Value))
		    {
		        return false;
		    }

			CreateStatus = UserCreateStatus.AddUser;
			var portalSecurity = new PortalSecurity();

			//Check User Editor
			bool _IsValid = userForm.IsValid;

			if (PortalSettings.Registration.RegistrationFormType == 0)
			{
				//Update UserName
				if (PortalSettings.Registration.UseEmailAsUserName)
				{
					User.Username = User.Email;
					if (String.IsNullOrEmpty(User.DisplayName))
					{
						User.DisplayName = User.Email.Substring(0, User.Email.IndexOf("@", StringComparison.Ordinal));
					}
				}

				//Check Password is valid
				if (!PortalSettings.Registration.RandomPassword)
				{
					//Check Password is Valid
					if (CreateStatus == UserCreateStatus.AddUser && !UserController.ValidatePassword(User.Membership.Password))
					{
						CreateStatus = UserCreateStatus.InvalidPassword;
					}

					if (PortalSettings.Registration.RequirePasswordConfirm && String.IsNullOrEmpty(AuthenticationType))
					{
						if (User.Membership.Password != User.Membership.PasswordConfirm)
						{
							CreateStatus = UserCreateStatus.PasswordMismatch;
						}
					}
				}
				else
				{
					//Generate a random password for the user
					User.Membership.Password = UserController.GeneratePassword();
					User.Membership.PasswordConfirm = User.Membership.Password;
				}

			}
			else
			{
				//Set Username to Email
				if (String.IsNullOrEmpty(User.Username))
				{
					User.Username = User.Email;
				}

				//Set DisplayName
				if (String.IsNullOrEmpty(User.DisplayName))
				{
					User.DisplayName = String.IsNullOrEmpty(User.FirstName + " " + User.LastName)
										   ? User.Email.Substring(0, User.Email.IndexOf("@", StringComparison.Ordinal))
										   : User.FirstName + " " + User.LastName;
				}

				//Random Password
				if (String.IsNullOrEmpty(User.Membership.Password))
				{
					//Generate a random password for the user
					User.Membership.Password = UserController.GeneratePassword();
				}

				//Password Confirm
				if (!String.IsNullOrEmpty(User.Membership.PasswordConfirm))
				{
					if (User.Membership.Password != User.Membership.PasswordConfirm)
					{
						CreateStatus = UserCreateStatus.PasswordMismatch;
					}
				}
			}

			//Validate banned password
			var settings = new MembershipPasswordSettings(User.PortalID);

			if (settings.EnableBannedList)
			{
				var m = new MembershipPasswordController();
				if (m.FoundBannedPassword(User.Membership.Password) || User.Username == User.Membership.Password)
				{
					CreateStatus = UserCreateStatus.BannedPasswordUsed;
				}

			}
			//Validate Profanity
			if (PortalSettings.Registration.UseProfanityFilter)
			{
				if (!portalSecurity.ValidateInput(User.Username, PortalSecurity.FilterFlag.NoProfanity))
				{
					CreateStatus = UserCreateStatus.InvalidUserName;
				}
				if (!String.IsNullOrEmpty(User.DisplayName))
				{
					if (!portalSecurity.ValidateInput(User.DisplayName, PortalSecurity.FilterFlag.NoProfanity))
					{
						CreateStatus = UserCreateStatus.InvalidDisplayName;
					}
				}
			}

			//Validate Unique User Name
			UserInfo user = UserController.GetUserByName(PortalId, User.Username);
			if (user != null)
			{
				if (PortalSettings.Registration.UseEmailAsUserName)
				{
					CreateStatus = UserCreateStatus.DuplicateEmail;
				}
				else
				{
					CreateStatus = UserCreateStatus.DuplicateUserName;
					int i = 1;
					string userName = null;
					while (user != null)
					{
						userName = User.Username + "0" + i.ToString(CultureInfo.InvariantCulture);
						user = UserController.GetUserByName(PortalId, userName);
						i++;
					}
					User.Username = userName;
				}
			}

			//Validate Unique Display Name
			if (CreateStatus == UserCreateStatus.AddUser && PortalSettings.Registration.RequireUniqueDisplayName)
			{
				user = UserController.Instance.GetUserByDisplayname(PortalId, User.DisplayName);
				if (user != null)
				{
					CreateStatus = UserCreateStatus.DuplicateDisplayName;
					int i = 1;
					string displayName = null;
					while (user != null)
					{
						displayName = User.DisplayName + " 0" + i.ToString(CultureInfo.InvariantCulture);
						user = UserController.Instance.GetUserByDisplayname(PortalId, displayName);
						i++;
					}
					User.DisplayName = displayName;
				}
			}

			//Check Question/Answer
			if (CreateStatus == UserCreateStatus.AddUser && MembershipProviderConfig.RequiresQuestionAndAnswer)
			{
				if (string.IsNullOrEmpty(User.Membership.PasswordQuestion))
				{
					//Invalid Question
					CreateStatus = UserCreateStatus.InvalidQuestion;
				}
				if (CreateStatus == UserCreateStatus.AddUser)
				{
					if (string.IsNullOrEmpty(User.Membership.PasswordAnswer))
					{
						//Invalid Question
						CreateStatus = UserCreateStatus.InvalidAnswer;
					}
				}
			}

			if (CreateStatus != UserCreateStatus.AddUser)
			{
				_IsValid = false;
			}
			return _IsValid;
		}]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_loginControls">
          <declaration><![CDATA[private readonly List<AuthenticationLoginBase> _loginControls = new List<AuthenticationLoginBase>();]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="actionsRow">
          <declaration><![CDATA[protected HtmlGenericControl actionsRow;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cancelLink">
          <declaration><![CDATA[protected HyperLink cancelLink;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="captchaLabel">
          <declaration><![CDATA[protected LabelControl captchaLabel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="captchaRow">
          <declaration><![CDATA[protected HtmlGenericControl captchaRow;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ConfirmPasswordTextBoxCssClass">
          <declaration><![CDATA[protected const string ConfirmPasswordTextBoxCssClass = "password-confirm";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ctlCaptcha">
          <declaration><![CDATA[protected CaptchaControl ctlCaptcha;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="gotcha">
          <declaration><![CDATA[protected HtmlInputText gotcha;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="PasswordStrengthTextBoxCssClass">
          <declaration><![CDATA[protected const string PasswordStrengthTextBoxCssClass = "password-strength";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="registerButton">
          <declaration><![CDATA[protected LinkButton registerButton;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="RegistrationForm">
          <declaration><![CDATA[protected HtmlGenericControl RegistrationForm;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="socialLoginControls">
          <declaration><![CDATA[protected PlaceHolder socialLoginControls;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="userForm">
          <declaration><![CDATA[protected DnnFormEditor userForm;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="userHelpLabel">
          <declaration><![CDATA[protected Label userHelpLabel;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="AuthenticationType">
          <declaration><![CDATA[protected string AuthenticationType]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="76" sc="4" el="78" ec="5">DesktopModules\Admin\Security\Register.ascx.cs</location>
            <body hash="6d86fa186423d34a95732823e3fbd037"><![CDATA[{
				return ViewState.GetValue("AuthenticationType", Null.NullString);
			}]]></body>
          </codeblock>
          <codeblock>
            <location sl="80" sc="4" el="82" ec="5">DesktopModules\Admin\Security\Register.ascx.cs</location>
            <body hash="404e66258322e79cffe3e2d50901f78e"><![CDATA[{
				ViewState.SetValue("AuthenticationType", value, Null.NullString);
			}]]></body>
          </codeblock>
        </property>
        <property name="CreateStatus">
          <declaration><![CDATA[protected UserCreateStatus CreateStatus]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="85" sc="45" el="85" ec="49">DesktopModules\Admin\Security\Register.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="85" sc="50" el="85" ec="54">DesktopModules\Admin\Security\Register.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ExcludeTerms">
          <declaration><![CDATA[protected string ExcludeTerms]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="90" sc="4" el="97" ec="5">DesktopModules\Admin\Security\Register.ascx.cs</location>
            <body hash="ff6095f85f410906104d556c851464ae"><![CDATA[{
				string regex = String.Empty;
				if (!String.IsNullOrEmpty(PortalSettings.Registration.ExcludeTerms))
				{
					regex = @"^(?:(?!" + PortalSettings.Registration.ExcludeTerms.Replace(" ", "").Replace(",", "|") + @").)*$\r?\n?";
				}
				return regex;
			}]]></body>
          </codeblock>
        </property>
        <property name="IsValid">
          <declaration><![CDATA[protected bool IsValid]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="103" sc="4" el="105" ec="5">DesktopModules\Admin\Security\Register.ascx.cs</location>
            <body hash="0980b094a3ea1a07057f1a242bab99b4"><![CDATA[{
				return Validate();
			}]]></body>
          </codeblock>
        </property>
        <property name="UserToken">
          <declaration><![CDATA[protected string UserToken]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="111" sc="4" el="113" ec="5">DesktopModules\Admin\Security\Register.ascx.cs</location>
            <body hash="96fcbe98b28ad26933a0d159a69dc7d3"><![CDATA[{
				return ViewState.GetValue("UserToken", string.Empty);
			}]]></body>
          </codeblock>
          <codeblock>
            <location sl="115" sc="4" el="117" ec="5">DesktopModules\Admin\Security\Register.ascx.cs</location>
            <body hash="95ba11348475e7cd939e181531719854"><![CDATA[{
				ViewState.SetValue("UserToken", value, string.Empty);
			}]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="User">
      <declaration><![CDATA[public class User : UserUserControlBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public User()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
        <constructor name=".cctor">
          <declaration><![CDATA[static User()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="67" sc="6" el="67" ec="91">DesktopModules\Admin\Security\User.ascx.cs</location>
            <body hash="5fece6ca1bcad312546afcf1ebe9ad3a"><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof (User))]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="CanUpdateUsername">
          <declaration><![CDATA[private bool CanUpdateUsername()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="142" sc="9" el="171" ec="10">DesktopModules\Admin\Security\User.ascx.cs</location>
            <body hash="20829213f527b61a28d257175899b89d"><![CDATA[{
            //do not allow for non-logged in users
            if (Request.IsAuthenticated==false || AddUser)
            {
                return false;
            }

            //can only update username if a host/admin and account being managed is not a superuser
            if (UserController.Instance.GetCurrentUserInfo().IsSuperUser)
            {
                //only allow updates for non-superuser accounts
                if (User.IsSuperUser==false)
                {
                    return true;
                }
            }

            //if an admin, check if the user is only within this portal
            if (UserController.Instance.GetCurrentUserInfo().IsInRole(PortalSettings.AdministratorRoleName))
            {
                //only allow updates for non-superuser accounts
                if (User.IsSuperUser)
                {
                    return false;
                }
                if (PortalController.GetPortalsByUser(User.UserID).Count == 1) return true;
            }

            return false;
        }]]></body>
          </codeblock>
        </method>
        <method name="cmdDelete_Click">
          <declaration><![CDATA[private void cmdDelete_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="509" sc="9" el="525" ec="10">DesktopModules\Admin\Security\User.ascx.cs</location>
            <body hash="0398f734925d53f21647230665a4610e"><![CDATA[{
            if (IsUserOrAdmin == false)
            {
                return;
            }
            string name = User.Username;
            int id = UserId;
            UserInfo user = User;
            if (UserController.DeleteUser(ref user, true, false))
            {
                OnUserDeleted(new UserDeletedEventArgs(id, name));
            }
            else
            {
                OnUserDeleteError(new UserUpdateErrorArgs(id, name, "UserDeleteError"));
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="cmdRemove_Click">
          <declaration><![CDATA[private void cmdRemove_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="548" sc="9" el="564" ec="10">DesktopModules\Admin\Security\User.ascx.cs</location>
            <body hash="87800055d51feccda7df6ad509587587"><![CDATA[{
            if (IsUserOrAdmin == false)
            {
                return;
            }
            var name = User.Username;
            var id = UserId;

            if (UserController.RemoveUser(User))
            {
                OnUserRemoved(new UserRemovedEventArgs(id, name));
            }
            else
            {
                OnUserRemoveError(new UserUpdateErrorArgs(id, name, "UserRemoveError"));
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="cmdRestore_Click">
          <declaration><![CDATA[private void cmdRestore_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="528" sc="9" el="545" ec="10">DesktopModules\Admin\Security\User.ascx.cs</location>
            <body hash="cb26c95b2b9bf0ea5dc87ae498104925"><![CDATA[{
            if (IsUserOrAdmin == false)
            {
                return;
            }
            var name = User.Username;
            var id = UserId;

            var userInfo = User;
            if (UserController.RestoreUser(ref userInfo))
            {
                OnUserRestored(new UserRestoredEventArgs(id, name));
            }
            else
            {
                OnUserRestoreError(new UserUpdateErrorArgs(id, name, "UserRestoreError"));
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="cmdUpdate_Click">
          <declaration><![CDATA[private void cmdUpdate_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="571" sc="9" el="635" ec="10">DesktopModules\Admin\Security\User.ascx.cs</location>
            <body hash="ae4c0240464aa168ce79e42c2b47c61a"><![CDATA[{
            if (IsUserOrAdmin == false)
            {
                return;
            }

            if (AddUser)
            {
                if (IsValid)
                {
                    CreateUser();
                    DataCache.ClearPortalCache(PortalId, true);
                }
            }
            else
            {
                if (userForm.IsValid && (User != null))
                {
                    if (User.UserID == PortalSettings.AdministratorId)
                    {
						//Clear the Portal Cache
                        DataCache.ClearPortalCache(UserPortalID, true);
                    }
                    try
                    {
						//Update DisplayName to conform to Format
                        UpdateDisplayName();
                        //either update the username or update the user details

                        if (CanUpdateUsername() && !PortalSettings.Registration.UseEmailAsUserName)
                        {
                            UserController.ChangeUsername(User.UserID, renameUserName.Value.ToString());
                        }

                        //DNN-5874 Check if unique display name is required
                        if (PortalSettings.Registration.RequireUniqueDisplayName)
                        {
                            var usersWithSameDisplayName = (System.Collections.Generic.List<UserInfo>)MembershipProvider.Instance().GetUsersBasicSearch(PortalId, 0, 2, "DisplayName", true, "DisplayName", User.DisplayName);
                            if (usersWithSameDisplayName.Any(user => user.UserID != User.UserID))
                            {
                                UI.Skins.Skin.AddModuleMessage(this, LocalizeString("DisplayNameNotUnique"), UI.Skins.Controls.ModuleMessage.ModuleMessageType.RedError);
                                return;
                            }
                        }

                        UserController.UpdateUser(UserPortalID, User);

                        if (PortalSettings.Registration.UseEmailAsUserName && (User.Username.ToLower() != User.Email.ToLower()))
                        {
                            UserController.ChangeUsername(User.UserID, User.Email);
                        }

                        OnUserUpdated(EventArgs.Empty);
                        OnUserUpdateCompleted(EventArgs.Empty);
                    }
                    catch (Exception exc)
                    {
                        Logger.Error(exc);

                        var args = new UserUpdateErrorArgs(User.UserID, User.Username, "EmailError");
                        OnUserUpdateError(args);
                    }
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="CreateUser">
          <declaration><![CDATA[public void CreateUser()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="255" sc="9" el="285" ec="10">DesktopModules\Admin\Security\User.ascx.cs</location>
            <body hash="4b61e49d76b73837c613cd832416696c"><![CDATA[{
            //Update DisplayName to conform to Format
            UpdateDisplayName();

            if (IsRegister)
            {
                User.Membership.Approved = PortalSettings.UserRegistration == (int) Globals.PortalRegistrationType.PublicRegistration;
            }
            else
            {
                //Set the Approved status from the value in the Authorized checkbox
                User.Membership.Approved = chkAuthorize.Checked;
            }
            var user = User;

            // make sure username is set in UseEmailAsUserName" mode
            if (PortalController.GetPortalSettingAsBoolean("Registration_UseEmailAsUserName", PortalId, false))
            {
                user.Username = User.Email;
                User.Username = User.Email;
            }

            var createStatus = UserController.CreateUser(ref user);

            var args = (createStatus == UserCreateStatus.Success)
                                            ? new UserCreatedEventArgs(User) {Notify = chkNotify.Checked} 
                                            : new UserCreatedEventArgs(null);
            args.CreateStatus = createStatus;
            OnUserCreated(args);
            OnUserCreateCompleted(args);
        }]]></body>
          </codeblock>
        </method>
        <method name="DataBind">
          <declaration><![CDATA[public override void DataBind()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="292" sc="9" el="423" ec="10">DesktopModules\Admin\Security\User.ascx.cs</location>
            <body hash="65879af1f32fbf3800272bc2246582d5"><![CDATA[{
            if (Page.IsPostBack == false)
            {
                string confirmString = Localization.GetString("DeleteItem");
                if (IsUser)
                {
                    confirmString = Localization.GetString("ConfirmUnRegister", LocalResourceFile);
                }
                ClientAPI.AddButtonConfirm(cmdDelete, confirmString);
                chkRandom.Checked = false;
            }

            cmdDelete.Visible = false;
            cmdRemove.Visible = false;
            cmdRestore.Visible = false;
            if (!AddUser)
            {
                var deletePermitted = (User.UserID != PortalSettings.AdministratorId) && !(IsUser && User.IsSuperUser);
                if ((deletePermitted))
                {
                    if ((User.IsDeleted))
                    {
                        cmdRemove.Visible = true;
                        cmdRestore.Visible = true;
                    }
                    else
                    {
                        cmdDelete.Visible = true;
                    }
                }
            }

            cmdUpdate.Text = Localization.GetString(IsUser ? "Register" : "CreateUser", LocalResourceFile);
            cmdDelete.Text = Localization.GetString(IsUser ? "UnRegister" : "Delete", LocalResourceFile);
            if (AddUser)
            {
                pnlAddUser.Visible = true;
                if (IsRegister)
                {
                    AuthorizeNotify.Visible = false;
                    randomRow.Visible = false;
                    if (ShowPassword)
                    {
                        questionRow.Visible = MembershipProviderConfig.RequiresQuestionAndAnswer;
                        answerRow.Visible = MembershipProviderConfig.RequiresQuestionAndAnswer;
                        lblPasswordHelp.Text = Localization.GetString("PasswordHelpUser", LocalResourceFile);
                    }
                }
                else
                {
                    lblPasswordHelp.Text = Localization.GetString("PasswordHelpAdmin", LocalResourceFile);
                }
                txtConfirm.Attributes.Add("value", txtConfirm.Text);
                txtPassword.Attributes.Add("value", txtPassword.Text);
            }


            bool disableUsername = PortalController.GetPortalSettingAsBoolean("Registration_UseEmailAsUserName", PortalId, false);

            //only show username row once UseEmailAsUserName is disabled in site settings
            if (disableUsername)
            {
                userNameReadOnly.Visible = false;
                userName.Visible = false;
            }
            else
            {
                userNameReadOnly.Visible = !AddUser;
                userName.Visible = AddUser;
            }

            if (CanUpdateUsername() && !disableUsername)
            {
               
                renameUserName.Visible = true;
                
                userName.Visible = false;
                userNameReadOnly.Visible = false;

                ArrayList portals = PortalController.GetPortalsByUser(User.UserID);
                if (portals.Count>1)
                {
                    numSites.Text=String.Format(Localization.GetString("UpdateUserName", LocalResourceFile), portals.Count.ToString());
                    cboSites.Visible = true;
                    cboSites.DataSource = portals;
                    cboSites.DataTextField = "PortalName";
                    cboSites.DataBind();

                    renameUserPortals.Visible = true;
                }
            }

			if (!string.IsNullOrEmpty(PortalSettings.Registration.UserNameValidator))
            {
				userName.ValidationExpression = PortalSettings.Registration.UserNameValidator;
            }

			if (!string.IsNullOrEmpty(PortalSettings.Registration.EmailValidator))
            {
				email.ValidationExpression = PortalSettings.Registration.EmailValidator;
            }

			if (!string.IsNullOrEmpty(PortalSettings.Registration.DisplayNameFormat))
            {
                if (AddUser)
                {
                    displayNameReadOnly.Visible = false;
                    displayName.Visible = false;
                }
                else
                {
                    displayNameReadOnly.Visible = true;
                    displayName.Visible = false;
                }
                firstName.Visible = true;
                lastName.Visible = true;
            }
            else
            {
                displayNameReadOnly.Visible = false;
                displayName.Visible = true;
                firstName.Visible = false;
                lastName.Visible = false;
            }

            userForm.DataSource = User;
			if (!Page.IsPostBack)
			{
				userForm.DataBind();
			    renameUserName.Value = User.Username;
			}
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="436" sc="9" el="442" ec="10">DesktopModules\Admin\Security\User.ascx.cs</location>
            <body hash="17c7cf470fae61db25293849bfc8dbe9"><![CDATA[{
            base.OnLoad(e);
            cmdDelete.Click += cmdDelete_Click;
            cmdUpdate.Click += cmdUpdate_Click;
            cmdRemove.Click += cmdRemove_Click;
            cmdRestore.Click += cmdRestore_Click;
        }]]></body>
          </codeblock>
        </method>
        <method name="OnPreRender">
          <declaration><![CDATA[protected override void OnPreRender(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="445" sc="9" el="501" ec="10">DesktopModules\Admin\Security\User.ascx.cs</location>
            <body hash="a6fe939e88d20b235787dc0338acbd5e"><![CDATA[{
            ClientResourceManager.RegisterScript(Page, "~/Resources/Shared/scripts/dnn.jquery.extensions.js");
            ClientResourceManager.RegisterScript(Page, "~/Resources/Shared/scripts/dnn.jquery.tooltip.js");
            ClientResourceManager.RegisterScript(Page, "~/Resources/Shared/scripts/dnn.PasswordStrength.js");
            ClientResourceManager.RegisterScript(Page, "~/DesktopModules/Admin/Security/Scripts/dnn.PasswordComparer.js");

			ClientResourceManager.RegisterStyleSheet(Page, "~/Resources/Shared/stylesheets/dnn.PasswordStrength.css", FileOrder.Css.ResourceCss);

			JavaScript.RequestRegistration(CommonJs.DnnPlugins);

            base.OnPreRender(e);


			if (Host.EnableStrengthMeter)
			{
				passwordContainer.CssClass = "password-strength-container";
				txtPassword.CssClass = "password-strength";
				txtConfirm.CssClass = string.Format("{0} checkStength", txtConfirm.CssClass);
				
				var options = new DnnPaswordStrengthOptions();
				var optionsAsJsonString = Json.Serialize(options);
				var passwordScript = string.Format("dnn.initializePasswordStrength('.{0}', {1});{2}",
					"password-strength", optionsAsJsonString, Environment.NewLine);

				if (ScriptManager.GetCurrent(Page) != null)
				{
					// respect MS AJAX
					ScriptManager.RegisterStartupScript(Page, GetType(), "PasswordStrength", passwordScript, true);
				}
				else
				{
					Page.ClientScript.RegisterStartupScript(GetType(), "PasswordStrength", passwordScript, true);
				}
			}

			var confirmPasswordOptions = new DnnConfirmPasswordOptions()
			{
				FirstElementSelector = "#" + passwordContainer.ClientID + " input[type=password]",
				SecondElementSelector = ".password-confirm",
				ContainerSelector = ".dnnFormPassword",
				UnmatchedCssClass = "unmatched",
				MatchedCssClass = "matched"
			};

			var confirmOptionsAsJsonString = Json.Serialize(confirmPasswordOptions);
			var confirmScript = string.Format("dnn.initializePasswordComparer({0});{1}", confirmOptionsAsJsonString, Environment.NewLine);

			if (ScriptManager.GetCurrent(Page) != null)
			{
				// respect MS AJAX
				ScriptManager.RegisterStartupScript(Page, GetType(), "ConfirmPassword", confirmScript, true);
			}
			else
			{
				Page.ClientScript.RegisterStartupScript(GetType(), "ConfirmPassword", confirmScript, true);
			}
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateDisplayName">
          <declaration><![CDATA[private void UpdateDisplayName()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="174" sc="9" el="180" ec="10">DesktopModules\Admin\Security\User.ascx.cs</location>
            <body hash="c1386c7dd30596b88795acf35c516ccc"><![CDATA[{
			//Update DisplayName to conform to Format
			if (!string.IsNullOrEmpty(PortalSettings.Registration.DisplayNameFormat))
            {
				User.UpdateDisplayName(PortalSettings.Registration.DisplayNameFormat);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="Validate">
          <declaration><![CDATA[private bool Validate()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="187" sc="9" el="244" ec="10">DesktopModules\Admin\Security\User.ascx.cs</location>
            <body hash="c652547e2e0a11e5950af53bcaa0a230"><![CDATA[{
            //Check User Editor
            bool _IsValid = userForm.IsValid;

            //Check Password is valid
            if (AddUser && ShowPassword)
            {
                CreateStatus = UserCreateStatus.AddUser;
                if (!chkRandom.Checked)
                {					
					//1. Check Password is Valid
                    if (CreateStatus == UserCreateStatus.AddUser && !UserController.ValidatePassword(txtPassword.Text))
                    {
                        CreateStatus = UserCreateStatus.InvalidPassword;
                    }
                    if (CreateStatus == UserCreateStatus.AddUser)
                    {
                        User.Membership.Password = txtPassword.Text;
                    }
                }
                else
                {
					//Generate a random password for the user
                    User.Membership.Password = UserController.GeneratePassword();
                }
				
                //Check Question/Answer
                if (CreateStatus == UserCreateStatus.AddUser && MembershipProviderConfig.RequiresQuestionAndAnswer)
                {
                    if (string.IsNullOrEmpty(txtQuestion.Text))
                    {
						//Invalid Question
                        CreateStatus = UserCreateStatus.InvalidQuestion;
                    }
                    else
                    {
                        User.Membership.PasswordQuestion = txtQuestion.Text;
                    }
                    if (CreateStatus == UserCreateStatus.AddUser)
                    {
                        if (string.IsNullOrEmpty(txtAnswer.Text))
                        {
							//Invalid Question
                            CreateStatus = UserCreateStatus.InvalidAnswer;
                        }
                        else
                        {
                            User.Membership.PasswordAnswer = txtAnswer.Text;
                        }
                    }
                }
                if (CreateStatus != UserCreateStatus.AddUser)
                {
                    _IsValid = false;
                }
            }
            return _IsValid;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="actionsRow">
          <declaration><![CDATA[protected HtmlGenericControl actionsRow;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="answerRow">
          <declaration><![CDATA[protected HtmlGenericControl answerRow;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="AuthorizeNotify">
          <declaration><![CDATA[protected HtmlGenericControl AuthorizeNotify;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cboSites">
          <declaration><![CDATA[protected DnnComboBox cboSites;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkAuthorize">
          <declaration><![CDATA[protected CheckBox chkAuthorize;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkNotify">
          <declaration><![CDATA[protected CheckBox chkNotify;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkRandom">
          <declaration><![CDATA[protected CheckBox chkRandom;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdDelete">
          <declaration><![CDATA[protected LinkButton cmdDelete;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdRemove">
          <declaration><![CDATA[protected LinkButton cmdRemove;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdRestore">
          <declaration><![CDATA[protected LinkButton cmdRestore;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdUpdate">
          <declaration><![CDATA[protected LinkButton cmdUpdate;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ComparePasswordsValidator">
          <declaration><![CDATA[protected CompareValidator ComparePasswordsValidator;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="displayName">
          <declaration><![CDATA[protected DnnFormTextBoxItem displayName;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="displayNameReadOnly">
          <declaration><![CDATA[protected DnnFormLiteralItem displayNameReadOnly;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="email">
          <declaration><![CDATA[protected DnnFormTextBoxItem email;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="firstName">
          <declaration><![CDATA[protected DnnFormTextBoxItem firstName;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lastName">
          <declaration><![CDATA[protected DnnFormTextBoxItem lastName;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblPasswordHelp">
          <declaration><![CDATA[protected Label lblPasswordHelp;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Logger">
          <declaration><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof(User));]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="numSites">
          <declaration><![CDATA[protected LabelControl numSites;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Password">
          <declaration><![CDATA[protected HtmlGenericControl Password;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="passwordContainer">
          <declaration><![CDATA[protected Panel passwordContainer;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plAnswer">
          <declaration><![CDATA[protected LabelControl plAnswer;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plAuthorize">
          <declaration><![CDATA[protected LabelControl plAuthorize;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plConfirm">
          <declaration><![CDATA[protected LabelControl plConfirm;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plNotify">
          <declaration><![CDATA[protected LabelControl plNotify;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plPassword">
          <declaration><![CDATA[protected LabelControl plPassword;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plQuestion">
          <declaration><![CDATA[protected LabelControl plQuestion;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plRandom">
          <declaration><![CDATA[protected LabelControl plRandom;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="pnlAddUser">
          <declaration><![CDATA[protected Panel pnlAddUser;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="questionRow">
          <declaration><![CDATA[protected HtmlGenericControl questionRow;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="randomRow">
          <declaration><![CDATA[protected HtmlGenericControl randomRow;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="renameUserName">
          <declaration><![CDATA[protected DnnFormTextBoxItem renameUserName;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="renameUserPortals">
          <declaration><![CDATA[protected HtmlGenericControl renameUserPortals;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtAnswer">
          <declaration><![CDATA[protected TextBox txtAnswer;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtConfirm">
          <declaration><![CDATA[protected TextBox txtConfirm;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtPassword">
          <declaration><![CDATA[protected TextBox txtPassword;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtQuestion">
          <declaration><![CDATA[protected TextBox txtQuestion;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="userForm">
          <declaration><![CDATA[protected DnnFormEditor userForm;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="userName">
          <declaration><![CDATA[protected DnnFormTextBoxItem userName;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="userNameReadOnly">
          <declaration><![CDATA[protected DnnFormLiteralItem userNameReadOnly;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="CreateStatus">
          <declaration><![CDATA[public UserCreateStatus CreateStatus]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="70" sc="48" el="70" ec="52">DesktopModules\Admin\Security\User.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="70" sc="53" el="70" ec="57">DesktopModules\Admin\Security\User.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="CssClass">
          <declaration><![CDATA[public string CssClass]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="122" sc="7" el="124" ec="8">DesktopModules\Admin\Security\User.ascx.cs</location>
            <body hash="49ec61fea83e1cb1f7da891552978b3a"><![CDATA[{
				return pnlAddUser.CssClass;
    		}]]></body>
          </codeblock>
          <codeblock>
            <location sl="126" sc="4" el="129" ec="5">DesktopModules\Admin\Security\User.ascx.cs</location>
            <body hash="c2d1ef228184873611ecbe6d0ca4299f"><![CDATA[{
				userForm.CssClass = string.IsNullOrEmpty(userForm.CssClass) ? value : string.Format("{0} {1}", userForm.CssClass, value);
				pnlAddUser.CssClass = string.IsNullOrEmpty(pnlAddUser.CssClass) ? value : string.Format("{0} {1}", pnlAddUser.CssClass, value); ;
			}]]></body>
          </codeblock>
        </property>
        <property name="IsValid">
          <declaration><![CDATA[public bool IsValid]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="79" sc="13" el="81" ec="14">DesktopModules\Admin\Security\User.ascx.cs</location>
            <body hash="fa08922e8a1fa0d99601f4c00ee93381"><![CDATA[{
                return Validate();
            }]]></body>
          </codeblock>
        </property>
        <property name="ShowPassword">
          <declaration><![CDATA[public bool ShowPassword]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="91" sc="13" el="93" ec="14">DesktopModules\Admin\Security\User.ascx.cs</location>
            <body hash="efa91da58d4ad9705d55851004d03102"><![CDATA[{
                return Password.Visible;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="95" sc="13" el="97" ec="14">DesktopModules\Admin\Security\User.ascx.cs</location>
            <body hash="f40a176f1616726ca601d9423cd3b489"><![CDATA[{
                Password.Visible = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="ShowUpdate">
          <declaration><![CDATA[public bool ShowUpdate]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="107" sc="13" el="109" ec="14">DesktopModules\Admin\Security\User.ascx.cs</location>
            <body hash="34fb05653c52198c2daa314f4768a1ba"><![CDATA[{
                return actionsRow.Visible;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="111" sc="13" el="113" ec="14">DesktopModules\Admin\Security\User.ascx.cs</location>
            <body hash="a0512fc3e1223b76f4fe3c6ad017b843"><![CDATA[{
                actionsRow.Visible = value;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="UserAccounts">
      <declaration><![CDATA[public class UserAccounts : PortalModuleBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public UserAccounts()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="60" sc="9" el="65" ec="10">DesktopModules\Admin\Security\Users.ascx.cs</location>
            <body hash="5b5a35c708c204502179d4aa8e02d41a"><![CDATA[public UserAccounts()
        {
            Users = new ArrayList();
            FilterProperty = "";
            Filter = "";
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="AddSearchItem">
          <declaration><![CDATA[private DnnComboBoxItem AddSearchItem(string name)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="134" sc="9" el="151" ec="10">DesktopModules\Admin\Security\Users.ascx.cs</location>
            <body hash="7e98a72618b955e9cd08891ab66cd77b"><![CDATA[{
            var propertyName = Null.NullString;
            if (Request.QueryString["filterProperty"] != null)
            {
                propertyName = Request.QueryString["filterProperty"];
            }
            var text = Localization.GetString(name, LocalResourceFile);
            if (String.IsNullOrEmpty(text))
            {
                text = name;
            }
            var item = new DnnComboBoxItem(text, name);
            if (name.Equals(propertyName, StringComparison.InvariantCultureIgnoreCase))
            {
                item.Selected = true;
            }
            return item;
        }]]></body>
          </codeblock>
        </method>
        <method name="ChangePageSizeSetting">
          <declaration><![CDATA[private void ChangePageSizeSetting(int portalId, int userId, int pageSize)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="599" sc="9" el="605" ec="10">DesktopModules\Admin\Security\Users.ascx.cs</location>
            <body hash="3d26386cf391ded93ccf64d4a98caacb"><![CDATA[{
            var personalizationController = new Services.Personalization.PersonalizationController();
            var personalization = personalizationController.LoadProfile(userId, portalId);
            personalization.Profile["User-Accounts:" + "pageSize_" + portalId] = pageSize.ToString(CultureInfo.InvariantCulture);
            personalization.IsModified = true;
            personalizationController.SaveProfile(personalization);
        }]]></body>
          </codeblock>
        </method>
        <method name="CreateLetterSearch">
          <declaration><![CDATA[private void CreateLetterSearch()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="215" sc="9" el="228" ec="10">DesktopModules\Admin\Security\Users.ascx.cs</location>
            <body hash="5c9980d8907a8f7f0c676f518bcfabe9"><![CDATA[{
            var filters = Localization.GetString("Filter.Text", LocalResourceFile);

            filters += "," + Localization.GetString("All");
            filters += "," + Localization.GetString("OnLine");
            if (!IsSuperUser)
            {
                filters += "," + Localization.GetString("Unauthorized");
            }
            filters += "," + Localization.GetString("Deleted");
            var strAlphabet = filters.Split(',');
            rptLetterSearch.DataSource = strAlphabet;
            rptLetterSearch.DataBind();
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteUnAuthorizedButtonClick">
          <declaration><![CDATA[private void DeleteUnAuthorizedButtonClick(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="570" sc="9" el="572" ec="10">DesktopModules\Admin\Security\Users.ascx.cs</location>
            <body hash="e0c1f474d8d9ed537321b04dc81eea79"><![CDATA[{
            DeleteUnAuthorizedUsers();
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteUnAuthorizedUsers">
          <declaration><![CDATA[private void DeleteUnAuthorizedUsers()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="231" sc="9" el="241" ec="10">DesktopModules\Admin\Security\Users.ascx.cs</location>
            <body hash="94a11f750a13cf7287fbfc9e6be9beba"><![CDATA[{
            try
            {
                UserController.DeleteUnauthorizedUsers(UsersPortalId);
                RebindGrid();
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteUser">
          <declaration><![CDATA[private void DeleteUser(int userId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="625" sc="9" el="650" ec="10">DesktopModules\Admin\Security\Users.ascx.cs</location>
            <body hash="7a6c23eb9ad3f6c4ea35b4de2bb4d7c7"><![CDATA[{            
            try
            {
                var user = UserController.GetUserById(UsersPortalId, userId);
                if (user != null)
                {
                    if (UserController.DeleteUser(ref user, true, false))
                    {
                        UI.Skins.Skin.AddModuleMessage(this, Localization.GetString("UserDeleted", LocalResourceFile), ModuleMessage.ModuleMessageType.GreenSuccess);
                    }
                    else
                    {
                        UI.Skins.Skin.AddModuleMessage(this, Localization.GetString("UserDeleteError", LocalResourceFile), ModuleMessage.ModuleMessageType.RedError);
                    }
                }
                if (!String.IsNullOrEmpty(txtSearch.Text))
                {
                    Filter = txtSearch.Text;
                }
                RebindGrid();
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="DisplayAddress">
          <declaration><![CDATA[public string DisplayAddress(object unit, object street, object city, object region, object country, object postalCode)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="309" sc="9" el="320" ec="10">DesktopModules\Admin\Security\Users.ascx.cs</location>
            <body hash="ee27cb88b05108c8b25ad5ad28bfb6c3"><![CDATA[{
            var address = Null.NullString;
            try
            {
                address = Globals.FormatAddress(unit, street, city, region, country, postalCode);
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
            return address;
        }]]></body>
          </codeblock>
        </method>
        <method name="DisplayDate">
          <declaration><![CDATA[public string DisplayDate(DateTime userDate)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="340" sc="9" el="351" ec="10">DesktopModules\Admin\Security\Users.ascx.cs</location>
            <body hash="8424cf23c0a08a709dc5d9ddcd5be75f"><![CDATA[{
            var date = Null.NullString;
            try
            {
                date = !Null.IsNull(userDate) ? userDate.ToString() : "";
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
            return date;
        }]]></body>
          </codeblock>
        </method>
        <method name="DisplayEmail">
          <declaration><![CDATA[public string DisplayEmail(string email)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="323" sc="9" el="337" ec="10">DesktopModules\Admin\Security\Users.ascx.cs</location>
            <body hash="3328afff6e79b7ad430693c00b293093"><![CDATA[{
            var displayEmail = Null.NullString;
            try
            {
                if (email != null)
                {
                    displayEmail = HtmlUtils.FormatEmail(email, false);
                }
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
            return displayEmail;
        }]]></body>
          </codeblock>
        </method>
        <method name="FilterURL">
          <declaration><![CDATA[protected string FilterURL(string filter)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="368" sc="9" el="377" ec="10">DesktopModules\Admin\Security\Users.ascx.cs</location>
            <body hash="e85636ab7931523d9c41ef78cab61d88"><![CDATA[{
            var parameters = new List<string> {string.Format("pagesize=" + grdUsers.PageSize)};

            if (!String.IsNullOrEmpty(Filter))
            {
                parameters.Add("filter=" + filter);
            }
                
            return Globals.NavigateURL(TabId, "", parameters.ToArray());
        }]]></body>
          </codeblock>
        </method>
        <method name="FormatURL">
          <declaration><![CDATA[protected string FormatURL(string strKeyName, string strKeyValue)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="354" sc="9" el="365" ec="10">DesktopModules\Admin\Security\Users.ascx.cs</location>
            <body hash="73818fd5ba86c1e3a772d3cce40de181"><![CDATA[{
            var url = Null.NullString;
            try
            {
                url = !String.IsNullOrEmpty(Filter) ? EditUrl(strKeyName, strKeyValue, "", "filter=" + Filter) : EditUrl(strKeyName, strKeyValue);
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
            return url;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPageSizeSetting">
          <declaration><![CDATA[private int GetPageSizeSetting(int portalId, int userId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="608" sc="9" el="617" ec="10">DesktopModules\Admin\Security\Users.ascx.cs</location>
            <body hash="29b4f1f85b84d36c9eda6e6e6ebb0bdf"><![CDATA[{
            var personalizationController = new Services.Personalization.PersonalizationController();
            var personalization = personalizationController.LoadProfile(userId, portalId);
            var pageSizeValue = personalization.Profile["User-Accounts:" + "pageSize_" + portalId];
            if (pageSizeValue == null)
            {
                return Null.NullInteger;
            }
            return Int32.Parse(pageSizeValue.ToString(), CultureInfo.InvariantCulture);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetUserId">
          <declaration><![CDATA[private int GetUserId(GridCommandEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="620" sc="9" el="622" ec="10">DesktopModules\Admin\Security\Users.ascx.cs</location>
            <body hash="3b0ddb65c2576af5260af8348e154a4c"><![CDATA[{
            return Convert.ToInt32(e.CommandArgument);
        }]]></body>
          </codeblock>
        </method>
        <method name="GrdUsersOnItemCommand">
          <declaration><![CDATA[private void GrdUsersOnItemCommand(object source, GridCommandEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="581" sc="9" el="597" ec="10">DesktopModules\Admin\Security\Users.ascx.cs</location>
            <body hash="32b64bc6408116f4ea83692ab5cfe6ac"><![CDATA[{
            switch (e.CommandName)
            {
                case "Delete":
                    DeleteUser(GetUserId(e));
                    break;
                case "Remove":
                    RemoveUser(GetUserId(e));
                    break;
                case "Restore":
                    RestoreUser(GetUserId(e));
                    break;
                case "ChangePageSize":
                    ChangePageSizeSetting(PortalSettings.PortalId, UserInfo.UserID, ((GridPageSizeChangedEventArgs)e).NewPageSize);
                    break;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GrdUsersOnItemDataBound">
          <declaration><![CDATA[private void GrdUsersOnItemDataBound(object sender, GridItemEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="721" sc="9" el="806" ec="10">DesktopModules\Admin\Security\Users.ascx.cs</location>
            <body hash="1df51c4b628cbe5af400ce1725524fd3"><![CDATA[{
            var item = e.Item;
            if (item.ItemType == GridItemType.Item || item.ItemType == GridItemType.AlternatingItem || item.ItemType == GridItemType.SelectedItem)
            {
                var imgApprovedDeleted = item.FindControl("imgApprovedDeleted");
                var imgNotApprovedDeleted = item.FindControl("imgNotApprovedDeleted");
                var imgApproved = item.FindControl("imgApproved");
                var imgNotApproved = item.FindControl("imgNotApproved");

                var user = (UserInfo)item.DataItem;

                if (user == null)
                {
                    return;
                }

                if (user.IsDeleted)
                {
                    foreach (WebControl control in item.Controls)
                    {
                        control.Attributes.Remove("class");
                        control.Attributes.Add("class", "NormalDeleted");
                    }
                    if (imgApprovedDeleted != null && user.Membership.Approved)
                    {
                        imgApprovedDeleted.Visible = true;
                    }
                    else if (imgNotApprovedDeleted != null && !user.Membership.Approved)
                    {
                        imgNotApprovedDeleted.Visible = true;
                    }
                }
                else
                {
                    if (imgApproved != null && user.Membership.Approved)
                    {
                        imgApproved.Visible = true;
                    }
                    else if (imgNotApproved != null && !user.Membership.Approved)
                    {
                        imgNotApproved.Visible = true;
                    }
                }

                var gridDataItem = (GridDataItem)item;

                var editLink = gridDataItem["EditButton"].Controls[0] as HyperLink;
                if (editLink != null)
                {
                    editLink.Visible = (!user.IsInRole(PortalSettings.AdministratorRoleName) || (PortalSecurity.IsInRole(PortalSettings.AdministratorRoleName)));
                    if (editLink.Visible)
                    {
                        if (user.IsSuperUser)
                        {
                            editLink.Visible = PortalSettings.UserInfo.IsSuperUser;
                        }
                    }
                }

                var delete = (DnnImageButton)item.FindControl("Delete");
                delete.Visible = IsCommandAllowed(user, "Delete");
                delete.CommandArgument = user.UserID.ToString(CultureInfo.InvariantCulture);
                delete.ToolTip = Localization.GetString("Delete.Text", LocalResourceFile);

                var restore = (DnnImageButton)item.FindControl("Restore");
                restore.Visible = IsCommandAllowed(user, "Restore");
                restore.CommandArgument = user.UserID.ToString(CultureInfo.InvariantCulture);
                restore.ToolTip = Localization.GetString("Restore.Text", LocalResourceFile);

                var remove = (DnnImageButton)item.FindControl("Remove");
                remove.Visible = IsCommandAllowed(user, "Remove");
                remove.CommandArgument = user.UserID.ToString(CultureInfo.InvariantCulture);
                remove.ToolTip = Localization.GetString("Remove.Text", LocalResourceFile);

                var rolesColumn = gridDataItem["RolesButton"].Controls[0];
                rolesColumn.Visible = !user.IsSuperUser && (!user.IsInRole(PortalSettings.AdministratorRoleName) 
                                                              || (PortalSecurity.IsInRole(PortalSettings.AdministratorRoleName)));

                var onlineControl = (DnnImage)item.FindControl("imgOnline");
                if (onlineControl != null)
                {
                    onlineControl.Visible = user.Membership.IsOnLine;
                    onlineControl.ToolTip = Localization.GetString("Online.Text", LocalResourceFile);
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GrdUsersOnPreRender">
          <declaration><![CDATA[private void GrdUsersOnPreRender(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="716" sc="9" el="718" ec="10">DesktopModules\Admin\Security\Users.ascx.cs</location>
            <body hash="4c040e2a9af014c18e5f23e4f1cb2a33"><![CDATA[{
            grdUsers.Columns.FindByUniqueName("UsersOnline").Visible = Entities.Host.Host.EnableUsersOnline;
        }]]></body>
          </codeblock>
        </method>
        <method name="InitializeGrid">
          <declaration><![CDATA[private void InitializeGrid()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="154" sc="9" el="157" ec="10">DesktopModules\Admin\Security\Users.ascx.cs</location>
            <body hash="e8515210197d70290e5f23a7fde7c886"><![CDATA[{
            grdUsers.MasterTableView.PagerStyle.PageSizeLabelText = LocalizeString("PagerPageSize.Text");
            grdUsers.MasterTableView.PagerStyle.PagerTextFormat = LocalizeString("PagerTextFormat.Text");
        }]]></body>
          </codeblock>
        </method>
        <method name="IsCommandAllowed">
          <declaration><![CDATA[private bool IsCommandAllowed(UserInfo user, string command)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="263" sc="9" el="291" ec="10">DesktopModules\Admin\Security\Users.ascx.cs</location>
            <body hash="7df74d7f7fb4ef51b15f10f8214976df"><![CDATA[{
            var imageVisibility = !(user.IsSuperUser) || UserInfo.IsSuperUser;

            if (imageVisibility)
            {
				imageVisibility = !IsPortalAdministrator(user.UserID)
                                        && (!user.IsInRole(PortalSettings.AdministratorRoleName)
                                            || (PortalSecurity.IsInRole(PortalSettings.AdministratorRoleName)))
                                        && user.UserID != UserId;
            }

            if ((imageVisibility))
            {
                switch (command)
                {
                    case "Delete":
                        if ((user.IsDeleted))
                        {
                            imageVisibility = false;
                        }
                        break;
                    case "Restore":
                    case "Remove":
                        imageVisibility = (user.IsDeleted);
                        break;
                }
            }
            return imageVisibility;
        }]]></body>
          </codeblock>
        </method>
        <method name="IsPortalAdministrator">
          <declaration><![CDATA[private bool IsPortalAdministrator(int userId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="294" sc="3" el="302" ec="4">DesktopModules\Admin\Security\Users.ascx.cs</location>
            <body hash="c2a9add59ff5bce2a6f1de6f6e235607"><![CDATA[{
            var groupId = PortalController.Instance.GetPortal(PortalSettings.PortalId).PortalGroupID;
			if (groupId != Null.NullInteger)
			{
				return PortalGroupController.Instance.GetPortalsByGroup(groupId).Any(p => p.AdministratorId == userId);
			}

			return userId == PortalSettings.AdministratorId;
		}]]></body>
          </codeblock>
        </method>
        <method name="NeedDataSource">
          <declaration><![CDATA[protected void NeedDataSource(object sender, GridNeedDataSourceEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="809" sc="9" el="811" ec="10">DesktopModules\Admin\Security\Users.ascx.cs</location>
            <body hash="a0b1617b701923449f8926d80d026e1b"><![CDATA[{
            SetGridDataSource();
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="384" sc="9" el="495" ec="10">DesktopModules\Admin\Security\Users.ascx.cs</location>
            <body hash="d1be7087b1057dd6a0a65e989b4df18f"><![CDATA[{
            base.OnInit(e);

            cmdSearch.Click += OnSearchClick;
            deleteUnAuthorizedButton.Click += DeleteUnAuthorizedButtonClick;
            removeDeletedButton.Click += RemoveDeletedButtonClick;
            grdUsers.ItemDataBound += GrdUsersOnItemDataBound;
            grdUsers.ItemCommand += GrdUsersOnItemCommand;
            grdUsers.PreRender += GrdUsersOnPreRender;

            addUserButton.NavigateUrl = EditUrl("Edit");
            if (ModulePermissionController.CanAdminModule(this.ModuleConfiguration))
            {
                addUserButton.Visible = true;
                removeDeletedButton.Visible = true;
                deleteUnAuthorizedButton.Visible = true;
            }
            
            InitializeGrid();
            if (!Page.IsPostBack)
            {
                SetInitialPageSize();
            }
            
            if (Request.QueryString["filter"] != null)
            {
                Filter = Request.QueryString["filter"];
            }
            if (Request.QueryString["filterproperty"] != null)
            {
                FilterProperty = Request.QueryString["filterproperty"];
            }
            if (String.IsNullOrEmpty(Filter))
            {
				//Get Default View
                var setting = UserModuleBase.GetSetting(PortalSettings.PortalId, "Display_Mode");
                var mode = (DisplayMode) setting;
                switch (mode)
                {
                    case DisplayMode.All:
                        Filter = Localization.GetString("All");
                        break;
                    case DisplayMode.FirstLetter:
                        Filter = Localization.GetString("Filter.Text", LocalResourceFile).Substring(0, 1);
                        break;
                    case DisplayMode.None:
                        Filter = "None";
                        break;
                }
            }
            foreach (GridColumn column in grdUsers.Columns)
            {
                bool isVisible;
                var header = column.HeaderText;
                if (String.IsNullOrEmpty(header) || header.ToLower() == "username")
                {
                    isVisible = true;
                }
                else
                {
                    var settingKey = "Column_" + header;
                    var setting = UserModuleBase.GetSetting(PortalSettings.PortalId, settingKey);
                    isVisible = Convert.ToBoolean(setting);
                }

                if (ReferenceEquals(column.GetType(), typeof(DnnGridTemplateColumn)) && column.UniqueName == "DeleteActions")
                {
                    isVisible = ModulePermissionController.HasModulePermission(ModuleConfiguration.ModulePermissions, "EDIT");
                }
                else if (ReferenceEquals(column.GetType(), typeof (DnnGridImageCommandColumn)))
                {
                    isVisible = ModulePermissionController.HasModulePermission(ModuleConfiguration.ModulePermissions, "EDIT");

                    var imageColumn = (DnnGridImageCommandColumn)column;

                    //Manage Edit Column NavigateURLFormatString
                    if (imageColumn.CommandName == "Edit")
                    {
                        //so first create the format string with a dummy value and then
                        //replace the dummy value with the FormatString place holder
                        var formatString = EditUrl("UserId", "KEYFIELD", "Edit", UserFilter(false));
                        formatString = formatString.Replace("KEYFIELD", "{0}");
                        imageColumn.NavigateURLFormatString = formatString;
                    }

                    //Manage Roles Column NavigateURLFormatString
                    if (imageColumn.CommandName == "UserRoles")
                    {
                        if (IsHostMenu)
                        {
                            isVisible = false;
                        }
                        else
                        {
                            //The Friendly URL parser does not like non-alphanumeric characters
                            //so first create the format string with a dummy value and then
                            //replace the dummy value with the FormatString place holder
                            var formatString = EditUrl("UserId", "KEYFIELD", "User Roles", UserFilter(false));
                            formatString = formatString.Replace("KEYFIELD", "{0}");
                            imageColumn.NavigateURLFormatString = formatString;
                        }
                    }

                    //Localize Image Column Text
                    if (!String.IsNullOrEmpty(imageColumn.CommandName))
                    {
                        imageColumn.Text = Localization.GetString(imageColumn.CommandName, LocalResourceFile);
                    }
                }
                column.Visible = isVisible;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="523" sc="9" el="562" ec="10">DesktopModules\Admin\Security\Users.ascx.cs</location>
            <body hash="357ead619c0987e7d82e9f9a19f6008e"><![CDATA[{
            base.OnLoad(e);

            try
            {
                if (!Page.IsPostBack)
                {
					ClientAPI.RegisterKeyCapture(txtSearch, cmdSearch, 13);
					//Load the Search Combo
                    ddlSearchType.Items.Add(AddSearchItem("Username"));
                    ddlSearchType.Items.Add(AddSearchItem("Email"));
					ddlSearchType.Items.Add(AddSearchItem("DisplayName"));
					var controller = new ListController();
					ListEntryInfo imageDataType = controller.GetListEntryInfo("DataType", "Image");
                    ProfilePropertyDefinitionCollection profileProperties = ProfileController.GetPropertyDefinitionsByPortal(PortalId, false, false);
                    foreach (ProfilePropertyDefinition definition in profileProperties)
                    {
                        if (imageDataType != null && definition.DataType != imageDataType.EntryID)
                        {
							ddlSearchType.Items.Add(AddSearchItem(definition.PropertyName));
                        }
                    }
                    
					//Sent controls to current Filter
					if ((!String.IsNullOrEmpty(Filter) && Filter.ToUpper() != "NONE") && !String.IsNullOrEmpty(FilterProperty))
                    {
                        txtSearch.Text = Filter;
                        var findedItem = ddlSearchType.Items.FindItemByValue(FilterProperty, true);
                        if (findedItem != null)
                        {
                            findedItem.Selected = true;
                        }
                    }
                }
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnSearchClick">
          <declaration><![CDATA[private void OnSearchClick(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="575" sc="9" el="578" ec="10">DesktopModules\Admin\Security\Users.ascx.cs</location>
            <body hash="74b1e62c4d33f735a10187b8f74ca29d"><![CDATA[{
            txtSearch.Text = txtSearch.Text.Trim();
            Response.Redirect(Globals.NavigateURL(TabId, "", UserFilter(true)));
        }]]></body>
          </codeblock>
        </method>
        <method name="RebindGrid">
          <declaration><![CDATA[private void RebindGrid()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="244" sc="9" el="247" ec="10">DesktopModules\Admin\Security\Users.ascx.cs</location>
            <body hash="8f5b2cacf2eeaf63bd61f64499ad8da9"><![CDATA[{
            SetGridDataSource();
            grdUsers.Rebind();
        }]]></body>
          </codeblock>
        </method>
        <method name="RemoveDeletedButtonClick">
          <declaration><![CDATA[private void RemoveDeletedButtonClick(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="565" sc="9" el="567" ec="10">DesktopModules\Admin\Security\Users.ascx.cs</location>
            <body hash="520020a51ee46e2d9b1df458c88e998c"><![CDATA[{
            RemoveDeletedUsers();
        }]]></body>
          </codeblock>
        </method>
        <method name="RemoveDeletedUsers">
          <declaration><![CDATA[private void RemoveDeletedUsers()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="250" sc="9" el="260" ec="10">DesktopModules\Admin\Security\Users.ascx.cs</location>
            <body hash="236fe4d1ccae1c0fce03ee33415c580f"><![CDATA[{
            try
            {
                UserController.RemoveDeletedUsers(UsersPortalId);
                RebindGrid();
            }
            catch (Exception exc)   //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="RemoveUser">
          <declaration><![CDATA[private void RemoveUser(int userId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="653" sc="9" el="681" ec="10">DesktopModules\Admin\Security\Users.ascx.cs</location>
            <body hash="0db07687d874b243c99aade35662d69a"><![CDATA[{            
            try
            {
                UserInfo user = UserController.GetUserById(UsersPortalId, userId);

                if ((user != null))
                {
                    if (UserController.RemoveUser(user))
                    {
                        UI.Skins.Skin.AddModuleMessage(this, Localization.GetString("UserRemoved", LocalResourceFile), ModuleMessage.ModuleMessageType.GreenSuccess);
                    }
                    else
                    {
                        UI.Skins.Skin.AddModuleMessage(this, Localization.GetString("UserRemoveError", LocalResourceFile), ModuleMessage.ModuleMessageType.RedError);
                    }
                }

                if (!string.IsNullOrEmpty(txtSearch.Text))
                {
                    Filter = txtSearch.Text;
                }
                RebindGrid();

            }
            catch (Exception exc)   //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="RestoreUser">
          <declaration><![CDATA[private void RestoreUser(int userId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="684" sc="9" el="713" ec="10">DesktopModules\Admin\Security\Users.ascx.cs</location>
            <body hash="e6b406bf1859f795216b518d0b0d8b2d"><![CDATA[{            
            try
            {
                var user = UserController.GetUserById(UsersPortalId, userId);

                if ((user != null))
                {
                    if (UserController.RestoreUser(ref user))
                    {
                        UI.Skins.Skin.AddModuleMessage(this, Localization.GetString("UserRestored", LocalResourceFile), ModuleMessage.ModuleMessageType.GreenSuccess);
                    }
                    else
                    {
                        UI.Skins.Skin.AddModuleMessage(this, Localization.GetString("UserRestoreError", LocalResourceFile), ModuleMessage.ModuleMessageType.RedError);
                    }
                }

                if (!string.IsNullOrEmpty(txtSearch.Text))
                {
                    Filter = txtSearch.Text;
                }
                RebindGrid();

                //Module failed to load
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="SetGridDataSource">
          <declaration><![CDATA[private void SetGridDataSource()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="160" sc="9" el="212" ec="10">DesktopModules\Admin\Security\Users.ascx.cs</location>
            <body hash="6e6f93fa5e126726f02608e9ea3cc86f"><![CDATA[{
            var searchText = Filter;
            var searchField = ddlSearchType.SelectedValue;

            CreateLetterSearch();

            int totalRecords = 0;

            if (searchText.Equals(Localization.GetString("Unauthorized"), StringComparison.InvariantCultureIgnoreCase))
            {
                Users = UserController.GetUnAuthorizedUsers(UsersPortalId, true, IsSuperUser);
				totalRecords = Users.Count;
            }
            else if (searchText.Equals(Localization.GetString("Deleted"), StringComparison.InvariantCultureIgnoreCase))
            {
                Users = UserController.GetDeletedUsers(UsersPortalId);
				totalRecords = Users.Count;
            }
            else if (searchText.Equals(Localization.GetString("OnLine"), StringComparison.InvariantCultureIgnoreCase))
            {
                Users = UserController.GetOnlineUsers(UsersPortalId);
	            totalRecords = Users.Count;
            }
            else if (searchText.Equals(Localization.GetString("All"), StringComparison.InvariantCultureIgnoreCase))
            {
                Users = UserController.GetUsers(UsersPortalId, grdUsers.CurrentPageIndex, grdUsers.PageSize, ref totalRecords, true, IsSuperUser);                
            }
            else if (!searchText.Equals("None", StringComparison.InvariantCultureIgnoreCase))
            {
                if (searchText.Length > 1)
                {
                    searchText = "%" + searchText;
                }
                switch (searchField.ToLowerInvariant())
                {
                    case "email":
                        Users = UserController.GetUsersByEmail(UsersPortalId, searchText + "%", grdUsers.CurrentPageIndex, grdUsers.PageSize, ref totalRecords, true, IsSuperUser);
                        break;
                    case "username":
                        Users = UserController.GetUsersByUserName(UsersPortalId, searchText + "%", grdUsers.CurrentPageIndex, grdUsers.PageSize, ref totalRecords, true, IsSuperUser);
                        break;
					case "displayname":
						Users = UserController.GetUsersByDisplayName(UsersPortalId, searchText + "%", grdUsers.CurrentPageIndex, grdUsers.PageSize, ref totalRecords, true, IsSuperUser);
                        break;
                    default:
                        Users = UserController.GetUsersByProfileProperty(UsersPortalId, searchField, searchText + "%", grdUsers.CurrentPageIndex, grdUsers.PageSize, ref totalRecords, true, IsSuperUser);
                        break;
                }
            }

            grdUsers.DataSource = Users;
            grdUsers.VirtualItemCount = totalRecords;
        }]]></body>
          </codeblock>
        </method>
        <method name="SetInitialPageSize">
          <declaration><![CDATA[private void SetInitialPageSize()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="498" sc="9" el="520" ec="10">DesktopModules\Admin\Security\Users.ascx.cs</location>
            <body hash="b3da5caf7f3d1b254cff7c67f3ecf17e"><![CDATA[{
            if (Request.QueryString["pagesize"] != null)
            {
                int pageSize;
                if (Int32.TryParse(Request.QueryString["pagesize"], out pageSize))
                {
                    grdUsers.PageSize = pageSize;    
                }
            }            
            else
            {
                var pageSizeSetting = GetPageSizeSetting(PortalSettings.PortalId, UserInfo.UserID);
                if (pageSizeSetting != Null.NullInteger)
                {
                    grdUsers.PageSize = pageSizeSetting;
                }
                else
                {
                    var setting = UserModuleBase.GetSetting(PortalSettings.PortalId, "Records_PerPage");
                    grdUsers.PageSize = Convert.ToInt32(setting);   
                }                
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="UserFilter">
          <declaration><![CDATA[protected string UserFilter(bool newFilter)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="103" sc="9" el="131" ec="10">DesktopModules\Admin\Security\Users.ascx.cs</location>
            <body hash="868f143abbca88775731a1799858806a"><![CDATA[{
            var page = "currentpage=" + grdUsers.CurrentPageIndex;
            string filterString;
            string filterPropertyString;
            if (!newFilter)
            {
                filterString = !string.IsNullOrEmpty(Filter) ? "filter=" + Filter : "";
                filterPropertyString = !string.IsNullOrEmpty(FilterProperty) ? "filterproperty=" + FilterProperty : "";
            }
            else
            {
                filterString = !string.IsNullOrEmpty(txtSearch.Text) ? "filter=" + Server.UrlEncode(txtSearch.Text) : "";
                filterPropertyString = !string.IsNullOrEmpty(ddlSearchType.SelectedValue) ? "filterproperty=" + ddlSearchType.SelectedValue : "";
            }
            if (!string.IsNullOrEmpty(filterString))
            {
                filterString += "&";
            }
            if (!string.IsNullOrEmpty(filterPropertyString))
            {
                filterString += filterPropertyString + "&";
            }
            filterString += "pagesize=" + grdUsers.PageSize + "&";            
            if (!string.IsNullOrEmpty(page))
            {
                filterString += page;
            }
            return filterString;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="addUserButton">
          <declaration><![CDATA[protected HyperLink addUserButton;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdSearch">
          <declaration><![CDATA[protected LinkButton cmdSearch;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ddlSearchType">
          <declaration><![CDATA[protected DnnComboBox ddlSearchType;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="deleteUnAuthorizedButton">
          <declaration><![CDATA[protected LinkButton deleteUnAuthorizedButton;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="grdUsers">
          <declaration><![CDATA[protected DnnGrid grdUsers;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="removeDeletedButton">
          <declaration><![CDATA[protected LinkButton removeDeletedButton;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="rptLetterSearch">
          <declaration><![CDATA[protected Repeater rptLetterSearch;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtSearch">
          <declaration><![CDATA[protected TextBox txtSearch;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="Filter">
          <declaration><![CDATA[protected string Filter]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="71" sc="35" el="71" ec="39">DesktopModules\Admin\Security\Users.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="71" sc="40" el="71" ec="44">DesktopModules\Admin\Security\Users.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="FilterProperty">
          <declaration><![CDATA[protected string FilterProperty]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="73" sc="43" el="73" ec="47">DesktopModules\Admin\Security\Users.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="73" sc="48" el="73" ec="52">DesktopModules\Admin\Security\Users.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="IsSuperUser">
          <declaration><![CDATA[protected bool IsSuperUser]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="78" sc="13" el="80" ec="14">DesktopModules\Admin\Security\Users.ascx.cs</location>
            <body hash="804e83cca62dcf42b38c6c5ab3f88aa1"><![CDATA[{
            	return Globals.IsHostTab(PortalSettings.ActiveTab.TabID);
            }]]></body>
          </codeblock>
        </property>
        <property name="Users">
          <declaration><![CDATA[protected ArrayList Users]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="96" sc="37" el="96" ec="41">DesktopModules\Admin\Security\Users.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="96" sc="42" el="96" ec="46">DesktopModules\Admin\Security\Users.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="UsersPortalId">
          <declaration><![CDATA[protected int UsersPortalId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="86" sc="13" el="93" ec="14">DesktopModules\Admin\Security\Users.ascx.cs</location>
            <body hash="8e6211e726f203a736a67fb192389857"><![CDATA[{
                var intPortalId = PortalId;
                if (IsSuperUser)
                {
                    intPortalId = Null.NullInteger;
                }
                return intPortalId;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="ViewProfile">
      <declaration><![CDATA[public class ViewProfile : UserModuleBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public ViewProfile()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="39" sc="9" el="49" ec="10">admin\Users\ViewProfile.ascx.cs</location>
            <body hash="b097e1dd0423cd59d105913c0c8b6e50"><![CDATA[{
            base.OnInit(e);

            UserId = Null.NullInteger;
            if (Context.Request.QueryString["userticket"] != null)
            {
                UserId = Int32.Parse(UrlUtils.DecryptParameter(Context.Request.QueryString["userticket"]));
            }
            ctlProfile.ID = "Profile";
            ctlProfile.UserId = UserId;
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="52" sc="9" el="71" ec="10">admin\Users\ViewProfile.ascx.cs</location>
            <body hash="b01938623f3cca7060656b3ab919ca0a"><![CDATA[{
            base.OnLoad(e);
            try
            {
                if (ctlProfile.UserProfile == null)
                {
                    lblNoProperties.Visible = true;
                    return;
                }
                ctlProfile.DataBind();
                if (ctlProfile.UserProfile.ProfileProperties.Cast<ProfilePropertyDefinition>().Count(profProperty => profProperty.Visible) == 0)
                {
                    lblNoProperties.Visible = true;
                }
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="ctlProfile">
          <declaration><![CDATA[protected DNNProfile ctlProfile;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblNoProperties">
          <declaration><![CDATA[protected Label lblNoProperties;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="ViewProfileSettings">
      <declaration><![CDATA[public class ViewProfileSettings : ModuleSettingsBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public ViewProfileSettings()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="cmdLoadDefault_Click">
          <declaration><![CDATA[protected void cmdLoadDefault_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="88" sc="9" el="90" ec="10">DesktopModules\Admin\ViewProfile\Settings.ascx.cs</location>
            <body hash="fd462e82cba212982705dd40998eefec"><![CDATA[{
            txtTemplate.Text = Localization.GetString("DefaultTemplate", LocalResourceFile);
        }]]></body>
          </codeblock>
        </method>
        <method name="LoadSettings">
          <declaration><![CDATA[public override void LoadSettings()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="40" sc="9" el="63" ec="10">DesktopModules\Admin\ViewProfile\Settings.ascx.cs</location>
            <body hash="55429f4eee4c5f1ff60117e27cabb02b"><![CDATA[{
            try
            {
                ClientAPI.AddButtonConfirm(cmdLoadDefault, Localization.GetString("LoadDefault.Confirm", LocalResourceFile));
                cmdLoadDefault.ToolTip = Localization.GetString("LoadDefault.Help", LocalResourceFile);

                if (!Page.IsPostBack)
                {
                    if (!string.IsNullOrEmpty((string) TabModuleSettings["ProfileTemplate"]))
                    {
                        txtTemplate.Text = (string) TabModuleSettings["ProfileTemplate"];
                    }
                    if (Settings.ContainsKey("IncludeButton"))
                    {
                        IncludeButton.Checked = Convert.ToBoolean(Settings["IncludeButton"]);
                    }
                }
            }
            catch (Exception exc)
            {
                //Module failed to load
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="66" sc="9" el="69" ec="10">DesktopModules\Admin\ViewProfile\Settings.ascx.cs</location>
            <body hash="f729a07cbfcfd463ea669a6966aa9ac4"><![CDATA[{
            base.OnLoad(e);
            cmdLoadDefault.Click += cmdLoadDefault_Click;
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateSettings">
          <declaration><![CDATA[public override void UpdateSettings()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="72" sc="9" el="83" ec="10">DesktopModules\Admin\ViewProfile\Settings.ascx.cs</location>
            <body hash="05bee6f7c967f7d947a3c1b176c1fd72"><![CDATA[{
            try
            {
                ModuleController.Instance.UpdateTabModuleSetting(TabModuleId, "ProfileTemplate", txtTemplate.Text);
                ModuleController.Instance.UpdateTabModuleSetting(TabModuleId, "IncludeButton", IncludeButton.Checked.ToString(CultureInfo.InvariantCulture));
            }
            catch (Exception exc)
            {
                //Module failed to load
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="cmdLoadDefault">
          <declaration><![CDATA[protected LinkButton cmdLoadDefault;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="IncludeButton">
          <declaration><![CDATA[protected CheckBox IncludeButton;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblIncludeButton">
          <declaration><![CDATA[protected LabelControl lblIncludeButton;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plTemplate">
          <declaration><![CDATA[protected LabelControl plTemplate;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtTemplate">
          <declaration><![CDATA[protected TextBox txtTemplate;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="DotNetNuke.Modules.Admin.ViewProfile">
    <class name="ViewProfile">
      <declaration><![CDATA[public class ViewProfile : ProfileModuleUserControlBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public ViewProfile()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="GetRedirectUrl">
          <declaration><![CDATA[private string GetRedirectUrl()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="234" sc="3" el="250" ec="4">DesktopModules\Admin\ViewProfile\ViewProfile.ascx.cs</location>
            <body hash="ea430672d14c8e573fd7e1d91166a0c3"><![CDATA[{
			//redirect user to default page if not specific the home tab, do this action to prevent loop redirect.
			var homeTabId = ModuleContext.PortalSettings.HomeTabId;
			string redirectUrl;

			if (homeTabId > Null.NullInteger)
			{
				redirectUrl = Globals.NavigateURL(homeTabId);
			}
			else
			{
				redirectUrl = Globals.GetPortalDomainName(PortalSettings.Current.PortalAlias.HTTPAlias, Request, true) +
							  "/" + Globals.glbDefaultPage;
			}

			return redirectUrl;
		}]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="77" sc="9" el="91" ec="10">DesktopModules\Admin\ViewProfile\ViewProfile.ascx.cs</location>
            <body hash="e07db7b857032f4ac591bef9a92702f3"><![CDATA[{
            base.OnInit(e);

			//throw 404 so that deleted profile is not reindexed
			if(ProfileUser == null || ProfileUser.IsDeleted)
			{
    		    throw new HttpException(404, "Not Found");
			}

            ProcessQuerystring();

            JavaScript.RequestRegistration(CommonJs.jQuery);
            JavaScript.RequestRegistration(CommonJs.jQueryMigrate);
            JavaScript.RequestRegistration(CommonJs.Knockout);
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="99" sc="3" el="227" ec="4">DesktopModules\Admin\ViewProfile\ViewProfile.ascx.cs</location>
            <body hash="08dd83c014a42507c221513cd6074fa2"><![CDATA[{
			base.OnLoad(e);

			try
			{
                if(Null.IsNull(ProfileUserId))
                {
                    Visible = false;
                    return;
                }

                var template = Convert.ToString(ModuleContext.Settings["ProfileTemplate"]);
                if(string.IsNullOrEmpty(template))
                {
                    template = Localization.GetString("DefaultTemplate", LocalResourceFile);
                }
			    var editUrl = Globals.NavigateURL(ModuleContext.PortalSettings.ActiveTab.TabID, "Profile", "userId=" + ProfileUserId, "pageno=1");
                var profileUrl = Globals.NavigateURL(ModuleContext.PortalSettings.ActiveTab.TabID, "Profile", "userId=" + ProfileUserId, "pageno=2");

                if (template.Contains("[BUTTON:EDITPROFILE]"))
                {
                    if (IncludeButton && IsUser)
                    {
                        string editHyperLink = String.Format("<a href=\"{0}\" class=\"dnnPrimaryAction\">{1}</a>", profileUrl, LocalizeString("Edit"));
                        template = template.Replace("[BUTTON:EDITPROFILE]", editHyperLink);
                    }
                    buttonPanel.Visible = false;
                }
                else
                {
                    buttonPanel.Visible = IncludeButton;
                    editLink.NavigateUrl = editUrl;
                }
                if (template.Contains("[HYPERLINK:EDITPROFILE]"))
                {
                    if (IsUser)
                    {
                        string editHyperLink = String.Format("<a href=\"{0}\" class=\"dnnSecondaryAction\">{1}</a>", profileUrl, LocalizeString("Edit"));
                        template = template.Replace("[HYPERLINK:EDITPROFILE]", editHyperLink);
                    }
                }
                if (template.Contains("[HYPERLINK:MYACCOUNT]"))
                {
                    if (IsUser)
                    {
                        string editHyperLink = String.Format("<a href=\"{0}\" class=\"dnnSecondaryAction\">{1}</a>", editUrl, LocalizeString("MyAccount"));
                        template = template.Replace("[HYPERLINK:MYACCOUNT]", editHyperLink);
                    }
                    buttonPanel.Visible = false;
                }

                if (!IsUser && buttonPanel.Visible)
                {
                    buttonPanel.Visible = false;
                }

			    if (ProfileUser.Profile.ProfileProperties.Cast<ProfilePropertyDefinition>().Count(profProperty => profProperty.Visible) == 0)
                {
                    noPropertiesLabel.Visible = true;
                    profileOutput.Visible = false;
                }
                else
                {
                    var token = new TokenReplace { User = ProfileUser, AccessingUser = ModuleContext.PortalSettings.UserInfo };
                    profileOutput.InnerHtml = token.ReplaceEnvironmentTokens(template);
                    noPropertiesLabel.Visible = false;
                    profileOutput.Visible = true;
                }

			    var propertyAccess = new ProfilePropertyAccess(ProfileUser);
                StringBuilder sb = new StringBuilder();
                bool propertyNotFound = false;

                foreach (ProfilePropertyDefinition property in ProfileUser.Profile.ProfileProperties)
                {
                    string value = propertyAccess.GetProperty(property.PropertyName,
                                                              String.Empty,
                                                              Thread.CurrentThread.CurrentUICulture,
                                                              ModuleContext.PortalSettings.UserInfo,
                                                              Scope.DefaultSettings,
                                                              ref propertyNotFound);


                    var clientName = Localization.GetSafeJSString(property.PropertyName);
                    sb.Append("self['" + clientName + "'] = ko.observable(");
                    sb.Append("\"");
                    if (!string.IsNullOrEmpty(value))
                    {
                        value = Localization.GetSafeJSString(Server.HtmlDecode(value));
                        value = value
                            .Replace("\r", string.Empty)
                            .Replace("\n", " ")
                            .Replace(";", string.Empty)
                            .Replace("://", ":||") //protect http protocols won't be replaced in next step
                            .Replace("//", string.Empty)
                            .Replace(":||", "://"); //restore http protocols
                    }
                    sb.Append(value + "\"" + ");");
                    sb.Append('\n');
                    sb.Append("self['" + clientName + "Text'] = '");
                    sb.Append(clientName + "';");
                    sb.Append('\n');
                }

			    string email = (ProfileUserId == ModuleContext.PortalSettings.UserId
			                    || ModuleContext.PortalSettings.UserInfo.IsInRole(ModuleContext.PortalSettings.AdministratorRoleName))
			                       ? ProfileUser.Email
			                       : String.Empty;

                sb.Append("self.Email = ko.observable('");
                email = Localization.GetSafeJSString(Server.HtmlDecode(email));
                email = email.Replace(";", string.Empty).Replace("//", string.Empty);
                sb.Append(email + "');");
                sb.Append('\n');
                sb.Append("self.EmailText = '");
                sb.Append(LocalizeString("Email") + "';");
                sb.Append('\n');


                ProfileProperties = sb.ToString();


			}
			catch (Exception exc)
			{
				//Module failed to load
				Exceptions.ProcessModuleLoadException(this, exc);
			}
		}]]></body>
          </codeblock>
        </method>
        <method name="ProcessQuerystring">
          <declaration><![CDATA[private void ProcessQuerystring()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="253" sc="9" el="307" ec="10">DesktopModules\Admin\ViewProfile\ViewProfile.ascx.cs</location>
            <body hash="6f2dd654bcdccbb40834afd8a871d667"><![CDATA[{
            //in case someone is being redirected to here from an e-mail link action we need to process that here

            var action = Request.QueryString["action"];

            if (!Request.IsAuthenticated && !string.IsNullOrEmpty(action)) //action requested but not logged in. 
            {
                string loginUrl = Common.Globals.LoginURL(Request.RawUrl, false);
                Response.Redirect(loginUrl);
            }
            if (Request.IsAuthenticated && !string.IsNullOrEmpty(action) ) // only process this for authenticated requests
            {
                //current user, i.e. the one that the request was for
                var currentUser = UserController.Instance.GetCurrentUserInfo();               
                // the initiating user,i.e. the one who wanted to be friend
                // note that in this case here currentUser is visiting the profile of initiatingUser, most likely from a link in the notification e-mail
                var initiatingUser = UserController.Instance.GetUserById(PortalSettings.Current.PortalId, Convert.ToInt32(Request.QueryString["UserID"]));

                if (initiatingUser.UserID == currentUser.UserID)
                {
                    return; //do not further process for users who are on their own profile page
                }
            
                var friendRelationship = RelationshipController.Instance.GetFriendRelationship(currentUser, initiatingUser);

                if (friendRelationship != null)
                {                   
                    if (action.ToLower() == "acceptfriend")
                    {
                        var friend = UserController.GetUserById(PortalSettings.Current.PortalId, friendRelationship.UserId);
                        FriendsController.Instance.AcceptFriend(friend);                        
                    }

                    if (action.ToLower() == "followback")
                    {
                        var follower = UserController.GetUserById(PortalSettings.Current.PortalId, friendRelationship.UserId);
                        try
                        {
                            FollowersController.Instance.FollowUser(follower);
                            var notifications = NotificationsController.Instance.GetNotificationByContext(3, initiatingUser.UserID.ToString());
                            if (notifications.Count > 0)
                            {
                                NotificationsController.Instance.DeleteNotificationRecipient(notifications[0].NotificationID, currentUser.UserID);
                            }
                        }
                        catch 
                        {}


                    }                    
                }

                Response.Redirect(Common.Globals.UserProfileURL(initiatingUser.UserID));
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="buttonPanel">
          <declaration><![CDATA[protected HtmlGenericControl buttonPanel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="editLink">
          <declaration><![CDATA[protected HyperLink editLink;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="noPropertiesLabel">
          <declaration><![CDATA[protected Label noPropertiesLabel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="profileOutput">
          <declaration><![CDATA[protected HtmlGenericControl profileOutput;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="DisplayModule">
          <declaration><![CDATA[public override bool DisplayModule]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="54" sc="4" el="56" ec="5">DesktopModules\Admin\ViewProfile\ViewProfile.ascx.cs</location>
            <body hash="feefde599bb200801f03bd4d87f144e8"><![CDATA[{
				return true;
			}]]></body>
          </codeblock>
        </property>
        <property name="IncludeButton">
          <declaration><![CDATA[public bool IncludeButton]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="62" sc="13" el="69" ec="14">DesktopModules\Admin\ViewProfile\ViewProfile.ascx.cs</location>
            <body hash="dd8a49208ada1909185daee07b309fb0"><![CDATA[{
                var includeButton = true;
                if (ModuleContext.Settings.ContainsKey("IncludeButton"))
                {
                    includeButton = Convert.ToBoolean(ModuleContext.Settings["IncludeButton"]);
                }
                return includeButton;
            }]]></body>
          </codeblock>
        </property>
        <property name="ProfileProperties">
          <declaration><![CDATA[public string ProfileProperties]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="72" sc="43" el="72" ec="47">DesktopModules\Admin\ViewProfile\ViewProfile.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="72" sc="48" el="72" ec="52">DesktopModules\Admin\ViewProfile\ViewProfile.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="DotNetNuke.Modules.SearchResults">
    <class name="ResultsSettings">
      <declaration><![CDATA[public class ResultsSettings : ModuleSettingsBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public ResultsSettings()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="LoadPortalsList">
          <declaration><![CDATA[protected IEnumerable<string[]> LoadPortalsList()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="179" sc="9" el="195" ec="10">DesktopModules\Admin\SearchResults\ResultsSettings.ascx.cs</location>
            <body hash="4775fad281755906a05e464e6a499d4f"><![CDATA[{
            var groups = PortalGroupController.Instance.GetPortalGroups().ToArray();
            var mygroup = (from @group in groups
                           select PortalGroupController.Instance.GetPortalsByGroup(@group.PortalGroupId)
                               into portals
                               where portals.Any(x => x.PortalID == PortalSettings.Current.PortalId)
                               select portals.ToArray()).FirstOrDefault();

            var result = new List<string[]>();
            if (mygroup != null && mygroup.Any())
            {
                result.AddRange(mygroup.Select(
                    pi => new[] {pi.PortalName, pi.PortalID.ToString(CultureInfo.InvariantCulture)}));
            }

            return result;
        }]]></body>
          </codeblock>
        </method>
        <method name="LoadSeachContentSourcesList">
          <declaration><![CDATA[protected IEnumerable<string> LoadSeachContentSourcesList()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="198" sc="9" el="219" ec="10">DesktopModules\Admin\SearchResults\ResultsSettings.ascx.cs</location>
            <body hash="910d865258a5aa963b1d375dca91115d"><![CDATA[{
            var portals = PortalController.Instance.GetPortals();

            var result = new List<string>();
            foreach (var portal in portals)
            {
                var pi = portal as PortalInfo;

                if (pi != null)
                {
                    var list = InternalSearchController.Instance.GetSearchContentSourceList(pi.PortalID);
                    foreach (var src in list)
                    {
                        if (!src.IsPrivate && !result.Contains(src.LocalizedName))
                        {
                            result.Add(src.LocalizedName);
                        }
                    }
                }
            }
            return result;
        }]]></body>
          </codeblock>
        </method>
        <method name="LoadSettings">
          <declaration><![CDATA[public override void LoadSettings()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="45" sc="9" el="125" ec="10">DesktopModules\Admin\SearchResults\ResultsSettings.ascx.cs</location>
            <body hash="ba5990cdaa9557332ffd72d0e5e41c4c"><![CDATA[{
            try
            {
                if ((Page.IsPostBack == false))
                {
                    if (!String.IsNullOrEmpty(Convert.ToString(Settings["LinkTarget"])))
                    {
                        comboBoxLinkTarget.SelectedValue = Convert.ToString(Settings["LinkTarget"]);
                    }

                    if (!string.IsNullOrEmpty(Convert.ToString(Settings["ScopeForPortals"])))
                    {
                        var list = Convert.ToString(Settings["ScopeForPortals"]).Split('|').ToList();
                        var portalList = LoadPortalsList().ToList();
                        if (portalList.Any())
                        {
                            foreach (var portal in portalList)
                            {
                                var item = new DnnComboBoxItem(portal[0], portal[1]) {Checked = list.Contains(portal[1])};
                                comboBoxPortals.Items.Add(item);
                            }
                        }
                        else
                        {
                            divPortalGroup.Visible = false;
                        }
                    }
                    else
                    {
                        var portalList = LoadPortalsList().ToList();
                        if (portalList.Any())
                        {
                            foreach (var portal in portalList)
                            {
                                var item = new DnnComboBoxItem(portal[0], portal[1]) { Checked = PortalId.ToString() == portal[1] };
                                comboBoxPortals.Items.Add(item);
                            }
                        }
                        else
                        {
                            divPortalGroup.Visible = false;
                        }
                    }

                    
                    if (!string.IsNullOrEmpty(Convert.ToString(Settings["ScopeForFilters"])))
                    {
                        var list = Convert.ToString(Settings["ScopeForFilters"]).Split('|').ToList();
                        var filterList = LoadSeachContentSourcesList();
                        foreach (var filter in filterList)
                        {
                            var item = new DnnComboBoxItem(filter, filter) {Checked = list.Contains(filter)};
                            comboBoxFilters.Items.Add(item);
                        }
                    }
                    else
                    {
                        var filterList = LoadSeachContentSourcesList();
                        foreach (var filter in filterList)
                        {
                            var item = new DnnComboBoxItem(filter, filter) {Checked = true};
                            comboBoxFilters.Items.Add(item);
                        }
                    }

                    if (!string.IsNullOrEmpty(Convert.ToString(Settings["EnableWildSearch"])))
                    {
                        var enableWildSearch = Convert.ToBoolean(Settings["EnableWildSearch"]);
                        chkEnableWildSearch.Checked = enableWildSearch;
                    }
                    else
                    {
                        chkEnableWildSearch.Checked = true;
                    }
                }
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateSettings">
          <declaration><![CDATA[public override void UpdateSettings()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="128" sc="9" el="174" ec="10">DesktopModules\Admin\SearchResults\ResultsSettings.ascx.cs</location>
            <body hash="298619e47a50ca0451f978fea32a290c"><![CDATA[{
            try
            {
                if (Page.IsValid)
                {
                    ModuleController.Instance.UpdateModuleSetting(ModuleId, "LinkTarget", comboBoxLinkTarget.SelectedValue);

                    var selectedPortals = new StringBuilder();
                    foreach (var p in comboBoxPortals.CheckedItems)
                    {
                        if (selectedPortals.Length > 0)
                        {
                            selectedPortals.AppendFormat("|{0}", p.Value);
                        }
                        else
                        {
                            selectedPortals.Append(p.Value);
                        }
                    }

                    ModuleController.Instance.UpdateModuleSetting(ModuleId, "ScopeForPortals", selectedPortals.ToString());

                    var selectedFilters = new StringBuilder();
                    foreach (var p in comboBoxFilters.CheckedItems)
                    {
                        if (selectedFilters.Length > 0)
                        {
                            selectedFilters.AppendFormat("|{0}", p.Value);
                        }
                        else
                        {
                            selectedFilters.Append(p.Value);
                        }
                    }

                    ModuleController.Instance.UpdateModuleSetting(ModuleId, "ScopeForFilters", selectedFilters.ToString());

                    ModuleController.Instance.UpdateModuleSetting(ModuleId, "EnableWildSearch", chkEnableWildSearch.Checked.ToString());
                }
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }

			DataCache.RemoveCache(string.Format("ModuleInfos{0}", PortalSettings.PortalId));
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="chkEnableWildSearch">
          <declaration><![CDATA[protected CheckBox chkEnableWildSearch;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="comboBoxFilters">
          <declaration><![CDATA[protected DnnComboBox comboBoxFilters;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="comboBoxLinkTarget">
          <declaration><![CDATA[protected DnnComboBox comboBoxLinkTarget;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="comboBoxPortals">
          <declaration><![CDATA[protected DnnComboBox comboBoxPortals;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="divPortalGroup">
          <declaration><![CDATA[protected HtmlGenericControl divPortalGroup;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="filtersRequiredFieldValidator">
          <declaration><![CDATA[protected RequiredFieldValidator filtersRequiredFieldValidator;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plEnableWildSearch">
          <declaration><![CDATA[protected LabelControl plEnableWildSearch;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plResultsScopeForFilters">
          <declaration><![CDATA[protected LabelControl plResultsScopeForFilters;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plResultsScopeForPortals">
          <declaration><![CDATA[protected LabelControl plResultsScopeForPortals;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plTitleLinkTarget">
          <declaration><![CDATA[protected LabelControl plTitleLinkTarget;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="portalsRequiedValidator">
          <declaration><![CDATA[protected RequiredFieldValidator portalsRequiedValidator;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="SearchResults">
      <declaration><![CDATA[public class SearchResults : PortalModuleBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public SearchResults()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="CheckedScopeItem">
          <declaration><![CDATA[private bool CheckedScopeItem(string scopeItemName)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="381" sc="9" el="384" ec="10">DesktopModules\Admin\SearchResults\SearchResults.ascx.cs</location>
            <body hash="33922b0b28aa8a78e00695f4f33a16f0"><![CDATA[{
            var searchScope = SearchScope;
            return searchScope.Length == 0 || searchScope.Any(x => x == scopeItemName);
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="351" sc="9" el="378" ec="10">DesktopModules\Admin\SearchResults\SearchResults.ascx.cs</location>
            <body hash="1323e25b03395e964ac466bf13768102"><![CDATA[{
            base.OnLoad(e);

            ServicesFramework.Instance.RequestAjaxAntiForgerySupport();
            JavaScript.RequestRegistration(CommonJs.DnnPlugins);
            ClientResourceManager.RegisterScript(Page, "~/Resources/Shared/scripts/dnn.searchBox.js");
            ClientResourceManager.RegisterStyleSheet(Page, "~/Resources/Shared/stylesheets/dnn.searchBox.css", FileOrder.Css.ModuleCss);
            ClientResourceManager.RegisterScript(Page, "~/DesktopModules/admin/SearchResults/dnn.searchResult.js");

            CultureCode = Thread.CurrentThread.CurrentCulture.ToString();

            foreach (string o in SearchContentSources)
            {
                var item = new RadComboBoxItem(o, o) {Checked = CheckedScopeItem(o)};
                SearchScopeList.Items.Add(item);
            }

            SearchScopeList.Localization.AllItemsCheckedString = Localization.GetString("AllFeaturesSelected",
                Localization.GetResourceFile(this, MyFileName));

            var pageSizeItem = ResultsPerPageList.FindItemByValue(PageSize.ToString());
            if (pageSizeItem != null)
            {
                pageSizeItem.Selected = true;
            }

            SetLastModifiedFilter();
        }]]></body>
          </codeblock>
        </method>
        <method name="SetLastModifiedFilter">
          <declaration><![CDATA[private void SetLastModifiedFilter()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="387" sc="9" el="398" ec="10">DesktopModules\Admin\SearchResults\SearchResults.ascx.cs</location>
            <body hash="bdb4d4c7c49524c004c31be52b9a6c75"><![CDATA[{
            var lastModifiedParam = LastModifiedParam;

            if (!string.IsNullOrEmpty(lastModifiedParam))
            {
                var item = AdvnacedDatesList.Items.FirstOrDefault(x => x.Value == lastModifiedParam);
                if (item != null)
                {
                    item.Selected = true;
                }
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_searchContentSources">
          <declaration><![CDATA[private IList<string> _searchContentSources;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_searchPortalIds">
          <declaration><![CDATA[private IList<int> _searchPortalIds;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="AdvnacedDatesList">
          <declaration><![CDATA[protected DnnComboBox AdvnacedDatesList;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="DefaultPageIndex">
          <declaration><![CDATA[private const int DefaultPageIndex = 1;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="DefaultPageSize">
          <declaration><![CDATA[private const int DefaultPageSize = 15;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="DefaultSortOption">
          <declaration><![CDATA[private const int DefaultSortOption = 0;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblAdvancedDates">
          <declaration><![CDATA[protected LabelControl lblAdvancedDates;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblAdvancedExactSearch">
          <declaration><![CDATA[protected LabelControl lblAdvancedExactSearch;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblAdvancedScope">
          <declaration><![CDATA[protected LabelControl lblAdvancedScope;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblAdvancedTags">
          <declaration><![CDATA[protected LabelControl lblAdvancedTags;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="MyFileName">
          <declaration><![CDATA[private const string MyFileName = "SearchResults.ascx";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ResultsPerPageList">
          <declaration><![CDATA[protected DnnComboBox ResultsPerPageList;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="SearchScopeList">
          <declaration><![CDATA[protected DnnComboBox SearchScopeList;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="AddTagText">
          <declaration><![CDATA[protected string AddTagText]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="AdvancedSearchHintText">
          <declaration><![CDATA[protected string AdvancedSearchHintText]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="AdvancedText">
          <declaration><![CDATA[protected string AdvancedText]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="AuthorText">
          <declaration><![CDATA[protected string AuthorText]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="CheckedExactSearch">
          <declaration><![CDATA[protected string CheckedExactSearch]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="147" sc="13" el="155" ec="14">DesktopModules\Admin\SearchResults\SearchResults.ascx.cs</location>
            <body hash="5896c0dfd2d0339ad48b4556a28ab324"><![CDATA[{
                var paramExactSearch = Request.QueryString["ExactSearch"];

                if (!string.IsNullOrEmpty(paramExactSearch) && paramExactSearch.ToLowerInvariant() == "y")
                {
                    return "checked=\"true\"";
                }
                return "";
            }]]></body>
          </codeblock>
        </property>
        <property name="ClearButtonText">
          <declaration><![CDATA[protected string ClearButtonText]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="CommentsText">
          <declaration><![CDATA[protected string CommentsText]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="CultureCode">
          <declaration><![CDATA[protected string CultureCode]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="346" sc="40" el="346" ec="44">DesktopModules\Admin\SearchResults\SearchResults.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="346" sc="45" el="346" ec="49">DesktopModules\Admin\SearchResults\SearchResults.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="CurrentPageIndexText">
          <declaration><![CDATA[protected string CurrentPageIndexText]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="341" sc="13" el="343" ec="14">DesktopModules\Admin\SearchResults\SearchResults.ascx.cs</location>
            <body hash="2dfab176f6ed85b2acb43b46d706026a"><![CDATA[{
                return Localization.GetSafeJSString("CurrentPageIndex", Localization.GetResourceFile(this, MyFileName));
            }]]></body>
          </codeblock>
        </property>
        <property name="DateText">
          <declaration><![CDATA[protected string DateText]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="DefaultText">
          <declaration><![CDATA[protected string DefaultText]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="LastModifiedParam">
          <declaration><![CDATA[protected string LastModifiedParam]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="LastModifiedText">
          <declaration><![CDATA[protected string LastModifiedText]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="LikesText">
          <declaration><![CDATA[protected string LikesText]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="LinkAdvancedTipText">
          <declaration><![CDATA[protected string LinkAdvancedTipText]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="LinkTarget">
          <declaration><![CDATA[protected string LinkTarget]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="161" sc="13" el="164" ec="14">DesktopModules\Admin\SearchResults\SearchResults.ascx.cs</location>
            <body hash="67de54b2e3b0a0a994a932bcad0958bc"><![CDATA[{
                string settings = Convert.ToString(Settings["LinkTarget"]);
                return string.IsNullOrEmpty(settings) || settings == "0" ? string.Empty : " target=\"_blank\" ";
            }]]></body>
          </codeblock>
        </property>
        <property name="NoResultsText">
          <declaration><![CDATA[protected string NoResultsText]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="PageIndex">
          <declaration><![CDATA[protected int PageIndex]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="90" sc="13" el="103" ec="14">DesktopModules\Admin\SearchResults\SearchResults.ascx.cs</location>
            <body hash="acc80ca22e841a550db4f41fb7ea0e1c"><![CDATA[{
                if (string.IsNullOrEmpty(Request.QueryString["Page"]))
                {
                    return DefaultPageIndex;
                }

                int pageIndex;
                if (Int32.TryParse(Request.QueryString["Page"], out pageIndex))
                {
                    return pageIndex;
                }
                
                return DefaultPageIndex;
            }]]></body>
          </codeblock>
        </property>
        <property name="PageSize">
          <declaration><![CDATA[protected int PageSize]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="109" sc="13" el="122" ec="14">DesktopModules\Admin\SearchResults\SearchResults.ascx.cs</location>
            <body hash="2e83d6efe44cbc9ab07220f111ce9ae6"><![CDATA[{
                if (string.IsNullOrEmpty(Request.QueryString["Size"]))
                {
                    return DefaultPageSize;
                }

                int pageSize;
                if (Int32.TryParse(Request.QueryString["Size"], out pageSize))
                {
                    return pageSize;
                }

                return DefaultPageSize;
            }]]></body>
          </codeblock>
        </property>
        <property name="RelevanceText">
          <declaration><![CDATA[protected string RelevanceText]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ResultsCountText">
          <declaration><![CDATA[protected string ResultsCountText]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ResultsPerPageText">
          <declaration><![CDATA[protected string ResultsPerPageText]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="SearchButtonText">
          <declaration><![CDATA[protected string SearchButtonText]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="SearchContentSources">
          <declaration><![CDATA[protected IList<string> SearchContentSources]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="192" sc="13" el="235" ec="14">DesktopModules\Admin\SearchResults\SearchResults.ascx.cs</location>
            <body hash="d3a6479e353cc954f6da4e68ec6578dd"><![CDATA[{
                if (_searchContentSources == null)
                {
                    IList<int> portalIds = SearchPortalIds;
                    var list = new List<SearchContentSource>();
                    foreach (int portalId in portalIds)
                    {
                        IEnumerable<SearchContentSource> crawlerList =
                            InternalSearchController.Instance.GetSearchContentSourceList(portalId);
                        foreach (SearchContentSource src in crawlerList)
                        {
                            if (src.IsPrivate) continue;
                            if (list.All(r => r.LocalizedName != src.LocalizedName))
                            {
                                list.Add(src);
                            }
                        }
                    }

                    List<string> configuredList = null;

                    if (!string.IsNullOrEmpty(Convert.ToString(Settings["ScopeForFilters"])))
                    {
                        configuredList = Convert.ToString(Settings["ScopeForFilters"]).Split('|').ToList();
                    }

                    _searchContentSources = new List<string>();

                    // add other searchable module defs
                    foreach (SearchContentSource contentSource in list)
                    {
                        if (configuredList == null ||
                            configuredList.Any(l => l.Contains(contentSource.LocalizedName)))
                        {
                            if (!_searchContentSources.Contains(contentSource.LocalizedName))
                            {
                                _searchContentSources.Add(contentSource.LocalizedName);
                            }
                        }
                    }
                }

                return _searchContentSources;
            }]]></body>
          </codeblock>
        </property>
        <property name="SearchDisplayTerm">
          <declaration><![CDATA[protected string SearchDisplayTerm]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="SearchPortalIds">
          <declaration><![CDATA[private IList<int> SearchPortalIds]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="170" sc="13" el="186" ec="14">DesktopModules\Admin\SearchResults\SearchResults.ascx.cs</location>
            <body hash="889290ddc12997d76d6c459323f78b35"><![CDATA[{
                if (_searchPortalIds == null)
                {
                    _searchPortalIds = new List<int>();
                    if (!string.IsNullOrEmpty(Convert.ToString(Settings["ScopeForPortals"])))
                    {
                        List<string> list = Convert.ToString(Settings["ScopeForPortals"]).Split('|').ToList();
                        foreach (string l in list) _searchPortalIds.Add(Convert.ToInt32(l));
                    }
                    else
                    {
                        _searchPortalIds.Add(PortalId); // no setting, just search current portal by default
                    }
                }

                return _searchPortalIds;
            }]]></body>
          </codeblock>
        </property>
        <property name="SearchScope">
          <declaration><![CDATA[protected string[] SearchScope]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="76" sc="13" el="79" ec="14">DesktopModules\Admin\SearchResults\SearchResults.ascx.cs</location>
            <body hash="b85698f2d0eddbd7e85682ea2253ecad"><![CDATA[{
                var searchScopeParam = SearchScopeParam;
                return string.IsNullOrEmpty(searchScopeParam) ? new string[0] : searchScopeParam.Split(',');
            }]]></body>
          </codeblock>
        </property>
        <property name="SearchScopeParam">
          <declaration><![CDATA[protected string SearchScopeParam]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="SearchTerm">
          <declaration><![CDATA[protected string SearchTerm]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="SortOption">
          <declaration><![CDATA[protected int SortOption]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="128" sc="13" el="141" ec="14">DesktopModules\Admin\SearchResults\SearchResults.ascx.cs</location>
            <body hash="8959e0d72f3305d82db829afa03ae97b"><![CDATA[{
                if (string.IsNullOrEmpty(Request.QueryString["Sort"]))
                {
                    return DefaultSortOption;
                }

                int sortOption;
                if (Int32.TryParse(Request.QueryString["Sort"], out sortOption))
                {
                    return sortOption;
                }

                return DefaultSortOption;
            }]]></body>
          </codeblock>
        </property>
        <property name="SourceText">
          <declaration><![CDATA[protected string SourceText]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="TagsQuery">
          <declaration><![CDATA[protected string TagsQuery]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="TagsText">
          <declaration><![CDATA[protected string TagsText]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ViewsText">
          <declaration><![CDATA[protected string ViewsText]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="DotNetNuke.Services.Exceptions">
    <class name="ErrorPage">
      <declaration><![CDATA[public class ErrorPage : Page]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public ErrorPage()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="ExtractOSVersion">
          <deprecation>Function obsoleted in 5.6.1 as no longer used in core - version identification can be useful to potential hackers if used incorrectly</deprecation>
          <declaration><![CDATA[public string ExtractOSVersion()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="89" sc="9" el="124" ec="10">ErrorPage.aspx.cs</location>
            <body hash="93adf40aad242e813ec1197676f13f93"><![CDATA[{
            //default name to OSVersion in case OS not recognised
            string commonName = Environment.OSVersion.ToString();
            switch (Environment.OSVersion.Version.Major)
            {
                case 5:
                    switch (Environment.OSVersion.Version.Minor)
                    {
                        case 0:
                            commonName = "Windows 2000";
                            break;
                        case 1:
                            commonName = "Windows XP";
                            break;
                        case 2:
                            commonName = "Windows Server 2003";
                            break;
                    }
                    break;
                case 6:
                    switch (Environment.OSVersion.Version.Minor)
                    {
                        case 0:
                            commonName = "Windows Vista";
                            break;
                        case 1:
                            commonName = "Windows Server 2008";
                            break;
                        case 2:
                            commonName = "Windows 7";
                            break;
                    }
                    break;
            }
            return commonName;
        }]]></body>
          </codeblock>
        </method>
        <method name="ManageError">
          <declaration><![CDATA[private void ManageError(string status)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="58" sc="9" el="85" ec="10">ErrorPage.aspx.cs</location>
            <body hash="aef0bcba13e0693b1109ea0c6fabb748"><![CDATA[{
            string errorMode = Config.GetCustomErrorMode();

            string errorMessage = HttpUtility.HtmlEncode(Request.QueryString["error"]);
            string errorMessage2 = HttpUtility.HtmlEncode(Request.QueryString["error2"]);
            string localizedMessage = Localization.Localization.GetString(status + ".Error", Localization.Localization.GlobalResourceFile);
            if (localizedMessage != null)
            {
                localizedMessage = localizedMessage.Replace("src=\"images/403-3.gif\"", "src=\"" + ResolveUrl("~/images/403-3.gif") + "\"");

                if (!string.IsNullOrEmpty(errorMessage2) && ( (errorMode=="Off") || ( (errorMode=="RemoteOnly") && (Request.IsLocal) ) ))
                {
                    ErrorPlaceHolder.Controls.Add(new LiteralControl(string.Format(localizedMessage, errorMessage2)));
                }
                else
                {
                    ErrorPlaceHolder.Controls.Add(new LiteralControl(string.Format(localizedMessage, errorMessage)));
                }
            }

            int statusCode;
            Int32.TryParse(status, out statusCode);

            if (statusCode > -1)
            {
                Response.StatusCode = statusCode;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="127" sc="9" el="131" ec="10">ErrorPage.aspx.cs</location>
            <body hash="fa898a132fd46a25ccc5c5c532ad3e8f"><![CDATA[{
            base.OnInit(e);
            DefaultStylesheet.Attributes["href"] = ResolveUrl("~/Portals/_default/default.css");
            InstallStylesheet.Attributes["href"] = ResolveUrl("~/Install/install.css");
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="134" sc="9" el="188" ec="10">ErrorPage.aspx.cs</location>
            <body hash="907018d18ffd4177bad41ebba83d289a"><![CDATA[{
            base.OnLoad(e);

            var portalSettings = PortalController.Instance.GetCurrentPortalSettings();
            if (portalSettings != null && !String.IsNullOrEmpty(portalSettings.LogoFile))
            {
                IFileInfo fileInfo = FileManager.Instance.GetFile(portalSettings.PortalId, portalSettings.LogoFile);
                if (fileInfo != null)
                {
                    headerImage.ImageUrl = FileManager.Instance.GetUrl(fileInfo);
                }
            }
            headerImage.Visible = !string.IsNullOrEmpty(headerImage.ImageUrl);

            string localizedMessage;
            var security = new PortalSecurity();
            var status = security.InputFilter(Request.QueryString["status"],
                                                    PortalSecurity.FilterFlag.NoScripting |
                                                    PortalSecurity.FilterFlag.NoMarkup);
            if (!string.IsNullOrEmpty(status))
            {
                ManageError(status);
            }
            else
            {
                //get the last server error
                var exc = Server.GetLastError();
                try
                {
                    if (Request.Url.LocalPath.ToLower().EndsWith("installwizard.aspx"))
                    {
                        ErrorPlaceHolder.Controls.Add(new LiteralControl(HttpUtility.HtmlEncode(exc.ToString())));
                    }
                    else
                    {
                        var lex = new PageLoadException(exc.Message, exc);
                        Exceptions.LogException(lex);
                        localizedMessage = Localization.Localization.GetString("Error.Text", Localization.Localization.GlobalResourceFile);
                        ErrorPlaceHolder.Controls.Add(new ErrorContainer(portalSettings, localizedMessage, lex).Container);
                    }
                }
                catch
                {
                    //No exception was found...you shouldn't end up here
                    //unless you go to this aspx page URL directly
                    localizedMessage = Localization.Localization.GetString("UnhandledError.Text", Localization.Localization.GlobalResourceFile);
                    ErrorPlaceHolder.Controls.Add(new LiteralControl(localizedMessage));
                }

                Response.StatusCode = 500;
            }
            localizedMessage = Localization.Localization.GetString("Return.Text", Localization.Localization.GlobalResourceFile);

            hypReturn.Text = localizedMessage;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="DefaultStylesheet">
          <declaration><![CDATA[protected HtmlGenericControl DefaultStylesheet;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ErrorPlaceHolder">
          <declaration><![CDATA[protected PlaceHolder ErrorPlaceHolder;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Form">
          <declaration><![CDATA[protected new HtmlForm Form;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="headerImage">
          <declaration><![CDATA[protected Image headerImage;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="hypReturn">
          <declaration><![CDATA[protected HyperLink hypReturn;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="InstallStylesheet">
          <declaration><![CDATA[protected HtmlGenericControl InstallStylesheet;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Title">
          <declaration><![CDATA[protected new HtmlGenericControl Title;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="DotNetNuke.Services.Install">
    <class name="Install">
      <declaration><![CDATA[public class Install : Page]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public Install()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
        <constructor name=".cctor">
          <declaration><![CDATA[static Install()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="54" sc="9" el="55" ec="69">Install\Install.aspx.cs</location>
            <body hash="228e48a535d125ddf35b72b7f5a84b0a"><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof(Install));
        private static readonly object installLocker = new object();]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="AddPortal">
          <declaration><![CDATA[private void AddPortal()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="368" sc="9" el="416" ec="10">Install\Install.aspx.cs</location>
            <body hash="795be3b019a48e6183542e25517eae76"><![CDATA[{
            //Start Timer
            Upgrade.Upgrade.StartTimer();

            //Write out Header
            HtmlUtils.WriteHeader(Response, "addPortal");
            Response.Write("<h2>Add Site Status Report</h2>");
            Response.Flush();

            //install new portal(s)
            string strNewFile = Globals.ApplicationMapPath + "\\Install\\Portal\\Portals.resources";
            if (File.Exists(strNewFile))
            {
                XmlDocument xmlDoc = new XmlDocument();
                xmlDoc.Load(strNewFile);

                //parse portal(s) if available
                var nodes = xmlDoc.SelectNodes("//dotnetnuke/portals/portal");
                if (nodes != null)
                {
                    foreach (XmlNode node in nodes)
                    {
                        if (node != null)
                        {
                            Upgrade.Upgrade.AddPortal(node, true, 0);
                        }
                    }
                }

                //delete the file
                try
                {
                    File.SetAttributes(strNewFile, FileAttributes.Normal);
                    File.Delete(strNewFile);
                }
                catch (Exception ex)
                {
                    //error removing the file
                    Logger.Error(ex);
                }

                Response.Write("<h2>Installation Complete</h2>");
                Response.Write("<br><br><h2><a href='../Default.aspx'>Click Here To Access Your Site</a></h2><br><br>");
                Response.Flush();
            }

            //Write out Footer
            HtmlUtils.WriteFooter(Response);
        }]]></body>
          </codeblock>
        </method>
        <method name="CheckPermissions">
          <declaration><![CDATA[private bool CheckPermissions()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="243" sc="9" el="251" ec="10">Install\Install.aspx.cs</location>
            <body hash="fa3b35a5c66b7215cf71452e7b799e8e"><![CDATA[{
            bool verified = new FileSystemPermissionVerifier(Server.MapPath("~")).VerifyAll();
            HtmlUtils.WriteFeedback(HttpContext.Current.Response,
                                    0,
                                    "Checking File and Folder permissions " + (verified ? "<font color='green'>Success</font>" : "<font color='red'>Error!</font>") + "<br>");
            Response.Flush();

            return verified;
        }]]></body>
          </codeblock>
        </method>
        <method name="ExecuteScripts">
          <declaration><![CDATA[private void ExecuteScripts()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="59" sc="9" el="79" ec="10">Install\Install.aspx.cs</location>
            <body hash="71c15b8a553371807c6b78e35f71b1f7"><![CDATA[{
            //Start Timer
            Upgrade.Upgrade.StartTimer();

            //Write out Header
            HtmlUtils.WriteHeader(Response, "executeScripts");

            Response.Write("<h2>Execute Scripts Status Report</h2>");
            Response.Flush();

            string strProviderPath = DataProvider.Instance().GetProviderPath();
            if (!strProviderPath.StartsWith("ERROR:"))
            {
                Upgrade.Upgrade.ExecuteScripts(strProviderPath);
            }
            Response.Write("<h2>Execution Complete</h2>");
            Response.Flush();
            
            //Write out Footer
            HtmlUtils.WriteFooter(Response);
        }]]></body>
          </codeblock>
        </method>
        <method name="InstallApplication">
          <declaration><![CDATA[private void InstallApplication()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="82" sc="9" el="212" ec="10">Install\Install.aspx.cs</location>
            <body hash="7de61d01ac56f79101b3bcffec0db5a7"><![CDATA[{
            //the application uses a two step installation process. The first step is used to update 
            //the Web.config with any configuration settings - which forces an application restart. 
            //The second step finishes the installation process and provisions the site.

            string installationDate = Config.GetSetting("InstallationDate");

            if (installationDate == null || String.IsNullOrEmpty(installationDate))
            {
                string strError = Config.UpdateMachineKey();
                if (String.IsNullOrEmpty(strError))
                {
                    //send a new request to the application to initiate step 2
                    Response.Redirect(HttpContext.Current.Request.RawUrl, true);
                }
                else
                {
                    //403-3 Error - Redirect to ErrorPage
                    //403.3 means directory permissions issue
                    string strURL = "~/ErrorPage.aspx?status=403_3&error=" + strError;
                    HttpContext.Current.Response.Clear();
                    HttpContext.Current.Server.Transfer(strURL);
                }
            }
            else
            {

                try
                {
                    var synchConnectionString = new SynchConnectionStringStep();
                    synchConnectionString.Execute();
                    if (synchConnectionString.Status == StepStatus.AppRestart)
                    {
                        //send a new request to the application to initiate step 2
                        Response.Redirect(HttpContext.Current.Request.RawUrl, true);
                    }

                    //Start Timer
                    Upgrade.Upgrade.StartTimer();

                    //Write out Header
                    HtmlUtils.WriteHeader(Response, "install");

                    //get path to script files
                    string strProviderPath = DataProvider.Instance().GetProviderPath();
                    if (!strProviderPath.StartsWith("ERROR:"))
                    {
                        if (!CheckPermissions())
                        {
                            return;
                        }
                        //Add the install blocker logic
                        lock (installLocker)
                        {
                            if (InstallBlocker.Instance.IsInstallInProgress())
                            {
                                WriteInstallationHeader();
                                WriteInstallationInProgress();
                                return;
                            }
                            RegisterInstallBegining();
                        }

                        var installConfig = InstallController.Instance.GetInstallConfig();
                        //Create Folder Mappings config
                        if (!String.IsNullOrEmpty(installConfig.FolderMappingsSettings))
                        {
                            FolderMappingsConfigController.Instance.SaveConfig(installConfig.FolderMappingsSettings);
                        }
                        Upgrade.Upgrade.InstallDNN(strProviderPath);
                        //remove en-US from portal if installing in a different language
                        if (!installConfig.InstallCulture.Equals("en-us", StringComparison.InvariantCultureIgnoreCase))
                        {
                            var locale = LocaleController.Instance.GetLocale("en-US");
                            Localization.Localization.RemoveLanguageFromPortal(0, locale.LanguageId);
                        }

                        var licenseConfig = installConfig.License;
                        bool IsProOrEnterprise = (File.Exists(HttpContext.Current.Server.MapPath("~\\bin\\DotNetNuke.Professional.dll")) ||
                                                  File.Exists(HttpContext.Current.Server.MapPath("~\\bin\\DotNetNuke.Enterprise.dll")));
                        if (IsProOrEnterprise && licenseConfig != null && !String.IsNullOrEmpty(licenseConfig.AccountEmail) &&
                            !String.IsNullOrEmpty(licenseConfig.InvoiceNumber))
                        {
                            Upgrade.Upgrade.ActivateLicense();
                        }

                        //Adding ClientDependency Resources config to web.config                    
                        if (!ClientResourceManager.IsInstalled())
                        {
                            ClientResourceManager.AddConfiguration();
                        }

                        var installVersion = DataProvider.Instance().GetInstallVersion();
                        string strError = Config.UpdateInstallVersion(installVersion);

                        //Adding FCN mode to web.config
                        strError += Config.AddFCNMode(Config.FcnMode.Single);
                        if (!string.IsNullOrEmpty(strError))
                        {
                            Logger.Error(strError);
                        }

                        Response.Write("<h2>Installation Complete</h2>");
                        Response.Write("<br><br><h2><a href='../Default.aspx'>Click Here To Access Your Site</a></h2><br><br>");
                        Response.Flush();

                        //remove installwizard files
                        Upgrade.Upgrade.DeleteInstallerFiles();

                        //log APPLICATION_START event
                        Initialize.LogStart();

                        //Start Scheduler
                        Initialize.StartScheduler();
                    }
                    else
                    {
                        //upgrade error
                        Response.Write("<h2>Upgrade Error: " + strProviderPath + "</h2>");
                        Response.Flush();
                    }

                    //Write out Footer
                    HtmlUtils.WriteFooter(Response);
                }
                finally
                {
                    RegisterInstallEnd();
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="InstallResources">
          <declaration><![CDATA[private void InstallResources()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="419" sc="9" el="442" ec="10">Install\Install.aspx.cs</location>
            <body hash="2c8ec237c9376ae0ec7e43461d1c1714"><![CDATA[{
            //Start Timer
            Upgrade.Upgrade.StartTimer();

            //Write out Header
            HtmlUtils.WriteHeader(Response, "installResources");

            Response.Write("<h2>Install Resources Status Report</h2>");
            Response.Flush();

            //install new resources(s)
            var packages = Upgrade.Upgrade.GetInstallPackages();
            foreach (var package in packages)
            {
                Upgrade.Upgrade.InstallPackage(package.Key, package.Value.PackageType, true);
            }

            Response.Write("<h2>Installation Complete</h2>");
            Response.Write("<br><br><h2><a href='../Default.aspx'>Click Here To Access Your Site</a></h2><br><br>");
            Response.Flush();

            //Write out Footer
            HtmlUtils.WriteFooter(Response);
        }]]></body>
          </codeblock>
        </method>
        <method name="NoUpgrade">
          <declaration><![CDATA[private void NoUpgrade()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="445" sc="9" el="512" ec="10">Install\Install.aspx.cs</location>
            <body hash="406f28445154879aa2c65bc3b138c4bb"><![CDATA[{
            //get path to script files
            string strProviderPath = DataProvider.Instance().GetProviderPath();
            if (!strProviderPath.StartsWith("ERROR:"))
            {
                //get current database version
                try
                {
                    IDataReader dr = DataProvider.Instance().GetDatabaseVersion();
                    if (dr.Read())
                    {
                        //Write out Header
                        HtmlUtils.WriteHeader(Response, "none");
                        string currentAssembly = DotNetNukeContext.Current.Application.Version.ToString(3);
                        string currentDatabase = dr["Major"] + "." + dr["Minor"] + "." + dr["Build"];
                        //do not show versions if the same to stop information leakage
                        if (currentAssembly == currentDatabase)
                        {
                            Response.Write("<h2>Current Assembly Version && current Database Version are identical.</h2>");
                        }
                        else
                        {
                            Response.Write("<h2>Current Assembly Version: " + currentAssembly + "</h2>");
                            //Call Upgrade with the current DB Version to upgrade an
                            //existing DNN installation
                            var strDatabaseVersion = ((int)dr["Major"]).ToString("00") + "." + ((int)dr["Minor"]).ToString("00") + "." + ((int)dr["Build"]).ToString("00");
                            Response.Write("<h2>Current Database Version: " + strDatabaseVersion + "</h2>");
                        }

                        Response.Write("<br><br><a href='Install.aspx?mode=Install'>Click Here To Upgrade DotNetNuke</a>");
                        Response.Flush();
                    }
                    else
                    {
                        //Write out Header
                        HtmlUtils.WriteHeader(Response, "noDBVersion");
                        Response.Write("<h2>Current Assembly Version: " + DotNetNukeContext.Current.Application.Version.ToString(3) + "</h2>");

                        Response.Write("<h2>Current Database Version: N/A</h2>");
                        Response.Write("<br><br><h2><a href='Install.aspx?mode=Install'>Click Here To Install DotNetNuke</a></h2>");
                        Response.Flush();
                    }
                    dr.Close();
                }
                catch (Exception ex)
                {
                    //Write out Header
                    Logger.Error(ex);
                    HtmlUtils.WriteHeader(Response, "error");
                    Response.Write("<h2>Current Assembly Version: " + DotNetNukeContext.Current.Application.Version.ToString(3) + "</h2>");

                    Response.Write("<h2>" + ex.Message + "</h2>");
                    Response.Flush();
                }
            }
            else
            {
                //Write out Header
                HtmlUtils.WriteHeader(Response, "error");
                Response.Write("<h2>Current Assembly Version: " + DotNetNukeContext.Current.Application.Version.ToString(3) + "</h2>");

                Response.Write("<h2>" + strProviderPath + "</h2>");
                Response.Flush();
            }

            //Write out Footer
            HtmlUtils.WriteFooter(Response);
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="519" sc="9" el="527" ec="10">Install\Install.aspx.cs</location>
            <body hash="b90cdd94b07c01164310263c89962b32"><![CDATA[{
            base.OnInit(e);
            //if previous config deleted create new empty one
            string installConfig = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Install", "DotNetNuke.install.config");
            if (!File.Exists(installConfig))
            {
                File.Copy(installConfig + ".resources", installConfig);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="530" sc="9" el="592" ec="10">Install\Install.aspx.cs</location>
            <body hash="d023f7fdac587cc2bee521156c2967ab"><![CDATA[{
            base.OnLoad(e);
            Config.AddFCNMode(Config.FcnMode.Single);
            //Get current Script time-out
            int scriptTimeOut = Server.ScriptTimeout;

            string mode = "";
            if ((Request.QueryString["mode"] != null))
            {
                mode = Request.QueryString["mode"].ToLower();
            }

            //Disable Client side caching
            Response.Cache.SetCacheability(HttpCacheability.ServerAndNoCache);

            //Check mode is not Nothing
            if (mode == "none")
            {
                NoUpgrade();
            }
            else
            {
                //Set Script timeout to MAX value
                Server.ScriptTimeout = int.MaxValue;

                switch (Globals.Status)
                {
                    case Globals.UpgradeStatus.Install:
                        InstallApplication();

                        //Force an App Restart
                        Config.Touch();
                        break;
                    case Globals.UpgradeStatus.Upgrade:
                        UpgradeApplication();

                        //Force an App Restart
                        Config.Touch();
                        break;
                    case Globals.UpgradeStatus.None:
                        //Check mode
                        switch (mode)
                        {
                            case "addportal":
                                AddPortal();
                                break;
                            case "installresources":
                                InstallResources();
                                break;
                            case "executescripts":
                                ExecuteScripts();
                                break;
                        }
                        break;
                    case Globals.UpgradeStatus.Error:
                        NoUpgrade();
                        break;
                }

                //restore Script timeout
                Server.ScriptTimeout = scriptTimeOut;                
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="RegisterInstallBegining">
          <declaration><![CDATA[private static void RegisterInstallBegining()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="215" sc="9" el="217" ec="10">Install\Install.aspx.cs</location>
            <body hash="832a75fdf7a144226e00ea2c0e9190ae"><![CDATA[{
            InstallBlocker.Instance.RegisterInstallBegining();
        }]]></body>
          </codeblock>
        </method>
        <method name="RegisterInstallEnd">
          <declaration><![CDATA[private static void RegisterInstallEnd()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="220" sc="9" el="222" ec="10">Install\Install.aspx.cs</location>
            <body hash="9c7fb2f034d54a9f22b5018be0afdcde"><![CDATA[{
            InstallBlocker.Instance.RegisterInstallEnd();
        }]]></body>
          </codeblock>
        </method>
        <method name="UpgradeApplication">
          <declaration><![CDATA[private void UpgradeApplication()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="254" sc="9" el="365" ec="10">Install\Install.aspx.cs</location>
            <body hash="3256713331b27e74e75a33cd73a9b93a"><![CDATA[{ 
            try
            {
                var databaseVersion = DataProvider.Instance().GetVersion();

                //Start Timer
                Upgrade.Upgrade.StartTimer();

                //Write out Header
                HtmlUtils.WriteHeader(Response, "upgrade");

                //There could be an installation in progress
                lock (installLocker)
                {
                    if (InstallBlocker.Instance.IsInstallInProgress())
                    {
                        WriteInstallationHeader();
                        WriteInstallationInProgress();
                        return;
                    }
                    RegisterInstallBegining();
                }

                Response.Write("<h2>Current Assembly Version: " + Globals.FormatVersion(DotNetNukeContext.Current.Application.Version) + "</h2>");
                Response.Flush();

                //get path to script files
                string strProviderPath = DataProvider.Instance().GetProviderPath();
                if (!strProviderPath.StartsWith("ERROR:"))
                {
                    //get current database version
                    var strDatabaseVersion = Globals.FormatVersion(databaseVersion);

                    Response.Write("<h2>Current Database Version: " + strDatabaseVersion + "</h2>");
                    Response.Flush();

                    string ignoreWarning = Null.NullString;
                    string strWarning = Null.NullString;
                    if ((databaseVersion.Major == 3 && databaseVersion.Minor < 3) || (databaseVersion.Major == 4 && databaseVersion.Minor < 3))
                    {
                        //Users and profile have not been transferred
                        //Get the name of the data provider
                        ProviderConfiguration objProviderConfiguration = ProviderConfiguration.GetProviderConfiguration("data");

                        //Execute Special Script
                        Upgrade.Upgrade.ExecuteScript(strProviderPath + "Upgrade." + objProviderConfiguration.DefaultProvider);

                        if ((Request.QueryString["ignoreWarning"] != null))
                        {
                            ignoreWarning = Request.QueryString["ignoreWarning"].ToLower();
                        }
                        strWarning = Upgrade.Upgrade.CheckUpgrade();
                    }
                    else
                    {
                        ignoreWarning = "true";
                    }

                    //Check whether Upgrade is ok
                    if (strWarning == Null.NullString || ignoreWarning == "true")
                    {
                        Response.Write("<br><br>");
                        Response.Write("<h2>Upgrade Status Report</h2>");
                        Response.Flush();

                        //stop scheduler
                        SchedulingProvider.Instance().Halt("Stopped by Upgrade Process");

                        Upgrade.Upgrade.UpgradeDNN(strProviderPath, databaseVersion);

                        //Install optional resources if present
                        var packages = Upgrade.Upgrade.GetInstallPackages();
                        foreach (var package in packages)
                        {
                            Upgrade.Upgrade.InstallPackage(package.Key, package.Value.PackageType, true);
                        }

                        //calling GetInstallVersion after SQL scripts exection to ensure sp GetDatabaseInstallVersion exists
                        var installVersion = DataProvider.Instance().GetInstallVersion();
                        string strError = Config.UpdateInstallVersion(installVersion);

                        //Adding FCN mode to web.config
                        strError += Config.AddFCNMode(Config.FcnMode.Single);
                        if (!string.IsNullOrEmpty(strError))
                        {
                            Logger.Error(strError);
                        }
                        Response.Write("<h2>Upgrade Complete</h2>");
                        Response.Write("<br><br><h2><a href='../Default.aspx'>Click Here To Access Your Site</a></h2><br><br>");
                    }
                    else
                    {
                        Response.Write("<h2>Warning:</h2>" + strWarning.Replace(Environment.NewLine, "<br />"));

                        Response.Write("<br><br><a href='Install.aspx?mode=upgrade&ignoreWarning=true'>Click Here To Proceed With The Upgrade.</a>");
                    }
                    Response.Flush();
                }
                else
                {
                    Response.Write("<h2>Upgrade Error: " + strProviderPath + "</h2>");
                    Response.Flush();
                }

                //Write out Footer
                HtmlUtils.WriteFooter(Response);
            }
            finally
            {
                RegisterInstallEnd();
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="WriteInstallationHeader">
          <declaration><![CDATA[private void WriteInstallationHeader()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="225" sc="9" el="232" ec="10">Install\Install.aspx.cs</location>
            <body hash="ce70513e53f4a7454d2e507b60651e35"><![CDATA[{
            Response.Write("<h2>Version: " + Globals.FormatVersion(DotNetNukeContext.Current.Application.Version) + "</h2>");
            Response.Flush();

            Response.Write("<br><br>");
            Response.Write("<h2>Installation Status Report</h2>");
            Response.Flush();
        }]]></body>
          </codeblock>
        </method>
        <method name="WriteInstallationInProgress">
          <declaration><![CDATA[private void WriteInstallationInProgress()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="235" sc="9" el="240" ec="10">Install\Install.aspx.cs</location>
            <body hash="820ad1ad7cff15f2bd823c28aa33640a"><![CDATA[{
            HtmlUtils.WriteFeedback(HttpContext.Current.Response,
                                    0,
                                    Localization.Localization.GetString("ThereIsAInstallationCurrentlyInProgress.Error", Localization.Localization.GlobalResourceFile) + "<br>");
            Response.Flush();
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="installLocker">
          <declaration><![CDATA[private static readonly object installLocker = new object();]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Logger">
          <declaration><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof(Install));]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="UpgradeWizard">
      <declaration><![CDATA[public class UpgradeWizard : PageBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".cctor">
          <declaration><![CDATA[static UpgradeWizard()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="62" sc="9" el="409" ec="10">Install\UpgradeWizard.aspx.cs</location>
            <body hash="0cef59c65a815d002414c3435c69e15e"><![CDATA[protected static readonly string StatusFilename = "upgradestat.log.resources.txt";
        protected static new string LocalResourceFile = "~/Install/App_LocalResources/UpgradeWizard.aspx.resx";
        private static string _culture;
        private static string[] _supportedLanguages;

        private static IInstallationStep _currentStep;
        private static bool _upgradeRunning;
        private static int _upgradeProgress;

        #endregion

        #region Protected Members

        protected Version ApplicationVersion
        {
            get
            {
                return DotNetNukeContext.Current.Application.Version;
            }
        }

        protected Version CurrentVersion
        {
            get
            {
                return DotNetNukeContext.Current.Application.CurrentVersion;
            }
        }

        #endregion

        #region Private Properties

        private static string StatusFile
        {
            get
            {
                return Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Install", StatusFilename);
            }
        }

        private static bool IsAuthenticated { get; set; }

        #endregion

        #region Private Methods

        private void LocalizePage()
        {
            SetBrowserLanguage();
            Page.Title = LocalizeString("Title");
            if (Globals.FormatVersion(ApplicationVersion) == Globals.FormatVersion(CurrentVersion))
            {
                versionLabel.Visible = false;
                currentVersionLabel.Visible = false;
                versionsMatch.Text = LocalizeString("VersionsMatch");
                if (Globals.IncrementalVersionExists(CurrentVersion))
                {
                    versionsMatch.Text = LocalizeString("VersionsMatchButIncrementalExists");
                }
            }
            else
            {
                versionLabel.Text = string.Format(LocalizeString("Version"), Globals.FormatVersion(ApplicationVersion));
                currentVersionLabel.Text = string.Format(LocalizeString("CurrentVersion"), Globals.FormatVersion(CurrentVersion));  
            }
        }

        private static void GetInstallerLocales()
        {
            var filePath = Globals.ApplicationMapPath + LocalesFile.Replace("/", "\\");

            if (File.Exists(filePath))
            {
                var doc = new XPathDocument(filePath);
                var languages = doc.CreateNavigator().Select("root/language");

                if (languages.Count > 0)
                {
                    _supportedLanguages = new string[languages.Count];
                    var i = 0;
                    foreach (XPathNavigator nav in languages)
                    {
                        if (nav.NodeType != XPathNodeType.Comment)
                        {
                            _supportedLanguages.SetValue(nav.GetAttribute("key", ""), i);
                        }
                        i++;
                    }
                }
                else
                {
                    _supportedLanguages = new string[1];
                    _supportedLanguages.SetValue("en-US", 0);
                }
            }
            else
            {
                _supportedLanguages = new string[1];
                _supportedLanguages.SetValue("en-US",0);
            }
        }

        private void SetBrowserLanguage()
        {
            string cultureCode;
            if (string.IsNullOrEmpty(PageLocale.Value) && string.IsNullOrEmpty(_culture))
            {
                cultureCode = TestableLocalization.Instance.BestCultureCodeBasedOnBrowserLanguages(_supportedLanguages);
            }
            else if (string.IsNullOrEmpty(PageLocale.Value) && !string.IsNullOrEmpty(_culture))
            {
                cultureCode = _culture;
            }
            else
            {
                cultureCode = PageLocale.Value;
            }

            PageLocale.Value = cultureCode;
            _culture = cultureCode;

            Thread.CurrentThread.CurrentUICulture = new CultureInfo(cultureCode);
        }

        private static string LocalizeStringStatic(string key)
        {
            return Localization.Localization.GetString(key, LocalResourceFile, _culture);
        }
        
        private static void LaunchUpgrade()
        {
            //Get current Script time-out
            var scriptTimeOut = HttpContext.Current.Server.ScriptTimeout;

            //Set Script timeout to MAX value
            HttpContext.Current.Server.ScriptTimeout = int.MaxValue;

            if (_culture != null) Thread.CurrentThread.CurrentUICulture = new CultureInfo(_culture);

            //bail out early if upgrade is in progress
            if (_upgradeRunning)
                return;

            var percentForEachStep = 100 / _steps.Count;
            var useGenericPercent = false;
            var totalPercent = _steps.Sum(step => step.Value);
            if (totalPercent != 100) useGenericPercent = true;

            _upgradeRunning = true;
            _upgradeProgress = 0;

            //Output the current time for the user
            CurrentStepActivity(string.Concat(Localization.Localization.GetString("UpgradeStarted", LocalResourceFile),
                ":", DateTime.Now.ToString()));

            foreach (var step in _steps)
            {
                _currentStep = step.Key;

                try
                {
                    _currentStep.Activity += CurrentStepActivity;
                    _currentStep.Execute();
                }
                catch (Exception ex)
                {
                    CurrentStepActivity(Localization.Localization.GetString("ErrorInStep", LocalResourceFile) + ": " + ex.Message);
                    _upgradeRunning = false;
                    return;
                }
                switch (_currentStep.Status)
                {
                    case StepStatus.AppRestart:
                        _upgradeRunning = false;
                        HttpContext.Current.Response.Redirect(HttpContext.Current.Request.RawUrl, true);
                        break;
                    default:
                        if (_currentStep.Status != StepStatus.Done)
                        {
                            CurrentStepActivity(string.Format(Localization.Localization.GetString("ErrorInStep", LocalResourceFile)
                                                                                                  , _currentStep.Errors.Count > 0 ? string.Join(",", _currentStep.Errors.ToArray()) : _currentStep.Details));
                            _upgradeRunning = false;
                            return;
                        }
                        break;
                }
                if (useGenericPercent)
                    _upgradeProgress += percentForEachStep;
                else
                    _upgradeProgress += step.Value;
            }

            _currentStep = null;
            _upgradeProgress = 100;
            CurrentStepActivity(Localization.Localization.GetString("UpgradeDone", LocalResourceFile));

            //indicate we are done
            _upgradeRunning = false;

            //restore Script timeout
            HttpContext.Current.Server.ScriptTimeout = scriptTimeOut;

        }

        private static void CurrentStepActivity(string status)
        {
            var percentage = (_currentStep == null) ? _upgradeProgress : _upgradeProgress + (_currentStep.Percentage / _steps.Count);
            var obj = new
            {
                progress = percentage,
                details = status,
                check0 = upgradeDatabase.Status.ToString() + (upgradeDatabase.Errors.Count == 0 ? "" : " Errors " + upgradeDatabase.Errors.Count),
                check1 = upgradeExtensions.Status.ToString() + (upgradeExtensions.Errors.Count == 0 ? "" : " Errors " + upgradeExtensions.Errors.Count)
            };

            try
            {
                if (!File.Exists(StatusFile)) File.CreateText(StatusFile);
                var sw = new StreamWriter(StatusFile, true);
                sw.WriteLine(obj.ToJson());
                sw.Close();
            }
            catch (Exception)
            {
                //TODO - do something                
            }
        }

		private void CompleteUpgrade()
        {
            //Delete the status file.
            try
            {
                File.Delete(StatusFile);
            }
            catch (Exception)
            {
                //Do nothing
            }

            //remove installwizard files added back by upgrade package
            Upgrade.Upgrade.DeleteInstallerFiles();

            Config.Touch();
            Response.Redirect("../Default.aspx", true);
        }

        private void SslRequiredCheck()
        {
            if (Entities.Host.Host.UpgradeForceSsl && !Request.IsSecureConnection)
            {
                var sslDomain = Entities.Host.Host.SslDomain;
                if (string.IsNullOrEmpty(sslDomain))
                {
                    sslDomain = Request.Url.Host;
                }
                else if (sslDomain.Contains("://"))
                {
                    sslDomain = sslDomain.Substring(sslDomain.IndexOf("://") + 3);
                }

                var sslUrl = string.Format("https://{0}{1}",
                    sslDomain, Request.RawUrl);

                Response.Redirect(sslUrl, true);
            }
        }

        #endregion

        #region Protected Methods
        protected string LocalizeString(string key)
        {
            return Localization.Localization.GetString(key, LocalResourceFile, _culture);
        }
        
        protected override void OnError(EventArgs e)
        {
            HttpContext.Current.Response.Clear();
            HttpContext.Current.Server.Transfer("~/ErrorPage.aspx");
        }
        #endregion

        #region Event Handlers
        /// -----------------------------------------------------------------------------
        /// <summary>
        /// Page_Init runs when the Page is initialised
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// -----------------------------------------------------------------------------
        protected override void OnInit(EventArgs e)
        {
            base.OnInit(e);
            SslRequiredCheck();
            GetInstallerLocales();
        }

        /// -----------------------------------------------------------------------------
        /// <summary>
        /// Page_Load runs when the Page loads
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// -----------------------------------------------------------------------------
        protected override void OnLoad(EventArgs e)
        {
            if (InstallBlocker.Instance.IsInstallInProgress())
            {
                Response.Redirect("Install.aspx", true);
            }

            base.OnLoad(e);
            LocalizePage();

			if (Request.RawUrl.EndsWith("?complete"))
			{
				CompleteUpgrade();
			}
            
            //Create Status Files
            if (!Page.IsPostBack)
            {
                if (!File.Exists(StatusFile)) File.CreateText(StatusFile).Close();
            }
        }
        #endregion
        
        #region Web Methods

        //steps shown in UI
        static IInstallationStep upgradeDatabase = new InstallDatabaseStep();
        static IInstallationStep upgradeExtensions = new InstallExtensionsStep();

        //Ordered List of Steps (and weight in percentage) to be executed
        private static IDictionary<IInstallationStep, int> _steps = new Dictionary<IInstallationStep, int>
                                {
                                    {new AddFcnModeStep(), 1},
                                    {upgradeDatabase, 50}, 
                                    {upgradeExtensions, 49}, 
                                    {new InstallVersionStep(), 1}
                                };

        static UpgradeWizard()
        {
            IsAuthenticated = false;
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[public UpgradeWizard()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="CompleteUpgrade">
          <declaration><![CDATA[private void CompleteUpgrade()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="292" sc="9" el="308" ec="10">Install\UpgradeWizard.aspx.cs</location>
            <body hash="f9962baf8421dc3129c95041500b95d2"><![CDATA[{
            //Delete the status file.
            try
            {
                File.Delete(StatusFile);
            }
            catch (Exception)
            {
                //Do nothing
            }

            //remove installwizard files added back by upgrade package
            Upgrade.Upgrade.DeleteInstallerFiles();

            Config.Touch();
            Response.Redirect("../Default.aspx", true);
        }]]></body>
          </codeblock>
        </method>
        <method name="CurrentStepActivity">
          <declaration><![CDATA[private static void CurrentStepActivity(string status)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="268" sc="9" el="289" ec="10">Install\UpgradeWizard.aspx.cs</location>
            <body hash="b0bcd54f1320c966e277bb181c2325ad"><![CDATA[{
            var percentage = (_currentStep == null) ? _upgradeProgress : _upgradeProgress + (_currentStep.Percentage / _steps.Count);
            var obj = new
            {
                progress = percentage,
                details = status,
                check0 = upgradeDatabase.Status.ToString() + (upgradeDatabase.Errors.Count == 0 ? "" : " Errors " + upgradeDatabase.Errors.Count),
                check1 = upgradeExtensions.Status.ToString() + (upgradeExtensions.Errors.Count == 0 ? "" : " Errors " + upgradeExtensions.Errors.Count)
            };

            try
            {
                if (!File.Exists(StatusFile)) File.CreateText(StatusFile);
                var sw = new StreamWriter(StatusFile, true);
                sw.WriteLine(obj.ToJson());
                sw.Close();
            }
            catch (Exception)
            {
                //TODO - do something                
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetInstallationLog">
          <declaration><![CDATA[public static object GetInstallationLog(int startRow)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="455" sc="9" el="490" ec="10">Install\UpgradeWizard.aspx.cs</location>
            <body hash="1590cd40072329d6b29be234dec9517b"><![CDATA[{
            if (IsAuthenticated == false) return string.Empty;

            var data = string.Empty;
            string logFile = "InstallerLog" + DateTime.Now.Year.ToString() + DateTime.Now.Month.ToString() + DateTime.Now.Day.ToString() + ".resources";
            try
            {
                var lines = File.ReadAllLines(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Portals", "_default", "logs", logFile));
                var errorLogged = false;
                if (lines.Length > startRow)
                {
                    var count = lines.Length - startRow > 500 ? 500 : lines.Length - startRow;
                    System.Text.StringBuilder sb = new System.Text.StringBuilder();
                    for (var i = startRow; i < startRow + count; i++)
                    {
                        if (lines[i].Contains("[ERROR]"))
                        {
                            sb.Append(lines[i]);
                            sb.Append("<br/>");
                            errorLogged = true;
                        }
                    }

                    data = sb.ToString();
                }
                if (errorLogged == false)
                {
                    Localization.Localization.GetString("NoErrorsLogged", "~/Install/App_LocalResources/InstallWizard.aspx.resx");
                }
            }
            catch (Exception)
            {
            }

            return data;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetInstallerLocales">
          <declaration><![CDATA[private static void GetInstallerLocales()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="131" sc="9" el="163" ec="10">Install\UpgradeWizard.aspx.cs</location>
            <body hash="b0bafadcce3d464357504a094cdff567"><![CDATA[{
            var filePath = Globals.ApplicationMapPath + LocalesFile.Replace("/", "\\");

            if (File.Exists(filePath))
            {
                var doc = new XPathDocument(filePath);
                var languages = doc.CreateNavigator().Select("root/language");

                if (languages.Count > 0)
                {
                    _supportedLanguages = new string[languages.Count];
                    var i = 0;
                    foreach (XPathNavigator nav in languages)
                    {
                        if (nav.NodeType != XPathNodeType.Comment)
                        {
                            _supportedLanguages.SetValue(nav.GetAttribute("key", ""), i);
                        }
                        i++;
                    }
                }
                else
                {
                    _supportedLanguages = new string[1];
                    _supportedLanguages.SetValue("en-US", 0);
                }
            }
            else
            {
                _supportedLanguages = new string[1];
                _supportedLanguages.SetValue("en-US",0);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="LaunchUpgrade">
          <declaration><![CDATA[private static void LaunchUpgrade()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="193" sc="9" el="265" ec="10">Install\UpgradeWizard.aspx.cs</location>
            <body hash="c7958d8330b5ae9f3d1034360dfe44eb"><![CDATA[{
            //Get current Script time-out
            var scriptTimeOut = HttpContext.Current.Server.ScriptTimeout;

            //Set Script timeout to MAX value
            HttpContext.Current.Server.ScriptTimeout = int.MaxValue;

            if (_culture != null) Thread.CurrentThread.CurrentUICulture = new CultureInfo(_culture);

            //bail out early if upgrade is in progress
            if (_upgradeRunning)
                return;

            var percentForEachStep = 100 / _steps.Count;
            var useGenericPercent = false;
            var totalPercent = _steps.Sum(step => step.Value);
            if (totalPercent != 100) useGenericPercent = true;

            _upgradeRunning = true;
            _upgradeProgress = 0;

            //Output the current time for the user
            CurrentStepActivity(string.Concat(Localization.Localization.GetString("UpgradeStarted", LocalResourceFile),
                ":", DateTime.Now.ToString()));

            foreach (var step in _steps)
            {
                _currentStep = step.Key;

                try
                {
                    _currentStep.Activity += CurrentStepActivity;
                    _currentStep.Execute();
                }
                catch (Exception ex)
                {
                    CurrentStepActivity(Localization.Localization.GetString("ErrorInStep", LocalResourceFile) + ": " + ex.Message);
                    _upgradeRunning = false;
                    return;
                }
                switch (_currentStep.Status)
                {
                    case StepStatus.AppRestart:
                        _upgradeRunning = false;
                        HttpContext.Current.Response.Redirect(HttpContext.Current.Request.RawUrl, true);
                        break;
                    default:
                        if (_currentStep.Status != StepStatus.Done)
                        {
                            CurrentStepActivity(string.Format(Localization.Localization.GetString("ErrorInStep", LocalResourceFile)
                                                                                                  , _currentStep.Errors.Count > 0 ? string.Join(",", _currentStep.Errors.ToArray()) : _currentStep.Details));
                            _upgradeRunning = false;
                            return;
                        }
                        break;
                }
                if (useGenericPercent)
                    _upgradeProgress += percentForEachStep;
                else
                    _upgradeProgress += step.Value;
            }

            _currentStep = null;
            _upgradeProgress = 100;
            CurrentStepActivity(Localization.Localization.GetString("UpgradeDone", LocalResourceFile));

            //indicate we are done
            _upgradeRunning = false;

            //restore Script timeout
            HttpContext.Current.Server.ScriptTimeout = scriptTimeOut;

        }]]></body>
          </codeblock>
        </method>
        <method name="LocalizePage">
          <declaration><![CDATA[private void LocalizePage()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="110" sc="9" el="128" ec="10">Install\UpgradeWizard.aspx.cs</location>
            <body hash="c340c8affdbbcdd52a8044d1e9e6bc06"><![CDATA[{
            SetBrowserLanguage();
            Page.Title = LocalizeString("Title");
            if (Globals.FormatVersion(ApplicationVersion) == Globals.FormatVersion(CurrentVersion))
            {
                versionLabel.Visible = false;
                currentVersionLabel.Visible = false;
                versionsMatch.Text = LocalizeString("VersionsMatch");
                if (Globals.IncrementalVersionExists(CurrentVersion))
                {
                    versionsMatch.Text = LocalizeString("VersionsMatchButIncrementalExists");
                }
            }
            else
            {
                versionLabel.Text = string.Format(LocalizeString("Version"), Globals.FormatVersion(ApplicationVersion));
                currentVersionLabel.Text = string.Format(LocalizeString("CurrentVersion"), Globals.FormatVersion(CurrentVersion));  
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="LocalizeString">
          <declaration><![CDATA[protected string LocalizeString(string key)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="335" sc="9" el="337" ec="10">Install\UpgradeWizard.aspx.cs</location>
            <body hash="5990f216b7655e5a506bdbd6d7bfabd5"><![CDATA[{
            return Localization.Localization.GetString(key, LocalResourceFile, _culture);
        }]]></body>
          </codeblock>
        </method>
        <method name="LocalizeStringStatic">
          <declaration><![CDATA[private static string LocalizeStringStatic(string key)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="188" sc="9" el="190" ec="10">Install\UpgradeWizard.aspx.cs</location>
            <body hash="5990f216b7655e5a506bdbd6d7bfabd5"><![CDATA[{
            return Localization.Localization.GetString(key, LocalResourceFile, _culture);
        }]]></body>
          </codeblock>
        </method>
        <method name="OnError">
          <declaration><![CDATA[protected override void OnError(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="340" sc="9" el="343" ec="10">Install\UpgradeWizard.aspx.cs</location>
            <body hash="574ee279d2617abf8b519d3f9bf2390e"><![CDATA[{
            HttpContext.Current.Response.Clear();
            HttpContext.Current.Server.Transfer("~/ErrorPage.aspx");
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="355" sc="9" el="359" ec="10">Install\UpgradeWizard.aspx.cs</location>
            <body hash="4fce87f3321bfd4a80f8e6021f520115"><![CDATA[{
            base.OnInit(e);
            SslRequiredCheck();
            GetInstallerLocales();
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="369" sc="9" el="388" ec="10">Install\UpgradeWizard.aspx.cs</location>
            <body hash="aa3328e65632ecba41892e3b71bb1597"><![CDATA[{
            if (InstallBlocker.Instance.IsInstallInProgress())
            {
                Response.Redirect("Install.aspx", true);
            }

            base.OnLoad(e);
            LocalizePage();

			if (Request.RawUrl.EndsWith("?complete"))
			{
				CompleteUpgrade();
			}
            
            //Create Status Files
            if (!Page.IsPostBack)
            {
                if (!File.Exists(StatusFile)) File.CreateText(StatusFile).Close();
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="RunUpgrade">
          <declaration><![CDATA[public static void RunUpgrade(Dictionary<string, string> accountInfo)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="442" sc="9" el="451" ec="10">Install\UpgradeWizard.aspx.cs</location>
            <body hash="8c11476947f17b8648ca9fd1f5250856"><![CDATA[{
            string errorMsg;
            var result = VerifyHostUser(accountInfo, out errorMsg);

           if (result==true)
           {
            _upgradeRunning = false;
            LaunchUpgrade();
           }
        }]]></body>
          </codeblock>
        </method>
        <method name="SetBrowserLanguage">
          <declaration><![CDATA[private void SetBrowserLanguage()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="166" sc="9" el="185" ec="10">Install\UpgradeWizard.aspx.cs</location>
            <body hash="7ef868955b19972c3d9af88ad24526e9"><![CDATA[{
            string cultureCode;
            if (string.IsNullOrEmpty(PageLocale.Value) && string.IsNullOrEmpty(_culture))
            {
                cultureCode = TestableLocalization.Instance.BestCultureCodeBasedOnBrowserLanguages(_supportedLanguages);
            }
            else if (string.IsNullOrEmpty(PageLocale.Value) && !string.IsNullOrEmpty(_culture))
            {
                cultureCode = _culture;
            }
            else
            {
                cultureCode = PageLocale.Value;
            }

            PageLocale.Value = cultureCode;
            _culture = cultureCode;

            Thread.CurrentThread.CurrentUICulture = new CultureInfo(cultureCode);
        }]]></body>
          </codeblock>
        </method>
        <method name="SslRequiredCheck">
          <declaration><![CDATA[private void SslRequiredCheck()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="311" sc="9" el="329" ec="10">Install\UpgradeWizard.aspx.cs</location>
            <body hash="a5b7dead6f6b6590b6f86eb875ae323d"><![CDATA[{
            if (Entities.Host.Host.UpgradeForceSsl && !Request.IsSecureConnection)
            {
                var sslDomain = Entities.Host.Host.SslDomain;
                if (string.IsNullOrEmpty(sslDomain))
                {
                    sslDomain = Request.Url.Host;
                }
                else if (sslDomain.Contains("://"))
                {
                    sslDomain = sslDomain.Substring(sslDomain.IndexOf("://") + 3);
                }

                var sslUrl = string.Format("https://{0}{1}",
                    sslDomain, Request.RawUrl);

                Response.Redirect(sslUrl, true);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="ValidateInput">
          <declaration><![CDATA[public static Tuple<bool, string> ValidateInput(Dictionary<string, string> accountInfo)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="413" sc="9" el="418" ec="10">Install\UpgradeWizard.aspx.cs</location>
            <body hash="64d2942674a7dfeee2da97e77cc7f66c"><![CDATA[{
            string errorMsg;
            var result = VerifyHostUser(accountInfo, out errorMsg);

            return new Tuple<bool, string>(result, errorMsg);
        }]]></body>
          </codeblock>
        </method>
        <method name="VerifyHostUser">
          <declaration><![CDATA[private static bool VerifyHostUser(Dictionary<string, string> accountInfo, out string errorMsg)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="421" sc="9" el="438" ec="10">Install\UpgradeWizard.aspx.cs</location>
            <body hash="b0a179184b32ecaf5a83eb96bd4c49b6"><![CDATA[{
            var result = true;
            errorMsg = string.Empty;

            UserLoginStatus loginStatus = UserLoginStatus.LOGIN_FAILURE;
            UserInfo hostUser = UserController.ValidateUser(-1, accountInfo["username"], accountInfo["password"], "DNN", "", "", AuthenticationLoginBase.GetIPAddress(), ref loginStatus);

            if (loginStatus == UserLoginStatus.LOGIN_FAILURE || !hostUser.IsSuperUser)
            {
                result = false;
                errorMsg = LocalizeStringStatic("InvalidCredentials");
            }
            else
            {
                IsAuthenticated = true;
            }
            return result;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_culture">
          <declaration><![CDATA[private static string _culture;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_currentStep">
          <declaration><![CDATA[private static IInstallationStep _currentStep;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_steps">
          <declaration><![CDATA[private static IDictionary<IInstallationStep, int> _steps;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_supportedLanguages">
          <declaration><![CDATA[private static string[] _supportedLanguages;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_upgradeProgress">
          <declaration><![CDATA[private static int _upgradeProgress;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_upgradeRunning">
          <declaration><![CDATA[private static bool _upgradeRunning;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="BodySCRIPTS">
          <declaration><![CDATA[protected PlaceHolder BodySCRIPTS;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ClientDependencyHeadCss">
          <declaration><![CDATA[protected PlaceHolder ClientDependencyHeadCss;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ClientDependencyHeadJs">
          <declaration><![CDATA[protected PlaceHolder ClientDependencyHeadJs;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ClientResourceIncludes">
          <declaration><![CDATA[protected PlaceHolder ClientResourceIncludes;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="continueLink">
          <declaration><![CDATA[protected LinkButton continueLink;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="currentVersionLabel">
          <declaration><![CDATA[protected Label currentVersionLabel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="dnnInstall">
          <declaration><![CDATA[protected HtmlGenericControl dnnInstall;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="form1">
          <declaration><![CDATA[protected HtmlForm form1;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lang_de_DE">
          <declaration><![CDATA[protected LinkButton lang_de_DE;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lang_en_US">
          <declaration><![CDATA[protected LinkButton lang_en_US;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lang_es_ES">
          <declaration><![CDATA[protected LinkButton lang_es_ES;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lang_fr_FR">
          <declaration><![CDATA[protected LinkButton lang_fr_FR;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lang_it_IT">
          <declaration><![CDATA[protected LinkButton lang_it_IT;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lang_nl_NL">
          <declaration><![CDATA[protected LinkButton lang_nl_NL;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblAccountInfoError">
          <declaration><![CDATA[protected Label lblAccountInfoError;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblDotNetNukeUpgrade">
          <declaration><![CDATA[protected Label lblDotNetNukeUpgrade;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblIntroDetail">
          <declaration><![CDATA[protected Label lblIntroDetail;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblPassword">
          <declaration><![CDATA[protected Label lblPassword;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblUpgradeIntroInfo">
          <declaration><![CDATA[protected Label lblUpgradeIntroInfo;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblUsername">
          <declaration><![CDATA[protected Label lblUsername;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="LocalesFile">
          <declaration><![CDATA[private const string LocalesFile = "/Install/App_LocalResources/Locales.xml";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="LocalResourceFile">
          <declaration><![CDATA[protected new static string LocalResourceFile;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="PageLocale">
          <declaration><![CDATA[protected HtmlInputHidden PageLocale;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="scManager">
          <declaration><![CDATA[protected ScriptManager scManager;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="SCRIPTS">
          <declaration><![CDATA[protected PlaceHolder SCRIPTS;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="StatusFilename">
          <declaration><![CDATA[protected static readonly string StatusFilename;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtErrorMessage">
          <declaration><![CDATA[protected Label txtErrorMessage;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtPassword">
          <declaration><![CDATA[protected TextBox txtPassword;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtUsername">
          <declaration><![CDATA[protected TextBox txtUsername;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="upgrade">
          <declaration><![CDATA[protected HtmlGenericControl upgrade;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="upgradeDatabase">
          <declaration><![CDATA[private static IInstallationStep upgradeDatabase;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="upgradeExtensions">
          <declaration><![CDATA[private static IInstallationStep upgradeExtensions;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="versionLabel">
          <declaration><![CDATA[protected Label versionLabel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="versionsMatch">
          <declaration><![CDATA[protected Label versionsMatch;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="visitSite">
          <declaration><![CDATA[protected HyperLink visitSite;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="ApplicationVersion">
          <declaration><![CDATA[protected Version ApplicationVersion]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="78" sc="13" el="80" ec="14">Install\UpgradeWizard.aspx.cs</location>
            <body hash="84d745e0bc8abc58ea6aae081200fcfa"><![CDATA[{
                return DotNetNukeContext.Current.Application.Version;
            }]]></body>
          </codeblock>
        </property>
        <property name="CurrentVersion">
          <declaration><![CDATA[protected Version CurrentVersion]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="86" sc="13" el="88" ec="14">Install\UpgradeWizard.aspx.cs</location>
            <body hash="94411e8a2d6bf671e0114a489ce187ff"><![CDATA[{
                return DotNetNukeContext.Current.Application.CurrentVersion;
            }]]></body>
          </codeblock>
        </property>
        <property name="IsAuthenticated">
          <declaration><![CDATA[private static bool IsAuthenticated]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="103" sc="47" el="103" ec="51">Install\UpgradeWizard.aspx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="103" sc="52" el="103" ec="56">Install\UpgradeWizard.aspx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="StatusFile">
          <declaration><![CDATA[private static string StatusFile]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="98" sc="13" el="100" ec="14">Install\UpgradeWizard.aspx.cs</location>
            <body hash="55e3a596352194cf9edaeedad883217d"><![CDATA[{
                return Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Install", StatusFilename);
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="WizardUser">
      <declaration><![CDATA[public class WizardUser : UserControl]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public WizardUser()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="219" sc="9" el="242" ec="10">Install\WizardUser.ascx.cs</location>
            <body hash="a0c26500599b19d98401a2e3127c98a4"><![CDATA[{
			base.OnLoad(e);

			if(IsPostBack)
			{
				if(!string.IsNullOrEmpty(txtPassword.Text))
				{
					ViewState["Password"] = txtPassword.Text;
				}
				else if(ViewState["Password"] != null)
				{
					txtPassword.Text = ViewState["Password"].ToString();
				}

				if (!string.IsNullOrEmpty(txtConfirm.Text))
				{
					ViewState["Confirm"] = txtConfirm.Text;
				}
				else if (ViewState["Confirm"] != null)
				{
					txtConfirm.Text = ViewState["Confirm"].ToString();
				}
			}
        }]]></body>
          </codeblock>
        </method>
        <method name="OnPreRender">
          <declaration><![CDATA[protected override void OnPreRender(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="252" sc="3" el="258" ec="4">Install\WizardUser.ascx.cs</location>
            <body hash="62e5343d0c2904e3a71fa030c376dbe1"><![CDATA[{
			base.OnPreRender(e);

			//Make sure that the password is not cleared on pastback
			txtConfirm.Attributes["value"] = txtConfirm.Text;
			txtPassword.Attributes["value"] = txtPassword.Text;
		}]]></body>
          </codeblock>
        </method>
        <method name="Validate">
          <declaration><![CDATA[public string Validate()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="182" sc="9" el="209" ec="10">Install\WizardUser.ascx.cs</location>
            <body hash="68da7c5270c3ea7b8a3ccd5aaf9f0af6"><![CDATA[{
            string strErrorMessage = Null.NullString;
            if (txtUserName.Text.Length < 4)
            {
                strErrorMessage = "MinUserNamelength";
            }
            else if (string.IsNullOrEmpty(txtPassword.Text))
            {
                strErrorMessage = "NoPassword";
            }
            else if (txtUserName.Text == txtPassword.Text)
            {
                strErrorMessage = "PasswordUser";
            }
            else if (txtPassword.Text.Length < MembershipProviderConfig.MinPasswordLength)
            {
                strErrorMessage = "PasswordLength";
            }
            else if (txtPassword.Text != txtConfirm.Text)
            {
                strErrorMessage = "ConfirmPassword";
            }
            else if (!Globals.EmailValidatorRegex.IsMatch(txtEmail.Text))
            {
                strErrorMessage = "InValidEmail";
            }
            return strErrorMessage;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="lblConfirm">
          <declaration><![CDATA[protected Label lblConfirm;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblEmail">
          <declaration><![CDATA[protected Label lblEmail;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblFirstName">
          <declaration><![CDATA[protected Label lblFirstName;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblLastName">
          <declaration><![CDATA[protected Label lblLastName;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblPassword">
          <declaration><![CDATA[protected Label lblPassword;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblUserName">
          <declaration><![CDATA[protected Label lblUserName;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtConfirm">
          <declaration><![CDATA[protected TextBox txtConfirm;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtEmail">
          <declaration><![CDATA[protected TextBox txtEmail;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtFirstName">
          <declaration><![CDATA[protected TextBox txtFirstName;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtLastName">
          <declaration><![CDATA[protected TextBox txtLastName;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtPassword">
          <declaration><![CDATA[protected TextBox txtPassword;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtUserName">
          <declaration><![CDATA[protected TextBox txtUserName;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="Confirm">
          <declaration><![CDATA[public string Confirm]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="88" sc="13" el="90" ec="14">Install\WizardUser.ascx.cs</location>
            <body hash="4d003749b925540a8ebc5f69579dc914"><![CDATA[{
                return txtConfirm.Text;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="92" sc="13" el="94" ec="14">Install\WizardUser.ascx.cs</location>
            <body hash="653a0390a993106663b3aced5846b338"><![CDATA[{
                txtConfirm.Text = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="ConfirmLabel">
          <declaration><![CDATA[public string ConfirmLabel]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="160" sc="13" el="162" ec="14">Install\WizardUser.ascx.cs</location>
            <body hash="c07fb7bdd63e00c2dc9557a902235b04"><![CDATA[{
                return lblConfirm.Text;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="164" sc="13" el="166" ec="14">Install\WizardUser.ascx.cs</location>
            <body hash="fa8c674625d068a7681400939ea70b12"><![CDATA[{
                lblConfirm.Text = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="Email">
          <declaration><![CDATA[public string Email]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="100" sc="13" el="102" ec="14">Install\WizardUser.ascx.cs</location>
            <body hash="3974fcf166c57cf6be59407be3e11f38"><![CDATA[{
                return txtEmail.Text;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="104" sc="13" el="106" ec="14">Install\WizardUser.ascx.cs</location>
            <body hash="2da41f4f1f85c58886716aa7c840c38b"><![CDATA[{
                txtEmail.Text = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="EmailLabel">
          <declaration><![CDATA[public string EmailLabel]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="172" sc="13" el="174" ec="14">Install\WizardUser.ascx.cs</location>
            <body hash="577e4b1c44e556d3608f5a0d815ec301"><![CDATA[{
                return lblEmail.Text;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="176" sc="13" el="178" ec="14">Install\WizardUser.ascx.cs</location>
            <body hash="f02ed996348f94f363828959d5a79bf6"><![CDATA[{
                lblEmail.Text = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="FirstName">
          <declaration><![CDATA[public string FirstName]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="40" sc="13" el="42" ec="14">Install\WizardUser.ascx.cs</location>
            <body hash="b439386a5a35b107367622cf75b9dfef"><![CDATA[{
                return txtFirstName.Text;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="44" sc="13" el="46" ec="14">Install\WizardUser.ascx.cs</location>
            <body hash="16ab0789d788b47c1438da9e45962c37"><![CDATA[{
                txtFirstName.Text = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="FirstNameLabel">
          <declaration><![CDATA[public string FirstNameLabel]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="112" sc="13" el="114" ec="14">Install\WizardUser.ascx.cs</location>
            <body hash="84c24d325498312f15ade31e5b6b9851"><![CDATA[{
                return lblFirstName.Text;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="116" sc="13" el="118" ec="14">Install\WizardUser.ascx.cs</location>
            <body hash="3e7b0f723e35cd89f059c3bb28c0bffe"><![CDATA[{
                lblFirstName.Text = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="LastName">
          <declaration><![CDATA[public string LastName]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="52" sc="13" el="54" ec="14">Install\WizardUser.ascx.cs</location>
            <body hash="7040bc049ee7451f7ddde0a295edeb98"><![CDATA[{
                return txtLastName.Text;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="56" sc="13" el="58" ec="14">Install\WizardUser.ascx.cs</location>
            <body hash="8c6b7fd28f6baa90125287446e365b9a"><![CDATA[{
                txtLastName.Text = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="LastNameLabel">
          <declaration><![CDATA[public string LastNameLabel]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="124" sc="13" el="126" ec="14">Install\WizardUser.ascx.cs</location>
            <body hash="9d3c20bc5f0be74d744f588539b8e24d"><![CDATA[{
                return lblLastName.Text;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="128" sc="13" el="130" ec="14">Install\WizardUser.ascx.cs</location>
            <body hash="8fa697e7cf8b933f00791e91b68d6846"><![CDATA[{
                lblLastName.Text = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="Password">
          <declaration><![CDATA[public string Password]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="76" sc="13" el="78" ec="14">Install\WizardUser.ascx.cs</location>
            <body hash="6b042b716ae46ab8c8c11f58798c23bb"><![CDATA[{
                return txtPassword.Text;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="80" sc="13" el="82" ec="14">Install\WizardUser.ascx.cs</location>
            <body hash="530dc50550495fc36b1b9d821dc5bb21"><![CDATA[{
                txtPassword.Text = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="PasswordLabel">
          <declaration><![CDATA[public string PasswordLabel]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="148" sc="13" el="150" ec="14">Install\WizardUser.ascx.cs</location>
            <body hash="d9cb273254b95afc8615655a4898cbc0"><![CDATA[{
                return lblPassword.Text;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="152" sc="13" el="154" ec="14">Install\WizardUser.ascx.cs</location>
            <body hash="03445a38cb6676b5b932a599dcf98c7d"><![CDATA[{
                lblPassword.Text = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="UserName">
          <declaration><![CDATA[public string UserName]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="64" sc="13" el="66" ec="14">Install\WizardUser.ascx.cs</location>
            <body hash="19329440aec4e5c7cea49cc577f3483f"><![CDATA[{
                return txtUserName.Text;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="68" sc="13" el="70" ec="14">Install\WizardUser.ascx.cs</location>
            <body hash="1659442bc977cbfccefff52e70f773a7"><![CDATA[{
                txtUserName.Text = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="UserNameLabel">
          <declaration><![CDATA[public string UserNameLabel]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="136" sc="13" el="138" ec="14">Install\WizardUser.ascx.cs</location>
            <body hash="e5681da2324bd1119f1d3846bf556034"><![CDATA[{
                return lblUserName.Text;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="140" sc="13" el="142" ec="14">Install\WizardUser.ascx.cs</location>
            <body hash="422a8c28697c6aae5d6100719d09306e"><![CDATA[{
                lblUserName.Text = value;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="DotNetNuke.UI.Containers">
    <class name="DropDownActions">
      <declaration><![CDATA[public class DropDownActions : ActionBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private string m_strProviderName = "DNNDropDownNavigationProvider";]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="39" sc="9" el="39" ec="76">admin\Containers\DropDownActions.ascx.cs</location>
            <body hash="b2e23fe7a3b927efa46cce62a0838b87"><![CDATA[private string m_strProviderName = "DNNDropDownNavigationProvider"]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="BindDropDown">
          <declaration><![CDATA[public void BindDropDown()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="98" sc="9" el="108" ec="10">admin\Containers\DropDownActions.ascx.cs</location>
            <body hash="024b74f9ca8ed80b0a5ec9241e671617"><![CDATA[{
            DNNNodeCollection objNodes;
            objNodes = Navigation.GetActionNodes(ActionRoot, this);
            foreach (DNNNode objNode in objNodes)
            {
                ProcessNodes(objNode);
            }
            Control.Bind(objNodes);

            Visible = DisplayControl(objNodes);
        }]]></body>
          </codeblock>
        </method>
        <method name="cmdGo_Click">
          <declaration><![CDATA[private void cmdGo_Click(object sender, ImageClickEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="82" sc="9" el="95" ec="10">admin\Containers\DropDownActions.ascx.cs</location>
            <body hash="64af2ee31f1fb92e23a07e68c7f3734b"><![CDATA[{
            try
            {
                var cboActions = (DropDownList) Control.NavigationControl;
                if (cboActions.SelectedIndex != -1)
                {
                    ProcessAction(cboActions.SelectedItem.Value);
                }
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="125" sc="9" el="131" ec="10">admin\Containers\DropDownActions.ascx.cs</location>
            <body hash="e90b34b4801c3909d5284b374418b239"><![CDATA[{
            base.OnInit(e);
            m_objControl = NavigationProvider.Instance(ProviderName);
            Control.ControlID = "ctl" + ID;
            Control.Initialize();
            spActions.Controls.Add(Control.NavigationControl);
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="66" sc="9" el="79" ec="10">admin\Containers\DropDownActions.ascx.cs</location>
            <body hash="e17628fa6f18e6c2062d9195d5cc08e5"><![CDATA[{
            base.OnLoad(e);

            cmdGo.Click += cmdGo_Click;

            try
            {
                BindDropDown();
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="Page_Load">
          <declaration><![CDATA[private void Page_Load(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="61" sc="9" el="63" ec="10">admin\Containers\DropDownActions.ascx.cs</location>
            <body hash="31e6746f86a5e4b10904fd6f2c86d0bc"><![CDATA[{
            cmdGo.Attributes.Add("onclick", "if (cmdGo_OnClick(dnn.dom.getById('" + Control.NavigationControl.ClientID + "')) == false) return false;");
        }]]></body>
          </codeblock>
        </method>
        <method name="ProcessNodes">
          <declaration><![CDATA[private void ProcessNodes(DNNNode objParent)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="111" sc="9" el="122" ec="10">admin\Containers\DropDownActions.ascx.cs</location>
            <body hash="11f13e9c5e2628c7b42de5dad3cc5527"><![CDATA[{
            if (!String.IsNullOrEmpty(objParent.JSFunction))
            {
                ClientAPI.RegisterClientVariable(Page, "__dnn_CSAction_" + Control.NavigationControl.ClientID + "_" + objParent.ID, objParent.JSFunction, true);
            }
            objParent.ClickAction = eClickAction.None; //since GO button is handling actions dont allow selected index change fire postback

            foreach (DNNNode objNode in objParent.DNNNodes)
            {
                ProcessNodes(objNode);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="cmdGo">
          <declaration><![CDATA[protected DnnImageButton cmdGo;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="m_objControl">
          <declaration><![CDATA[private NavigationProvider m_objControl;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="m_strProviderName">
          <declaration><![CDATA[private string m_strProviderName = "DNNDropDownNavigationProvider";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="spActions">
          <declaration><![CDATA[protected HtmlGenericControl spActions;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="Control">
          <declaration><![CDATA[public NavigationProvider Control]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="55" sc="13" el="57" ec="14">admin\Containers\DropDownActions.ascx.cs</location>
            <body hash="4abe3388561acc0fd9c936ac63b607cf"><![CDATA[{
                return m_objControl;
            }]]></body>
          </codeblock>
        </property>
        <property name="ProviderName">
          <declaration><![CDATA[public string ProviderName]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="44" sc="13" el="46" ec="14">admin\Containers\DropDownActions.ascx.cs</location>
            <body hash="9a8570ab9a38d578a95e36137a4d0d07"><![CDATA[{
                return m_strProviderName;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="48" sc="13" el="49" ec="14">admin\Containers\DropDownActions.ascx.cs</location>
            <body hash="dcf329278ec483df0390d9bf53626976"><![CDATA[{
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="Icon">
      <declaration><![CDATA[public class Icon : SkinObjectBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public Icon()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="57" sc="9" el="99" ec="10">admin\Containers\Icon.ascx.cs</location>
            <body hash="18491fc86d3b829ba5d21526fb3d4b1c"><![CDATA[{
            base.OnLoad(e);
            try
            {
				//public attributes
                if (!String.IsNullOrEmpty(BorderWidth))
                {
                    imgIcon.BorderWidth = Unit.Parse(BorderWidth);
                }
                if (!String.IsNullOrEmpty(CssClass))
                {
                    imgIcon.CssClass = CssClass;
                }
                Visible = false;
                if ((ModuleControl != null) && (ModuleControl.ModuleContext.Configuration != null))
                {
                    if (!String.IsNullOrEmpty(ModuleControl.ModuleContext.Configuration.IconFile))
                    {
                        if (ModuleControl.ModuleContext.Configuration.IconFile.StartsWith("~/"))
                        {
                            imgIcon.ImageUrl = ModuleControl.ModuleContext.Configuration.IconFile;
                        }
                        else
                        {
                            if (Globals.IsAdminControl())
                            {
                                imgIcon.ImageUrl = ModuleControl.ModuleContext.Configuration.DesktopModule.FolderName + "/" + ModuleControl.ModuleContext.Configuration.IconFile;
                            }
                            else
                            {
                                imgIcon.ImageUrl = ModuleControl.ModuleContext.PortalSettings.HomeDirectory + ModuleControl.ModuleContext.Configuration.IconFile;
                            }
                        }
                        imgIcon.AlternateText = ModuleControl.ModuleContext.Configuration.ModuleTitle;
                        Visible = true;
                    }
                }
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="imgIcon">
          <declaration><![CDATA[protected Image imgIcon;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="BorderWidth">
          <declaration><![CDATA[public string BorderWidth]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="49" sc="37" el="49" ec="41">admin\Containers\Icon.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="49" sc="42" el="49" ec="46">admin\Containers\Icon.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="CssClass">
          <declaration><![CDATA[public string CssClass]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="50" sc="34" el="50" ec="38">admin\Containers\Icon.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="50" sc="39" el="50" ec="43">admin\Containers\Icon.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="LinkActions">
      <declaration><![CDATA[public class LinkActions : ActionBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[protected string _itemSeparator = "";]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="38" sc="9" el="38" ec="46">admin\Containers\LinkActions.ascx.cs</location>
            <body hash="37d588a303dd624e3d74dba4d9fef1fd"><![CDATA[protected string _itemSeparator = ""]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="LinkAction_Click">
          <declaration><![CDATA[private void LinkAction_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="125" sc="9" el="134" ec="10">admin\Containers\LinkActions.ascx.cs</location>
            <body hash="3260df3c09673daac0893774f75bd63f"><![CDATA[{
            try
            {
                ProcessAction(((LinkButton) sender).ID.Substring(3));
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="53" sc="9" el="113" ec="10">admin\Containers\LinkActions.ascx.cs</location>
            <body hash="4f58bd3e3db7e4938b9c8e137d832aa1"><![CDATA[{
            base.OnLoad(e);
            try
            {
                {
                    if (ActionRoot.Visible)
                    {
						//Is Root Menu visible?
                        if (Controls.Count > 0)
                        {
                            Controls.Clear();
                        }
                        var PreSpacer = new LiteralControl(ItemSeparator);
                        Controls.Add(PreSpacer);

                        //Add Menu Items
                        foreach (ModuleAction action in ActionRoot.Actions)
                        {
                            if (action.Title == "~")
                            {
								//not supported in this Action object
                            }
                            else
                            {
                                if (action.Visible)
                                {
                                    if ((ModuleControl.ModuleContext.EditMode && Globals.IsAdminControl() == false) ||
                                        (action.Secure != SecurityAccessLevel.Anonymous && action.Secure != SecurityAccessLevel.View))
                                    {
                                        var ModuleActionLink = new LinkButton();
                                        ModuleActionLink.Text = action.Title;
                                        ModuleActionLink.CssClass = "CommandButton";
                                        ModuleActionLink.ID = "lnk" + action.ID;

                                        ModuleActionLink.Click += LinkAction_Click;

                                        Controls.Add(ModuleActionLink);
                                        var Spacer = new LiteralControl(ItemSeparator);
                                        Controls.Add(Spacer);
                                    }
                                }
                            }
                        }
                    }
                }
				
                //Need to determine if this action list actually has any items.
                if (Controls.Count > 0)
                {
                    Visible = true;
                }
                else
                {
                    Visible = false;
                }
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnPreRender">
          <declaration><![CDATA[protected override void OnPreRender(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="116" sc="9" el="122" ec="10">admin\Containers\LinkActions.ascx.cs</location>
            <body hash="ea8771d264286c1f7d41343d47617466"><![CDATA[{
            base.OnPreRender(e);
            if (String.IsNullOrEmpty(_itemSeparator))
            {
                _itemSeparator = "&nbsp;&nbsp;";
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_itemSeparator">
          <declaration><![CDATA[protected string _itemSeparator = "";]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="ItemSeparator">
          <declaration><![CDATA[public string ItemSeparator]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="43" sc="13" el="45" ec="14">admin\Containers\LinkActions.ascx.cs</location>
            <body hash="70d46b671fbe54154c92e54fa65ff829"><![CDATA[{
                return _itemSeparator;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="47" sc="13" el="49" ec="14">admin\Containers\LinkActions.ascx.cs</location>
            <body hash="95497b1301446a20a661e420e8a71513"><![CDATA[{
                _itemSeparator = value;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="PrintModule">
      <declaration><![CDATA[public class PrintModule : ActionBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public PrintModule()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="IconAction_Click">
          <declaration><![CDATA[private void IconAction_Click(object sender, ImageClickEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="112" sc="9" el="121" ec="10">admin\Containers\PrintModule.ascx.cs</location>
            <body hash="76ad7a2d5e568a34aec47312fe1ca18e"><![CDATA[{
            try
            {
                ProcessAction(((ImageButton) sender).ID.Substring(3));
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="59" sc="9" el="109" ec="10">admin\Containers\PrintModule.ascx.cs</location>
            <body hash="f6726f3c5f6313f4b6de0383d4ecbaad"><![CDATA[{
            base.OnLoad(e);
            try
            {
                foreach (ModuleAction action in Actions)
                {
                    if (action.CommandName == ModuleActionType.PrintModule)
                    {
                        if (action.Visible)
                        {
                            if ((PortalSettings.UserMode == PortalSettings.Mode.Edit) || (action.Secure == SecurityAccessLevel.Anonymous || action.Secure == SecurityAccessLevel.View))
                            {
                                if (ModuleContext.Configuration.DisplayPrint)
                                {
                                    var ModuleActionIcon = new ImageButton();
                                    if (!String.IsNullOrEmpty(PrintIcon))
                                    {
                                        ModuleActionIcon.ImageUrl = ModuleContext.Configuration.ContainerPath.Substring(0, ModuleContext.Configuration.ContainerPath.LastIndexOf("/") + 1) + PrintIcon;
                                    }
                                    else
                                    {
                                        ModuleActionIcon.ImageUrl = "~/images/" + action.Icon;
                                    }
                                    ModuleActionIcon.ToolTip = action.Title;
                                    ModuleActionIcon.ID = "ico" + action.ID;
                                    ModuleActionIcon.CausesValidation = false;

                                    ModuleActionIcon.Click += IconAction_Click;

                                    Controls.Add(ModuleActionIcon);
                                }
                            }
                        }
                    }
                }
				
                //set visibility
                if (Controls.Count > 0)
                {
                    Visible = true;
                }
                else
                {
                    Visible = false;
                }
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="PrintIcon">
          <declaration><![CDATA[public string PrintIcon]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="52" sc="35" el="52" ec="39">admin\Containers\PrintModule.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="52" sc="40" el="52" ec="44">admin\Containers\PrintModule.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="Title">
      <declaration><![CDATA[public class Title : SkinObjectBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public Title()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="CanEditModule">
          <declaration><![CDATA[private bool CanEditModule()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="53" sc="9" el="60" ec="10">admin\Containers\Title.ascx.cs</location>
            <body hash="c3afe161e7f2143b19304da398b3d676"><![CDATA[{
            var canEdit = false;
            if (ModuleControl != null && ModuleControl.ModuleContext.ModuleId > Null.NullInteger)
            {
                canEdit = (PortalSettings.UserMode == PortalSettings.Mode.Edit) && TabPermissionController.CanAdminPage() && !Globals.IsAdminControl();
            }
            return canEdit;
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="63" sc="9" el="67" ec="10">admin\Containers\Title.ascx.cs</location>
            <body hash="e27166796c0f308bf51f289c4e9f5de7"><![CDATA[{
            base.OnInit(e);

            titleLabel.UpdateLabel += UpdateTitle;
        }]]></body>
          </codeblock>
        </method>
        <method name="OnPreRender">
          <declaration><![CDATA[protected override void OnPreRender(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="71" sc="9" el="99" ec="10">admin\Containers\Title.ascx.cs</location>
            <body hash="1b9c832111b121cad4c3d823e9e70c83"><![CDATA[{
            base.OnPreRender(e);

            //public attributes
            if (!String.IsNullOrEmpty(CssClass))
            {
                titleLabel.CssClass = CssClass;
            }
            string moduleTitle = Null.NullString;
            if (ModuleControl != null)
            {
                moduleTitle = Localization.LocalizeControlTitle(ModuleControl);
            }
            if (moduleTitle == Null.NullString)
            {
                moduleTitle = " ";
            }

            titleLabel.Text = moduleTitle;
            titleLabel.EditEnabled = false;
            titleToolbar.Visible = false;

            if (CanEditModule() && PortalSettings.InlineEditorEnabled)
            {
                titleLabel.EditEnabled = true;
                titleToolbar.Visible = true;
            }

        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateTitle">
          <declaration><![CDATA[private void UpdateTitle(object source, DNNLabelEditEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="102" sc="9" el="113" ec="10">admin\Containers\Title.ascx.cs</location>
            <body hash="81fddb7a3b9405d5814c84a97a805324"><![CDATA[{
            if (CanEditModule())
            {
                ModuleInfo moduleInfo = ModuleController.Instance.GetModule(ModuleControl.ModuleContext.ModuleId, ModuleControl.ModuleContext.TabId, false);

                var ps = new PortalSecurity();
                var mt = ps.InputFilter(e.Text, PortalSecurity.FilterFlag.NoScripting);
                moduleInfo.ModuleTitle = mt;

                ModuleController.Instance.UpdateModule(moduleInfo);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="MyFileName">
          <declaration><![CDATA[private const string MyFileName = "Title.ascx";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="tbCancel2">
          <declaration><![CDATA[protected DNNToolBarButton tbCancel2;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="tbEdit2">
          <declaration><![CDATA[protected DNNToolBarButton tbEdit2;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="tbSave2">
          <declaration><![CDATA[protected DNNToolBarButton tbSave2;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="titleLabel">
          <declaration><![CDATA[protected DNNLabelEdit titleLabel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="titleToolbar">
          <declaration><![CDATA[protected DNNToolBar titleToolbar;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="CssClass">
          <declaration><![CDATA[public string CssClass]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="48" sc="34" el="48" ec="38">admin\Containers\Title.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="48" sc="39" el="48" ec="43">admin\Containers\Title.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="Visibility">
      <declaration><![CDATA[public class Visibility : SkinObjectBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private int _animationFrames = 5;]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="56" sc="9" el="56" ec="42">admin\Containers\Visibility.ascx.cs</location>
            <body hash="31d5e9543fb8d455885e7d8eff3090a0"><![CDATA[private int _animationFrames = 5]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="cmdVisibility_Click">
          <declaration><![CDATA[private void cmdVisibility_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="264" sc="9" el="283" ec="10">admin\Containers\Visibility.ascx.cs</location>
            <body hash="ce679eb6512dd3f41632191e27e7f2c6"><![CDATA[{
            try
            {
                if (ModuleContent != null)
                {
                    if (ModuleContent.Visible)
                    {
                        ContentVisible = false;
                    }
                    else
                    {
                        ContentVisible = true;
                    }
                }
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="170" sc="9" el="239" ec="10">admin\Containers\Visibility.ascx.cs</location>
            <body hash="edc958376c9989581ff7fcaab452573d"><![CDATA[{
            base.OnLoad(e);

            cmdVisibility.Click += cmdVisibility_Click;

            try
            {
                if (!Page.IsPostBack)
                {
					//public attributes
                    if (!String.IsNullOrEmpty(BorderWidth))
                    {
                        cmdVisibility.BorderWidth = Unit.Parse(BorderWidth);
                    }
                    if (ModuleControl.ModuleContext.Configuration != null)
                    {
						//check if Personalization is allowed
                        if (ModuleControl.ModuleContext.Configuration.Visibility == VisibilityState.None)
                        {
                            cmdVisibility.Enabled = false;
                            cmdVisibility.Visible = false;
                        }
                        if (ModuleControl.ModuleContext.Configuration.Visibility == VisibilityState.Minimized)
                        {
							//if visibility is set to minimized, then the client needs to set the cookie for maximized only and delete the cookie for minimized,
                            //instead of the opposite.  We need to notify the client of this
                            ClientAPI.RegisterClientVariable(Page, "__dnn_" + ModuleControl.ModuleContext.ModuleId + ":defminimized", "true", true);
                        }
                        if (!Globals.IsAdminControl())
                        {
                            if (cmdVisibility.Enabled)
                            {
                                if (ModuleContent != null)
                                {
									//EnableMinMax now done in prerender
                                }
                                else
                                {
                                    Visible = false;
                                }
                            }
                        }
                        else
                        {
                            Visible = false;
                        }
                    }
                    else
                    {
                        Visible = false;
                    }
                }
                else
                {
                    //since we disabled viewstate on the cmdVisibility control we need to check to see if we need hide this on postbacks as well
                    if (ModuleControl.ModuleContext.Configuration != null)
                    {
                        if (ModuleControl.ModuleContext.Configuration.Visibility == VisibilityState.None)
                        {
                            cmdVisibility.Enabled = false;
                            cmdVisibility.Visible = false;
                        }
                    }
                }
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnPreRender">
          <declaration><![CDATA[protected override void OnPreRender(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="242" sc="9" el="261" ec="10">admin\Containers\Visibility.ascx.cs</location>
            <body hash="6ceb8177de395c94f5d74a464097a569"><![CDATA[{
            base.OnPreRender(e);
            if (ModuleContent != null && ModuleControl != null && !Globals.IsAdminControl())
            {
                switch (ModuleControl.ModuleContext.Configuration.Visibility)
                {
                    case VisibilityState.Maximized:
                    case VisibilityState.Minimized:
                        DNNClientAPI.EnableMinMax(cmdVisibility,
                                                  ModuleContent,
                                                  ModuleControl.ModuleContext.ModuleId,
                                                  ModuleControl.ModuleContext.Configuration.Visibility == VisibilityState.Minimized,
                                                  MinIconLoc,
                                                  MaxIconLoc,
                                                  DNNClientAPI.MinMaxPersistanceType.Cookie,
                                                  AnimationFrames);
                        break;
                }
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_animationFrames">
          <declaration><![CDATA[private int _animationFrames = 5;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_pnlModuleContent">
          <declaration><![CDATA[private Panel _pnlModuleContent;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdVisibility">
          <declaration><![CDATA[protected LinkButton cmdVisibility;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="imgVisibility">
          <declaration><![CDATA[protected Image imgVisibility;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="AnimationFrames">
          <declaration><![CDATA[public int AnimationFrames]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="117" sc="13" el="119" ec="14">admin\Containers\Visibility.ascx.cs</location>
            <body hash="4326b77e18ba11a084775086c3aa90c9"><![CDATA[{
                return _animationFrames;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="121" sc="13" el="123" ec="14">admin\Containers\Visibility.ascx.cs</location>
            <body hash="4226ec4e005616d47354e14e66f14a5c"><![CDATA[{
                _animationFrames = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="BorderWidth">
          <declaration><![CDATA[public string BorderWidth]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="126" sc="37" el="126" ec="41">admin\Containers\Visibility.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="126" sc="42" el="126" ec="46">admin\Containers\Visibility.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ContentVisible">
          <declaration><![CDATA[public bool ContentVisible]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="131" sc="13" el="143" ec="14">admin\Containers\Visibility.ascx.cs</location>
            <body hash="135a2fdad93f85bbf2ff62514ad43435"><![CDATA[{
                switch (ModuleControl.ModuleContext.Configuration.Visibility)
                {
                    case VisibilityState.Maximized:
                    case VisibilityState.Minimized:
                        return DNNClientAPI.MinMaxContentVisibile(cmdVisibility,
                                                                  ModuleControl.ModuleContext.ModuleId,
                                                                  ModuleControl.ModuleContext.Configuration.Visibility == VisibilityState.Minimized,
                                                                  DNNClientAPI.MinMaxPersistanceType.Cookie);
                    default:
                        return true;
                }
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="145" sc="13" el="151" ec="14">admin\Containers\Visibility.ascx.cs</location>
            <body hash="50566e08a2aa98814c2e5fb952d949ec"><![CDATA[{
                DNNClientAPI.MinMaxContentVisibile(cmdVisibility,
                                                   ModuleControl.ModuleContext.ModuleId,
                                                   ModuleControl.ModuleContext.Configuration.Visibility == VisibilityState.Minimized,
                                                   DNNClientAPI.MinMaxPersistanceType.Cookie,
                                                   value);
            }]]></body>
          </codeblock>
        </property>
        <property name="MaxIcon">
          <declaration><![CDATA[public string MaxIcon]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="159" sc="33" el="159" ec="37">admin\Containers\Visibility.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="159" sc="38" el="159" ec="42">admin\Containers\Visibility.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="MaxIconLoc">
          <declaration><![CDATA[private string MaxIconLoc]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="75" sc="13" el="82" ec="14">admin\Containers\Visibility.ascx.cs</location>
            <body hash="77340a56de61b13ab58d6478f426add3"><![CDATA[{
                if (!String.IsNullOrEmpty(MaxIcon))
                {
                    return ModulePath + MaxIcon;
                }
                
                return Globals.ApplicationPath + "/images/max.gif"; //is ~/ the same as ApplicationPath in all cases?
            }]]></body>
          </codeblock>
        </property>
        <property name="minIcon">
          <declaration><![CDATA[public string minIcon]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="156" sc="33" el="156" ec="37">admin\Containers\Visibility.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="156" sc="38" el="156" ec="42">admin\Containers\Visibility.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="MinIconLoc">
          <declaration><![CDATA[private string MinIconLoc]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="62" sc="13" el="69" ec="14">admin\Containers\Visibility.ascx.cs</location>
            <body hash="7a00b66b965ff6847e016f5e85cd16ea"><![CDATA[{
                if (!String.IsNullOrEmpty(minIcon))
                {
                    return ModulePath + minIcon;
                }
                
                return Globals.ApplicationPath + "/images/min.gif"; //is ~/ the same as ApplicationPath in all cases?
            }]]></body>
          </codeblock>
        </property>
        <property name="ModuleContent">
          <declaration><![CDATA[private Panel ModuleContent]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="88" sc="13" el="98" ec="14">admin\Containers\Visibility.ascx.cs</location>
            <body hash="f58a7eb1c082c67d1a757034b88ab1f6"><![CDATA[{
                if (_pnlModuleContent == null)
                {
                    Control objCtl = Parent.FindControl("ModuleContent");
                    if (objCtl != null)
                    {
                        _pnlModuleContent = (Panel) objCtl;
                    }
                }
                return _pnlModuleContent;
            }]]></body>
          </codeblock>
        </property>
        <property name="ModulePath">
          <declaration><![CDATA[private string ModulePath]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="104" sc="13" el="106" ec="14">admin\Containers\Visibility.ascx.cs</location>
            <body hash="d7031d5ecd389e46abbd5e4da74049d3"><![CDATA[{
                return ModuleControl.ModuleContext.Configuration.ContainerPath.Substring(0, ModuleControl.ModuleContext.Configuration.ContainerPath.LastIndexOf("/") + 1);
            }]]></body>
          </codeblock>
        </property>
        <property name="ResourceFile">
          <declaration><![CDATA[public string ResourceFile]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="164" sc="13" el="166" ec="14">admin\Containers\Visibility.ascx.cs</location>
            <body hash="d776350e126dc20ccffd8e0e28b56d3f"><![CDATA[{
                return Localization.GetResourceFile(this, "Visibility.ascx");
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="DotNetNuke.UI.Containers.Controls">
    <class name="Toggle">
      <declaration><![CDATA[public class Toggle : SkinObjectBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public Toggle()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="OnPreRender">
          <declaration><![CDATA[protected override void OnPreRender(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="84" sc="3" el="92" ec="4">admin\Containers\Toggle.ascx.cs</location>
            <body hash="a257cc0fbb0c2c59f08b1b0db77e59a9"><![CDATA[{
            JavaScript.RequestRegistration(CommonJs.jQuery);
            JavaScript.RequestRegistration(CommonJs.jQueryMigrate);

			var toggleScript = string.Format("<script type=\"text/javascript\">(function($){{$(\"#{0}\").find(\"a.toggleHandler\").click(function(e){{$(\"#{1}\").slideToggle();$(this).toggleClass('collapsed');e.preventDefault();}});}})(jQuery);</script>",
			                                 ClientID,
			                                 Target);
			Page.ClientScript.RegisterStartupScript(GetType(), ClientID, toggleScript);
		}]]></body>
          </codeblock>
        </method>
        <method name="Render">
          <declaration><![CDATA[protected override void Render(HtmlTextWriter writer)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="95" sc="3" el="108" ec="4">admin\Containers\Toggle.ascx.cs</location>
            <body hash="2305e56ac830481d7d4f8e61919bb0c3"><![CDATA[{
			writer.AddAttribute("id", ClientID);
			writer.AddAttribute("class", Class);
			writer.RenderBeginTag("h2");

			writer.AddAttribute("href", "#");
			writer.AddAttribute("class", "toggleHandler");
			writer.RenderBeginTag("a");

			RenderChildren(writer);

			writer.RenderEndTag();
			writer.RenderEndTag();
		}]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_target">
          <declaration><![CDATA[private string _target;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="Class">
          <declaration><![CDATA[public string Class]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="51" sc="25" el="51" ec="29">admin\Containers\Toggle.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="51" sc="30" el="51" ec="34">admin\Containers\Toggle.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Target">
          <declaration><![CDATA[public string Target]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="56" sc="7" el="72" ec="8">admin\Containers\Toggle.ascx.cs</location>
            <body hash="582267a701f075c67567e4503e34cadc"><![CDATA[{
				if(this.Parent == null || string.IsNullOrEmpty(_target))
				{
					return string.Empty;
				}

    			var targetControl = this.Parent.FindControl(_target);
				if(targetControl == null)
				{
					return string.Empty;
				}
				else
				{
					return targetControl.ClientID;
				}

    		}]]></body>
          </codeblock>
          <codeblock>
            <location sl="74" sc="4" el="76" ec="5">admin\Containers\Toggle.ascx.cs</location>
            <body hash="d1416dbeb50d65677aa8f908cc4cbdcf"><![CDATA[{
				_target = value;
			}]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="DotNetNuke.UI.ControlPanel">
    <class name="AddModule">
      <declaration><![CDATA[public class AddModule : UserControlBase, IDnnRibbonBarTool]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private bool _enabled = true;]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="67" sc="9" el="67" ec="38">admin\ControlPanel\AddModule.ascx.cs</location>
            <body hash="8c38b322a6bb9890a7f1d5e0e8ebf5a2"><![CDATA[private bool _enabled = true]]></body>
          </codeblock>
        </constructor>
        <constructor name=".cctor">
          <declaration><![CDATA[static AddModule()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="66" sc="3" el="66" ec="93">admin\ControlPanel\AddModule.ascx.cs</location>
            <body hash="62f4d59a0048b9c64f79f5f31f3e63f2"><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof (AddModule))]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="AddModulePermission">
          <declaration><![CDATA[private static ModulePermissionInfo AddModulePermission(ModuleInfo objModule, PermissionInfo permission, int roleId, int userId, bool allowAccess)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="413" sc="9" el="431" ec="10">admin\ControlPanel\AddModule.ascx.cs</location>
            <body hash="e1171324da0c06fa7b84494bd4fcd1da"><![CDATA[{
            var objModulePermission = new ModulePermissionInfo
            {
                ModuleID = objModule.ModuleID,
                PermissionID = permission.PermissionID,
                RoleID = roleId,
                UserID = userId,
                PermissionKey = permission.PermissionKey,
                AllowAccess = allowAccess
            };

            // add the permission to the collection
            if (!objModule.ModulePermissions.Contains(objModulePermission))
            {
                objModule.ModulePermissions.Add(objModulePermission);
            }

            return objModulePermission;
        }]]></body>
          </codeblock>
        </method>
        <method name="AddNewOrExisting_OnClick">
          <declaration><![CDATA[protected void AddNewOrExisting_OnClick(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="107" sc="3" el="109" ec="4">admin\ControlPanel\AddModule.ascx.cs</location>
            <body hash="d3d351fe58d062d795183cc0e0ebd08d"><![CDATA[{
			LoadAllLists();
		}]]></body>
          </codeblock>
        </method>
        <method name="CanAddModuleToPage">
          <declaration><![CDATA[public bool CanAddModuleToPage()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="871" sc="9" el="878" ec="10">admin\ControlPanel\AddModule.ascx.cs</location>
            <body hash="51ae5246ca0399759086f85a829fa22f"><![CDATA[{
            if (HttpContext.Current == null)
            {
                return false;
            }
            //If we are not in an edit page
            return (string.IsNullOrEmpty(HttpContext.Current.Request.QueryString["mid"])) && (string.IsNullOrEmpty(HttpContext.Current.Request.QueryString["ctl"]));
        }]]></body>
          </codeblock>
        </method>
        <method name="CategoryListSelectedIndexChanged">
          <declaration><![CDATA[private void CategoryListSelectedIndexChanged(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="206" sc="3" el="208" ec="4">admin\ControlPanel\AddModule.ascx.cs</location>
            <body hash="292f4bffe185821c4833c365178e591a"><![CDATA[{
			LoadModuleList();
		}]]></body>
          </codeblock>
        </method>
        <method name="CmdAddModuleClick">
          <declaration><![CDATA[protected void CmdAddModuleClick(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="211" sc="3" el="321" ec="4">admin\ControlPanel\AddModule.ascx.cs</location>
            <body hash="78e9abe73b0d6b2ef0dacfa5856ae535"><![CDATA[{
			if (TabPermissionController.CanAddContentToPage() && CanAddModuleToPage())
			{
				int permissionType;
				try
				{
					permissionType = int.Parse(VisibilityLst.SelectedValue);
				}
				catch (Exception exc)
				{
					Logger.Error(exc);

					permissionType = 0;
				}

				int position = -1;
				switch (PositionLst.SelectedValue)
				{
					case "TOP":
						position = 0;
						break;
					case "ABOVE":
						if (!string.IsNullOrEmpty(PaneModulesLst.SelectedValue))
						{
							try
							{
								position = int.Parse(PaneModulesLst.SelectedValue) - 1;
							}
							catch (Exception exc)
							{
								Logger.Error(exc);

								position = -1;
							}
						}
						else
						{
							position = 0;
						}
						break;
					case "BELOW":
						if (!string.IsNullOrEmpty(PaneModulesLst.SelectedValue))
						{
							try
							{
								position = int.Parse(PaneModulesLst.SelectedValue) + 1;
							}
							catch (Exception exc)
							{
								Logger.Error(exc);

								position = -1;
							}
						}
						else
						{
							position = -1;
						}
						break;
					case "BOTTOM":
						position = -1;
						break;
				}

				int moduleLstID;
				try
				{
					moduleLstID = int.Parse(ModuleLst.SelectedValue);
				}
				catch (Exception exc)
				{
					Logger.Error(exc);

					moduleLstID = -1;
				}

				if ((moduleLstID > -1))
				{
					if ((AddExistingModule.Checked))
					{
						int pageID;
						try
						{
							pageID = int.Parse(PageLst.SelectedValue);
						}
						catch (Exception exc)
						{
							Logger.Error(exc);

							pageID = -1;
						}

						if ((pageID > -1))
						{
							DoAddExistingModule(moduleLstID, pageID, PaneLst.SelectedValue, position, "", chkCopyModule.Checked);
						}
					}
					else
					{
						DoAddNewModule(Title.Text, moduleLstID, PaneLst.SelectedValue, position, permissionType, "");
					}
				}

				//set view mode to edit after add module.
				if (PortalSettings.UserMode != PortalSettings.Mode.Edit)
				{
					Personalization.SetProfile("Usability", "UserMode" + PortalSettings.PortalId, "EDIT");
				}
				Response.Redirect(Request.RawUrl, true);
			}
		}]]></body>
          </codeblock>
        </method>
        <method name="CmdConfirmAddModuleClick">
          <declaration><![CDATA[private void CmdConfirmAddModuleClick(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="195" sc="9" el="197" ec="10">admin\ControlPanel\AddModule.ascx.cs</location>
            <body hash="71a03a421b2cf22047b462cf38015537"><![CDATA[{
            CmdAddModuleClick(sender, e);
        }]]></body>
          </codeblock>
        </method>
        <method name="DoAddExistingModule">
          <declaration><![CDATA[private void DoAddExistingModule(int moduleId, int tabId, string paneName, int position, string align, bool cloneModule)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="434" sc="9" el="521" ec="10">admin\ControlPanel\AddModule.ascx.cs</location>
            <body hash="581d1cc7d1a2c4bc9b21a98ef9d05182"><![CDATA[{
            ModuleInfo moduleInfo = ModuleController.Instance.GetModule(moduleId, tabId, false);

            int userID = -1;
            if (Request.IsAuthenticated)
            {
                UserInfo user = UserController.Instance.GetCurrentUserInfo();
                if (((user != null)))
                {
                    userID = user.UserID;
                }
            }

            if ((moduleInfo != null))
            {
                // Is this from a site other than our own? (i.e., is the user requesting "module sharing"?)
                var remote = moduleInfo.PortalID != PortalSettings.Current.PortalId;
                if (remote)
                {
                    switch (moduleInfo.DesktopModule.Shareable)
                    {
                        case ModuleSharing.Unsupported:
                            // Should never happen since the module should not be listed in the first place.
                            throw new ApplicationException(string.Format("Module '{0}' does not support Shareable and should not be listed in Add Existing Module from a different source site",
                                                                         moduleInfo.DesktopModule.FriendlyName));
                        case ModuleSharing.Supported:
                            break;
                        default:
                        case ModuleSharing.Unknown:
                            break;
                    }
                }

                // clone the module object ( to avoid creating an object reference to the data cache )
                ModuleInfo newModule = moduleInfo.Clone();

                newModule.UniqueId = Guid.NewGuid(); // Cloned Module requires a different uniqueID

                newModule.TabID = PortalSettings.Current.ActiveTab.TabID;
                newModule.ModuleOrder = position;
                newModule.PaneName = paneName;
                newModule.Alignment = align;

                if ((cloneModule))
                {
                    newModule.ModuleID = Null.NullInteger;
                    //reset the module id
                    newModule.ModuleID = ModuleController.Instance.AddModule(newModule);

                    if (!string.IsNullOrEmpty(newModule.DesktopModule.BusinessControllerClass))
                    {
                        object objObject = Reflection.CreateObject(newModule.DesktopModule.BusinessControllerClass, newModule.DesktopModule.BusinessControllerClass);
                        if (objObject is IPortable)
                        {
                            string content = Convert.ToString(((IPortable)objObject).ExportModule(moduleId));
                            if (!string.IsNullOrEmpty(content))
                            {
                                ((IPortable)objObject).ImportModule(newModule.ModuleID, content, newModule.DesktopModule.Version, userID);
                            }
                        }
                    }
                }
                else
                {
                    ModuleController.Instance.AddModule(newModule);
                }

                if (remote)
                {
                    //Ensure the Portal Admin has View rights
                    var permissionController = new PermissionController();
                    ArrayList arrSystemModuleViewPermissions = permissionController.GetPermissionByCodeAndKey("SYSTEM_MODULE_DEFINITION", "VIEW");
                    AddModulePermission(newModule,
                                    (PermissionInfo)arrSystemModuleViewPermissions[0],
                                    PortalSettings.Current.AdministratorRoleId,
                                    Null.NullInteger,
                                    true);

                    //Set PortalID correctly
                    newModule.OwnerPortalID = newModule.PortalID;
                    newModule.PortalID = PortalSettings.Current.PortalId;
                    ModulePermissionController.SaveModulePermissions(newModule);
                }

                //Add Event Log
                EventLogController.Instance.AddLog(newModule, PortalSettings.Current, userID, "", EventLogController.EventLogType.MODULE_CREATED);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="DoAddNewModule">
          <declaration><![CDATA[private static void DoAddNewModule(string title, int desktopModuleId, string paneName, int position, int permissionType, string align)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="524" sc="9" el="588" ec="10">admin\ControlPanel\AddModule.ascx.cs</location>
            <body hash="5a97836052fba4b843907641c189838c"><![CDATA[{
            try
            {
                DesktopModuleInfo desktopModule;
                if (!DesktopModuleController.GetDesktopModules(PortalSettings.Current.PortalId).TryGetValue(desktopModuleId, out desktopModule))
                {
                    throw new ArgumentException("desktopModuleId");
                }
            }
            catch (Exception ex)
            {
                Exceptions.LogException(ex);
            }

            foreach (ModuleDefinitionInfo objModuleDefinition in
                ModuleDefinitionController.GetModuleDefinitionsByDesktopModuleID(desktopModuleId).Values)
            {
                var objModule = new ModuleInfo();
                objModule.Initialize(PortalSettings.Current.ActiveTab.PortalID);

                objModule.PortalID = PortalSettings.Current.ActiveTab.PortalID;
                objModule.TabID = PortalSettings.Current.ActiveTab.TabID;
                objModule.ModuleOrder = position;
                objModule.ModuleTitle = string.IsNullOrEmpty(title) ? objModuleDefinition.FriendlyName : title;
                objModule.PaneName = paneName;
                objModule.ModuleDefID = objModuleDefinition.ModuleDefID;
                if (objModuleDefinition.DefaultCacheTime > 0)
                {
                    objModule.CacheTime = objModuleDefinition.DefaultCacheTime;
                    if (PortalSettings.Current.DefaultModuleId > Null.NullInteger && PortalSettings.Current.DefaultTabId > Null.NullInteger)
                    {
                        ModuleInfo defaultModule = ModuleController.Instance.GetModule(PortalSettings.Current.DefaultModuleId, PortalSettings.Current.DefaultTabId, true);
                        if ((defaultModule != null))
                        {
                            objModule.CacheTime = defaultModule.CacheTime;
                        }
                    }
                }

                ModuleController.Instance.InitialModulePermission(objModule, objModule.TabID, permissionType);

                if (PortalSettings.Current.ContentLocalizationEnabled)
                {
                    Locale defaultLocale = LocaleController.Instance.GetDefaultLocale(PortalSettings.Current.PortalId);
                    //check whether original tab is exists, if true then set culture code to default language,
                    //otherwise set culture code to current.
                    if (TabController.Instance.GetTabByCulture(objModule.TabID, PortalSettings.Current.PortalId, defaultLocale) != null)
                    {
                        objModule.CultureCode = defaultLocale.Code;
                    }
                    else
                    {
                        objModule.CultureCode = PortalSettings.Current.CultureCode;
                    }
                }
                else
                {
                    objModule.CultureCode = Null.NullString;
                }
                objModule.AllTabs = false;
                objModule.Alignment = align;

                ModuleController.Instance.AddModule(objModule);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetCurrentPortalsGroup">
          <declaration><![CDATA[private IEnumerable<PortalInfo> GetCurrentPortalsGroup()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="591" sc="9" el="607" ec="10">admin\ControlPanel\AddModule.ascx.cs</location>
            <body hash="89ae70a5893835f6914bb7482d3ebd6f"><![CDATA[{
            var groups = PortalGroupController.Instance.GetPortalGroups().ToArray();

            var result = (from @group in groups
                          select PortalGroupController.Instance.GetPortalsByGroup(@group.PortalGroupId)
                              into portals
                              where portals.Any(x => x.PortalID == PortalSettings.Current.PortalId)
                              select portals.ToArray()).FirstOrDefault();

            // Are we in a group of one?
            if (result == null || result.Length == 0)
            {
                result = new[] { PortalController.Instance.GetPortal(PortalSettings.Current.PortalId) };
            }

            return result;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetIsPortable">
          <declaration><![CDATA[private static bool GetIsPortable(string moduleID, string tabID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="610" sc="9" el="632" ec="10">admin\ControlPanel\AddModule.ascx.cs</location>
            <body hash="5681b327794d2e156e06fd7eccbe50ea"><![CDATA[{
            bool isPortable = false;
            int parsedModuleID;
            int parsedTabID;

            bool validModuleID = int.TryParse(moduleID, out parsedModuleID);
            bool validTabID = int.TryParse(tabID, out parsedTabID);

            if ((validModuleID && validTabID))
            {
                ModuleInfo moduleInfo = ModuleController.Instance.GetModule(parsedModuleID, parsedTabID, false);
                if (((moduleInfo != null)))
                {
                    DesktopModuleInfo moduleDesktopInfo = moduleInfo.DesktopModule;
                    if (((moduleDesktopInfo != null)))
                    {
                        isPortable = moduleDesktopInfo.IsPortable;
                    }
                }
            }

            return isPortable;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetString">
          <declaration><![CDATA[protected string GetString(string key)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="635" sc="9" el="637" ec="10">admin\ControlPanel\AddModule.ascx.cs</location>
            <body hash="fdb9cfd70aff46a9da06e018de02d9c8"><![CDATA[{
            return Localization.GetString(key, LocalResourceFile);
        }]]></body>
          </codeblock>
        </method>
        <method name="LoadAllLists">
          <declaration><![CDATA[private void LoadAllLists()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="640" sc="3" el="649" ec="4">admin\ControlPanel\AddModule.ascx.cs</location>
            <body hash="8fc7e4e28e163b05d81f6a765a1c11dd"><![CDATA[{
		    LoadSiteList();
			LoadCategoryList();
			LoadPageList();
			LoadModuleList();
			LoadVisibilityList();
			LoadPaneList();
			LoadPositionList();
			LoadPaneModulesList();
		}]]></body>
          </codeblock>
        </method>
        <method name="LoadCategoryList">
          <declaration><![CDATA[private void LoadCategoryList()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="652" sc="9" el="664" ec="10">admin\ControlPanel\AddModule.ascx.cs</location>
            <body hash="53f8e76700592c8a1facc276be6a1b78"><![CDATA[{
            CategoryListPanel.Visible = !AddExistingModule.Checked;

            ITermController termController = Util.GetTermController();
            CategoryList.DataSource = termController.GetTermsByVocabulary("Module_Categories").OrderBy(t => t.Weight).Where(t => t.Name != "< None >").ToList();
            CategoryList.DataBind();
            //CategoryList.Items.Add(new ListItem(Localization.GetString("AllCategories", LocalResourceFile), "All"));
            CategoryList.AddItem(Localization.GetString("AllCategories", LocalResourceFile), "All");
            if (!IsPostBack)
            {
                CategoryList.Select("Common", false);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="LoadModuleList">
          <declaration><![CDATA[private void LoadModuleList()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="667" sc="9" el="694" ec="10">admin\ControlPanel\AddModule.ascx.cs</location>
            <body hash="084e6490efc9cff209b59f5d0dba41d4"><![CDATA[{
            if (AddExistingModule.Checked)
            {
                //Get list of modules for the selected tab
                if (!string.IsNullOrEmpty(PageLst.SelectedValue))
                {
                    var tabId = int.Parse(PageLst.SelectedValue);
                    if (tabId >= 0)
                    {
                        ModuleLst.BindTabModulesByTabID(tabId);
                    }
                    if ((ModuleLst.ItemCount > 0))
                    {
                        chkCopyModule.Visible = true;
                        SetCopyModuleMessage(GetIsPortable(ModuleLst.SelectedValue, PageLst.SelectedValue));
                    }
                }
            }
            else
            {
                ModuleLst.Filter = CategoryList.SelectedValue == "All"
                                        ? (kvp => true)
                                         : (Func<KeyValuePair<string, PortalDesktopModuleInfo>, bool>)(kvp => kvp.Value.DesktopModule.Category == CategoryList.SelectedValue);
                ModuleLst.BindAllPortalDesktopModules();
            }

            ModuleLst.Enabled = ModuleLst.ItemCount > 0;
        }]]></body>
          </codeblock>
        </method>
        <method name="LoadPageList">
          <declaration><![CDATA[private void LoadPageList()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="697" sc="3" el="725" ec="4">admin\ControlPanel\AddModule.ascx.cs</location>
            <body hash="3208cb7dff743e476f9e3d6ec65febc1"><![CDATA[{
			PageListPanel.Visible = AddExistingModule.Checked;
			TitlePanel.Enabled = !AddExistingModule.Checked;
			chkCopyModule.Visible = AddExistingModule.Checked;

			if ((AddExistingModule.Checked))
			{
				chkCopyModule.Text = Localization.GetString("CopyModuleDefault.Text", LocalResourceFile);
			}

	        var portalSettings = SelectedPortalSettings;

	        PageLst.Items.Clear();

            if (PageListPanel.Visible)
            {
                PageLst.DataValueField = "TabID";
				PageLst.DataTextField = "IndentedTabName";
                if(PortalSettings.PortalId == SelectedPortalSettings.PortalId)
                {
                    PageLst.DataSource = TabController.GetPortalTabs(portalSettings.PortalId, portalSettings.ActiveTab.TabID, true, string.Empty, true, false, false, false, true);
                }
                else
                {
                    PageLst.DataSource = TabController.GetPortalTabs(portalSettings.PortalId, Null.NullInteger, true, string.Empty, true, false, false, false, true);
                }
				PageLst.DataBind();
			}
		}]]></body>
          </codeblock>
        </method>
        <method name="LoadPaneList">
          <declaration><![CDATA[private void LoadPaneList()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="728" sc="9" el="736" ec="10">admin\ControlPanel\AddModule.ascx.cs</location>
            <body hash="dd939d8473c5fa024ac252a98d8d46a7"><![CDATA[{
            PaneLst.Items.Clear();
            PaneLst.DataSource = PortalSettings.Current.ActiveTab.Panes;
            PaneLst.DataBind();
            if ((PortalSettings.Current.ActiveTab.Panes.Contains(Globals.glbDefaultPane)))
            {
                PaneLst.SelectedValue = Globals.glbDefaultPane;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="LoadPaneModulesList">
          <declaration><![CDATA[private void LoadPaneModulesList()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="739" sc="9" el="790" ec="10">admin\ControlPanel\AddModule.ascx.cs</location>
            <body hash="782d4474ff8b6b79b41ae5ad2ffae286"><![CDATA[{
            var items = new Dictionary<string, string> { { string.Empty, string.Empty } };

            foreach (ModuleInfo m in PortalSettings.Current.ActiveTab.Modules)
            {
                //if user is allowed to view module and module is not deleted
                if (ModulePermissionController.CanViewModule(m) && !m.IsDeleted)
                {
                    //modules which are displayed on all tabs should not be displayed on the Admin or Super tabs
                    if (!m.AllTabs || !PortalSettings.Current.ActiveTab.IsSuperTab)
                    {
                        if (m.PaneName == PaneLst.SelectedValue)
                        {
                            int moduleOrder = m.ModuleOrder;

                            while (items.ContainsKey(moduleOrder.ToString()) || moduleOrder == 0)
                            {
                                moduleOrder++;
                            }
                            items.Add(moduleOrder.ToString(), m.ModuleTitle);
                        }
                    }
                }
            }

            PaneModulesLst.Enabled = true;
            PaneModulesLst.Items.Clear();
            PaneModulesLst.DataValueField = "key";
            PaneModulesLst.DataTextField = "value";
            PaneModulesLst.DataSource = items;
            PaneModulesLst.DataBind();

            if ((PaneModulesLst.Items.Count <= 1))
            {
                var listItem = PositionLst.FindItemByValue("ABOVE");
                if (((listItem != null)))
                {
                    PositionLst.Items.Remove(listItem);
                }
                listItem = PositionLst.FindItemByValue("BELOW");
                if (((listItem != null)))
                {
                    PositionLst.Items.Remove(listItem);
                }
                PaneModulesLst.Enabled = false;
            }

            if ((PositionLst.SelectedValue == "TOP" || PositionLst.SelectedValue == "BOTTOM"))
            {
                PaneModulesLst.Enabled = false;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="LoadPositionList">
          <declaration><![CDATA[private void LoadPositionList()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="793" sc="9" el="808" ec="10">admin\ControlPanel\AddModule.ascx.cs</location>
            <body hash="75cb782e51e4eabfa0805a47584929a1"><![CDATA[{
            var items = new Dictionary<string, string>
							{
								{"TOP", GetString("Top")},
								{"ABOVE", GetString("Above")},
								{"BELOW", GetString("Below")},
								{"BOTTOM", GetString("Bottom")}
							};

            PositionLst.Items.Clear();
            PositionLst.DataValueField = "key";
            PositionLst.DataTextField = "value";
            PositionLst.DataSource = items;
            PositionLst.DataBind();
            PositionLst.SelectedValue = "BOTTOM";
        }]]></body>
          </codeblock>
        </method>
        <method name="LoadSiteList">
          <declaration><![CDATA[private void LoadSiteList()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="811" sc="9" el="828" ec="10">admin\ControlPanel\AddModule.ascx.cs</location>
            <body hash="6f5f64a354cb418a44ae535592f44e38"><![CDATA[{
            // Is there more than one site in this group?
            var multipleSites = GetCurrentPortalsGroup().Count() > 1;

            SiteListPanel.Visible = multipleSites && AddExistingModule.Checked;

            if (SiteListPanel.Visible)
            {
                // Get a list of portals in this SiteGroup.
                var portals = PortalController.Instance.GetPortals().Cast<PortalInfo>().ToArray();

                SiteList.DataSource = portals.Select(
                    x => new {Value = x.PortalID, Name = x.PortalName, GroupID = x.PortalGroupID}).ToList();
                SiteList.DataTextField = "Name";
                SiteList.DataValueField = "Value";
                SiteList.DataBind();
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="LoadVisibilityList">
          <declaration><![CDATA[private void LoadVisibilityList()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="831" sc="3" el="843" ec="4">admin\ControlPanel\AddModule.ascx.cs</location>
            <body hash="659fb5904d8f8933450b2962590a4a16"><![CDATA[{
			VisibilityLst.Enabled = !AddExistingModule.Checked;
			if ((VisibilityLst.Enabled))
			{
				var items = new Dictionary<string, string> {{"0", GetString("PermissionView")}, {"1", GetString("PermissionEdit")}};

				VisibilityLst.Items.Clear();
				VisibilityLst.DataValueField = "key";
				VisibilityLst.DataTextField = "value";
				VisibilityLst.DataSource = items;
				VisibilityLst.DataBind();
			}
		}]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="128" sc="3" el="192" ec="4">admin\ControlPanel\AddModule.ascx.cs</location>
            <body hash="0c3d08fbe37d705c6bc78122628b9184"><![CDATA[{
			base.OnLoad(e);

            // Is there more than one site in this group?
            var multipleSites = GetCurrentPortalsGroup().Count() > 1;
            ClientAPI.RegisterClientVariable(Page, "moduleSharing", multipleSites.ToString().ToLowerInvariant(), true);

            ServicesFramework.Instance.RequestAjaxAntiForgerySupport();

            cmdAddModule.Click += CmdAddModuleClick;
			AddNewModule.CheckedChanged += AddNewOrExisting_OnClick;
			AddExistingModule.CheckedChanged += AddNewOrExisting_OnClick;
            SiteList.SelectedIndexChanged += SiteList_SelectedIndexChanged;
			CategoryList.SelectedIndexChanged += CategoryListSelectedIndexChanged;
			PageLst.SelectedIndexChanged += PageLstSelectedIndexChanged;
			PaneLst.SelectedIndexChanged += PaneLstSelectedIndexChanged;
			PositionLst.SelectedIndexChanged += PositionLstSelectedIndexChanged;

            try
			{
				if ((Visible))
				{
					cmdAddModule.Enabled = Enabled;
					AddExistingModule.Enabled = Enabled;
					AddNewModule.Enabled = Enabled;
					Title.Enabled = Enabled;
					PageLst.Enabled = Enabled;
					ModuleLst.Enabled = Enabled;
					VisibilityLst.Enabled = Enabled;
					PaneLst.Enabled = Enabled;
					PositionLst.Enabled = Enabled;
					PaneModulesLst.Enabled = Enabled;

					UserInfo objUser = UserController.Instance.GetCurrentUserInfo();
					if ((objUser != null))
					{
						if (objUser.IsSuperUser)
						{
                            var objModule = ModuleController.Instance.GetModuleByDefinition(-1, "Extensions");
							if (objModule != null)
							{
								var strURL = Globals.NavigateURL(objModule.TabID, true);
								hlMoreExtensions.NavigateUrl = strURL + "#moreExtensions";
							}
							else
							{
								hlMoreExtensions.Enabled = false;
							}
							hlMoreExtensions.Text = GetString("hlMoreExtensions");
							hlMoreExtensions.Visible = true;
						}
					}
				}

				if ((!IsPostBack && Visible && Enabled))
				{
				    AddNewModule.Checked = true;
					LoadAllLists();
				}
			}
			catch (Exception exc)
			{
				Exceptions.ProcessModuleLoadException(this, exc);
			}
		}]]></body>
          </codeblock>
        </method>
        <method name="PageLstSelectedIndexChanged">
          <declaration><![CDATA[protected void PageLstSelectedIndexChanged(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="118" sc="3" el="120" ec="4">admin\ControlPanel\AddModule.ascx.cs</location>
            <body hash="292f4bffe185821c4833c365178e591a"><![CDATA[{
			LoadModuleList();
		}]]></body>
          </codeblock>
        </method>
        <method name="PaneLstSelectedIndexChanged">
          <declaration><![CDATA[protected void PaneLstSelectedIndexChanged(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="112" sc="3" el="115" ec="4">admin\ControlPanel\AddModule.ascx.cs</location>
            <body hash="50b02ba8e1bbd3c670045f4771ae58b4"><![CDATA[{
			LoadPositionList();
			LoadPaneModulesList();
		}]]></body>
          </codeblock>
        </method>
        <method name="PositionLstSelectedIndexChanged">
          <declaration><![CDATA[protected void PositionLstSelectedIndexChanged(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="123" sc="3" el="125" ec="4">admin\ControlPanel\AddModule.ascx.cs</location>
            <body hash="03670b4c9377757a3dd87e4f69ad6305"><![CDATA[{
			PaneModulesLst.Enabled = PositionLst.SelectedValue == "ABOVE" || PositionLst.SelectedValue == "BELOW";
		}]]></body>
          </codeblock>
        </method>
        <method name="SetCopyModuleMessage">
          <declaration><![CDATA[private void SetCopyModuleMessage(bool isPortable)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="854" sc="9" el="865" ec="10">admin\ControlPanel\AddModule.ascx.cs</location>
            <body hash="aa6497dac6f414c88ff625fa6036a145"><![CDATA[{
            if ((isPortable))
            {
                chkCopyModule.Text = Localization.GetString("CopyModuleWcontent", LocalResourceFile);
                chkCopyModule.ToolTip = Localization.GetString("CopyModuleWcontent.ToolTip", LocalResourceFile);
            }
            else
            {
                chkCopyModule.Text = Localization.GetString("CopyModuleWOcontent", LocalResourceFile);
                chkCopyModule.ToolTip = Localization.GetString("CopyModuleWOcontent.ToolTip", LocalResourceFile);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="SiteList_SelectedIndexChanged">
          <declaration><![CDATA[private void SiteList_SelectedIndexChanged(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="200" sc="9" el="203" ec="10">admin\ControlPanel\AddModule.ascx.cs</location>
            <body hash="0d5eb10433731285f1472851fb7df662"><![CDATA[{
            LoadModuleList();
            LoadPageList();
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_enabled">
          <declaration><![CDATA[private bool _enabled = true;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="AddExistingModule">
          <declaration><![CDATA[protected RadioButton AddExistingModule;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="AddNewModule">
          <declaration><![CDATA[protected RadioButton AddNewModule;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="CategoryList">
          <declaration><![CDATA[protected DnnComboBox CategoryList;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="CategoryListLbl">
          <declaration><![CDATA[protected Label CategoryListLbl;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="CategoryListPanel">
          <declaration><![CDATA[protected Panel CategoryListPanel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkCopyModule">
          <declaration><![CDATA[protected CheckBox chkCopyModule;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdAddModule">
          <declaration><![CDATA[protected LinkButton cmdAddModule;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="hlMoreExtensions">
          <declaration><![CDATA[protected HyperLink hlMoreExtensions;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Label1">
          <declaration><![CDATA[protected Label Label1;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Label2">
          <declaration><![CDATA[protected Label Label2;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Logger">
          <declaration><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof(AddModule));]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ModuleLst">
          <declaration><![CDATA[protected DnnModuleComboBox ModuleLst;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ModuleLstLbl">
          <declaration><![CDATA[protected Label ModuleLstLbl;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="PageListLbl">
          <declaration><![CDATA[protected Label PageListLbl;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="PageListPanel">
          <declaration><![CDATA[protected Panel PageListPanel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="PageLst">
          <declaration><![CDATA[protected DnnComboBox PageLst;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="PaneLst">
          <declaration><![CDATA[protected DnnComboBox PaneLst;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="PaneLstLbl">
          <declaration><![CDATA[protected Label PaneLstLbl;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="PaneModulesLst">
          <declaration><![CDATA[protected DnnComboBox PaneModulesLst;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="PaneModulesLstLbl">
          <declaration><![CDATA[protected Label PaneModulesLstLbl;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="PositionLst">
          <declaration><![CDATA[protected DnnComboBox PositionLst;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="PositionLstLbl">
          <declaration><![CDATA[protected Label PositionLstLbl;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="SiteLbl">
          <declaration><![CDATA[protected Label SiteLbl;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="SiteList">
          <declaration><![CDATA[protected DnnComboBox SiteList;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="SiteListPanel">
          <declaration><![CDATA[protected Panel SiteListPanel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Title">
          <declaration><![CDATA[protected TextBox Title;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="TitleLbl">
          <declaration><![CDATA[protected Label TitleLbl;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="TitlePanel">
          <declaration><![CDATA[protected Panel TitlePanel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="UpdateAddModule">
          <declaration><![CDATA[protected UpdatePanel UpdateAddModule;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="VisibilityLst">
          <declaration><![CDATA[protected DnnComboBox VisibilityLst;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="VisibilityLstLbl">
          <declaration><![CDATA[protected Label VisibilityLstLbl;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="Enabled">
          <declaration><![CDATA[public bool Enabled]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="342" sc="4" el="344" ec="5">admin\ControlPanel\AddModule.ascx.cs</location>
            <body hash="948a964841b3f41716ec24f5f68a15eb"><![CDATA[{
				return _enabled && CanAddModuleToPage();
			}]]></body>
          </codeblock>
          <codeblock>
            <location sl="346" sc="4" el="348" ec="5">admin\ControlPanel\AddModule.ascx.cs</location>
            <body hash="a89017f54e31ee38e56fba273e3b59ce"><![CDATA[{
				_enabled = value;
			}]]></body>
          </codeblock>
        </property>
        <property name="LocalResourceFile">
          <declaration><![CDATA[private string LocalResourceFile]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="848" sc="13" el="850" ec="14">admin\ControlPanel\AddModule.ascx.cs</location>
            <body hash="a61fe5ae6a6c71e43aff88d04c647666"><![CDATA[{
                return string.Format("{0}/{1}/{2}.ascx.resx", TemplateSourceDirectory, Localization.LocalResourceDirectory, GetType().BaseType.Name);
            }]]></body>
          </codeblock>
        </property>
        <property name="SelectedModule">
          <declaration><![CDATA[protected DesktopModuleInfo SelectedModule]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="367" sc="10" el="405" ec="11">admin\ControlPanel\AddModule.ascx.cs</location>
            <body hash="94973f6597ac4cc89fd06e84d030430f"><![CDATA[{
                if (AddExistingModule.Checked)
                {
                    var tabId = -1;
                    if (!string.IsNullOrEmpty(PageLst.SelectedValue))
                        tabId = int.Parse(PageLst.SelectedValue);

                    if (tabId < 0)
                        tabId = PortalSettings.Current.ActiveTab.TabID;

                    if (!string.IsNullOrEmpty(ModuleLst.SelectedValue))
                    {
                        var moduleId = int.Parse(ModuleLst.SelectedValue);
                        if (moduleId >= 0)
                        {
                            return ModuleController.Instance.GetModule(moduleId, tabId, false).DesktopModule;
                        }
                    }
                }
                else
                {
                    var portalId = -1;

                    if (SiteListPanel.Visible) portalId = int.Parse(SiteList.SelectedValue);

                    if (portalId < 0) portalId = PortalSettings.Current.PortalId;

                    if (!string.IsNullOrEmpty(ModuleLst.SelectedValue))
                    {
                        var moduleId = int.Parse(ModuleLst.SelectedValue);
                        if (moduleId >= 0)
                        {
                            return DesktopModuleController.GetDesktopModule(moduleId, portalId);
                        }
                    }
                }

                return null;
	        }]]></body>
          </codeblock>
        </property>
        <property name="SelectedPortalSettings">
          <declaration><![CDATA[private PortalSettings SelectedPortalSettings]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="77" sc="13" el="100" ec="14">admin\ControlPanel\AddModule.ascx.cs</location>
            <body hash="2b888b6079e26b68b57c7b460469fd06"><![CDATA[{
                var portalSettings = PortalSettings.Current;

                try
                {
                    if (SiteListPanel.Visible && SiteList.SelectedItem != null)
                    {
                        if (!string.IsNullOrEmpty(SiteList.SelectedItem.Value))
                        {
                            var selectedPortalId = int.Parse(SiteList.SelectedItem.Value);
                            if (PortalSettings.PortalId != selectedPortalId)
                            {
                                portalSettings = new PortalSettings(int.Parse(SiteList.SelectedItem.Value));
                            }
                        }
                    }
                }
                catch (Exception)
                {
                    portalSettings = PortalSettings.Current;
                }

                return portalSettings;
            }]]></body>
          </codeblock>
        </property>
        <property name="ToolName">
          <declaration><![CDATA[public string ToolName]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="354" sc="4" el="356" ec="5">admin\ControlPanel\AddModule.ascx.cs</location>
            <body hash="25d0d943091c5e1a4ac3425df166b4bd"><![CDATA[{
				return "QuickAddModule";
			}]]></body>
          </codeblock>
          <codeblock>
            <location sl="358" sc="4" el="359" ec="67">admin\ControlPanel\AddModule.ascx.cs</location>
            <body hash="a60e09c9c0a16e3f8956940a5d55efbc"><![CDATA[{
				throw new NotSupportedException("Set ToolName not supported");]]></body>
          </codeblock>
        </property>
        <property name="Visible">
          <declaration><![CDATA[public override bool Visible]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="330" sc="4" el="332" ec="5">admin\ControlPanel\AddModule.ascx.cs</location>
            <body hash="53e712cdfbc61a90539e6a9780bd04b9"><![CDATA[{
				return base.Visible && TabPermissionController.CanAddContentToPage();
			}]]></body>
          </codeblock>
          <codeblock>
            <location sl="334" sc="4" el="336" ec="5">admin\ControlPanel\AddModule.ascx.cs</location>
            <body hash="816238808b008019fa832830e6bf87ac"><![CDATA[{
				base.Visible = value;
			}]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="AddPage">
      <declaration><![CDATA[public class AddPage : UserControl, IDnnRibbonBarTool]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public AddPage()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="CmdAddPageClick">
          <declaration><![CDATA[protected void CmdAddPageClick(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="82" sc="9" el="126" ec="10">admin\ControlPanel\AddPage.ascx.cs</location>
            <body hash="2afdb92114ec8b29af4c0e71cefd5753"><![CDATA[{
            int selectedTabID = Int32.Parse(PageLst.SelectedValue);
            TabInfo selectedTab = TabController.Instance.GetTab(selectedTabID, PortalSettings.ActiveTab.PortalID, false);
            var tabLocation = (TabRelativeLocation) Enum.Parse(typeof (TabRelativeLocation), LocationLst.SelectedValue);
            TabInfo newTab = RibbonBarManager.InitTabInfoObject(selectedTab, tabLocation);

            newTab.TabName = Name.Text;
            newTab.IsVisible = IncludeInMenu.Checked;

            string errMsg = string.Empty;
            try
            {
				RibbonBarManager.SaveTabInfoObject(newTab, selectedTab, tabLocation, TemplateLst.SelectedValue);
            }
            catch (DotNetNukeException ex)
            {
                Exceptions.LogException(ex);
                errMsg = (ex.ErrorCode != DotNetNukeErrorCode.NotSet) ? GetString("Err." + ex.ErrorCode) : ex.Message;
            }
            catch (Exception ex)
            {
                Exceptions.LogException(ex);
                errMsg = ex.Message;
            }

            //Clear the Tab's Cached modules
            DataCache.ClearModuleCache(PortalSettings.ActiveTab.TabID);

            //Update Cached Tabs as TabPath may be needed before cache is cleared
            TabInfo tempTab;
            if (TabController.Instance.GetTabsByPortal(PortalSettings.ActiveTab.PortalID).TryGetValue(newTab.TabID, out tempTab))
            {
                tempTab.TabPath = newTab.TabPath;
            }

            if ((string.IsNullOrEmpty(errMsg)))
            {
                Response.Redirect(Globals.NavigateURL(newTab.TabID));
            }
            else
            {
                errMsg = string.Format("<p>{0}</p><p>{1}</p>", GetString("Err.Header"), errMsg);
                Web.UI.Utilities.RegisterAlertOnPageLoad(this, new MessageWindowParameters(errMsg) { Title = GetString("Err.Title")});
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetString">
          <declaration><![CDATA[private string GetString(string key)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="251" sc="9" el="253" ec="10">admin\ControlPanel\AddPage.ascx.cs</location>
            <body hash="fdb9cfd70aff46a9da06e018de02d9c8"><![CDATA[{
            return Localization.GetString(key, LocalResourceFile);
        }]]></body>
          </codeblock>
        </method>
        <method name="LoadAllLists">
          <declaration><![CDATA[private void LoadAllLists()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="191" sc="9" el="195" ec="10">admin\ControlPanel\AddPage.ascx.cs</location>
            <body hash="d2bf7a722ffdfda2c2d320605f028b43"><![CDATA[{
            LoadLocationList();
            LoadTemplateList();
            LoadPageList();
        }]]></body>
          </codeblock>
        </method>
        <method name="LoadLocationList">
          <declaration><![CDATA[private void LoadLocationList()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="218" sc="9" el="231" ec="10">admin\ControlPanel\AddPage.ascx.cs</location>
            <body hash="6fe697a9175d97ae2c79c76ec1318879"><![CDATA[{
            LocationLst.ClearSelection();
            LocationLst.Items.Clear();

            //LocationLst.Items.Add(new ListItem(GetString("Before"), "BEFORE"));
            //LocationLst.Items.Add(new ListItem(GetString("After"), "AFTER"));
            //LocationLst.Items.Add(new ListItem(GetString("Child"), "CHILD"));

            LocationLst.AddItem(GetString("Before"), "BEFORE");
            LocationLst.AddItem(GetString("After"), "AFTER");
            LocationLst.AddItem(GetString("Child"), "CHILD");

            LocationLst.SelectedIndex = (!PortalSecurity.IsInRole("Administrators")) ? 2 : 1;
        }]]></body>
          </codeblock>
        </method>
        <method name="LoadPageList">
          <declaration><![CDATA[private void LoadPageList()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="234" sc="9" el="248" ec="10">admin\ControlPanel\AddPage.ascx.cs</location>
            <body hash="801903983bf2a33d53c72da4b9897e1d"><![CDATA[{
            PageLst.ClearSelection();
            PageLst.Items.Clear();

            PageLst.DataTextField = "IndentedTabName";
            PageLst.DataValueField = "TabID";
            PageLst.DataSource = RibbonBarManager.GetPagesList();
            PageLst.DataBind();

            var item = PageLst.FindItemByValue(PortalSettings.ActiveTab.TabID.ToString());
            if (((item != null)))
            {
                item.Selected = true;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="LoadTemplateList">
          <declaration><![CDATA[private void LoadTemplateList()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="198" sc="9" el="215" ec="10">admin\ControlPanel\AddPage.ascx.cs</location>
            <body hash="b670278d5977b5278408c2e0d81c1445"><![CDATA[{
            TemplateLst.ClearSelection();
            TemplateLst.Items.Clear();

            //Get Templates Folder
            ArrayList templateFiles = Globals.GetFileList(PortalSettings.PortalId, "page.template", false, "Templates/");
            foreach (FileItem dnnFile in templateFiles)
            {
                var item = new DnnComboBoxItem(dnnFile.Text.Replace(".page.template", ""), dnnFile.Value);
                TemplateLst.Items.Add(item);
                if (item.Text == "Default")
                {
                    item.Selected = true;
                }
            }

            TemplateLst.InsertItem(0, GetString("NoTemplate"), "");
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="51" sc="9" el="79" ec="10">admin\ControlPanel\AddPage.ascx.cs</location>
            <body hash="040a0d56e9180e2a8cfc92301767dbd1"><![CDATA[{
            base.OnLoad(e);

            cmdAddPage.Click += CmdAddPageClick;

            try
            {
                if (PortalSettings.Pages < PortalSettings.PageQuota || UserController.Instance.GetCurrentUserInfo().IsSuperUser || PortalSettings.PageQuota == 0)
                {
                    cmdAddPage.Enabled = true;
                }
                else
                {
                    cmdAddPage.Enabled = false;
                    cmdAddPage.ToolTip = Localization.GetString("ExceededQuota", LocalResourceFile);
                }
                if (!IsPostBack)
                {
                    if ((Visible))
                    {
                        LoadAllLists();
                    }
                }
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_newTabObject">
          <declaration><![CDATA[private TabInfo _newTabObject;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdAddPage">
          <declaration><![CDATA[protected LinkButton cmdAddPage;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="IncludeInMenu">
          <declaration><![CDATA[protected CheckBox IncludeInMenu;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="LocationLst">
          <declaration><![CDATA[protected DnnComboBox LocationLst;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Name">
          <declaration><![CDATA[protected TextBox Name;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="NameLbl">
          <declaration><![CDATA[protected Label NameLbl;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="PageLst">
          <declaration><![CDATA[protected DnnComboBox PageLst;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="TemplateLst">
          <declaration><![CDATA[protected DnnComboBox TemplateLst;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="LocalResourceFile">
          <declaration><![CDATA[private string LocalResourceFile]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="177" sc="13" el="179" ec="14">admin\ControlPanel\AddPage.ascx.cs</location>
            <body hash="a61fe5ae6a6c71e43aff88d04c647666"><![CDATA[{
                return string.Format("{0}/{1}/{2}.ascx.resx", TemplateSourceDirectory, Localization.LocalResourceDirectory, GetType().BaseType.Name);
            }]]></body>
          </codeblock>
        </property>
        <property name="NewTabObject">
          <declaration><![CDATA[protected TabInfo NewTabObject]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="165" sc="13" el="171" ec="14">admin\ControlPanel\AddPage.ascx.cs</location>
            <body hash="afeb279350b5e6f769a555e9b54e05e5"><![CDATA[{
                if (((_newTabObject == null)))
                {
                    _newTabObject = RibbonBarManager.InitTabInfoObject(PortalSettings.ActiveTab);
                }
                return _newTabObject;
            }]]></body>
          </codeblock>
        </property>
        <property name="PortalSettings">
          <declaration><![CDATA[private static PortalSettings PortalSettings]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="185" sc="13" el="187" ec="14">admin\ControlPanel\AddPage.ascx.cs</location>
            <body hash="de88f44ddad615520ed6ac528455cb0e"><![CDATA[{
                return PortalSettings.Current;
            }]]></body>
          </codeblock>
        </property>
        <property name="ToolName">
          <declaration><![CDATA[public string ToolName]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="147" sc="13" el="149" ec="14">admin\ControlPanel\AddPage.ascx.cs</location>
            <body hash="a0cd1c5470d651ec1d6306bf89ab81d8"><![CDATA[{
                return "QuickAddPage";
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="151" sc="13" el="152" ec="79">admin\ControlPanel\AddPage.ascx.cs</location>
            <body hash="755076bde14d40545acdcf766db94b6f"><![CDATA[{
                throw new NotSupportedException("Set ToolName not supported");]]></body>
          </codeblock>
        </property>
        <property name="Visible">
          <declaration><![CDATA[public override bool Visible]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="135" sc="13" el="137" ec="14">admin\ControlPanel\AddPage.ascx.cs</location>
            <body hash="49d547b44ea15e5bbbbf5628206d67f9"><![CDATA[{
                return base.Visible && TabPermissionController.CanAddPage();
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="139" sc="13" el="141" ec="14">admin\ControlPanel\AddPage.ascx.cs</location>
            <body hash="607b1334eefa383f12b217e98f4e49e3"><![CDATA[{
                base.Visible = value;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="SwitchSite">
      <declaration><![CDATA[public class SwitchSite : UserControl, IDnnRibbonBarTool]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public SwitchSite()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="CmdSwitchClick">
          <declaration><![CDATA[protected void CmdSwitchClick(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="65" sc="9" el="87" ec="10">admin\ControlPanel\SwitchSite.ascx.cs</location>
            <body hash="ad598a2282788fba2ff5e581a6dc80cc"><![CDATA[{
            try
            {
                if ((!string.IsNullOrEmpty(SitesLst.SelectedValue)))
                {
                    int selectedPortalID = int.Parse(SitesLst.SelectedValue);
                    var portalAliases = PortalAliasController.Instance.GetPortalAliasesByPortalId(selectedPortalID).ToList();

                    if ((portalAliases.Count > 0 && (portalAliases[0] != null)))
                    {
                        Response.Redirect(Globals.AddHTTP(((PortalAliasInfo) portalAliases[0]).HTTPAlias));
                    }
                }
            }
            catch(ThreadAbortException)
            {
              //Do nothing we are not logging ThreadAbortxceptions caused by redirects      
            }
            catch (Exception ex)
            {
                Exceptions.LogException(ex);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="LoadPortalsList">
          <declaration><![CDATA[private void LoadPortalsList()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="126" sc="9" el="139" ec="10">admin\ControlPanel\SwitchSite.ascx.cs</location>
            <body hash="ab6a59a5ffad5a6dd0f0d5e019232d8a"><![CDATA[{
            var portals = PortalController.Instance.GetPortals();

            SitesLst.ClearSelection();
            SitesLst.Items.Clear();

            SitesLst.DataSource = portals;
            SitesLst.DataTextField = "PortalName";
            SitesLst.DataValueField = "PortalID";
            SitesLst.DataBind();

            //SitesLst.Items.Insert(0, new ListItem(string.Empty));
            SitesLst.InsertItem(0, string.Empty, string.Empty);
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="46" sc="9" el="62" ec="10">admin\ControlPanel\SwitchSite.ascx.cs</location>
            <body hash="79f8fcd4632c50dee6c07360ab17dfb2"><![CDATA[{
            base.OnLoad(e);

            cmdSwitch.Click += CmdSwitchClick;

            try
            {
                if (Visible && !IsPostBack)
                {
                    LoadPortalsList();
                }
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="cmdSwitch">
          <declaration><![CDATA[protected LinkButton cmdSwitch;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="SitesLst">
          <declaration><![CDATA[protected DnnComboBox SitesLst;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="ToolName">
          <declaration><![CDATA[public string ToolName]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="112" sc="13" el="114" ec="14">admin\ControlPanel\SwitchSite.ascx.cs</location>
            <body hash="de3cdcfbec8bae6e42e26cb15002d453"><![CDATA[{
                return "QuickSwitchSite";
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="116" sc="13" el="117" ec="79">admin\ControlPanel\SwitchSite.ascx.cs</location>
            <body hash="755076bde14d40545acdcf766db94b6f"><![CDATA[{
                throw new NotSupportedException("Set ToolName not supported");]]></body>
          </codeblock>
        </property>
        <property name="Visible">
          <declaration><![CDATA[public override bool Visible]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="96" sc="13" el="102" ec="14">admin\ControlPanel\SwitchSite.ascx.cs</location>
            <body hash="abcc680af2dafa6a56c2beed9cab558e"><![CDATA[{
                if ((PortalSettings.Current.UserId == Null.NullInteger))
                {
                    return false;
                }
                return PortalSettings.Current.UserInfo.IsSuperUser && base.Visible;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="104" sc="13" el="106" ec="14">admin\ControlPanel\SwitchSite.ascx.cs</location>
            <body hash="607b1334eefa383f12b217e98f4e49e3"><![CDATA[{
                base.Visible = value;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="UpdatePage">
      <declaration><![CDATA[public class UpdatePage : UserControl, IDnnRibbonBarTool]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public UpdatePage()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="CmdUpdateClick">
          <declaration><![CDATA[protected void CmdUpdateClick(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="78" sc="9" el="138" ec="10">admin\ControlPanel\UpdatePage.ascx.cs</location>
            <body hash="ba437fae4e88b2421fa841a312c07363"><![CDATA[{
            if ((TabPermissionController.CanManagePage()))
            {
                TabInfo selectedTab = null;
                if ((!string.IsNullOrEmpty(PageLst.SelectedValue)))
                {
                    int selectedTabID = Int32.Parse(PageLst.SelectedValue);
                    selectedTab = TabController.Instance.GetTab(selectedTabID, PortalSettings.ActiveTab.PortalID, false);
                }

                TabRelativeLocation tabLocation = TabRelativeLocation.NOTSET;
                if ((!string.IsNullOrEmpty(LocationLst.SelectedValue)))
                {
                    tabLocation = (TabRelativeLocation) Enum.Parse(typeof (TabRelativeLocation), LocationLst.SelectedValue);
                }

                TabInfo tab = CurrentTab;

                tab.TabName = Name.Text;
                tab.IsVisible = IncludeInMenu.Checked;
                tab.DisableLink = IsDisabled.Checked;
                tab.IsSecure = IsSecure.Checked;
                tab.SkinSrc = SkinLst.SelectedValue;

                string errMsg = "";
                try
                {
                    RibbonBarManager.SaveTabInfoObject(tab, selectedTab, tabLocation, null);
                }
                catch (DotNetNukeException ex)
                {
                    Exceptions.LogException(ex);
                    errMsg = (ex.ErrorCode != DotNetNukeErrorCode.NotSet) ? GetString("Err." + ex.ErrorCode) : ex.Message;
                }
                catch (Exception ex)
                {
                    Exceptions.LogException(ex);
                    errMsg = ex.Message;
                }

                //Clear the Tab's Cached modules
                DataCache.ClearModuleCache(PortalSettings.ActiveTab.TabID);

                //Update Cached Tabs as TabPath may be needed before cache is cleared
                TabInfo tempTab;
                if (TabController.Instance.GetTabsByPortal(PortalSettings.ActiveTab.PortalID).TryGetValue(tab.TabID, out tempTab))
                {
                    tempTab.TabPath = tab.TabPath;
                }

                if ((string.IsNullOrEmpty(errMsg)))
                {
                    Response.Redirect(Globals.NavigateURL(tab.TabID));
                }
                else
                {
                    errMsg = string.Format("<p>{0}</p><p>{1}</p>", GetString("Err.Header"), errMsg);
                    Web.UI.Utilities.RegisterAlertOnPageLoad(this, new MessageWindowParameters(errMsg) { Title = GetString("Err.Title") });
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="FormatSkinName">
          <declaration><![CDATA[private static string FormatSkinName(string strSkinFolder, string strSkinFile)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="308" sc="9" el="322" ec="10">admin\ControlPanel\UpdatePage.ascx.cs</location>
            <body hash="120b841041cc1b1b76848801ea29bb84"><![CDATA[{
            if (strSkinFolder.ToLower() == "_default")
            {
                return strSkinFile;
            }
            switch (strSkinFile.ToLower())
            {
                case "skin":
                case "container":
                case "default":
                    return strSkinFolder;
                default:
                    return strSkinFolder + " - " + strSkinFile;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetSeparatorItem">
          <declaration><![CDATA[private RadComboBoxItem GetSeparatorItem()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="303" sc="9" el="305" ec="10">admin\ControlPanel\UpdatePage.ascx.cs</location>
            <body hash="b69821b1f05f7d463169d60917f37e5b"><![CDATA[{
            return new RadComboBoxItem(GetString("SkinLstSeparator"), string.Empty) {CssClass = "SkinLstSeparator", Enabled = false};
        }]]></body>
          </codeblock>
        </method>
        <method name="GetString">
          <declaration><![CDATA[private string GetString(string key)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="358" sc="9" el="360" ec="10">admin\ControlPanel\UpdatePage.ascx.cs</location>
            <body hash="fdb9cfd70aff46a9da06e018de02d9c8"><![CDATA[{
            return Localization.GetString(key, LocalResourceFile);
        }]]></body>
          </codeblock>
        </method>
        <method name="IsParentTab">
          <declaration><![CDATA[private bool IsParentTab(TabInfo tab, int parentTabId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="363" sc="3" el="374" ec="4">admin\ControlPanel\UpdatePage.ascx.cs</location>
            <body hash="2f3cb1fbfc15f0c0396ab5bbad9c2fc7"><![CDATA[{
			while (tab != null)
			{
				if (tab.TabID == parentTabId)
				{
					return true;
				}
                tab = tab.ParentId != Null.NullInteger ? TabController.Instance.GetTab(tab.ParentId, tab.PortalID, false) : null;
			}

			return false;
		}]]></body>
          </codeblock>
        </method>
        <method name="LoadAllLists">
          <declaration><![CDATA[private void LoadAllLists()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="204" sc="9" el="214" ec="10">admin\ControlPanel\UpdatePage.ascx.cs</location>
            <body hash="fa3a8381870b0fe8e2a14b700ea10103"><![CDATA[{
            LocationLst.Enabled = RibbonBarManager.CanMovePage();
            PageLst.Enabled = RibbonBarManager.CanMovePage();
            if ((LocationLst.Enabled))
            {
                LoadLocationList();
                LoadPageList();
            }

            LoadSkinList();
        }]]></body>
          </codeblock>
        </method>
        <method name="LoadLocationList">
          <declaration><![CDATA[private void LoadLocationList()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="325" sc="9" el="340" ec="10">admin\ControlPanel\UpdatePage.ascx.cs</location>
            <body hash="9e9da1a4bb65ec875c7cc3595afb8aa9"><![CDATA[{
            LocationLst.ClearSelection();
            LocationLst.Items.Clear();

            //LocationLst.Items.Add(new ListItem(GetString("NoLocationSelection"), ""));
            //LocationLst.Items.Add(new ListItem(GetString("Before"), "BEFORE"));
            //LocationLst.Items.Add(new ListItem(GetString("After"), "AFTER"));
            //LocationLst.Items.Add(new ListItem(GetString("Child"), "CHILD"));

            LocationLst.AddItem(GetString("NoLocationSelection"), "");
            LocationLst.AddItem(GetString("Before"), "BEFORE");
            LocationLst.AddItem(GetString("After"), "AFTER");
            LocationLst.AddItem(GetString("Child"), "CHILD");

            LocationLst.SelectedIndex = 0;
        }]]></body>
          </codeblock>
        </method>
        <method name="LoadPageList">
          <declaration><![CDATA[private void LoadPageList()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="343" sc="9" el="355" ec="10">admin\ControlPanel\UpdatePage.ascx.cs</location>
            <body hash="e73cc397dc2d8be98b4adf4e33198a6a"><![CDATA[{
            PageLst.ClearSelection();
            PageLst.Items.Clear();

            PageLst.DataTextField = "IndentedTabName";
            PageLst.DataValueField = "TabID";
            PageLst.DataSource = RibbonBarManager.GetPagesList().Where(t => !IsParentTab(t, CurrentTab.TabID));
            PageLst.DataBind();

            //PageLst.Items.Insert(0, new ListItem(GetString("NoPageSelection"), string.Empty));
            PageLst.InsertItem(0, GetString("NoPageSelection"), string.Empty);
            PageLst.SelectedIndex = 0;
        }]]></body>
          </codeblock>
        </method>
        <method name="LoadSkinList">
          <declaration><![CDATA[private void LoadSkinList()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="217" sc="9" el="300" ec="10">admin\ControlPanel\UpdatePage.ascx.cs</location>
            <body hash="d6bc9f73bced180bccece98fbe00e578"><![CDATA[{
            SkinLst.ClearSelection();
            SkinLst.Items.Clear();
            SkinLst.Items.Add(new RadComboBoxItem(GetString("DefaultSkin"), string.Empty));

            // load portal skins
            var portalSkinsHeader = new RadComboBoxItem(GetString("PortalSkins"), string.Empty) {Enabled = false, CssClass = "SkinListHeader"};
            SkinLst.Items.Add(portalSkinsHeader);

            string[] arrFolders;
            string[] arrFiles;
            string strLastFolder = "";
            string strRoot = PortalSettings.HomeDirectoryMapPath + SkinController.RootSkin;
            if (Directory.Exists(strRoot))
            {
                arrFolders = Directory.GetDirectories(strRoot);
                foreach (string strFolder in arrFolders)
                {
                    arrFiles = Directory.GetFiles(strFolder, "*.ascx");
                    foreach (string strFile in arrFiles)
                    {
                        string folder = strFolder.Substring(strFolder.LastIndexOf("\\") + 1);
                        if (strLastFolder != folder)
                        {
                            if (!string.IsNullOrEmpty(strLastFolder))
                            {
                                SkinLst.Items.Add(GetSeparatorItem());
                            }
                            strLastFolder = folder;
                        }
                        SkinLst.Items.Add(new RadComboBoxItem(FormatSkinName(folder, Path.GetFileNameWithoutExtension(strFile)),
                                                              "[L]" + SkinController.RootSkin + "/" + folder + "/" + Path.GetFileName(strFile)));
                    }
                }
            }

            //No portal skins added, remove the header
            if ((SkinLst.Items.Count == 2))
            {
                SkinLst.Items.Remove(1);
            }

            //load host skins
            var hostSkinsHeader = new RadComboBoxItem(GetString("HostSkins"), string.Empty) {Enabled = false, CssClass = "SkinListHeader"};
            SkinLst.Items.Add(hostSkinsHeader);

            strRoot = Globals.HostMapPath + SkinController.RootSkin;
            if (Directory.Exists(strRoot))
            {
                arrFolders = Directory.GetDirectories(strRoot);
                foreach (string strFolder in arrFolders)
                {
                    if (!strFolder.EndsWith(Globals.glbHostSkinFolder))
                    {
                        arrFiles = Directory.GetFiles(strFolder, "*.ascx");
                        foreach (string strFile in arrFiles)
                        {
                            string folder = strFolder.Substring(strFolder.LastIndexOf("\\") + 1);
                            if (strLastFolder != folder)
                            {
                                if (!string.IsNullOrEmpty(strLastFolder))
                                {
                                    SkinLst.Items.Add(GetSeparatorItem());
                                }
                                strLastFolder = folder;
                            }
                            SkinLst.Items.Add(new RadComboBoxItem(FormatSkinName(folder, Path.GetFileNameWithoutExtension(strFile)),
                                                                  "[G]" + SkinController.RootSkin + "/" + folder + "/" + Path.GetFileName(strFile)));
                        }
                    }
                }
            }

            //Set the selected item
            SkinLst.SelectedIndex = 0;
            if ((!string.IsNullOrEmpty(CurrentTab.SkinSrc)))
            {
                RadComboBoxItem selectItem = SkinLst.FindItemByValue(CurrentTab.SkinSrc);
                if (((selectItem != null)))
                {
                    selectItem.Selected = true;
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="53" sc="9" el="75" ec="10">admin\ControlPanel\UpdatePage.ascx.cs</location>
            <body hash="b7e348633e9dc9b9854565408568a80d"><![CDATA[{
            base.OnLoad(e);

            cmdUpdate.Click += CmdUpdateClick;

            try
            {
                if (Visible && !IsPostBack)
                {
                    Name.Text = CurrentTab.TabName;
                    IncludeInMenu.Checked = CurrentTab.IsVisible;
                    IsDisabled.Checked = CurrentTab.DisableLink;
                    IsSecurePanel.Visible = PortalSettings.SSLEnabled;
                    IsSecure.Enabled = PortalSettings.SSLEnabled;
                    IsSecure.Checked = CurrentTab.IsSecure;
                    LoadAllLists();
                }
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_currentTab">
          <declaration><![CDATA[private TabInfo _currentTab;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdUpdate">
          <declaration><![CDATA[protected LinkButton cmdUpdate;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="DisabledLbl">
          <declaration><![CDATA[protected Label DisabledLbl;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="IncludeInMenu">
          <declaration><![CDATA[protected CheckBox IncludeInMenu;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="IncludeInMenuLbl">
          <declaration><![CDATA[protected Label IncludeInMenuLbl;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="IsDisabled">
          <declaration><![CDATA[protected CheckBox IsDisabled;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="IsSecure">
          <declaration><![CDATA[protected CheckBox IsSecure;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="IsSecureLbl">
          <declaration><![CDATA[protected DnnFieldLabel IsSecureLbl;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="IsSecurePanel">
          <declaration><![CDATA[protected Panel IsSecurePanel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="LocationLst">
          <declaration><![CDATA[protected DnnComboBox LocationLst;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Name">
          <declaration><![CDATA[protected TextBox Name;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="PageLst">
          <declaration><![CDATA[protected DnnComboBox PageLst;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="SkinLbl">
          <declaration><![CDATA[protected Label SkinLbl;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="SkinLst">
          <declaration><![CDATA[protected DnnComboBox SkinLst;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="CurrentTab">
          <declaration><![CDATA[private TabInfo CurrentTab]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="177" sc="13" el="184" ec="14">admin\ControlPanel\UpdatePage.ascx.cs</location>
            <body hash="94239ce0cf7bd5723b837a30cec5aeb2"><![CDATA[{
                //Weird - but the activetab has different skin src value than getting from the db
                if (((_currentTab == null)))
                {
                    _currentTab = TabController.Instance.GetTab(PortalSettings.ActiveTab.TabID, PortalSettings.ActiveTab.PortalID, false);
                }
                return _currentTab;
            }]]></body>
          </codeblock>
        </property>
        <property name="LocalResourceFile">
          <declaration><![CDATA[private string LocalResourceFile]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="190" sc="13" el="192" ec="14">admin\ControlPanel\UpdatePage.ascx.cs</location>
            <body hash="a61fe5ae6a6c71e43aff88d04c647666"><![CDATA[{
                return string.Format("{0}/{1}/{2}.ascx.resx", TemplateSourceDirectory, Localization.LocalResourceDirectory, GetType().BaseType.Name);
            }]]></body>
          </codeblock>
        </property>
        <property name="PortalSettings">
          <declaration><![CDATA[private static PortalSettings PortalSettings]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="198" sc="13" el="200" ec="14">admin\ControlPanel\UpdatePage.ascx.cs</location>
            <body hash="de88f44ddad615520ed6ac528455cb0e"><![CDATA[{
                return PortalSettings.Current;
            }]]></body>
          </codeblock>
        </property>
        <property name="ToolName">
          <declaration><![CDATA[public string ToolName]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="159" sc="13" el="161" ec="14">admin\ControlPanel\UpdatePage.ascx.cs</location>
            <body hash="5c484926e423fe4f1599e127fbff2f59"><![CDATA[{
                return "QuickUpdatePage";
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="163" sc="13" el="164" ec="79">admin\ControlPanel\UpdatePage.ascx.cs</location>
            <body hash="755076bde14d40545acdcf766db94b6f"><![CDATA[{
                throw new NotSupportedException("Set ToolName not supported");]]></body>
          </codeblock>
        </property>
        <property name="Visible">
          <declaration><![CDATA[public override bool Visible]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="147" sc="13" el="149" ec="14">admin\ControlPanel\UpdatePage.ascx.cs</location>
            <body hash="9c61b362283d9945c5fdd4ed0fc06d30"><![CDATA[{
                return base.Visible && TabPermissionController.CanManagePage();
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="151" sc="13" el="153" ec="14">admin\ControlPanel\UpdatePage.ascx.cs</location>
            <body hash="607b1334eefa383f12b217e98f4e49e3"><![CDATA[{
                base.Visible = value;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="DotNetNuke.UI.ControlPanels">
    <class name="ControlBar">
      <declaration><![CDATA[public class ControlBar : ControlPanelBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private readonly IList<string> _adminCommonTabs = new List<string>]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="64" sc="9" el="77" ec="108">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="d8e710080a44f818abb39ffe7e295248"><![CDATA[private readonly IList<string> _adminCommonTabs = new List<string> { "Site Settings", 
                                                                            "Security Roles", 
                                                                            "User Accounts", 
                                                                            "File Management" };

        private readonly IList<string> _hostCommonTabs = new List<string> { "Host Settings",
                                                                            "Site Management",
                                                                            "File Management",
                                                                            "Extensions",
                                                                            "Dashboard",
                                                                            "Health Monitoring",
                                                                            "Technical Support",
                                                                            "Knowledge Base",
                                                                            "Software and Documentation" };]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="ActiveTabHasChildren">
          <declaration><![CDATA[protected virtual bool ActiveTabHasChildren()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="759" sc="9" el="768" ec="10">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="62e6f6fffe758536e47b804deccbc55d"><![CDATA[{
            var children = TabController.GetTabsByParent(PortalSettings.ActiveTab.TabID, PortalSettings.ActiveTab.PortalID);

            if (((children == null) || children.Count < 1))
            {
                return false;
            }

            return true;
        }]]></body>
          </codeblock>
        </method>
        <method name="AutoSetUserMode">
          <declaration><![CDATA[private void AutoSetUserMode()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="850" sc="9" el="887" ec="10">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="be04728b54a657f7b84adc3da8cac10f"><![CDATA[{
            int tabId = PortalSettings.ActiveTab.TabID;
            int portalId = PortalSettings.Current.PortalId;
            string pageId = string.Format("{0}:{1}", portalId, tabId);

            HttpCookie cookie = Request.Cookies["StayInEditMode"];
            if (cookie != null && cookie.Value == "YES")
            {
                if (PortalSettings.Current.UserMode != Entities.Portals.PortalSettings.Mode.Edit)
                {
                    SetUserMode("EDIT");
                    SetLastPageHistory(pageId);
                    Response.Redirect(Request.RawUrl, true);
                    
                }

                return;
            }

            string lastPageId = GetLastPageHistory();
	        var isShowAsCustomError = Request.QueryString.AllKeys.Contains("aspxerrorpath");

			if (lastPageId != pageId && !isShowAsCustomError)
            {
                // navigate between pages
                if (PortalSettings.Current.UserMode != PortalSettings.Mode.View)
                {
                    SetUserMode("VIEW");
                    SetLastPageHistory(pageId);
                    Response.Redirect(Request.RawUrl, true);
                }
            }

	        if (!isShowAsCustomError)
	        {
		        SetLastPageHistory(pageId);
	        }
        }]]></body>
          </codeblock>
        </method>
        <method name="BindLanguagesList">
          <declaration><![CDATA[private void BindLanguagesList()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="920" sc="3" el="937" ec="4">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="d1372a3f56029c004686d91154a7256b"><![CDATA[{
            if (ShowSwitchLanguagesPanel())
            {
                const string FlagImageUrlFormatString = "~/images/Flags/{0}.gif";
                foreach (var lang in LoadLanguagesList())
                {
                    var item = new DnnComboBoxItem(lang[0], lang[1]);
                    item.ImageUrl = string.Format(FlagImageUrlFormatString, item.Value);
                    if (lang[2] == "true")
                    {
                        item.Selected = true;
                    }

                    controlBar_SwitchLanguage.Items.Add(item);
                }

            }
		}]]></body>
          </codeblock>
        </method>
        <method name="BindPortalsList">
          <declaration><![CDATA[private void BindPortalsList()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="912" sc="3" el="917" ec="4">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="5531de994ae822ee351b70b1470e113d"><![CDATA[{
			foreach (var portal in LoadPortalsList())
			{
				controlBar_SwitchSite.Items.Add(new DnnComboBoxItem(portal[0], portal[1]));
			}
		}]]></body>
          </codeblock>
        </method>
        <method name="BuildToolUrl">
          <declaration><![CDATA[protected string BuildToolUrl(string toolName, bool isHostTool, string moduleFriendlyName, string controlKey, string navigateUrl, bool showAsPopUp)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="295" sc="9" el="379" ec="10">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="33a7ddd25d9281d4cc573deab9db168f"><![CDATA[{
            if ((isHostTool && !UserController.Instance.GetCurrentUserInfo().IsSuperUser))
            {
                return "javascript:void(0);";
            }

            if ((!string.IsNullOrEmpty(navigateUrl)))
            {
                return navigateUrl;
            }

            string returnValue = "javascript:void(0);";
            switch (toolName)
            {
                case "PageSettings":
                    if (TabPermissionController.CanManagePage())
                    {
                        returnValue = Globals.NavigateURL(PortalSettings.ActiveTab.TabID, "Tab", "action=edit&activeTab=settingTab");
                    }
                    break;
                case "CopyPage":
                    if (TabPermissionController.CanCopyPage())
                    {
                        returnValue = Globals.NavigateURL(PortalSettings.ActiveTab.TabID, "Tab", "action=copy&activeTab=copyTab");
                    }
                    break;
                case "DeletePage":
                    if (TabPermissionController.CanDeletePage())
                    {
                        returnValue = Globals.NavigateURL(PortalSettings.ActiveTab.TabID, "Tab", "action=delete");
                    }
                    break;
                case "PageTemplate":
                    if (TabPermissionController.CanManagePage())
                    {
                        returnValue = Globals.NavigateURL(PortalSettings.ActiveTab.TabID, "Tab", "action=edit&activeTab=advancedTab");
                    }
                    break;
                case "PageLocalization":
                    if (TabPermissionController.CanManagePage())
                    {
                        returnValue = Globals.NavigateURL(PortalSettings.ActiveTab.TabID, "Tab", "action=edit&activeTab=localizationTab");
                    }
                    break;
                case "PagePermission":
                    if (TabPermissionController.CanAdminPage())
                    {
                        returnValue = Globals.NavigateURL(PortalSettings.ActiveTab.TabID, "Tab", "action=edit&activeTab=permissionsTab");
                    }
                    break;
                case "ImportPage":
                    if (TabPermissionController.CanImportPage())
                    {
                        returnValue = Globals.NavigateURL(PortalSettings.ActiveTab.TabID, "ImportTab");
                    }
                    break;
                case "ExportPage":
                    if (TabPermissionController.CanExportPage())
                    {
                        returnValue = Globals.NavigateURL(PortalSettings.ActiveTab.TabID, "ExportTab");
                    }
                    break;
                case "NewPage":
                    if (TabPermissionController.CanAddPage())
                    {
                        returnValue = Globals.NavigateURL("Tab", "activeTab=settingTab");
                    }
                    break;
                case "PublishPage":
                    if (TabPermissionController.CanAdminPage())
                    {
                        returnValue = Globals.NavigateURL(PortalSettings.ActiveTab.TabID);
                    }
                    break;
                default:
                    if ((!string.IsNullOrEmpty(moduleFriendlyName)))
                    {
                        var additionalParams = new List<string>();
                        returnValue = GetTabURL(additionalParams, toolName, isHostTool, 
                                                moduleFriendlyName, controlKey, showAsPopUp);
                    }
                    break;
            }
            return returnValue;
        }]]></body>
          </codeblock>
        </method>
        <method name="CheckedWhenInLayoutMode">
          <declaration><![CDATA[protected string CheckedWhenInLayoutMode()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="722" sc="9" el="724" ec="10">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="04e2d80179fa95f51b3463d028fce420"><![CDATA[{
            return UserMode == PortalSettings.Mode.Layout ? "checked='checked'" : string.Empty;
        }]]></body>
          </codeblock>
        </method>
        <method name="CheckedWhenStayInEditMode">
          <declaration><![CDATA[protected string CheckedWhenStayInEditMode()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="727" sc="9" el="741" ec="10">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="0bbf71905f5a1797d22462dc2a7c914f"><![CDATA[{
            string checkboxState = string.Empty;
            var cookie = Request.Cookies["StayInEditMode"];
            if(cookie != null && cookie.Value == "YES")
            {
                checkboxState = "checked='checked'";
            }

            if(UserMode == PortalSettings.Mode.Layout)
            {
                checkboxState += " disabled='disabled'";
            }

            return checkboxState;
        }]]></body>
          </codeblock>
        </method>
        <method name="CheckPageQuota">
          <declaration><![CDATA[protected bool CheckPageQuota()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="184" sc="9" el="187" ec="10">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="c7ee650a4b9464a0f7c278b016bee685"><![CDATA[{
            UserInfo objUser = UserController.Instance.GetCurrentUserInfo();
            return (objUser != null && objUser.IsSuperUser) || PortalSettings.PageQuota == 0 || PortalSettings.Pages < PortalSettings.PageQuota;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetAdminAdvancedMenu">
          <declaration><![CDATA[protected string GetAdminAdvancedMenu()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="563" sc="9" el="573" ec="10">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="69751b5ef74a90a8b34f8b1350709bb9"><![CDATA[{
            var tabs = AdminAdvancedTabs;
            var sb = new StringBuilder();
            foreach (var tab in tabs)
            {
                var hideBookmark = AdminBookmarkItems.Contains(tab.TabName);
                sb.Append(GetMenuItem(tab, false, hideBookmark));
            }

            return sb.ToString();
        }]]></body>
          </codeblock>
        </method>
        <method name="GetAdminBaseMenu">
          <declaration><![CDATA[protected string GetAdminBaseMenu()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="550" sc="9" el="560" ec="10">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="fe455e4f817a7ecd19a41c0d36b1d668"><![CDATA[{
            var tabs = AdminBaseTabs;
            var sb = new StringBuilder();
            foreach(var tab in tabs)
            {
                var hideBookmark = AdminBookmarkItems.Contains(tab.TabName);
                sb.Append(GetMenuItem(tab, false, hideBookmark));
            }

            return sb.ToString();
        }]]></body>
          </codeblock>
        </method>
        <method name="GetAdminTabs">
          <declaration><![CDATA[private void GetAdminTabs()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1072" sc="9" el="1091" ec="10">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="15ecba60080a82e2e564f095c7d8546e"><![CDATA[{
            var adminTab = TabController.GetTabByTabPath(PortalSettings.PortalId, "//Admin", string.Empty);
            _adminTabs = TabController.GetTabsByParent(adminTab, PortalSettings.PortalId).OrderBy(t => t.LocalizedTabName).ToList();

            _adminBaseTabs = new List<TabInfo>();
            _adminAdvancedTabs = new List<TabInfo>();

            foreach (var tabInfo in _adminTabs)
            {
                if (IsCommonTab(tabInfo))
                {
                    _adminBaseTabs.Add(tabInfo);
                }
                else
                {
                    _adminAdvancedTabs.Add(tabInfo);
                }
            }

        }]]></body>
          </codeblock>
        </method>
        <method name="GetBookmarkItems">
          <declaration><![CDATA[protected string GetBookmarkItems(string title)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="603" sc="9" el="618" ec="10">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="b8407b882c13f1666779683a2b2f5cfa"><![CDATA[{
            var isHostTool = title == "host";
            var bookmarkItems = isHostTool ? HostBookmarkItems : AdminBookmarkItems;
            
            if(bookmarkItems != null && bookmarkItems.Any())
            {
                var sb = new StringBuilder();
                foreach(var itemKey in bookmarkItems)
                {
                    sb.Append(GetMenuItem(itemKey, isHostTool, true));
                }
                return sb.ToString();
            }

            return string.Empty;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetButtonConfirmHeader">
          <declaration><![CDATA[protected string GetButtonConfirmHeader(string toolName)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="626" sc="9" el="628" ec="10">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="fce2bae22a23c53a158013dd9a3e38b8"><![CDATA[{
            return ClientAPI.GetSafeJSString(Localization.GetString("Tool." + toolName + ".ConfirmHeader", LocalResourceFile));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetButtonConfirmMessage">
          <declaration><![CDATA[protected string GetButtonConfirmMessage(string toolName)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="621" sc="9" el="623" ec="10">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="0b8cface0f4f0d8a63e91463a4cf57bf"><![CDATA[{
            return ClientAPI.GetSafeJSString(Localization.GetString("Tool."+toolName+".ConfirmText", LocalResourceFile));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetCurrentPortalsGroup">
          <declaration><![CDATA[private static IEnumerable<PortalInfo> GetCurrentPortalsGroup()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="831" sc="9" el="847" ec="10">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="89ae70a5893835f6914bb7482d3ebd6f"><![CDATA[{
            var groups = PortalGroupController.Instance.GetPortalGroups().ToArray();

            var result = (from @group in groups
                          select PortalGroupController.Instance.GetPortalsByGroup(@group.PortalGroupId)
                              into portals
                              where portals.Any(x => x.PortalID == PortalSettings.Current.PortalId)
                              select portals.ToArray()).FirstOrDefault();

            // Are we in a group of one?
            if (result == null || result.Length == 0)
            {
                result = new[] { PortalController.Instance.GetPortal(PortalSettings.Current.PortalId) };
            }

            return result;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetEditButtonLabel">
          <declaration><![CDATA[protected string GetEditButtonLabel()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="754" sc="9" el="756" ec="10">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="ee89ab701930d4e4607f7bd265c9c421"><![CDATA[{
            return UserMode == PortalSettings.Mode.Edit ? GetString("Tool.CloseEditMode.Text") : GetString("Tool.EditThisPage.Text");
        }]]></body>
          </codeblock>
        </method>
        <method name="GetHostAdvancedMenu">
          <declaration><![CDATA[protected string GetHostAdvancedMenu()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="590" sc="9" el="600" ec="10">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="6bf7b1731af5f7fa625dab99e33052cf"><![CDATA[{
            var tabs = HostAdvancedTabs;
            var sb = new StringBuilder();
            foreach (var tab in tabs)
            {
                var hideBookmark = HostBookmarkItems.Contains(tab.TabName);
                sb.Append(GetMenuItem(tab, false, hideBookmark));
            }

            return sb.ToString();
        }]]></body>
          </codeblock>
        </method>
        <method name="GetHostBaseMenu">
          <declaration><![CDATA[protected string GetHostBaseMenu()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="576" sc="9" el="587" ec="10">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="127d2587ba1695e8c779ba51d5c4946a"><![CDATA[{
            var tabs = HostBaseTabs;
            
            var sb = new StringBuilder();
            foreach (var tab in tabs)
            {
                var hideBookmark = HostBookmarkItems.Contains(tab.TabName);
                sb.Append(GetMenuItem(tab, false, hideBookmark));
            }

            return sb.ToString();
        }]]></body>
          </codeblock>
        </method>
        <method name="GetHostTabs">
          <declaration><![CDATA[private void GetHostTabs()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1035" sc="9" el="1069" ec="10">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="39815d531e014e944e03af50d5fd7eca"><![CDATA[{
            var hostTab = TabController.GetTabByTabPath(Null.NullInteger, "//Host", string.Empty);
            var hosts = TabController.GetTabsByParent(hostTab, -1);

            var professionalTab = TabController.Instance.GetTabByName("Professional Features", -1);
            List<TabInfo> professionalTabs;
            if (professionalTab != null)
            {
                professionalTabs = TabController.GetTabsByParent(professionalTab.TabID, -1);
            }
            else
            {
                professionalTabs = new List<TabInfo>();
            }

            _hostTabs = new List<TabInfo>();
            _hostTabs.AddRange(hosts);
            _hostTabs.AddRange(professionalTabs);
            _hostTabs = _hostTabs.OrderBy(t => t.LocalizedTabName).ToList();

            _hostBaseTabs = new List<TabInfo>();
            _hostAdvancedTabs = new List<TabInfo>();

            foreach (var tabInfo in _hostTabs)
            {
                if (IsCommonTab(tabInfo, true))
                {
                    _hostBaseTabs.Add(tabInfo);
                }
                else
                {
                    _hostAdvancedTabs.Add(tabInfo);
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetLastPageHistory">
          <declaration><![CDATA[private string GetLastPageHistory()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="895" sc="9" el="901" ec="10">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="ee769016ebeb6149f562e34a4e7e0c22"><![CDATA[{
            HttpCookie cookie = Request.Cookies["LastPageId"];
            if (cookie != null)
                return cookie.Value;

            return "NEW";
        }]]></body>
          </codeblock>
        </method>
        <method name="GetMenuItem">
          <declaration><![CDATA[protected string GetMenuItem(string tabName, bool isHostTool)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="468" sc="9" el="488" ec="10">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="cb22d72813a6616f742692c6bbf5ed2c"><![CDATA[{
            if ((isHostTool && !UserController.Instance.GetCurrentUserInfo().IsSuperUser))
            {
                return string.Empty;
            }

            List<TabInfo> tabList = null;
            if(isHostTool)
            {
                if(_hostTabs == null) GetHostTabs();
                tabList = _hostTabs;
            }
            else
            {
                if(_adminTabs == null) GetAdminTabs();
                tabList = _adminTabs;
            }

            var tab = tabList.SingleOrDefault(t => t.TabName == tabName);
            return GetMenuItem(tab);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetMenuItem">
          <declaration><![CDATA[protected string GetMenuItem(string tabName, bool isHostTool, bool isRemoveBookmark, bool isHideBookmark = false)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="491" sc="9" el="511" ec="10">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="1f4682e6de9d0edb4c5d82ade919bfb6"><![CDATA[{
            if ((isHostTool && !UserController.Instance.GetCurrentUserInfo().IsSuperUser))
            {
                return string.Empty;
            }

            List<TabInfo> tabList = null;
            if (isHostTool)
            {
                if (_hostTabs == null) GetHostTabs();
                tabList = _hostTabs;
            }
            else
            {
                if (_adminTabs == null) GetAdminTabs();
                tabList = _adminTabs;
            }

            var tab = tabList.SingleOrDefault(t => t.TabName == tabName);
            return GetMenuItem(tab, isRemoveBookmark, isHideBookmark);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetMenuItem">
          <declaration><![CDATA[protected string GetMenuItem(TabInfo tab, bool isRemoveBookmark = false, bool isHideBookmark = false)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="514" sc="9" el="546" ec="10">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="098eb48c32f7d4d0ed73029953194fa5"><![CDATA[{
            if (tab == null) return string.Empty;
            if (tab.IsVisible && !tab.IsDeleted && !tab.DisableLink)
            {
                string name = !string.IsNullOrEmpty(tab.LocalizedTabName) ? tab.LocalizedTabName : tab.Title;
	            var linkClass = DotNetNukeContext.Current.Application.Name == "DNNCORP.CE" && tab.FullUrl.Contains("ProfessionalFeatures") ? "class=\"PE\"" : string.Empty;
                if (!isRemoveBookmark)
                {
                    if(!isHideBookmark)
						return string.Format("<li data-tabname=\"{3}\"><a href=\"{0}\" {4}>{1}</a><a href=\"javascript:void(0)\" class=\"bookmark\" title=\"{2}\"><span></span></a></li>",
                                             tab.FullUrl,
                                             name,
                                             ClientAPI.GetSafeJSString(GetString("Tool.AddToBookmarks.ToolTip")),
                                             ClientAPI.GetSafeJSString(tab.TabName),
											 linkClass);
                    else
						return string.Format("<li data-tabname=\"{3}\"><a href=\"{0}\" {4}>{1}</a><a href=\"javascript:void(0)\" class=\"bookmark hideBookmark\" data-title=\"{2}\"><span></span></a></li>",
                                            tab.FullUrl,
                                            name,
                                            ClientAPI.GetSafeJSString(GetString("Tool.AddToBookmarks.ToolTip")),
                                            ClientAPI.GetSafeJSString(tab.TabName),
											linkClass);
                }

                return string.Format("<li data-tabname=\"{3}\"><a href=\"{0}\" {4}>{1}</a><a href=\"javascript:void(0)\" class=\"removeBookmark\" title=\"{2}\"><span></span></a></li>",
                                        tab.FullUrl,
                                        name,
                                        ClientAPI.GetSafeJSString(GetString("Tool.RemoveFromBookmarks.ToolTip")),
                                        ClientAPI.GetSafeJSString(tab.TabName),
										linkClass);
            }
            return string.Empty;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetModeForAttribute">
          <declaration><![CDATA[protected string GetModeForAttribute()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="749" sc="9" el="751" ec="10">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="df6a6915c625fffafddc7effca21ce49"><![CDATA[{
            return UserMode.ToString().ToUpperInvariant();
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPublishActionText">
          <declaration><![CDATA[protected string GetPublishActionText()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="448" sc="9" el="452" ec="10">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="bf7d742916d0b0d24a0dc68b683742b9"><![CDATA[{
            return TabPublishingController.Instance.IsTabPublished(TabController.CurrentPage.TabID, PortalSettings.PortalId)
                    ? ClientAPI.GetSafeJSString(GetString("Tool.UnpublishPage.Text"))
                    : ClientAPI.GetSafeJSString(GetString("Tool.PublishPage.Text"));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPublishConfirmHeader">
          <declaration><![CDATA[protected string GetPublishConfirmHeader()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="462" sc="9" el="466" ec="10">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="79272e27c297452594e105a82f76517e"><![CDATA[{
            return TabPublishingController.Instance.IsTabPublished(TabController.CurrentPage.TabID, PortalSettings.PortalId)
                    ? ClientAPI.GetSafeJSString(GetButtonConfirmHeader("UnpublishPage"))
                    : ClientAPI.GetSafeJSString(GetButtonConfirmHeader("PublishPage"));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPublishConfirmText">
          <declaration><![CDATA[protected string GetPublishConfirmText()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="455" sc="9" el="459" ec="10">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="9a40a8bc967ca39a6ce693c4ee605b3b"><![CDATA[{
            return TabPublishingController.Instance.IsTabPublished(TabController.CurrentPage.TabID, PortalSettings.PortalId)
                    ? ClientAPI.GetSafeJSString(GetButtonConfirmMessage("UnpublishPage"))
                    : ClientAPI.GetSafeJSString(GetButtonConfirmMessage("PublishPage"));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetString">
          <declaration><![CDATA[protected string GetString(string key)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="289" sc="9" el="291" ec="10">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="fdb9cfd70aff46a9da06e018de02d9c8"><![CDATA[{
            return Localization.GetString(key, LocalResourceFile);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetTabPublishing">
          <declaration><![CDATA[protected string GetTabPublishing()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="443" sc="9" el="445" ec="10">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="a212eb85c9e53ee59f201e606025eda0"><![CDATA[{
            return TabPublishingController.Instance.IsTabPublished(TabController.CurrentPage.TabID, PortalSettings.PortalId) ? "true" : "false";
        }]]></body>
          </codeblock>
        </method>
        <method name="GetTabURL">
          <declaration><![CDATA[protected string GetTabURL(List<string> additionalParams, string toolName, bool isHostTool, string moduleFriendlyName, string controlKey, bool showAsPopUp)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="383" sc="9" el="412" ec="10">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="a40ea408a6f74c97d200b8f4e5068d9c"><![CDATA[{
            int portalId = (isHostTool) ? Null.NullInteger : PortalSettings.PortalId;

            string strURL = string.Empty;

            if (((additionalParams == null)))
            {
                additionalParams = new List<string>();
            }

            var moduleInfo = ModuleController.Instance.GetModuleByDefinition(portalId, moduleFriendlyName);

            if (((moduleInfo != null)))
            {
                bool isHostPage = (portalId == Null.NullInteger);
                if ((!string.IsNullOrEmpty(controlKey)))
                {
                    additionalParams.Insert(0, "mid=" + moduleInfo.ModuleID);
                    if (showAsPopUp && PortalSettings.EnablePopUps)
                    {
                        additionalParams.Add("popUp=true");
                    }
                }

                string currentCulture = System.Threading.Thread.CurrentThread.CurrentCulture.Name;
                strURL = Globals.NavigateURL(moduleInfo.TabID, isHostPage, PortalSettings, controlKey, currentCulture, additionalParams.ToArray());
            }

            return strURL;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetTabURL">
          <declaration><![CDATA[protected string GetTabURL(string tabName, bool isHostTool)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="415" sc="3" el="417" ec="4">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="a2dd06878ba47ab74b9507f7187dacc5"><![CDATA[{
			return GetTabURL(tabName, isHostTool, null);
		}]]></body>
          </codeblock>
        </method>
        <method name="GetTabURL">
          <declaration><![CDATA[protected string GetTabURL(string tabName, bool isHostTool, int? parentId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="420" sc="9" el="428" ec="10">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="ab3fd59eed1bc471498402e8e1549054"><![CDATA[{
            if ((isHostTool && !UserController.Instance.GetCurrentUserInfo().IsSuperUser))
            {
                return "javascript:void(0);";
            }

            int portalId = (isHostTool) ? Null.NullInteger : PortalSettings.PortalId;
            return GetTabURL(tabName, portalId, parentId);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetTabURL">
          <declaration><![CDATA[protected string GetTabURL(string tabName, int portalId, int? parentId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="431" sc="9" el="440" ec="10">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="691fcc3d48e6ab2c470ccdf95c52983e"><![CDATA[{
            var tab = parentId.HasValue ? TabController.Instance.GetTabByName(tabName, portalId, parentId.Value) : TabController.Instance.GetTabByName(tabName, portalId);

            if (tab != null)
            {
                return tab.FullUrl;
            }

            return string.Empty;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetUpgradeIndicator">
          <declaration><![CDATA[protected string GetUpgradeIndicator()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="190" sc="9" el="205" ec="10">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="6487e84cd4cfca6d45f34fecb5e8639d"><![CDATA[{
            UserInfo objUser = UserController.Instance.GetCurrentUserInfo();
           
            if (objUser != null && objUser.IsSuperUser)
            {
                var upgradeIndicator = ControlBarController.Instance.GetUpgradeIndicator(DotNetNukeContext.Current.Application.Version,
                    Request.IsLocal, Request.IsSecureConnection);
                if (upgradeIndicator == null)
                {
                    return String.Empty;
                }
                return GetUpgradeIndicatorButton(upgradeIndicator);
            }

            return string.Empty;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetUpgradeIndicatorButton">
          <declaration><![CDATA[private string GetUpgradeIndicatorButton(UpgradeIndicatorViewModel upgradeIndicator)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="224" sc="9" el="227" ec="10">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="8832ba80a1709f847def9a695371d11a"><![CDATA[{            
            return string.Format("<a id=\"{0}\" href=\"#\" onclick=\"{1}\" class=\"{2}\"><img src=\"{3}\" alt=\"{4}\" title=\"{5}\"/></a>",
                upgradeIndicator.ID, upgradeIndicator.WebAction, upgradeIndicator.CssClass, ResolveClientUrl(upgradeIndicator.ImageUrl), upgradeIndicator.AltText, upgradeIndicator.ToolTip);
        }]]></body>
          </codeblock>
        </method>
        <method name="IsCommonTab">
          <declaration><![CDATA[private bool IsCommonTab(TabInfo tab, bool isHost = false)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1094" sc="9" el="1103" ec="10">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="fcfe8d083e58a9c6b73ef4e86282e727"><![CDATA[{
            if (tab.TabSettings.ContainsKey("ControlBar_CommonTab") &&
                tab.TabSettings["ControlBar_CommonTab"].ToString() == "Y")
            {
                return true;
            }


            return isHost ? _hostCommonTabs.Contains(tab.TabName) : _adminCommonTabs.Contains(tab.TabName);
        }]]></body>
          </codeblock>
        </method>
        <method name="IsLanguageModuleInstalled">
          <declaration><![CDATA[protected bool IsLanguageModuleInstalled()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="771" sc="9" el="773" ec="10">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="c1c1f8b254417ae646135c6c885d1e6a"><![CDATA[{
            return DesktopModuleController.GetDesktopModuleByFriendlyName("Languages") != null;
        }]]></body>
          </codeblock>
        </method>
        <method name="LoadCategoryList">
          <declaration><![CDATA[private void LoadCategoryList()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="788" sc="9" el="799" ec="10">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="5b9ed5b5685fa8ec577c434bab76c676"><![CDATA[{
            ITermController termController = Util.GetTermController();
            var terms = termController.GetTermsByVocabulary("Module_Categories").OrderBy(t => t.Weight).Where(t => t.Name != "< None >").ToList();
            var allTerm = new Term("All", Localization.GetString("AllCategories", LocalResourceFile));
            terms.Add(allTerm);
            CategoryList.DataSource = terms;
            CategoryList.DataBind();
            if (!IsPostBack)
            {
                CategoryList.Select(!String.IsNullOrEmpty(BookmarkedModuleKeys) ? BookmarkModuleCategory : "All", false);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="LoadCustomMenuItems">
          <declaration><![CDATA[private void LoadCustomMenuItems()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="208" sc="9" el="221" ec="10">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="eff577764500e98e0fb75893ccb5444f"><![CDATA[{
            foreach (var menuItem in ControlBarController.Instance.GetCustomMenuItems())
            {
                var liElement = new HtmlGenericControl("li");                
                liElement.Attributes.Add("id", menuItem.ID + "_tab");

                var control = Page.LoadControl(menuItem.Source);
                control.ID = menuItem.ID;
                            
                liElement.Controls.Add(control);
                
                CustomMenuItems.Controls.Add(liElement);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="LoadLanguagesList">
          <declaration><![CDATA[protected IEnumerable<string[]> LoadLanguagesList()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="655" sc="9" el="692" ec="10">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="62372b3958482c619d0ac44f12428955"><![CDATA[{
            var result = new List<string[]>();

            if (PortalSettings.AllowUserUICulture)
            {
                if(CurrentUICulture  == null)
                {
                    object oCulture = Personalization.GetProfile("Usability", "UICulture");
                    
                    if (oCulture != null)
                    {
                        CurrentUICulture = oCulture.ToString();
                    }
                    else
                    {
                        var l = new Localization();
                        CurrentUICulture = l.CurrentUICulture;
                        SetLanguage(true, CurrentUICulture);
                    }
                }
                

                IEnumerable<ListItem> cultureListItems = Localization.LoadCultureInListItems(CultureDropDownTypes.NativeName, CurrentUICulture, "", false);
                foreach (var cultureItem in cultureListItems)
                {
                    var selected = cultureItem.Value == CurrentUICulture ? "true" : "false";
                    string[] p = new string[]
                                     {
                                         cultureItem.Text,
                                         cultureItem.Value,
                                         selected
                                     };
                    result.Add(p);
                }
            }

            return result;
        }]]></body>
          </codeblock>
        </method>
        <method name="LoadPaneList">
          <declaration><![CDATA[protected IEnumerable<string[]> LoadPaneList()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="245" sc="9" el="285" ec="10">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="ce03a394423e7aa2c868079aafdb08a5"><![CDATA[{
            ArrayList panes = PortalSettings.Current.ActiveTab.Panes;
            var resultPanes = new List<string[]>();

            if(panes.Count < 4 )
            {
                foreach (var p in panes)
                {
                    var topPane = new string[]{
                        string.Format(GetString("Pane.AddTop.Text"), p),
                        p.ToString(),
                        "TOP"
                    };

                    var botPane = new string[]{
                        string.Format(GetString("Pane.AddBottom.Text"), p),
                        p.ToString(),
                        "BOTTOM"
                    };

                    resultPanes.Add(topPane);
                    resultPanes.Add(botPane);
                }
            }
            else
            {
                foreach (var p in panes)
                {

                    var botPane = new string[]{
                        string.Format(GetString("Pane.Add.Text"), p),
                        p.ToString(),
                        "BOTTOM"
                    };
                   
                    resultPanes.Add(botPane);
                }
            }

            return resultPanes;
        }]]></body>
          </codeblock>
        </method>
        <method name="LoadPortalsList">
          <declaration><![CDATA[protected IEnumerable<string[]> LoadPortalsList()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="631" sc="9" el="652" ec="10">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="e96327462b95d1bc08c2776481af34eb"><![CDATA[{
            var portals = PortalController.Instance.GetPortals();

            var result = new List<string[]>();
            foreach (var portal in portals)
            {
                var pi = portal as PortalInfo;

                if (pi != null)
                {
                    string[] p =
                    {
                        pi.PortalName,
                        pi.PortalID.ToString("D")
                    };

                    result.Add(p);
                }
            }

            return result;
        }]]></body>
          </codeblock>
        </method>
        <method name="LoadSiteList">
          <declaration><![CDATA[private bool LoadSiteList()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="802" sc="9" el="817" ec="10">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="065cfd2eccc9ae9c1fe02fbc2e54dd52"><![CDATA[{
            // Is there more than one site in this group?
            var multipleSites = GetCurrentPortalsGroup().Count() > 1;
            if (multipleSites)
            {
                PageList.Services.GetTreeMethod = "ItemListService/GetPagesInPortalGroup";
                PageList.Services.GetNodeDescendantsMethod = "ItemListService/GetPageDescendantsInPortalGroup";
                PageList.Services.SearchTreeMethod = "ItemListService/SearchPagesInPortalGroup";
                PageList.Services.GetTreeWithNodeMethod = "ItemListService/GetTreePathForPageInPortalGroup";
                PageList.Services.SortTreeMethod = "ItemListService/SortPagesInPortalGroup";
            }

            PageList.UndefinedItem = new ListItem(DynamicSharedConstants.Unspecified, string.Empty);
            PageList.OnClientSelectionChanged.Add("dnn.controlBar.ControlBar_Module_PageList_Changed");
            return multipleSites;
        }]]></body>
          </codeblock>
        </method>
        <method name="LoadVisibilityList">
          <declaration><![CDATA[private void LoadVisibilityList()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="820" sc="9" el="828" ec="10">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="ee9514b24d2b91f857b947a27669a8ab"><![CDATA[{ 
            var items = new Dictionary<string, string> { { "0", GetString("PermissionView") }, { "1", GetString("PermissionEdit") } };

            VisibilityLst.Items.Clear();
            VisibilityLst.DataValueField = "key";
            VisibilityLst.DataTextField = "value";
            VisibilityLst.DataSource = items;
            VisibilityLst.DataBind();
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="121" sc="9" el="134" ec="10">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="00a3718334e39b9d7d263d3e116dfcef"><![CDATA[{
            base.OnInit(e);

            //page will be null if the control panel initial twice, it will be removed in the second time.
            if (Page != null)
            {
                ID = "ControlBar";

                FileUploader = new DnnFileUpload {ID = "fileUploader", SupportHost = false};
                Page.Form.Controls.Add(FileUploader);

                LoadCustomMenuItems();
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="137" sc="9" el="177" ec="4">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="61d95f7d6c874e32a200f48d11deec60"><![CDATA[{           
            base.OnLoad(e);

            if (PortalSettings.EnablePopUps && Host.EnableModuleOnLineHelp)
            {
                helpLink.Text = string.Format(@"<li><a href=""{0}"">{1}</a></li>", UrlUtils.PopUpUrl(Host.HelpURL, this, PortalSettings, false, false), GetString("Tool.Help.ToolTip"));
            }
            else if (Host.EnableModuleOnLineHelp)
            {
                helpLink.Text = string.Format(@"<li><a href=""{0}"" target=""_blank"">{1}</a></li>", Host.HelpURL, GetString("Tool.Help.ToolTip"));
            }

            LoginUrl = ResolveClientUrl(@"~/Login.aspx");

            if (ControlPanel.Visible && IncludeInControlHierarchy)
            {
                ClientResourceManager.RegisterStyleSheet(Page, "~/admin/ControlPanel/ControlBar.css", FileOrder.Css.ResourceCss);
                JavaScript.RequestRegistration(CommonJs.DnnPlugins);
                ClientResourceManager.RegisterScript(Page, "~/resources/shared/scripts/dnn.controlBar.js");

                // Is there more than one site in this group?
                var multipleSites = GetCurrentPortalsGroup().Count() > 1;
                ClientAPI.RegisterClientVariable(Page, "moduleSharing", multipleSites.ToString().ToLowerInvariant(), true);
            }

            ServicesFramework.Instance.RequestAjaxAntiForgerySupport();
            var multipleSite = false;

            conrolbar_logo.ImageUrl = ControlBarController.Instance.GetControlBarLogoURL();
            if (!IsPostBack)
            {
                LoadCategoryList();
                multipleSite = LoadSiteList();
                LoadVisibilityList();
                AutoSetUserMode();
	            BindPortalsList();
	            BindLanguagesList();
            }

            LoadTabModuleMessage = multipleSite ? GetString("LoadingTabModuleCE.Text") : GetString("LoadingTabModule.Text");
		}]]></body>
          </codeblock>
        </method>
        <method name="PreviewPopup">
          <declaration><![CDATA[protected string PreviewPopup()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="230" sc="3" el="242" ec="4">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="e1c34fc2b127819e1c69921678c82dd4"><![CDATA[{
			var previewUrl = string.Format("{0}/Default.aspx?ctl={1}&previewTab={2}&TabID={2}", 
										Globals.AddHTTP(PortalSettings.PortalAlias.HTTPAlias), 
										"MobilePreview",
										PortalSettings.ActiveTab.TabID);

			if(PortalSettings.EnablePopUps)
			{
				return UrlUtils.PopUpUrl(previewUrl, this, PortalSettings, true, false, 660, 800);
			}

            return string.Format("location.href = \"{0}\"", previewUrl);
		}]]></body>
          </codeblock>
        </method>
        <method name="SetLanguage">
          <declaration><![CDATA[private void SetLanguage(bool update, string currentCulture)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="904" sc="9" el="909" ec="10">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="7482ef6aae1575fc7201570519345524"><![CDATA[{
            if (update)
            {
                Personalization.SetProfile("Usability", "UICulture", currentCulture);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="SetLastPageHistory">
          <declaration><![CDATA[private void SetLastPageHistory(string pageId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="890" sc="9" el="892" ec="10">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="a996e1498d9d7d116ff5ff2790bcaff3"><![CDATA[{
            Response.Cookies.Add(new HttpCookie("LastPageId", pageId) { Path = (!string.IsNullOrEmpty(Globals.ApplicationPath) ? Globals.ApplicationPath : "/") });
        }]]></body>
          </codeblock>
        </method>
        <method name="ShowSwitchLanguagesPanel">
          <declaration><![CDATA[protected bool ShowSwitchLanguagesPanel()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="695" sc="9" el="719" ec="10">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="c1cf4c0455021c7083eeeb7433264d65"><![CDATA[{
             if (PortalSettings.AllowUserUICulture && PortalSettings.ContentLocalizationEnabled)
             {
                 if (CurrentUICulture == null)
                 {
                     object oCulture = Personalization.GetProfile("Usability", "UICulture");

                     if (oCulture != null)
                     {
                         CurrentUICulture = oCulture.ToString();
                     }
                     else
                     {
                         var l = new Localization();
                         CurrentUICulture = l.CurrentUICulture;
                     }
                 }

                 IEnumerable<ListItem> cultureListItems = Localization.LoadCultureInListItems(CultureDropDownTypes.NativeName, CurrentUICulture, "", false);
                 return cultureListItems.Count() > 1;
             }

            return false;

        }]]></body>
          </codeblock>
        </method>
        <method name="SpecialClassWhenNotInViewMode">
          <declaration><![CDATA[protected string SpecialClassWhenNotInViewMode()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="744" sc="9" el="746" ec="10">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="634b90e6be71c61a71f26e72a133dd4f"><![CDATA[{
            return UserMode == PortalSettings.Mode.View ? string.Empty : "controlBar_editPageInEditMode";
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_adminAdvancedTabs">
          <declaration><![CDATA[private List<TabInfo> _adminAdvancedTabs;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_adminBaseTabs">
          <declaration><![CDATA[private List<TabInfo> _adminBaseTabs;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_adminBookmarkItems">
          <declaration><![CDATA[private List<string> _adminBookmarkItems;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_adminCommonTabs">
          <declaration><![CDATA[private readonly IList<string> _adminCommonTabs = new List<string>]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_adminTabs">
          <declaration><![CDATA[private List<TabInfo> _adminTabs;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_hostAdvancedTabs">
          <declaration><![CDATA[private List<TabInfo> _hostAdvancedTabs;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_hostBaseTabs">
          <declaration><![CDATA[private List<TabInfo> _hostBaseTabs;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_hostBookmarkItems">
          <declaration><![CDATA[private List<string> _hostBookmarkItems;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_hostCommonTabs">
          <declaration><![CDATA[private readonly IList<string> _hostCommonTabs = new List<string>]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_hostTabs">
          <declaration><![CDATA[private List<TabInfo> _hostTabs;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="CategoryList">
          <declaration><![CDATA[protected DnnComboBox CategoryList;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="conrolbar_logo">
          <declaration><![CDATA[protected Image conrolbar_logo;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="controlBar_SwitchLanguage">
          <declaration><![CDATA[protected DnnComboBox controlBar_SwitchLanguage;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="controlBar_SwitchSite">
          <declaration><![CDATA[protected DnnComboBox controlBar_SwitchSite;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ControlPanel">
          <declaration><![CDATA[protected Panel ControlPanel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="CustomMenuItems">
          <declaration><![CDATA[protected HtmlGenericControl CustomMenuItems;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="FileUploader">
          <declaration><![CDATA[protected DnnFileUpload FileUploader;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="helpLink">
          <declaration><![CDATA[protected Literal helpLink;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="PageList">
          <declaration><![CDATA[protected DnnPageDropDownList PageList;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="VisibilityLst">
          <declaration><![CDATA[protected DnnComboBox VisibilityLst;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="AdminAdvancedTabs">
          <declaration><![CDATA[protected List<TabInfo> AdminAdvancedTabs]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1001" sc="13" el="1007" ec="14">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="e7899031575e1f68507da7b72de7c227"><![CDATA[{
                if (_adminAdvancedTabs == null)
                {
                    GetAdminTabs();
                }
                return _adminAdvancedTabs;
            }]]></body>
          </codeblock>
        </property>
        <property name="AdminBaseTabs">
          <declaration><![CDATA[protected List<TabInfo> AdminBaseTabs]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="989" sc="13" el="995" ec="14">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="12f7458fc222216c0487b41367d98527"><![CDATA[{
                if (_adminBaseTabs == null)
                {
                    GetAdminTabs();
                }
                return _adminBaseTabs;
            }]]></body>
          </codeblock>
        </property>
        <property name="AdminBookmarkItems">
          <declaration><![CDATA[protected List<string> AdminBookmarkItems]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="947" sc="13" el="958" ec="14">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="90b4d6db04403c75a4b9bfd143e69ef9"><![CDATA[{
                if (_adminBookmarkItems == null)
                {
                    var bookmarkItems = Personalization.GetProfile("ControlBar", "admin" + PortalSettings.PortalId);

                    _adminBookmarkItems = bookmarkItems != null 
                                                ? bookmarkItems.ToString().Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries).ToList() 
                                                : new List<string>();
                }

                return _adminBookmarkItems;
            }]]></body>
          </codeblock>
        </property>
        <property name="BookmarkedModuleKeys">
          <declaration><![CDATA[protected string BookmarkedModuleKeys]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="98" sc="13" el="105" ec="14">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="722d224ae24128939269ce121e018cdf"><![CDATA[{
                var bookmarkModules = Personalization.GetProfile("ControlBar", "module" + PortalSettings.PortalId);
                if (bookmarkModules == null)
                {
                    return string.Empty;
                }
                return bookmarkModules.ToString();
            }]]></body>
          </codeblock>
        </property>
        <property name="BookmarkModuleCategory">
          <declaration><![CDATA[protected string BookmarkModuleCategory]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="90" sc="13" el="92" ec="14">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="565f8b52a6103b3b91f21b265b47dd2d"><![CDATA[{
                return ControlBarController.Instance.GetBookmarkCategory(PortalSettings.PortalId);
            }]]></body>
          </codeblock>
        </property>
        <property name="CurrentUICulture">
          <declaration><![CDATA[protected string CurrentUICulture]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="81" sc="45" el="81" ec="49">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="81" sc="50" el="81" ec="54">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="HostAdvancedTabs">
          <declaration><![CDATA[protected List<TabInfo> HostAdvancedTabs]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1025" sc="13" el="1031" ec="14">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="6d86c8f9b494b21449af27f17d221837"><![CDATA[{
                if (_hostAdvancedTabs == null)
                {
                    GetHostTabs();
                }
                return _hostAdvancedTabs;
            }]]></body>
          </codeblock>
        </property>
        <property name="HostBaseTabs">
          <declaration><![CDATA[protected List<TabInfo> HostBaseTabs]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1013" sc="13" el="1019" ec="14">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="40b14b0a8d96cb9b293052ca0b74827c"><![CDATA[{
                if (_hostBaseTabs == null)
                {
                    GetHostTabs();
                }
                return _hostBaseTabs;
            }]]></body>
          </codeblock>
        </property>
        <property name="HostBookmarkItems">
          <declaration><![CDATA[protected List<string> HostBookmarkItems]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="965" sc="13" el="976" ec="14">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="bea4b39ce940b491c3eeb7482448bf7a"><![CDATA[{
                if(_hostBookmarkItems == null)
                {
                    var bookmarkItems = Personalization.GetProfile("ControlBar", "host" + PortalSettings.PortalId);

                    _hostBookmarkItems = bookmarkItems != null 
                                            ? bookmarkItems.ToString().Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries).ToList() 
                                            : new List<string>();
                }

                return _hostBookmarkItems;
            }]]></body>
          </codeblock>
        </property>
        <property name="IncludeInControlHierarchy">
          <declaration><![CDATA[public override bool IncludeInControlHierarchy]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="113" sc="13" el="115" ec="14">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="e7cc16b1f7b9e1d432277ecc0e8314d8"><![CDATA[{
                return base.IncludeInControlHierarchy && (IsPageAdmin() || IsModuleAdmin());
            }]]></body>
          </codeblock>
        </property>
        <property name="IsDockable">
          <declaration><![CDATA[public override bool IsDockable]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="108" sc="43" el="108" ec="47">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="108" sc="48" el="108" ec="52">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="LoadTabModuleMessage">
          <declaration><![CDATA[protected string LoadTabModuleMessage]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="85" sc="49" el="85" ec="53">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="85" sc="54" el="85" ec="58">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="LocalResourceFile">
          <declaration><![CDATA[private new string LocalResourceFile]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="782" sc="13" el="784" ec="14">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="a61fe5ae6a6c71e43aff88d04c647666"><![CDATA[{
                return string.Format("{0}/{1}/{2}.ascx.resx", TemplateSourceDirectory, Localization.LocalResourceDirectory, GetType().BaseType.Name);
            }]]></body>
          </codeblock>
        </property>
        <property name="LoginUrl">
          <declaration><![CDATA[protected string LoginUrl]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="83" sc="37" el="83" ec="41">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="83" sc="42" el="83" ec="46">admin\ControlPanel\ControlBar.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="RibbonBar">
      <declaration><![CDATA[public class RibbonBar : ControlPanelBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public RibbonBar()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="ddlMode_SelectedIndexChanged">
          <declaration><![CDATA[protected void ddlMode_SelectedIndexChanged(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="342" sc="3" el="349" ec="4">admin\ControlPanel\RibbonBar.ascx.cs</location>
            <body hash="320175ee0dc6c071880f6f57a6daa270"><![CDATA[{
			if (Page.IsCallback)
			{
				return;
			}
			SetMode(true);
			Response.Redirect(Request.RawUrl, true);
		}]]></body>
          </codeblock>
        </method>
        <method name="ddlUICulture_SelectedIndexChanged">
          <declaration><![CDATA[private void ddlUICulture_SelectedIndexChanged(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="352" sc="3" el="359" ec="4">admin\ControlPanel\RibbonBar.ascx.cs</location>
            <body hash="1ad723039b827d4e3c4978280cf2a3bf"><![CDATA[{
			if (Page.IsCallback)
			{
				return;
			}
			SetLanguage(true);
			Response.Redirect(Request.RawUrl, true);
		}]]></body>
          </codeblock>
        </method>
        <method name="DetermineNodesToInclude">
          <declaration><![CDATA[protected void DetermineNodesToInclude(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="159" sc="9" el="166" ec="10">admin\ControlPanel\RibbonBar.ascx.cs</location>
            <body hash="d5b7dd7a0a5fceae1f9818adce019476"><![CDATA[{
            var skinObject = (Web.DDRMenu.SkinObject)sender;
            string admin = StripLocalizationPrefix(Localization.GetString("//Admin.String", Localization.GlobalResourceFile)).Trim();
            string host = StripLocalizationPrefix(Localization.GetString("//Host.String", Localization.GlobalResourceFile)).Trim();

            skinObject.IncludeNodes = admin + ", " + host;

        }]]></body>
          </codeblock>
        </method>
        <method name="GetButtonConfirmMessage">
          <declaration><![CDATA[protected string GetButtonConfirmMessage(string toolName)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="129" sc="9" el="156" ec="10">admin\ControlPanel\RibbonBar.ascx.cs</location>
            <body hash="cfc84d2fd193339ed36fa02a64844e45"><![CDATA[{
            if (toolName == "DeletePage")
            {
                return ClientAPI.GetSafeJSString(Localization.GetString("Tool.DeletePage.Confirm", LocalResourceFile));
            }

            if (toolName == "CopyPermissionsToChildren")
            {
                if (PortalSecurity.IsInRole("Administrators"))
                {
                    return ClientAPI.GetSafeJSString(Localization.GetString("Tool.CopyPermissionsToChildren.Confirm", LocalResourceFile));
                }

                return ClientAPI.GetSafeJSString(Localization.GetString("Tool.CopyPermissionsToChildrenPageEditor.Confirm", LocalResourceFile));
            }

            if (toolName == "CopyDesignToChildren")
            {
                if (PortalSecurity.IsInRole("Administrators"))
                {
                    return ClientAPI.GetSafeJSString(Localization.GetString("Tool.CopyDesignToChildren.Confirm", LocalResourceFile));
                }

                return ClientAPI.GetSafeJSString(Localization.GetString("Tool.CopyDesignToChildrenPageEditor.Confirm", LocalResourceFile));
            }

            return string.Empty;
        }]]></body>
          </codeblock>
        </method>
        <method name="Localize">
          <declaration><![CDATA[private void Localize()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="68" sc="9" el="78" ec="10">admin\ControlPanel\RibbonBar.ascx.cs</location>
            <body hash="23c8ac363a0c2a4dff4a3b89edea248b"><![CDATA[{

            Control ctrl = AdminPanel.FindControl("SiteNewPage");
            if (((ctrl != null) && ctrl is DnnRibbonBarTool))
            {
                var toolCtrl = (DnnRibbonBarTool)ctrl;
                toolCtrl.Text = Localization.GetString("SiteNewPage", LocalResourceFile);
                toolCtrl.ToolTip = Localization.GetString("SiteNewPage.ToolTip", LocalResourceFile);
            }

        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="185" sc="9" el="189" ec="10">admin\ControlPanel\RibbonBar.ascx.cs</location>
            <body hash="e4522bd0e3103cda674ce675bf57d7ef"><![CDATA[{
            base.OnInit(e);

            ID = "RibbonBar";
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="192" sc="9" el="339" ec="4">admin\ControlPanel\RibbonBar.ascx.cs</location>
            <body hash="ced35773288ab87eb7e4bcacd7d31910"><![CDATA[{
            base.OnLoad(e);

			ddlMode.SelectedIndexChanged += ddlMode_SelectedIndexChanged;
			ddlUICulture.SelectedIndexChanged += ddlUICulture_SelectedIndexChanged;

            try
            {
                AdminPanel.Visible = false;
                AdvancedToolsPanel.Visible = false;

                if (ControlPanel.Visible && IncludeInControlHierarchy)
                {
                    ClientResourceManager.RegisterStyleSheet(this.Page, "~/admin/ControlPanel/module.css");
                    ClientResourceManager.RegisterScript(this.Page, "~/Resources/ControlPanel/ControlPanel.debug.js");
                }

				JavaScript.RequestRegistration(CommonJs.DnnPlugins);

                Control copyPageButton = CurrentPagePanel.FindControl("CopyPage");
                if ((copyPageButton != null))
                {
                    copyPageButton.Visible = LocaleController.Instance.IsDefaultLanguage(LocaleController.Instance.GetCurrentLocale(PortalSettings.PortalId).Code);
                }


                if ((Request.IsAuthenticated))
                {
                    UserInfo user = UserController.Instance.GetCurrentUserInfo();
                    if (((user != null)))
                    {
                        bool isAdmin = user.IsInRole(PortalSettings.Current.AdministratorRoleName);
                        AdminPanel.Visible = isAdmin;
                    }
                }

				if (IsPageAdmin())
				{
					ControlPanel.Visible = true;
					BodyPanel.Visible = true;

                    if ((DotNetNukeContext.Current.Application.Name == "DNNCORP.CE"))
                    {
                        //Hide Support icon in CE
                        AdminPanel.FindControl("SupportTickets").Visible = false;
                    }
                    else
                    {
                        //Show PE/XE tools
                        AdvancedToolsPanel.Visible = true;
                    }

                    Localize();

					if (!Page.IsPostBack)
					{
						UserInfo objUser = UserController.Instance.GetCurrentUserInfo();
						if ((objUser != null))
						{
							if (objUser.IsSuperUser)
							{
								hypMessage.ImageUrl = Upgrade.UpgradeIndicator(DotNetNukeContext.Current.Application.Version, Request.IsLocal, Request.IsSecureConnection);
								if (!string.IsNullOrEmpty(hypMessage.ImageUrl))
								{
									hypMessage.ToolTip = Localization.GetString("hypUpgrade.Text", LocalResourceFile);
									hypMessage.NavigateUrl = Upgrade.UpgradeRedirect();
								}
							}
							else
							{
								if (PortalSecurity.IsInRole(PortalSettings.AdministratorRoleName) && Host.DisplayCopyright)
								{
									hypMessage.ImageUrl = "~/images/branding/iconbar_logo.png";
									hypMessage.ToolTip = DotNetNukeContext.Current.Application.Description;
									hypMessage.NavigateUrl = Localization.GetString("hypMessageUrl.Text", LocalResourceFile);
								}
								else
								{
									hypMessage.Visible = false;
								}

                                if (!TabPermissionController.CanAddContentToPage())
                                {
                                    CommonTasksPanel.Visible = false;
                                }
							}
							if (PortalSettings.AllowUserUICulture)
							{
								object oCulture = DotNetNuke.Services.Personalization.Personalization.GetProfile("Usability", "UICulture");
								string currentCulture;
								if (oCulture != null)
								{
									currentCulture = oCulture.ToString();
								}
								else
								{
									Localization l = new Localization();
									currentCulture = l.CurrentUICulture;
								}
								//Localization.LoadCultureDropDownList(ddlUICulture, CultureDropDownTypes.NativeName, currentCulture);
                                IEnumerable<ListItem> cultureListItems = Localization.LoadCultureInListItems(CultureDropDownTypes.NativeName, currentCulture, "", false);
                                foreach (var cultureItem in cultureListItems)
                                {
                                    ddlUICulture.AddItem(cultureItem.Text, cultureItem.Value);
                                }

                                var selectedCultureItem = ddlUICulture.FindItemByValue(currentCulture);
                                if (selectedCultureItem != null)
                                {
                                    selectedCultureItem.Selected = true;
                                }

								//only show language selector if more than one language
								if (ddlUICulture.Items.Count > 1)
								{
									lblUILanguage.Visible = true;
									ddlUICulture.Visible = true;

									if (oCulture == null)
									{
										SetLanguage(true);
									}
								}
							}
						}
						SetMode(false);
					}
				}
				else if (IsModuleAdmin())
				{
					ControlPanel.Visible = true;
					BodyPanel.Visible = false;
					adminMenus.Visible = false;
					if (!Page.IsPostBack)
					{
						SetMode(false);
					}
				}
				else
				{
					ControlPanel.Visible = false;
				}
			}
			catch (Exception exc)
			{
				Exceptions.ProcessModuleLoadException(this, exc);
			}
		}]]></body>
          </codeblock>
        </method>
        <method name="PreviewPopup">
          <declaration><![CDATA[protected string PreviewPopup()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="366" sc="3" el="380" ec="4">admin\ControlPanel\RibbonBar.ascx.cs</location>
            <body hash="4bd7daad4b69db14b5443532c6ada479"><![CDATA[{
			var previewUrl = string.Format("{0}/Default.aspx?ctl={1}&previewTab={2}&TabID={2}", 
										Globals.AddHTTP(PortalSettings.PortalAlias.HTTPAlias), 
										"MobilePreview",
										PortalSettings.ActiveTab.TabID);

			if(PortalSettings.EnablePopUps)
			{
				return UrlUtils.PopUpUrl(previewUrl, this, PortalSettings, true, false, 660, 800);
			}
			else
			{
				return string.Format("location.href = \"{0}\"", previewUrl);
			}
		}]]></body>
          </codeblock>
        </method>
        <method name="RemoveModeDropDownItem">
          <declaration><![CDATA[private void RemoveModeDropDownItem(string value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="112" sc="9" el="118" ec="10">admin\ControlPanel\RibbonBar.ascx.cs</location>
            <body hash="a7dd0fd76cb28f1e36b5154f62d679a8"><![CDATA[{
            var item = ddlMode.FindItemByValue(value);
            if (item != null)
            {
                ddlMode.Items.Remove(item);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="SetLanguage">
          <declaration><![CDATA[private void SetLanguage(bool update)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="121" sc="3" el="126" ec="4">admin\ControlPanel\RibbonBar.ascx.cs</location>
            <body hash="64bbe0ef57a99bd1f8a73829a7032cc6"><![CDATA[{
			if (update)
			{
				DotNetNuke.Services.Personalization.Personalization.SetProfile("Usability", "UICulture", ddlUICulture.SelectedValue);
			}
		}]]></body>
          </codeblock>
        </method>
        <method name="SetMode">
          <declaration><![CDATA[private void SetMode(bool update)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="81" sc="9" el="109" ec="10">admin\ControlPanel\RibbonBar.ascx.cs</location>
            <body hash="4f33d6cbf608fe0f2b9ddee5c2fea168"><![CDATA[{
            if (update)
            {
                SetUserMode(ddlMode.SelectedValue);
            }

            if (!TabPermissionController.CanAddContentToPage())
            {
                RemoveModeDropDownItem("LAYOUT");
            }

            if (!(new PreviewProfileController().GetProfilesByPortal(this.PortalSettings.PortalId).Count > 0))
            {
                RemoveModeDropDownItem("PREVIEW");
            }

            switch (UserMode)
            {
                case PortalSettings.Mode.View:
                    ddlMode.FindItemByValue("VIEW").Selected = true;
                    break;
                case PortalSettings.Mode.Edit:
                    ddlMode.FindItemByValue("EDIT").Selected = true;
                    break;
                case PortalSettings.Mode.Layout:
                    ddlMode.FindItemByValue("LAYOUT").Selected = true;
                    break;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="StripLocalizationPrefix">
          <declaration><![CDATA[private string StripLocalizationPrefix(string s)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="169" sc="9" el="178" ec="10">admin\ControlPanel\RibbonBar.ascx.cs</location>
            <body hash="d0865f1d9e15510978173ed763b3c898"><![CDATA[{
            const string prefix = "[L]";

            if (s.StartsWith(prefix))
            {
                return s.Substring(prefix.Length);
            }

            return s;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="AddMod">
          <declaration><![CDATA[protected AddModule AddMod;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="AddPage">
          <declaration><![CDATA[protected AddPage AddPage;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="adminMenus">
          <declaration><![CDATA[protected SkinObject adminMenus;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="AdminPanel">
          <declaration><![CDATA[protected Panel AdminPanel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="AdvancedToolsPanel">
          <declaration><![CDATA[protected Panel AdvancedToolsPanel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="BodyPanel">
          <declaration><![CDATA[protected HtmlGenericControl BodyPanel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ClearCache">
          <declaration><![CDATA[protected DnnRibbonBarTool ClearCache;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="CommonTasksPanel">
          <declaration><![CDATA[protected Panel CommonTasksPanel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ControlPanel">
          <declaration><![CDATA[protected Panel ControlPanel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="CopyDesignToChildren">
          <declaration><![CDATA[protected DnnRibbonBarTool CopyDesignToChildren;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="CopyPage">
          <declaration><![CDATA[protected DnnRibbonBarTool CopyPage;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="CopyPermissionsToChildren">
          <declaration><![CDATA[protected DnnRibbonBarTool CopyPermissionsToChildren;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="CurrentPagePanel">
          <declaration><![CDATA[protected Panel CurrentPagePanel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="CurrentTabActions">
          <declaration><![CDATA[protected DnnLiteral CurrentTabActions;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="CurrentTabAddPage">
          <declaration><![CDATA[protected DnnLiteral CurrentTabAddPage;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="CurrentTabCopyToChildren">
          <declaration><![CDATA[protected DnnLiteral CurrentTabCopyToChildren;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="CurrentTabEditPage">
          <declaration><![CDATA[protected DnnLiteral CurrentTabEditPage;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="CurrentTabHelp">
          <declaration><![CDATA[protected DnnLiteral CurrentTabHelp;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ddlMode">
          <declaration><![CDATA[protected DnnComboBox ddlMode;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ddlUICulture">
          <declaration><![CDATA[protected DnnComboBox ddlUICulture;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="DeletePage">
          <declaration><![CDATA[protected DnnRibbonBarTool DeletePage;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="EditCurrentSettings">
          <declaration><![CDATA[protected DnnRibbonBarTool EditCurrentSettings;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="EditPage">
          <declaration><![CDATA[protected UpdatePage EditPage;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ExportPage">
          <declaration><![CDATA[protected DnnRibbonBarTool ExportPage;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Help">
          <declaration><![CDATA[protected DnnRibbonBarTool Help;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="hypMessage">
          <declaration><![CDATA[protected HyperLink hypMessage;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ImpersonateUser">
          <declaration><![CDATA[protected DnnRibbonBarTool ImpersonateUser;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ImportPage">
          <declaration><![CDATA[protected DnnRibbonBarTool ImportPage;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="IntegrityChecker">
          <declaration><![CDATA[protected DnnRibbonBarTool IntegrityChecker;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblMode">
          <declaration><![CDATA[protected Label lblMode;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblUILanguage">
          <declaration><![CDATA[protected Label lblUILanguage;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="NewPage">
          <declaration><![CDATA[protected DnnRibbonBarTool NewPage;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="NewRole">
          <declaration><![CDATA[protected DnnRibbonBarTool NewRole;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="NewUser">
          <declaration><![CDATA[protected DnnRibbonBarTool NewUser;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="RecycleApp">
          <declaration><![CDATA[protected DnnRibbonBarTool RecycleApp;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="SiteTabManage">
          <declaration><![CDATA[protected DnnLiteral SiteTabManage;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="SupportTickets">
          <declaration><![CDATA[protected DnnRibbonBarTool SupportTickets;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="SwitchSite">
          <declaration><![CDATA[protected SwitchSite SwitchSite;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="SystemTabSwitchSite">
          <declaration><![CDATA[protected DnnLiteral SystemTabSwitchSite;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="SystemTabTools">
          <declaration><![CDATA[protected DnnLiteral SystemTabTools;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="UploadFile">
          <declaration><![CDATA[protected DnnRibbonBarTool UploadFile;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="WebServerManager">
          <declaration><![CDATA[protected DnnRibbonBarTool WebServerManager;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="IncludeInControlHierarchy">
          <declaration><![CDATA[public override bool IncludeInControlHierarchy]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="59" sc="13" el="61" ec="14">admin\ControlPanel\RibbonBar.ascx.cs</location>
            <body hash="e7cc16b1f7b9e1d432277ecc0e8314d8"><![CDATA[{
                return base.IncludeInControlHierarchy && (IsPageAdmin() || IsModuleAdmin());
            }]]></body>
          </codeblock>
        </property>
        <property name="IsDockable">
          <declaration><![CDATA[public override bool IsDockable]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="54" sc="43" el="54" ec="47">admin\ControlPanel\RibbonBar.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="54" sc="48" el="54" ec="52">admin\ControlPanel\RibbonBar.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="DotNetNuke.UI.Skins.Controls">
    <class name="BreadCrumb">
      <declaration><![CDATA[public class BreadCrumb : SkinObjectBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private string _separator = "<img alt=\"breadcrumb separator\" src=\"" + Globals.ApplicationPath + "/images/breadcrumb.gif\">";]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="42" sc="9" el="48" ec="46">admin\Skins\BreadCrumb.ascx.cs</location>
            <body hash="7ff8f05f3846359e5c94b6bb1e9311ae"><![CDATA[private string _separator = "<img alt=\"breadcrumb separator\" src=\"" + Globals.ApplicationPath + "/images/breadcrumb.gif\">";
        private string _cssClass = "SkinObject";
        private int _rootLevel = 0;
        private bool _showRoot = false;
        private readonly StringBuilder _breadcrumb = new StringBuilder("<span itemscope itemtype=\"http://schema.org/BreadcrumbList\">");
        private string _homeUrl = "";
        private string _homeTabName = "Root";]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="107" sc="9" el="209" ec="10">admin\Skins\BreadCrumb.ascx.cs</location>
            <body hash="f8b527941a87a1544405d61a5ef8c75b"><![CDATA[{
            base.OnLoad(e);

            // Position in breadcrumb list
            var position = 1;

            //resolve image path in separator content
            ResolveSeparatorPaths();

            // If we have enabled hiding when there are no breadcrumbs, simply return
            if (HideWithNoBreadCrumb && PortalSettings.ActiveTab.BreadCrumbs.Count == (_rootLevel + 1))
            {
                return;
            }

            // Without checking if the current tab is the home tab, we would duplicate the root tab
            if (_showRoot && PortalSettings.ActiveTab.TabID != PortalSettings.HomeTabId)
            {
                // Add the current protocal to the current URL
                _homeUrl = Globals.AddHTTP(PortalSettings.PortalAlias.HTTPAlias);

                // Make sure we have a home tab ID set
                if (PortalSettings.HomeTabId != -1)
                {
                    _homeUrl = Globals.NavigateURL(PortalSettings.HomeTabId);

                    var tc = new TabController();
                    var homeTab = tc.GetTab(PortalSettings.HomeTabId, PortalSettings.PortalId, false);
                    _homeTabName = homeTab.LocalizedTabName;

                    // Check if we should use the tab's title instead
                    if (UseTitle && !string.IsNullOrEmpty(homeTab.Title))
                    {
                        _homeTabName = homeTab.Title;
                    }
                }

                // Append all of the HTML for the root breadcrumb
                _breadcrumb.Append("<span itemprop=\"itemListElement\" itemscope itemtype=\"http://schema.org/ListItem\">");
                _breadcrumb.Append("<a href=\"" + _homeUrl + "\" class=\"" + _cssClass + "\" itemprop=\"item\" ><span itemprop=\"name\">" + _homeTabName + "</span></a>");
                _breadcrumb.Append("<meta itemprop=\"position\" content=\"" + position++ + "\" />"); // Notice we post-increment the position variable
                _breadcrumb.Append("</span>");

                // Add a separator
                _breadcrumb.Append(_separator);
            }

            //process bread crumbs
            for (var i = _rootLevel; i < PortalSettings.ActiveTab.BreadCrumbs.Count; ++i)
            {
                // Only add separators if we're past the root level
                if (i > _rootLevel)
                {
                    _breadcrumb.Append(_separator);
                }

                // Grab the current tab
                var tab = (TabInfo)PortalSettings.ActiveTab.BreadCrumbs[i];

                var tabName = tab.LocalizedTabName;

                // Determine if we should use the tab's title instead of tab name
                if (UseTitle && !string.IsNullOrEmpty(tab.Title))
                {
                    tabName = tab.Title;
                }

                // Get the absolute URL of the tab
                var tabUrl = tab.FullUrl;

                // 
                if (ProfileUserId > -1)
                {
                    tabUrl = Globals.NavigateURL(tab.TabID, "", "UserId=" + ProfileUserId);
                }

                // 
                if (GroupId > -1)
                {
                    tabUrl = Globals.NavigateURL(tab.TabID, "", "GroupId=" + GroupId);
                }

                // Begin breadcrumb
                _breadcrumb.Append("<span itemprop=\"itemListElement\" itemscope itemtype=\"http://schema.org/ListItem\">");

                // Is this tab disabled? If so, only render the text
                if (tab.DisableLink)
                {
                    _breadcrumb.Append("<span class=\"" + _cssClass + "\" itemprop=\"name\">" + tabName + "</span>");
                }
                else
                {
                    _breadcrumb.Append("<a href=\"" + tabUrl + "\" class=\"" + _cssClass + "\" itemprop=\"item\"><span itemprop=\"name\">" + tabName + "</span></a>");
                }

                _breadcrumb.Append("<meta itemprop=\"position\" content=\"" + position++ + "\" />"); // Notice we post-increment the position variable
                _breadcrumb.Append("</span>");
            }

            _breadcrumb.Append("</span>"); //End of BreadcrumbList
            
            lblBreadCrumb.Text = _breadcrumb.ToString();
        }]]></body>
          </codeblock>
        </method>
        <method name="ResolveSeparatorPaths">
          <declaration><![CDATA[private void ResolveSeparatorPaths()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="212" sc="9" el="258" ec="10">admin\Skins\BreadCrumb.ascx.cs</location>
            <body hash="26812f9975ef86fef2e184f01715ae1b"><![CDATA[{
            if (string.IsNullOrEmpty(_separator))
            {
                return;
            }

            var urlMatches = Regex.Matches(_separator, UrlRegex, RegexOptions.IgnoreCase);
            if (urlMatches.Count > 0)
            {
                foreach (Match match in urlMatches)
                {
                    var url = match.Groups[3].Value;
                    var changed = false;

                    if (url.StartsWith("/"))
                    {
                        if (!string.IsNullOrEmpty(Globals.ApplicationPath))
                        {
                            url = string.Format("{0}{1}", Globals.ApplicationPath, url);
                            changed = true;
                        }
                    }
                    else if (url.StartsWith("~/"))
                    {
                        url = Globals.ResolveUrl(url);
                        changed = true;
                    }
                    else
                    {
                        url = string.Format("{0}{1}", PortalSettings.ActiveTab.SkinPath, url);
                        changed = true;
                    }

                    if (changed)
                    {
                        var newMatch = string.Format("{0}={1}{2}{3}", 
                                                        match.Groups[1].Value, 
                                                        match.Groups[2].Value, 
                                                        url,
                                                        match.Groups[4].Value);

                        _separator = _separator.Replace(match.Value, newMatch);
                    }
                }

            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_breadcrumb">
          <declaration><![CDATA[private readonly StringBuilder _breadcrumb = new StringBuilder("<span itemscope itemtype=\"http://schema.org/BreadcrumbList\">");]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_cssClass">
          <declaration><![CDATA[private string _cssClass = "SkinObject";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_homeTabName">
          <declaration><![CDATA[private string _homeTabName = "Root";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_homeUrl">
          <declaration><![CDATA[private string _homeUrl = "";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_rootLevel">
          <declaration><![CDATA[private int _rootLevel = 0;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_separator">
          <declaration><![CDATA[private string _separator = "<img alt=\"breadcrumb separator\" src=\"" + Globals.ApplicationPath + "/images/breadcrumb.gif\">";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_showRoot">
          <declaration><![CDATA[private bool _showRoot = false;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblBreadCrumb">
          <declaration><![CDATA[protected Label lblBreadCrumb;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="UrlRegex">
          <declaration><![CDATA[private const string UrlRegex = "(href|src)=(\\\"|'|)(.[^\\\"']*)(\\\"|'|)";]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="CssClass">
          <declaration><![CDATA[public string CssClass]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="GroupId">
          <declaration><![CDATA[public int GroupId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="99" sc="13" el="103" ec="14">admin\Skins\BreadCrumb.ascx.cs</location>
            <body hash="b9029fe23c84236b996cc0dc2cc4a66e"><![CDATA[{
                return string.IsNullOrEmpty(Request.Params["GroupId"])
                    ? Null.NullInteger
                    : int.Parse(Request.Params["GroupId"]);
            }]]></body>
          </codeblock>
        </property>
        <property name="HideWithNoBreadCrumb">
          <declaration><![CDATA[public bool HideWithNoBreadCrumb]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="84" sc="44" el="84" ec="48">admin\Skins\BreadCrumb.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="84" sc="49" el="84" ec="53">admin\Skins\BreadCrumb.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ProfileUserId">
          <declaration><![CDATA[public int ProfileUserId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="89" sc="13" el="93" ec="14">admin\Skins\BreadCrumb.ascx.cs</location>
            <body hash="5c73d1d4a768fe3486d02a3e51828d3f"><![CDATA[{
                return string.IsNullOrEmpty(Request.Params["UserId"])
                    ? Null.NullInteger
                    : int.Parse(Request.Params["UserId"]);
            }]]></body>
          </codeblock>
        </property>
        <property name="RootLevel">
          <declaration><![CDATA[public string RootLevel]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="69" sc="13" el="77" ec="14">admin\Skins\BreadCrumb.ascx.cs</location>
            <body hash="dec89846a9c286277c287b080fe43cd4"><![CDATA[{
                _rootLevel = int.Parse(value);

                if (_rootLevel < 0)
                {
                    _showRoot = true;
                    _rootLevel = 0;
                }
            }]]></body>
          </codeblock>
        </property>
        <property name="Separator">
          <declaration><![CDATA[public string Separator]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="UseTitle">
          <declaration><![CDATA[public bool UseTitle]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="81" sc="32" el="81" ec="36">admin\Skins\BreadCrumb.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="81" sc="37" el="81" ec="41">admin\Skins\BreadCrumb.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="Copyright">
      <declaration><![CDATA[public class Copyright : SkinObjectBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public Copyright()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="42" sc="9" el="56" ec="10">admin\Skins\Copyright.ascx.cs</location>
            <body hash="3ef6beedd7a3311962a2806fb09bfcf7"><![CDATA[{
            base.OnLoad(e);
            if (!String.IsNullOrEmpty(CssClass))
            {
                lblCopyright.CssClass = CssClass;
            }
            if (!String.IsNullOrEmpty(PortalSettings.FooterText))
            {
                lblCopyright.Text = PortalSettings.FooterText.Replace("[year]", DateTime.Now.ToString("yyyy"));
            }
            else
            {
                lblCopyright.Text = string.Format(Localization.GetString("Copyright", Localization.GetResourceFile(this, MyFileName)), DateTime.Now.Year, PortalSettings.PortalName);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="lblCopyright">
          <declaration><![CDATA[protected Label lblCopyright;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="MyFileName">
          <declaration><![CDATA[private const string MyFileName = "Copyright.ascx";]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="CssClass">
          <declaration><![CDATA[public string CssClass]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="39" sc="34" el="39" ec="38">admin\Skins\Copyright.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="39" sc="39" el="39" ec="43">admin\Skins\Copyright.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="CurrentDate">
      <declaration><![CDATA[public class CurrentDate : SkinObjectBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public CurrentDate()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="InitializeComponent">
          <declaration><![CDATA[private void InitializeComponent()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="43" sc="9" el="44" ec="10">admin\Skins\CurrentDate.ascx.cs</location>
            <body hash="539fa760ca172337a931519768c64187"><![CDATA[{
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="47" sc="9" el="51" ec="10">admin\Skins\CurrentDate.ascx.cs</location>
            <body hash="5f3c8c20cc44d36b74ae4760af9b8276"><![CDATA[{
            base.OnInit(e);

            InitializeComponent();
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="54" sc="9" el="62" ec="10">admin\Skins\CurrentDate.ascx.cs</location>
            <body hash="0e5a4fcd503eaf8014830d565d1b15e9"><![CDATA[{
            base.OnLoad(e);
            if (!String.IsNullOrEmpty(CssClass))
            {
                lblDate.CssClass = CssClass;
            }
            var user = UserController.Instance.GetCurrentUserInfo();
            lblDate.Text = !String.IsNullOrEmpty(DateFormat) ? user.LocalTime().ToString(DateFormat) : user.LocalTime().ToLongDateString();
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="lblDate">
          <declaration><![CDATA[protected Label lblDate;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="CssClass">
          <declaration><![CDATA[public string CssClass]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="38" sc="34" el="38" ec="38">admin\Skins\CurrentDate.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="38" sc="39" el="38" ec="43">admin\Skins\CurrentDate.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="DateFormat">
          <declaration><![CDATA[public string DateFormat]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="40" sc="36" el="40" ec="40">admin\Skins\CurrentDate.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="40" sc="41" el="40" ec="45">admin\Skins\CurrentDate.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnCssExclude">
      <declaration><![CDATA[public class DnnCssExclude : SkinObjectBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnCssExclude()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="14" sc="9" el="17" ec="10">admin\Skins\DnnCssExclude.ascx.cs</location>
            <body hash="5fcc1039af7ce4fe7828ac1e90f24acf"><![CDATA[{
            base.OnLoad(e);
            ctlExclude.Name = Name;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="ctlExclude">
          <declaration><![CDATA[protected DnnCssExclude ctlExclude;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="Name">
          <declaration><![CDATA[public string Name]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="11" sc="30" el="11" ec="34">admin\Skins\DnnCssExclude.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="11" sc="35" el="11" ec="39">admin\Skins\DnnCssExclude.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnCssInclude">
      <declaration><![CDATA[public class DnnCssInclude : SkinObjectBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnCssInclude()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="23" sc="9" el="35" ec="10">admin\Skins\DnnCssInclude.ascx.cs</location>
            <body hash="33de0ba9dcfb8a1c5314dfd875d22b7c"><![CDATA[{
            base.OnLoad(e);
            ctlInclude.AddTag = AddTag;
            ctlInclude.CssMedia = CssMedia;
            ctlInclude.FilePath = FilePath;
            ctlInclude.ForceBundle = ForceBundle;
            ctlInclude.ForceProvider = ForceProvider;
            ctlInclude.ForceVersion = ForceVersion;
            ctlInclude.Name = Name;
            ctlInclude.PathNameAlias = PathNameAlias;
            ctlInclude.Priority = Priority;
            ctlInclude.Version = Version;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="ctlInclude">
          <declaration><![CDATA[protected DnnCssInclude ctlInclude;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="AddTag">
          <declaration><![CDATA[public bool AddTag]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="15" sc="30" el="15" ec="34">admin\Skins\DnnCssInclude.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="15" sc="35" el="15" ec="39">admin\Skins\DnnCssInclude.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="CssMedia">
          <declaration><![CDATA[public CssMediaType CssMedia]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="11" sc="40" el="11" ec="44">admin\Skins\DnnCssInclude.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="11" sc="45" el="11" ec="49">admin\Skins\DnnCssInclude.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="FilePath">
          <declaration><![CDATA[public string FilePath]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="12" sc="34" el="12" ec="38">admin\Skins\DnnCssInclude.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="12" sc="39" el="12" ec="43">admin\Skins\DnnCssInclude.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ForceBundle">
          <declaration><![CDATA[public bool ForceBundle]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="20" sc="35" el="20" ec="39">admin\Skins\DnnCssInclude.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="20" sc="40" el="20" ec="44">admin\Skins\DnnCssInclude.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ForceProvider">
          <declaration><![CDATA[public string ForceProvider]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="19" sc="39" el="19" ec="43">admin\Skins\DnnCssInclude.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="19" sc="44" el="19" ec="48">admin\Skins\DnnCssInclude.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ForceVersion">
          <declaration><![CDATA[public bool ForceVersion]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="18" sc="36" el="18" ec="40">admin\Skins\DnnCssInclude.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="18" sc="41" el="18" ec="45">admin\Skins\DnnCssInclude.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Name">
          <declaration><![CDATA[public string Name]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="16" sc="30" el="16" ec="34">admin\Skins\DnnCssInclude.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="16" sc="35" el="16" ec="39">admin\Skins\DnnCssInclude.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="PathNameAlias">
          <declaration><![CDATA[public string PathNameAlias]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="13" sc="39" el="13" ec="43">admin\Skins\DnnCssInclude.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="13" sc="44" el="13" ec="48">admin\Skins\DnnCssInclude.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Priority">
          <declaration><![CDATA[public int Priority]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="14" sc="31" el="14" ec="35">admin\Skins\DnnCssInclude.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="14" sc="36" el="14" ec="40">admin\Skins\DnnCssInclude.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Version">
          <declaration><![CDATA[public string Version]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="17" sc="33" el="17" ec="37">admin\Skins\DnnCssInclude.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="17" sc="38" el="17" ec="42">admin\Skins\DnnCssInclude.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnJsExclude">
      <declaration><![CDATA[public class DnnJsExclude : SkinObjectBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnJsExclude()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="14" sc="9" el="17" ec="10">admin\Skins\DnnJsExclude.ascx.cs</location>
            <body hash="5fcc1039af7ce4fe7828ac1e90f24acf"><![CDATA[{
            base.OnLoad(e);
            ctlExclude.Name = Name;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="ctlExclude">
          <declaration><![CDATA[protected DnnJsExclude ctlExclude;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="Name">
          <declaration><![CDATA[public string Name]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="11" sc="30" el="11" ec="34">admin\Skins\DnnJsExclude.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="11" sc="35" el="11" ec="39">admin\Skins\DnnJsExclude.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnJsInclude">
      <declaration><![CDATA[public class DnnJsInclude : SkinObjectBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnJsInclude()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="22" sc="9" el="33" ec="10">admin\Skins\DnnJsInclude.ascx.cs</location>
            <body hash="ae78aafe8c1e066359868c58f46bd710"><![CDATA[{
            base.OnLoad(e);
            ctlInclude.AddTag = AddTag;
            ctlInclude.FilePath = FilePath;
            ctlInclude.ForceBundle = ForceBundle;
            ctlInclude.ForceProvider = ForceProvider;
            ctlInclude.ForceVersion = ForceVersion;
            ctlInclude.Name = Name;
            ctlInclude.PathNameAlias = PathNameAlias;
            ctlInclude.Priority = Priority;
            ctlInclude.Version = Version;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="ctlInclude">
          <declaration><![CDATA[protected DnnJsInclude ctlInclude;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="AddTag">
          <declaration><![CDATA[public bool AddTag]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="14" sc="30" el="14" ec="34">admin\Skins\DnnJsInclude.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="14" sc="35" el="14" ec="39">admin\Skins\DnnJsInclude.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="FilePath">
          <declaration><![CDATA[public string FilePath]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="11" sc="34" el="11" ec="38">admin\Skins\DnnJsInclude.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="11" sc="39" el="11" ec="43">admin\Skins\DnnJsInclude.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ForceBundle">
          <declaration><![CDATA[public bool ForceBundle]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="19" sc="35" el="19" ec="39">admin\Skins\DnnJsInclude.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="19" sc="40" el="19" ec="44">admin\Skins\DnnJsInclude.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ForceProvider">
          <declaration><![CDATA[public string ForceProvider]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="18" sc="39" el="18" ec="43">admin\Skins\DnnJsInclude.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="18" sc="44" el="18" ec="48">admin\Skins\DnnJsInclude.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ForceVersion">
          <declaration><![CDATA[public bool ForceVersion]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="17" sc="36" el="17" ec="40">admin\Skins\DnnJsInclude.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="17" sc="41" el="17" ec="45">admin\Skins\DnnJsInclude.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Name">
          <declaration><![CDATA[public string Name]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="15" sc="30" el="15" ec="34">admin\Skins\DnnJsInclude.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="15" sc="35" el="15" ec="39">admin\Skins\DnnJsInclude.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="PathNameAlias">
          <declaration><![CDATA[public string PathNameAlias]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="12" sc="39" el="12" ec="43">admin\Skins\DnnJsInclude.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="12" sc="44" el="12" ec="48">admin\Skins\DnnJsInclude.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Priority">
          <declaration><![CDATA[public int Priority]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="13" sc="31" el="13" ec="35">admin\Skins\DnnJsInclude.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="13" sc="36" el="13" ec="40">admin\Skins\DnnJsInclude.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Version">
          <declaration><![CDATA[public string Version]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="16" sc="33" el="16" ec="37">admin\Skins\DnnJsInclude.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="16" sc="38" el="16" ec="42">admin\Skins\DnnJsInclude.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnLink">
      <declaration><![CDATA[public class DnnLink : SkinObjectBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnLink()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="42" sc="9" el="94" ec="10">admin\Skins\DnnLink.ascx.cs</location>
            <body hash="1655c04529f6ca108f48e2334c90a97a"><![CDATA[{
            base.OnLoad(e);
            if (!string.IsNullOrEmpty(this.CssClass))
                aDnnLink.Attributes.Add("class",this.CssClass);

            if (!string.IsNullOrEmpty(Target))
                aDnnLink.Target = this.Target;
            //set home page link to community URL

            string url = "http://www.dnnsoftware.com/community?utm_source=dnn-install&utm_medium=web-link&utm_content=gravity-skin-link&utm_campaign=dnn-install";
            string utmTerm = "&utm_term=cms-by-dnn";
            string hostName = this.Request.Url.Host.ToLower().Replace("www.", "");
            int charPos = 0; string linkText= "CMS by DNN";
            if (hostName.Length > 0)
            {
                //convert first letter of hostname to int pos in alphabet
                charPos = char.ToUpper(hostName[0]) - 64;
            }
            //vary link by first letter of host name
            if (charPos <= 5)
            {
                linkText = "Open Source ASP.NET CMS by DNN"; 
                utmTerm = "&utm_term=open+source+asp.net+by+dnn";
            }
            if (charPos > 5 && charPos <= 10)
            {
                linkText = "DNN - .NET Open Source CMS"; 
                utmTerm = "&utm_term=dnn+.net+open+source+cms";
            }

            if (charPos > 10 && charPos <= 15)
            {
                linkText = "Web Content Management by DNN";
                utmTerm = "&utm_term=web+content+management+by+dnn";
            }

            if (charPos > 15 && charPos <= 20)
            {
                linkText = "DNN .NET CMS"; 
                utmTerm = "&utm_term=dnn+.net+cms";
            }

            if (charPos > 20 && charPos <= 25)
            {
                linkText = "WCM by DNN"; 
                utmTerm = "&utm_term=wcm+by+dnn";
            }
            

            aDnnLink.InnerText = linkText;
            aDnnLink.HRef = HttpUtility.HtmlEncode(url + utmTerm);

        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="aDnnLink">
          <declaration><![CDATA[protected HtmlAnchor aDnnLink;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="MyFileName">
          <declaration><![CDATA[private const string MyFileName = "DnnLink.ascx";]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="CssClass">
          <declaration><![CDATA[public string CssClass]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="39" sc="34" el="39" ec="38">admin\Skins\DnnLink.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="39" sc="39" el="39" ec="43">admin\Skins\DnnLink.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Target">
          <declaration><![CDATA[public string Target]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="40" sc="32" el="40" ec="36">admin\Skins\DnnLink.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="40" sc="37" el="40" ec="41">admin\Skins\DnnLink.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DotNetNukeControl">
      <declaration><![CDATA[public class DotNetNukeControl : SkinObjectBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DotNetNukeControl()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="InitializeComponent">
          <declaration><![CDATA[private void InitializeComponent()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="41" sc="9" el="42" ec="10">admin\Skins\DotNetNuke.ascx.cs</location>
            <body hash="539fa760ca172337a931519768c64187"><![CDATA[{
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="45" sc="9" el="49" ec="10">admin\Skins\DotNetNuke.ascx.cs</location>
            <body hash="5f3c8c20cc44d36b74ae4760af9b8276"><![CDATA[{
            base.OnInit(e);

            InitializeComponent();
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="52" sc="9" el="65" ec="10">admin\Skins\DotNetNuke.ascx.cs</location>
            <body hash="5de4d928a2bae1b015d5e137e83b2b9d"><![CDATA[{
            base.OnLoad(e);
            if (!String.IsNullOrEmpty(CssClass))
            {
                hypDotNetNuke.CssClass = CssClass;
            }
			
            //get Product Name and Legal Copyright from constants (Medium Trust)
            hypDotNetNuke.Text = DotNetNukeContext.Current.Application.LegalCopyright;
            hypDotNetNuke.NavigateUrl = DotNetNukeContext.Current.Application.Url;
            
			//show copyright credits?
			Visible = Host.DisplayCopyright;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="hypDotNetNuke">
          <declaration><![CDATA[protected HyperLink hypDotNetNuke;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="CssClass">
          <declaration><![CDATA[public string CssClass]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="38" sc="34" el="38" ec="38">admin\Skins\DotNetNuke.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="38" sc="39" el="38" ec="43">admin\Skins\DotNetNuke.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="Help">
      <declaration><![CDATA[public class Help : SkinObjectBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public Help()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="InitializeComponent">
          <declaration><![CDATA[private void InitializeComponent()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="44" sc="9" el="45" ec="10">admin\Skins\Help.ascx.cs</location>
            <body hash="539fa760ca172337a931519768c64187"><![CDATA[{
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="48" sc="9" el="52" ec="10">admin\Skins\Help.ascx.cs</location>
            <body hash="5f3c8c20cc44d36b74ae4760af9b8276"><![CDATA[{
            base.OnInit(e);

            InitializeComponent();
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="55" sc="9" el="83" ec="10">admin\Skins\Help.ascx.cs</location>
            <body hash="c54955cedfb7b3fb50f18065a070379f"><![CDATA[{
            base.OnLoad(e);
            try
            {
                if (!String.IsNullOrEmpty(CssClass))
                {
                    hypHelp.CssClass = CssClass;
                }
                if (Request.IsAuthenticated)
                {
                    if (TabPermissionController.CanAdminPage())
                    {
                        hypHelp.Text = Localization.GetString("Help");
                        hypHelp.NavigateUrl = "mailto:" + Host.HostEmail + "?subject=" + PortalSettings.PortalName + " Support Request";
                        hypHelp.Visible = true;
                    }
                    else
                    {
                        hypHelp.Text = Localization.GetString("Help");
                        hypHelp.NavigateUrl = "mailto:" + PortalSettings.Email + "?subject=" + PortalSettings.PortalName + " Support Request";
                        hypHelp.Visible = true;
                    }
                }
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="hypHelp">
          <declaration><![CDATA[protected HyperLink hypHelp;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="CssClass">
          <declaration><![CDATA[public string CssClass]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="41" sc="34" el="41" ec="38">admin\Skins\Help.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="41" sc="39" el="41" ec="43">admin\Skins\Help.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="HostName">
      <declaration><![CDATA[public class HostName : SkinObjectBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public HostName()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="InitializeComponent">
          <declaration><![CDATA[private void InitializeComponent()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="43" sc="9" el="44" ec="10">admin\Skins\HostName.ascx.cs</location>
            <body hash="539fa760ca172337a931519768c64187"><![CDATA[{
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="47" sc="9" el="51" ec="10">admin\Skins\HostName.ascx.cs</location>
            <body hash="5f3c8c20cc44d36b74ae4760af9b8276"><![CDATA[{
            base.OnInit(e);

            InitializeComponent();
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="54" sc="9" el="69" ec="10">admin\Skins\HostName.ascx.cs</location>
            <body hash="fd0bd83d23f685829ef1fcac280ab3f0"><![CDATA[{
            base.OnLoad(e);
            try
            {
                if (!String.IsNullOrEmpty(CssClass))
                {
                    hypHostName.CssClass = CssClass;
                }
                hypHostName.Text = Host.HostTitle;
                hypHostName.NavigateUrl = Globals.AddHTTP(Host.HostURL);
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="hypHostName">
          <declaration><![CDATA[protected HyperLink hypHostName;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="CssClass">
          <declaration><![CDATA[public string CssClass]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="40" sc="34" el="40" ec="38">admin\Skins\HostName.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="40" sc="39" el="40" ec="43">admin\Skins\HostName.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="JavaScriptLibraryInclude">
      <declaration><![CDATA[public class JavaScriptLibraryInclude : SkinObjectBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public JavaScriptLibraryInclude()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="37" sc="9" el="50" ec="10">admin\Skins\JavaScriptLibraryInclude.ascx.cs</location>
            <body hash="87e47c14edb202c6cf826433764e5bcf"><![CDATA[{
            if (this.Version == null) 
            {
                JavaScript.RequestRegistration(this.Name);
            }
            else if (this.SpecificVersion == null)
            {
                JavaScript.RequestRegistration(this.Name, this.Version);
            }
            else
            {
                JavaScript.RequestRegistration(this.Name, this.Version, this.SpecificVersion.Value);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="Name">
          <declaration><![CDATA[public string Name]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="32" sc="30" el="32" ec="34">admin\Skins\JavaScriptLibraryInclude.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="32" sc="35" el="32" ec="39">admin\Skins\JavaScriptLibraryInclude.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="SpecificVersion">
          <declaration><![CDATA[public SpecificVersion? SpecificVersion]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="34" sc="51" el="34" ec="55">admin\Skins\JavaScriptLibraryInclude.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="34" sc="56" el="34" ec="60">admin\Skins\JavaScriptLibraryInclude.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Version">
          <declaration><![CDATA[public Version Version]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="33" sc="34" el="33" ec="38">admin\Skins\JavaScriptLibraryInclude.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="33" sc="39" el="33" ec="43">admin\Skins\JavaScriptLibraryInclude.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="jQuery">
      <declaration><![CDATA[public class jQuery : SkinObjectBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public jQuery()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="37" sc="9" el="55" ec="10">admin\Skins\jQuery.ascx.cs</location>
            <body hash="ed6cd5edbc235806604a0f9dd2a8118e"><![CDATA[{
            JavaScript.RequestRegistration(CommonJs.jQuery);
            JavaScript.RequestRegistration(CommonJs.jQueryMigrate);

            if (jQueryUI)
            {
                JavaScript.RequestRegistration(CommonJs.jQueryUI);
            }

            if (DnnjQueryPlugins)
            {
                JavaScript.RequestRegistration(CommonJs.DnnPlugins);
            }

            if (jQueryHoverIntent)
            {
                JavaScript.RequestRegistration(CommonJs.HoverIntent);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="DnnjQueryPlugins">
          <declaration><![CDATA[public bool DnnjQueryPlugins]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="32" sc="40" el="32" ec="44">admin\Skins\jQuery.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="32" sc="45" el="32" ec="49">admin\Skins\jQuery.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="jQueryHoverIntent">
          <declaration><![CDATA[public bool jQueryHoverIntent]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="33" sc="41" el="33" ec="45">admin\Skins\jQuery.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="33" sc="46" el="33" ec="50">admin\Skins\jQuery.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="jQueryUI">
          <declaration><![CDATA[public bool jQueryUI]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="34" sc="32" el="34" ec="36">admin\Skins\jQuery.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="34" sc="37" el="34" ec="41">admin\Skins\jQuery.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="Language">
      <declaration><![CDATA[public class Language : SkinObjectBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private bool _showMenu = true;]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="59" sc="9" el="59" ec="39">admin\Skins\Language.ascx.cs</location>
            <body hash="1ced771134bcbf6b20d74f11770da9f7"><![CDATA[private bool _showMenu = true]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="handleCommonTemplates">
          <declaration><![CDATA[private void handleCommonTemplates()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="292" sc="9" el="309" ec="10">admin\Skins\Language.ascx.cs</location>
            <body hash="d9e594cffb0dd91cec1616c338490186"><![CDATA[{
            if (string.IsNullOrEmpty(CommonHeaderTemplate))
            {
                litCommonHeaderTemplate.Visible = false;
            }
            else
            {
                litCommonHeaderTemplate.Text = parseTemplate(CommonHeaderTemplate, CurrentCulture);
            }
            if (string.IsNullOrEmpty(CommonFooterTemplate))
            {
                litCommonFooterTemplate.Visible = false;
            }
            else
            {
                litCommonFooterTemplate.Text = parseTemplate(CommonFooterTemplate, CurrentCulture);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="LocaleIsAvailable">
          <declaration><![CDATA[private bool LocaleIsAvailable(Locale locale)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="312" sc="3" el="320" ec="4">admin\Skins\Language.ascx.cs</location>
            <body hash="7fcc0f043159982678ac1950ee1c9d48"><![CDATA[{
			var tab = PortalSettings.ActiveTab;
			if (tab.DefaultLanguageTab != null)
			{
				tab = tab.DefaultLanguageTab;
			}

            return TabController.Instance.GetTabByCulture(tab.TabID, tab.PortalID, locale) != null;
		}]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="327" sc="9" el="401" ec="10">admin\Skins\Language.ascx.cs</location>
            <body hash="b8864b95cb3125be6609e6cf4c1e4e30"><![CDATA[{
            base.OnLoad(e);

            selectCulture.SelectedIndexChanged += selectCulture_SelectedIndexChanged;
            rptLanguages.ItemDataBound += rptLanguages_ItemDataBound;

            try
            {
                var locales = new Dictionary<string, Locale>();
                IEnumerable<ListItem> cultureListItems = DotNetNuke.Services.Localization.Localization.LoadCultureInListItems(CultureDropDownTypes.NativeName, CurrentCulture, "", false);
                foreach (Locale loc in LocaleController.Instance.GetLocales(PortalSettings.PortalId).Values)
                {
                    string defaultRoles = PortalController.GetPortalSetting(string.Format("DefaultTranslatorRoles-{0}", loc.Code), PortalSettings.PortalId, "Administrators");
                    if (!PortalSettings.ContentLocalizationEnabled ||
                        (LocaleIsAvailable(loc) &&
                            (PortalSecurity.IsInRoles(PortalSettings.AdministratorRoleName) || loc.IsPublished || PortalSecurity.IsInRoles(defaultRoles))))
                    {
                        locales.Add(loc.Code, loc);
                        foreach (var cultureItem in cultureListItems)
                        {
                            if (cultureItem.Value == loc.Code)
                            {
                                selectCulture.Items.Add(cultureItem);
                            }
                        }
                    }
                }
                if (ShowLinks)
                {
                    if (locales.Count > 1)
                    {
                        rptLanguages.DataSource = locales.Values;
                        rptLanguages.DataBind();
                    }
                    else
                    {
                        rptLanguages.Visible = false;
                    }
                }
                if (ShowMenu)
                {
                    if (!String.IsNullOrEmpty(CssClass))
                    {
                        selectCulture.CssClass = CssClass;
                    }
                    if (!IsPostBack)
                    {
                        //select the default item
                        if (CurrentCulture != null)
                        {
                            ListItem item = selectCulture.Items.FindByValue(CurrentCulture);
                            if (item != null)
                            {
                                selectCulture.SelectedIndex = -1;
                                item.Selected = true;
                            }
                        }
                    }
                    //only show language selector if more than one language
                    if (selectCulture.Items.Count <= 1)
                    {
                        selectCulture.Visible = false;
                    }
                }
                else
                {
                    selectCulture.Visible = false;
                }
                handleCommonTemplates();
            }
            catch (Exception ex)
            {
                Exceptions.ProcessPageLoadException(ex, Request.RawUrl);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="parseTemplate">
          <declaration><![CDATA[private string parseTemplate(string template, string locale)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="266" sc="9" el="289" ec="10">admin\Skins\Language.ascx.cs</location>
            <body hash="e89670679c0a7950ff23d29560740411"><![CDATA[{
            string strReturnValue = template;
            try
            {
                if (!string.IsNullOrEmpty(locale))
                {
					//for non data items use locale
                    LocalTokenReplace.Language = locale;
                }
                else
                {
					//for non data items use page culture
                    LocalTokenReplace.Language = CurrentCulture;
                }
				
				//perform token replacements
                strReturnValue = LocalTokenReplace.ReplaceEnvironmentTokens(strReturnValue);
            }
            catch (Exception ex)
            {
                Exceptions.ProcessPageLoadException(ex, Request.RawUrl);
            }
            return strReturnValue;
        }]]></body>
          </codeblock>
        </method>
        <method name="rptLanguages_ItemDataBound">
          <declaration><![CDATA[protected void rptLanguages_ItemDataBound(object sender, RepeaterItemEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="418" sc="9" el="481" ec="10">admin\Skins\Language.ascx.cs</location>
            <body hash="a74381cf0ae652a0ddbf8387204c1ca5"><![CDATA[{
            try
            {
                var litTemplate = e.Item.FindControl("litItemTemplate") as Literal;
                if (litTemplate != null)
                {
					//load proper template for this Item
                    string strTemplate = "";
                    switch (e.Item.ItemType)
                    {
                        case ListItemType.Item:
                            strTemplate = ItemTemplate;
                            break;
                        case ListItemType.AlternatingItem:
                            if (!string.IsNullOrEmpty(AlternateTemplate))
                            {
                                strTemplate = AlternateTemplate;
                            }
                            else
                            {
                                strTemplate = ItemTemplate;
                            }
                            break;
                        case ListItemType.Header:
                            strTemplate = HeaderTemplate;
                            break;
                        case ListItemType.Footer:
                            strTemplate = FooterTemplate;
                            break;
                        case ListItemType.Separator:
                            strTemplate = SeparatorTemplate;
                            break;
                    }
                    if (string.IsNullOrEmpty(strTemplate))
                    {
                        litTemplate.Visible = false;
                    }
                    else
                    {
                        if (e.Item.DataItem != null)
                        {
                            var locale = e.Item.DataItem as Locale;
                            if (locale != null && (e.Item.ItemType == ListItemType.Item || e.Item.ItemType == ListItemType.AlternatingItem))
                            {
                                if (locale.Code == CurrentCulture && !string.IsNullOrEmpty(SelectedItemTemplate))
                                {
                                    strTemplate = SelectedItemTemplate;
                                }
                                litTemplate.Text = parseTemplate(strTemplate, locale.Code);
                            }
                        }
                        else
                        {
							//for non data items use page culture
                            litTemplate.Text = parseTemplate(strTemplate, CurrentCulture);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Exceptions.ProcessPageLoadException(ex, Request.RawUrl);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="selectCulture_SelectedIndexChanged">
          <declaration><![CDATA[private void selectCulture_SelectedIndexChanged(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="404" sc="9" el="410" ec="10">admin\Skins\Language.ascx.cs</location>
            <body hash="8d400f57021c9af1037f9836d985bb50"><![CDATA[{
			//Redirect to same page to update all controls for newly selected culture
            LocalTokenReplace.Language = selectCulture.SelectedItem.Value;
            //DNN-6170 ensure skin value is culture specific in case of  static localization
            DataCache.RemoveCache(string.Format(DataCache.PortalSettingsCacheKey, PortalSettings.PortalId, Null.NullString));
            Response.Redirect(LocalTokenReplace.ReplaceEnvironmentTokens("[URL]"));
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_alternateTemplate">
          <declaration><![CDATA[private string _alternateTemplate;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_commonFooterTemplate">
          <declaration><![CDATA[private string _commonFooterTemplate;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_commonHeaderTemplate">
          <declaration><![CDATA[private string _commonHeaderTemplate;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_footerTemplate">
          <declaration><![CDATA[private string _footerTemplate;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_headerTemplate">
          <declaration><![CDATA[private string _headerTemplate;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_itemTemplate">
          <declaration><![CDATA[private string _itemTemplate;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_localResourceFile">
          <declaration><![CDATA[private string _localResourceFile;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_localTokenReplace">
          <declaration><![CDATA[private LanguageTokenReplace _localTokenReplace;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_SelectedItemTemplate">
          <declaration><![CDATA[private string _SelectedItemTemplate;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_separatorTemplate">
          <declaration><![CDATA[private string _separatorTemplate;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_showMenu">
          <declaration><![CDATA[private bool _showMenu = true;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="litCommonFooterTemplate">
          <declaration><![CDATA[protected Literal litCommonFooterTemplate;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="litCommonHeaderTemplate">
          <declaration><![CDATA[protected Literal litCommonHeaderTemplate;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="MyFileName">
          <declaration><![CDATA[private const string MyFileName = "Language.ascx";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="rptLanguages">
          <declaration><![CDATA[protected Repeater rptLanguages;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="selectCulture">
          <declaration><![CDATA[protected DropDownList selectCulture;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="AlternateTemplate">
          <declaration><![CDATA[public string AlternateTemplate]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="68" sc="13" el="74" ec="14">admin\Skins\Language.ascx.cs</location>
            <body hash="93f3a7fee046dac98c4d4e7d11d76729"><![CDATA[{
                if (string.IsNullOrEmpty(_alternateTemplate))
                {
                    _alternateTemplate = Localization.GetString("AlternateTemplate.Default", LocalResourceFile, TemplateCulture);
                }
                return _alternateTemplate;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="76" sc="13" el="78" ec="14">admin\Skins\Language.ascx.cs</location>
            <body hash="03f558a0cbf7cb88b8308522ba37369c"><![CDATA[{
                _alternateTemplate = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="CommonFooterTemplate">
          <declaration><![CDATA[public string CommonFooterTemplate]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="84" sc="13" el="90" ec="14">admin\Skins\Language.ascx.cs</location>
            <body hash="521f9b3e29ba1ef4fb3ad3cdd3286f2c"><![CDATA[{
                if (string.IsNullOrEmpty(_commonFooterTemplate))
                {
                    _commonFooterTemplate = Localization.GetString("CommonFooterTemplate.Default", LocalResourceFile, TemplateCulture);
                }
                return _commonFooterTemplate;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="92" sc="13" el="94" ec="14">admin\Skins\Language.ascx.cs</location>
            <body hash="fcce9f2d1b7435c0875c2e92c59bca72"><![CDATA[{
                _commonFooterTemplate = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="CommonHeaderTemplate">
          <declaration><![CDATA[public string CommonHeaderTemplate]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="100" sc="13" el="106" ec="14">admin\Skins\Language.ascx.cs</location>
            <body hash="b99d6aa5ddb2a39c96236008586adc45"><![CDATA[{
                if (string.IsNullOrEmpty(_commonHeaderTemplate))
                {
                    _commonHeaderTemplate = Localization.GetString("CommonHeaderTemplate.Default", LocalResourceFile, TemplateCulture);
                }
                return _commonHeaderTemplate;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="108" sc="13" el="110" ec="14">admin\Skins\Language.ascx.cs</location>
            <body hash="d44e4072d7f01614927c9c5a48c16b72"><![CDATA[{
                _commonHeaderTemplate = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="CssClass">
          <declaration><![CDATA[public string CssClass]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="113" sc="34" el="113" ec="38">admin\Skins\Language.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="113" sc="39" el="113" ec="43">admin\Skins\Language.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="CurrentCulture">
          <declaration><![CDATA[protected string CurrentCulture]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="223" sc="13" el="225" ec="14">admin\Skins\Language.ascx.cs</location>
            <body hash="368b29ca0c92983a6e37e9fae6c889c2"><![CDATA[{
                return CultureInfo.CurrentCulture.ToString();
            }]]></body>
          </codeblock>
        </property>
        <property name="FooterTemplate">
          <declaration><![CDATA[public string FooterTemplate]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="118" sc="13" el="124" ec="14">admin\Skins\Language.ascx.cs</location>
            <body hash="0183d8b3c0f758147bbfcd4aa7180084"><![CDATA[{
                if (string.IsNullOrEmpty(_footerTemplate))
                {
                    _footerTemplate = Localization.GetString("FooterTemplate.Default", LocalResourceFile, TemplateCulture);
                }
                return _footerTemplate;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="126" sc="13" el="128" ec="14">admin\Skins\Language.ascx.cs</location>
            <body hash="7f75c007697880297cf2f613e2da3369"><![CDATA[{
                _footerTemplate = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="HeaderTemplate">
          <declaration><![CDATA[public string HeaderTemplate]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="134" sc="13" el="140" ec="14">admin\Skins\Language.ascx.cs</location>
            <body hash="b69c1690a1142e76122ab7ea0dcf92df"><![CDATA[{
                if (string.IsNullOrEmpty(_headerTemplate))
                {
                    _headerTemplate = Localization.GetString("HeaderTemplate.Default", LocalResourceFile, TemplateCulture);
                }
                return _headerTemplate;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="142" sc="13" el="144" ec="14">admin\Skins\Language.ascx.cs</location>
            <body hash="5cd681f0f01ff93d534bd5e69b9ca55a"><![CDATA[{
                _headerTemplate = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="ItemTemplate">
          <declaration><![CDATA[public string ItemTemplate]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="150" sc="13" el="156" ec="14">admin\Skins\Language.ascx.cs</location>
            <body hash="2408241abddaf1b6bf438a9304f80299"><![CDATA[{
                if (string.IsNullOrEmpty(_itemTemplate))
                {
                    _itemTemplate = Localization.GetString("ItemTemplate.Default", LocalResourceFile, TemplateCulture);
                }
                return _itemTemplate;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="158" sc="13" el="160" ec="14">admin\Skins\Language.ascx.cs</location>
            <body hash="2aa3dd19c69f47fe2993cd9c8f83684b"><![CDATA[{
                _itemTemplate = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="LocalResourceFile">
          <declaration><![CDATA[protected string LocalResourceFile]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="240" sc="13" el="246" ec="14">admin\Skins\Language.ascx.cs</location>
            <body hash="27dc5aabc13693169d082dab5accc278"><![CDATA[{
                if (string.IsNullOrEmpty(_localResourceFile))
                {
                    _localResourceFile = Localization.GetResourceFile(this, MyFileName);
                }
                return _localResourceFile;
            }]]></body>
          </codeblock>
        </property>
        <property name="LocalTokenReplace">
          <declaration><![CDATA[protected LanguageTokenReplace LocalTokenReplace]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="252" sc="13" el="258" ec="14">admin\Skins\Language.ascx.cs</location>
            <body hash="1e70d97e6e29b58b3c700e54a5827909"><![CDATA[{
                if (_localTokenReplace == null)
                {
                    _localTokenReplace = new LanguageTokenReplace {resourceFile = LocalResourceFile};
                }
                return _localTokenReplace;
            }]]></body>
          </codeblock>
        </property>
        <property name="SelectedItemTemplate">
          <declaration><![CDATA[public string SelectedItemTemplate]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="166" sc="13" el="172" ec="14">admin\Skins\Language.ascx.cs</location>
            <body hash="39c4ecba7012dfec9bd35122047e1ace"><![CDATA[{
                if (string.IsNullOrEmpty(_SelectedItemTemplate))
                {
                    _SelectedItemTemplate = Localization.GetString("SelectedItemTemplate.Default", LocalResourceFile, TemplateCulture);
                }
                return _SelectedItemTemplate;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="174" sc="13" el="176" ec="14">admin\Skins\Language.ascx.cs</location>
            <body hash="79266a920599d17590223abd2b92a736"><![CDATA[{
                _SelectedItemTemplate = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="SeparatorTemplate">
          <declaration><![CDATA[public string SeparatorTemplate]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="182" sc="13" el="188" ec="14">admin\Skins\Language.ascx.cs</location>
            <body hash="942d4ad40f1ff585c57c9cdec46687ea"><![CDATA[{
                if (string.IsNullOrEmpty(_separatorTemplate))
                {
                    _separatorTemplate = Localization.GetString("SeparatorTemplate.Default", LocalResourceFile, TemplateCulture);
                }
                return _separatorTemplate;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="190" sc="13" el="192" ec="14">admin\Skins\Language.ascx.cs</location>
            <body hash="bf97a9adcfe7cfb03f410470a149ed7f"><![CDATA[{
                _separatorTemplate = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="ShowLinks">
          <declaration><![CDATA[public bool ShowLinks]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="195" sc="33" el="195" ec="37">admin\Skins\Language.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="195" sc="38" el="195" ec="42">admin\Skins\Language.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ShowMenu">
          <declaration><![CDATA[public bool ShowMenu]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="200" sc="13" el="207" ec="14">admin\Skins\Language.ascx.cs</location>
            <body hash="a49c2a9e2a1ec9bf0e87bc48b8961875"><![CDATA[{
                if ((_showMenu == false) && (ShowLinks == false))
                {
					//this is to make sure that at least one type of selector will be visible if multiple languages are enabled
                    _showMenu = true;
                }
                return _showMenu;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="209" sc="13" el="211" ec="14">admin\Skins\Language.ascx.cs</location>
            <body hash="76dcb05021f82a0b608ce9e023a03c9c"><![CDATA[{
                _showMenu = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="TemplateCulture">
          <declaration><![CDATA[protected string TemplateCulture]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="231" sc="13" el="233" ec="14">admin\Skins\Language.ascx.cs</location>
            <body hash="f80dca07e8644176d8b83abc865525c8"><![CDATA[{
                return (UseCurrentCultureForTemplate) ? CurrentCulture : "en-US";
            }]]></body>
          </codeblock>
        </property>
        <property name="UseCurrentCultureForTemplate">
          <declaration><![CDATA[public bool UseCurrentCultureForTemplate]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="214" sc="52" el="214" ec="56">admin\Skins\Language.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="214" sc="57" el="214" ec="61">admin\Skins\Language.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="LeftMenu">
      <declaration><![CDATA[public class LeftMenu : SkinObjectBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public LeftMenu()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="74" sc="9" el="106" ec="10">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="21ada198b000e7e02ab0deeaaa7f0112"><![CDATA[public LeftMenu()
        {
            Style = string.Empty;
            ShowPath = true;
            EnableAdminMenus = true;
            EnableUserMenus = true;
            EnablePageIcons = true;
            ShowOnlyCurrent = string.Empty;
            MaxLevel = -1;
            MaxItemNumber = 20;
            MaxLevelNumber = 10;
            EnableToolTips = true;
            RootItemFocusedCssClass = string.Empty;
            RootItemClickedCssClass = string.Empty;
            RootItemImageUrl = string.Empty;
            RootItemHoveredImageUrl = string.Empty;
            RootItemHeight = Unit.Empty;
            RootItemWidth = Unit.Empty;
            RootItemExpandedCssClass = string.Empty;
            RootItemDisabledCssClass = string.Empty;
            RootItemCssClass = string.Empty;
            ItemWidth = Unit.Empty;
            ItemHeight = Unit.Empty;
            ItemHoveredImageUrl = string.Empty;
            ItemImageUrl = string.Empty;
            ItemClickedCssClass = string.Empty;
            ItemFocusedCssClass = string.Empty;
            ItemExpandedCssClass = string.Empty;
            ItemDisabledCssClass = string.Empty;
            ItemCssClass = string.Empty;
            PagesToExclude = string.Empty;
            Skin = string.Empty;
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".cctor">
          <declaration><![CDATA[static LeftMenu()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="47" sc="6" el="47" ec="95">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="836779451aa036d8f06289655121fa45"><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof (LeftMenu))]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="ApplySkin">
          <declaration><![CDATA[private void ApplySkin()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="605" sc="9" el="613" ec="10">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="412bf26eb6d38174dcc78323213b9ff7"><![CDATA[{
            if ((EnableEmbeddedSkins == false && !string.IsNullOrEmpty(Skin)))
            {
                string cssLink = "<link href=\"{0}/WebControlSkin/{1}/PanelBar.{1}.css\" rel=\"stylesheet\" type=\"text/css\" />";
                cssLink = string.Format(cssLink, dnnSkinPath, Skin);
                Page.Header.Controls.Add(new LiteralControl(cssLink));
                RadPanel1.Skin = Skin;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="BuildPanelbar">
          <declaration><![CDATA[private void BuildPanelbar(RadPanelItemCollection rootCollection)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="880" sc="9" el="975" ec="10">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="7e3fd4c3b605603bb52a7127b020400d"><![CDATA[{
            qElement temp;
            qElement temp2;
            TabInfo page;
            int pageID;
            int j;
            int iItemIndex;
            while (PagesQueue.Count != 0)
            {
                pageID = Convert.ToInt32(PagesQueue.Dequeue());
                temp = (qElement) AuthPages[pageID];
                page = temp.page;
                temp.radPanelItem.Text = page.TabName;
                if ((!String.IsNullOrEmpty(page.IconFile) && EnablePageIcons))
                {
                    if ((page.IconFile.StartsWith("~")))
                    {
                        temp.radPanelItem.ImageUrl = Page.ResolveUrl(page.IconFile);
                    }
                    else
                    {
                        temp.radPanelItem.ImageUrl = PortalSettings.HomeDirectory + page.IconFile;
                    }
                }
                if ((!page.DisableLink))
                {
                    if ((page.FullUrl.StartsWith("*") && page.FullUrl.IndexOf("*", 1) != -1))
                    {
                        temp.radPanelItem.NavigateUrl = page.FullUrl.Substring(page.FullUrl.IndexOf("*", 1) + 1);
                        temp.radPanelItem.Target = page.FullUrl.Substring(1, page.FullUrl.IndexOf("*", 1) - 1);
                    }
                    else
                    {
                        temp.radPanelItem.NavigateUrl = page.FullUrl;
                    }
                }
                else if ((CopyChildItemLink && page.Level >= MaxLevel))
                {
                    j = 0;
					//check if there are any child items and use a href from the first one
                    while ((j < AuthPages.Count && (((qElement) AuthPages[j]).page.ParentId != page.TabID || ((qElement) AuthPages[j]).page.DisableLink)))
                    {
                        j = j + 1;
                    }
                    if ((j < AuthPages.Count))
                    {
						//child item found. use its link
                        temp.radPanelItem.NavigateUrl = ((qElement) AuthPages[j]).page.FullUrl;
                    }
                }
                if ((EnableToolTips && !String.IsNullOrEmpty(page.Description)))
                {
                    temp.radPanelItem.ToolTip = page.Description;
                }
				
				//set all other item properties
                if ((temp.radPanelItem.Level == 0))
                {
                    SetRootItemProperties(temp.radPanelItem, page.Level, temp.item, page.TabName);
                }
                else
                {
                    SetItemProperties(temp.radPanelItem, page.Level, temp.item, page.TabName);
                }
				
				//check showpath
                if ((ShowPath))
                {
                    CheckShowPath(page.TabID, temp.radPanelItem, page.TabName);
                }
				
				//image-only panel check
                if ((ImagesOnlyPanel && temp.radPanelItem.ImageUrl != string.Empty))
                {
                    temp.radPanelItem.Text = string.Empty;
                }
				
				//attach child items the current one
                if ((page.Level < MaxLevel || MaxLevel < 0))
                {
                    iItemIndex = 0;
                    for (j = 0; j <= AuthPages.Count - 1; j++)
                    {
                        temp2 = (qElement) AuthPages[j];
                        if ((temp2.page.ParentId == page.TabID))
                        {
                            temp.radPanelItem.Items.Add(temp2.radPanelItem);
                            PagesQueue.Enqueue(j);
                            iItemIndex = iItemIndex + 1;
                            temp2.item = iItemIndex;
                            AuthPages[j] = temp2;
                        }
                    }
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="CheckPanelVisibility">
          <declaration><![CDATA[private bool CheckPanelVisibility(TabInfo tab)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="700" sc="9" el="712" ec="10">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="d29ab7e31bce7f6529d2a9fd054b6cef"><![CDATA[{
			//Fixed: If (Not EnableAdminMenus AndAlso (tab.IsAdminTab Or tab.IsSuperTab)) Then
            if (!EnableAdminMenus && tab.IsSuperTab)
            {
                return false;
            }
			//Fixed: If (Not EnableUserMenus AndAlso Not (tab.IsAdminTab Or tab.IsSuperTab)) Then
            if (!EnableUserMenus && !tab.IsSuperTab)
            {
                return false;
            }
            return true;
        }]]></body>
          </codeblock>
        </method>
        <method name="CheckShowOnlyCurrent">
          <declaration><![CDATA[private bool CheckShowOnlyCurrent(int tabId, int parentId, int startingItemId, int iRootGroupId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="688" sc="9" el="697" ec="10">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="63f1d0abc84562ec0d07a5196558bb54"><![CDATA[{
            if ((string.IsNullOrEmpty(ShowOnlyCurrent) && parentId == -1) || ("ChildItems" == ShowOnlyCurrent && parentId == PortalSettings.ActiveTab.TabID) ||
                ("CurrentItem" == ShowOnlyCurrent && tabId == PortalSettings.ActiveTab.TabID) || ("RootItem" == ShowOnlyCurrent && iRootGroupId == parentId) ||
                (startingItemId > 0 && parentId == startingItemId))
            {
                return true;
            }
            
            return false;
        }]]></body>
          </codeblock>
        </method>
        <method name="CheckShowPath">
          <declaration><![CDATA[private void CheckShowPath(int tabId, RadPanelItem panelItemToCheck, string pageName)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="726" sc="9" el="770" ec="10">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="d16c8bbbf890677f4692d8dc1bf1cb4d"><![CDATA[{
            if ((int) arrayShowPath[0] == tabId)
            {
                panelItemToCheck.Expanded = true;
            }
            if ((arrayShowPath.Contains(tabId)))
            {
                if ((panelItemToCheck.Level > 0))
                {
                    panelItemToCheck.Selected = true;
                    var parent = (RadPanelItem) panelItemToCheck.Owner;
                    while ((parent != null && parent.Items.Count > 0))
                    {
                        try
                        {
                            parent.Expanded = true;
                            parent = (RadPanelItem) parent.Owner;
                        }
                        catch
                        {
                            parent = null;
                        }
                    }
                    if (!string.IsNullOrEmpty(SelectedPathItemCss))
                    {
                        panelItemToCheck.CssClass = SelectedPathItemCss;
                    }
                    if (!string.IsNullOrEmpty(SelectedPathItemImage))
                    {
                        panelItemToCheck.ImageUrl = SelectedPathItemImage.Replace("*SkinPath*", dnnSkinPath).Replace("*PageName*", pageName);
                    }
                }
                else
                {
                    if (!string.IsNullOrEmpty(SelectedPathHeaderItemCss))
                    {
                        panelItemToCheck.CssClass = SelectedPathHeaderItemCss;
                    }
                    if (!string.IsNullOrEmpty(SelectedPathHeaderItemImage))
                    {
                        panelItemToCheck.ImageUrl = SelectedPathHeaderItemImage.Replace("*SkinPath*", dnnSkinPath).Replace("*PageName*", pageName);
                    }
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="CheckToExclude">
          <declaration><![CDATA[private bool CheckToExclude(string tabName, int tabId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="616" sc="9" el="644" ec="10">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="609e3052fccdc2fecfd772dbef808fbb"><![CDATA[{
            if (string.IsNullOrEmpty(PagesToExclude))
            {
                return false;
            }
            string[] temp = PagesToExclude.Split(new[] {','});
            if (temp.Length == 0)
            {
                return false;
            }
            foreach (string item in temp)
            {
                try
                {
                    if (tabId == Int32.Parse(item.Trim()))
                    {
                        return true;
                    }
                }
                catch
                {
                    if (tabName == item.Trim())
                    {
                        return true;
                    }
                }
            }
            return false;
        }]]></body>
          </codeblock>
        </method>
        <method name="FillShowPathArray">
          <declaration><![CDATA[private void FillShowPathArray(ref ArrayList arrayShowPath, int selectedTabID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="715" sc="9" el="723" ec="10">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="cb744977014ab778a5da03daaabf0be8"><![CDATA[{
            TabInfo tempTab = TabController.Instance.GetTab(selectedTabID, PortalSettings.PortalId, true);
            while ((tempTab.ParentId != -1))
            {
                arrayShowPath.Add(tempTab.TabID);
                tempTab = TabController.Instance.GetTab(tempTab.ParentId, PortalSettings.PortalId, true);
            }
            arrayShowPath.Add(tempTab.TabID);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetShowOnlyCurrent">
          <declaration><![CDATA[private void GetShowOnlyCurrent(ref int StartingItemId, ref int iRootGroupId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="647" sc="9" el="685" ec="10">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="df555d71241d0f817b87bb6d52fe8d8e"><![CDATA[{
            StartingItemId = 0;
            iRootGroupId = 0;
			//check if we have a value to work with
            if (string.IsNullOrEmpty(ShowOnlyCurrent))
            {
                return;
            }
			
			//check if user specified an ID
            if ((char.IsDigit(ShowOnlyCurrent.ToCharArray()[0])))
            {
                int output;
                if(int.TryParse(ShowOnlyCurrent, out output))
                {
                    StartingItemId = output;
                }
            }
			
			//check if user specified a page name
            if ((ShowOnlyCurrent.StartsWith("PageItem:")))
            {
                TabInfo temptab = TabController.Instance.GetTabByName(ShowOnlyCurrent.Substring(("PageItem:").Length), PortalSettings.PortalId);
                if ((temptab != null))
                {
                    StartingItemId = temptab.TabID;
                }
            }
			
			//RootItem
            if (("RootItem" == ShowOnlyCurrent))
            {
                iRootGroupId = PortalSettings.ActiveTab.TabID;
                while (((TabController.Instance.GetTab(iRootGroupId, PortalSettings.PortalId, true)).ParentId != -1))
                {
                    iRootGroupId = (TabController.Instance.GetTab(iRootGroupId, PortalSettings.PortalId, true)).ParentId;
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="535" sc="9" el="541" ec="10">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="bacf875704d9550405d35edb4fa72baf"><![CDATA[{
            base.OnInit(e);

            dnnSkinSrc = PortalSettings.ActiveTab.SkinSrc.Replace('\\', '/').Replace("//", "/");
            dnnSkinPath = dnnSkinSrc.Substring(0, dnnSkinSrc.LastIndexOf('/'));
            ApplySkin();
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="544" sc="9" el="598" ec="10">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="5eaf24106c160aaf8b0953bc5bf2f6b9"><![CDATA[{
            base.OnLoad(e);
            int i;
            int iItemIndex;
            int iRootGroupId = 0;
            qElement temp;
            int StartingItemId = 0;

            AuthPages = new ArrayList();
            PagesQueue = new Queue();
            arrayShowPath = new ArrayList();
            iItemIndex = 0;
			//---------------------------------------------------

            SetPanelbarProperties();

            if (!Page.IsPostBack)
            {
				//optional code to support displaying a specific branch of the page tree
                GetShowOnlyCurrent(ref StartingItemId, ref iRootGroupId);
                //Fixed: For i = 0 To Me.PortalSettings.DesktopTabs.Count - 1
                int portalID = PortalSettings.ActiveTab.IsSuperTab ? -1 : PortalSettings.PortalId;
                IList<TabInfo> desktopTabs = TabController.GetTabsBySortOrder(portalID, PortalController.GetActivePortalLanguage(portalID), true);
                for (i = 0; i <= desktopTabs.Count - 1; i++)
                {
	                var tab = desktopTabs[i];
					if (tab.TabID == PortalSettings.ActiveTab.TabID)
                    {
						FillShowPathArray(ref arrayShowPath, tab.TabID);
                    }
                    if (tab.IsVisible && !tab.IsDeleted &&
						(AdminMode || ((Null.IsNull(tab.StartDate) || tab.StartDate < DateTime.Now) &&
						(Null.IsNull(tab.EndDate) || tab.EndDate > DateTime.Now))) &&
                        (TabPermissionController.CanViewPage(tab) && !CheckToExclude(tab.TabName, tab.TabID)))
                    {
                        temp = new qElement();
                        temp.page = desktopTabs[i];
                        temp.radPanelItem = new RadPanelItem();
                        if (CheckShowOnlyCurrent(tab.TabID, tab.ParentId, StartingItemId, iRootGroupId) && CheckPanelVisibility(tab))
                        {
                            iItemIndex = iItemIndex + 1;
                            temp.item = iItemIndex;
                            PagesQueue.Enqueue(AuthPages.Count);
                            RadPanel1.Items.Add(temp.radPanelItem);
                        }
                        AuthPages.Add(temp);
                    }
                }
                BuildPanelbar(RadPanel1.Items);
                if ((0 == RadPanel1.Items.Count))
                {
                    RadPanel1.Visible = false;
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="SetItemProperties">
          <declaration><![CDATA[private void SetItemProperties(RadPanelItem currentPanelItem, int iLevel, int iItem, string pageName)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="795" sc="9" el="834" ec="10">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="1b4d89c9b0751222ae9872809e9c90d3"><![CDATA[{
            string sLevel = EnableLevelCss && iLevel < MaxLevelNumber ? "Level" + iLevel : string.Empty;
            string sItem = iItem <= MaxItemNumber && ((EnableItemCss && iLevel > 0) || (EnableRootItemCss && iLevel == 0)) ? iItem.ToString() : string.Empty;
            if (!string.IsNullOrEmpty(ItemCssClass))
            {
                currentPanelItem.CssClass = sLevel + ItemCssClass + sItem;
            }
            if (!string.IsNullOrEmpty(ItemDisabledCssClass))
            {
                currentPanelItem.DisabledCssClass = sLevel + ItemDisabledCssClass + sItem;
            }
            if (!string.IsNullOrEmpty(ItemExpandedCssClass))
            {
                currentPanelItem.ExpandedCssClass = sLevel + ItemExpandedCssClass + sItem;
            }
            if (!string.IsNullOrEmpty(ItemFocusedCssClass))
            {
                currentPanelItem.FocusedCssClass = sLevel + ItemFocusedCssClass + sItem;
            }
            if (!string.IsNullOrEmpty(ItemClickedCssClass))
            {
                currentPanelItem.ClickedCssClass = sLevel + ItemClickedCssClass + sItem;
            }
            if (!string.IsNullOrEmpty(ItemImageUrl))
            {
                currentPanelItem.ImageUrl = ItemImageUrl.Replace("*SkinPath*", dnnSkinPath).Replace("*PageName*", pageName);
            }
            if (!string.IsNullOrEmpty(ItemHoveredImageUrl))
            {
                currentPanelItem.HoveredImageUrl = ItemHoveredImageUrl.Replace("*SkinPath*", dnnSkinPath).Replace("*PageName*", pageName);
            }
            if (!ItemHeight.IsEmpty)
            {
                currentPanelItem.Height = ItemHeight;
            }
            if (!ItemWidth.IsEmpty)
            {
                currentPanelItem.Width = ItemWidth;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="SetPanelbarProperties">
          <declaration><![CDATA[private void SetPanelbarProperties()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="773" sc="9" el="792" ec="10">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="960c925460c0d39b80c0cd7bf3d05b80"><![CDATA[{
            if (!string.IsNullOrEmpty(Style))
            {
                Style += "; ";
                try
                {
                    foreach (string cStyle in Style.Split(';'))
                    {
                        if ((cStyle.Trim().Length > 0))
                        {
                            RadPanel1.Style.Add(cStyle.Split(':')[0], cStyle.Split(':')[1]);
                        }
                    }
                }
				catch (Exception ex)
				{
					Logger.Error(ex);
				}
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="SetRootItemProperties">
          <declaration><![CDATA[private void SetRootItemProperties(RadPanelItem currentPanelItem, int iLevel, int iItem, string pageName)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="837" sc="9" el="877" ec="10">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="8e675042ff8e546ec0f61ef5a5ed9bb4"><![CDATA[{
            string sLevel = EnableLevelCss && iLevel < MaxLevelNumber ? "Level" + iLevel : string.Empty;
            string sItem = iItem <= MaxItemNumber && ((EnableItemCss && iLevel > 0) || (EnableRootItemCss && iLevel == 0)) ? iItem.ToString() : string.Empty;

            if (!string.IsNullOrEmpty(RootItemCssClass))
            {
                currentPanelItem.CssClass = sLevel + RootItemCssClass + sItem;
            }
            if (!string.IsNullOrEmpty(RootItemDisabledCssClass))
            {
                currentPanelItem.DisabledCssClass = sLevel + RootItemDisabledCssClass + sItem;
            }
            if (!string.IsNullOrEmpty(RootItemExpandedCssClass))
            {
                currentPanelItem.ExpandedCssClass = sLevel + RootItemExpandedCssClass + sItem;
            }
            if (!string.IsNullOrEmpty(RootItemFocusedCssClass))
            {
                currentPanelItem.FocusedCssClass = sLevel + RootItemFocusedCssClass + sItem;
            }
            if (!string.IsNullOrEmpty(RootItemClickedCssClass))
            {
                currentPanelItem.ClickedCssClass = sLevel + RootItemClickedCssClass + sItem;
            }
            if (!string.IsNullOrEmpty(RootItemImageUrl))
            {
                currentPanelItem.ImageUrl = RootItemImageUrl.Replace("*SkinPath*", dnnSkinPath).Replace("*PageName*", pageName);
            }
            if (!string.IsNullOrEmpty(RootItemHoveredImageUrl))
            {
                currentPanelItem.HoveredImageUrl = RootItemHoveredImageUrl.Replace("*SkinPath*", dnnSkinPath).Replace("*PageName*", pageName);
            }
            if (!RootItemHeight.IsEmpty)
            {
                currentPanelItem.Height = RootItemHeight;
            }
            if (!RootItemWidth.IsEmpty)
            {
                currentPanelItem.Width = RootItemWidth;
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_RadPanel1">
          <declaration><![CDATA[private RadPanelBar _RadPanel1;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="arrayShowPath">
          <declaration><![CDATA[private ArrayList arrayShowPath;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="AuthPages">
          <declaration><![CDATA[private ArrayList AuthPages;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="dnnSkinPath">
          <declaration><![CDATA[private string dnnSkinPath;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="dnnSkinSrc">
          <declaration><![CDATA[private string dnnSkinSrc;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="LeftMenu1">
          <declaration><![CDATA[protected PlaceHolder LeftMenu1;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Logger">
          <declaration><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof(LeftMenu));]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="PagesQueue">
          <declaration><![CDATA[private Queue PagesQueue;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="AllowCollapseAllItems">
          <declaration><![CDATA[public bool AllowCollapseAllItems]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="113" sc="13" el="115" ec="14">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="56386dc39e7a58d72d80e6f9e33dd48d"><![CDATA[{
                return RadPanel1.AllowCollapseAllItems;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="117" sc="13" el="119" ec="14">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="ca49b8df0b2dffc0f4c206353495dd39"><![CDATA[{
                RadPanel1.AllowCollapseAllItems = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="CausesValidation">
          <declaration><![CDATA[public bool CausesValidation]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="125" sc="13" el="127" ec="14">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="09d28d64405afad073fb30acd7f88373"><![CDATA[{
                return RadPanel1.CausesValidation;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="129" sc="13" el="131" ec="14">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="bdba7da386d2d08581c3e9da9791866f"><![CDATA[{
                RadPanel1.CausesValidation = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="CollapseAnimationDuration">
          <declaration><![CDATA[public int CollapseAnimationDuration]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="137" sc="13" el="139" ec="14">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="0fdf50418ee62a3cd313d68a974a56eb"><![CDATA[{
                return RadPanel1.CollapseAnimation.Duration;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="141" sc="13" el="143" ec="14">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="74c2691079f7a59718c7c5cfb35e0bc9"><![CDATA[{
                RadPanel1.CollapseAnimation.Duration = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="CollapseAnimationType">
          <declaration><![CDATA[public AnimationType CollapseAnimationType]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="149" sc="13" el="151" ec="14">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="68eb33e7fc66a1c28522356be077c83c"><![CDATA[{
                return RadPanel1.CollapseAnimation.Type;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="153" sc="13" el="155" ec="14">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="1b0c25e37867e32150b5fb47e7788063"><![CDATA[{
                RadPanel1.CollapseAnimation.Type = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="CollapseDelay">
          <declaration><![CDATA[public int CollapseDelay]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="161" sc="13" el="163" ec="14">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="11d28738ba6afc9e8a0e305b0b6919cd"><![CDATA[{
                return RadPanel1.CollapseDelay;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="165" sc="13" el="167" ec="14">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="7dd64a5ee277e1e9983a8943d0f513e8"><![CDATA[{
                RadPanel1.CollapseDelay = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="CookieName">
          <declaration><![CDATA[public string CookieName]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="173" sc="13" el="175" ec="14">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="8c71a501c5bf005d3b79f22fcb779254"><![CDATA[{
                return RadPanel1.CookieName;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="177" sc="13" el="179" ec="14">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="bf798d76d0b040e62c4329a96efc37f2"><![CDATA[{
                RadPanel1.CookieName = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="CopyChildItemLink">
          <declaration><![CDATA[public bool CopyChildItemLink]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="450" sc="41" el="450" ec="45">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="450" sc="46" el="450" ec="50">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="CssClass">
          <declaration><![CDATA[public string CssClass]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="185" sc="13" el="187" ec="14">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="bb63a5ecc9e41f4dde5dba4e3872b625"><![CDATA[{
                return RadPanel1.CssClass;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="189" sc="13" el="191" ec="14">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="0fcf81b18524bd899ee0b9a3f675f698"><![CDATA[{
                RadPanel1.CssClass = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="Dir">
          <declaration><![CDATA[public string Dir]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="197" sc="13" el="199" ec="14">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="17e79eff43840a7c143600cb9c31afe8"><![CDATA[{
                return RadPanel1.Attributes["dir"];
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="201" sc="13" el="203" ec="14">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="4fbe3852c6d2582144896029ed1959ed"><![CDATA[{
                RadPanel1.Attributes["dir"] = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="EnableAdminMenus">
          <declaration><![CDATA[public bool EnableAdminMenus]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="452" sc="40" el="452" ec="44">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="452" sc="45" el="452" ec="49">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="EnableEmbeddedBaseStylesheet">
          <declaration><![CDATA[public bool EnableEmbeddedBaseStylesheet]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="257" sc="13" el="259" ec="14">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="4d39371c68c82106e517ce11e3a853d9"><![CDATA[{
                return RadPanel1.EnableEmbeddedBaseStylesheet;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="261" sc="13" el="263" ec="14">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="bf92e5fbd3af535006210a32cc118652"><![CDATA[{
                RadPanel1.EnableEmbeddedBaseStylesheet = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="EnableEmbeddedScripts">
          <declaration><![CDATA[public bool EnableEmbeddedScripts]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="269" sc="13" el="271" ec="14">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="b461eebfe6a23475256bdc20631823d4"><![CDATA[{
                return RadPanel1.EnableEmbeddedScripts;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="273" sc="13" el="275" ec="14">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="6c1cbf0cb0bdbd0b7e4abc4804cc4bab"><![CDATA[{
                RadPanel1.EnableEmbeddedScripts = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="EnableEmbeddedSkins">
          <declaration><![CDATA[public bool EnableEmbeddedSkins]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="281" sc="13" el="283" ec="14">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="fb7a07b43e4ca46554e33dec1437c4d7"><![CDATA[{
                return RadPanel1.EnableEmbeddedSkins;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="285" sc="13" el="287" ec="14">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="d66d51f6b6862bec9e5212bd6e9e7d6a"><![CDATA[{
                RadPanel1.EnableEmbeddedSkins = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="EnableItemCss">
          <declaration><![CDATA[public bool EnableItemCss]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="454" sc="37" el="454" ec="41">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="454" sc="42" el="454" ec="46">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="EnableItemId">
          <declaration><![CDATA[public bool EnableItemId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="456" sc="36" el="456" ec="40">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="456" sc="41" el="456" ec="45">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="EnableLevelCss">
          <declaration><![CDATA[public bool EnableLevelCss]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="458" sc="38" el="458" ec="42">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="458" sc="43" el="458" ec="47">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="EnablePageIcons">
          <declaration><![CDATA[public bool EnablePageIcons]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="460" sc="39" el="460" ec="43">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="460" sc="44" el="460" ec="48">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="EnableRootItemCss">
          <declaration><![CDATA[public bool EnableRootItemCss]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="462" sc="41" el="462" ec="45">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="462" sc="46" el="462" ec="50">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="EnableToolTips">
          <declaration><![CDATA[public bool EnableToolTips]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="464" sc="38" el="464" ec="42">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="464" sc="43" el="464" ec="47">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="EnableUserMenus">
          <declaration><![CDATA[public bool EnableUserMenus]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="466" sc="39" el="466" ec="43">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="466" sc="44" el="466" ec="48">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ExpandAnimationDuration">
          <declaration><![CDATA[public int ExpandAnimationDuration]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="209" sc="13" el="211" ec="14">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="14fa111509816a999f1b7f56f18fbc5f"><![CDATA[{
                return RadPanel1.ExpandAnimation.Duration;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="213" sc="13" el="215" ec="14">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="b9287a0d01d53ca3c67cd84efc0ac1fe"><![CDATA[{
                RadPanel1.ExpandAnimation.Duration = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="ExpandAnimationType">
          <declaration><![CDATA[public AnimationType ExpandAnimationType]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="221" sc="13" el="223" ec="14">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="7903357118827115199ee5c959afd077"><![CDATA[{
                return RadPanel1.ExpandAnimation.Type;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="225" sc="13" el="227" ec="14">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="da623a0f887bc7c4265dffc23b9ba85c"><![CDATA[{
                RadPanel1.ExpandAnimation.Type = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="ExpandDelay">
          <declaration><![CDATA[public int ExpandDelay]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="233" sc="13" el="235" ec="14">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="31ab00b1c852fbd9b61e53cf55f903e7"><![CDATA[{
                return RadPanel1.ExpandDelay;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="237" sc="13" el="239" ec="14">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="64ddb7a8c439cf0487ba1f34563dcb7c"><![CDATA[{
                RadPanel1.ExpandDelay = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="ExpandMode">
          <declaration><![CDATA[public PanelBarExpandMode ExpandMode]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="245" sc="13" el="247" ec="14">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="c9a235bf8c83fb5450c4fe45e8470426"><![CDATA[{
                return RadPanel1.ExpandMode;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="249" sc="13" el="251" ec="14">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="9c8d7ed1adb288403aecf5b0c9d223d1"><![CDATA[{
                RadPanel1.ExpandMode = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="Height">
          <declaration><![CDATA[public Unit Height]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="293" sc="13" el="295" ec="14">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="4f178d543aa86592ea73c569c0aea391"><![CDATA[{
                return RadPanel1.Height;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="297" sc="13" el="299" ec="14">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="d7d36cf4758bb6c3e7dd8d1ae18e2a82"><![CDATA[{
                RadPanel1.Height = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="ImagesOnlyPanel">
          <declaration><![CDATA[public bool ImagesOnlyPanel]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="468" sc="39" el="468" ec="43">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="468" sc="44" el="468" ec="48">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ItemClickedCssClass">
          <declaration><![CDATA[public string ItemClickedCssClass]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="470" sc="45" el="470" ec="49">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="470" sc="50" el="470" ec="54">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ItemCssClass">
          <declaration><![CDATA[public string ItemCssClass]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="472" sc="38" el="472" ec="42">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="472" sc="43" el="472" ec="47">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ItemDisabledCssClass">
          <declaration><![CDATA[public string ItemDisabledCssClass]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="474" sc="46" el="474" ec="50">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="474" sc="51" el="474" ec="55">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ItemExpandedCssClass">
          <declaration><![CDATA[public string ItemExpandedCssClass]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="476" sc="46" el="476" ec="50">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="476" sc="51" el="476" ec="55">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ItemFocusedCssClass">
          <declaration><![CDATA[public string ItemFocusedCssClass]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="478" sc="45" el="478" ec="49">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="478" sc="50" el="478" ec="54">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ItemHeight">
          <declaration><![CDATA[public Unit ItemHeight]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="480" sc="34" el="480" ec="38">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="480" sc="39" el="480" ec="43">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ItemHoveredImageUrl">
          <declaration><![CDATA[public string ItemHoveredImageUrl]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="482" sc="45" el="482" ec="49">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="482" sc="50" el="482" ec="54">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ItemImageUrl">
          <declaration><![CDATA[public string ItemImageUrl]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="484" sc="38" el="484" ec="42">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="484" sc="43" el="484" ec="47">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ItemWidth">
          <declaration><![CDATA[public Unit ItemWidth]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="486" sc="33" el="486" ec="37">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="486" sc="38" el="486" ec="42">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="MaxItemNumber">
          <declaration><![CDATA[public int MaxItemNumber]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="488" sc="36" el="488" ec="40">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="488" sc="41" el="488" ec="45">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="MaxLevel">
          <declaration><![CDATA[public int MaxLevel]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="490" sc="31" el="490" ec="35">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="490" sc="36" el="490" ec="40">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="MaxLevelNumber">
          <declaration><![CDATA[public int MaxLevelNumber]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="492" sc="37" el="492" ec="41">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="492" sc="42" el="492" ec="46">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="OnClientContextMenu">
          <declaration><![CDATA[public string OnClientContextMenu]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="305" sc="13" el="307" ec="14">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="ca86d4a96dbc25890b8227d3b2371244"><![CDATA[{
                return RadPanel1.OnClientContextMenu;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="309" sc="13" el="311" ec="14">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="a681cefaeb6f21deeceb4890967342ce"><![CDATA[{
                RadPanel1.OnClientContextMenu = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="OnClientItemBlur">
          <declaration><![CDATA[public string OnClientItemBlur]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="317" sc="13" el="319" ec="14">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="13b38248c41ef17bc08b7c1166e5288b"><![CDATA[{
                return RadPanel1.OnClientItemBlur;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="321" sc="13" el="323" ec="14">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="f9dd8da7b85cdafb77cb547c1826de16"><![CDATA[{
                RadPanel1.OnClientItemBlur = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="OnClientItemClicked">
          <declaration><![CDATA[public string OnClientItemClicked]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="329" sc="13" el="331" ec="14">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="d8e32fadb4d708cad46d4e0f11d63f19"><![CDATA[{
                return RadPanel1.OnClientItemClicked;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="333" sc="13" el="335" ec="14">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="49e159fb133a63a16844ee302595b82d"><![CDATA[{
                RadPanel1.OnClientItemClicked = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="OnClientItemClicking">
          <declaration><![CDATA[public string OnClientItemClicking]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="341" sc="13" el="343" ec="14">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="62d4954015952c0b5cc0b9e1320ccf23"><![CDATA[{
                return RadPanel1.OnClientItemClicking;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="345" sc="13" el="347" ec="14">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="75e75be074271aea3c18ed30ee3b7439"><![CDATA[{
                RadPanel1.OnClientItemClicking = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="OnClientItemCollapse">
          <declaration><![CDATA[public string OnClientItemCollapse]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="353" sc="13" el="355" ec="14">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="4e3b27e2604a91ba1a6ac44e3902cdd6"><![CDATA[{
                return RadPanel1.OnClientItemCollapse;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="357" sc="13" el="359" ec="14">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="5d5ea284a3debb270c15c7a8076c2ae2"><![CDATA[{
                RadPanel1.OnClientItemCollapse = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="OnClientItemExpand">
          <declaration><![CDATA[public string OnClientItemExpand]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="365" sc="13" el="367" ec="14">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="f7b52227438571181b2909262a0d90e4"><![CDATA[{
                return RadPanel1.OnClientItemExpand;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="369" sc="13" el="371" ec="14">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="e3075b41260cfd822aed34ba743e6c40"><![CDATA[{
                RadPanel1.OnClientItemExpand = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="OnClientItemFocus">
          <declaration><![CDATA[public string OnClientItemFocus]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="377" sc="13" el="379" ec="14">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="a22b17fc026f2958b6f9554aeea8bd75"><![CDATA[{
                return RadPanel1.OnClientItemFocus;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="381" sc="13" el="383" ec="14">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="ea217116dd0e7e6ba42e6294023af4e3"><![CDATA[{
                RadPanel1.OnClientItemFocus = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="OnClientLoad">
          <declaration><![CDATA[public string OnClientLoad]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="389" sc="13" el="391" ec="14">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="d65f9cec92a38aafdcdf21ae8b022027"><![CDATA[{
                return RadPanel1.OnClientLoad;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="393" sc="13" el="395" ec="14">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="338a9a8c2a77b5a69c39255d1976c8dd"><![CDATA[{
                RadPanel1.OnClientLoad = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="OnClientMouseOut">
          <declaration><![CDATA[public string OnClientMouseOut]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="401" sc="13" el="403" ec="14">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="0c55aa76385eeef58efb34038b7f059c"><![CDATA[{
                return RadPanel1.OnClientMouseOut;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="405" sc="13" el="407" ec="14">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="f6805e9555f0bb7014efe0d8c745c7b9"><![CDATA[{
                RadPanel1.OnClientMouseOut = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="OnClientMouseOver">
          <declaration><![CDATA[public string OnClientMouseOver]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="413" sc="13" el="415" ec="14">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="abe4bc841890e7317726aee4f167a778"><![CDATA[{
                return RadPanel1.OnClientMouseOver;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="417" sc="13" el="419" ec="14">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="1700c992606c3fa632c7de0e3ea77328"><![CDATA[{
                RadPanel1.OnClientMouseOver = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="PagesToExclude">
          <declaration><![CDATA[public string PagesToExclude]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="494" sc="40" el="494" ec="44">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="494" sc="45" el="494" ec="49">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="PersistStateInCookie">
          <declaration><![CDATA[public bool PersistStateInCookie]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="425" sc="13" el="427" ec="14">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="477c666e5c0b4fdeb15fa14ed87cd6e7"><![CDATA[{
                return RadPanel1.PersistStateInCookie;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="429" sc="13" el="431" ec="14">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="1523933be83963edc2bf02c5ac09293f"><![CDATA[{
                RadPanel1.PersistStateInCookie = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="RadPanel1">
          <declaration><![CDATA[protected RadPanelBar RadPanel1]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="61" sc="13" el="69" ec="14">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="ea35c370b704af3cae90de87782e9c4d"><![CDATA[{
                if (_RadPanel1 == null)
                {
                    _RadPanel1 = new RadPanelBar();
                    _RadPanel1.ID = "RadPanel1";
                    LeftMenu1.Controls.Add(_RadPanel1);
                }
                return _RadPanel1;
            }]]></body>
          </codeblock>
        </property>
        <property name="RootItemClickedCssClass">
          <declaration><![CDATA[public string RootItemClickedCssClass]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="496" sc="49" el="496" ec="53">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="496" sc="54" el="496" ec="58">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="RootItemCssClass">
          <declaration><![CDATA[public string RootItemCssClass]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="498" sc="42" el="498" ec="46">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="498" sc="47" el="498" ec="51">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="RootItemDisabledCssClass">
          <declaration><![CDATA[public string RootItemDisabledCssClass]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="500" sc="50" el="500" ec="54">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="500" sc="55" el="500" ec="59">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="RootItemExpandedCssClass">
          <declaration><![CDATA[public string RootItemExpandedCssClass]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="502" sc="50" el="502" ec="54">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="502" sc="55" el="502" ec="59">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="RootItemFocusedCssClass">
          <declaration><![CDATA[public string RootItemFocusedCssClass]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="504" sc="49" el="504" ec="53">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="504" sc="54" el="504" ec="58">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="RootItemHeight">
          <declaration><![CDATA[public Unit RootItemHeight]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="506" sc="38" el="506" ec="42">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="506" sc="43" el="506" ec="47">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="RootItemHoveredImageUrl">
          <declaration><![CDATA[public string RootItemHoveredImageUrl]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="508" sc="49" el="508" ec="53">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="508" sc="54" el="508" ec="58">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="RootItemImageUrl">
          <declaration><![CDATA[public string RootItemImageUrl]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="510" sc="42" el="510" ec="46">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="510" sc="47" el="510" ec="51">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="RootItemWidth">
          <declaration><![CDATA[public Unit RootItemWidth]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="512" sc="37" el="512" ec="41">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="512" sc="42" el="512" ec="46">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="SelectedPathHeaderItemCss">
          <declaration><![CDATA[public string SelectedPathHeaderItemCss]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="514" sc="51" el="514" ec="55">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="514" sc="56" el="514" ec="60">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="SelectedPathHeaderItemImage">
          <declaration><![CDATA[public string SelectedPathHeaderItemImage]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="516" sc="53" el="516" ec="57">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="516" sc="58" el="516" ec="62">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="SelectedPathItemCss">
          <declaration><![CDATA[public string SelectedPathItemCss]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="518" sc="45" el="518" ec="49">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="518" sc="50" el="518" ec="54">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="SelectedPathItemImage">
          <declaration><![CDATA[public string SelectedPathItemImage]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="520" sc="47" el="520" ec="51">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="520" sc="52" el="520" ec="56">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ShowOnlyCurrent">
          <declaration><![CDATA[public string ShowOnlyCurrent]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="522" sc="41" el="522" ec="45">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="522" sc="46" el="522" ec="50">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ShowPath">
          <declaration><![CDATA[public bool ShowPath]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="524" sc="32" el="524" ec="36">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="524" sc="37" el="524" ec="41">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Skin">
          <declaration><![CDATA[public string Skin]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="526" sc="30" el="526" ec="34">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="526" sc="35" el="526" ec="39">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Style">
          <declaration><![CDATA[public string Style]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="528" sc="31" el="528" ec="35">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="528" sc="36" el="528" ec="40">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Width">
          <declaration><![CDATA[public Unit Width]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="437" sc="13" el="439" ec="14">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="99cb12d74ff1b2a37f11e7c8e4e8d24a"><![CDATA[{
                return RadPanel1.Width;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="441" sc="13" el="443" ec="14">admin\Skins\LeftMenu.ascx.cs</location>
            <body hash="54367530c9f4fe0c0952b94ea774ecf1"><![CDATA[{
                RadPanel1.Width = value;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="Links">
      <declaration><![CDATA[public class Links : SkinObjectBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private bool _forceLinks = true;]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="46" sc="9" el="47" ec="47">admin\Skins\Links.ascx.cs</location>
            <body hash="1c2840281a4152796c63c3c877c9f644"><![CDATA[private bool _forceLinks = true;
        private bool _includeActiveTab = true;]]></body>
          </codeblock>
        </constructor>
        <constructor name=".cctor">
          <declaration><![CDATA[static Links()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="41" sc="9" el="41" ec="121">admin\Skins\Links.ascx.cs</location>
            <body hash="e841074fcf8b9c02a5c33555fa7f6074"><![CDATA[private static readonly Regex SrcRegex = new Regex("src=[']?", RegexOptions.Compiled | RegexOptions.IgnoreCase)]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="AddLink">
          <declaration><![CDATA[private string AddLink(string strTabName, string strURL, string strCssClass)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="235" sc="9" el="237" ec="10">admin\Skins\Links.ascx.cs</location>
            <body hash="2be976d7c4ff19642ab7aee4218c8744"><![CDATA[{
            return string.Format("<a class=\"{0}\" href=\"{1}\">{2}</a>", strCssClass, strURL, strTabName);
        }]]></body>
          </codeblock>
        </method>
        <method name="BuildLinks">
          <declaration><![CDATA[private string BuildLinks(string strLevel, string strSeparator, string strCssClass)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="159" sc="9" el="174" ec="10">admin\Skins\Links.ascx.cs</location>
            <body hash="e40e5c49e1a2cd6d1a140809b55ce586"><![CDATA[{
            var sbLinks = new StringBuilder();

            List<TabInfo> portalTabs = TabController.GetTabsBySortOrder(PortalSettings.PortalId);
            List<TabInfo> hostTabs = TabController.GetTabsBySortOrder(Null.NullInteger);

            foreach (TabInfo objTab in portalTabs)
            {
                sbLinks.Append(ProcessLink(ProcessTab(objTab, strLevel, strCssClass), sbLinks.ToString().Length));
            }
            foreach (TabInfo objTab in hostTabs)
            {
                sbLinks.Append(ProcessLink(ProcessTab(objTab, strLevel, strCssClass), sbLinks.ToString().Length));
            }
            return sbLinks.ToString();
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="113" sc="9" el="152" ec="10">admin\Skins\Links.ascx.cs</location>
            <body hash="e55a49cae7ca2a844d3bf82b81622285"><![CDATA[{
            base.OnLoad(e);
            string strCssClass;
            if (!String.IsNullOrEmpty(CssClass))
            {
                strCssClass = CssClass;
            }
            else
            {
                strCssClass = "SkinObject";
            }
            string strSeparator = string.Empty;
            if (!String.IsNullOrEmpty(Separator))
            {
                if (Separator.IndexOf("src=", StringComparison.Ordinal) != -1)
                {
					//Add the skinpath to image paths
                    Separator = SrcRegex.Replace(Separator, "$&" + PortalSettings.ActiveTab.SkinPath);
                }
				
				//Wrap in a span
                Separator = string.Format("<span class=\"{0}\">{1}</span>", strCssClass, Separator);
            }
            else
            {
                Separator = " ";
            }
			
            //build links
            string strLinks = "";

            strLinks = BuildLinks(Level, strSeparator, strCssClass);
			
			//Render links, even if nothing is returned with the currently set level
            if (String.IsNullOrEmpty(strLinks) && ForceLinks)
            {
                strLinks = BuildLinks("", strSeparator, strCssClass);
            }
            lblLinks.Text = strLinks;
        }]]></body>
          </codeblock>
        </method>
        <method name="ProcessLink">
          <declaration><![CDATA[private string ProcessLink(string sLink, int iLinksLength)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="216" sc="9" el="232" ec="10">admin\Skins\Links.ascx.cs</location>
            <body hash="621602ace9d0e73ea7752e50a505f88a"><![CDATA[{
			//wrap in a div if set to vertical
            if (String.IsNullOrEmpty(sLink))
            {
                return "";
            }
            if (Alignment == "vertical")
            {
                sLink = string.Concat("<div>", Separator, sLink, "</div>");
            }
            else if (!String.IsNullOrEmpty(Separator) && iLinksLength > 0)
            {
				//If not vertical, then render the separator
                sLink = string.Concat(Separator, sLink);
            }
            return sLink;
        }]]></body>
          </codeblock>
        </method>
        <method name="ProcessTab">
          <declaration><![CDATA[private string ProcessTab(TabInfo objTab, string strLevel, string strCssClass)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="177" sc="9" el="213" ec="10">admin\Skins\Links.ascx.cs</location>
            <body hash="421c5f8581163652f4c91fe469cd42ce"><![CDATA[{
            if (Navigation.CanShowTab(objTab, AdminMode, ShowDisabled))
            {
                switch (strLevel)
                {
                    case "same": //Render tabs on the same level as the current tab
                    case "":
                        if (objTab.ParentId == PortalSettings.ActiveTab.ParentId)
                        {
                            if (IncludeActiveTab || objTab.TabID != PortalSettings.ActiveTab.TabID)
                            {
                                return AddLink(objTab.TabName, objTab.FullUrl, strCssClass);
                            }
                        }
                        break;
                    case "child": //Render the current tabs child tabs
                        if (objTab.ParentId == PortalSettings.ActiveTab.TabID)
                        {
                            return AddLink(objTab.TabName, objTab.FullUrl, strCssClass);
                        }
                        break;
                    case "parent": //Render the current tabs parenttab
                        if (objTab.TabID == PortalSettings.ActiveTab.ParentId)
                        {
                            return AddLink(objTab.TabName, objTab.FullUrl, strCssClass);
                        }
                        break;
                    case "root": //Render Root tabs
                        if (objTab.Level == 0)
                        {
                            return AddLink(objTab.TabName, objTab.FullUrl, strCssClass);
                        }
                        break;
                }
            }
            return "";
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_alignment">
          <declaration><![CDATA[private string _alignment;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_forceLinks">
          <declaration><![CDATA[private bool _forceLinks = true;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_includeActiveTab">
          <declaration><![CDATA[private bool _includeActiveTab = true;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_level">
          <declaration><![CDATA[private string _level;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblLinks">
          <declaration><![CDATA[protected Label lblLinks;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="SrcRegex">
          <declaration><![CDATA[private static readonly Regex SrcRegex = new Regex("src=[']?", RegexOptions.IgnoreCase | RegexOptions.Compiled);]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="Alignment">
          <declaration><![CDATA[public string Alignment]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="57" sc="13" el="59" ec="14">admin\Skins\Links.ascx.cs</location>
            <body hash="b9e004584fbfcef4d5bc1d486aaa9b19"><![CDATA[{
                return _alignment;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="61" sc="13" el="63" ec="14">admin\Skins\Links.ascx.cs</location>
            <body hash="2de658f2765f9bd7af81bd80c8764cb2"><![CDATA[{
                _alignment = value.ToLower();
            }]]></body>
          </codeblock>
        </property>
        <property name="CssClass">
          <declaration><![CDATA[public string CssClass]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="66" sc="34" el="66" ec="38">admin\Skins\Links.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="66" sc="39" el="66" ec="43">admin\Skins\Links.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ForceLinks">
          <declaration><![CDATA[public bool ForceLinks]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="87" sc="13" el="89" ec="14">admin\Skins\Links.ascx.cs</location>
            <body hash="0463ab591a54f16ef3405481c65f6082"><![CDATA[{
                return _forceLinks;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="91" sc="13" el="93" ec="14">admin\Skins\Links.ascx.cs</location>
            <body hash="0ddd6815fb8da64336eaaa0ecb9fc8ab"><![CDATA[{
                _forceLinks = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="IncludeActiveTab">
          <declaration><![CDATA[public bool IncludeActiveTab]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="99" sc="13" el="101" ec="14">admin\Skins\Links.ascx.cs</location>
            <body hash="08ace2bac19f34ec5181a829fafc4bcc"><![CDATA[{
                return _includeActiveTab;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="103" sc="13" el="105" ec="14">admin\Skins\Links.ascx.cs</location>
            <body hash="a1bfaf1d1de219f4ea4fc70432d25403"><![CDATA[{
                _includeActiveTab = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="Level">
          <declaration><![CDATA[public string Level]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="71" sc="13" el="73" ec="14">admin\Skins\Links.ascx.cs</location>
            <body hash="bfc16c102841583a3fa9012d30043683"><![CDATA[{
                return _level;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="75" sc="13" el="77" ec="14">admin\Skins\Links.ascx.cs</location>
            <body hash="0dcd708068402287667980b7e1b7a260"><![CDATA[{
                _level = value.ToLower();
            }]]></body>
          </codeblock>
        </property>
        <property name="Separator">
          <declaration><![CDATA[public string Separator]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="80" sc="35" el="80" ec="39">admin\Skins\Links.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="80" sc="40" el="80" ec="44">admin\Skins\Links.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ShowDisabled">
          <declaration><![CDATA[public bool ShowDisabled]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="82" sc="36" el="82" ec="40">admin\Skins\Links.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="82" sc="41" el="82" ec="45">admin\Skins\Links.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="LinkToFullSite">
      <declaration><![CDATA[public class LinkToFullSite : SkinObjectBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public LinkToFullSite()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="64" sc="3" el="78" ec="10">admin\Skins\LinkToFullSite.ascx.cs</location>
            <body hash="1ac93949336e7208a127803bac78429f"><![CDATA[{
            base.OnLoad(e);

            var redirectionController = new RedirectionController();
            var redirectUrl = redirectionController.GetFullSiteUrl();
            if (!string.IsNullOrEmpty(redirectUrl))
            {                
                lnkPortal.NavigateUrl = redirectUrl;
                lnkPortal.Text = Localization.GetString("lnkPortal", LocalResourcesFile);
            }
            else
            {
                this.Visible = false;
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_localResourcesFile">
          <declaration><![CDATA[private string _localResourcesFile;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lnkPortal">
          <declaration><![CDATA[protected HyperLink lnkPortal;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="MyFileName">
          <declaration><![CDATA[private const string MyFileName = "LinkToFullSite.ascx";]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="LocalResourcesFile">
          <declaration><![CDATA[private string LocalResourcesFile]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="52" sc="7" el="59" ec="8">admin\Skins\LinkToFullSite.ascx.cs</location>
            <body hash="27eda31706d101a3df656c232c76121a"><![CDATA[{
    			if(string.IsNullOrEmpty(_localResourcesFile))
    			{
    				_localResourcesFile = Localization.GetResourceFile(this, MyFileName);
    			}

    			return _localResourcesFile;
    		}]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="LinkToMobileSite">
      <declaration><![CDATA[public class LinkToMobileSite : SkinObjectBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public LinkToMobileSite()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="64" sc="3" el="78" ec="10">admin\Skins\LinkToMobileSite.ascx.cs</location>
            <body hash="3606d36c529331e8e3b6dd6b9fb01abb"><![CDATA[{
			base.OnLoad(e);

            var redirectionController = new RedirectionController();
            var redirectUrl = redirectionController.GetMobileSiteUrl();
            if (!string.IsNullOrEmpty(redirectUrl))
            {                
                lnkPortal.NavigateUrl = redirectUrl;                
                lnkPortal.Text = Localization.GetString("lnkPortal", LocalResourcesFile);
            }
            else
            {
                this.Visible = false;                    
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_localResourcesFile">
          <declaration><![CDATA[private string _localResourcesFile;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lnkPortal">
          <declaration><![CDATA[protected HyperLink lnkPortal;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="MyFileName">
          <declaration><![CDATA[private const string MyFileName = "LinkToMobileSite.ascx";]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="LocalResourcesFile">
          <declaration><![CDATA[private string LocalResourcesFile]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="52" sc="7" el="59" ec="8">admin\Skins\LinkToMobileSite.ascx.cs</location>
            <body hash="27eda31706d101a3df656c232c76121a"><![CDATA[{
    			if(string.IsNullOrEmpty(_localResourcesFile))
    			{
    				_localResourcesFile = Localization.GetResourceFile(this, MyFileName);
    			}

    			return _localResourcesFile;
    		}]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="Login">
      <declaration><![CDATA[public class Login : SkinObjectBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public Login()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="48" sc="9" el="51" ec="10">admin\Skins\Login.ascx.cs</location>
            <body hash="1f8c9333bb8d5a23a255fddb9ce9697c"><![CDATA[public Login()
        {
            LegacyMode = true;
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="HasSocialAuthenticationEnabled">
          <declaration><![CDATA[private bool HasSocialAuthenticationEnabled()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="182" sc="9" el="192" ec="10">admin\Skins\Login.ascx.cs</location>
            <body hash="7e8807b4ad325ce3012f9badae579c31"><![CDATA[{
            return (from a in AuthenticationController.GetEnabledAuthenticationServices()
                               let enabled = (a.AuthenticationType == "Facebook" 
                                                || a.AuthenticationType == "Google"
                                                || a.AuthenticationType == "Live" 
                                                || a.AuthenticationType == "Twitter")
                                             ? PortalController.GetPortalSettingAsBoolean(a.AuthenticationType + "_Enabled", PortalSettings.PortalId, false)
                                             : !string.IsNullOrEmpty(a.LoginControlSrc) && (LoadControl("~/" + a.LoginControlSrc) as AuthenticationLoginBase).Enabled
                               where a.AuthenticationType != "DNN" && enabled
                               select a).Any();
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="76" sc="3" el="80" ec="4">admin\Skins\Login.ascx.cs</location>
            <body hash="193ac222f1bc2f232876c867518190a5"><![CDATA[{
			base.OnInit(e);

			Visible = !PortalSettings.HideLoginControl || Request.IsAuthenticated;
		}]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="83" sc="9" el="179" ec="10">admin\Skins\Login.ascx.cs</location>
            <body hash="e301d865db3f4e7793f7af8776b2a587"><![CDATA[{
            base.OnLoad(e);

	        if (Visible)
	        {
		        try
		        {
			        if (LegacyMode)
			        {
				        loginLink.Visible = true;
				        loginGroup.Visible = false;
			        }
			        else
			        {
				        loginLink.Visible = false;
				        loginGroup.Visible = true;
			        }

			        if (!String.IsNullOrEmpty(CssClass))
			        {
				        loginLink.CssClass = CssClass;
				        enhancedLoginLink.CssClass = CssClass;
			        }

			        if (Request.IsAuthenticated)
			        {
				        if (!String.IsNullOrEmpty(LogoffText))
				        {
					        if (LogoffText.IndexOf("src=") != -1)
					        {
						        LogoffText = LogoffText.Replace("src=\"", "src=\"" + PortalSettings.ActiveTab.SkinPath);
					        }
					        loginLink.Text = LogoffText;
					        enhancedLoginLink.Text = LogoffText;
				        }
				        else
				        {
					        loginLink.Text = Localization.GetString("Logout", Localization.GetResourceFile(this, MyFileName));
					        enhancedLoginLink.Text = loginLink.Text;
					        loginLink.ToolTip = loginLink.Text;
					        enhancedLoginLink.ToolTip = loginLink.Text;
				        }
				        loginLink.NavigateUrl = Globals.NavigateURL(PortalSettings.ActiveTab.TabID, "Logoff");
				        enhancedLoginLink.NavigateUrl = loginLink.NavigateUrl;
			        }
			        else
			        {
				        if (!String.IsNullOrEmpty(Text))
				        {
					        if (Text.IndexOf("src=") != -1)
					        {
						        Text = Text.Replace("src=\"", "src=\"" + PortalSettings.ActiveTab.SkinPath);
					        }
					        loginLink.Text = Text;
					        enhancedLoginLink.Text = Text;
				        }
				        else
				        {
					        loginLink.Text = Localization.GetString("Login", Localization.GetResourceFile(this, MyFileName));
					        enhancedLoginLink.Text = loginLink.Text;
					        loginLink.ToolTip = loginLink.Text;
					        enhancedLoginLink.ToolTip = loginLink.Text;
				        }

				        string returnUrl = HttpContext.Current.Request.RawUrl;
				        if (returnUrl.IndexOf("?returnurl=") != -1)
				        {
					        returnUrl = returnUrl.Substring(0, returnUrl.IndexOf("?returnurl="));
				        }
				        returnUrl = HttpUtility.UrlEncode(returnUrl);

				        loginLink.NavigateUrl = Globals.LoginURL(returnUrl, (Request.QueryString["override"] != null));
				        enhancedLoginLink.NavigateUrl = loginLink.NavigateUrl;

                        //avoid issues caused by multiple clicks of login link
                        var oneclick = "this.disabled=true;";
			            if (Request.UserAgent != null && Request.UserAgent.Contains("MSIE 8.0")==false)
			            {
                            loginLink.Attributes.Add("onclick", oneclick);
                            enhancedLoginLink.Attributes.Add("onclick", oneclick);
			            }
                        
				        if (PortalSettings.EnablePopUps && PortalSettings.LoginTabId == Null.NullInteger && !HasSocialAuthenticationEnabled())
				        {
					        //To avoid duplicated encodes of URL
                            var clickEvent = "return " + UrlUtils.PopUpUrl(HttpUtility.UrlDecode(loginLink.NavigateUrl), this, PortalSettings, true, false, 300, 650);
					        loginLink.Attributes.Add("onclick", clickEvent);
					        enhancedLoginLink.Attributes.Add("onclick", clickEvent);
				        }
			        }
		        }
		        catch (Exception exc)
		        {
			        Exceptions.ProcessModuleLoadException(this, exc);
		        }
	        }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="enhancedLoginLink">
          <declaration><![CDATA[protected HyperLink enhancedLoginLink;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="loginGroup">
          <declaration><![CDATA[protected HtmlGenericControl loginGroup;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="loginLink">
          <declaration><![CDATA[protected HyperLink loginLink;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="MyFileName">
          <declaration><![CDATA[private const string MyFileName = "Login.ascx";]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="CssClass">
          <declaration><![CDATA[public string CssClass]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="62" sc="34" el="62" ec="38">admin\Skins\Login.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="62" sc="39" el="62" ec="43">admin\Skins\Login.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="LegacyMode">
          <declaration><![CDATA[public bool LegacyMode]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="69" sc="34" el="69" ec="38">admin\Skins\Login.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="69" sc="39" el="69" ec="43">admin\Skins\Login.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="LogoffText">
          <declaration><![CDATA[public string LogoffText]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="64" sc="36" el="64" ec="40">admin\Skins\Login.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="64" sc="41" el="64" ec="45">admin\Skins\Login.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Text">
          <declaration><![CDATA[public string Text]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="60" sc="30" el="60" ec="34">admin\Skins\Login.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="60" sc="35" el="60" ec="39">admin\Skins\Login.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="Logo">
      <declaration><![CDATA[public class Logo : SkinObjectBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public Logo()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="GetLogoFileInfo">
          <declaration><![CDATA[private IFileInfo GetLogoFileInfo()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="91" sc="9" el="97" ec="10">admin\Skins\Logo.ascx.cs</location>
            <body hash="d239a74475f315ebe89709d47c57fdb1"><![CDATA[{
            string cacheKey = String.Format(DataCache.PortalCacheKey, PortalSettings.PortalId, PortalSettings.CultureCode) + "LogoFile";
            var file = CBO.GetCachedObject<FileInfo>(new CacheItemArgs(cacheKey, DataCache.PortalCacheTimeOut, DataCache.PortalCachePriority),
                                                    GetLogoFileInfoCallBack);

            return file;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetLogoFileInfoCallBack">
          <declaration><![CDATA[private IFileInfo GetLogoFileInfoCallBack(CacheItemArgs itemArgs)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="100" sc="9" el="102" ec="10">admin\Skins\Logo.ascx.cs</location>
            <body hash="e6d8d8be85f63aed525026bc95ee5ad4"><![CDATA[{
            return FileManager.Instance.GetFile(PortalSettings.PortalId, PortalSettings.LogoFile);
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="46" sc="9" el="88" ec="10">admin\Skins\Logo.ascx.cs</location>
            <body hash="6b19111eab48ae51c4062b0bc717d69b"><![CDATA[{
            base.OnLoad(e);
            try
            {
                if (!String.IsNullOrEmpty(BorderWidth))
                {
                    imgLogo.BorderWidth = Unit.Parse(BorderWidth);
                }
                if (!String.IsNullOrEmpty(CssClass))
                {
                    imgLogo.CssClass = CssClass;
                }
                bool logoVisible = false;
                if (!String.IsNullOrEmpty(PortalSettings.LogoFile))
                {
                    var fileInfo = GetLogoFileInfo();
                    if (fileInfo != null)
                    {
                        string imageUrl = FileManager.Instance.GetUrl(fileInfo);
                        if (!String.IsNullOrEmpty(imageUrl))
                        {
                            imgLogo.ImageUrl = imageUrl;
                            logoVisible = true;
                        }
                    }
                }
                imgLogo.Visible = logoVisible;
                imgLogo.AlternateText = PortalSettings.PortalName;
                hypLogo.ToolTip = PortalSettings.PortalName;
                if (PortalSettings.HomeTabId != -1)
                {
                    hypLogo.NavigateUrl = Globals.NavigateURL(PortalSettings.HomeTabId);
                }
                else
                {
                    hypLogo.NavigateUrl = Globals.AddHTTP(PortalSettings.PortalAlias.HTTPAlias);
                }
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="hypLogo">
          <declaration><![CDATA[protected HyperLink hypLogo;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="imgLogo">
          <declaration><![CDATA[protected Image imgLogo;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="BorderWidth">
          <declaration><![CDATA[public string BorderWidth]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="43" sc="37" el="43" ec="41">admin\Skins\Logo.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="43" sc="42" el="43" ec="46">admin\Skins\Logo.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="CssClass">
          <declaration><![CDATA[public string CssClass]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="44" sc="34" el="44" ec="38">admin\Skins\Logo.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="44" sc="39" el="44" ec="43">admin\Skins\Logo.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="Meta">
      <declaration><![CDATA[public class Meta : SkinObjectBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private readonly Meta.HttpPlaceholder http = new Meta.HttpPlaceholder();]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="35" sc="9" el="35" ec="71">admin\Skins\Meta.ascx.cs</location>
            <body hash="a09f890bbcb84ad52a2af411ac5993bf"><![CDATA[private readonly HttpPlaceholder http = new HttpPlaceholder()]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="OnPreRender">
          <declaration><![CDATA[protected override void OnPreRender(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="74" sc="9" el="101" ec="10">admin\Skins\Meta.ascx.cs</location>
            <body hash="644c910112e47efa81035dd97d4b4511"><![CDATA[{
            base.OnPreRender(e);

            //if(!string.IsNullOrEmpty(Name) && !string.IsNullOrEmpty(Content))
            //{
            //    var metaTag = new HtmlMeta();
            //    metaTag.Name = Name;
            //    metaTag.Content = Content;
            //    Page.Header.Controls.Add(metaTag);
            //}

            if ((!string.IsNullOrEmpty(Name) || !string.IsNullOrEmpty(HttpEquiv)) && !string.IsNullOrEmpty(Content))
            {
                var metaTag = new HtmlMeta();

                if (!string.IsNullOrEmpty(HttpEquiv))
                    metaTag.HttpEquiv = HttpEquiv;
                if (!string.IsNullOrEmpty(Name))
                    metaTag.Name = Name;

                metaTag.Content = Content;

                if (InsertFirst)
                    Page.Header.Controls.AddAt(0, metaTag);
                else
                    Page.Header.Controls.Add(metaTag);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="http">
          <declaration><![CDATA[private readonly Meta.HttpPlaceholder http = new Meta.HttpPlaceholder();]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="Content">
          <declaration><![CDATA[public string Content]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="45" sc="33" el="45" ec="37">admin\Skins\Meta.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="45" sc="38" el="45" ec="42">admin\Skins\Meta.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Http">
          <declaration><![CDATA[public Meta.HttpPlaceholder Http]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="HttpEquiv">
          <declaration><![CDATA[public string HttpEquiv]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="InsertFirst">
          <declaration><![CDATA[public bool InsertFirst]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="71" sc="35" el="71" ec="39">admin\Skins\Meta.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="71" sc="40" el="71" ec="44">admin\Skins\Meta.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Name">
          <declaration><![CDATA[public string Name]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="42" sc="30" el="42" ec="34">admin\Skins\Meta.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="42" sc="35" el="42" ec="39">admin\Skins\Meta.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="Nav">
      <declaration><![CDATA[public class Nav : NavObjectBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public Nav()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="BuildNodes">
          <declaration><![CDATA[private void BuildNodes(DNNNode objNode)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="190" sc="9" el="195" ec="10">admin\Skins\Nav.ascx.cs</location>
            <body hash="43dc2d008fc6ba2b36e87866efda1be7"><![CDATA[{
            DNNNodeCollection objNodes;
            objNodes = GetNavigationNodes(objNode);
            Control.ClearNodes(); //since we always bind we need to clear the nodes for providers that maintain their state
            Bind(objNodes);
        }]]></body>
          </codeblock>
        </method>
        <method name="Control_NodeClick">
          <declaration><![CDATA[private void Control_NodeClick(NavigationEventArgs args)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="208" sc="9" el="214" ec="10">admin\Skins\Nav.ascx.cs</location>
            <body hash="811770a70b173fe505826f5ed7c63a6c"><![CDATA[{
            if (args.Node == null)
            {
                args.Node = Navigation.GetNavigationNode(args.ID, Control.ID);
            }
            Response.Redirect(Globals.ApplicationURL(int.Parse(args.Node.Key)), true);
        }]]></body>
          </codeblock>
        </method>
        <method name="Control_PopulateOnDemand">
          <declaration><![CDATA[private void Control_PopulateOnDemand(NavigationEventArgs args)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="217" sc="9" el="223" ec="10">admin\Skins\Nav.ascx.cs</location>
            <body hash="22df6e014ee659dc407e381e27545257"><![CDATA[{
            if (args.Node == null)
            {
                args.Node = Navigation.GetNavigationNode(args.ID, Control.ID);
            }
            BuildNodes(args.Node);
        }]]></body>
          </codeblock>
        </method>
        <method name="FixImagePath">
          <declaration><![CDATA[private string FixImagePath(string strPath)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="178" sc="9" el="187" ec="10">admin\Skins\Nav.ascx.cs</location>
            <body hash="b4af3c7cfa61eb6fa90cc4130299211c"><![CDATA[{
            if (strPath.IndexOf("src=") != -1 && strPath.IndexOf("src=\"/") < 0)
            {
                return strPath.Replace("src=\"", "src=\"[SKINPATH]");
            }
            else
            {
                return strPath;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="InitializeComponent">
          <declaration><![CDATA[private void InitializeComponent()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="37" sc="9" el="38" ec="10">admin\Skins\Nav.ascx.cs</location>
            <body hash="539fa760ca172337a931519768c64187"><![CDATA[{
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="198" sc="9" el="205" ec="10">admin\Skins\Nav.ascx.cs</location>
            <body hash="96d54bdf35206a788ee21487fa1726a3"><![CDATA[{
            InitializeNavControl(this, "SolpartMenuNavigationProvider");
            Control.NodeClick += Control_NodeClick;
            Control.PopulateOnDemand += Control_PopulateOnDemand;

            base.OnInit(e);
            InitializeComponent();
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="41" sc="9" el="175" ec="10">admin\Skins\Nav.ascx.cs</location>
            <body hash="14b12f392b090b0f287ed6a78639c6ae"><![CDATA[{
            base.OnLoad(e);
            try
            {
                bool blnIndicateChildren = bool.Parse(GetValue(IndicateChildren, "True"));
                string strRightArrow;
                string strDownArrow;
                var objSkins = new SkinController();
				
				//image for right facing arrow
                if (!String.IsNullOrEmpty(IndicateChildImageSub))
                {
                    strRightArrow = IndicateChildImageSub;
                }
                else
                {
                    strRightArrow = "breadcrumb.gif"; //removed APPIMAGEPATH token - http://www.dotnetnuke.com/Community/ForumsDotNetNuke/tabid/795/forumid/76/threadid/85554/scope/posts/Default.aspx
                }
				
				//image for down facing arrow
                if (!String.IsNullOrEmpty(IndicateChildImageRoot))
                {
                    strDownArrow = IndicateChildImageRoot;
                }
                else
                {
                    strDownArrow = "menu_down.gif"; //removed APPIMAGEPATH token - http://www.dotnetnuke.com/Community/ForumsDotNetNuke/tabid/795/forumid/76/threadid/85554/scope/posts/Default.aspx
                }
				
				//Set correct image path for all separator images
                if (!String.IsNullOrEmpty(SeparatorHTML))
                {
                    SeparatorHTML = FixImagePath(SeparatorHTML);
                }
				
                if (!String.IsNullOrEmpty(SeparatorLeftHTML))
                {
                    SeparatorLeftHTML = FixImagePath(SeparatorLeftHTML);
                }
				
                if (!String.IsNullOrEmpty(SeparatorRightHTML))
                {
                    SeparatorRightHTML = FixImagePath(SeparatorRightHTML);
                }
                if (!String.IsNullOrEmpty(SeparatorLeftHTMLBreadCrumb))
                {
                    SeparatorLeftHTMLBreadCrumb = FixImagePath(SeparatorLeftHTMLBreadCrumb);
                }
				
                if (!String.IsNullOrEmpty(SeparatorRightHTMLBreadCrumb))
                {
                    SeparatorRightHTMLBreadCrumb = FixImagePath(SeparatorRightHTMLBreadCrumb);
                }
				
                if (!String.IsNullOrEmpty(SeparatorLeftHTMLActive))
                {
                    SeparatorLeftHTMLActive = FixImagePath(SeparatorLeftHTMLActive);
                }
				
                if (!String.IsNullOrEmpty(SeparatorRightHTMLActive))
                {
                    SeparatorRightHTMLActive = FixImagePath(SeparatorRightHTMLActive);
                }
				
                if (!String.IsNullOrEmpty(NodeLeftHTMLBreadCrumbRoot))
                {
                    NodeLeftHTMLBreadCrumbRoot = FixImagePath(NodeLeftHTMLBreadCrumbRoot);
                }
				
                if (!String.IsNullOrEmpty(NodeRightHTMLBreadCrumbRoot))
                {
                    NodeRightHTMLBreadCrumbRoot = FixImagePath(NodeRightHTMLBreadCrumbRoot);
                }
				
                if (!String.IsNullOrEmpty(NodeLeftHTMLBreadCrumbSub))
                {
                    NodeLeftHTMLBreadCrumbSub = FixImagePath(NodeLeftHTMLBreadCrumbSub);
                }
				
                if (!String.IsNullOrEmpty(NodeRightHTMLBreadCrumbSub))
                {
                    NodeRightHTMLBreadCrumbSub = FixImagePath(NodeRightHTMLBreadCrumbSub);
                }
				
                if (!String.IsNullOrEmpty(NodeLeftHTMLRoot))
                {
                    NodeLeftHTMLRoot = FixImagePath(NodeLeftHTMLRoot);
                }
				
                if (!String.IsNullOrEmpty(NodeRightHTMLRoot))
                {
                    NodeRightHTMLRoot = FixImagePath(NodeRightHTMLRoot);
                }
				
                if (!String.IsNullOrEmpty(NodeLeftHTMLSub))
                {
                    NodeLeftHTMLSub = FixImagePath(NodeLeftHTMLSub);
                }
				
                if (!String.IsNullOrEmpty(NodeRightHTMLSub))
                {
                    NodeRightHTMLSub = FixImagePath(NodeRightHTMLSub);
                }
				
                if (String.IsNullOrEmpty(PathImage))
                {
                    PathImage = PortalSettings.HomeDirectory;
                }
				
                if (blnIndicateChildren)
                {
                    IndicateChildImageSub = strRightArrow;
                    if (ControlOrientation.ToLower() == "vertical")
                    {
                        IndicateChildImageRoot = strRightArrow;
                    }
                    else
                    {
                        IndicateChildImageRoot = strDownArrow;
                    }
                }
                else
                {
                    IndicateChildImageSub = "[APPIMAGEPATH]spacer.gif";
                }
				
                PathSystemScript = Globals.ApplicationPath + "/controls/SolpartMenu/";
                PathSystemImage = "[APPIMAGEPATH]";
                BuildNodes(null);
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="Privacy">
      <declaration><![CDATA[public class Privacy : SkinObjectBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public Privacy()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="InitializeComponent">
          <declaration><![CDATA[private void InitializeComponent()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="46" sc="9" el="47" ec="10">admin\Skins\Privacy.ascx.cs</location>
            <body hash="539fa760ca172337a931519768c64187"><![CDATA[{
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="50" sc="9" el="54" ec="10">admin\Skins\Privacy.ascx.cs</location>
            <body hash="5f3c8c20cc44d36b74ae4760af9b8276"><![CDATA[{
            base.OnInit(e);

            InitializeComponent();
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="57" sc="9" el="80" ec="10">admin\Skins\Privacy.ascx.cs</location>
            <body hash="ed7299f2fbef2a6dbde2b37179e9f6b5"><![CDATA[{
            base.OnLoad(e);
            try
            {
                if (!String.IsNullOrEmpty(CssClass))
                {
                    hypPrivacy.CssClass = CssClass;
                }
                if (!String.IsNullOrEmpty(Text))
                {
                    hypPrivacy.Text = Text;
                }
                else
                {
                    hypPrivacy.Text = Localization.GetString("Privacy", Localization.GetResourceFile(this, MyFileName));
                }
                hypPrivacy.NavigateUrl = Globals.NavigateURL(PortalSettings.ActiveTab.TabID, "Privacy");
                hypPrivacy.Attributes["rel"] = "nofollow";
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="hypPrivacy">
          <declaration><![CDATA[protected HyperLink hypPrivacy;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="MyFileName">
          <declaration><![CDATA[private const string MyFileName = "Privacy.ascx";]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="CssClass">
          <declaration><![CDATA[public string CssClass]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="43" sc="34" el="43" ec="38">admin\Skins\Privacy.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="43" sc="39" el="43" ec="43">admin\Skins\Privacy.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Text">
          <declaration><![CDATA[public string Text]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="41" sc="30" el="41" ec="34">admin\Skins\Privacy.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="41" sc="35" el="41" ec="39">admin\Skins\Privacy.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="Search">
      <declaration><![CDATA[public class Search : SkinObjectBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private bool _showSite = true;]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="43" sc="9" el="347" ec="47">admin\Skins\Search.ascx.cs</location>
            <body hash="f3aade2ef42eb1311b013b8792b57759"><![CDATA[private bool _showSite = true;
        private bool _showWeb = true;
        private string _siteIconURL;
        private string _siteText;
        private string _siteToolTip;
        private string _siteURL;
        private string _webIconURL;
        private string _webText;
        private string _webToolTip;
        private string _webURL;

        #endregion

        #region Public Members

        /// <summary>
        /// Gets or sets the CSS class for the option buttons and search button
        /// </summary>
        /// <remarks>If you are using the DropDownList option then you can style the search
        /// elements without requiring a custom CssClass.</remarks>
        public string CssClass { get; set; }

        /// <summary>
        /// Gets or sets the visibility setting for the radio button corresponding to site based searchs.
        /// </summary>
        /// <remarks>Set this value to false to hide the "Site" radio button.  This setting has no effect
        /// if UseDropDownList is true.</remarks>
        public bool ShowSite
        {
            get
            {
                return _showSite;
            }
            set
            {
                _showSite = value;
            }
        }

        /// <summary>
        /// Gets or sets the visibility setting for the radio button corresponding to web based searchs.
        /// </summary>
        /// <remarks>Set this value to false to hide the "Web" radio button.  This setting has no effect
        /// if UseDropDownList is true.</remarks>
        public bool ShowWeb
        {
            get
            {
                return _showWeb;
            }
            set
            {
                _showWeb = value;
            }
        }

        /// <summary>
        /// Gets or sets the site icon URL.
        /// </summary>
        /// <value>The site icon URL.</value>
        /// <remarks>If the SiteIconURL is not set or is an empty string then this will return a site relative URL for the 
        /// DnnSearch_16X16_Standard.png image in the images/search subfolder.  SiteIconURL supports using 
        /// app relative virtual paths designated by the use of the tilde (~).</remarks>
        public string SiteIconURL
        {
            get
            {
                if (string.IsNullOrEmpty(_siteIconURL))
                {
                    return IconController.IconURL("DnnSearch");
                }
                return _siteIconURL;
            }
            set
            {
                _siteIconURL = value;
            }
        }
                
        public string SeeMoreText
        {
            get
            {
                return Localization.GetSafeJSString("SeeMoreResults", Localization.GetResourceFile(this, MyFileName));
            }
        }

        public string ClearQueryText
        {
            get
            {
                return Localization.GetSafeJSString("SearchClearQuery", Localization.GetResourceFile(this, MyFileName));
            }
        }

        public string NoResultText
        {
            get
            {
                return Localization.GetSafeJSString("NoResult", Localization.GetResourceFile(this, MyFileName));
            }
        }

        public string PlaceHolderText
        {
            get
            {
                return Localization.GetSafeJSString("Placeholder", Localization.GetResourceFile(this, MyFileName));
            }
        }

        /// <summary>
        /// Gets or sets the text for the "site" radio button or option list item.
        /// </summary>
        /// <value>The site text.</value>
        /// <remarks>If the value is not set or is an empty string, then the localized value from
        /// /admin/skins/app_localresources/Search.ascx.resx localresource file is used.</remarks>
        public string SiteText
        {
            get
            {
                if (string.IsNullOrEmpty(_siteText))
                {
                    return Localization.GetString("Site", Localization.GetResourceFile(this, MyFileName));
                }
                return _siteText;
            }
            set
            {
                _siteText = value;
            }
        }

        /// <summary>
        /// Gets or sets the tooltip text for the "site" radio button.
        /// </summary>
        /// <value>The site tool tip.</value>
        /// <remarks>If the value is not set or is an empty string, then the localized value from
        /// /admin/skins/app_localresources/Search.ascx.resx localresource file is used.</remarks>
        public string SiteToolTip
        {
            get
            {
                if (string.IsNullOrEmpty(_siteToolTip))
                {
                    return Localization.GetString("Site.ToolTip", Localization.GetResourceFile(this, MyFileName));
                }
                return _siteToolTip;
            }
            set
            {
                _siteToolTip = value;
            }
        }
        
        /// <summary>
        /// Gets or sets the URL for doing web based site searches.
        /// </summary>
        /// <value>The site URL.</value>
        /// <remarks>If the value is not set or is an empty string, then the localized value from
        /// /admin/skins/app_localresources/Search.ascx.resx localresource file is used.
        /// <para>The site URL is a template for an external search engine, which by default, uses Google.com.  The siteURL should
        /// include the tokens [TEXT] and [DOMAIN] to be replaced automatically by the search text and the current site domain.</para></remarks>
        public string SiteURL
        {
            get
            {
                if (string.IsNullOrEmpty(_siteURL))
                {
                    return Localization.GetString("URL", Localization.GetResourceFile(this, MyFileName));
                }
                return _siteURL;
            }
            set
            {
                _siteURL = value;
            }
        }

        /// <summary>
        /// Gets or sets the html for the submit button.
        /// </summary>
        /// <remarks>If the value is not set or is an empty string, then the localized value from
        /// /admin/skins/app_localresources/Search.ascx.resx localresource file is used.
        /// <para>If you set the value to an hmtl img tag, then the src attribute will be made relative
        /// to the current skinpath.</para></remarks>
        public string Submit { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether to use the web search engine for site searches.
        /// </summary>
        /// <remarks>Set this value to true to perform a domain limited search using the search engine defined by <see cref="SiteURL">SiteURL</see>.</remarks>
        public bool UseWebForSite { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether to display the site/web options using a drop down list.
        /// </summary>
        /// <remarks>If true, then the site and web options are displayed in a drop down list.  If the 
        /// drop down list is used, then the <see cref="ShowWeb">ShowWeb</see> and <see cref="ShowSite">ShowSite</see>
        /// properties are not used.</remarks>
        public bool UseDropDownList { get; set; }

        /// <summary>
        /// Gets or sets the web icon URL.
        /// </summary>
        /// <value>The web icon URL.</value>
        /// <remarks>If the WebIconURL is not set or is an empty string then this will return a site relative URL for the 
        /// google-icon.gif image in the images/search subfolder.  WebIconURL supports using 
        /// app relative virtual paths designated by the use of the tilde (~).</remarks>
        public string WebIconURL
        {
            get
            {
                if (string.IsNullOrEmpty(_webIconURL))
                {
                    return IconController.IconURL("GoogleSearch");
                }
                return _webIconURL;
            }
            set
            {
                _webIconURL = value;
            }
        }

        /// <summary>
        /// Gets or sets the text for the "web" radio button or option list item.
        /// </summary>
        /// <value>The web text.</value>
        /// <remarks>If the value is not set or is an empty string, then the localized value from
        /// /admin/skins/app_localresources/Search.ascx.resx localresource file is used.</remarks>
        public string WebText
        {
            get
            {
                if (string.IsNullOrEmpty(_webText))
                {
                    return Localization.GetString("Web", Localization.GetResourceFile(this, MyFileName));
                }
                return _webText;
            }
            set
            {
                _webText = value;
            }
        }

        /// <summary>
        /// Gets or sets the tooltip text for the "web" radio button.
        /// </summary>
        /// <value>The web tool tip.</value>
        /// <remarks>If the value is not set or is an empty string, then the localized value from
        /// /admin/skins/app_localresources/Search.ascx.resx localresource file is used.</remarks>
        public string WebToolTip
        {
            get
            {
                if (string.IsNullOrEmpty(_webToolTip))
                {
                    return Localization.GetString("Web.ToolTip", Localization.GetResourceFile(this, MyFileName));
                }
                return _webToolTip;
            }
            set
            {
                _webToolTip = value;
            }
        }

        /// <summary>
        /// Gets or sets the URL for doing web based searches.
        /// </summary>
        /// <value>The web URL.</value>
        /// <remarks>If the value is not set or is an empty string, then the localized value from
        /// /admin/skins/app_localresources/Search.ascx.resx localresource file is used.
        /// <para>The web URL is a template for an external search engine, which by default, uses Google.com.  The WebURL should
        /// include the token [TEXT] to be replaced automatically by the search text.  The [DOMAIN] token, if present, will be
        /// replaced by an empty string.</para></remarks>
        public string WebURL
        {
            get
            {
                if (string.IsNullOrEmpty(_webURL))
                {
                    return Localization.GetString("URL", Localization.GetResourceFile(this, MyFileName));
                }
                return _webURL;
            }
            set
            {
                _webURL = value;
            }
        }

        /// <summary>
        /// minium chars required to trigger auto search
        /// </summary>
        public int MinCharRequired { get; set; }

        /// <summary>
        /// The millisecond to delay trigger auto search
        /// </summary>
        public int AutoSearchDelayInMilliSecond { get; set; }

        private bool _enableWildSearch = true;]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="CmdSearchClick">
          <declaration><![CDATA[private void CmdSearchClick(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="513" sc="9" el="523" ec="10">admin\Skins\Search.ascx.cs</location>
            <body hash="0a2cee960a12588eafe9b4b6b0842b6e"><![CDATA[{
            SearchType = "S";
            if (WebRadioButton.Visible)
            {
                if (WebRadioButton.Checked)
                {
                    SearchType = "W";
                }
            }
            ExecuteSearch(txtSearch.Text.Trim(), SearchType);
        }]]></body>
          </codeblock>
        </method>
        <method name="CmdSearchNewClick">
          <declaration><![CDATA[protected void CmdSearchNewClick(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="532" sc="9" el="535" ec="10">admin\Skins\Search.ascx.cs</location>
            <body hash="09e6dadb5447946d5959867656f3892b"><![CDATA[{
            SearchType = ClientAPI.GetClientVariable(Page, "SearchIconSelected");
            ExecuteSearch(txtSearchNew.Text.Trim(), SearchType);
        }]]></body>
          </codeblock>
        </method>
        <method name="ExecuteSearch">
          <declaration><![CDATA[protected void ExecuteSearch(string searchText, string searchType)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="398" sc="9" el="457" ec="10">admin\Skins\Search.ascx.cs</location>
            <body hash="0391df55a6e02b44dddb4b4f24d94a93"><![CDATA[{
            int searchTabId = GetSearchTabId();

            if (searchTabId == Null.NullInteger)
            {
                return;
            }
            string strURL;
            if (!string.IsNullOrEmpty(searchText))
            {
                switch (searchType)
                {
                    case "S":
                        // site
                        if (UseWebForSite)
                        {
                            strURL = SiteURL;
                            if (!string.IsNullOrEmpty(strURL))
                            {
                                strURL = strURL.Replace("[TEXT]", Server.UrlEncode(searchText));
                                strURL = strURL.Replace("[DOMAIN]", Request.Url.Host);
                                UrlUtils.OpenNewWindow(Page, GetType(), strURL);
                            }
                        }
                        else
                        {
                            if (Host.UseFriendlyUrls)
                            {
                                Response.Redirect(Globals.NavigateURL(searchTabId) + "?Search=" + Server.UrlEncode(searchText));
                            }
                            else
                            {
                                Response.Redirect(Globals.NavigateURL(searchTabId) + "&Search=" + Server.UrlEncode(searchText));
                            }
                        }
                        break;
                    case "W":
                        // web
                        strURL = WebURL;
                        if (!string.IsNullOrEmpty(strURL))
                        {
                            strURL = strURL.Replace("[TEXT]", Server.UrlEncode(searchText));
                            strURL = strURL.Replace("[DOMAIN]", "");
                            UrlUtils.OpenNewWindow(Page, GetType(), strURL);
                        }
                        break;
                }
            }
            else
            {
                if (Host.UseFriendlyUrls)
                {
                    Response.Redirect(Globals.NavigateURL(searchTabId));
                }
                else
                {
                    Response.Redirect(Globals.NavigateURL(searchTabId));
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetSearchTabId">
          <declaration><![CDATA[private int GetSearchTabId()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="364" sc="9" el="386" ec="10">admin\Skins\Search.ascx.cs</location>
            <body hash="dea9dd2d7ccb85ce35e652825cad77c6"><![CDATA[{
            int searchTabId = PortalSettings.SearchTabId;
            if (searchTabId == Null.NullInteger)
            {
                ArrayList arrModules = ModuleController.Instance.GetModulesByDefinition(PortalSettings.PortalId, "Search Results");
                if (arrModules.Count > 1)
                {
                    foreach (ModuleInfo SearchModule in arrModules)
                    {
                        if (SearchModule.CultureCode == PortalSettings.CultureCode)
                        {
                            searchTabId = SearchModule.TabID;
                        }
                    }
                }
                else if (arrModules.Count == 1)
                {
                    searchTabId = ((ModuleInfo)arrModules[0]).TabID;
                }
            }

            return searchTabId;
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="468" sc="9" el="504" ec="10">admin\Skins\Search.ascx.cs</location>
            <body hash="52eebdb4fb4624113a6c043d9940d726"><![CDATA[{
            base.OnLoad(e);
                        
            Framework.ServicesFramework.Instance.RequestAjaxAntiForgerySupport();
            ClientResourceManager.RegisterStyleSheet(Page, "~/Resources/Search/SearchSkinObjectPreview.css", FileOrder.Css.ModuleCss);
            ClientResourceManager.RegisterScript(Page, "~/Resources/Search/SearchSkinObjectPreview.js");
            

            cmdSearch.Click += CmdSearchClick;
            cmdSearchNew.Click += CmdSearchNewClick;

            if (MinCharRequired == 0) MinCharRequired = 2;
            if (AutoSearchDelayInMilliSecond == 0) AutoSearchDelayInMilliSecond = 400;
            PortalId = PortalSettings.ActiveTab.IsSuperTab ? PortalSettings.PortalId : -1;

            if (!String.IsNullOrEmpty(Submit))
            {
                if (Submit.IndexOf("src=", StringComparison.Ordinal) != -1)
                {
                    Submit = Submit.Replace("src=\"", "src=\"" + PortalSettings.ActiveTab.SkinPath);
                    Submit = Submit.Replace("src='", "src='" + PortalSettings.ActiveTab.SkinPath);
                }
            }
            else
            {
                Submit = Localization.GetString("Search", Localization.GetResourceFile(this, MyFileName));
            }
            cmdSearch.Text = Submit;
            cmdSearchNew.Text = Submit;
            if (!String.IsNullOrEmpty(CssClass))
            {
                WebRadioButton.CssClass = CssClass;
                SiteRadioButton.CssClass = CssClass;
                cmdSearch.CssClass = CssClass;
                cmdSearchNew.CssClass = CssClass;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnPreRender">
          <declaration><![CDATA[protected override void OnPreRender(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="543" sc="9" el="595" ec="10">admin\Skins\Search.ascx.cs</location>
            <body hash="47e59ad3edd8f5981c069f5620bf026f"><![CDATA[{
            base.OnPreRender(e);

            ClassicSearch.Visible = !UseDropDownList;
            DropDownSearch.Visible = UseDropDownList;
            CultureCode = System.Threading.Thread.CurrentThread.CurrentCulture.ToString();
            
            if (UseDropDownList)
            {
                //Client Variables will survive a postback so there is no reason to register them.
                if (!Page.IsPostBack)
                {

                    downArrow.AlternateText = Localization.GetString("DropDownGlyph.AltText", Localization.GetResourceFile(this, MyFileName));
                    downArrow.ToolTip = downArrow.AlternateText;

                    ClientAPI.RegisterClientVariable(Page, "SearchIconWebUrl", string.Format("url({0})", ResolveUrl(WebIconURL)), true);
                    ClientAPI.RegisterClientVariable(Page, "SearchIconSiteUrl", string.Format("url({0})", ResolveUrl(SiteIconURL)), true);

                    //We are going to use a dnn client variable to store which search option (web/site) is selected.
                    ClientAPI.RegisterClientVariable(Page, "SearchIconSelected", "S", true);
                    SearchType = "S";
                }

                JavaScript.RegisterClientReference(this.Page, ClientAPI.ClientNamespaceReferences.dnn);
                ClientResourceManager.RegisterScript(Page, "~/Resources/Search/Search.js", FileOrder.Js.DefaultPriority, "DnnFormBottomProvider");

                txtSearchNew.Attributes.Add("autocomplete", "off");
                txtSearchNew.Attributes.Add("placeholder", PlaceHolderText);
            }
            else
            {
                WebRadioButton.Visible = ShowWeb;
                SiteRadioButton.Visible = ShowSite;

                if (WebRadioButton.Visible)
                {
                    WebRadioButton.Checked = true;
                    WebRadioButton.Text = WebText;
                    WebRadioButton.ToolTip = WebToolTip;
                }
                if (SiteRadioButton.Visible)
                {
                    SiteRadioButton.Checked = true;
                    SiteRadioButton.Text = SiteText;
                    SiteRadioButton.ToolTip = SiteToolTip;
                }

                SearchType = "S";
                txtSearch.Attributes.Add("autocomplete", "off");
                txtSearch.Attributes.Add("placeholder", PlaceHolderText);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_enableWildSearch">
          <declaration><![CDATA[private bool _enableWildSearch = true;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_showSite">
          <declaration><![CDATA[private bool _showSite = true;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_showWeb">
          <declaration><![CDATA[private bool _showWeb = true;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_siteIconURL">
          <declaration><![CDATA[private string _siteIconURL;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_siteText">
          <declaration><![CDATA[private string _siteText;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_siteToolTip">
          <declaration><![CDATA[private string _siteToolTip;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_siteURL">
          <declaration><![CDATA[private string _siteURL;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_webIconURL">
          <declaration><![CDATA[private string _webIconURL;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_webText">
          <declaration><![CDATA[private string _webText;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_webToolTip">
          <declaration><![CDATA[private string _webToolTip;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_webURL">
          <declaration><![CDATA[private string _webURL;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ClassicSearch">
          <declaration><![CDATA[protected HtmlGenericControl ClassicSearch;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdSearch">
          <declaration><![CDATA[protected LinkButton cmdSearch;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdSearchNew">
          <declaration><![CDATA[protected LinkButton cmdSearchNew;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="downArrow">
          <declaration><![CDATA[protected DnnImage downArrow;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="DropDownSearch">
          <declaration><![CDATA[protected HtmlGenericControl DropDownSearch;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="MyFileName">
          <declaration><![CDATA[private const string MyFileName = "Search.ascx";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="SiteRadioButton">
          <declaration><![CDATA[protected RadioButton SiteRadioButton;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtSearch">
          <declaration><![CDATA[protected TextBox txtSearch;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtSearchNew">
          <declaration><![CDATA[protected TextBox txtSearchNew;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="WebRadioButton">
          <declaration><![CDATA[protected RadioButton WebRadioButton;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="AutoSearchDelayInMilliSecond">
          <declaration><![CDATA[public int AutoSearchDelayInMilliSecond]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="345" sc="51" el="345" ec="55">admin\Skins\Search.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="345" sc="56" el="345" ec="60">admin\Skins\Search.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ClearQueryText">
          <declaration><![CDATA[public string ClearQueryText]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="133" sc="13" el="135" ec="14">admin\Skins\Search.ascx.cs</location>
            <body hash="6ae2e8c2f5daae24ca184f35b4271b6a"><![CDATA[{
                return Localization.GetSafeJSString("SearchClearQuery", Localization.GetResourceFile(this, MyFileName));
            }]]></body>
          </codeblock>
        </property>
        <property name="CssClass">
          <declaration><![CDATA[public string CssClass]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="63" sc="34" el="63" ec="38">admin\Skins\Search.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="63" sc="39" el="63" ec="43">admin\Skins\Search.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="CultureCode">
          <declaration><![CDATA[protected string CultureCode]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="357" sc="40" el="357" ec="44">admin\Skins\Search.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="357" sc="45" el="357" ec="49">admin\Skins\Search.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="EnableWildSearch">
          <declaration><![CDATA[public bool EnableWildSearch]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="MinCharRequired">
          <declaration><![CDATA[public int MinCharRequired]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="340" sc="38" el="340" ec="42">admin\Skins\Search.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="340" sc="43" el="340" ec="47">admin\Skins\Search.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="NoResultText">
          <declaration><![CDATA[public string NoResultText]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="141" sc="13" el="143" ec="14">admin\Skins\Search.ascx.cs</location>
            <body hash="1ce71eb14bd0029fce01e8e0e911dd6b"><![CDATA[{
                return Localization.GetSafeJSString("NoResult", Localization.GetResourceFile(this, MyFileName));
            }]]></body>
          </codeblock>
        </property>
        <property name="PlaceHolderText">
          <declaration><![CDATA[public string PlaceHolderText]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="149" sc="13" el="151" ec="14">admin\Skins\Search.ascx.cs</location>
            <body hash="b1616b7adb73efbaa6411dc5ba9cf835"><![CDATA[{
                return Localization.GetSafeJSString("Placeholder", Localization.GetResourceFile(this, MyFileName));
            }]]></body>
          </codeblock>
        </property>
        <property name="PortalId">
          <declaration><![CDATA[protected int PortalId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="353" sc="34" el="353" ec="38">admin\Skins\Search.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="353" sc="39" el="353" ec="43">admin\Skins\Search.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="SearchType">
          <declaration><![CDATA[protected string SearchType]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="355" sc="39" el="355" ec="43">admin\Skins\Search.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="355" sc="44" el="355" ec="48">admin\Skins\Search.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="SeeMoreText">
          <declaration><![CDATA[public string SeeMoreText]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="125" sc="13" el="127" ec="14">admin\Skins\Search.ascx.cs</location>
            <body hash="34f9a07bb0933c0c9edf457eb8736892"><![CDATA[{
                return Localization.GetSafeJSString("SeeMoreResults", Localization.GetResourceFile(this, MyFileName));
            }]]></body>
          </codeblock>
        </property>
        <property name="ShowSite">
          <declaration><![CDATA[public bool ShowSite]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="73" sc="13" el="75" ec="14">admin\Skins\Search.ascx.cs</location>
            <body hash="5066709662561d3a677720744c16df58"><![CDATA[{
                return _showSite;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="77" sc="13" el="79" ec="14">admin\Skins\Search.ascx.cs</location>
            <body hash="02bde5af4270f2bca024e1d2861531e8"><![CDATA[{
                _showSite = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="ShowWeb">
          <declaration><![CDATA[public bool ShowWeb]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="90" sc="13" el="92" ec="14">admin\Skins\Search.ascx.cs</location>
            <body hash="8795f9d955fa198d73639b7366292570"><![CDATA[{
                return _showWeb;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="94" sc="13" el="96" ec="14">admin\Skins\Search.ascx.cs</location>
            <body hash="fde29d2f71d6adc7ba1343c15d9dc0a3"><![CDATA[{
                _showWeb = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="SiteIconURL">
          <declaration><![CDATA[public string SiteIconURL]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="109" sc="13" el="115" ec="14">admin\Skins\Search.ascx.cs</location>
            <body hash="6112c701929cf581fdcf05a5968a1fdf"><![CDATA[{
                if (string.IsNullOrEmpty(_siteIconURL))
                {
                    return IconController.IconURL("DnnSearch");
                }
                return _siteIconURL;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="117" sc="13" el="119" ec="14">admin\Skins\Search.ascx.cs</location>
            <body hash="ed824aa10b6a2345b4aafeea110d6e0f"><![CDATA[{
                _siteIconURL = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="SiteText">
          <declaration><![CDATA[public string SiteText]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="163" sc="13" el="169" ec="14">admin\Skins\Search.ascx.cs</location>
            <body hash="65b984355240a23fb1e12634c1361565"><![CDATA[{
                if (string.IsNullOrEmpty(_siteText))
                {
                    return Localization.GetString("Site", Localization.GetResourceFile(this, MyFileName));
                }
                return _siteText;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="171" sc="13" el="173" ec="14">admin\Skins\Search.ascx.cs</location>
            <body hash="dc8c144544a0eeaa9ac4e55d8bf6bab1"><![CDATA[{
                _siteText = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="SiteToolTip">
          <declaration><![CDATA[public string SiteToolTip]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="185" sc="13" el="191" ec="14">admin\Skins\Search.ascx.cs</location>
            <body hash="5688fe02713172046c2644dae4e0429a"><![CDATA[{
                if (string.IsNullOrEmpty(_siteToolTip))
                {
                    return Localization.GetString("Site.ToolTip", Localization.GetResourceFile(this, MyFileName));
                }
                return _siteToolTip;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="193" sc="13" el="195" ec="14">admin\Skins\Search.ascx.cs</location>
            <body hash="fbc26934f5b5a1a59d5edc55d7e59da8"><![CDATA[{
                _siteToolTip = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="SiteURL">
          <declaration><![CDATA[public string SiteURL]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="209" sc="13" el="215" ec="14">admin\Skins\Search.ascx.cs</location>
            <body hash="8da780b44b0b591309e4db2cd1c9817e"><![CDATA[{
                if (string.IsNullOrEmpty(_siteURL))
                {
                    return Localization.GetString("URL", Localization.GetResourceFile(this, MyFileName));
                }
                return _siteURL;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="217" sc="13" el="219" ec="14">admin\Skins\Search.ascx.cs</location>
            <body hash="fd71eb9cf1dbbfdb0a19abaccaa12193"><![CDATA[{
                _siteURL = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="Submit">
          <declaration><![CDATA[public string Submit]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="229" sc="32" el="229" ec="36">admin\Skins\Search.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="229" sc="37" el="229" ec="41">admin\Skins\Search.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="UseDropDownList">
          <declaration><![CDATA[public bool UseDropDownList]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="243" sc="39" el="243" ec="43">admin\Skins\Search.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="243" sc="44" el="243" ec="48">admin\Skins\Search.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="UseWebForSite">
          <declaration><![CDATA[public bool UseWebForSite]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="235" sc="37" el="235" ec="41">admin\Skins\Search.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="235" sc="42" el="235" ec="46">admin\Skins\Search.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="WebIconURL">
          <declaration><![CDATA[public string WebIconURL]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="255" sc="13" el="261" ec="14">admin\Skins\Search.ascx.cs</location>
            <body hash="adf8ebc4d3fe015f37982351e495e80d"><![CDATA[{
                if (string.IsNullOrEmpty(_webIconURL))
                {
                    return IconController.IconURL("GoogleSearch");
                }
                return _webIconURL;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="263" sc="13" el="265" ec="14">admin\Skins\Search.ascx.cs</location>
            <body hash="bf5692deb2e2e0f984f2b048c7a96d7c"><![CDATA[{
                _webIconURL = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="WebText">
          <declaration><![CDATA[public string WebText]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="277" sc="13" el="283" ec="14">admin\Skins\Search.ascx.cs</location>
            <body hash="f733c89176083fbc490b5889f5ce37f8"><![CDATA[{
                if (string.IsNullOrEmpty(_webText))
                {
                    return Localization.GetString("Web", Localization.GetResourceFile(this, MyFileName));
                }
                return _webText;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="285" sc="13" el="287" ec="14">admin\Skins\Search.ascx.cs</location>
            <body hash="1a929c0c26a51dc2afe85c1c54ae27d4"><![CDATA[{
                _webText = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="WebToolTip">
          <declaration><![CDATA[public string WebToolTip]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="299" sc="13" el="305" ec="14">admin\Skins\Search.ascx.cs</location>
            <body hash="7c83672d15d25eb9cf01f7b5bcf75a43"><![CDATA[{
                if (string.IsNullOrEmpty(_webToolTip))
                {
                    return Localization.GetString("Web.ToolTip", Localization.GetResourceFile(this, MyFileName));
                }
                return _webToolTip;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="307" sc="13" el="309" ec="14">admin\Skins\Search.ascx.cs</location>
            <body hash="10936bc3a9850346a67619336d8e6b0f"><![CDATA[{
                _webToolTip = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="WebURL">
          <declaration><![CDATA[public string WebURL]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="324" sc="13" el="330" ec="14">admin\Skins\Search.ascx.cs</location>
            <body hash="63fa6bce556cd93815add8dcdb41ca68"><![CDATA[{
                if (string.IsNullOrEmpty(_webURL))
                {
                    return Localization.GetString("URL", Localization.GetResourceFile(this, MyFileName));
                }
                return _webURL;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="332" sc="13" el="334" ec="14">admin\Skins\Search.ascx.cs</location>
            <body hash="efb01ec051f5b673f1f610114362d390"><![CDATA[{
                _webURL = value;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="Styles">
      <declaration><![CDATA[public class Styles : SkinObjectBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private bool _useSkinPath = true;]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="36" sc="9" el="36" ec="42">admin\Skins\Styles.ascx.cs</location>
            <body hash="f0eef9387b86a131a21bb198a659d196"><![CDATA[private bool _useSkinPath = true]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="AddLink">
          <declaration><![CDATA[protected void AddLink(Control cssRoot, int InsertAt, HtmlLink link)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="112" sc="9" el="145" ec="10">admin\Skins\Styles.ascx.cs</location>
            <body hash="44d8553debbed8c885570c86ff9993ad"><![CDATA[{
            if (string.IsNullOrEmpty(Condition))
            {
                if (InsertAt == -1)
                {
                    cssRoot.Controls.Add(link);
                }
                else
                {
                    cssRoot.Controls.AddAt(InsertAt, link);
                }
            }
            else
            {
                var openif = new Literal();
                openif.Text = string.Format("<!--[if {0}]>", Condition);
                var closeif = new Literal();
                closeif.Text = "<![endif]-->";
                if (InsertAt == -1)
                {
                    cssRoot.Controls.Add(openif);
                    cssRoot.Controls.Add(link);
                    cssRoot.Controls.Add(closeif);
                }
                else
                {
					//Since we want to add at a specific location, we do this in reverse order
                    //this allows us to use the same insertion point
                    cssRoot.Controls.AddAt(InsertAt, closeif);
                    cssRoot.Controls.AddAt(InsertAt, link);
                    cssRoot.Controls.AddAt(InsertAt, openif);
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="AddStyleSheet">
          <declaration><![CDATA[protected void AddStyleSheet()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="67" sc="9" el="109" ec="10">admin\Skins\Styles.ascx.cs</location>
            <body hash="58a4d0f66f70c69ca08f9a95e148a8ab"><![CDATA[{
            //Find the placeholder control
            Control objCSS = Page.FindControl("CSS");
            if (objCSS != null)
            {
                //First see if we have already added the <LINK> control
                Control objCtrl = Page.Header.FindControl(ID);
                if (objCtrl == null)
                {
                    string skinpath = string.Empty;
                    if (UseSkinPath)
                    {
                        skinpath = ((Skin) Parent).SkinPath;
                    }
                    var objLink = new HtmlLink();
                    objLink.ID = Globals.CreateValidID(Name);
                    objLink.Attributes["rel"] = "stylesheet";
                    objLink.Attributes["type"] = "text/css";
                    objLink.Href = skinpath + StyleSheet;
                    if (Media != "")
                    {
                        objLink.Attributes["media"] = Media; //NWS: add support for "media" attribute
                    }
                    if (IsFirst)
                    {
						//Find the first HtmlLink
                        int iLink;
                        for (iLink = 0; iLink <= objCSS.Controls.Count - 1; iLink++)
                        {
                            if (objCSS.Controls[iLink] is HtmlLink)
                            {
                                break;
                            }
                        }
                        AddLink(objCSS, iLink, objLink);
                    }
                    else
                    {
                        AddLink(objCSS, -1, objLink);
                    }
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="61" sc="9" el="64" ec="10">admin\Skins\Styles.ascx.cs</location>
            <body hash="6e346264aceb312dcb160557279e2036"><![CDATA[{
            base.OnLoad(e);
            AddStyleSheet();
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_useSkinPath">
          <declaration><![CDATA[private bool _useSkinPath = true;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="Condition">
          <declaration><![CDATA[public string Condition]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="38" sc="35" el="38" ec="39">admin\Skins\Styles.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="38" sc="40" el="38" ec="44">admin\Skins\Styles.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="IsFirst">
          <declaration><![CDATA[public bool IsFirst]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="40" sc="31" el="40" ec="35">admin\Skins\Styles.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="40" sc="36" el="40" ec="40">admin\Skins\Styles.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Media">
          <declaration><![CDATA[public string Media]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="58" sc="31" el="58" ec="35">admin\Skins\Styles.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="58" sc="36" el="58" ec="40">admin\Skins\Styles.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Name">
          <declaration><![CDATA[public string Name]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="42" sc="30" el="42" ec="34">admin\Skins\Styles.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="42" sc="35" el="42" ec="39">admin\Skins\Styles.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="StyleSheet">
          <declaration><![CDATA[public string StyleSheet]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="44" sc="36" el="44" ec="40">admin\Skins\Styles.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="44" sc="41" el="44" ec="45">admin\Skins\Styles.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="UseSkinPath">
          <declaration><![CDATA[public bool UseSkinPath]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="49" sc="13" el="51" ec="14">admin\Skins\Styles.ascx.cs</location>
            <body hash="df12f79e646f22b2127518c46f2f07ea"><![CDATA[{
                return _useSkinPath;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="53" sc="13" el="55" ec="14">admin\Skins\Styles.ascx.cs</location>
            <body hash="c3c73f818182126042a907b66dd569ec"><![CDATA[{
                _useSkinPath = value;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="Tags">
      <declaration><![CDATA[public class Tags : SkinObjectBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private string _AddImageUrl = IconController.IconURL("Add");]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="37" sc="9" el="45" ec="39">admin\Skins\tags.ascx.cs</location>
            <body hash="e1e6ca75d6ccd124d1bf2881091ffd1f"><![CDATA[private string _AddImageUrl = IconController.IconURL("Add");
        private bool _AllowTagging = true;
        private string _CancelImageUrl = IconController.IconURL("Lt");
        private string _ObjectType = "Page";
        private string _RepeatDirection = "Horizontal";
        private string _SaveImageUrl = IconController.IconURL("Save");
        private string _Separator = ",&nbsp;";
        private bool _ShowCategories = true;
        private bool _ShowTags = true;]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="158" sc="9" el="182" ec="10">admin\Skins\tags.ascx.cs</location>
            <body hash="fa3ddf7415cb63d2aa6878fc5f96067d"><![CDATA[{
            base.OnLoad(e);

            if (ObjectType == "Page")
            {
                tagsControl.ContentItem = PortalSettings.ActiveTab;
            }
            else
            {
                tagsControl.ContentItem = ModuleControl.ModuleContext.Configuration;
            }

            tagsControl.AddImageUrl = AddImageUrl;
            tagsControl.CancelImageUrl = CancelImageUrl;
            tagsControl.SaveImageUrl = SaveImageUrl;

            tagsControl.CssClass = CssClass;

            tagsControl.AllowTagging = AllowTagging && Request.IsAuthenticated;
            tagsControl.NavigateUrlFormatString = Globals.NavigateURL(PortalSettings.SearchTabId, "", "Tag={0}");
            tagsControl.RepeatDirection = RepeatDirection;
            tagsControl.Separator = Separator;
            tagsControl.ShowCategories = ShowCategories;
            tagsControl.ShowTags = ShowTags;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_AddImageUrl">
          <declaration><![CDATA[private string _AddImageUrl = IconController.IconURL("Add");]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_AllowTagging">
          <declaration><![CDATA[private bool _AllowTagging = true;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_CancelImageUrl">
          <declaration><![CDATA[private string _CancelImageUrl = IconController.IconURL("Lt");]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_ObjectType">
          <declaration><![CDATA[private string _ObjectType = "Page";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_RepeatDirection">
          <declaration><![CDATA[private string _RepeatDirection = "Horizontal";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_SaveImageUrl">
          <declaration><![CDATA[private string _SaveImageUrl = IconController.IconURL("Save");]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_Separator">
          <declaration><![CDATA[private string _Separator = ",&nbsp;";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_ShowCategories">
          <declaration><![CDATA[private bool _ShowCategories = true;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_ShowTags">
          <declaration><![CDATA[private bool _ShowTags = true;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="MyFileName">
          <declaration><![CDATA[private const string MyFileName = "Tags.ascx";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="tagsControl">
          <declaration><![CDATA[protected Tags tagsControl;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="AddImageUrl">
          <declaration><![CDATA[public string AddImageUrl]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="50" sc="13" el="52" ec="14">admin\Skins\tags.ascx.cs</location>
            <body hash="a4cb55dfa404dbfadf1f3cac08c3cfd2"><![CDATA[{
                return _AddImageUrl;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="54" sc="13" el="56" ec="14">admin\Skins\tags.ascx.cs</location>
            <body hash="a2fd931dbc2b97fcd94be9d60fd006ad"><![CDATA[{
                _AddImageUrl = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="AllowTagging">
          <declaration><![CDATA[public bool AllowTagging]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="62" sc="13" el="64" ec="14">admin\Skins\tags.ascx.cs</location>
            <body hash="858b8d3b15845b06033ae1789279a362"><![CDATA[{
                return _AllowTagging;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="66" sc="13" el="68" ec="14">admin\Skins\tags.ascx.cs</location>
            <body hash="0d1e740ea32a71d4f968bebbbd9092de"><![CDATA[{
                _AllowTagging = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="CancelImageUrl">
          <declaration><![CDATA[public string CancelImageUrl]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="74" sc="13" el="76" ec="14">admin\Skins\tags.ascx.cs</location>
            <body hash="0a5cdcf1f3152cbdf3d9884f1bf0dcbc"><![CDATA[{
                return _CancelImageUrl;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="78" sc="13" el="80" ec="14">admin\Skins\tags.ascx.cs</location>
            <body hash="f68b4b3a19c2d1c627ca5df49107839e"><![CDATA[{
                _CancelImageUrl = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="CssClass">
          <declaration><![CDATA[public string CssClass]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="83" sc="34" el="83" ec="38">admin\Skins\tags.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="83" sc="39" el="83" ec="43">admin\Skins\tags.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ObjectType">
          <declaration><![CDATA[public string ObjectType]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="88" sc="13" el="90" ec="14">admin\Skins\tags.ascx.cs</location>
            <body hash="33dcb947469f1295da284641b413836b"><![CDATA[{
                return _ObjectType;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="92" sc="13" el="94" ec="14">admin\Skins\tags.ascx.cs</location>
            <body hash="30dfb307af998be7c17b512676e30259"><![CDATA[{
                _ObjectType = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="RepeatDirection">
          <declaration><![CDATA[public string RepeatDirection]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="100" sc="13" el="102" ec="14">admin\Skins\tags.ascx.cs</location>
            <body hash="1e45f633d8546ff4c1107ba51da1709b"><![CDATA[{
                return _RepeatDirection;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="104" sc="13" el="106" ec="14">admin\Skins\tags.ascx.cs</location>
            <body hash="2621413c4582c09a1b88139612d38b65"><![CDATA[{
                _RepeatDirection = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="SaveImageUrl">
          <declaration><![CDATA[public string SaveImageUrl]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="112" sc="13" el="114" ec="14">admin\Skins\tags.ascx.cs</location>
            <body hash="5bc4d7b105ee89e0fcf39f7bf2bde1ab"><![CDATA[{
                return _SaveImageUrl;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="116" sc="13" el="118" ec="14">admin\Skins\tags.ascx.cs</location>
            <body hash="d165ca4ff81e302661fbc7b33428aad3"><![CDATA[{
                _SaveImageUrl = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="Separator">
          <declaration><![CDATA[public string Separator]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="124" sc="13" el="126" ec="14">admin\Skins\tags.ascx.cs</location>
            <body hash="f1083196f0705ded507d8cf02eb88c65"><![CDATA[{
                return _Separator;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="128" sc="13" el="130" ec="14">admin\Skins\tags.ascx.cs</location>
            <body hash="cd7c3b5a9d7ec2f1e88dd4fea042ab78"><![CDATA[{
                _Separator = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="ShowCategories">
          <declaration><![CDATA[public bool ShowCategories]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="136" sc="13" el="138" ec="14">admin\Skins\tags.ascx.cs</location>
            <body hash="233de196bb3b75dedf73f96161fa703d"><![CDATA[{
                return _ShowCategories;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="140" sc="13" el="142" ec="14">admin\Skins\tags.ascx.cs</location>
            <body hash="83402804ff92c6135becc802086aafb0"><![CDATA[{
                _ShowCategories = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="ShowTags">
          <declaration><![CDATA[public bool ShowTags]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="148" sc="13" el="150" ec="14">admin\Skins\tags.ascx.cs</location>
            <body hash="6ba997f93c418ac60b2eae9807e6f936"><![CDATA[{
                return _ShowTags;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="152" sc="13" el="154" ec="14">admin\Skins\tags.ascx.cs</location>
            <body hash="0de4d7a0531f5966d3b567065d79eff2"><![CDATA[{
                _ShowTags = value;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="Terms">
      <declaration><![CDATA[public class Terms : SkinObjectBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public Terms()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="InitializeComponent">
          <declaration><![CDATA[private void InitializeComponent()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="46" sc="9" el="47" ec="10">admin\Skins\Terms.ascx.cs</location>
            <body hash="539fa760ca172337a931519768c64187"><![CDATA[{
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="50" sc="9" el="54" ec="10">admin\Skins\Terms.ascx.cs</location>
            <body hash="5f3c8c20cc44d36b74ae4760af9b8276"><![CDATA[{
            base.OnInit(e);

            InitializeComponent();
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="57" sc="9" el="81" ec="10">admin\Skins\Terms.ascx.cs</location>
            <body hash="2d6fc4504fb79560fba26aff8e17fd35"><![CDATA[{
            base.OnLoad(e);
            try
            {
                if (!String.IsNullOrEmpty(CssClass))
                {
                    hypTerms.CssClass = CssClass;
                }
                if (!String.IsNullOrEmpty(Text))
                {
                    hypTerms.Text = Text;
                }
                else
                {
                    hypTerms.Text = Localization.GetString("Terms", Localization.GetResourceFile(this, MyFileName));
                }
                hypTerms.NavigateUrl = Globals.NavigateURL(PortalSettings.ActiveTab.TabID, "Terms");

                hypTerms.Attributes["rel"] = "nofollow";
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="hypTerms">
          <declaration><![CDATA[protected HyperLink hypTerms;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="MyFileName">
          <declaration><![CDATA[private const string MyFileName = "Terms.ascx";]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="CssClass">
          <declaration><![CDATA[public string CssClass]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="43" sc="34" el="43" ec="38">admin\Skins\Terms.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="43" sc="39" el="43" ec="43">admin\Skins\Terms.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Text">
          <declaration><![CDATA[public string Text]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="41" sc="30" el="41" ec="34">admin\Skins\Terms.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="41" sc="35" el="41" ec="39">admin\Skins\Terms.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="Text">
      <declaration><![CDATA[public class Text : SkinObjectBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public Text()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="44" sc="9" el="79" ec="10">admin\Skins\Text.ascx.cs</location>
            <body hash="e2f6a7932d7484e63d1fbe53395dc753"><![CDATA[{
            base.OnLoad(e);
            string strText = ShowText;
			
			//load resources
            if (!String.IsNullOrEmpty(ResourceKey))
            {
				//localization
                string strFile = Path.GetFileName(Server.MapPath(PortalSettings.ActiveTab.SkinSrc));
                strFile = PortalSettings.ActiveTab.SkinPath + Localization.LocalResourceDirectory + "/" + strFile;
                string strLocalization = Localization.GetString(ResourceKey, strFile);
                if (!String.IsNullOrEmpty(strLocalization))
                {
                    strText = strLocalization;
                }
            }
			
            //If no value is found then use the value set the the Text attribute
            if (string.IsNullOrEmpty(strText))
            {
                strText = ShowText;
            }
			
			//token replace
            if (ReplaceTokens)
            {
                var tr = new TokenReplace();
                tr.AccessingUser = PortalSettings.UserInfo;
                strText = tr.ReplaceEnvironmentTokens(strText);
            }
            lblText.Text = strText;
            if (!String.IsNullOrEmpty(CssClass))
            {
                lblText.CssClass = CssClass;
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="lblText">
          <declaration><![CDATA[protected Label lblText;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="CssClass">
          <declaration><![CDATA[public string CssClass]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="37" sc="34" el="37" ec="38">admin\Skins\Text.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="37" sc="39" el="37" ec="43">admin\Skins\Text.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ReplaceTokens">
          <declaration><![CDATA[public bool ReplaceTokens]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="41" sc="37" el="41" ec="41">admin\Skins\Text.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="41" sc="42" el="41" ec="46">admin\Skins\Text.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ResourceKey">
          <declaration><![CDATA[public string ResourceKey]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="39" sc="37" el="39" ec="41">admin\Skins\Text.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="39" sc="42" el="39" ec="46">admin\Skins\Text.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ShowText">
          <declaration><![CDATA[public string ShowText]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="35" sc="34" el="35" ec="38">admin\Skins\Text.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="35" sc="39" el="35" ec="43">admin\Skins\Text.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="Toast">
      <declaration><![CDATA[public class Toast : SkinObjectBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public Toast()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="FindMessageTab">
          <declaration><![CDATA[private int FindMessageTab()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="76" sc="9" el="98" ec="10">admin\Skins\Toast.ascx.cs</location>
            <body hash="4f8cfde4a83e7a985dc05c4422d16715"><![CDATA[{
            //On brand new install the new Message Center Module is on the child page of User Profile Page 
            //On Upgrade to 6.2.0, the Message Center module is on the User Profile Page
            var profileTab = TabController.Instance.GetTab(PortalSettings.UserTabId, PortalSettings.PortalId, false);
            if (profileTab != null)
            {
                var childTabs = TabController.Instance.GetTabsByPortal(profileTab.PortalID).DescendentsOf(profileTab.TabID);
                foreach (TabInfo tab in childTabs)
                {
                    foreach (KeyValuePair<int, ModuleInfo> kvp in ModuleController.Instance.GetTabModules(tab.TabID))
                    {
                        var module = kvp.Value;
                        if (module.DesktopModule.FriendlyName == "Message Center")
                        {
                            return tab.TabID;                            
                        }
                    }
                }
            }

            //default to User Profile Page
            return PortalSettings.UserTabId;            
        }]]></body>
          </codeblock>
        </method>
        <method name="GetMessageLabel">
          <declaration><![CDATA[public string GetMessageLabel()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="47" sc="9" el="49" ec="10">admin\Skins\Toast.ascx.cs</location>
            <body hash="924018e3743ee355511a62153e19f36c"><![CDATA[{
            return Localization.GetString("SeeAllMessage", Localization.GetResourceFile(this, MyFileName));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetMessageLink">
          <declaration><![CDATA[public string GetMessageLink()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="42" sc="9" el="44" ec="10">admin\Skins\Toast.ascx.cs</location>
            <body hash="811b3a133b38f00a2864339fc1c601b7"><![CDATA[{
            return Globals.NavigateURL(GetMessageTab(), "", string.Format("userId={0}", PortalSettings.UserId));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetMessageTab">
          <declaration><![CDATA[private int GetMessageTab()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="58" sc="9" el="72" ec="10">admin\Skins\Toast.ascx.cs</location>
            <body hash="964f75126a8ba017a2eef49299c96d80"><![CDATA[{
            var cacheKey = string.Format("MessageCenterTab:{0}:{1}", PortalSettings.PortalId, PortalSettings.CultureCode);
            var messageTabId = DataCache.GetCache<int>(cacheKey);
            if (messageTabId > 0)
                return messageTabId;

            //Find the Message Tab
            messageTabId = FindMessageTab();

            //save in cache
            //NOTE - This cache is not being cleared. There is no easy way to clear this, except Tools->Clear Cache
            DataCache.SetCache(cacheKey, messageTabId, TimeSpan.FromMinutes(20));

            return messageTabId;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetNotificationLabel">
          <declaration><![CDATA[public string GetNotificationLabel()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="52" sc="9" el="54" ec="10">admin\Skins\Toast.ascx.cs</location>
            <body hash="b32ef0e9746a21ae27ad9e8d1fdca0d9"><![CDATA[{
            return Localization.GetString("SeeAllNotification", Localization.GetResourceFile(this, MyFileName));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetNotificationLink">
          <declaration><![CDATA[public string GetNotificationLink()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="37" sc="9" el="39" ec="10">admin\Skins\Toast.ascx.cs</location>
            <body hash="f862a9a1c55aee849fe5a5f65142a3f9"><![CDATA[{
            return GetMessageLink() + "?view=notifications&action=notifications";
        }]]></body>
          </codeblock>
        </method>
        <method name="IsOnline">
          <declaration><![CDATA[public bool IsOnline()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="31" sc="9" el="34" ec="10">admin\Skins\Toast.ascx.cs</location>
            <body hash="48b6b11f3d4f01ed49602f831ceb9bff"><![CDATA[{
             var userInfo = UserController.Instance.GetCurrentUserInfo();
             return userInfo.UserID != -1;
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="101" sc="9" el="109" ec="10">admin\Skins\Toast.ascx.cs</location>
            <body hash="c8e51cdabb1d2d1f5e0b404a58298e13"><![CDATA[{
            base.OnLoad(e);

			JavaScript.RequestRegistration(CommonJs.jQueryUI);

            ClientResourceManager.RegisterScript(Page, "~/Resources/Shared/components/Toast/jquery.toastmessage.js", DotNetNuke.Web.Client.FileOrder.Js.jQuery);
			ClientResourceManager.RegisterStyleSheet(Page, "~/Resources/Shared/components/Toast/jquery.toastmessage.css", DotNetNuke.Web.Client.FileOrder.Css.DefaultCss);

        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="MyFileName">
          <declaration><![CDATA[private const string MyFileName = "Toast.ascx";]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="TreeViewMenu">
      <declaration><![CDATA[public class TreeViewMenu : NavObjectBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private string _bodyCssClass = "";]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="50" sc="9" el="69" ec="40">admin\Skins\TreeViewMenu.ascx.cs</location>
            <body hash="0e0ce0940b07a134951fffe9ddea52f3"><![CDATA[private string _bodyCssClass = "";
        private string _cssClass = "";
        private string _headerCssClass = "";
        private string _headerText = "";
        private string _headerTextCssClass = "Head";
        private bool _includeHeader = true;
        private string _nodeChildCssClass = "Normal";
        private string _nodeClosedImage = "~/images/folderclosed.gif";
        private string _nodeCollapseImage = "~/images/min.gif";
        private string _nodeCssClass = "Normal";
        private string _nodeExpandImage = "~/images/max.gif";
        private string _nodeLeafImage = "~/images/file.gif";
        private string _nodeOpenImage = "~/images/folderopen.gif";
        private string _nodeOverCssClass = "Normal";
        private string _nodeSelectedCssClass = "Normal";
        private string _resourceKey = "";
        private string _treeCssClass = "";
        private string _treeGoUpImage = "~/images/folderup.gif";
        private int _treeIndentWidth = 10;
        private string _width = "100%";]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="BuildTree">
          <declaration><![CDATA[private void BuildTree(DNNNode objNode, bool blnPODRequest)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="333" sc="9" el="391" ec="10">admin\Skins\TreeViewMenu.ascx.cs</location>
            <body hash="305f5e9f962c771be920ff2ecc8cef13"><![CDATA[{
            bool blnAddUpNode = false;
            DNNNodeCollection objNodes;
            objNodes = GetNavigationNodes(objNode);

            if (blnPODRequest == false)
            {
                if (!string.IsNullOrEmpty(Level))
                {
                    switch (Level.ToLower())
                    {
                        case "root":
                            break;
                        case "child":
                            blnAddUpNode = true;
                            break;
                        default:
                            if (Level.ToLower() != "root" && PortalSettings.ActiveTab.BreadCrumbs.Count > 1)
                            {
                                blnAddUpNode = true;
                            }
                            break;
                    }
                }
            }
			
			//add goto Parent node
            if (blnAddUpNode)
            {
                var objParentNode = new DNNNode();
                objParentNode.ID = PortalSettings.ActiveTab.ParentId.ToString();
                objParentNode.Key = objParentNode.ID;
                objParentNode.Text = Localization.GetString("Parent", Localization.GetResourceFile(this, MyFileName));
                objParentNode.ToolTip = Localization.GetString("GoUp", Localization.GetResourceFile(this, MyFileName));
                objParentNode.CSSClass = NodeCssClass;
                objParentNode.Image = ResolveUrl(TreeGoUpImage);
                objParentNode.ClickAction = eClickAction.PostBack;
                objNodes.InsertBefore(0, objParentNode);
            }
            foreach (DNNNode objPNode in objNodes) //clean up to do in processnodes???
            {
                ProcessNodes(objPNode);
            }
            Bind(objNodes);

            //technically this should always be a dnntree.  If using dynamic controls Nav.ascx should be used.  just being safe.
            if (Control.NavigationControl is DnnTree)
            {
                var objTree = (DnnTree) Control.NavigationControl;
                if (objTree.SelectedTreeNodes.Count > 0)
                {
                    var objTNode = (TreeNode) objTree.SelectedTreeNodes[1];
                    if (objTNode.DNNNodes.Count > 0) //only expand it if nodes are not pending
                    {
                        objTNode.Expand();
                    }
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="DNNTree_NodeClick">
          <declaration><![CDATA[private void DNNTree_NodeClick(NavigationEventArgs args)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="571" sc="9" el="577" ec="10">admin\Skins\TreeViewMenu.ascx.cs</location>
            <body hash="811770a70b173fe505826f5ed7c63a6c"><![CDATA[{
            if (args.Node == null)
            {
                args.Node = Navigation.GetNavigationNode(args.ID, Control.ID);
            }
            Response.Redirect(Globals.ApplicationURL(int.Parse(args.Node.Key)), true);
        }]]></body>
          </codeblock>
        </method>
        <method name="DNNTree_PopulateOnDemand">
          <declaration><![CDATA[private void DNNTree_PopulateOnDemand(NavigationEventArgs args)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="580" sc="9" el="586" ec="10">admin\Skins\TreeViewMenu.ascx.cs</location>
            <body hash="700ea2e1c76ec020d554a1d48592e5fc"><![CDATA[{
            if (args.Node == null)
            {
                args.Node = Navigation.GetNavigationNode(args.ID, Control.ID);
            }
            BuildTree(args.Node, true);
        }]]></body>
          </codeblock>
        </method>
        <method name="InitializeComponent">
          <declaration><![CDATA[private void InitializeComponent()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="318" sc="9" el="319" ec="10">admin\Skins\TreeViewMenu.ascx.cs</location>
            <body hash="539fa760ca172337a931519768c64187"><![CDATA[{
        }]]></body>
          </codeblock>
        </method>
        <method name="InitializeTree">
          <declaration><![CDATA[private void InitializeTree()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="420" sc="9" el="469" ec="10">admin\Skins\TreeViewMenu.ascx.cs</location>
            <body hash="61e15467a2fa381e7108e61b67b4ee58"><![CDATA[{
            if (String.IsNullOrEmpty(PathImage))
            {
                PathImage = PortalSettings.HomeDirectory;
            }
            if (String.IsNullOrEmpty(PathSystemImage))
            {
                PathSystemImage = ResolveUrl("~/images/");
            }
            if (String.IsNullOrEmpty(IndicateChildImageRoot))
            {
                IndicateChildImageRoot = ResolveUrl(NodeExpandImage);
            }
            if (String.IsNullOrEmpty(IndicateChildImageSub))
            {
                IndicateChildImageSub = ResolveUrl(NodeExpandImage);
            }
            if (String.IsNullOrEmpty(IndicateChildImageExpandedRoot))
            {
                IndicateChildImageExpandedRoot = ResolveUrl(NodeCollapseImage);
            }
            if (String.IsNullOrEmpty(IndicateChildImageExpandedSub))
            {
                IndicateChildImageExpandedSub = ResolveUrl(NodeCollapseImage);
            }
            if (String.IsNullOrEmpty(CSSNode))
            {
                CSSNode = NodeChildCssClass;
            }
            if (String.IsNullOrEmpty(CSSNodeRoot))
            {
                CSSNodeRoot = NodeCssClass;
            }
            if (String.IsNullOrEmpty(CSSNodeHover))
            {
                CSSNodeHover = NodeOverCssClass;
            }
            if (String.IsNullOrEmpty(CSSNodeSelectedRoot))
            {
                CSSNodeSelectedRoot = NodeSelectedCssClass;
            }
            if (String.IsNullOrEmpty(CSSNodeSelectedSub))
            {
                CSSNodeSelectedSub = NodeSelectedCssClass;
            }
            if (String.IsNullOrEmpty(CSSControl))
            {
                CSSControl = TreeCssClass;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="589" sc="9" el="596" ec="10">admin\Skins\TreeViewMenu.ascx.cs</location>
            <body hash="1c9f0014a6bc34e39def778c25efc975"><![CDATA[{
            InitializeTree();
            InitializeNavControl(cellBody, "DNNTreeNavigationProvider");
            Control.NodeClick += DNNTree_NodeClick;
            Control.PopulateOnDemand += DNNTree_PopulateOnDemand;
            base.OnInit(e);
            InitializeComponent();
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="486" sc="9" el="559" ec="10">admin\Skins\TreeViewMenu.ascx.cs</location>
            <body hash="2854d04d63faeefec5bc6344e3c4dce7"><![CDATA[{
            base.OnLoad(e);
            try
            {
                if (Page.IsPostBack == false)
                {
                    BuildTree(null, false);
					
					//Main Table Properties
                    if (!String.IsNullOrEmpty(Width))
                    {
                        tblMain.Width = Width;
                    }
					
                    if (!String.IsNullOrEmpty(CssClass))
                    {
                        tblMain.Attributes.Add("class", CssClass);
                    }
					
					//Header Properties
                    if (!String.IsNullOrEmpty(HeaderCssClass))
                    {
                        cellHeader.Attributes.Add("class", HeaderCssClass);
                    }
					
                    if (!String.IsNullOrEmpty(HeaderTextCssClass))
                    {
                        lblHeader.CssClass = HeaderTextCssClass;
                    }
					
					//Header Text (if set)
                    if (!String.IsNullOrEmpty(HeaderText))
                    {
                        lblHeader.Text = HeaderText;
                    }
					
					//ResourceKey overrides if found
                    if (!String.IsNullOrEmpty(ResourceKey))
                    {
                        string strHeader = Localization.GetString(ResourceKey, Localization.GetResourceFile(this, MyFileName));
                        if (!String.IsNullOrEmpty(strHeader))
                        {
                            lblHeader.Text = Localization.GetString(ResourceKey, Localization.GetResourceFile(this, MyFileName));
                        }
                    }
					
					//If still not set get default key
                    if (String.IsNullOrEmpty(lblHeader.Text))
                    {
                        string strHeader = Localization.GetString("Title", Localization.GetResourceFile(this, MyFileName));
                        if (!String.IsNullOrEmpty(strHeader))
                        {
                            lblHeader.Text = Localization.GetString("Title", Localization.GetResourceFile(this, MyFileName));
                        }
                        else
                        {
                            lblHeader.Text = "Site Navigation";
                        }
                    }
                    tblHeader.Visible = IncludeHeader;
					
					//Main Panel Properties
                    if (!String.IsNullOrEmpty(BodyCssClass))
                    {
                        cellBody.Attributes.Add("class", BodyCssClass);
                    }
                    cellBody.NoWrap = NoWrap;
                }
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="ProcessNodes">
          <declaration><![CDATA[private void ProcessNodes(DNNNode objParent)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="394" sc="9" el="410" ec="10">admin\Skins\TreeViewMenu.ascx.cs</location>
            <body hash="1dcc131393cbeb2e55ed72896878a42f"><![CDATA[{
            if (!String.IsNullOrEmpty(objParent.Image))
            {
            }
            else if (objParent.HasNodes) //imagepath applied in provider...
            {
                objParent.Image = ResolveUrl(NodeClosedImage);
            }
            else
            {
                objParent.Image = ResolveUrl(NodeLeafImage);
            }
            foreach (DNNNode objNode in objParent.DNNNodes)
            {
                ProcessNodes(objNode);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_bodyCssClass">
          <declaration><![CDATA[private string _bodyCssClass = "";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_cssClass">
          <declaration><![CDATA[private string _cssClass = "";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_headerCssClass">
          <declaration><![CDATA[private string _headerCssClass = "";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_headerText">
          <declaration><![CDATA[private string _headerText = "";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_headerTextCssClass">
          <declaration><![CDATA[private string _headerTextCssClass = "Head";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_includeHeader">
          <declaration><![CDATA[private bool _includeHeader = true;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_nodeChildCssClass">
          <declaration><![CDATA[private string _nodeChildCssClass = "Normal";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_nodeClosedImage">
          <declaration><![CDATA[private string _nodeClosedImage = "~/images/folderclosed.gif";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_nodeCollapseImage">
          <declaration><![CDATA[private string _nodeCollapseImage = "~/images/min.gif";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_nodeCssClass">
          <declaration><![CDATA[private string _nodeCssClass = "Normal";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_nodeExpandImage">
          <declaration><![CDATA[private string _nodeExpandImage = "~/images/max.gif";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_nodeLeafImage">
          <declaration><![CDATA[private string _nodeLeafImage = "~/images/file.gif";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_nodeOpenImage">
          <declaration><![CDATA[private string _nodeOpenImage = "~/images/folderopen.gif";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_nodeOverCssClass">
          <declaration><![CDATA[private string _nodeOverCssClass = "Normal";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_nodeSelectedCssClass">
          <declaration><![CDATA[private string _nodeSelectedCssClass = "Normal";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_resourceKey">
          <declaration><![CDATA[private string _resourceKey = "";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_treeCssClass">
          <declaration><![CDATA[private string _treeCssClass = "";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_treeGoUpImage">
          <declaration><![CDATA[private string _treeGoUpImage = "~/images/folderup.gif";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_treeIndentWidth">
          <declaration><![CDATA[private int _treeIndentWidth = 10;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_width">
          <declaration><![CDATA[private string _width = "100%";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cellBody">
          <declaration><![CDATA[protected HtmlTableCell cellBody;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cellHeader">
          <declaration><![CDATA[protected HtmlTableCell cellHeader;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblHeader">
          <declaration><![CDATA[protected Label lblHeader;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="MyFileName">
          <declaration><![CDATA[private const string MyFileName = "TreeViewMenu.ascx";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="tblHeader">
          <declaration><![CDATA[protected HtmlTable tblHeader;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="tblMain">
          <declaration><![CDATA[protected HtmlTable tblMain;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="BodyCssClass">
          <declaration><![CDATA[public string BodyCssClass]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="78" sc="13" el="80" ec="14">admin\Skins\TreeViewMenu.ascx.cs</location>
            <body hash="fd3f687a86513b14ecb16bd43e1362bb"><![CDATA[{
                return _bodyCssClass;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="82" sc="13" el="84" ec="14">admin\Skins\TreeViewMenu.ascx.cs</location>
            <body hash="0dda86ec73e3fd07a7776a89ac36c73a"><![CDATA[{
                _bodyCssClass = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="CssClass">
          <declaration><![CDATA[public string CssClass]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="90" sc="13" el="92" ec="14">admin\Skins\TreeViewMenu.ascx.cs</location>
            <body hash="2d31fbdb57fd41c0fff007dbe70439e8"><![CDATA[{
                return _cssClass;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="94" sc="13" el="96" ec="14">admin\Skins\TreeViewMenu.ascx.cs</location>
            <body hash="433b3dc25c8ea04983a374e08c5dea86"><![CDATA[{
                _cssClass = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="HeaderCssClass">
          <declaration><![CDATA[public string HeaderCssClass]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="102" sc="13" el="104" ec="14">admin\Skins\TreeViewMenu.ascx.cs</location>
            <body hash="8e79f3874e46902eb2539cc70562ab6c"><![CDATA[{
                return _headerCssClass;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="106" sc="13" el="108" ec="14">admin\Skins\TreeViewMenu.ascx.cs</location>
            <body hash="ee7efb3c458f4bc7406ae22ae06bc57b"><![CDATA[{
                _headerCssClass = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="HeaderText">
          <declaration><![CDATA[public string HeaderText]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="126" sc="13" el="128" ec="14">admin\Skins\TreeViewMenu.ascx.cs</location>
            <body hash="4a715dbf4401dd198eefe6c1e0f6dfe1"><![CDATA[{
                return _headerText;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="130" sc="13" el="132" ec="14">admin\Skins\TreeViewMenu.ascx.cs</location>
            <body hash="8f448cc34e66281ed01a49ff87cb5c7a"><![CDATA[{
                _headerText = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="HeaderTextCssClass">
          <declaration><![CDATA[public string HeaderTextCssClass]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="114" sc="13" el="116" ec="14">admin\Skins\TreeViewMenu.ascx.cs</location>
            <body hash="e31a21624bcdcd49b84c66a4df1171f7"><![CDATA[{
                return _headerTextCssClass;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="118" sc="13" el="120" ec="14">admin\Skins\TreeViewMenu.ascx.cs</location>
            <body hash="f11ccb18c442aafe780612d5cd0edfee"><![CDATA[{
                _headerTextCssClass = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="IncludeHeader">
          <declaration><![CDATA[public bool IncludeHeader]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="138" sc="13" el="140" ec="14">admin\Skins\TreeViewMenu.ascx.cs</location>
            <body hash="c966150736286e05b5112a9b41ff342f"><![CDATA[{
                return _includeHeader;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="142" sc="13" el="144" ec="14">admin\Skins\TreeViewMenu.ascx.cs</location>
            <body hash="2e568da29c8e7ba50af80ed7315ec6c0"><![CDATA[{
                _includeHeader = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="NodeChildCssClass">
          <declaration><![CDATA[public string NodeChildCssClass]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="150" sc="13" el="152" ec="14">admin\Skins\TreeViewMenu.ascx.cs</location>
            <body hash="4fe07800cd3d08bbfd604833c6720fe7"><![CDATA[{
                return _nodeChildCssClass;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="154" sc="13" el="156" ec="14">admin\Skins\TreeViewMenu.ascx.cs</location>
            <body hash="ce63bbbceb591e36788f888b639664f7"><![CDATA[{
                _nodeChildCssClass = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="NodeClosedImage">
          <declaration><![CDATA[public string NodeClosedImage]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="162" sc="13" el="164" ec="14">admin\Skins\TreeViewMenu.ascx.cs</location>
            <body hash="75b305bdfc943600c6ee67b281e9a159"><![CDATA[{
                return _nodeClosedImage;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="166" sc="13" el="168" ec="14">admin\Skins\TreeViewMenu.ascx.cs</location>
            <body hash="9be8ae66d79e646b15436d0fa771e8df"><![CDATA[{
                _nodeClosedImage = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="NodeCollapseImage">
          <declaration><![CDATA[public string NodeCollapseImage]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="174" sc="13" el="176" ec="14">admin\Skins\TreeViewMenu.ascx.cs</location>
            <body hash="8da43e3b9bf8d5749242d537e37296f1"><![CDATA[{
                return _nodeCollapseImage;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="178" sc="13" el="180" ec="14">admin\Skins\TreeViewMenu.ascx.cs</location>
            <body hash="c01d130436033bf7e43f71d5f5393442"><![CDATA[{
                _nodeCollapseImage = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="NodeCssClass">
          <declaration><![CDATA[public string NodeCssClass]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="186" sc="13" el="188" ec="14">admin\Skins\TreeViewMenu.ascx.cs</location>
            <body hash="e57a7e6214d0232c18c99ab7979f2179"><![CDATA[{
                return _nodeCssClass;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="190" sc="13" el="192" ec="14">admin\Skins\TreeViewMenu.ascx.cs</location>
            <body hash="7840001d91b9f5d37431f3fbd043912c"><![CDATA[{
                _nodeCssClass = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="NodeExpandImage">
          <declaration><![CDATA[public string NodeExpandImage]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="198" sc="13" el="200" ec="14">admin\Skins\TreeViewMenu.ascx.cs</location>
            <body hash="fc795c8d9e2c331a621225e7cce16271"><![CDATA[{
                return _nodeExpandImage;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="202" sc="13" el="204" ec="14">admin\Skins\TreeViewMenu.ascx.cs</location>
            <body hash="9c017bcca3af7ee0b969158738f204c0"><![CDATA[{
                _nodeExpandImage = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="NodeLeafImage">
          <declaration><![CDATA[public string NodeLeafImage]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="210" sc="13" el="212" ec="14">admin\Skins\TreeViewMenu.ascx.cs</location>
            <body hash="f45d7de0cb619f4b42e823c6b63718c0"><![CDATA[{
                return _nodeLeafImage;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="214" sc="13" el="216" ec="14">admin\Skins\TreeViewMenu.ascx.cs</location>
            <body hash="68f7efb16da9fc2e1882e2e53333a4c8"><![CDATA[{
                _nodeLeafImage = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="NodeOpenImage">
          <declaration><![CDATA[public string NodeOpenImage]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="222" sc="13" el="224" ec="14">admin\Skins\TreeViewMenu.ascx.cs</location>
            <body hash="ab7f6b8a4de2115d6388b38ed18767a9"><![CDATA[{
                return _nodeOpenImage;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="226" sc="13" el="228" ec="14">admin\Skins\TreeViewMenu.ascx.cs</location>
            <body hash="c4e10e80064039f4ab3ca7dbf127b894"><![CDATA[{
                _nodeOpenImage = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="NodeOverCssClass">
          <declaration><![CDATA[public string NodeOverCssClass]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="234" sc="13" el="236" ec="14">admin\Skins\TreeViewMenu.ascx.cs</location>
            <body hash="c03608731752da73b42703cae98b9c60"><![CDATA[{
                return _nodeOverCssClass;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="238" sc="13" el="240" ec="14">admin\Skins\TreeViewMenu.ascx.cs</location>
            <body hash="101a9463d467ed5e7f25434c073bc4c6"><![CDATA[{
                _nodeOverCssClass = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="NodeSelectedCssClass">
          <declaration><![CDATA[public string NodeSelectedCssClass]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="246" sc="13" el="248" ec="14">admin\Skins\TreeViewMenu.ascx.cs</location>
            <body hash="eaad8472544671bdab3cc6a88bd28c50"><![CDATA[{
                return _nodeSelectedCssClass;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="250" sc="13" el="252" ec="14">admin\Skins\TreeViewMenu.ascx.cs</location>
            <body hash="e398d175a77a92adf163a96e2c040303"><![CDATA[{
                _nodeSelectedCssClass = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="NoWrap">
          <declaration><![CDATA[public bool NoWrap]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="255" sc="30" el="255" ec="34">admin\Skins\TreeViewMenu.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="255" sc="35" el="255" ec="39">admin\Skins\TreeViewMenu.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ResourceKey">
          <declaration><![CDATA[public string ResourceKey]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="260" sc="13" el="262" ec="14">admin\Skins\TreeViewMenu.ascx.cs</location>
            <body hash="dc67c1da5102cd1efce0eb06e5f36e47"><![CDATA[{
                return _resourceKey;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="264" sc="13" el="266" ec="14">admin\Skins\TreeViewMenu.ascx.cs</location>
            <body hash="3332ceb1ba3ef6a238b0e668e80c6ebf"><![CDATA[{
                _resourceKey = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="TreeCssClass">
          <declaration><![CDATA[public string TreeCssClass]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="272" sc="13" el="274" ec="14">admin\Skins\TreeViewMenu.ascx.cs</location>
            <body hash="41d5fcf781d9115471b39060dbf61cf0"><![CDATA[{
                return _treeCssClass;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="276" sc="13" el="278" ec="14">admin\Skins\TreeViewMenu.ascx.cs</location>
            <body hash="09496d5902224cb3352e5f35e857c407"><![CDATA[{
                _treeCssClass = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="TreeGoUpImage">
          <declaration><![CDATA[public string TreeGoUpImage]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="284" sc="13" el="286" ec="14">admin\Skins\TreeViewMenu.ascx.cs</location>
            <body hash="82f517decc35d6f8e7cac09a569b33f1"><![CDATA[{
                return _treeGoUpImage;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="288" sc="13" el="290" ec="14">admin\Skins\TreeViewMenu.ascx.cs</location>
            <body hash="ca123df76c5223eac05d28b6a5ade064"><![CDATA[{
                _treeGoUpImage = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="TreeIndentWidth">
          <declaration><![CDATA[public int TreeIndentWidth]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="296" sc="13" el="298" ec="14">admin\Skins\TreeViewMenu.ascx.cs</location>
            <body hash="7b0ac6a25ba27a5c0cb4a00b55c951e5"><![CDATA[{
                return _treeIndentWidth;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="300" sc="13" el="302" ec="14">admin\Skins\TreeViewMenu.ascx.cs</location>
            <body hash="4abeb3a8a466c5bc06fab5248b440fca"><![CDATA[{
                _treeIndentWidth = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="Width">
          <declaration><![CDATA[public string Width]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="308" sc="13" el="310" ec="14">admin\Skins\TreeViewMenu.ascx.cs</location>
            <body hash="9cf767f10e3c50ac2d3c077a396d6bd9"><![CDATA[{
                return _width;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="312" sc="13" el="314" ec="14">admin\Skins\TreeViewMenu.ascx.cs</location>
            <body hash="6cf259be10e7719ac538a88d98ba1a3f"><![CDATA[{
                _width = value;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="User">
      <declaration><![CDATA[public class User : SkinObjectBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public User()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="53" sc="9" el="58" ec="10">admin\Skins\User.ascx.cs</location>
            <body hash="b3edb9e0e81791657f68a9c10e3bcfb0"><![CDATA[public User()
        {
            ShowUnreadMessages = true;
            ShowAvatar = true;
            LegacyMode = true;
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="FindMessageTab">
          <declaration><![CDATA[private int FindMessageTab()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="229" sc="9" el="251" ec="10">admin\Skins\User.ascx.cs</location>
            <body hash="a020229ab223532f8dd48d2782218160"><![CDATA[{
            //On brand new install the new Message Center Module is on the child page of User Profile Page 
            //On Upgrade to 6.2.0, the Message Center module is on the User Profile Page
            var profileTab = TabController.Instance.GetTab(PortalSettings.UserTabId, PortalSettings.PortalId, false);
            if (profileTab != null)
            {
                var childTabs = TabController.Instance.GetTabsByPortal(profileTab.PortalID).DescendentsOf(profileTab.TabID);
                foreach (TabInfo tab in childTabs)
                {
                    foreach (KeyValuePair<int, ModuleInfo> kvp in ModuleController.Instance.GetTabModules(tab.TabID))
                    {
                        var module = kvp.Value;
                        if (module.DesktopModule.FriendlyName == "Message Center" && !module.IsDeleted)
                        {
                            return tab.TabID;                            
                        }
                    }
                }
            }

            //default to User Profile Page
            return PortalSettings.UserTabId;            
        }]]></body>
          </codeblock>
        </method>
        <method name="GetAvatarUrl">
          <declaration><![CDATA[private string GetAvatarUrl(UserInfo userInfo)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="207" sc="9" el="209" ec="10">admin\Skins\User.ascx.cs</location>
            <body hash="66237cb9ada73abedc9f646209956e59"><![CDATA[{
            return UserController.Instance.GetUserProfilePictureUrl(userInfo.UserID, 32, 32);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetMessageTab">
          <declaration><![CDATA[private int GetMessageTab()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="212" sc="9" el="226" ec="10">admin\Skins\User.ascx.cs</location>
            <body hash="964f75126a8ba017a2eef49299c96d80"><![CDATA[{
            var cacheKey = string.Format("MessageCenterTab:{0}:{1}", PortalSettings.PortalId, PortalSettings.CultureCode);
            var messageTabId = DataCache.GetCache<int>(cacheKey);
            if (messageTabId > 0)
                return messageTabId;

            //Find the Message Tab
            messageTabId = FindMessageTab();

            //save in cache
            //NOTE - This cache is not being cleared. There is no easy way to clear this, except Tools->Clear Cache
            DataCache.SetCache(cacheKey, messageTabId, TimeSpan.FromMinutes(20));

            return messageTabId;
        }]]></body>
          </codeblock>
        </method>
        <method name="HasSocialAuthenticationEnabled">
          <declaration><![CDATA[private bool HasSocialAuthenticationEnabled()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="254" sc="9" el="264" ec="10">admin\Skins\User.ascx.cs</location>
            <body hash="6f49b302711dcbf74c238bfbce5b8144"><![CDATA[{
            return (from a in AuthenticationController.GetEnabledAuthenticationServices()
                    let enabled = (a.AuthenticationType == "Facebook"
                                     || a.AuthenticationType == "Google"
                                     || a.AuthenticationType == "Live"
                                     || a.AuthenticationType == "Twitter")
                                  ? PortalController.GetPortalSettingAsBoolean(a.AuthenticationType + "_Enabled", PortalSettings.PortalId, false)
                                  : !string.IsNullOrEmpty(a.LoginControlSrc) && (LoadControl("~/" + a.LoginControlSrc) as AuthenticationLoginBase).Enabled
                    where a.AuthenticationType != "DNN" && enabled
                    select a).Any();
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="76" sc="9" el="204" ec="10">admin\Skins\User.ascx.cs</location>
            <body hash="1c346c77b057d9aed4e9aca234e51e41"><![CDATA[{
            base.OnLoad(e);

            try
            {
                if (LegacyMode)
                    registerGroup.Visible = false;
                else
                    registerLink.Visible = false;

                if (!String.IsNullOrEmpty(CssClass))
                {
                    registerLink.CssClass = CssClass;
                    enhancedRegisterLink.CssClass = CssClass;
                }

                if (Request.IsAuthenticated == false)
                {
                    messageGroup.Visible = false;
                    notificationGroup.Visible = false;
                    avatarGroup.Visible = false;

                    if (PortalSettings.UserRegistration != (int) Globals.PortalRegistrationType.NoRegistration)
                    {
                        if (!String.IsNullOrEmpty(Text))
                        {
                            if (Text.IndexOf("src=") != -1)
                            {
                                Text = Text.Replace("src=\"", "src=\"" + PortalSettings.ActiveTab.SkinPath);
                            }
                            registerLink.Text = Text;
                            enhancedRegisterLink.Text = Text;
                        }
                        else
                        {
                            registerLink.Text = Localization.GetString("Register", Localization.GetResourceFile(this, MyFileName));
                            enhancedRegisterLink.Text = registerLink.Text;
                            registerLink.ToolTip = registerLink.Text;
                            enhancedRegisterLink.ToolTip = registerLink.Text;
                        }
                        if (PortalSettings.Users < PortalSettings.UserQuota || PortalSettings.UserQuota == 0)
                        {                            
                            if (LegacyMode) registerLink.Visible = true;
                            else  enhancedRegisterLink.Visible = true;
                        }
                        else
                        {
                            registerGroup.Visible = false;
                            registerLink.Visible = false;
                        }

                        registerLink.NavigateUrl = !String.IsNullOrEmpty(URL) 
                                            ? URL 
                                            : Globals.RegisterURL(HttpUtility.UrlEncode(Globals.NavigateURL()), Null.NullString);
                        enhancedRegisterLink.NavigateUrl = registerLink.NavigateUrl;

                        if (PortalSettings.EnablePopUps && PortalSettings.RegisterTabId == Null.NullInteger
                            && !HasSocialAuthenticationEnabled())
                        {
                            var clickEvent = "return " + UrlUtils.PopUpUrl(registerLink.NavigateUrl, this, PortalSettings, true, false, 600, 950);
                            registerLink.Attributes.Add("onclick", clickEvent);
                            enhancedRegisterLink.Attributes.Add("onclick", clickEvent);
                        }

                    }
                    else
                    {
                        registerGroup.Visible = false;
                        registerLink.Visible = false;
                    }
                }
                else
                {
                    var userInfo = UserController.Instance.GetCurrentUserInfo();
                    if (userInfo.UserID != -1)
                    {
                        registerLink.Text = userInfo.DisplayName;                                                
                        registerLink.NavigateUrl = Globals.UserProfileURL(userInfo.UserID);                        
                        registerLink.ToolTip = Localization.GetString("VisitMyProfile", Localization.GetResourceFile(this, MyFileName));

                        enhancedRegisterLink.Text = registerLink.Text;
                        enhancedRegisterLink.NavigateUrl = registerLink.NavigateUrl;
                        enhancedRegisterLink.ToolTip = registerLink.ToolTip;

                        if (ShowUnreadMessages)
                        {
                            var unreadMessages = InternalMessagingController.Instance.CountUnreadMessages(userInfo.UserID, PortalController.GetEffectivePortalId(userInfo.PortalID));
                            var unreadAlerts = NotificationsController.Instance.CountNotifications(userInfo.UserID, PortalController.GetEffectivePortalId(userInfo.PortalID));

                            messageLink.Text = unreadMessages > 0 ? string.Format(Localization.GetString("Messages", Localization.GetResourceFile(this, MyFileName)), unreadMessages) : Localization.GetString("NoMessages", Localization.GetResourceFile(this, MyFileName));
                            notificationLink.Text = unreadAlerts > 0 ? string.Format(Localization.GetString("Notifications", Localization.GetResourceFile(this, MyFileName)), unreadAlerts) : Localization.GetString("NoNotifications", Localization.GetResourceFile(this, MyFileName));

                            messageLink.NavigateUrl = Globals.NavigateURL(GetMessageTab(), "", string.Format("userId={0}", userInfo.UserID));
                            notificationLink.NavigateUrl = Globals.NavigateURL(GetMessageTab(), "", string.Format("userId={0}", userInfo.UserID),"view=notifications","action=notifications");
                            notificationLink.ToolTip = Localization.GetString("CheckNotifications", Localization.GetResourceFile(this, MyFileName));
                            messageLink.ToolTip = Localization.GetString("CheckMessages", Localization.GetResourceFile(this, MyFileName));
                            messageGroup.Visible = true;
                            notificationGroup.Visible = true;

                            if (LegacyMode && unreadMessages > 0)
                            {
                                registerLink.Text = registerLink.Text + string.Format(Localization.GetString("NewMessages", Localization.GetResourceFile(this, MyFileName)), unreadMessages);
                            }
                        }
                        else
                        {
                            messageGroup.Visible = false;
                            notificationGroup.Visible = false;
                        }

                        if (ShowAvatar)
                        {
                            avatar.ImageUrl = GetAvatarUrl(userInfo);
                            avatar.NavigateUrl = enhancedRegisterLink.NavigateUrl;
                            avatar.ToolTip = Localization.GetString("ProfileAvatar", Localization.GetResourceFile(this, MyFileName));
                            avatarGroup.Visible = true;                            
                        }
                        else
                        {
                            avatarGroup.Visible = false;
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="avatar">
          <declaration><![CDATA[protected HyperLink avatar;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="avatarGroup">
          <declaration><![CDATA[protected HtmlGenericControl avatarGroup;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="enhancedRegisterLink">
          <declaration><![CDATA[protected HyperLink enhancedRegisterLink;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="messageGroup">
          <declaration><![CDATA[protected HtmlGenericControl messageGroup;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="messageLink">
          <declaration><![CDATA[protected HyperLink messageLink;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="MyFileName">
          <declaration><![CDATA[private const string MyFileName = "User.ascx";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="notificationGroup">
          <declaration><![CDATA[protected HtmlGenericControl notificationGroup;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="notificationLink">
          <declaration><![CDATA[protected HyperLink notificationLink;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="registerGroup">
          <declaration><![CDATA[protected HtmlGenericControl registerGroup;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="registerLink">
          <declaration><![CDATA[protected HyperLink registerLink;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="CssClass">
          <declaration><![CDATA[public string CssClass]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="60" sc="34" el="60" ec="38">admin\Skins\User.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="60" sc="39" el="60" ec="43">admin\Skins\User.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="LegacyMode">
          <declaration><![CDATA[public bool LegacyMode]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="69" sc="34" el="69" ec="38">admin\Skins\User.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="69" sc="39" el="69" ec="43">admin\Skins\User.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ShowAvatar">
          <declaration><![CDATA[public bool ShowAvatar]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="64" sc="34" el="64" ec="38">admin\Skins\User.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="64" sc="39" el="64" ec="43">admin\Skins\User.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ShowUnreadMessages">
          <declaration><![CDATA[public bool ShowUnreadMessages]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="62" sc="42" el="62" ec="46">admin\Skins\User.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="62" sc="47" el="62" ec="51">admin\Skins\User.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Text">
          <declaration><![CDATA[public string Text]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="71" sc="30" el="71" ec="34">admin\Skins\User.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="71" sc="35" el="71" ec="39">admin\Skins\User.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="URL">
          <declaration><![CDATA[public string URL]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="73" sc="29" el="73" ec="33">admin\Skins\User.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="73" sc="34" el="73" ec="38">admin\Skins\User.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="UserAndLogin">
      <declaration><![CDATA[public class UserAndLogin : SkinObjectBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public UserAndLogin()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="FindMessageTab">
          <declaration><![CDATA[private int FindMessageTab()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="216" sc="9" el="238" ec="10">admin\Skins\UserAndLogin.ascx.cs</location>
            <body hash="a020229ab223532f8dd48d2782218160"><![CDATA[{
            //On brand new install the new Message Center Module is on the child page of User Profile Page 
            //On Upgrade to 6.2.0, the Message Center module is on the User Profile Page
            var profileTab = TabController.Instance.GetTab(PortalSettings.UserTabId, PortalSettings.PortalId, false);
            if (profileTab != null)
            {
                var childTabs = TabController.Instance.GetTabsByPortal(profileTab.PortalID).DescendentsOf(profileTab.TabID);
                foreach (TabInfo tab in childTabs)
                {
                    foreach (KeyValuePair<int, ModuleInfo> kvp in ModuleController.Instance.GetTabModules(tab.TabID))
                    {
                        var module = kvp.Value;
                        if (module.DesktopModule.FriendlyName == "Message Center" && !module.IsDeleted)
                        {
                            return tab.TabID;                            
                        }
                    }
                }
            }

            //default to User Profile Page
            return PortalSettings.UserTabId;            
        }]]></body>
          </codeblock>
        </method>
        <method name="GetMessageTab">
          <declaration><![CDATA[private int GetMessageTab()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="199" sc="9" el="213" ec="10">admin\Skins\UserAndLogin.ascx.cs</location>
            <body hash="964f75126a8ba017a2eef49299c96d80"><![CDATA[{
            var cacheKey = string.Format("MessageCenterTab:{0}:{1}", PortalSettings.PortalId, PortalSettings.CultureCode);
            var messageTabId = DataCache.GetCache<int>(cacheKey);
            if (messageTabId > 0)
                return messageTabId;

            //Find the Message Tab
            messageTabId = FindMessageTab();

            //save in cache
            //NOTE - This cache is not being cleared. There is no easy way to clear this, except Tools->Clear Cache
            DataCache.SetCache(cacheKey, messageTabId, TimeSpan.FromMinutes(20));

            return messageTabId;
        }]]></body>
          </codeblock>
        </method>
        <method name="HasSocialAuthenticationEnabled">
          <declaration><![CDATA[private bool HasSocialAuthenticationEnabled()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="241" sc="9" el="251" ec="10">admin\Skins\UserAndLogin.ascx.cs</location>
            <body hash="6f49b302711dcbf74c238bfbce5b8144"><![CDATA[{
            return (from a in AuthenticationController.GetEnabledAuthenticationServices()
                    let enabled = (a.AuthenticationType == "Facebook"
                                     || a.AuthenticationType == "Google"
                                     || a.AuthenticationType == "Live"
                                     || a.AuthenticationType == "Twitter")
                                  ? PortalController.GetPortalSettingAsBoolean(a.AuthenticationType + "_Enabled", PortalSettings.PortalId, false)
                                  : !string.IsNullOrEmpty(a.LoginControlSrc) && (LoadControl("~/" + a.LoginControlSrc) as AuthenticationLoginBase).Enabled
                    where a.AuthenticationType != "DNN" && enabled
                    select a).Any();
        }]]></body>
          </codeblock>
        </method>
        <method name="LocalizeString">
          <declaration><![CDATA[protected string LocalizeString(string key)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="144" sc="9" el="146" ec="10">admin\Skins\UserAndLogin.ascx.cs</location>
            <body hash="9b02a731a9bd9bd99f97f8a9aa3851e5"><![CDATA[{
            return Localization.GetString(key, Localization.GetResourceFile(this, MyFileName)); 
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="149" sc="9" el="196" ec="10">admin\Skins\UserAndLogin.ascx.cs</location>
            <body hash="05f4b2259c34b84c14af3b09d55079b1"><![CDATA[{
            base.OnLoad(e);

            registerLink.NavigateUrl = RegisterUrl;
            loginLink.NavigateUrl = LoginUrl;

            if (PortalSettings.UserId > 0)
            {
                viewProfileLink.NavigateUrl = Globals.UserProfileURL(PortalSettings.UserId);
                viewProfileImageLink.NavigateUrl = Globals.UserProfileURL(PortalSettings.UserId);
                logoffLink.NavigateUrl = Globals.NavigateURL(PortalSettings.ActiveTab.TabID, "Logoff");
                editProfileLink.NavigateUrl = Globals.NavigateURL(PortalSettings.UserTabId, "Profile", "userId=" + PortalSettings.UserId, "pageno=2");
                accountLink.NavigateUrl = Globals.NavigateURL(PortalSettings.UserTabId, "Profile", "userId=" + PortalSettings.UserId, "pageno=1");
                messagesLink.NavigateUrl = Globals.NavigateURL(GetMessageTab(), "", string.Format("userId={0}", PortalSettings.UserId));
                notificationsLink.NavigateUrl = Globals.NavigateURL(GetMessageTab(), "", string.Format("userId={0}", PortalSettings.UserId), "view=notifications", "action=notifications");

                var unreadMessages = InternalMessagingController.Instance.CountUnreadMessages(PortalSettings.UserId, PortalSettings.PortalId);
                var unreadAlerts = NotificationsController.Instance.CountNotifications(PortalSettings.UserId, PortalSettings.PortalId);

                if (unreadMessages > 0)
                {
                    messageCount.Text = unreadMessages.ToString(CultureInfo.InvariantCulture);
                    messageCount.Visible = true;

                    messages.Text = unreadMessages.ToString(CultureInfo.InvariantCulture);
                    messages.ToolTip = unreadMessages == 1
                                        ? LocalizeString("OneMessage")
                                        : String.Format(LocalizeString("MessageCount"), unreadMessages);
                    messages.Visible = true;
                }

                if (unreadAlerts > 0)
                {
                    notificationCount.Text = unreadAlerts.ToString(CultureInfo.InvariantCulture);
                    notificationCount.Visible = true;
                }

                profilePicture.ImageUrl = AvatarImageUrl;
                profilePicture.AlternateText = Localization.GetString("ProfilePicture", Localization.GetResourceFile(this, MyFileName));
            }

            if (UsePopUp)
            {
                registerLink.Attributes.Add("onclick", RegisterUrlForClickEvent);
                loginLink.Attributes.Add("onclick", LoginUrlForClickEvent);
            }

        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="accountLink">
          <declaration><![CDATA[protected HyperLink accountLink;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="editProfileLink">
          <declaration><![CDATA[protected HyperLink editProfileLink;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="loginLink">
          <declaration><![CDATA[protected HyperLink loginLink;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="logoffLink">
          <declaration><![CDATA[protected HyperLink logoffLink;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="messageCount">
          <declaration><![CDATA[protected Label messageCount;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="messages">
          <declaration><![CDATA[protected Label messages;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="messagesLink">
          <declaration><![CDATA[protected HyperLink messagesLink;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="MyFileName">
          <declaration><![CDATA[private const string MyFileName = "UserAndLogin.ascx";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="notificationCount">
          <declaration><![CDATA[protected Label notificationCount;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="notificationsLink">
          <declaration><![CDATA[protected HyperLink notificationsLink;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="profilePicture">
          <declaration><![CDATA[protected Image profilePicture;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="registerLink">
          <declaration><![CDATA[protected HyperLink registerLink;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="viewProfileImageLink">
          <declaration><![CDATA[protected HyperLink viewProfileImageLink;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="viewProfileLink">
          <declaration><![CDATA[protected HyperLink viewProfileLink;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="AvatarImageUrl">
          <declaration><![CDATA[protected string AvatarImageUrl]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="47" sc="44" el="47" ec="123">admin\Skins\UserAndLogin.ascx.cs</location>
            <body hash="5c045a44744324052566dbe7fc541d17"><![CDATA[UserController.Instance.GetUserProfilePictureUrl(PortalSettings.UserId, 32, 32]]></body>
          </codeblock>
        </property>
        <property name="CanRegister">
          <declaration><![CDATA[protected bool CanRegister]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="52" sc="13" el="55" ec="14">admin\Skins\UserAndLogin.ascx.cs</location>
            <body hash="5ee8c5be643eff6901ffd122c131c857"><![CDATA[{
                return ((PortalSettings.UserRegistration != (int) Globals.PortalRegistrationType.NoRegistration)
                    && (PortalSettings.Users < PortalSettings.UserQuota || PortalSettings.UserQuota == 0));
            }]]></body>
          </codeblock>
        </property>
        <property name="DisplayName">
          <declaration><![CDATA[protected string DisplayName]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="61" sc="13" el="63" ec="14">admin\Skins\UserAndLogin.ascx.cs</location>
            <body hash="effed53ea1be89d90dc7d2eb53047897"><![CDATA[{
                return PortalSettings.UserInfo.DisplayName;
            }]]></body>
          </codeblock>
        </property>
        <property name="IsAuthenticated">
          <declaration><![CDATA[protected bool IsAuthenticated]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="69" sc="13" el="71" ec="14">admin\Skins\UserAndLogin.ascx.cs</location>
            <body hash="4b2ae5abb5bfa8e95bb82cee25b9d392"><![CDATA[{
                return Request.IsAuthenticated;
            }]]></body>
          </codeblock>
        </property>
        <property name="LoginUrl">
          <declaration><![CDATA[protected string LoginUrl]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="77" sc="13" el="86" ec="14">admin\Skins\UserAndLogin.ascx.cs</location>
            <body hash="31269edc3e7e1e8f34c22152e80a4cb0"><![CDATA[{
                string returnUrl = HttpContext.Current.Request.RawUrl;
                if (returnUrl.IndexOf("?returnurl=", StringComparison.Ordinal) != -1)
                {
                    returnUrl = returnUrl.Substring(0, returnUrl.IndexOf("?returnurl=", StringComparison.Ordinal));
                }
                returnUrl = HttpUtility.UrlEncode(returnUrl);

                return Globals.LoginURL(returnUrl, (Request.QueryString["override"] != null));
            }]]></body>
          </codeblock>
        </property>
        <property name="LoginUrlForClickEvent">
          <declaration><![CDATA[protected string LoginUrlForClickEvent]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="92" sc="4" el="101" ec="5">admin\Skins\UserAndLogin.ascx.cs</location>
            <body hash="e2f666bb98fee52f57ba25ec85533d15"><![CDATA[{
				var url = LoginUrl;

				if (UsePopUp)
				{
					return "return " + UrlUtils.PopUpUrl(HttpUtility.UrlDecode(LoginUrl), this, PortalSettings, true, false, 300, 650);
				}

				return string.Empty;
			}]]></body>
          </codeblock>
        </property>
        <property name="RegisterUrl">
          <declaration><![CDATA[protected string RegisterUrl]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="117" sc="13" el="119" ec="14">admin\Skins\UserAndLogin.ascx.cs</location>
            <body hash="9a00b01feae815be543050fc20df5808"><![CDATA[{
                return Globals.RegisterURL(HttpUtility.UrlEncode(Globals.NavigateURL()), Null.NullString);
            }]]></body>
          </codeblock>
        </property>
        <property name="RegisterUrlForClickEvent">
          <declaration><![CDATA[protected string RegisterUrlForClickEvent]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="125" sc="4" el="132" ec="5">admin\Skins\UserAndLogin.ascx.cs</location>
            <body hash="5ff4587a2ec418c523dc02506aee0935"><![CDATA[{
				if (UsePopUp)
				{
					return "return " + UrlUtils.PopUpUrl(HttpUtility.UrlDecode(RegisterUrl), this, PortalSettings, true, false, 600, 950);
				}

				return string.Empty;
			}]]></body>
          </codeblock>
        </property>
        <property name="UsePopUp">
          <declaration><![CDATA[protected bool UsePopUp]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="107" sc="13" el="111" ec="14">admin\Skins\UserAndLogin.ascx.cs</location>
            <body hash="4ac14a23e98eabbd3d38ac1936392c40"><![CDATA[{
                return PortalSettings.EnablePopUps 
                    && PortalSettings.LoginTabId == Null.NullInteger
                    && !HasSocialAuthenticationEnabled();
            }]]></body>
          </codeblock>
        </property>
        <property name="UserProfileUrl">
          <declaration><![CDATA[protected string UserProfileUrl]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="138" sc="13" el="140" ec="14">admin\Skins\UserAndLogin.ascx.cs</location>
            <body hash="978ebeb8742d1637a4ed9611f248f7bf"><![CDATA[{
                return Globals.UserProfileURL(PortalSettings.UserInfo.UserID); ;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="DotNetNuke.Website.DesktopModules.Admin.Extensions">
    <class name="LanguagePacks">
      <declaration><![CDATA[public class LanguagePacks : PortalModuleBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public LanguagePacks()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="BindGrid">
          <declaration><![CDATA[private void BindGrid(string installPath, DataGrid grid)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="76" sc="9" el="248" ec="10">DesktopModules\Admin\Extensions\LanguagePacks.ascx.cs</location>
            <body hash="f3dde20d14a6e8ae85e34eab17cc281d"><![CDATA[{
            var packages = new List<PackageInfo>();
            var invalidPackages = new List<string>();

            foreach (string file in Directory.GetFiles(installPath))
            {
                if (file.ToLower().EndsWith(".zip") || file.ToLower().EndsWith(".resources"))
                {
                    Stream inputStream = new FileStream(file, FileMode.Open, FileAccess.Read);
                    var unzip = new ZipInputStream(inputStream);

                    try
                    {
                        ZipEntry entry = unzip.GetNextEntry();

                        while (entry != null)
                        {
                            if (!entry.IsDirectory)
                            {
                                string fileName = entry.Name;
                                string extension = Path.GetExtension(fileName);
                                if (extension.ToLower() == ".dnn" || extension.ToLower() == ".dnn5")
                                {
                                    //Manifest
                                    var manifestReader = new StreamReader(unzip);
                                    string manifest = manifestReader.ReadToEnd();

                                    var package = new PackageInfo();
                                    package.Manifest = manifest;
                                    if (!string.IsNullOrEmpty(manifest))
                                    {
                                        var doc = new XPathDocument(new StringReader(manifest));
                                        XPathNavigator rootNav = doc.CreateNavigator().SelectSingleNode("dotnetnuke");
                                        string packageType = String.Empty;
                                        if (rootNav.Name == "dotnetnuke")
                                        {
                                            packageType = XmlUtils.GetAttributeValue(rootNav, "type");
                                        }
                                        else if (rootNav.Name.ToLower() == "languagepack")
                                        {
                                            packageType = "LanguagePack";
                                        }
                                        XPathNavigator nav = null;
                                        switch (packageType.ToLower())
                                        {
                                            case "package":
                                                nav = rootNav.SelectSingleNode("packages/package");
                                                break;

                                            case "languagepack":

                                                nav = Installer.ConvertLegacyNavigator(rootNav, new InstallerInfo()).SelectSingleNode("packages/package");
                                                break;
                                        }

                                        if (nav != null)
                                        {
                                            package.Name = XmlUtils.GetAttributeValue(nav, "name");
                                            package.PackageType = XmlUtils.GetAttributeValue(nav, "type");
                                            package.IsSystemPackage = XmlUtils.GetAttributeValueAsBoolean(nav, "isSystem", false);
                                            package.Version = new Version(XmlUtils.GetAttributeValue(nav, "version"));
                                            package.FriendlyName = XmlUtils.GetNodeValue(nav, "friendlyName");
                                            if (String.IsNullOrEmpty(package.FriendlyName))
                                            {
                                                package.FriendlyName = package.Name;
                                            }
                                            package.Description = XmlUtils.GetNodeValue(nav, "description");
                                            package.FileName = file.Replace(installPath + "\\", "");

                                            packages.Add(package);
                                        }
                                    }

                                    break;
                                }
                            }
                            entry = unzip.GetNextEntry();
                        }
                    }
                    catch (Exception)
                    {
                        invalidPackages.Add(file);
                    }
                    finally
                    {
                        unzip.Close();
                        unzip.Dispose();
                    }
                }
            }

            //now add language packs from update service
            try
            {
                StreamReader myResponseReader = UpdateService.GetLanguageList();
                var xmlDoc = new XmlDocument();
                xmlDoc.Load(myResponseReader);
                XmlNodeList languages = xmlDoc.SelectNodes("available/language");

                if (languages != null)
                {
	                var installedPackages = PackageController.Instance.GetExtensionPackages(Null.NullInteger, p => p.PackageType == "CoreLanguagePack");
	                var installedLanguages = installedPackages.Select(package => LanguagePackController.GetLanguagePackByPackage(package.PackageID)).ToList();
	                foreach (XmlNode language in languages)
                    {
                        string cultureCode = "";
                        string version = "";
                        foreach (XmlNode child in language.ChildNodes)
                        {
                            if (child.Name == "culturecode")
                            {
                                cultureCode = child.InnerText;
                            }

                            if (child.Name == "version")
                            {
                                version = child.InnerText;
                            }
                        }
	                    if (!string.IsNullOrEmpty(cultureCode) && !string.IsNullOrEmpty(version) && version.Length == 6)
	                    {
		                    var myCIintl = new CultureInfo(cultureCode, true);
		                    version = version.Insert(4, ".").Insert(2, ".");
		                    var package = new PackageInfo {Owner = OwnerUpdateService, Name = "LanguagePack-" + myCIintl.Name, FriendlyName = myCIintl.NativeName};
		                    package.Name = myCIintl.NativeName;
		                    package.Description = cultureCode;
		                    Version ver = null;
		                    Version.TryParse(version, out ver);
		                    package.Version = ver;

							if (
								installedLanguages.Any(
									l =>
									LocaleController.Instance.GetLocale(l.LanguageID).Code.ToLowerInvariant().Equals(cultureCode.ToLowerInvariant()) 
									&& installedPackages.First(p => p.PackageID == l.PackageID).Version >= ver))
							{
								continue;
							}

							if (packages.Any(p => p.Name == package.Name))
							{
								var existPackage = packages.First(p => p.Name == package.Name);
								if (package.Version > existPackage.Version)
								{
									packages.Remove(existPackage);
									packages.Add(package);
								}
							}
							else
							{
								packages.Add(package);
							}
	                    }
                    }
                }
            }
            catch (Exception)
            {
                //suppress for now - need to decide what to do when webservice is unreachable
                //throw;
                //same problem happens in InstallWizard.aspx.cs in BindLanguageList method
            }


            if (invalidPackages.Count > 0)
            {
                string pkgErrorsMsg = invalidPackages.Aggregate(string.Empty, (current, pkg) => current + (pkg + "<br />"));
                Skin.AddModuleMessage(this, Localization.GetString("PackageErrors.Text", LocalResourceFile) + pkgErrorsMsg, ModuleMessage.ModuleMessageType.RedError);
            }

            grid.DataSource = packages;
            grid.DataBind();
        }]]></body>
          </codeblock>
        </method>
        <method name="BindPackageTypes">
          <declaration><![CDATA[private void BindPackageTypes()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="251" sc="9" el="254" ec="10">DesktopModules\Admin\Extensions\LanguagePacks.ascx.cs</location>
            <body hash="dc0653deda3788db1e7c8318522af0b0"><![CDATA[{
            extensionTypeRepeater.DataSource = PackageTypesList;
            extensionTypeRepeater.DataBind();
        }]]></body>
          </codeblock>
        </method>
        <method name="DeployLanguage">
          <declaration><![CDATA[public void DeployLanguage(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="384" sc="9" el="396" ec="10">DesktopModules\Admin\Extensions\LanguagePacks.ascx.cs</location>
            <body hash="becda28903a01454dd91009d92b488ec"><![CDATA[{
            var thisButton = (LinkButton) sender;
            InstallController.Instance.IsAvailableLanguagePack(thisButton.Attributes["data-id"]);

            if (HttpContext.Current.Request.Url.AbsoluteUri.ToLower().Contains("popup"))
            {
                thisButton.Attributes["popupUrl"] = Util.InstallURL(ModuleContext.TabId, Globals.NavigateURL(PortalSettings.HomeTabId), "CoreLanguagePack", "installlanguage.resources");                
            }
            else
            {
                thisButton.Attributes["popupUrl"] = Util.InstallURL(ModuleContext.TabId, Globals.NavigateURL(), "CoreLanguagePack", "installlanguage.resources");                
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="DownloadLanguage">
          <declaration><![CDATA[protected void DownloadLanguage(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="399" sc="9" el="415" ec="10">DesktopModules\Admin\Extensions\LanguagePacks.ascx.cs</location>
            <body hash="eb166e731ba3e7bb7841e652745ba57e"><![CDATA[{
            var thisButton = (LinkButton)sender;
            if (thisButton.Attributes["data-id"] != null)
            {
                string downloadUrl = UpdateService.GetLanguageDownloadUrl(thisButton.Attributes["data-id"]);
                string downloadScript = string.Format("$('#download_frame').attr('src', '{0}');", downloadUrl);

                if (ScriptManager.GetCurrent(Page) != null)
                {
                    ScriptManager.RegisterStartupScript(Page, GetType(), "DownloadLanguagePack", downloadScript, true);
                }
                else
                {
                    Page.ClientScript.RegisterStartupScript(GetType(), "DownloadLanguagePack", downloadScript, true);
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="extensionsGrid_ItemDataBound">
          <declaration><![CDATA[private void extensionsGrid_ItemDataBound(object sender, DataGridItemEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="350" sc="9" el="381" ec="10">DesktopModules\Admin\Extensions\LanguagePacks.ascx.cs</location>
            <body hash="dc41f955cc4d4c7ee59ea0357e04e766"><![CDATA[{
            DataGridItem item = e.Item;
            if (e.Item.ItemType == ListItemType.Item || e.Item.ItemType == ListItemType.AlternatingItem)
            {
                var package = (PackageInfo) e.Item.DataItem;

                var installLink = (HyperLink) item.Controls[4].Controls[1];
                var deployLink = (LinkButton) item.Controls[4].Controls[3];
                var downloadLink = (LinkButton)item.Controls[4].Controls[5];
                if (package.Owner != OwnerUpdateService)
                {
                    if (HttpContext.Current.Request.Url.AbsoluteUri.ToLower().Contains("popup"))
                    {
                        installLink.NavigateUrl = Util.InstallURL(ModuleContext.TabId, Globals.NavigateURL(PortalSettings.HomeTabId), package.PackageType, package.FileName);                        
                    }
                    else
                    {
                        installLink.NavigateUrl = Util.InstallURL(ModuleContext.TabId, "", package.PackageType, package.FileName);                        
                    }
                }
                else
                {
                    deployLink.Visible = true;
                    //store culture as a data attribute
                    deployLink.Attributes["data-id"] = package.Description;
                    installLink.Visible = false;
                    downloadLink.Attributes["data-id"] = package.Description;
                }

                downloadLink.Visible = ModuleContext.PortalSettings.UserInfo.IsSuperUser;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="extensionTypeRepeater_ItemDataBound">
          <declaration><![CDATA[private void extensionTypeRepeater_ItemDataBound(object sender, RepeaterItemEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="335" sc="9" el="347" ec="10">DesktopModules\Admin\Extensions\LanguagePacks.ascx.cs</location>
            <body hash="a1f658158d9f0776108ea05966a11483"><![CDATA[{
            RepeaterItem item = e.Item;
            if (e.Item.ItemType == ListItemType.Item || e.Item.ItemType == ListItemType.AlternatingItem)
            {
                var kvp = (KeyValuePair<string, string>) e.Item.DataItem;

                var extensionsGrid = item.FindControl("extensionsGrid") as DataGrid;
                extensionsGrid.ItemDataBound += extensionsGrid_ItemDataBound;

                Localization.LocalizeDataGrid(ref extensionsGrid, LocalResourceFile);
                BindGrid(kvp.Value, extensionsGrid);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="FormatVersion">
          <declaration><![CDATA[protected string FormatVersion(object version)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="257" sc="9" el="265" ec="10">DesktopModules\Admin\Extensions\LanguagePacks.ascx.cs</location>
            <body hash="32a0f9f352e290d9c18789267e88a7f4"><![CDATA[{
            var package = version as PackageInfo;
            string retValue = Null.NullString;
            if (package != null)
            {
                retValue = package.Version.ToString(3);
            }
            return retValue;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetAboutTooltip">
          <declaration><![CDATA[protected string GetAboutTooltip(object dataItem)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="268" sc="9" el="291" ec="10">DesktopModules\Admin\Extensions\LanguagePacks.ascx.cs</location>
            <body hash="2b2788217149905dcc78df9461c7adb0"><![CDATA[{
            string returnValue = string.Empty;
            try
            {
                if ((ModuleContext.PortalSettings.ActiveTab.IsSuperTab))
                {
                    int portalID = Convert.ToInt32(DataBinder.Eval(dataItem, "PortalID"));
                    if ((portalID != Null.NullInteger && portalID != int.MinValue))
                    {
                        var portal = PortalController.Instance.GetPortal(portalID);
                        returnValue = string.Format(Localization.GetString("InstalledOnPortal.Tooltip", LocalResourceFile), portal.PortalName);
                    }
                    else
                    {
                        returnValue = Localization.GetString("InstalledOnHost.Tooltip", LocalResourceFile);
                    }
                }
            }
            catch (Exception ex)
            {
                Exceptions.ProcessModuleLoadException(this, ex);
            }
            return returnValue;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPackageDescription">
          <declaration><![CDATA[protected string GetPackageDescription(object dataItem)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="294" sc="9" el="302" ec="10">DesktopModules\Admin\Extensions\LanguagePacks.ascx.cs</location>
            <body hash="79a1fb5dfb39cb954313250a920e7fe4"><![CDATA[{
            var package = dataItem as PackageInfo;
            string retValue = Null.NullString;
            if (package != null)
            {
                retValue = package.Description;
            }
            return retValue;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPackageIcon">
          <declaration><![CDATA[protected string GetPackageIcon(object dataItem)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="305" sc="9" el="309" ec="10">DesktopModules\Admin\Extensions\LanguagePacks.ascx.cs</location>
            <body hash="00295879571f2da77ca3b5c246eca094"><![CDATA[{
            var package = dataItem as PackageInfo;

            return (!String.IsNullOrEmpty(package.IconFile)) ? package.IconFile : Globals.ImagePath + DefaultLanguageImage;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPackageType">
          <declaration><![CDATA[protected string GetPackageType(object dataItem)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="312" sc="9" el="316" ec="10">DesktopModules\Admin\Extensions\LanguagePacks.ascx.cs</location>
            <body hash="a65d7751e163d2ae2f863d07d58d69a5"><![CDATA[{
            var kvp = (KeyValuePair<string, string>) dataItem;

            return Localization.GetString(kvp.Key + ".Type", LocalResourceFile);
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="319" sc="9" el="323" ec="10">DesktopModules\Admin\Extensions\LanguagePacks.ascx.cs</location>
            <body hash="bbb6195a811d9ab4dca5aad9c543b1d4"><![CDATA[{
            base.OnLoad(e);

            extensionTypeRepeater.ItemDataBound += extensionTypeRepeater_ItemDataBound;
        }]]></body>
          </codeblock>
        </method>
        <method name="OnPreRender">
          <declaration><![CDATA[protected override void OnPreRender(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="326" sc="9" el="332" ec="10">DesktopModules\Admin\Extensions\LanguagePacks.ascx.cs</location>
            <body hash="0001a02a2549f62b622e6662d550bb80"><![CDATA[{
            base.OnPreRender(e);
            if (!IsPostBack)
            {
                BindPackageTypes();
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_packageTypes">
          <declaration><![CDATA[private IDictionary<string, string> _packageTypes;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="DefaultLanguageImage">
          <declaration><![CDATA[private const string DefaultLanguageImage = "icon_languagePack.gif";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="extensionTypeRepeater">
          <declaration><![CDATA[protected Repeater extensionTypeRepeater;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="OwnerUpdateService">
          <declaration><![CDATA[private const string OwnerUpdateService = "DotNetNuke Update Service";]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="PackageTypesList">
          <declaration><![CDATA[protected IDictionary<string, string> PackageTypesList]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="59" sc="13" el="72" ec="14">DesktopModules\Admin\Extensions\LanguagePacks.ascx.cs</location>
            <body hash="fbb37828bb9547b689e877cc5b22b7bc"><![CDATA[{
                if ((_packageTypes == null))
                {
                    _packageTypes = new Dictionary<string, string>();
                    string installPath;
                    string type;
                    type = "Language";
                    installPath = Globals.ApplicationMapPath + "\\Install\\Language";

                    _packageTypes[type] = installPath;
                }

                return _packageTypes;
            }]]></body>
          </codeblock>
        </property>
        <property name="ShowDescription">
          <declaration><![CDATA[public bool ShowDescription]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="417" sc="39" el="417" ec="43">DesktopModules\Admin\Extensions\LanguagePacks.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="417" sc="44" el="417" ec="48">DesktopModules\Admin\Extensions\LanguagePacks.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
</root>