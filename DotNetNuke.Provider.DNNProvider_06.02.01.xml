<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<root file="DotNetNuke.Provider.DNNProvider.dll" version="06.02.01" generated="2017-06-18 22:58:35Z" generationTime="1.3924621">
  <namespace name="DotNetNuke.Security.Membership">
    <class name="DNNRoleProvider">
      <declaration><![CDATA[public class DNNRoleProvider : RoleProvider]]></declaration>
      <documentation>-----------------------------------------------------------------------------
 Project:    DotNetNuke
 Namespace:  DotNetNuke.Security.Membership
 Class:      DNNRoleProvider
 -----------------------------------------------------------------------------
 <summary>
 The DNNRoleProvider overrides the default MembershipProvider to provide
 a purely DNN Membership Component implementation
 </summary>
 <remarks>
 </remarks>
 <history>
     [cnurse]	03/28/2006	created
 </history>
 -----------------------------------------------------------------------------</documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DNNRoleProvider()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="66" sc="9" el="85" ec="10">DNNRoleProvider.cs</location>
            <body hash="c9516dead4ccaad58e93a8b9f2e51aa3"><![CDATA[public DNNRoleProvider()
        {
            dataProvider = DataProvider.Instance();
            if (dataProvider == null)
            {
				//get the provider configuration based on the type
                string defaultprovider = DotNetNuke.Data.DataProvider.Instance().DefaultProviderName;
                const string dataProviderNamespace = "DotNetNuke.Security.Membership.Data";
                if (defaultprovider == "SqlDataProvider")
                {
                    dataProvider = new SqlDataProvider();
                }
                else
                {
                    string providerType = dataProviderNamespace + "." + defaultprovider;
                    dataProvider = (DataProvider) Reflection.CreateObject(providerType, providerType, true);
                }
                ComponentFactory.RegisterComponentInstance<DataProvider>(dataProvider);
            }
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="AddDNNUserRole">
          <declaration><![CDATA[private void AddDNNUserRole(UserRoleInfo userRole)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="90" sc="9" el="96" ec="10">DNNRoleProvider.cs</location>
            <body hash="4206dbea8ee9d831ea007422d9996308"><![CDATA[{
            //Add UserRole to DNN
            userRole.UserRoleID = Convert.ToInt32(dataProvider.AddUserRole(userRole.PortalID, userRole.UserID, userRole.RoleID,
                                                                (int)userRole.Status, userRole.IsOwner,
                                                                userRole.EffectiveDate, userRole.ExpiryDate, 
                                                                UserController.GetCurrentUserInfo().UserID));
        }]]></body>
          </codeblock>
        </method>
        <method name="AddUserToRole">
          <declaration><![CDATA[public override bool AddUserToRole(int portalId, UserInfo user, UserRoleInfo userRole)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 AddUserToRole adds a User to a Role
 </summary>
 <remarks>
 </remarks>
 <param name="portalId">Id of the portal</param>
 <param name="user">The user to add.</param>
 <param name="userRole">The role to add the user to.</param>
 <returns>A Boolean indicating success or failure.</returns>
 <history>
     [cnurse]	03/28/2006	created
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="245" sc="9" el="260" ec="10">DNNRoleProvider.cs</location>
            <body hash="5cd41e2a2422ef9f2170a865489a93c9"><![CDATA[{
            bool createStatus = true;
            try
            {
				//Add UserRole to DNN
                AddDNNUserRole(userRole);
            }
            catch (Exception exc)
            {
				//Clear User (duplicate User information)
                DnnLog.Error(exc);

                createStatus = false;
            }
            return createStatus;
        }]]></body>
          </codeblock>
        </method>
        <method name="CreateRole">
          <declaration><![CDATA[public override bool CreateRole(RoleInfo role)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 CreateRole persists a Role to the Data Store
 </summary>
 <remarks>
 </remarks>
 <param name="role">The role to persist to the Data Store.</param>
 <returns>A Boolean indicating success or failure.</returns>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="112" sc="9" el="140" ec="10">DNNRoleProvider.cs</location>
            <body hash="e36c544df4ae1924db7839bbacc5e5d1"><![CDATA[{
            try
            {
                role.RoleID =
                    Convert.ToInt32(dataProvider.AddRole(role.PortalID,
                                                         role.RoleGroupID,
                                                         role.RoleName,
                                                         role.Description,
                                                         role.ServiceFee,
                                                         role.BillingPeriod.ToString(CultureInfo.InvariantCulture),
                                                         role.BillingFrequency,
                                                         role.TrialFee,
                                                         role.TrialPeriod,
                                                         role.TrialFrequency,
                                                         role.IsPublic,
                                                         role.AutoAssignment,
                                                         role.RSVPCode,
                                                         role.IconFile,
                                                         UserController.GetCurrentUserInfo().UserID,
                                                         (int)role.Status,
                                                         (int)role.SecurityMode));
            }
            catch (SqlException e)
            {
                throw new ArgumentException(e.ToString());
            }

            return true;
        }]]></body>
          </codeblock>
        </method>
        <method name="CreateRoleGroup">
          <declaration><![CDATA[public override int CreateRoleGroup(RoleGroupInfo roleGroup)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 CreateRoleGroup persists a RoleGroup to the Data Store
 </summary>
 <remarks>
 </remarks>
 <param name="roleGroup">The RoleGroup to persist to the Data Store.</param>
 <returns>The Id of the new role.</returns>
 <history>
     [cnurse]	03/28/2006	created
     [jlucarino]	02/26/2009	added CreatedByUserID parameter
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="385" sc="9" el="387" ec="10">DNNRoleProvider.cs</location>
            <body hash="32e2be153960a5490fbfbba58bd7f01d"><![CDATA[{
            return Convert.ToInt32(dataProvider.AddRoleGroup(roleGroup.PortalID, roleGroup.RoleGroupName, roleGroup.Description, UserController.GetCurrentUserInfo().UserID));
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteRole">
          <declaration><![CDATA[public override void DeleteRole(RoleInfo role)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 DeleteRole deletes a Role from the Data Store
 </summary>
 <param name="role">The role to delete from the Data Store.</param>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="149" sc="9" el="151" ec="10">DNNRoleProvider.cs</location>
            <body hash="374e4faea2eaea0fe64f943d55cf62ea"><![CDATA[{
            dataProvider.DeleteRole(role.RoleID);
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteRoleGroup">
          <declaration><![CDATA[public override void DeleteRoleGroup(RoleGroupInfo roleGroup)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 DeleteRoleGroup deletes a RoleGroup from the Data Store
 </summary>
 <param name="roleGroup">The RoleGroup to delete from the Data Store.</param>
 <history>
     [cnurse]	03/28/2006	created
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="399" sc="9" el="401" ec="10">DNNRoleProvider.cs</location>
            <body hash="c6a5366cec0b8ba21656002b18c99ef8"><![CDATA[{
            dataProvider.DeleteRoleGroup(roleGroup.RoleGroupID);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetRoleGroup">
          <declaration><![CDATA[public override RoleGroupInfo GetRoleGroup(int portalId, int roleGroupId)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 GetRoleGroup gets a RoleGroup from the Data Store
 </summary>
 <param name="portalId">Id of the portal</param>
 <param name="roleGroupId">The Id of the RoleGroup to retrieve.</param>
 <returns>A RoleGroupInfo object</returns>
 <history>
     [cnurse]	03/28/2006	created
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="415" sc="9" el="417" ec="10">DNNRoleProvider.cs</location>
            <body hash="c28021571c7239e477cf89da6122e924"><![CDATA[{
            return CBO.FillObject<RoleGroupInfo>(dataProvider.GetRoleGroup(portalId, roleGroupId));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetRoleGroupByName">
          <declaration><![CDATA[public override RoleGroupInfo GetRoleGroupByName(int PortalID, string RoleGroupName)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="420" sc="9" el="422" ec="10">DNNRoleProvider.cs</location>
            <body hash="d0e152e207db0e0ca27fce4e579cb3aa"><![CDATA[{
            return CBO.FillObject<RoleGroupInfo>(dataProvider.GetRoleGroupByName(PortalID, RoleGroupName));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetRoleGroups">
          <declaration><![CDATA[public override ArrayList GetRoleGroups(int portalId)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 Get the RoleGroups for a portal
 </summary>
 <param name="portalId">Id of the portal.</param>
 <returns>An ArrayList of RoleGroupInfo objects</returns>
 <history>
     [cnurse]	03/28/2006	created
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="435" sc="9" el="437" ec="10">DNNRoleProvider.cs</location>
            <body hash="37b974466bf5b82b05b98789f28d98c4"><![CDATA[{
            return CBO.FillCollection(dataProvider.GetRoleGroups(portalId), typeof(RoleGroupInfo));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetRoles">
          <declaration><![CDATA[public override ArrayList GetRoles(int portalId)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 Get the roles for a portal
 </summary>
 <param name="portalId">Id of the portal (If -1 all roles for all portals are
 retrieved.</param>
 <returns>An ArrayList of RoleInfo objects</returns>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="162" sc="9" el="167" ec="10">DNNRoleProvider.cs</location>
            <body hash="979e688264b289060fbf4aae56062a40"><![CDATA[{
            var arrRoles = CBO.FillCollection(portalId == Null.NullInteger 
                                        ? dataProvider.GetRoles() 
                                        : dataProvider.GetPortalRoles(portalId), typeof (RoleInfo));
            return arrRoles;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetRolesBasicSearch">
          <declaration><![CDATA[public override IList<RoleInfo> GetRolesBasicSearch(int portalID, int pageSize, string filterBy)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="170" sc="9" el="172" ec="10">DNNRoleProvider.cs</location>
            <body hash="573a1b6c94286b29ef6bc7b1fa507625"><![CDATA[{
            return CBO.FillCollection<RoleInfo>(dataProvider.GetRolesBasicSearch(portalID, pageSize, filterBy));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetRoleSettings">
          <declaration><![CDATA[public override IDictionary<string, string> GetRoleSettings(int roleId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="175" sc="9" el="184" ec="10">DNNRoleProvider.cs</location>
            <body hash="3faf76ca2f41ab207f71498e144cf547"><![CDATA[{
            Dictionary<string, string> settings = new Dictionary<string, string> { };
            using (IDataReader dr = dataProvider.GetRoleSettings(roleId)) {
                while (dr.Read()) {
                    settings.Add(dr["SettingName"].ToString(), dr["SettingValue"].ToString());
                }
                dr.Close();
            }
            return settings;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetUserRole">
          <declaration><![CDATA[public override UserRoleInfo GetUserRole(int portalId, int userId, int roleId)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 GetUserRole gets a User/Role object from the Data Store
 </summary>
 <remarks>
 </remarks>
 <param name="portalId">Id of the portal</param>
 <param name="userId">The Id of the User</param>
 <param name="roleId">The Id of the Role.</param>
 <returns>The UserRoleInfo object</returns>
 <history>
     [cnurse]	03/28/2006	created
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="277" sc="9" el="279" ec="10">DNNRoleProvider.cs</location>
            <body hash="dbc5514a7999066191f81b11389f66a0"><![CDATA[{
            return CBO.FillObject<UserRoleInfo>(dataProvider.GetUserRole(portalId, userId, roleId));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetUserRoles">
          <declaration><![CDATA[public override IList<UserRoleInfo> GetUserRoles(UserInfo user, bool includePrivate)]]></declaration>
          <documentation>
            <summary>
 Gets a list of UserRoles for the user
 </summary>
 <param name="user">A UserInfo object representaing the user</param>
 <param name="includePrivate">Include private roles.</param>
 <returns>A list of UserRoleInfo objects</returns></documentation>
          <codeblock>
            <location sl="288" sc="9" el="294" ec="10">DNNRoleProvider.cs</location>
            <body hash="8d0f1ed1454c006b9b403a3634952f13"><![CDATA[{
            Requires.NotNull("user", user);

            return CBO.FillCollection<UserRoleInfo>(includePrivate 
                    ? dataProvider.GetUserRoles(user.PortalID, user.UserID) 
                    : dataProvider.GetServices(user.PortalID, user.UserID));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetUserRoles">
          <declaration><![CDATA[public override ArrayList GetUserRoles(int portalId, string userName, string roleName)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 GetUserRoles gets a collection of User/Role objects from the Data Store
 </summary>
 <remarks>
 </remarks>
 <param name="portalId">Id of the portal</param>
 <param name="userName">The user to fetch roles for</param>
 <param name="roleName">The role to fetch users for</param>
 <returns>An ArrayList of UserRoleInfo objects</returns>
 <history>
     [cnurse]	03/28/2006	created
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="311" sc="9" el="313" ec="10">DNNRoleProvider.cs</location>
            <body hash="90b07bcf84229bcdd57a23480f072038"><![CDATA[{
            return CBO.FillCollection(dataProvider.GetUserRolesByUsername(portalId, userName, roleName), typeof (UserRoleInfo));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetUsersByRoleName">
          <declaration><![CDATA[public override ArrayList GetUsersByRoleName(int portalId, string roleName)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 Get the users in a role (as User objects)
 </summary>
 <param name="portalId">Id of the portal (If -1 all roles for all portals are
 retrieved.</param>
 <param name="roleName">The role to fetch users for</param>
 <returns>An ArrayList of UserInfo objects</returns>
 <history>
     [cnurse]	03/28/2006	created
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="328" sc="9" el="330" ec="10">DNNRoleProvider.cs</location>
            <body hash="f7a57cf0dfd24ba017bd36e553bfca38"><![CDATA[{
            return AspNetMembershipProvider.FillUserCollection(portalId, dataProvider.GetUsersByRolename(portalId, roleName));
        }]]></body>
          </codeblock>
        </method>
        <method name="RemoveUserFromRole">
          <declaration><![CDATA[public override void RemoveUserFromRole(int portalId, UserInfo user, UserRoleInfo userRole)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 Remove a User from a Role
 </summary>
 <remarks>
 </remarks>
 <param name="portalId">Id of the portal</param>
 <param name="user">The user to remove.</param>
 <param name="userRole">The role to remove the user from.</param>
 <history>
     [cnurse]	03/28/2006	created
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="346" sc="9" el="348" ec="10">DNNRoleProvider.cs</location>
            <body hash="90df7580956e2fdb8f55abb4ff1a3320"><![CDATA[{
            dataProvider.DeleteUserRole(userRole.UserID, userRole.RoleID);
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateRole">
          <declaration><![CDATA[public override void UpdateRole(RoleInfo role)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 Update a role
 </summary>
 <param name="role">The role to update</param>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="193" sc="9" el="210" ec="10">DNNRoleProvider.cs</location>
            <body hash="1d408becb9196fba7da9aafc15a267b8"><![CDATA[{
            dataProvider.UpdateRole(role.RoleID,
                                    role.RoleGroupID,
                                    role.Description,
                                    role.ServiceFee,
                                    role.BillingPeriod.ToString(CultureInfo.InvariantCulture),
                                    role.BillingFrequency,
                                    role.TrialFee,
                                    role.TrialPeriod,
                                    role.TrialFrequency,
                                    role.IsPublic,
                                    role.AutoAssignment,
                                    role.RSVPCode,
                                    role.IconFile,
                                    UserController.GetCurrentUserInfo().UserID,
                                    (int)role.Status,
                                    (int)role.SecurityMode);
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateRoleGroup">
          <declaration><![CDATA[public override void UpdateRoleGroup(RoleGroupInfo roleGroup)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 Update a RoleGroup
 </summary>
 <param name="roleGroup">The RoleGroup to update</param>
 <history>
     [cnurse]	03/28/2006	created
     [jlucarino]	02/26/2009	added LastModifiedByUserID parameter
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="450" sc="9" el="452" ec="10">DNNRoleProvider.cs</location>
            <body hash="b44ad695de448a22297ec02afdfcec75"><![CDATA[{
            dataProvider.UpdateRoleGroup(roleGroup.RoleGroupID, roleGroup.RoleGroupName, roleGroup.Description, UserController.GetCurrentUserInfo().UserID);
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateRoleSettings">
          <declaration><![CDATA[public override void UpdateRoleSettings(RoleInfo role)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 Update the role settings for a role
 </summary>
 <param name="role">The role to update</param>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="219" sc="9" el="224" ec="10">DNNRoleProvider.cs</location>
            <body hash="9d30dfe344acab1501a885974289ea75"><![CDATA[{
            foreach (var setting in role.Settings)
            {
                dataProvider.UpdateRoleSetting(role.RoleID, setting.Key, setting.Value, UserController.GetCurrentUserInfo().UserID);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateUserRole">
          <declaration><![CDATA[public override void UpdateUserRole(UserRoleInfo userRole)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 Updates a User/Role
 </summary>
 <param name="userRole">The User/Role to update</param>
 <history>
     [cnurse]	12/15/2005	created
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="360" sc="9" el="365" ec="4">DNNRoleProvider.cs</location>
            <body hash="1e54186eafbe1b862cfc8ceb24df922c"><![CDATA[{
            dataProvider.UpdateUserRole(userRole.UserRoleID,
                                        (int)userRole.Status, userRole.IsOwner,
                                        userRole.EffectiveDate, userRole.ExpiryDate, 
                                        UserController.GetCurrentUserInfo().UserID);
		}]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="dataProvider">
          <declaration><![CDATA[private readonly DotNetNuke.Security.Membership.Data.DataProvider dataProvider;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="DotNetNuke.Security.Profile">
    <class name="DNNProfileProvider">
      <declaration><![CDATA[public class DNNProfileProvider : ProfileProvider]]></declaration>
      <documentation>-----------------------------------------------------------------------------
 Project:    DotNetNuke
 Namespace:  DotNetNuke.Security.Profile
 Class:      DNNProfileProvider
 -----------------------------------------------------------------------------
 <summary>
 The DNNProfileProvider overrides the default ProfileProvider to provide
 a purely DotNetNuke implementation
 </summary>
 <remarks>
 </remarks>
 -----------------------------------------------------------------------------</documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DNNProfileProvider()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="66" sc="9" el="85" ec="10">DNNProfileProvider.cs</location>
            <body hash="984eb4005370cd80a61a7851a6f09d39"><![CDATA[public DNNProfileProvider()
        {
            _dataProvider = DataProvider.Instance();
            if (_dataProvider == null)
            {
				//get the provider configuration based on the type
                string defaultprovider = Data.DataProvider.Instance().DefaultProviderName;
                const string dataProviderNamespace = "DotNetNuke.Security.Membership.Data";
                if (defaultprovider == "SqlDataProvider")
                {
                    _dataProvider = new SqlDataProvider();
                }
                else
                {
                    string providerType = dataProviderNamespace + "." + defaultprovider;
                    _dataProvider = (DataProvider) Reflection.CreateObject(providerType, providerType, true);
                }
                ComponentFactory.RegisterComponentInstance<DataProvider>(_dataProvider);
            }
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="GetUserProfile">
          <declaration><![CDATA[public override void GetUserProfile(ref UserInfo user)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 GetUserProfile retrieves the UserProfile information from the Data Store
 </summary>
 <remarks>
 </remarks>
 <param name="user">The user whose Profile information we are retrieving.</param>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="145" sc="9" el="206" ec="10">DNNProfileProvider.cs</location>
            <body hash="3eaafb52f13d9682304af6b613d6ee35"><![CDATA[{
            ProfilePropertyDefinition profProperty;

            int portalId = user.IsSuperUser ? Globals.glbSuperUserAppName : user.PortalID;
            var properties = ProfileController.GetPropertyDefinitionsByPortal(portalId, true, false);

            //Load the Profile properties
            if (user.UserID > Null.NullInteger)
            {
                IDataReader dr = _dataProvider.GetUserProfile(user.UserID);
                try
                {
                    while (dr.Read())
                    {
						//Ensure the data reader returned is valid
                        if (!string.Equals(dr.GetName(0), "ProfileID", StringComparison.InvariantCultureIgnoreCase))
                        {
                            break;
                        }
                        int definitionId = Convert.ToInt32(dr["PropertyDefinitionId"]);
                        profProperty = properties.GetById(definitionId);
                        if (profProperty != null)
                        {
                            profProperty.PropertyValue = Convert.ToString(dr["PropertyValue"]);
                            var extendedVisibility = string.Empty;
                            if (dr.GetSchemaTable().Select("ColumnName = 'ExtendedVisibility'").Length > 0)
                            {
                                extendedVisibility = Convert.ToString(dr["ExtendedVisibility"]);
                            }
                            profProperty.ProfileVisibility = new ProfileVisibility(portalId, extendedVisibility)
                                                                 {
                                                                     VisibilityMode = (UserVisibilityMode)dr["Visibility"]
                                                                 };
                        }
                    }
                }
                finally
                {
                    CBO.CloseDataReader(dr, true);
                }
            }
                      
            //Clear the profile
            user.Profile.ProfileProperties.Clear();
            
			//Add the properties to the profile
			foreach (ProfilePropertyDefinition property in properties)
            {
                profProperty = property;
                if (string.IsNullOrEmpty(profProperty.PropertyValue) && !string.IsNullOrEmpty(profProperty.DefaultValue))
                {
                    profProperty.PropertyValue = profProperty.DefaultValue;
                }
                user.Profile.ProfileProperties.Add(profProperty);
            }

            //Clear IsDirty Flag
            user.Profile.ClearIsDirty();

            //Ensure old and new TimeZone properties are in synch
            UpdateTimeZoneInfo(user, properties);
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateTimeZoneInfo">
          <declaration><![CDATA[private void UpdateTimeZoneInfo(UserInfo user, ProfilePropertyDefinitionCollection properties)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="92" sc="9" el="116" ec="10">DNNProfileProvider.cs</location>
            <body hash="86d8e8bb9553a4ed1b45e037337a9c3e"><![CDATA[{
            ProfilePropertyDefinition newTimeZone = properties["PreferredTimeZone"];
            ProfilePropertyDefinition oldTimeZone = properties["TimeZone"];
            if (newTimeZone != null && oldTimeZone != null)
            {
                //Old timezone is present but new is not...we will set that up.
                if (!string.IsNullOrEmpty(oldTimeZone.PropertyValue) && string.IsNullOrEmpty(newTimeZone.PropertyValue))
                {
                    int oldOffset;
                    int.TryParse(oldTimeZone.PropertyValue, out oldOffset);
                    TimeZoneInfo timeZoneInfo = Localization.ConvertLegacyTimeZoneOffsetToTimeZoneInfo(oldOffset);
                    newTimeZone.PropertyValue = timeZoneInfo.Id;
                    UpdateUserProfile(user);
                }
                //It's also possible that the new value is set but not the old value. We need to make them backwards compatible
                else if (!string.IsNullOrEmpty(newTimeZone.PropertyValue) && string.IsNullOrEmpty(oldTimeZone.PropertyValue))
                {
                    TimeZoneInfo timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById(newTimeZone.PropertyValue);
                    if (timeZoneInfo != null)
                    {
                        oldTimeZone.PropertyValue = timeZoneInfo.BaseUtcOffset.TotalMinutes.ToString(CultureInfo.InvariantCulture);
                    }
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateUserProfile">
          <declaration><![CDATA[public override void UpdateUserProfile(UserInfo user)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 UpdateUserProfile persists a user's Profile to the Data Store
 </summary>
 <remarks>
 </remarks>
 <param name="user">The user to persist to the Data Store.</param>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="217" sc="9" el="253" ec="10">DNNProfileProvider.cs</location>
            <body hash="0cb1127347e8ab36d99c6937bd7f9bed"><![CDATA[{
            ProfilePropertyDefinitionCollection properties = user.Profile.ProfileProperties;

            //Ensure old and new TimeZone properties are in synch
            var newTimeZone = properties["PreferredTimeZone"];
            var oldTimeZone = properties["TimeZone"];
            if (oldTimeZone != null && newTimeZone != null)
            {   //preference given to new property, if new is changed then old should be updated as well.
                if (newTimeZone.IsDirty && !string.IsNullOrEmpty(newTimeZone.PropertyValue))
                {
                    var timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById(newTimeZone.PropertyValue);
                    if (timeZoneInfo != null)
                        oldTimeZone.PropertyValue = timeZoneInfo.BaseUtcOffset.TotalMinutes.ToString(CultureInfo.InvariantCulture);
                }
                //however if old is changed, we need to update new as well
                else if (oldTimeZone.IsDirty)
                {
                    int oldOffset;
                    int.TryParse(oldTimeZone.PropertyValue, out oldOffset);
                    newTimeZone.PropertyValue = Localization.ConvertLegacyTimeZoneOffsetToTimeZoneInfo(oldOffset).Id;                    
                }
            }
            
            foreach (ProfilePropertyDefinition profProperty in properties)
            {
                if ((profProperty.PropertyValue != null) && (profProperty.IsDirty))
                {
                    var objSecurity = new PortalSecurity();
                    string propertyValue = objSecurity.InputFilter(profProperty.PropertyValue, PortalSecurity.FilterFlag.NoScripting);
                    _dataProvider.UpdateProfileProperty(Null.NullInteger, user.UserID, profProperty.PropertyDefinitionId, 
                                                propertyValue, (int) profProperty.ProfileVisibility.VisibilityMode, 
                                                profProperty.ProfileVisibility.ExtendedVisibilityString(), DateTime.Now);
                    var objEventLog = new EventLogController();
                    objEventLog.AddLog(user, PortalController.GetCurrentPortalSettings(), UserController.GetCurrentUserInfo().UserID, "", "USERPROFILE_UPDATED");
                }
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_dataProvider">
          <declaration><![CDATA[private readonly DotNetNuke.Security.Membership.Data.DataProvider _dataProvider;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="CanEditProviderProperties">
          <declaration><![CDATA[public override bool CanEditProviderProperties]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 Gets whether the Provider Properties can be edited
 </summary>
 <returns>A Boolean</returns>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="131" sc="13" el="133" ec="14">DNNProfileProvider.cs</location>
            <body hash="f5368e81f663038061ec388beff126aa"><![CDATA[{
                return true;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
</root>