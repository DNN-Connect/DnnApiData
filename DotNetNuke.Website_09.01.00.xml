<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<root file="DotNetNuke.Website.dll" version="09.01.00" generated="2017-08-10 13:19:42Z" generationTime="34.2910006">
  <namespace name="">
    <class name="&lt;PrivateImplementationDetails&gt;">
      <declaration><![CDATA[internal sealed class <PrivateImplementationDetails>]]></declaration>
      <documentation>
      </documentation>
      <constructors>
      </constructors>
      <methods>
        <method name="ComputeStringHash">
          <declaration><![CDATA[internal static uint ComputeStringHash(string s)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="DesktopModules.Admin.Security">
    <class name="DNNProfile">
      <declaration><![CDATA[public class DNNProfile : ProfileUserControlBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DNNProfile()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="cmdUpdate_Click">
          <declaration><![CDATA[private void cmdUpdate_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="215" sc="9" el="253" ec="10">DesktopModules\Admin\Security\Profile.ascx.cs</location>
            <body hash="35ad10f13b7678ab64ca1ab531a88d00"><![CDATA[{
            if (IsUserOrAdmin == false && UserId == Null.NullInteger)
            {
                return;
            }

            if (IsValid)
            {
                if (User.UserID == PortalSettings.AdministratorId)
                {
                    //Clear the Portal Cache
                    DataCache.ClearPortalCache(UserPortalID, true);
                }

                //Update DisplayName to conform to Format
                UpdateDisplayName();

                //update the user details
                DataCache.ClearCache();

                if (PortalSettings.Registration.RequireUniqueDisplayName)
                {
                    var usersWithSameDisplayName = (List<UserInfo>)MembershipProvider.Instance().GetUsersBasicSearch(PortalId, 0, 2, "DisplayName", true, "DisplayName", User.DisplayName);
                    if (usersWithSameDisplayName.Any(user => user.UserID != User.UserID))
                    {
                        AddModuleMessage("DisplayNameNotUnique", ModuleMessage.ModuleMessageType.RedError, true);
                        return;
                    }
                }

                var properties = (ProfilePropertyDefinitionCollection)ProfileProperties.DataSource;

                //Update User's profile
                User = ProfileController.UpdateUserProfile(User, properties);

                OnProfileUpdated(EventArgs.Empty);
                OnProfileUpdateCompleted(EventArgs.Empty);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="DataBind">
          <declaration><![CDATA[public override void DataBind()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="144" sc="9" el="166" ec="10">DesktopModules\Admin\Security\Profile.ascx.cs</location>
            <body hash="eb9711574626e57b4f264b4430d64a90"><![CDATA[{
		
            //Before we bind the Profile to the editor we need to "update" the visible data
            var properties = new ProfilePropertyDefinitionCollection();
			var imageType = new ListController().GetListEntryInfo("DataType", "Image");
            foreach (ProfilePropertyDefinition profProperty in UserProfile.ProfileProperties)
            {
                if (IsAdmin && !IsProfile)
                {
                    profProperty.Visible = true;
                }

                if (!profProperty.Deleted && (Request.IsAuthenticated || profProperty.DataType != imageType.EntryID))
                {
                    properties.Add(profProperty);
                }
            }

            ProfileProperties.User = User;
            ProfileProperties.ShowVisibility = ShowVisibility;
            ProfileProperties.DataSource = properties;
            ProfileProperties.DataBind();
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="180" sc="9" el="192" ec="10">DesktopModules\Admin\Security\Profile.ascx.cs</location>
            <body hash="5ed7d4db31c8cff0422696b6f7bf6921"><![CDATA[{
            base.OnInit(e);
            ID = "Profile.ascx";

            //Get the base Page
            var basePage = Page as PageBase;
            if (basePage != null)
            {
				//Check if culture is RTL
                ProfileProperties.LabelMode = basePage.PageCulture.TextInfo.IsRightToLeft ? LabelMode.Right : LabelMode.Left;
            }
            ProfileProperties.LocalResourceFile = LocalResourceFile;
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="202" sc="9" el="205" ec="10">DesktopModules\Admin\Security\Profile.ascx.cs</location>
            <body hash="fc7b718e43625bb201a70614adb0ebb4"><![CDATA[{
            base.OnLoad(e);
            cmdUpdate.Click += cmdUpdate_Click;
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateDisplayName">
          <declaration><![CDATA[private void UpdateDisplayName()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="256" sc="9" el="261" ec="10">DesktopModules\Admin\Security\Profile.ascx.cs</location>
            <body hash="11979d15df2d88d0240177496a616ca8"><![CDATA[{
            if (!string.IsNullOrEmpty(PortalSettings.Registration.DisplayNameFormat))
            {
                User.UpdateDisplayName(PortalSettings.Registration.DisplayNameFormat);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="actionsRow">
          <declaration><![CDATA[protected HtmlGenericControl actionsRow;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdUpdate">
          <declaration><![CDATA[protected LinkButton cmdUpdate;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ProfileProperties">
          <declaration><![CDATA[protected ProfileEditorControl ProfileProperties;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="EditorMode">
          <declaration><![CDATA[public PropertyEditorMode EditorMode]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="77" sc="13" el="79" ec="14">DesktopModules\Admin\Security\Profile.ascx.cs</location>
            <body hash="761be2a684b13d3d16f8aa580946f316"><![CDATA[{
                return ProfileProperties.EditMode;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="81" sc="13" el="83" ec="14">DesktopModules\Admin\Security\Profile.ascx.cs</location>
            <body hash="02b413b70fff6f2eb130828eeb827031"><![CDATA[{
                ProfileProperties.EditMode = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="IsValid">
          <declaration><![CDATA[public bool IsValid]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="94" sc="13" el="96" ec="14">DesktopModules\Admin\Security\Profile.ascx.cs</location>
            <body hash="3c5ccaa62a9b86046bc6989ac0f8e987"><![CDATA[{
                return ProfileProperties.IsValid || IsAdmin;
            }]]></body>
          </codeblock>
        </property>
        <property name="ShowUpdate">
          <declaration><![CDATA[public bool ShowUpdate]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="107" sc="13" el="109" ec="14">DesktopModules\Admin\Security\Profile.ascx.cs</location>
            <body hash="34fb05653c52198c2daa314f4768a1ba"><![CDATA[{
                return actionsRow.Visible;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="111" sc="13" el="113" ec="14">DesktopModules\Admin\Security\Profile.ascx.cs</location>
            <body hash="a0512fc3e1223b76f4fe3c6ad017b843"><![CDATA[{
                actionsRow.Visible = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="ShowVisibility">
          <declaration><![CDATA[protected bool ShowVisibility]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="59" sc="13" el="62" ec="14">DesktopModules\Admin\Security\Profile.ascx.cs</location>
            <body hash="438e95a9ee9803aeb99047b4e7a9ac79"><![CDATA[{
                object setting = GetSetting(PortalId, "Profile_DisplayVisibility");
                return Convert.ToBoolean(setting) && IsUser;
            }]]></body>
          </codeblock>
        </property>
        <property name="UserProfile">
          <declaration><![CDATA[public UserProfile UserProfile]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="124" sc="13" el="131" ec="14">DesktopModules\Admin\Security\Profile.ascx.cs</location>
            <body hash="ecc5b5633a7f4e5c80eea5b662f4ed42"><![CDATA[{
                UserProfile _Profile = null;
                if (User != null)
                {
                    _Profile = User.Profile;
                }
                return _Profile;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="DotNetNuke.Admin.Containers">
    <class name="ModuleActions">
      <declaration><![CDATA[public class ModuleActions : ActionBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private readonly List<int> validIDs = new List<int>();]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="50" sc="9" el="50" ec="63">admin\Menus\ModuleActions\ModuleActions.ascx.cs</location>
            <body hash="77c4fbab3290b688adf775edd9e39ba8"><![CDATA[private readonly List<int> validIDs = new List<int>()]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="actionButton_Click">
          <declaration><![CDATA[private void actionButton_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="104" sc="9" el="106" ec="10">admin\Menus\ModuleActions\ModuleActions.ascx.cs</location>
            <body hash="59fce813587be4b0ff254049e958d77e"><![CDATA[{
            ProcessAction(Request.Params["__EVENTARGUMENT"]);
        }]]></body>
          </codeblock>
        </method>
        <method name="LocalizeString">
          <declaration><![CDATA[protected string LocalizeString(string key)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="82" sc="9" el="84" ec="10">admin\Menus\ModuleActions\ModuleActions.ascx.cs</location>
            <body hash="cff9df9bab78d59970f02ecbe0a4241d"><![CDATA[{
            return Localization.GetString(key, Localization.GlobalResourceFile);
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="87" sc="9" el="101" ec="10">admin\Menus\ModuleActions\ModuleActions.ascx.cs</location>
            <body hash="ff7124fca3e9b26cb3b4406206abe284"><![CDATA[{
            base.OnInit(e);

            ID = "ModuleActions";

            actionButton.Click += actionButton_Click;

            JavaScript.RequestRegistration(CommonJs.DnnPlugins);

            ClientResourceManager.RegisterStyleSheet(Page, "~/admin/menus/ModuleActions/ModuleActions.css", FileOrder.Css.ModuleCss);
            ClientResourceManager.RegisterStyleSheet(Page, "https://maxcdn.bootstrapcdn.com/font-awesome/4.4.0/css/font-awesome.min.css", FileOrder.Css.ModuleCss);
            ClientResourceManager.RegisterScript(Page, "~/admin/menus/ModuleActions/ModuleActions.js");

            ServicesFramework.Instance.RequestAjaxAntiForgerySupport();
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="109" sc="9" el="197" ec="10">admin\Menus\ModuleActions\ModuleActions.ascx.cs</location>
            <body hash="7ea38001acf6ad91aa8ce3b7312f5a35"><![CDATA[{
            base.OnLoad(e);

            AdminActionsJSON = "[]";
            CustomActionsJSON = "[]";
            Panes = "[]";
            try
            {
                SupportsQuickSettings = false;
                DisplayQuickSettings = false;

                var moduleDefinitionId = ModuleContext.Configuration.ModuleDefID;
                var quickSettingsControl = ModuleControlController.GetModuleControlByControlKey("QuickSettings", moduleDefinitionId);

                if (quickSettingsControl != null)
                {
                    SupportsQuickSettings = true;
                    var control  = ModuleControlFactory.LoadModuleControl(Page, ModuleContext.Configuration, "QuickSettings", quickSettingsControl.ControlSrc);
                    control.ID += ModuleContext.ModuleId;
                    quickSettings.Controls.Add(control);

                    DisplayQuickSettings = ModuleContext.Configuration.ModuleSettings.GetValueOrDefault("QS_FirstLoad", true);
                    ModuleController.Instance.UpdateModuleSetting(ModuleContext.ModuleId, "QS_FirstLoad", "False");

                    ClientResourceManager.RegisterScript(Page, "~/admin/menus/ModuleActions/dnnQuickSettings.js");
                }

                if (ActionRoot.Visible)
                {
                    //Add Menu Items
                    foreach (ModuleAction rootAction in ActionRoot.Actions)
                    {
                        //Process Children
                        var actions = new List<ModuleAction>();
                        foreach (ModuleAction action in rootAction.Actions)
                        {
                            if (action.Visible)
                            {
                                if ((EditMode && Globals.IsAdminControl() == false) ||
                                    (action.Secure != SecurityAccessLevel.Anonymous && action.Secure != SecurityAccessLevel.View))
                                {
                                    if (!action.Icon.Contains("://")
                                            && !action.Icon.StartsWith("/")
                                            && !action.Icon.StartsWith("~/"))
                                    {
                                        action.Icon = "~/images/" + action.Icon;
                                    }
                                    if (action.Icon.StartsWith("~/"))
                                    {
                                        action.Icon = Globals.ResolveUrl(action.Icon);
                                    }

                                    actions.Add(action);

                                    if(String.IsNullOrEmpty(action.Url))
                                    {
                                        validIDs.Add(action.ID);
                                    }
                                }
                            }

                        }

                        var oSerializer = new JavaScriptSerializer();
                        if (rootAction.Title == Localization.GetString("ModuleGenericActions.Action", Localization.GlobalResourceFile))
                        {
                            AdminActionsJSON = oSerializer.Serialize(actions);
                        }
                        else
                        {
                            if (rootAction.Title == Localization.GetString("ModuleSpecificActions.Action", Localization.GlobalResourceFile))
                            {
                                CustomActionsJSON = oSerializer.Serialize(actions);
                            }
                            else
                            {
                                SupportsMove = (actions.Count > 0);
                                Panes = oSerializer.Serialize(PortalSettings.ActiveTab.Panes);
                            }
                        }
                    }
                    IsShared = PortalGroupController.Instance.IsModuleShared(ModuleContext.ModuleId, PortalController.Instance.GetPortal(PortalSettings.PortalId));
                }
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="Render">
          <declaration><![CDATA[protected override void Render(HtmlTextWriter writer)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="200" sc="9" el="207" ec="10">admin\Menus\ModuleActions\ModuleActions.ascx.cs</location>
            <body hash="0ee9b0bea056d562d82c66c092dd2d10"><![CDATA[{
            base.Render(writer);

            foreach(int id in validIDs)
            {
                Page.ClientScript.RegisterForEventValidation(actionButton.UniqueID, id.ToString());
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="actionButton">
          <declaration><![CDATA[protected LinkButton actionButton;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="quickSettings">
          <declaration><![CDATA[protected Panel quickSettings;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="validIDs">
          <declaration><![CDATA[private readonly List<int> validIDs = new List<int>();]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="AdminActionsJSON">
          <declaration><![CDATA[protected string AdminActionsJSON]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="52" sc="45" el="52" ec="49">admin\Menus\ModuleActions\ModuleActions.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="52" sc="50" el="52" ec="54">admin\Menus\ModuleActions\ModuleActions.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="AdminText">
          <declaration><![CDATA[protected string AdminText]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="CustomActionsJSON">
          <declaration><![CDATA[protected string CustomActionsJSON]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="59" sc="46" el="59" ec="50">admin\Menus\ModuleActions\ModuleActions.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="59" sc="51" el="59" ec="55">admin\Menus\ModuleActions\ModuleActions.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="CustomText">
          <declaration><![CDATA[protected string CustomText]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="DisplayQuickSettings">
          <declaration><![CDATA[protected bool DisplayQuickSettings]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="66" sc="47" el="66" ec="51">admin\Menus\ModuleActions\ModuleActions.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="66" sc="52" el="66" ec="56">admin\Menus\ModuleActions\ModuleActions.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="IsShared">
          <declaration><![CDATA[protected bool IsShared]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="79" sc="35" el="79" ec="39">admin\Menus\ModuleActions\ModuleActions.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="79" sc="40" el="79" ec="44">admin\Menus\ModuleActions\ModuleActions.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="MoveText">
          <declaration><![CDATA[protected string MoveText]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Panes">
          <declaration><![CDATA[protected string Panes]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="73" sc="34" el="73" ec="38">admin\Menus\ModuleActions\ModuleActions.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="73" sc="39" el="73" ec="43">admin\Menus\ModuleActions\ModuleActions.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="SupportsMove">
          <declaration><![CDATA[protected bool SupportsMove]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="75" sc="39" el="75" ec="43">admin\Menus\ModuleActions\ModuleActions.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="75" sc="44" el="75" ec="48">admin\Menus\ModuleActions\ModuleActions.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="SupportsQuickSettings">
          <declaration><![CDATA[protected bool SupportsQuickSettings]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="77" sc="48" el="77" ec="52">admin\Menus\ModuleActions\ModuleActions.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="77" sc="53" el="77" ec="57">admin\Menus\ModuleActions\ModuleActions.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="DotNetNuke.Common.Controls">
    <class name="Message">
      <declaration><![CDATA[public class Message : PortalModuleBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public Message()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="InitializeComponent">
          <declaration><![CDATA[private void InitializeComponent()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="34" sc="9" el="36" ec="10">admin\Portal\Message.ascx.cs</location>
            <body hash="afc55569510008a3f5a481d7ba3c1f04"><![CDATA[{
            ID = "Message";
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="39" sc="9" el="42" ec="10">admin\Portal\Message.ascx.cs</location>
            <body hash="7a35dd60373e6508aff5615fbef58343"><![CDATA[{
            base.OnInit(e);
            InitializeComponent();
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="lblMessage">
          <declaration><![CDATA[protected Label lblMessage;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="NoContent">
      <declaration><![CDATA[public class NoContent : PortalModuleBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public NoContent()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="InitializeComponent">
          <declaration><![CDATA[private void InitializeComponent()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="34" sc="9" el="35" ec="10">admin\Portal\NoContent.ascx.cs</location>
            <body hash="539fa760ca172337a931519768c64187"><![CDATA[{
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="38" sc="9" el="42" ec="10">admin\Portal\NoContent.ascx.cs</location>
            <body hash="5f3c8c20cc44d36b74ae4760af9b8276"><![CDATA[{
            base.OnInit(e);

            InitializeComponent();
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="Privacy">
      <declaration><![CDATA[public class Privacy : PortalModuleBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public Privacy()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="InitializeComponent">
          <declaration><![CDATA[private void InitializeComponent()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="46" sc="9" el="47" ec="10">admin\Portal\Privacy.ascx.cs</location>
            <body hash="539fa760ca172337a931519768c64187"><![CDATA[{
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="54" sc="9" el="60" ec="10">admin\Portal\Privacy.ascx.cs</location>
            <body hash="541f1d075b3258e186334898ede883ab"><![CDATA[{
            base.OnInit(e);

            //CODEGEN: This method call is required by the Web Form Designer
			//Do not modify it using the code editor.
			InitializeComponent();
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="71" sc="9" el="84" ec="10">admin\Portal\Privacy.ascx.cs</location>
            <body hash="2d826be28e01eed008a3a78b34c4f151"><![CDATA[{
            base.OnLoad(e);
            try
            {
                if (!Page.IsPostBack)
                {
                    lblPrivacy.Text = Localization.GetSystemMessage(PortalSettings, "MESSAGE_PORTAL_PRIVACY");
                }
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="lblPrivacy">
          <declaration><![CDATA[protected Label lblPrivacy;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="Terms">
      <declaration><![CDATA[public class Terms : PortalModuleBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public Terms()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="InitializeComponent">
          <declaration><![CDATA[private void InitializeComponent()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="39" sc="9" el="40" ec="10">admin\Portal\Terms.ascx.cs</location>
            <body hash="539fa760ca172337a931519768c64187"><![CDATA[{
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="45" sc="9" el="52" ec="10">admin\Portal\Terms.ascx.cs</location>
            <body hash="5ecf9f3ced5c456bde3a1ed8a4f8a19e"><![CDATA[{
            base.OnInit(e);

            
			//CODEGEN: This method call is required by the Web Form Designer
            //Do not modify it using the code editor.
			InitializeComponent();
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="56" sc="9" el="69" ec="10">admin\Portal\Terms.ascx.cs</location>
            <body hash="4d5ab29b4a80bf61bd82ee0139fba793"><![CDATA[{
            base.OnLoad(e);
            try
            {
                if (!Page.IsPostBack)
                {
                    lblTerms.Text = Localization.GetSystemMessage(PortalSettings, "MESSAGE_PORTAL_TERMS");
                }
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="lblTerms">
          <declaration><![CDATA[protected Label lblTerms;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="DotNetNuke.Common.Utilities">
    <class name="KeepAlive">
      <declaration><![CDATA[public class KeepAlive : Page]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public KeepAlive()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="InitializeComponent">
          <declaration><![CDATA[private void InitializeComponent()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="34" sc="9" el="35" ec="10">KeepAlive.aspx.cs</location>
            <body hash="539fa760ca172337a931519768c64187"><![CDATA[{
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="38" sc="9" el="44" ec="10">KeepAlive.aspx.cs</location>
            <body hash="b6fea7385d31b21d16d91967db98a8f8"><![CDATA[{
            base.OnInit(e);

			//CODEGEN: This method call is required by the Web Form Designer
			//Do not modify it using the code editor.
            InitializeComponent();
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="47" sc="9" el="49" ec="10">KeepAlive.aspx.cs</location>
            <body hash="45f462e0d93b418cd3992d8ec86c9cc6"><![CDATA[{
            base.OnLoad(e);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="DotNetNuke.Framework">
    <class name="DefaultPage">
      <declaration><![CDATA[public class DefaultPage : CDefault, IClientAPICallbackEventHandler]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DefaultPage()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
        <constructor name=".cctor">
          <declaration><![CDATA[static DefaultPage()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="76" sc="6" el="79" ec="87">Default.aspx.cs</location>
            <body hash="70669937f21fe9433209b03a6f3299c6"><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof (DefaultPage));

        private static readonly Regex HeaderTextRegex = new Regex("<meta([^>])+name=('|\")robots('|\")",
            RegexOptions.IgnoreCase | RegexOptions.Multiline | RegexOptions.Compiled);]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="GetBackgroundFileInfo">
          <declaration><![CDATA[private IFileInfo GetBackgroundFileInfo()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="549" sc="9" el="555" ec="10">Default.aspx.cs</location>
            <body hash="6804420505b6466e1590db37b6d2e5f4"><![CDATA[{
            string cacheKey = String.Format(Common.Utilities.DataCache.PortalCacheKey, PortalSettings.PortalId, "BackgroundFile");
            var file = CBO.GetCachedObject<Services.FileSystem.FileInfo>(new CacheItemArgs(cacheKey, Common.Utilities.DataCache.PortalCacheTimeOut, Common.Utilities.DataCache.PortalCachePriority),
                                                    GetBackgroundFileInfoCallBack);

            return file;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetBackgroundFileInfoCallBack">
          <declaration><![CDATA[private IFileInfo GetBackgroundFileInfoCallBack(CacheItemArgs itemArgs)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="558" sc="9" el="560" ec="10">Default.aspx.cs</location>
            <body hash="5d3583c850e770d50c1135dbb5d8f1d0"><![CDATA[{
            return FileManager.Instance.GetFile(PortalSettings.PortalId, PortalSettings.BackgroundFile);
        }]]></body>
          </codeblock>
        </method>
        <method name="InitializePage">
          <declaration><![CDATA[private void InitializePage()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="194" sc="9" el="449" ec="10">Default.aspx.cs</location>
            <body hash="12bab89f18d5ed6453bda720a3341675"><![CDATA[{
            //There could be a pending installation/upgrade process
            if (InstallBlocker.Instance.IsInstallInProgress())
            {
                Exceptions.ProcessHttpException(new HttpException(503, Localization.GetString("SiteAccessedWhileInstallationWasInProgress.Error", Localization.GlobalResourceFile)));
            }

            //Configure the ActiveTab with Skin/Container information
            PortalSettingsController.Instance().ConfigureActiveTab(PortalSettings);

            //redirect to a specific tab based on name
            if (!String.IsNullOrEmpty(Request.QueryString["tabname"]))
            {
                TabInfo tab = TabController.Instance.GetTabByName(Request.QueryString["TabName"], PortalSettings.PortalId);
                if (tab != null)
                {
                    var parameters = new List<string>(); //maximum number of elements
                    for (int intParam = 0; intParam <= Request.QueryString.Count - 1; intParam++)
                    {
                        switch (Request.QueryString.Keys[intParam].ToLower())
                        {
                            case "tabid":
                            case "tabname":
                                break;
                            default:
                                parameters.Add(
                                    Request.QueryString.Keys[intParam] + "=" + Request.QueryString[intParam]);
                                break;
                        }
                    }
                    Response.Redirect(Globals.NavigateURL(tab.TabID, Null.NullString, parameters.ToArray()), true);
                }
                else
                {
                    //404 Error - Redirect to ErrorPage
                    Exceptions.ProcessHttpException(Request);
                }
            }
            string cacheability = Request.IsAuthenticated ? Host.AuthenticatedCacheability : Host.UnauthenticatedCacheability;

            switch (cacheability)
            {
                case "0":
                    Response.Cache.SetCacheability(HttpCacheability.NoCache);
                    break;
                case "1":
                    Response.Cache.SetCacheability(HttpCacheability.Private);
                    break;
                case "2":
                    Response.Cache.SetCacheability(HttpCacheability.Public);
                    break;
                case "3":
                    Response.Cache.SetCacheability(HttpCacheability.Server);
                    break;
                case "4":
                    Response.Cache.SetCacheability(HttpCacheability.ServerAndNoCache);
                    break;
                case "5":
                    Response.Cache.SetCacheability(HttpCacheability.ServerAndPrivate);
                    break;
            }

            //page comment
            if (Host.DisplayCopyright)
            {
                Comment += string.Concat(Environment.NewLine,
                                         "<!--*********************************************-->",
                                         Environment.NewLine,
                                         "<!-- DNN Platform - http://www.dnnsoftware.com   -->",
                                         Environment.NewLine,
                                         "<!-- Copyright (c) 2002-2017, by DNN Corporation -->",
                                         Environment.NewLine,
                                         "<!--*********************************************-->",
                                         Environment.NewLine);
            }

            //Only insert the header control if a comment is needed
            if(!String.IsNullOrWhiteSpace(Comment))
                Page.Header.Controls.AddAt(0, new LiteralControl(Comment));

            if (PortalSettings.ActiveTab.PageHeadText != Null.NullString && !Globals.IsAdminControl())
            {
                Page.Header.Controls.Add(new LiteralControl(PortalSettings.ActiveTab.PageHeadText));
            }

            if (!string.IsNullOrEmpty(PortalSettings.PageHeadText))
            {
                metaPanel.Controls.Add(new LiteralControl(PortalSettings.PageHeadText));
            }
            
            //set page title
            if (UrlUtils.InPopUp())
            {
                var strTitle = new StringBuilder(PortalSettings.PortalName);
                var slaveModule = UIUtilities.GetSlaveModule(PortalSettings.ActiveTab.TabID);

                //Skip is popup is just a tab (no slave module)
                if (slaveModule.DesktopModuleID != Null.NullInteger)
                {
                    var control = ModuleControlFactory.CreateModuleControl(slaveModule) as IModuleControl;
                    string extension = Path.GetExtension(slaveModule.ModuleControl.ControlSrc.ToLower());
                    switch (extension)
                    {
                        case ".mvc":
                            var segments = slaveModule.ModuleControl.ControlSrc.Replace(".mvc", "").Split('/');

                            control.LocalResourceFile = String.Format("~/DesktopModules/MVC/{0}/{1}/{2}.resx",
                                slaveModule.DesktopModule.FolderName,
                                Localization.LocalResourceDirectory,
                                segments[0]);
                            break;
                        default:
                            control.LocalResourceFile = string.Concat(
                                slaveModule.ModuleControl.ControlSrc.Replace(
                                    Path.GetFileName(slaveModule.ModuleControl.ControlSrc), string.Empty),
                                Localization.LocalResourceDirectory, "/",
                                Path.GetFileName(slaveModule.ModuleControl.ControlSrc));
                            break;
                    }
                    var title = Localization.LocalizeControlTitle(control);
                    
                    strTitle.Append(string.Concat(" > ", PortalSettings.ActiveTab.LocalizedTabName));
                    strTitle.Append(string.Concat(" > ", title));
                }
                else
                {
                    strTitle.Append(string.Concat(" > ", PortalSettings.ActiveTab.LocalizedTabName));
                }

                //Set to page
                Title = strTitle.ToString();
            }
            else
            {
                //If tab is named, use that title, otherwise build it out via breadcrumbs
                if (!string.IsNullOrEmpty(PortalSettings.ActiveTab.Title))
                {
                    Title = PortalSettings.ActiveTab.Title;
                }
                else
                {
                    //Elected for SB over true concatenation here due to potential for long nesting depth
                    var strTitle = new StringBuilder(PortalSettings.PortalName);
                    foreach (TabInfo tab in PortalSettings.ActiveTab.BreadCrumbs)
                    {
                        strTitle.Append(string.Concat(" > ", tab.TabName));
                    }
                    Title = strTitle.ToString();
                }
            }

            //set the background image if there is one selected
            if (!UrlUtils.InPopUp() && FindControl("Body") != null)
            {
                if (!string.IsNullOrEmpty(PortalSettings.BackgroundFile))
                {
                    var fileInfo = GetBackgroundFileInfo();
                    var url = FileManager.Instance.GetUrl(fileInfo);

                    ((HtmlGenericControl)FindControl("Body")).Attributes["style"] = string.Concat("background-image: url('", url, "')");
                }
            }

            //META Refresh
            // Only autorefresh the page if we are in VIEW-mode and if we aren't displaying some module's subcontrol.
            if (PortalSettings.ActiveTab.RefreshInterval > 0 && this.PortalSettings.UserMode == PortalSettings.Mode.View && Request.QueryString["ctl"] == null)
            {
                MetaRefresh.Content = PortalSettings.ActiveTab.RefreshInterval.ToString();
                MetaRefresh.Visible = true;
            }
            else
            {
                MetaRefresh.Visible = false;
            }

            //META description
            if (!string.IsNullOrEmpty(PortalSettings.ActiveTab.Description))
            {
                Description = PortalSettings.ActiveTab.Description;
            }
            else
            {
                Description = PortalSettings.Description;
            }

            //META keywords
            if (!string.IsNullOrEmpty(PortalSettings.ActiveTab.KeyWords))
            {
                KeyWords = PortalSettings.ActiveTab.KeyWords;
            }
            else
            {
                KeyWords = PortalSettings.KeyWords;
            }
            if (Host.DisplayCopyright)
            {
                KeyWords += ",DotNetNuke,DNN";
            }

            //META copyright
            if (!string.IsNullOrEmpty(PortalSettings.FooterText))
            {
                Copyright = PortalSettings.FooterText.Replace("[year]", DateTime.Now.Year.ToString());
            }
            else
            {
                Copyright = string.Concat("Copyright (c) ", DateTime.Now.Year, " by ", PortalSettings.PortalName);
            }

            //META generator
            if (Host.DisplayCopyright)
            {
                Generator = "DotNetNuke ";
            }
            else
            {
                Generator = "";
            }

            //META Robots - hide it inside popups and if PageHeadText of current tab already contains a robots meta tag
            if (!UrlUtils.InPopUp() &&
                !(HeaderTextRegex.IsMatch(PortalSettings.ActiveTab.PageHeadText) ||
                  HeaderTextRegex.IsMatch(PortalSettings.PageHeadText)))
            {
                MetaRobots.Visible = true;
                var allowIndex = true;
                if ((PortalSettings.ActiveTab.TabSettings.ContainsKey("AllowIndex") &&
                     bool.TryParse(PortalSettings.ActiveTab.TabSettings["AllowIndex"].ToString(), out allowIndex) &&
                     !allowIndex)
                    ||
                    (Request.QueryString["ctl"] != null &&
                     (Request.QueryString["ctl"] == "Login" || Request.QueryString["ctl"] == "Register")))
                {
                    MetaRobots.Content = "NOINDEX, NOFOLLOW";
                }
                else
                {
                    MetaRobots.Content = "INDEX, FOLLOW";
                }
            }

            //NonProduction Label Injection
            if (NonProductionVersion() && Host.DisplayBetaNotice && !UrlUtils.InPopUp())
            {
                string versionString = string.Format(" ({0} Version: {1})", DotNetNukeContext.Current.Application.Status,
                                                     DotNetNukeContext.Current.Application.Version);
                Title += versionString;
            }

			//register the custom stylesheet of current page
			if (PortalSettings.ActiveTab.TabSettings.ContainsKey("CustomStylesheet") && !string.IsNullOrEmpty(PortalSettings.ActiveTab.TabSettings["CustomStylesheet"].ToString()))
			{
				var customStylesheet = Path.Combine(PortalSettings.HomeDirectory, PortalSettings.ActiveTab.TabSettings["CustomStylesheet"].ToString());
				ClientResourceManager.RegisterStyleSheet(this, customStylesheet);
			}
        }]]></body>
          </codeblock>
        </method>
        <method name="ManageFavicon">
          <declaration><![CDATA[private void ManageFavicon()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="488" sc="9" el="495" ec="10">Default.aspx.cs</location>
            <body hash="d9c33cc0ae474d9e252e6e383ed5bc33"><![CDATA[{
            string headerLink = FavIcon.GetHeaderLink(PortalSettings.PortalId);

            if (!String.IsNullOrEmpty(headerLink))
            {
                Page.Header.Controls.Add(new Literal { Text = headerLink });
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="NonProductionVersion">
          <declaration><![CDATA[protected bool NonProductionVersion()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="567" sc="9" el="569" ec="10">Default.aspx.cs</location>
            <body hash="ac70da180feb6ff50f5cbb7443d25eaf"><![CDATA[{
            return DotNetNukeContext.Current.Application.Status != ReleaseMode.Stable;
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="584" sc="9" el="707" ec="10">Default.aspx.cs</location>
            <body hash="947d234e2d28e5ba5627ef57a4c799e4"><![CDATA[{
            base.OnInit(e);

            //set global page settings
            InitializePage();

            //load skin control and register UI js
            UI.Skins.Skin ctlSkin;
            if (PortalSettings.EnablePopUps)
            {
                ctlSkin = UrlUtils.InPopUp() ? UI.Skins.Skin.GetPopUpSkin(this) : UI.Skins.Skin.GetSkin(this);

                //register popup js
                JavaScript.RequestRegistration(CommonJs.jQueryUI);

                var popupFilePath = HttpContext.Current.IsDebuggingEnabled
                                   ? "~/js/Debug/dnn.modalpopup.js"
                                   : "~/js/dnn.modalpopup.js";

                ClientResourceManager.RegisterScript(this, popupFilePath, FileOrder.Js.DnnModalPopup);
            }
            else
            {
                ctlSkin = UI.Skins.Skin.GetSkin(this);
            }

            // DataBind common paths for the client resource loader
            ClientResourceLoader.DataBind();
            ClientResourceLoader.PreRender += (sender, args) => JavaScript.Register(Page);

            //check for and read skin package level doctype
            SetSkinDoctype();

            //Manage disabled pages
            if (PortalSettings.ActiveTab.DisableLink)
            {
                if (TabPermissionController.CanAdminPage())
                {
                    var heading = Localization.GetString("PageDisabled.Header");
                    var message = Localization.GetString("PageDisabled.Text");
                    UI.Skins.Skin.AddPageMessage(ctlSkin, heading, message,
                                                 ModuleMessage.ModuleMessageType.YellowWarning);
                }
                else
                {
                    if (PortalSettings.HomeTabId > 0)
                    {
                        Response.Redirect(Globals.NavigateURL(PortalSettings.HomeTabId), true);
                    }
                    else
                    {
                        Response.Redirect(Globals.GetPortalDomainName(PortalSettings.PortalAlias.HTTPAlias, Request, true), true);
                    }
                }
            }
            //Manage canonical urls
            if (PortalSettings.PortalAliasMappingMode == PortalSettings.PortalAliasMapping.CanonicalUrl)
            {
                string primaryHttpAlias = null;
                if (Config.GetFriendlyUrlProvider() == "advanced")  //advanced mode compares on the primary alias as set during alias identification
                {
                    if (PortalSettings.PrimaryAlias != null && PortalSettings.PortalAlias != null)
                    {
                        if (string.Compare(PortalSettings.PrimaryAlias.HTTPAlias, PortalSettings.PortalAlias.HTTPAlias, StringComparison.InvariantCulture ) != 0)
                        {
                            primaryHttpAlias = PortalSettings.PrimaryAlias.HTTPAlias;
                        }
                    }
                }
                else //other modes just depend on the default alias
                {
                    if (string.Compare(PortalSettings.PortalAlias.HTTPAlias, PortalSettings.DefaultPortalAlias, StringComparison.InvariantCulture ) != 0) 
                        primaryHttpAlias = PortalSettings.DefaultPortalAlias;
                }
                if (primaryHttpAlias != null && string.IsNullOrEmpty(CanonicalLinkUrl))//a primary http alias was identified
                {
                    var originalurl = Context.Items["UrlRewrite:OriginalUrl"].ToString();
                    CanonicalLinkUrl = originalurl.Replace(PortalSettings.PortalAlias.HTTPAlias, primaryHttpAlias);
                }
            }

            //check if running with known account defaults
            if (Request.IsAuthenticated && string.IsNullOrEmpty(Request.QueryString["runningDefault"]) == false)
            {
                var userInfo = HttpContext.Current.Items["UserInfo"] as UserInfo;
                //only show message to default users
                if ((userInfo.Username.ToLower() == "admin") || (userInfo.Username.ToLower() == "host"))
                {
                    var messageText = RenderDefaultsWarning();
                    var messageTitle = Localization.GetString("InsecureDefaults.Title", Localization.GlobalResourceFile);
                    UI.Skins.Skin.AddPageMessage(ctlSkin, messageTitle, messageText, ModuleMessage.ModuleMessageType.RedError);
                }
            }

            //add CSS links
            ClientResourceManager.RegisterDefaultStylesheet(this, string.Concat(Globals.ApplicationPath, "/Resources/Shared/stylesheets/dnndefault/7.0.0/default.css"));
            ClientResourceManager.RegisterIEStylesheet(this, string.Concat(Globals.HostPath, "ie.css"));

            ClientResourceManager.RegisterStyleSheet(this, string.Concat(ctlSkin.SkinPath, "skin.css"), FileOrder.Css.SkinCss);
            ClientResourceManager.RegisterStyleSheet(this, ctlSkin.SkinSrc.Replace(".ascx", ".css"), FileOrder.Css.SpecificSkinCss);

            //add skin to page
            SkinPlaceHolder.Controls.Add(ctlSkin);

            ClientResourceManager.RegisterStyleSheet(this, string.Concat(PortalSettings.HomeDirectory, "portal.css"), FileOrder.Css.PortalCss);

            //add Favicon
            ManageFavicon();

            //ClientCallback Logic 
            ClientAPI.HandleClientAPICallbackEvent(this);

            //add viewstateuserkey to protect against CSRF attacks
            if (User.Identity.IsAuthenticated)
            {
                ViewStateUserKey = User.Identity.Name;
            }

			//set the async postback timeout.
	        if (AJAX.IsEnabled())
	        {
		        AJAX.GetScriptManager(this).AsyncPostBackTimeout = Host.AsyncTimeout;
	        }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="718" sc="9" el="728" ec="10">Default.aspx.cs</location>
            <body hash="30d81b09b89ff1380090d46bbfff2f49"><![CDATA[{
            base.OnLoad(e);

            ManageInstallerFiles();

            if (!String.IsNullOrEmpty(ScrollTop.Value))
            {
                DNNClientAPI.SetScrollTop(Page);
                ScrollTop.Value = ScrollTop.Value;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnPreRender">
          <declaration><![CDATA[protected override void OnPreRender(EventArgs evt)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="731" sc="9" el="768" ec="10">Default.aspx.cs</location>
            <body hash="c2785b553a1fb509cb2e646d971690b6"><![CDATA[{
            base.OnPreRender(evt);

            //Set the Head tags
            metaPanel.Visible = !UrlUtils.InPopUp();
            if (!UrlUtils.InPopUp())
            {
                MetaGenerator.Content = Generator;
                MetaGenerator.Visible = (!String.IsNullOrEmpty(Generator));
                MetaAuthor.Content = PortalSettings.PortalName;
                /*
                 * Never show to be html5 compatible and stay backward compatible
                 * 
                 * MetaCopyright.Content = Copyright;
                 * MetaCopyright.Visible = (!String.IsNullOrEmpty(Copyright));
                 */
                MetaKeywords.Content = KeyWords;
                MetaKeywords.Visible = (!String.IsNullOrEmpty(KeyWords));
                MetaDescription.Content = Description;
                MetaDescription.Visible = (!String.IsNullOrEmpty(Description));
            }
            Page.Header.Title = Title;
            if (!string.IsNullOrEmpty(PortalSettings.AddCompatibleHttpHeader) && !HeaderIsWritten)
            {
                Page.Response.AddHeader("X-UA-Compatible", PortalSettings.AddCompatibleHttpHeader);
            }

	        if (!string.IsNullOrEmpty(CanonicalLinkUrl))
	        {
				//Add Canonical <link> using the primary alias
				var canonicalLink = new HtmlLink();
				canonicalLink.Href = CanonicalLinkUrl;
				canonicalLink.Attributes.Add("rel", "canonical");

				// Add the HtmlLink to the Head section of the page.
				Page.Header.Controls.Add(canonicalLink);
	        }
        }]]></body>
          </codeblock>
        </method>
        <method name="ParsePageCallBackArgs">
          <declaration><![CDATA[private Dictionary<string, string> ParsePageCallBackArgs(string strArg)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="501" sc="9" el="522" ec="10">Default.aspx.cs</location>
            <body hash="bb2d07ace76268d9b9ce0331c91563a7"><![CDATA[{
            string[] aryVals = strArg.Split(new[] { ClientAPI.COLUMN_DELIMITER }, StringSplitOptions.None);
            var objDict = new Dictionary<string, string>();
            if (aryVals.Length > 0)
            {
                objDict.Add("type", aryVals[0]);
                switch (
                    (DNNClientAPI.PageCallBackType)Enum.Parse(typeof(DNNClientAPI.PageCallBackType), objDict["type"]))
                {
                    case DNNClientAPI.PageCallBackType.GetPersonalization:
                        objDict.Add("namingcontainer", aryVals[1]);
                        objDict.Add("key", aryVals[2]);
                        break;
                    case DNNClientAPI.PageCallBackType.SetPersonalization:
                        objDict.Add("namingcontainer", aryVals[1]);
                        objDict.Add("key", aryVals[2]);
                        objDict.Add("value", aryVals[3]);
                        break;
                }
            }
            return objDict;
        }]]></body>
          </codeblock>
        </method>
        <method name="RaiseClientAPICallbackEvent">
          <declaration><![CDATA[public string RaiseClientAPICallbackEvent(string eventArgument)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="153" sc="9" el="173" ec="10">Default.aspx.cs</location>
            <body hash="88bfd282ab847128d232c5eba15fc842"><![CDATA[{
            var dict = ParsePageCallBackArgs(eventArgument);
            if (dict.ContainsKey("type"))
            {
                if (DNNClientAPI.IsPersonalizationKeyRegistered(dict["namingcontainer"] + ClientAPI.CUSTOM_COLUMN_DELIMITER + dict["key"]) == false)
                {
                    throw new Exception(string.Format("This personalization key has not been enabled ({0}:{1}).  Make sure you enable it with DNNClientAPI.EnableClientPersonalization", dict["namingcontainer"], dict["key"]));
                }
                switch ((DNNClientAPI.PageCallBackType)Enum.Parse(typeof(DNNClientAPI.PageCallBackType), dict["type"]))
                {
                    case DNNClientAPI.PageCallBackType.GetPersonalization:
                        return Personalization.GetProfile(dict["namingcontainer"], dict["key"]).ToString();
                    case DNNClientAPI.PageCallBackType.SetPersonalization:
                        Personalization.SetProfile(dict["namingcontainer"], dict["key"], dict["value"]);
                        return dict["value"];
                    default:
                        throw new Exception("Unknown Callback Type");
                }
            }
            return string.Empty;
        }]]></body>
          </codeblock>
        </method>
        <method name="Render">
          <declaration><![CDATA[protected override void Render(HtmlTextWriter writer)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="771" sc="3" el="788" ec="4">Default.aspx.cs</location>
            <body hash="659e2c9cec08767210795d8d433fe82e"><![CDATA[{
			if (PortalSettings.UserMode == PortalSettings.Mode.Edit)
			{
			    var editClass = "dnnEditState";

				var bodyClass = Body.Attributes["class"];
				if (!string.IsNullOrEmpty(bodyClass))
				{
                    Body.Attributes["class"] = string.Format("{0} {1}", bodyClass, editClass);
				}
				else
				{
                    Body.Attributes["class"] = editClass;
				}
			}

			base.Render(writer);
		}]]></body>
          </codeblock>
        </method>
        <method name="RenderDefaultsWarning">
          <declaration><![CDATA[private string RenderDefaultsWarning()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="530" sc="9" el="546" ec="10">Default.aspx.cs</location>
            <body hash="3863c228d95c919baea81d8a6d28054a"><![CDATA[{
            var warningLevel = Request.QueryString["runningDefault"];
            var warningMessage = string.Empty;
            switch (warningLevel)
            {
                case "1":
                    warningMessage = Localization.GetString("InsecureAdmin.Text", Localization.SharedResourceFile);
                    break;
                case "2":
                    warningMessage = Localization.GetString("InsecureHost.Text", Localization.SharedResourceFile);
                    break;
                case "3":
                    warningMessage = Localization.GetString("InsecureDefaults.Text", Localization.SharedResourceFile);
                    break;
            }
            return warningMessage;
        }]]></body>
          </codeblock>
        </method>
        <method name="SetSkinDoctype">
          <declaration><![CDATA[private void SetSkinDoctype()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="461" sc="9" el="485" ec="10">Default.aspx.cs</location>
            <body hash="37484a3355081a6a4d6c33b90316faaa"><![CDATA[{
            string strLang = CultureInfo.CurrentCulture.ToString();
            string strDocType = PortalSettings.ActiveTab.SkinDoctype;
            if (strDocType.Contains("XHTML 1.0"))
            {
                //XHTML 1.0
                HtmlAttributes.Add("xml:lang", strLang);
                HtmlAttributes.Add("lang", strLang);
                HtmlAttributes.Add("xmlns", "http://www.w3.org/1999/xhtml");
            }
            else if (strDocType.Contains("XHTML 1.1"))
            {
                //XHTML 1.1
                HtmlAttributes.Add("xml:lang", strLang);
                HtmlAttributes.Add("xmlns", "http://www.w3.org/1999/xhtml");
            }
            else
            {
                //other
                HtmlAttributes.Add("lang", strLang);
            }
            //Find the placeholder control and render the doctype
            skinDocType.Text = PortalSettings.ActiveTab.SkinDoctype;
            attributeList.Text = HtmlAttributeList;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="attributeList">
          <declaration><![CDATA[protected Literal attributeList;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Body">
          <declaration><![CDATA[protected HtmlGenericControl Body;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="BodySCRIPTS">
          <declaration><![CDATA[protected PlaceHolder BodySCRIPTS;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ClientDependencyHeadCss">
          <declaration><![CDATA[protected PlaceHolder ClientDependencyHeadCss;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ClientDependencyHeadJs">
          <declaration><![CDATA[protected PlaceHolder ClientDependencyHeadJs;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ClientResourceIncludes">
          <declaration><![CDATA[protected PlaceHolder ClientResourceIncludes;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ClientResourceLoader">
          <declaration><![CDATA[protected ClientResourceLoader ClientResourceLoader;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ClientResourcesFormBottom">
          <declaration><![CDATA[protected PlaceHolder ClientResourcesFormBottom;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="CSS">
          <declaration><![CDATA[protected PlaceHolder CSS;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Form">
          <declaration><![CDATA[protected new Form Form;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Head">
          <declaration><![CDATA[protected HtmlHead Head;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="HeaderTextRegex">
          <declaration><![CDATA[private static readonly Regex HeaderTextRegex = new Regex("<meta([^>])+name=('|\")robots('|\")", RegexOptions.IgnoreCase | RegexOptions.Multiline | RegexOptions.Compiled);]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Logger">
          <declaration><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof(DefaultPage));]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="MetaAuthor">
          <declaration><![CDATA[protected HtmlMeta MetaAuthor;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="MetaCopyright">
          <declaration><![CDATA[protected HtmlMeta MetaCopyright;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="MetaDescription">
          <declaration><![CDATA[protected new HtmlMeta MetaDescription;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="MetaGenerator">
          <declaration><![CDATA[protected HtmlMeta MetaGenerator;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="MetaKeywords">
          <declaration><![CDATA[protected new HtmlMeta MetaKeywords;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="metaPanel">
          <declaration><![CDATA[protected PlaceHolder metaPanel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="MetaRefresh">
          <declaration><![CDATA[protected HtmlMeta MetaRefresh;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="MetaRobots">
          <declaration><![CDATA[protected HtmlMeta MetaRobots;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="SCRIPTS">
          <declaration><![CDATA[protected PlaceHolder SCRIPTS;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ScrollTop">
          <declaration><![CDATA[protected HtmlInputHidden ScrollTop;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="skinDocType">
          <declaration><![CDATA[protected Literal skinDocType;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="SkinError">
          <declaration><![CDATA[protected Label SkinError;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="SkinPlaceHolder">
          <declaration><![CDATA[protected PlaceHolder SkinPlaceHolder;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="CurrentSkinPath">
          <declaration><![CDATA[public string CurrentSkinPath]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="143" sc="13" el="145" ec="14">Default.aspx.cs</location>
            <body hash="7862c095d202f3207638c00a91200cab"><![CDATA[{
                return ((PortalSettings)HttpContext.Current.Items["PortalSettings"]).ActiveTab.SkinPath;
            }]]></body>
          </codeblock>
        </property>
        <property name="HtmlAttributeList">
          <declaration><![CDATA[protected string HtmlAttributeList]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="109" sc="13" el="137" ec="14">Default.aspx.cs</location>
            <body hash="f9364cfb2f05cc892cd8a1b00e29bd28"><![CDATA[{
                if ((HtmlAttributes != null) && (HtmlAttributes.Count > 0))
                {
                    var attr = new StringBuilder();
                    foreach (string attributeName in HtmlAttributes.Keys)
                    {
                        if ((!String.IsNullOrEmpty(attributeName)) && (HtmlAttributes[attributeName] != null))
                        {
                            string attributeValue = HtmlAttributes[attributeName];
                            if ((attributeValue.IndexOf(",") > 0))
                            {
                                var attributeValues = attributeValue.Split(',');
                                for (var attributeCounter = 0;
                                     attributeCounter <= attributeValues.Length - 1;
                                     attributeCounter++)
                                {
                                    attr.Append(string.Concat(" ", attributeName, "=\"", attributeValues[attributeCounter], "\""));
                                }
                            }
                            else
                            {
                                attr.Append(string.Concat(" ", attributeName, "=\"", attributeValue, "\""));
                            }
                        }
                    }
                    return attr.ToString();
                }
                return string.Empty;
            }]]></body>
          </codeblock>
        </property>
        <property name="PageScrollTop">
          <declaration><![CDATA[public int PageScrollTop]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="94" sc="13" el="102" ec="14">Default.aspx.cs</location>
            <body hash="ac2c6930cb6b605ffaa735fc6b5aee4b"><![CDATA[{
                int pageScrollTop;
                var scrollValue = ScrollTop != null ? ScrollTop.Value : "";
                if (!int.TryParse(scrollValue, out pageScrollTop) || pageScrollTop < 0)
                {
                    pageScrollTop = Null.NullInteger;
                }
                return pageScrollTop;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="DotNetNuke.Modules.Admin.Authentication">
    <class name="Authentication">
      <declaration><![CDATA[public class Authentication : PortalModuleBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private readonly List<AuthenticationSettingsBase> _settingControls = new List<AuthenticationSettingsBase>();]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="47" sc="3" el="47" ec="111">DesktopModules\Admin\Authentication\Authentication.ascx.cs</location>
            <body hash="df44973e5573f9b40d49d5af643987b5"><![CDATA[private readonly List<AuthenticationSettingsBase> _settingControls = new List<AuthenticationSettingsBase>()]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="50" sc="3" el="94" ec="4">DesktopModules\Admin\Authentication\Authentication.ascx.cs</location>
            <body hash="0574f491b0aa822f64fbd197336b559a"><![CDATA[{
			base.OnLoad(e);

			cmdUpdate.Click += OnUpdateClick;

			var authSystems = AuthenticationController.GetEnabledAuthenticationServices();

			foreach (var authSystem in authSystems)
			{
				//Add a Section Header
				var sectionHeadControl = (SectionHeadControl) LoadControl("~/controls/SectionHeadControl.ascx");
				sectionHeadControl.IncludeRule = true;
				sectionHeadControl.CssClass = "Head";

				//Create a <div> to hold the control
				var container = new HtmlGenericControl();
				container.ID = authSystem.AuthenticationType;

				var authSettingsControl = (AuthenticationSettingsBase) LoadControl("~/" + authSystem.SettingsControlSrc);

				//set the control ID to the resource file name ( ie. controlname.ascx = controlname )
				//this is necessary for the Localization in PageBase
				authSettingsControl.ID = Path.GetFileNameWithoutExtension(authSystem.SettingsControlSrc) + "_" + authSystem.AuthenticationType;

				//Add Settings Control to Container
				container.Controls.Add(authSettingsControl);
				_settingControls.Add(authSettingsControl);

				//Add Section Head Control to Container
				pnlSettings.Controls.Add(sectionHeadControl);

				//Add Container to Controls
				pnlSettings.Controls.Add(container);

				//Attach Settings Control's container to Section Head Control
				sectionHeadControl.Section = container.ID;

				//Get Section Head Text from the setting controls LocalResourceFile
				authSettingsControl.LocalResourceFile = authSettingsControl.TemplateSourceDirectory + "/" + Localization.LocalResourceDirectory + "/" +
														Path.GetFileNameWithoutExtension(authSystem.SettingsControlSrc);
				sectionHeadControl.Text = Localization.GetString("Title", authSettingsControl.LocalResourceFile);
				pnlSettings.Controls.Add(new LiteralControl("<br/>"));
				cmdUpdate.Visible = IsEditable;
			}
		}]]></body>
          </codeblock>
        </method>
        <method name="OnUpdateClick">
          <declaration><![CDATA[protected void OnUpdateClick(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="97" sc="3" el="122" ec="4">DesktopModules\Admin\Authentication\Authentication.ascx.cs</location>
            <body hash="9db5b5a31015e763ca5847cd5e08d5b8"><![CDATA[{
			foreach (var settingControl in _settingControls)
			{
				settingControl.UpdateSettings();
			}
			
			//Validate Enabled
			var enabled = false;
			var authSystems = AuthenticationController.GetEnabledAuthenticationServices();
			foreach (var authSystem in authSystems)
			{
				var authLoginControl = (AuthenticationLoginBase) LoadControl("~/" + authSystem.LoginControlSrc);

				//Check if AuthSystem is Enabled
				if (authLoginControl.Enabled)
				{
					enabled = true;
					break;
				}
			}
			if (!enabled)
			{
				//Display warning
				UI.Skins.Skin.AddModuleMessage(this, Localization.GetString("NoProvidersEnabled", LocalResourceFile), ModuleMessage.ModuleMessageType.YellowWarning);
			}
		}]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_settingControls">
          <declaration><![CDATA[private readonly List<AuthenticationSettingsBase> _settingControls = new List<AuthenticationSettingsBase>();]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdUpdate">
          <declaration><![CDATA[protected LinkButton cmdUpdate;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="pnlSettings">
          <declaration><![CDATA[protected Panel pnlSettings;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="Login">
      <declaration><![CDATA[public class Login : UserModuleBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private readonly List<AuthenticationLoginBase> _loginControls = new List<AuthenticationLoginBase>();]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="77" sc="3" el="79" ec="91">DesktopModules\Admin\Authentication\Login.ascx.cs</location>
            <body hash="175988c6b8a5c17609fc3ed962533c82"><![CDATA[private readonly List<AuthenticationLoginBase> _loginControls = new List<AuthenticationLoginBase>();
        private readonly  List<AuthenticationLoginBase> _defaultauthLogin = new List<AuthenticationLoginBase>();
        private readonly List<OAuthLoginBase> _oAuthControls = new List<OAuthLoginBase>();]]></body>
          </codeblock>
        </constructor>
        <constructor name=".cctor">
          <declaration><![CDATA[static Login()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="70" sc="3" el="73" ec="62">DesktopModules\Admin\Authentication\Login.ascx.cs</location>
            <body hash="82190f4b3ec788fb4e979486608a55ec"><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof (Login));

        private static readonly Regex UserLanguageRegex = new Regex("(.*)(&|\\?)(language=)([^&\\?]+)(.*)",
            RegexOptions.IgnoreCase | RegexOptions.Compiled);]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="AddLoginControlAttributes">
          <declaration><![CDATA[private void AddLoginControlAttributes(AuthenticationLoginBase loginControl)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="345" sc="3" el="358" ec="4">DesktopModules\Admin\Authentication\Login.ascx.cs</location>
            <body hash="efa71ec3e8dab331a26b6c2b7b1121ab"><![CDATA[{
			//search selected authentication control for username and password fields
			//and inject autocomplete=off so browsers do not remember sensitive details
			var username = loginControl.FindControl("txtUsername") as WebControl;
			if (username != null)
			{
				username.Attributes.Add("AUTOCOMPLETE", "off");
			}
			var password = loginControl.FindControl("txtPassword") as WebControl;
			if (password != null)
			{
				password.Attributes.Add("AUTOCOMPLETE", "off");
			}
		}]]></body>
          </codeblock>
        </method>
        <method name="BindLogin">
          <declaration><![CDATA[private void BindLogin()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="361" sc="9" el="457" ec="10">DesktopModules\Admin\Authentication\Login.ascx.cs</location>
            <body hash="d1f6effc5deef452199058b38adfe651"><![CDATA[{
            List<AuthenticationInfo> authSystems = AuthenticationController.GetEnabledAuthenticationServices();
            AuthenticationLoginBase defaultLoginControl = null;
            var defaultAuthProvider = PortalController.GetPortalSetting("DefaultAuthProvider", PortalId, "DNN");
            foreach (AuthenticationInfo authSystem in authSystems)
            {
                try
                {
                    //Figure out if known Auth types are enabled (so we can improve perf and stop loading the control)
                    bool enabled = true;
                    if (authSystem.AuthenticationType == "Facebook" || authSystem.AuthenticationType == "Google"
                        || authSystem.AuthenticationType == "Live" || authSystem.AuthenticationType == "Twitter")
                    {
                        enabled = PortalController.GetPortalSettingAsBoolean(authSystem.AuthenticationType + "_Enabled", PortalId, false);
                    }

                    if (enabled)
                    {
                        var authLoginControl = (AuthenticationLoginBase)LoadControl("~/" + authSystem.LoginControlSrc);
                        BindLoginControl(authLoginControl, authSystem);
                        if (authSystem.AuthenticationType == "DNN")
                        {
                            defaultLoginControl = authLoginControl;
                        }

                        //Check if AuthSystem is Enabled
                        if (authLoginControl.Enabled)
                        {
                            var oAuthLoginControl = authLoginControl as OAuthLoginBase;
                            if (oAuthLoginControl != null)
                            {
                                //Add Login Control to List
                                _oAuthControls.Add(oAuthLoginControl);
                            }
                            else
                            {
                                if (authLoginControl.AuthenticationType == defaultAuthProvider)
                                {
                                    _defaultauthLogin.Add(authLoginControl);
                                }
                                else
                                {
                                    //Add Login Control to List
                                    _loginControls.Add(authLoginControl);
                                }
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    Exceptions.LogException(ex);
                }
            }
            int authCount = _loginControls.Count + _defaultauthLogin.Count;
            switch (authCount)
            {
                case 0:
                    //No enabled controls - inject default dnn control
                    if (defaultLoginControl == null)
                    {
                        //No controls enabled for portal, and default DNN control is not enabled by host, so load system default (DNN)
                        AuthenticationInfo authSystem = AuthenticationController.GetAuthenticationServiceByType("DNN");
                        var authLoginControl = (AuthenticationLoginBase)LoadControl("~/" + authSystem.LoginControlSrc);
                        BindLoginControl(authLoginControl, authSystem);
                        DisplayLoginControl(authLoginControl, false, false);
                    }
                    else
                    {
                        //if there are social authprovider only
                        if (_oAuthControls.Count == 0)
                        //Portal has no login controls enabled so load default DNN control
                        DisplayLoginControl(defaultLoginControl, false, false);
                    }
                    break;
                case 1:
                    //We don't want the control to render with tabbed interface
                    DisplayLoginControl(_defaultauthLogin.Count == 1 
                                            ? _defaultauthLogin[0] 
                                            : _loginControls.Count == 1 
                                                ? _loginControls[0] 
                                                : _oAuthControls[0], 
                                        false,
                                        false);
                    break;
                default:
                    //make sure defaultAuth provider control is diplayed first
                    if (_defaultauthLogin.Count>0) DisplayTabbedLoginControl(_defaultauthLogin[0], tsLogin.Tabs);
                    foreach (AuthenticationLoginBase authLoginControl in _loginControls)
                    {
                        DisplayTabbedLoginControl(authLoginControl, tsLogin.Tabs);
                    }

                    break;
            }
            BindOAuthControls();
        }]]></body>
          </codeblock>
        </method>
        <method name="BindLoginControl">
          <declaration><![CDATA[private void BindLoginControl(AuthenticationLoginBase authLoginControl, AuthenticationInfo authSystem)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="468" sc="9" el="485" ec="10">DesktopModules\Admin\Authentication\Login.ascx.cs</location>
            <body hash="2b340ec424bdb02e5186e1c1435ea88c"><![CDATA[{
            //set the control ID to the resource file name ( ie. controlname.ascx = controlname )
            //this is necessary for the Localization in PageBase
            authLoginControl.AuthenticationType = authSystem.AuthenticationType;
            authLoginControl.ID = Path.GetFileNameWithoutExtension(authSystem.LoginControlSrc) + "_" + authSystem.AuthenticationType;
            authLoginControl.LocalResourceFile = authLoginControl.TemplateSourceDirectory + "/" + Localization.LocalResourceDirectory + "/" +
                                                 Path.GetFileNameWithoutExtension(authSystem.LoginControlSrc);
            authLoginControl.RedirectURL = RedirectURL;
            authLoginControl.ModuleConfiguration = ModuleConfiguration;
            if (authSystem.AuthenticationType != "DNN")
            {
                authLoginControl.ViewStateMode = ViewStateMode.Enabled;
            }

            //attempt to inject control attributes
            AddLoginControlAttributes(authLoginControl);
            authLoginControl.UserAuthenticated += UserAuthenticated;
        }]]></body>
          </codeblock>
        </method>
        <method name="BindOAuthControls">
          <declaration><![CDATA[private void BindOAuthControls()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="460" sc="9" el="465" ec="10">DesktopModules\Admin\Authentication\Login.ascx.cs</location>
            <body hash="5cc419f8a95ced152ecc3091e804a585"><![CDATA[{
            foreach (OAuthLoginBase oAuthLoginControl in _oAuthControls)
            {
                socialLoginControls.Controls.Add(oAuthLoginControl);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="BindRegister">
          <declaration><![CDATA[private void BindRegister()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="488" sc="3" el="535" ec="4">DesktopModules\Admin\Authentication\Login.ascx.cs</location>
            <body hash="8b05348ab1029f21ba20aae9ce679b0d"><![CDATA[{
			lblType.Text = AuthenticationType;
			lblToken.Text = UserToken;

			//Verify that the current user has access to this page
			if (PortalSettings.UserRegistration == (int) Globals.PortalRegistrationType.NoRegistration && Request.IsAuthenticated == false)
			{
				Response.Redirect(Globals.NavigateURL("Access Denied"), true);
			}
			lblRegisterHelp.Text = Localization.GetSystemMessage(PortalSettings, "MESSAGE_REGISTRATION_INSTRUCTIONS");
			switch (PortalSettings.UserRegistration)
			{
				case (int) Globals.PortalRegistrationType.PrivateRegistration:
					lblRegisterHelp.Text += Localization.GetString("PrivateMembership", Localization.SharedResourceFile);
					break;
				case (int) Globals.PortalRegistrationType.PublicRegistration:
					lblRegisterHelp.Text += Localization.GetString("PublicMembership", Localization.SharedResourceFile);
					break;
				case (int) Globals.PortalRegistrationType.VerifiedRegistration:
					lblRegisterHelp.Text += Localization.GetString("VerifiedMembership", Localization.SharedResourceFile);
					break;
			}
			if (AutoRegister)
			{
				InitialiseUser();
			}
			bool UserValid = true;
			if (string.IsNullOrEmpty(User.Username) || string.IsNullOrEmpty(User.Email) || string.IsNullOrEmpty(User.FirstName) || string.IsNullOrEmpty(User.LastName))
			{
				UserValid = Null.NullBoolean;
			}
			if (AutoRegister && UserValid)
			{
				ctlUser.Visible = false;
				lblRegisterTitle.Text = Localization.GetString("CreateTitle", LocalResourceFile);
				cmdCreateUser.Text = Localization.GetString("cmdCreate", LocalResourceFile);
			}
			else
			{
				lblRegisterHelp.Text += Localization.GetString("Required", Localization.SharedResourceFile);
				lblRegisterTitle.Text = Localization.GetString("RegisterTitle", LocalResourceFile);
				cmdCreateUser.Text = Localization.GetString("cmdRegister", LocalResourceFile);
				ctlUser.ShowPassword = false;
				ctlUser.ShowUpdate = false;
				ctlUser.User = User;
				ctlUser.DataBind();
			}
		}]]></body>
          </codeblock>
        </method>
        <method name="cmdAssociate_Click">
          <declaration><![CDATA[protected void cmdAssociate_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1037" sc="3" el="1064" ec="4">DesktopModules\Admin\Authentication\Login.ascx.cs</location>
            <body hash="4f896981db5d93ae1f06e1bdc9016b1c"><![CDATA[{
			if ((UseCaptcha && ctlCaptcha.IsValid) || (!UseCaptcha))
			{
				UserLoginStatus loginStatus = UserLoginStatus.LOGIN_FAILURE;
				UserInfo objUser = UserController.ValidateUser(PortalId,
															   txtUsername.Text,
															   txtPassword.Text,
															   "DNN",
															   "",
															   PortalSettings.PortalName,
															   AuthenticationLoginBase.GetIPAddress(),
															   ref loginStatus);
				if (loginStatus == UserLoginStatus.LOGIN_SUCCESS)
				{
					//Assocate alternate Login with User and proceed with Login
					AuthenticationController.AddUserAuthentication(objUser.UserID, AuthenticationType, UserToken);
					if (objUser != null)
					{
						UpdateProfile(objUser, true);
					}
					ValidateUser(objUser, true);
				}
				else
				{
					AddModuleMessage("AssociationFailed", ModuleMessage.ModuleMessageType.RedError, true);
				}
			}
		}]]></body>
          </codeblock>
        </method>
        <method name="cmdCreateUser_Click">
          <declaration><![CDATA[protected void cmdCreateUser_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1072" sc="3" el="1092" ec="4">DesktopModules\Admin\Authentication\Login.ascx.cs</location>
            <body hash="cb5194f07e14d479ee4ec3b9abe3f846"><![CDATA[{
			User.Membership.Password = UserController.GeneratePassword();

			if (AutoRegister)
			{
				ctlUser.User = User;

				//Call the Create User method of the User control so that it can create
				//the user and raise the appropriate event(s)
				ctlUser.CreateUser();
			}
			else
			{
				if (ctlUser.IsValid)
				{
					//Call the Create User method of the User control so that it can create
					//the user and raise the appropriate event(s)
					ctlUser.CreateUser();
				}
			}
		}]]></body>
          </codeblock>
        </method>
        <method name="cmdProceed_Click">
          <declaration><![CDATA[protected void cmdProceed_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1100" sc="3" el="1103" ec="4">DesktopModules\Admin\Authentication\Login.ascx.cs</location>
            <body hash="4f242b3e5891641f97466a622e19007c"><![CDATA[{
			var user = ctlPassword.User;
			ValidateUser(user, true);
		}]]></body>
          </codeblock>
        </method>
        <method name="DisplayLoginControl">
          <declaration><![CDATA[private void DisplayLoginControl(AuthenticationLoginBase authLoginControl, bool addHeader, bool addFooter)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="538" sc="9" el="570" ec="10">DesktopModules\Admin\Authentication\Login.ascx.cs</location>
            <body hash="e14c568218994561e68833807ba19be8"><![CDATA[{
            //Create a <div> to hold the control
            var container = new HtmlGenericControl { TagName = "div", ID = authLoginControl.AuthenticationType, ViewStateMode = ViewStateMode.Disabled};

            //Add Settings Control to Container
            container.Controls.Add(authLoginControl);

            //Add a Section Header
            SectionHeadControl sectionHeadControl;
            if (addHeader)
            {
                sectionHeadControl = (SectionHeadControl)LoadControl("~/controls/SectionHeadControl.ascx");
                sectionHeadControl.IncludeRule = true;
                sectionHeadControl.CssClass = "Head";
                sectionHeadControl.Text = Localization.GetString("Title", authLoginControl.LocalResourceFile);

                sectionHeadControl.Section = container.ID;

                //Add Section Head Control to Container
                pnlLoginContainer.Controls.Add(sectionHeadControl);
            }

            //Add Container to Controls
            pnlLoginContainer.Controls.Add(container);


            //Add LineBreak
            if (addFooter)
            {
                pnlLoginContainer.Controls.Add(new LiteralControl("<br />"));
            }
            pnlLoginContainer.Visible = true;
        }]]></body>
          </codeblock>
        </method>
        <method name="DisplayTabbedLoginControl">
          <declaration><![CDATA[private void DisplayTabbedLoginControl(AuthenticationLoginBase authLoginControl, TabStripTabCollection Tabs)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="573" sc="9" el="580" ec="10">DesktopModules\Admin\Authentication\Login.ascx.cs</location>
            <body hash="d4843f4f36c97c767dff16de58cc4b4e"><![CDATA[{
            var tab = new DNNTab(Localization.GetString("Title", authLoginControl.LocalResourceFile)) { ID = authLoginControl.AuthenticationType };
            
            tab.Controls.Add(authLoginControl);
            Tabs.Add(tab);
            
            tsLogin.Visible = true;
        }]]></body>
          </codeblock>
        </method>
        <method name="GenerateUserName">
          <declaration><![CDATA[private string GenerateUserName()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="616" sc="9" el="692" ec="10">DesktopModules\Admin\Authentication\Login.ascx.cs</location>
            <body hash="63b1d77876e3cbb8ec4184ac489093c6"><![CDATA[{
            //Try the best username. Default it to UserToken
            var userName = UserToken.Replace("http://", "").TrimEnd('/');

            //Try Email prefix
            var emailPrefix = string.Empty;
            if (!string.IsNullOrEmpty(User.Email))
            {                
                if (User.Email.IndexOf("@", StringComparison.Ordinal) != -1)
                {
                    emailPrefix = User.Email.Substring(0, User.Email.IndexOf("@", StringComparison.Ordinal));
                    var user = UserController.GetUserByName(PortalId, emailPrefix);
                    if (user == null)
                    {
                        return emailPrefix;
                    }
                }
            }

            //Try First Name
            if (!string.IsNullOrEmpty(User.FirstName))
            {
                var user = UserController.GetUserByName(PortalId, User.FirstName);
                if (user == null)
                {
                    return User.FirstName;
                }
            }

            //Try Last Name
            if (!string.IsNullOrEmpty(User.LastName))
            {
                var user = UserController.GetUserByName(PortalId, User.LastName);
                if (user == null)
                {
                    return User.LastName;
                }
            }

            //Try First Name + space + First letter last name            
            if (!string.IsNullOrEmpty(User.LastName) && !string.IsNullOrEmpty(User.FirstName))
            {
                var newUserName = User.FirstName + " " + User.LastName.Substring(0,1);
                var user = UserController.GetUserByName(PortalId, newUserName);
                if (user == null)
                {
                    return newUserName;
                }
            }

            //Try First letter of First Name + lastname
            if (!string.IsNullOrEmpty(User.LastName) && !string.IsNullOrEmpty(User.FirstName))
            {
                var newUserName = User.FirstName.Substring(0, 1) + User.LastName;
                var user = UserController.GetUserByName(PortalId, newUserName);
                if (user == null)
                {
                    return newUserName;
                }
            }

            //Try Email Prefix + incremental numbers until unique name found
            if (!string.IsNullOrEmpty(emailPrefix))
            {
                for (var i = 1; i < 10000; i++)
                {
                    var newUserName = emailPrefix + i;
                    var user = UserController.GetUserByName(PortalId, newUserName);
                    if (user == null)
                    {
                        return newUserName;
                    }
                }
            }

            return userName;
        }]]></body>
          </codeblock>
        </method>
        <method name="InitialiseUser">
          <declaration><![CDATA[private void InitialiseUser()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="583" sc="3" el="613" ec="4">DesktopModules\Admin\Authentication\Login.ascx.cs</location>
            <body hash="5a2405a645dcdf2f459e630373fab1a6"><![CDATA[{
			//Load any Profile properties that may have been returned
			UpdateProfile(User, false);

            //Set UserName to authentication Token            
            User.Username = GenerateUserName();

			//Set DisplayName to UserToken if null
			if (string.IsNullOrEmpty(User.DisplayName))
			{
				User.DisplayName = UserToken.Replace("http://", "").TrimEnd('/');
			}
			
			//Parse DisplayName into FirstName/LastName
			if (User.DisplayName.IndexOf(' ') > 0)
			{
				User.FirstName = User.DisplayName.Substring(0, User.DisplayName.IndexOf(' '));
				User.LastName = User.DisplayName.Substring(User.DisplayName.IndexOf(' ') + 1);
			}
			
			//Set FirstName to Authentication Type (if null)
			if (string.IsNullOrEmpty(User.FirstName))
			{
				User.FirstName = AuthenticationType;
			}
			//Set FirstName to "User" (if null)
			if (string.IsNullOrEmpty(User.LastName))
			{
				User.LastName = "User";
			}
		}]]></body>
          </codeblock>
        </method>
        <method name="LocaleEnabled">
          <declaration><![CDATA[private bool LocaleEnabled(string locale)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="900" sc="3" el="902" ec="4">DesktopModules\Admin\Authentication\Login.ascx.cs</location>
            <body hash="87b67ac9bc1f119b4fff576a7160ff95"><![CDATA[{
			return LocaleController.Instance.GetLocales(PortalSettings.PortalId).ContainsKey(locale);
		}]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="914" sc="3" el="942" ec="4">DesktopModules\Admin\Authentication\Login.ascx.cs</location>
            <body hash="1e4237ab3e62bf39379a7d1ac9a4b6c8"><![CDATA[{
			base.OnInit(e);

			ctlPassword.PasswordUpdated += PasswordUpdated;
			ctlProfile.ProfileUpdated += ProfileUpdated;
			ctlUser.UserCreateCompleted += UserCreateCompleted;

			//Set the User Control Properties
			ctlUser.ID = "User";

			//Set the Profile Control Properties
			ctlPassword.ID = "Password";

			//Set the Profile Control Properties
			ctlProfile.ID = "Profile";

			//Override the redirected page title if page has loaded with ctl=Login
			if (Request.QueryString["ctl"] != null)
			{
				if (Request.QueryString["ctl"].ToLower() == "login")
				{
					var myPage = (CDefault) Page;
					if (myPage.PortalSettings.LoginTabId == TabId || myPage.PortalSettings.LoginTabId == -1)
					{
						myPage.Title = Localization.GetString("ControlTitle_login", LocalResourceFile);
					}
				}
			}
		}]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="950" sc="3" el="1029" ec="4">DesktopModules\Admin\Authentication\Login.ascx.cs</location>
            <body hash="02eae5a1a21732e219a257e02c8586e7"><![CDATA[{
			base.OnLoad(e);

			cmdAssociate.Click += cmdAssociate_Click;
			cmdCreateUser.Click += cmdCreateUser_Click;
			cmdProceed.Click += cmdProceed_Click;

			//Verify if portal has a customized login page
			if (!Null.IsNull(PortalSettings.LoginTabId) && Globals.IsAdminControl())
			{
				if (Globals.ValidateLoginTabID(PortalSettings.LoginTabId))
				{
					//login page exists and trying to access this control directly with url param -> not allowed
					var parameters = new string[3];
					if (!string.IsNullOrEmpty(Request.QueryString["returnUrl"]))
					{
						parameters[0] = "returnUrl=" + HttpUtility.UrlEncode(Request.QueryString["returnUrl"]);
					}
					if (!string.IsNullOrEmpty(Request.QueryString["username"]))
					{
						parameters[1] = "username=" + HttpUtility.UrlEncode(Request.QueryString["username"]);
					}
					if (!string.IsNullOrEmpty(Request.QueryString["verificationcode"]))
					{
						parameters[2] = "verificationcode=" + HttpUtility.UrlEncode(Request.QueryString["verificationcode"]);
					}
					Response.Redirect(Globals.NavigateURL(PortalSettings.LoginTabId, "", parameters));
				}
			}
			if (Page.IsPostBack == false)
			{
				try
				{
					PageNo = 0;
				}
				catch (Exception ex)
				{
					//control not there 
					Logger.Error(ex);
				}
			}
			if (!Request.IsAuthenticated || UserNeedsVerification())
			{
				ShowPanel();
			}
			else //user is already authenticated
			{
				//if a Login Page has not been specified for the portal
				if (Globals.IsAdminControl())
				{
                    //redirect browser 
                    Response.Redirect(RedirectURL, true);
				}
				else //make module container invisible if user is not a page admin
				{
                    var path = RedirectURL.Split('?')[0];
                    if (path != Globals.NavigateURL() && path != Globals.NavigateURL(PortalSettings.HomeTabId))
                    {
                        Response.Redirect(RedirectURL, true);
                    }

					if (TabPermissionController.CanAdminPage())
					{
						ShowPanel();
					}
					else
					{
						ContainerControl.Visible = false;
					}
				}
			}
			divCaptcha.Visible = UseCaptcha;

			if (UseCaptcha)
			{
				ctlCaptcha.ErrorMessage = Localization.GetString("InvalidCaptcha", Localization.SharedResourceFile);
				ctlCaptcha.Text = Localization.GetString("CaptchaText", Localization.SharedResourceFile);
			}

		}]]></body>
          </codeblock>
        </method>
        <method name="PasswordUpdated">
          <declaration><![CDATA[protected void PasswordUpdated(object sender, Password.PasswordUpdatedEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1111" sc="3" el="1129" ec="4">DesktopModules\Admin\Authentication\Login.ascx.cs</location>
            <body hash="4e9eae9a37a7a197899d786893c2fc9d"><![CDATA[{
			PasswordUpdateStatus status = e.UpdateStatus;
			if (status == PasswordUpdateStatus.Success)
			{
				AddModuleMessage("PasswordChanged", ModuleMessage.ModuleMessageType.GreenSuccess, true);
				var user = ctlPassword.User;
				user.Membership.LastPasswordChangeDate = DateTime.Now;
				user.Membership.UpdatePassword = false;
				LoginStatus = user.IsSuperUser ? UserLoginStatus.LOGIN_SUPERUSER : UserLoginStatus.LOGIN_SUCCESS;
				UserLoginStatus userstatus = UserLoginStatus.LOGIN_FAILURE;
				UserController.CheckInsecurePassword(user.Username, user.Membership.Password, ref userstatus);
				LoginStatus = userstatus;
				ValidateUser(user, true);
			}
			else
			{
				AddModuleMessage(status.ToString(), ModuleMessage.ModuleMessageType.RedError, true);
			}
		}]]></body>
          </codeblock>
        </method>
        <method name="ProfileUpdated">
          <declaration><![CDATA[protected void ProfileUpdated(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1135" sc="3" el="1138" ec="4">DesktopModules\Admin\Authentication\Login.ascx.cs</location>
            <body hash="f6fe6eb2668e1715c2fb63d00e9da362"><![CDATA[{
			//Authorize User
			ValidateUser(ctlProfile.User, true);
		}]]></body>
          </codeblock>
        </method>
        <method name="ReplaceLanguage">
          <declaration><![CDATA[private static string ReplaceLanguage(string Url, string originalLanguage, string newLanguage)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="263" sc="9" el="268" ec="10">DesktopModules\Admin\Authentication\Login.ascx.cs</location>
            <body hash="8e4fa4ae17cce0a3b78e57826f5f7ef5"><![CDATA[{
            var returnValue = Host.UseFriendlyUrls
                ? Regex.Replace(Url, "(.*)(/" + originalLanguage + "/)(.*)", "$1/" + newLanguage + "/$3", RegexOptions.IgnoreCase)
                : UserLanguageRegex.Replace(Url, "$1$2$3" + newLanguage + "$5");
            return returnValue;
        }]]></body>
          </codeblock>
        </method>
        <method name="ShowPanel">
          <declaration><![CDATA[private void ShowPanel()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="700" sc="3" el="732" ec="4">DesktopModules\Admin\Authentication\Login.ascx.cs</location>
            <body hash="b28bb2c7e7804c3341d1359430b1a516"><![CDATA[{
			bool showLogin = (PageNo == 0);
			bool showRegister = (PageNo == 1);
			bool showPassword = (PageNo == 2);
			bool showProfile = (PageNo == 3);
			pnlProfile.Visible = showProfile;
			pnlPassword.Visible = showPassword;
			pnlLogin.Visible = showLogin;
			pnlRegister.Visible = showRegister;
			pnlAssociate.Visible = showRegister;
			switch (PageNo)
			{
				case 0:
					BindLogin();
					break;
				case 1:
					BindRegister();
					break;
				case 2:
					ctlPassword.UserId = UserId;
					ctlPassword.DataBind();
					break;
				case 3:
					ctlProfile.UserId = UserId;
					ctlProfile.DataBind();
					break;
			}

            if (showProfile && UrlUtils.InPopUp())
			{
				ScriptManager.RegisterClientScriptBlock(this, GetType(), "ResizePopup", "if(parent.$('#iPopUp').length > 0 && parent.$('#iPopUp').dialog('isOpen')){parent.$('#iPopUp').dialog({width: 950, height: 550}).dialog({position: 'center'});};", true);
			}
		}]]></body>
          </codeblock>
        </method>
        <method name="UpdateProfile">
          <declaration><![CDATA[private void UpdateProfile(UserInfo objUser, bool update)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="735" sc="3" el="785" ec="4">DesktopModules\Admin\Authentication\Login.ascx.cs</location>
            <body hash="9ac7055883f5f58e311c783cf5950ebe"><![CDATA[{
			bool bUpdateUser = false;
			if (ProfileProperties.Count > 0)
			{
				foreach (string key in ProfileProperties)
				{
					switch (key)
					{
						case "FirstName":
							if (objUser.FirstName != ProfileProperties[key])
							{
								objUser.FirstName = ProfileProperties[key];
								bUpdateUser = true;
							}
							break;
						case "LastName":
							if (objUser.LastName != ProfileProperties[key])
							{
								objUser.LastName = ProfileProperties[key];
								bUpdateUser = true;
							}
							break;
						case "Email":
							if (objUser.Email != ProfileProperties[key])
							{
								objUser.Email = ProfileProperties[key];
								bUpdateUser = true;
							}
							break;
						case "DisplayName":
							if (objUser.DisplayName != ProfileProperties[key])
							{
								objUser.DisplayName = ProfileProperties[key];
								bUpdateUser = true;
							}
							break;
						default:
							objUser.Profile.SetProfileProperty(key, ProfileProperties[key]);
							break;
					}
				}
				if (update)
				{
					if (bUpdateUser)
					{
						UserController.UpdateUser(PortalId, objUser);
					}
					ProfileController.UpdateUserProfile(objUser);
				}
			}
		}]]></body>
          </codeblock>
        </method>
        <method name="UserAuthenticated">
          <declaration><![CDATA[protected void UserAuthenticated(object sender, UserAuthenticatedEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1145" sc="3" el="1252" ec="4">DesktopModules\Admin\Authentication\Login.ascx.cs</location>
            <body hash="075d0507b35831fd6a66e2b4d1d906c8"><![CDATA[{
			LoginStatus = e.LoginStatus;

			//Check the Login Status
			switch (LoginStatus)
			{
				case UserLoginStatus.LOGIN_USERNOTAPPROVED:
					switch (e.Message)
					{
                        case "UnverifiedUser":
                            if (e.User != null)
                            {
                                //First update the profile (if any properties have been passed)
                                AuthenticationType = e.AuthenticationType;
                                ProfileProperties = e.Profile;
                                RememberMe = e.RememberMe;
                                UpdateProfile(e.User, true);
                                ValidateUser(e.User, false);
                            }
					        break;
						case "EnterCode":
							AddModuleMessage(e.Message, ModuleMessage.ModuleMessageType.YellowWarning, true);
							break;
						case "InvalidCode":
						case "UserNotAuthorized":
							AddModuleMessage(e.Message, ModuleMessage.ModuleMessageType.RedError, true);
							break;
						default:
							AddLocalizedModuleMessage(e.Message, ModuleMessage.ModuleMessageType.RedError, true);
							break;
					}
					break;
				case UserLoginStatus.LOGIN_USERLOCKEDOUT:
                    if (Host.AutoAccountUnlockDuration > 0)
                    {
                        AddLocalizedModuleMessage(string.Format(Localization.GetString("UserLockedOut", LocalResourceFile), Host.AutoAccountUnlockDuration), ModuleMessage.ModuleMessageType.RedError, true);
                    }
                    else
                    {
                        AddLocalizedModuleMessage(Localization.GetString("UserLockedOut_ContactAdmin", LocalResourceFile), ModuleMessage.ModuleMessageType.RedError, true);
                    }
					//notify administrator about account lockout ( possible hack attempt )
					var Custom = new ArrayList {e.UserToken};

					var message = new Message
									  {
										  FromUserID = PortalSettings.AdministratorId,
										  ToUserID = PortalSettings.AdministratorId,
										  Subject = Localization.GetSystemMessage(PortalSettings, "EMAIL_USER_LOCKOUT_SUBJECT", Localization.GlobalResourceFile, Custom),
										  Body = Localization.GetSystemMessage(PortalSettings, "EMAIL_USER_LOCKOUT_BODY", Localization.GlobalResourceFile, Custom),
										  Status = MessageStatusType.Unread
									  };
					//_messagingController.SaveMessage(_message);

					Mail.SendEmail(PortalSettings.Email, PortalSettings.Email, message.Subject, message.Body);
					break;
				case UserLoginStatus.LOGIN_FAILURE:
					//A Login Failure can mean one of two things:
					//  1 - User was authenticated by the Authentication System but is not "affiliated" with a DNN Account
					//  2 - User was not authenticated
					if (e.Authenticated)
					{
                        AutoRegister = e.AutoRegister;
                        AuthenticationType = e.AuthenticationType;
                        ProfileProperties = e.Profile;
                        UserToken = e.UserToken;
                        if (AutoRegister)
                        {
                            InitialiseUser();
                            User.Membership.Password = UserController.GeneratePassword();

                            ctlUser.User = User;

                            //Call the Create User method of the User control so that it can create
                            //the user and raise the appropriate event(s)
                            ctlUser.CreateUser();
                        }
                        else
                        {
                            PageNo = 1;
                            ShowPanel();
                        }
					}
					else
					{
						if (string.IsNullOrEmpty(e.Message))
						{
							AddModuleMessage("LoginFailed", ModuleMessage.ModuleMessageType.RedError, true);
						}
						else
						{
							AddLocalizedModuleMessage(e.Message, ModuleMessage.ModuleMessageType.RedError, true);
						}
					}
					break;
				default:
					if (e.User != null)
					{
						//First update the profile (if any properties have been passed)
						AuthenticationType = e.AuthenticationType;
						ProfileProperties = e.Profile;
                        RememberMe = e.RememberMe;
						UpdateProfile(e.User, true);
						ValidateUser(e.User, (e.AuthenticationType != "DNN"));
					}
					break;
			}
		}]]></body>
          </codeblock>
        </method>
        <method name="UserCreateCompleted">
          <declaration><![CDATA[protected void UserCreateCompleted(object sender, UserUserControlBase.UserCreatedEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1260" sc="3" el="1287" ec="4">DesktopModules\Admin\Authentication\Login.ascx.cs</location>
            <body hash="52245e905f8e664e16c20aab9f424fad"><![CDATA[{
			var strMessage = "";
			try
			{
				if (e.CreateStatus == UserCreateStatus.Success)
				{
					//Assocate alternate Login with User and proceed with Login
					AuthenticationController.AddUserAuthentication(e.NewUser.UserID, AuthenticationType, UserToken);

					strMessage = CompleteUserCreation(e.CreateStatus, e.NewUser, e.Notify, true);
					if ((string.IsNullOrEmpty(strMessage)))
					{
						//First update the profile (if any properties have been passed)
						UpdateProfile(e.NewUser, true);

						ValidateUser(e.NewUser, true);
					}
				}
				else
				{
					AddLocalizedModuleMessage(UserController.GetUserCreateStatus(e.CreateStatus), ModuleMessage.ModuleMessageType.RedError, true);
				}
			}
			catch (Exception exc) //Module failed to load
			{
				Exceptions.ProcessModuleLoadException(this, exc);
			}
		}]]></body>
          </codeblock>
        </method>
        <method name="UserNeedsVerification">
          <declaration><![CDATA[private bool UserNeedsVerification()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="891" sc="9" el="897" ec="10">DesktopModules\Admin\Authentication\Login.ascx.cs</location>
            <body hash="5d78e5db0e3ef5a869c94faa731490f9"><![CDATA[{
            var userInfo = UserController.Instance.GetCurrentUserInfo();

            return !userInfo.IsSuperUser && userInfo.IsInRole("Unverified Users") &&
                PortalSettings.UserRegistration == (int)Globals.PortalRegistrationType.VerifiedRegistration &&
                !string.IsNullOrEmpty(Request.QueryString["verificationcode"]);
        }]]></body>
          </codeblock>
        </method>
        <method name="ValidateUser">
          <declaration><![CDATA[private void ValidateUser(UserInfo objUser, bool ignoreExpiring)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="796" sc="3" el="888" ec="4">DesktopModules\Admin\Authentication\Login.ascx.cs</location>
            <body hash="22b2c4a98bcf58ccd1fad2b297a6b7b8"><![CDATA[{
			UserValidStatus validStatus = UserValidStatus.VALID;
			string strMessage = Null.NullString;
			DateTime expiryDate = Null.NullDate;
		    bool okToShowPanel = true;

			validStatus = UserController.ValidateUser(objUser, PortalId, ignoreExpiring);

			if (PasswordConfig.PasswordExpiry > 0)
			{
				expiryDate = objUser.Membership.LastPasswordChangeDate.AddDays(PasswordConfig.PasswordExpiry);
			}
			UserId = objUser.UserID;

			//Check if the User has valid Password/Profile
			switch (validStatus)
			{
				case UserValidStatus.VALID:
                    //check if the user is an admin/host and validate their IP
                    if (Host.EnableIPChecking)
                    {
                        bool isAdminUser = objUser.IsSuperUser || objUser.IsInRole(PortalSettings.AdministratorRoleName);
                        if (isAdminUser) 
                        {
                            if (IPFilterController.Instance.IsIPBanned(Request.UserHostAddress))
                            {
                                new PortalSecurity().SignOut();
                                AddModuleMessage("IPAddressBanned", ModuleMessage.ModuleMessageType.RedError, true);
                                okToShowPanel = false;
                                break;
                            }
                        }
                    }

					//Set the Page Culture(Language) based on the Users Preferred Locale
					if ((objUser.Profile != null) && (objUser.Profile.PreferredLocale != null) && LocaleEnabled(objUser.Profile.PreferredLocale))
					{
						Localization.SetLanguage(objUser.Profile.PreferredLocale);
					}
					else
					{
						Localization.SetLanguage(PortalSettings.DefaultLanguage);
					}
					
					//Set the Authentication Type used 
					AuthenticationController.SetAuthenticationType(AuthenticationType);

					//Complete Login
                    UserController.UserLogin(PortalId, objUser, PortalSettings.PortalName, AuthenticationLoginBase.GetIPAddress(), RememberMe);

					//redirect browser
			        var redirectUrl = RedirectURL;

                    //Clear the cookie
                    HttpContext.Current.Response.Cookies.Set(new HttpCookie("returnurl", "")
                    {
                        Expires = DateTime.Now.AddDays(-1),
                        Path = (!string.IsNullOrEmpty(Globals.ApplicationPath) ? Globals.ApplicationPath : "/")
                    });

                    Response.Redirect(redirectUrl, true);
					break;
				case UserValidStatus.PASSWORDEXPIRED:
					strMessage = string.Format(Localization.GetString("PasswordExpired", LocalResourceFile), expiryDate.ToLongDateString());
					AddLocalizedModuleMessage(strMessage, ModuleMessage.ModuleMessageType.YellowWarning, true);
					PageNo = 2;
					pnlProceed.Visible = false;
					break;
				case UserValidStatus.PASSWORDEXPIRING:
					strMessage = string.Format(Localization.GetString("PasswordExpiring", LocalResourceFile), expiryDate.ToLongDateString());
					AddLocalizedModuleMessage(strMessage, ModuleMessage.ModuleMessageType.YellowWarning, true);
					PageNo = 2;
					pnlProceed.Visible = true;
					break;
				case UserValidStatus.UPDATEPASSWORD:
					var portalAlias = Globals.AddHTTP(PortalSettings.PortalAlias.HTTPAlias);
					var redirTo = string.Format("{0}/default.aspx?ctl=PasswordReset&resetToken={1}&forced=true", portalAlias, objUser.PasswordResetToken);
			        Response.Redirect(redirTo);
					break;
				case UserValidStatus.UPDATEPROFILE:
					//Save UserID in ViewState so that can update profile later.
					UserId = objUser.UserID;

					//When the user need update its profile to complete login, we need clear the login status because if the logrin is from
					//3rd party login provider, it may call UserController.UserLogin because they doesn't check this situation.
					new PortalSecurity().SignOut();
					//Admin has forced profile update
					AddModuleMessage("ProfileUpdate", ModuleMessage.ModuleMessageType.YellowWarning, true);
					PageNo = 3;
					break;
			}
		    if (okToShowPanel) ShowPanel();
		}]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_defaultauthLogin">
          <declaration><![CDATA[private readonly List<AuthenticationLoginBase> _defaultauthLogin = new List<AuthenticationLoginBase>();]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_loginControls">
          <declaration><![CDATA[private readonly List<AuthenticationLoginBase> _loginControls = new List<AuthenticationLoginBase>();]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_oAuthControls">
          <declaration><![CDATA[private readonly List<OAuthLoginBase> _oAuthControls = new List<OAuthLoginBase>();]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdAssociate">
          <declaration><![CDATA[protected LinkButton cmdAssociate;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdCreateUser">
          <declaration><![CDATA[protected LinkButton cmdCreateUser;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdProceed">
          <declaration><![CDATA[protected CommandButton cmdProceed;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ctlCaptcha">
          <declaration><![CDATA[protected CaptchaControl ctlCaptcha;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ctlPassword">
          <declaration><![CDATA[protected Password ctlPassword;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ctlProfile">
          <declaration><![CDATA[protected DNNProfile ctlProfile;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ctlUser">
          <declaration><![CDATA[protected DotNetNuke.Modules.Admin.Users.User ctlUser;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="divCaptcha">
          <declaration><![CDATA[protected HtmlGenericControl divCaptcha;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblAssociateHelp">
          <declaration><![CDATA[protected Label lblAssociateHelp;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblAssociateTitle">
          <declaration><![CDATA[protected Label lblAssociateTitle;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblAuthenticatedHelp">
          <declaration><![CDATA[protected Label lblAuthenticatedHelp;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblAuthenticatedTitle">
          <declaration><![CDATA[protected Label lblAuthenticatedTitle;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblRegisterHelp">
          <declaration><![CDATA[protected Label lblRegisterHelp;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblRegisterTitle">
          <declaration><![CDATA[protected Label lblRegisterTitle;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblToken">
          <declaration><![CDATA[protected Label lblToken;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblType">
          <declaration><![CDATA[protected Label lblType;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Logger">
          <declaration><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof(Login));]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plCaptcha">
          <declaration><![CDATA[protected LabelControl plCaptcha;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plPassword">
          <declaration><![CDATA[protected LabelControl plPassword;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plToken">
          <declaration><![CDATA[protected LabelControl plToken;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plType">
          <declaration><![CDATA[protected LabelControl plType;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plUsername">
          <declaration><![CDATA[protected LabelControl plUsername;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="pnlAssociate">
          <declaration><![CDATA[protected Panel pnlAssociate;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="pnlLogin">
          <declaration><![CDATA[protected Panel pnlLogin;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="pnlLoginContainer">
          <declaration><![CDATA[protected Panel pnlLoginContainer;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="pnlPassword">
          <declaration><![CDATA[protected Panel pnlPassword;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="pnlProceed">
          <declaration><![CDATA[protected Panel pnlProceed;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="pnlProfile">
          <declaration><![CDATA[protected Panel pnlProfile;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="pnlRegister">
          <declaration><![CDATA[protected Panel pnlRegister;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="socialLoginControls">
          <declaration><![CDATA[protected PlaceHolder socialLoginControls;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="tsLogin">
          <declaration><![CDATA[protected DNNTabStrip tsLogin;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtPassword">
          <declaration><![CDATA[protected TextBox txtPassword;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtUsername">
          <declaration><![CDATA[protected TextBox txtUsername;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="UserLanguageRegex">
          <declaration><![CDATA[private static readonly Regex UserLanguageRegex = new Regex("(.*)(&|\\?)(language=)([^&\\?]+)(.*)", RegexOptions.IgnoreCase | RegexOptions.Compiled);]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="AuthenticationType">
          <declaration><![CDATA[protected string AuthenticationType]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="91" sc="4" el="98" ec="5">DesktopModules\Admin\Authentication\Login.ascx.cs</location>
            <body hash="c87e38f5f62182265390b38207daa810"><![CDATA[{
				var authenticationType = Null.NullString;
				if (ViewState["AuthenticationType"] != null)
				{
					authenticationType = Convert.ToString(ViewState["AuthenticationType"]);
				}
				return authenticationType;
			}]]></body>
          </codeblock>
          <codeblock>
            <location sl="100" sc="4" el="102" ec="5">DesktopModules\Admin\Authentication\Login.ascx.cs</location>
            <body hash="e1c5b3b58961b2fa9930ed04459214d8"><![CDATA[{
				ViewState["AuthenticationType"] = value;
			}]]></body>
          </codeblock>
        </property>
        <property name="AutoRegister">
          <declaration><![CDATA[protected bool AutoRegister]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="111" sc="4" el="118" ec="5">DesktopModules\Admin\Authentication\Login.ascx.cs</location>
            <body hash="30bd4406d801c97e54700f35f879e5fb"><![CDATA[{
				var autoRegister = Null.NullBoolean;
				if (ViewState["AutoRegister"] != null)
				{
					autoRegister = Convert.ToBoolean(ViewState["AutoRegister"]);
				}
				return autoRegister;
			}]]></body>
          </codeblock>
          <codeblock>
            <location sl="120" sc="4" el="122" ec="5">DesktopModules\Admin\Authentication\Login.ascx.cs</location>
            <body hash="ff41970e98b0a997373fde2ee5fd4cb7"><![CDATA[{
				ViewState["AutoRegister"] = value;
			}]]></body>
          </codeblock>
        </property>
        <property name="LoginStatus">
          <declaration><![CDATA[protected UserLoginStatus LoginStatus]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="306" sc="4" el="313" ec="5">DesktopModules\Admin\Authentication\Login.ascx.cs</location>
            <body hash="54fdde19b13347fca579480091740b7b"><![CDATA[{
				UserLoginStatus loginStatus = UserLoginStatus.LOGIN_FAILURE;
				if (ViewState["LoginStatus"] != null)
				{
					loginStatus = (UserLoginStatus) ViewState["LoginStatus"];
				}
				return loginStatus;
			}]]></body>
          </codeblock>
          <codeblock>
            <location sl="315" sc="4" el="317" ec="5">DesktopModules\Admin\Authentication\Login.ascx.cs</location>
            <body hash="1b7cbec89c3fc7c776ec6924e7ecb21b"><![CDATA[{
				ViewState["LoginStatus"] = value;
			}]]></body>
          </codeblock>
        </property>
        <property name="PageNo">
          <declaration><![CDATA[protected int PageNo]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="148" sc="4" el="155" ec="5">DesktopModules\Admin\Authentication\Login.ascx.cs</location>
            <body hash="b5621a7b2c81f6b8258043b92669b5b7"><![CDATA[{
				var pageNo = 0;
				if (ViewState["PageNo"] != null)
				{
					pageNo = Convert.ToInt32(ViewState["PageNo"]);
				}
				return pageNo;
			}]]></body>
          </codeblock>
          <codeblock>
            <location sl="157" sc="4" el="159" ec="5">DesktopModules\Admin\Authentication\Login.ascx.cs</location>
            <body hash="771257e362a714ef6e42d9efa4925ba8"><![CDATA[{
				ViewState["PageNo"] = value;
			}]]></body>
          </codeblock>
        </property>
        <property name="ProfileProperties">
          <declaration><![CDATA[protected NameValueCollection ProfileProperties]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="128" sc="4" el="135" ec="5">DesktopModules\Admin\Authentication\Login.ascx.cs</location>
            <body hash="7d53fa1a16c0610bcd6328f6fda725c9"><![CDATA[{
				var profile = new NameValueCollection();
				if (ViewState["ProfileProperties"] != null)
				{
					profile = (NameValueCollection) ViewState["ProfileProperties"];
				}
				return profile;
			}]]></body>
          </codeblock>
          <codeblock>
            <location sl="137" sc="4" el="139" ec="5">DesktopModules\Admin\Authentication\Login.ascx.cs</location>
            <body hash="2dada4eb3398dfc8d0c644bea583937b"><![CDATA[{
				ViewState["ProfileProperties"] = value;
			}]]></body>
          </codeblock>
        </property>
        <property name="RedirectURL">
          <declaration><![CDATA[protected string RedirectURL]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="168" sc="4" el="252" ec="5">DesktopModules\Admin\Authentication\Login.ascx.cs</location>
            <body hash="07de84aa1ea9b103de63fe53f7ce832e"><![CDATA[{
				var redirectURL = "";

				var setting = GetSetting(PortalId, "Redirect_AfterLogin");
                
                //first we need to check if there is a returnurl
				if (Request.QueryString["returnurl"] != null)
				{
					//return to the url passed to signin
                    redirectURL = HttpUtility.UrlDecode(Request.QueryString["returnurl"]);

                    //clean the return url to avoid possible XSS attack.
                    redirectURL = UrlUtils.ValidReturnUrl(redirectURL);
                }
                if (Request.Cookies["returnurl"] != null)
                {
                    //return to the url passed to signin
                    redirectURL = HttpUtility.UrlDecode(Request.Cookies["returnurl"].Value);

                    //clean the return url to avoid possible XSS attack.
                    redirectURL = UrlUtils.ValidReturnUrl(redirectURL);
                }
                if (Request.Params["appctx"] != null)
				{
					//HACK return to the url passed to signin (LiveID) 
					redirectURL = HttpUtility.UrlDecode(Request.Params["appctx"]);

                    //clean the return url to avoid possible XSS attack.
                    redirectURL = UrlUtils.ValidReturnUrl(redirectURL);
                }

			    var alias = PortalAlias.HTTPAlias;
			    var comparison = StringComparison.InvariantCultureIgnoreCase;
                var isDefaultPage = redirectURL == "/"
                    || (alias.Contains("/") && redirectURL.Equals(alias.Substring(alias.IndexOf("/", comparison)), comparison));
                if (string.IsNullOrEmpty(redirectURL) || isDefaultPage)
				{
                    if (Convert.ToInt32(setting) != Null.NullInteger)
                    {
                        redirectURL = Globals.NavigateURL(Convert.ToInt32(setting));
                    }
                    else
                    {
                        if (PortalSettings.LoginTabId != -1 && PortalSettings.HomeTabId != -1)
                        {
                            //redirect to portal home page specified
                            redirectURL = Globals.NavigateURL(PortalSettings.HomeTabId);
                        }
                        else
                        {
                            //redirect to current page 
                            redirectURL = Globals.NavigateURL();
                        }
                    }

				}

				
				//replace language parameter in querystring, to make sure that user will see page in correct language
				if (UserId != -1 && User != null)
				{
					if (!String.IsNullOrEmpty(User.Profile.PreferredLocale) 
							&& User.Profile.PreferredLocale != CultureInfo.CurrentCulture.Name
							&& LocaleEnabled(User.Profile.PreferredLocale))
					{
                        redirectURL = ReplaceLanguage(redirectURL, CultureInfo.CurrentCulture.Name, User.Profile.PreferredLocale);
					}
				}
				
				//check for insecure account defaults
				var qsDelimiter = "?";
				if (redirectURL.Contains("?"))
				{
					qsDelimiter = "&";
				}
				if (LoginStatus == UserLoginStatus.LOGIN_INSECUREADMINPASSWORD)
				{
					redirectURL = redirectURL + qsDelimiter + "runningDefault=1";
				}
				else if (LoginStatus == UserLoginStatus.LOGIN_INSECUREHOSTPASSWORD)
				{
					redirectURL = redirectURL + qsDelimiter + "runningDefault=2";
				}
				return redirectURL;
			}]]></body>
          </codeblock>
        </property>
        <property name="RememberMe">
          <declaration><![CDATA[protected bool RememberMe]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="277" sc="13" el="284" ec="14">DesktopModules\Admin\Authentication\Login.ascx.cs</location>
            <body hash="f55b53875523dc8d9e49a0e0ba49ebcb"><![CDATA[{
                var rememberMe = Null.NullBoolean;
                if (ViewState["RememberMe"] != null)
                {
                    rememberMe = Convert.ToBoolean(ViewState["RememberMe"]);
                }
                return rememberMe;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="286" sc="13" el="288" ec="14">DesktopModules\Admin\Authentication\Login.ascx.cs</location>
            <body hash="7b529b935463fe48f906352891a4f760"><![CDATA[{
                ViewState["RememberMe"] = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="UseCaptcha">
          <declaration><![CDATA[protected bool UseCaptcha]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="297" sc="4" el="300" ec="5">DesktopModules\Admin\Authentication\Login.ascx.cs</location>
            <body hash="fa8af3e3f70f93235894822d6097091b"><![CDATA[{
				object setting = GetSetting(PortalId, "Security_CaptchaLogin");
				return Convert.ToBoolean(setting);
			}]]></body>
          </codeblock>
        </property>
        <property name="UserToken">
          <declaration><![CDATA[protected string UserToken]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="326" sc="4" el="333" ec="5">DesktopModules\Admin\Authentication\Login.ascx.cs</location>
            <body hash="58a86a8d348492a3a445d6347b154d95"><![CDATA[{
				var userToken = "";
				if (ViewState["UserToken"] != null)
				{
					userToken = Convert.ToString(ViewState["UserToken"]);
				}
				return userToken;
			}]]></body>
          </codeblock>
          <codeblock>
            <location sl="335" sc="4" el="337" ec="5">DesktopModules\Admin\Authentication\Login.ascx.cs</location>
            <body hash="405a801317e7b4f85818326aca1a3eb9"><![CDATA[{
				ViewState["UserToken"] = value;
			}]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="Logoff">
      <declaration><![CDATA[public class Logoff : UserModuleBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public Logoff()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="DoLogoff">
          <declaration><![CDATA[private void DoLogoff()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="55" sc="3" el="70" ec="4">DesktopModules\Admin\Authentication\Logoff.ascx.cs</location>
            <body hash="50ed4bed53d929a4ff152229848bd865"><![CDATA[{
			try
			{
				//Remove user from cache
				if (User != null)
				{
					DataCache.ClearUserCache(PortalSettings.PortalId, Context.User.Identity.Name);
				}
				var objPortalSecurity = new PortalSecurity();
				objPortalSecurity.SignOut();
			}
			catch (Exception exc)	//Page failed to load
			{
				Exceptions.ProcessPageLoadException(exc);
			}
		}]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="82" sc="3" el="122" ec="4">DesktopModules\Admin\Authentication\Logoff.ascx.cs</location>
            <body hash="8c6e3732ddc4b9c455d82bf114885cd0"><![CDATA[{
			base.OnLoad(e);
			try
			{
				//Get the Authentication System associated with the current User
				var authSystem = AuthenticationController.GetAuthenticationType();

				if (authSystem != null && !string.IsNullOrEmpty(authSystem.LogoffControlSrc))
				{
					var authLogoffControl = (AuthenticationLogoffBase) LoadControl("~/" + authSystem.LogoffControlSrc);

					//set the control ID to the resource file name ( ie. controlname.ascx = controlname )
					//this is necessary for the Localization in PageBase
					authLogoffControl.AuthenticationType = authSystem.AuthenticationType;
					authLogoffControl.ID = Path.GetFileNameWithoutExtension(authSystem.LogoffControlSrc) + "_" + authSystem.AuthenticationType;
					authLogoffControl.LocalResourceFile = authLogoffControl.TemplateSourceDirectory + "/" + Localization.LocalResourceDirectory + "/" +
														  Path.GetFileNameWithoutExtension(authSystem.LogoffControlSrc);
					authLogoffControl.ModuleConfiguration = ModuleConfiguration;

					authLogoffControl.LogOff += UserLogOff;
					authLogoffControl.Redirect += UserRedirect;

					//Add Login Control to Control
					pnlLogoffContainer.Controls.Add(authLogoffControl);
				}
				else
				{
					//The current auth system has no custom logoff control so LogOff
					DoLogoff();
					Redirect();
				}
			}
			catch (ThreadAbortException)
			{
				//Do nothing Response.redirect
			}
			catch (Exception exc) //Page failed to load
			{
				Exceptions.ProcessPageLoadException(exc);
			}
		}]]></body>
          </codeblock>
        </method>
        <method name="Redirect">
          <declaration><![CDATA[private void Redirect()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="49" sc="3" el="52" ec="4">DesktopModules\Admin\Authentication\Logoff.ascx.cs</location>
            <body hash="606c7e7689e4bb30eae59f770b64baa8"><![CDATA[{
			//Redirect browser back to portal 
			Response.Redirect(AuthenticationController.GetLogoffRedirectURL(PortalSettings, Request), true);
		}]]></body>
          </codeblock>
        </method>
        <method name="UserLogOff">
          <declaration><![CDATA[protected void UserLogOff(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="125" sc="3" el="127" ec="4">DesktopModules\Admin\Authentication\Logoff.ascx.cs</location>
            <body hash="71bb35d15975f5c00fc13d9ca78e98a0"><![CDATA[{
			DoLogoff();
		}]]></body>
          </codeblock>
        </method>
        <method name="UserRedirect">
          <declaration><![CDATA[protected void UserRedirect(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="130" sc="3" el="132" ec="4">DesktopModules\Admin\Authentication\Logoff.ascx.cs</location>
            <body hash="abd8bbd6ec2d079b9e24818923a21b0b"><![CDATA[{
			Redirect();
		}]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="pnlLogoffContainer">
          <declaration><![CDATA[protected Panel pnlLogoffContainer;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="Settings">
      <declaration><![CDATA[public class Settings : AuthenticationSettingsBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public Settings()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="44" sc="9" el="57" ec="10">DesktopModules\AuthenticationServices\DNN\Settings.ascx.cs</location>
            <body hash="bea28648df3e5c8f1d9b6ce13736f1ca"><![CDATA[{
            base.OnLoad(e);

            try
            {
                AuthenticationConfig config = AuthenticationConfig.GetConfig(PortalId);
                SettingsEditor.DataSource = config;
                SettingsEditor.DataBind();
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateSettings">
          <declaration><![CDATA[public override void UpdateSettings()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="35" sc="9" el="41" ec="10">DesktopModules\AuthenticationServices\DNN\Settings.ascx.cs</location>
            <body hash="ca2cf7f438a2a144389d53d139d4df0b"><![CDATA[{
            if (SettingsEditor.IsValid && SettingsEditor.IsDirty)
            {
                var config = (AuthenticationConfig) SettingsEditor.DataSource;
                AuthenticationConfig.UpdateConfig(config);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="SettingsEditor">
          <declaration><![CDATA[protected PropertyEditorControl SettingsEditor;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="DotNetNuke.Modules.Admin.Authentication.DNN">
    <class name="Login">
      <declaration><![CDATA[public class Login : AuthenticationLoginBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public Login()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
        <constructor name=".cctor">
          <declaration><![CDATA[static Login()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="54" sc="3" el="54" ec="89">DesktopModules\AuthenticationServices\DNN\Login.ascx.cs</location>
            <body hash="242fa60852d1270db60e3c6fb1ae75a5"><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof (Login))]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="GetRedirectUrl">
          <declaration><![CDATA[protected string GetRedirectUrl(bool checkSettings = true)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="331" sc="3" el="366" ec="4">DesktopModules\AuthenticationServices\DNN\Login.ascx.cs</location>
            <body hash="4319b67b286cde85b9f3ae7a78b2412e"><![CDATA[{
			var redirectUrl = "";
			var redirectAfterLogin = PortalSettings.Registration.RedirectAfterLogin;
			if (checkSettings && redirectAfterLogin > 0) //redirect to after registration page
			{
				redirectUrl = Globals.NavigateURL(redirectAfterLogin);
			}
			else
			{
				if (Request.QueryString["returnurl"] != null)
				{
					//return to the url passed to register
					redirectUrl = HttpUtility.UrlDecode(Request.QueryString["returnurl"]);

                    //clean the return url to avoid possible XSS attack.
                    redirectUrl = UrlUtils.ValidReturnUrl(redirectUrl);

                    if (redirectUrl.Contains("?returnurl"))
					{
						string baseURL = redirectUrl.Substring(0,
							redirectUrl.IndexOf("?returnurl", StringComparison.Ordinal));
						string returnURL =
							redirectUrl.Substring(redirectUrl.IndexOf("?returnurl", StringComparison.Ordinal) + 11);

						redirectUrl = string.Concat(baseURL, "?returnurl", HttpUtility.UrlEncode(returnURL));
					}
				}
				if (String.IsNullOrEmpty(redirectUrl))
				{
					//redirect to current page 
					redirectUrl = Globals.NavigateURL();
				}
			}

			return redirectUrl;
		}]]></body>
          </codeblock>
        </method>
        <method name="HasSocialAuthenticationEnabled">
          <declaration><![CDATA[private bool HasSocialAuthenticationEnabled()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="314" sc="9" el="324" ec="10">DesktopModules\AuthenticationServices\DNN\Login.ascx.cs</location>
            <body hash="6f49b302711dcbf74c238bfbce5b8144"><![CDATA[{
            return (from a in AuthenticationController.GetEnabledAuthenticationServices()
                    let enabled = (a.AuthenticationType == "Facebook"
                                     || a.AuthenticationType == "Google"
                                     || a.AuthenticationType == "Live"
                                     || a.AuthenticationType == "Twitter")
                                  ? PortalController.GetPortalSettingAsBoolean(a.AuthenticationType + "_Enabled", PortalSettings.PortalId, false)
                                  : !string.IsNullOrEmpty(a.LoginControlSrc) && (LoadControl("~/" + a.LoginControlSrc) as AuthenticationLoginBase).Enabled
                    where a.AuthenticationType != "DNN" && enabled
                    select a).Any();
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="90" sc="3" el="256" ec="4">DesktopModules\AuthenticationServices\DNN\Login.ascx.cs</location>
            <body hash="0c1e4416d78fce7420c73fd8c571ce0e"><![CDATA[{
			base.OnLoad(e);

			cmdLogin.Click += OnLoginClick;

			cancelLink.NavigateUrl = GetRedirectUrl(false);

			ClientAPI.RegisterKeyCapture(Parent, cmdLogin, 13);

            if (PortalSettings.UserRegistration == (int)Globals.PortalRegistrationType.NoRegistration)
            {
                liRegister.Visible = false;
            }
            lblLogin.Text = Localization.GetSystemMessage(PortalSettings, "MESSAGE_LOGIN_INSTRUCTIONS");
		    if (string.IsNullOrEmpty(lblLogin.Text))
		    {
		        lblLogin.AssociatedControlID = string.Empty;
		    }

            if (!string.IsNullOrEmpty(Response.Cookies["USERNAME_CHANGED"].Value))
            {
                txtUsername.Text = Response.Cookies["USERNAME_CHANGED"].Value;
                DotNetNuke.UI.Skins.Skin.AddModuleMessage(this, Localization.GetSystemMessage(PortalSettings, "MESSAGE_USERNAME_CHANGED_INSTRUCTIONS"), ModuleMessage.ModuleMessageType.BlueInfo);
            }

            var returnUrl = Globals.NavigateURL();
            string url;
            if (PortalSettings.UserRegistration != (int)Globals.PortalRegistrationType.NoRegistration)
            {
                if (!string.IsNullOrEmpty(UrlUtils.ValidReturnUrl(Request.QueryString["returnurl"])))
                {
                    returnUrl = Request.QueryString["returnurl"];
                }
                returnUrl = HttpUtility.UrlEncode(returnUrl);

                url = Globals.RegisterURL(returnUrl, Null.NullString);
                registerLink.NavigateUrl = url;
                if (PortalSettings.EnablePopUps && PortalSettings.RegisterTabId == Null.NullInteger
                    && !HasSocialAuthenticationEnabled())
                {
                    registerLink.Attributes.Add("onclick", "return " + UrlUtils.PopUpUrl(url, this, PortalSettings, true, false, 600, 950));
                }
            }
            else
            {
                registerLink.Visible = false;
            }

            //see if the portal supports persistant cookies
            chkCookie.Visible = Host.RememberCheckbox;



            // no need to show password link if feature is disabled, let's check this first
            if (MembershipProviderConfig.PasswordRetrievalEnabled || MembershipProviderConfig.PasswordResetEnabled)
            {
                url = Globals.NavigateURL("SendPassword", "returnurl=" + returnUrl);
                passwordLink.NavigateUrl = url;
                if (PortalSettings.EnablePopUps)
                {
                    passwordLink.Attributes.Add("onclick", "return " + UrlUtils.PopUpUrl(url, this, PortalSettings, true, false, 300, 650));
                }
            }
            else
            {
                passwordLink.Visible = false;
            }


            if (!IsPostBack)
            {
                if (!string.IsNullOrEmpty(Request.QueryString["verificationcode"]) && PortalSettings.UserRegistration == (int) Globals.PortalRegistrationType.VerifiedRegistration)
                {
                    if (Request.IsAuthenticated)
                    {
                        Controls.Clear();
                    }

                    var verificationCode = Request.QueryString["verificationcode"];


                    try
                    {
                        UserController.VerifyUser(verificationCode.Replace(".", "+").Replace("-", "/").Replace("_", "="));

						var redirectTabId = PortalSettings.Registration.RedirectAfterRegistration;

	                    if (Request.IsAuthenticated)
	                    {
                            Response.Redirect(Globals.NavigateURL(redirectTabId > 0 ? redirectTabId : PortalSettings.HomeTabId, string.Empty, "VerificationSuccess=true"), true);
	                    }
	                    else
	                    {
                            if (redirectTabId > 0)
                            {
                                var redirectUrl = Globals.NavigateURL(redirectTabId, string.Empty, "VerificationSuccess=true");
                                redirectUrl = redirectUrl.Replace(Globals.AddHTTP(PortalSettings.PortalAlias.HTTPAlias), string.Empty);
                                Response.Cookies.Add(new HttpCookie("returnurl", redirectUrl) { Path = (!string.IsNullOrEmpty(Globals.ApplicationPath) ? Globals.ApplicationPath : "/") });
                            }

		                    UI.Skins.Skin.AddModuleMessage(this, Localization.GetString("VerificationSuccess", LocalResourceFile), ModuleMessage.ModuleMessageType.GreenSuccess);
	                    }
                    }
                    catch (UserAlreadyVerifiedException)
                    {
                        UI.Skins.Skin.AddModuleMessage(this, Localization.GetString("UserAlreadyVerified", LocalResourceFile), ModuleMessage.ModuleMessageType.YellowWarning);
                    }
                    catch (InvalidVerificationCodeException)
                    {
                        UI.Skins.Skin.AddModuleMessage(this, Localization.GetString("InvalidVerificationCode", LocalResourceFile), ModuleMessage.ModuleMessageType.RedError);
                    }
                    catch (UserDoesNotExistException)
                    {
                        UI.Skins.Skin.AddModuleMessage(this, Localization.GetString("UserDoesNotExist", LocalResourceFile), ModuleMessage.ModuleMessageType.RedError);
                    }
                    catch (Exception)
                    {
                        UI.Skins.Skin.AddModuleMessage(this, Localization.GetString("InvalidVerificationCode", LocalResourceFile), ModuleMessage.ModuleMessageType.RedError);
                    }
                }
            }

			if (!Request.IsAuthenticated)
			{
				if (!Page.IsPostBack)
				{
					try
					{
						if (Request.QueryString["username"] != null)
						{
							txtUsername.Text = Request.QueryString["username"];
						}
					}
					catch (Exception ex)
					{
						//control not there 
						Logger.Error(ex);
					}
				}
				try
				{
					Globals.SetFormFocus(string.IsNullOrEmpty(txtUsername.Text) ? txtUsername : txtPassword);
				}
				catch (Exception ex)
				{
					//Not sure why this Try/Catch may be necessary, logic was there in old setFormFocus location stating the following
					//control not there or error setting focus
					Logger.Error(ex);
				}
			}

			var registrationType = PortalSettings.Registration.RegistrationFormType;
		    bool useEmailAsUserName;
            if (registrationType == 0)
            {
				useEmailAsUserName = PortalSettings.Registration.UseEmailAsUserName;
            }
            else
            {
				var registrationFields = PortalSettings.Registration.RegistrationFields;
                useEmailAsUserName = !registrationFields.Contains("Username");
            }

		    plUsername.Text = LocalizeString(useEmailAsUserName ? "Email" : "Username");
		    divCaptcha1.Visible = UseCaptcha;
			divCaptcha2.Visible = UseCaptcha;
		}]]></body>
          </codeblock>
        </method>
        <method name="OnLoginClick">
          <declaration><![CDATA[private void OnLoginClick(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="259" sc="3" el="311" ec="4">DesktopModules\AuthenticationServices\DNN\Login.ascx.cs</location>
            <body hash="551e6447fe7ff750a6dc0477e23ba833"><![CDATA[{
			if ((UseCaptcha && ctlCaptcha.IsValid) || !UseCaptcha)
			{
				var loginStatus = UserLoginStatus.LOGIN_FAILURE;
				string userName = new PortalSecurity().InputFilter(txtUsername.Text, 
										PortalSecurity.FilterFlag.NoScripting | 
                                        PortalSecurity.FilterFlag.NoAngleBrackets | 
                                        PortalSecurity.FilterFlag.NoMarkup);

                //DNN-6093
                //check if we use email address here rather than username
                if(PortalController.GetPortalSettingAsBoolean("Registration_UseEmailAsUserName", PortalId, false))
                {
                    var testUser = UserController.GetUserByEmail(PortalId, userName); // one additonal call to db to see if an account with that email actually exists
                    if(testUser != null)
                    {
                        userName = testUser.Username; //we need the username of the account in order to authenticate in the next step
                    }
                }

				var objUser = UserController.ValidateUser(PortalId, userName, txtPassword.Text, "DNN", string.Empty, PortalSettings.PortalName, IPAddress, ref loginStatus);
				var authenticated = Null.NullBoolean;
				var message = Null.NullString;
				if (loginStatus == UserLoginStatus.LOGIN_USERNOTAPPROVED)
				{
				    message = "UserNotAuthorized";
				}
				else
				{
					authenticated = (loginStatus != UserLoginStatus.LOGIN_FAILURE);
				}

                if (loginStatus != UserLoginStatus.LOGIN_FAILURE && PortalController.GetPortalSettingAsBoolean("Registration_UseEmailAsUserName", PortalId, false))
                {
                    //make sure internal username matches current e-mail address
                    if (objUser.Username.ToLower() != objUser.Email.ToLower())
                    {
                        UserController.ChangeUsername(objUser.UserID, objUser.Email);
                    }

                    Response.Cookies.Remove("USERNAME_CHANGED");
                }
				
				//Raise UserAuthenticated Event
				var eventArgs = new UserAuthenticatedEventArgs(objUser, userName, loginStatus, "DNN")
				                    {
				                        Authenticated = authenticated, 
                                        Message = message,
                                        RememberMe = chkCookie.Checked
				                    };
				OnUserAuthenticated(eventArgs);
			}
		}]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="cancelLink">
          <declaration><![CDATA[protected HyperLink cancelLink;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkCookie">
          <declaration><![CDATA[protected CheckBox chkCookie;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdLogin">
          <declaration><![CDATA[protected LinkButton cmdLogin;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ctlCaptcha">
          <declaration><![CDATA[protected CaptchaControl ctlCaptcha;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="divCaptcha1">
          <declaration><![CDATA[protected HtmlGenericControl divCaptcha1;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="divCaptcha2">
          <declaration><![CDATA[protected HtmlGenericControl divCaptcha2;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblLogin">
          <declaration><![CDATA[protected Label lblLogin;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblLoginRememberMe">
          <declaration><![CDATA[protected Label lblLoginRememberMe;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="liPassword">
          <declaration><![CDATA[protected HtmlGenericControl liPassword;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="liRegister">
          <declaration><![CDATA[protected HtmlGenericControl liRegister;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Logger">
          <declaration><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof(Login));]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="passwordLink">
          <declaration><![CDATA[protected HyperLink passwordLink;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plCaptcha">
          <declaration><![CDATA[protected Label plCaptcha;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plPassword">
          <declaration><![CDATA[protected Label plPassword;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plUsername">
          <declaration><![CDATA[protected Label plUsername;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="registerLink">
          <declaration><![CDATA[protected HyperLink registerLink;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtPassword">
          <declaration><![CDATA[protected TextBox txtPassword;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtUsername">
          <declaration><![CDATA[protected TextBox txtUsername;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="Enabled">
          <declaration><![CDATA[public override bool Enabled]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="80" sc="4" el="82" ec="5">DesktopModules\AuthenticationServices\DNN\Login.ascx.cs</location>
            <body hash="5c38a43ecd4375bceccd55484e5b7900"><![CDATA[{
				return AuthenticationConfig.GetConfig(PortalId).Enabled;
			}]]></body>
          </codeblock>
        </property>
        <property name="UseCaptcha">
          <declaration><![CDATA[protected bool UseCaptcha]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="64" sc="4" el="66" ec="5">DesktopModules\AuthenticationServices\DNN\Login.ascx.cs</location>
            <body hash="3826644a5b3139cb17d9b45864ce58d9"><![CDATA[{
				return AuthenticationConfig.GetConfig(PortalId).UseCaptcha;
			}]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="DotNetNuke.Modules.Admin.EditExtension">
    <class name="AuthenticationEditor">
      <declaration><![CDATA[public class AuthenticationEditor : PackageEditorBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public AuthenticationEditor()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="BindAuthentication">
          <declaration><![CDATA[private void BindAuthentication()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="94" sc="9" el="125" ec="10">DesktopModules\Admin\EditExtension\AuthenticationEditor.ascx.cs</location>
            <body hash="b5b3f11d3de7111b44a97ab3dfa0a1f4"><![CDATA[{
            if (AuthSystem != null)
            {
                if (AuthSystem.AuthenticationType == "DNN")
                {
                    authenticationFormReadOnly.DataSource = AuthSystem;
                    authenticationFormReadOnly.DataBind();
                }
                else
                {
                    authenticationForm.DataSource = AuthSystem;
                    authenticationForm.DataBind();
                }
                authenticationFormReadOnly.Visible = IsSuperTab && (AuthSystem.AuthenticationType == "DNN");
                authenticationForm.Visible = IsSuperTab && AuthSystem.AuthenticationType != "DNN";


                if (SettingsControl != null)
                {
					//set the control ID to the resource file name ( ie. controlname.ascx = controlname )
                    //this is necessary for the Localization in PageBase
                    SettingsControl.ID = Path.GetFileNameWithoutExtension(AuthSystem.SettingsControlSrc);

                    //Add Container to Controls
                    pnlSettings.Controls.AddAt(0, SettingsControl);
                }
                else
                {
                    cmdUpdate.Visible = false;
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="cmdUpdate_Click">
          <declaration><![CDATA[protected void cmdUpdate_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="180" sc="9" el="186" ec="10">DesktopModules\Admin\EditExtension\AuthenticationEditor.ascx.cs</location>
            <body hash="5c53d0f3a514144dfc15049adf6c0812"><![CDATA[{
            SettingsControl?.UpdateSettings();

            var displayMode = DisplayMode;
            if (displayMode != "editor" && displayMode != "settings")
                Response.Redirect(Globals.NavigateURL(), true);
        }]]></body>
          </codeblock>
        </method>
        <method name="Initialize">
          <declaration><![CDATA[public override void Initialize()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="132" sc="9" el="150" ec="10">DesktopModules\Admin\EditExtension\AuthenticationEditor.ascx.cs</location>
            <body hash="9c35287a17a75bcaabd61dfeb2e30b8b"><![CDATA[{
            pnlSettings.Visible = !IsSuperTab;
            if (IsSuperTab)
            {
                lblHelp.Text = Localization.GetString("HostHelp", LocalResourceFile);
            }
            else
            {
                if (SettingsControl == null)
                {
                    lblHelp.Text = Localization.GetString("NoSettings", LocalResourceFile);
                }
                else
                {
                    lblHelp.Text = Localization.GetString("AdminHelp", LocalResourceFile);
                }
            }
            BindAuthentication();
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="169" sc="9" el="177" ec="10">DesktopModules\Admin\EditExtension\AuthenticationEditor.ascx.cs</location>
            <body hash="595642f1d5c6add3fffb0f22241a6354"><![CDATA[{
            base.OnLoad(e);
            cmdUpdate.Click += cmdUpdate_Click;
            var displayMode = DisplayMode;
            if (displayMode == "editor" || displayMode == "settings")
            {
                AuthEditorHead.Visible = AuthEditorHead.EnableViewState = false;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdatePackage">
          <declaration><![CDATA[public override void UpdatePackage()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="153" sc="9" el="162" ec="10">DesktopModules\Admin\EditExtension\AuthenticationEditor.ascx.cs</location>
            <body hash="babf4f8b96831d0f7f8647ebf35e9dac"><![CDATA[{
            if (authenticationForm.IsValid)
            {
                var authInfo = authenticationForm.DataSource as AuthenticationInfo;
                if (authInfo != null)
                {
                    AuthenticationController.UpdateAuthentication(authInfo);
                }
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_AuthSystem">
          <declaration><![CDATA[private AuthenticationInfo _AuthSystem;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_SettingsControl">
          <declaration><![CDATA[private AuthenticationSettingsBase _SettingsControl;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="AuthEditorHead">
          <declaration><![CDATA[protected HtmlGenericControl AuthEditorHead;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="authenticationForm">
          <declaration><![CDATA[protected DnnFormEditor authenticationForm;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="authenticationFormReadOnly">
          <declaration><![CDATA[protected DnnFormEditor authenticationFormReadOnly;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="authenticationType">
          <declaration><![CDATA[protected DnnFormTextBoxItem authenticationType;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdUpdate">
          <declaration><![CDATA[protected LinkButton cmdUpdate;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="DnnFormTextBoxItem1">
          <declaration><![CDATA[protected DnnFormLiteralItem DnnFormTextBoxItem1;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="DnnFormTextBoxItem2">
          <declaration><![CDATA[protected DnnFormLiteralItem DnnFormTextBoxItem2;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="DnnFormTextBoxItem3">
          <declaration><![CDATA[protected DnnFormLiteralItem DnnFormTextBoxItem3;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="DnnFormTextBoxItem4">
          <declaration><![CDATA[protected DnnFormLiteralItem DnnFormTextBoxItem4;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="DnnFormToggleButtonItem1">
          <declaration><![CDATA[protected DnnFormLiteralItem DnnFormToggleButtonItem1;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="isEnabled">
          <declaration><![CDATA[protected DnnFormToggleButtonItem isEnabled;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblHelp">
          <declaration><![CDATA[protected Label lblHelp;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="loginControlSrc">
          <declaration><![CDATA[protected DnnFormTextBoxItem loginControlSrc;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="logoffControlSrc">
          <declaration><![CDATA[protected DnnFormTextBoxItem logoffControlSrc;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="pnlSettings">
          <declaration><![CDATA[protected Panel pnlSettings;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="settingsControlSrc">
          <declaration><![CDATA[protected DnnFormTextBoxItem settingsControlSrc;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="AuthSystem">
          <declaration><![CDATA[protected AuthenticationInfo AuthSystem]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="55" sc="13" el="61" ec="14">DesktopModules\Admin\EditExtension\AuthenticationEditor.ascx.cs</location>
            <body hash="a151f38e0bc1b76d358f69d0b15cee05"><![CDATA[{
                if (_AuthSystem == null)
                {
                    _AuthSystem = AuthenticationController.GetAuthenticationServiceByPackageID(PackageID);
                }
                return _AuthSystem;
            }]]></body>
          </codeblock>
        </property>
        <property name="EditorID">
          <declaration><![CDATA[protected override string EditorID]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="67" sc="13" el="69" ec="14">DesktopModules\Admin\EditExtension\AuthenticationEditor.ascx.cs</location>
            <body hash="f64cd8f77500ce57c3d99145200d8366"><![CDATA[{
                return "AuthenticationEditor";
            }]]></body>
          </codeblock>
        </property>
        <property name="SettingsControl">
          <declaration><![CDATA[protected AuthenticationSettingsBase SettingsControl]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="75" sc="13" el="81" ec="14">DesktopModules\Admin\EditExtension\AuthenticationEditor.ascx.cs</location>
            <body hash="1c7d4108d69d3fece2cb1312ebcc5977"><![CDATA[{
                if (_SettingsControl == null && !string.IsNullOrEmpty(AuthSystem.SettingsControlSrc))
                {
                    _SettingsControl = (AuthenticationSettingsBase) LoadControl("~/" + AuthSystem.SettingsControlSrc);
                }
                return _SettingsControl;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="EditExtension">
      <declaration><![CDATA[public class EditExtension : ModuleUserControlBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public EditExtension()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="BindData">
          <declaration><![CDATA[private void BindData()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="137" sc="9" el="221" ec="10">DesktopModules\Admin\EditExtension\EditExtension.ascx.cs</location>
            <body hash="b120645a005a208d70318fffb4b33147"><![CDATA[{
            email.ValidationExpression = Globals.glbEmailRegEx;
            trLanguagePackType.Visible = false;
            switch (Mode)
            {
                case "All":
                    lblHelp.Text = Localization.GetString("EditHelp", LocalResourceFile);
                    cmdUpdate.Text = Localization.GetString("cmdUpdate", LocalResourceFile);
                    break;
                case "LanguagePack":
                    lblHelp.Text = Localization.GetString("EditLanguageHelp", LocalResourceFile);
                    cmdUpdate.Text = Localization.GetString("cmdUpdateLanguage", LocalResourceFile);
                    break;
                case "Module":
                    lblHelp.Text = Localization.GetString("EditModuleHelp", LocalResourceFile);
                    cmdUpdate.Text = Localization.GetString("cmdUpdateModule", LocalResourceFile);
                    break;
                case "Skin":
                    lblHelp.Text = Localization.GetString("EditSkinHelp", LocalResourceFile);
                    cmdUpdate.Text = Localization.GetString("cmdUpdateSkin", LocalResourceFile);
                    break;
            }

            cmdPackage.Visible = IsSuperTab;
            cmdUpdate.Visible = IsSuperTab;
            if (Package != null)
            {
                
                if (PackageEditor == null || PackageID == Null.NullInteger)
                {
                    extensionSection.Visible = false;
                }
                else
                {
                    phEditor.Controls.Clear();
                    phEditor.Controls.Add(PackageEditor as Control);
                    var moduleControl = PackageEditor as IModuleControl;
                    if (moduleControl != null)
                    {
                        moduleControl.ModuleContext.Configuration = ModuleContext.Configuration;
                    }
                    PackageEditor.PackageID = PackageID;
                    PackageEditor.Initialize();

                    Package.IconFile = Util.ParsePackageIconFileName(Package);
                }
                
                switch (Package.PackageType)
                {                                        
                    case "Auth_System":
                    case "Container":
                    case "Module":
                    case "Skin":
                        iconFile.Enabled = true;
                        Package.IconFile = Util.ParsePackageIconFileName(Package);
                        break;
                    default:
                        iconFile.Enabled = false;
                        Package.IconFile = "Not Available";
                        break;
                }
                
                if (Mode != "All")
                {
                    packageType.Visible = false;
                }
                //Determine if Package is ready for packaging
                PackageWriterBase writer = PackageWriterFactory.GetWriter(Package);
                cmdPackage.Visible = IsSuperTab && writer != null && Directory.Exists(Path.Combine(Globals.ApplicationMapPath, writer.BasePath));

                cmdDelete.Visible = IsSuperTab && (!Package.IsSystemPackage) && (PackageController.CanDeletePackage(Package, ModuleContext.PortalSettings));
                ctlAudit.Entity = Package;

                packageForm.DataSource = Package;
                packageFormReadOnly.DataSource = Package;
                if(!Page.IsPostBack)
                {
                    packageForm.DataBind();
                    packageFormReadOnly.DataBind();
                }
                packageForm.Visible = IsSuperTab;
                packageFormReadOnly.Visible = !IsSuperTab;

            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnCancelClick">
          <declaration><![CDATA[protected void OnCancelClick(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="300" sc="9" el="302" ec="10">DesktopModules\Admin\EditExtension\EditExtension.ascx.cs</location>
            <body hash="31face256e9e17dc6ce2e47fd2ab9985"><![CDATA[{
            Response.Redirect(ReturnUrl);
        }]]></body>
          </codeblock>
        </method>
        <method name="OnDeleteClick">
          <declaration><![CDATA[protected void OnDeleteClick(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="305" sc="9" el="307" ec="10">DesktopModules\Admin\EditExtension\EditExtension.ascx.cs</location>
            <body hash="fc3e50768817c637e390bba831b4c0dc"><![CDATA[{
            Response.Redirect(Util.UnInstallURL(ModuleContext.TabId, PackageID));
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="246" sc="9" el="249" ec="10">DesktopModules\Admin\EditExtension\EditExtension.ascx.cs</location>
            <body hash="8af52e5e60d8a8767ab5ab01869387c6"><![CDATA[{
            base.OnInit(e);
			JavaScript.RequestRegistration(CommonJs.DnnPlugins);
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="258" sc="9" el="297" ec="10">DesktopModules\Admin\EditExtension\EditExtension.ascx.cs</location>
            <body hash="748bc5357db1e196737da8142a9c73fa"><![CDATA[{
            base.OnLoad(e);

            cmdCancel.Click += OnCancelClick;
            cmdDelete.Click += OnDeleteClick;
            cmdPackage.Click += OnPackageClick;
            cmdUpdate.Click += OnUpdateClick;
            Page.PreRenderComplete += (sender, args) =>
                                          {
                                              if (UrlUtils.InPopUp())
                                              {
                                                  var title = string.Format("{0} > {1}", Page.Title, Package.FriendlyName);
                                                  Page.Title = title;
                                              }
                                          };

            BindData();

            if (!IsPostBack)
            {
                ReturnUrl = Request.UrlReferrer != null ? Request.UrlReferrer.ToString() : Globals.NavigateURL();
                switch (DisplayMode)
                {
                    case "editor":
                        packageSettingsSection.Visible = false;
                        break;
                    case "settings":
                        extensionSection.Visible = false;
                        break;
                }
            }

            switch (DisplayMode)
            {
                case "editor":
                case "settings":
                    cmdCancel.Visible = cmdCancel.Enabled = false;
                    break;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnPackageClick">
          <declaration><![CDATA[protected void OnPackageClick(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="310" sc="9" el="320" ec="10">DesktopModules\Admin\EditExtension\EditExtension.ascx.cs</location>
            <body hash="e266c99266b2a69a94b6376962a149cd"><![CDATA[{
            try
            {
                UpdatePackage(false);
                Response.Redirect(Util.PackageWriterURL(ModuleContext, PackageID));
            }
            catch (Exception ex)
            {
                Exceptions.ProcessModuleLoadException(this, ex);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnUpdateClick">
          <declaration><![CDATA[protected void OnUpdateClick(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="323" sc="9" el="332" ec="10">DesktopModules\Admin\EditExtension\EditExtension.ascx.cs</location>
            <body hash="fd5864ec825ec996b31fe86a3ef4beff"><![CDATA[{
            try
            {
                UpdatePackage(true);
            }
            catch (Exception ex)
            {
                Exceptions.ProcessModuleLoadException(this, ex);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdatePackage">
          <declaration><![CDATA[private void UpdatePackage(bool displayMessage)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="224" sc="9" el="243" ec="10">DesktopModules\Admin\EditExtension\EditExtension.ascx.cs</location>
            <body hash="f0698d4d81a147644b16e0835209f4e4"><![CDATA[{
            if (packageForm.IsValid)
            {
                var package = packageForm.DataSource as PackageInfo;
                if (package != null)
                {
                    var pkgIconFile = Util.ParsePackageIconFileName(package);
                    package.IconFile = (pkgIconFile.Trim().Length > 0)? Util.ParsePackageIconFile(package) : null;
                    PackageController.Instance.SaveExtensionPackage(package);
                }
                if (displayMessage)
                {
                    UI.Skins.Skin.AddModuleMessage(this, Localization.GetString("PackageUpdated", LocalResourceFile), ModuleMessage.ModuleMessageType.GreenSuccess);
                }
            }
            if (PackageEditor != null)
            {
                PackageEditor.UpdatePackage();
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_control">
          <declaration><![CDATA[private Control _control;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_package">
          <declaration><![CDATA[private PackageInfo _package;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdCancel">
          <declaration><![CDATA[protected LinkButton cmdCancel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdDelete">
          <declaration><![CDATA[protected LinkButton cmdDelete;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdPackage">
          <declaration><![CDATA[protected LinkButton cmdPackage;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdUpdate">
          <declaration><![CDATA[protected LinkButton cmdUpdate;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ctlAudit">
          <declaration><![CDATA[protected ModuleAuditControl ctlAudit;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="description">
          <declaration><![CDATA[protected DnnFormTextBoxItem description;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="DnnFormEditControlItem1">
          <declaration><![CDATA[protected DnnFormLiteralItem DnnFormEditControlItem1;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="DnnFormLiteralItem1">
          <declaration><![CDATA[protected DnnFormLiteralItem DnnFormLiteralItem1;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="DnnFormLiteralItem2">
          <declaration><![CDATA[protected DnnFormLiteralItem DnnFormLiteralItem2;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="DnnFormTextBoxItem1">
          <declaration><![CDATA[protected DnnFormLiteralItem DnnFormTextBoxItem1;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="DnnFormTextBoxItem2">
          <declaration><![CDATA[protected DnnFormLiteralItem DnnFormTextBoxItem2;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="DnnFormTextBoxItem3">
          <declaration><![CDATA[protected DnnFormLiteralItem DnnFormTextBoxItem3;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="DnnFormTextBoxItem4">
          <declaration><![CDATA[protected DnnFormLiteralItem DnnFormTextBoxItem4;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="DnnFormTextBoxItem5">
          <declaration><![CDATA[protected DnnFormLiteralItem DnnFormTextBoxItem5;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="DnnFormTextBoxItem6">
          <declaration><![CDATA[protected DnnFormLiteralItem DnnFormTextBoxItem6;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="DnnFormTextBoxItem7">
          <declaration><![CDATA[protected DnnFormLiteralItem DnnFormTextBoxItem7;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="DnnFormTextBoxItem8">
          <declaration><![CDATA[protected DnnFormLiteralItem DnnFormTextBoxItem8;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="DnnFormTextBoxItem9">
          <declaration><![CDATA[protected DnnFormLiteralItem DnnFormTextBoxItem9;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="email">
          <declaration><![CDATA[protected DnnFormTextBoxItem email;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="extensionSection">
          <declaration><![CDATA[protected HtmlGenericControl extensionSection;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="iconFile">
          <declaration><![CDATA[protected DnnFormTextBoxItem iconFile;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblHelp">
          <declaration><![CDATA[protected Label lblHelp;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="license">
          <declaration><![CDATA[protected DnnFormTextBoxItem license;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="moduleName">
          <declaration><![CDATA[protected DnnFormLiteralItem moduleName;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="organization">
          <declaration><![CDATA[protected DnnFormTextBoxItem organization;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="owner">
          <declaration><![CDATA[protected DnnFormTextBoxItem owner;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="packageForm">
          <declaration><![CDATA[protected DnnFormEditor packageForm;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="packageFormReadOnly">
          <declaration><![CDATA[protected DnnFormEditor packageFormReadOnly;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="packageFriendlyName">
          <declaration><![CDATA[protected DnnFormTextBoxItem packageFriendlyName;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="packageSettingsSection">
          <declaration><![CDATA[protected HtmlGenericControl packageSettingsSection;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="packageType">
          <declaration><![CDATA[protected DnnFormLiteralItem packageType;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="phEditor">
          <declaration><![CDATA[protected PlaceHolder phEditor;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plPackageType">
          <declaration><![CDATA[protected LabelControl plPackageType;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="rbPackageType">
          <declaration><![CDATA[protected RadioButtonList rbPackageType;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="releaseNotes">
          <declaration><![CDATA[protected DnnFormTextBoxItem releaseNotes;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="trLanguagePackType">
          <declaration><![CDATA[protected HtmlGenericControl trLanguagePackType;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="url">
          <declaration><![CDATA[protected DnnFormTextBoxItem url;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="valPackageType">
          <declaration><![CDATA[protected RequiredFieldValidator valPackageType;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="version">
          <declaration><![CDATA[protected DnnFormEditControlItem version;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="DisplayMode">
          <declaration><![CDATA[protected string DisplayMode]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="81" sc="41" el="81" ec="98">DesktopModules\Admin\EditExtension\EditExtension.ascx.cs</location>
            <body hash="098ae73f942d8bd4070d52c4a201e776"><![CDATA[(Request.QueryString["Display"] ?? "").ToLowerInvariant(]]></body>
          </codeblock>
        </property>
        <property name="IsSuperTab">
          <declaration><![CDATA[protected bool IsSuperTab]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="62" sc="13" el="64" ec="14">DesktopModules\Admin\EditExtension\EditExtension.ascx.cs</location>
            <body hash="b298f648aad827575060e3a4d3fb3f81"><![CDATA[{
                return (ModuleContext.PortalSettings.ActiveTab.IsSuperTab);
            }]]></body>
          </codeblock>
        </property>
        <property name="Mode">
          <declaration><![CDATA[public string Mode]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="76" sc="13" el="78" ec="14">DesktopModules\Admin\EditExtension\EditExtension.ascx.cs</location>
            <body hash="b906ecef61d6bd1388ef25359fa112cc"><![CDATA[{
                return Convert.ToString(ModuleContext.Settings["Extensions_Mode"]);
            }]]></body>
          </codeblock>
        </property>
        <property name="Package">
          <declaration><![CDATA[protected PackageInfo Package]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="86" sc="13" el="88" ec="14">DesktopModules\Admin\EditExtension\EditExtension.ascx.cs</location>
            <body hash="ae2a4d789de8bf5fd5f77763d5b959e1"><![CDATA[{
                return _package ?? (_package = PackageID == Null.NullInteger ? new PackageInfo() : PackageController.Instance.GetExtensionPackage(Null.NullInteger, p => p.PackageID == PackageID, true));
            }]]></body>
          </codeblock>
        </property>
        <property name="PackageEditor">
          <declaration><![CDATA[protected IPackageEditor PackageEditor]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="94" sc="13" el="107" ec="14">DesktopModules\Admin\EditExtension\EditExtension.ascx.cs</location>
            <body hash="54139a35f15966f26aaf54b9681c910f"><![CDATA[{
                if (_control == null)
                {
                    if (Package != null)
                    {
                        var pkgType = PackageController.Instance.GetExtensionPackageType(t => t.PackageType == Package.PackageType);
                        if ((pkgType != null) && (!string.IsNullOrEmpty(pkgType.EditorControlSrc)))
                        {
                            _control = ControlUtilities.LoadControl<Control>(this, pkgType.EditorControlSrc);
                        }
                    }
                }
                return _control as IPackageEditor;
            }]]></body>
          </codeblock>
        </property>
        <property name="PackageID">
          <declaration><![CDATA[public int PackageID]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="113" sc="13" el="120" ec="14">DesktopModules\Admin\EditExtension\EditExtension.ascx.cs</location>
            <body hash="a252ce6e7d01e898a1b350f23eab0003"><![CDATA[{
                var packageID = Null.NullInteger;
                if ((Request.QueryString["PackageID"] != null))
                {
                    packageID = Int32.Parse(Request.QueryString["PackageID"]);
                }
                return packageID;
            }]]></body>
          </codeblock>
        </property>
        <property name="ReturnUrl">
          <declaration><![CDATA[protected string ReturnUrl]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ViewMode">
          <declaration><![CDATA[protected PropertyEditorMode ViewMode]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="126" sc="13" el="133" ec="14">DesktopModules\Admin\EditExtension\EditExtension.ascx.cs</location>
            <body hash="f6a256f230d81f42d6ff2f3583592e59"><![CDATA[{
                var viewMode = PropertyEditorMode.View;
                if (Request.IsLocal && IsSuperTab)
                {
                    viewMode = PropertyEditorMode.Edit;
                }
                return viewMode;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="DotNetNuke.Modules.Admin.Modules">
    <class name="Export">
      <declaration><![CDATA[public class Export : PortalModuleBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private new int ModuleId = -1;]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="60" sc="9" el="60" ec="39">admin\Modules\Export.ascx.cs</location>
            <body hash="371ad81b25f464a0f6e408d08352de9a"><![CDATA[private new int ModuleId = -1]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="CleanName">
          <declaration><![CDATA[private static string CleanName(string name)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="160" sc="9" el="170" ec="10">admin\Modules\Export.ascx.cs</location>
            <body hash="d069da5f47f47ecbe593af9e38de6956"><![CDATA[{
            var strName = name;
            const string strBadChars = ". ~`!@#$%^&*()-_+={[}]|\\:;<,>?/\"'";

            int intCounter;
            for (intCounter = 0; intCounter <= strBadChars.Length - 1; intCounter++)
            {
                strName = strName.Replace(strBadChars.Substring(intCounter, 1), "");
            }
            return strName;
        }]]></body>
          </codeblock>
        </method>
        <method name="ExportModule">
          <declaration><![CDATA[private string ExportModule(int moduleID, string fileName, IFolderInfo folder)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="84" sc="9" el="157" ec="10">admin\Modules\Export.ascx.cs</location>
            <body hash="5ce924c6f07cffea5907b9be7f719001"><![CDATA[{
            var strMessage = "";
            if (Module != null)
            {
                if (!String.IsNullOrEmpty(Module.DesktopModule.BusinessControllerClass) && Module.DesktopModule.IsPortable)
                {
                    try
                    {
                        var objObject = Reflection.CreateObject(Module.DesktopModule.BusinessControllerClass, Module.DesktopModule.BusinessControllerClass);
                        
						//Double-check
						if (objObject is IPortable)
                        {
                            XmlDocument moduleXml = new XmlDocument();
                            XmlNode moduleNode = ModuleController.SerializeModule(moduleXml, Module, true);

                            //add attributes to XML document
                            XmlAttribute typeAttribute = moduleXml.CreateAttribute("type");
                            typeAttribute.Value = CleanName(Module.DesktopModule.ModuleName);
                            moduleNode.Attributes.Append(typeAttribute);

                            XmlAttribute versionAttribute = moduleXml.CreateAttribute("version");
                            versionAttribute.Value = Module.DesktopModule.Version;
                            moduleNode.Attributes.Append(versionAttribute);

                            // Create content from XmlNode
                            StringWriter sw = new StringWriter();
                            XmlTextWriter xw = new XmlTextWriter(sw);
                            moduleNode.WriteTo(xw);
                            var content = sw.ToString();
                            if (!String.IsNullOrEmpty(content))
                            {
								//remove invalid chars in content -> DNN 26810: Handled by ModuleController.SerializeModule
	                            //content = Regex.Replace(content, _invalidCharsRegex, string.Empty);
								//add attributes to XML document
                                //content = "<?xml version=\"1.0\" encoding=\"utf-8\" ?>" + "<content type=\"" + CleanName(Module.DesktopModule.ModuleName) + "\" version=\"" +
                                //          Module.DesktopModule.Version + "\">" + content + "</content>";

                                //First check the Portal limits will not be exceeded (this is approximate)
                                if (PortalController.Instance.HasSpaceAvailable(PortalId, content.Length))
                                {
                                    //add file to Files table
									using (var fileContent = new MemoryStream(Encoding.UTF8.GetBytes(content)))
									{
                                        Services.FileSystem.FileManager.Instance.AddFile(folder, fileName, fileContent, true, true, "application/octet-stream");
									}
                                }
                                else
                                {
                                    strMessage += "<br>" + string.Format(Localization.GetString("DiskSpaceExceeded"), fileName);
                                }
                            }
                            else
                            {
                                strMessage = Localization.GetString("NoContent", LocalResourceFile);
                            }
                        }
                        else
                        {
                            strMessage = Localization.GetString("ExportNotSupported", LocalResourceFile);
                        }
                    }
                    catch
                    {
                        strMessage = Localization.GetString("Error", LocalResourceFile);
                    }
                }
                else
                {
                    strMessage = Localization.GetString("ExportNotSupported", LocalResourceFile);
                }
            }
            return strMessage;
        }]]></body>
          </codeblock>
        </method>
        <method name="OnExportClick">
          <declaration><![CDATA[protected void OnExportClick(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="221" sc="9" el="251" ec="10">admin\Modules\Export.ascx.cs</location>
            <body hash="78287106e2b908d9c926f311495f50dd"><![CDATA[{
            try
            {
                if (cboFolders.SelectedItem != null && !String.IsNullOrEmpty(txtFile.Text))
                {
                    var folder = FolderManager.Instance.GetFolder(cboFolders.SelectedItemValueAsInt);
                    if (folder != null)
                    {
                        var strFile = "content." + CleanName(Module.DesktopModule.ModuleName) + "." + CleanName(txtFile.Text) + ".xml";
                        var strMessage = ExportModule(ModuleId, strFile, folder);
                        if (String.IsNullOrEmpty(strMessage))
                        {
                            Response.Redirect(ReturnURL, true);
                        }
                        else
                        {
                            UI.Skins.Skin.AddModuleMessage(this, strMessage, ModuleMessage.ModuleMessageType.RedError);
                        }
                        }
                    
                }
                else
                {
                    UI.Skins.Skin.AddModuleMessage(this, Localization.GetString("Validation", LocalResourceFile), ModuleMessage.ModuleMessageType.RedError);
                }
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="177" sc="9" el="188" ec="10">admin\Modules\Export.ascx.cs</location>
            <body hash="24b3d5f1d96137dfb3e1e12234709daa"><![CDATA[{
            base.OnInit(e);

            if (Request.QueryString["moduleid"] != null)
            {
                Int32.TryParse(Request.QueryString["moduleid"], out ModuleId);
            }
            if (!ModulePermissionController.HasModuleAccess(SecurityAccessLevel.Edit, "EXPORT", Module))
            {
                Response.Redirect(Globals.AccessDeniedURL(), true);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="191" sc="9" el="218" ec="10">admin\Modules\Export.ascx.cs</location>
            <body hash="086ed05c11c73ebd257ff11e86b89fc7"><![CDATA[{
            base.OnLoad(e);

            cmdExport.Click += OnExportClick;

            try
            {
                if (Request.QueryString["moduleid"] != null)
                {
                    Int32.TryParse(Request.QueryString["moduleid"], out ModuleId);
                }
                if (!Page.IsPostBack)
                {
                    cmdCancel.NavigateUrl = ReturnURL;

                    cboFolders.UndefinedItem = new ListItem("<" + Localization.GetString("None_Specified") + ">", string.Empty);
                    cboFolders.Services.Parameters.Add("permission", "ADD");
                    if (Module != null)
                    {
                        txtFile.Text = CleanName(Module.ModuleTitle);
                    }
                }
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_module">
          <declaration><![CDATA[private ModuleInfo _module;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cboFolders">
          <declaration><![CDATA[protected DnnFolderDropDownList cboFolders;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdCancel">
          <declaration><![CDATA[protected HyperLink cmdCancel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdExport">
          <declaration><![CDATA[protected LinkButton cmdExport;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ModuleId">
          <declaration><![CDATA[private new int ModuleId = -1;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plFile">
          <declaration><![CDATA[protected LabelControl plFile;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plFolder">
          <declaration><![CDATA[protected LabelControl plFolder;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtFile">
          <declaration><![CDATA[protected TextBox txtFile;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="Module">
          <declaration><![CDATA[private ModuleInfo Module]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="66" sc="13" el="68" ec="14">admin\Modules\Export.ascx.cs</location>
            <body hash="99c0dddcf239f2d554d4042b5a9d2ba8"><![CDATA[{
                return _module ?? (_module = ModuleController.Instance.GetModule(ModuleId, TabId, false));
            }]]></body>
          </codeblock>
        </property>
        <property name="ReturnURL">
          <declaration><![CDATA[private string ReturnURL]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="74" sc="13" el="76" ec="14">admin\Modules\Export.ascx.cs</location>
            <body hash="886024cc288178771d5df7a287e8cdef"><![CDATA[{
                return UrlUtils.ValidReturnUrl(Request.Params["ReturnURL"]) ?? Globals.NavigateURL();
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="Import">
      <declaration><![CDATA[public class Import : PortalModuleBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private new int ModuleId = -1;]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="54" sc="9" el="54" ec="39">admin\Modules\Import.ascx.cs</location>
            <body hash="371ad81b25f464a0f6e408d08352de9a"><![CDATA[private new int ModuleId = -1]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="ImportModule">
          <declaration><![CDATA[private string ImportModule()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="78" sc="9" el="139" ec="10">admin\Modules\Import.ascx.cs</location>
            <body hash="54707f9e94f150cc010f3a94ede825aa"><![CDATA[{
            var strMessage = "";
            if (Module != null)
            {
                if (!String.IsNullOrEmpty(Module.DesktopModule.BusinessControllerClass) && Module.DesktopModule.IsPortable)
                {
                    try
                    {
                        var objObject = Reflection.CreateObject(Module.DesktopModule.BusinessControllerClass, Module.DesktopModule.BusinessControllerClass);
                        if (objObject is IPortable)
                        {
                            var xmlDoc = new XmlDocument();
                            try
                            {
                                var content = XmlUtils.RemoveInvalidXmlCharacters(txtContent.Text);
                                xmlDoc.LoadXml(content);
                            }
                            catch
                            {
                                strMessage = Localization.GetString("NotValidXml", LocalResourceFile);
                            }
                            if (String.IsNullOrEmpty(strMessage))
                            {
                                var strType = xmlDoc.DocumentElement.GetAttribute("type");
                                if (strType == Globals.CleanName(Module.DesktopModule.ModuleName) || strType == Globals.CleanName(Module.DesktopModule.FriendlyName))
                                {
                                    var strVersion = xmlDoc.DocumentElement.GetAttribute("version");
                                    // DNN26810 if rootnode = "content", import only content(the old way)
                                    if (xmlDoc.DocumentElement.Name.ToLower() == "content" )
                                    {
                                        ((IPortable)objObject).ImportModule(ModuleId, xmlDoc.DocumentElement.InnerXml, strVersion, UserInfo.UserID);
                                    }
                                    // otherwise (="module") import the new way
                                    else
                                    {
                                        ModuleController.DeserializeModule(xmlDoc.DocumentElement, Module, PortalId, TabId);
                                    }
                                    Response.Redirect(Globals.NavigateURL(), true);
                                }
                                else
                                {
                                    strMessage = Localization.GetString("NotCorrectType", LocalResourceFile);
                                }
                            }
                        }
                        else
                        {
                            strMessage = Localization.GetString("ImportNotSupported", LocalResourceFile);
                        }
                    }
                    catch
                    {
                        strMessage = Localization.GetString("Error", LocalResourceFile);
                    }
                }
                else
                {
                    strMessage = Localization.GetString("ImportNotSupported", LocalResourceFile);
                }
            }
            return strMessage;
        }]]></body>
          </codeblock>
        </method>
        <method name="OnFilesIndexChanged">
          <declaration><![CDATA[protected void OnFilesIndexChanged(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="222" sc="9" el="245" ec="10">admin\Modules\Import.ascx.cs</location>
            <body hash="7c7f60dbb90b0549a24406b2017bb313"><![CDATA[{
            if (cboFolders.SelectedItem == null) return;
            var folder = FolderManager.Instance.GetFolder(cboFolders.SelectedItemValueAsInt);
            if (folder == null) return;

	        if (string.IsNullOrEmpty(cboFiles.SelectedValue) || cboFiles.SelectedValue == "-")
	        {
				txtContent.Text = string.Empty;
		        return;
	        }
	        try
	        {
				var fileId = Convert.ToInt32(cboFiles.SelectedValue);
		        var file = DotNetNuke.Services.FileSystem.FileManager.Instance.GetFile(fileId);
				using (var streamReader = new StreamReader(DotNetNuke.Services.FileSystem.FileManager.Instance.GetFileContent(file)))
				{
					txtContent.Text = streamReader.ReadToEnd();
				}
	        }
	        catch (Exception)
	        {
		        txtContent.Text = string.Empty;
	        }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnFoldersIndexChanged">
          <declaration><![CDATA[protected void OnFoldersIndexChanged(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="185" sc="9" el="219" ec="10">admin\Modules\Import.ascx.cs</location>
            <body hash="5a8b7650c6b6ffed00fd3841c21918e0"><![CDATA[{
            cboFiles.Items.Clear();
            cboFiles.InsertItem(0, "<" + Localization.GetString("None_Specified") + ">", "-");
            if (cboFolders.SelectedItem == null)
            {
                return;
            }
            if (Module == null)
            {
                return;
            }

            var folder = FolderManager.Instance.GetFolder(cboFolders.SelectedItemValueAsInt);
            if (folder == null) return;

            var files = Globals.GetFileList(PortalId, "xml", false, folder.FolderPath);
            foreach (FileItem file in files)
            {
				if (file.Text.IndexOf("content." + Globals.CleanName(Module.DesktopModule.ModuleName) + ".", System.StringComparison.Ordinal) != -1)
                {
					cboFiles.AddItem(file.Text.Replace("content." + Globals.CleanName(Module.DesktopModule.ModuleName) + ".", ""), file.Value);
                }

                //legacy support for files which used the FriendlyName
                if (Globals.CleanName(Module.DesktopModule.ModuleName) == Globals.CleanName(Module.DesktopModule.FriendlyName))
                {
                    continue;
                }

				if (file.Text.IndexOf("content." + Globals.CleanName(Module.DesktopModule.FriendlyName) + ".", System.StringComparison.Ordinal) != -1)
                {
					cboFiles.AddItem(file.Text.Replace("content." + Globals.CleanName(Module.DesktopModule.FriendlyName) + ".", ""), file.Value);
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnImportClick">
          <declaration><![CDATA[protected void OnImportClick(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="248" sc="9" el="268" ec="10">admin\Modules\Import.ascx.cs</location>
            <body hash="3269e4746bf8156087e2df0029e7ad59"><![CDATA[{
            try
            {
                if (Module != null)
                {
                    var strMessage = ImportModule();
                    if (String.IsNullOrEmpty(strMessage))
                    {
                        Response.Redirect(ReturnURL, true);
                    }
                    else
                    {
                        UI.Skins.Skin.AddModuleMessage(this, strMessage, ModuleMessage.ModuleMessageType.RedError);
                    }
                }
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="146" sc="9" el="159" ec="10">admin\Modules\Import.ascx.cs</location>
            <body hash="69bb57b886586a616ff5f6ebf07666ed"><![CDATA[{
            base.OnInit(e);

            if (Request.QueryString["moduleid"] != null)
            {
                Int32.TryParse(Request.QueryString["moduleid"], out ModuleId);
            }

            //Verify that the current user has access to edit this module
            if (!ModulePermissionController.HasModuleAccess(SecurityAccessLevel.Edit, "IMPORT", Module))
            {
                Response.Redirect(Globals.AccessDeniedURL(), true);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="162" sc="9" el="182" ec="10">admin\Modules\Import.ascx.cs</location>
            <body hash="4fa1364b6ac8f3740e98800dd772f7b8"><![CDATA[{
            base.OnLoad(e);

            cboFolders.SelectionChanged += OnFoldersIndexChanged;
            cboFiles.SelectedIndexChanged += OnFilesIndexChanged;
            cmdImport.Click += OnImportClick;

            try
            {
                if (!Page.IsPostBack)
                {
                    cmdCancel.NavigateUrl = ReturnURL;
                    cboFolders.UndefinedItem = new ListItem("<" + Localization.GetString("None_Specified") + ">", string.Empty);
                    cboFolders.Services.Parameters.Add("permission", "ADD");
                }
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_module">
          <declaration><![CDATA[private ModuleInfo _module;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cboFiles">
          <declaration><![CDATA[protected DnnComboBox cboFiles;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cboFolders">
          <declaration><![CDATA[protected DnnFolderDropDownList cboFolders;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdCancel">
          <declaration><![CDATA[protected HyperLink cmdCancel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdImport">
          <declaration><![CDATA[protected LinkButton cmdImport;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ModuleId">
          <declaration><![CDATA[private new int ModuleId = -1;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plFile">
          <declaration><![CDATA[protected LabelControl plFile;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plFolder">
          <declaration><![CDATA[protected LabelControl plFolder;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtContent">
          <declaration><![CDATA[protected TextBox txtContent;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="Module">
          <declaration><![CDATA[private ModuleInfo Module]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="60" sc="13" el="62" ec="14">admin\Modules\Import.ascx.cs</location>
            <body hash="99c0dddcf239f2d554d4042b5a9d2ba8"><![CDATA[{
                return _module ?? (_module = ModuleController.Instance.GetModule(ModuleId, TabId, false));
            }]]></body>
          </codeblock>
        </property>
        <property name="ReturnURL">
          <declaration><![CDATA[private string ReturnURL]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="68" sc="13" el="70" ec="14">admin\Modules\Import.ascx.cs</location>
            <body hash="886024cc288178771d5df7a287e8cdef"><![CDATA[{
                return UrlUtils.ValidReturnUrl(Request.Params["ReturnURL"]) ?? Globals.NavigateURL();
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="ModulePermissions">
      <declaration><![CDATA[public class ModulePermissions : PortalModuleBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private int _moduleId = -1;]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="68" sc="9" el="68" ec="36">admin\Modules\ModulePermissions.ascx.cs</location>
            <body hash="ff6ed5765a819dbc529d8366ad5259da"><![CDATA[private int _moduleId = -1]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="89" sc="9" el="103" ec="10">admin\Modules\ModulePermissions.ascx.cs</location>
            <body hash="eb4404d0785182f513bb2e8c32233244"><![CDATA[{
            base.OnInit(e);

            //get ModuleId
            if ((Request.QueryString["ModuleId"] != null))
            {
                _moduleId = Int32.Parse(Request.QueryString["ModuleId"]);
            }

            //Verify that the current user has access to edit this module
            if (!ModulePermissionController.HasModuleAccess(SecurityAccessLevel.ViewPermissions, String.Empty, Module))
            {
                Response.Redirect(Globals.AccessDeniedURL(), true);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="106" sc="9" el="131" ec="10">admin\Modules\ModulePermissions.ascx.cs</location>
            <body hash="24de7a5a151b39bc9c2914e11b502d19"><![CDATA[{
            base.OnLoad(e);

            cmdUpdate.Click += OnUpdateClick;

            try
            {
                cancelHyperLink.NavigateUrl = ReturnURL;

                if (Page.IsPostBack == false)
                {
                    dgPermissions.TabId = PortalSettings.ActiveTab.TabID;
                    dgPermissions.ModuleID = _moduleId;

                    if (Module != null)
                    {
                        cmdUpdate.Visible = ModulePermissionController.HasModulePermission(Module.ModulePermissions, "EDIT,MANAGE") || TabPermissionController.CanAddContentToPage();
                        permissionsRow.Visible = ModulePermissionController.CanAdminModule(Module) || TabPermissionController.CanAddContentToPage();
                    }
                }
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnUpdateClick">
          <declaration><![CDATA[protected void OnUpdateClick(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="134" sc="9" el="152" ec="10">admin\Modules\ModulePermissions.ascx.cs</location>
            <body hash="b2db4a79ff0b95e052589515db8c8995"><![CDATA[{
            try
            {
                if (Page.IsValid)
                {
                    Module.ModulePermissions.Clear();
                    Module.ModulePermissions.AddRange(dgPermissions.Permissions);

                    ModulePermissionController.SaveModulePermissions(Module);

                    //Navigate back to admin page
                    Response.Redirect(ReturnURL, true);
                }
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_module">
          <declaration><![CDATA[private ModuleInfo _module;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_moduleId">
          <declaration><![CDATA[private int _moduleId = -1;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cancelHyperLink">
          <declaration><![CDATA[protected HyperLink cancelHyperLink;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdUpdate">
          <declaration><![CDATA[protected LinkButton cmdUpdate;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="dgPermissions">
          <declaration><![CDATA[protected ModulePermissionsGrid dgPermissions;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="permissionsRow">
          <declaration><![CDATA[protected HtmlGenericControl permissionsRow;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="Module">
          <declaration><![CDATA[private ModuleInfo Module]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ReturnURL">
          <declaration><![CDATA[private string ReturnURL]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="79" sc="13" el="81" ec="14">admin\Modules\ModulePermissions.ascx.cs</location>
            <body hash="886024cc288178771d5df7a287e8cdef"><![CDATA[{
                return UrlUtils.ValidReturnUrl(Request.Params["ReturnURL"]) ?? Globals.NavigateURL();
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="ModuleSettingsPage">
      <declaration><![CDATA[public class ModuleSettingsPage : PortalModuleBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private int _moduleId = -1;]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="67" sc="9" el="67" ec="36">admin\Modules\Modulesettings.ascx.cs</location>
            <body hash="ff6ed5765a819dbc529d8366ad5259da"><![CDATA[private int _moduleId = -1]]></body>
          </codeblock>
        </constructor>
        <constructor name=".cctor">
          <declaration><![CDATA[static ModuleSettingsPage()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="63" sc="9" el="63" ec="107">admin\Modules\Modulesettings.ascx.cs</location>
            <body hash="f8a1f0d69b7073b7b6ce6292e84c148f"><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof(ModuleSettingsPage))]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="BindContainers">
          <declaration><![CDATA[private void BindContainers()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="199" sc="9" el="206" ec="10">admin\Modules\Modulesettings.ascx.cs</location>
            <body hash="4b4a158e6abd1522a81bd07948840248"><![CDATA[{
            moduleContainerCombo.PortalId = PortalId;
            moduleContainerCombo.RootPath = SkinController.RootContainer;
            moduleContainerCombo.Scope = SkinScope.All;
            moduleContainerCombo.IncludeNoneSpecificItem = true;
            moduleContainerCombo.NoneSpecificText = "<" + Localization.GetString("None_Specified") + ">";
            moduleContainerCombo.SelectedValue = Module.ContainerSrc;
        }]]></body>
          </codeblock>
        </method>
        <method name="BindData">
          <declaration><![CDATA[private void BindData()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="101" sc="9" el="196" ec="10">admin\Modules\Modulesettings.ascx.cs</location>
            <body hash="db0c17e6fea753af41e32ee4f10ef21b"><![CDATA[{
            if (Module != null)
            {
                var desktopModule = DesktopModuleController.GetDesktopModule(Module.DesktopModuleID, PortalId);
                dgPermissions.ResourceFile = Globals.ApplicationPath + "/DesktopModules/" + desktopModule.FolderName + "/" + Localization.LocalResourceDirectory + "/" +
                                             Localization.LocalSharedResourceFile;
                if (!Module.IsShared)
                {
                    chkInheritPermissions.Checked = Module.InheritViewPermissions;
                    dgPermissions.InheritViewPermissionsFromTab = Module.InheritViewPermissions;
                }
                txtFriendlyName.Text = Module.DesktopModule.FriendlyName;
                txtTitle.Text = Module.ModuleTitle;
                ctlIcon.Url = Module.IconFile;

                if (cboTab.FindItemByValue(Module.TabID.ToString()) != null)
                {
                    cboTab.FindItemByValue(Module.TabID.ToString()).Selected = true;
                }

                rowTab.Visible = cboTab.Items.Count != 1;
                chkAllTabs.Checked = Module.AllTabs;
                trnewPages.Visible = chkAllTabs.Checked;
                allowIndexRow.Visible = desktopModule.IsSearchable;
                chkAllowIndex.Checked = Settings["AllowIndex"] == null || Settings["AllowIndex"] != null && bool.Parse(Settings["AllowIndex"].ToString());
                txtMoniker.Text = (string)Settings["Moniker"] ?? "";

                cboVisibility.SelectedIndex = (int)Module.Visibility;
                chkAdminBorder.Checked = Settings["hideadminborder"] != null && bool.Parse(Settings["hideadminborder"].ToString());

                var objModuleDef = ModuleDefinitionController.GetModuleDefinitionByID(Module.ModuleDefID);
                if (objModuleDef.DefaultCacheTime == Null.NullInteger)
                {
                    cacheWarningRow.Visible = true;
                    txtCacheDuration.Text = Module.CacheTime.ToString();
                }
                else
                {
                    cacheWarningRow.Visible = false;
                    txtCacheDuration.Text = Module.CacheTime.ToString();
                }
                BindModuleCacheProviderList();

                ShowCacheRows();

                cboAlign.Items.FindByValue(Module.Alignment).Selected = true;
                txtColor.Text = Module.Color;
                txtBorder.Text = Module.Border;

                txtHeader.Text = Module.Header;
                txtFooter.Text = Module.Footer;

                if (!Null.IsNull(Module.StartDate))
                {
                    startDatePicker.SelectedDate = Module.StartDate;
                }
				if (!Null.IsNull(Module.EndDate) && Module.EndDate <= endDatePicker.MaxDate)
                {
                    endDatePicker.SelectedDate = Module.EndDate;
                }

                BindContainers();

                chkDisplayTitle.Checked = Module.DisplayTitle;
                chkDisplayPrint.Checked = Module.DisplayPrint;
                chkDisplaySyndicate.Checked = Module.DisplaySyndicate;

                chkWebSlice.Checked = Module.IsWebSlice;
                webSliceTitle.Visible = Module.IsWebSlice;
                webSliceExpiry.Visible = Module.IsWebSlice;
                webSliceTTL.Visible = Module.IsWebSlice;

                txtWebSliceTitle.Text = Module.WebSliceTitle;
                if (!Null.IsNull(Module.WebSliceExpiryDate))
                {
                    diWebSliceExpiry.SelectedDate = Module.WebSliceExpiryDate;
                }
                if (!Null.IsNull(Module.WebSliceTTL))
                {
                    txtWebSliceTTL.Text = Module.WebSliceTTL.ToString();
                }
                if (Module.ModuleID == PortalSettings.Current.DefaultModuleId && Module.TabID == PortalSettings.Current.DefaultTabId)
                {
                    chkDefault.Checked = true;
                }

                if (!Module.IsShared && Module.DesktopModule.Shareable != ModuleSharing.Unsupported)
                {
                    isShareableCheckBox.Checked = Module.IsShareable;
                    isShareableViewOnlyCheckBox.Checked = Module.IsShareableViewOnly;
                    isShareableRow.Visible = true;

                    chkInheritPermissions.Visible = true;
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="BindModuleCacheProviderList">
          <declaration><![CDATA[private void BindModuleCacheProviderList()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="209" sc="9" el="229" ec="10">admin\Modules\Modulesettings.ascx.cs</location>
            <body hash="7732261cb6992d242c532c6c49957c8c"><![CDATA[{
            cboCacheProvider.DataSource = GetFilteredProviders(ModuleCachingProvider.GetProviderList(), "ModuleCachingProvider");
            cboCacheProvider.DataBind();

            //cboCacheProvider.Items.Insert(0, new ListItem(Localization.GetString("None_Specified"), ""));
            cboCacheProvider.InsertItem(0, Localization.GetString("None_Specified"), "");

            //if (!string.IsNullOrEmpty(Module.GetEffectiveCacheMethod()) && cboCacheProvider.Items.FindByValue(Module.GetEffectiveCacheMethod()) != null)
            if (!string.IsNullOrEmpty(Module.GetEffectiveCacheMethod()) && cboCacheProvider.FindItemByValue(Module.GetEffectiveCacheMethod()) != null)
            {
                //cboCacheProvider.Items.FindByValue(Module.GetEffectiveCacheMethod()).Selected = true;
                cboCacheProvider.FindItemByValue(Module.GetEffectiveCacheMethod()).Selected = true;
            }
            else
            {
                //select the None Specified value
                cboCacheProvider.Items[0].Selected = true;
            }

            lblCacheInherited.Visible = Module.CacheMethod != Module.GetEffectiveCacheMethod();
        }]]></body>
          </codeblock>
        </method>
        <method name="GetFilteredProviders">
          <declaration><![CDATA[private IEnumerable GetFilteredProviders<T>(Dictionary<string, T> providerList, string keyFilter)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="232" sc="9" el="236" ec="10">admin\Modules\Modulesettings.ascx.cs</location>
            <body hash="5f3289b95a30b5d70349a44df6c812de"><![CDATA[{
            var providers = from provider in providerList let filteredkey = provider.Key.Replace(keyFilter, String.Empty) select new { filteredkey, provider.Key };

            return providers;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetInstalledOnLink">
          <declaration><![CDATA[protected string GetInstalledOnLink(object dataItem)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="248" sc="9" el="283" ec="10">admin\Modules\Modulesettings.ascx.cs</location>
            <body hash="306cd7376933a99e81902cf2ea45f0c7"><![CDATA[{
            var returnValue = new StringBuilder();
            var tab = dataItem as TabInfo;
            if (tab != null)
            {
                var index = 0;
                TabController.Instance.PopulateBreadCrumbs(ref tab);
                var defaultAlias = PortalAliasController.Instance.GetPortalAliasesByPortalId(tab.PortalID)
                                        .OrderByDescending(a => a.IsPrimary)
                                        .FirstOrDefault();
                var portalSettings = new PortalSettings(tab.PortalID)
                                         {
                                             PortalAlias = defaultAlias
                                         };

                var tabUrl = Globals.NavigateURL(tab.TabID, portalSettings, string.Empty);

                foreach (TabInfo t in tab.BreadCrumbs)
                {
                    if (index > 0)
                    {
                        returnValue.Append(" > ");
                    }
                    if (tab.BreadCrumbs.Count - 1 == index)
                    {
                        returnValue.AppendFormat("<a href=\"{0}\">{1}</a>", tabUrl, t.LocalizedTabName);
                    }
                    else
                    {
                        returnValue.AppendFormat("{0}", t.LocalizedTabName);
                    }
                    index = index + 1;
                }
            }
            return returnValue.ToString();
        }]]></body>
          </codeblock>
        </method>
        <method name="GetInstalledOnSite">
          <declaration><![CDATA[protected string GetInstalledOnSite(object dataItem)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="286" sc="9" el="298" ec="10">admin\Modules\Modulesettings.ascx.cs</location>
            <body hash="a98ad85d8f8cd4d515541c263d675412"><![CDATA[{
            string returnValue = String.Empty;
            var tab = dataItem as TabInfo;
            if (tab != null)
            {
                var portal = PortalController.Instance.GetPortal(tab.PortalID);
                if (portal != null)
                {
                    returnValue = portal.PortalName;
                }
            }
            return returnValue;
        }]]></body>
          </codeblock>
        </method>
        <method name="IsSharedViewOnly">
          <declaration><![CDATA[protected bool IsSharedViewOnly()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="301" sc="9" el="303" ec="10">admin\Modules\Modulesettings.ascx.cs</location>
            <body hash="7b9a98127a56481cca78081e4f50b17b"><![CDATA[{
            return ModuleContext.Configuration.IsShared && ModuleContext.Configuration.IsShareableViewOnly;
        }]]></body>
          </codeblock>
        </method>
        <method name="OnAllTabsCheckChanged">
          <declaration><![CDATA[protected void OnAllTabsCheckChanged(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="495" sc="9" el="497" ec="10">admin\Modules\Modulesettings.ascx.cs</location>
            <body hash="f0e99ddb3f712243e8a800435ca5ffb5"><![CDATA[{
            trnewPages.Visible = chkAllTabs.Checked;
        }]]></body>
          </codeblock>
        </method>
        <method name="OnCacheProviderIndexChanged">
          <declaration><![CDATA[protected void OnCacheProviderIndexChanged(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="500" sc="9" el="502" ec="10">admin\Modules\Modulesettings.ascx.cs</location>
            <body hash="bc47e203c9d72cff366e8aaed4ad12f3"><![CDATA[{
            ShowCacheRows();
        }]]></body>
          </codeblock>
        </method>
        <method name="OnDeleteClick">
          <declaration><![CDATA[protected void OnDeleteClick(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="505" sc="9" el="515" ec="10">admin\Modules\Modulesettings.ascx.cs</location>
            <body hash="2b66a0b7d448a80c05a84e9d98fd1411"><![CDATA[{
            try
            {
                ModuleController.Instance.DeleteTabModule(TabId, _moduleId, true);
                Response.Redirect(ReturnURL, true);
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInheritPermissionsChanged">
          <declaration><![CDATA[protected void OnInheritPermissionsChanged(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="518" sc="9" el="520" ec="10">admin\Modules\Modulesettings.ascx.cs</location>
            <body hash="e968bc017ebef842c00fcff5a13dd978"><![CDATA[{
            dgPermissions.InheritViewPermissionsFromTab = chkInheritPermissions.Checked;
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="310" sc="9" el="377" ec="10">admin\Modules\Modulesettings.ascx.cs</location>
            <body hash="3171dc52bea7da44e0b09f59af0a6090"><![CDATA[{
            base.OnInit(e);
            try
            {
                chkAllTabs.CheckedChanged += OnAllTabsCheckChanged;
                chkInheritPermissions.CheckedChanged += OnInheritPermissionsChanged;
                chkWebSlice.CheckedChanged += OnWebSliceCheckChanged;
                cboCacheProvider.TextChanged += OnCacheProviderIndexChanged;
                cmdDelete.Click += OnDeleteClick;
                cmdUpdate.Click += OnUpdateClick;

			    JavaScript.RequestRegistration(CommonJs.DnnPlugins);

                //get ModuleId
                if ((Request.QueryString["ModuleId"] != null))
                {
                    _moduleId = Int32.Parse(Request.QueryString["ModuleId"]);
                }
                if (Module.ContentItemId == Null.NullInteger && Module.ModuleID != Null.NullInteger)
                {
                    //This tab does not have a valid ContentItem
                    ModuleController.Instance.CreateContentItem(Module);

                    ModuleController.Instance.UpdateModule(Module);
                }

                //Verify that the current user has access to edit this module
                if (!ModulePermissionController.HasModuleAccess(SecurityAccessLevel.Edit, "MANAGE", Module))
                {
                    if (!(IsSharedViewOnly() && TabPermissionController.CanAddContentToPage()))
                    {
                        Response.Redirect(Globals.AccessDeniedURL(), true);
                    }
                }
                if (Module != null)
                {
                    //get module
                    TabModuleId = Module.TabModuleID;

                    //get Settings Control
                    ModuleControlInfo moduleControlInfo = ModuleControlController.GetModuleControlByControlKey("Settings", Module.ModuleDefID);

                    if (moduleControlInfo != null)
                    {
                    
                        _control = ModuleControlFactory.LoadSettingsControl(Page, Module, moduleControlInfo.ControlSrc);

                        var settingsControl = _control as ISettingsControl;
                        if (settingsControl != null)
                        {
                            hlSpecificSettings.Text = Localization.GetString("ControlTitle_settings",
                                settingsControl.LocalResourceFile);
                            if (String.IsNullOrEmpty(hlSpecificSettings.Text))
                            {
                                hlSpecificSettings.Text =
                                    String.Format(Localization.GetString("ControlTitle_settings", LocalResourceFile),
                                        Module.DesktopModule.FriendlyName);
                            }
                            pnlSpecific.Controls.Add(_control);
                        }
                    }
                }
            }
            catch (Exception err)
            {
                Exceptions.ProcessModuleLoadException(this, err);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="380" sc="9" el="492" ec="10">admin\Modules\Modulesettings.ascx.cs</location>
            <body hash="fce87aa65b9aef8d6be2e1dbc7317bd6"><![CDATA[{
            base.OnLoad(e);

            try
            {
                cancelHyperLink.NavigateUrl = ReturnURL;

                if (_moduleId != -1)
                {
                    ctlAudit.Entity = Module;
                }
                if (Page.IsPostBack == false)
                {
                    ctlIcon.FileFilter = Globals.glbImageFileTypes;

                    dgPermissions.TabId = PortalSettings.ActiveTab.TabID;
                    dgPermissions.ModuleID = _moduleId;

                    var tabsByModule = TabController.Instance.GetTabsByModuleID(_moduleId);
                    tabsByModule.Remove(TabId);
                    dgOnTabs.DataSource = tabsByModule.Values;
                    dgOnTabs.DataBind();

                    cboTab.DataSource = TabController.GetPortalTabs(PortalId, -1, false, Null.NullString, true, false, true, false, true);
                    cboTab.DataBind();

                    //if tab is a  host tab, then add current tab
                    if (Globals.IsHostTab(PortalSettings.ActiveTab.TabID))
                    {
                        cboTab.InsertItem(0, PortalSettings.ActiveTab.LocalizedTabName, PortalSettings.ActiveTab.TabID.ToString());
                    }
                    if (Module != null)
                    {
                        if (cboTab.FindItemByValue(Module.TabID.ToString()) == null)
                        {
                            var objTab = TabController.Instance.GetTab(Module.TabID, Module.PortalID, false);
                            cboTab.AddItem(objTab.LocalizedTabName, objTab.TabID.ToString());
                        }
                    }

                    //only Portal Administrators can manage the visibility on all Tabs
                    var isAdmin = PortalSecurity.IsInRole(PortalSettings.AdministratorRoleName);
                    rowAllTabs.Visible = isAdmin;
                    chkAllModules.Enabled = isAdmin;

                    if (HideCancelButton)
                    {
                        cancelHyperLink.Visible = false;
                    }

                    //tab administrators can only manage their own tab
                    if (!TabPermissionController.CanAdminPage())
                    {
                        chkNewTabs.Enabled = false;
                        chkDefault.Enabled = false;
                        chkAllowIndex.Enabled = false;
                        cboTab.Enabled = false;
                    }
                    
                    if (_moduleId != -1)
                    {
                        BindData();
                        cmdDelete.Visible = (ModulePermissionController.CanDeleteModule(Module) || 
                             TabPermissionController.CanAddContentToPage()) && !HideDeleteButton;
                    }
                    else
                    {
                        isShareableCheckBox.Checked = true;
                        isShareableViewOnlyCheckBox.Checked = true;
                        isShareableRow.Visible = true;

                        cboVisibility.SelectedIndex = 0; //maximized
                        chkAllTabs.Checked = false;
                        cmdDelete.Visible = false;
                    }
                    if (Module != null)
                    {
                        cmdUpdate.Visible = ModulePermissionController.HasModulePermission(Module.ModulePermissions, "EDIT,MANAGE") || TabPermissionController.CanAddContentToPage();
                        permissionsRow.Visible = ModulePermissionController.CanAdminModule(Module) || TabPermissionController.CanAddContentToPage();
                    }

                    //Set visibility of Specific Settings
                    if (SettingsControl == null == false)
                    {
                        //Get the module settings from the PortalSettings and pass the
                        //two settings hashtables to the sub control to process
                        SettingsControl.LoadSettings();
                        specificSettingsTab.Visible = true;
                        fsSpecific.Visible = true;
                    }
                    else
                    {
                        specificSettingsTab.Visible = false;
                        fsSpecific.Visible = false;
                    }

                    if (Module != null)
                    {
                        termsSelector.PortalId = Module.PortalID;
                        termsSelector.Terms = Module.Terms;
                    }
                    termsSelector.DataBind();
                }
                if (Module != null)
                {
                    cultureLanguageLabel.Language = Module.CultureCode;
                }
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnUpdateClick">
          <declaration><![CDATA[protected void OnUpdateClick(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="523" sc="9" el="737" ec="10">admin\Modules\Modulesettings.ascx.cs</location>
            <body hash="4471e6d29854b7396029468edfbdc8fe"><![CDATA[{
            try
            {
                if (Page.IsValid)
                {
                    var allTabsChanged = false;
                    //TODO: REMOVE IF UNUSED
                    //var allowIndexChanged = false;

                    //only Portal Administrators can manage the visibility on all Tabs
                    var isAdmin = PortalSecurity.IsInRole(PortalSettings.AdministratorRoleName);
                    chkAllModules.Enabled = isAdmin;

                    //tab administrators can only manage their own tab
                    if (!TabPermissionController.CanAdminPage())
                    {
                        chkAllTabs.Enabled = false;
                        chkNewTabs.Enabled = false;
                        chkDefault.Enabled = false;
                        chkAllowIndex.Enabled = false;
                        cboTab.Enabled = false;
                    }
                    Module.ModuleID = _moduleId;
                    Module.ModuleTitle = txtTitle.Text;
                    Module.Alignment = cboAlign.SelectedItem.Value;
                    Module.Color = txtColor.Text;
                    Module.Border = txtBorder.Text;
                    Module.IconFile = ctlIcon.Url;
                    Module.CacheTime = !String.IsNullOrEmpty(txtCacheDuration.Text)
                                            ? Int32.Parse(txtCacheDuration.Text)
                                            : 0;
                    Module.CacheMethod = cboCacheProvider.SelectedValue;
                    Module.TabID = TabId;
                    if (Module.AllTabs != chkAllTabs.Checked)
                    {
                        allTabsChanged = true;
                    }
                    Module.AllTabs = chkAllTabs.Checked;

                    // collect these first as any settings update will clear the cache
                    var originalChecked = Settings["hideadminborder"] != null && bool.Parse(Settings["hideadminborder"].ToString());
                    var allowIndex = Settings.ContainsKey("AllowIndex") && Convert.ToBoolean(Settings["AllowIndex"]);
                    var oldMoniker = ((string)Settings["Moniker"] ?? "").TrimToLength(100);
                    var newMoniker = txtMoniker.Text.TrimToLength(100);
                    if (!oldMoniker.Equals(txtMoniker.Text))
                    {
                        var ids = TabModulesController.Instance.GetTabModuleIdsBySetting("Moniker", newMoniker);
                        if (ids != null && ids.Count > 0)
                        {
                            //Warn user - duplicate moniker value
                            Skin.AddModuleMessage(this, Localization.GetString("MonikerExists", LocalResourceFile), ModuleMessage.ModuleMessageType.RedError);
                            return;
                        }
                        ModuleController.Instance.UpdateTabModuleSetting(Module.TabModuleID, "Moniker", newMoniker);
                    }

                    if (originalChecked != chkAdminBorder.Checked)
                    {
                        ModuleController.Instance.UpdateTabModuleSetting(Module.TabModuleID, "hideadminborder", chkAdminBorder.Checked.ToString());
                    }

                    //check whether allow index value is changed
                    if (allowIndex != chkAllowIndex.Checked)
                    {
                        ModuleController.Instance.UpdateTabModuleSetting(Module.TabModuleID, "AllowIndex", chkAllowIndex.Checked.ToString());
                    }

                    switch (Int32.Parse(cboVisibility.SelectedItem.Value))
                    {
                        case 0:
                            Module.Visibility = VisibilityState.Maximized;
                            break;
                        case 1:
                            Module.Visibility = VisibilityState.Minimized;
                            break;
                        //case 2:
                        default:
                            Module.Visibility = VisibilityState.None;
                            break;
                    }

                    Module.IsDeleted = false;
                    Module.Header = txtHeader.Text;
                    Module.Footer = txtFooter.Text;

                    Module.StartDate = startDatePicker.SelectedDate != null
                                        ? startDatePicker.SelectedDate.Value
                                        : Null.NullDate;

                    Module.EndDate = endDatePicker.SelectedDate != null
                                        ? endDatePicker.SelectedDate.Value
                                        : Null.NullDate;

                    Module.ContainerSrc = moduleContainerCombo.SelectedValue;
                    Module.ModulePermissions.Clear();
                    Module.ModulePermissions.AddRange(dgPermissions.Permissions);
                    Module.Terms.Clear();
                    Module.Terms.AddRange(termsSelector.Terms);

                    if (!Module.IsShared)
                    {
                        Module.InheritViewPermissions = chkInheritPermissions.Checked;
                        Module.IsShareable = isShareableCheckBox.Checked;
                        Module.IsShareableViewOnly = isShareableViewOnlyCheckBox.Checked;
                    }

                    Module.DisplayTitle = chkDisplayTitle.Checked;
                    Module.DisplayPrint = chkDisplayPrint.Checked;
                    Module.DisplaySyndicate = chkDisplaySyndicate.Checked;
                    Module.IsWebSlice = chkWebSlice.Checked;
                    Module.WebSliceTitle = txtWebSliceTitle.Text;

                    Module.WebSliceExpiryDate = diWebSliceExpiry.SelectedDate != null
                                                ? diWebSliceExpiry.SelectedDate.Value
                                                : Null.NullDate;

                    if (!string.IsNullOrEmpty(txtWebSliceTTL.Text))
                    {
                        Module.WebSliceTTL = Convert.ToInt32(txtWebSliceTTL.Text);
                    }
                    Module.IsDefaultModule = chkDefault.Checked;
                    Module.AllModules = chkAllModules.Checked;
                    ModuleController.Instance.UpdateModule(Module);

                    //Update Custom Settings
                    if (SettingsControl != null)
                    {
                        try
                        {
                            SettingsControl.UpdateSettings();
                        }
                        catch (ThreadAbortException exc)
                        {
                            Logger.Debug(exc);

                            Thread.ResetAbort(); //necessary
                        }
                        catch (Exception ex)
                        {
                            Exceptions.LogException(ex);
                        }
                    }

                    //These Module Copy/Move statements must be 
                    //at the end of the Update as the Controller code assumes all the 
                    //Updates to the Module have been carried out.

                    //Check if the Module is to be Moved to a new Tab
                    if (!chkAllTabs.Checked)
                    {
                        var newTabId = Int32.Parse(cboTab.SelectedValue);
                        if (TabId != newTabId)
                        {
                            //First check if there already is an instance of the module on the target page
                            var tmpModule = ModuleController.Instance.GetModule(_moduleId, newTabId, false);
                            if (tmpModule == null)
                            {
                                //Move module
                                ModuleController.Instance.MoveModule(_moduleId, TabId, newTabId, Globals.glbDefaultPane);
                            }
                            else
                            {
                                //Warn user
                                Skin.AddModuleMessage(this, Localization.GetString("ModuleExists", LocalResourceFile), ModuleMessage.ModuleMessageType.RedError);
                                return;
                            }
                        }
                    }

                    //Check if Module is to be Added/Removed from all Tabs
                    if (allTabsChanged)
                    {
                        var listTabs = TabController.GetPortalTabs(PortalSettings.PortalId, Null.NullInteger, false, true);
                        if (chkAllTabs.Checked)
                        {
                            if (!chkNewTabs.Checked)
                            {
                                foreach (var destinationTab in listTabs)
                                {
                                    var module = ModuleController.Instance.GetModule(_moduleId, destinationTab.TabID, false);
                                    if (module != null)
                                    {
                                        if (module.IsDeleted)
                                        {
                                            ModuleController.Instance.RestoreModule(module);
                                        }
                                    }
                                    else
                                    {
                                        if (!PortalSettings.ContentLocalizationEnabled || (Module.CultureCode == destinationTab.CultureCode))
                                        {
                                            ModuleController.Instance.CopyModule(Module, destinationTab, Module.PaneName, true);
                                        }
                                    }
                                }
                            }
                        }
                        else
                        {
                            ModuleController.Instance.DeleteAllModules(_moduleId, TabId, listTabs, true, false, false);
                        }
                    }

                    if (!DoNotRedirectOnUpdate)
                    {
                        //Navigate back to admin page
                        Response.Redirect(ReturnURL, true);
                    }
                }
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnWebSliceCheckChanged">
          <declaration><![CDATA[protected void OnWebSliceCheckChanged(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="740" sc="9" el="744" ec="10">admin\Modules\Modulesettings.ascx.cs</location>
            <body hash="0437a72c0c30d33f675e6f5de6515c0f"><![CDATA[{
            webSliceTitle.Visible = chkWebSlice.Checked;
            webSliceExpiry.Visible = chkWebSlice.Checked;
            webSliceTTL.Visible = chkWebSlice.Checked;
        }]]></body>
          </codeblock>
        </method>
        <method name="ShowCacheRows">
          <declaration><![CDATA[private void ShowCacheRows()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="239" sc="9" el="241" ec="10">admin\Modules\Modulesettings.ascx.cs</location>
            <body hash="a4f00155e8ee71c9f1b66cef801428c6"><![CDATA[{
            divCacheDuration.Visible = !string.IsNullOrEmpty(cboCacheProvider.SelectedValue);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_control">
          <declaration><![CDATA[private Control _control;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_module">
          <declaration><![CDATA[private ModuleInfo _module;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_moduleId">
          <declaration><![CDATA[private int _moduleId = -1;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="AllowIndexLabel">
          <declaration><![CDATA[protected LabelControl AllowIndexLabel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="allowIndexRow">
          <declaration><![CDATA[protected HtmlGenericControl allowIndexRow;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cacheWarningRow">
          <declaration><![CDATA[protected Panel cacheWarningRow;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cancelHyperLink">
          <declaration><![CDATA[protected HyperLink cancelHyperLink;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cboAlign">
          <declaration><![CDATA[protected RadioButtonList cboAlign;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cboCacheProvider">
          <declaration><![CDATA[protected DnnComboBox cboCacheProvider;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cboTab">
          <declaration><![CDATA[protected DnnComboBox cboTab;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cboVisibility">
          <declaration><![CDATA[protected RadioButtonList cboVisibility;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkAdminBorder">
          <declaration><![CDATA[protected CheckBox chkAdminBorder;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkAllModules">
          <declaration><![CDATA[protected CheckBox chkAllModules;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkAllowIndex">
          <declaration><![CDATA[protected CheckBox chkAllowIndex;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkAllTabs">
          <declaration><![CDATA[protected CheckBox chkAllTabs;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkDefault">
          <declaration><![CDATA[protected CheckBox chkDefault;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkDisplayPrint">
          <declaration><![CDATA[protected CheckBox chkDisplayPrint;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkDisplaySyndicate">
          <declaration><![CDATA[protected CheckBox chkDisplaySyndicate;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkDisplayTitle">
          <declaration><![CDATA[protected CheckBox chkDisplayTitle;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkInheritPermissions">
          <declaration><![CDATA[protected CheckBox chkInheritPermissions;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkNewTabs">
          <declaration><![CDATA[protected CheckBox chkNewTabs;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkWebSlice">
          <declaration><![CDATA[protected CheckBox chkWebSlice;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdDelete">
          <declaration><![CDATA[protected LinkButton cmdDelete;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdUpdate">
          <declaration><![CDATA[protected LinkButton cmdUpdate;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ctlAudit">
          <declaration><![CDATA[protected ModuleAuditControl ctlAudit;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ctlIcon">
          <declaration><![CDATA[protected DnnUrlControl ctlIcon;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cultureLabel">
          <declaration><![CDATA[protected LabelControl cultureLabel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cultureLanguageLabel">
          <declaration><![CDATA[protected DnnLanguageLabel cultureLanguageLabel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cultureRow">
          <declaration><![CDATA[protected HtmlGenericControl cultureRow;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="dgOnTabs">
          <declaration><![CDATA[protected DnnGrid dgOnTabs;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="dgPermissions">
          <declaration><![CDATA[protected ModulePermissionsGrid dgPermissions;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="divCacheDuration">
          <declaration><![CDATA[protected HtmlGenericControl divCacheDuration;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="diWebSliceExpiry">
          <declaration><![CDATA[protected DnnDatePicker diWebSliceExpiry;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="endDatePicker">
          <declaration><![CDATA[protected DnnDateTimePicker endDatePicker;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="fsSpecific">
          <declaration><![CDATA[protected HtmlGenericControl fsSpecific;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="hlSpecificSettings">
          <declaration><![CDATA[protected HyperLink hlSpecificSettings;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="isShareableCheckBox">
          <declaration><![CDATA[protected CheckBox isShareableCheckBox;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="isShareableLabel">
          <declaration><![CDATA[protected LabelControl isShareableLabel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="isShareableRow">
          <declaration><![CDATA[protected HtmlGenericControl isShareableRow;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="isShareableViewOnlyCheckBox">
          <declaration><![CDATA[protected CheckBox isShareableViewOnlyCheckBox;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="isShareableViewOnlyLabel">
          <declaration><![CDATA[protected LabelControl isShareableViewOnlyLabel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblCacheDuration">
          <declaration><![CDATA[protected LabelControl lblCacheDuration;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblCacheDurationWarning">
          <declaration><![CDATA[protected Label lblCacheDurationWarning;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblCacheInherited">
          <declaration><![CDATA[protected Label lblCacheInherited;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblCacheProvider">
          <declaration><![CDATA[protected LabelControl lblCacheProvider;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Logger">
          <declaration><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof(ModuleSettingsPage));]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="moduleContainerCombo">
          <declaration><![CDATA[protected DnnSkinComboBox moduleContainerCombo;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="permissionsRow">
          <declaration><![CDATA[protected HtmlGenericControl permissionsRow;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plAdminBorder">
          <declaration><![CDATA[protected LabelControl plAdminBorder;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plAlign">
          <declaration><![CDATA[protected LabelControl plAlign;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plAllModules">
          <declaration><![CDATA[protected LabelControl plAllModules;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plAllTabs">
          <declaration><![CDATA[protected LabelControl plAllTabs;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plBorder">
          <declaration><![CDATA[protected LabelControl plBorder;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plColor">
          <declaration><![CDATA[protected LabelControl plColor;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plDefault">
          <declaration><![CDATA[protected LabelControl plDefault;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plDisplayPrint">
          <declaration><![CDATA[protected LabelControl plDisplayPrint;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plDisplaySyndicate">
          <declaration><![CDATA[protected LabelControl plDisplaySyndicate;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plDisplayTitle">
          <declaration><![CDATA[protected LabelControl plDisplayTitle;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plEndDate">
          <declaration><![CDATA[protected LabelControl plEndDate;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plFooter">
          <declaration><![CDATA[protected LabelControl plFooter;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plFriendlyName">
          <declaration><![CDATA[protected LabelControl plFriendlyName;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plHeader">
          <declaration><![CDATA[protected LabelControl plHeader;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plIcon">
          <declaration><![CDATA[protected LabelControl plIcon;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plModuleContainer">
          <declaration><![CDATA[protected LabelControl plModuleContainer;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plMoniker">
          <declaration><![CDATA[protected LabelControl plMoniker;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plNewTabs">
          <declaration><![CDATA[protected LabelControl plNewTabs;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plStartDate">
          <declaration><![CDATA[protected LabelControl plStartDate;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plTab">
          <declaration><![CDATA[protected LabelControl plTab;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plTags">
          <declaration><![CDATA[protected LabelControl plTags;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plTitle">
          <declaration><![CDATA[protected LabelControl plTitle;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plVisibility">
          <declaration><![CDATA[protected LabelControl plVisibility;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plWebSlice">
          <declaration><![CDATA[protected LabelControl plWebSlice;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plWebSliceExpiry">
          <declaration><![CDATA[protected LabelControl plWebSliceExpiry;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plWebSliceTitle">
          <declaration><![CDATA[protected LabelControl plWebSliceTitle;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plWebSliceTTL">
          <declaration><![CDATA[protected LabelControl plWebSliceTTL;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="pnlSpecific">
          <declaration><![CDATA[protected Panel pnlSpecific;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="rowAllTabs">
          <declaration><![CDATA[protected HtmlGenericControl rowAllTabs;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="rowTab">
          <declaration><![CDATA[protected HtmlGenericControl rowTab;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="specificSettingsTab">
          <declaration><![CDATA[protected HtmlGenericControl specificSettingsTab;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="startDatePicker">
          <declaration><![CDATA[protected DnnDateTimePicker startDatePicker;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="termsSelector">
          <declaration><![CDATA[protected TermsSelector termsSelector;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="trnewPages">
          <declaration><![CDATA[protected HtmlGenericControl trnewPages;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtBorder">
          <declaration><![CDATA[protected TextBox txtBorder;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtCacheDuration">
          <declaration><![CDATA[protected TextBox txtCacheDuration;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtColor">
          <declaration><![CDATA[protected TextBox txtColor;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtFooter">
          <declaration><![CDATA[protected TextBox txtFooter;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtFriendlyName">
          <declaration><![CDATA[protected TextBox txtFriendlyName;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtHeader">
          <declaration><![CDATA[protected TextBox txtHeader;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtMoniker">
          <declaration><![CDATA[protected TextBox txtMoniker;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtTitle">
          <declaration><![CDATA[protected TextBox txtTitle;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtWebSliceTitle">
          <declaration><![CDATA[protected TextBox txtWebSliceTitle;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtWebSliceTTL">
          <declaration><![CDATA[protected TextBox txtWebSliceTTL;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="valBorder">
          <declaration><![CDATA[protected CompareValidator valBorder;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="valCacheTime">
          <declaration><![CDATA[protected CompareValidator valCacheTime;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="valWebSliceExpiry">
          <declaration><![CDATA[protected CompareValidator valWebSliceExpiry;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="valWebSliceTTL">
          <declaration><![CDATA[protected CompareValidator valWebSliceTTL;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="webSliceExpiry">
          <declaration><![CDATA[protected HtmlGenericControl webSliceExpiry;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="webSliceTitle">
          <declaration><![CDATA[protected HtmlGenericControl webSliceTitle;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="webSliceTTL">
          <declaration><![CDATA[protected HtmlGenericControl webSliceTTL;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="DoNotRedirectOnUpdate">
          <declaration><![CDATA[private bool DoNotRedirectOnUpdate]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="73" sc="47" el="73" ec="98">admin\Modules\Modulesettings.ascx.cs</location>
            <body hash="9d7fa7e7f72444fa4a99eb30e0e65830"><![CDATA[Request.QueryString["NoRedirectOnUpdate"] == "true]]></body>
          </codeblock>
        </property>
        <property name="HideCancelButton">
          <declaration><![CDATA[private bool HideCancelButton]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="72" sc="42" el="72" ec="85">admin\Modules\Modulesettings.ascx.cs</location>
            <body hash="9fd3351870652d6d5ac52d82c0251325"><![CDATA[Request.QueryString["HideCancel"] == "true]]></body>
          </codeblock>
        </property>
        <property name="HideDeleteButton">
          <declaration><![CDATA[private bool HideDeleteButton]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="71" sc="42" el="71" ec="85">admin\Modules\Modulesettings.ascx.cs</location>
            <body hash="98b995d7f7010dfa5af711a17208e95b"><![CDATA[Request.QueryString["HideDelete"] == "true]]></body>
          </codeblock>
        </property>
        <property name="Module">
          <declaration><![CDATA[private ModuleInfo Module]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ReturnURL">
          <declaration><![CDATA[private string ReturnURL]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="91" sc="13" el="93" ec="14">admin\Modules\Modulesettings.ascx.cs</location>
            <body hash="886024cc288178771d5df7a287e8cdef"><![CDATA[{
                return UrlUtils.ValidReturnUrl(Request.Params["ReturnURL"]) ?? Globals.NavigateURL();
            }]]></body>
          </codeblock>
        </property>
        <property name="SettingsControl">
          <declaration><![CDATA[private ISettingsControl SettingsControl]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="83" sc="13" el="85" ec="14">admin\Modules\Modulesettings.ascx.cs</location>
            <body hash="919bb4862e04c3eac040c148ee8d2432"><![CDATA[{
                return _control as ISettingsControl;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="ViewSource">
      <declaration><![CDATA[public class ViewSource : PortalModuleBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public ViewSource()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="BindFiles">
          <declaration><![CDATA[private void BindFiles(string controlSrc)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="78" sc="9" el="98" ec="10">admin\Modules\viewsource.ascx.cs</location>
            <body hash="9d986eeb27c166cfa72a34b5cb3f98ee"><![CDATA[{
            cboFile.Items.Clear();
            //cboFile.Items.Add(new ListItem(Localization.GetString("None_Specified"), "None"));
            //cboFile.Items.Add(new ListItem("User Control", "UserControl"));
            cboFile.AddItem(Localization.GetString("None_Specified"), "None");
            cboFile.AddItem("User Control", "UserControl");

            var srcPhysicalPath = Server.MapPath(controlSrc);
            if (File.Exists(srcPhysicalPath + ".vb") || File.Exists(srcPhysicalPath + ".cs"))
            {
                //cboFile.Items.Add(new ListItem("Code File", "CodeFile"));
                cboFile.AddItem("Code File", "CodeFile");
            }
            var fileName = Path.GetFileName(srcPhysicalPath);
            var folder = Path.GetDirectoryName(srcPhysicalPath);
            if (File.Exists(folder + "\\App_LocalResources\\" + fileName + ".resx"))
            {
                //cboFile.Items.Add(new ListItem("Resource File", "ResourceFile"));
                cboFile.AddItem("Resource File", "ResourceFile");
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="DisplayFile">
          <declaration><![CDATA[private void DisplayFile()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="129" sc="9" el="149" ec="10">admin\Modules\viewsource.ascx.cs</location>
            <body hash="aad6b19cccd7c0d176c17883f0a1e6ba"><![CDATA[{
            var objModuleControl = ModuleControlController.GetModuleControl(ModuleControlId);
            if (objModuleControl != null)
            {
                var srcVirtualPath = objModuleControl.ControlSrc;
                var srcFile = Null.NullString;
                var displaySource = cboFile.SelectedValue != "None";

                if (displaySource)
                {
                    srcFile = GetSourceFileName(srcVirtualPath);
                    lblSourceFile.Text = string.Format(Localization.GetString("SourceFile", LocalResourceFile), srcFile);

                    var objStreamReader = File.OpenText(srcFile);
                    txtSource.Text = objStreamReader.ReadToEnd();
                    objStreamReader.Close();
                }
                lblSourceFile.Visible = displaySource;
                trSource.Visible = displaySource;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetSourceFileName">
          <declaration><![CDATA[private string GetSourceFileName(string controlSrc)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="101" sc="9" el="126" ec="10">admin\Modules\viewsource.ascx.cs</location>
            <body hash="b0b26342b35429adcc4731f02e429066"><![CDATA[{
            var srcPhysicalPath = Server.MapPath(controlSrc);
            var srcFile = Null.NullString;
            switch (cboFile.SelectedValue)
            {
                case "UserControl":
                    srcFile = srcPhysicalPath;
                    break;
                case "CodeFile":
                    if (File.Exists(srcPhysicalPath + ".vb"))
                    {
                        srcFile = srcPhysicalPath + ".vb";
                    }
                    else if (File.Exists(srcPhysicalPath + ".cs"))
                    {
                        srcFile = srcPhysicalPath + ".cs";
                    }
                    break;
                case "ResourceFile":
                    var fileName = Path.GetFileName(srcPhysicalPath);
                    var folder = Path.GetDirectoryName(srcPhysicalPath);
                    srcFile = folder + "\\App_LocalResources\\" + fileName + ".resx";
                    break;
            }
            return srcFile;
        }]]></body>
          </codeblock>
        </method>
        <method name="OnFileIndexChanged">
          <declaration><![CDATA[protected void OnFileIndexChanged(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="185" sc="9" el="187" ec="10">admin\Modules\viewsource.ascx.cs</location>
            <body hash="304205dc8110914bdbe1f82468184942"><![CDATA[{
            DisplayFile();
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="156" sc="9" el="182" ec="10">admin\Modules\viewsource.ascx.cs</location>
            <body hash="df2531c087d5aeb3def6c1e2dceea936"><![CDATA[{
            base.OnLoad(e);

            cboFile.SelectedIndexChanged += OnFileIndexChanged;
            cmdUpdate.Click += OnUpdateClick;

            if (Page.IsPostBack == false)
            {
                cmdCancel.NavigateUrl = ReturnURL;

                var objModuleControl = ModuleControlController.GetModuleControl(ModuleControlId);
                if (objModuleControl != null)
                {
                    BindFiles(objModuleControl.ControlSrc);
                }
                if (Request.UrlReferrer != null)
                {
                    ViewState["UrlReferrer"] = Convert.ToString(Request.UrlReferrer);
                }
                else
                {
                    ViewState["UrlReferrer"] = "";
                }
            }
            cmdUpdate.Visible = CanEditSource;
            txtSource.Enabled = CanEditSource;
        }]]></body>
          </codeblock>
        </method>
        <method name="OnUpdateClick">
          <declaration><![CDATA[private void OnUpdateClick(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="190" sc="9" el="220" ec="10">admin\Modules\viewsource.ascx.cs</location>
            <body hash="3f3119b88af95a90f7481d97f300e1d1"><![CDATA[{
            try
            {
                if (cboFile.SelectedValue == "None")
                {
                    //No file type selected
                    UI.Skins.Skin.AddModuleMessage(this, Localization.GetString("NoFileTypeSelected", LocalResourceFile), ModuleMessage.ModuleMessageType.RedError);
                }
                else
                {
                    var objModuleControl = ModuleControlController.GetModuleControl(ModuleControlId);
                    if (objModuleControl != null)
                    {
                        var srcVirtualPath = objModuleControl.ControlSrc;
                        var srcPhysicalPath = GetSourceFileName(srcVirtualPath);
                        if (File.Exists(srcPhysicalPath))
                        {
                            File.SetAttributes(srcPhysicalPath, FileAttributes.Normal);
                            var objStream = File.CreateText(srcPhysicalPath);
                            objStream.WriteLine(txtSource.Text);
                            objStream.Close();
                        }
                    }
                    Response.Redirect(ReturnURL, true);
                }
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="cboFile">
          <declaration><![CDATA[protected DnnComboBox cboFile;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdCancel">
          <declaration><![CDATA[protected HyperLink cmdCancel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdUpdate">
          <declaration><![CDATA[protected LinkButton cmdUpdate;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblSourceFile">
          <declaration><![CDATA[protected Label lblSourceFile;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plFile">
          <declaration><![CDATA[protected LabelControl plFile;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plSource">
          <declaration><![CDATA[protected LabelControl plSource;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="trSource">
          <declaration><![CDATA[protected HtmlGenericControl trSource;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtSource">
          <declaration><![CDATA[protected TextBox txtSource;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="CanEditSource">
          <declaration><![CDATA[protected bool CanEditSource]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="47" sc="13" el="49" ec="14">admin\Modules\viewsource.ascx.cs</location>
            <body hash="d2b8eacbab9820b32802f28be0d70d61"><![CDATA[{
                return Request.IsLocal;
            }]]></body>
          </codeblock>
        </property>
        <property name="ModuleControlId">
          <declaration><![CDATA[protected int ModuleControlId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="55" sc="13" el="62" ec="14">admin\Modules\viewsource.ascx.cs</location>
            <body hash="b2f0e454edcdb8708604cbb8368e4cfd"><![CDATA[{
                var moduleControlId = Null.NullInteger;
                if ((Request.QueryString["ctlid"] != null))
                {
                    moduleControlId = Int32.Parse(Request.QueryString["ctlid"]);
                }
                return moduleControlId;
            }]]></body>
          </codeblock>
        </property>
        <property name="ReturnURL">
          <declaration><![CDATA[private string ReturnURL]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="68" sc="13" el="70" ec="14">admin\Modules\viewsource.ascx.cs</location>
            <body hash="886024cc288178771d5df7a287e8cdef"><![CDATA[{
                return UrlUtils.ValidReturnUrl(Request.Params["ReturnURL"]) ?? Globals.NavigateURL();
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="DotNetNuke.Modules.Admin.Sales">
    <class name="PayPalIPN">
      <declaration><![CDATA[public class PayPalIPN : PageBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public PayPalIPN()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="InitializeComponent">
          <declaration><![CDATA[private void InitializeComponent()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="49" sc="9" el="50" ec="10">admin\Sales\PayPalIPN.aspx.cs</location>
            <body hash="539fa760ca172337a931519768c64187"><![CDATA[{
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="53" sc="9" el="57" ec="10">admin\Sales\PayPalIPN.aspx.cs</location>
            <body hash="5f3c8c20cc44d36b74ae4760af9b8276"><![CDATA[{
            base.OnInit(e);

            InitializeComponent();
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="60" sc="9" el="232" ec="10">admin\Sales\PayPalIPN.aspx.cs</location>
            <body hash="d96b47a45b5b1513f6fd62bba15c11cb"><![CDATA[{
            base.OnLoad(e);
            try
            {
                bool blnValid = true;
//                string strTransactionID;
                int intRoleID = 0;
                int intPortalID = PortalSettings.PortalId;
                int intUserID = 0;
//                string strDescription;
                double dblAmount = 0;
//                string strEmail;
                bool blnCancel = false;
                string strPayPalID = Null.NullString;
                string strPost = "cmd=_notify-validate";
                foreach (string strName in Request.Form)
                {
                    string strValue = Request.Form[strName];
                    switch (strName)
                    {
                        case "txn_type": //get the transaction type
                            string strTransactionType = strValue;
                            switch (strTransactionType)
                            {
                                case "subscr_signup":
                                case "subscr_payment":
                                case "web_accept":
                                    break;
                                case "subscr_cancel":
                                    blnCancel = true;
                                    break;
                                default:
                                    blnValid = false;
                                    break;
                            }
                            break;
                        case "payment_status": //verify the status
                            if (strValue != "Completed")
                            {
                                blnValid = false;
                            }
                            break;
                        case "txn_id": //verify the transaction id for duplicates
//                            strTransactionID = strValue;
                            break;
                        case "receiver_email": //verify the PayPalId
                            strPayPalID = strValue;
                            break;
                        case "mc_gross": // verify the price
                            dblAmount = double.Parse(strValue);
                            break;
                        case "item_number": //get the RoleID
                            intRoleID = Int32.Parse(strValue);
                            //RoleInfo objRole = objRoles.GetRole(intRoleID, intPortalID);
                            break;
                        case "item_name": //get the product description
//                            strDescription = strValue;
                            break;
                        case "custom": //get the UserID
                            intUserID = Int32.Parse(strValue);
                            break;
                        case "email": //get the email
//                            strEmail = strValue;
                            break;
                    }
                    
					//reconstruct post for postback validation
					strPost += string.Format("&{0}={1}", Globals.HTTPPOSTEncode(strName), Globals.HTTPPOSTEncode(strValue));
                }
                
				//postback to verify the source
				if (blnValid)
                {
                    Dictionary<string, string> settings = PortalController.Instance.GetPortalSettings(PortalSettings.PortalId);
                    string strPayPalURL;

                    // Sandbox mode
                    if (settings.ContainsKey("paypalsandbox") && !String.IsNullOrEmpty(settings["paypalsandbox"]) && settings["paypalsandbox"].Equals("true", StringComparison.InvariantCultureIgnoreCase))
                    {
                        strPayPalURL = "https://www.sandbox.paypal.com/cgi-bin/webscr?";
                    }
                    else
                    {
                        strPayPalURL = "https://www.paypal.com/cgi-bin/webscr?";
                    }
                    var objRequest = Globals.GetExternalRequest(strPayPalURL);
                    objRequest.Method = "POST";
                    objRequest.ContentLength = strPost.Length;
                    objRequest.ContentType = "application/x-www-form-urlencoded";
                    using (var objStream = new StreamWriter(objRequest.GetRequestStream()))
                    {
                        objStream.Write(strPost);
                    }

                    string strResponse;
                    using (var objResponse = (HttpWebResponse) objRequest.GetResponse())
                    {
                        using (var sr = new StreamReader(objResponse.GetResponseStream()))
                        {
                            strResponse = sr.ReadToEnd();
                        }
                    }
                    switch (strResponse)
                    {
                        case "VERIFIED":
                            break;
                        default:
                            //possible fraud
							blnValid = false;
                            break;
                    }
                }
                if (blnValid)
                {
                    int intAdministratorRoleId = 0;
                    string strProcessorID = Null.NullString;
                    PortalInfo objPortalInfo = PortalController.Instance.GetPortal(intPortalID);
                    if (objPortalInfo != null)
                    {
                        intAdministratorRoleId = objPortalInfo.AdministratorRoleId;
                        strProcessorID = objPortalInfo.ProcessorUserId.ToLower();
                    }

                    if (intRoleID == intAdministratorRoleId)
                    {
						//admin portal renewal
                        strProcessorID = Host.ProcessorUserId.ToLower();
                        float portalPrice = objPortalInfo.HostFee;
                        if ((portalPrice.ToString() == dblAmount.ToString()) && (HttpUtility.UrlDecode(strPayPalID.ToLower()) == strProcessorID))
                        {
                            PortalController.Instance.UpdatePortalExpiry(intPortalID, PortalController.GetActivePortalLanguage(intPortalID));
                        }
                        else
                        {
                            var log = new LogInfo
                            {
                                LogPortalID = intPortalID,
                                LogPortalName = PortalSettings.PortalName,
                                LogUserID = intUserID,
                                LogTypeKey = EventLogController.EventLogType.POTENTIAL_PAYPAL_PAYMENT_FRAUD.ToString()
                            };
                            LogController.Instance.AddLog(log);
                        }
                    }
                    else
                    {
						//user subscription
                        RoleInfo objRoleInfo = RoleController.Instance.GetRole(intPortalID, r => r.RoleID == intRoleID);
                        float rolePrice = objRoleInfo.ServiceFee;
                        float trialPrice = objRoleInfo.TrialFee;
                        if ((rolePrice.ToString() == dblAmount.ToString() || trialPrice.ToString() == dblAmount.ToString()) && (HttpUtility.UrlDecode(strPayPalID.ToLower()) == strProcessorID))
                        {
                            RoleController.Instance.UpdateUserRole(intPortalID, intUserID, intRoleID, RoleStatus.Approved, false, blnCancel);
                        }
                        else
                        {
                            var log = new LogInfo
                            {
                                LogPortalID = intPortalID,
                                LogPortalName = PortalSettings.PortalName,
                                LogUserID = intUserID,
                                LogTypeKey = EventLogController.EventLogType.POTENTIAL_PAYPAL_PAYMENT_FRAUD.ToString()
                            };
                            LogController.Instance.AddLog(log);
                        }
                    }
                }
            }
            catch (Exception exc) //Page failed to load
            {
                Exceptions.ProcessPageLoadException(exc);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="PayPalSubscription">
      <declaration><![CDATA[public class PayPalSubscription : PageBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public PayPalSubscription()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
        <constructor name=".cctor">
          <declaration><![CDATA[static PayPalSubscription()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="43" sc="6" el="43" ec="105">admin\Sales\PayPalSubscription.aspx.cs</location>
            <body hash="de9228d751ff821fb2869b3a1b18b8d0"><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof (PayPalSubscription))]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="GetBillingFrequencyText">
          <declaration><![CDATA[private string GetBillingFrequencyText(string value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="242" sc="9" el="246" ec="10">admin\Sales\PayPalSubscription.aspx.cs</location>
            <body hash="a66de6ec7fe6c991a2ad87eecff5d502"><![CDATA[{
            var ctlEntry = new ListController();
            ListEntryInfo entry = ctlEntry.GetListEntryInfo("Frequency", value);
            return entry.Text;
        }]]></body>
          </codeblock>
        </method>
        <method name="InitializeComponent">
          <declaration><![CDATA[private void InitializeComponent()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="45" sc="9" el="46" ec="10">admin\Sales\PayPalSubscription.aspx.cs</location>
            <body hash="539fa760ca172337a931519768c64187"><![CDATA[{
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="49" sc="9" el="53" ec="10">admin\Sales\PayPalSubscription.aspx.cs</location>
            <body hash="5f3c8c20cc44d36b74ae4760af9b8276"><![CDATA[{
            base.OnInit(e);

            InitializeComponent();
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="56" sc="9" el="234" ec="10">admin\Sales\PayPalSubscription.aspx.cs</location>
            <body hash="a3b6cc20d69b0d92caf60cf5bacda740"><![CDATA[{
            base.OnLoad(e);
            try
            {
                UserInfo objUserInfo = null;
                int intUserID = -1;
                if (Request.IsAuthenticated)
                {
                    objUserInfo = UserController.Instance.GetCurrentUserInfo();
                    if (objUserInfo != null)
                    {
                        intUserID = objUserInfo.UserID;
                    }
                }
                int intRoleId = -1;
                if (Request.QueryString["roleid"] != null)
                {
                    intRoleId = int.Parse(Request.QueryString["roleid"]);
                }
                string strProcessorUserId = "";
                PortalInfo objPortalInfo = PortalController.Instance.GetPortal(PortalSettings.PortalId);
                if (objPortalInfo != null)
                {
                    strProcessorUserId = objPortalInfo.ProcessorUserId;
                }
                Dictionary<string, string> settings = PortalController.Instance.GetPortalSettings(PortalSettings.PortalId);
                string strPayPalURL;
                if (intUserID != -1 && intRoleId != -1 && !String.IsNullOrEmpty(strProcessorUserId))
                {
                    // Sandbox mode
                    if (settings.ContainsKey("paypalsandbox") && !String.IsNullOrEmpty(settings["paypalsandbox"]) && settings["paypalsandbox"].ToLower() == "true")
                    {
                        strPayPalURL = "https://www.sandbox.paypal.com/cgi-bin/webscr?";
                    }
                    else
                    {
                        strPayPalURL = "https://www.paypal.com/cgi-bin/webscr?";
                    }

                    if (Request.QueryString["cancel"] != null)
                    {
						//build the cancellation PayPal URL
                        strPayPalURL += "cmd=_subscr-find&alias=" + Globals.HTTPPOSTEncode(strProcessorUserId);
                    }
                    else
                    {
                        strPayPalURL += "cmd=_ext-enter";
                        RoleInfo objRole = RoleController.Instance.GetRole(PortalSettings.PortalId, r => r.RoleID == intRoleId);
                        if (objRole.RoleID != -1)
                        {
                            int intTrialPeriod = 1;
                            if (objRole.TrialPeriod != 0)
                            {
                                intTrialPeriod = objRole.TrialPeriod;
                            }
                            int intBillingPeriod = 1;
                            if (objRole.BillingPeriod != 0)
                            {
                                intBillingPeriod = objRole.BillingPeriod;
                            }
							
							//explicitely format numbers using en-US so numbers are correctly built
                            var enFormat = new CultureInfo("en-US");
                            string strService = string.Format(enFormat.NumberFormat, "{0:#####0.00}", objRole.ServiceFee);
                            string strTrial = string.Format(enFormat.NumberFormat, "{0:#####0.00}", objRole.TrialFee);
                            if (objRole.BillingFrequency == "O" || objRole.TrialFrequency == "O")
                            {
								//build the payment PayPal URL
                                strPayPalURL += "&redirect_cmd=_xclick&business=" + Globals.HTTPPOSTEncode(strProcessorUserId);
                                strPayPalURL += "&item_name=" +
                                                Globals.HTTPPOSTEncode(PortalSettings.PortalName + " - " + objRole.RoleName + " ( " + objRole.ServiceFee.ToString("#.##") + " " +
                                                                       PortalSettings.Currency + " )");
                                strPayPalURL += "&item_number=" + Globals.HTTPPOSTEncode(intRoleId.ToString());
                                strPayPalURL += "&no_shipping=1&no_note=1";
                                strPayPalURL += "&quantity=1";
                                strPayPalURL += "&amount=" + Globals.HTTPPOSTEncode(strService);
                                strPayPalURL += "&currency_code=" + Globals.HTTPPOSTEncode(PortalSettings.Currency);
                            }
                            else //recurring payments
                            {
								//build the subscription PayPal URL
                                strPayPalURL += "&redirect_cmd=_xclick-subscriptions&business=" + Globals.HTTPPOSTEncode(strProcessorUserId);
                                strPayPalURL += "&item_name=" +
                                                Globals.HTTPPOSTEncode(PortalSettings.PortalName + " - " + objRole.RoleName + " ( " + objRole.ServiceFee.ToString("#.##") + " " +
                                                                       PortalSettings.Currency + " every " + intBillingPeriod + " " + GetBillingFrequencyText(objRole.BillingFrequency) + " )");
                                strPayPalURL += "&item_number=" + Globals.HTTPPOSTEncode(intRoleId.ToString());
                                strPayPalURL += "&no_shipping=1&no_note=1";
                                if (objRole.TrialFrequency != "N")
                                {
                                    strPayPalURL += "&a1=" + Globals.HTTPPOSTEncode(strTrial);
                                    strPayPalURL += "&p1=" + Globals.HTTPPOSTEncode(intTrialPeriod.ToString());
                                    strPayPalURL += "&t1=" + Globals.HTTPPOSTEncode(objRole.TrialFrequency);
                                }
                                strPayPalURL += "&a3=" + Globals.HTTPPOSTEncode(strService);
                                strPayPalURL += "&p3=" + Globals.HTTPPOSTEncode(intBillingPeriod.ToString());
                                strPayPalURL += "&t3=" + Globals.HTTPPOSTEncode(objRole.BillingFrequency);
                                strPayPalURL += "&src=1";
                                strPayPalURL += "&currency_code=" + Globals.HTTPPOSTEncode(PortalSettings.Currency);
                            }
                        }
                        var ctlList = new ListController();

                        strPayPalURL += "&custom=" + Globals.HTTPPOSTEncode(intUserID.ToString());
                        strPayPalURL += "&first_name=" + Globals.HTTPPOSTEncode(objUserInfo.Profile.FirstName);
                        strPayPalURL += "&last_name=" + Globals.HTTPPOSTEncode(objUserInfo.Profile.LastName);
                        try
                        {
                            if (objUserInfo.Profile.Country == "United States")
                            {
                                ListEntryInfo colList = ctlList.GetListEntryInfo("Region", objUserInfo.Profile.Region);
                                strPayPalURL += "&address1=" +
                                                Globals.HTTPPOSTEncode(Convert.ToString(!String.IsNullOrEmpty(objUserInfo.Profile.Unit) ? objUserInfo.Profile.Unit + " " : "") +
                                                                       objUserInfo.Profile.Street);
                                strPayPalURL += "&city=" + Globals.HTTPPOSTEncode(objUserInfo.Profile.City);
                                strPayPalURL += "&state=" + Globals.HTTPPOSTEncode(colList.Value);
                                strPayPalURL += "&zip=" + Globals.HTTPPOSTEncode(objUserInfo.Profile.PostalCode);
                            }
                        }
						catch (Exception ex)
						{
							//issue getting user address
							Logger.Error(ex);
						}
						
                        //Return URL
                        if (settings.ContainsKey("paypalsubscriptionreturn") && !string.IsNullOrEmpty(settings["paypalsubscriptionreturn"]))
                        {
                            strPayPalURL += "&return=" + Globals.HTTPPOSTEncode(settings["paypalsubscriptionreturn"]);
                        }
                        else
                        {
                            strPayPalURL += "&return=" + Globals.HTTPPOSTEncode(Globals.AddHTTP(Globals.GetDomainName(Request)));
                        }
						
                        //Cancellation URL
                        if (settings.ContainsKey("paypalsubscriptioncancelreturn") && !string.IsNullOrEmpty(settings["paypalsubscriptioncancelreturn"]))
                        {
                            strPayPalURL += "&cancel_return=" + Globals.HTTPPOSTEncode(settings["paypalsubscriptioncancelreturn"]);
                        }
                        else
                        {
                            strPayPalURL += "&cancel_return=" + Globals.HTTPPOSTEncode(Globals.AddHTTP(Globals.GetDomainName(Request)));
                        }
						
                        //Instant Payment Notification URL
                        if (settings.ContainsKey("paypalsubscriptionnotifyurl") && !string.IsNullOrEmpty(settings["paypalsubscriptionnotifyurl"]))
                        {
                            strPayPalURL += "&notify_url=" + Globals.HTTPPOSTEncode(settings["paypalsubscriptionnotifyurl"]);
                        }
                        else
                        {
                            strPayPalURL += "&notify_url=" + Globals.HTTPPOSTEncode(Globals.AddHTTP(Globals.GetDomainName(Request)) + "/admin/Sales/PayPalIPN.aspx");
                        }
                        strPayPalURL += "&sra=1"; //reattempt on failure
                    }
					
					//redirect to PayPal
                    Response.Redirect(strPayPalURL, true);
                }
                else
                {
                    if ((settings.ContainsKey("paypalsubscriptioncancelreturn") && !string.IsNullOrEmpty(settings["paypalsubscriptioncancelreturn"])))
                    {
                        strPayPalURL = settings["paypalsubscriptioncancelreturn"];
                    }
                    else
                    {
                        strPayPalURL = Globals.AddHTTP(Globals.GetDomainName(Request));
                    }
					
					//redirect to PayPal
                    Response.Redirect(strPayPalURL, true);
                }
            }
            catch (Exception exc) //Page failed to load
            {
                Exceptions.ProcessPageLoadException(exc);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="Logger">
          <declaration><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof(PayPalSubscription));]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="Purchase">
      <declaration><![CDATA[public class Purchase : PortalModuleBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private int RoleID = -1;]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="46" sc="9" el="46" ec="33">admin\Sales\Purchase.ascx.cs</location>
            <body hash="097bd39092b8eb1e0ecb84295250296b"><![CDATA[private int RoleID = -1]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="cmdCancel_Click">
          <declaration><![CDATA[private void cmdCancel_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="197" sc="9" el="206" ec="10">admin\Sales\Purchase.ascx.cs</location>
            <body hash="c0543068aca9a229c0d529155d3c287a"><![CDATA[{
            try
            {
                Response.Redirect(Convert.ToString(ViewState["UrlReferrer"]), true);
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="cmdPurchase_Click">
          <declaration><![CDATA[private void cmdPurchase_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="151" sc="9" el="194" ec="10">admin\Sales\Purchase.ascx.cs</location>
            <body hash="aede6b4a866545e850fbe460ff182cea"><![CDATA[{
            try
            {
                string strPaymentProcessor = "";
                string strProcessorUserId = "";
                string strProcessorPassword = "";

                if (Page.IsValid)
                {
                    PortalInfo objPortalInfo = PortalController.Instance.GetPortal(PortalSettings.PortalId);
                    if (objPortalInfo != null)
                    {
                        strPaymentProcessor = objPortalInfo.PaymentProcessor;
                        strProcessorUserId = objPortalInfo.ProcessorUserId;
                        strProcessorPassword = objPortalInfo.ProcessorPassword;
                    }
                    if (strPaymentProcessor == "PayPal")
                    {
						//build secure PayPal URL
                        string strPayPalURL = "";
                        strPayPalURL = "https://www.paypal.com/xclick/business=" + Globals.HTTPPOSTEncode(strProcessorUserId);
                        strPayPalURL = strPayPalURL + "&item_name=" +
                                       Globals.HTTPPOSTEncode(PortalSettings.PortalName + " - " + lblDescription.Text + " ( " + txtUnits.Text + " units @ " + lblFee.Text + " " + lblFeeCurrency.Text +
                                                              " per " + lblFrequency.Text + " )");
                        strPayPalURL = strPayPalURL + "&item_number=" + Globals.HTTPPOSTEncode(Convert.ToString(RoleID));
                        strPayPalURL = strPayPalURL + "&quantity=1";
                        strPayPalURL = strPayPalURL + "&custom=" + Globals.HTTPPOSTEncode(UserInfo.UserID.ToString());
                        strPayPalURL = strPayPalURL + "&amount=" + Globals.HTTPPOSTEncode(lblTotal.Text);
                        strPayPalURL = strPayPalURL + "&currency_code=" + Globals.HTTPPOSTEncode(lblTotalCurrency.Text);
                        strPayPalURL = strPayPalURL + "&return=" + Globals.HTTPPOSTEncode("http://" + Globals.GetDomainName(Request));
                        strPayPalURL = strPayPalURL + "&cancel_return=" + Globals.HTTPPOSTEncode("http://" + Globals.GetDomainName(Request));
                        strPayPalURL = strPayPalURL + "&notify_url=" + Globals.HTTPPOSTEncode("http://" + Globals.GetDomainName(Request) + "/admin/Sales/PayPalIPN.aspx");
                        strPayPalURL = strPayPalURL + "&undefined_quantity=&no_note=1&no_shipping=1";

                        //redirect to PayPal
                        Response.Redirect(strPayPalURL, true);
                    }
                }
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="ConvertCurrency">
          <declaration><![CDATA[private double ConvertCurrency(string Amount, string FromCurrency, string ToCurrency)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="209" sc="9" el="241" ec="10">admin\Sales\Purchase.ascx.cs</location>
            <body hash="df8b1da0fa57f75d69394ac248d3e5e0"><![CDATA[{
            string strPost = "Amount=" + Amount + "&From=" + FromCurrency + "&To=" + ToCurrency;
            double retValue = 0;
            try
            {
                var objRequest = Globals.GetExternalRequest("http://www.xe.com/ucc/convert.cgi");
                objRequest.Method = "POST";
                objRequest.ContentLength = strPost.Length;
                objRequest.ContentType = "application/x-www-form-urlencoded";

                using (var objStream = new StreamWriter(objRequest.GetRequestStream()))
                {
                    objStream.Write(strPost);
                    objStream.Close();
                }


                var objResponse = (HttpWebResponse) objRequest.GetResponse();
                using (var sr = new StreamReader(objResponse.GetResponseStream()))
                {
                    string strResponse = sr.ReadToEnd();
                    int intPos1 = strResponse.IndexOf(ToCurrency + "</B>");
                    int intPos2 = strResponse.LastIndexOf("<B>", intPos1);

                    retValue = Convert.ToDouble(strResponse.Substring(intPos2 + 3, (intPos1 - intPos2) - 4));
                }
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
            return retValue;
        }]]></body>
          </codeblock>
        </method>
        <method name="InitializeComponent">
          <declaration><![CDATA[private void InitializeComponent()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="49" sc="9" el="50" ec="10">admin\Sales\Purchase.ascx.cs</location>
            <body hash="539fa760ca172337a931519768c64187"><![CDATA[{
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="53" sc="9" el="57" ec="10">admin\Sales\Purchase.ascx.cs</location>
            <body hash="5f3c8c20cc44d36b74ae4760af9b8276"><![CDATA[{
            base.OnInit(e);

            InitializeComponent();
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="60" sc="9" el="148" ec="10">admin\Sales\Purchase.ascx.cs</location>
            <body hash="bfdac93fda858308711f890eb946d6ba"><![CDATA[{
            base.OnLoad(e);

            cmdPurchase.Click += cmdPurchase_Click;
            cmdCancel.Click += cmdCancel_Click;

            try
            {
                double dblTotal;
                string strCurrency;

                if ((Request.QueryString["RoleID"] != null))
                {
                    RoleID = Int32.Parse(Request.QueryString["RoleID"]);
                }
                if (Page.IsPostBack == false)
                {
                    if (RoleID != -1)
                    {
                        RoleInfo objRole = RoleController.Instance.GetRole(PortalSettings.PortalId, r => r.RoleID == RoleID);

                        if (objRole.RoleID != -1)
                        {
                            lblServiceName.Text = objRole.RoleName;
                            if (!Null.IsNull(objRole.Description))
                            {
                                lblDescription.Text = objRole.Description;
                            }
                            if (RoleID == PortalSettings.AdministratorRoleId)
                            {
                                if (!Null.IsNull(PortalSettings.HostFee))
                                {
                                    lblFee.Text = PortalSettings.HostFee.ToString("#,##0.00");
                                }
                            }
                            else
                            {
                                if (!Null.IsNull(objRole.ServiceFee))
                                {
                                    lblFee.Text = objRole.ServiceFee.ToString("#,##0.00");
                                }
                            }
                            if (!Null.IsNull(objRole.BillingFrequency))
                            {
                                var ctlEntry = new ListController();
                                ListEntryInfo entry = ctlEntry.GetListEntryInfo("Frequency", objRole.BillingFrequency);
                                lblFrequency.Text = entry.Text;
                            }
                            txtUnits.Text = "1";
                            if (objRole.BillingFrequency == "O") //one-time fee
                            {
                                txtUnits.Enabled = false;
                            }
                        }
                        else //security violation attempt to access item not related to this Module
                        {
                            Response.Redirect(Globals.NavigateURL(), true);
                        }
                    }
					
                    //Store URL Referrer to return to portal
                    if (Request.UrlReferrer != null)
                    {
                        ViewState["UrlReferrer"] = Convert.ToString(Request.UrlReferrer);
                    }
                    else
                    {
                        ViewState["UrlReferrer"] = "";
                    }
                }
                if (RoleID == PortalSettings.AdministratorRoleId)
                {
                    strCurrency = Host.HostCurrency;
                }
                else
                {
                    strCurrency = PortalSettings.Currency;
                }
                dblTotal = Convert.ToDouble(lblFee.Text)*Convert.ToDouble(txtUnits.Text);
                lblTotal.Text = dblTotal.ToString("#.##");

                lblFeeCurrency.Text = strCurrency;
                lblTotalCurrency.Text = strCurrency;
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="cmdCancel">
          <declaration><![CDATA[protected LinkButton cmdCancel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdPurchase">
          <declaration><![CDATA[protected LinkButton cmdPurchase;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdUpdate">
          <declaration><![CDATA[protected LinkButton cmdUpdate;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblDescription">
          <declaration><![CDATA[protected Label lblDescription;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblFee">
          <declaration><![CDATA[protected Label lblFee;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblFeeCurrency">
          <declaration><![CDATA[protected Label lblFeeCurrency;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblFrequency">
          <declaration><![CDATA[protected Label lblFrequency;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblServiceName">
          <declaration><![CDATA[protected Label lblServiceName;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblTotal">
          <declaration><![CDATA[protected Label lblTotal;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblTotalCurrency">
          <declaration><![CDATA[protected Label lblTotalCurrency;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="RoleID">
          <declaration><![CDATA[private int RoleID = -1;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtUnits">
          <declaration><![CDATA[protected TextBox txtUnits;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="valUnits1">
          <declaration><![CDATA[protected RequiredFieldValidator valUnits1;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="valUnits2">
          <declaration><![CDATA[protected CompareValidator valUnits2;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="valUnits3">
          <declaration><![CDATA[protected CompareValidator valUnits3;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="DotNetNuke.Modules.Admin.Security">
    <class name="AccessDeniedPage">
      <declaration><![CDATA[public class AccessDeniedPage : PortalModuleBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public AccessDeniedPage()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="37" sc="9" el="50" ec="10">admin\Security\AccessDenied.ascx.cs</location>
            <body hash="27d6604e832a89f146e9d7efbb519dad"><![CDATA[{
            base.OnLoad(e);
            string message = null;
            Guid messageGuid;
            var guidText = Request.QueryString["message"];
            if (!string.IsNullOrEmpty(guidText) && Guid.TryParse(guidText, out messageGuid))
            {
                message = HttpUtility.HtmlEncode(DataProvider.Instance().GetRedirectMessage(messageGuid));
            }

            UI.Skins.Skin.AddModuleMessage(this,
                !string.IsNullOrEmpty(message) ? message : Localization.GetString("AccessDenied", LocalResourceFile),
                ModuleMessage.ModuleMessageType.YellowWarning);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="MemberServices">
      <declaration><![CDATA[public class MemberServices : UserModuleBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public MemberServices()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="add_SubscriptionUpdated">
          <declaration><![CDATA[public void add_SubscriptionUpdated(MemberServices.SubscriptionUpdatedEventHandler value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="cmdRSVP_Click">
          <declaration><![CDATA[private void cmdRSVP_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="433" sc="9" el="467" ec="10">DesktopModules\Admin\Security\MemberServices.ascx.cs</location>
            <body hash="4964b0d0b6c4fd0166f93a277951282d"><![CDATA[{
            if (IsUserOrAdmin == false)
            {
                return;
            }
            //Get the RSVP code
            string code = txtRSVPCode.Text;
            bool rsvpCodeExists = false;
            if (!String.IsNullOrEmpty(code))
            {
                //Parse the roles
                foreach (RoleInfo objRole in RoleController.Instance.GetRoles(PortalSettings.PortalId))
                {
                    if (objRole.RSVPCode == code)
                    {
                        RoleController.Instance.UpdateUserRole(PortalId, UserInfo.UserID, objRole.RoleID, RoleStatus.Approved, false, false);
                        rsvpCodeExists = true;

                        //Raise SubscriptionUpdated Event
                        OnSubscriptionUpdated(new SubscriptionUpdatedEventArgs(false, objRole.RoleName));
                    }
                }
                if (rsvpCodeExists)
                {
                    lblRSVP.Text = Localization.GetString("RSVPSuccess", LocalResourceFile);
                    //Reset RSVP Code field
                    txtRSVPCode.Text = "";
                }
                else
                {
                    lblRSVP.Text = Localization.GetString("RSVPFailure", LocalResourceFile);
                }
            }
            DataBind();
        }]]></body>
          </codeblock>
        </method>
        <method name="DataBind">
          <declaration><![CDATA[public override void DataBind()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="358" sc="9" el="367" ec="10">DesktopModules\Admin\Security\MemberServices.ascx.cs</location>
            <body hash="21a34f7091fd147758e63750ae5f6729"><![CDATA[{
            if (Request.IsAuthenticated)
            {
                grdServices.DataSource = RoleController.Instance.GetUserRoles(UserInfo, false);
                grdServices.DataBind();

                //if no service available then hide options
                ServicesRow.Visible = (grdServices.Items.Count > 0);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="FormatExpiryDate">
          <declaration><![CDATA[protected string FormatExpiryDate(DateTime expiryDate)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="149" sc="9" el="170" ec="10">DesktopModules\Admin\Security\MemberServices.ascx.cs</location>
            <body hash="da90200696e05efb077d9e340d4f8cd9"><![CDATA[{
            string formatExpiryDate = Null.NullString;
            try
            {
                if (!Null.IsNull(expiryDate))
                {
                    if (expiryDate > DateTime.Today)
                    {
                        formatExpiryDate = expiryDate.ToShortDateString();
                    }
                    else
                    {
                        formatExpiryDate = Localization.GetString("Expired", LocalResourceFile);
                    }
                }
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
            return formatExpiryDate;
        }]]></body>
          </codeblock>
        </method>
        <method name="FormatPrice">
          <declaration><![CDATA[private string FormatPrice(float price)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="74" sc="9" el="92" ec="10">DesktopModules\Admin\Security\MemberServices.ascx.cs</location>
            <body hash="3556a18345dea6ec3ad7ef026a4c177a"><![CDATA[{
            string formatPrice = Null.NullString;
            try
            {
                if (price != Null.NullSingle)
                {
                    formatPrice = price.ToString("##0.00");
                }
                else
                {
                    formatPrice = "";
                }
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
            return formatPrice;
        }]]></body>
          </codeblock>
        </method>
        <method name="FormatPrice">
          <declaration><![CDATA[protected string FormatPrice(float price, int period, string frequency)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="182" sc="9" el="205" ec="10">DesktopModules\Admin\Security\MemberServices.ascx.cs</location>
            <body hash="af2244274e3fa0a8160159a4dff6bb70"><![CDATA[{
            string formatPrice = Null.NullString;
            try
            {
                switch (frequency)
                {
                    case "N":
                    case "":
                        formatPrice = Localization.GetString("NoFee", LocalResourceFile);
                        break;
                    case "O":
                        formatPrice = FormatPrice(price);
                        break;
                    default:
                        formatPrice = string.Format(Localization.GetString("Fee", LocalResourceFile), FormatPrice(price), period, Localization.GetString("Frequency_" + frequency, LocalResourceFile));
                        break;
                }
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
            return formatPrice;
        }]]></body>
          </codeblock>
        </method>
        <method name="FormatTrial">
          <declaration><![CDATA[protected string FormatTrial(float price, int period, string frequency)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="217" sc="9" el="243" ec="10">DesktopModules\Admin\Security\MemberServices.ascx.cs</location>
            <body hash="ffc1cddf2860c4f6e448b06abdad574c"><![CDATA[{
            string formatTrial = Null.NullString;
            try
            {
                switch (frequency)
                {
                    case "N":
                    case "":
                        formatTrial = Localization.GetString("NoFee", LocalResourceFile);
                        break;
                    case "O":
                        formatTrial = FormatPrice(price);
                        break;
                    default:
                        formatTrial = string.Format(Localization.GetString("TrialFee", LocalResourceFile),
                                                     FormatPrice(price),
                                                     period,
                                                     Localization.GetString("Frequency_" + frequency, LocalResourceFile));
                        break;
                }
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
            return formatTrial;
        }]]></body>
          </codeblock>
        </method>
        <method name="FormatURL">
          <declaration><![CDATA[protected string FormatURL()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="254" sc="9" el="270" ec="10">DesktopModules\Admin\Security\MemberServices.ascx.cs</location>
            <body hash="58230087f9de2523abb58c4652c902f8"><![CDATA[{
            string formatURL = Null.NullString;
            try
            {
                string serverPath = Request.ApplicationPath;
                if (!serverPath.EndsWith("/"))
                {
                    serverPath += "/";
                }
                formatURL = serverPath + "Register.aspx?tabid=" + TabId;
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
            return formatURL;
        }]]></body>
          </codeblock>
        </method>
        <method name="grdServices_ItemCommand">
          <declaration><![CDATA[protected void grdServices_ItemCommand(object source, DataGridCommandEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="470" sc="9" el="496" ec="10">DesktopModules\Admin\Security\MemberServices.ascx.cs</location>
            <body hash="abfff2bb710df55808d457c7427c1f5e"><![CDATA[{
            string commandName = e.CommandName;
            int roleID = Convert.ToInt32(e.CommandArgument);
            if (commandName == Localization.GetString("Subscribe", LocalResourceFile) || commandName == Localization.GetString("Renew", LocalResourceFile))
            {
				//Subscribe
                Subscribe(roleID, false);
            }
            else if (commandName == Localization.GetString("Unsubscribe", LocalResourceFile))
            {
				//Unsubscribe
                Subscribe(roleID, true);
            }
            else if (commandName == Localization.GetString("Unsubscribe", LocalResourceFile))
            {
				//Unsubscribe
                Subscribe(roleID, true);
            }
            else if (commandName == "UseTrial")
            {
				//Use Trial
                UseTrial(roleID);
            }
			
			//Rebind Grid
            DataBind();
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="402" sc="9" el="423" ec="10">DesktopModules\Admin\Security\MemberServices.ascx.cs</location>
            <body hash="02cd7213bcd44194d7f18fb2916f980d"><![CDATA[{
            base.OnLoad(e);

            cmdRSVP.Click += cmdRSVP_Click;
            grdServices.ItemCommand += grdServices_ItemCommand;

            try
            {
                lblRSVP.Text = "";

                //If this is the first visit to the page, localize the datalist
                if (Page.IsPostBack == false)
                {
					//Localize the Headers
                    Localization.LocalizeDataGrid(ref grdServices, LocalResourceFile);
                }
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnSubscriptionUpdated">
          <declaration><![CDATA[public void OnSubscriptionUpdated(MemberServices.SubscriptionUpdatedEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="379" sc="9" el="388" ec="10">DesktopModules\Admin\Security\MemberServices.ascx.cs</location>
            <body hash="d1dd23acedb9d2c3a3059c11aef9af9e"><![CDATA[{
            if (IsUserOrAdmin == false)
            {
                return;
            }
            if (SubscriptionUpdated != null)
            {
                SubscriptionUpdated(this, e);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="remove_SubscriptionUpdated">
          <declaration><![CDATA[public void remove_SubscriptionUpdated(MemberServices.SubscriptionUpdatedEventHandler value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="ServiceText">
          <declaration><![CDATA[protected string ServiceText(bool subscribed, DateTime expiryDate)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="282" sc="9" el="307" ec="10">DesktopModules\Admin\Security\MemberServices.ascx.cs</location>
            <body hash="0becf31214083ee468d59bd8a87f62ff"><![CDATA[{
            string serviceText = Null.NullString;
            try
            {
                if (!subscribed)
                {
                    serviceText = Localization.GetString("Subscribe", LocalResourceFile);
                }
                else
                {
                    serviceText = Localization.GetString("Unsubscribe", LocalResourceFile);
                    if (!Null.IsNull(expiryDate))
                    {
                        if (expiryDate < DateTime.Today)
                        {
                            serviceText = Localization.GetString("Renew", LocalResourceFile);
                        }
                    }
                }
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
            return serviceText;
        }]]></body>
          </codeblock>
        </method>
        <method name="ShowSubscribe">
          <declaration><![CDATA[protected bool ShowSubscribe(int roleID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="310" sc="9" el="326" ec="10">DesktopModules\Admin\Security\MemberServices.ascx.cs</location>
            <body hash="6e55f44b1dd893fdca455a942d06203b"><![CDATA[{
            bool showSubscribe = Null.NullBoolean;
            RoleInfo objRole = RoleController.Instance.GetRole(PortalSettings.PortalId, r => r.RoleID == roleID); ;
            if (objRole.IsPublic)
            {
                PortalInfo objPortal = PortalController.Instance.GetPortal(PortalSettings.PortalId);
                if (objRole.ServiceFee == 0.0)
                {
                    showSubscribe = true;
                }
                else if (objPortal != null && !string.IsNullOrEmpty(objPortal.ProcessorUserId))
                {
                    showSubscribe = true;
                }
            }
            return showSubscribe;
        }]]></body>
          </codeblock>
        </method>
        <method name="ShowTrial">
          <declaration><![CDATA[protected bool ShowTrial(int roleID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="329" sc="9" el="346" ec="10">DesktopModules\Admin\Security\MemberServices.ascx.cs</location>
            <body hash="c9a253adddbda8ec0201dace82fdfa28"><![CDATA[{
            bool showTrial = Null.NullBoolean;
            RoleInfo objRole = RoleController.Instance.GetRole(PortalSettings.PortalId, r => r.RoleID == roleID); ;
            if (string.IsNullOrEmpty(objRole.TrialFrequency) || objRole.TrialFrequency == "N" || (objRole.IsPublic && objRole.ServiceFee == 0.0))
            {
                showTrial = Null.NullBoolean;
            }
            else if (objRole.IsPublic && objRole.TrialFee == 0.0)
            {
				//Use Trial?
                UserRoleInfo objUserRole = RoleController.Instance.GetUserRole(PortalId, UserInfo.UserID, roleID);
                if ((objUserRole == null) || (!objUserRole.IsTrialUsed))
                {
                    showTrial = true;
                }
            }
            return showTrial;
        }]]></body>
          </codeblock>
        </method>
        <method name="Subscribe">
          <declaration><![CDATA[private void Subscribe(int roleID, bool cancel)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="95" sc="9" el="116" ec="10">DesktopModules\Admin\Security\MemberServices.ascx.cs</location>
            <body hash="2d953954aa2c5089df268c0fb47eacee"><![CDATA[{
            RoleInfo objRole = RoleController.Instance.GetRole(PortalSettings.PortalId, r => r.RoleID == roleID);

            if (objRole.IsPublic && objRole.ServiceFee == 0.0)
            {
                RoleController.Instance.UpdateUserRole(PortalId, UserInfo.UserID, roleID, RoleStatus.Approved, false, cancel);

                //Raise SubscriptionUpdated Event
                OnSubscriptionUpdated(new SubscriptionUpdatedEventArgs(cancel, objRole.RoleName));
            }
            else
            {
                if (!cancel)
                {
                    Response.Redirect("~/admin/Sales/PayPalSubscription.aspx?tabid=" + TabId + "&RoleID=" + roleID, true);
                }
                else
                {
                    Response.Redirect("~/admin/Sales/PayPalSubscription.aspx?tabid=" + TabId + "&RoleID=" + roleID + "&cancel=1", true);
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="UseTrial">
          <declaration><![CDATA[private void UseTrial(int roleID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="119" sc="9" el="133" ec="10">DesktopModules\Admin\Security\MemberServices.ascx.cs</location>
            <body hash="20be6ddeee58ff29ce5a0a9c03ba1906"><![CDATA[{
            RoleInfo objRole = RoleController.Instance.GetRole(PortalSettings.PortalId, r => r.RoleID == roleID); ;

            if (objRole.IsPublic && objRole.TrialFee == 0.0)
            {
                RoleController.Instance.UpdateUserRole(PortalId, UserInfo.UserID, roleID, RoleStatus.Approved, false, false);

                //Raise SubscriptionUpdated Event
                OnSubscriptionUpdated(new SubscriptionUpdatedEventArgs(false, objRole.RoleName));
            }
            else
            {
                Response.Redirect("~/admin/Sales/PayPalSubscription.aspx?tabid=" + TabId + "&RoleID=" + roleID, true);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="cmdRSVP">
          <declaration><![CDATA[protected LinkButton cmdRSVP;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="grdServices">
          <declaration><![CDATA[protected DataGrid grdServices;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblRSVP">
          <declaration><![CDATA[protected Label lblRSVP;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblRSVPHelp">
          <declaration><![CDATA[protected Label lblRSVPHelp;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblServices">
          <declaration><![CDATA[protected Label lblServices;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblServicesHelp">
          <declaration><![CDATA[protected Label lblServicesHelp;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plRSVPCode">
          <declaration><![CDATA[protected LabelControl plRSVPCode;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ServicesRow">
          <declaration><![CDATA[protected HtmlGenericControl ServicesRow;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="SubscriptionUpdated">
          <declaration><![CDATA[private MemberServices.SubscriptionUpdatedEventHandler SubscriptionUpdated;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtRSVPCode">
          <declaration><![CDATA[protected TextBox txtRSVPCode;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
        <event name="SubscriptionUpdated">
          <declaration><![CDATA[public event MemberServices.SubscriptionUpdatedEventHandler SubscriptionUpdated;]]></declaration>
          <documentation>
          </documentation>
        </event>
      </events>
    </class>
    <class name="PasswordReset">
      <declaration><![CDATA[public class PasswordReset : UserModuleBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public PasswordReset()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="cmdChangePassword_Click">
          <declaration><![CDATA[private void cmdChangePassword_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="190" sc="9" el="276" ec="10">admin\Security\PasswordReset.ascx.cs</location>
            <body hash="f22f13ee1477a2aadf52bd4af6ff52e6"><![CDATA[{
            string username = txtUsername.Text;

            if (MembershipProviderConfig.RequiresQuestionAndAnswer && string.IsNullOrEmpty(txtAnswer.Text))
            {
                return;
            }

            //1. Check New Password and Confirm are the same
            if (txtPassword.Text != txtConfirmPassword.Text)
            {
                resetMessages.Visible = true;
                var failed = Localization.GetString("PasswordMismatch");
                LogFailure(failed);
                lblHelp.Text = failed;
                return;
            }

            var newPassword = txtPassword.Text.Trim();
            if (UserController.ValidatePassword(newPassword) ==false)
            {
                resetMessages.Visible = true;
                var failed = Localization.GetString("PasswordResetFailed");
                LogFailure(failed);
                lblHelp.Text = failed;
                return;    
            }

            //Check New Password is not same as username or banned
            var settings = new MembershipPasswordSettings(User.PortalID);

            if (settings.EnableBannedList)
            {
                var m = new MembershipPasswordController();
                if (m.FoundBannedPassword(newPassword) || txtUsername.Text == newPassword)
                {
                    resetMessages.Visible = true;
                    var failed = Localization.GetString("PasswordResetFailed");
                    LogFailure(failed);
                    lblHelp.Text = failed;
                    return;  
                }
            }

            if (PortalController.GetPortalSettingAsBoolean("Registration_UseEmailAsUserName", PortalId, false))
            {
                var testUser = UserController.GetUserByEmail(PortalId, username); // one additonal call to db to see if an account with that email actually exists
                if (testUser != null)
                {
                    username = testUser.Username; //we need the username of the account in order to change the password in the next step
                }
            }
            string errorMessage;
            string answer = String.Empty;
            if (MembershipProviderConfig.RequiresQuestionAndAnswer)
            {
                answer = txtAnswer.Text;
            }

            if (UserController.ChangePasswordByToken(PortalSettings.PortalId, username, newPassword, answer, ResetToken, out errorMessage) == false)
            {
                resetMessages.Visible = true;
                var failed = errorMessage;
                LogFailure(failed);
                lblHelp.Text = failed;
            }
            else
            {
                //check user has a valid profile
                var user = UserController.GetUserByName(PortalSettings.PortalId, username);
                var validStatus = UserController.ValidateUser(user, PortalSettings.PortalId, false);
                if (validStatus == UserValidStatus.UPDATEPROFILE)
                {
                    LogSuccess();
                    ViewState.Add("PageNo", 3);
                    Response.Redirect(Globals.NavigateURL(PortalSettings.ActiveTab.TabID, "Login"));
                }
                else
                {
                    //Log user in to site
                    LogSuccess();
                    var loginStatus = UserLoginStatus.LOGIN_FAILURE;
                    UserController.UserLogin(PortalSettings.PortalId, username, txtPassword.Text, "", "", "", ref loginStatus, false);
                    RedirectAfterLogin();
                }            
            }           
        }]]></body>
          </codeblock>
        </method>
        <method name="LoadUserInfo">
          <declaration><![CDATA[private void LoadUserInfo()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="126" sc="9" el="143" ec="10">admin\Security\PasswordReset.ascx.cs</location>
            <body hash="b959d2c59a4fc81bafa2a88bd28644d4"><![CDATA[{
            var user = UserController.GetUserByPasswordResetToken(PortalId, ResetToken);

            if (user == null)
            {
                divPassword.Visible = false;
                resetMessages.Visible = true;
                lblHelp.Text = Localization.GetString("ResetLinkExpired", LocalResourceFile);
                return;
            }

            txtUsername.Text = user.Username;
            if (MembershipProviderConfig.RequiresQuestionAndAnswer)
            {
                lblQuestion.Text = user.Membership.PasswordQuestion;
                divQA.Visible = true;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="LogFailure">
          <declaration><![CDATA[private void LogFailure(string reason)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="345" sc="9" el="347" ec="10">admin\Security\PasswordReset.ascx.cs</location>
            <body hash="6ae11ec85f2fbb19f9a679a3e43b8a41"><![CDATA[{
            LogResult(reason);
        }]]></body>
          </codeblock>
        </method>
        <method name="LogResult">
          <declaration><![CDATA[private void LogResult(string message)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="350" sc="9" el="370" ec="10">admin\Security\PasswordReset.ascx.cs</location>
            <body hash="60082b06e6e94fb6d02d52319e16d28c"><![CDATA[{
            var log = new LogInfo
            {
                LogPortalID = PortalSettings.PortalId,
                LogPortalName = PortalSettings.PortalName,
                LogUserID = UserId
            };

            if (string.IsNullOrEmpty(message))
            {
                log.LogTypeKey = "PASSWORD_SENT_SUCCESS";
            }
            else
            {
                log.LogTypeKey = "PASSWORD_SENT_FAILURE";
                log.LogProperties.Add(new LogDetailInfo("Cause", message));
            }
            log.AddProperty("IP", _ipAddress);
            
            LogController.Instance.AddLog(log);
        }]]></body>
          </codeblock>
        </method>
        <method name="LogSuccess">
          <declaration><![CDATA[private void LogSuccess()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="340" sc="9" el="342" ec="10">admin\Security\PasswordReset.ascx.cs</location>
            <body hash="dac4dc755ecca3dcb125aec00a771ee8"><![CDATA[{
            LogResult(string.Empty);
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="73" sc="9" el="123" ec="10">admin\Security\PasswordReset.ascx.cs</location>
            <body hash="1f8bdf7972354251097b6a37d5bf008f"><![CDATA[{
            base.OnLoad(e);
            _ipAddress = Request.UserHostAddress;

			JavaScript.RequestRegistration(CommonJs.DnnPlugins);
			ClientResourceManager.RegisterScript(Page, "~/Resources/Shared/scripts/dnn.jquery.extensions.js");
			ClientResourceManager.RegisterScript(Page, "~/Resources/Shared/scripts/dnn.jquery.tooltip.js");
			ClientResourceManager.RegisterScript(Page, "~/Resources/Shared/scripts/dnn.PasswordStrength.js");
			ClientResourceManager.RegisterScript(Page, "~/DesktopModules/Admin/Security/Scripts/dnn.PasswordComparer.js");

			ClientResourceManager.RegisterStyleSheet(Page, "~/Resources/Shared/stylesheets/dnn.PasswordStrength.css", FileOrder.Css.ResourceCss);

            if (PortalSettings.LoginTabId != -1 && PortalSettings.ActiveTab.TabID != PortalSettings.LoginTabId)
            {
                Response.Redirect(Globals.NavigateURL(PortalSettings.LoginTabId) + Request.Url.Query);
            }
            cmdChangePassword.Click +=cmdChangePassword_Click;
            
            hlCancel.NavigateUrl = Globals.NavigateURL();

            if (Request.QueryString["resetToken"] != null)
            {
                ResetToken = Request.QueryString["resetToken"];
                
            }

	        var useEmailAsUserName = PortalController.GetPortalSettingAsBoolean("Registration_UseEmailAsUserName", PortalId, false);
			if (useEmailAsUserName)
            {
                valUsername.Text = Localization.GetString("Email.Required", LocalResourceFile);
            }
            else
            {
                valUsername.Text = Localization.GetString("Username.Required", LocalResourceFile);
            }

            if (Request.QueryString["forced"] == "true")
            {
                lblInfo.Text = Localization.GetString("ForcedResetInfo", LocalResourceFile);
            }

			txtUsername.Attributes.Add("data-default",useEmailAsUserName ? LocalizeString("Email") : LocalizeString("Username"));
			txtPassword.Attributes.Add("data-default", LocalizeString("Password"));
			txtConfirmPassword.Attributes.Add("data-default", LocalizeString("Confirm"));
            txtAnswer.Attributes.Add("data-default", LocalizeString("Answer"));

            if (!Page.IsPostBack)
            {
                LoadUserInfo();
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnPreRender">
          <declaration><![CDATA[protected override void OnPreRender(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="146" sc="9" el="187" ec="10">admin\Security\PasswordReset.ascx.cs</location>
            <body hash="534f78863bcc5073bd6651cfc120aad1"><![CDATA[{
            base.OnPreRender(e);
            if (!string.IsNullOrEmpty(lblHelp.Text) || !string.IsNullOrEmpty(lblInfo.Text))
                resetMessages.Visible = true;

			var options = new DnnPaswordStrengthOptions();
			var optionsAsJsonString = Json.Serialize(options);
			var script = string.Format("dnn.initializePasswordStrength('.{0}', {1});{2}",
				"password-strength", optionsAsJsonString, Environment.NewLine);

			if (ScriptManager.GetCurrent(Page) != null)
			{
				// respect MS AJAX
				ScriptManager.RegisterStartupScript(Page, GetType(), "PasswordStrength", script, true);
			}
			else
			{
				Page.ClientScript.RegisterStartupScript(GetType(), "PasswordStrength", script, true);
			}

			var confirmPasswordOptions = new DnnConfirmPasswordOptions()
			{
				FirstElementSelector = ".password-strength",
				SecondElementSelector = ".password-confirm",
				ContainerSelector = ".dnnPasswordReset",
				UnmatchedCssClass = "unmatched",
				MatchedCssClass = "matched"
			};

			optionsAsJsonString = Json.Serialize(confirmPasswordOptions);
			script = string.Format("dnn.initializePasswordComparer({0});{1}", optionsAsJsonString, Environment.NewLine);

			if (ScriptManager.GetCurrent(Page) != null)
			{
				// respect MS AJAX
				ScriptManager.RegisterStartupScript(Page, GetType(), "ConfirmPassword", script, true);
			}
			else
			{
				Page.ClientScript.RegisterStartupScript(GetType(), "ConfirmPassword", script, true);
			}
        }]]></body>
          </codeblock>
        </method>
        <method name="RedirectAfterLogin">
          <declaration><![CDATA[protected void RedirectAfterLogin()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="279" sc="9" el="337" ec="10">admin\Security\PasswordReset.ascx.cs</location>
            <body hash="8937cf4195e1658e48e3a9beef07d900"><![CDATA[{
            var redirectURL = "";

            var setting = GetSetting(PortalId, "Redirect_AfterLogin");

            if (Convert.ToInt32(setting) == Null.NullInteger)
            {
                if (Request.QueryString["returnurl"] != null)
                {
                    //return to the url passed to signin
                    redirectURL = HttpUtility.UrlDecode(Request.QueryString["returnurl"]);

                    //clean the return url to avoid possible XSS attack.
                    redirectURL = UrlUtils.ValidReturnUrl(redirectURL);
                }

                if (Request.Cookies["returnurl"] != null)
                {
                    //return to the url passed to signin
                    redirectURL = HttpUtility.UrlDecode(Request.Cookies["returnurl"].Value);

                    //clean the return url to avoid possible XSS attack.
                    redirectURL = UrlUtils.ValidReturnUrl(redirectURL);
                }
                if (String.IsNullOrEmpty(redirectURL))
                {
                    if (PortalSettings.LoginTabId != -1 && PortalSettings.HomeTabId != -1)
                    {
                        //redirect to portal home page specified
                        redirectURL = Globals.NavigateURL(PortalSettings.HomeTabId);
                    }
                    else
                    {
                        //redirect to current page 
                        redirectURL = Globals.NavigateURL();
                    }
                }
            }
            else //redirect to after login page
            {
                redirectURL = Globals.NavigateURL(Convert.ToInt32(setting));
            }

			AddModuleMessage("ChangeSuccessful", ModuleMessage.ModuleMessageType.GreenSuccess, true);
	        resetMessages.Visible = divPassword.Visible = false;
            lblHelp.Text = lblInfo.Text = string.Empty;

            //redirect page after 5 seconds
            var script = string.Format("setTimeout(function(){{location.href = '{0}';}}, {1});", redirectURL, RedirectTimeout);
            if (ScriptManager.GetCurrent(Page) != null)
            {
                // respect MS AJAX
                ScriptManager.RegisterStartupScript(Page, GetType(), "ChangePasswordSuccessful", script, true);
            }
            else
            {
                Page.ClientScript.RegisterStartupScript(GetType(), "ChangePasswordSuccessful", script, true);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_ipAddress">
          <declaration><![CDATA[private string _ipAddress;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdChangePassword">
          <declaration><![CDATA[protected LinkButton cmdChangePassword;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="divPassword">
          <declaration><![CDATA[protected Panel divPassword;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="divQA">
          <declaration><![CDATA[protected HtmlGenericControl divQA;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="hlCancel">
          <declaration><![CDATA[protected HyperLink hlCancel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblHelp">
          <declaration><![CDATA[protected Label lblHelp;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblInfo">
          <declaration><![CDATA[protected Label lblInfo;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblQuestion">
          <declaration><![CDATA[protected Label lblQuestion;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="liLogin">
          <declaration><![CDATA[protected HtmlGenericControl liLogin;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="passwordContainer">
          <declaration><![CDATA[protected Panel passwordContainer;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="RedirectTimeout">
          <declaration><![CDATA[private const int RedirectTimeout = 3000;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="resetMessages">
          <declaration><![CDATA[protected HtmlGenericControl resetMessages;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtAnswer">
          <declaration><![CDATA[protected TextBox txtAnswer;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtConfirmPassword">
          <declaration><![CDATA[protected TextBox txtConfirmPassword;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtPassword">
          <declaration><![CDATA[protected TextBox txtPassword;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtUsername">
          <declaration><![CDATA[protected TextBox txtUsername;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="valAnswer">
          <declaration><![CDATA[protected RequiredFieldValidator valAnswer;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="valConfirmPassword">
          <declaration><![CDATA[protected RequiredFieldValidator valConfirmPassword;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="valPassword">
          <declaration><![CDATA[protected RegularExpressionValidator valPassword;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="valUsername">
          <declaration><![CDATA[protected RequiredFieldValidator valUsername;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="ResetToken">
          <declaration><![CDATA[private string ResetToken]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="59" sc="13" el="61" ec="14">admin\Security\PasswordReset.ascx.cs</location>
            <body hash="dc3ced555daeff0ff7ad3360f0852019"><![CDATA[{
                return ViewState["ResetToken"] != null ? Request.QueryString["resetToken"] : String.Empty;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="63" sc="13" el="65" ec="14">admin\Security\PasswordReset.ascx.cs</location>
            <body hash="401155e363c9013bb2f0ee95b1fa9026"><![CDATA[{
                ViewState.Add("ResetToken", value);
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="SecurityRoles">
      <declaration><![CDATA[public class SecurityRoles : PortalModuleBase, IActionable]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private int RoleId = Null.NullInteger;]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="65" sc="9" el="71" ec="37">DesktopModules\Admin\Security\SecurityRoles.ascx.cs</location>
            <body hash="613df31946d5e067a8ff63e595a6e6f7"><![CDATA[private int RoleId = Null.NullInteger;
        private new int UserId = Null.NullInteger;
        private RoleInfo _Role;
        private int _SelectedUserID = Null.NullInteger;
        private UserInfo _User;

        private int _totalPages = 1;]]></body>
          </codeblock>
        </constructor>
        <constructor name=".cctor">
          <declaration><![CDATA[static SecurityRoles()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="62" sc="6" el="62" ec="100">DesktopModules\Admin\Security\SecurityRoles.ascx.cs</location>
            <body hash="b7e102f747d231214899c8e244059744"><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof (SecurityRoles))]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="BindData">
          <declaration><![CDATA[private void BindData()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="229" sc="9" el="319" ec="10">DesktopModules\Admin\Security\SecurityRoles.ascx.cs</location>
            <body hash="25314b6a7457853f04405859d7df43d2"><![CDATA[{
            //bind all portal roles to dropdownlist
            if (RoleId == Null.NullInteger)
            {
                if (cboRoles.Items.Count == 0)
                {
                    var roles = RoleController.Instance.GetRoles(PortalId, x => x.Status == RoleStatus.Approved);

                    //Remove access to Admin Role if use is not a member of the role
                    int roleIndex = Null.NullInteger;
                    foreach (RoleInfo tmpRole in roles)
                    {
                        if (tmpRole.RoleName == PortalSettings.AdministratorRoleName)
                        {
                            if (!PortalSecurity.IsInRole(PortalSettings.AdministratorRoleName))
                            {
                                roleIndex = roles.IndexOf(tmpRole);
                            }
                        }
                        break;
                    }
                    if (roleIndex > Null.NullInteger)
                    {
                        roles.RemoveAt(roleIndex);
                    }
                    cboRoles.DataSource = roles;
                    cboRoles.DataBind();
                }
            }
            else
            {
                if (!Page.IsPostBack)
                {
                    if (Role != null)
                    {
                        //cboRoles.Items.Add(new ListItem(Role.RoleName, Role.RoleID.ToString()));
                        cboRoles.AddItem(Role.RoleName, Role.RoleID.ToString());
                        cboRoles.Items[0].Selected = true;
                        lblTitle.Text = string.Format(Localization.GetString("RoleTitle.Text", LocalResourceFile), Role.RoleName, Role.RoleID);
                    }
                    cboRoles.Visible = false;
                    plRoles.Visible = false;
                }
            }
			
            //bind all portal users to dropdownlist
            if (UserId == -1)
            {
				//Make sure user has enough permissions
                if (Role.RoleName == PortalSettings.AdministratorRoleName && !PortalSecurity.IsInRole(PortalSettings.AdministratorRoleName))
                {
                    UI.Skins.Skin.AddModuleMessage(this, Localization.GetString("NotAuthorized", LocalResourceFile), ModuleMessage.ModuleMessageType.YellowWarning);
                    pnlRoles.Visible = false;
                    pnlUserRoles.Visible = false;
                    chkNotify.Visible = false;
                    return;
                }
                if (UsersControl == UsersControl.Combo)
                {
                    if (cboUsers.Items.Count == 0)
                    {
                        foreach (UserInfo objUser in UserController.GetUsers(PortalId))
                        {
                            //cboUsers.Items.Add(new ListItem(objUser.DisplayName + " (" + objUser.Username + ")", objUser.UserID.ToString()));
                            cboUsers.AddItem(objUser.DisplayName + " (" + objUser.Username + ")", objUser.UserID.ToString());
                        }
                    }
                    txtUsers.Visible = false;
                    cboUsers.Visible = true;
                    cmdValidate.Visible = false;
                }
                else
                {
                    txtUsers.Visible = true;
                    cboUsers.Visible = false;
                    cmdValidate.Visible = true;
                }
            }
            else
            {
                if (User != null)
                {
                    txtUsers.Text = User.UserID.ToString();
                    lblTitle.Text = string.Format(Localization.GetString("UserTitle.Text", LocalResourceFile), User.Username, User.UserID);
                }
                txtUsers.Visible = false;
                cboUsers.Visible = false;
                cmdValidate.Visible = false;
                plUsers.Visible = false;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="BindGrid">
          <declaration><![CDATA[private void BindGrid()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="329" sc="9" el="360" ec="10">DesktopModules\Admin\Security\SecurityRoles.ascx.cs</location>
            <body hash="bc0c72d69ac3a598e460f438fce4d76f"><![CDATA[{
            

            if (RoleId != Null.NullInteger)
            {
                cmdAdd.Text = Localization.GetString("AddUser.Text", LocalResourceFile);
                grdUserRoles.DataKeyField = "UserId";
                grdUserRoles.Columns[2].Visible = false;
            }
            if (UserId != Null.NullInteger)
            {
                cmdAdd.Text = Localization.GetString("AddRole.Text", LocalResourceFile);
                grdUserRoles.DataKeyField = "RoleId";
                grdUserRoles.Columns[1].Visible = false;
            }

            grdUserRoles.DataSource = GetPagedDataSource();
            grdUserRoles.DataBind();

            ctlPagingControl.TotalRecords = _totalRecords;
            ctlPagingControl.PageSize = PageSize;
            ctlPagingControl.CurrentPage = CurrentPage;
            ctlPagingControl.TabID = TabId;
            ctlPagingControl.QuerystringParams = System.Web.HttpUtility.UrlDecode(string.Join("&", Request.QueryString.ToString().Split('&').
                                                                        ToList().
                                                                        Where(s => s.StartsWith("ctl", StringComparison.OrdinalIgnoreCase) 
                                                                            || s.StartsWith("mid", StringComparison.OrdinalIgnoreCase)
                                                                            || s.StartsWith("RoleId", StringComparison.OrdinalIgnoreCase)
                                                                            || s.StartsWith("UserId", StringComparison.OrdinalIgnoreCase)
                                                                            || s.StartsWith("filter", StringComparison.OrdinalIgnoreCase)
                                                                            || s.StartsWith("popUp", StringComparison.OrdinalIgnoreCase)).ToArray()));
        }]]></body>
          </codeblock>
        </method>
        <method name="cboRoles_SelectedIndexChanged">
          <declaration><![CDATA[private void cboRoles_SelectedIndexChanged(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="648" sc="9" el="651" ec="10">DesktopModules\Admin\Security\SecurityRoles.ascx.cs</location>
            <body hash="c6e40376dea5d3aa906af30504ff490d"><![CDATA[{
            GetDates(UserId, Int32.Parse(cboRoles.SelectedItem.Value));
            BindGrid();
        }]]></body>
          </codeblock>
        </method>
        <method name="cboUsers_SelectedIndexChanged">
          <declaration><![CDATA[private void cboUsers_SelectedIndexChanged(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="599" sc="9" el="606" ec="10">DesktopModules\Admin\Security\SecurityRoles.ascx.cs</location>
            <body hash="2abbe37ec3c510c4b6c6bb93b3d82c84"><![CDATA[{
            if ((cboUsers.SelectedItem != null) && (cboRoles.SelectedItem != null))
            {
                SelectedUserID = Int32.Parse(cboUsers.SelectedItem.Value);
                GetDates(SelectedUserID, Int32.Parse(cboRoles.SelectedItem.Value));
            }
            BindGrid();
        }]]></body>
          </codeblock>
        </method>
        <method name="cmdAdd_Click">
          <declaration><![CDATA[private void cmdAdd_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="661" sc="9" el="715" ec="10">DesktopModules\Admin\Security\SecurityRoles.ascx.cs</location>
            <body hash="cc4999abdbdb7d8b6c7e84c03d6b0f1f"><![CDATA[{
            if (PortalSecurity.IsInRole(PortalSettings.AdministratorRoleName) == false)
            {
                return;
            }
            try
            {
                if (Page.IsValid)
                {
                    if ((Role != null) && (User != null))
                    {
						//do not modify the portal Administrator account dates
                        if (User.UserID == PortalSettings.AdministratorId && Role.RoleID == PortalSettings.AdministratorRoleId)
                        {
                        	effectiveDatePicker.SelectedDate = null;
                        	expiryDatePicker.SelectedDate = null;
                        }

                        DateTime datEffectiveDate;
                        if (effectiveDatePicker.SelectedDate != null)
                        {
							datEffectiveDate = effectiveDatePicker.SelectedDate.Value;
                        }
                        else
                        {
                            datEffectiveDate = Null.NullDate;
                        }

                        DateTime datExpiryDate;
                        if (expiryDatePicker.SelectedDate != null)
                        {
							datExpiryDate = expiryDatePicker.SelectedDate.Value;
                        }
                        else
                        {
                            datExpiryDate = Null.NullDate;
                        }
						
                        //Add User to Role
                        var isOwner = false;
                        
                        if(((Role.SecurityMode == SecurityMode.SocialGroup) || (Role.SecurityMode == SecurityMode.Both)))
                            isOwner = chkIsOwner.Checked;

                        RoleController.AddUserRole(User, Role, PortalSettings, RoleStatus.Approved, datEffectiveDate, datExpiryDate, chkNotify.Checked, isOwner);
                        chkIsOwner.Checked = false; //reset the checkbox
                    }
                }
                BindGrid();
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="cmdDeleteUserRole_click">
          <declaration><![CDATA[public void cmdDeleteUserRole_click(object sender, ImageClickEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="718" sc="9" el="741" ec="10">DesktopModules\Admin\Security\SecurityRoles.ascx.cs</location>
            <body hash="76eb618f82fe21453e0c830d4784b460"><![CDATA[{
            if (PortalSecurity.IsInRole(PortalSettings.AdministratorRoleName) == false)
            {
                return;
            }
            try
            {
                var cmdDeleteUserRole = (ImageButton) sender;
                int roleId = Convert.ToInt32(cmdDeleteUserRole.Attributes["roleId"]);
                int userId = Convert.ToInt32(cmdDeleteUserRole.Attributes["userId"]);

                RoleInfo role = RoleController.Instance.GetRole(PortalId, r => r.RoleID == roleId);
                if (!RoleController.DeleteUserRole(UserController.GetUserById(PortalId, userId), role, PortalSettings, chkNotify.Checked))
                {
                    UI.Skins.Skin.AddModuleMessage(this, Localization.GetString("RoleRemoveError", LocalResourceFile), ModuleMessage.ModuleMessageType.RedError);
                }
                BindGrid();
            }
            catch (Exception exc)
            {
                Exceptions.LogException(exc);
                UI.Skins.Skin.AddModuleMessage(this, Localization.GetString("RoleRemoveError", LocalResourceFile), ModuleMessage.ModuleMessageType.RedError);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="cmdValidate_Click">
          <declaration><![CDATA[private void cmdValidate_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="616" sc="9" el="637" ec="10">DesktopModules\Admin\Security\SecurityRoles.ascx.cs</location>
            <body hash="d371438b9ed89d4805b2b4cb7efa27fa"><![CDATA[{
            if (PortalSecurity.IsInRole(PortalSettings.AdministratorRoleName) == false)
            {
                return;
            }

            if (!String.IsNullOrEmpty(txtUsers.Text))
            {
				//validate username
                UserInfo objUser = UserController.GetUserByName(PortalId, txtUsers.Text);
                if (objUser != null)
                {
                    GetDates(objUser.UserID, RoleId);
                    SelectedUserID = objUser.UserID;
                }
                else
                {
                    txtUsers.Text = "";
                }
            }
            BindGrid();
        }]]></body>
          </codeblock>
        </method>
        <method name="DataBind">
          <declaration><![CDATA[public override void DataBind()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="437" sc="9" el="451" ec="10">DesktopModules\Admin\Security\SecurityRoles.ascx.cs</location>
            <body hash="7191b95f737c67e71e11dff28e16f72b"><![CDATA[{
            if (!ModulePermissionController.CanEditModuleContent(ModuleConfiguration))
            {
                Response.Redirect(Globals.NavigateURL("Access Denied"), true);
            }
            base.DataBind();

            //Localize Headers
            Localization.LocalizeDataGrid(ref grdUserRoles, LocalResourceFile);

            //Bind the role data to the datalist
            BindData();

            BindGrid();
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteButtonVisible">
          <declaration><![CDATA[public bool DeleteButtonVisible(int UserID, int RoleID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="464" sc="9" el="473" ec="10">DesktopModules\Admin\Security\SecurityRoles.ascx.cs</location>
            <body hash="451e0b058a5d25ec5aea4e517569cee9"><![CDATA[{
            //[DNN-4285] Check if the role can be removed (only handles case of Administrator and Administrator Role
            bool canDelete = RoleController.CanRemoveUserFromRole(PortalSettings, UserID, RoleID);
            if (RoleID == PortalSettings.AdministratorRoleId && canDelete)
            {
				//User can only delete if in Admin role
                canDelete = PortalSecurity.IsInRole(PortalSettings.AdministratorRoleName);
            }
            return canDelete;
        }]]></body>
          </codeblock>
        </method>
        <method name="FormatDate">
          <declaration><![CDATA[public string FormatDate(DateTime DateTime)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="484" sc="9" el="493" ec="10">DesktopModules\Admin\Security\SecurityRoles.ascx.cs</location>
            <body hash="8f61fea510f2f838c2d451f820e663c2"><![CDATA[{
            if (!Null.IsNull(DateTime))
            {
                return DateTime.ToShortDateString();
            }
            else
            {
                return "";
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="FormatUser">
          <declaration><![CDATA[public string FormatUser(int UserID, string DisplayName)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="501" sc="9" el="503" ec="10">DesktopModules\Admin\Security\SecurityRoles.ascx.cs</location>
            <body hash="e7c703541455f1c989a59935313b7e88"><![CDATA[{
            return "<a href=\"" + Globals.LinkClick("userid=" + UserID, TabId, ModuleId) + "\" class=\"CommandButton\">" + DisplayName + "</a>";
        }]]></body>
          </codeblock>
        </method>
        <method name="GetDates">
          <declaration><![CDATA[private void GetDates(int UserId, int RoleId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="384" sc="9" el="425" ec="10">DesktopModules\Admin\Security\SecurityRoles.ascx.cs</location>
            <body hash="ce2bc0c3c5dfaf2a4fc99231fb2dfd16"><![CDATA[{
        	DateTime? expiryDate = null;
        	DateTime? effectiveDate = null;

            UserRoleInfo objUserRole = RoleController.Instance.GetUserRole(PortalId, UserId, RoleId);
            if (objUserRole != null)
            {
                if (Null.IsNull(objUserRole.EffectiveDate) == false)
                {
                    effectiveDate = objUserRole.EffectiveDate;
                }
                if (Null.IsNull(objUserRole.ExpiryDate) == false)
                {
                    expiryDate = objUserRole.ExpiryDate;
                }
            }
            else //new role assignment
            {
                RoleInfo objRole = RoleController.Instance.GetRole(PortalId, r => r.RoleID == RoleId);

                if (objRole.BillingPeriod > 0)
                {
                    switch (objRole.BillingFrequency)
                    {
                        case "D":
                            expiryDate = DateTime.Now.AddDays(objRole.BillingPeriod);
                            break;
                        case "W":
                            expiryDate = DateTime.Now.AddDays(objRole.BillingPeriod*7);
                            break;
                        case "M":
                            expiryDate = DateTime.Now.AddMonths(objRole.BillingPeriod);
                            break;
                        case "Y":
                            expiryDate = DateTime.Now.AddYears(objRole.BillingPeriod);
                            break;
                    }
                }
            }
			effectiveDatePicker.SelectedDate = effectiveDate;
			expiryDatePicker.SelectedDate = expiryDate;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPagedDataSource">
          <declaration><![CDATA[private IList<UserRoleInfo> GetPagedDataSource()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="363" sc="9" el="372" ec="10">DesktopModules\Admin\Security\SecurityRoles.ascx.cs</location>
            <body hash="f382f116c446022f231a3d0ba5a29bec"><![CDATA[{
            var roleName = RoleId != Null.NullInteger ? Role.RoleName : Null.NullString;
            var userName = UserId != Null.NullInteger ? User.Username : Null.NullString;

            var userList = RoleController.Instance.GetUserRoles(PortalId, userName, roleName);
            _totalRecords = userList.Count;
            _totalPages = _totalRecords%PageSize == 0 ? _totalRecords/PageSize : _totalRecords/PageSize + 1;

            return userList.Skip((CurrentPage - 1 )*PageSize).Take(PageSize).ToList();
        }]]></body>
          </codeblock>
        </method>
        <method name="grdUserRoles_ItemCreated">
          <declaration><![CDATA[private void grdUserRoles_ItemCreated(object sender, DataGridItemEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="751" sc="9" el="780" ec="10">DesktopModules\Admin\Security\SecurityRoles.ascx.cs</location>
            <body hash="5ff34ce5c3d43cb4bbf6985bfeb95e7f"><![CDATA[{
            try
            {
                DataGridItem item = e.Item;

                var cmdDeleteUserRole = e.Item.FindControl("cmdDeleteUserRole") as ImageButton;
                var role = e.Item.DataItem as UserRoleInfo;

                if (cmdDeleteUserRole != null)
                {
                    if (RoleId == Null.NullInteger)
                    {
                        ClientAPI.AddButtonConfirm(cmdDeleteUserRole, String.Format(Localization.GetString("DeleteRoleFromUser.Text", LocalResourceFile), role.FullName, role.RoleName));
                    }
                    else
                    {
                        ClientAPI.AddButtonConfirm(cmdDeleteUserRole, String.Format(Localization.GetString("DeleteUsersFromRole.Text", LocalResourceFile), role.FullName, role.RoleName));
                    }
                    cmdDeleteUserRole.Attributes.Add("roleId", role.RoleID.ToString());
                    cmdDeleteUserRole.Attributes.Add("userId", role.UserID.ToString());
                }

                item.Cells[5].Visible = ((Role.SecurityMode == SecurityMode.SocialGroup) || (Role.SecurityMode == SecurityMode.Both));

            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="grdUserRoles_ItemDataBound">
          <declaration><![CDATA[protected void grdUserRoles_ItemDataBound(object sender, DataGridItemEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="783" sc="9" el="803" ec="10">DesktopModules\Admin\Security\SecurityRoles.ascx.cs</location>
            <body hash="59546fa9d3d02f6731ef2ac1b408d310"><![CDATA[{
            DataGridItem item = e.Item;
            if (item.ItemType == ListItemType.Item || item.ItemType == ListItemType.AlternatingItem || item.ItemType == ListItemType.SelectedItem)
            {
                var userRole = (UserRoleInfo) item.DataItem;
                if (RoleId == Null.NullInteger)
                {
                    if (userRole.RoleID == Convert.ToInt32(cboRoles.SelectedValue))
                    {
                        cmdAdd.Text = Localization.GetString("UpdateRole.Text", LocalResourceFile);
                    }
                }
                if (UserId == Null.NullInteger)
                {
                    if (userRole.UserID == SelectedUserID)
                    {
                        cmdAdd.Text = Localization.GetString("UpdateRole.Text", LocalResourceFile);
                    }
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="517" sc="9" el="552" ec="10">DesktopModules\Admin\Security\SecurityRoles.ascx.cs</location>
            <body hash="e641dab70951d5594a57cffa9046796b"><![CDATA[{
            base.OnInit(e);

            if ((Request.QueryString["RoleId"] != null))
            {
                RoleId = Int32.Parse(Request.QueryString["RoleId"]);
            }
            if ((Request.QueryString["UserId"] != null))
            {
                int userId;
                // Use Int32.MaxValue as invalid UserId
                UserId = Int32.TryParse(Request.QueryString["UserId"], out userId) ? userId : Int32.MaxValue;
            }

            CurrentPage = 1;
            if (Request.QueryString["CurrentPage"] != null)
            {
                var currentPage = 0;
                if (int.TryParse(Request.QueryString["CurrentPage"], out currentPage)
                    && currentPage > 0)
                {
                    CurrentPage = currentPage;
                }
                else
                {
                    CurrentPage = 1;
                }
            }

            cboRoles.SelectedIndexChanged += cboRoles_SelectedIndexChanged;
            cboUsers.SelectedIndexChanged += cboUsers_SelectedIndexChanged;
            cmdAdd.Click += cmdAdd_Click;
            cmdValidate.Click += cmdValidate_Click;
            grdUserRoles.ItemCreated += grdUserRoles_ItemCreated;
            grdUserRoles.ItemDataBound += grdUserRoles_ItemDataBound;
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="562" sc="9" el="588" ec="10">DesktopModules\Admin\Security\SecurityRoles.ascx.cs</location>
            <body hash="880fdcb9ca16516eca6478d5ccd6335e"><![CDATA[{
            base.OnLoad(e);

            try
            {
                cmdCancel.NavigateUrl = ReturnUrl;
                if (ParentModule == null)
                {
                    DataBind();
                }

                if (Role == null)
                    return;

                placeIsOwner.Visible = ((Role.SecurityMode == SecurityMode.SocialGroup) || (Role.SecurityMode == SecurityMode.Both));
                placeIsOwnerHeader.Visible = ((Role.SecurityMode == SecurityMode.SocialGroup) || (Role.SecurityMode == SecurityMode.Both));
            }
            catch (ThreadAbortException exc) //Do nothing if ThreadAbort as this is caused by a redirect
            {
                Logger.Debug(exc);

            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_Role">
          <declaration><![CDATA[private RoleInfo _Role;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_SelectedUserID">
          <declaration><![CDATA[private int _SelectedUserID = Null.NullInteger;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_totalPages">
          <declaration><![CDATA[private int _totalPages = 1;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_totalRecords">
          <declaration><![CDATA[private int _totalRecords;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_User">
          <declaration><![CDATA[private UserInfo _User;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="actionsRow">
          <declaration><![CDATA[protected HtmlGenericControl actionsRow;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cboRoles">
          <declaration><![CDATA[protected DnnComboBox cboRoles;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cboUsers">
          <declaration><![CDATA[protected DnnComboBox cboUsers;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkIsOwner">
          <declaration><![CDATA[protected CheckBox chkIsOwner;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkNotify">
          <declaration><![CDATA[protected CheckBox chkNotify;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdAdd">
          <declaration><![CDATA[protected LinkButton cmdAdd;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdCancel">
          <declaration><![CDATA[protected HyperLink cmdCancel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdValidate">
          <declaration><![CDATA[protected LinkButton cmdValidate;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ctlPagingControl">
          <declaration><![CDATA[protected PagingControl ctlPagingControl;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="effectiveDatePicker">
          <declaration><![CDATA[protected DnnDatePicker effectiveDatePicker;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="expiryDatePicker">
          <declaration><![CDATA[protected DnnDatePicker expiryDatePicker;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="grdUserRoles">
          <declaration><![CDATA[protected DataGrid grdUserRoles;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblIsOwner">
          <declaration><![CDATA[protected LabelControl lblIsOwner;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblTitle">
          <declaration><![CDATA[protected Label lblTitle;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Logger">
          <declaration><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof(SecurityRoles));]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="placeIsOwner">
          <declaration><![CDATA[protected PlaceHolder placeIsOwner;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="placeIsOwnerHeader">
          <declaration><![CDATA[protected PlaceHolder placeIsOwnerHeader;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plEffectiveDate">
          <declaration><![CDATA[protected LabelControl plEffectiveDate;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plExpiryDate">
          <declaration><![CDATA[protected LabelControl plExpiryDate;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plRoles">
          <declaration><![CDATA[protected LabelControl plRoles;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plUsers">
          <declaration><![CDATA[protected LabelControl plUsers;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="pnlRoles">
          <declaration><![CDATA[protected Panel pnlRoles;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="pnlUserRoles">
          <declaration><![CDATA[protected Panel pnlUserRoles;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="RoleId">
          <declaration><![CDATA[private int RoleId = Null.NullInteger;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtUsers">
          <declaration><![CDATA[protected TextBox txtUsers;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="UserId">
          <declaration><![CDATA[private new int UserId = Null.NullInteger;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="valDates">
          <declaration><![CDATA[protected CompareValidator valDates;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="valEffectiveDate">
          <declaration><![CDATA[protected CompareValidator valEffectiveDate;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="valExpiryDate">
          <declaration><![CDATA[protected CompareValidator valExpiryDate;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="CurrentPage">
          <declaration><![CDATA[protected int CurrentPage]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="181" sc="37" el="181" ec="41">DesktopModules\Admin\Security\SecurityRoles.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="181" sc="42" el="181" ec="46">DesktopModules\Admin\Security\SecurityRoles.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ModuleActions">
          <declaration><![CDATA[public ModuleActionCollection ModuleActions]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="212" sc="13" el="214" ec="14">DesktopModules\Admin\Security\SecurityRoles.ascx.cs</location>
            <body hash="7409d6d55919619a76ff7c16577b0a06"><![CDATA[{
                return new ModuleActionCollection();
            }]]></body>
          </codeblock>
        </property>
        <property name="PageSize">
          <declaration><![CDATA[protected int PageSize]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="186" sc="13" el="189" ec="14">DesktopModules\Admin\Security\SecurityRoles.ascx.cs</location>
            <body hash="668471b132b3d418e5da53bec9c4e4d9"><![CDATA[{
                var setting = UserModuleBase.GetSetting(PortalId, "Records_PerPage");
                return Convert.ToInt32(setting);
            }]]></body>
          </codeblock>
        </property>
        <property name="ParentModule">
          <declaration><![CDATA[public PortalModuleBase ParentModule]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="203" sc="48" el="203" ec="52">DesktopModules\Admin\Security\SecurityRoles.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="203" sc="53" el="203" ec="57">DesktopModules\Admin\Security\SecurityRoles.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ReturnUrl">
          <declaration><![CDATA[protected string ReturnUrl]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="86" sc="13" el="110" ec="14">DesktopModules\Admin\Security\SecurityRoles.ascx.cs</location>
            <body hash="d8783ce16871787fa3e6dba191adef49"><![CDATA[{
                string _ReturnURL;
                var FilterParams = new string[String.IsNullOrEmpty(Request.QueryString["filterproperty"]) ? 2 : 3];

                if (String.IsNullOrEmpty(Request.QueryString["filterProperty"]))
                {
                    FilterParams.SetValue("filter=" + Request.QueryString["filter"], 0);
                    FilterParams.SetValue("currentpage=" + Request.QueryString["currentpage"], 1);
                }
                else
                {
                    FilterParams.SetValue("filter=" + Request.QueryString["filter"], 0);
                    FilterParams.SetValue("filterProperty=" + Request.QueryString["filterProperty"], 1);
                    FilterParams.SetValue("currentpage=" + Request.QueryString["currentpage"], 2);
                }
                if (string.IsNullOrEmpty(Request.QueryString["filter"]))
                {
                    _ReturnURL = Globals.NavigateURL(TabId);
                }
                else
                {
                    _ReturnURL = Globals.NavigateURL(TabId, "", FilterParams);
                }
                return _ReturnURL;
            }]]></body>
          </codeblock>
        </property>
        <property name="Role">
          <declaration><![CDATA[protected RoleInfo Role]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="116" sc="13" el="129" ec="14">DesktopModules\Admin\Security\SecurityRoles.ascx.cs</location>
            <body hash="70bce5086ed56d98b0fc1f5442854288"><![CDATA[{
                if (_Role == null)
                {
                    if (RoleId != Null.NullInteger)
                    {
                        _Role = RoleController.Instance.GetRole(PortalId, r => r.RoleID == RoleId); ;
                    }
                    else if (cboRoles.SelectedItem != null)
                    {
                        _Role = RoleController.Instance.GetRole(PortalId, r => r.RoleID == Convert.ToInt32(cboRoles.SelectedItem.Value));
                    }
                }
                return _Role;
            }]]></body>
          </codeblock>
        </property>
        <property name="SelectedUserID">
          <declaration><![CDATA[protected int SelectedUserID]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="158" sc="13" el="160" ec="14">DesktopModules\Admin\Security\SecurityRoles.ascx.cs</location>
            <body hash="f9dfb1f24d159549fbda7ac8dfc23d69"><![CDATA[{
                return _SelectedUserID;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="162" sc="13" el="164" ec="14">DesktopModules\Admin\Security\SecurityRoles.ascx.cs</location>
            <body hash="7b80fa3747d81ca0bd42202716cb1fb6"><![CDATA[{
                _SelectedUserID = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="User">
          <declaration><![CDATA[protected UserInfo User]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="135" sc="13" el="152" ec="14">DesktopModules\Admin\Security\SecurityRoles.ascx.cs</location>
            <body hash="3b167e280b31a7f9feaea96cbe0d76f8"><![CDATA[{
                if (_User == null)
                {
                    if (UserId != Null.NullInteger)
                    {
                        _User = UserController.GetUserById(PortalId, UserId);
                    }
                    else if (UsersControl == UsersControl.TextBox && !String.IsNullOrEmpty(txtUsers.Text))
                    {
                        _User = UserController.GetUserByName(PortalId, txtUsers.Text);
                    }
                    else if (UsersControl == UsersControl.Combo && (cboUsers.SelectedItem != null))
                    {
                        _User = UserController.GetUserById(PortalId, Convert.ToInt32(cboUsers.SelectedItem.Value));
                    }
                }
                return _User;
            }]]></body>
          </codeblock>
        </property>
        <property name="UsersControl">
          <declaration><![CDATA[protected UsersControl UsersControl]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="175" sc="13" el="178" ec="14">DesktopModules\Admin\Security\SecurityRoles.ascx.cs</location>
            <body hash="4291b97ea9b60e2ab8a6ec35d6c28f9f"><![CDATA[{
                var setting = UserModuleBase.GetSetting(PortalId, "Security_UsersControl");
                return (UsersControl)setting;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="SendPassword">
      <declaration><![CDATA[public class SendPassword : UserModuleBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private int _userCount = Null.NullInteger;]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="61" sc="9" el="61" ec="51">admin\Security\SendPassword.ascx.cs</location>
            <body hash="baa40ca2c8de4fbc2b19b077507b91cf"><![CDATA[private int _userCount = Null.NullInteger]]></body>
          </codeblock>
        </constructor>
        <constructor name=".cctor">
          <declaration><![CDATA[static SendPassword()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="56" sc="6" el="56" ec="99">admin\Security\SendPassword.ascx.cs</location>
            <body hash="a4212baf7466149b64aacfdae167fc82"><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof (SendPassword))]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="cancelButton_Click">
          <declaration><![CDATA[private void cancelButton_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="403" sc="9" el="405" ec="10">admin\Security\SendPassword.ascx.cs</location>
            <body hash="14a37fce4c25612e2a60c126a89caec8"><![CDATA[{
            Response.Redirect(RedirectURL, true);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetUser">
          <declaration><![CDATA[private void GetUser()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="156" sc="9" el="170" ec="10">admin\Security\SendPassword.ascx.cs</location>
            <body hash="4b7cf2eccd315bfd4bb86982f09524a1"><![CDATA[{
            ArrayList arrUsers;
			if (ShowEmailField && !String.IsNullOrEmpty(txtEmail.Text.Trim()) && (String.IsNullOrEmpty(txtUsername.Text.Trim()) || divUsername.Visible == false))
            {
                arrUsers = UserController.GetUsersByEmail(PortalSettings.PortalId, txtEmail.Text, 0, Int32.MaxValue, ref _userCount);
                if (arrUsers != null && arrUsers.Count == 1)
                {
                    _user = (UserInfo)arrUsers[0];
                }
            }
            else
            {
                _user = UserController.GetUserByName(PortalSettings.PortalId, txtUsername.Text);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="LogFailure">
          <declaration><![CDATA[private void LogFailure(string reason)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="370" sc="9" el="372" ec="10">admin\Security\SendPassword.ascx.cs</location>
            <body hash="6ae11ec85f2fbb19f9a679a3e43b8a41"><![CDATA[{
            LogResult(reason);
        }]]></body>
          </codeblock>
        </method>
        <method name="LogResult">
          <declaration><![CDATA[private void LogResult(string message)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="375" sc="9" el="400" ec="10">admin\Security\SendPassword.ascx.cs</location>
            <body hash="0109ea3a41259e9ef0c67f631fbfc11b"><![CDATA[{
            var portalSecurity = new PortalSecurity();

			var log = new LogInfo
            {
                LogPortalID = PortalSettings.PortalId,
                LogPortalName = PortalSettings.PortalName,
                LogUserID = UserId,
                LogUserName = portalSecurity.InputFilter(txtUsername.Text, PortalSecurity.FilterFlag.NoScripting | PortalSecurity.FilterFlag.NoAngleBrackets | PortalSecurity.FilterFlag.NoMarkup)
            };
			
            if (string.IsNullOrEmpty(message))
            {
                log.LogTypeKey = "PASSWORD_SENT_SUCCESS";
            }
            else
            {
                log.LogTypeKey = "PASSWORD_SENT_FAILURE";
                log.LogProperties.Add(new LogDetailInfo("Cause", message));
            }
            
			log.AddProperty("IP", _ipAddress);
            
            LogController.Instance.AddLog(log);

        }]]></body>
          </codeblock>
        </method>
        <method name="LogSuccess">
          <declaration><![CDATA[private void LogSuccess()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="365" sc="9" el="367" ec="10">admin\Security\SendPassword.ascx.cs</location>
            <body hash="dac4dc755ecca3dcb125aec00a771ee8"><![CDATA[{
            LogResult(string.Empty);
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="177" sc="9" el="213" ec="10">admin\Security\SendPassword.ascx.cs</location>
            <body hash="32933b2737de8929275ea0ee2adb117e"><![CDATA[{
            base.OnInit(e);

            var isEnabled = true;
			
            //both retrieval and reset now use password token resets
            if (MembershipProviderConfig.PasswordRetrievalEnabled || MembershipProviderConfig.PasswordResetEnabled)
            {
                lblHelp.Text = Localization.GetString("ResetTokenHelp", LocalResourceFile);
                cmdSendPassword.Text = Localization.GetString("ResetToken", LocalResourceFile);
            }
            else
            {
                isEnabled = false;
                lblHelp.Text = Localization.GetString("DisabledPasswordHelp", LocalResourceFile);
                divPassword.Visible = false;
            }
			
			if (!MembershipProviderConfig.PasswordResetEnabled)
            {
                isEnabled = false;
                lblHelp.Text = Localization.GetString("DisabledPasswordHelp", LocalResourceFile);
                divPassword.Visible = false;
            }

            if (MembershipProviderConfig.RequiresUniqueEmail && isEnabled && !PortalController.GetPortalSettingAsBoolean("Registration_UseEmailAsUserName", PortalId, false))
            {
                lblHelp.Text += Localization.GetString("RequiresUniqueEmail", LocalResourceFile);
            }
			
            if (MembershipProviderConfig.RequiresQuestionAndAnswer && isEnabled)
            {
                lblHelp.Text += Localization.GetString("RequiresQuestionAndAnswer", LocalResourceFile);
            }


        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="221" sc="9" el="242" ec="10">admin\Security\SendPassword.ascx.cs</location>
            <body hash="e037a76eccfdf121afc8a6aab24c83ad"><![CDATA[{
            base.OnLoad(e);

            cmdSendPassword.Click += OnSendPasswordClick;
			cancelButton.Click += cancelButton_Click;

            if (Request.UserHostAddress != null)
            {
                _ipAddress = Request.UserHostAddress;
            }


			divEmail.Visible = ShowEmailField;
			divUsername.Visible = !UsernameDisabled;
            divCaptcha.Visible = UseCaptcha;

            if (UseCaptcha)
            {
                ctlCaptcha.ErrorMessage = Localization.GetString("InvalidCaptcha", LocalResourceFile);
                ctlCaptcha.Text = Localization.GetString("CaptchaText", LocalResourceFile);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnSendPasswordClick">
          <declaration><![CDATA[protected void OnSendPasswordClick(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="250" sc="9" el="362" ec="10">admin\Security\SendPassword.ascx.cs</location>
            <body hash="7acc4e2a3ace9233fb31c73c223aa676"><![CDATA[{
            //pretty much alwasy display the same message to avoid hinting on the existance of a user name
            var message = Localization.GetString("PasswordSent", LocalResourceFile);
            var moduleMessageType = ModuleMessage.ModuleMessageType.GreenSuccess;
            var canSend = true;

            if ((UseCaptcha && ctlCaptcha.IsValid) || (!UseCaptcha))
            {
                if (String.IsNullOrEmpty(txtUsername.Text.Trim()))
                {
                    //No UserName provided
                    if (ShowEmailField)
                    {
                        if (String.IsNullOrEmpty(txtEmail.Text.Trim()))
                        {
                            //No email address either (cannot retrieve password)
                            canSend = false;
                            message = Localization.GetString("EnterUsernameEmail", LocalResourceFile);
                            moduleMessageType = ModuleMessage.ModuleMessageType.RedError;
                        }
                    }
                    else
                    {
                        //Cannot retrieve password
                        canSend = false;
                        message = Localization.GetString("EnterUsername", LocalResourceFile);
                        moduleMessageType = ModuleMessage.ModuleMessageType.RedError;
                    }
                }

                if (string.IsNullOrEmpty(Host.SMTPServer))
                {
                    //SMTP Server is not configured
                    canSend = false;
                    message = Localization.GetString("OptionUnavailable", LocalResourceFile);
                    moduleMessageType = ModuleMessage.ModuleMessageType.YellowWarning;

                    var logMessage = Localization.GetString("SMTPNotConfigured", LocalResourceFile);

                    LogResult(logMessage);
                }

                if (canSend)
                {
                    GetUser();
                    if (_user != null)
                    {
                        if (_user.IsDeleted)
                        {
                            canSend = false;
                        }
                        else 
                        {
                            if (_user.Membership.Approved == false)
                            {
                                Mail.SendMail(_user, MessageType.PasswordReminderUserIsNotApproved, PortalSettings);
                                canSend = false;
                            }
                            if (MembershipProviderConfig.PasswordRetrievalEnabled || MembershipProviderConfig.PasswordResetEnabled)
                            {
                                UserController.ResetPasswordToken(_user);
                            }
                            if (canSend)
                            {
                                if (Mail.SendMail(_user, MessageType.PasswordReminder, PortalSettings) != string.Empty)
                                {
                                    canSend = false;
                                }
                            }
                        }
                    }
                    else
                    {
                        if (_userCount > 1)
                        {
                            message = Localization.GetString("MultipleUsers", LocalResourceFile);
                        }

                        canSend = false;
                    }

                    if (canSend)
                    {
                        LogSuccess();
						cancelButton.Attributes["resourcekey"] = "cmdClose";
                    }
                    else
                    {
                        LogFailure(message);
                    }

					//always hide panel so as to not reveal if username exists.
                    pnlRecover.Visible = false;
                    UI.Skins.Skin.AddModuleMessage(this, message, moduleMessageType);
                    liSend.Visible = false;
                    liCancel.Visible = true;

                    // don't hide panel when e-mail only in use and error occured. We must provide negative feedback to the user, in case he doesn't rember what e-mail address he has used
                    if (!canSend && _user == null && MembershipProviderConfig.RequiresUniqueEmail && PortalController.GetPortalSettingAsBoolean("Registration_UseEmailAsUserName", PortalId, false))
                    {
                        message = Localization.GetString("EmailNotFound", LocalResourceFile);
                        pnlRecover.Visible = true;
                        UI.Skins.Skin.AddModuleMessage(this, message, moduleMessageType);
                        liSend.Visible = true;
                        liCancel.Visible = true;
                    }
                }
                else
                {
                    UI.Skins.Skin.AddModuleMessage(this, message, moduleMessageType);
                }
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_ipAddress">
          <declaration><![CDATA[private string _ipAddress;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_user">
          <declaration><![CDATA[private UserInfo _user;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_userCount">
          <declaration><![CDATA[private int _userCount = Null.NullInteger;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cancelButton">
          <declaration><![CDATA[protected LinkButton cancelButton;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdSendPassword">
          <declaration><![CDATA[protected LinkButton cmdSendPassword;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ctlCaptcha">
          <declaration><![CDATA[protected CaptchaControl ctlCaptcha;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="divCaptcha">
          <declaration><![CDATA[protected HtmlGenericControl divCaptcha;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="divEmail">
          <declaration><![CDATA[protected HtmlGenericControl divEmail;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="divPassword">
          <declaration><![CDATA[protected HtmlGenericControl divPassword;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="divUsername">
          <declaration><![CDATA[protected HtmlGenericControl divUsername;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblHelp">
          <declaration><![CDATA[protected Label lblHelp;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="liCancel">
          <declaration><![CDATA[protected HtmlGenericControl liCancel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="liSend">
          <declaration><![CDATA[protected HtmlGenericControl liSend;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Logger">
          <declaration><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof(SendPassword));]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plCaptcha">
          <declaration><![CDATA[protected LabelControl plCaptcha;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plEmail">
          <declaration><![CDATA[protected LabelControl plEmail;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plUsername">
          <declaration><![CDATA[protected LabelControl plUsername;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="pnlRecover">
          <declaration><![CDATA[protected Panel pnlRecover;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtEmail">
          <declaration><![CDATA[protected TextBox txtEmail;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtUsername">
          <declaration><![CDATA[protected TextBox txtUsername;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="RedirectURL">
          <declaration><![CDATA[protected string RedirectURL]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="74" sc="13" el="119" ec="14">admin\Security\SendPassword.ascx.cs</location>
            <body hash="30e6f32a843584f4f4fcc3d3e0889339"><![CDATA[{
                var _RedirectURL = "";

                object setting = GetSetting(PortalId, "Redirect_AfterRegistration");

                if (Convert.ToInt32(setting) > 0) //redirect to after registration page
                {
                    _RedirectURL = Globals.NavigateURL(Convert.ToInt32(setting));
                }
                else
                {
                
                if (Convert.ToInt32(setting) <= 0)
                {
                    if (Request.QueryString["returnurl"] != null)
                    {
                        //return to the url passed to register
                        _RedirectURL = HttpUtility.UrlDecode(Request.QueryString["returnurl"]);

                        //clean the return url to avoid possible XSS attack.
                        _RedirectURL = UrlUtils.ValidReturnUrl(_RedirectURL);

                        if (_RedirectURL.Contains("?returnurl"))
                        {
                            string baseURL = _RedirectURL.Substring(0,
                                _RedirectURL.IndexOf("?returnurl", StringComparison.Ordinal));
                            string returnURL =
                                _RedirectURL.Substring(_RedirectURL.IndexOf("?returnurl", StringComparison.Ordinal) + 11);

                            _RedirectURL = string.Concat(baseURL, "?returnurl", HttpUtility.UrlEncode(returnURL));
                        }
                    }
                    if (String.IsNullOrEmpty(_RedirectURL))
                    {
                        //redirect to current page 
                        _RedirectURL = Globals.NavigateURL();
                    }
                }
                else //redirect to after registration page
                {
                    _RedirectURL = Globals.NavigateURL(Convert.ToInt32(setting));
                }
                }

                return _RedirectURL;
            }]]></body>
          </codeblock>
        </property>
        <property name="ShowEmailField">
          <declaration><![CDATA[private bool ShowEmailField]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="146" sc="7" el="148" ec="8">admin\Security\SendPassword.ascx.cs</location>
            <body hash="f4a92c33d15fb353eaf85ede2bd50104"><![CDATA[{
			    return MembershipProviderConfig.RequiresUniqueEmail || UsernameDisabled;
		    }]]></body>
          </codeblock>
        </property>
        <property name="UseCaptcha">
          <declaration><![CDATA[protected bool UseCaptcha]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="129" sc="13" el="132" ec="14">admin\Security\SendPassword.ascx.cs</location>
            <body hash="9bbdea60b0a3aceaa32ae028dd46f17a"><![CDATA[{
                var setting = GetSetting(PortalId, "Security_CaptchaRetrivePassword");
                return Convert.ToBoolean(setting);
            }]]></body>
          </codeblock>
        </property>
        <property name="UsernameDisabled">
          <declaration><![CDATA[protected bool UsernameDisabled]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="138" sc="7" el="140" ec="8">admin\Security\SendPassword.ascx.cs</location>
            <body hash="c49cace2ea4ed406a83db0d889e7c5fa"><![CDATA[{
				return PortalController.GetPortalSettingAsBoolean("Registration_UseEmailAsUserName", PortalId, false);
		    }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="DotNetNuke.Modules.Admin.Tabs">
    <class name="Export">
      <declaration><![CDATA[public class Export : PortalModuleBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public Export()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="IsAccessibleByUser">
          <declaration><![CDATA[private bool IsAccessibleByUser(IFolderInfo folder)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="121" sc="9" el="123" ec="10">admin\Tabs\Export.ascx.cs</location>
            <body hash="951010ff958158f0d56a47d008e0c5a8"><![CDATA[{
            return FolderPermissionController.Instance.CanAddFolder(folder);
        }]]></body>
          </codeblock>
        </method>
        <method name="OnExportClick">
          <declaration><![CDATA[protected void OnExportClick(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="126" sc="9" el="174" ec="10">admin\Tabs\Export.ascx.cs</location>
            <body hash="3a69a2b57d9dab50b48843ba2358acf4"><![CDATA[{
            try
            {
                if (!Page.IsValid)
                {
                    return;
                }

                if (cboFolders.SelectedItem != null)
                {
                    var folder = FolderManager.Instance.GetFolder(cboFolders.SelectedItemValueAsInt);
                    if (folder != null)
                    {
                        var filename = folder.FolderPath + txtFile.Text + ".page.template";
                        filename = filename.Replace("/", "\\");

                        var xmlTemplate = new XmlDocument();
                        XmlNode nodePortal = xmlTemplate.AppendChild(xmlTemplate.CreateElement("portal"));
                        if (nodePortal.Attributes != null)
                        {
                            nodePortal.Attributes.Append(XmlUtils.CreateAttribute(xmlTemplate, "version", "3.0"));
                        }

                        //Add template description
                        XmlElement node = xmlTemplate.CreateElement("description");
                        node.InnerXml = Server.HtmlEncode(txtDescription.Text);
                        nodePortal.AppendChild(node);

                        //Serialize tabs
                        XmlNode nodeTabs = nodePortal.AppendChild(xmlTemplate.CreateElement("tabs"));
                        SerializeTab(xmlTemplate, nodeTabs);

                        UI.Skins.Skin.AddModuleMessage(this, "", string.Format(Localization.GetString("ExportedMessage", LocalResourceFile), filename), ModuleMessage.ModuleMessageType.BlueInfo);

                        //add file to Files table
						using (var fileContent = new MemoryStream(Encoding.UTF8.GetBytes(xmlTemplate.OuterXml)))
						{
							Services.FileSystem.FileManager.Instance.AddFile(folder, txtFile.Text + ".page.template", fileContent, true, true, "application/octet-stream");
						}
						
                    }
                }
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }

        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="81" sc="9" el="88" ec="10">admin\Tabs\Export.ascx.cs</location>
            <body hash="c39267356422cb3fac22d17a76f1f896"><![CDATA[{
            base.OnInit(e);

            if (!TabPermissionController.CanExportPage())
            {
                Response.Redirect(Globals.AccessDeniedURL(), true);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="91" sc="9" el="118" ec="10">admin\Tabs\Export.ascx.cs</location>
            <body hash="ad65f978d45b6e878d9b97f989c84186"><![CDATA[{
            base.OnLoad(e);

            cmdExport.Click += OnExportClick;

            try
            {
                if (Page.IsPostBack) return;
                cmdCancel.NavigateUrl = Globals.NavigateURL();
                var folderPath = "Templates/";
                var templateFolder = FolderManager.Instance.GetFolder(UserInfo.PortalID, folderPath);
                cboFolders.Services.Parameters.Add("permission", "ADD");
                
                if (templateFolder != null && IsAccessibleByUser(templateFolder))
                {
                    cboFolders.SelectedFolder = templateFolder;
                }
                
                if (Tab != null)
                {
                    txtFile.Text = Globals.CleanName(Tab.TabName);
                }
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="SerializeTab">
          <declaration><![CDATA[private void SerializeTab(XmlDocument xmlTemplate, XmlNode nodeTabs)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="72" sc="9" el="76" ec="10">admin\Tabs\Export.ascx.cs</location>
            <body hash="1bb7820dddc844537950929d62a5547f"><![CDATA[{
            var xmlTab = new XmlDocument();
            var nodeTab = TabController.SerializeTab(xmlTab, Tab, chkContent.Checked);
            nodeTabs.AppendChild(xmlTemplate.ImportNode(nodeTab, true));
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_tab">
          <declaration><![CDATA[private TabInfo _tab;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cboFolders">
          <declaration><![CDATA[protected DnnFolderDropDownList cboFolders;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkContent">
          <declaration><![CDATA[protected CheckBox chkContent;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdCancel">
          <declaration><![CDATA[protected HyperLink cmdCancel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdExport">
          <declaration><![CDATA[protected LinkButton cmdExport;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plContent">
          <declaration><![CDATA[protected LabelControl plContent;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plDescription">
          <declaration><![CDATA[protected LabelControl plDescription;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plFile">
          <declaration><![CDATA[protected LabelControl plFile;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plFolder">
          <declaration><![CDATA[protected LabelControl plFolder;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtDescription">
          <declaration><![CDATA[protected TextBox txtDescription;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtFile">
          <declaration><![CDATA[protected TextBox txtFile;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="valDescription">
          <declaration><![CDATA[protected RequiredFieldValidator valDescription;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="valFileName">
          <declaration><![CDATA[protected RequiredFieldValidator valFileName;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="Tab">
          <declaration><![CDATA[public TabInfo Tab]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="55" sc="13" el="61" ec="14">admin\Tabs\Export.ascx.cs</location>
            <body hash="02c80ece1eda13b490795ce4e9b5c9c3"><![CDATA[{
                if (_tab == null)
                {
                    _tab = TabController.Instance.GetTab(TabId, PortalId, false);
                }
                return _tab;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="Import">
      <declaration><![CDATA[public class Import : PortalModuleBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public Import()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="BindBeforeAfterTabControls">
          <declaration><![CDATA[private void BindBeforeAfterTabControls()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="65" sc="9" el="79" ec="10">admin\Tabs\Import.ascx.cs</location>
            <body hash="b00b27e4ab8bb63325f5aa230628e3a0"><![CDATA[{
            var noneSpecified = "<" + Localization.GetString("None_Specified") + ">";
            cboParentTab.UndefinedItem = new ListItem(noneSpecified, string.Empty);
            var parentTab = cboParentTab.SelectedPage;

            List<TabInfo> listTabs = parentTab != null ? TabController.Instance.GetTabsByPortal(parentTab.PortalID).WithParentId(parentTab.TabID) : TabController.Instance.GetTabsByPortal(PortalId).WithParentId(Null.NullInteger);
            listTabs = TabController.GetPortalTabs(listTabs, Null.NullInteger, true, noneSpecified, false, false, false, false, true);
            cboPositionTab.DataSource = listTabs;
            cboPositionTab.DataBind();
            rbInsertPosition.Items.Clear();
            rbInsertPosition.Items.Add(new ListItem(Localization.GetString("InsertBefore", LocalResourceFile), "Before"));
            rbInsertPosition.Items.Add(new ListItem(Localization.GetString("InsertAfter", LocalResourceFile), "After"));
            rbInsertPosition.Items.Add(new ListItem(Localization.GetString("InsertAtEnd", LocalResourceFile), "AtEnd"));
            rbInsertPosition.SelectedValue = "After";
        }]]></body>
          </codeblock>
        </method>
        <method name="BindFiles">
          <declaration><![CDATA[private void BindFiles()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="82" sc="9" el="100" ec="10">admin\Tabs\Import.ascx.cs</location>
            <body hash="8d4f6ffde9f9faf2347e705e4992e309"><![CDATA[{
            cboTemplate.Items.Clear();
            if (cboFolders.SelectedItem != null)
            {
                var folder = FolderManager.Instance.GetFolder(cboFolders.SelectedItemValueAsInt);
                if (folder != null)
                {
                    //var files = Directory.GetFiles(PortalSettings.HomeDirectoryMapPath + folder.FolderPath, "*.page.template");
                    var files = Globals.GetFileList(PortalId, "page.template", false, folder.FolderPath);
                    foreach (FileItem file in files)
                    {
                        cboTemplate.AddItem(file.Text.Replace(".page.template", ""), file.Value);
                    }
                    cboTemplate.InsertItem(0, "<" + Localization.GetString("None_Specified") + ">", "None_Specified");
                    cboTemplate.SelectedIndex = 0;
                }

            }
        }]]></body>
          </codeblock>
        </method>
        <method name="BindTabControls">
          <declaration><![CDATA[private void BindTabControls()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="103" sc="9" el="112" ec="10">admin\Tabs\Import.ascx.cs</location>
            <body hash="32dac8623f9ac576b406a0ff74be7d7c"><![CDATA[{
            BindBeforeAfterTabControls();
            divInsertPositionRow.Visible = cboPositionTab.Items.Count > 0;
            cboParentTab.AutoPostBack = true;
            if (cboPositionTab.FindItemByValue(TabId.ToString(CultureInfo.InvariantCulture)) != null)
            {
                cboPositionTab.ClearSelection();
                cboPositionTab.FindItemByValue(TabId.ToString(CultureInfo.InvariantCulture)).Selected = true;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="DisplayNewRows">
          <declaration><![CDATA[private void DisplayNewRows()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="115" sc="9" el="120" ec="10">admin\Tabs\Import.ascx.cs</location>
            <body hash="b7707de8ea699fa20ada218af6146ee3"><![CDATA[{
            divTabName.Visible = (optMode.SelectedIndex == 0);
            divParentTab.Visible = (optMode.SelectedIndex == 0);
            divInsertPositionRow.Visible = (optMode.SelectedIndex == 0);
            divInsertPositionRow.Visible = (optMode.SelectedIndex == 0);
        }]]></body>
          </codeblock>
        </method>
        <method name="OnFolderIndexChanged">
          <declaration><![CDATA[protected void OnFolderIndexChanged(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="164" sc="9" el="166" ec="10">admin\Tabs\Import.ascx.cs</location>
            <body hash="4246d55d82d7b0d3cac30cefd82c9480"><![CDATA[{
            BindFiles();
        }]]></body>
          </codeblock>
        </method>
        <method name="OnImportClick">
          <declaration><![CDATA[protected void OnImportClick(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="169" sc="9" el="299" ec="10">admin\Tabs\Import.ascx.cs</location>
            <body hash="6f2e2ff2ee8cd34485ca2dfbe1c8e556"><![CDATA[{
            try
            {
                if (cboTemplate.SelectedItem == null || cboTemplate.SelectedValue == "None_Specified")
                {
                    UI.Skins.Skin.AddModuleMessage(this, Localization.GetString("SpecifyFile", LocalResourceFile), ModuleMessage.ModuleMessageType.RedError);
                    return;
                }
                if (optMode.SelectedIndex == -1)
                {
                    UI.Skins.Skin.AddModuleMessage(this, Localization.GetString("SpecifyMode", LocalResourceFile), ModuleMessage.ModuleMessageType.RedError);
                    return;
                }
                if (cboFolders.SelectedItem == null) return;
                var selectedFolder = FolderManager.Instance.GetFolder(cboFolders.SelectedItemValueAsInt);
                if (selectedFolder == null) return;

                var selectedFile = Services.FileSystem.FileManager.Instance.GetFile(Convert.ToInt32(cboTemplate.SelectedValue));
                var xmlDoc = new XmlDocument();
                using (var content = Services.FileSystem.FileManager.Instance.GetFileContent(selectedFile))
                {
                    xmlDoc.Load(content);
                }

                var tabNodes = new List<XmlNode>();
                var selectSingleNode = xmlDoc.SelectSingleNode("//portal/tabs");
                if (selectSingleNode != null)
                {
                    tabNodes.AddRange(selectSingleNode.ChildNodes.Cast<XmlNode>());
                }
                if (tabNodes.Count == 0)
                {
                    UI.Skins.Skin.AddModuleMessage(this, Localization.GetString("NoTabsInTemplate", LocalResourceFile), ModuleMessage.ModuleMessageType.RedError);
                    return;
                }

                TabInfo objTab;
                if (optMode.SelectedValue == "ADD")
                {
                    //Check for invalid
                    string invalidType;
                    if (!TabController.IsValidTabName(txtTabName.Text, out invalidType))
                    {
                        var warningMessage = string.Format(Localization.GetString(invalidType, LocalResourceFile), txtTabName.Text);
                        UI.Skins.Skin.AddModuleMessage(this, warningMessage, ModuleMessage.ModuleMessageType.RedError);
                        return;
                    }

                    //New Tab
                    objTab = new TabInfo { PortalID = PortalId, TabName = txtTabName.Text, IsVisible = true };
                    var parentId = cboParentTab.SelectedItemValueAsInt;
                    if (parentId != Null.NullInteger)
                    {
                        objTab.ParentId = parentId;
                    }
                    objTab.TabPath = Globals.GenerateTabPath(objTab.ParentId, objTab.TabName);
                    var tabId = TabController.GetTabByTabPath(objTab.PortalID, objTab.TabPath, Null.NullString);

                    //Check if tab exists
                    if (tabId != Null.NullInteger)
                    {
                        TabInfo existingTab = TabController.Instance.GetTab(tabId, PortalId, false);
                        if (existingTab != null && existingTab.IsDeleted)
                        {
                            UI.Skins.Skin.AddModuleMessage(this, Localization.GetString("TabRecycled", LocalResourceFile), ModuleMessage.ModuleMessageType.YellowWarning);
                        }
                        else
                        {
                            UI.Skins.Skin.AddModuleMessage(this, Localization.GetString("TabExists", LocalResourceFile), ModuleMessage.ModuleMessageType.RedError);
                        }
                        return;
                    }

                    var positionTabId = Int32.Parse(cboPositionTab.SelectedItem.Value);

                    if (rbInsertPosition.SelectedValue == "After" && positionTabId > Null.NullInteger)
                    {
                        objTab.TabID = TabController.Instance.AddTabAfter(objTab, positionTabId);
                    }
                    else if (rbInsertPosition.SelectedValue == "Before" && positionTabId > Null.NullInteger)
                    {
                        objTab.TabID = TabController.Instance.AddTabBefore(objTab, positionTabId);
                    }
                    else
                    {
                        objTab.TabID = TabController.Instance.AddTab(objTab);
                    }
                    EventLogController.Instance.AddLog(objTab, PortalSettings, UserId, "", EventLogController.EventLogType.TAB_CREATED);

                    objTab = TabController.DeserializeTab(tabNodes[0], objTab, PortalId, PortalTemplateModuleAction.Replace);

                    var exceptions = string.Empty;
                    //Create second tabs onwards. For firs tab, we like to use tab details from text box, for rest it'll come from template
                    for (var tab = 1; tab < tabNodes.Count; tab++)
                    {
                        try
                        {
                            TabController.DeserializeTab(tabNodes[tab], null, PortalId, PortalTemplateModuleAction.Replace);
                        }
                        catch (Exception ex)
                        {
                            Exceptions.LogException(ex);
                            exceptions += string.Format("Template Tab # {0}. Error {1}<br/>", tab + 1, ex.Message);
                        }
                    }
                    if (!string.IsNullOrEmpty(exceptions))
                    {
                        UI.Skins.Skin.AddModuleMessage(this, exceptions, ModuleMessage.ModuleMessageType.RedError);
                        return;
                    }
                }
                else
                {
                    //Replace Existing Tab
                    objTab = TabController.DeserializeTab(tabNodes[0], Tab, PortalId, PortalTemplateModuleAction.Replace);
                }
                switch (optRedirect.SelectedValue)
                {
                    case "VIEW":
                        Response.Redirect(Globals.NavigateURL(objTab.TabID), true);
                        break;
                    default:
                        Response.Redirect(Globals.NavigateURL(objTab.TabID, "Tab", "action=edit"), true);
                        break;
                }
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="123" sc="9" el="130" ec="10">admin\Tabs\Import.ascx.cs</location>
            <body hash="5a4f94eaabf003dbf120901e7b6b550e"><![CDATA[{
            base.OnInit(e);

            if (!TabPermissionController.CanImportPage())
            {
                Response.Redirect(Globals.AccessDeniedURL(), true);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="133" sc="9" el="161" ec="10">admin\Tabs\Import.ascx.cs</location>
            <body hash="59258e4872a9715a418fd88cbe148551"><![CDATA[{
            base.OnLoad(e);

            cboFolders.SelectionChanged += OnFolderIndexChanged;
            cmdImport.Click += OnImportClick;
            cboParentTab.SelectionChanged += OnParentTabIndexChanged;
            cboTemplate.SelectedIndexChanged += OnTemplateIndexChanged;
            optMode.SelectedIndexChanged += OptModeSelectedIndexChanged;

            try
            {
                if (!Page.IsPostBack)
                {
                    cmdCancel.NavigateUrl = Globals.NavigateURL();
                    cboFolders.UndefinedItem = new ListItem("<" + Localization.GetString("None_Specified") + ">", string.Empty);
                    var folders = FolderManager.Instance.GetFolders(UserInfo, "BROWSE, ADD");
                    var templateFolder = folders.SingleOrDefault(f => f.FolderPath == "Templates/");
                    if (templateFolder != null) cboFolders.SelectedFolder = templateFolder;

                    BindFiles();
                    BindTabControls();
                    DisplayNewRows();
                }
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnParentTabIndexChanged">
          <declaration><![CDATA[protected void OnParentTabIndexChanged(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="302" sc="9" el="304" ec="10">admin\Tabs\Import.ascx.cs</location>
            <body hash="f93f1d83c1e50eacd8eeb92a8e412d84"><![CDATA[{
            BindBeforeAfterTabControls();
        }]]></body>
          </codeblock>
        </method>
        <method name="OnTemplateIndexChanged">
          <declaration><![CDATA[protected void OnTemplateIndexChanged(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="307" sc="9" el="339" ec="10">admin\Tabs\Import.ascx.cs</location>
            <body hash="1dff0d142dc492c694462a65b1234f0a"><![CDATA[{
            try
            {
                if (cboTemplate.SelectedIndex > 0 && cboFolders.SelectedItem != null)
                {
                    var selectedFile = Services.FileSystem.FileManager.Instance.GetFile(Convert.ToInt32(cboTemplate.SelectedValue));
                    var xmldoc = new XmlDocument();
                    using (var fileContent = Services.FileSystem.FileManager.Instance.GetFileContent(selectedFile))
                    {
                        xmldoc.Load(fileContent);
                        var node = xmldoc.SelectSingleNode("//portal/description");
                        if (node != null && !String.IsNullOrEmpty(node.InnerXml))
                        {
                            lblTemplateDescription.Visible = true;
                            lblTemplateDescription.Text = Server.HtmlDecode(node.InnerXml);
                            txtTabName.Text = cboTemplate.SelectedItem.Text;
                        }
                        else
                        {
                            lblTemplateDescription.Visible = false;
                        }
                    }
                }
                else
                {
                    lblTemplateDescription.Visible = false;
                }
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OptModeSelectedIndexChanged">
          <declaration><![CDATA[protected void OptModeSelectedIndexChanged(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="342" sc="9" el="344" ec="10">admin\Tabs\Import.ascx.cs</location>
            <body hash="5b0ad6b723a2fe980110bc38141f3bd2"><![CDATA[{
            DisplayNewRows();
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_tab">
          <declaration><![CDATA[private TabInfo _tab;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cboFolders">
          <declaration><![CDATA[protected DnnFolderDropDownList cboFolders;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cboParentTab">
          <declaration><![CDATA[protected DnnPageDropDownList cboParentTab;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cboPositionTab">
          <declaration><![CDATA[protected DnnComboBox cboPositionTab;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cboTemplate">
          <declaration><![CDATA[protected DnnComboBox cboTemplate;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdCancel">
          <declaration><![CDATA[protected HyperLink cmdCancel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdImport">
          <declaration><![CDATA[protected LinkButton cmdImport;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="divInsertPositionRow">
          <declaration><![CDATA[protected HtmlGenericControl divInsertPositionRow;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="divParentTab">
          <declaration><![CDATA[protected HtmlGenericControl divParentTab;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="divTabName">
          <declaration><![CDATA[protected HtmlGenericControl divTabName;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblTemplateDescription">
          <declaration><![CDATA[protected Label lblTemplateDescription;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="optMode">
          <declaration><![CDATA[protected RadioButtonList optMode;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="optRedirect">
          <declaration><![CDATA[protected RadioButtonList optRedirect;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plFolder">
          <declaration><![CDATA[protected LabelControl plFolder;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plInsertPosition">
          <declaration><![CDATA[protected LabelControl plInsertPosition;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plMode">
          <declaration><![CDATA[protected LabelControl plMode;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plParentTab">
          <declaration><![CDATA[protected LabelControl plParentTab;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plRedirect">
          <declaration><![CDATA[protected LabelControl plRedirect;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plTabName">
          <declaration><![CDATA[protected LabelControl plTabName;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plTemplate">
          <declaration><![CDATA[protected LabelControl plTemplate;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="rbInsertPosition">
          <declaration><![CDATA[protected RadioButtonList rbInsertPosition;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtTabName">
          <declaration><![CDATA[protected TextBox txtTabName;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="valTemplate">
          <declaration><![CDATA[protected RequiredFieldValidator valTemplate;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="Tab">
          <declaration><![CDATA[public TabInfo Tab]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="55" sc="13" el="61" ec="14">admin\Tabs\Import.ascx.cs</location>
            <body hash="02c80ece1eda13b490795ce4e9b5c9c3"><![CDATA[{
                if (_tab == null)
                {
                    _tab = TabController.Instance.GetTab(TabId, PortalId, false);
                }
                return _tab;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="DotNetNuke.Modules.Admin.Users">
    <class name="EditUser">
      <declaration><![CDATA[public class EditUser : UserModuleBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public EditUser()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
        <constructor name=".cctor">
          <declaration><![CDATA[static EditUser()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="57" sc="9" el="57" ec="97">DesktopModules\Admin\Security\EditUser.ascx.cs</location>
            <body hash="d7f017782d3bce2ffa684bf56909bcda"><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof(EditUser))]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="BindData">
          <declaration><![CDATA[private void BindData()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="188" sc="9" el="271" ec="10">DesktopModules\Admin\Security\EditUser.ascx.cs</location>
            <body hash="cc12acb183187875363054253a93dd48"><![CDATA[{
            if (User != null)
            {
                //If trying to add a SuperUser - check that user is a SuperUser
                if (VerifyUserPermissions() == false)
                {
                    return;
                }

                if (!Page.IsPostBack)
                {
                    if ((Request.QueryString["pageno"] != null))
                    {
                        PageNo = int.Parse(Request.QueryString["pageno"]);
                    }
                    else
                    {
                        PageNo = 0;
                    }
                }
                userForm.DataSource = User;


                // hide username field in UseEmailAsUserName mode
                bool disableUsername = PortalController.GetPortalSettingAsBoolean("Registration_UseEmailAsUserName", PortalId, false);
                if (disableUsername)
                {
                    userForm.Items[0].Visible = false;
                }

                if (!Page.IsPostBack)
                {
                    userForm.DataBind();
                }

                ctlPassword.User = User;
                ctlPassword.DataBind();

                if ((!DisplayServices))
                {
                    servicesTab.Visible = false;
                }
                else
                {
                    ctlServices.User = User;
                    ctlServices.DataBind();
                }

                BindUser();
                ctlProfile.User = User;
                ctlProfile.DataBind();

                dnnServicesDetails.Visible = DisplayServices;

                var urlSettings = new DotNetNuke.Entities.Urls.FriendlyUrlSettings(PortalSettings.PortalId);
                var showVanityUrl = (Config.GetFriendlyUrlProvider() == "advanced") && !User.IsSuperUser;
                if (showVanityUrl)
                {
                    VanityUrlRow.Visible = true;
                    if (String.IsNullOrEmpty(User.VanityUrl))
                    {
                        //Clean Display Name
                        bool modified;
                        var options = UrlRewriterUtils.GetOptionsFromSettings(urlSettings);
                        var cleanUrl = FriendlyUrlController.CleanNameForUrl(User.DisplayName, options, out modified);
                        var uniqueUrl = FriendlyUrlController.ValidateUrl(cleanUrl, -1, PortalSettings, out modified).ToLowerInvariant();

                        VanityUrlAlias.Text = String.Format("{0}/{1}/", PortalSettings.PortalAlias.HTTPAlias, urlSettings.VanityUrlPrefix);
                        VanityUrlTextBox.Text = uniqueUrl;
                        ShowVanityUrl = true;
                    }
                    else
                    {
                        VanityUrl.Text = String.Format("{0}/{1}/{2}", PortalSettings.PortalAlias.HTTPAlias, urlSettings.VanityUrlPrefix, User.VanityUrl);
                        ShowVanityUrl = false;
                    }
                }
            }
            else
            {
                AddModuleMessage("NoUser", ModuleMessage.ModuleMessageType.YellowWarning, true);
                DisableForm();
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="BindMembership">
          <declaration><![CDATA[private void BindMembership()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="334" sc="9" el="338" ec="10">DesktopModules\Admin\Security\EditUser.ascx.cs</location>
            <body hash="80203d001cb5a8717da98c47676034c0"><![CDATA[{
            ctlMembership.User = User;
            ctlMembership.DataBind();
            AddModuleMessage("UserLockedOut", ModuleMessage.ModuleMessageType.YellowWarning, ctlMembership.UserMembership.LockedOut && (!Page.IsPostBack));
        }]]></body>
          </codeblock>
        </method>
        <method name="BindUser">
          <declaration><![CDATA[private void BindUser()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="341" sc="9" el="344" ec="10">DesktopModules\Admin\Security\EditUser.ascx.cs</location>
            <body hash="6868959214085b8eb7b264fd30af2824"><![CDATA[{
            BindMembership();
          
        }]]></body>
          </codeblock>
        </method>
        <method name="cmdDelete_Click">
          <declaration><![CDATA[protected void cmdDelete_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="443" sc="9" el="453" ec="10">DesktopModules\Admin\Security\EditUser.ascx.cs</location>
            <body hash="7f3811bafe2b02aeeeaa99ed2ace7161"><![CDATA[{
            UserInfo user = User;
            if (!UserController.DeleteUser(ref user, true, false))
            {
                AddModuleMessage("UserDeleteError", ModuleMessage.ModuleMessageType.RedError, true);
            }

            //DNN-26777 
            new PortalSecurity().SignOut();
            Response.Redirect(Globals.NavigateURL(PortalSettings.HomeTabId));
        }]]></body>
          </codeblock>
        </method>
        <method name="cmdUpdate_Click">
          <declaration><![CDATA[protected void cmdUpdate_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="456" sc="9" el="509" ec="10">DesktopModules\Admin\Security\EditUser.ascx.cs</location>
            <body hash="f3afcde4650c0dfe613513e7afdc47db"><![CDATA[{
            if (userForm.IsValid && (User != null))
            {
                if (User.UserID == PortalSettings.AdministratorId)
                {
                    //Clear the Portal Cache
                    DataCache.ClearPortalCache(UserPortalID, true);
                }
                try
                {
                    //Update DisplayName to conform to Format
                    UpdateDisplayName();

                    //DNN-5874 Check if unique display name is required
                    if (PortalSettings.Registration.RequireUniqueDisplayName)
                    {
                        var usersWithSameDisplayName = (List<UserInfo>)MembershipProvider.Instance().GetUsersBasicSearch(PortalId, 0, 2, "DisplayName", true, "DisplayName", User.DisplayName);
                        if (usersWithSameDisplayName.Any(user => user.UserID != User.UserID))
                        {
                            throw new Exception("Display Name must be unique");
                        }
                    }

                    UserController.UpdateUser(UserPortalID, User);

                    // make sure username matches possibly changed email address
                    if (PortalSettings.Registration.UseEmailAsUserName)
                    {
                        if (User.Username.ToLower() != User.Email.ToLower())
                        {
                            UserController.ChangeUsername(User.UserID, User.Email);

                            //note that this effectively will cause a signout due to the cookie not matching anymore.
                            Response.Cookies.Add(new HttpCookie("USERNAME_CHANGED", User.Email) { Path = (!string.IsNullOrEmpty(Globals.ApplicationPath) ? Globals.ApplicationPath : "/") });
                        }
                    }

                    Response.Redirect(Request.RawUrl);
                }
                catch (Exception exc)
                {
                    Logger.Error(exc);
                    if (exc.Message == "Display Name must be unique")
                    {
                        AddModuleMessage("DisplayNameNotUnique", ModuleMessage.ModuleMessageType.RedError, true);
                    }
                    else
                    {
                        AddModuleMessage("UserUpdatedError", ModuleMessage.ModuleMessageType.RedError, true);
                    }
                }
            }

        }]]></body>
          </codeblock>
        </method>
        <method name="DisableForm">
          <declaration><![CDATA[private void DisableForm()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="347" sc="9" el="353" ec="10">DesktopModules\Admin\Security\EditUser.ascx.cs</location>
            <body hash="82f0ee189b73564ce8f696c7a7285f90"><![CDATA[{
            adminTabNav.Visible = false;
            dnnProfileDetails.Visible = false;
            dnnServicesDetails.Visible = false;
            actionsRow.Visible = false;
            ctlMembership.Visible = false;
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="376" sc="9" el="419" ec="10">DesktopModules\Admin\Security\EditUser.ascx.cs</location>
            <body hash="80e486c4da39e4257cc0d8fcc15abdcc"><![CDATA[{
            base.OnInit(e);

            cmdDelete.Click += cmdDelete_Click;
            cmdUpdate.Click += cmdUpdate_Click;
            
            ctlServices.SubscriptionUpdated += SubscriptionUpdated;
            ctlProfile.ProfileUpdateCompleted += ProfileUpdateCompleted;
            ctlPassword.PasswordUpdated += PasswordUpdated;
            ctlPassword.PasswordQuestionAnswerUpdated += PasswordQuestionAnswerUpdated;

			email.ValidationExpression = PortalSettings.Registration.EmailValidator;

			JavaScript.RequestRegistration(CommonJs.DnnPlugins);
            JavaScript.RequestRegistration(CommonJs.Knockout);


            //Set the Membership Control Properties
            ctlMembership.ID = "Membership";
            ctlMembership.ModuleConfiguration = ModuleConfiguration;
            ctlMembership.UserId = UserId;

            //Set the Password Control Properties
            ctlPassword.ID = "Password";
            ctlPassword.ModuleConfiguration = ModuleConfiguration;
            ctlPassword.UserId = UserId;

            //Set the Profile Control Properties
            ctlProfile.ID = "Profile";
            ctlProfile.ModuleConfiguration = ModuleConfiguration;
            ctlProfile.UserId = UserId;

            //Set the Services Control Properties
            ctlServices.ID = "MemberServices";
            ctlServices.ModuleConfiguration = ModuleConfiguration;
            ctlServices.UserId = UserId;

            //Define DisplayName filed Enabled Property:
            object setting = GetSetting(UserPortalID, "Security_DisplayNameFormat");
            if ((setting != null) && (!string.IsNullOrEmpty(Convert.ToString(setting))))
            {
                displayName.Enabled = false;
            }            
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="428" sc="9" el="440" ec="10">DesktopModules\Admin\Security\EditUser.ascx.cs</location>
            <body hash="eba0726e612686ad0f4f0fcd6e2d0d84"><![CDATA[{
            base.OnLoad(e);

            try
            {
                //Bind the User information to the controls
                BindData();
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="PasswordQuestionAnswerUpdated">
          <declaration><![CDATA[private void PasswordQuestionAnswerUpdated(object sender, Password.PasswordUpdatedEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="518" sc="9" el="532" ec="10">DesktopModules\Admin\Security\EditUser.ascx.cs</location>
            <body hash="ac494dcdb7d8a7bd235b0f2eeba8de32"><![CDATA[{
            if (IsUserOrAdmin == false)
            {
                return;
            }
            PasswordUpdateStatus status = e.UpdateStatus;
            if (status == PasswordUpdateStatus.Success)
            {
                AddModuleMessage("PasswordQAChanged", ModuleMessage.ModuleMessageType.GreenSuccess, true);
            }
            else
            {
                AddModuleMessage(status.ToString(), ModuleMessage.ModuleMessageType.RedError, true);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="PasswordUpdated">
          <declaration><![CDATA[private void PasswordUpdated(object sender, Password.PasswordUpdatedEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="541" sc="9" el="576" ec="10">DesktopModules\Admin\Security\EditUser.ascx.cs</location>
            <body hash="1338630f3fb8ca2716c7d96057d61deb"><![CDATA[{
            if (IsUserOrAdmin == false)
            {
                return;
            }
            PasswordUpdateStatus status = e.UpdateStatus;

            if (status == PasswordUpdateStatus.Success)
            {
                //Send Notification to User
                try
                {
                    var accessingUser = (UserInfo)HttpContext.Current.Items["UserInfo"];
                    if (accessingUser.UserID != User.UserID)
                    {
                        //The password was changed by someone else 
                        Mail.SendMail(User, MessageType.PasswordReminder, PortalSettings);
                    }
                    else
                    {
                        //The User changed his own password
                        Mail.SendMail(User, MessageType.UserUpdatedOwnPassword, PortalSettings);
                    }
                    AddModuleMessage("PasswordChanged", ModuleMessage.ModuleMessageType.GreenSuccess, true);
                }
                catch (Exception ex)
                {
                    AddModuleMessage("PasswordMailError", ModuleMessage.ModuleMessageType.YellowWarning, true);
                    Exceptions.LogException(ex);
                }
            }
            else
            {
                AddModuleMessage(status.ToString(), ModuleMessage.ModuleMessageType.RedError, true);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="ProfileUpdateCompleted">
          <declaration><![CDATA[private void ProfileUpdateCompleted(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="585" sc="9" el="613" ec="10">DesktopModules\Admin\Security\EditUser.ascx.cs</location>
            <body hash="3f89edcc8e50dd7a7fa788a1f3ccae14"><![CDATA[{
            if (IsUserOrAdmin == false)
            {
                return;
            }
            if (IsUser)
            {
                //Notify the user that his/her profile was updated
                Mail.SendMail(User, MessageType.ProfileUpdated, PortalSettings);

                ProfilePropertyDefinition localeProperty = User.Profile.GetProperty("PreferredLocale");
                if (localeProperty.IsDirty)
                {
                    //store preferredlocale in cookie, if none specified set to portal default.
                    if (User.Profile.PreferredLocale == string.Empty)
                    {
                        Localization.SetLanguage(PortalController.GetPortalDefaultLanguage(User.PortalID));
                    }
                    else
                    {
                        Localization.SetLanguage(User.Profile.PreferredLocale);
                    }
                }
            }

            //Redirect to same page (this will update all controls for any changes to profile
            //and leave us at Page 0 (User Credentials)
            Response.Redirect(Request.RawUrl, true);
        }]]></body>
          </codeblock>
        </method>
        <method name="SubscriptionUpdated">
          <declaration><![CDATA[private void SubscriptionUpdated(object sender, MemberServices.SubscriptionUpdatedEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="616" sc="9" el="627" ec="10">DesktopModules\Admin\Security\EditUser.ascx.cs</location>
            <body hash="e49e6b015d5cf505f42cb646a4e5cc4c"><![CDATA[{
            string message;
            if (e.Cancel)
            {
                message = string.Format(Localization.GetString("UserUnSubscribed", LocalResourceFile), e.RoleName);
            }
            else
            {
                message = string.Format(Localization.GetString("UserSubscribed", LocalResourceFile), e.RoleName);
            }
            AddLocalizedModuleMessage(message, ModuleMessage.ModuleMessageType.GreenSuccess, true);
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateDisplayName">
          <declaration><![CDATA[private void UpdateDisplayName()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="356" sc="9" el="362" ec="10">DesktopModules\Admin\Security\EditUser.ascx.cs</location>
            <body hash="16f88f916693fbc7a91131de9983ff6f"><![CDATA[{
            //Update DisplayName to conform to Format
            if (!string.IsNullOrEmpty(PortalSettings.Registration.DisplayNameFormat))
            {
                User.UpdateDisplayName(PortalSettings.Registration.DisplayNameFormat);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="VerifyUserPermissions">
          <declaration><![CDATA[private bool VerifyUserPermissions()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="274" sc="9" el="331" ec="10">DesktopModules\Admin\Security\EditUser.ascx.cs</location>
            <body hash="ef9c0b9866635124236d131dc97c50a4"><![CDATA[{
            if (IsHostMenu && !UserInfo.IsSuperUser)
            {
                AddModuleMessage("NoUser", ModuleMessage.ModuleMessageType.YellowWarning, true);
                DisableForm();
                return false;
            }

            //Check if User is a member of the Current Portal (or a member of the MasterPortal if PortalGroups enabled)
            if (User.PortalID != Null.NullInteger && User.PortalID != PortalId)
            {
                AddModuleMessage("InvalidUser", ModuleMessage.ModuleMessageType.YellowWarning, true);
                DisableForm();
                return false;
            }

            //Check if User is a SuperUser and that the current User is a SuperUser
            if (User.IsSuperUser && !UserInfo.IsSuperUser)
            {
                AddModuleMessage("NoUser", ModuleMessage.ModuleMessageType.YellowWarning, true);
                DisableForm();
                return false;
            }
            if (IsEdit)
            {
                //Check if user has admin rights
                if (!IsAdmin || (User.IsInRole(PortalSettings.AdministratorRoleName) && !PortalSecurity.IsInRole(PortalSettings.AdministratorRoleName)))
                {
                    AddModuleMessage("NotAuthorized", ModuleMessage.ModuleMessageType.YellowWarning, true);
                    DisableForm();
                    return false;
                }
            }
            else
            {
                if (!IsUser)
                {
                    if (Request.IsAuthenticated)
                    {
                        if (!PortalSecurity.IsInRole(PortalSettings.AdministratorRoleName))
                        {
                            //Display current user's profile
                            Response.Redirect(Globals.NavigateURL(PortalSettings.UserTabId, "", "UserID=" + UserInfo.UserID), true);
                        }
                    }
                    else
                    {
                        if ((User.UserID > Null.NullInteger))
                        {
                            AddModuleMessage("NotAuthorized", ModuleMessage.ModuleMessageType.YellowWarning, true);
                            DisableForm();
                            return false;
                        }
                    }
                }
            }
            return true;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="actionsRow">
          <declaration><![CDATA[protected HtmlGenericControl actionsRow;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="adminTabNav">
          <declaration><![CDATA[protected HtmlGenericControl adminTabNav;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdDelete">
          <declaration><![CDATA[protected LinkButton cmdDelete;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdUpdate">
          <declaration><![CDATA[protected LinkButton cmdUpdate;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ctlMembership">
          <declaration><![CDATA[protected Membership ctlMembership;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ctlPassword">
          <declaration><![CDATA[protected Password ctlPassword;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ctlProfile">
          <declaration><![CDATA[protected DNNProfile ctlProfile;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ctlServices">
          <declaration><![CDATA[protected MemberServices ctlServices;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="displayName">
          <declaration><![CDATA[protected DnnFormTextBoxItem displayName;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="dnnEditUser">
          <declaration><![CDATA[protected HtmlGenericControl dnnEditUser;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="dnnProfileDetails">
          <declaration><![CDATA[protected Panel dnnProfileDetails;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="dnnServicesDetails">
          <declaration><![CDATA[protected HtmlGenericControl dnnServicesDetails;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="email">
          <declaration><![CDATA[protected DnnFormTextBoxItem email;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Logger">
          <declaration><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof(EditUser));]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="servicesTab">
          <declaration><![CDATA[protected HtmlGenericControl servicesTab;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="userForm">
          <declaration><![CDATA[protected DnnFormEditor userForm;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="userNameReadOnly">
          <declaration><![CDATA[protected DnnFormLiteralItem userNameReadOnly;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="UserSubscriptions">
          <declaration><![CDATA[protected Subscriptions UserSubscriptions;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="VanityUrl">
          <declaration><![CDATA[protected Label VanityUrl;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="VanityUrlAlias">
          <declaration><![CDATA[protected Label VanityUrlAlias;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="VanityUrlHeader">
          <declaration><![CDATA[protected Label VanityUrlHeader;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="VanityUrlLabel">
          <declaration><![CDATA[protected LabelControl VanityUrlLabel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="VanityUrlPanel">
          <declaration><![CDATA[protected HtmlGenericControl VanityUrlPanel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="VanityUrlRow">
          <declaration><![CDATA[protected Panel VanityUrlRow;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="VanityUrlTextBox">
          <declaration><![CDATA[protected TextBox VanityUrlTextBox;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="DisplayServices">
          <declaration><![CDATA[protected bool DisplayServices]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="68" sc="13" el="71" ec="14">DesktopModules\Admin\Security\EditUser.ascx.cs</location>
            <body hash="83f59ce4ed648eb2fd72980c234020cb"><![CDATA[{
                object setting = GetSetting(PortalId, "Profile_ManageServices");
                return Convert.ToBoolean(setting) && !(IsEdit || User.IsSuperUser);
            }]]></body>
          </codeblock>
        </property>
        <property name="PageNo">
          <declaration><![CDATA[public int PageNo]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="167" sc="13" el="174" ec="14">DesktopModules\Admin\Security\EditUser.ascx.cs</location>
            <body hash="d2791811541ca3eb4c473299b899bb7e"><![CDATA[{
                int _PageNo = 0;
                if (ViewState["PageNo"] != null && !IsPostBack)
                {
                    _PageNo = Convert.ToInt32(ViewState["PageNo"]);
                }
                return _PageNo;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="176" sc="13" el="178" ec="14">DesktopModules\Admin\Security\EditUser.ascx.cs</location>
            <body hash="ce992fd07f483cfce68e5f8558df4b03"><![CDATA[{
                ViewState["PageNo"] = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="RedirectURL">
          <declaration><![CDATA[protected string RedirectURL]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="81" sc="13" el="113" ec="14">DesktopModules\Admin\Security\EditUser.ascx.cs</location>
            <body hash="abcc503d5a1fdaf0313e7b9f5d334f4d"><![CDATA[{
                string _RedirectURL = "";

                if (PortalSettings.Registration.RedirectAfterRegistration == Null.NullInteger)
                {
                    if (Request.QueryString["returnurl"] != null)
                    {
                        //return to the url passed to register
                        _RedirectURL = HttpUtility.UrlDecode(Request.QueryString["returnurl"]);

                        //clean the return url to avoid possible XSS attack.
                        _RedirectURL = UrlUtils.ValidReturnUrl(_RedirectURL);

                        if (_RedirectURL.Contains("?returnurl"))
                        {
                            string baseURL = _RedirectURL.Substring(0, _RedirectURL.IndexOf("?returnurl"));
                            string returnURL = _RedirectURL.Substring(_RedirectURL.IndexOf("?returnurl") + 11);

                            _RedirectURL = string.Concat(baseURL, "?returnurl", HttpUtility.UrlEncode(returnURL));
                        }
                    }
                    if (String.IsNullOrEmpty(_RedirectURL))
                    {
                        //redirect to current page 
                        _RedirectURL = Globals.NavigateURL();
                    }
                }
                else //redirect to after registration page
                {
                    _RedirectURL = Globals.NavigateURL(PortalSettings.Registration.RedirectAfterRegistration);
                }
                return _RedirectURL;
            }]]></body>
          </codeblock>
        </property>
        <property name="ReturnUrl">
          <declaration><![CDATA[protected string ReturnUrl]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="123" sc="13" el="125" ec="14">DesktopModules\Admin\Security\EditUser.ascx.cs</location>
            <body hash="d0232d91d812af59558316c0360d79e3"><![CDATA[{
                return Globals.NavigateURL(TabId, "", !String.IsNullOrEmpty(UserFilter) ? UserFilter : "");
            }]]></body>
          </codeblock>
        </property>
        <property name="ShowVanityUrl">
          <declaration><![CDATA[public bool ShowVanityUrl]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="181" sc="37" el="181" ec="41">DesktopModules\Admin\Security\EditUser.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="181" sc="42" el="181" ec="54">DesktopModules\Admin\Security\EditUser.ascx.cs</location>
            <body hash="5dbe2cc086ebbf5db6b03610487cca4c"><![CDATA[private set]]></body>
          </codeblock>
        </property>
        <property name="UserFilter">
          <declaration><![CDATA[protected string UserFilter]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="135" sc="13" el="153" ec="14">DesktopModules\Admin\Security\EditUser.ascx.cs</location>
            <body hash="45824ccf213085ea5affa3c6ced1940b"><![CDATA[{
                string filterString = !string.IsNullOrEmpty(Request["filter"]) ? "filter=" + Request["filter"] : "";
                string filterProperty = !string.IsNullOrEmpty(Request["filterproperty"]) ? "filterproperty=" + Request["filterproperty"] : "";
                string page = !string.IsNullOrEmpty(Request["currentpage"]) ? "currentpage=" + Request["currentpage"] : "";

                if (!string.IsNullOrEmpty(filterString))
                {
                    filterString += "&";
                }
                if (!string.IsNullOrEmpty(filterProperty))
                {
                    filterString += filterProperty + "&";
                }
                if (!string.IsNullOrEmpty(page))
                {
                    filterString += page;
                }
                return filterString;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="ManageUsers">
      <declaration><![CDATA[public class ManageUsers : UserModuleBase, IActionable]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public ManageUsers()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="BindData">
          <declaration><![CDATA[private void BindData()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="251" sc="9" el="301" ec="10">DesktopModules\Admin\Security\ManageUsers.ascx.cs</location>
            <body hash="9b3ec53be6d303f8d0c35eb90d056608"><![CDATA[{
            if (User != null)
            {
				//If trying to add a SuperUser - check that user is a SuperUser
                if (VerifyUserPermissions()==false)
                {
                    return;
                }
				
                if (AddUser)
                {
                    cmdAdd.Text = Localization.GetString("AddUser", LocalResourceFile);
                    lblTitle.Text = Localization.GetString("AddUser", LocalResourceFile);
                }
                else
                {
                    if (!Request.IsAuthenticated)
                    {
                        titleRow.Visible = false;
                    }
                    else
                    {
                        if (IsProfile)
                        {
                            titleRow.Visible = false;
                        }
                        else
                        {
                            lblTitle.Text = string.Format(Localization.GetString("UserTitle", LocalResourceFile), User.Username, User.UserID);
                        }
                    }
                }
                if (!Page.IsPostBack)
                {
                    if ((Request.QueryString["pageno"] != null))
                    {
                        PageNo = int.Parse(Request.QueryString["pageno"]);
                    }
                    else
                    {
                        PageNo = 0;
                    }
                }
                ShowPanel();
            }
            else
            {
                AddModuleMessage("NoUser", ModuleMessage.ModuleMessageType.YellowWarning, true);
                DisableForm();
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="BindMembership">
          <declaration><![CDATA[private void BindMembership()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="364" sc="9" el="370" ec="10">DesktopModules\Admin\Security\ManageUsers.ascx.cs</location>
            <body hash="c6f59afa912f9c83fbeb522fa57020ce"><![CDATA[{
            ctlMembership.User = User;
            ctlMembership.DataBind();
            AddModuleMessage("UserLockedOut", ModuleMessage.ModuleMessageType.YellowWarning, ctlMembership.UserMembership.LockedOut && (!Page.IsPostBack));
            imgLockedOut.Visible = ctlMembership.UserMembership.LockedOut;
            imgOnline.Visible = ctlMembership.UserMembership.IsOnLine;
        }]]></body>
          </codeblock>
        </method>
        <method name="BindUser">
          <declaration><![CDATA[private void BindUser()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="373" sc="9" el="391" ec="10">DesktopModules\Admin\Security\ManageUsers.ascx.cs</location>
            <body hash="a1475ebbea66c57819e162f2c71b7570"><![CDATA[{
            if (AddUser)
            {
                ctlUser.ShowUpdate = false;
                CheckQuota();
            }
            ctlUser.User = User;
            ctlUser.DataBind();

            //Bind the Membership
            if (AddUser || (!IsAdmin))
            {
				membershipRow.Visible = false;
            }
            else
            {
                BindMembership();
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="CheckQuota">
          <declaration><![CDATA[private void CheckQuota()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="394" sc="9" el="404" ec="10">DesktopModules\Admin\Security\ManageUsers.ascx.cs</location>
            <body hash="e634b99c6b21da048d986e8030ab9024"><![CDATA[{
            if (PortalSettings.Users < PortalSettings.UserQuota || UserInfo.IsSuperUser || PortalSettings.UserQuota == 0)
            {
                cmdAdd.Enabled = true;
            }
            else
            {
                cmdAdd.Enabled = false;
                AddModuleMessage("ExceededUserQuota", ModuleMessage.ModuleMessageType.YellowWarning, true);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="cmdAdd_Click">
          <declaration><![CDATA[protected void cmdAdd_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="602" sc="9" el="618" ec="10">DesktopModules\Admin\Security\ManageUsers.ascx.cs</location>
            <body hash="d517aa005a9f291aeabd51e6b96cad10"><![CDATA[{
            if (IsAdmin == false && HasManageUsersModulePermission() == false)
            {
                return;
            }
            if (ctlUser.IsValid && (ctlProfile.IsValid))
            {
                ctlUser.CreateUser();
            }
            else
            {
                if (ctlUser.CreateStatus != UserCreateStatus.AddUser)
                {
                    AddLocalizedModuleMessage(UserController.GetUserCreateStatus(ctlUser.CreateStatus), ModuleMessage.ModuleMessageType.RedError, true);
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="cmdCancel_Click">
          <declaration><![CDATA[protected void cmdCancel_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="586" sc="9" el="588" ec="10">DesktopModules\Admin\Security\ManageUsers.ascx.cs</location>
            <body hash="4524639d370035c8c7dcfeb64bd09bcd"><![CDATA[{
            Response.Redirect(Globals.NavigateURL(), true);
        }]]></body>
          </codeblock>
        </method>
        <method name="DisableForm">
          <declaration><![CDATA[private void DisableForm()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="407" sc="9" el="415" ec="10">DesktopModules\Admin\Security\ManageUsers.ascx.cs</location>
            <body hash="5bebe45255f2ad1a7506cfece9da58b9"><![CDATA[{
            adminTabNav.Visible = false;
            dnnRoleDetails.Visible = false;
            dnnPasswordDetails.Visible = false;
            dnnProfileDetails.Visible = false;
            actionsRow.Visible = false;
            ctlMembership.Visible = false;
            ctlUser.Visible = false;
        }]]></body>
          </codeblock>
        </method>
        <method name="HasManageUsersModulePermission">
          <declaration><![CDATA[private bool HasManageUsersModulePermission()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="591" sc="9" el="593" ec="10">DesktopModules\Admin\Security\ManageUsers.ascx.cs</location>
            <body hash="ec1874f820880daf61651e0a6fda9c04"><![CDATA[{
            return ModulePermissionController.HasModulePermission(ModuleConfiguration.ModulePermissions, "MANAGEUSER");
        }]]></body>
          </codeblock>
        </method>
        <method name="MembershipAuthorized">
          <declaration><![CDATA[private void MembershipAuthorized(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="656" sc="9" el="678" ec="10">DesktopModules\Admin\Security\ManageUsers.ascx.cs</location>
            <body hash="89a9daf4399beeb3397b3fa7ed3bf28e"><![CDATA[{
            if (IsAdmin == false)
            {
                return;
            }
            try
            {
                AddModuleMessage("UserAuthorized", ModuleMessage.ModuleMessageType.GreenSuccess, true);
                
				//Send Notification to User
				if (string.IsNullOrEmpty(User.Membership.Password) && !MembershipProviderConfig.RequiresQuestionAndAnswer && MembershipProviderConfig.PasswordRetrievalEnabled)
                {
                    UserInfo user = User;
                    User.Membership.Password = UserController.GetPassword(ref user, "");
                }

                BindMembership();
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="MembershipDemoteFromSuperuser">
          <declaration><![CDATA[private void MembershipDemoteFromSuperuser(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="739" sc="9" el="754" ec="10">DesktopModules\Admin\Security\ManageUsers.ascx.cs</location>
            <body hash="85010c4d8d35928d8ef5e862314dd572"><![CDATA[{
            if (IsAdmin == false)
            {
                return;
            }
            try
            {
                AddModuleMessage("UserDemotedFromSuperuser", ModuleMessage.ModuleMessageType.GreenSuccess, true);

                BindMembership();
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="MembershipPasswordUpdateChanged">
          <declaration><![CDATA[protected void MembershipPasswordUpdateChanged(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="687" sc="9" el="702" ec="10">DesktopModules\Admin\Security\ManageUsers.ascx.cs</location>
            <body hash="df2825ffcea615ab2d86f2ead915a9ba"><![CDATA[{
            if (IsAdmin == false)
            {
                return;
            }
            try
            {
                AddModuleMessage("UserPasswordUpdateChanged", ModuleMessage.ModuleMessageType.GreenSuccess, true);

                BindMembership();
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="MembershipPromoteToSuperuser">
          <declaration><![CDATA[private void MembershipPromoteToSuperuser(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="714" sc="9" el="729" ec="10">DesktopModules\Admin\Security\ManageUsers.ascx.cs</location>
            <body hash="7436a140d000919df288ab32ec4b9155"><![CDATA[{
            if (IsAdmin == false)
            {
                return;
            }
            try
            {
                AddModuleMessage("UserPromotedToSuperuser", ModuleMessage.ModuleMessageType.GreenSuccess, true);

                BindMembership();
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="MembershipUnAuthorized">
          <declaration><![CDATA[private void MembershipUnAuthorized(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="763" sc="9" el="778" ec="10">DesktopModules\Admin\Security\ManageUsers.ascx.cs</location>
            <body hash="8e8e8851f1541e99e18ae280573ca4ec"><![CDATA[{
            if (IsAdmin == false)
            {
                return;
            }
            try
            {
                AddModuleMessage("UserUnAuthorized", ModuleMessage.ModuleMessageType.GreenSuccess, true);

                BindMembership();
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="MembershipUnLocked">
          <declaration><![CDATA[private void MembershipUnLocked(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="787" sc="9" el="801" ec="10">DesktopModules\Admin\Security\ManageUsers.ascx.cs</location>
            <body hash="70c1efda5895bd279783da9189ef90b6"><![CDATA[{
            if (IsAdmin == false)
            {
                return;
            }
            try
            {
                AddModuleMessage("UserUnLocked", ModuleMessage.ModuleMessageType.GreenSuccess, true);
                BindMembership();
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="ModuleAction_Click">
          <declaration><![CDATA[private void ModuleAction_Click(object sender, ActionEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="629" sc="9" el="647" ec="10">DesktopModules\Admin\Security\ManageUsers.ascx.cs</location>
            <body hash="3ff685969ddc233556af105056b4a470"><![CDATA[{
            switch (e.Action.CommandArgument)
            {
                case "ManageRoles":
                    //pnlRoles.Visible = true;
                    //pnlUser.Visible = false;
                    break;
                case "Cancel":
                    break;
                case "Delete":
                    break;
                case "Edit":
                    break;
                case "Save":
                    break;
                default:
                    break;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="486" sc="9" el="552" ec="10">DesktopModules\Admin\Security\ManageUsers.ascx.cs</location>
            <body hash="b4ed6483d7104084b9d3a65c6a4e0f04"><![CDATA[{
            base.OnInit(e);

            cmdCancel.Click += cmdCancel_Click;
            cmdAdd.Click += cmdAdd_Click;

            ctlUser.UserCreateCompleted += UserCreateCompleted;
            ctlUser.UserDeleted += UserDeleted;
            ctlUser.UserRemoved += UserRemoved;
            ctlUser.UserRestored += UserRestored;
            ctlUser.UserUpdateCompleted += UserUpdateCompleted;
            ctlUser.UserUpdateError += UserUpdateError;

            ctlProfile.ProfileUpdateCompleted += ProfileUpdateCompleted;
            ctlPassword.PasswordUpdated += PasswordUpdated;
            ctlPassword.PasswordQuestionAnswerUpdated += PasswordQuestionAnswerUpdated;
            ctlMembership.MembershipAuthorized += MembershipAuthorized;
            ctlMembership.MembershipPasswordUpdateChanged += MembershipPasswordUpdateChanged;
            ctlMembership.MembershipUnAuthorized += MembershipUnAuthorized;
            ctlMembership.MembershipUnLocked += MembershipUnLocked;
            ctlMembership.MembershipDemoteFromSuperuser += MembershipDemoteFromSuperuser;
            ctlMembership.MembershipPromoteToSuperuser += MembershipPromoteToSuperuser;

            JavaScript.RequestRegistration(CommonJs.DnnPlugins);

            //Set the Membership Control Properties
            ctlMembership.ID = "Membership";
            ctlMembership.ModuleConfiguration = ModuleConfiguration;
            ctlMembership.UserId = UserId;

            //Set the User Control Properties
            ctlUser.ID = "User";
            ctlUser.ModuleConfiguration = ModuleConfiguration;
            ctlUser.UserId = UserId;

            //Set the Roles Control Properties
            ctlRoles.ID = "SecurityRoles";
            ctlRoles.ModuleConfiguration = ModuleConfiguration;
            ctlRoles.ParentModule = this;

            //Set the Password Control Properties
            ctlPassword.ID = "Password";
            ctlPassword.ModuleConfiguration = ModuleConfiguration;
            ctlPassword.UserId = UserId;

            //Set the Profile Control Properties
            ctlProfile.ID = "Profile";
            ctlProfile.ModuleConfiguration = ModuleConfiguration;
            ctlProfile.UserId = UserId;

            //Customise the Control Title
            if (AddUser)
            {
                if (!Request.IsAuthenticated)
                {
                    //Register
                    ModuleConfiguration.ModuleTitle = Localization.GetString("Register.Title", LocalResourceFile);
                }
                else
                {
                    //Add User
                    ModuleConfiguration.ModuleTitle = Localization.GetString("AddUser.Title", LocalResourceFile);
                }

                userContainer.CssClass += " register";
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="561" sc="9" el="583" ec="10">DesktopModules\Admin\Security\ManageUsers.ascx.cs</location>
            <body hash="967ac289010734dcc2161f634d937bff"><![CDATA[{
            base.OnLoad(e);

            try
            {
                //Add an Action Event Handler to the Skin
                AddActionHandler(ModuleAction_Click);

                //Bind the User information to the controls
                BindData();

                loginLink.NavigateUrl = Globals.LoginURL(RedirectURL, (Request.QueryString["override"] != null));

                if (PortalSettings.EnablePopUps)
                {
                    loginLink.Attributes.Add("onclick", "return " + UrlUtils.PopUpUrl(loginLink.NavigateUrl, this, PortalSettings, true, false, 300, 650));
                }
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="PasswordQuestionAnswerUpdated">
          <declaration><![CDATA[private void PasswordQuestionAnswerUpdated(object sender, Password.PasswordUpdatedEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="810" sc="9" el="824" ec="10">DesktopModules\Admin\Security\ManageUsers.ascx.cs</location>
            <body hash="4bcd42b9ce3ea9fea2f242b0e5944abc"><![CDATA[{
            if (IsAdmin == false)
            {
                return;
            }
            PasswordUpdateStatus status = e.UpdateStatus;
            if (status == PasswordUpdateStatus.Success)
            {
                AddModuleMessage("PasswordQAChanged", ModuleMessage.ModuleMessageType.GreenSuccess, true);
            }
            else
            {
                AddModuleMessage(status.ToString(), ModuleMessage.ModuleMessageType.RedError, true);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="PasswordUpdated">
          <declaration><![CDATA[private void PasswordUpdated(object sender, Password.PasswordUpdatedEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="833" sc="9" el="868" ec="10">DesktopModules\Admin\Security\ManageUsers.ascx.cs</location>
            <body hash="7fd7a134b949c2c9f35394d3708a1e67"><![CDATA[{
            if (IsAdmin == false)
            {
                return;
            }
            PasswordUpdateStatus status = e.UpdateStatus;

            if (status == PasswordUpdateStatus.Success)
            {
				//Send Notification to User
                try
                {
                    var accessingUser = (UserInfo) HttpContext.Current.Items["UserInfo"];
                    if (accessingUser.UserID != User.UserID)
                    {
						//The password was changed by someone else 
                        Mail.SendMail(User, MessageType.PasswordUpdated, PortalSettings);
                    }
                    else
                    {
						//The User changed his own password
                        Mail.SendMail(User, MessageType.UserUpdatedOwnPassword, PortalSettings);
                    }
                    AddModuleMessage("PasswordChanged", ModuleMessage.ModuleMessageType.GreenSuccess, true);
                }
                catch (Exception ex)
                {
                    AddModuleMessage("PasswordMailError", ModuleMessage.ModuleMessageType.YellowWarning, true);
                    Exceptions.LogException(ex);
                }
            }
            else
            {
                AddModuleMessage(status.ToString(), ModuleMessage.ModuleMessageType.RedError, true);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="ProfileUpdateCompleted">
          <declaration><![CDATA[private void ProfileUpdateCompleted(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="877" sc="9" el="886" ec="10">DesktopModules\Admin\Security\ManageUsers.ascx.cs</location>
            <body hash="a7ef065bb4be69d9c1f6fe2abaa7b422"><![CDATA[{
            if (IsAdmin == false)
            {
                return;
            }
			
            //Redirect to same page (this will update all controls for any changes to profile
            //and leave us at Page 0 (User Credentials)
            Response.Redirect(Request.RawUrl, true);
        }]]></body>
          </codeblock>
        </method>
        <method name="ShowPanel">
          <declaration><![CDATA[private void ShowPanel()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="418" sc="9" el="473" ec="10">DesktopModules\Admin\Security\ManageUsers.ascx.cs</location>
            <body hash="38a8e342013be52c1ff03e5a2d171134"><![CDATA[{
            if (AddUser)
            {
                adminTabNav.Visible = false;
                if (Request.IsAuthenticated && MembershipProviderConfig.RequiresQuestionAndAnswer)
                {
                    //Admin adding user
                    dnnManageUsers.Visible = false;
                    actionsRow.Visible = false;
                    AddModuleMessage("CannotAddUser", ModuleMessage.ModuleMessageType.YellowWarning, true);
                }
                else
                {
                    dnnManageUsers.Visible = true;
                    actionsRow.Visible = true;
                }
                BindUser();
                dnnProfileDetails.Visible = false;
            }
            else
            {
                if ((!IsAdmin))
                {
                    passwordTab.Visible = false;
                }
                else
                {
                    ctlPassword.User = User;
                    ctlPassword.DataBind();
                }
                if ((!IsEdit || User.IsSuperUser))
                {
                    rolesTab.Visible = false;
                }
                else
                {
                    ctlRoles.DataBind();
                }

                BindUser();
                ctlProfile.User = User;
                ctlProfile.DataBind();
            }

            dnnRoleDetails.Visible = IsEdit && !User.IsSuperUser && !AddUser;
            dnnPasswordDetails.Visible = (IsAdmin) && !AddUser;

            if(EditProfileMode)
            {
                adminTabNav.Visible =
                    dnnUserDetails.Visible = 
                    dnnRoleDetails.Visible = 
                    dnnPasswordDetails.Visible =
                    actionsRow.Visible = false;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="SubscriptionUpdated">
          <declaration><![CDATA[private void SubscriptionUpdated(object sender, MemberServices.SubscriptionUpdatedEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="889" sc="9" el="900" ec="10">DesktopModules\Admin\Security\ManageUsers.ascx.cs</location>
            <body hash="ee41e780f4b098e6f6da42554de151bd"><![CDATA[{
            string message = Null.NullString;
            if (e.Cancel)
            {
                message = string.Format(Localization.GetString("UserUnSubscribed", LocalResourceFile), e.RoleName);
            }
            else
            {
                message = string.Format(Localization.GetString("UserSubscribed", LocalResourceFile), e.RoleName);
            }
            AddLocalizedModuleMessage(message, ModuleMessage.ModuleMessageType.GreenSuccess, true);
        }]]></body>
          </codeblock>
        </method>
        <method name="UserCreateCompleted">
          <declaration><![CDATA[private void UserCreateCompleted(object sender, UserUserControlBase.UserCreatedEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="909" sc="9" el="926" ec="10">DesktopModules\Admin\Security\ManageUsers.ascx.cs</location>
            <body hash="ce8143d1ba65d5904d66311deb84c2f3"><![CDATA[{
            try
            {
                if (e.CreateStatus == UserCreateStatus.Success)
                {
                    CompleteUserCreation(e.CreateStatus, e.NewUser, e.Notify, false);
                    Response.Redirect(ReturnUrl, true);
                }
                else
                {
                    AddLocalizedModuleMessage(UserController.GetUserCreateStatus(e.CreateStatus), ModuleMessage.ModuleMessageType.RedError, true);
                }
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="UserDeleted">
          <declaration><![CDATA[private void UserDeleted(object sender, UserUserControlBase.UserDeletedEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="935" sc="9" el="944" ec="10">DesktopModules\Admin\Security\ManageUsers.ascx.cs</location>
            <body hash="2805bfefe0434ea794b5d1ffb9ed634e"><![CDATA[{
            try
            {
                Response.Redirect(ReturnUrl, true);
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="UserRemoved">
          <declaration><![CDATA[private void UserRemoved(object sender, UserUserControlBase.UserRemovedEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="966" sc="9" el="976" ec="10">DesktopModules\Admin\Security\ManageUsers.ascx.cs</location>
            <body hash="cea346c7f900790935d0a9ed34406638"><![CDATA[{
            try
            {
                Response.Redirect(ReturnUrl, true);
                //Module failed to load
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="UserRestored">
          <declaration><![CDATA[private void UserRestored(object sender, UserUserControlBase.UserRestoredEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="953" sc="9" el="963" ec="10">DesktopModules\Admin\Security\ManageUsers.ascx.cs</location>
            <body hash="cea346c7f900790935d0a9ed34406638"><![CDATA[{
            try
            {
                Response.Redirect(ReturnUrl, true);
                //Module failed to load
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="UserUpdateCompleted">
          <declaration><![CDATA[private void UserUpdateCompleted(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="979" sc="9" el="982" ec="10">DesktopModules\Admin\Security\ManageUsers.ascx.cs</location>
            <body hash="03f14ac8b3597f0f9c6206dc79edbfe2"><![CDATA[{
            Response.Redirect(Request.RawUrl, false);
            HttpContext.Current.ApplicationInstance.CompleteRequest();
        }]]></body>
          </codeblock>
        </method>
        <method name="UserUpdateError">
          <declaration><![CDATA[private void UserUpdateError(object sender, UserUserControlBase.UserUpdateErrorArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="991" sc="9" el="993" ec="10">DesktopModules\Admin\Security\ManageUsers.ascx.cs</location>
            <body hash="dbb34a7f7bd43b3eb26dfd285ff4230f"><![CDATA[{
            AddModuleMessage(e.Message, ModuleMessage.ModuleMessageType.RedError, true);
        }]]></body>
          </codeblock>
        </method>
        <method name="VerifyUserPermissions">
          <declaration><![CDATA[private bool VerifyUserPermissions()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="304" sc="9" el="361" ec="10">DesktopModules\Admin\Security\ManageUsers.ascx.cs</location>
            <body hash="009aca9402aaf6b09e0e7533c2d96b28"><![CDATA[{
            if (AddUser && IsHostMenu && !UserInfo.IsSuperUser)
            {
                AddModuleMessage("NoUser", ModuleMessage.ModuleMessageType.YellowWarning, true);
                DisableForm();
                return false;
            }
				
            //Check if User is a member of the Current Portal (or a member of the MasterPortal if PortalGroups enabled)
            if (User.PortalID != Null.NullInteger && User.PortalID != PortalId)
            {
                AddModuleMessage("InvalidUser", ModuleMessage.ModuleMessageType.YellowWarning, true);
                DisableForm();
                return false;
            }
				
            //Check if User is a SuperUser and that the current User is a SuperUser
            if (User.IsSuperUser && !UserInfo.IsSuperUser)
            {
                AddModuleMessage("NoUser", ModuleMessage.ModuleMessageType.YellowWarning, true);
                DisableForm();
                return false;
            }
            if (IsEdit)
            {
                //Check if user has admin rights
                if (!IsAdmin || (User.IsInRole(PortalSettings.AdministratorRoleName) && !PortalSecurity.IsInRole(PortalSettings.AdministratorRoleName)))
                {
                    AddModuleMessage("NotAuthorized", ModuleMessage.ModuleMessageType.YellowWarning, true);
                    DisableForm();
                    return false;
                }
            }
            else
            {
                if (Request.IsAuthenticated)
                {
                    if (!PortalSecurity.IsInRole(PortalSettings.AdministratorRoleName) )
                    {
                        if (HasManageUsersModulePermission() == false)
                        {
                            //Display current user's profile
                            Response.Redirect(Globals.NavigateURL(PortalSettings.UserTabId, "", "UserID=" + UserInfo.UserID), true);
                        }
                    }
                }
                else
                {
                    if ((User.UserID > Null.NullInteger))
                    {
                        AddModuleMessage("NotAuthorized", ModuleMessage.ModuleMessageType.YellowWarning, true);
                        DisableForm();
                        return false;
                    }
                }
            }
            return true;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="actionsRow">
          <declaration><![CDATA[protected HtmlGenericControl actionsRow;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="adminTabNav">
          <declaration><![CDATA[protected HtmlGenericControl adminTabNav;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdAdd">
          <declaration><![CDATA[protected LinkButton cmdAdd;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdCancel">
          <declaration><![CDATA[protected LinkButton cmdCancel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ctlMembership">
          <declaration><![CDATA[protected Membership ctlMembership;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ctlPassword">
          <declaration><![CDATA[protected Password ctlPassword;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ctlProfile">
          <declaration><![CDATA[protected DNNProfile ctlProfile;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ctlRoles">
          <declaration><![CDATA[protected SecurityRoles ctlRoles;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ctlUser">
          <declaration><![CDATA[protected User ctlUser;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="dnnManageUsers">
          <declaration><![CDATA[protected HtmlGenericControl dnnManageUsers;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="dnnPasswordDetails">
          <declaration><![CDATA[protected HtmlGenericControl dnnPasswordDetails;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="dnnProfileDetails">
          <declaration><![CDATA[protected Panel dnnProfileDetails;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="dnnRoleDetails">
          <declaration><![CDATA[protected HtmlGenericControl dnnRoleDetails;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="dnnUserDetails">
          <declaration><![CDATA[protected HtmlGenericControl dnnUserDetails;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="helpRow">
          <declaration><![CDATA[protected HtmlGenericControl helpRow;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="imgLockedOut">
          <declaration><![CDATA[protected DnnImage imgLockedOut;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="imgOnline">
          <declaration><![CDATA[protected DnnImage imgOnline;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblTitle">
          <declaration><![CDATA[protected Label lblTitle;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblUserHelp">
          <declaration><![CDATA[protected Label lblUserHelp;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="loginLink">
          <declaration><![CDATA[protected HyperLink loginLink;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="membershipRow">
          <declaration><![CDATA[protected HtmlGenericControl membershipRow;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="passwordTab">
          <declaration><![CDATA[protected HtmlGenericControl passwordTab;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="rolesTab">
          <declaration><![CDATA[protected HtmlGenericControl rolesTab;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="titleRow">
          <declaration><![CDATA[protected HtmlGenericControl titleRow;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="userContainer">
          <declaration><![CDATA[protected Panel userContainer;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="userRow">
          <declaration><![CDATA[protected HtmlGenericControl userRow;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="DisplayServices">
          <declaration><![CDATA[protected bool DisplayServices]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="66" sc="13" el="69" ec="14">DesktopModules\Admin\Security\ManageUsers.ascx.cs</location>
            <body hash="83f59ce4ed648eb2fd72980c234020cb"><![CDATA[{
                object setting = GetSetting(PortalId, "Profile_ManageServices");
                return Convert.ToBoolean(setting) && !(IsEdit || User.IsSuperUser);
            }]]></body>
          </codeblock>
        </property>
        <property name="EditProfileMode">
          <declaration><![CDATA[protected bool EditProfileMode]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="160" sc="13" el="166" ec="14">DesktopModules\Admin\Security\ManageUsers.ascx.cs</location>
            <body hash="02a0d50ed68cec0621a850df1351babd"><![CDATA[{
                bool editProfile;

                return !string.IsNullOrEmpty(Request.QueryString["editProfile"])
                       && bool.TryParse(Request["editProfile"], out editProfile)
                       && editProfile;
            }]]></body>
          </codeblock>
        </property>
        <property name="ModuleActions">
          <declaration><![CDATA[public ModuleActionCollection ModuleActions]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="201" sc="13" el="243" ec="14">DesktopModules\Admin\Security\ManageUsers.ascx.cs</location>
            <body hash="46c429f943ac142e64ad9403cb67094a"><![CDATA[{
                var Actions = new ModuleActionCollection();
                if (!IsProfile)
                {
                    if (!AddUser && !IsEdit)
                    {
                        Actions.Add(GetNextActionID(),
                                    Localization.GetString(ModuleActionType.AddContent, LocalResourceFile),
                                    ModuleActionType.AddContent,
                                    "",
                                    "add.gif",
                                    EditUrl(),
                                    false,
                                    SecurityAccessLevel.Admin,
                                    true,
                                    false);
                        if (ProfileProviderConfig.CanEditProviderProperties)
                        {
                            Actions.Add(GetNextActionID(),
                                        Localization.GetString("ManageProfile.Action", LocalResourceFile),
                                        ModuleActionType.AddContent,
                                        "",
                                        "icon_profile_16px.gif",
                                        EditUrl("ManageProfile"),
                                        false,
                                        SecurityAccessLevel.Admin,
                                        true,
                                        false);
                        }
                        Actions.Add(GetNextActionID(),
                                    Localization.GetString("Cancel.Action", LocalResourceFile),
                                    ModuleActionType.AddContent,
                                    "",
                                    "lt.gif",
                                    ReturnUrl,
                                    false,
                                    SecurityAccessLevel.Admin,
                                    true,
                                    false);
                    }
                }
                return Actions;
            }]]></body>
          </codeblock>
        </property>
        <property name="PageNo">
          <declaration><![CDATA[public int PageNo]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="180" sc="13" el="187" ec="14">DesktopModules\Admin\Security\ManageUsers.ascx.cs</location>
            <body hash="d2791811541ca3eb4c473299b899bb7e"><![CDATA[{
                int _PageNo = 0;
                if (ViewState["PageNo"] != null && !IsPostBack)
                {
                    _PageNo = Convert.ToInt32(ViewState["PageNo"]);
                }
                return _PageNo;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="189" sc="13" el="191" ec="14">DesktopModules\Admin\Security\ManageUsers.ascx.cs</location>
            <body hash="ce992fd07f483cfce68e5f8558df4b03"><![CDATA[{
                ViewState["PageNo"] = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="RedirectURL">
          <declaration><![CDATA[protected string RedirectURL]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="79" sc="13" el="111" ec="14">DesktopModules\Admin\Security\ManageUsers.ascx.cs</location>
            <body hash="8f47722b05451d9a7bb0e6b34c227555"><![CDATA[{
                string _RedirectURL = "";

				if (PortalSettings.Registration.RedirectAfterRegistration == Null.NullInteger)
                {
                    if (Request.QueryString["returnurl"] != null)
                    {
						//return to the url passed to register
                        _RedirectURL = HttpUtility.UrlDecode(Request.QueryString["returnurl"]);

                        //clean the return url to avoid possible XSS attack.
                        _RedirectURL = UrlUtils.ValidReturnUrl(_RedirectURL);

                        if (_RedirectURL.Contains("?returnurl"))
                        {
                            string baseURL = _RedirectURL.Substring(0, _RedirectURL.IndexOf("?returnurl"));
                            string returnURL = _RedirectURL.Substring(_RedirectURL.IndexOf("?returnurl") + 11);

                            _RedirectURL = string.Concat(baseURL, "?returnurl", HttpUtility.UrlEncode(returnURL));
                        }
                    }
                    if (String.IsNullOrEmpty(_RedirectURL))
                    {
						//redirect to current page 
                        _RedirectURL = Globals.NavigateURL();
                    }
                }
                else //redirect to after registration page
                {
					_RedirectURL = Globals.NavigateURL(PortalSettings.Registration.RedirectAfterRegistration);
                }
                return _RedirectURL;
            }]]></body>
          </codeblock>
        </property>
        <property name="ReturnUrl">
          <declaration><![CDATA[protected string ReturnUrl]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="121" sc="13" el="123" ec="14">DesktopModules\Admin\Security\ManageUsers.ascx.cs</location>
            <body hash="d0232d91d812af59558316c0360d79e3"><![CDATA[{
                return Globals.NavigateURL(TabId, "", !String.IsNullOrEmpty(UserFilter) ? UserFilter : "");
            }]]></body>
          </codeblock>
        </property>
        <property name="UserFilter">
          <declaration><![CDATA[protected string UserFilter]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="133" sc="13" el="151" ec="14">DesktopModules\Admin\Security\ManageUsers.ascx.cs</location>
            <body hash="45824ccf213085ea5affa3c6ced1940b"><![CDATA[{
                string filterString = !string.IsNullOrEmpty(Request["filter"]) ? "filter=" + Request["filter"] : "";
                string filterProperty = !string.IsNullOrEmpty(Request["filterproperty"]) ? "filterproperty=" + Request["filterproperty"] : "";
                string page = !string.IsNullOrEmpty(Request["currentpage"]) ? "currentpage=" + Request["currentpage"] : "";

                if (!string.IsNullOrEmpty(filterString))
                {
                    filterString += "&";
                }
                if (!string.IsNullOrEmpty(filterProperty))
                {
                    filterString += filterProperty + "&";
                }
                if (!string.IsNullOrEmpty(page))
                {
                    filterString += page;
                }
                return filterString;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="Membership">
      <declaration><![CDATA[public class Membership : UserModuleBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public Membership()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="add_MembershipAuthorized">
          <declaration><![CDATA[public void add_MembershipAuthorized(EventHandler value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="add_MembershipDemoteFromSuperuser">
          <declaration><![CDATA[public void add_MembershipDemoteFromSuperuser(EventHandler value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="add_MembershipPasswordUpdateChanged">
          <declaration><![CDATA[public void add_MembershipPasswordUpdateChanged(EventHandler value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="add_MembershipPromoteToSuperuser">
          <declaration><![CDATA[public void add_MembershipPromoteToSuperuser(EventHandler value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="add_MembershipUnAuthorized">
          <declaration><![CDATA[public void add_MembershipUnAuthorized(EventHandler value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="add_MembershipUnLocked">
          <declaration><![CDATA[public void add_MembershipUnLocked(EventHandler value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="cmdAuthorize_Click">
          <declaration><![CDATA[private void cmdAuthorize_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="293" sc="9" el="317" ec="10">DesktopModules\Admin\Security\Membership.ascx.cs</location>
            <body hash="61fa08163c33eca3be404b0b59ae654a"><![CDATA[{
            if (IsUserOrAdmin == false)
            {
                return;
            }
            if (Request.IsAuthenticated != true) return;

			//Get the Membership Information from the property editors
            User.Membership = (UserMembership)membershipForm.DataSource;

            User.Membership.Approved = true;

            //Update User
            UserController.UpdateUser(PortalId, User);

            //Update User Roles if needed
            if (!User.IsSuperUser && User.IsInRole("Unverified Users") && PortalSettings.UserRegistration == (int)Common.Globals.PortalRegistrationType.VerifiedRegistration)
            {
                UserController.ApproveUser(User);
            }

            Mail.SendMail(User, MessageType.UserAuthorized, PortalSettings);

            OnMembershipAuthorized(EventArgs.Empty);
        }]]></body>
          </codeblock>
        </method>
        <method name="cmdPassword_Click">
          <declaration><![CDATA[private void cmdPassword_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="325" sc="9" el="356" ec="10">DesktopModules\Admin\Security\Membership.ascx.cs</location>
            <body hash="87d3e6b5071f0646f51bf7284311561a"><![CDATA[{
            if (IsUserOrAdmin == false)
            {
                return;
            }
            if (Request.IsAuthenticated != true) return;

            if (MembershipProviderConfig.PasswordRetrievalEnabled || MembershipProviderConfig.PasswordResetEnabled)
            {
                UserController.ResetPasswordToken(User);
            }
            bool canSend = Mail.SendMail(User, MessageType.PasswordReminder, PortalSettings) == string.Empty;
            var message = String.Empty;
            if (canSend)
            {
                //Get the Membership Information from the property editors
                User.Membership = (UserMembership)membershipForm.DataSource;

                User.Membership.UpdatePassword = true;

                //Update User
                UserController.UpdateUser(PortalId, User);

                OnMembershipPasswordUpdateChanged(EventArgs.Empty); 
            }
            else
            {
                message = Localization.GetString("OptionUnavailable", LocalResourceFile);
                UI.Skins.Skin.AddModuleMessage(this, message, ModuleMessage.ModuleMessageType.YellowWarning);
            }
			
        }]]></body>
          </codeblock>
        </method>
        <method name="cmdToggleSuperuser_Click">
          <declaration><![CDATA[private void cmdToggleSuperuser_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="387" sc="9" el="411" ec="10">DesktopModules\Admin\Security\Membership.ascx.cs</location>
            <body hash="f2e30f7fb227b02dac42dd830f70640b"><![CDATA[{
            if (IsUserOrAdmin == false)
            {
                return;
            }
            if (Request.IsAuthenticated != true) return;
            ////ensure only superusers can change user superuser state
            if (UserController.Instance.GetCurrentUserInfo().IsSuperUser != true) return;
            
            var currentSuperUserState = User.IsSuperUser;
            User.IsSuperUser = !currentSuperUserState;
            //Update User
            UserController.UpdateUser(PortalId, User);
            DataCache.ClearCache();
   
            if (currentSuperUserState)
            {
                OnMembershipDemoteFromSuperuser(EventArgs.Empty);
            }
            else
            {
                OnMembershipPromoteToSuperuser(EventArgs.Empty);
            }

        }]]></body>
          </codeblock>
        </method>
        <method name="cmdUnAuthorize_Click">
          <declaration><![CDATA[private void cmdUnAuthorize_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="364" sc="9" el="380" ec="10">DesktopModules\Admin\Security\Membership.ascx.cs</location>
            <body hash="ba1dcfd2f4271018d426f347d0cbebc0"><![CDATA[{
            if (IsUserOrAdmin == false)
            {
                return;
            }
            if (Request.IsAuthenticated != true) return;

			//Get the Membership Information from the property editors
            User.Membership = (UserMembership)membershipForm.DataSource;

            User.Membership.Approved = false;

            //Update User
            UserController.UpdateUser(PortalId, User);

            OnMembershipUnAuthorized(EventArgs.Empty);
        }]]></body>
          </codeblock>
        </method>
        <method name="cmdUnLock_Click">
          <declaration><![CDATA[private void cmdUnLock_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="418" sc="9" el="434" ec="10">DesktopModules\Admin\Security\Membership.ascx.cs</location>
            <body hash="012c08d2331703b331a407bcaed676db"><![CDATA[{
            if (IsUserOrAdmin == false)
            {
                return;
            }
            if (Request.IsAuthenticated != true) return;

			//update the user record in the database
            bool isUnLocked = UserController.UnLockUser(User);

            if (isUnLocked)
            {
                User.Membership.LockedOut = false;

                OnMembershipUnLocked(EventArgs.Empty);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="DataBind">
          <declaration><![CDATA[public override void DataBind()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="208" sc="9" el="262" ec="10">DesktopModules\Admin\Security\Membership.ascx.cs</location>
            <body hash="918049c2a6390ce6e80857dc405e9e55"><![CDATA[{
			//disable/enable buttons
            if (UserInfo.UserID == User.UserID)
            {
                cmdAuthorize.Visible = false;
                cmdUnAuthorize.Visible = false;
                cmdUnLock.Visible = false;
                cmdPassword.Visible = false;
            }
            else
            {
                cmdUnLock.Visible = UserMembership.LockedOut;
                cmdUnAuthorize.Visible = UserMembership.Approved && !User.IsInRole("Unverified Users");
                cmdAuthorize.Visible = !UserMembership.Approved || User.IsInRole("Unverified Users");
                cmdPassword.Visible = !UserMembership.UpdatePassword;
            }
            if (UserController.Instance.GetCurrentUserInfo().IsSuperUser && UserController.Instance.GetCurrentUserInfo().UserID!=User.UserID)
            {
                cmdToggleSuperuser.Visible = true;
               
                if (User.IsSuperUser)
                {
                    cmdToggleSuperuser.Text = Localization.GetString("DemoteFromSuperUser", LocalResourceFile);
                }
                else
                {
                    cmdToggleSuperuser.Text = Localization.GetString("PromoteToSuperUser", LocalResourceFile);
                }
                if (PortalController.GetPortalsByUser(User.UserID).Count == 0)
                {
                    cmdToggleSuperuser.Visible = false;
                }
            }
            lastLockoutDate.Value = UserMembership.LastLockoutDate.Year > 2000 
                                        ? (object) UserMembership.LastLockoutDate 
                                        : LocalizeString("Never");
            // ReSharper disable SpecifyACultureInStringConversionExplicitly
            isOnLine.Value = LocalizeString(UserMembership.IsOnLine.ToString());
            lockedOut.Value = LocalizeString(UserMembership.LockedOut.ToString());
            approved.Value = LocalizeString(UserMembership.Approved.ToString());
            updatePassword.Value = LocalizeString(UserMembership.UpdatePassword.ToString());
            isDeleted.Value = LocalizeString(UserMembership.IsDeleted.ToString());
            
            //show the user folder path without default parent folder, and only visible to admin.
            userFolder.Visible = UserInfo.IsInRole(PortalSettings.AdministratorRoleName);
            if (userFolder.Visible)
            {
                userFolder.Value = FolderManager.Instance.GetUserFolder(User).FolderPath.Substring(6);
            }

            // ReSharper restore SpecifyACultureInStringConversionExplicitly

            membershipForm.DataSource = UserMembership;
            membershipForm.DataBind();
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="276" sc="9" el="284" ec="10">DesktopModules\Admin\Security\Membership.ascx.cs</location>
            <body hash="4a2656678510903820f5e46938222489"><![CDATA[{
            base.OnLoad(e);

            cmdAuthorize.Click += cmdAuthorize_Click;
            cmdPassword.Click += cmdPassword_Click;
            cmdUnAuthorize.Click += cmdUnAuthorize_Click;
            cmdUnLock.Click += cmdUnLock_Click;
            cmdToggleSuperuser.Click+=cmdToggleSuperuser_Click;
        }]]></body>
          </codeblock>
        </method>
        <method name="OnMembershipAuthorized">
          <declaration><![CDATA[public void OnMembershipAuthorized(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="136" sc="9" el="145" ec="10">DesktopModules\Admin\Security\Membership.ascx.cs</location>
            <body hash="8dbd361d11a4e4be8402ccad9ff18651"><![CDATA[{
            if (IsUserOrAdmin == false)
            {
                return;
            }
            if (MembershipAuthorized != null)
            {
                MembershipAuthorized(this, e);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnMembershipDemoteFromSuperuser">
          <declaration><![CDATA[public void OnMembershipDemoteFromSuperuser(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="117" sc="9" el="127" ec="10">DesktopModules\Admin\Security\Membership.ascx.cs</location>
            <body hash="80c590e49be056083922a5503be51934"><![CDATA[{
            if (IsUserOrAdmin == false)
            {
                return;
            }
            if (MembershipDemoteFromSuperuser != null)
            {
                MembershipDemoteFromSuperuser(this, e);
                Response.Redirect(Globals.NavigateURL(), true);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnMembershipPasswordUpdateChanged">
          <declaration><![CDATA[public void OnMembershipPasswordUpdateChanged(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="153" sc="9" el="162" ec="10">DesktopModules\Admin\Security\Membership.ascx.cs</location>
            <body hash="22c74f3743a85cd2545e07de86f56bc2"><![CDATA[{
            if (IsUserOrAdmin == false)
            {
                return;
            }
            if (MembershipPasswordUpdateChanged != null)
            {
                MembershipPasswordUpdateChanged(this, e);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnMembershipPromoteToSuperuser">
          <declaration><![CDATA[public void OnMembershipPromoteToSuperuser(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="99" sc="9" el="109" ec="10">DesktopModules\Admin\Security\Membership.ascx.cs</location>
            <body hash="068d4fdfeb0f191921feedf57b711d2d"><![CDATA[{
            if (IsUserOrAdmin == false)
            {
                return;
            }
            if (MembershipPromoteToSuperuser != null)
            {
                MembershipPromoteToSuperuser(this, e);
                Response.Redirect(Globals.NavigateURL(), true);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnMembershipUnAuthorized">
          <declaration><![CDATA[public void OnMembershipUnAuthorized(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="170" sc="9" el="179" ec="10">DesktopModules\Admin\Security\Membership.ascx.cs</location>
            <body hash="83a147e6b6878090d6b6f149b0f8b8a4"><![CDATA[{
            if (IsUserOrAdmin == false)
            {
                return;
            }
            if (MembershipUnAuthorized != null)
            {
                MembershipUnAuthorized(this, e);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnMembershipUnLocked">
          <declaration><![CDATA[public void OnMembershipUnLocked(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="187" sc="9" el="196" ec="10">DesktopModules\Admin\Security\Membership.ascx.cs</location>
            <body hash="8aa4dcdc19c3eb9021f9f50b12655cc2"><![CDATA[{
            if (IsUserOrAdmin == false)
            {
                return;
            }
            if (MembershipUnLocked != null)
            {
                MembershipUnLocked(this, e);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="remove_MembershipAuthorized">
          <declaration><![CDATA[public void remove_MembershipAuthorized(EventHandler value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="remove_MembershipDemoteFromSuperuser">
          <declaration><![CDATA[public void remove_MembershipDemoteFromSuperuser(EventHandler value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="remove_MembershipPasswordUpdateChanged">
          <declaration><![CDATA[public void remove_MembershipPasswordUpdateChanged(EventHandler value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="remove_MembershipPromoteToSuperuser">
          <declaration><![CDATA[public void remove_MembershipPromoteToSuperuser(EventHandler value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="remove_MembershipUnAuthorized">
          <declaration><![CDATA[public void remove_MembershipUnAuthorized(EventHandler value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="remove_MembershipUnLocked">
          <declaration><![CDATA[public void remove_MembershipUnLocked(EventHandler value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="actionsRow">
          <declaration><![CDATA[protected HtmlGenericControl actionsRow;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="approved">
          <declaration><![CDATA[protected DnnFormLiteralItem approved;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdAuthorize">
          <declaration><![CDATA[protected LinkButton cmdAuthorize;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdPassword">
          <declaration><![CDATA[protected LinkButton cmdPassword;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdToggleSuperuser">
          <declaration><![CDATA[protected LinkButton cmdToggleSuperuser;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdUnAuthorize">
          <declaration><![CDATA[protected LinkButton cmdUnAuthorize;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdUnLock">
          <declaration><![CDATA[protected LinkButton cmdUnLock;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="createdDate">
          <declaration><![CDATA[protected DnnFormLiteralItem createdDate;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="isDeleted">
          <declaration><![CDATA[protected DnnFormLiteralItem isDeleted;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="isOnLine">
          <declaration><![CDATA[protected DnnFormLiteralItem isOnLine;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lastActivityDate">
          <declaration><![CDATA[protected DnnFormLiteralItem lastActivityDate;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lastLockoutDate">
          <declaration><![CDATA[protected DnnFormLiteralItem lastLockoutDate;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lastLoginDate">
          <declaration><![CDATA[protected DnnFormLiteralItem lastLoginDate;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lastPasswordChangeDate">
          <declaration><![CDATA[protected DnnFormLiteralItem lastPasswordChangeDate;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lockedOut">
          <declaration><![CDATA[protected DnnFormLiteralItem lockedOut;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="MembershipAuthorized">
          <declaration><![CDATA[private EventHandler MembershipAuthorized;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="MembershipDemoteFromSuperuser">
          <declaration><![CDATA[private EventHandler MembershipDemoteFromSuperuser;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="membershipForm">
          <declaration><![CDATA[protected DnnFormEditor membershipForm;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="MembershipPasswordUpdateChanged">
          <declaration><![CDATA[private EventHandler MembershipPasswordUpdateChanged;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="MembershipPromoteToSuperuser">
          <declaration><![CDATA[private EventHandler MembershipPromoteToSuperuser;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="MembershipUnAuthorized">
          <declaration><![CDATA[private EventHandler MembershipUnAuthorized;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="MembershipUnLocked">
          <declaration><![CDATA[private EventHandler MembershipUnLocked;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="updatePassword">
          <declaration><![CDATA[protected DnnFormLiteralItem updatePassword;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="userFolder">
          <declaration><![CDATA[protected DnnFormLiteralItem userFolder;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="UserMembership">
          <declaration><![CDATA[public UserMembership UserMembership]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="62" sc="13" el="69" ec="14">DesktopModules\Admin\Security\Membership.ascx.cs</location>
            <body hash="be33e3812159c9a63c8945582165e734"><![CDATA[{
                UserMembership membership = null;
                if (User != null)
                {
                    membership = User.Membership;
                }
                return membership;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
        <event name="MembershipAuthorized">
          <declaration><![CDATA[public event EventHandler MembershipAuthorized;]]></declaration>
          <documentation>
          </documentation>
        </event>
        <event name="MembershipDemoteFromSuperuser">
          <declaration><![CDATA[public event EventHandler MembershipDemoteFromSuperuser;]]></declaration>
          <documentation>
          </documentation>
        </event>
        <event name="MembershipPasswordUpdateChanged">
          <declaration><![CDATA[public event EventHandler MembershipPasswordUpdateChanged;]]></declaration>
          <documentation>
          </documentation>
        </event>
        <event name="MembershipPromoteToSuperuser">
          <declaration><![CDATA[public event EventHandler MembershipPromoteToSuperuser;]]></declaration>
          <documentation>
          </documentation>
        </event>
        <event name="MembershipUnAuthorized">
          <declaration><![CDATA[public event EventHandler MembershipUnAuthorized;]]></declaration>
          <documentation>
          </documentation>
        </event>
        <event name="MembershipUnLocked">
          <declaration><![CDATA[public event EventHandler MembershipUnLocked;]]></declaration>
          <documentation>
          </documentation>
        </event>
      </events>
    </class>
    <class name="Password">
      <declaration><![CDATA[public class Password : UserModuleBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public Password()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
        <constructor name=".cctor">
          <declaration><![CDATA[static Password()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="62" sc="6" el="62" ec="95">DesktopModules\Admin\Security\Password.ascx.cs</location>
            <body hash="942d7fcea06df8bf33578a6542b514c1"><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof (Password))]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="add_PasswordQuestionAnswerUpdated">
          <declaration><![CDATA[public void add_PasswordQuestionAnswerUpdated(Password.PasswordUpdatedEventHandler value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="add_PasswordUpdated">
          <declaration><![CDATA[public void add_PasswordUpdated(Password.PasswordUpdatedEventHandler value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="cmdReset_Click">
          <declaration><![CDATA[private void cmdReset_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="342" sc="9" el="390" ec="10">DesktopModules\Admin\Security\Password.ascx.cs</location>
            <body hash="3b4f336a988bd43f9971cb0bf3015b0f"><![CDATA[{
            if (IsUserOrAdmin == false)
            {
                return;
            }
            string answer = "";
            if (MembershipProviderConfig.RequiresQuestionAndAnswer && !IsAdmin)
            {
                if (String.IsNullOrEmpty(txtAnswer.Text))
                {
                    OnPasswordUpdated(new PasswordUpdatedEventArgs(PasswordUpdateStatus.InvalidPasswordAnswer));
                    return;
                }
                answer = txtAnswer.Text;
            }
            try
            {
                //create resettoken
                UserController.ResetPasswordToken(User, Entities.Host.Host.AdminMembershipResetLinkValidity);

                bool canSend = Mail.SendMail(User, MessageType.PasswordReminder, PortalSettings) == string.Empty;
                var message = String.Empty;
                var moduleMessageType = ModuleMessage.ModuleMessageType.GreenSuccess;
                if (canSend)
                {
                    message = Localization.GetString("PasswordSent", LocalResourceFile);
                    LogSuccess();
                }
                else
                {
                    message = Localization.GetString("OptionUnavailable", LocalResourceFile);
                    moduleMessageType=ModuleMessage.ModuleMessageType.RedError;
                    LogFailure(message);
                }

               
                UI.Skins.Skin.AddModuleMessage(this, message, moduleMessageType);
            }
            catch (ArgumentException exc)
            {
                Logger.Error(exc);
                OnPasswordUpdated(new PasswordUpdatedEventArgs(PasswordUpdateStatus.InvalidPasswordAnswer));
            }
            catch (Exception exc)
            {
                Logger.Error(exc);
                OnPasswordUpdated(new PasswordUpdatedEventArgs(PasswordUpdateStatus.PasswordResetFailed));
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="cmdUpdate_Click">
          <declaration><![CDATA[private void cmdUpdate_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="464" sc="9" el="580" ec="10">DesktopModules\Admin\Security\Password.ascx.cs</location>
            <body hash="aa7c71e4cf61c6603ad4da4250a9f2db"><![CDATA[{
            if ((UseCaptcha && ctlCaptcha.IsValid) || !UseCaptcha)
            {
                if (IsUserOrAdmin == false)
                {
                    return;
                }
                //1. Check New Password and Confirm are the same
                if (txtNewPassword.Text != txtNewConfirm.Text)
                {
                    OnPasswordUpdated(new PasswordUpdatedEventArgs(PasswordUpdateStatus.PasswordMismatch));
                    return;
                }

                //2. Check New Password is Valid
                if (!UserController.ValidatePassword(txtNewPassword.Text))
                {
                    OnPasswordUpdated(new PasswordUpdatedEventArgs(PasswordUpdateStatus.PasswordInvalid));
                    return;
                }

                //3. Check old Password is Provided
                if (!IsAdmin && String.IsNullOrEmpty(txtOldPassword.Text))
                {
                    OnPasswordUpdated(new PasswordUpdatedEventArgs(PasswordUpdateStatus.PasswordMissing));
                    return;
                }

                //4. Check New Password is ddifferent
                if (!IsAdmin && txtNewPassword.Text == txtOldPassword.Text)
                {
                    OnPasswordUpdated(new PasswordUpdatedEventArgs(PasswordUpdateStatus.PasswordNotDifferent));
                    return;
                }
                //5. Check New Password is not same as username or banned
				var membershipPasswordController = new MembershipPasswordController();
                var settings = new MembershipPasswordSettings(User.PortalID);

                if (settings.EnableBannedList)
                {
					if (membershipPasswordController.FoundBannedPassword(txtNewPassword.Text) || User.Username == txtNewPassword.Text)
                    {
                        OnPasswordUpdated(new PasswordUpdatedEventArgs(PasswordUpdateStatus.BannedPasswordUsed));
                        return;
                    }

                }

				//check new password is not in history
				if (membershipPasswordController.IsPasswordInHistory(User.UserID, User.PortalID, txtNewPassword.Text, false))
				{
					OnPasswordUpdated(new PasswordUpdatedEventArgs(PasswordUpdateStatus.PasswordResetFailed));
					return;
				}

                if (!IsAdmin && txtNewPassword.Text == txtOldPassword.Text)
                {
                    OnPasswordUpdated(new PasswordUpdatedEventArgs(PasswordUpdateStatus.PasswordNotDifferent));
                    return;
                }

                if (!IsAdmin)
                {
                    try
                    {
                        OnPasswordUpdated(UserController.ChangePassword(User, txtOldPassword.Text, txtNewPassword.Text)
                                              ? new PasswordUpdatedEventArgs(PasswordUpdateStatus.Success)
                                              : new PasswordUpdatedEventArgs(PasswordUpdateStatus.PasswordResetFailed));
                    }
                    catch (MembershipPasswordException exc)
                    {
                        //Password Answer missing
                        Logger.Error(exc);

                        OnPasswordUpdated(new PasswordUpdatedEventArgs(PasswordUpdateStatus.InvalidPasswordAnswer));
                    }
                    catch (ThreadAbortException)
                    {
                        //Do nothing we are not logging ThreadAbortxceptions caused by redirects    
                    }
                    catch (Exception exc)
                    {
                        //Fail
                        Logger.Error(exc);

                        OnPasswordUpdated(new PasswordUpdatedEventArgs(PasswordUpdateStatus.PasswordResetFailed));
                    }
                }
                else
                {
                    try
                    {
                        OnPasswordUpdated(UserController.ResetAndChangePassword(User, txtNewPassword.Text)
                                              ? new PasswordUpdatedEventArgs(PasswordUpdateStatus.Success)
                                              : new PasswordUpdatedEventArgs(PasswordUpdateStatus.PasswordResetFailed));
                    }
                    catch (MembershipPasswordException exc)
                    {
                        //Password Answer missing
                        Logger.Error(exc);

                        OnPasswordUpdated(new PasswordUpdatedEventArgs(PasswordUpdateStatus.InvalidPasswordAnswer));
                    }
                    catch (ThreadAbortException)
                    {
                        //Do nothing we are not logging ThreadAbortxceptions caused by redirects    
                    }
                    catch (Exception exc)
                    {
                        //Fail
                        Logger.Error(exc);

                        OnPasswordUpdated(new PasswordUpdatedEventArgs(PasswordUpdateStatus.PasswordResetFailed));
                    }
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="cmdUpdateQA_Click">
          <declaration><![CDATA[private void cmdUpdateQA_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="589" sc="9" el="615" ec="10">DesktopModules\Admin\Security\Password.ascx.cs</location>
            <body hash="57df99142cd26b78ff1f27d836dde50e"><![CDATA[{
            if (IsUserOrAdmin == false)
            {
                return;
            }
            if (String.IsNullOrEmpty(txtQAPassword.Text))
            {
                OnPasswordQuestionAnswerUpdated(new PasswordUpdatedEventArgs(PasswordUpdateStatus.PasswordInvalid));
                return;
            }
            if (String.IsNullOrEmpty(txtEditQuestion.Text))
            {
                OnPasswordQuestionAnswerUpdated(new PasswordUpdatedEventArgs(PasswordUpdateStatus.InvalidPasswordQuestion));
                return;
            }
            if (String.IsNullOrEmpty(txtEditAnswer.Text))
            {
                OnPasswordQuestionAnswerUpdated(new PasswordUpdatedEventArgs(PasswordUpdateStatus.InvalidPasswordAnswer));
                return;
            }
			
            //Try and set password Q and A
            UserInfo objUser = UserController.GetUserById(PortalId, UserId);
            OnPasswordQuestionAnswerUpdated(UserController.ChangePasswordQuestionAndAnswer(objUser, txtQAPassword.Text, txtEditQuestion.Text, txtEditAnswer.Text)
                                                ? new PasswordUpdatedEventArgs(PasswordUpdateStatus.Success)
                                                : new PasswordUpdatedEventArgs(PasswordUpdateStatus.PasswordResetFailed));
        }]]></body>
          </codeblock>
        </method>
        <method name="cmdUserReset_Click">
          <declaration><![CDATA[private void cmdUserReset_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="393" sc="9" el="426" ec="10">DesktopModules\Admin\Security\Password.ascx.cs</location>
            <body hash="54d7c41e4e901725c21331587beb59f9"><![CDATA[{
            try
            {
                //send fresh resettoken copy
                bool canSend = UserController.ResetPasswordToken(User,true);

                var message = String.Empty;
                var moduleMessageType = ModuleMessage.ModuleMessageType.GreenSuccess;
                if (canSend)
                {
                    message = Localization.GetString("PasswordSent", LocalResourceFile);
                    LogSuccess();
                }
                else
                {
                    message = Localization.GetString("OptionUnavailable", LocalResourceFile);
                    moduleMessageType = ModuleMessage.ModuleMessageType.RedError;
                    LogFailure(message);
                }


                UI.Skins.Skin.AddModuleMessage(this, message, moduleMessageType);
            }
            catch (ArgumentException exc)
            {
                Logger.Error(exc);
                OnPasswordUpdated(new PasswordUpdatedEventArgs(PasswordUpdateStatus.InvalidPasswordAnswer));
            }
            catch (Exception exc)
            {
                Logger.Error(exc);
                OnPasswordUpdated(new PasswordUpdatedEventArgs(PasswordUpdateStatus.PasswordResetFailed));
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="DataBind">
          <declaration><![CDATA[public override void DataBind()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="149" sc="9" el="253" ec="10">DesktopModules\Admin\Security\Password.ascx.cs</location>
            <body hash="ec4b1fc15ef6ff19df2cf762175726cf"><![CDATA[{
            lblLastChanged.Text = User.Membership.LastPasswordChangeDate.ToLongDateString();

            //Set Password Expiry Label
            if (User.Membership.UpdatePassword)
            {
                lblExpires.Text = Localization.GetString("ForcedExpiry", LocalResourceFile);
            }
            else
            {
                lblExpires.Text = PasswordConfig.PasswordExpiry > 0 ? User.Membership.LastPasswordChangeDate.AddDays(PasswordConfig.PasswordExpiry).ToLongDateString() : Localization.GetString("NoExpiry", LocalResourceFile);
            }
			
           if (((!MembershipProviderConfig.PasswordRetrievalEnabled) && IsAdmin && (!IsUser)))
            {
                pnlChange.Visible = true;
                cmdUpdate.Visible = true;
                oldPasswordRow.Visible = false;
                lblChangeHelp.Text = Localization.GetString("AdminChangeHelp", LocalResourceFile);
            }
            else
            {
                pnlChange.Visible = true;
                cmdUpdate.Visible = true;
				
				//Set up Change Password
                if (IsAdmin && !IsUser)
                {
                    lblChangeHelp.Text = Localization.GetString("AdminChangeHelp", LocalResourceFile);
                    oldPasswordRow.Visible = false;
                }
                else
                {
                    lblChangeHelp.Text = Localization.GetString("UserChangeHelp", LocalResourceFile);
                    if (Request.IsAuthenticated)
                    {
                        pnlChange.Visible = true;
                        cmdUserReset.Visible = false;
                        cmdUpdate.Visible = true;
                    }
                    else
                    {
                        pnlChange.Visible = false;
                        cmdUserReset.Visible = true;
                        cmdUpdate.Visible = false;
                    }
                }
            }
			
            //If Password Reset is not enabled then only the Admin can reset the 
            //Password, a User must Update
            if (!MembershipProviderConfig.PasswordResetEnabled)
            {
                pnlReset.Visible = false;
                cmdReset.Visible = false;
            }
            else
            {
                pnlReset.Visible = true;
                cmdReset.Visible = true;
				
				//Set up Reset Password
                if (IsAdmin && !IsUser)
                {
                    if (MembershipProviderConfig.RequiresQuestionAndAnswer)
                    {
                        pnlReset.Visible = false;
                        cmdReset.Visible = false;
                    }
                    else
                    {
                        lblResetHelp.Text = Localization.GetString("AdminResetHelp", LocalResourceFile);
                    }
                    questionRow.Visible = false;
                    answerRow.Visible = false;
                }
                else
                {
                    if (MembershipProviderConfig.RequiresQuestionAndAnswer && IsUser)
                    {
                        lblResetHelp.Text = Localization.GetString("UserResetHelp", LocalResourceFile);
                        lblQuestion.Text = User.Membership.PasswordQuestion;
                        questionRow.Visible = true;
                        answerRow.Visible = true;
                    }
                    else
                    {
                        pnlReset.Visible = false;
                        cmdReset.Visible = false;
                    }
                }
            }
			
            //Set up Edit Question and Answer area
            if (MembershipProviderConfig.RequiresQuestionAndAnswer && IsUser)
            {
                pnlQA.Visible = true;
                cmdUpdateQA.Visible = true;
            }
            else
            {
                pnlQA.Visible = false;
                cmdUpdateQA.Visible = false;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="LogFailure">
          <declaration><![CDATA[private void LogFailure(string reason)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="434" sc="9" el="436" ec="10">DesktopModules\Admin\Security\Password.ascx.cs</location>
            <body hash="6ae11ec85f2fbb19f9a679a3e43b8a41"><![CDATA[{
            LogResult(reason);
        }]]></body>
          </codeblock>
        </method>
        <method name="LogResult">
          <declaration><![CDATA[private void LogResult(string message)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="439" sc="9" el="461" ec="10">DesktopModules\Admin\Security\Password.ascx.cs</location>
            <body hash="1ed30a2eace28c7109eff14ecd9ddd89"><![CDATA[{
            var portalSecurity = new PortalSecurity();

            var log = new LogInfo
            {
                LogPortalID = PortalSettings.PortalId,
                LogPortalName = PortalSettings.PortalName,
                LogUserID = UserId,
                LogUserName = portalSecurity.InputFilter(User.Username, PortalSecurity.FilterFlag.NoScripting | PortalSecurity.FilterFlag.NoAngleBrackets | PortalSecurity.FilterFlag.NoMarkup)
            };

            if (string.IsNullOrEmpty(message))
            {
                log.LogTypeKey = "PASSWORD_SENT_SUCCESS";
            }
            else
            {
                log.LogTypeKey = "PASSWORD_SENT_FAILURE";
                log.LogProperties.Add(new LogDetailInfo("Cause", message));
            }

            LogController.Instance.AddLog(log);
        }]]></body>
          </codeblock>
        </method>
        <method name="LogSuccess">
          <declaration><![CDATA[private void LogSuccess()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="429" sc="9" el="431" ec="10">DesktopModules\Admin\Security\Password.ascx.cs</location>
            <body hash="dac4dc755ecca3dcb125aec00a771ee8"><![CDATA[{
            LogResult(string.Empty);
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="260" sc="9" el="281" ec="10">DesktopModules\Admin\Security\Password.ascx.cs</location>
            <body hash="ec3c95274ddbbba186b1c26985582da5"><![CDATA[{
            base.OnLoad(e);
            cmdReset.Click += cmdReset_Click;
            cmdUserReset.Click += cmdUserReset_Click;
            cmdUpdate.Click += cmdUpdate_Click;
            cmdUpdateQA.Click += cmdUpdateQA_Click;

			if (MembershipProviderConfig.RequiresQuestionAndAnswer && User.UserID != UserController.Instance.GetCurrentUserInfo().UserID)
			{
				pnlChange.Visible = false;
			    cmdUpdate.Visible = false;
				CannotChangePasswordMessage.Visible = true;
			}

            if (UseCaptcha)
            {
                captchaRow.Visible = true;
                ctlCaptcha.ErrorMessage = Localization.GetString("InvalidCaptcha", LocalResourceFile);
                ctlCaptcha.Text = Localization.GetString("CaptchaText", LocalResourceFile);
            }
           
        }]]></body>
          </codeblock>
        </method>
        <method name="OnPasswordQuestionAnswerUpdated">
          <declaration><![CDATA[public void OnPasswordQuestionAnswerUpdated(Password.PasswordUpdatedEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="129" sc="9" el="138" ec="10">DesktopModules\Admin\Security\Password.ascx.cs</location>
            <body hash="b519a5a72deb60e0df6030cc3eeee2dc"><![CDATA[{
            if (IsUserOrAdmin == false)
            {
                return;
            }
            if (PasswordQuestionAnswerUpdated != null)
            {
                PasswordQuestionAnswerUpdated(this, e);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnPasswordUpdated">
          <declaration><![CDATA[public void OnPasswordUpdated(Password.PasswordUpdatedEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="113" sc="9" el="122" ec="10">DesktopModules\Admin\Security\Password.ascx.cs</location>
            <body hash="b2fc91efb267e01445b37f69dd8b5bca"><![CDATA[{
            if (IsUserOrAdmin == false)
            {
                return;
            }
            if (PasswordUpdated != null)
            {
                PasswordUpdated(this, e);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnPreRender">
          <declaration><![CDATA[protected override void OnPreRender(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="285" sc="9" el="338" ec="10">DesktopModules\Admin\Security\Password.ascx.cs</location>
            <body hash="b1242366e2034a25a3d444cb799bbc27"><![CDATA[{
            ClientResourceManager.RegisterScript(Page, "~/Resources/Shared/scripts/dnn.jquery.extensions.js");
            ClientResourceManager.RegisterScript(Page, "~/Resources/Shared/scripts/dnn.jquery.tooltip.js");
            ClientResourceManager.RegisterScript(Page, "~/Resources/Shared/scripts/dnn.PasswordStrength.js");
            ClientResourceManager.RegisterScript(Page, "~/DesktopModules/Admin/Security/Scripts/dnn.PasswordComparer.js");

			ClientResourceManager.RegisterStyleSheet(Page, "~/Resources/Shared/stylesheets/dnn.PasswordStrength.css", FileOrder.Css.ResourceCss);

			JavaScript.RequestRegistration(CommonJs.DnnPlugins);

            base.OnPreRender(e);

			if (Host.EnableStrengthMeter)
			{
				passwordContainer.CssClass = "password-strength-container";
				txtNewPassword.CssClass = "password-strength";

				var options = new DnnPaswordStrengthOptions();
				var optionsAsJsonString = Json.Serialize(options);
				var script = string.Format("dnn.initializePasswordStrength('.{0}', {1});{2}", "password-strength", optionsAsJsonString, Environment.NewLine);

				if (ScriptManager.GetCurrent(Page) != null)
				{
					// respect MS AJAX
					ScriptManager.RegisterStartupScript(Page, GetType(), "PasswordStrength", script, true);
				}
				else
				{
					Page.ClientScript.RegisterStartupScript(GetType(), "PasswordStrength", script, true);
				}
			}

			var confirmPasswordOptions = new DnnConfirmPasswordOptions()
			{
				FirstElementSelector = "#" + passwordContainer.ClientID + " input[type=password]",
				SecondElementSelector = ".password-confirm",
				ContainerSelector = ".dnnPassword",
				UnmatchedCssClass = "unmatched",
				MatchedCssClass = "matched"
			};

			var confirmOptionsAsJsonString = Json.Serialize(confirmPasswordOptions);
			var confirmScript = string.Format("dnn.initializePasswordComparer({0});{1}", confirmOptionsAsJsonString, Environment.NewLine);

			if (ScriptManager.GetCurrent(Page) != null)
			{
				// respect MS AJAX
				ScriptManager.RegisterStartupScript(Page, GetType(), "ConfirmPassword", confirmScript, true);
			}
			else
			{
				Page.ClientScript.RegisterStartupScript(GetType(), "ConfirmPassword", confirmScript, true);
			}
        }]]></body>
          </codeblock>
        </method>
        <method name="remove_PasswordQuestionAnswerUpdated">
          <declaration><![CDATA[public void remove_PasswordQuestionAnswerUpdated(Password.PasswordUpdatedEventHandler value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="remove_PasswordUpdated">
          <declaration><![CDATA[public void remove_PasswordUpdated(Password.PasswordUpdatedEventHandler value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="answerRow">
          <declaration><![CDATA[protected HtmlGenericControl answerRow;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="CannotChangePasswordMessage">
          <declaration><![CDATA[protected Panel CannotChangePasswordMessage;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="captchaLabel">
          <declaration><![CDATA[protected LabelControl captchaLabel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="captchaRow">
          <declaration><![CDATA[protected HtmlGenericControl captchaRow;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdReset">
          <declaration><![CDATA[protected LinkButton cmdReset;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdUpdate">
          <declaration><![CDATA[protected LinkButton cmdUpdate;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdUpdateQA">
          <declaration><![CDATA[protected LinkButton cmdUpdateQA;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdUserReset">
          <declaration><![CDATA[protected LinkButton cmdUserReset;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ctlCaptcha">
          <declaration><![CDATA[protected CaptchaControl ctlCaptcha;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblChangeHelp">
          <declaration><![CDATA[protected Label lblChangeHelp;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblChangePasswordHeading">
          <declaration><![CDATA[protected Label lblChangePasswordHeading;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblChangeQA">
          <declaration><![CDATA[protected Label lblChangeQA;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblExpires">
          <declaration><![CDATA[protected Label lblExpires;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblLastChanged">
          <declaration><![CDATA[protected Label lblLastChanged;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblQAHelp">
          <declaration><![CDATA[protected Label lblQAHelp;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblQuestion">
          <declaration><![CDATA[protected Label lblQuestion;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblResetHeading">
          <declaration><![CDATA[protected Label lblResetHeading;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblResetHelp">
          <declaration><![CDATA[protected Label lblResetHelp;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Logger">
          <declaration><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof(Password));]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="oldPasswordRow">
          <declaration><![CDATA[protected HtmlGenericControl oldPasswordRow;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="passwordContainer">
          <declaration><![CDATA[protected Panel passwordContainer;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="PasswordQuestionAnswerUpdated">
          <declaration><![CDATA[private Password.PasswordUpdatedEventHandler PasswordQuestionAnswerUpdated;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="PasswordUpdated">
          <declaration><![CDATA[private Password.PasswordUpdatedEventHandler PasswordUpdated;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plAnswer">
          <declaration><![CDATA[protected LabelControl plAnswer;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plEditAnswer">
          <declaration><![CDATA[protected LabelControl plEditAnswer;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plEditQuestion">
          <declaration><![CDATA[protected LabelControl plEditQuestion;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plExpires">
          <declaration><![CDATA[protected LabelControl plExpires;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plLastChanged">
          <declaration><![CDATA[protected LabelControl plLastChanged;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plNewConfirm">
          <declaration><![CDATA[protected LabelControl plNewConfirm;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plNewPassword">
          <declaration><![CDATA[protected LabelControl plNewPassword;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plOldPassword">
          <declaration><![CDATA[protected LabelControl plOldPassword;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plQAPassword">
          <declaration><![CDATA[protected LabelControl plQAPassword;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plQuestion">
          <declaration><![CDATA[protected LabelControl plQuestion;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="pnlChange">
          <declaration><![CDATA[protected Panel pnlChange;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="pnlQA">
          <declaration><![CDATA[protected Panel pnlQA;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="pnlReset">
          <declaration><![CDATA[protected Panel pnlReset;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="questionRow">
          <declaration><![CDATA[protected HtmlGenericControl questionRow;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtAnswer">
          <declaration><![CDATA[protected TextBox txtAnswer;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtEditAnswer">
          <declaration><![CDATA[protected TextBox txtEditAnswer;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtEditQuestion">
          <declaration><![CDATA[protected TextBox txtEditQuestion;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtNewConfirm">
          <declaration><![CDATA[protected TextBox txtNewConfirm;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtNewPassword">
          <declaration><![CDATA[protected TextBox txtNewPassword;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtOldPassword">
          <declaration><![CDATA[protected TextBox txtOldPassword;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtQAPassword">
          <declaration><![CDATA[protected TextBox txtQAPassword;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="Membership">
          <declaration><![CDATA[public UserMembership Membership]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="85" sc="13" el="92" ec="14">DesktopModules\Admin\Security\Password.ascx.cs</location>
            <body hash="7282a6ba20c9687f69bf24b4e318908a"><![CDATA[{
                UserMembership _Membership = null;
                if (User != null)
                {
                    _Membership = User.Membership;
                }
                return _Membership;
            }]]></body>
          </codeblock>
        </property>
        <property name="UseCaptcha">
          <declaration><![CDATA[protected bool UseCaptcha]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="66" sc="13" el="68" ec="14">DesktopModules\Admin\Security\Password.ascx.cs</location>
            <body hash="5774a6952a97286c789a2c777cfbb01a"><![CDATA[{
                return Convert.ToBoolean(GetSetting(PortalId, "Security_CaptchaChangePassword"));
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
        <event name="PasswordQuestionAnswerUpdated">
          <declaration><![CDATA[public event Password.PasswordUpdatedEventHandler PasswordQuestionAnswerUpdated;]]></declaration>
          <documentation>
          </documentation>
        </event>
        <event name="PasswordUpdated">
          <declaration><![CDATA[public event Password.PasswordUpdatedEventHandler PasswordUpdated;]]></declaration>
          <documentation>
          </documentation>
        </event>
      </events>
    </class>
    <class name="ProfileDefinitions">
      <declaration><![CDATA[public class ProfileDefinitions : PortalModuleBase, IActionable]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private bool _requiredColumnHidden = false;]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="66" sc="9" el="66" ec="52">DesktopModules\Admin\Security\ProfileDefinitions.ascx.cs</location>
            <body hash="50a8b3bfc902b1fec3244e07dca09a48"><![CDATA[private bool _requiredColumnHidden = false]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="BindGrid">
          <declaration><![CDATA[private void BindGrid()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="261" sc="9" el="299" ec="10">DesktopModules\Admin\Security\ProfileDefinitions.ascx.cs</location>
            <body hash="51190c2696dcee993bfc69e9d9ffed2c"><![CDATA[{
            bool allRequired = true;
            bool allVisible = true;

            //Check whether the checkbox column headers are true or false
            foreach (ProfilePropertyDefinition profProperty in ProfileProperties)
            {
                if (profProperty.Required == false)
                {
                    allRequired = false;
                }
                if (profProperty.Visible == false)
                {
                    allVisible = false;
                }
                if (!allRequired && !allVisible)
                {
                    break;
                }
            }
            foreach (DataGridColumn column in grdProfileProperties.Columns)
            {
                if (ReferenceEquals(column.GetType(), typeof(CheckBoxColumn)))
                {
                    //Manage CheckBox column events
                    var checkBoxColumn = (CheckBoxColumn)column;
                    if (checkBoxColumn.DataField == "Required")
                    {
                        checkBoxColumn.Checked = allRequired;
                    }
                    if (checkBoxColumn.DataField == "Visible")
                    {
                        checkBoxColumn.Checked = allVisible;
                    }
                }
            }
            grdProfileProperties.DataSource = ProfileProperties;
            grdProfileProperties.DataBind();
        }]]></body>
          </codeblock>
        </method>
        <method name="cmdRefresh_Click">
          <declaration><![CDATA[private void cmdRefresh_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="531" sc="9" el="533" ec="10">DesktopModules\Admin\Security\ProfileDefinitions.ascx.cs</location>
            <body hash="4f596e0ae1641ed8afb538315ae3d912"><![CDATA[{
            RefreshGrid();
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteProperty">
          <declaration><![CDATA[private void DeleteProperty(int index)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="203" sc="9" el="207" ec="10">DesktopModules\Admin\Security\ProfileDefinitions.ascx.cs</location>
            <body hash="bb22c05c2596988df217aa3ce25ec9c6"><![CDATA[{
            ProfileController.DeletePropertyDefinition(ProfileProperties[index]);

            RefreshGrid();
        }]]></body>
          </codeblock>
        </method>
        <method name="DisplayDataType">
          <declaration><![CDATA[public string DisplayDataType(ProfilePropertyDefinition definition)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="402" sc="9" el="411" ec="10">DesktopModules\Admin\Security\ProfileDefinitions.ascx.cs</location>
            <body hash="cbd791bee82fee7db2c27f5ddc0b1b67"><![CDATA[{
            string retValue = Null.NullString;
            var listController = new ListController();
            ListEntryInfo definitionEntry = listController.GetListEntryInfo("DataType", definition.DataType);
            if (definitionEntry != null)
            {
                retValue = definitionEntry.Value;
            }
            return retValue;
        }]]></body>
          </codeblock>
        </method>
        <method name="DisplayDefaultVisibility">
          <declaration><![CDATA[public string DisplayDefaultVisibility(ProfilePropertyDefinition definition)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="414" sc="9" el="421" ec="10">DesktopModules\Admin\Security\ProfileDefinitions.ascx.cs</location>
            <body hash="b4cb6edc99766415b68f4daaf97007ce"><![CDATA[{
            string retValue = Null.NullString;
            if (!String.IsNullOrEmpty(definition.DefaultVisibility.ToString()))
            {
                retValue = LocalizeString(definition.DefaultVisibility.ToString()) ?? definition.DefaultVisibility.ToString();
            }
            return retValue;
        }]]></body>
          </codeblock>
        </method>
        <method name="grdProfileProperties_ItemCheckedChanged">
          <declaration><![CDATA[private void grdProfileProperties_ItemCheckedChanged(object sender, DNNDataGridCheckChangedEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="544" sc="9" el="579" ec="10">DesktopModules\Admin\Security\ProfileDefinitions.ascx.cs</location>
            <body hash="2c0ad181bcbcfe8c0d9beab00b0052fe"><![CDATA[{
            string propertyName = e.Field;
            bool propertyValue = e.Checked;

            if (e.IsAll)
            {
                //Update All the properties
                foreach (ProfilePropertyDefinition profProperty in ProfileProperties)
                {
                    switch (propertyName)
                    {
                        case "Required":
                            profProperty.Required = propertyValue;
                            break;
                        case "Visible":
                            profProperty.Visible = propertyValue;
                            break;
                    }
                }
            }
            else
            {
                //Update the indexed property
                ProfilePropertyDefinition profileProperty = ProfileProperties[e.Item.ItemIndex];
                switch (propertyName)
                {
                    case "Required":
                        profileProperty.Required = propertyValue;
                        break;
                    case "Visible":
                        profileProperty.Visible = propertyValue;
                        break;
                }
            }
            BindGrid();
        }]]></body>
          </codeblock>
        </method>
        <method name="grdProfileProperties_ItemCommand">
          <declaration><![CDATA[private void grdProfileProperties_ItemCommand(object source, DataGridCommandEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="590" sc="9" el="605" ec="10">DesktopModules\Admin\Security\ProfileDefinitions.ascx.cs</location>
            <body hash="51e2883863b65f7b0e0024988cf4ca26"><![CDATA[{
            int index = e.Item.ItemIndex;

            switch (e.CommandName)
            {
                case "Delete":
                    DeleteProperty(index);
                    break;
                case "MoveUp":
                    MovePropertyUp(index);
                    break;
                case "MoveDown":
                    MovePropertyDown(index);
                    break;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="grdProfileProperties_ItemCreated">
          <declaration><![CDATA[private void grdProfileProperties_ItemCreated(object sender, DataGridItemEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="617" sc="9" el="640" ec="10">DesktopModules\Admin\Security\ProfileDefinitions.ascx.cs</location>
            <body hash="dbc06715d6005b159f2c30040dc4cbaf"><![CDATA[{
            if (SupportsRichClient())
            {
                switch (e.Item.ItemType)
                {
                    case ListItemType.Header:
                        //we combined the header label and checkbox in same place, so it is control 1 instead of 0                       
                        ((WebControl)e.Item.Cells[COLUMN_REQUIRED].Controls[1]).Attributes.Add("onclick", "dnn.util.checkallChecked(this," + COLUMN_REQUIRED + ");");
                        ((CheckBox)e.Item.Cells[COLUMN_REQUIRED].Controls[1]).AutoPostBack = false;

                        int column_visible = _requiredColumnHidden ? COLUMN_VISIBLE - 1 : COLUMN_VISIBLE;
                        ((WebControl)e.Item.Cells[COLUMN_VISIBLE].Controls[1]).Attributes.Add("onclick", "dnn.util.checkallChecked(this," + column_visible + ");");
                        ((CheckBox)e.Item.Cells[COLUMN_VISIBLE].Controls[1]).AutoPostBack = false;
                        break;
                    case ListItemType.AlternatingItem:
                    case ListItemType.Item:
                        ((CheckBox)e.Item.Cells[COLUMN_REQUIRED].Controls[0]).AutoPostBack = false;
                        ((CheckBox)e.Item.Cells[COLUMN_VISIBLE].Controls[0]).AutoPostBack = false;
                        ClientAPI.EnableClientSideReorder(e.Item.Cells[COLUMN_MOVE_DOWN].Controls[0], Page, false, grdProfileProperties.ClientID);
                        ClientAPI.EnableClientSideReorder(e.Item.Cells[COLUMN_MOVE_UP].Controls[0], Page, true, grdProfileProperties.ClientID);
                        break;
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="grdProfileProperties_ItemDataBound">
          <declaration><![CDATA[protected void grdProfileProperties_ItemDataBound(object sender, DataGridItemEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="651" sc="9" el="675" ec="10">DesktopModules\Admin\Security\ProfileDefinitions.ascx.cs</location>
            <body hash="4cff902195aa03d0799aaeb7ca959e2c"><![CDATA[{
            DataGridItem item = e.Item;
            if (item.ItemType == ListItemType.Item || item.ItemType == ListItemType.AlternatingItem || item.ItemType == ListItemType.SelectedItem)
            {
                Control imgColumnControl = item.Controls[1].Controls[0];
                if (imgColumnControl is ImageButton)
                {
                    var delImage = (ImageButton)imgColumnControl;
                    var profProperty = (ProfilePropertyDefinition)item.DataItem;

                    switch (profProperty.PropertyName.ToLower())
                    {
                        case "lastname":
                        case "firstname":
                        case "preferredtimezone":
                        case "preferredlocale":
                            delImage.Visible = false;
                            break;
                        default:
                            delImage.Visible = true;
                            break;
                    }
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="LoadViewState">
          <declaration><![CDATA[protected override void LoadViewState(object savedState)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="366" sc="9" el="384" ec="10">DesktopModules\Admin\Security\ProfileDefinitions.ascx.cs</location>
            <body hash="932f4ca3241f9c6646d029afba87cda5"><![CDATA[{
            if (savedState != null)
            {
                //Load State from the array of objects that was saved with SaveViewState.
                var myState = (object[])savedState;

                //Load Base Controls ViewState
                if (myState[0] != null)
                {
                    base.LoadViewState(myState[0]);
                }

                //Load ModuleID
                if (myState[1] != null)
                {
                    _profileProperties = (ProfilePropertyDefinitionCollection)myState[1];
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="MoveProperty">
          <declaration><![CDATA[private void MoveProperty(int index, int destIndex)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="217" sc="9" el="231" ec="10">DesktopModules\Admin\Security\ProfileDefinitions.ascx.cs</location>
            <body hash="f19295d20b0dcbade2d082927efefc13"><![CDATA[{
            ProfilePropertyDefinition profileProperty = ProfileProperties[index];
            ProfilePropertyDefinition nextProfileProperty = ProfileProperties[destIndex];

            int currentOrder = profileProperty.ViewOrder;
            int nextOrder = nextProfileProperty.ViewOrder;

            //Swap ViewOrders
            profileProperty.ViewOrder = nextOrder;
            nextProfileProperty.ViewOrder = currentOrder;

            //Refresh Grid
            ProfileProperties.Sort();
            BindGrid();
        }]]></body>
          </codeblock>
        </method>
        <method name="MovePropertyDown">
          <declaration><![CDATA[private void MovePropertyDown(int index)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="240" sc="9" el="242" ec="10">DesktopModules\Admin\Security\ProfileDefinitions.ascx.cs</location>
            <body hash="c5ef18f0661238d947563ba156a17c5d"><![CDATA[{
            MoveProperty(index, index + 1);
        }]]></body>
          </codeblock>
        </method>
        <method name="MovePropertyUp">
          <declaration><![CDATA[private void MovePropertyUp(int index)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="251" sc="9" el="253" ec="10">DesktopModules\Admin\Security\ProfileDefinitions.ascx.cs</location>
            <body hash="850245a22cfed7d9c2a683d1749601bd"><![CDATA[{
            MoveProperty(index, index - 1);
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="450" sc="9" el="496" ec="10">DesktopModules\Admin\Security\ProfileDefinitions.ascx.cs</location>
            <body hash="516feab52206ed30c0ea3e0f57203d6f"><![CDATA[{
            base.OnInit(e);

            foreach (DataGridColumn column in grdProfileProperties.Columns)
            {
                if (ReferenceEquals(column.GetType(), typeof(CheckBoxColumn)))
                {
                    var checkBoxColumn = (CheckBoxColumn)column;
                    if (checkBoxColumn.DataField == "Required" && UsersPortalId == Null.NullInteger)
                    {
                        checkBoxColumn.Visible = false;
                        _requiredColumnHidden = true;
                    }
                    if (SupportsRichClient() == false)
                    {
                        checkBoxColumn.CheckedChanged += grdProfileProperties_ItemCheckedChanged;
                    }
                }
                else if (ReferenceEquals(column.GetType(), typeof(ImageCommandColumn)))
                {
                    //Manage Delete Confirm JS
                    var imageColumn = (ImageCommandColumn)column;
                    switch (imageColumn.CommandName)
                    {
                        case "Delete":
                            imageColumn.OnClickJS = Localization.GetString("DeleteItem");
                            imageColumn.Text = Localization.GetString("Delete", LocalResourceFile);
                            break;
                        case "Edit":
                            //The Friendly URL parser does not like non-alphanumeric characters
                            //so first create the format string with a dummy value and then
                            //replace the dummy value with the FormatString place holder
                            string formatString = EditUrl("PropertyDefinitionID", "KEYFIELD", "EditProfileProperty");
                            formatString = formatString.Replace("KEYFIELD", "{0}");
                            imageColumn.NavigateURLFormatString = formatString;
                            imageColumn.Text = Localization.GetString("Edit", LocalResourceFile);
                            break;
                        case "MoveUp":
                            imageColumn.Text = Localization.GetString("MoveUp", LocalResourceFile);
                            break;
                        case "MoveDown":
                            imageColumn.Text = Localization.GetString("MoveDown", LocalResourceFile);
                            break;
                    }
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="499" sc="9" el="521" ec="10">DesktopModules\Admin\Security\ProfileDefinitions.ascx.cs</location>
            <body hash="569a558ec693c84831012f821c50eef5"><![CDATA[{
            base.OnLoad(e);

            cmdRefresh.Click += cmdRefresh_Click;
            grdProfileProperties.ItemCommand += grdProfileProperties_ItemCommand;
            grdProfileProperties.ItemCreated += grdProfileProperties_ItemCreated;
            grdProfileProperties.ItemDataBound += grdProfileProperties_ItemDataBound;

            cmdAdd.NavigateUrl = EditUrl("EditProfileProperty");

            try
            {
                if (!Page.IsPostBack)
                {
                    Localization.LocalizeDataGrid(ref grdProfileProperties, LocalResourceFile);
                    BindGrid();
                }
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="ProcessPostBack">
          <declaration><![CDATA[private void ProcessPostBack()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="340" sc="9" el="359" ec="10">DesktopModules\Admin\Security\ProfileDefinitions.ascx.cs</location>
            <body hash="6f623cefcc7c18425357d1358177be7b"><![CDATA[{

            string[] newOrder = ClientAPI.GetClientSideReorder(grdProfileProperties.ClientID, Page);
            for (int i = 0; i <= grdProfileProperties.Items.Count - 1; i++)
            {
                DataGridItem dataGridItem = grdProfileProperties.Items[i];
                ProfilePropertyDefinition profileProperty = ProfileProperties[i];
                CheckBox checkBox = (CheckBox)dataGridItem.Cells[COLUMN_REQUIRED].Controls[0];
                profileProperty.Required = checkBox.Checked;
                checkBox = (CheckBox)dataGridItem.Cells[COLUMN_VISIBLE].Controls[0];
                profileProperty.Visible = checkBox.Checked;
            }

            //assign vieworder
            for (int i = 0; i <= newOrder.Length - 1; i++)
            {
                ProfileProperties[Convert.ToInt32(newOrder[i])].ViewOrder = i;
            }
            ProfileProperties.Sort();
        }]]></body>
          </codeblock>
        </method>
        <method name="RefreshGrid">
          <declaration><![CDATA[private void RefreshGrid()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="307" sc="9" el="310" ec="10">DesktopModules\Admin\Security\ProfileDefinitions.ascx.cs</location>
            <body hash="58fe734b70e841de44a27d81ec5224e7"><![CDATA[{
            _profileProperties = null;
            BindGrid();
        }]]></body>
          </codeblock>
        </method>
        <method name="SaveViewState">
          <declaration><![CDATA[protected override object SaveViewState()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="387" sc="9" el="395" ec="10">DesktopModules\Admin\Security\ProfileDefinitions.ascx.cs</location>
            <body hash="842f6f7085e6b7026d686f999a2a169f"><![CDATA[{
            var allStates = new object[2];

            //Save the Base Controls ViewState
            allStates[0] = base.SaveViewState();
            allStates[1] = ProfileProperties;

            return allStates;
        }]]></body>
          </codeblock>
        </method>
        <method name="SupportsRichClient">
          <declaration><![CDATA[private bool SupportsRichClient()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="192" sc="9" el="194" ec="10">DesktopModules\Admin\Security\ProfileDefinitions.ascx.cs</location>
            <body hash="9753d8c569c0bf4f17f8b5c29c6699f1"><![CDATA[{
            return ClientAPI.BrowserSupportsFunctionality(ClientAPI.ClientFunctionality.DHTML);
        }]]></body>
          </codeblock>
        </method>
        <method name="Update">
          <declaration><![CDATA[public void Update()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="424" sc="9" el="436" ec="10">DesktopModules\Admin\Security\ProfileDefinitions.ascx.cs</location>
            <body hash="52323f35ee81b49bd562bb2ff05d61e8"><![CDATA[{
            try
            {
                UpdateProperties();

                //Redirect to upadte page
                Response.Redirect(Request.RawUrl, true);
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }            
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateProperties">
          <declaration><![CDATA[private void UpdateProperties()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="318" sc="9" el="331" ec="10">DesktopModules\Admin\Security\ProfileDefinitions.ascx.cs</location>
            <body hash="726d783ec7c894a2603b3af96631b355"><![CDATA[{
            ProcessPostBack();
            foreach (ProfilePropertyDefinition property in ProfileProperties)
            {
                if (property.IsDirty)
                {
                    if (UsersPortalId == Null.NullInteger)
                    {
                        property.Required = false;
                    }
                    ProfileController.UpdatePropertyDefinition(property);
                }
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_profileProperties">
          <declaration><![CDATA[private ProfilePropertyDefinitionCollection _profileProperties;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_requiredColumnHidden">
          <declaration><![CDATA[private bool _requiredColumnHidden = false;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="actionsRow">
          <declaration><![CDATA[protected HtmlGenericControl actionsRow;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdAdd">
          <declaration><![CDATA[protected HyperLink cmdAdd;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdRefresh">
          <declaration><![CDATA[protected LinkButton cmdRefresh;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="COLUMN_MOVE_DOWN">
          <declaration><![CDATA[private const int COLUMN_MOVE_DOWN = 2;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="COLUMN_MOVE_UP">
          <declaration><![CDATA[private const int COLUMN_MOVE_UP = 3;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="COLUMN_REQUIRED">
          <declaration><![CDATA[private const int COLUMN_REQUIRED = 11;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="COLUMN_VISIBLE">
          <declaration><![CDATA[private const int COLUMN_VISIBLE = 12;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="grdProfileProperties">
          <declaration><![CDATA[protected DataGrid grdProfileProperties;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="IsSuperUser">
          <declaration><![CDATA[protected bool IsSuperUser]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="80" sc="13" el="82" ec="14">DesktopModules\Admin\Security\ProfileDefinitions.ascx.cs</location>
            <body hash="804e83cca62dcf42b38c6c5ab3f88aa1"><![CDATA[{
            	return Globals.IsHostTab(PortalSettings.ActiveTab.TabID);
            }]]></body>
          </codeblock>
        </property>
        <property name="ModuleActions">
          <declaration><![CDATA[public ModuleActionCollection ModuleActions]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="156" sc="13" el="179" ec="14">DesktopModules\Admin\Security\ProfileDefinitions.ascx.cs</location>
            <body hash="593d9bfc626bd63fd73a198269d7e3a5"><![CDATA[{
                var actions = new ModuleActionCollection();
                actions.Add(GetNextActionID(),
                            Localization.GetString(ModuleActionType.AddContent, LocalResourceFile),
                            ModuleActionType.AddContent,
                            "",
                            "add.gif",
                            EditUrl("EditProfileProperty"),
                            false,
                            SecurityAccessLevel.Admin,
                            true,
                            false);
                actions.Add(GetNextActionID(),
                            Localization.GetString("Cancel.Action", LocalResourceFile),
                            ModuleActionType.AddContent,
                            "",
                            "lt.gif",
                            ReturnUrl,
                            false,
                            SecurityAccessLevel.Admin,
                            true,
                            false);
                return actions;
            }]]></body>
          </codeblock>
        </property>
        <property name="ProfileProperties">
          <declaration><![CDATA[protected ProfilePropertyDefinitionCollection ProfileProperties]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="93" sc="13" el="95" ec="14">DesktopModules\Admin\Security\ProfileDefinitions.ascx.cs</location>
            <body hash="6ddfa675201810132b733b4d832f102e"><![CDATA[{
                return _profileProperties ?? (_profileProperties = ProfileController.GetPropertyDefinitionsByPortal(UsersPortalId, false, false));
            }]]></body>
          </codeblock>
        </property>
        <property name="ReturnUrl">
          <declaration><![CDATA[public string ReturnUrl]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="106" sc="13" el="128" ec="14">DesktopModules\Admin\Security\ProfileDefinitions.ascx.cs</location>
            <body hash="0f53a21a3b7805ea035992e8f09f035d"><![CDATA[{
                string returnURL;
                var filterParams = new string[String.IsNullOrEmpty(Request.QueryString["filterproperty"]) ? 1 : 2];

                if (String.IsNullOrEmpty(Request.QueryString["filterProperty"]))
                {
                    filterParams.SetValue("filter=" + Request.QueryString["filter"], 0);
                }
                else
                {
                    filterParams.SetValue("filter=" + Request.QueryString["filter"], 0);
                    filterParams.SetValue("filterProperty=" + Request.QueryString["filterProperty"], 1);
                }
                if (string.IsNullOrEmpty(Request.QueryString["filter"]))
                {
                    returnURL = Globals.NavigateURL(TabId);
                }
                else
                {
                    returnURL = Globals.NavigateURL(TabId, "", filterParams);
                }
                return returnURL;
            }]]></body>
          </codeblock>
        </property>
        <property name="UsersPortalId">
          <declaration><![CDATA[protected int UsersPortalId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="139" sc="13" el="146" ec="14">DesktopModules\Admin\Security\ProfileDefinitions.ascx.cs</location>
            <body hash="49679f096e540eb6b49afdc6faf9f474"><![CDATA[{
                int intPortalId = PortalId;
                if (IsSuperUser)
                {
                    intPortalId = Null.NullInteger;
                }
                return intPortalId;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="Register">
      <declaration><![CDATA[public class Register : UserUserControlBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private readonly List<AuthenticationLoginBase> _loginControls = new List<AuthenticationLoginBase>();]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="69" sc="3" el="120" ec="53">DesktopModules\Admin\Security\Register.ascx.cs</location>
            <body hash="9221c39979c12c1f5b588c987bce18a7"><![CDATA[private readonly List<AuthenticationLoginBase> _loginControls = new List<AuthenticationLoginBase>();

		#region Protected Properties

		protected string AuthenticationType
		{
			get
			{
				return ViewState.GetValue("AuthenticationType", Null.NullString);
			}
			set
			{
				ViewState.SetValue("AuthenticationType", value, Null.NullString);
			}
		}

		protected UserCreateStatus CreateStatus { get; set; }

		protected string ExcludeTerms
		{
			get
			{
				string regex = String.Empty;
				if (!String.IsNullOrEmpty(PortalSettings.Registration.ExcludeTerms))
				{
					regex = @"^(?:(?!" + PortalSettings.Registration.ExcludeTerms.Replace(" ", "").Replace(",", "|") + @").)*$\r?\n?";
				}
				return regex;
			}
		}

		protected bool IsValid
		{
			get
			{
				return Validate();
			}
		}

		protected string UserToken
		{
			get
			{
				return ViewState.GetValue("UserToken", string.Empty);
			}
			set
			{
				ViewState.SetValue("UserToken", value, string.Empty);
			}
		}

	    protected override bool AddUser { get; } = true]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="AddField">
          <declaration><![CDATA[private void AddField(string dataField, string dataMember, bool required, string regexValidator, TextBoxMode textMode)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="375" sc="3" el="395" ec="4">DesktopModules\Admin\Security\Register.ascx.cs</location>
            <body hash="37c3e3a94eedc0c5314cc071c6e50667"><![CDATA[{
			if (userForm.Items.Any(i => i.ID == dataField))
			{
				return;
			}

			var formItem = new DnnFormTextBoxItem
			{
				ID = dataField,
				DataField = dataField,
				DataMember = dataMember,
				Visible = true,
				Required = required,
				TextMode = textMode
			};
			if (!String.IsNullOrEmpty(regexValidator))
			{
				formItem.ValidationExpression = regexValidator;
			}
			userForm.Items.Add(formItem);
		}]]></body>
          </codeblock>
        </method>
        <method name="AddPasswordConfirmField">
          <declaration><![CDATA[private void AddPasswordConfirmField(string dataField, string dataMember, bool required)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="429" sc="3" el="445" ec="4">DesktopModules\Admin\Security\Register.ascx.cs</location>
            <body hash="609c2c680b2484b9b4aa6835ac74db30"><![CDATA[{

			var formItem = new DnnFormTextBoxItem
			{
				ID = dataField,
				DataField = dataField,
				DataMember = dataMember,
				Visible = true,
				Required = required,
				TextMode = TextBoxMode.Password,
				TextBoxCssClass = ConfirmPasswordTextBoxCssClass,
				ClearContentInPasswordMode = true,
                MaxLength = 39
			};
			userForm.Items.Add(formItem);

		}]]></body>
          </codeblock>
        </method>
        <method name="AddPasswordStrengthField">
          <declaration><![CDATA[private void AddPasswordStrengthField(string dataField, string dataMember, bool required)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="398" sc="3" el="426" ec="4">DesktopModules\Admin\Security\Register.ascx.cs</location>
            <body hash="9a5d97e65c5b8e123f7e19183dc06c4c"><![CDATA[{
			DnnFormItemBase formItem;

			if (Host.EnableStrengthMeter)
			{
				formItem = new DnnFormPasswordItem
				{
					TextBoxCssClass = PasswordStrengthTextBoxCssClass,
					ContainerCssClass = "password-strength-container"
				};
			}
			else
			{
				formItem = new DnnFormTextBoxItem
				{
					TextMode = TextBoxMode.Password,
					TextBoxCssClass = PasswordStrengthTextBoxCssClass,
				};
			}

			formItem.ID = dataField;
			formItem.DataField = dataField;
			formItem.DataMember = dataMember;
			formItem.Visible = true;
			formItem.Required = required;

			userForm.Items.Add(formItem);

		}]]></body>
          </codeblock>
        </method>
        <method name="AddProperty">
          <declaration><![CDATA[private void AddProperty(ProfilePropertyDefinition property)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="448" sc="3" el="482" ec="4">DesktopModules\Admin\Security\Register.ascx.cs</location>
            <body hash="2a2f44e8ca747595f316306d7d31c43e"><![CDATA[{
			if (userForm.Items.Any(i => i.ID == property.PropertyName))
			{
				return;
			}

			var controller = new ListController();
			ListEntryInfo imageType = controller.GetListEntryInfo("DataType", "Image");
			if (property.DataType != imageType.EntryID)
			{
				DnnFormEditControlItem formItem = new DnnFormEditControlItem
				{
					ID = property.PropertyName,
					ResourceKey = String.Format("ProfileProperties_{0}", property.PropertyName),
					LocalResourceFile = "~/DesktopModules/Admin/Security/App_LocalResources/Profile.ascx.resx",
					ValidationMessageSuffix = ".Validation",
					ControlType = EditorInfo.GetEditor(property.DataType),
					DataMember = "Profile",
					DataField = property.PropertyName,
					Visible = property.Visible,
					Required = property.Required
				};
				//To check if the property has a deafult value
				if (!String.IsNullOrEmpty(property.DefaultValue))
				{
					formItem.Value = property.DefaultValue;
				}
				if (!String.IsNullOrEmpty(property.ValidationExpression))
				{
					formItem.ValidationExpression = property.ValidationExpression;
				}
				userForm.Items.Add(formItem);
			}

		}]]></body>
          </codeblock>
        </method>
        <method name="BindLoginControl">
          <declaration><![CDATA[private void BindLoginControl(AuthenticationLoginBase authLoginControl, AuthenticationInfo authSystem)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="485" sc="3" el="496" ec="4">DesktopModules\Admin\Security\Register.ascx.cs</location>
            <body hash="8607bc4657c69168e4e802dd0278ef7c"><![CDATA[{
			//set the control ID to the resource file name ( ie. controlname.ascx = controlname )
			//this is necessary for the Localization in PageBase
			authLoginControl.AuthenticationType = authSystem.AuthenticationType;
			authLoginControl.ID = Path.GetFileNameWithoutExtension(authSystem.LoginControlSrc) + "_" + authSystem.AuthenticationType;
			authLoginControl.LocalResourceFile = authLoginControl.TemplateSourceDirectory + "/" + Localization.LocalResourceDirectory + "/" +
												 Path.GetFileNameWithoutExtension(authSystem.LoginControlSrc);
			authLoginControl.RedirectURL = GetRedirectUrl();
			authLoginControl.ModuleConfiguration = ModuleConfiguration;

			authLoginControl.UserAuthenticated += UserAuthenticated;
		}]]></body>
          </codeblock>
        </method>
        <method name="CreateUser">
          <declaration><![CDATA[private void CreateUser()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="499" sc="3" el="545" ec="4">DesktopModules\Admin\Security\Register.ascx.cs</location>
            <body hash="3b512418d91592295ecaf0146a96a2f3"><![CDATA[{
			//Update DisplayName to conform to Format
			UpdateDisplayName();

			User.Membership.Approved = PortalSettings.UserRegistration == (int)Globals.PortalRegistrationType.PublicRegistration;
			var user = User;
			CreateStatus = UserController.CreateUser(ref user);

			DataCache.ClearPortalCache(PortalId, true);

			try
			{
				if (CreateStatus == UserCreateStatus.Success)
				{
					//hide the succesful captcha
					captchaRow.Visible = false;

					//Assocate alternate Login with User and proceed with Login
					if (!String.IsNullOrEmpty(AuthenticationType))
					{
						AuthenticationController.AddUserAuthentication(User.UserID, AuthenticationType, UserToken);
					}

					string strMessage = CompleteUserCreation(CreateStatus, user, true, IsRegister);

					if ((string.IsNullOrEmpty(strMessage)))
					{
						Response.Redirect(GetRedirectUrl(), true);
					}
					else
					{
						RegistrationForm.Visible = false;
						registerButton.Visible = false;
						cancelLink.Attributes["resourcekey"] = "Close";
						RegistrationForm.Parent.Controls.Add(cancelLink);
					}
				}
				else
				{
					AddLocalizedModuleMessage(UserController.GetUserCreateStatus(CreateStatus), ModuleMessage.ModuleMessageType.RedError, true);
				}
			}
			catch (Exception exc) //Module failed to load
			{
				Exceptions.ProcessModuleLoadException(this, exc);
			}
		}]]></body>
          </codeblock>
        </method>
        <method name="GetRedirectUrl">
          <declaration><![CDATA[private string GetRedirectUrl(bool checkSetting = true)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="735" sc="3" el="770" ec="4">DesktopModules\Admin\Security\Register.ascx.cs</location>
            <body hash="b2da93d7f75c0a35e9d899cccddbd763"><![CDATA[{
			var redirectUrl = "";
			var redirectAfterRegistration = PortalSettings.Registration.RedirectAfterRegistration;
			if (checkSetting && redirectAfterRegistration > 0) //redirect to after registration page
			{
				redirectUrl = Globals.NavigateURL(redirectAfterRegistration);
			}
			else
			{
				if (Request.QueryString["returnurl"] != null)
				{
					//return to the url passed to register
					redirectUrl = HttpUtility.UrlDecode(Request.QueryString["returnurl"]);

                    //clean the return url to avoid possible XSS attack.
                    redirectUrl = UrlUtils.ValidReturnUrl(redirectUrl);

                    if (redirectUrl.Contains("?returnurl"))
					{
						string baseURL = redirectUrl.Substring(0,
							redirectUrl.IndexOf("?returnurl", StringComparison.Ordinal));
						string returnURL =
							redirectUrl.Substring(redirectUrl.IndexOf("?returnurl", StringComparison.Ordinal) + 11);

						redirectUrl = string.Concat(baseURL, "?returnurl", HttpUtility.UrlEncode(returnURL));
					}
				}
				if (String.IsNullOrEmpty(redirectUrl))
				{
					//redirect to current page 
					redirectUrl = Globals.NavigateURL();
				}
			}

			return redirectUrl;
		}]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="127" sc="3" el="280" ec="4">DesktopModules\Admin\Security\Register.ascx.cs</location>
            <body hash="139ab9176ac5b950069b6c63219ba804"><![CDATA[{
			base.OnInit(e);

			JavaScript.RequestRegistration(CommonJs.DnnPlugins);

			ClientResourceManager.RegisterScript(Page, "~/Resources/Shared/scripts/dnn.jquery.extensions.js");
			ClientResourceManager.RegisterScript(Page, "~/Resources/Shared/scripts/dnn.jquery.tooltip.js");
			ClientResourceManager.RegisterScript(Page, "~/DesktopModules/Admin/Security/Scripts/dnn.PasswordComparer.js");

			if (PortalSettings.Registration.RegistrationFormType == 0)
			{
				//UserName
				if (!PortalSettings.Registration.UseEmailAsUserName)
				{

					AddField("Username", String.Empty, true,
							String.IsNullOrEmpty(PortalSettings.Registration.UserNameValidator) ? ExcludeTerms : PortalSettings.Registration.UserNameValidator,
							TextBoxMode.SingleLine);
				}

				//Password
				if (!PortalSettings.Registration.RandomPassword)
				{
					AddPasswordStrengthField("Password", "Membership", true);

					if (PortalSettings.Registration.RequirePasswordConfirm)
					{
						AddPasswordConfirmField("PasswordConfirm", "Membership", true);
					}
				}

				//Password Q&A
				if (MembershipProviderConfig.RequiresQuestionAndAnswer)
				{
					AddField("PasswordQuestion", "Membership", true, String.Empty, TextBoxMode.SingleLine);
					AddField("PasswordAnswer", "Membership", true, String.Empty, TextBoxMode.SingleLine);
				}

				//DisplayName
				if (String.IsNullOrEmpty(PortalSettings.Registration.DisplayNameFormat))
				{
					AddField("DisplayName", String.Empty, true, String.Empty, TextBoxMode.SingleLine);
				}
				else
				{
					AddField("FirstName", String.Empty, true, String.Empty, TextBoxMode.SingleLine);
					AddField("LastName", String.Empty, true, String.Empty, TextBoxMode.SingleLine);
				}

				//Email
				AddField("Email", String.Empty, true, PortalSettings.Registration.EmailValidator, TextBoxMode.SingleLine);

				if (PortalSettings.Registration.RequireValidProfile)
				{
					foreach (ProfilePropertyDefinition property in User.Profile.ProfileProperties)
					{
						if (property.Required)
						{
							AddProperty(property);
						}
					}
				}
			}
			else
			{
				var fields = PortalSettings.Registration.RegistrationFields.Split(',').ToList();
				//append question/answer field when RequiresQuestionAndAnswer is enabled in config.
				if (MembershipProviderConfig.RequiresQuestionAndAnswer)
				{
					if (!fields.Contains("PasswordQuestion"))
					{
						fields.Add("PasswordQuestion");
					}
					if (!fields.Contains("PasswordAnswer"))
					{
						fields.Add("PasswordAnswer");
					}
				}

				foreach (string field in fields)
				{
					var trimmedField = field.Trim();
					switch (trimmedField)
					{
						case "Username":
							AddField("Username", String.Empty, true, String.IsNullOrEmpty(PortalSettings.Registration.UserNameValidator)
																		? ExcludeTerms : PortalSettings.Registration.UserNameValidator,
																		TextBoxMode.SingleLine);
							break;
						case "Email":
							AddField("Email", String.Empty, true, PortalSettings.Registration.EmailValidator, TextBoxMode.SingleLine);
							break;
						case "Password":
							AddPasswordStrengthField(trimmedField, "Membership", true);
							break;
						case "PasswordConfirm":
							AddPasswordConfirmField(trimmedField, "Membership", true);
							break;
						case "PasswordQuestion":
						case "PasswordAnswer":
							AddField(trimmedField, "Membership", true, String.Empty, TextBoxMode.SingleLine);
							break;
						case "DisplayName":
							AddField(trimmedField, String.Empty, true, ExcludeTerms, TextBoxMode.SingleLine);
							break;
						default:
							ProfilePropertyDefinition property = User.Profile.GetProperty(trimmedField);
							if (property != null)
							{
								AddProperty(property);
							}
							break;
					}
				}
			}

			//Verify that the current user has access to this page
			if (PortalSettings.UserRegistration == (int)Globals.PortalRegistrationType.NoRegistration && Request.IsAuthenticated == false)
			{
				Response.Redirect(Globals.NavigateURL("Access Denied"), false);
				Context.ApplicationInstance.CompleteRequest();
			}

			cancelLink.NavigateUrl = GetRedirectUrl(false);
			registerButton.Click += registerButton_Click;

			if (PortalSettings.Registration.UseAuthProviders)
			{
				List<AuthenticationInfo> authSystems = AuthenticationController.GetEnabledAuthenticationServices();
				foreach (AuthenticationInfo authSystem in authSystems)
				{
					try
					{
						var authLoginControl = (AuthenticationLoginBase)LoadControl("~/" + authSystem.LoginControlSrc);
						if (authSystem.AuthenticationType != "DNN")
						{
							BindLoginControl(authLoginControl, authSystem);
							//Check if AuthSystem is Enabled
							if (authLoginControl.Enabled && authLoginControl.SupportsRegistration)
							{
								authLoginControl.Mode = AuthMode.Register;

								//Add Login Control to List
								_loginControls.Add(authLoginControl);
							}
						}
					}
					catch (Exception ex)
					{
						Exceptions.LogException(ex);
					}
				}
			}
		}]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="283" sc="3" el="340" ec="4">DesktopModules\Admin\Security\Register.ascx.cs</location>
            <body hash="39a73081d19ade372ca52b9abf29c662"><![CDATA[{
			base.OnLoad(e);

			if (Request.IsAuthenticated)
			{
				//if a Login Page has not been specified for the portal
				if (Globals.IsAdminControl())
				{
					//redirect to current page 
					Response.Redirect(Globals.NavigateURL(), true);
				}
				else //make module container invisible if user is not a page admin
				{
					if (!TabPermissionController.CanAdminPage())
					{
						ContainerControl.Visible = false;
					}
				}
			}

			if (PortalSettings.Registration.UseCaptcha)
			{
				captchaRow.Visible = true;
				ctlCaptcha.ErrorMessage = Localization.GetString("InvalidCaptcha", LocalResourceFile);
				ctlCaptcha.Text = Localization.GetString("CaptchaText", LocalResourceFile);
			}

			if (PortalSettings.Registration.UseAuthProviders && String.IsNullOrEmpty(AuthenticationType))
			{
				foreach (AuthenticationLoginBase authLoginControl in _loginControls)
				{
					socialLoginControls.Controls.Add(authLoginControl);
				}
			}

			//Display relevant message
			userHelpLabel.Text = Localization.GetSystemMessage(PortalSettings, "MESSAGE_REGISTRATION_INSTRUCTIONS");
			switch (PortalSettings.UserRegistration)
			{
				case (int)Globals.PortalRegistrationType.PrivateRegistration:
					userHelpLabel.Text += Localization.GetString("PrivateMembership", Localization.SharedResourceFile);
					break;
				case (int)Globals.PortalRegistrationType.PublicRegistration:
					userHelpLabel.Text += Localization.GetString("PublicMembership", Localization.SharedResourceFile);
					break;
				case (int)Globals.PortalRegistrationType.VerifiedRegistration:
					userHelpLabel.Text += Localization.GetString("VerifiedMembership", Localization.SharedResourceFile);
					break;
			}
			userHelpLabel.Text += Localization.GetString("Required", LocalResourceFile);
			userHelpLabel.Text += Localization.GetString("RegisterWarning", LocalResourceFile);

			userForm.DataSource = User;
			if (!Page.IsPostBack)
			{
				userForm.DataBind();
			}
		}]]></body>
          </codeblock>
        </method>
        <method name="OnPreRender">
          <declaration><![CDATA[protected override void OnPreRender(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="343" sc="3" el="368" ec="4">DesktopModules\Admin\Security\Register.ascx.cs</location>
            <body hash="7d1cb2b6b80b96afa94a4bf85436d3a1"><![CDATA[{
			base.OnPreRender(e);

			var confirmPasswordOptions = new DnnConfirmPasswordOptions()
			{
				FirstElementSelector = "." + PasswordStrengthTextBoxCssClass,
				SecondElementSelector = "." + ConfirmPasswordTextBoxCssClass,
				ContainerSelector = ".dnnRegistrationForm",
				UnmatchedCssClass = "unmatched",
				MatchedCssClass = "matched"
			};

			var optionsAsJsonString = Json.Serialize(confirmPasswordOptions);
			var script = string.Format("dnn.initializePasswordComparer({0});{1}", optionsAsJsonString, Environment.NewLine);

			if (ScriptManager.GetCurrent(Page) != null)
			{
				// respect MS AJAX
				ScriptManager.RegisterStartupScript(Page, GetType(), "ConfirmPassword", script, true);
			}
			else
			{
				Page.ClientScript.RegisterStartupScript(GetType(), "ConfirmPassword", script, true);
			}

		}]]></body>
          </codeblock>
        </method>
        <method name="registerButton_Click">
          <declaration><![CDATA[private void registerButton_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="773" sc="3" el="792" ec="4">DesktopModules\Admin\Security\Register.ascx.cs</location>
            <body hash="d2eeb67c3eb0f51f37f027adac4ff8b1"><![CDATA[{
			if ((PortalSettings.Registration.UseCaptcha && ctlCaptcha.IsValid) || !PortalSettings.Registration.UseCaptcha)
			{
				if (IsValid)
				{
                    if (PortalSettings.UserRegistration != (int)Globals.PortalRegistrationType.NoRegistration)
                    {
                        CreateUser();
                    }

				}
				else
				{
					if (CreateStatus != UserCreateStatus.AddUser)
					{
						AddLocalizedModuleMessage(UserController.GetUserCreateStatus(CreateStatus), ModuleMessage.ModuleMessageType.RedError, true);
					}
				}
			}
		}]]></body>
          </codeblock>
        </method>
        <method name="UpdateDisplayName">
          <declaration><![CDATA[private void UpdateDisplayName()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="548" sc="3" el="554" ec="4">DesktopModules\Admin\Security\Register.ascx.cs</location>
            <body hash="62612d9a11b9563ff749214ff0601cca"><![CDATA[{
			//Update DisplayName to conform to Format
			if (!string.IsNullOrEmpty(PortalSettings.Registration.DisplayNameFormat))
			{
				User.UpdateDisplayName(PortalSettings.Registration.DisplayNameFormat);
			}
		}]]></body>
          </codeblock>
        </method>
        <method name="UserAuthenticated">
          <declaration><![CDATA[private void UserAuthenticated(object sender, UserAuthenticatedEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="795" sc="3" el="840" ec="4">DesktopModules\Admin\Security\Register.ascx.cs</location>
            <body hash="a7048ff97fa6c222d33145718e0f20d6"><![CDATA[{
			NameValueCollection profileProperties = e.Profile;

			User.Username = e.UserToken;
			AuthenticationType = e.AuthenticationType;
			UserToken = e.UserToken;

			foreach (string key in profileProperties)
			{
				switch (key)
				{
					case "FirstName":
						User.FirstName = profileProperties[key];
						break;
					case "LastName":
						User.LastName = profileProperties[key];
						break;
					case "Email":
						User.Email = profileProperties[key];
						break;
					case "DisplayName":
						User.DisplayName = profileProperties[key];
						break;
					default:
						User.Profile.SetProfileProperty(key, profileProperties[key]);
						break;
				}
			}

			//Generate a random password for the user
			User.Membership.Password = UserController.GeneratePassword();

			if (!String.IsNullOrEmpty(User.Email))
			{
				CreateUser();
			}
			else
			{
				AddLocalizedModuleMessage(LocalizeString("NoEmail"), ModuleMessage.ModuleMessageType.RedError, true);
				foreach (DnnFormItemBase formItem in userForm.Items)
				{
					formItem.Visible = formItem.DataField == "Email";
				}
				userForm.DataBind();
			}
		}]]></body>
          </codeblock>
        </method>
        <method name="Validate">
          <declaration><![CDATA[private bool Validate()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="557" sc="3" el="732" ec="4">DesktopModules\Admin\Security\Register.ascx.cs</location>
            <body hash="f8f202bf8612f4a7001b1f385661db39"><![CDATA[{
		    if (!string.IsNullOrEmpty(gotcha.Value))
		    {
		        return false;
		    }

			CreateStatus = UserCreateStatus.AddUser;
			var portalSecurity = new PortalSecurity();

			//Check User Editor
			bool _IsValid = userForm.IsValid;

			if (PortalSettings.Registration.RegistrationFormType == 0)
			{
				//Update UserName
				if (PortalSettings.Registration.UseEmailAsUserName)
				{
					User.Username = User.Email;
					if (String.IsNullOrEmpty(User.DisplayName))
					{
						User.DisplayName = User.Email.Substring(0, User.Email.IndexOf("@", StringComparison.Ordinal));
					}
				}

				//Check Password is valid
				if (!PortalSettings.Registration.RandomPassword)
				{
					//Check Password is Valid
					if (CreateStatus == UserCreateStatus.AddUser && !UserController.ValidatePassword(User.Membership.Password))
					{
						CreateStatus = UserCreateStatus.InvalidPassword;
					}

					if (PortalSettings.Registration.RequirePasswordConfirm && String.IsNullOrEmpty(AuthenticationType))
					{
						if (User.Membership.Password != User.Membership.PasswordConfirm)
						{
							CreateStatus = UserCreateStatus.PasswordMismatch;
						}
					}
				}
				else
				{
					//Generate a random password for the user
					User.Membership.Password = UserController.GeneratePassword();
					User.Membership.PasswordConfirm = User.Membership.Password;
				}

			}
			else
			{
				//Set Username to Email
				if (String.IsNullOrEmpty(User.Username))
				{
					User.Username = User.Email;
				}

				//Set DisplayName
				if (String.IsNullOrEmpty(User.DisplayName))
				{
					User.DisplayName = String.IsNullOrEmpty(User.FirstName + " " + User.LastName)
										   ? User.Email.Substring(0, User.Email.IndexOf("@", StringComparison.Ordinal))
										   : User.FirstName + " " + User.LastName;
				}

				//Random Password
				if (String.IsNullOrEmpty(User.Membership.Password))
				{
					//Generate a random password for the user
					User.Membership.Password = UserController.GeneratePassword();
				}

				//Password Confirm
				if (!String.IsNullOrEmpty(User.Membership.PasswordConfirm))
				{
					if (User.Membership.Password != User.Membership.PasswordConfirm)
					{
						CreateStatus = UserCreateStatus.PasswordMismatch;
					}
				}
			}

			//Validate banned password
			var settings = new MembershipPasswordSettings(User.PortalID);

			if (settings.EnableBannedList)
			{
				var m = new MembershipPasswordController();
				if (m.FoundBannedPassword(User.Membership.Password) || User.Username == User.Membership.Password)
				{
					CreateStatus = UserCreateStatus.BannedPasswordUsed;
				}

			}
			//Validate Profanity
			if (PortalSettings.Registration.UseProfanityFilter)
			{
				if (!portalSecurity.ValidateInput(User.Username, PortalSecurity.FilterFlag.NoProfanity))
				{
					CreateStatus = UserCreateStatus.InvalidUserName;
				}
				if (!String.IsNullOrEmpty(User.DisplayName))
				{
					if (!portalSecurity.ValidateInput(User.DisplayName, PortalSecurity.FilterFlag.NoProfanity))
					{
						CreateStatus = UserCreateStatus.InvalidDisplayName;
					}
				}
			}

			//Validate Unique User Name
			UserInfo user = UserController.GetUserByName(PortalId, User.Username);
			if (user != null)
			{
				if (PortalSettings.Registration.UseEmailAsUserName)
				{
					CreateStatus = UserCreateStatus.DuplicateEmail;
				}
				else
				{
					CreateStatus = UserCreateStatus.DuplicateUserName;
					int i = 1;
					string userName = null;
					while (user != null)
					{
						userName = User.Username + "0" + i.ToString(CultureInfo.InvariantCulture);
						user = UserController.GetUserByName(PortalId, userName);
						i++;
					}
					User.Username = userName;
				}
			}

			//Validate Unique Display Name
			if (CreateStatus == UserCreateStatus.AddUser && PortalSettings.Registration.RequireUniqueDisplayName)
			{
				user = UserController.Instance.GetUserByDisplayname(PortalId, User.DisplayName);
				if (user != null)
				{
					CreateStatus = UserCreateStatus.DuplicateDisplayName;
					int i = 1;
					string displayName = null;
					while (user != null)
					{
						displayName = User.DisplayName + " 0" + i.ToString(CultureInfo.InvariantCulture);
						user = UserController.Instance.GetUserByDisplayname(PortalId, displayName);
						i++;
					}
					User.DisplayName = displayName;
				}
			}

			//Check Question/Answer
			if (CreateStatus == UserCreateStatus.AddUser && MembershipProviderConfig.RequiresQuestionAndAnswer)
			{
				if (string.IsNullOrEmpty(User.Membership.PasswordQuestion))
				{
					//Invalid Question
					CreateStatus = UserCreateStatus.InvalidQuestion;
				}
				if (CreateStatus == UserCreateStatus.AddUser)
				{
					if (string.IsNullOrEmpty(User.Membership.PasswordAnswer))
					{
						//Invalid Question
						CreateStatus = UserCreateStatus.InvalidAnswer;
					}
				}
			}

			if (CreateStatus != UserCreateStatus.AddUser)
			{
				_IsValid = false;
			}
			return _IsValid;
		}]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_loginControls">
          <declaration><![CDATA[private readonly List<AuthenticationLoginBase> _loginControls = new List<AuthenticationLoginBase>();]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="actionsRow">
          <declaration><![CDATA[protected HtmlGenericControl actionsRow;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cancelLink">
          <declaration><![CDATA[protected HyperLink cancelLink;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="captchaLabel">
          <declaration><![CDATA[protected LabelControl captchaLabel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="captchaRow">
          <declaration><![CDATA[protected HtmlGenericControl captchaRow;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ConfirmPasswordTextBoxCssClass">
          <declaration><![CDATA[protected const string ConfirmPasswordTextBoxCssClass = "password-confirm";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ctlCaptcha">
          <declaration><![CDATA[protected CaptchaControl ctlCaptcha;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="gotcha">
          <declaration><![CDATA[protected HtmlInputText gotcha;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="PasswordStrengthTextBoxCssClass">
          <declaration><![CDATA[protected const string PasswordStrengthTextBoxCssClass = "password-strength";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="registerButton">
          <declaration><![CDATA[protected LinkButton registerButton;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="RegistrationForm">
          <declaration><![CDATA[protected HtmlGenericControl RegistrationForm;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="socialLoginControls">
          <declaration><![CDATA[protected PlaceHolder socialLoginControls;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="userForm">
          <declaration><![CDATA[protected DnnFormEditor userForm;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="userHelpLabel">
          <declaration><![CDATA[protected Label userHelpLabel;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="AddUser">
          <declaration><![CDATA[protected override bool AddUser]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="120" sc="40" el="120" ec="44">DesktopModules\Admin\Security\Register.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
        </property>
        <property name="AuthenticationType">
          <declaration><![CDATA[protected string AuthenticationType]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="76" sc="4" el="78" ec="5">DesktopModules\Admin\Security\Register.ascx.cs</location>
            <body hash="6d86fa186423d34a95732823e3fbd037"><![CDATA[{
				return ViewState.GetValue("AuthenticationType", Null.NullString);
			}]]></body>
          </codeblock>
          <codeblock>
            <location sl="80" sc="4" el="82" ec="5">DesktopModules\Admin\Security\Register.ascx.cs</location>
            <body hash="404e66258322e79cffe3e2d50901f78e"><![CDATA[{
				ViewState.SetValue("AuthenticationType", value, Null.NullString);
			}]]></body>
          </codeblock>
        </property>
        <property name="CreateStatus">
          <declaration><![CDATA[protected UserCreateStatus CreateStatus]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="85" sc="45" el="85" ec="49">DesktopModules\Admin\Security\Register.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="85" sc="50" el="85" ec="54">DesktopModules\Admin\Security\Register.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ExcludeTerms">
          <declaration><![CDATA[protected string ExcludeTerms]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="90" sc="4" el="97" ec="5">DesktopModules\Admin\Security\Register.ascx.cs</location>
            <body hash="ff6095f85f410906104d556c851464ae"><![CDATA[{
				string regex = String.Empty;
				if (!String.IsNullOrEmpty(PortalSettings.Registration.ExcludeTerms))
				{
					regex = @"^(?:(?!" + PortalSettings.Registration.ExcludeTerms.Replace(" ", "").Replace(",", "|") + @").)*$\r?\n?";
				}
				return regex;
			}]]></body>
          </codeblock>
        </property>
        <property name="IsValid">
          <declaration><![CDATA[protected bool IsValid]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="103" sc="4" el="105" ec="5">DesktopModules\Admin\Security\Register.ascx.cs</location>
            <body hash="0980b094a3ea1a07057f1a242bab99b4"><![CDATA[{
				return Validate();
			}]]></body>
          </codeblock>
        </property>
        <property name="UserToken">
          <declaration><![CDATA[protected string UserToken]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="111" sc="4" el="113" ec="5">DesktopModules\Admin\Security\Register.ascx.cs</location>
            <body hash="96fcbe98b28ad26933a0d159a69dc7d3"><![CDATA[{
				return ViewState.GetValue("UserToken", string.Empty);
			}]]></body>
          </codeblock>
          <codeblock>
            <location sl="115" sc="4" el="117" ec="5">DesktopModules\Admin\Security\Register.ascx.cs</location>
            <body hash="95ba11348475e7cd939e181531719854"><![CDATA[{
				ViewState.SetValue("UserToken", value, string.Empty);
			}]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="User">
      <declaration><![CDATA[public class User : UserUserControlBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public User()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
        <constructor name=".cctor">
          <declaration><![CDATA[static User()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="65" sc="6" el="65" ec="91">DesktopModules\Admin\Security\User.ascx.cs</location>
            <body hash="5fece6ca1bcad312546afcf1ebe9ad3a"><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof (User))]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="CanUpdateUsername">
          <declaration><![CDATA[private bool CanUpdateUsername()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="140" sc="9" el="169" ec="10">DesktopModules\Admin\Security\User.ascx.cs</location>
            <body hash="20829213f527b61a28d257175899b89d"><![CDATA[{
            //do not allow for non-logged in users
            if (Request.IsAuthenticated==false || AddUser)
            {
                return false;
            }

            //can only update username if a host/admin and account being managed is not a superuser
            if (UserController.Instance.GetCurrentUserInfo().IsSuperUser)
            {
                //only allow updates for non-superuser accounts
                if (User.IsSuperUser==false)
                {
                    return true;
                }
            }

            //if an admin, check if the user is only within this portal
            if (UserController.Instance.GetCurrentUserInfo().IsInRole(PortalSettings.AdministratorRoleName))
            {
                //only allow updates for non-superuser accounts
                if (User.IsSuperUser)
                {
                    return false;
                }
                if (PortalController.GetPortalsByUser(User.UserID).Count == 1) return true;
            }

            return false;
        }]]></body>
          </codeblock>
        </method>
        <method name="cmdDelete_Click">
          <declaration><![CDATA[private void cmdDelete_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="507" sc="9" el="523" ec="10">DesktopModules\Admin\Security\User.ascx.cs</location>
            <body hash="0398f734925d53f21647230665a4610e"><![CDATA[{
            if (IsUserOrAdmin == false)
            {
                return;
            }
            string name = User.Username;
            int id = UserId;
            UserInfo user = User;
            if (UserController.DeleteUser(ref user, true, false))
            {
                OnUserDeleted(new UserDeletedEventArgs(id, name));
            }
            else
            {
                OnUserDeleteError(new UserUpdateErrorArgs(id, name, "UserDeleteError"));
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="cmdRemove_Click">
          <declaration><![CDATA[private void cmdRemove_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="546" sc="9" el="562" ec="10">DesktopModules\Admin\Security\User.ascx.cs</location>
            <body hash="87800055d51feccda7df6ad509587587"><![CDATA[{
            if (IsUserOrAdmin == false)
            {
                return;
            }
            var name = User.Username;
            var id = UserId;

            if (UserController.RemoveUser(User))
            {
                OnUserRemoved(new UserRemovedEventArgs(id, name));
            }
            else
            {
                OnUserRemoveError(new UserUpdateErrorArgs(id, name, "UserRemoveError"));
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="cmdRestore_Click">
          <declaration><![CDATA[private void cmdRestore_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="526" sc="9" el="543" ec="10">DesktopModules\Admin\Security\User.ascx.cs</location>
            <body hash="cb26c95b2b9bf0ea5dc87ae498104925"><![CDATA[{
            if (IsUserOrAdmin == false)
            {
                return;
            }
            var name = User.Username;
            var id = UserId;

            var userInfo = User;
            if (UserController.RestoreUser(ref userInfo))
            {
                OnUserRestored(new UserRestoredEventArgs(id, name));
            }
            else
            {
                OnUserRestoreError(new UserUpdateErrorArgs(id, name, "UserRestoreError"));
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="cmdUpdate_Click">
          <declaration><![CDATA[private void cmdUpdate_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="569" sc="9" el="633" ec="10">DesktopModules\Admin\Security\User.ascx.cs</location>
            <body hash="ae4c0240464aa168ce79e42c2b47c61a"><![CDATA[{
            if (IsUserOrAdmin == false)
            {
                return;
            }

            if (AddUser)
            {
                if (IsValid)
                {
                    CreateUser();
                    DataCache.ClearPortalCache(PortalId, true);
                }
            }
            else
            {
                if (userForm.IsValid && (User != null))
                {
                    if (User.UserID == PortalSettings.AdministratorId)
                    {
						//Clear the Portal Cache
                        DataCache.ClearPortalCache(UserPortalID, true);
                    }
                    try
                    {
						//Update DisplayName to conform to Format
                        UpdateDisplayName();
                        //either update the username or update the user details

                        if (CanUpdateUsername() && !PortalSettings.Registration.UseEmailAsUserName)
                        {
                            UserController.ChangeUsername(User.UserID, renameUserName.Value.ToString());
                        }

                        //DNN-5874 Check if unique display name is required
                        if (PortalSettings.Registration.RequireUniqueDisplayName)
                        {
                            var usersWithSameDisplayName = (System.Collections.Generic.List<UserInfo>)MembershipProvider.Instance().GetUsersBasicSearch(PortalId, 0, 2, "DisplayName", true, "DisplayName", User.DisplayName);
                            if (usersWithSameDisplayName.Any(user => user.UserID != User.UserID))
                            {
                                UI.Skins.Skin.AddModuleMessage(this, LocalizeString("DisplayNameNotUnique"), UI.Skins.Controls.ModuleMessage.ModuleMessageType.RedError);
                                return;
                            }
                        }

                        UserController.UpdateUser(UserPortalID, User);

                        if (PortalSettings.Registration.UseEmailAsUserName && (User.Username.ToLower() != User.Email.ToLower()))
                        {
                            UserController.ChangeUsername(User.UserID, User.Email);
                        }

                        OnUserUpdated(EventArgs.Empty);
                        OnUserUpdateCompleted(EventArgs.Empty);
                    }
                    catch (Exception exc)
                    {
                        Logger.Error(exc);

                        var args = new UserUpdateErrorArgs(User.UserID, User.Username, "EmailError");
                        OnUserUpdateError(args);
                    }
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="CreateUser">
          <declaration><![CDATA[public void CreateUser()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="253" sc="9" el="283" ec="10">DesktopModules\Admin\Security\User.ascx.cs</location>
            <body hash="4b61e49d76b73837c613cd832416696c"><![CDATA[{
            //Update DisplayName to conform to Format
            UpdateDisplayName();

            if (IsRegister)
            {
                User.Membership.Approved = PortalSettings.UserRegistration == (int) Globals.PortalRegistrationType.PublicRegistration;
            }
            else
            {
                //Set the Approved status from the value in the Authorized checkbox
                User.Membership.Approved = chkAuthorize.Checked;
            }
            var user = User;

            // make sure username is set in UseEmailAsUserName" mode
            if (PortalController.GetPortalSettingAsBoolean("Registration_UseEmailAsUserName", PortalId, false))
            {
                user.Username = User.Email;
                User.Username = User.Email;
            }

            var createStatus = UserController.CreateUser(ref user);

            var args = (createStatus == UserCreateStatus.Success)
                                            ? new UserCreatedEventArgs(User) {Notify = chkNotify.Checked} 
                                            : new UserCreatedEventArgs(null);
            args.CreateStatus = createStatus;
            OnUserCreated(args);
            OnUserCreateCompleted(args);
        }]]></body>
          </codeblock>
        </method>
        <method name="DataBind">
          <declaration><![CDATA[public override void DataBind()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="290" sc="9" el="421" ec="10">DesktopModules\Admin\Security\User.ascx.cs</location>
            <body hash="65879af1f32fbf3800272bc2246582d5"><![CDATA[{
            if (Page.IsPostBack == false)
            {
                string confirmString = Localization.GetString("DeleteItem");
                if (IsUser)
                {
                    confirmString = Localization.GetString("ConfirmUnRegister", LocalResourceFile);
                }
                ClientAPI.AddButtonConfirm(cmdDelete, confirmString);
                chkRandom.Checked = false;
            }

            cmdDelete.Visible = false;
            cmdRemove.Visible = false;
            cmdRestore.Visible = false;
            if (!AddUser)
            {
                var deletePermitted = (User.UserID != PortalSettings.AdministratorId) && !(IsUser && User.IsSuperUser);
                if ((deletePermitted))
                {
                    if ((User.IsDeleted))
                    {
                        cmdRemove.Visible = true;
                        cmdRestore.Visible = true;
                    }
                    else
                    {
                        cmdDelete.Visible = true;
                    }
                }
            }

            cmdUpdate.Text = Localization.GetString(IsUser ? "Register" : "CreateUser", LocalResourceFile);
            cmdDelete.Text = Localization.GetString(IsUser ? "UnRegister" : "Delete", LocalResourceFile);
            if (AddUser)
            {
                pnlAddUser.Visible = true;
                if (IsRegister)
                {
                    AuthorizeNotify.Visible = false;
                    randomRow.Visible = false;
                    if (ShowPassword)
                    {
                        questionRow.Visible = MembershipProviderConfig.RequiresQuestionAndAnswer;
                        answerRow.Visible = MembershipProviderConfig.RequiresQuestionAndAnswer;
                        lblPasswordHelp.Text = Localization.GetString("PasswordHelpUser", LocalResourceFile);
                    }
                }
                else
                {
                    lblPasswordHelp.Text = Localization.GetString("PasswordHelpAdmin", LocalResourceFile);
                }
                txtConfirm.Attributes.Add("value", txtConfirm.Text);
                txtPassword.Attributes.Add("value", txtPassword.Text);
            }


            bool disableUsername = PortalController.GetPortalSettingAsBoolean("Registration_UseEmailAsUserName", PortalId, false);

            //only show username row once UseEmailAsUserName is disabled in site settings
            if (disableUsername)
            {
                userNameReadOnly.Visible = false;
                userName.Visible = false;
            }
            else
            {
                userNameReadOnly.Visible = !AddUser;
                userName.Visible = AddUser;
            }

            if (CanUpdateUsername() && !disableUsername)
            {
               
                renameUserName.Visible = true;
                
                userName.Visible = false;
                userNameReadOnly.Visible = false;

                ArrayList portals = PortalController.GetPortalsByUser(User.UserID);
                if (portals.Count>1)
                {
                    numSites.Text=String.Format(Localization.GetString("UpdateUserName", LocalResourceFile), portals.Count.ToString());
                    cboSites.Visible = true;
                    cboSites.DataSource = portals;
                    cboSites.DataTextField = "PortalName";
                    cboSites.DataBind();

                    renameUserPortals.Visible = true;
                }
            }

			if (!string.IsNullOrEmpty(PortalSettings.Registration.UserNameValidator))
            {
				userName.ValidationExpression = PortalSettings.Registration.UserNameValidator;
            }

			if (!string.IsNullOrEmpty(PortalSettings.Registration.EmailValidator))
            {
				email.ValidationExpression = PortalSettings.Registration.EmailValidator;
            }

			if (!string.IsNullOrEmpty(PortalSettings.Registration.DisplayNameFormat))
            {
                if (AddUser)
                {
                    displayNameReadOnly.Visible = false;
                    displayName.Visible = false;
                }
                else
                {
                    displayNameReadOnly.Visible = true;
                    displayName.Visible = false;
                }
                firstName.Visible = true;
                lastName.Visible = true;
            }
            else
            {
                displayNameReadOnly.Visible = false;
                displayName.Visible = true;
                firstName.Visible = false;
                lastName.Visible = false;
            }

            userForm.DataSource = User;
			if (!Page.IsPostBack)
			{
				userForm.DataBind();
			    renameUserName.Value = User.Username;
			}
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="434" sc="9" el="440" ec="10">DesktopModules\Admin\Security\User.ascx.cs</location>
            <body hash="17c7cf470fae61db25293849bfc8dbe9"><![CDATA[{
            base.OnLoad(e);
            cmdDelete.Click += cmdDelete_Click;
            cmdUpdate.Click += cmdUpdate_Click;
            cmdRemove.Click += cmdRemove_Click;
            cmdRestore.Click += cmdRestore_Click;
        }]]></body>
          </codeblock>
        </method>
        <method name="OnPreRender">
          <declaration><![CDATA[protected override void OnPreRender(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="443" sc="9" el="499" ec="10">DesktopModules\Admin\Security\User.ascx.cs</location>
            <body hash="a6fe939e88d20b235787dc0338acbd5e"><![CDATA[{
            ClientResourceManager.RegisterScript(Page, "~/Resources/Shared/scripts/dnn.jquery.extensions.js");
            ClientResourceManager.RegisterScript(Page, "~/Resources/Shared/scripts/dnn.jquery.tooltip.js");
            ClientResourceManager.RegisterScript(Page, "~/Resources/Shared/scripts/dnn.PasswordStrength.js");
            ClientResourceManager.RegisterScript(Page, "~/DesktopModules/Admin/Security/Scripts/dnn.PasswordComparer.js");

			ClientResourceManager.RegisterStyleSheet(Page, "~/Resources/Shared/stylesheets/dnn.PasswordStrength.css", FileOrder.Css.ResourceCss);

			JavaScript.RequestRegistration(CommonJs.DnnPlugins);

            base.OnPreRender(e);


			if (Host.EnableStrengthMeter)
			{
				passwordContainer.CssClass = "password-strength-container";
				txtPassword.CssClass = "password-strength";
				txtConfirm.CssClass = string.Format("{0} checkStength", txtConfirm.CssClass);
				
				var options = new DnnPaswordStrengthOptions();
				var optionsAsJsonString = Json.Serialize(options);
				var passwordScript = string.Format("dnn.initializePasswordStrength('.{0}', {1});{2}",
					"password-strength", optionsAsJsonString, Environment.NewLine);

				if (ScriptManager.GetCurrent(Page) != null)
				{
					// respect MS AJAX
					ScriptManager.RegisterStartupScript(Page, GetType(), "PasswordStrength", passwordScript, true);
				}
				else
				{
					Page.ClientScript.RegisterStartupScript(GetType(), "PasswordStrength", passwordScript, true);
				}
			}

			var confirmPasswordOptions = new DnnConfirmPasswordOptions()
			{
				FirstElementSelector = "#" + passwordContainer.ClientID + " input[type=password]",
				SecondElementSelector = ".password-confirm",
				ContainerSelector = ".dnnFormPassword",
				UnmatchedCssClass = "unmatched",
				MatchedCssClass = "matched"
			};

			var confirmOptionsAsJsonString = Json.Serialize(confirmPasswordOptions);
			var confirmScript = string.Format("dnn.initializePasswordComparer({0});{1}", confirmOptionsAsJsonString, Environment.NewLine);

			if (ScriptManager.GetCurrent(Page) != null)
			{
				// respect MS AJAX
				ScriptManager.RegisterStartupScript(Page, GetType(), "ConfirmPassword", confirmScript, true);
			}
			else
			{
				Page.ClientScript.RegisterStartupScript(GetType(), "ConfirmPassword", confirmScript, true);
			}
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateDisplayName">
          <declaration><![CDATA[private void UpdateDisplayName()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="172" sc="9" el="178" ec="10">DesktopModules\Admin\Security\User.ascx.cs</location>
            <body hash="c1386c7dd30596b88795acf35c516ccc"><![CDATA[{
			//Update DisplayName to conform to Format
			if (!string.IsNullOrEmpty(PortalSettings.Registration.DisplayNameFormat))
            {
				User.UpdateDisplayName(PortalSettings.Registration.DisplayNameFormat);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="Validate">
          <declaration><![CDATA[private bool Validate()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="185" sc="9" el="242" ec="10">DesktopModules\Admin\Security\User.ascx.cs</location>
            <body hash="c652547e2e0a11e5950af53bcaa0a230"><![CDATA[{
            //Check User Editor
            bool _IsValid = userForm.IsValid;

            //Check Password is valid
            if (AddUser && ShowPassword)
            {
                CreateStatus = UserCreateStatus.AddUser;
                if (!chkRandom.Checked)
                {					
					//1. Check Password is Valid
                    if (CreateStatus == UserCreateStatus.AddUser && !UserController.ValidatePassword(txtPassword.Text))
                    {
                        CreateStatus = UserCreateStatus.InvalidPassword;
                    }
                    if (CreateStatus == UserCreateStatus.AddUser)
                    {
                        User.Membership.Password = txtPassword.Text;
                    }
                }
                else
                {
					//Generate a random password for the user
                    User.Membership.Password = UserController.GeneratePassword();
                }
				
                //Check Question/Answer
                if (CreateStatus == UserCreateStatus.AddUser && MembershipProviderConfig.RequiresQuestionAndAnswer)
                {
                    if (string.IsNullOrEmpty(txtQuestion.Text))
                    {
						//Invalid Question
                        CreateStatus = UserCreateStatus.InvalidQuestion;
                    }
                    else
                    {
                        User.Membership.PasswordQuestion = txtQuestion.Text;
                    }
                    if (CreateStatus == UserCreateStatus.AddUser)
                    {
                        if (string.IsNullOrEmpty(txtAnswer.Text))
                        {
							//Invalid Question
                            CreateStatus = UserCreateStatus.InvalidAnswer;
                        }
                        else
                        {
                            User.Membership.PasswordAnswer = txtAnswer.Text;
                        }
                    }
                }
                if (CreateStatus != UserCreateStatus.AddUser)
                {
                    _IsValid = false;
                }
            }
            return _IsValid;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="actionsRow">
          <declaration><![CDATA[protected HtmlGenericControl actionsRow;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="answerRow">
          <declaration><![CDATA[protected HtmlGenericControl answerRow;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="AuthorizeNotify">
          <declaration><![CDATA[protected HtmlGenericControl AuthorizeNotify;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cboSites">
          <declaration><![CDATA[protected DnnComboBox cboSites;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkAuthorize">
          <declaration><![CDATA[protected CheckBox chkAuthorize;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkNotify">
          <declaration><![CDATA[protected CheckBox chkNotify;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkRandom">
          <declaration><![CDATA[protected CheckBox chkRandom;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdDelete">
          <declaration><![CDATA[protected LinkButton cmdDelete;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdRemove">
          <declaration><![CDATA[protected LinkButton cmdRemove;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdRestore">
          <declaration><![CDATA[protected LinkButton cmdRestore;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdUpdate">
          <declaration><![CDATA[protected LinkButton cmdUpdate;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ComparePasswordsValidator">
          <declaration><![CDATA[protected CompareValidator ComparePasswordsValidator;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="displayName">
          <declaration><![CDATA[protected DnnFormTextBoxItem displayName;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="displayNameReadOnly">
          <declaration><![CDATA[protected DnnFormLiteralItem displayNameReadOnly;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="email">
          <declaration><![CDATA[protected DnnFormTextBoxItem email;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="firstName">
          <declaration><![CDATA[protected DnnFormTextBoxItem firstName;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lastName">
          <declaration><![CDATA[protected DnnFormTextBoxItem lastName;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblPasswordHelp">
          <declaration><![CDATA[protected Label lblPasswordHelp;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Logger">
          <declaration><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof(User));]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="numSites">
          <declaration><![CDATA[protected LabelControl numSites;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Password">
          <declaration><![CDATA[protected HtmlGenericControl Password;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="passwordContainer">
          <declaration><![CDATA[protected Panel passwordContainer;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plAnswer">
          <declaration><![CDATA[protected LabelControl plAnswer;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plAuthorize">
          <declaration><![CDATA[protected LabelControl plAuthorize;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plConfirm">
          <declaration><![CDATA[protected LabelControl plConfirm;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plNotify">
          <declaration><![CDATA[protected LabelControl plNotify;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plPassword">
          <declaration><![CDATA[protected LabelControl plPassword;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plQuestion">
          <declaration><![CDATA[protected LabelControl plQuestion;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plRandom">
          <declaration><![CDATA[protected LabelControl plRandom;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="pnlAddUser">
          <declaration><![CDATA[protected Panel pnlAddUser;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="questionRow">
          <declaration><![CDATA[protected HtmlGenericControl questionRow;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="randomRow">
          <declaration><![CDATA[protected HtmlGenericControl randomRow;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="renameUserName">
          <declaration><![CDATA[protected DnnFormTextBoxItem renameUserName;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="renameUserPortals">
          <declaration><![CDATA[protected HtmlGenericControl renameUserPortals;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtAnswer">
          <declaration><![CDATA[protected TextBox txtAnswer;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtConfirm">
          <declaration><![CDATA[protected TextBox txtConfirm;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtPassword">
          <declaration><![CDATA[protected TextBox txtPassword;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtQuestion">
          <declaration><![CDATA[protected TextBox txtQuestion;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="userForm">
          <declaration><![CDATA[protected DnnFormEditor userForm;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="userName">
          <declaration><![CDATA[protected DnnFormTextBoxItem userName;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="userNameReadOnly">
          <declaration><![CDATA[protected DnnFormLiteralItem userNameReadOnly;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="CreateStatus">
          <declaration><![CDATA[public UserCreateStatus CreateStatus]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="68" sc="48" el="68" ec="52">DesktopModules\Admin\Security\User.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="68" sc="53" el="68" ec="57">DesktopModules\Admin\Security\User.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="CssClass">
          <declaration><![CDATA[public string CssClass]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="120" sc="7" el="122" ec="8">DesktopModules\Admin\Security\User.ascx.cs</location>
            <body hash="49ec61fea83e1cb1f7da891552978b3a"><![CDATA[{
				return pnlAddUser.CssClass;
    		}]]></body>
          </codeblock>
          <codeblock>
            <location sl="124" sc="4" el="127" ec="5">DesktopModules\Admin\Security\User.ascx.cs</location>
            <body hash="c2d1ef228184873611ecbe6d0ca4299f"><![CDATA[{
				userForm.CssClass = string.IsNullOrEmpty(userForm.CssClass) ? value : string.Format("{0} {1}", userForm.CssClass, value);
				pnlAddUser.CssClass = string.IsNullOrEmpty(pnlAddUser.CssClass) ? value : string.Format("{0} {1}", pnlAddUser.CssClass, value); ;
			}]]></body>
          </codeblock>
        </property>
        <property name="IsValid">
          <declaration><![CDATA[public bool IsValid]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="77" sc="13" el="79" ec="14">DesktopModules\Admin\Security\User.ascx.cs</location>
            <body hash="fa08922e8a1fa0d99601f4c00ee93381"><![CDATA[{
                return Validate();
            }]]></body>
          </codeblock>
        </property>
        <property name="ShowPassword">
          <declaration><![CDATA[public bool ShowPassword]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="89" sc="13" el="91" ec="14">DesktopModules\Admin\Security\User.ascx.cs</location>
            <body hash="efa91da58d4ad9705d55851004d03102"><![CDATA[{
                return Password.Visible;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="93" sc="13" el="95" ec="14">DesktopModules\Admin\Security\User.ascx.cs</location>
            <body hash="f40a176f1616726ca601d9423cd3b489"><![CDATA[{
                Password.Visible = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="ShowUpdate">
          <declaration><![CDATA[public bool ShowUpdate]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="105" sc="13" el="107" ec="14">DesktopModules\Admin\Security\User.ascx.cs</location>
            <body hash="34fb05653c52198c2daa314f4768a1ba"><![CDATA[{
                return actionsRow.Visible;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="109" sc="13" el="111" ec="14">DesktopModules\Admin\Security\User.ascx.cs</location>
            <body hash="a0512fc3e1223b76f4fe3c6ad017b843"><![CDATA[{
                actionsRow.Visible = value;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="Users">
      <declaration><![CDATA[public class Users : UserUserControlBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public Users()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="ViewProfile">
      <declaration><![CDATA[public class ViewProfile : UserModuleBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public ViewProfile()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="39" sc="9" el="49" ec="10">admin\Users\ViewProfile.ascx.cs</location>
            <body hash="b097e1dd0423cd59d105913c0c8b6e50"><![CDATA[{
            base.OnInit(e);

            UserId = Null.NullInteger;
            if (Context.Request.QueryString["userticket"] != null)
            {
                UserId = Int32.Parse(UrlUtils.DecryptParameter(Context.Request.QueryString["userticket"]));
            }
            ctlProfile.ID = "Profile";
            ctlProfile.UserId = UserId;
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="52" sc="9" el="71" ec="10">admin\Users\ViewProfile.ascx.cs</location>
            <body hash="b01938623f3cca7060656b3ab919ca0a"><![CDATA[{
            base.OnLoad(e);
            try
            {
                if (ctlProfile.UserProfile == null)
                {
                    lblNoProperties.Visible = true;
                    return;
                }
                ctlProfile.DataBind();
                if (ctlProfile.UserProfile.ProfileProperties.Cast<ProfilePropertyDefinition>().Count(profProperty => profProperty.Visible) == 0)
                {
                    lblNoProperties.Visible = true;
                }
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="ctlProfile">
          <declaration><![CDATA[protected DNNProfile ctlProfile;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblNoProperties">
          <declaration><![CDATA[protected Label lblNoProperties;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="ViewProfileSettings">
      <declaration><![CDATA[public class ViewProfileSettings : ModuleSettingsBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public ViewProfileSettings()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="cmdLoadDefault_Click">
          <declaration><![CDATA[protected void cmdLoadDefault_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="88" sc="9" el="90" ec="10">DesktopModules\Admin\ViewProfile\Settings.ascx.cs</location>
            <body hash="fd462e82cba212982705dd40998eefec"><![CDATA[{
            txtTemplate.Text = Localization.GetString("DefaultTemplate", LocalResourceFile);
        }]]></body>
          </codeblock>
        </method>
        <method name="LoadSettings">
          <declaration><![CDATA[public override void LoadSettings()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="40" sc="9" el="63" ec="10">DesktopModules\Admin\ViewProfile\Settings.ascx.cs</location>
            <body hash="55429f4eee4c5f1ff60117e27cabb02b"><![CDATA[{
            try
            {
                ClientAPI.AddButtonConfirm(cmdLoadDefault, Localization.GetString("LoadDefault.Confirm", LocalResourceFile));
                cmdLoadDefault.ToolTip = Localization.GetString("LoadDefault.Help", LocalResourceFile);

                if (!Page.IsPostBack)
                {
                    if (!string.IsNullOrEmpty((string) TabModuleSettings["ProfileTemplate"]))
                    {
                        txtTemplate.Text = (string) TabModuleSettings["ProfileTemplate"];
                    }
                    if (Settings.ContainsKey("IncludeButton"))
                    {
                        IncludeButton.Checked = Convert.ToBoolean(Settings["IncludeButton"]);
                    }
                }
            }
            catch (Exception exc)
            {
                //Module failed to load
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="66" sc="9" el="69" ec="10">DesktopModules\Admin\ViewProfile\Settings.ascx.cs</location>
            <body hash="f729a07cbfcfd463ea669a6966aa9ac4"><![CDATA[{
            base.OnLoad(e);
            cmdLoadDefault.Click += cmdLoadDefault_Click;
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateSettings">
          <declaration><![CDATA[public override void UpdateSettings()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="72" sc="9" el="83" ec="10">DesktopModules\Admin\ViewProfile\Settings.ascx.cs</location>
            <body hash="05bee6f7c967f7d947a3c1b176c1fd72"><![CDATA[{
            try
            {
                ModuleController.Instance.UpdateTabModuleSetting(TabModuleId, "ProfileTemplate", txtTemplate.Text);
                ModuleController.Instance.UpdateTabModuleSetting(TabModuleId, "IncludeButton", IncludeButton.Checked.ToString(CultureInfo.InvariantCulture));
            }
            catch (Exception exc)
            {
                //Module failed to load
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="cmdLoadDefault">
          <declaration><![CDATA[protected LinkButton cmdLoadDefault;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="IncludeButton">
          <declaration><![CDATA[protected CheckBox IncludeButton;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblIncludeButton">
          <declaration><![CDATA[protected LabelControl lblIncludeButton;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plTemplate">
          <declaration><![CDATA[protected LabelControl plTemplate;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtTemplate">
          <declaration><![CDATA[protected TextBox txtTemplate;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="DotNetNuke.Modules.Admin.ViewProfile">
    <class name="ViewProfile">
      <declaration><![CDATA[public class ViewProfile : ProfileModuleUserControlBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public ViewProfile()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="GetRedirectUrl">
          <declaration><![CDATA[private string GetRedirectUrl()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="235" sc="3" el="251" ec="4">DesktopModules\Admin\ViewProfile\ViewProfile.ascx.cs</location>
            <body hash="ea430672d14c8e573fd7e1d91166a0c3"><![CDATA[{
			//redirect user to default page if not specific the home tab, do this action to prevent loop redirect.
			var homeTabId = ModuleContext.PortalSettings.HomeTabId;
			string redirectUrl;

			if (homeTabId > Null.NullInteger)
			{
				redirectUrl = Globals.NavigateURL(homeTabId);
			}
			else
			{
				redirectUrl = Globals.GetPortalDomainName(PortalSettings.Current.PortalAlias.HTTPAlias, Request, true) +
							  "/" + Globals.glbDefaultPage;
			}

			return redirectUrl;
		}]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="77" sc="9" el="91" ec="10">DesktopModules\Admin\ViewProfile\ViewProfile.ascx.cs</location>
            <body hash="971e023e0251152232ae91c3a21c0af8"><![CDATA[{
            base.OnInit(e);

			//throw 404 so that deleted profile is not reindexed
			if(ProfileUser == null || ProfileUser.IsDeleted)
			{
                UrlUtils.Handle404Exception(Response, PortalSettings.Current);
            }

            ProcessQuerystring();

            JavaScript.RequestRegistration(CommonJs.jQuery);
            JavaScript.RequestRegistration(CommonJs.jQueryMigrate);
            JavaScript.RequestRegistration(CommonJs.Knockout);
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="99" sc="3" el="228" ec="4">DesktopModules\Admin\ViewProfile\ViewProfile.ascx.cs</location>
            <body hash="3729af33962e2c29277b7b02ad1daa2e"><![CDATA[{
			base.OnLoad(e);

			try
			{
                if(Null.IsNull(ProfileUserId))
                {
                    Visible = false;
                    return;
                }

                var template = Convert.ToString(ModuleContext.Settings["ProfileTemplate"]);
                if(string.IsNullOrEmpty(template))
                {
                    template = Localization.GetString("DefaultTemplate", LocalResourceFile);
                }
			    var editUrl = Globals.NavigateURL(ModuleContext.PortalSettings.ActiveTab.TabID, "Profile", "userId=" + ProfileUserId, "pageno=1");
                var profileUrl = Globals.NavigateURL(ModuleContext.PortalSettings.ActiveTab.TabID, "Profile", "userId=" + ProfileUserId, "pageno=2");

                if (template.Contains("[BUTTON:EDITPROFILE]"))
                {
                    if (IncludeButton && IsUser)
                    {
                        string editHyperLink = String.Format("<a href=\"{0}\" class=\"dnnPrimaryAction\">{1}</a>", profileUrl, LocalizeString("Edit"));
                        template = template.Replace("[BUTTON:EDITPROFILE]", editHyperLink);
                    }
                    buttonPanel.Visible = false;
                }
                else
                {
                    buttonPanel.Visible = IncludeButton;
                    editLink.NavigateUrl = editUrl;
                }
                if (template.Contains("[HYPERLINK:EDITPROFILE]"))
                {
                    if (IsUser)
                    {
                        string editHyperLink = String.Format("<a href=\"{0}\" class=\"dnnSecondaryAction\">{1}</a>", profileUrl, LocalizeString("Edit"));
                        template = template.Replace("[HYPERLINK:EDITPROFILE]", editHyperLink);
                    }
                }
                if (template.Contains("[HYPERLINK:MYACCOUNT]"))
                {
                    if (IsUser)
                    {
                        string editHyperLink = String.Format("<a href=\"{0}\" class=\"dnnSecondaryAction\">{1}</a>", editUrl, LocalizeString("MyAccount"));
                        template = template.Replace("[HYPERLINK:MYACCOUNT]", editHyperLink);
                    }
                    buttonPanel.Visible = false;
                }

                if (!IsUser && buttonPanel.Visible)
                {
                    buttonPanel.Visible = false;
                }

			    if (ProfileUser.Profile.ProfileProperties.Cast<ProfilePropertyDefinition>().Count(profProperty => profProperty.Visible) == 0)
                {
                    noPropertiesLabel.Visible = true;
                    profileOutput.Visible = false;
                }
                else
                {
                    var token = new TokenReplace { User = ProfileUser, AccessingUser = ModuleContext.PortalSettings.UserInfo };
                    profileOutput.InnerHtml = token.ReplaceEnvironmentTokens(template);
                    noPropertiesLabel.Visible = false;
                    profileOutput.Visible = true;
                }

			    var propertyAccess = new ProfilePropertyAccess(ProfileUser);
                StringBuilder sb = new StringBuilder();
                bool propertyNotFound = false;

                foreach (ProfilePropertyDefinition property in ProfileUser.Profile.ProfileProperties)
                {
                    var displayDataType = ProfilePropertyAccess.DisplayDataType(property).ToLowerInvariant();
                    string value = propertyAccess.GetProperty(property.PropertyName,
                                                              String.Empty,
                                                              Thread.CurrentThread.CurrentUICulture,
                                                              ModuleContext.PortalSettings.UserInfo,
                                                              Scope.DefaultSettings,
                                                              ref propertyNotFound);


                    var clientName = Localization.GetSafeJSString(property.PropertyName);
                    sb.Append("self['" + clientName + "'] = ko.observable(");
                    sb.Append("\"");
                    if (!string.IsNullOrEmpty(value))
                    {
                        value = Localization.GetSafeJSString(displayDataType == "richtext" ? value : Server.HtmlDecode(value));
                        value = value
                            .Replace("\r", string.Empty)
                            .Replace("\n", " ")
                            .Replace(";", string.Empty)
                            .Replace("://", ":||") //protect http protocols won't be replaced in next step
                            .Replace("//", string.Empty)
                            .Replace(":||", "://"); //restore http protocols
                    }
                    sb.Append(value + "\"" + ");");
                    sb.Append('\n');
                    sb.Append("self['" + clientName + "Text'] = '");
                    sb.Append(clientName + "';");
                    sb.Append('\n');
                }

			    string email = (ProfileUserId == ModuleContext.PortalSettings.UserId
			                    || ModuleContext.PortalSettings.UserInfo.IsInRole(ModuleContext.PortalSettings.AdministratorRoleName))
			                       ? ProfileUser.Email
			                       : String.Empty;

                sb.Append("self.Email = ko.observable('");
                email = Localization.GetSafeJSString(Server.HtmlDecode(email));
                email = email.Replace(";", string.Empty).Replace("//", string.Empty);
                sb.Append(email + "');");
                sb.Append('\n');
                sb.Append("self.EmailText = '");
                sb.Append(LocalizeString("Email") + "';");
                sb.Append('\n');


                ProfileProperties = sb.ToString();


			}
			catch (Exception exc)
			{
				//Module failed to load
				Exceptions.ProcessModuleLoadException(this, exc);
			}
		}]]></body>
          </codeblock>
        </method>
        <method name="ProcessQuerystring">
          <declaration><![CDATA[private void ProcessQuerystring()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="254" sc="9" el="308" ec="10">DesktopModules\Admin\ViewProfile\ViewProfile.ascx.cs</location>
            <body hash="6f2dd654bcdccbb40834afd8a871d667"><![CDATA[{
            //in case someone is being redirected to here from an e-mail link action we need to process that here

            var action = Request.QueryString["action"];

            if (!Request.IsAuthenticated && !string.IsNullOrEmpty(action)) //action requested but not logged in. 
            {
                string loginUrl = Common.Globals.LoginURL(Request.RawUrl, false);
                Response.Redirect(loginUrl);
            }
            if (Request.IsAuthenticated && !string.IsNullOrEmpty(action) ) // only process this for authenticated requests
            {
                //current user, i.e. the one that the request was for
                var currentUser = UserController.Instance.GetCurrentUserInfo();               
                // the initiating user,i.e. the one who wanted to be friend
                // note that in this case here currentUser is visiting the profile of initiatingUser, most likely from a link in the notification e-mail
                var initiatingUser = UserController.Instance.GetUserById(PortalSettings.Current.PortalId, Convert.ToInt32(Request.QueryString["UserID"]));

                if (initiatingUser.UserID == currentUser.UserID)
                {
                    return; //do not further process for users who are on their own profile page
                }
            
                var friendRelationship = RelationshipController.Instance.GetFriendRelationship(currentUser, initiatingUser);

                if (friendRelationship != null)
                {                   
                    if (action.ToLower() == "acceptfriend")
                    {
                        var friend = UserController.GetUserById(PortalSettings.Current.PortalId, friendRelationship.UserId);
                        FriendsController.Instance.AcceptFriend(friend);                        
                    }

                    if (action.ToLower() == "followback")
                    {
                        var follower = UserController.GetUserById(PortalSettings.Current.PortalId, friendRelationship.UserId);
                        try
                        {
                            FollowersController.Instance.FollowUser(follower);
                            var notifications = NotificationsController.Instance.GetNotificationByContext(3, initiatingUser.UserID.ToString());
                            if (notifications.Count > 0)
                            {
                                NotificationsController.Instance.DeleteNotificationRecipient(notifications[0].NotificationID, currentUser.UserID);
                            }
                        }
                        catch 
                        {}


                    }                    
                }

                Response.Redirect(Common.Globals.UserProfileURL(initiatingUser.UserID));
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="buttonPanel">
          <declaration><![CDATA[protected HtmlGenericControl buttonPanel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="editLink">
          <declaration><![CDATA[protected HyperLink editLink;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="noPropertiesLabel">
          <declaration><![CDATA[protected Label noPropertiesLabel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="profileOutput">
          <declaration><![CDATA[protected HtmlGenericControl profileOutput;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="DisplayModule">
          <declaration><![CDATA[public override bool DisplayModule]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="54" sc="4" el="56" ec="5">DesktopModules\Admin\ViewProfile\ViewProfile.ascx.cs</location>
            <body hash="feefde599bb200801f03bd4d87f144e8"><![CDATA[{
				return true;
			}]]></body>
          </codeblock>
        </property>
        <property name="IncludeButton">
          <declaration><![CDATA[public bool IncludeButton]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="62" sc="13" el="69" ec="14">DesktopModules\Admin\ViewProfile\ViewProfile.ascx.cs</location>
            <body hash="dd8a49208ada1909185daee07b309fb0"><![CDATA[{
                var includeButton = true;
                if (ModuleContext.Settings.ContainsKey("IncludeButton"))
                {
                    includeButton = Convert.ToBoolean(ModuleContext.Settings["IncludeButton"]);
                }
                return includeButton;
            }]]></body>
          </codeblock>
        </property>
        <property name="ProfileProperties">
          <declaration><![CDATA[public string ProfileProperties]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="72" sc="43" el="72" ec="47">DesktopModules\Admin\ViewProfile\ViewProfile.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="72" sc="48" el="72" ec="52">DesktopModules\Admin\ViewProfile\ViewProfile.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="DotNetNuke.Modules.SearchResults">
    <class name="ResultsSettings">
      <declaration><![CDATA[public class ResultsSettings : ModuleSettingsBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public ResultsSettings()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="LoadPortalsList">
          <declaration><![CDATA[protected IEnumerable<string[]> LoadPortalsList()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="156" sc="9" el="172" ec="10">DesktopModules\Admin\SearchResults\ResultsSettings.ascx.cs</location>
            <body hash="4775fad281755906a05e464e6a499d4f"><![CDATA[{
            var groups = PortalGroupController.Instance.GetPortalGroups().ToArray();
            var mygroup = (from @group in groups
                           select PortalGroupController.Instance.GetPortalsByGroup(@group.PortalGroupId)
                               into portals
                               where portals.Any(x => x.PortalID == PortalSettings.Current.PortalId)
                               select portals.ToArray()).FirstOrDefault();

            var result = new List<string[]>();
            if (mygroup != null && mygroup.Any())
            {
                result.AddRange(mygroup.Select(
                    pi => new[] {pi.PortalName, pi.PortalID.ToString(CultureInfo.InvariantCulture)}));
            }

            return result;
        }]]></body>
          </codeblock>
        </method>
        <method name="LoadSeachContentSourcesList">
          <declaration><![CDATA[protected IEnumerable<string> LoadSeachContentSourcesList()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="175" sc="9" el="196" ec="10">DesktopModules\Admin\SearchResults\ResultsSettings.ascx.cs</location>
            <body hash="910d865258a5aa963b1d375dca91115d"><![CDATA[{
            var portals = PortalController.Instance.GetPortals();

            var result = new List<string>();
            foreach (var portal in portals)
            {
                var pi = portal as PortalInfo;

                if (pi != null)
                {
                    var list = InternalSearchController.Instance.GetSearchContentSourceList(pi.PortalID);
                    foreach (var src in list)
                    {
                        if (!src.IsPrivate && !result.Contains(src.LocalizedName))
                        {
                            result.Add(src.LocalizedName);
                        }
                    }
                }
            }
            return result;
        }]]></body>
          </codeblock>
        </method>
        <method name="LoadSettings">
          <declaration><![CDATA[public override void LoadSettings()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="44" sc="9" el="124" ec="10">DesktopModules\Admin\SearchResults\ResultsSettings.ascx.cs</location>
            <body hash="e265ad6e08f1ced072dfb2e75e80af0b"><![CDATA[{
            try
            {
                if ((Page.IsPostBack == false))
                {
                    if (!String.IsNullOrEmpty(Convert.ToString(Settings["LinkTarget"])))
                    {
                        comboBoxLinkTarget.SelectedValue = Convert.ToString(Settings["LinkTarget"]);
                    }

                    if (!string.IsNullOrEmpty(Convert.ToString(Settings["ScopeForPortals"])))
                    {
                        var list = Convert.ToString(Settings["ScopeForPortals"]).Split('|').ToList();
                        var portalList = LoadPortalsList().ToList();
                        if (portalList.Any())
                        {
                            foreach (var portal in portalList)
                            {
                                var item = new ListItem(portal[0], portal[1]) {Selected = list.Contains(portal[1])};
                                comboBoxPortals.Items.Add(item);
                            }
                        }
                        else
                        {
                            divPortalGroup.Visible = false;
                        }
                    }
                    else
                    {
                        var portalList = LoadPortalsList().ToList();
                        if (portalList.Any())
                        {
                            foreach (var portal in portalList)
                            {
                                var item = new ListItem(portal[0], portal[1]) { Selected = PortalId.ToString() == portal[1] };
                                comboBoxPortals.Items.Add(item);
                            }
                        }
                        else
                        {
                            divPortalGroup.Visible = false;
                        }
                    }

                    
                    if (!string.IsNullOrEmpty(Convert.ToString(Settings["ScopeForFilters"])))
                    {
                        var list = Convert.ToString(Settings["ScopeForFilters"]).Split('|').ToList();
                        var filterList = LoadSeachContentSourcesList();
                        foreach (var filter in filterList)
                        {
                            var item = new ListItem(filter, filter) {Selected = list.Contains(filter)};
                            comboBoxFilters.Items.Add(item);
                        }
                    }
                    else
                    {
                        var filterList = LoadSeachContentSourcesList();
                        foreach (var filter in filterList)
                        {
                            var item = new ListItem(filter, filter) {Selected = true};
                            comboBoxFilters.Items.Add(item);
                        }
                    }

                    if (!string.IsNullOrEmpty(Convert.ToString(Settings["EnableWildSearch"])))
                    {
                        var enableWildSearch = Convert.ToBoolean(Settings["EnableWildSearch"]);
                        chkEnableWildSearch.Checked = enableWildSearch;
                    }
                    else
                    {
                        chkEnableWildSearch.Checked = true;
                    }
                }
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateSettings">
          <declaration><![CDATA[public override void UpdateSettings()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="127" sc="9" el="151" ec="10">DesktopModules\Admin\SearchResults\ResultsSettings.ascx.cs</location>
            <body hash="21a3180207db81acdeecf485438d5f53"><![CDATA[{
            try
            {
                if (Page.IsValid)
                {
                    ModuleController.Instance.UpdateModuleSetting(ModuleId, "LinkTarget", comboBoxLinkTarget.SelectedValue);

                    var selectedPortals = comboBoxPortals.Value.Replace(",", "|");

                    ModuleController.Instance.UpdateModuleSetting(ModuleId, "ScopeForPortals", selectedPortals);

                    var selectedFilters = comboBoxFilters.Value.Replace(",", "|");

                    ModuleController.Instance.UpdateModuleSetting(ModuleId, "ScopeForFilters", selectedFilters.ToString());

                    ModuleController.Instance.UpdateModuleSetting(ModuleId, "EnableWildSearch", chkEnableWildSearch.Checked.ToString());
                }
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }

			DataCache.RemoveCache(string.Format("ModuleInfos{0}", PortalSettings.PortalId));
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="chkEnableWildSearch">
          <declaration><![CDATA[protected CheckBox chkEnableWildSearch;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="comboBoxFilters">
          <declaration><![CDATA[protected DnnComboBox comboBoxFilters;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="comboBoxLinkTarget">
          <declaration><![CDATA[protected DnnComboBox comboBoxLinkTarget;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="comboBoxPortals">
          <declaration><![CDATA[protected DnnComboBox comboBoxPortals;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="divPortalGroup">
          <declaration><![CDATA[protected HtmlGenericControl divPortalGroup;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="filtersRequiredFieldValidator">
          <declaration><![CDATA[protected RequiredFieldValidator filtersRequiredFieldValidator;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plEnableWildSearch">
          <declaration><![CDATA[protected LabelControl plEnableWildSearch;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plResultsScopeForFilters">
          <declaration><![CDATA[protected LabelControl plResultsScopeForFilters;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plResultsScopeForPortals">
          <declaration><![CDATA[protected LabelControl plResultsScopeForPortals;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="plTitleLinkTarget">
          <declaration><![CDATA[protected LabelControl plTitleLinkTarget;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="portalsRequiedValidator">
          <declaration><![CDATA[protected RequiredFieldValidator portalsRequiedValidator;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="SearchResults">
      <declaration><![CDATA[public class SearchResults : PortalModuleBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public SearchResults()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="CheckedScopeItem">
          <declaration><![CDATA[private bool CheckedScopeItem(string scopeItemName)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="376" sc="9" el="379" ec="10">DesktopModules\Admin\SearchResults\SearchResults.ascx.cs</location>
            <body hash="33922b0b28aa8a78e00695f4f33a16f0"><![CDATA[{
            var searchScope = SearchScope;
            return searchScope.Length == 0 || searchScope.Any(x => x == scopeItemName);
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="346" sc="9" el="373" ec="10">DesktopModules\Admin\SearchResults\SearchResults.ascx.cs</location>
            <body hash="abfc54fe7f0231b385664099543aa942"><![CDATA[{
            base.OnLoad(e);

            ServicesFramework.Instance.RequestAjaxAntiForgerySupport();
            JavaScript.RequestRegistration(CommonJs.DnnPlugins);
            ClientResourceManager.RegisterScript(Page, "~/Resources/Shared/scripts/dnn.searchBox.js");
            ClientResourceManager.RegisterStyleSheet(Page, "~/Resources/Shared/stylesheets/dnn.searchBox.css", FileOrder.Css.ModuleCss);
            ClientResourceManager.RegisterScript(Page, "~/DesktopModules/admin/SearchResults/dnn.searchResult.js");

            CultureCode = Thread.CurrentThread.CurrentCulture.ToString();

            foreach (string o in SearchContentSources)
            {
                var item = new ListItem(o, o) {Selected = CheckedScopeItem(o)};
                SearchScopeList.Items.Add(item);
            }

            SearchScopeList.Options.Localization["AllItemsChecked"] = Localization.GetString("AllFeaturesSelected",
                Localization.GetResourceFile(this, MyFileName));

            var pageSizeItem = ResultsPerPageList.FindItemByValue(PageSize.ToString());
            if (pageSizeItem != null)
            {
                pageSizeItem.Selected = true;
            }

            SetLastModifiedFilter();
        }]]></body>
          </codeblock>
        </method>
        <method name="SetLastModifiedFilter">
          <declaration><![CDATA[private void SetLastModifiedFilter()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="382" sc="9" el="393" ec="10">DesktopModules\Admin\SearchResults\SearchResults.ascx.cs</location>
            <body hash="de8fced6fe4691467d60add4cb407ffc"><![CDATA[{
            var lastModifiedParam = LastModifiedParam;

            if (!string.IsNullOrEmpty(lastModifiedParam))
            {
                var item = AdvnacedDatesList.Items.Cast<ListItem>().FirstOrDefault(x => x.Value == lastModifiedParam);
                if (item != null)
                {
                    item.Selected = true;
                }
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_searchContentSources">
          <declaration><![CDATA[private IList<string> _searchContentSources;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_searchPortalIds">
          <declaration><![CDATA[private IList<int> _searchPortalIds;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="AdvnacedDatesList">
          <declaration><![CDATA[protected DnnComboBox AdvnacedDatesList;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="DefaultPageIndex">
          <declaration><![CDATA[private const int DefaultPageIndex = 1;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="DefaultPageSize">
          <declaration><![CDATA[private const int DefaultPageSize = 15;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="DefaultSortOption">
          <declaration><![CDATA[private const int DefaultSortOption = 0;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblAdvancedDates">
          <declaration><![CDATA[protected LabelControl lblAdvancedDates;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblAdvancedExactSearch">
          <declaration><![CDATA[protected LabelControl lblAdvancedExactSearch;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblAdvancedScope">
          <declaration><![CDATA[protected LabelControl lblAdvancedScope;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblAdvancedTags">
          <declaration><![CDATA[protected LabelControl lblAdvancedTags;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="MyFileName">
          <declaration><![CDATA[private const string MyFileName = "SearchResults.ascx";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ResultsPerPageList">
          <declaration><![CDATA[protected DnnComboBox ResultsPerPageList;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="SearchScopeList">
          <declaration><![CDATA[protected DnnComboBox SearchScopeList;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="AddTagText">
          <declaration><![CDATA[protected string AddTagText]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="AdvancedSearchHintText">
          <declaration><![CDATA[protected string AdvancedSearchHintText]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="AdvancedText">
          <declaration><![CDATA[protected string AdvancedText]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="AuthorText">
          <declaration><![CDATA[protected string AuthorText]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="CheckedExactSearch">
          <declaration><![CDATA[protected string CheckedExactSearch]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="142" sc="13" el="150" ec="14">DesktopModules\Admin\SearchResults\SearchResults.ascx.cs</location>
            <body hash="5896c0dfd2d0339ad48b4556a28ab324"><![CDATA[{
                var paramExactSearch = Request.QueryString["ExactSearch"];

                if (!string.IsNullOrEmpty(paramExactSearch) && paramExactSearch.ToLowerInvariant() == "y")
                {
                    return "checked=\"true\"";
                }
                return "";
            }]]></body>
          </codeblock>
        </property>
        <property name="ClearButtonText">
          <declaration><![CDATA[protected string ClearButtonText]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="CommentsText">
          <declaration><![CDATA[protected string CommentsText]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="CultureCode">
          <declaration><![CDATA[protected string CultureCode]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="341" sc="40" el="341" ec="44">DesktopModules\Admin\SearchResults\SearchResults.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="341" sc="45" el="341" ec="49">DesktopModules\Admin\SearchResults\SearchResults.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="CurrentPageIndexText">
          <declaration><![CDATA[protected string CurrentPageIndexText]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="336" sc="13" el="338" ec="14">DesktopModules\Admin\SearchResults\SearchResults.ascx.cs</location>
            <body hash="2dfab176f6ed85b2acb43b46d706026a"><![CDATA[{
                return Localization.GetSafeJSString("CurrentPageIndex", Localization.GetResourceFile(this, MyFileName));
            }]]></body>
          </codeblock>
        </property>
        <property name="DateText">
          <declaration><![CDATA[protected string DateText]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="DefaultText">
          <declaration><![CDATA[protected string DefaultText]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="LastModifiedParam">
          <declaration><![CDATA[protected string LastModifiedParam]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="LastModifiedText">
          <declaration><![CDATA[protected string LastModifiedText]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="LikesText">
          <declaration><![CDATA[protected string LikesText]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="LinkAdvancedTipText">
          <declaration><![CDATA[protected string LinkAdvancedTipText]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="LinkTarget">
          <declaration><![CDATA[protected string LinkTarget]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="156" sc="13" el="159" ec="14">DesktopModules\Admin\SearchResults\SearchResults.ascx.cs</location>
            <body hash="67de54b2e3b0a0a994a932bcad0958bc"><![CDATA[{
                string settings = Convert.ToString(Settings["LinkTarget"]);
                return string.IsNullOrEmpty(settings) || settings == "0" ? string.Empty : " target=\"_blank\" ";
            }]]></body>
          </codeblock>
        </property>
        <property name="NoResultsText">
          <declaration><![CDATA[protected string NoResultsText]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="PageIndex">
          <declaration><![CDATA[protected int PageIndex]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="85" sc="13" el="98" ec="14">DesktopModules\Admin\SearchResults\SearchResults.ascx.cs</location>
            <body hash="89c607f5a5287422b3ed31de4139bb52"><![CDATA[{
                if (string.IsNullOrEmpty(Request.QueryString["Page"]))
                {
                    return DefaultPageIndex;
                }

                int pageIndex;
                if (Int32.TryParse(Request.QueryString["Page"], out pageIndex))
                {
                    return pageIndex;
                }

                return DefaultPageIndex;
            }]]></body>
          </codeblock>
        </property>
        <property name="PageSize">
          <declaration><![CDATA[protected int PageSize]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="104" sc="13" el="117" ec="14">DesktopModules\Admin\SearchResults\SearchResults.ascx.cs</location>
            <body hash="2e83d6efe44cbc9ab07220f111ce9ae6"><![CDATA[{
                if (string.IsNullOrEmpty(Request.QueryString["Size"]))
                {
                    return DefaultPageSize;
                }

                int pageSize;
                if (Int32.TryParse(Request.QueryString["Size"], out pageSize))
                {
                    return pageSize;
                }

                return DefaultPageSize;
            }]]></body>
          </codeblock>
        </property>
        <property name="RelevanceText">
          <declaration><![CDATA[protected string RelevanceText]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ResultsCountText">
          <declaration><![CDATA[protected string ResultsCountText]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ResultsPerPageText">
          <declaration><![CDATA[protected string ResultsPerPageText]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="SearchButtonText">
          <declaration><![CDATA[protected string SearchButtonText]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="SearchContentSources">
          <declaration><![CDATA[protected IList<string> SearchContentSources]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="187" sc="13" el="230" ec="14">DesktopModules\Admin\SearchResults\SearchResults.ascx.cs</location>
            <body hash="d3a6479e353cc954f6da4e68ec6578dd"><![CDATA[{
                if (_searchContentSources == null)
                {
                    IList<int> portalIds = SearchPortalIds;
                    var list = new List<SearchContentSource>();
                    foreach (int portalId in portalIds)
                    {
                        IEnumerable<SearchContentSource> crawlerList =
                            InternalSearchController.Instance.GetSearchContentSourceList(portalId);
                        foreach (SearchContentSource src in crawlerList)
                        {
                            if (src.IsPrivate) continue;
                            if (list.All(r => r.LocalizedName != src.LocalizedName))
                            {
                                list.Add(src);
                            }
                        }
                    }

                    List<string> configuredList = null;

                    if (!string.IsNullOrEmpty(Convert.ToString(Settings["ScopeForFilters"])))
                    {
                        configuredList = Convert.ToString(Settings["ScopeForFilters"]).Split('|').ToList();
                    }

                    _searchContentSources = new List<string>();

                    // add other searchable module defs
                    foreach (SearchContentSource contentSource in list)
                    {
                        if (configuredList == null ||
                            configuredList.Any(l => l.Contains(contentSource.LocalizedName)))
                        {
                            if (!_searchContentSources.Contains(contentSource.LocalizedName))
                            {
                                _searchContentSources.Add(contentSource.LocalizedName);
                            }
                        }
                    }
                }

                return _searchContentSources;
            }]]></body>
          </codeblock>
        </property>
        <property name="SearchPortalIds">
          <declaration><![CDATA[private IList<int> SearchPortalIds]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="165" sc="13" el="181" ec="14">DesktopModules\Admin\SearchResults\SearchResults.ascx.cs</location>
            <body hash="889290ddc12997d76d6c459323f78b35"><![CDATA[{
                if (_searchPortalIds == null)
                {
                    _searchPortalIds = new List<int>();
                    if (!string.IsNullOrEmpty(Convert.ToString(Settings["ScopeForPortals"])))
                    {
                        List<string> list = Convert.ToString(Settings["ScopeForPortals"]).Split('|').ToList();
                        foreach (string l in list) _searchPortalIds.Add(Convert.ToInt32(l));
                    }
                    else
                    {
                        _searchPortalIds.Add(PortalId); // no setting, just search current portal by default
                    }
                }

                return _searchPortalIds;
            }]]></body>
          </codeblock>
        </property>
        <property name="SearchScope">
          <declaration><![CDATA[protected string[] SearchScope]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="71" sc="13" el="74" ec="14">DesktopModules\Admin\SearchResults\SearchResults.ascx.cs</location>
            <body hash="b85698f2d0eddbd7e85682ea2253ecad"><![CDATA[{
                var searchScopeParam = SearchScopeParam;
                return string.IsNullOrEmpty(searchScopeParam) ? new string[0] : searchScopeParam.Split(',');
            }]]></body>
          </codeblock>
        </property>
        <property name="SearchScopeParam">
          <declaration><![CDATA[protected string SearchScopeParam]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="SearchTerm">
          <declaration><![CDATA[protected string SearchTerm]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="SortOption">
          <declaration><![CDATA[protected int SortOption]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="123" sc="13" el="136" ec="14">DesktopModules\Admin\SearchResults\SearchResults.ascx.cs</location>
            <body hash="8959e0d72f3305d82db829afa03ae97b"><![CDATA[{
                if (string.IsNullOrEmpty(Request.QueryString["Sort"]))
                {
                    return DefaultSortOption;
                }

                int sortOption;
                if (Int32.TryParse(Request.QueryString["Sort"], out sortOption))
                {
                    return sortOption;
                }

                return DefaultSortOption;
            }]]></body>
          </codeblock>
        </property>
        <property name="SourceText">
          <declaration><![CDATA[protected string SourceText]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="TagsQuery">
          <declaration><![CDATA[protected string TagsQuery]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="TagsText">
          <declaration><![CDATA[protected string TagsText]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ViewsText">
          <declaration><![CDATA[protected string ViewsText]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="DotNetNuke.Modules.UrlManagement">
    <class name="ProviderSettings">
      <declaration><![CDATA[public class ProviderSettings : ModuleUserControlBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public ProviderSettings()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="cmdCancel_Click">
          <declaration><![CDATA[private void cmdCancel_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="68" sc="9" el="70" ec="10">DesktopModules\Admin\UrlManagement\UrlProviderSettings.ascx.cs</location>
            <body hash="d5fa94f3f4471650bbc61a749ae8ba40"><![CDATA[{
            Response.Redirect(Globals.NavigateURL(ModuleContext.PortalSettings.ActiveTab.TabID));
        }]]></body>
          </codeblock>
        </method>
        <method name="cmdUpdate_Click">
          <declaration><![CDATA[private void cmdUpdate_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="73" sc="9" el="92" ec="10">DesktopModules\Admin\UrlManagement\UrlProviderSettings.ascx.cs</location>
            <body hash="80b880f6b0c8d50d45e985643dc76fac"><![CDATA[{
            if (!this.Page.IsValid)
            {
                return;
            }

            if (_providerSettingsControl != null)
            {
                var settings = _providerSettingsControl.SaveSettings();
                foreach (var setting in settings)
                {
                    ExtensionUrlProviderController.SaveSetting(_providerId, ModuleContext.PortalId, setting.Key, setting.Value);
                }
            }

            if (DisplayMode != "editor" && DisplayMode != "settings")
            {
                Response.Redirect(Globals.NavigateURL(ModuleContext.PortalSettings.ActiveTab.TabID));
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="24" sc="9" el="51" ec="10">DesktopModules\Admin\UrlManagement\UrlProviderSettings.ascx.cs</location>
            <body hash="d7f6232795518587bb76ace087337959"><![CDATA[{
            base.OnInit(e);

            cmdUpdate.Click += cmdUpdate_Click;
            cmdCancel.Click += cmdCancel_Click;

            _providerId = Convert.ToInt32(Request.Params["ProviderId"]);

            var provider = ExtensionUrlProviderController.GetModuleProviders(ModuleContext.PortalId)
                                .SingleOrDefault(p => p.ProviderConfig.ExtensionUrlProviderId == _providerId);

            if (provider != null)
            {
                var settingsControlSrc = provider.ProviderConfig.SettingsControlSrc;

                var settingsControl = Page.LoadControl(settingsControlSrc);

                providerSettingsPlaceHolder.Controls.Add(settingsControl);

// ReSharper disable SuspiciousTypeConversion.Global
                _providerSettingsControl = settingsControl as IExtensionUrlProviderSettingsControl;
// ReSharper restore SuspiciousTypeConversion.Global
                if (_providerSettingsControl != null)
                {
                    _providerSettingsControl.Provider = provider.ProviderConfig;
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="54" sc="9" el="65" ec="10">DesktopModules\Admin\UrlManagement\UrlProviderSettings.ascx.cs</location>
            <body hash="6c713f3daad7fff95aa5f1a3c1a58a90"><![CDATA[{
            base.OnLoad(e);
            if (_providerSettingsControl != null)
            {
                _providerSettingsControl.LoadSettings();
            }

            if (DisplayMode == "editor" || DisplayMode == "settings")
            {
                cmdCancel.Visible = false;
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_providerId">
          <declaration><![CDATA[private int _providerId;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_providerSettingsControl">
          <declaration><![CDATA[private IExtensionUrlProviderSettingsControl _providerSettingsControl;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdCancel">
          <declaration><![CDATA[protected LinkButton cmdCancel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdUpdate">
          <declaration><![CDATA[protected LinkButton cmdUpdate;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="providerSettingsPlaceHolder">
          <declaration><![CDATA[protected PlaceHolder providerSettingsPlaceHolder;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="DisplayMode">
          <declaration><![CDATA[private string DisplayMode]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="21" sc="39" el="21" ec="96">DesktopModules\Admin\UrlManagement\UrlProviderSettings.ascx.cs</location>
            <body hash="098ae73f942d8bd4070d52c4a201e776"><![CDATA[(Request.QueryString["Display"] ?? "").ToLowerInvariant(]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="DotNetNuke.Services.Exceptions">
    <class name="ErrorPage">
      <declaration><![CDATA[public class ErrorPage : Page]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public ErrorPage()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="ExtractOSVersion">
          <deprecation>Function obsoleted in 5.6.1 as no longer used in core - version identification can be useful to potential hackers if used incorrectly</deprecation>
          <declaration><![CDATA[public string ExtractOSVersion()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="89" sc="9" el="124" ec="10">ErrorPage.aspx.cs</location>
            <body hash="93adf40aad242e813ec1197676f13f93"><![CDATA[{
            //default name to OSVersion in case OS not recognised
            string commonName = Environment.OSVersion.ToString();
            switch (Environment.OSVersion.Version.Major)
            {
                case 5:
                    switch (Environment.OSVersion.Version.Minor)
                    {
                        case 0:
                            commonName = "Windows 2000";
                            break;
                        case 1:
                            commonName = "Windows XP";
                            break;
                        case 2:
                            commonName = "Windows Server 2003";
                            break;
                    }
                    break;
                case 6:
                    switch (Environment.OSVersion.Version.Minor)
                    {
                        case 0:
                            commonName = "Windows Vista";
                            break;
                        case 1:
                            commonName = "Windows Server 2008";
                            break;
                        case 2:
                            commonName = "Windows 7";
                            break;
                    }
                    break;
            }
            return commonName;
        }]]></body>
          </codeblock>
        </method>
        <method name="ManageError">
          <declaration><![CDATA[private void ManageError(string status)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="58" sc="9" el="85" ec="10">ErrorPage.aspx.cs</location>
            <body hash="aef0bcba13e0693b1109ea0c6fabb748"><![CDATA[{
            string errorMode = Config.GetCustomErrorMode();

            string errorMessage = HttpUtility.HtmlEncode(Request.QueryString["error"]);
            string errorMessage2 = HttpUtility.HtmlEncode(Request.QueryString["error2"]);
            string localizedMessage = Localization.Localization.GetString(status + ".Error", Localization.Localization.GlobalResourceFile);
            if (localizedMessage != null)
            {
                localizedMessage = localizedMessage.Replace("src=\"images/403-3.gif\"", "src=\"" + ResolveUrl("~/images/403-3.gif") + "\"");

                if (!string.IsNullOrEmpty(errorMessage2) && ( (errorMode=="Off") || ( (errorMode=="RemoteOnly") && (Request.IsLocal) ) ))
                {
                    ErrorPlaceHolder.Controls.Add(new LiteralControl(string.Format(localizedMessage, errorMessage2)));
                }
                else
                {
                    ErrorPlaceHolder.Controls.Add(new LiteralControl(string.Format(localizedMessage, errorMessage)));
                }
            }

            int statusCode;
            Int32.TryParse(status, out statusCode);

            if (statusCode > -1)
            {
                Response.StatusCode = statusCode;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="127" sc="9" el="131" ec="10">ErrorPage.aspx.cs</location>
            <body hash="fa898a132fd46a25ccc5c5c532ad3e8f"><![CDATA[{
            base.OnInit(e);
            DefaultStylesheet.Attributes["href"] = ResolveUrl("~/Portals/_default/default.css");
            InstallStylesheet.Attributes["href"] = ResolveUrl("~/Install/install.css");
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="134" sc="9" el="188" ec="10">ErrorPage.aspx.cs</location>
            <body hash="907018d18ffd4177bad41ebba83d289a"><![CDATA[{
            base.OnLoad(e);

            var portalSettings = PortalController.Instance.GetCurrentPortalSettings();
            if (portalSettings != null && !String.IsNullOrEmpty(portalSettings.LogoFile))
            {
                IFileInfo fileInfo = FileManager.Instance.GetFile(portalSettings.PortalId, portalSettings.LogoFile);
                if (fileInfo != null)
                {
                    headerImage.ImageUrl = FileManager.Instance.GetUrl(fileInfo);
                }
            }
            headerImage.Visible = !string.IsNullOrEmpty(headerImage.ImageUrl);

            string localizedMessage;
            var security = new PortalSecurity();
            var status = security.InputFilter(Request.QueryString["status"],
                                                    PortalSecurity.FilterFlag.NoScripting |
                                                    PortalSecurity.FilterFlag.NoMarkup);
            if (!string.IsNullOrEmpty(status))
            {
                ManageError(status);
            }
            else
            {
                //get the last server error
                var exc = Server.GetLastError();
                try
                {
                    if (Request.Url.LocalPath.ToLower().EndsWith("installwizard.aspx"))
                    {
                        ErrorPlaceHolder.Controls.Add(new LiteralControl(HttpUtility.HtmlEncode(exc.ToString())));
                    }
                    else
                    {
                        var lex = new PageLoadException(exc.Message, exc);
                        Exceptions.LogException(lex);
                        localizedMessage = Localization.Localization.GetString("Error.Text", Localization.Localization.GlobalResourceFile);
                        ErrorPlaceHolder.Controls.Add(new ErrorContainer(portalSettings, localizedMessage, lex).Container);
                    }
                }
                catch
                {
                    //No exception was found...you shouldn't end up here
                    //unless you go to this aspx page URL directly
                    localizedMessage = Localization.Localization.GetString("UnhandledError.Text", Localization.Localization.GlobalResourceFile);
                    ErrorPlaceHolder.Controls.Add(new LiteralControl(localizedMessage));
                }

                Response.StatusCode = 500;
            }
            localizedMessage = Localization.Localization.GetString("Return.Text", Localization.Localization.GlobalResourceFile);

            hypReturn.Text = localizedMessage;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="DefaultStylesheet">
          <declaration><![CDATA[protected HtmlGenericControl DefaultStylesheet;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ErrorPlaceHolder">
          <declaration><![CDATA[protected PlaceHolder ErrorPlaceHolder;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Form">
          <declaration><![CDATA[protected new HtmlForm Form;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="headerImage">
          <declaration><![CDATA[protected Image headerImage;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="hypReturn">
          <declaration><![CDATA[protected HyperLink hypReturn;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="InstallStylesheet">
          <declaration><![CDATA[protected HtmlGenericControl InstallStylesheet;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Title">
          <declaration><![CDATA[protected new HtmlGenericControl Title;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="DotNetNuke.Services.Install">
    <class name="Install">
      <declaration><![CDATA[public class Install : Page]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public Install()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
        <constructor name=".cctor">
          <declaration><![CDATA[static Install()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="54" sc="9" el="55" ec="69">Install\Install.aspx.cs</location>
            <body hash="228e48a535d125ddf35b72b7f5a84b0a"><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof(Install));
        private static readonly object installLocker = new object();]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="AddPortal">
          <declaration><![CDATA[private void AddPortal()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="371" sc="9" el="419" ec="10">Install\Install.aspx.cs</location>
            <body hash="795be3b019a48e6183542e25517eae76"><![CDATA[{
            //Start Timer
            Upgrade.Upgrade.StartTimer();

            //Write out Header
            HtmlUtils.WriteHeader(Response, "addPortal");
            Response.Write("<h2>Add Site Status Report</h2>");
            Response.Flush();

            //install new portal(s)
            string strNewFile = Globals.ApplicationMapPath + "\\Install\\Portal\\Portals.resources";
            if (File.Exists(strNewFile))
            {
                XmlDocument xmlDoc = new XmlDocument();
                xmlDoc.Load(strNewFile);

                //parse portal(s) if available
                var nodes = xmlDoc.SelectNodes("//dotnetnuke/portals/portal");
                if (nodes != null)
                {
                    foreach (XmlNode node in nodes)
                    {
                        if (node != null)
                        {
                            Upgrade.Upgrade.AddPortal(node, true, 0);
                        }
                    }
                }

                //delete the file
                try
                {
                    File.SetAttributes(strNewFile, FileAttributes.Normal);
                    File.Delete(strNewFile);
                }
                catch (Exception ex)
                {
                    //error removing the file
                    Logger.Error(ex);
                }

                Response.Write("<h2>Installation Complete</h2>");
                Response.Write("<br><br><h2><a href='../Default.aspx'>Click Here To Access Your Site</a></h2><br><br>");
                Response.Flush();
            }

            //Write out Footer
            HtmlUtils.WriteFooter(Response);
        }]]></body>
          </codeblock>
        </method>
        <method name="CheckPermissions">
          <declaration><![CDATA[private bool CheckPermissions()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="243" sc="9" el="251" ec="10">Install\Install.aspx.cs</location>
            <body hash="fa3b35a5c66b7215cf71452e7b799e8e"><![CDATA[{
            bool verified = new FileSystemPermissionVerifier(Server.MapPath("~")).VerifyAll();
            HtmlUtils.WriteFeedback(HttpContext.Current.Response,
                                    0,
                                    "Checking File and Folder permissions " + (verified ? "<font color='green'>Success</font>" : "<font color='red'>Error!</font>") + "<br>");
            Response.Flush();

            return verified;
        }]]></body>
          </codeblock>
        </method>
        <method name="ExecuteScripts">
          <declaration><![CDATA[private void ExecuteScripts()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="59" sc="9" el="79" ec="10">Install\Install.aspx.cs</location>
            <body hash="71c15b8a553371807c6b78e35f71b1f7"><![CDATA[{
            //Start Timer
            Upgrade.Upgrade.StartTimer();

            //Write out Header
            HtmlUtils.WriteHeader(Response, "executeScripts");

            Response.Write("<h2>Execute Scripts Status Report</h2>");
            Response.Flush();

            string strProviderPath = DataProvider.Instance().GetProviderPath();
            if (!strProviderPath.StartsWith("ERROR:"))
            {
                Upgrade.Upgrade.ExecuteScripts(strProviderPath);
            }
            Response.Write("<h2>Execution Complete</h2>");
            Response.Flush();
            
            //Write out Footer
            HtmlUtils.WriteFooter(Response);
        }]]></body>
          </codeblock>
        </method>
        <method name="InstallApplication">
          <declaration><![CDATA[private void InstallApplication()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="82" sc="9" el="212" ec="10">Install\Install.aspx.cs</location>
            <body hash="6d66d6df98086550061ae89933f18c6d"><![CDATA[{
            //the application uses a two step installation process. The first step is used to update 
            //the Web.config with any configuration settings - which forces an application restart. 
            //The second step finishes the installation process and provisions the site.

            string installationDate = Config.GetSetting("InstallationDate");

            if (installationDate == null || String.IsNullOrEmpty(installationDate))
            {
                string strError = Config.UpdateMachineKey();
                if (String.IsNullOrEmpty(strError))
                {
                    //send a new request to the application to initiate step 2
                    Response.Redirect(HttpContext.Current.Request.RawUrl, true);
                }
                else
                {
                    //403-3 Error - Redirect to ErrorPage
                    //403.3 means directory permissions issue
                    string strURL = "~/ErrorPage.aspx?status=403_3&error=" + strError;
                    HttpContext.Current.Response.Clear();
                    HttpContext.Current.Server.Transfer(strURL);
                }
            }
            else
            {

                try
                {
                    var synchConnectionString = new SynchConnectionStringStep();
                    synchConnectionString.Execute();
                    if (synchConnectionString.Status == StepStatus.AppRestart)
                    {
                        //send a new request to the application to initiate step 2
                        Response.Redirect(HttpContext.Current.Request.RawUrl, true);
                    }

                    //Start Timer
                    Upgrade.Upgrade.StartTimer();

                    //Write out Header
                    HtmlUtils.WriteHeader(Response, "install");

                    //get path to script files
                    string strProviderPath = DataProvider.Instance().GetProviderPath();
                    if (!strProviderPath.StartsWith("ERROR:"))
                    {
                        if (!CheckPermissions())
                        {
                            return;
                        }
                        //Add the install blocker logic
                        lock (installLocker)
                        {
                            if (InstallBlocker.Instance.IsInstallInProgress())
                            {
                                WriteInstallationHeader();
                                WriteInstallationInProgress();
                                return;
                            }
                            RegisterInstallBegining();
                        }

                        var installConfig = InstallController.Instance.GetInstallConfig();
                        //Create Folder Mappings config
                        if (!String.IsNullOrEmpty(installConfig.FolderMappingsSettings))
                        {
                            FolderMappingsConfigController.Instance.SaveConfig(installConfig.FolderMappingsSettings);
                        }
                        Upgrade.Upgrade.InstallDNN(strProviderPath);
                        //remove en-US from portal if installing in a different language
                        if (!installConfig.InstallCulture.Equals("en-us", StringComparison.InvariantCultureIgnoreCase))
                        {
                            var locale = LocaleController.Instance.GetLocale("en-US");
                            Localization.Localization.RemoveLanguageFromPortal(0, locale.LanguageId, true);
                        }

                        var licenseConfig = installConfig.License;
                        bool IsProOrEnterprise = (File.Exists(HttpContext.Current.Server.MapPath("~\\bin\\DotNetNuke.Professional.dll")) ||
                                                  File.Exists(HttpContext.Current.Server.MapPath("~\\bin\\DotNetNuke.Enterprise.dll")));
                        if (IsProOrEnterprise && licenseConfig != null && !String.IsNullOrEmpty(licenseConfig.AccountEmail) &&
                            !String.IsNullOrEmpty(licenseConfig.InvoiceNumber))
                        {
                            Upgrade.Upgrade.ActivateLicense();
                        }

                        //Adding ClientDependency Resources config to web.config                    
                        if (!ClientResourceManager.IsInstalled())
                        {
                            ClientResourceManager.AddConfiguration();
                        }

                        var installVersion = DataProvider.Instance().GetInstallVersion();
                        string strError = Config.UpdateInstallVersion(installVersion);

                        //Adding FCN mode to web.config
                        strError += Config.AddFCNMode(Config.FcnMode.Single);
                        if (!string.IsNullOrEmpty(strError))
                        {
                            Logger.Error(strError);
                        }

                        Response.Write("<h2>Installation Complete</h2>");
                        Response.Write("<br><br><h2><a href='../Default.aspx'>Click Here To Access Your Site</a></h2><br><br>");
                        Response.Flush();

                        //remove installwizard files
                        Upgrade.Upgrade.DeleteInstallerFiles();

                        //log APPLICATION_START event
                        Initialize.LogStart();

                        //Start Scheduler
                        Initialize.StartScheduler(true);
                    }
                    else
                    {
                        //upgrade error
                        Response.Write("<h2>Upgrade Error: " + strProviderPath + "</h2>");
                        Response.Flush();
                    }

                    //Write out Footer
                    HtmlUtils.WriteFooter(Response);
                }
                finally
                {
                    RegisterInstallEnd();
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="InstallResources">
          <declaration><![CDATA[private void InstallResources()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="422" sc="9" el="445" ec="10">Install\Install.aspx.cs</location>
            <body hash="2c8ec237c9376ae0ec7e43461d1c1714"><![CDATA[{
            //Start Timer
            Upgrade.Upgrade.StartTimer();

            //Write out Header
            HtmlUtils.WriteHeader(Response, "installResources");

            Response.Write("<h2>Install Resources Status Report</h2>");
            Response.Flush();

            //install new resources(s)
            var packages = Upgrade.Upgrade.GetInstallPackages();
            foreach (var package in packages)
            {
                Upgrade.Upgrade.InstallPackage(package.Key, package.Value.PackageType, true);
            }

            Response.Write("<h2>Installation Complete</h2>");
            Response.Write("<br><br><h2><a href='../Default.aspx'>Click Here To Access Your Site</a></h2><br><br>");
            Response.Flush();

            //Write out Footer
            HtmlUtils.WriteFooter(Response);
        }]]></body>
          </codeblock>
        </method>
        <method name="NoUpgrade">
          <declaration><![CDATA[private void NoUpgrade()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="448" sc="9" el="517" ec="10">Install\Install.aspx.cs</location>
            <body hash="cd4e2aa2a919989ccd5dad6e627c4538"><![CDATA[{
            //get path to script files
            string strProviderPath = DataProvider.Instance().GetProviderPath();
            if (!strProviderPath.StartsWith("ERROR:"))
            {
                //get current database version
                try
                {
                    using (var dr = DataProvider.Instance().GetDatabaseVersion())
                    {
                        if (dr.Read())
                        {
                            //Write out Header
                            HtmlUtils.WriteHeader(Response, "none");
                            string currentAssembly = DotNetNukeContext.Current.Application.Version.ToString(3);
                            string currentDatabase = dr["Major"] + "." + dr["Minor"] + "." + dr["Build"];
                            //do not show versions if the same to stop information leakage
                            if (currentAssembly == currentDatabase)
                            {
                                Response.Write("<h2>Current Assembly Version && current Database Version are identical.</h2>");
                            }
                            else
                            {
                                Response.Write("<h2>Current Assembly Version: " + currentAssembly + "</h2>");
                                //Call Upgrade with the current DB Version to upgrade an
                                //existing DNN installation
                                var strDatabaseVersion = ((int)dr["Major"]).ToString("00") + "." + ((int)dr["Minor"]).ToString("00") + "." + ((int)dr["Build"]).ToString("00");
                                Response.Write("<h2>Current Database Version: " + strDatabaseVersion + "</h2>");
                            }

                            Response.Write("<br><br><a href='Install.aspx?mode=Install'>Click Here To Upgrade DotNetNuke</a>");
                            Response.Flush();
                        }
                        else
                        {
                            //Write out Header
                            HtmlUtils.WriteHeader(Response, "noDBVersion");
                            Response.Write("<h2>Current Assembly Version: " + DotNetNukeContext.Current.Application.Version.ToString(3) + "</h2>");

                            Response.Write("<h2>Current Database Version: N/A</h2>");
                            Response.Write("<br><br><h2><a href='Install.aspx?mode=Install'>Click Here To Install DotNetNuke</a></h2>");
                            Response.Flush();
                        }
                        dr.Close();
                    }
                }
                catch (Exception ex)
                {
                    //Write out Header
                    Logger.Error(ex);
                    HtmlUtils.WriteHeader(Response, "error");
                    Response.Write("<h2>Current Assembly Version: " + DotNetNukeContext.Current.Application.Version.ToString(3) + "</h2>");

                    Response.Write("<h2>" + ex.Message + "</h2>");
                    Response.Flush();
                }
            }
            else
            {
                //Write out Header
                HtmlUtils.WriteHeader(Response, "error");
                Response.Write("<h2>Current Assembly Version: " + DotNetNukeContext.Current.Application.Version.ToString(3) + "</h2>");

                Response.Write("<h2>" + strProviderPath + "</h2>");
                Response.Flush();
            }

            //Write out Footer
            HtmlUtils.WriteFooter(Response);
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="524" sc="9" el="532" ec="10">Install\Install.aspx.cs</location>
            <body hash="b90cdd94b07c01164310263c89962b32"><![CDATA[{
            base.OnInit(e);
            //if previous config deleted create new empty one
            string installConfig = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Install", "DotNetNuke.install.config");
            if (!File.Exists(installConfig))
            {
                File.Copy(installConfig + ".resources", installConfig);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="535" sc="9" el="597" ec="10">Install\Install.aspx.cs</location>
            <body hash="d023f7fdac587cc2bee521156c2967ab"><![CDATA[{
            base.OnLoad(e);
            Config.AddFCNMode(Config.FcnMode.Single);
            //Get current Script time-out
            int scriptTimeOut = Server.ScriptTimeout;

            string mode = "";
            if ((Request.QueryString["mode"] != null))
            {
                mode = Request.QueryString["mode"].ToLower();
            }

            //Disable Client side caching
            Response.Cache.SetCacheability(HttpCacheability.ServerAndNoCache);

            //Check mode is not Nothing
            if (mode == "none")
            {
                NoUpgrade();
            }
            else
            {
                //Set Script timeout to MAX value
                Server.ScriptTimeout = int.MaxValue;

                switch (Globals.Status)
                {
                    case Globals.UpgradeStatus.Install:
                        InstallApplication();

                        //Force an App Restart
                        Config.Touch();
                        break;
                    case Globals.UpgradeStatus.Upgrade:
                        UpgradeApplication();

                        //Force an App Restart
                        Config.Touch();
                        break;
                    case Globals.UpgradeStatus.None:
                        //Check mode
                        switch (mode)
                        {
                            case "addportal":
                                AddPortal();
                                break;
                            case "installresources":
                                InstallResources();
                                break;
                            case "executescripts":
                                ExecuteScripts();
                                break;
                        }
                        break;
                    case Globals.UpgradeStatus.Error:
                        NoUpgrade();
                        break;
                }

                //restore Script timeout
                Server.ScriptTimeout = scriptTimeOut;                
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="RegisterInstallBegining">
          <declaration><![CDATA[private static void RegisterInstallBegining()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="215" sc="9" el="217" ec="10">Install\Install.aspx.cs</location>
            <body hash="832a75fdf7a144226e00ea2c0e9190ae"><![CDATA[{
            InstallBlocker.Instance.RegisterInstallBegining();
        }]]></body>
          </codeblock>
        </method>
        <method name="RegisterInstallEnd">
          <declaration><![CDATA[private static void RegisterInstallEnd()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="220" sc="9" el="222" ec="10">Install\Install.aspx.cs</location>
            <body hash="9c7fb2f034d54a9f22b5018be0afdcde"><![CDATA[{
            InstallBlocker.Instance.RegisterInstallEnd();
        }]]></body>
          </codeblock>
        </method>
        <method name="UpgradeApplication">
          <declaration><![CDATA[private void UpgradeApplication()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="254" sc="9" el="368" ec="10">Install\Install.aspx.cs</location>
            <body hash="5397cc3ee152e6781f5a0cc1a75051cc"><![CDATA[{ 
            try
            {
                var databaseVersion = DataProvider.Instance().GetVersion();

                //Start Timer
                Upgrade.Upgrade.StartTimer();

                //Write out Header
                HtmlUtils.WriteHeader(Response, "upgrade");

                //There could be an installation in progress
                lock (installLocker)
                {
                    if (InstallBlocker.Instance.IsInstallInProgress())
                    {
                        WriteInstallationHeader();
                        WriteInstallationInProgress();
                        return;
                    }
                    RegisterInstallBegining();
                }

                Response.Write("<h2>Current Assembly Version: " + Globals.FormatVersion(DotNetNukeContext.Current.Application.Version) + "</h2>");
                Response.Flush();

                //get path to script files
                string strProviderPath = DataProvider.Instance().GetProviderPath();
                if (!strProviderPath.StartsWith("ERROR:"))
                {
                    //get current database version
                    var strDatabaseVersion = Globals.FormatVersion(databaseVersion);

                    Response.Write("<h2>Current Database Version: " + strDatabaseVersion + "</h2>");
                    Response.Flush();

                    string ignoreWarning = Null.NullString;
                    string strWarning = Null.NullString;
                    if ((databaseVersion.Major == 3 && databaseVersion.Minor < 3) || (databaseVersion.Major == 4 && databaseVersion.Minor < 3))
                    {
                        //Users and profile have not been transferred
                        //Get the name of the data provider
                        ProviderConfiguration objProviderConfiguration = ProviderConfiguration.GetProviderConfiguration("data");

                        //Execute Special Script
                        Upgrade.Upgrade.ExecuteScript(strProviderPath + "Upgrade." + objProviderConfiguration.DefaultProvider);

                        if ((Request.QueryString["ignoreWarning"] != null))
                        {
                            ignoreWarning = Request.QueryString["ignoreWarning"].ToLower();
                        }
                        strWarning = Upgrade.Upgrade.CheckUpgrade();
                    }
                    else
                    {
                        ignoreWarning = "true";
                    }

                    //Check whether Upgrade is ok
                    if (strWarning == Null.NullString || ignoreWarning == "true")
                    {
                        Response.Write("<br><br>");
                        Response.Write("<h2>Upgrade Status Report</h2>");
                        Response.Flush();

                        //stop scheduler
                        SchedulingProvider.Instance().Halt("Stopped by Upgrade Process");

                        Upgrade.Upgrade.UpgradeDNN(strProviderPath, databaseVersion);

                        //Install optional resources if present
                        var packages = Upgrade.Upgrade.GetInstallPackages();
                        foreach (var package in packages)
                        {
                            Upgrade.Upgrade.InstallPackage(package.Key, package.Value.PackageType, true);
                        }

                        //calling GetInstallVersion after SQL scripts exection to ensure sp GetDatabaseInstallVersion exists
                        var installVersion = DataProvider.Instance().GetInstallVersion();
                        string strError = Config.UpdateInstallVersion(installVersion);

                        //Adding FCN mode to web.config
                        strError += Config.AddFCNMode(Config.FcnMode.Single);
                        if (!string.IsNullOrEmpty(strError))
                        {
                            Logger.Error(strError);
                        }
                        Response.Write("<h2>Upgrade Complete</h2>");
                        Response.Write("<br><br><h2><a href='../Default.aspx'>Click Here To Access Your Site</a></h2><br><br>");

                        //remove installwizard files
                        Upgrade.Upgrade.DeleteInstallerFiles();
                    }
                    else
                    {
                        Response.Write("<h2>Warning:</h2>" + strWarning.Replace(Environment.NewLine, "<br />"));

                        Response.Write("<br><br><a href='Install.aspx?mode=upgrade&ignoreWarning=true'>Click Here To Proceed With The Upgrade.</a>");
                    }
                    Response.Flush();
                }
                else
                {
                    Response.Write("<h2>Upgrade Error: " + strProviderPath + "</h2>");
                    Response.Flush();
                }

                //Write out Footer
                HtmlUtils.WriteFooter(Response);
            }
            finally
            {
                RegisterInstallEnd();
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="WriteInstallationHeader">
          <declaration><![CDATA[private void WriteInstallationHeader()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="225" sc="9" el="232" ec="10">Install\Install.aspx.cs</location>
            <body hash="ce70513e53f4a7454d2e507b60651e35"><![CDATA[{
            Response.Write("<h2>Version: " + Globals.FormatVersion(DotNetNukeContext.Current.Application.Version) + "</h2>");
            Response.Flush();

            Response.Write("<br><br>");
            Response.Write("<h2>Installation Status Report</h2>");
            Response.Flush();
        }]]></body>
          </codeblock>
        </method>
        <method name="WriteInstallationInProgress">
          <declaration><![CDATA[private void WriteInstallationInProgress()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="235" sc="9" el="240" ec="10">Install\Install.aspx.cs</location>
            <body hash="820ad1ad7cff15f2bd823c28aa33640a"><![CDATA[{
            HtmlUtils.WriteFeedback(HttpContext.Current.Response,
                                    0,
                                    Localization.Localization.GetString("ThereIsAInstallationCurrentlyInProgress.Error", Localization.Localization.GlobalResourceFile) + "<br>");
            Response.Flush();
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="installLocker">
          <declaration><![CDATA[private static readonly object installLocker = new object();]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Logger">
          <declaration><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof(Install));]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="UpgradeWizard">
      <declaration><![CDATA[public class UpgradeWizard : PageBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".cctor">
          <declaration><![CDATA[static UpgradeWizard()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="62" sc="9" el="411" ec="10">Install\UpgradeWizard.aspx.cs</location>
            <body hash="32e8000a92564ec0b7773d418db974d0"><![CDATA[protected static readonly string StatusFilename = "upgradestat.log.resources.txt";
        protected static new string LocalResourceFile = "~/Install/App_LocalResources/UpgradeWizard.aspx.resx";
        private static string _culture;
        private static string[] _supportedLanguages;

        private static IInstallationStep _currentStep;
        private static bool _upgradeRunning;
        private static int _upgradeProgress;

        #endregion

        #region Protected Members

        protected Version ApplicationVersion
        {
            get
            {
                return DotNetNukeContext.Current.Application.Version;
            }
        }

        protected Version CurrentVersion
        {
            get
            {
                return DotNetNukeContext.Current.Application.CurrentVersion;
            }
        }

        #endregion

        #region Private Properties

        private static string StatusFile
        {
            get
            {
                return Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Install", StatusFilename);
            }
        }

        private static bool IsAuthenticated { get; set; }

        #endregion

        #region Private Methods

        private void LocalizePage()
        {
            SetBrowserLanguage();
            Page.Title = LocalizeString("Title");
            if (Globals.FormatVersion(ApplicationVersion) == Globals.FormatVersion(CurrentVersion))
            {
                versionLabel.Visible = false;
                currentVersionLabel.Visible = false;
                versionsMatch.Text = LocalizeString("VersionsMatch");
                if (Globals.IncrementalVersionExists(CurrentVersion))
                {
                    versionsMatch.Text = LocalizeString("VersionsMatchButIncrementalExists");
                }
            }
            else
            {
                versionLabel.Text = string.Format(LocalizeString("Version"), Globals.FormatVersion(ApplicationVersion));
                currentVersionLabel.Text = string.Format(LocalizeString("CurrentVersion"), Globals.FormatVersion(CurrentVersion));  
            }
        }

        private static void GetInstallerLocales()
        {
            var filePath = Globals.ApplicationMapPath + LocalesFile.Replace("/", "\\");

            if (File.Exists(filePath))
            {
                var doc = new XPathDocument(filePath);
                var languages = doc.CreateNavigator().Select("root/language");

                if (languages.Count > 0)
                {
                    _supportedLanguages = new string[languages.Count];
                    var i = 0;
                    foreach (XPathNavigator nav in languages)
                    {
                        if (nav.NodeType != XPathNodeType.Comment)
                        {
                            _supportedLanguages.SetValue(nav.GetAttribute("key", ""), i);
                        }
                        i++;
                    }
                }
                else
                {
                    _supportedLanguages = new string[1];
                    _supportedLanguages.SetValue("en-US", 0);
                }
            }
            else
            {
                _supportedLanguages = new string[1];
                _supportedLanguages.SetValue("en-US",0);
            }
        }

        private void SetBrowserLanguage()
        {
            string cultureCode;
            if (string.IsNullOrEmpty(PageLocale.Value) && string.IsNullOrEmpty(_culture))
            {
                cultureCode = TestableLocalization.Instance.BestCultureCodeBasedOnBrowserLanguages(_supportedLanguages);
            }
            else if (string.IsNullOrEmpty(PageLocale.Value) && !string.IsNullOrEmpty(_culture))
            {
                cultureCode = _culture;
            }
            else
            {
                cultureCode = PageLocale.Value;
            }

            PageLocale.Value = cultureCode;
            _culture = cultureCode;

            Thread.CurrentThread.CurrentUICulture = new CultureInfo(cultureCode);
        }

        private static string LocalizeStringStatic(string key)
        {
            return Localization.Localization.GetString(key, LocalResourceFile, _culture);
        }
        
        private static void LaunchUpgrade()
        {
            //Get current Script time-out
            var scriptTimeOut = HttpContext.Current.Server.ScriptTimeout;

            //Set Script timeout to MAX value
            HttpContext.Current.Server.ScriptTimeout = int.MaxValue;

            if (_culture != null) Thread.CurrentThread.CurrentUICulture = new CultureInfo(_culture);

            //bail out early if upgrade is in progress
            if (_upgradeRunning)
                return;

            var percentForEachStep = 100 / _steps.Count;
            var useGenericPercent = false;
            var totalPercent = _steps.Sum(step => step.Value);
            if (totalPercent != 100) useGenericPercent = true;

            _upgradeRunning = true;
            _upgradeProgress = 0;

            //Output the current time for the user
            CurrentStepActivity(string.Concat(Localization.Localization.GetString("UpgradeStarted", LocalResourceFile),
                ":", DateTime.Now.ToString()));

            foreach (var step in _steps)
            {
                _currentStep = step.Key;

                try
                {
                    _currentStep.Activity += CurrentStepActivity;
                    _currentStep.Execute();
                }
                catch (Exception ex)
                {
                    CurrentStepActivity(Localization.Localization.GetString("ErrorInStep", LocalResourceFile) + ": " + ex.Message);
                    _upgradeRunning = false;
                    return;
                }
                switch (_currentStep.Status)
                {
                    case StepStatus.AppRestart:
                        _upgradeRunning = false;
                        HttpContext.Current.Response.Redirect(HttpContext.Current.Request.RawUrl, true);
                        break;
                    default:
                        if (_currentStep.Status != StepStatus.Done)
                        {
                            CurrentStepActivity(string.Format(Localization.Localization.GetString("ErrorInStep", LocalResourceFile)
                                                                                                  , _currentStep.Errors.Count > 0 ? string.Join(",", _currentStep.Errors.ToArray()) : _currentStep.Details));
                            _upgradeRunning = false;
                            return;
                        }
                        break;
                }
                if (useGenericPercent)
                    _upgradeProgress += percentForEachStep;
                else
                    _upgradeProgress += step.Value;
            }

            _currentStep = null;
            _upgradeProgress = 100;
            CurrentStepActivity(Localization.Localization.GetString("UpgradeDone", LocalResourceFile));

            //indicate we are done
            _upgradeRunning = false;

            //restore Script timeout
            HttpContext.Current.Server.ScriptTimeout = scriptTimeOut;

        }

        private static void CurrentStepActivity(string status)
        {
            var percentage = (_currentStep == null) ? _upgradeProgress : _upgradeProgress + (_currentStep.Percentage / _steps.Count);
            var obj = new
            {
                progress = percentage,
                details = status,
                check0 = upgradeDatabase.Status.ToString() + (upgradeDatabase.Errors.Count == 0 ? "" : " Errors " + upgradeDatabase.Errors.Count),
                check1 = upgradeExtensions.Status.ToString() + (upgradeExtensions.Errors.Count == 0 ? "" : " Errors " + upgradeExtensions.Errors.Count)
            };

            try
            {
                if (!File.Exists(StatusFile)) File.CreateText(StatusFile);
                using (var sw = new StreamWriter(StatusFile, true))
                {
                    sw.WriteLine(obj.ToJson());
                    sw.Close();
                }
            }
            catch (Exception)
            {
                //TODO - do something                
            }
        }

		private void CompleteUpgrade()
        {
            //Delete the status file.
            try
            {
                File.Delete(StatusFile);
            }
            catch (Exception)
            {
                //Do nothing
            }

            //remove installwizard files added back by upgrade package
            Upgrade.Upgrade.DeleteInstallerFiles();

            Config.Touch();
            Response.Redirect("../Default.aspx", true);
        }

        private void SslRequiredCheck()
        {
            if (Entities.Host.Host.UpgradeForceSsl && !Request.IsSecureConnection)
            {
                var sslDomain = Entities.Host.Host.SslDomain;
                if (string.IsNullOrEmpty(sslDomain))
                {
                    sslDomain = Request.Url.Host;
                }
                else if (sslDomain.Contains("://"))
                {
                    sslDomain = sslDomain.Substring(sslDomain.IndexOf("://") + 3);
                }

                var sslUrl = string.Format("https://{0}{1}",
                    sslDomain, Request.RawUrl);

                Response.Redirect(sslUrl, true);
            }
        }

        #endregion

        #region Protected Methods
        protected string LocalizeString(string key)
        {
            return Localization.Localization.GetString(key, LocalResourceFile, _culture);
        }
        
        protected override void OnError(EventArgs e)
        {
            HttpContext.Current.Response.Clear();
            HttpContext.Current.Server.Transfer("~/ErrorPage.aspx");
        }
        #endregion

        #region Event Handlers
        /// -----------------------------------------------------------------------------
        /// <summary>
        /// Page_Init runs when the Page is initialised
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// -----------------------------------------------------------------------------
        protected override void OnInit(EventArgs e)
        {
            base.OnInit(e);
            SslRequiredCheck();
            GetInstallerLocales();
        }

        /// -----------------------------------------------------------------------------
        /// <summary>
        /// Page_Load runs when the Page loads
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// -----------------------------------------------------------------------------
        protected override void OnLoad(EventArgs e)
        {
            if (InstallBlocker.Instance.IsInstallInProgress())
            {
                Response.Redirect("Install.aspx", true);
            }

            base.OnLoad(e);
            LocalizePage();

			if (Request.RawUrl.EndsWith("?complete"))
			{
				CompleteUpgrade();
			}
            
            //Create Status Files
            if (!Page.IsPostBack)
            {
                if (!File.Exists(StatusFile)) File.CreateText(StatusFile).Close();
            }
        }
        #endregion
        
        #region Web Methods

        //steps shown in UI
        static IInstallationStep upgradeDatabase = new InstallDatabaseStep();
        static IInstallationStep upgradeExtensions = new InstallExtensionsStep();

        //Ordered List of Steps (and weight in percentage) to be executed
        private static IDictionary<IInstallationStep, int> _steps = new Dictionary<IInstallationStep, int>
                                {
                                    {new AddFcnModeStep(), 1},
                                    {upgradeDatabase, 50}, 
                                    {upgradeExtensions, 49}, 
                                    {new InstallVersionStep(), 1}
                                };

        static UpgradeWizard()
        {
            IsAuthenticated = false;
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[public UpgradeWizard()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="CompleteUpgrade">
          <declaration><![CDATA[private void CompleteUpgrade()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="294" sc="9" el="310" ec="10">Install\UpgradeWizard.aspx.cs</location>
            <body hash="f9962baf8421dc3129c95041500b95d2"><![CDATA[{
            //Delete the status file.
            try
            {
                File.Delete(StatusFile);
            }
            catch (Exception)
            {
                //Do nothing
            }

            //remove installwizard files added back by upgrade package
            Upgrade.Upgrade.DeleteInstallerFiles();

            Config.Touch();
            Response.Redirect("../Default.aspx", true);
        }]]></body>
          </codeblock>
        </method>
        <method name="CurrentStepActivity">
          <declaration><![CDATA[private static void CurrentStepActivity(string status)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="268" sc="9" el="291" ec="10">Install\UpgradeWizard.aspx.cs</location>
            <body hash="a51094909287ab19ccb197381e0213a1"><![CDATA[{
            var percentage = (_currentStep == null) ? _upgradeProgress : _upgradeProgress + (_currentStep.Percentage / _steps.Count);
            var obj = new
            {
                progress = percentage,
                details = status,
                check0 = upgradeDatabase.Status.ToString() + (upgradeDatabase.Errors.Count == 0 ? "" : " Errors " + upgradeDatabase.Errors.Count),
                check1 = upgradeExtensions.Status.ToString() + (upgradeExtensions.Errors.Count == 0 ? "" : " Errors " + upgradeExtensions.Errors.Count)
            };

            try
            {
                if (!File.Exists(StatusFile)) File.CreateText(StatusFile);
                using (var sw = new StreamWriter(StatusFile, true))
                {
                    sw.WriteLine(obj.ToJson());
                    sw.Close();
                }
            }
            catch (Exception)
            {
                //TODO - do something                
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetInstallationLog">
          <declaration><![CDATA[public static object GetInstallationLog(int startRow)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="462" sc="9" el="497" ec="10">Install\UpgradeWizard.aspx.cs</location>
            <body hash="1590cd40072329d6b29be234dec9517b"><![CDATA[{
            if (IsAuthenticated == false) return string.Empty;

            var data = string.Empty;
            string logFile = "InstallerLog" + DateTime.Now.Year.ToString() + DateTime.Now.Month.ToString() + DateTime.Now.Day.ToString() + ".resources";
            try
            {
                var lines = File.ReadAllLines(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Portals", "_default", "logs", logFile));
                var errorLogged = false;
                if (lines.Length > startRow)
                {
                    var count = lines.Length - startRow > 500 ? 500 : lines.Length - startRow;
                    System.Text.StringBuilder sb = new System.Text.StringBuilder();
                    for (var i = startRow; i < startRow + count; i++)
                    {
                        if (lines[i].Contains("[ERROR]"))
                        {
                            sb.Append(lines[i]);
                            sb.Append("<br/>");
                            errorLogged = true;
                        }
                    }

                    data = sb.ToString();
                }
                if (errorLogged == false)
                {
                    Localization.Localization.GetString("NoErrorsLogged", "~/Install/App_LocalResources/InstallWizard.aspx.resx");
                }
            }
            catch (Exception)
            {
            }

            return data;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetInstallerLocales">
          <declaration><![CDATA[private static void GetInstallerLocales()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="131" sc="9" el="163" ec="10">Install\UpgradeWizard.aspx.cs</location>
            <body hash="b0bafadcce3d464357504a094cdff567"><![CDATA[{
            var filePath = Globals.ApplicationMapPath + LocalesFile.Replace("/", "\\");

            if (File.Exists(filePath))
            {
                var doc = new XPathDocument(filePath);
                var languages = doc.CreateNavigator().Select("root/language");

                if (languages.Count > 0)
                {
                    _supportedLanguages = new string[languages.Count];
                    var i = 0;
                    foreach (XPathNavigator nav in languages)
                    {
                        if (nav.NodeType != XPathNodeType.Comment)
                        {
                            _supportedLanguages.SetValue(nav.GetAttribute("key", ""), i);
                        }
                        i++;
                    }
                }
                else
                {
                    _supportedLanguages = new string[1];
                    _supportedLanguages.SetValue("en-US", 0);
                }
            }
            else
            {
                _supportedLanguages = new string[1];
                _supportedLanguages.SetValue("en-US",0);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="LaunchUpgrade">
          <declaration><![CDATA[private static void LaunchUpgrade()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="193" sc="9" el="265" ec="10">Install\UpgradeWizard.aspx.cs</location>
            <body hash="c7958d8330b5ae9f3d1034360dfe44eb"><![CDATA[{
            //Get current Script time-out
            var scriptTimeOut = HttpContext.Current.Server.ScriptTimeout;

            //Set Script timeout to MAX value
            HttpContext.Current.Server.ScriptTimeout = int.MaxValue;

            if (_culture != null) Thread.CurrentThread.CurrentUICulture = new CultureInfo(_culture);

            //bail out early if upgrade is in progress
            if (_upgradeRunning)
                return;

            var percentForEachStep = 100 / _steps.Count;
            var useGenericPercent = false;
            var totalPercent = _steps.Sum(step => step.Value);
            if (totalPercent != 100) useGenericPercent = true;

            _upgradeRunning = true;
            _upgradeProgress = 0;

            //Output the current time for the user
            CurrentStepActivity(string.Concat(Localization.Localization.GetString("UpgradeStarted", LocalResourceFile),
                ":", DateTime.Now.ToString()));

            foreach (var step in _steps)
            {
                _currentStep = step.Key;

                try
                {
                    _currentStep.Activity += CurrentStepActivity;
                    _currentStep.Execute();
                }
                catch (Exception ex)
                {
                    CurrentStepActivity(Localization.Localization.GetString("ErrorInStep", LocalResourceFile) + ": " + ex.Message);
                    _upgradeRunning = false;
                    return;
                }
                switch (_currentStep.Status)
                {
                    case StepStatus.AppRestart:
                        _upgradeRunning = false;
                        HttpContext.Current.Response.Redirect(HttpContext.Current.Request.RawUrl, true);
                        break;
                    default:
                        if (_currentStep.Status != StepStatus.Done)
                        {
                            CurrentStepActivity(string.Format(Localization.Localization.GetString("ErrorInStep", LocalResourceFile)
                                                                                                  , _currentStep.Errors.Count > 0 ? string.Join(",", _currentStep.Errors.ToArray()) : _currentStep.Details));
                            _upgradeRunning = false;
                            return;
                        }
                        break;
                }
                if (useGenericPercent)
                    _upgradeProgress += percentForEachStep;
                else
                    _upgradeProgress += step.Value;
            }

            _currentStep = null;
            _upgradeProgress = 100;
            CurrentStepActivity(Localization.Localization.GetString("UpgradeDone", LocalResourceFile));

            //indicate we are done
            _upgradeRunning = false;

            //restore Script timeout
            HttpContext.Current.Server.ScriptTimeout = scriptTimeOut;

        }]]></body>
          </codeblock>
        </method>
        <method name="LocalizePage">
          <declaration><![CDATA[private void LocalizePage()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="110" sc="9" el="128" ec="10">Install\UpgradeWizard.aspx.cs</location>
            <body hash="c340c8affdbbcdd52a8044d1e9e6bc06"><![CDATA[{
            SetBrowserLanguage();
            Page.Title = LocalizeString("Title");
            if (Globals.FormatVersion(ApplicationVersion) == Globals.FormatVersion(CurrentVersion))
            {
                versionLabel.Visible = false;
                currentVersionLabel.Visible = false;
                versionsMatch.Text = LocalizeString("VersionsMatch");
                if (Globals.IncrementalVersionExists(CurrentVersion))
                {
                    versionsMatch.Text = LocalizeString("VersionsMatchButIncrementalExists");
                }
            }
            else
            {
                versionLabel.Text = string.Format(LocalizeString("Version"), Globals.FormatVersion(ApplicationVersion));
                currentVersionLabel.Text = string.Format(LocalizeString("CurrentVersion"), Globals.FormatVersion(CurrentVersion));  
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="LocalizeString">
          <declaration><![CDATA[protected string LocalizeString(string key)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="337" sc="9" el="339" ec="10">Install\UpgradeWizard.aspx.cs</location>
            <body hash="5990f216b7655e5a506bdbd6d7bfabd5"><![CDATA[{
            return Localization.Localization.GetString(key, LocalResourceFile, _culture);
        }]]></body>
          </codeblock>
        </method>
        <method name="LocalizeStringStatic">
          <declaration><![CDATA[private static string LocalizeStringStatic(string key)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="188" sc="9" el="190" ec="10">Install\UpgradeWizard.aspx.cs</location>
            <body hash="5990f216b7655e5a506bdbd6d7bfabd5"><![CDATA[{
            return Localization.Localization.GetString(key, LocalResourceFile, _culture);
        }]]></body>
          </codeblock>
        </method>
        <method name="OnError">
          <declaration><![CDATA[protected override void OnError(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="342" sc="9" el="345" ec="10">Install\UpgradeWizard.aspx.cs</location>
            <body hash="574ee279d2617abf8b519d3f9bf2390e"><![CDATA[{
            HttpContext.Current.Response.Clear();
            HttpContext.Current.Server.Transfer("~/ErrorPage.aspx");
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="357" sc="9" el="361" ec="10">Install\UpgradeWizard.aspx.cs</location>
            <body hash="4fce87f3321bfd4a80f8e6021f520115"><![CDATA[{
            base.OnInit(e);
            SslRequiredCheck();
            GetInstallerLocales();
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="371" sc="9" el="390" ec="10">Install\UpgradeWizard.aspx.cs</location>
            <body hash="aa3328e65632ecba41892e3b71bb1597"><![CDATA[{
            if (InstallBlocker.Instance.IsInstallInProgress())
            {
                Response.Redirect("Install.aspx", true);
            }

            base.OnLoad(e);
            LocalizePage();

			if (Request.RawUrl.EndsWith("?complete"))
			{
				CompleteUpgrade();
			}
            
            //Create Status Files
            if (!Page.IsPostBack)
            {
                if (!File.Exists(StatusFile)) File.CreateText(StatusFile).Close();
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="RunUpgrade">
          <declaration><![CDATA[public static void RunUpgrade(Dictionary<string, string> accountInfo)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="444" sc="9" el="458" ec="10">Install\UpgradeWizard.aspx.cs</location>
            <body hash="44864469f9baa1aa49ed73ca66a4498d"><![CDATA[{
            string errorMsg;
            var result = VerifyHostUser(accountInfo, out errorMsg);

            if (result == true)
            {
                _upgradeRunning = false;
                LaunchUpgrade();
                // DNN-8833: Must run this after all other upgrade steps are done; sequence is important.
                HostController.Instance.Update("DnnImprovementProgram", accountInfo["dnnImprovementProgram"], false);

                //DNN-9355: reset the installer files check flag after each upgrade, to make sure the installer files removed.
                HostController.Instance.Update("InstallerFilesRemoved", "False", true);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="SetBrowserLanguage">
          <declaration><![CDATA[private void SetBrowserLanguage()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="166" sc="9" el="185" ec="10">Install\UpgradeWizard.aspx.cs</location>
            <body hash="7ef868955b19972c3d9af88ad24526e9"><![CDATA[{
            string cultureCode;
            if (string.IsNullOrEmpty(PageLocale.Value) && string.IsNullOrEmpty(_culture))
            {
                cultureCode = TestableLocalization.Instance.BestCultureCodeBasedOnBrowserLanguages(_supportedLanguages);
            }
            else if (string.IsNullOrEmpty(PageLocale.Value) && !string.IsNullOrEmpty(_culture))
            {
                cultureCode = _culture;
            }
            else
            {
                cultureCode = PageLocale.Value;
            }

            PageLocale.Value = cultureCode;
            _culture = cultureCode;

            Thread.CurrentThread.CurrentUICulture = new CultureInfo(cultureCode);
        }]]></body>
          </codeblock>
        </method>
        <method name="SslRequiredCheck">
          <declaration><![CDATA[private void SslRequiredCheck()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="313" sc="9" el="331" ec="10">Install\UpgradeWizard.aspx.cs</location>
            <body hash="a5b7dead6f6b6590b6f86eb875ae323d"><![CDATA[{
            if (Entities.Host.Host.UpgradeForceSsl && !Request.IsSecureConnection)
            {
                var sslDomain = Entities.Host.Host.SslDomain;
                if (string.IsNullOrEmpty(sslDomain))
                {
                    sslDomain = Request.Url.Host;
                }
                else if (sslDomain.Contains("://"))
                {
                    sslDomain = sslDomain.Substring(sslDomain.IndexOf("://") + 3);
                }

                var sslUrl = string.Format("https://{0}{1}",
                    sslDomain, Request.RawUrl);

                Response.Redirect(sslUrl, true);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="ValidateInput">
          <declaration><![CDATA[public static Tuple<bool, string> ValidateInput(Dictionary<string, string> accountInfo)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="415" sc="9" el="420" ec="10">Install\UpgradeWizard.aspx.cs</location>
            <body hash="64d2942674a7dfeee2da97e77cc7f66c"><![CDATA[{
            string errorMsg;
            var result = VerifyHostUser(accountInfo, out errorMsg);

            return new Tuple<bool, string>(result, errorMsg);
        }]]></body>
          </codeblock>
        </method>
        <method name="VerifyHostUser">
          <declaration><![CDATA[private static bool VerifyHostUser(Dictionary<string, string> accountInfo, out string errorMsg)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="423" sc="9" el="440" ec="10">Install\UpgradeWizard.aspx.cs</location>
            <body hash="b0a179184b32ecaf5a83eb96bd4c49b6"><![CDATA[{
            var result = true;
            errorMsg = string.Empty;

            UserLoginStatus loginStatus = UserLoginStatus.LOGIN_FAILURE;
            UserInfo hostUser = UserController.ValidateUser(-1, accountInfo["username"], accountInfo["password"], "DNN", "", "", AuthenticationLoginBase.GetIPAddress(), ref loginStatus);

            if (loginStatus == UserLoginStatus.LOGIN_FAILURE || !hostUser.IsSuperUser)
            {
                result = false;
                errorMsg = LocalizeStringStatic("InvalidCredentials");
            }
            else
            {
                IsAuthenticated = true;
            }
            return result;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_culture">
          <declaration><![CDATA[private static string _culture;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_currentStep">
          <declaration><![CDATA[private static IInstallationStep _currentStep;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_steps">
          <declaration><![CDATA[private static IDictionary<IInstallationStep, int> _steps;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_supportedLanguages">
          <declaration><![CDATA[private static string[] _supportedLanguages;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_upgradeProgress">
          <declaration><![CDATA[private static int _upgradeProgress;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_upgradeRunning">
          <declaration><![CDATA[private static bool _upgradeRunning;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="BodySCRIPTS">
          <declaration><![CDATA[protected PlaceHolder BodySCRIPTS;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkImprovementProgram">
          <declaration><![CDATA[protected CheckBox chkImprovementProgram;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ClientDependencyHeadCss">
          <declaration><![CDATA[protected PlaceHolder ClientDependencyHeadCss;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ClientDependencyHeadJs">
          <declaration><![CDATA[protected PlaceHolder ClientDependencyHeadJs;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ClientResourceIncludes">
          <declaration><![CDATA[protected PlaceHolder ClientResourceIncludes;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="continueLink">
          <declaration><![CDATA[protected LinkButton continueLink;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="currentVersionLabel">
          <declaration><![CDATA[protected Label currentVersionLabel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="dnnInstall">
          <declaration><![CDATA[protected HtmlGenericControl dnnInstall;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="form1">
          <declaration><![CDATA[protected HtmlForm form1;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="improvementsProgram">
          <declaration><![CDATA[protected HtmlGenericControl improvementsProgram;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Label2">
          <declaration><![CDATA[protected Label Label2;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lang_de_DE">
          <declaration><![CDATA[protected LinkButton lang_de_DE;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lang_en_US">
          <declaration><![CDATA[protected LinkButton lang_en_US;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lang_es_ES">
          <declaration><![CDATA[protected LinkButton lang_es_ES;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lang_fr_FR">
          <declaration><![CDATA[protected LinkButton lang_fr_FR;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lang_it_IT">
          <declaration><![CDATA[protected LinkButton lang_it_IT;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lang_nl_NL">
          <declaration><![CDATA[protected LinkButton lang_nl_NL;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblAccountInfoError">
          <declaration><![CDATA[protected Label lblAccountInfoError;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblDotNetNukeUpgrade">
          <declaration><![CDATA[protected Label lblDotNetNukeUpgrade;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblImprovementProgExplain">
          <declaration><![CDATA[protected Label lblImprovementProgExplain;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblImprovementProgram">
          <declaration><![CDATA[protected Label lblImprovementProgram;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblImprovementProgTitle">
          <declaration><![CDATA[protected Label lblImprovementProgTitle;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblIntroDetail">
          <declaration><![CDATA[protected Label lblIntroDetail;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblPassword">
          <declaration><![CDATA[protected Label lblPassword;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblUpgradeIntroInfo">
          <declaration><![CDATA[protected Label lblUpgradeIntroInfo;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblUsername">
          <declaration><![CDATA[protected Label lblUsername;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="LocalesFile">
          <declaration><![CDATA[private const string LocalesFile = "/Install/App_LocalResources/Locales.xml";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="LocalResourceFile">
          <declaration><![CDATA[protected new static string LocalResourceFile;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="PageLocale">
          <declaration><![CDATA[protected HtmlInputHidden PageLocale;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="scManager">
          <declaration><![CDATA[protected ScriptManager scManager;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="SCRIPTS">
          <declaration><![CDATA[protected PlaceHolder SCRIPTS;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="StatusFilename">
          <declaration><![CDATA[protected static readonly string StatusFilename;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtErrorMessage">
          <declaration><![CDATA[protected Label txtErrorMessage;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtPassword">
          <declaration><![CDATA[protected TextBox txtPassword;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtUsername">
          <declaration><![CDATA[protected TextBox txtUsername;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="upgrade">
          <declaration><![CDATA[protected HtmlGenericControl upgrade;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="upgradeDatabase">
          <declaration><![CDATA[private static IInstallationStep upgradeDatabase;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="upgradeExtensions">
          <declaration><![CDATA[private static IInstallationStep upgradeExtensions;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="versionLabel">
          <declaration><![CDATA[protected Label versionLabel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="versionsMatch">
          <declaration><![CDATA[protected Label versionsMatch;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="visitSite">
          <declaration><![CDATA[protected HyperLink visitSite;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="ApplicationVersion">
          <declaration><![CDATA[protected Version ApplicationVersion]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="78" sc="13" el="80" ec="14">Install\UpgradeWizard.aspx.cs</location>
            <body hash="84d745e0bc8abc58ea6aae081200fcfa"><![CDATA[{
                return DotNetNukeContext.Current.Application.Version;
            }]]></body>
          </codeblock>
        </property>
        <property name="CurrentVersion">
          <declaration><![CDATA[protected Version CurrentVersion]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="86" sc="13" el="88" ec="14">Install\UpgradeWizard.aspx.cs</location>
            <body hash="94411e8a2d6bf671e0114a489ce187ff"><![CDATA[{
                return DotNetNukeContext.Current.Application.CurrentVersion;
            }]]></body>
          </codeblock>
        </property>
        <property name="IsAuthenticated">
          <declaration><![CDATA[private static bool IsAuthenticated]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="103" sc="47" el="103" ec="51">Install\UpgradeWizard.aspx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="103" sc="52" el="103" ec="56">Install\UpgradeWizard.aspx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="StatusFile">
          <declaration><![CDATA[private static string StatusFile]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="98" sc="13" el="100" ec="14">Install\UpgradeWizard.aspx.cs</location>
            <body hash="55e3a596352194cf9edaeedad883217d"><![CDATA[{
                return Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Install", StatusFilename);
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="WizardUser">
      <declaration><![CDATA[public class WizardUser : UserControl]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public WizardUser()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="219" sc="9" el="242" ec="10">Install\WizardUser.ascx.cs</location>
            <body hash="a0c26500599b19d98401a2e3127c98a4"><![CDATA[{
			base.OnLoad(e);

			if(IsPostBack)
			{
				if(!string.IsNullOrEmpty(txtPassword.Text))
				{
					ViewState["Password"] = txtPassword.Text;
				}
				else if(ViewState["Password"] != null)
				{
					txtPassword.Text = ViewState["Password"].ToString();
				}

				if (!string.IsNullOrEmpty(txtConfirm.Text))
				{
					ViewState["Confirm"] = txtConfirm.Text;
				}
				else if (ViewState["Confirm"] != null)
				{
					txtConfirm.Text = ViewState["Confirm"].ToString();
				}
			}
        }]]></body>
          </codeblock>
        </method>
        <method name="OnPreRender">
          <declaration><![CDATA[protected override void OnPreRender(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="252" sc="3" el="258" ec="4">Install\WizardUser.ascx.cs</location>
            <body hash="62e5343d0c2904e3a71fa030c376dbe1"><![CDATA[{
			base.OnPreRender(e);

			//Make sure that the password is not cleared on pastback
			txtConfirm.Attributes["value"] = txtConfirm.Text;
			txtPassword.Attributes["value"] = txtPassword.Text;
		}]]></body>
          </codeblock>
        </method>
        <method name="Validate">
          <declaration><![CDATA[public string Validate()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="182" sc="9" el="209" ec="10">Install\WizardUser.ascx.cs</location>
            <body hash="68da7c5270c3ea7b8a3ccd5aaf9f0af6"><![CDATA[{
            string strErrorMessage = Null.NullString;
            if (txtUserName.Text.Length < 4)
            {
                strErrorMessage = "MinUserNamelength";
            }
            else if (string.IsNullOrEmpty(txtPassword.Text))
            {
                strErrorMessage = "NoPassword";
            }
            else if (txtUserName.Text == txtPassword.Text)
            {
                strErrorMessage = "PasswordUser";
            }
            else if (txtPassword.Text.Length < MembershipProviderConfig.MinPasswordLength)
            {
                strErrorMessage = "PasswordLength";
            }
            else if (txtPassword.Text != txtConfirm.Text)
            {
                strErrorMessage = "ConfirmPassword";
            }
            else if (!Globals.EmailValidatorRegex.IsMatch(txtEmail.Text))
            {
                strErrorMessage = "InValidEmail";
            }
            return strErrorMessage;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="lblConfirm">
          <declaration><![CDATA[protected Label lblConfirm;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblEmail">
          <declaration><![CDATA[protected Label lblEmail;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblFirstName">
          <declaration><![CDATA[protected Label lblFirstName;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblLastName">
          <declaration><![CDATA[protected Label lblLastName;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblPassword">
          <declaration><![CDATA[protected Label lblPassword;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblUserName">
          <declaration><![CDATA[protected Label lblUserName;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtConfirm">
          <declaration><![CDATA[protected TextBox txtConfirm;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtEmail">
          <declaration><![CDATA[protected TextBox txtEmail;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtFirstName">
          <declaration><![CDATA[protected TextBox txtFirstName;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtLastName">
          <declaration><![CDATA[protected TextBox txtLastName;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtPassword">
          <declaration><![CDATA[protected TextBox txtPassword;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtUserName">
          <declaration><![CDATA[protected TextBox txtUserName;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="Confirm">
          <declaration><![CDATA[public string Confirm]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="88" sc="13" el="90" ec="14">Install\WizardUser.ascx.cs</location>
            <body hash="4d003749b925540a8ebc5f69579dc914"><![CDATA[{
                return txtConfirm.Text;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="92" sc="13" el="94" ec="14">Install\WizardUser.ascx.cs</location>
            <body hash="653a0390a993106663b3aced5846b338"><![CDATA[{
                txtConfirm.Text = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="ConfirmLabel">
          <declaration><![CDATA[public string ConfirmLabel]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="160" sc="13" el="162" ec="14">Install\WizardUser.ascx.cs</location>
            <body hash="c07fb7bdd63e00c2dc9557a902235b04"><![CDATA[{
                return lblConfirm.Text;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="164" sc="13" el="166" ec="14">Install\WizardUser.ascx.cs</location>
            <body hash="fa8c674625d068a7681400939ea70b12"><![CDATA[{
                lblConfirm.Text = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="Email">
          <declaration><![CDATA[public string Email]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="100" sc="13" el="102" ec="14">Install\WizardUser.ascx.cs</location>
            <body hash="3974fcf166c57cf6be59407be3e11f38"><![CDATA[{
                return txtEmail.Text;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="104" sc="13" el="106" ec="14">Install\WizardUser.ascx.cs</location>
            <body hash="2da41f4f1f85c58886716aa7c840c38b"><![CDATA[{
                txtEmail.Text = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="EmailLabel">
          <declaration><![CDATA[public string EmailLabel]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="172" sc="13" el="174" ec="14">Install\WizardUser.ascx.cs</location>
            <body hash="577e4b1c44e556d3608f5a0d815ec301"><![CDATA[{
                return lblEmail.Text;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="176" sc="13" el="178" ec="14">Install\WizardUser.ascx.cs</location>
            <body hash="f02ed996348f94f363828959d5a79bf6"><![CDATA[{
                lblEmail.Text = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="FirstName">
          <declaration><![CDATA[public string FirstName]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="40" sc="13" el="42" ec="14">Install\WizardUser.ascx.cs</location>
            <body hash="b439386a5a35b107367622cf75b9dfef"><![CDATA[{
                return txtFirstName.Text;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="44" sc="13" el="46" ec="14">Install\WizardUser.ascx.cs</location>
            <body hash="16ab0789d788b47c1438da9e45962c37"><![CDATA[{
                txtFirstName.Text = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="FirstNameLabel">
          <declaration><![CDATA[public string FirstNameLabel]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="112" sc="13" el="114" ec="14">Install\WizardUser.ascx.cs</location>
            <body hash="84c24d325498312f15ade31e5b6b9851"><![CDATA[{
                return lblFirstName.Text;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="116" sc="13" el="118" ec="14">Install\WizardUser.ascx.cs</location>
            <body hash="3e7b0f723e35cd89f059c3bb28c0bffe"><![CDATA[{
                lblFirstName.Text = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="LastName">
          <declaration><![CDATA[public string LastName]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="52" sc="13" el="54" ec="14">Install\WizardUser.ascx.cs</location>
            <body hash="7040bc049ee7451f7ddde0a295edeb98"><![CDATA[{
                return txtLastName.Text;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="56" sc="13" el="58" ec="14">Install\WizardUser.ascx.cs</location>
            <body hash="8c6b7fd28f6baa90125287446e365b9a"><![CDATA[{
                txtLastName.Text = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="LastNameLabel">
          <declaration><![CDATA[public string LastNameLabel]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="124" sc="13" el="126" ec="14">Install\WizardUser.ascx.cs</location>
            <body hash="9d3c20bc5f0be74d744f588539b8e24d"><![CDATA[{
                return lblLastName.Text;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="128" sc="13" el="130" ec="14">Install\WizardUser.ascx.cs</location>
            <body hash="8fa697e7cf8b933f00791e91b68d6846"><![CDATA[{
                lblLastName.Text = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="Password">
          <declaration><![CDATA[public string Password]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="76" sc="13" el="78" ec="14">Install\WizardUser.ascx.cs</location>
            <body hash="6b042b716ae46ab8c8c11f58798c23bb"><![CDATA[{
                return txtPassword.Text;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="80" sc="13" el="82" ec="14">Install\WizardUser.ascx.cs</location>
            <body hash="530dc50550495fc36b1b9d821dc5bb21"><![CDATA[{
                txtPassword.Text = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="PasswordLabel">
          <declaration><![CDATA[public string PasswordLabel]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="148" sc="13" el="150" ec="14">Install\WizardUser.ascx.cs</location>
            <body hash="d9cb273254b95afc8615655a4898cbc0"><![CDATA[{
                return lblPassword.Text;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="152" sc="13" el="154" ec="14">Install\WizardUser.ascx.cs</location>
            <body hash="03445a38cb6676b5b932a599dcf98c7d"><![CDATA[{
                lblPassword.Text = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="UserName">
          <declaration><![CDATA[public string UserName]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="64" sc="13" el="66" ec="14">Install\WizardUser.ascx.cs</location>
            <body hash="19329440aec4e5c7cea49cc577f3483f"><![CDATA[{
                return txtUserName.Text;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="68" sc="13" el="70" ec="14">Install\WizardUser.ascx.cs</location>
            <body hash="1659442bc977cbfccefff52e70f773a7"><![CDATA[{
                txtUserName.Text = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="UserNameLabel">
          <declaration><![CDATA[public string UserNameLabel]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="136" sc="13" el="138" ec="14">Install\WizardUser.ascx.cs</location>
            <body hash="e5681da2324bd1119f1d3846bf556034"><![CDATA[{
                return lblUserName.Text;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="140" sc="13" el="142" ec="14">Install\WizardUser.ascx.cs</location>
            <body hash="422a8c28697c6aae5d6100719d09306e"><![CDATA[{
                lblUserName.Text = value;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="DotNetNuke.UI.Containers">
    <class name="DropDownActions">
      <declaration><![CDATA[public class DropDownActions : ActionBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private string m_strProviderName = "DNNDropDownNavigationProvider";]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="39" sc="9" el="39" ec="76">admin\Containers\DropDownActions.ascx.cs</location>
            <body hash="b2e23fe7a3b927efa46cce62a0838b87"><![CDATA[private string m_strProviderName = "DNNDropDownNavigationProvider"]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="BindDropDown">
          <declaration><![CDATA[public void BindDropDown()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="98" sc="9" el="108" ec="10">admin\Containers\DropDownActions.ascx.cs</location>
            <body hash="024b74f9ca8ed80b0a5ec9241e671617"><![CDATA[{
            DNNNodeCollection objNodes;
            objNodes = Navigation.GetActionNodes(ActionRoot, this);
            foreach (DNNNode objNode in objNodes)
            {
                ProcessNodes(objNode);
            }
            Control.Bind(objNodes);

            Visible = DisplayControl(objNodes);
        }]]></body>
          </codeblock>
        </method>
        <method name="cmdGo_Click">
          <declaration><![CDATA[private void cmdGo_Click(object sender, ImageClickEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="82" sc="9" el="95" ec="10">admin\Containers\DropDownActions.ascx.cs</location>
            <body hash="64af2ee31f1fb92e23a07e68c7f3734b"><![CDATA[{
            try
            {
                var cboActions = (DropDownList) Control.NavigationControl;
                if (cboActions.SelectedIndex != -1)
                {
                    ProcessAction(cboActions.SelectedItem.Value);
                }
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="125" sc="9" el="131" ec="10">admin\Containers\DropDownActions.ascx.cs</location>
            <body hash="e90b34b4801c3909d5284b374418b239"><![CDATA[{
            base.OnInit(e);
            m_objControl = NavigationProvider.Instance(ProviderName);
            Control.ControlID = "ctl" + ID;
            Control.Initialize();
            spActions.Controls.Add(Control.NavigationControl);
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="66" sc="9" el="79" ec="10">admin\Containers\DropDownActions.ascx.cs</location>
            <body hash="e17628fa6f18e6c2062d9195d5cc08e5"><![CDATA[{
            base.OnLoad(e);

            cmdGo.Click += cmdGo_Click;

            try
            {
                BindDropDown();
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="Page_Load">
          <declaration><![CDATA[private void Page_Load(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="61" sc="9" el="63" ec="10">admin\Containers\DropDownActions.ascx.cs</location>
            <body hash="31e6746f86a5e4b10904fd6f2c86d0bc"><![CDATA[{
            cmdGo.Attributes.Add("onclick", "if (cmdGo_OnClick(dnn.dom.getById('" + Control.NavigationControl.ClientID + "')) == false) return false;");
        }]]></body>
          </codeblock>
        </method>
        <method name="ProcessNodes">
          <declaration><![CDATA[private void ProcessNodes(DNNNode objParent)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="111" sc="9" el="122" ec="10">admin\Containers\DropDownActions.ascx.cs</location>
            <body hash="11f13e9c5e2628c7b42de5dad3cc5527"><![CDATA[{
            if (!String.IsNullOrEmpty(objParent.JSFunction))
            {
                ClientAPI.RegisterClientVariable(Page, "__dnn_CSAction_" + Control.NavigationControl.ClientID + "_" + objParent.ID, objParent.JSFunction, true);
            }
            objParent.ClickAction = eClickAction.None; //since GO button is handling actions dont allow selected index change fire postback

            foreach (DNNNode objNode in objParent.DNNNodes)
            {
                ProcessNodes(objNode);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="cmdGo">
          <declaration><![CDATA[protected DnnImageButton cmdGo;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="m_objControl">
          <declaration><![CDATA[private NavigationProvider m_objControl;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="m_strProviderName">
          <declaration><![CDATA[private string m_strProviderName = "DNNDropDownNavigationProvider";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="spActions">
          <declaration><![CDATA[protected HtmlGenericControl spActions;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="Control">
          <declaration><![CDATA[public NavigationProvider Control]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="55" sc="13" el="57" ec="14">admin\Containers\DropDownActions.ascx.cs</location>
            <body hash="4abe3388561acc0fd9c936ac63b607cf"><![CDATA[{
                return m_objControl;
            }]]></body>
          </codeblock>
        </property>
        <property name="ProviderName">
          <declaration><![CDATA[public string ProviderName]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="44" sc="13" el="46" ec="14">admin\Containers\DropDownActions.ascx.cs</location>
            <body hash="9a8570ab9a38d578a95e36137a4d0d07"><![CDATA[{
                return m_strProviderName;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="48" sc="13" el="49" ec="14">admin\Containers\DropDownActions.ascx.cs</location>
            <body hash="dcf329278ec483df0390d9bf53626976"><![CDATA[{
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="Icon">
      <declaration><![CDATA[public class Icon : SkinObjectBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public Icon()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="57" sc="9" el="99" ec="10">admin\Containers\Icon.ascx.cs</location>
            <body hash="18491fc86d3b829ba5d21526fb3d4b1c"><![CDATA[{
            base.OnLoad(e);
            try
            {
				//public attributes
                if (!String.IsNullOrEmpty(BorderWidth))
                {
                    imgIcon.BorderWidth = Unit.Parse(BorderWidth);
                }
                if (!String.IsNullOrEmpty(CssClass))
                {
                    imgIcon.CssClass = CssClass;
                }
                Visible = false;
                if ((ModuleControl != null) && (ModuleControl.ModuleContext.Configuration != null))
                {
                    if (!String.IsNullOrEmpty(ModuleControl.ModuleContext.Configuration.IconFile))
                    {
                        if (ModuleControl.ModuleContext.Configuration.IconFile.StartsWith("~/"))
                        {
                            imgIcon.ImageUrl = ModuleControl.ModuleContext.Configuration.IconFile;
                        }
                        else
                        {
                            if (Globals.IsAdminControl())
                            {
                                imgIcon.ImageUrl = ModuleControl.ModuleContext.Configuration.DesktopModule.FolderName + "/" + ModuleControl.ModuleContext.Configuration.IconFile;
                            }
                            else
                            {
                                imgIcon.ImageUrl = ModuleControl.ModuleContext.PortalSettings.HomeDirectory + ModuleControl.ModuleContext.Configuration.IconFile;
                            }
                        }
                        imgIcon.AlternateText = ModuleControl.ModuleContext.Configuration.ModuleTitle;
                        Visible = true;
                    }
                }
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="imgIcon">
          <declaration><![CDATA[protected Image imgIcon;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="BorderWidth">
          <declaration><![CDATA[public string BorderWidth]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="49" sc="37" el="49" ec="41">admin\Containers\Icon.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="49" sc="42" el="49" ec="46">admin\Containers\Icon.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="CssClass">
          <declaration><![CDATA[public string CssClass]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="50" sc="34" el="50" ec="38">admin\Containers\Icon.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="50" sc="39" el="50" ec="43">admin\Containers\Icon.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="LinkActions">
      <declaration><![CDATA[public class LinkActions : ActionBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[protected string _itemSeparator = "";]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="38" sc="9" el="38" ec="46">admin\Containers\LinkActions.ascx.cs</location>
            <body hash="37d588a303dd624e3d74dba4d9fef1fd"><![CDATA[protected string _itemSeparator = ""]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="LinkAction_Click">
          <declaration><![CDATA[private void LinkAction_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="125" sc="9" el="134" ec="10">admin\Containers\LinkActions.ascx.cs</location>
            <body hash="3260df3c09673daac0893774f75bd63f"><![CDATA[{
            try
            {
                ProcessAction(((LinkButton) sender).ID.Substring(3));
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="53" sc="9" el="113" ec="10">admin\Containers\LinkActions.ascx.cs</location>
            <body hash="4f58bd3e3db7e4938b9c8e137d832aa1"><![CDATA[{
            base.OnLoad(e);
            try
            {
                {
                    if (ActionRoot.Visible)
                    {
						//Is Root Menu visible?
                        if (Controls.Count > 0)
                        {
                            Controls.Clear();
                        }
                        var PreSpacer = new LiteralControl(ItemSeparator);
                        Controls.Add(PreSpacer);

                        //Add Menu Items
                        foreach (ModuleAction action in ActionRoot.Actions)
                        {
                            if (action.Title == "~")
                            {
								//not supported in this Action object
                            }
                            else
                            {
                                if (action.Visible)
                                {
                                    if ((ModuleControl.ModuleContext.EditMode && Globals.IsAdminControl() == false) ||
                                        (action.Secure != SecurityAccessLevel.Anonymous && action.Secure != SecurityAccessLevel.View))
                                    {
                                        var ModuleActionLink = new LinkButton();
                                        ModuleActionLink.Text = action.Title;
                                        ModuleActionLink.CssClass = "CommandButton";
                                        ModuleActionLink.ID = "lnk" + action.ID;

                                        ModuleActionLink.Click += LinkAction_Click;

                                        Controls.Add(ModuleActionLink);
                                        var Spacer = new LiteralControl(ItemSeparator);
                                        Controls.Add(Spacer);
                                    }
                                }
                            }
                        }
                    }
                }
				
                //Need to determine if this action list actually has any items.
                if (Controls.Count > 0)
                {
                    Visible = true;
                }
                else
                {
                    Visible = false;
                }
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnPreRender">
          <declaration><![CDATA[protected override void OnPreRender(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="116" sc="9" el="122" ec="10">admin\Containers\LinkActions.ascx.cs</location>
            <body hash="ea8771d264286c1f7d41343d47617466"><![CDATA[{
            base.OnPreRender(e);
            if (String.IsNullOrEmpty(_itemSeparator))
            {
                _itemSeparator = "&nbsp;&nbsp;";
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_itemSeparator">
          <declaration><![CDATA[protected string _itemSeparator = "";]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="ItemSeparator">
          <declaration><![CDATA[public string ItemSeparator]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="43" sc="13" el="45" ec="14">admin\Containers\LinkActions.ascx.cs</location>
            <body hash="70d46b671fbe54154c92e54fa65ff829"><![CDATA[{
                return _itemSeparator;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="47" sc="13" el="49" ec="14">admin\Containers\LinkActions.ascx.cs</location>
            <body hash="95497b1301446a20a661e420e8a71513"><![CDATA[{
                _itemSeparator = value;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="PrintModule">
      <declaration><![CDATA[public class PrintModule : ActionBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public PrintModule()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="IconAction_Click">
          <declaration><![CDATA[private void IconAction_Click(object sender, ImageClickEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="112" sc="9" el="121" ec="10">admin\Containers\PrintModule.ascx.cs</location>
            <body hash="76ad7a2d5e568a34aec47312fe1ca18e"><![CDATA[{
            try
            {
                ProcessAction(((ImageButton) sender).ID.Substring(3));
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="59" sc="9" el="109" ec="10">admin\Containers\PrintModule.ascx.cs</location>
            <body hash="f6726f3c5f6313f4b6de0383d4ecbaad"><![CDATA[{
            base.OnLoad(e);
            try
            {
                foreach (ModuleAction action in Actions)
                {
                    if (action.CommandName == ModuleActionType.PrintModule)
                    {
                        if (action.Visible)
                        {
                            if ((PortalSettings.UserMode == PortalSettings.Mode.Edit) || (action.Secure == SecurityAccessLevel.Anonymous || action.Secure == SecurityAccessLevel.View))
                            {
                                if (ModuleContext.Configuration.DisplayPrint)
                                {
                                    var ModuleActionIcon = new ImageButton();
                                    if (!String.IsNullOrEmpty(PrintIcon))
                                    {
                                        ModuleActionIcon.ImageUrl = ModuleContext.Configuration.ContainerPath.Substring(0, ModuleContext.Configuration.ContainerPath.LastIndexOf("/") + 1) + PrintIcon;
                                    }
                                    else
                                    {
                                        ModuleActionIcon.ImageUrl = "~/images/" + action.Icon;
                                    }
                                    ModuleActionIcon.ToolTip = action.Title;
                                    ModuleActionIcon.ID = "ico" + action.ID;
                                    ModuleActionIcon.CausesValidation = false;

                                    ModuleActionIcon.Click += IconAction_Click;

                                    Controls.Add(ModuleActionIcon);
                                }
                            }
                        }
                    }
                }
				
                //set visibility
                if (Controls.Count > 0)
                {
                    Visible = true;
                }
                else
                {
                    Visible = false;
                }
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="PrintIcon">
          <declaration><![CDATA[public string PrintIcon]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="52" sc="35" el="52" ec="39">admin\Containers\PrintModule.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="52" sc="40" el="52" ec="44">admin\Containers\PrintModule.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="Title">
      <declaration><![CDATA[public class Title : SkinObjectBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public Title()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="CanEditModule">
          <declaration><![CDATA[private bool CanEditModule()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="53" sc="9" el="60" ec="10">admin\Containers\Title.ascx.cs</location>
            <body hash="c3afe161e7f2143b19304da398b3d676"><![CDATA[{
            var canEdit = false;
            if (ModuleControl != null && ModuleControl.ModuleContext.ModuleId > Null.NullInteger)
            {
                canEdit = (PortalSettings.UserMode == PortalSettings.Mode.Edit) && TabPermissionController.CanAdminPage() && !Globals.IsAdminControl();
            }
            return canEdit;
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="63" sc="9" el="67" ec="10">admin\Containers\Title.ascx.cs</location>
            <body hash="e27166796c0f308bf51f289c4e9f5de7"><![CDATA[{
            base.OnInit(e);

            titleLabel.UpdateLabel += UpdateTitle;
        }]]></body>
          </codeblock>
        </method>
        <method name="OnPreRender">
          <declaration><![CDATA[protected override void OnPreRender(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="71" sc="9" el="99" ec="10">admin\Containers\Title.ascx.cs</location>
            <body hash="1b9c832111b121cad4c3d823e9e70c83"><![CDATA[{
            base.OnPreRender(e);

            //public attributes
            if (!String.IsNullOrEmpty(CssClass))
            {
                titleLabel.CssClass = CssClass;
            }
            string moduleTitle = Null.NullString;
            if (ModuleControl != null)
            {
                moduleTitle = Localization.LocalizeControlTitle(ModuleControl);
            }
            if (moduleTitle == Null.NullString)
            {
                moduleTitle = " ";
            }

            titleLabel.Text = moduleTitle;
            titleLabel.EditEnabled = false;
            titleToolbar.Visible = false;

            if (CanEditModule() && PortalSettings.InlineEditorEnabled)
            {
                titleLabel.EditEnabled = true;
                titleToolbar.Visible = true;
            }

        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateTitle">
          <declaration><![CDATA[private void UpdateTitle(object source, DNNLabelEditEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="102" sc="9" el="113" ec="10">admin\Containers\Title.ascx.cs</location>
            <body hash="81fddb7a3b9405d5814c84a97a805324"><![CDATA[{
            if (CanEditModule())
            {
                ModuleInfo moduleInfo = ModuleController.Instance.GetModule(ModuleControl.ModuleContext.ModuleId, ModuleControl.ModuleContext.TabId, false);

                var ps = new PortalSecurity();
                var mt = ps.InputFilter(e.Text, PortalSecurity.FilterFlag.NoScripting);
                moduleInfo.ModuleTitle = mt;

                ModuleController.Instance.UpdateModule(moduleInfo);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="MyFileName">
          <declaration><![CDATA[private const string MyFileName = "Title.ascx";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="tbCancel2">
          <declaration><![CDATA[protected DNNToolBarButton tbCancel2;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="tbEdit2">
          <declaration><![CDATA[protected DNNToolBarButton tbEdit2;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="tbSave2">
          <declaration><![CDATA[protected DNNToolBarButton tbSave2;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="titleLabel">
          <declaration><![CDATA[protected DNNLabelEdit titleLabel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="titleToolbar">
          <declaration><![CDATA[protected DNNToolBar titleToolbar;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="CssClass">
          <declaration><![CDATA[public string CssClass]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="48" sc="34" el="48" ec="38">admin\Containers\Title.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="48" sc="39" el="48" ec="43">admin\Containers\Title.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="Visibility">
      <declaration><![CDATA[public class Visibility : SkinObjectBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private int _animationFrames = 5;]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="56" sc="9" el="56" ec="42">admin\Containers\Visibility.ascx.cs</location>
            <body hash="31d5e9543fb8d455885e7d8eff3090a0"><![CDATA[private int _animationFrames = 5]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="cmdVisibility_Click">
          <declaration><![CDATA[private void cmdVisibility_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="264" sc="9" el="283" ec="10">admin\Containers\Visibility.ascx.cs</location>
            <body hash="ce679eb6512dd3f41632191e27e7f2c6"><![CDATA[{
            try
            {
                if (ModuleContent != null)
                {
                    if (ModuleContent.Visible)
                    {
                        ContentVisible = false;
                    }
                    else
                    {
                        ContentVisible = true;
                    }
                }
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="170" sc="9" el="239" ec="10">admin\Containers\Visibility.ascx.cs</location>
            <body hash="edc958376c9989581ff7fcaab452573d"><![CDATA[{
            base.OnLoad(e);

            cmdVisibility.Click += cmdVisibility_Click;

            try
            {
                if (!Page.IsPostBack)
                {
					//public attributes
                    if (!String.IsNullOrEmpty(BorderWidth))
                    {
                        cmdVisibility.BorderWidth = Unit.Parse(BorderWidth);
                    }
                    if (ModuleControl.ModuleContext.Configuration != null)
                    {
						//check if Personalization is allowed
                        if (ModuleControl.ModuleContext.Configuration.Visibility == VisibilityState.None)
                        {
                            cmdVisibility.Enabled = false;
                            cmdVisibility.Visible = false;
                        }
                        if (ModuleControl.ModuleContext.Configuration.Visibility == VisibilityState.Minimized)
                        {
							//if visibility is set to minimized, then the client needs to set the cookie for maximized only and delete the cookie for minimized,
                            //instead of the opposite.  We need to notify the client of this
                            ClientAPI.RegisterClientVariable(Page, "__dnn_" + ModuleControl.ModuleContext.ModuleId + ":defminimized", "true", true);
                        }
                        if (!Globals.IsAdminControl())
                        {
                            if (cmdVisibility.Enabled)
                            {
                                if (ModuleContent != null)
                                {
									//EnableMinMax now done in prerender
                                }
                                else
                                {
                                    Visible = false;
                                }
                            }
                        }
                        else
                        {
                            Visible = false;
                        }
                    }
                    else
                    {
                        Visible = false;
                    }
                }
                else
                {
                    //since we disabled viewstate on the cmdVisibility control we need to check to see if we need hide this on postbacks as well
                    if (ModuleControl.ModuleContext.Configuration != null)
                    {
                        if (ModuleControl.ModuleContext.Configuration.Visibility == VisibilityState.None)
                        {
                            cmdVisibility.Enabled = false;
                            cmdVisibility.Visible = false;
                        }
                    }
                }
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnPreRender">
          <declaration><![CDATA[protected override void OnPreRender(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="242" sc="9" el="261" ec="10">admin\Containers\Visibility.ascx.cs</location>
            <body hash="6ceb8177de395c94f5d74a464097a569"><![CDATA[{
            base.OnPreRender(e);
            if (ModuleContent != null && ModuleControl != null && !Globals.IsAdminControl())
            {
                switch (ModuleControl.ModuleContext.Configuration.Visibility)
                {
                    case VisibilityState.Maximized:
                    case VisibilityState.Minimized:
                        DNNClientAPI.EnableMinMax(cmdVisibility,
                                                  ModuleContent,
                                                  ModuleControl.ModuleContext.ModuleId,
                                                  ModuleControl.ModuleContext.Configuration.Visibility == VisibilityState.Minimized,
                                                  MinIconLoc,
                                                  MaxIconLoc,
                                                  DNNClientAPI.MinMaxPersistanceType.Cookie,
                                                  AnimationFrames);
                        break;
                }
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_animationFrames">
          <declaration><![CDATA[private int _animationFrames = 5;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_pnlModuleContent">
          <declaration><![CDATA[private Panel _pnlModuleContent;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdVisibility">
          <declaration><![CDATA[protected LinkButton cmdVisibility;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="imgVisibility">
          <declaration><![CDATA[protected Image imgVisibility;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="AnimationFrames">
          <declaration><![CDATA[public int AnimationFrames]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="117" sc="13" el="119" ec="14">admin\Containers\Visibility.ascx.cs</location>
            <body hash="4326b77e18ba11a084775086c3aa90c9"><![CDATA[{
                return _animationFrames;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="121" sc="13" el="123" ec="14">admin\Containers\Visibility.ascx.cs</location>
            <body hash="4226ec4e005616d47354e14e66f14a5c"><![CDATA[{
                _animationFrames = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="BorderWidth">
          <declaration><![CDATA[public string BorderWidth]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="126" sc="37" el="126" ec="41">admin\Containers\Visibility.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="126" sc="42" el="126" ec="46">admin\Containers\Visibility.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ContentVisible">
          <declaration><![CDATA[public bool ContentVisible]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="131" sc="13" el="143" ec="14">admin\Containers\Visibility.ascx.cs</location>
            <body hash="135a2fdad93f85bbf2ff62514ad43435"><![CDATA[{
                switch (ModuleControl.ModuleContext.Configuration.Visibility)
                {
                    case VisibilityState.Maximized:
                    case VisibilityState.Minimized:
                        return DNNClientAPI.MinMaxContentVisibile(cmdVisibility,
                                                                  ModuleControl.ModuleContext.ModuleId,
                                                                  ModuleControl.ModuleContext.Configuration.Visibility == VisibilityState.Minimized,
                                                                  DNNClientAPI.MinMaxPersistanceType.Cookie);
                    default:
                        return true;
                }
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="145" sc="13" el="151" ec="14">admin\Containers\Visibility.ascx.cs</location>
            <body hash="50566e08a2aa98814c2e5fb952d949ec"><![CDATA[{
                DNNClientAPI.MinMaxContentVisibile(cmdVisibility,
                                                   ModuleControl.ModuleContext.ModuleId,
                                                   ModuleControl.ModuleContext.Configuration.Visibility == VisibilityState.Minimized,
                                                   DNNClientAPI.MinMaxPersistanceType.Cookie,
                                                   value);
            }]]></body>
          </codeblock>
        </property>
        <property name="MaxIcon">
          <declaration><![CDATA[public string MaxIcon]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="159" sc="33" el="159" ec="37">admin\Containers\Visibility.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="159" sc="38" el="159" ec="42">admin\Containers\Visibility.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="MaxIconLoc">
          <declaration><![CDATA[private string MaxIconLoc]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="75" sc="13" el="82" ec="14">admin\Containers\Visibility.ascx.cs</location>
            <body hash="77340a56de61b13ab58d6478f426add3"><![CDATA[{
                if (!String.IsNullOrEmpty(MaxIcon))
                {
                    return ModulePath + MaxIcon;
                }
                
                return Globals.ApplicationPath + "/images/max.gif"; //is ~/ the same as ApplicationPath in all cases?
            }]]></body>
          </codeblock>
        </property>
        <property name="minIcon">
          <declaration><![CDATA[public string minIcon]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="156" sc="33" el="156" ec="37">admin\Containers\Visibility.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="156" sc="38" el="156" ec="42">admin\Containers\Visibility.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="MinIconLoc">
          <declaration><![CDATA[private string MinIconLoc]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="62" sc="13" el="69" ec="14">admin\Containers\Visibility.ascx.cs</location>
            <body hash="7a00b66b965ff6847e016f5e85cd16ea"><![CDATA[{
                if (!String.IsNullOrEmpty(minIcon))
                {
                    return ModulePath + minIcon;
                }
                
                return Globals.ApplicationPath + "/images/min.gif"; //is ~/ the same as ApplicationPath in all cases?
            }]]></body>
          </codeblock>
        </property>
        <property name="ModuleContent">
          <declaration><![CDATA[private Panel ModuleContent]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="88" sc="13" el="98" ec="14">admin\Containers\Visibility.ascx.cs</location>
            <body hash="f58a7eb1c082c67d1a757034b88ab1f6"><![CDATA[{
                if (_pnlModuleContent == null)
                {
                    Control objCtl = Parent.FindControl("ModuleContent");
                    if (objCtl != null)
                    {
                        _pnlModuleContent = (Panel) objCtl;
                    }
                }
                return _pnlModuleContent;
            }]]></body>
          </codeblock>
        </property>
        <property name="ModulePath">
          <declaration><![CDATA[private string ModulePath]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="104" sc="13" el="106" ec="14">admin\Containers\Visibility.ascx.cs</location>
            <body hash="d7031d5ecd389e46abbd5e4da74049d3"><![CDATA[{
                return ModuleControl.ModuleContext.Configuration.ContainerPath.Substring(0, ModuleControl.ModuleContext.Configuration.ContainerPath.LastIndexOf("/") + 1);
            }]]></body>
          </codeblock>
        </property>
        <property name="ResourceFile">
          <declaration><![CDATA[public string ResourceFile]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="164" sc="13" el="166" ec="14">admin\Containers\Visibility.ascx.cs</location>
            <body hash="d776350e126dc20ccffd8e0e28b56d3f"><![CDATA[{
                return Localization.GetResourceFile(this, "Visibility.ascx");
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="DotNetNuke.UI.Containers.Controls">
    <class name="Toggle">
      <declaration><![CDATA[public class Toggle : SkinObjectBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public Toggle()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="OnPreRender">
          <declaration><![CDATA[protected override void OnPreRender(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="84" sc="3" el="92" ec="4">admin\Containers\Toggle.ascx.cs</location>
            <body hash="a257cc0fbb0c2c59f08b1b0db77e59a9"><![CDATA[{
            JavaScript.RequestRegistration(CommonJs.jQuery);
            JavaScript.RequestRegistration(CommonJs.jQueryMigrate);

			var toggleScript = string.Format("<script type=\"text/javascript\">(function($){{$(\"#{0}\").find(\"a.toggleHandler\").click(function(e){{$(\"#{1}\").slideToggle();$(this).toggleClass('collapsed');e.preventDefault();}});}})(jQuery);</script>",
			                                 ClientID,
			                                 Target);
			Page.ClientScript.RegisterStartupScript(GetType(), ClientID, toggleScript);
		}]]></body>
          </codeblock>
        </method>
        <method name="Render">
          <declaration><![CDATA[protected override void Render(HtmlTextWriter writer)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="95" sc="3" el="108" ec="4">admin\Containers\Toggle.ascx.cs</location>
            <body hash="2305e56ac830481d7d4f8e61919bb0c3"><![CDATA[{
			writer.AddAttribute("id", ClientID);
			writer.AddAttribute("class", Class);
			writer.RenderBeginTag("h2");

			writer.AddAttribute("href", "#");
			writer.AddAttribute("class", "toggleHandler");
			writer.RenderBeginTag("a");

			RenderChildren(writer);

			writer.RenderEndTag();
			writer.RenderEndTag();
		}]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_target">
          <declaration><![CDATA[private string _target;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="Class">
          <declaration><![CDATA[public string Class]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="51" sc="25" el="51" ec="29">admin\Containers\Toggle.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="51" sc="30" el="51" ec="34">admin\Containers\Toggle.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Target">
          <declaration><![CDATA[public string Target]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="56" sc="7" el="72" ec="8">admin\Containers\Toggle.ascx.cs</location>
            <body hash="582267a701f075c67567e4503e34cadc"><![CDATA[{
				if(this.Parent == null || string.IsNullOrEmpty(_target))
				{
					return string.Empty;
				}

    			var targetControl = this.Parent.FindControl(_target);
				if(targetControl == null)
				{
					return string.Empty;
				}
				else
				{
					return targetControl.ClientID;
				}

    		}]]></body>
          </codeblock>
          <codeblock>
            <location sl="74" sc="4" el="76" ec="5">admin\Containers\Toggle.ascx.cs</location>
            <body hash="d1416dbeb50d65677aa8f908cc4cbdcf"><![CDATA[{
				_target = value;
			}]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="DotNetNuke.UI.Skins.Controls">
    <class name="BreadCrumb">
      <declaration><![CDATA[public class BreadCrumb : SkinObjectBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private string _separator = "<img alt=\"breadcrumb separator\" src=\"" + Globals.ApplicationPath + "/images/breadcrumb.gif\">";]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="42" sc="9" el="48" ec="46">admin\Skins\BreadCrumb.ascx.cs</location>
            <body hash="7ff8f05f3846359e5c94b6bb1e9311ae"><![CDATA[private string _separator = "<img alt=\"breadcrumb separator\" src=\"" + Globals.ApplicationPath + "/images/breadcrumb.gif\">";
        private string _cssClass = "SkinObject";
        private int _rootLevel = 0;
        private bool _showRoot = false;
        private readonly StringBuilder _breadcrumb = new StringBuilder("<span itemscope itemtype=\"http://schema.org/BreadcrumbList\">");
        private string _homeUrl = "";
        private string _homeTabName = "Root";]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="107" sc="9" el="209" ec="10">admin\Skins\BreadCrumb.ascx.cs</location>
            <body hash="f8b527941a87a1544405d61a5ef8c75b"><![CDATA[{
            base.OnLoad(e);

            // Position in breadcrumb list
            var position = 1;

            //resolve image path in separator content
            ResolveSeparatorPaths();

            // If we have enabled hiding when there are no breadcrumbs, simply return
            if (HideWithNoBreadCrumb && PortalSettings.ActiveTab.BreadCrumbs.Count == (_rootLevel + 1))
            {
                return;
            }

            // Without checking if the current tab is the home tab, we would duplicate the root tab
            if (_showRoot && PortalSettings.ActiveTab.TabID != PortalSettings.HomeTabId)
            {
                // Add the current protocal to the current URL
                _homeUrl = Globals.AddHTTP(PortalSettings.PortalAlias.HTTPAlias);

                // Make sure we have a home tab ID set
                if (PortalSettings.HomeTabId != -1)
                {
                    _homeUrl = Globals.NavigateURL(PortalSettings.HomeTabId);

                    var tc = new TabController();
                    var homeTab = tc.GetTab(PortalSettings.HomeTabId, PortalSettings.PortalId, false);
                    _homeTabName = homeTab.LocalizedTabName;

                    // Check if we should use the tab's title instead
                    if (UseTitle && !string.IsNullOrEmpty(homeTab.Title))
                    {
                        _homeTabName = homeTab.Title;
                    }
                }

                // Append all of the HTML for the root breadcrumb
                _breadcrumb.Append("<span itemprop=\"itemListElement\" itemscope itemtype=\"http://schema.org/ListItem\">");
                _breadcrumb.Append("<a href=\"" + _homeUrl + "\" class=\"" + _cssClass + "\" itemprop=\"item\" ><span itemprop=\"name\">" + _homeTabName + "</span></a>");
                _breadcrumb.Append("<meta itemprop=\"position\" content=\"" + position++ + "\" />"); // Notice we post-increment the position variable
                _breadcrumb.Append("</span>");

                // Add a separator
                _breadcrumb.Append(_separator);
            }

            //process bread crumbs
            for (var i = _rootLevel; i < PortalSettings.ActiveTab.BreadCrumbs.Count; ++i)
            {
                // Only add separators if we're past the root level
                if (i > _rootLevel)
                {
                    _breadcrumb.Append(_separator);
                }

                // Grab the current tab
                var tab = (TabInfo)PortalSettings.ActiveTab.BreadCrumbs[i];

                var tabName = tab.LocalizedTabName;

                // Determine if we should use the tab's title instead of tab name
                if (UseTitle && !string.IsNullOrEmpty(tab.Title))
                {
                    tabName = tab.Title;
                }

                // Get the absolute URL of the tab
                var tabUrl = tab.FullUrl;

                // 
                if (ProfileUserId > -1)
                {
                    tabUrl = Globals.NavigateURL(tab.TabID, "", "UserId=" + ProfileUserId);
                }

                // 
                if (GroupId > -1)
                {
                    tabUrl = Globals.NavigateURL(tab.TabID, "", "GroupId=" + GroupId);
                }

                // Begin breadcrumb
                _breadcrumb.Append("<span itemprop=\"itemListElement\" itemscope itemtype=\"http://schema.org/ListItem\">");

                // Is this tab disabled? If so, only render the text
                if (tab.DisableLink)
                {
                    _breadcrumb.Append("<span class=\"" + _cssClass + "\" itemprop=\"name\">" + tabName + "</span>");
                }
                else
                {
                    _breadcrumb.Append("<a href=\"" + tabUrl + "\" class=\"" + _cssClass + "\" itemprop=\"item\"><span itemprop=\"name\">" + tabName + "</span></a>");
                }

                _breadcrumb.Append("<meta itemprop=\"position\" content=\"" + position++ + "\" />"); // Notice we post-increment the position variable
                _breadcrumb.Append("</span>");
            }

            _breadcrumb.Append("</span>"); //End of BreadcrumbList
            
            lblBreadCrumb.Text = _breadcrumb.ToString();
        }]]></body>
          </codeblock>
        </method>
        <method name="ResolveSeparatorPaths">
          <declaration><![CDATA[private void ResolveSeparatorPaths()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="212" sc="9" el="258" ec="10">admin\Skins\BreadCrumb.ascx.cs</location>
            <body hash="26812f9975ef86fef2e184f01715ae1b"><![CDATA[{
            if (string.IsNullOrEmpty(_separator))
            {
                return;
            }

            var urlMatches = Regex.Matches(_separator, UrlRegex, RegexOptions.IgnoreCase);
            if (urlMatches.Count > 0)
            {
                foreach (Match match in urlMatches)
                {
                    var url = match.Groups[3].Value;
                    var changed = false;

                    if (url.StartsWith("/"))
                    {
                        if (!string.IsNullOrEmpty(Globals.ApplicationPath))
                        {
                            url = string.Format("{0}{1}", Globals.ApplicationPath, url);
                            changed = true;
                        }
                    }
                    else if (url.StartsWith("~/"))
                    {
                        url = Globals.ResolveUrl(url);
                        changed = true;
                    }
                    else
                    {
                        url = string.Format("{0}{1}", PortalSettings.ActiveTab.SkinPath, url);
                        changed = true;
                    }

                    if (changed)
                    {
                        var newMatch = string.Format("{0}={1}{2}{3}", 
                                                        match.Groups[1].Value, 
                                                        match.Groups[2].Value, 
                                                        url,
                                                        match.Groups[4].Value);

                        _separator = _separator.Replace(match.Value, newMatch);
                    }
                }

            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_breadcrumb">
          <declaration><![CDATA[private readonly StringBuilder _breadcrumb = new StringBuilder("<span itemscope itemtype=\"http://schema.org/BreadcrumbList\">");]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_cssClass">
          <declaration><![CDATA[private string _cssClass = "SkinObject";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_homeTabName">
          <declaration><![CDATA[private string _homeTabName = "Root";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_homeUrl">
          <declaration><![CDATA[private string _homeUrl = "";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_rootLevel">
          <declaration><![CDATA[private int _rootLevel = 0;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_separator">
          <declaration><![CDATA[private string _separator = "<img alt=\"breadcrumb separator\" src=\"" + Globals.ApplicationPath + "/images/breadcrumb.gif\">";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_showRoot">
          <declaration><![CDATA[private bool _showRoot = false;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblBreadCrumb">
          <declaration><![CDATA[protected Label lblBreadCrumb;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="UrlRegex">
          <declaration><![CDATA[private const string UrlRegex = "(href|src)=(\\\"|'|)(.[^\\\"']*)(\\\"|'|)";]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="CssClass">
          <declaration><![CDATA[public string CssClass]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="GroupId">
          <declaration><![CDATA[public int GroupId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="99" sc="13" el="103" ec="14">admin\Skins\BreadCrumb.ascx.cs</location>
            <body hash="b9029fe23c84236b996cc0dc2cc4a66e"><![CDATA[{
                return string.IsNullOrEmpty(Request.Params["GroupId"])
                    ? Null.NullInteger
                    : int.Parse(Request.Params["GroupId"]);
            }]]></body>
          </codeblock>
        </property>
        <property name="HideWithNoBreadCrumb">
          <declaration><![CDATA[public bool HideWithNoBreadCrumb]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="84" sc="44" el="84" ec="48">admin\Skins\BreadCrumb.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="84" sc="49" el="84" ec="53">admin\Skins\BreadCrumb.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ProfileUserId">
          <declaration><![CDATA[public int ProfileUserId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="89" sc="13" el="93" ec="14">admin\Skins\BreadCrumb.ascx.cs</location>
            <body hash="5c73d1d4a768fe3486d02a3e51828d3f"><![CDATA[{
                return string.IsNullOrEmpty(Request.Params["UserId"])
                    ? Null.NullInteger
                    : int.Parse(Request.Params["UserId"]);
            }]]></body>
          </codeblock>
        </property>
        <property name="RootLevel">
          <declaration><![CDATA[public string RootLevel]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="69" sc="13" el="77" ec="14">admin\Skins\BreadCrumb.ascx.cs</location>
            <body hash="dec89846a9c286277c287b080fe43cd4"><![CDATA[{
                _rootLevel = int.Parse(value);

                if (_rootLevel < 0)
                {
                    _showRoot = true;
                    _rootLevel = 0;
                }
            }]]></body>
          </codeblock>
        </property>
        <property name="Separator">
          <declaration><![CDATA[public string Separator]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="UseTitle">
          <declaration><![CDATA[public bool UseTitle]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="81" sc="32" el="81" ec="36">admin\Skins\BreadCrumb.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="81" sc="37" el="81" ec="41">admin\Skins\BreadCrumb.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="Copyright">
      <declaration><![CDATA[public class Copyright : SkinObjectBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public Copyright()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="42" sc="9" el="56" ec="10">admin\Skins\Copyright.ascx.cs</location>
            <body hash="3ef6beedd7a3311962a2806fb09bfcf7"><![CDATA[{
            base.OnLoad(e);
            if (!String.IsNullOrEmpty(CssClass))
            {
                lblCopyright.CssClass = CssClass;
            }
            if (!String.IsNullOrEmpty(PortalSettings.FooterText))
            {
                lblCopyright.Text = PortalSettings.FooterText.Replace("[year]", DateTime.Now.ToString("yyyy"));
            }
            else
            {
                lblCopyright.Text = string.Format(Localization.GetString("Copyright", Localization.GetResourceFile(this, MyFileName)), DateTime.Now.Year, PortalSettings.PortalName);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="lblCopyright">
          <declaration><![CDATA[protected Label lblCopyright;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="MyFileName">
          <declaration><![CDATA[private const string MyFileName = "Copyright.ascx";]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="CssClass">
          <declaration><![CDATA[public string CssClass]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="39" sc="34" el="39" ec="38">admin\Skins\Copyright.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="39" sc="39" el="39" ec="43">admin\Skins\Copyright.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="CurrentDate">
      <declaration><![CDATA[public class CurrentDate : SkinObjectBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public CurrentDate()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="InitializeComponent">
          <declaration><![CDATA[private void InitializeComponent()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="43" sc="9" el="44" ec="10">admin\Skins\CurrentDate.ascx.cs</location>
            <body hash="539fa760ca172337a931519768c64187"><![CDATA[{
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="47" sc="9" el="51" ec="10">admin\Skins\CurrentDate.ascx.cs</location>
            <body hash="5f3c8c20cc44d36b74ae4760af9b8276"><![CDATA[{
            base.OnInit(e);

            InitializeComponent();
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="54" sc="9" el="62" ec="10">admin\Skins\CurrentDate.ascx.cs</location>
            <body hash="0e5a4fcd503eaf8014830d565d1b15e9"><![CDATA[{
            base.OnLoad(e);
            if (!String.IsNullOrEmpty(CssClass))
            {
                lblDate.CssClass = CssClass;
            }
            var user = UserController.Instance.GetCurrentUserInfo();
            lblDate.Text = !String.IsNullOrEmpty(DateFormat) ? user.LocalTime().ToString(DateFormat) : user.LocalTime().ToLongDateString();
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="lblDate">
          <declaration><![CDATA[protected Label lblDate;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="CssClass">
          <declaration><![CDATA[public string CssClass]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="38" sc="34" el="38" ec="38">admin\Skins\CurrentDate.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="38" sc="39" el="38" ec="43">admin\Skins\CurrentDate.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="DateFormat">
          <declaration><![CDATA[public string DateFormat]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="40" sc="36" el="40" ec="40">admin\Skins\CurrentDate.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="40" sc="41" el="40" ec="45">admin\Skins\CurrentDate.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnCssExclude">
      <declaration><![CDATA[public class DnnCssExclude : SkinObjectBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnCssExclude()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="14" sc="9" el="17" ec="10">admin\Skins\DnnCssExclude.ascx.cs</location>
            <body hash="5fcc1039af7ce4fe7828ac1e90f24acf"><![CDATA[{
            base.OnLoad(e);
            ctlExclude.Name = Name;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="ctlExclude">
          <declaration><![CDATA[protected DnnCssExclude ctlExclude;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="Name">
          <declaration><![CDATA[public string Name]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="11" sc="30" el="11" ec="34">admin\Skins\DnnCssExclude.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="11" sc="35" el="11" ec="39">admin\Skins\DnnCssExclude.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnCssInclude">
      <declaration><![CDATA[public class DnnCssInclude : SkinObjectBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnCssInclude()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="23" sc="9" el="35" ec="10">admin\Skins\DnnCssInclude.ascx.cs</location>
            <body hash="33de0ba9dcfb8a1c5314dfd875d22b7c"><![CDATA[{
            base.OnLoad(e);
            ctlInclude.AddTag = AddTag;
            ctlInclude.CssMedia = CssMedia;
            ctlInclude.FilePath = FilePath;
            ctlInclude.ForceBundle = ForceBundle;
            ctlInclude.ForceProvider = ForceProvider;
            ctlInclude.ForceVersion = ForceVersion;
            ctlInclude.Name = Name;
            ctlInclude.PathNameAlias = PathNameAlias;
            ctlInclude.Priority = Priority;
            ctlInclude.Version = Version;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="ctlInclude">
          <declaration><![CDATA[protected DnnCssInclude ctlInclude;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="AddTag">
          <declaration><![CDATA[public bool AddTag]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="15" sc="30" el="15" ec="34">admin\Skins\DnnCssInclude.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="15" sc="35" el="15" ec="39">admin\Skins\DnnCssInclude.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="CssMedia">
          <declaration><![CDATA[public CssMediaType CssMedia]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="11" sc="40" el="11" ec="44">admin\Skins\DnnCssInclude.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="11" sc="45" el="11" ec="49">admin\Skins\DnnCssInclude.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="FilePath">
          <declaration><![CDATA[public string FilePath]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="12" sc="34" el="12" ec="38">admin\Skins\DnnCssInclude.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="12" sc="39" el="12" ec="43">admin\Skins\DnnCssInclude.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ForceBundle">
          <declaration><![CDATA[public bool ForceBundle]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="20" sc="35" el="20" ec="39">admin\Skins\DnnCssInclude.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="20" sc="40" el="20" ec="44">admin\Skins\DnnCssInclude.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ForceProvider">
          <declaration><![CDATA[public string ForceProvider]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="19" sc="39" el="19" ec="43">admin\Skins\DnnCssInclude.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="19" sc="44" el="19" ec="48">admin\Skins\DnnCssInclude.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ForceVersion">
          <declaration><![CDATA[public bool ForceVersion]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="18" sc="36" el="18" ec="40">admin\Skins\DnnCssInclude.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="18" sc="41" el="18" ec="45">admin\Skins\DnnCssInclude.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Name">
          <declaration><![CDATA[public string Name]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="16" sc="30" el="16" ec="34">admin\Skins\DnnCssInclude.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="16" sc="35" el="16" ec="39">admin\Skins\DnnCssInclude.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="PathNameAlias">
          <declaration><![CDATA[public string PathNameAlias]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="13" sc="39" el="13" ec="43">admin\Skins\DnnCssInclude.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="13" sc="44" el="13" ec="48">admin\Skins\DnnCssInclude.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Priority">
          <declaration><![CDATA[public int Priority]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="14" sc="31" el="14" ec="35">admin\Skins\DnnCssInclude.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="14" sc="36" el="14" ec="40">admin\Skins\DnnCssInclude.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Version">
          <declaration><![CDATA[public string Version]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="17" sc="33" el="17" ec="37">admin\Skins\DnnCssInclude.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="17" sc="38" el="17" ec="42">admin\Skins\DnnCssInclude.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnJsExclude">
      <declaration><![CDATA[public class DnnJsExclude : SkinObjectBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnJsExclude()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="14" sc="9" el="17" ec="10">admin\Skins\DnnJsExclude.ascx.cs</location>
            <body hash="5fcc1039af7ce4fe7828ac1e90f24acf"><![CDATA[{
            base.OnLoad(e);
            ctlExclude.Name = Name;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="ctlExclude">
          <declaration><![CDATA[protected DnnJsExclude ctlExclude;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="Name">
          <declaration><![CDATA[public string Name]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="11" sc="30" el="11" ec="34">admin\Skins\DnnJsExclude.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="11" sc="35" el="11" ec="39">admin\Skins\DnnJsExclude.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnJsInclude">
      <declaration><![CDATA[public class DnnJsInclude : SkinObjectBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnJsInclude()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="22" sc="9" el="33" ec="10">admin\Skins\DnnJsInclude.ascx.cs</location>
            <body hash="ae78aafe8c1e066359868c58f46bd710"><![CDATA[{
            base.OnLoad(e);
            ctlInclude.AddTag = AddTag;
            ctlInclude.FilePath = FilePath;
            ctlInclude.ForceBundle = ForceBundle;
            ctlInclude.ForceProvider = ForceProvider;
            ctlInclude.ForceVersion = ForceVersion;
            ctlInclude.Name = Name;
            ctlInclude.PathNameAlias = PathNameAlias;
            ctlInclude.Priority = Priority;
            ctlInclude.Version = Version;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="ctlInclude">
          <declaration><![CDATA[protected DnnJsInclude ctlInclude;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="AddTag">
          <declaration><![CDATA[public bool AddTag]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="14" sc="30" el="14" ec="34">admin\Skins\DnnJsInclude.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="14" sc="35" el="14" ec="39">admin\Skins\DnnJsInclude.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="FilePath">
          <declaration><![CDATA[public string FilePath]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="11" sc="34" el="11" ec="38">admin\Skins\DnnJsInclude.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="11" sc="39" el="11" ec="43">admin\Skins\DnnJsInclude.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ForceBundle">
          <declaration><![CDATA[public bool ForceBundle]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="19" sc="35" el="19" ec="39">admin\Skins\DnnJsInclude.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="19" sc="40" el="19" ec="44">admin\Skins\DnnJsInclude.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ForceProvider">
          <declaration><![CDATA[public string ForceProvider]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="18" sc="39" el="18" ec="43">admin\Skins\DnnJsInclude.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="18" sc="44" el="18" ec="48">admin\Skins\DnnJsInclude.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ForceVersion">
          <declaration><![CDATA[public bool ForceVersion]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="17" sc="36" el="17" ec="40">admin\Skins\DnnJsInclude.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="17" sc="41" el="17" ec="45">admin\Skins\DnnJsInclude.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Name">
          <declaration><![CDATA[public string Name]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="15" sc="30" el="15" ec="34">admin\Skins\DnnJsInclude.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="15" sc="35" el="15" ec="39">admin\Skins\DnnJsInclude.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="PathNameAlias">
          <declaration><![CDATA[public string PathNameAlias]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="12" sc="39" el="12" ec="43">admin\Skins\DnnJsInclude.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="12" sc="44" el="12" ec="48">admin\Skins\DnnJsInclude.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Priority">
          <declaration><![CDATA[public int Priority]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="13" sc="31" el="13" ec="35">admin\Skins\DnnJsInclude.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="13" sc="36" el="13" ec="40">admin\Skins\DnnJsInclude.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Version">
          <declaration><![CDATA[public string Version]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="16" sc="33" el="16" ec="37">admin\Skins\DnnJsInclude.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="16" sc="38" el="16" ec="42">admin\Skins\DnnJsInclude.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DnnLink">
      <declaration><![CDATA[public class DnnLink : SkinObjectBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DnnLink()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="42" sc="9" el="94" ec="10">admin\Skins\DnnLink.ascx.cs</location>
            <body hash="1655c04529f6ca108f48e2334c90a97a"><![CDATA[{
            base.OnLoad(e);
            if (!string.IsNullOrEmpty(this.CssClass))
                aDnnLink.Attributes.Add("class",this.CssClass);

            if (!string.IsNullOrEmpty(Target))
                aDnnLink.Target = this.Target;
            //set home page link to community URL

            string url = "http://www.dnnsoftware.com/community?utm_source=dnn-install&utm_medium=web-link&utm_content=gravity-skin-link&utm_campaign=dnn-install";
            string utmTerm = "&utm_term=cms-by-dnn";
            string hostName = this.Request.Url.Host.ToLower().Replace("www.", "");
            int charPos = 0; string linkText= "CMS by DNN";
            if (hostName.Length > 0)
            {
                //convert first letter of hostname to int pos in alphabet
                charPos = char.ToUpper(hostName[0]) - 64;
            }
            //vary link by first letter of host name
            if (charPos <= 5)
            {
                linkText = "Open Source ASP.NET CMS by DNN"; 
                utmTerm = "&utm_term=open+source+asp.net+by+dnn";
            }
            if (charPos > 5 && charPos <= 10)
            {
                linkText = "DNN - .NET Open Source CMS"; 
                utmTerm = "&utm_term=dnn+.net+open+source+cms";
            }

            if (charPos > 10 && charPos <= 15)
            {
                linkText = "Web Content Management by DNN";
                utmTerm = "&utm_term=web+content+management+by+dnn";
            }

            if (charPos > 15 && charPos <= 20)
            {
                linkText = "DNN .NET CMS"; 
                utmTerm = "&utm_term=dnn+.net+cms";
            }

            if (charPos > 20 && charPos <= 25)
            {
                linkText = "WCM by DNN"; 
                utmTerm = "&utm_term=wcm+by+dnn";
            }
            

            aDnnLink.InnerText = linkText;
            aDnnLink.HRef = HttpUtility.HtmlEncode(url + utmTerm);

        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="aDnnLink">
          <declaration><![CDATA[protected HtmlAnchor aDnnLink;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="MyFileName">
          <declaration><![CDATA[private const string MyFileName = "DnnLink.ascx";]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="CssClass">
          <declaration><![CDATA[public string CssClass]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="39" sc="34" el="39" ec="38">admin\Skins\DnnLink.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="39" sc="39" el="39" ec="43">admin\Skins\DnnLink.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Target">
          <declaration><![CDATA[public string Target]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="40" sc="32" el="40" ec="36">admin\Skins\DnnLink.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="40" sc="37" el="40" ec="41">admin\Skins\DnnLink.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DotNetNukeControl">
      <declaration><![CDATA[public class DotNetNukeControl : SkinObjectBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DotNetNukeControl()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="InitializeComponent">
          <declaration><![CDATA[private void InitializeComponent()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="41" sc="9" el="42" ec="10">admin\Skins\DotNetNuke.ascx.cs</location>
            <body hash="539fa760ca172337a931519768c64187"><![CDATA[{
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="45" sc="9" el="49" ec="10">admin\Skins\DotNetNuke.ascx.cs</location>
            <body hash="5f3c8c20cc44d36b74ae4760af9b8276"><![CDATA[{
            base.OnInit(e);

            InitializeComponent();
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="52" sc="9" el="65" ec="10">admin\Skins\DotNetNuke.ascx.cs</location>
            <body hash="5de4d928a2bae1b015d5e137e83b2b9d"><![CDATA[{
            base.OnLoad(e);
            if (!String.IsNullOrEmpty(CssClass))
            {
                hypDotNetNuke.CssClass = CssClass;
            }
			
            //get Product Name and Legal Copyright from constants (Medium Trust)
            hypDotNetNuke.Text = DotNetNukeContext.Current.Application.LegalCopyright;
            hypDotNetNuke.NavigateUrl = DotNetNukeContext.Current.Application.Url;
            
			//show copyright credits?
			Visible = Host.DisplayCopyright;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="hypDotNetNuke">
          <declaration><![CDATA[protected HyperLink hypDotNetNuke;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="CssClass">
          <declaration><![CDATA[public string CssClass]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="38" sc="34" el="38" ec="38">admin\Skins\DotNetNuke.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="38" sc="39" el="38" ec="43">admin\Skins\DotNetNuke.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="Help">
      <declaration><![CDATA[public class Help : SkinObjectBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public Help()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="InitializeComponent">
          <declaration><![CDATA[private void InitializeComponent()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="44" sc="9" el="45" ec="10">admin\Skins\Help.ascx.cs</location>
            <body hash="539fa760ca172337a931519768c64187"><![CDATA[{
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="48" sc="9" el="52" ec="10">admin\Skins\Help.ascx.cs</location>
            <body hash="5f3c8c20cc44d36b74ae4760af9b8276"><![CDATA[{
            base.OnInit(e);

            InitializeComponent();
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="55" sc="9" el="83" ec="10">admin\Skins\Help.ascx.cs</location>
            <body hash="c54955cedfb7b3fb50f18065a070379f"><![CDATA[{
            base.OnLoad(e);
            try
            {
                if (!String.IsNullOrEmpty(CssClass))
                {
                    hypHelp.CssClass = CssClass;
                }
                if (Request.IsAuthenticated)
                {
                    if (TabPermissionController.CanAdminPage())
                    {
                        hypHelp.Text = Localization.GetString("Help");
                        hypHelp.NavigateUrl = "mailto:" + Host.HostEmail + "?subject=" + PortalSettings.PortalName + " Support Request";
                        hypHelp.Visible = true;
                    }
                    else
                    {
                        hypHelp.Text = Localization.GetString("Help");
                        hypHelp.NavigateUrl = "mailto:" + PortalSettings.Email + "?subject=" + PortalSettings.PortalName + " Support Request";
                        hypHelp.Visible = true;
                    }
                }
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="hypHelp">
          <declaration><![CDATA[protected HyperLink hypHelp;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="CssClass">
          <declaration><![CDATA[public string CssClass]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="41" sc="34" el="41" ec="38">admin\Skins\Help.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="41" sc="39" el="41" ec="43">admin\Skins\Help.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="HostName">
      <declaration><![CDATA[public class HostName : SkinObjectBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public HostName()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="InitializeComponent">
          <declaration><![CDATA[private void InitializeComponent()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="43" sc="9" el="44" ec="10">admin\Skins\HostName.ascx.cs</location>
            <body hash="539fa760ca172337a931519768c64187"><![CDATA[{
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="47" sc="9" el="51" ec="10">admin\Skins\HostName.ascx.cs</location>
            <body hash="5f3c8c20cc44d36b74ae4760af9b8276"><![CDATA[{
            base.OnInit(e);

            InitializeComponent();
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="54" sc="9" el="69" ec="10">admin\Skins\HostName.ascx.cs</location>
            <body hash="fd0bd83d23f685829ef1fcac280ab3f0"><![CDATA[{
            base.OnLoad(e);
            try
            {
                if (!String.IsNullOrEmpty(CssClass))
                {
                    hypHostName.CssClass = CssClass;
                }
                hypHostName.Text = Host.HostTitle;
                hypHostName.NavigateUrl = Globals.AddHTTP(Host.HostURL);
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="hypHostName">
          <declaration><![CDATA[protected HyperLink hypHostName;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="CssClass">
          <declaration><![CDATA[public string CssClass]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="40" sc="34" el="40" ec="38">admin\Skins\HostName.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="40" sc="39" el="40" ec="43">admin\Skins\HostName.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="JavaScriptLibraryInclude">
      <declaration><![CDATA[public class JavaScriptLibraryInclude : SkinObjectBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public JavaScriptLibraryInclude()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="37" sc="9" el="50" ec="10">admin\Skins\JavaScriptLibraryInclude.ascx.cs</location>
            <body hash="87e47c14edb202c6cf826433764e5bcf"><![CDATA[{
            if (this.Version == null) 
            {
                JavaScript.RequestRegistration(this.Name);
            }
            else if (this.SpecificVersion == null)
            {
                JavaScript.RequestRegistration(this.Name, this.Version);
            }
            else
            {
                JavaScript.RequestRegistration(this.Name, this.Version, this.SpecificVersion.Value);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="Name">
          <declaration><![CDATA[public string Name]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="32" sc="30" el="32" ec="34">admin\Skins\JavaScriptLibraryInclude.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="32" sc="35" el="32" ec="39">admin\Skins\JavaScriptLibraryInclude.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="SpecificVersion">
          <declaration><![CDATA[public SpecificVersion? SpecificVersion]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="34" sc="51" el="34" ec="55">admin\Skins\JavaScriptLibraryInclude.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="34" sc="56" el="34" ec="60">admin\Skins\JavaScriptLibraryInclude.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Version">
          <declaration><![CDATA[public Version Version]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="33" sc="34" el="33" ec="38">admin\Skins\JavaScriptLibraryInclude.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="33" sc="39" el="33" ec="43">admin\Skins\JavaScriptLibraryInclude.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="jQuery">
      <declaration><![CDATA[public class jQuery : SkinObjectBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public jQuery()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="37" sc="9" el="55" ec="10">admin\Skins\jQuery.ascx.cs</location>
            <body hash="ed6cd5edbc235806604a0f9dd2a8118e"><![CDATA[{
            JavaScript.RequestRegistration(CommonJs.jQuery);
            JavaScript.RequestRegistration(CommonJs.jQueryMigrate);

            if (jQueryUI)
            {
                JavaScript.RequestRegistration(CommonJs.jQueryUI);
            }

            if (DnnjQueryPlugins)
            {
                JavaScript.RequestRegistration(CommonJs.DnnPlugins);
            }

            if (jQueryHoverIntent)
            {
                JavaScript.RequestRegistration(CommonJs.HoverIntent);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="DnnjQueryPlugins">
          <declaration><![CDATA[public bool DnnjQueryPlugins]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="32" sc="40" el="32" ec="44">admin\Skins\jQuery.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="32" sc="45" el="32" ec="49">admin\Skins\jQuery.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="jQueryHoverIntent">
          <declaration><![CDATA[public bool jQueryHoverIntent]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="33" sc="41" el="33" ec="45">admin\Skins\jQuery.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="33" sc="46" el="33" ec="50">admin\Skins\jQuery.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="jQueryUI">
          <declaration><![CDATA[public bool jQueryUI]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="34" sc="32" el="34" ec="36">admin\Skins\jQuery.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="34" sc="37" el="34" ec="41">admin\Skins\jQuery.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="Language">
      <declaration><![CDATA[public class Language : SkinObjectBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private bool _showMenu = true;]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="59" sc="9" el="59" ec="39">admin\Skins\Language.ascx.cs</location>
            <body hash="1ced771134bcbf6b20d74f11770da9f7"><![CDATA[private bool _showMenu = true]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="handleCommonTemplates">
          <declaration><![CDATA[private void handleCommonTemplates()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="292" sc="9" el="309" ec="10">admin\Skins\Language.ascx.cs</location>
            <body hash="d9e594cffb0dd91cec1616c338490186"><![CDATA[{
            if (string.IsNullOrEmpty(CommonHeaderTemplate))
            {
                litCommonHeaderTemplate.Visible = false;
            }
            else
            {
                litCommonHeaderTemplate.Text = parseTemplate(CommonHeaderTemplate, CurrentCulture);
            }
            if (string.IsNullOrEmpty(CommonFooterTemplate))
            {
                litCommonFooterTemplate.Visible = false;
            }
            else
            {
                litCommonFooterTemplate.Text = parseTemplate(CommonFooterTemplate, CurrentCulture);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="LocaleIsAvailable">
          <declaration><![CDATA[private bool LocaleIsAvailable(Locale locale)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="312" sc="3" el="320" ec="4">admin\Skins\Language.ascx.cs</location>
            <body hash="7fcc0f043159982678ac1950ee1c9d48"><![CDATA[{
			var tab = PortalSettings.ActiveTab;
			if (tab.DefaultLanguageTab != null)
			{
				tab = tab.DefaultLanguageTab;
			}

            return TabController.Instance.GetTabByCulture(tab.TabID, tab.PortalID, locale) != null;
		}]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="327" sc="9" el="401" ec="10">admin\Skins\Language.ascx.cs</location>
            <body hash="b8864b95cb3125be6609e6cf4c1e4e30"><![CDATA[{
            base.OnLoad(e);

            selectCulture.SelectedIndexChanged += selectCulture_SelectedIndexChanged;
            rptLanguages.ItemDataBound += rptLanguages_ItemDataBound;

            try
            {
                var locales = new Dictionary<string, Locale>();
                IEnumerable<ListItem> cultureListItems = DotNetNuke.Services.Localization.Localization.LoadCultureInListItems(CultureDropDownTypes.NativeName, CurrentCulture, "", false);
                foreach (Locale loc in LocaleController.Instance.GetLocales(PortalSettings.PortalId).Values)
                {
                    string defaultRoles = PortalController.GetPortalSetting(string.Format("DefaultTranslatorRoles-{0}", loc.Code), PortalSettings.PortalId, "Administrators");
                    if (!PortalSettings.ContentLocalizationEnabled ||
                        (LocaleIsAvailable(loc) &&
                            (PortalSecurity.IsInRoles(PortalSettings.AdministratorRoleName) || loc.IsPublished || PortalSecurity.IsInRoles(defaultRoles))))
                    {
                        locales.Add(loc.Code, loc);
                        foreach (var cultureItem in cultureListItems)
                        {
                            if (cultureItem.Value == loc.Code)
                            {
                                selectCulture.Items.Add(cultureItem);
                            }
                        }
                    }
                }
                if (ShowLinks)
                {
                    if (locales.Count > 1)
                    {
                        rptLanguages.DataSource = locales.Values;
                        rptLanguages.DataBind();
                    }
                    else
                    {
                        rptLanguages.Visible = false;
                    }
                }
                if (ShowMenu)
                {
                    if (!String.IsNullOrEmpty(CssClass))
                    {
                        selectCulture.CssClass = CssClass;
                    }
                    if (!IsPostBack)
                    {
                        //select the default item
                        if (CurrentCulture != null)
                        {
                            ListItem item = selectCulture.Items.FindByValue(CurrentCulture);
                            if (item != null)
                            {
                                selectCulture.SelectedIndex = -1;
                                item.Selected = true;
                            }
                        }
                    }
                    //only show language selector if more than one language
                    if (selectCulture.Items.Count <= 1)
                    {
                        selectCulture.Visible = false;
                    }
                }
                else
                {
                    selectCulture.Visible = false;
                }
                handleCommonTemplates();
            }
            catch (Exception ex)
            {
                Exceptions.ProcessPageLoadException(ex, Request.RawUrl);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="parseTemplate">
          <declaration><![CDATA[private string parseTemplate(string template, string locale)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="266" sc="9" el="289" ec="10">admin\Skins\Language.ascx.cs</location>
            <body hash="e89670679c0a7950ff23d29560740411"><![CDATA[{
            string strReturnValue = template;
            try
            {
                if (!string.IsNullOrEmpty(locale))
                {
					//for non data items use locale
                    LocalTokenReplace.Language = locale;
                }
                else
                {
					//for non data items use page culture
                    LocalTokenReplace.Language = CurrentCulture;
                }
				
				//perform token replacements
                strReturnValue = LocalTokenReplace.ReplaceEnvironmentTokens(strReturnValue);
            }
            catch (Exception ex)
            {
                Exceptions.ProcessPageLoadException(ex, Request.RawUrl);
            }
            return strReturnValue;
        }]]></body>
          </codeblock>
        </method>
        <method name="rptLanguages_ItemDataBound">
          <declaration><![CDATA[protected void rptLanguages_ItemDataBound(object sender, RepeaterItemEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="418" sc="9" el="481" ec="10">admin\Skins\Language.ascx.cs</location>
            <body hash="a74381cf0ae652a0ddbf8387204c1ca5"><![CDATA[{
            try
            {
                var litTemplate = e.Item.FindControl("litItemTemplate") as Literal;
                if (litTemplate != null)
                {
					//load proper template for this Item
                    string strTemplate = "";
                    switch (e.Item.ItemType)
                    {
                        case ListItemType.Item:
                            strTemplate = ItemTemplate;
                            break;
                        case ListItemType.AlternatingItem:
                            if (!string.IsNullOrEmpty(AlternateTemplate))
                            {
                                strTemplate = AlternateTemplate;
                            }
                            else
                            {
                                strTemplate = ItemTemplate;
                            }
                            break;
                        case ListItemType.Header:
                            strTemplate = HeaderTemplate;
                            break;
                        case ListItemType.Footer:
                            strTemplate = FooterTemplate;
                            break;
                        case ListItemType.Separator:
                            strTemplate = SeparatorTemplate;
                            break;
                    }
                    if (string.IsNullOrEmpty(strTemplate))
                    {
                        litTemplate.Visible = false;
                    }
                    else
                    {
                        if (e.Item.DataItem != null)
                        {
                            var locale = e.Item.DataItem as Locale;
                            if (locale != null && (e.Item.ItemType == ListItemType.Item || e.Item.ItemType == ListItemType.AlternatingItem))
                            {
                                if (locale.Code == CurrentCulture && !string.IsNullOrEmpty(SelectedItemTemplate))
                                {
                                    strTemplate = SelectedItemTemplate;
                                }
                                litTemplate.Text = parseTemplate(strTemplate, locale.Code);
                            }
                        }
                        else
                        {
							//for non data items use page culture
                            litTemplate.Text = parseTemplate(strTemplate, CurrentCulture);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Exceptions.ProcessPageLoadException(ex, Request.RawUrl);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="selectCulture_SelectedIndexChanged">
          <declaration><![CDATA[private void selectCulture_SelectedIndexChanged(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="404" sc="9" el="410" ec="10">admin\Skins\Language.ascx.cs</location>
            <body hash="8d400f57021c9af1037f9836d985bb50"><![CDATA[{
			//Redirect to same page to update all controls for newly selected culture
            LocalTokenReplace.Language = selectCulture.SelectedItem.Value;
            //DNN-6170 ensure skin value is culture specific in case of  static localization
            DataCache.RemoveCache(string.Format(DataCache.PortalSettingsCacheKey, PortalSettings.PortalId, Null.NullString));
            Response.Redirect(LocalTokenReplace.ReplaceEnvironmentTokens("[URL]"));
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_alternateTemplate">
          <declaration><![CDATA[private string _alternateTemplate;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_commonFooterTemplate">
          <declaration><![CDATA[private string _commonFooterTemplate;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_commonHeaderTemplate">
          <declaration><![CDATA[private string _commonHeaderTemplate;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_footerTemplate">
          <declaration><![CDATA[private string _footerTemplate;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_headerTemplate">
          <declaration><![CDATA[private string _headerTemplate;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_itemTemplate">
          <declaration><![CDATA[private string _itemTemplate;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_localResourceFile">
          <declaration><![CDATA[private string _localResourceFile;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_localTokenReplace">
          <declaration><![CDATA[private LanguageTokenReplace _localTokenReplace;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_SelectedItemTemplate">
          <declaration><![CDATA[private string _SelectedItemTemplate;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_separatorTemplate">
          <declaration><![CDATA[private string _separatorTemplate;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_showMenu">
          <declaration><![CDATA[private bool _showMenu = true;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="litCommonFooterTemplate">
          <declaration><![CDATA[protected Literal litCommonFooterTemplate;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="litCommonHeaderTemplate">
          <declaration><![CDATA[protected Literal litCommonHeaderTemplate;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="MyFileName">
          <declaration><![CDATA[private const string MyFileName = "Language.ascx";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="rptLanguages">
          <declaration><![CDATA[protected Repeater rptLanguages;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="selectCulture">
          <declaration><![CDATA[protected DropDownList selectCulture;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="AlternateTemplate">
          <declaration><![CDATA[public string AlternateTemplate]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="68" sc="13" el="74" ec="14">admin\Skins\Language.ascx.cs</location>
            <body hash="93f3a7fee046dac98c4d4e7d11d76729"><![CDATA[{
                if (string.IsNullOrEmpty(_alternateTemplate))
                {
                    _alternateTemplate = Localization.GetString("AlternateTemplate.Default", LocalResourceFile, TemplateCulture);
                }
                return _alternateTemplate;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="76" sc="13" el="78" ec="14">admin\Skins\Language.ascx.cs</location>
            <body hash="03f558a0cbf7cb88b8308522ba37369c"><![CDATA[{
                _alternateTemplate = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="CommonFooterTemplate">
          <declaration><![CDATA[public string CommonFooterTemplate]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="84" sc="13" el="90" ec="14">admin\Skins\Language.ascx.cs</location>
            <body hash="521f9b3e29ba1ef4fb3ad3cdd3286f2c"><![CDATA[{
                if (string.IsNullOrEmpty(_commonFooterTemplate))
                {
                    _commonFooterTemplate = Localization.GetString("CommonFooterTemplate.Default", LocalResourceFile, TemplateCulture);
                }
                return _commonFooterTemplate;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="92" sc="13" el="94" ec="14">admin\Skins\Language.ascx.cs</location>
            <body hash="fcce9f2d1b7435c0875c2e92c59bca72"><![CDATA[{
                _commonFooterTemplate = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="CommonHeaderTemplate">
          <declaration><![CDATA[public string CommonHeaderTemplate]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="100" sc="13" el="106" ec="14">admin\Skins\Language.ascx.cs</location>
            <body hash="b99d6aa5ddb2a39c96236008586adc45"><![CDATA[{
                if (string.IsNullOrEmpty(_commonHeaderTemplate))
                {
                    _commonHeaderTemplate = Localization.GetString("CommonHeaderTemplate.Default", LocalResourceFile, TemplateCulture);
                }
                return _commonHeaderTemplate;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="108" sc="13" el="110" ec="14">admin\Skins\Language.ascx.cs</location>
            <body hash="d44e4072d7f01614927c9c5a48c16b72"><![CDATA[{
                _commonHeaderTemplate = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="CssClass">
          <declaration><![CDATA[public string CssClass]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="113" sc="34" el="113" ec="38">admin\Skins\Language.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="113" sc="39" el="113" ec="43">admin\Skins\Language.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="CurrentCulture">
          <declaration><![CDATA[protected string CurrentCulture]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="223" sc="13" el="225" ec="14">admin\Skins\Language.ascx.cs</location>
            <body hash="368b29ca0c92983a6e37e9fae6c889c2"><![CDATA[{
                return CultureInfo.CurrentCulture.ToString();
            }]]></body>
          </codeblock>
        </property>
        <property name="FooterTemplate">
          <declaration><![CDATA[public string FooterTemplate]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="118" sc="13" el="124" ec="14">admin\Skins\Language.ascx.cs</location>
            <body hash="0183d8b3c0f758147bbfcd4aa7180084"><![CDATA[{
                if (string.IsNullOrEmpty(_footerTemplate))
                {
                    _footerTemplate = Localization.GetString("FooterTemplate.Default", LocalResourceFile, TemplateCulture);
                }
                return _footerTemplate;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="126" sc="13" el="128" ec="14">admin\Skins\Language.ascx.cs</location>
            <body hash="7f75c007697880297cf2f613e2da3369"><![CDATA[{
                _footerTemplate = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="HeaderTemplate">
          <declaration><![CDATA[public string HeaderTemplate]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="134" sc="13" el="140" ec="14">admin\Skins\Language.ascx.cs</location>
            <body hash="b69c1690a1142e76122ab7ea0dcf92df"><![CDATA[{
                if (string.IsNullOrEmpty(_headerTemplate))
                {
                    _headerTemplate = Localization.GetString("HeaderTemplate.Default", LocalResourceFile, TemplateCulture);
                }
                return _headerTemplate;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="142" sc="13" el="144" ec="14">admin\Skins\Language.ascx.cs</location>
            <body hash="5cd681f0f01ff93d534bd5e69b9ca55a"><![CDATA[{
                _headerTemplate = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="ItemTemplate">
          <declaration><![CDATA[public string ItemTemplate]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="150" sc="13" el="156" ec="14">admin\Skins\Language.ascx.cs</location>
            <body hash="2408241abddaf1b6bf438a9304f80299"><![CDATA[{
                if (string.IsNullOrEmpty(_itemTemplate))
                {
                    _itemTemplate = Localization.GetString("ItemTemplate.Default", LocalResourceFile, TemplateCulture);
                }
                return _itemTemplate;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="158" sc="13" el="160" ec="14">admin\Skins\Language.ascx.cs</location>
            <body hash="2aa3dd19c69f47fe2993cd9c8f83684b"><![CDATA[{
                _itemTemplate = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="LocalResourceFile">
          <declaration><![CDATA[protected string LocalResourceFile]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="240" sc="13" el="246" ec="14">admin\Skins\Language.ascx.cs</location>
            <body hash="27dc5aabc13693169d082dab5accc278"><![CDATA[{
                if (string.IsNullOrEmpty(_localResourceFile))
                {
                    _localResourceFile = Localization.GetResourceFile(this, MyFileName);
                }
                return _localResourceFile;
            }]]></body>
          </codeblock>
        </property>
        <property name="LocalTokenReplace">
          <declaration><![CDATA[protected LanguageTokenReplace LocalTokenReplace]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="252" sc="13" el="258" ec="14">admin\Skins\Language.ascx.cs</location>
            <body hash="1e70d97e6e29b58b3c700e54a5827909"><![CDATA[{
                if (_localTokenReplace == null)
                {
                    _localTokenReplace = new LanguageTokenReplace {resourceFile = LocalResourceFile};
                }
                return _localTokenReplace;
            }]]></body>
          </codeblock>
        </property>
        <property name="SelectedItemTemplate">
          <declaration><![CDATA[public string SelectedItemTemplate]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="166" sc="13" el="172" ec="14">admin\Skins\Language.ascx.cs</location>
            <body hash="39c4ecba7012dfec9bd35122047e1ace"><![CDATA[{
                if (string.IsNullOrEmpty(_SelectedItemTemplate))
                {
                    _SelectedItemTemplate = Localization.GetString("SelectedItemTemplate.Default", LocalResourceFile, TemplateCulture);
                }
                return _SelectedItemTemplate;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="174" sc="13" el="176" ec="14">admin\Skins\Language.ascx.cs</location>
            <body hash="79266a920599d17590223abd2b92a736"><![CDATA[{
                _SelectedItemTemplate = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="SeparatorTemplate">
          <declaration><![CDATA[public string SeparatorTemplate]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="182" sc="13" el="188" ec="14">admin\Skins\Language.ascx.cs</location>
            <body hash="942d4ad40f1ff585c57c9cdec46687ea"><![CDATA[{
                if (string.IsNullOrEmpty(_separatorTemplate))
                {
                    _separatorTemplate = Localization.GetString("SeparatorTemplate.Default", LocalResourceFile, TemplateCulture);
                }
                return _separatorTemplate;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="190" sc="13" el="192" ec="14">admin\Skins\Language.ascx.cs</location>
            <body hash="bf97a9adcfe7cfb03f410470a149ed7f"><![CDATA[{
                _separatorTemplate = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="ShowLinks">
          <declaration><![CDATA[public bool ShowLinks]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="195" sc="33" el="195" ec="37">admin\Skins\Language.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="195" sc="38" el="195" ec="42">admin\Skins\Language.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ShowMenu">
          <declaration><![CDATA[public bool ShowMenu]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="200" sc="13" el="207" ec="14">admin\Skins\Language.ascx.cs</location>
            <body hash="a49c2a9e2a1ec9bf0e87bc48b8961875"><![CDATA[{
                if ((_showMenu == false) && (ShowLinks == false))
                {
					//this is to make sure that at least one type of selector will be visible if multiple languages are enabled
                    _showMenu = true;
                }
                return _showMenu;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="209" sc="13" el="211" ec="14">admin\Skins\Language.ascx.cs</location>
            <body hash="76dcb05021f82a0b608ce9e023a03c9c"><![CDATA[{
                _showMenu = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="TemplateCulture">
          <declaration><![CDATA[protected string TemplateCulture]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="231" sc="13" el="233" ec="14">admin\Skins\Language.ascx.cs</location>
            <body hash="f80dca07e8644176d8b83abc865525c8"><![CDATA[{
                return (UseCurrentCultureForTemplate) ? CurrentCulture : "en-US";
            }]]></body>
          </codeblock>
        </property>
        <property name="UseCurrentCultureForTemplate">
          <declaration><![CDATA[public bool UseCurrentCultureForTemplate]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="214" sc="52" el="214" ec="56">admin\Skins\Language.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="214" sc="57" el="214" ec="61">admin\Skins\Language.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="LeftMenu">
      <deprecation>This skin object has been expired, create empty object to compact old skin. please ask skin vendor to update the skin if it referenced to this control.</deprecation>
      <declaration><![CDATA[public class LeftMenu : SkinObjectBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public LeftMenu()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="Links">
      <declaration><![CDATA[public class Links : SkinObjectBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private bool _forceLinks = true;]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="46" sc="9" el="47" ec="47">admin\Skins\Links.ascx.cs</location>
            <body hash="1c2840281a4152796c63c3c877c9f644"><![CDATA[private bool _forceLinks = true;
        private bool _includeActiveTab = true;]]></body>
          </codeblock>
        </constructor>
        <constructor name=".cctor">
          <declaration><![CDATA[static Links()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="41" sc="9" el="41" ec="121">admin\Skins\Links.ascx.cs</location>
            <body hash="e841074fcf8b9c02a5c33555fa7f6074"><![CDATA[private static readonly Regex SrcRegex = new Regex("src=[']?", RegexOptions.Compiled | RegexOptions.IgnoreCase)]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="AddLink">
          <declaration><![CDATA[private string AddLink(string strTabName, string strURL, string strCssClass)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="235" sc="9" el="237" ec="10">admin\Skins\Links.ascx.cs</location>
            <body hash="2be976d7c4ff19642ab7aee4218c8744"><![CDATA[{
            return string.Format("<a class=\"{0}\" href=\"{1}\">{2}</a>", strCssClass, strURL, strTabName);
        }]]></body>
          </codeblock>
        </method>
        <method name="BuildLinks">
          <declaration><![CDATA[private string BuildLinks(string strLevel, string strSeparator, string strCssClass)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="159" sc="9" el="174" ec="10">admin\Skins\Links.ascx.cs</location>
            <body hash="e40e5c49e1a2cd6d1a140809b55ce586"><![CDATA[{
            var sbLinks = new StringBuilder();

            List<TabInfo> portalTabs = TabController.GetTabsBySortOrder(PortalSettings.PortalId);
            List<TabInfo> hostTabs = TabController.GetTabsBySortOrder(Null.NullInteger);

            foreach (TabInfo objTab in portalTabs)
            {
                sbLinks.Append(ProcessLink(ProcessTab(objTab, strLevel, strCssClass), sbLinks.ToString().Length));
            }
            foreach (TabInfo objTab in hostTabs)
            {
                sbLinks.Append(ProcessLink(ProcessTab(objTab, strLevel, strCssClass), sbLinks.ToString().Length));
            }
            return sbLinks.ToString();
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="113" sc="9" el="152" ec="10">admin\Skins\Links.ascx.cs</location>
            <body hash="e55a49cae7ca2a844d3bf82b81622285"><![CDATA[{
            base.OnLoad(e);
            string strCssClass;
            if (!String.IsNullOrEmpty(CssClass))
            {
                strCssClass = CssClass;
            }
            else
            {
                strCssClass = "SkinObject";
            }
            string strSeparator = string.Empty;
            if (!String.IsNullOrEmpty(Separator))
            {
                if (Separator.IndexOf("src=", StringComparison.Ordinal) != -1)
                {
					//Add the skinpath to image paths
                    Separator = SrcRegex.Replace(Separator, "$&" + PortalSettings.ActiveTab.SkinPath);
                }
				
				//Wrap in a span
                Separator = string.Format("<span class=\"{0}\">{1}</span>", strCssClass, Separator);
            }
            else
            {
                Separator = " ";
            }
			
            //build links
            string strLinks = "";

            strLinks = BuildLinks(Level, strSeparator, strCssClass);
			
			//Render links, even if nothing is returned with the currently set level
            if (String.IsNullOrEmpty(strLinks) && ForceLinks)
            {
                strLinks = BuildLinks("", strSeparator, strCssClass);
            }
            lblLinks.Text = strLinks;
        }]]></body>
          </codeblock>
        </method>
        <method name="ProcessLink">
          <declaration><![CDATA[private string ProcessLink(string sLink, int iLinksLength)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="216" sc="9" el="232" ec="10">admin\Skins\Links.ascx.cs</location>
            <body hash="621602ace9d0e73ea7752e50a505f88a"><![CDATA[{
			//wrap in a div if set to vertical
            if (String.IsNullOrEmpty(sLink))
            {
                return "";
            }
            if (Alignment == "vertical")
            {
                sLink = string.Concat("<div>", Separator, sLink, "</div>");
            }
            else if (!String.IsNullOrEmpty(Separator) && iLinksLength > 0)
            {
				//If not vertical, then render the separator
                sLink = string.Concat(Separator, sLink);
            }
            return sLink;
        }]]></body>
          </codeblock>
        </method>
        <method name="ProcessTab">
          <declaration><![CDATA[private string ProcessTab(TabInfo objTab, string strLevel, string strCssClass)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="177" sc="9" el="213" ec="10">admin\Skins\Links.ascx.cs</location>
            <body hash="421c5f8581163652f4c91fe469cd42ce"><![CDATA[{
            if (Navigation.CanShowTab(objTab, AdminMode, ShowDisabled))
            {
                switch (strLevel)
                {
                    case "same": //Render tabs on the same level as the current tab
                    case "":
                        if (objTab.ParentId == PortalSettings.ActiveTab.ParentId)
                        {
                            if (IncludeActiveTab || objTab.TabID != PortalSettings.ActiveTab.TabID)
                            {
                                return AddLink(objTab.TabName, objTab.FullUrl, strCssClass);
                            }
                        }
                        break;
                    case "child": //Render the current tabs child tabs
                        if (objTab.ParentId == PortalSettings.ActiveTab.TabID)
                        {
                            return AddLink(objTab.TabName, objTab.FullUrl, strCssClass);
                        }
                        break;
                    case "parent": //Render the current tabs parenttab
                        if (objTab.TabID == PortalSettings.ActiveTab.ParentId)
                        {
                            return AddLink(objTab.TabName, objTab.FullUrl, strCssClass);
                        }
                        break;
                    case "root": //Render Root tabs
                        if (objTab.Level == 0)
                        {
                            return AddLink(objTab.TabName, objTab.FullUrl, strCssClass);
                        }
                        break;
                }
            }
            return "";
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_alignment">
          <declaration><![CDATA[private string _alignment;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_forceLinks">
          <declaration><![CDATA[private bool _forceLinks = true;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_includeActiveTab">
          <declaration><![CDATA[private bool _includeActiveTab = true;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_level">
          <declaration><![CDATA[private string _level;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblLinks">
          <declaration><![CDATA[protected Label lblLinks;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="SrcRegex">
          <declaration><![CDATA[private static readonly Regex SrcRegex = new Regex("src=[']?", RegexOptions.IgnoreCase | RegexOptions.Compiled);]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="Alignment">
          <declaration><![CDATA[public string Alignment]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="57" sc="13" el="59" ec="14">admin\Skins\Links.ascx.cs</location>
            <body hash="b9e004584fbfcef4d5bc1d486aaa9b19"><![CDATA[{
                return _alignment;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="61" sc="13" el="63" ec="14">admin\Skins\Links.ascx.cs</location>
            <body hash="2de658f2765f9bd7af81bd80c8764cb2"><![CDATA[{
                _alignment = value.ToLower();
            }]]></body>
          </codeblock>
        </property>
        <property name="CssClass">
          <declaration><![CDATA[public string CssClass]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="66" sc="34" el="66" ec="38">admin\Skins\Links.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="66" sc="39" el="66" ec="43">admin\Skins\Links.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ForceLinks">
          <declaration><![CDATA[public bool ForceLinks]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="87" sc="13" el="89" ec="14">admin\Skins\Links.ascx.cs</location>
            <body hash="0463ab591a54f16ef3405481c65f6082"><![CDATA[{
                return _forceLinks;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="91" sc="13" el="93" ec="14">admin\Skins\Links.ascx.cs</location>
            <body hash="0ddd6815fb8da64336eaaa0ecb9fc8ab"><![CDATA[{
                _forceLinks = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="IncludeActiveTab">
          <declaration><![CDATA[public bool IncludeActiveTab]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="99" sc="13" el="101" ec="14">admin\Skins\Links.ascx.cs</location>
            <body hash="08ace2bac19f34ec5181a829fafc4bcc"><![CDATA[{
                return _includeActiveTab;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="103" sc="13" el="105" ec="14">admin\Skins\Links.ascx.cs</location>
            <body hash="a1bfaf1d1de219f4ea4fc70432d25403"><![CDATA[{
                _includeActiveTab = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="Level">
          <declaration><![CDATA[public string Level]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="71" sc="13" el="73" ec="14">admin\Skins\Links.ascx.cs</location>
            <body hash="bfc16c102841583a3fa9012d30043683"><![CDATA[{
                return _level;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="75" sc="13" el="77" ec="14">admin\Skins\Links.ascx.cs</location>
            <body hash="0dcd708068402287667980b7e1b7a260"><![CDATA[{
                _level = value.ToLower();
            }]]></body>
          </codeblock>
        </property>
        <property name="Separator">
          <declaration><![CDATA[public string Separator]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="80" sc="35" el="80" ec="39">admin\Skins\Links.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="80" sc="40" el="80" ec="44">admin\Skins\Links.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ShowDisabled">
          <declaration><![CDATA[public bool ShowDisabled]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="82" sc="36" el="82" ec="40">admin\Skins\Links.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="82" sc="41" el="82" ec="45">admin\Skins\Links.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="LinkToFullSite">
      <declaration><![CDATA[public class LinkToFullSite : SkinObjectBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public LinkToFullSite()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="64" sc="3" el="78" ec="10">admin\Skins\LinkToFullSite.ascx.cs</location>
            <body hash="1ac93949336e7208a127803bac78429f"><![CDATA[{
            base.OnLoad(e);

            var redirectionController = new RedirectionController();
            var redirectUrl = redirectionController.GetFullSiteUrl();
            if (!string.IsNullOrEmpty(redirectUrl))
            {                
                lnkPortal.NavigateUrl = redirectUrl;
                lnkPortal.Text = Localization.GetString("lnkPortal", LocalResourcesFile);
            }
            else
            {
                this.Visible = false;
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_localResourcesFile">
          <declaration><![CDATA[private string _localResourcesFile;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lnkPortal">
          <declaration><![CDATA[protected HyperLink lnkPortal;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="MyFileName">
          <declaration><![CDATA[private const string MyFileName = "LinkToFullSite.ascx";]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="LocalResourcesFile">
          <declaration><![CDATA[private string LocalResourcesFile]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="52" sc="7" el="59" ec="8">admin\Skins\LinkToFullSite.ascx.cs</location>
            <body hash="27eda31706d101a3df656c232c76121a"><![CDATA[{
    			if(string.IsNullOrEmpty(_localResourcesFile))
    			{
    				_localResourcesFile = Localization.GetResourceFile(this, MyFileName);
    			}

    			return _localResourcesFile;
    		}]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="LinkToMobileSite">
      <declaration><![CDATA[public class LinkToMobileSite : SkinObjectBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public LinkToMobileSite()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="64" sc="3" el="78" ec="10">admin\Skins\LinkToMobileSite.ascx.cs</location>
            <body hash="3606d36c529331e8e3b6dd6b9fb01abb"><![CDATA[{
			base.OnLoad(e);

            var redirectionController = new RedirectionController();
            var redirectUrl = redirectionController.GetMobileSiteUrl();
            if (!string.IsNullOrEmpty(redirectUrl))
            {                
                lnkPortal.NavigateUrl = redirectUrl;                
                lnkPortal.Text = Localization.GetString("lnkPortal", LocalResourcesFile);
            }
            else
            {
                this.Visible = false;                    
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_localResourcesFile">
          <declaration><![CDATA[private string _localResourcesFile;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lnkPortal">
          <declaration><![CDATA[protected HyperLink lnkPortal;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="MyFileName">
          <declaration><![CDATA[private const string MyFileName = "LinkToMobileSite.ascx";]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="LocalResourcesFile">
          <declaration><![CDATA[private string LocalResourcesFile]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="52" sc="7" el="59" ec="8">admin\Skins\LinkToMobileSite.ascx.cs</location>
            <body hash="27eda31706d101a3df656c232c76121a"><![CDATA[{
    			if(string.IsNullOrEmpty(_localResourcesFile))
    			{
    				_localResourcesFile = Localization.GetResourceFile(this, MyFileName);
    			}

    			return _localResourcesFile;
    		}]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="Login">
      <declaration><![CDATA[public class Login : SkinObjectBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public Login()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="48" sc="9" el="51" ec="10">admin\Skins\Login.ascx.cs</location>
            <body hash="1f8c9333bb8d5a23a255fddb9ce9697c"><![CDATA[public Login()
        {
            LegacyMode = true;
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="HasSocialAuthenticationEnabled">
          <declaration><![CDATA[private bool HasSocialAuthenticationEnabled()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="182" sc="9" el="192" ec="10">admin\Skins\Login.ascx.cs</location>
            <body hash="7e8807b4ad325ce3012f9badae579c31"><![CDATA[{
            return (from a in AuthenticationController.GetEnabledAuthenticationServices()
                               let enabled = (a.AuthenticationType == "Facebook" 
                                                || a.AuthenticationType == "Google"
                                                || a.AuthenticationType == "Live" 
                                                || a.AuthenticationType == "Twitter")
                                             ? PortalController.GetPortalSettingAsBoolean(a.AuthenticationType + "_Enabled", PortalSettings.PortalId, false)
                                             : !string.IsNullOrEmpty(a.LoginControlSrc) && (LoadControl("~/" + a.LoginControlSrc) as AuthenticationLoginBase).Enabled
                               where a.AuthenticationType != "DNN" && enabled
                               select a).Any();
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="76" sc="3" el="80" ec="4">admin\Skins\Login.ascx.cs</location>
            <body hash="193ac222f1bc2f232876c867518190a5"><![CDATA[{
			base.OnInit(e);

			Visible = !PortalSettings.HideLoginControl || Request.IsAuthenticated;
		}]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="83" sc="9" el="179" ec="10">admin\Skins\Login.ascx.cs</location>
            <body hash="e301d865db3f4e7793f7af8776b2a587"><![CDATA[{
            base.OnLoad(e);

	        if (Visible)
	        {
		        try
		        {
			        if (LegacyMode)
			        {
				        loginLink.Visible = true;
				        loginGroup.Visible = false;
			        }
			        else
			        {
				        loginLink.Visible = false;
				        loginGroup.Visible = true;
			        }

			        if (!String.IsNullOrEmpty(CssClass))
			        {
				        loginLink.CssClass = CssClass;
				        enhancedLoginLink.CssClass = CssClass;
			        }

			        if (Request.IsAuthenticated)
			        {
				        if (!String.IsNullOrEmpty(LogoffText))
				        {
					        if (LogoffText.IndexOf("src=") != -1)
					        {
						        LogoffText = LogoffText.Replace("src=\"", "src=\"" + PortalSettings.ActiveTab.SkinPath);
					        }
					        loginLink.Text = LogoffText;
					        enhancedLoginLink.Text = LogoffText;
				        }
				        else
				        {
					        loginLink.Text = Localization.GetString("Logout", Localization.GetResourceFile(this, MyFileName));
					        enhancedLoginLink.Text = loginLink.Text;
					        loginLink.ToolTip = loginLink.Text;
					        enhancedLoginLink.ToolTip = loginLink.Text;
				        }
				        loginLink.NavigateUrl = Globals.NavigateURL(PortalSettings.ActiveTab.TabID, "Logoff");
				        enhancedLoginLink.NavigateUrl = loginLink.NavigateUrl;
			        }
			        else
			        {
				        if (!String.IsNullOrEmpty(Text))
				        {
					        if (Text.IndexOf("src=") != -1)
					        {
						        Text = Text.Replace("src=\"", "src=\"" + PortalSettings.ActiveTab.SkinPath);
					        }
					        loginLink.Text = Text;
					        enhancedLoginLink.Text = Text;
				        }
				        else
				        {
					        loginLink.Text = Localization.GetString("Login", Localization.GetResourceFile(this, MyFileName));
					        enhancedLoginLink.Text = loginLink.Text;
					        loginLink.ToolTip = loginLink.Text;
					        enhancedLoginLink.ToolTip = loginLink.Text;
				        }

				        string returnUrl = HttpContext.Current.Request.RawUrl;
				        if (returnUrl.IndexOf("?returnurl=") != -1)
				        {
					        returnUrl = returnUrl.Substring(0, returnUrl.IndexOf("?returnurl="));
				        }
				        returnUrl = HttpUtility.UrlEncode(returnUrl);

				        loginLink.NavigateUrl = Globals.LoginURL(returnUrl, (Request.QueryString["override"] != null));
				        enhancedLoginLink.NavigateUrl = loginLink.NavigateUrl;

                        //avoid issues caused by multiple clicks of login link
                        var oneclick = "this.disabled=true;";
			            if (Request.UserAgent != null && Request.UserAgent.Contains("MSIE 8.0")==false)
			            {
                            loginLink.Attributes.Add("onclick", oneclick);
                            enhancedLoginLink.Attributes.Add("onclick", oneclick);
			            }
                        
				        if (PortalSettings.EnablePopUps && PortalSettings.LoginTabId == Null.NullInteger && !HasSocialAuthenticationEnabled())
				        {
					        //To avoid duplicated encodes of URL
                            var clickEvent = "return " + UrlUtils.PopUpUrl(HttpUtility.UrlDecode(loginLink.NavigateUrl), this, PortalSettings, true, false, 300, 650);
					        loginLink.Attributes.Add("onclick", clickEvent);
					        enhancedLoginLink.Attributes.Add("onclick", clickEvent);
				        }
			        }
		        }
		        catch (Exception exc)
		        {
			        Exceptions.ProcessModuleLoadException(this, exc);
		        }
	        }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="enhancedLoginLink">
          <declaration><![CDATA[protected HyperLink enhancedLoginLink;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="loginGroup">
          <declaration><![CDATA[protected HtmlGenericControl loginGroup;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="loginLink">
          <declaration><![CDATA[protected HyperLink loginLink;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="MyFileName">
          <declaration><![CDATA[private const string MyFileName = "Login.ascx";]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="CssClass">
          <declaration><![CDATA[public string CssClass]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="62" sc="34" el="62" ec="38">admin\Skins\Login.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="62" sc="39" el="62" ec="43">admin\Skins\Login.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="LegacyMode">
          <declaration><![CDATA[public bool LegacyMode]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="69" sc="34" el="69" ec="38">admin\Skins\Login.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="69" sc="39" el="69" ec="43">admin\Skins\Login.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="LogoffText">
          <declaration><![CDATA[public string LogoffText]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="64" sc="36" el="64" ec="40">admin\Skins\Login.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="64" sc="41" el="64" ec="45">admin\Skins\Login.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Text">
          <declaration><![CDATA[public string Text]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="60" sc="30" el="60" ec="34">admin\Skins\Login.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="60" sc="35" el="60" ec="39">admin\Skins\Login.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="Logo">
      <declaration><![CDATA[public class Logo : SkinObjectBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public Logo()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="GetLogoFileInfo">
          <declaration><![CDATA[private IFileInfo GetLogoFileInfo()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="96" sc="9" el="102" ec="10">admin\Skins\Logo.ascx.cs</location>
            <body hash="d239a74475f315ebe89709d47c57fdb1"><![CDATA[{
            string cacheKey = String.Format(DataCache.PortalCacheKey, PortalSettings.PortalId, PortalSettings.CultureCode) + "LogoFile";
            var file = CBO.GetCachedObject<FileInfo>(new CacheItemArgs(cacheKey, DataCache.PortalCacheTimeOut, DataCache.PortalCachePriority),
                                                    GetLogoFileInfoCallBack);

            return file;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetLogoFileInfoCallBack">
          <declaration><![CDATA[private IFileInfo GetLogoFileInfoCallBack(CacheItemArgs itemArgs)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="105" sc="9" el="107" ec="10">admin\Skins\Logo.ascx.cs</location>
            <body hash="e6d8d8be85f63aed525026bc95ee5ad4"><![CDATA[{
            return FileManager.Instance.GetFile(PortalSettings.PortalId, PortalSettings.LogoFile);
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="46" sc="9" el="93" ec="10">admin\Skins\Logo.ascx.cs</location>
            <body hash="5dc0a9294f450a5537b208dbd94c56f4"><![CDATA[{
            base.OnLoad(e);
            try
            {
                if (!String.IsNullOrEmpty(BorderWidth))
                {
                    imgLogo.BorderWidth = Unit.Parse(BorderWidth);
                }
                if (!String.IsNullOrEmpty(CssClass))
                {
                    imgLogo.CssClass = CssClass;
                }
                bool logoVisible = false;
                if (!String.IsNullOrEmpty(PortalSettings.LogoFile))
                {
                    var fileInfo = GetLogoFileInfo();
                    if (fileInfo != null)
                    {
                        string imageUrl = FileManager.Instance.GetUrl(fileInfo);
                        if (!String.IsNullOrEmpty(imageUrl))
                        {
                            imgLogo.ImageUrl = imageUrl;
                            logoVisible = true;
                        }
                    }
                }
                imgLogo.Visible = logoVisible;
                imgLogo.AlternateText = PortalSettings.PortalName;
                hypLogo.ToolTip = PortalSettings.PortalName;

                if (!imgLogo.Visible)
                {
                    hypLogo.Attributes.Add("aria-label", PortalSettings.PortalName);
                }
                if (PortalSettings.HomeTabId != -1)
                {
                    hypLogo.NavigateUrl = Globals.NavigateURL(PortalSettings.HomeTabId);
                }
                else
                {
                    hypLogo.NavigateUrl = Globals.AddHTTP(PortalSettings.PortalAlias.HTTPAlias);
                }
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="hypLogo">
          <declaration><![CDATA[protected HyperLink hypLogo;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="imgLogo">
          <declaration><![CDATA[protected Image imgLogo;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="BorderWidth">
          <declaration><![CDATA[public string BorderWidth]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="43" sc="37" el="43" ec="41">admin\Skins\Logo.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="43" sc="42" el="43" ec="46">admin\Skins\Logo.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="CssClass">
          <declaration><![CDATA[public string CssClass]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="44" sc="34" el="44" ec="38">admin\Skins\Logo.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="44" sc="39" el="44" ec="43">admin\Skins\Logo.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="Meta">
      <declaration><![CDATA[public class Meta : SkinObjectBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private readonly Meta.HttpPlaceholder http = new Meta.HttpPlaceholder();]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="35" sc="9" el="35" ec="71">admin\Skins\Meta.ascx.cs</location>
            <body hash="a09f890bbcb84ad52a2af411ac5993bf"><![CDATA[private readonly HttpPlaceholder http = new HttpPlaceholder()]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="OnPreRender">
          <declaration><![CDATA[protected override void OnPreRender(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="74" sc="9" el="101" ec="10">admin\Skins\Meta.ascx.cs</location>
            <body hash="644c910112e47efa81035dd97d4b4511"><![CDATA[{
            base.OnPreRender(e);

            //if(!string.IsNullOrEmpty(Name) && !string.IsNullOrEmpty(Content))
            //{
            //    var metaTag = new HtmlMeta();
            //    metaTag.Name = Name;
            //    metaTag.Content = Content;
            //    Page.Header.Controls.Add(metaTag);
            //}

            if ((!string.IsNullOrEmpty(Name) || !string.IsNullOrEmpty(HttpEquiv)) && !string.IsNullOrEmpty(Content))
            {
                var metaTag = new HtmlMeta();

                if (!string.IsNullOrEmpty(HttpEquiv))
                    metaTag.HttpEquiv = HttpEquiv;
                if (!string.IsNullOrEmpty(Name))
                    metaTag.Name = Name;

                metaTag.Content = Content;

                if (InsertFirst)
                    Page.Header.Controls.AddAt(0, metaTag);
                else
                    Page.Header.Controls.Add(metaTag);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="http">
          <declaration><![CDATA[private readonly Meta.HttpPlaceholder http = new Meta.HttpPlaceholder();]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="Content">
          <declaration><![CDATA[public string Content]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="45" sc="33" el="45" ec="37">admin\Skins\Meta.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="45" sc="38" el="45" ec="42">admin\Skins\Meta.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Http">
          <declaration><![CDATA[public Meta.HttpPlaceholder Http]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="HttpEquiv">
          <declaration><![CDATA[public string HttpEquiv]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="InsertFirst">
          <declaration><![CDATA[public bool InsertFirst]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="71" sc="35" el="71" ec="39">admin\Skins\Meta.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="71" sc="40" el="71" ec="44">admin\Skins\Meta.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Name">
          <declaration><![CDATA[public string Name]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="42" sc="30" el="42" ec="34">admin\Skins\Meta.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="42" sc="35" el="42" ec="39">admin\Skins\Meta.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="Nav">
      <declaration><![CDATA[public class Nav : NavObjectBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public Nav()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="BuildNodes">
          <declaration><![CDATA[private void BuildNodes(DNNNode objNode)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="190" sc="9" el="195" ec="10">admin\Skins\Nav.ascx.cs</location>
            <body hash="43dc2d008fc6ba2b36e87866efda1be7"><![CDATA[{
            DNNNodeCollection objNodes;
            objNodes = GetNavigationNodes(objNode);
            Control.ClearNodes(); //since we always bind we need to clear the nodes for providers that maintain their state
            Bind(objNodes);
        }]]></body>
          </codeblock>
        </method>
        <method name="Control_NodeClick">
          <declaration><![CDATA[private void Control_NodeClick(NavigationEventArgs args)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="208" sc="9" el="214" ec="10">admin\Skins\Nav.ascx.cs</location>
            <body hash="811770a70b173fe505826f5ed7c63a6c"><![CDATA[{
            if (args.Node == null)
            {
                args.Node = Navigation.GetNavigationNode(args.ID, Control.ID);
            }
            Response.Redirect(Globals.ApplicationURL(int.Parse(args.Node.Key)), true);
        }]]></body>
          </codeblock>
        </method>
        <method name="Control_PopulateOnDemand">
          <declaration><![CDATA[private void Control_PopulateOnDemand(NavigationEventArgs args)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="217" sc="9" el="223" ec="10">admin\Skins\Nav.ascx.cs</location>
            <body hash="22df6e014ee659dc407e381e27545257"><![CDATA[{
            if (args.Node == null)
            {
                args.Node = Navigation.GetNavigationNode(args.ID, Control.ID);
            }
            BuildNodes(args.Node);
        }]]></body>
          </codeblock>
        </method>
        <method name="FixImagePath">
          <declaration><![CDATA[private string FixImagePath(string strPath)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="178" sc="9" el="187" ec="10">admin\Skins\Nav.ascx.cs</location>
            <body hash="b4af3c7cfa61eb6fa90cc4130299211c"><![CDATA[{
            if (strPath.IndexOf("src=") != -1 && strPath.IndexOf("src=\"/") < 0)
            {
                return strPath.Replace("src=\"", "src=\"[SKINPATH]");
            }
            else
            {
                return strPath;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="InitializeComponent">
          <declaration><![CDATA[private void InitializeComponent()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="37" sc="9" el="38" ec="10">admin\Skins\Nav.ascx.cs</location>
            <body hash="539fa760ca172337a931519768c64187"><![CDATA[{
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="198" sc="9" el="205" ec="10">admin\Skins\Nav.ascx.cs</location>
            <body hash="96d54bdf35206a788ee21487fa1726a3"><![CDATA[{
            InitializeNavControl(this, "SolpartMenuNavigationProvider");
            Control.NodeClick += Control_NodeClick;
            Control.PopulateOnDemand += Control_PopulateOnDemand;

            base.OnInit(e);
            InitializeComponent();
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="41" sc="9" el="175" ec="10">admin\Skins\Nav.ascx.cs</location>
            <body hash="14b12f392b090b0f287ed6a78639c6ae"><![CDATA[{
            base.OnLoad(e);
            try
            {
                bool blnIndicateChildren = bool.Parse(GetValue(IndicateChildren, "True"));
                string strRightArrow;
                string strDownArrow;
                var objSkins = new SkinController();
				
				//image for right facing arrow
                if (!String.IsNullOrEmpty(IndicateChildImageSub))
                {
                    strRightArrow = IndicateChildImageSub;
                }
                else
                {
                    strRightArrow = "breadcrumb.gif"; //removed APPIMAGEPATH token - http://www.dotnetnuke.com/Community/ForumsDotNetNuke/tabid/795/forumid/76/threadid/85554/scope/posts/Default.aspx
                }
				
				//image for down facing arrow
                if (!String.IsNullOrEmpty(IndicateChildImageRoot))
                {
                    strDownArrow = IndicateChildImageRoot;
                }
                else
                {
                    strDownArrow = "menu_down.gif"; //removed APPIMAGEPATH token - http://www.dotnetnuke.com/Community/ForumsDotNetNuke/tabid/795/forumid/76/threadid/85554/scope/posts/Default.aspx
                }
				
				//Set correct image path for all separator images
                if (!String.IsNullOrEmpty(SeparatorHTML))
                {
                    SeparatorHTML = FixImagePath(SeparatorHTML);
                }
				
                if (!String.IsNullOrEmpty(SeparatorLeftHTML))
                {
                    SeparatorLeftHTML = FixImagePath(SeparatorLeftHTML);
                }
				
                if (!String.IsNullOrEmpty(SeparatorRightHTML))
                {
                    SeparatorRightHTML = FixImagePath(SeparatorRightHTML);
                }
                if (!String.IsNullOrEmpty(SeparatorLeftHTMLBreadCrumb))
                {
                    SeparatorLeftHTMLBreadCrumb = FixImagePath(SeparatorLeftHTMLBreadCrumb);
                }
				
                if (!String.IsNullOrEmpty(SeparatorRightHTMLBreadCrumb))
                {
                    SeparatorRightHTMLBreadCrumb = FixImagePath(SeparatorRightHTMLBreadCrumb);
                }
				
                if (!String.IsNullOrEmpty(SeparatorLeftHTMLActive))
                {
                    SeparatorLeftHTMLActive = FixImagePath(SeparatorLeftHTMLActive);
                }
				
                if (!String.IsNullOrEmpty(SeparatorRightHTMLActive))
                {
                    SeparatorRightHTMLActive = FixImagePath(SeparatorRightHTMLActive);
                }
				
                if (!String.IsNullOrEmpty(NodeLeftHTMLBreadCrumbRoot))
                {
                    NodeLeftHTMLBreadCrumbRoot = FixImagePath(NodeLeftHTMLBreadCrumbRoot);
                }
				
                if (!String.IsNullOrEmpty(NodeRightHTMLBreadCrumbRoot))
                {
                    NodeRightHTMLBreadCrumbRoot = FixImagePath(NodeRightHTMLBreadCrumbRoot);
                }
				
                if (!String.IsNullOrEmpty(NodeLeftHTMLBreadCrumbSub))
                {
                    NodeLeftHTMLBreadCrumbSub = FixImagePath(NodeLeftHTMLBreadCrumbSub);
                }
				
                if (!String.IsNullOrEmpty(NodeRightHTMLBreadCrumbSub))
                {
                    NodeRightHTMLBreadCrumbSub = FixImagePath(NodeRightHTMLBreadCrumbSub);
                }
				
                if (!String.IsNullOrEmpty(NodeLeftHTMLRoot))
                {
                    NodeLeftHTMLRoot = FixImagePath(NodeLeftHTMLRoot);
                }
				
                if (!String.IsNullOrEmpty(NodeRightHTMLRoot))
                {
                    NodeRightHTMLRoot = FixImagePath(NodeRightHTMLRoot);
                }
				
                if (!String.IsNullOrEmpty(NodeLeftHTMLSub))
                {
                    NodeLeftHTMLSub = FixImagePath(NodeLeftHTMLSub);
                }
				
                if (!String.IsNullOrEmpty(NodeRightHTMLSub))
                {
                    NodeRightHTMLSub = FixImagePath(NodeRightHTMLSub);
                }
				
                if (String.IsNullOrEmpty(PathImage))
                {
                    PathImage = PortalSettings.HomeDirectory;
                }
				
                if (blnIndicateChildren)
                {
                    IndicateChildImageSub = strRightArrow;
                    if (ControlOrientation.ToLower() == "vertical")
                    {
                        IndicateChildImageRoot = strRightArrow;
                    }
                    else
                    {
                        IndicateChildImageRoot = strDownArrow;
                    }
                }
                else
                {
                    IndicateChildImageSub = "[APPIMAGEPATH]spacer.gif";
                }
				
                PathSystemScript = Globals.ApplicationPath + "/controls/SolpartMenu/";
                PathSystemImage = "[APPIMAGEPATH]";
                BuildNodes(null);
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="Privacy">
      <declaration><![CDATA[public class Privacy : SkinObjectBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public Privacy()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="InitializeComponent">
          <declaration><![CDATA[private void InitializeComponent()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="46" sc="9" el="47" ec="10">admin\Skins\Privacy.ascx.cs</location>
            <body hash="539fa760ca172337a931519768c64187"><![CDATA[{
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="50" sc="9" el="54" ec="10">admin\Skins\Privacy.ascx.cs</location>
            <body hash="5f3c8c20cc44d36b74ae4760af9b8276"><![CDATA[{
            base.OnInit(e);

            InitializeComponent();
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="57" sc="9" el="80" ec="10">admin\Skins\Privacy.ascx.cs</location>
            <body hash="ed7299f2fbef2a6dbde2b37179e9f6b5"><![CDATA[{
            base.OnLoad(e);
            try
            {
                if (!String.IsNullOrEmpty(CssClass))
                {
                    hypPrivacy.CssClass = CssClass;
                }
                if (!String.IsNullOrEmpty(Text))
                {
                    hypPrivacy.Text = Text;
                }
                else
                {
                    hypPrivacy.Text = Localization.GetString("Privacy", Localization.GetResourceFile(this, MyFileName));
                }
                hypPrivacy.NavigateUrl = Globals.NavigateURL(PortalSettings.ActiveTab.TabID, "Privacy");
                hypPrivacy.Attributes["rel"] = "nofollow";
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="hypPrivacy">
          <declaration><![CDATA[protected HyperLink hypPrivacy;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="MyFileName">
          <declaration><![CDATA[private const string MyFileName = "Privacy.ascx";]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="CssClass">
          <declaration><![CDATA[public string CssClass]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="43" sc="34" el="43" ec="38">admin\Skins\Privacy.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="43" sc="39" el="43" ec="43">admin\Skins\Privacy.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Text">
          <declaration><![CDATA[public string Text]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="41" sc="30" el="41" ec="34">admin\Skins\Privacy.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="41" sc="35" el="41" ec="39">admin\Skins\Privacy.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="Search">
      <declaration><![CDATA[public class Search : SkinObjectBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private bool _showSite = true;]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="43" sc="9" el="347" ec="47">admin\Skins\Search.ascx.cs</location>
            <body hash="f3aade2ef42eb1311b013b8792b57759"><![CDATA[private bool _showSite = true;
        private bool _showWeb = true;
        private string _siteIconURL;
        private string _siteText;
        private string _siteToolTip;
        private string _siteURL;
        private string _webIconURL;
        private string _webText;
        private string _webToolTip;
        private string _webURL;

        #endregion

        #region Public Members

        /// <summary>
        /// Gets or sets the CSS class for the option buttons and search button
        /// </summary>
        /// <remarks>If you are using the DropDownList option then you can style the search
        /// elements without requiring a custom CssClass.</remarks>
        public string CssClass { get; set; }

        /// <summary>
        /// Gets or sets the visibility setting for the radio button corresponding to site based searchs.
        /// </summary>
        /// <remarks>Set this value to false to hide the "Site" radio button.  This setting has no effect
        /// if UseDropDownList is true.</remarks>
        public bool ShowSite
        {
            get
            {
                return _showSite;
            }
            set
            {
                _showSite = value;
            }
        }

        /// <summary>
        /// Gets or sets the visibility setting for the radio button corresponding to web based searchs.
        /// </summary>
        /// <remarks>Set this value to false to hide the "Web" radio button.  This setting has no effect
        /// if UseDropDownList is true.</remarks>
        public bool ShowWeb
        {
            get
            {
                return _showWeb;
            }
            set
            {
                _showWeb = value;
            }
        }

        /// <summary>
        /// Gets or sets the site icon URL.
        /// </summary>
        /// <value>The site icon URL.</value>
        /// <remarks>If the SiteIconURL is not set or is an empty string then this will return a site relative URL for the 
        /// DnnSearch_16X16_Standard.png image in the images/search subfolder.  SiteIconURL supports using 
        /// app relative virtual paths designated by the use of the tilde (~).</remarks>
        public string SiteIconURL
        {
            get
            {
                if (string.IsNullOrEmpty(_siteIconURL))
                {
                    return IconController.IconURL("DnnSearch");
                }
                return _siteIconURL;
            }
            set
            {
                _siteIconURL = value;
            }
        }
                
        public string SeeMoreText
        {
            get
            {
                return Localization.GetSafeJSString("SeeMoreResults", Localization.GetResourceFile(this, MyFileName));
            }
        }

        public string ClearQueryText
        {
            get
            {
                return Localization.GetSafeJSString("SearchClearQuery", Localization.GetResourceFile(this, MyFileName));
            }
        }

        public string NoResultText
        {
            get
            {
                return Localization.GetSafeJSString("NoResult", Localization.GetResourceFile(this, MyFileName));
            }
        }

        public string PlaceHolderText
        {
            get
            {
                return Localization.GetSafeJSString("Placeholder", Localization.GetResourceFile(this, MyFileName));
            }
        }

        /// <summary>
        /// Gets or sets the text for the "site" radio button or option list item.
        /// </summary>
        /// <value>The site text.</value>
        /// <remarks>If the value is not set or is an empty string, then the localized value from
        /// /admin/skins/app_localresources/Search.ascx.resx localresource file is used.</remarks>
        public string SiteText
        {
            get
            {
                if (string.IsNullOrEmpty(_siteText))
                {
                    return Localization.GetString("Site", Localization.GetResourceFile(this, MyFileName));
                }
                return _siteText;
            }
            set
            {
                _siteText = value;
            }
        }

        /// <summary>
        /// Gets or sets the tooltip text for the "site" radio button.
        /// </summary>
        /// <value>The site tool tip.</value>
        /// <remarks>If the value is not set or is an empty string, then the localized value from
        /// /admin/skins/app_localresources/Search.ascx.resx localresource file is used.</remarks>
        public string SiteToolTip
        {
            get
            {
                if (string.IsNullOrEmpty(_siteToolTip))
                {
                    return Localization.GetString("Site.ToolTip", Localization.GetResourceFile(this, MyFileName));
                }
                return _siteToolTip;
            }
            set
            {
                _siteToolTip = value;
            }
        }
        
        /// <summary>
        /// Gets or sets the URL for doing web based site searches.
        /// </summary>
        /// <value>The site URL.</value>
        /// <remarks>If the value is not set or is an empty string, then the localized value from
        /// /admin/skins/app_localresources/Search.ascx.resx localresource file is used.
        /// <para>The site URL is a template for an external search engine, which by default, uses Google.com.  The siteURL should
        /// include the tokens [TEXT] and [DOMAIN] to be replaced automatically by the search text and the current site domain.</para></remarks>
        public string SiteURL
        {
            get
            {
                if (string.IsNullOrEmpty(_siteURL))
                {
                    return Localization.GetString("URL", Localization.GetResourceFile(this, MyFileName));
                }
                return _siteURL;
            }
            set
            {
                _siteURL = value;
            }
        }

        /// <summary>
        /// Gets or sets the html for the submit button.
        /// </summary>
        /// <remarks>If the value is not set or is an empty string, then the localized value from
        /// /admin/skins/app_localresources/Search.ascx.resx localresource file is used.
        /// <para>If you set the value to an hmtl img tag, then the src attribute will be made relative
        /// to the current skinpath.</para></remarks>
        public string Submit { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether to use the web search engine for site searches.
        /// </summary>
        /// <remarks>Set this value to true to perform a domain limited search using the search engine defined by <see cref="SiteURL">SiteURL</see>.</remarks>
        public bool UseWebForSite { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether to display the site/web options using a drop down list.
        /// </summary>
        /// <remarks>If true, then the site and web options are displayed in a drop down list.  If the 
        /// drop down list is used, then the <see cref="ShowWeb">ShowWeb</see> and <see cref="ShowSite">ShowSite</see>
        /// properties are not used.</remarks>
        public bool UseDropDownList { get; set; }

        /// <summary>
        /// Gets or sets the web icon URL.
        /// </summary>
        /// <value>The web icon URL.</value>
        /// <remarks>If the WebIconURL is not set or is an empty string then this will return a site relative URL for the 
        /// google-icon.gif image in the images/search subfolder.  WebIconURL supports using 
        /// app relative virtual paths designated by the use of the tilde (~).</remarks>
        public string WebIconURL
        {
            get
            {
                if (string.IsNullOrEmpty(_webIconURL))
                {
                    return IconController.IconURL("GoogleSearch");
                }
                return _webIconURL;
            }
            set
            {
                _webIconURL = value;
            }
        }

        /// <summary>
        /// Gets or sets the text for the "web" radio button or option list item.
        /// </summary>
        /// <value>The web text.</value>
        /// <remarks>If the value is not set or is an empty string, then the localized value from
        /// /admin/skins/app_localresources/Search.ascx.resx localresource file is used.</remarks>
        public string WebText
        {
            get
            {
                if (string.IsNullOrEmpty(_webText))
                {
                    return Localization.GetString("Web", Localization.GetResourceFile(this, MyFileName));
                }
                return _webText;
            }
            set
            {
                _webText = value;
            }
        }

        /// <summary>
        /// Gets or sets the tooltip text for the "web" radio button.
        /// </summary>
        /// <value>The web tool tip.</value>
        /// <remarks>If the value is not set or is an empty string, then the localized value from
        /// /admin/skins/app_localresources/Search.ascx.resx localresource file is used.</remarks>
        public string WebToolTip
        {
            get
            {
                if (string.IsNullOrEmpty(_webToolTip))
                {
                    return Localization.GetString("Web.ToolTip", Localization.GetResourceFile(this, MyFileName));
                }
                return _webToolTip;
            }
            set
            {
                _webToolTip = value;
            }
        }

        /// <summary>
        /// Gets or sets the URL for doing web based searches.
        /// </summary>
        /// <value>The web URL.</value>
        /// <remarks>If the value is not set or is an empty string, then the localized value from
        /// /admin/skins/app_localresources/Search.ascx.resx localresource file is used.
        /// <para>The web URL is a template for an external search engine, which by default, uses Google.com.  The WebURL should
        /// include the token [TEXT] to be replaced automatically by the search text.  The [DOMAIN] token, if present, will be
        /// replaced by an empty string.</para></remarks>
        public string WebURL
        {
            get
            {
                if (string.IsNullOrEmpty(_webURL))
                {
                    return Localization.GetString("URL", Localization.GetResourceFile(this, MyFileName));
                }
                return _webURL;
            }
            set
            {
                _webURL = value;
            }
        }

        /// <summary>
        /// minium chars required to trigger auto search
        /// </summary>
        public int MinCharRequired { get; set; }

        /// <summary>
        /// The millisecond to delay trigger auto search
        /// </summary>
        public int AutoSearchDelayInMilliSecond { get; set; }

        private bool _enableWildSearch = true;]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="CmdSearchClick">
          <declaration><![CDATA[private void CmdSearchClick(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="513" sc="9" el="523" ec="10">admin\Skins\Search.ascx.cs</location>
            <body hash="0a2cee960a12588eafe9b4b6b0842b6e"><![CDATA[{
            SearchType = "S";
            if (WebRadioButton.Visible)
            {
                if (WebRadioButton.Checked)
                {
                    SearchType = "W";
                }
            }
            ExecuteSearch(txtSearch.Text.Trim(), SearchType);
        }]]></body>
          </codeblock>
        </method>
        <method name="CmdSearchNewClick">
          <declaration><![CDATA[protected void CmdSearchNewClick(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="532" sc="9" el="535" ec="10">admin\Skins\Search.ascx.cs</location>
            <body hash="09e6dadb5447946d5959867656f3892b"><![CDATA[{
            SearchType = ClientAPI.GetClientVariable(Page, "SearchIconSelected");
            ExecuteSearch(txtSearchNew.Text.Trim(), SearchType);
        }]]></body>
          </codeblock>
        </method>
        <method name="ExecuteSearch">
          <declaration><![CDATA[protected void ExecuteSearch(string searchText, string searchType)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="398" sc="9" el="457" ec="10">admin\Skins\Search.ascx.cs</location>
            <body hash="0391df55a6e02b44dddb4b4f24d94a93"><![CDATA[{
            int searchTabId = GetSearchTabId();

            if (searchTabId == Null.NullInteger)
            {
                return;
            }
            string strURL;
            if (!string.IsNullOrEmpty(searchText))
            {
                switch (searchType)
                {
                    case "S":
                        // site
                        if (UseWebForSite)
                        {
                            strURL = SiteURL;
                            if (!string.IsNullOrEmpty(strURL))
                            {
                                strURL = strURL.Replace("[TEXT]", Server.UrlEncode(searchText));
                                strURL = strURL.Replace("[DOMAIN]", Request.Url.Host);
                                UrlUtils.OpenNewWindow(Page, GetType(), strURL);
                            }
                        }
                        else
                        {
                            if (Host.UseFriendlyUrls)
                            {
                                Response.Redirect(Globals.NavigateURL(searchTabId) + "?Search=" + Server.UrlEncode(searchText));
                            }
                            else
                            {
                                Response.Redirect(Globals.NavigateURL(searchTabId) + "&Search=" + Server.UrlEncode(searchText));
                            }
                        }
                        break;
                    case "W":
                        // web
                        strURL = WebURL;
                        if (!string.IsNullOrEmpty(strURL))
                        {
                            strURL = strURL.Replace("[TEXT]", Server.UrlEncode(searchText));
                            strURL = strURL.Replace("[DOMAIN]", "");
                            UrlUtils.OpenNewWindow(Page, GetType(), strURL);
                        }
                        break;
                }
            }
            else
            {
                if (Host.UseFriendlyUrls)
                {
                    Response.Redirect(Globals.NavigateURL(searchTabId));
                }
                else
                {
                    Response.Redirect(Globals.NavigateURL(searchTabId));
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetSearchTabId">
          <declaration><![CDATA[private int GetSearchTabId()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="364" sc="9" el="386" ec="10">admin\Skins\Search.ascx.cs</location>
            <body hash="dea9dd2d7ccb85ce35e652825cad77c6"><![CDATA[{
            int searchTabId = PortalSettings.SearchTabId;
            if (searchTabId == Null.NullInteger)
            {
                ArrayList arrModules = ModuleController.Instance.GetModulesByDefinition(PortalSettings.PortalId, "Search Results");
                if (arrModules.Count > 1)
                {
                    foreach (ModuleInfo SearchModule in arrModules)
                    {
                        if (SearchModule.CultureCode == PortalSettings.CultureCode)
                        {
                            searchTabId = SearchModule.TabID;
                        }
                    }
                }
                else if (arrModules.Count == 1)
                {
                    searchTabId = ((ModuleInfo)arrModules[0]).TabID;
                }
            }

            return searchTabId;
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="468" sc="9" el="504" ec="10">admin\Skins\Search.ascx.cs</location>
            <body hash="52eebdb4fb4624113a6c043d9940d726"><![CDATA[{
            base.OnLoad(e);
                        
            Framework.ServicesFramework.Instance.RequestAjaxAntiForgerySupport();
            ClientResourceManager.RegisterStyleSheet(Page, "~/Resources/Search/SearchSkinObjectPreview.css", FileOrder.Css.ModuleCss);
            ClientResourceManager.RegisterScript(Page, "~/Resources/Search/SearchSkinObjectPreview.js");
            

            cmdSearch.Click += CmdSearchClick;
            cmdSearchNew.Click += CmdSearchNewClick;

            if (MinCharRequired == 0) MinCharRequired = 2;
            if (AutoSearchDelayInMilliSecond == 0) AutoSearchDelayInMilliSecond = 400;
            PortalId = PortalSettings.ActiveTab.IsSuperTab ? PortalSettings.PortalId : -1;

            if (!String.IsNullOrEmpty(Submit))
            {
                if (Submit.IndexOf("src=", StringComparison.Ordinal) != -1)
                {
                    Submit = Submit.Replace("src=\"", "src=\"" + PortalSettings.ActiveTab.SkinPath);
                    Submit = Submit.Replace("src='", "src='" + PortalSettings.ActiveTab.SkinPath);
                }
            }
            else
            {
                Submit = Localization.GetString("Search", Localization.GetResourceFile(this, MyFileName));
            }
            cmdSearch.Text = Submit;
            cmdSearchNew.Text = Submit;
            if (!String.IsNullOrEmpty(CssClass))
            {
                WebRadioButton.CssClass = CssClass;
                SiteRadioButton.CssClass = CssClass;
                cmdSearch.CssClass = CssClass;
                cmdSearchNew.CssClass = CssClass;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnPreRender">
          <declaration><![CDATA[protected override void OnPreRender(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="543" sc="9" el="595" ec="10">admin\Skins\Search.ascx.cs</location>
            <body hash="47e59ad3edd8f5981c069f5620bf026f"><![CDATA[{
            base.OnPreRender(e);

            ClassicSearch.Visible = !UseDropDownList;
            DropDownSearch.Visible = UseDropDownList;
            CultureCode = System.Threading.Thread.CurrentThread.CurrentCulture.ToString();
            
            if (UseDropDownList)
            {
                //Client Variables will survive a postback so there is no reason to register them.
                if (!Page.IsPostBack)
                {

                    downArrow.AlternateText = Localization.GetString("DropDownGlyph.AltText", Localization.GetResourceFile(this, MyFileName));
                    downArrow.ToolTip = downArrow.AlternateText;

                    ClientAPI.RegisterClientVariable(Page, "SearchIconWebUrl", string.Format("url({0})", ResolveUrl(WebIconURL)), true);
                    ClientAPI.RegisterClientVariable(Page, "SearchIconSiteUrl", string.Format("url({0})", ResolveUrl(SiteIconURL)), true);

                    //We are going to use a dnn client variable to store which search option (web/site) is selected.
                    ClientAPI.RegisterClientVariable(Page, "SearchIconSelected", "S", true);
                    SearchType = "S";
                }

                JavaScript.RegisterClientReference(this.Page, ClientAPI.ClientNamespaceReferences.dnn);
                ClientResourceManager.RegisterScript(Page, "~/Resources/Search/Search.js", FileOrder.Js.DefaultPriority, "DnnFormBottomProvider");

                txtSearchNew.Attributes.Add("autocomplete", "off");
                txtSearchNew.Attributes.Add("placeholder", PlaceHolderText);
            }
            else
            {
                WebRadioButton.Visible = ShowWeb;
                SiteRadioButton.Visible = ShowSite;

                if (WebRadioButton.Visible)
                {
                    WebRadioButton.Checked = true;
                    WebRadioButton.Text = WebText;
                    WebRadioButton.ToolTip = WebToolTip;
                }
                if (SiteRadioButton.Visible)
                {
                    SiteRadioButton.Checked = true;
                    SiteRadioButton.Text = SiteText;
                    SiteRadioButton.ToolTip = SiteToolTip;
                }

                SearchType = "S";
                txtSearch.Attributes.Add("autocomplete", "off");
                txtSearch.Attributes.Add("placeholder", PlaceHolderText);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_enableWildSearch">
          <declaration><![CDATA[private bool _enableWildSearch = true;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_showSite">
          <declaration><![CDATA[private bool _showSite = true;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_showWeb">
          <declaration><![CDATA[private bool _showWeb = true;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_siteIconURL">
          <declaration><![CDATA[private string _siteIconURL;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_siteText">
          <declaration><![CDATA[private string _siteText;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_siteToolTip">
          <declaration><![CDATA[private string _siteToolTip;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_siteURL">
          <declaration><![CDATA[private string _siteURL;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_webIconURL">
          <declaration><![CDATA[private string _webIconURL;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_webText">
          <declaration><![CDATA[private string _webText;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_webToolTip">
          <declaration><![CDATA[private string _webToolTip;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_webURL">
          <declaration><![CDATA[private string _webURL;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ClassicSearch">
          <declaration><![CDATA[protected HtmlGenericControl ClassicSearch;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdSearch">
          <declaration><![CDATA[protected LinkButton cmdSearch;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cmdSearchNew">
          <declaration><![CDATA[protected LinkButton cmdSearchNew;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="downArrow">
          <declaration><![CDATA[protected DnnImage downArrow;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="DropDownSearch">
          <declaration><![CDATA[protected HtmlGenericControl DropDownSearch;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="MyFileName">
          <declaration><![CDATA[private const string MyFileName = "Search.ascx";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="SiteRadioButton">
          <declaration><![CDATA[protected RadioButton SiteRadioButton;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtSearch">
          <declaration><![CDATA[protected TextBox txtSearch;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="txtSearchNew">
          <declaration><![CDATA[protected TextBox txtSearchNew;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="WebRadioButton">
          <declaration><![CDATA[protected RadioButton WebRadioButton;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="AutoSearchDelayInMilliSecond">
          <declaration><![CDATA[public int AutoSearchDelayInMilliSecond]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="345" sc="51" el="345" ec="55">admin\Skins\Search.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="345" sc="56" el="345" ec="60">admin\Skins\Search.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ClearQueryText">
          <declaration><![CDATA[public string ClearQueryText]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="133" sc="13" el="135" ec="14">admin\Skins\Search.ascx.cs</location>
            <body hash="6ae2e8c2f5daae24ca184f35b4271b6a"><![CDATA[{
                return Localization.GetSafeJSString("SearchClearQuery", Localization.GetResourceFile(this, MyFileName));
            }]]></body>
          </codeblock>
        </property>
        <property name="CssClass">
          <declaration><![CDATA[public string CssClass]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="63" sc="34" el="63" ec="38">admin\Skins\Search.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="63" sc="39" el="63" ec="43">admin\Skins\Search.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="CultureCode">
          <declaration><![CDATA[protected string CultureCode]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="357" sc="40" el="357" ec="44">admin\Skins\Search.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="357" sc="45" el="357" ec="49">admin\Skins\Search.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="EnableWildSearch">
          <declaration><![CDATA[public bool EnableWildSearch]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="MinCharRequired">
          <declaration><![CDATA[public int MinCharRequired]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="340" sc="38" el="340" ec="42">admin\Skins\Search.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="340" sc="43" el="340" ec="47">admin\Skins\Search.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="NoResultText">
          <declaration><![CDATA[public string NoResultText]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="141" sc="13" el="143" ec="14">admin\Skins\Search.ascx.cs</location>
            <body hash="1ce71eb14bd0029fce01e8e0e911dd6b"><![CDATA[{
                return Localization.GetSafeJSString("NoResult", Localization.GetResourceFile(this, MyFileName));
            }]]></body>
          </codeblock>
        </property>
        <property name="PlaceHolderText">
          <declaration><![CDATA[public string PlaceHolderText]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="149" sc="13" el="151" ec="14">admin\Skins\Search.ascx.cs</location>
            <body hash="b1616b7adb73efbaa6411dc5ba9cf835"><![CDATA[{
                return Localization.GetSafeJSString("Placeholder", Localization.GetResourceFile(this, MyFileName));
            }]]></body>
          </codeblock>
        </property>
        <property name="PortalId">
          <declaration><![CDATA[protected int PortalId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="353" sc="34" el="353" ec="38">admin\Skins\Search.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="353" sc="39" el="353" ec="43">admin\Skins\Search.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="SearchType">
          <declaration><![CDATA[protected string SearchType]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="355" sc="39" el="355" ec="43">admin\Skins\Search.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="355" sc="44" el="355" ec="48">admin\Skins\Search.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="SeeMoreText">
          <declaration><![CDATA[public string SeeMoreText]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="125" sc="13" el="127" ec="14">admin\Skins\Search.ascx.cs</location>
            <body hash="34f9a07bb0933c0c9edf457eb8736892"><![CDATA[{
                return Localization.GetSafeJSString("SeeMoreResults", Localization.GetResourceFile(this, MyFileName));
            }]]></body>
          </codeblock>
        </property>
        <property name="ShowSite">
          <declaration><![CDATA[public bool ShowSite]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="73" sc="13" el="75" ec="14">admin\Skins\Search.ascx.cs</location>
            <body hash="5066709662561d3a677720744c16df58"><![CDATA[{
                return _showSite;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="77" sc="13" el="79" ec="14">admin\Skins\Search.ascx.cs</location>
            <body hash="02bde5af4270f2bca024e1d2861531e8"><![CDATA[{
                _showSite = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="ShowWeb">
          <declaration><![CDATA[public bool ShowWeb]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="90" sc="13" el="92" ec="14">admin\Skins\Search.ascx.cs</location>
            <body hash="8795f9d955fa198d73639b7366292570"><![CDATA[{
                return _showWeb;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="94" sc="13" el="96" ec="14">admin\Skins\Search.ascx.cs</location>
            <body hash="fde29d2f71d6adc7ba1343c15d9dc0a3"><![CDATA[{
                _showWeb = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="SiteIconURL">
          <declaration><![CDATA[public string SiteIconURL]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="109" sc="13" el="115" ec="14">admin\Skins\Search.ascx.cs</location>
            <body hash="6112c701929cf581fdcf05a5968a1fdf"><![CDATA[{
                if (string.IsNullOrEmpty(_siteIconURL))
                {
                    return IconController.IconURL("DnnSearch");
                }
                return _siteIconURL;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="117" sc="13" el="119" ec="14">admin\Skins\Search.ascx.cs</location>
            <body hash="ed824aa10b6a2345b4aafeea110d6e0f"><![CDATA[{
                _siteIconURL = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="SiteText">
          <declaration><![CDATA[public string SiteText]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="163" sc="13" el="169" ec="14">admin\Skins\Search.ascx.cs</location>
            <body hash="65b984355240a23fb1e12634c1361565"><![CDATA[{
                if (string.IsNullOrEmpty(_siteText))
                {
                    return Localization.GetString("Site", Localization.GetResourceFile(this, MyFileName));
                }
                return _siteText;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="171" sc="13" el="173" ec="14">admin\Skins\Search.ascx.cs</location>
            <body hash="dc8c144544a0eeaa9ac4e55d8bf6bab1"><![CDATA[{
                _siteText = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="SiteToolTip">
          <declaration><![CDATA[public string SiteToolTip]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="185" sc="13" el="191" ec="14">admin\Skins\Search.ascx.cs</location>
            <body hash="5688fe02713172046c2644dae4e0429a"><![CDATA[{
                if (string.IsNullOrEmpty(_siteToolTip))
                {
                    return Localization.GetString("Site.ToolTip", Localization.GetResourceFile(this, MyFileName));
                }
                return _siteToolTip;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="193" sc="13" el="195" ec="14">admin\Skins\Search.ascx.cs</location>
            <body hash="fbc26934f5b5a1a59d5edc55d7e59da8"><![CDATA[{
                _siteToolTip = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="SiteURL">
          <declaration><![CDATA[public string SiteURL]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="209" sc="13" el="215" ec="14">admin\Skins\Search.ascx.cs</location>
            <body hash="8da780b44b0b591309e4db2cd1c9817e"><![CDATA[{
                if (string.IsNullOrEmpty(_siteURL))
                {
                    return Localization.GetString("URL", Localization.GetResourceFile(this, MyFileName));
                }
                return _siteURL;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="217" sc="13" el="219" ec="14">admin\Skins\Search.ascx.cs</location>
            <body hash="fd71eb9cf1dbbfdb0a19abaccaa12193"><![CDATA[{
                _siteURL = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="Submit">
          <declaration><![CDATA[public string Submit]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="229" sc="32" el="229" ec="36">admin\Skins\Search.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="229" sc="37" el="229" ec="41">admin\Skins\Search.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="UseDropDownList">
          <declaration><![CDATA[public bool UseDropDownList]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="243" sc="39" el="243" ec="43">admin\Skins\Search.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="243" sc="44" el="243" ec="48">admin\Skins\Search.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="UseWebForSite">
          <declaration><![CDATA[public bool UseWebForSite]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="235" sc="37" el="235" ec="41">admin\Skins\Search.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="235" sc="42" el="235" ec="46">admin\Skins\Search.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="WebIconURL">
          <declaration><![CDATA[public string WebIconURL]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="255" sc="13" el="261" ec="14">admin\Skins\Search.ascx.cs</location>
            <body hash="adf8ebc4d3fe015f37982351e495e80d"><![CDATA[{
                if (string.IsNullOrEmpty(_webIconURL))
                {
                    return IconController.IconURL("GoogleSearch");
                }
                return _webIconURL;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="263" sc="13" el="265" ec="14">admin\Skins\Search.ascx.cs</location>
            <body hash="bf5692deb2e2e0f984f2b048c7a96d7c"><![CDATA[{
                _webIconURL = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="WebText">
          <declaration><![CDATA[public string WebText]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="277" sc="13" el="283" ec="14">admin\Skins\Search.ascx.cs</location>
            <body hash="f733c89176083fbc490b5889f5ce37f8"><![CDATA[{
                if (string.IsNullOrEmpty(_webText))
                {
                    return Localization.GetString("Web", Localization.GetResourceFile(this, MyFileName));
                }
                return _webText;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="285" sc="13" el="287" ec="14">admin\Skins\Search.ascx.cs</location>
            <body hash="1a929c0c26a51dc2afe85c1c54ae27d4"><![CDATA[{
                _webText = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="WebToolTip">
          <declaration><![CDATA[public string WebToolTip]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="299" sc="13" el="305" ec="14">admin\Skins\Search.ascx.cs</location>
            <body hash="7c83672d15d25eb9cf01f7b5bcf75a43"><![CDATA[{
                if (string.IsNullOrEmpty(_webToolTip))
                {
                    return Localization.GetString("Web.ToolTip", Localization.GetResourceFile(this, MyFileName));
                }
                return _webToolTip;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="307" sc="13" el="309" ec="14">admin\Skins\Search.ascx.cs</location>
            <body hash="10936bc3a9850346a67619336d8e6b0f"><![CDATA[{
                _webToolTip = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="WebURL">
          <declaration><![CDATA[public string WebURL]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="324" sc="13" el="330" ec="14">admin\Skins\Search.ascx.cs</location>
            <body hash="63fa6bce556cd93815add8dcdb41ca68"><![CDATA[{
                if (string.IsNullOrEmpty(_webURL))
                {
                    return Localization.GetString("URL", Localization.GetResourceFile(this, MyFileName));
                }
                return _webURL;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="332" sc="13" el="334" ec="14">admin\Skins\Search.ascx.cs</location>
            <body hash="efb01ec051f5b673f1f610114362d390"><![CDATA[{
                _webURL = value;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="Styles">
      <declaration><![CDATA[public class Styles : SkinObjectBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private bool _useSkinPath = true;]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="36" sc="9" el="36" ec="42">admin\Skins\Styles.ascx.cs</location>
            <body hash="f0eef9387b86a131a21bb198a659d196"><![CDATA[private bool _useSkinPath = true]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="AddLink">
          <declaration><![CDATA[protected void AddLink(Control cssRoot, int InsertAt, HtmlLink link)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="112" sc="9" el="145" ec="10">admin\Skins\Styles.ascx.cs</location>
            <body hash="44d8553debbed8c885570c86ff9993ad"><![CDATA[{
            if (string.IsNullOrEmpty(Condition))
            {
                if (InsertAt == -1)
                {
                    cssRoot.Controls.Add(link);
                }
                else
                {
                    cssRoot.Controls.AddAt(InsertAt, link);
                }
            }
            else
            {
                var openif = new Literal();
                openif.Text = string.Format("<!--[if {0}]>", Condition);
                var closeif = new Literal();
                closeif.Text = "<![endif]-->";
                if (InsertAt == -1)
                {
                    cssRoot.Controls.Add(openif);
                    cssRoot.Controls.Add(link);
                    cssRoot.Controls.Add(closeif);
                }
                else
                {
					//Since we want to add at a specific location, we do this in reverse order
                    //this allows us to use the same insertion point
                    cssRoot.Controls.AddAt(InsertAt, closeif);
                    cssRoot.Controls.AddAt(InsertAt, link);
                    cssRoot.Controls.AddAt(InsertAt, openif);
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="AddStyleSheet">
          <declaration><![CDATA[protected void AddStyleSheet()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="67" sc="9" el="109" ec="10">admin\Skins\Styles.ascx.cs</location>
            <body hash="58a4d0f66f70c69ca08f9a95e148a8ab"><![CDATA[{
            //Find the placeholder control
            Control objCSS = Page.FindControl("CSS");
            if (objCSS != null)
            {
                //First see if we have already added the <LINK> control
                Control objCtrl = Page.Header.FindControl(ID);
                if (objCtrl == null)
                {
                    string skinpath = string.Empty;
                    if (UseSkinPath)
                    {
                        skinpath = ((Skin) Parent).SkinPath;
                    }
                    var objLink = new HtmlLink();
                    objLink.ID = Globals.CreateValidID(Name);
                    objLink.Attributes["rel"] = "stylesheet";
                    objLink.Attributes["type"] = "text/css";
                    objLink.Href = skinpath + StyleSheet;
                    if (Media != "")
                    {
                        objLink.Attributes["media"] = Media; //NWS: add support for "media" attribute
                    }
                    if (IsFirst)
                    {
						//Find the first HtmlLink
                        int iLink;
                        for (iLink = 0; iLink <= objCSS.Controls.Count - 1; iLink++)
                        {
                            if (objCSS.Controls[iLink] is HtmlLink)
                            {
                                break;
                            }
                        }
                        AddLink(objCSS, iLink, objLink);
                    }
                    else
                    {
                        AddLink(objCSS, -1, objLink);
                    }
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="61" sc="9" el="64" ec="10">admin\Skins\Styles.ascx.cs</location>
            <body hash="6e346264aceb312dcb160557279e2036"><![CDATA[{
            base.OnLoad(e);
            AddStyleSheet();
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_useSkinPath">
          <declaration><![CDATA[private bool _useSkinPath = true;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="Condition">
          <declaration><![CDATA[public string Condition]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="38" sc="35" el="38" ec="39">admin\Skins\Styles.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="38" sc="40" el="38" ec="44">admin\Skins\Styles.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="IsFirst">
          <declaration><![CDATA[public bool IsFirst]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="40" sc="31" el="40" ec="35">admin\Skins\Styles.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="40" sc="36" el="40" ec="40">admin\Skins\Styles.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Media">
          <declaration><![CDATA[public string Media]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="58" sc="31" el="58" ec="35">admin\Skins\Styles.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="58" sc="36" el="58" ec="40">admin\Skins\Styles.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Name">
          <declaration><![CDATA[public string Name]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="42" sc="30" el="42" ec="34">admin\Skins\Styles.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="42" sc="35" el="42" ec="39">admin\Skins\Styles.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="StyleSheet">
          <declaration><![CDATA[public string StyleSheet]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="44" sc="36" el="44" ec="40">admin\Skins\Styles.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="44" sc="41" el="44" ec="45">admin\Skins\Styles.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="UseSkinPath">
          <declaration><![CDATA[public bool UseSkinPath]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="49" sc="13" el="51" ec="14">admin\Skins\Styles.ascx.cs</location>
            <body hash="df12f79e646f22b2127518c46f2f07ea"><![CDATA[{
                return _useSkinPath;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="53" sc="13" el="55" ec="14">admin\Skins\Styles.ascx.cs</location>
            <body hash="c3c73f818182126042a907b66dd569ec"><![CDATA[{
                _useSkinPath = value;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="Tags">
      <declaration><![CDATA[public class Tags : SkinObjectBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private string _AddImageUrl = IconController.IconURL("Add");]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="37" sc="9" el="45" ec="39">admin\Skins\tags.ascx.cs</location>
            <body hash="e1e6ca75d6ccd124d1bf2881091ffd1f"><![CDATA[private string _AddImageUrl = IconController.IconURL("Add");
        private bool _AllowTagging = true;
        private string _CancelImageUrl = IconController.IconURL("Lt");
        private string _ObjectType = "Page";
        private string _RepeatDirection = "Horizontal";
        private string _SaveImageUrl = IconController.IconURL("Save");
        private string _Separator = ",&nbsp;";
        private bool _ShowCategories = true;
        private bool _ShowTags = true;]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="158" sc="9" el="182" ec="10">admin\Skins\tags.ascx.cs</location>
            <body hash="fa3ddf7415cb63d2aa6878fc5f96067d"><![CDATA[{
            base.OnLoad(e);

            if (ObjectType == "Page")
            {
                tagsControl.ContentItem = PortalSettings.ActiveTab;
            }
            else
            {
                tagsControl.ContentItem = ModuleControl.ModuleContext.Configuration;
            }

            tagsControl.AddImageUrl = AddImageUrl;
            tagsControl.CancelImageUrl = CancelImageUrl;
            tagsControl.SaveImageUrl = SaveImageUrl;

            tagsControl.CssClass = CssClass;

            tagsControl.AllowTagging = AllowTagging && Request.IsAuthenticated;
            tagsControl.NavigateUrlFormatString = Globals.NavigateURL(PortalSettings.SearchTabId, "", "Tag={0}");
            tagsControl.RepeatDirection = RepeatDirection;
            tagsControl.Separator = Separator;
            tagsControl.ShowCategories = ShowCategories;
            tagsControl.ShowTags = ShowTags;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_AddImageUrl">
          <declaration><![CDATA[private string _AddImageUrl = IconController.IconURL("Add");]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_AllowTagging">
          <declaration><![CDATA[private bool _AllowTagging = true;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_CancelImageUrl">
          <declaration><![CDATA[private string _CancelImageUrl = IconController.IconURL("Lt");]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_ObjectType">
          <declaration><![CDATA[private string _ObjectType = "Page";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_RepeatDirection">
          <declaration><![CDATA[private string _RepeatDirection = "Horizontal";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_SaveImageUrl">
          <declaration><![CDATA[private string _SaveImageUrl = IconController.IconURL("Save");]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_Separator">
          <declaration><![CDATA[private string _Separator = ",&nbsp;";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_ShowCategories">
          <declaration><![CDATA[private bool _ShowCategories = true;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_ShowTags">
          <declaration><![CDATA[private bool _ShowTags = true;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="MyFileName">
          <declaration><![CDATA[private const string MyFileName = "Tags.ascx";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="tagsControl">
          <declaration><![CDATA[protected Tags tagsControl;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="AddImageUrl">
          <declaration><![CDATA[public string AddImageUrl]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="50" sc="13" el="52" ec="14">admin\Skins\tags.ascx.cs</location>
            <body hash="a4cb55dfa404dbfadf1f3cac08c3cfd2"><![CDATA[{
                return _AddImageUrl;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="54" sc="13" el="56" ec="14">admin\Skins\tags.ascx.cs</location>
            <body hash="a2fd931dbc2b97fcd94be9d60fd006ad"><![CDATA[{
                _AddImageUrl = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="AllowTagging">
          <declaration><![CDATA[public bool AllowTagging]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="62" sc="13" el="64" ec="14">admin\Skins\tags.ascx.cs</location>
            <body hash="858b8d3b15845b06033ae1789279a362"><![CDATA[{
                return _AllowTagging;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="66" sc="13" el="68" ec="14">admin\Skins\tags.ascx.cs</location>
            <body hash="0d1e740ea32a71d4f968bebbbd9092de"><![CDATA[{
                _AllowTagging = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="CancelImageUrl">
          <declaration><![CDATA[public string CancelImageUrl]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="74" sc="13" el="76" ec="14">admin\Skins\tags.ascx.cs</location>
            <body hash="0a5cdcf1f3152cbdf3d9884f1bf0dcbc"><![CDATA[{
                return _CancelImageUrl;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="78" sc="13" el="80" ec="14">admin\Skins\tags.ascx.cs</location>
            <body hash="f68b4b3a19c2d1c627ca5df49107839e"><![CDATA[{
                _CancelImageUrl = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="CssClass">
          <declaration><![CDATA[public string CssClass]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="83" sc="34" el="83" ec="38">admin\Skins\tags.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="83" sc="39" el="83" ec="43">admin\Skins\tags.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ObjectType">
          <declaration><![CDATA[public string ObjectType]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="88" sc="13" el="90" ec="14">admin\Skins\tags.ascx.cs</location>
            <body hash="33dcb947469f1295da284641b413836b"><![CDATA[{
                return _ObjectType;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="92" sc="13" el="94" ec="14">admin\Skins\tags.ascx.cs</location>
            <body hash="30dfb307af998be7c17b512676e30259"><![CDATA[{
                _ObjectType = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="RepeatDirection">
          <declaration><![CDATA[public string RepeatDirection]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="100" sc="13" el="102" ec="14">admin\Skins\tags.ascx.cs</location>
            <body hash="1e45f633d8546ff4c1107ba51da1709b"><![CDATA[{
                return _RepeatDirection;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="104" sc="13" el="106" ec="14">admin\Skins\tags.ascx.cs</location>
            <body hash="2621413c4582c09a1b88139612d38b65"><![CDATA[{
                _RepeatDirection = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="SaveImageUrl">
          <declaration><![CDATA[public string SaveImageUrl]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="112" sc="13" el="114" ec="14">admin\Skins\tags.ascx.cs</location>
            <body hash="5bc4d7b105ee89e0fcf39f7bf2bde1ab"><![CDATA[{
                return _SaveImageUrl;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="116" sc="13" el="118" ec="14">admin\Skins\tags.ascx.cs</location>
            <body hash="d165ca4ff81e302661fbc7b33428aad3"><![CDATA[{
                _SaveImageUrl = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="Separator">
          <declaration><![CDATA[public string Separator]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="124" sc="13" el="126" ec="14">admin\Skins\tags.ascx.cs</location>
            <body hash="f1083196f0705ded507d8cf02eb88c65"><![CDATA[{
                return _Separator;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="128" sc="13" el="130" ec="14">admin\Skins\tags.ascx.cs</location>
            <body hash="cd7c3b5a9d7ec2f1e88dd4fea042ab78"><![CDATA[{
                _Separator = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="ShowCategories">
          <declaration><![CDATA[public bool ShowCategories]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="136" sc="13" el="138" ec="14">admin\Skins\tags.ascx.cs</location>
            <body hash="233de196bb3b75dedf73f96161fa703d"><![CDATA[{
                return _ShowCategories;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="140" sc="13" el="142" ec="14">admin\Skins\tags.ascx.cs</location>
            <body hash="83402804ff92c6135becc802086aafb0"><![CDATA[{
                _ShowCategories = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="ShowTags">
          <declaration><![CDATA[public bool ShowTags]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="148" sc="13" el="150" ec="14">admin\Skins\tags.ascx.cs</location>
            <body hash="6ba997f93c418ac60b2eae9807e6f936"><![CDATA[{
                return _ShowTags;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="152" sc="13" el="154" ec="14">admin\Skins\tags.ascx.cs</location>
            <body hash="0de4d7a0531f5966d3b567065d79eff2"><![CDATA[{
                _ShowTags = value;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="Terms">
      <declaration><![CDATA[public class Terms : SkinObjectBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public Terms()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="InitializeComponent">
          <declaration><![CDATA[private void InitializeComponent()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="46" sc="9" el="47" ec="10">admin\Skins\Terms.ascx.cs</location>
            <body hash="539fa760ca172337a931519768c64187"><![CDATA[{
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="50" sc="9" el="54" ec="10">admin\Skins\Terms.ascx.cs</location>
            <body hash="5f3c8c20cc44d36b74ae4760af9b8276"><![CDATA[{
            base.OnInit(e);

            InitializeComponent();
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="57" sc="9" el="81" ec="10">admin\Skins\Terms.ascx.cs</location>
            <body hash="2d6fc4504fb79560fba26aff8e17fd35"><![CDATA[{
            base.OnLoad(e);
            try
            {
                if (!String.IsNullOrEmpty(CssClass))
                {
                    hypTerms.CssClass = CssClass;
                }
                if (!String.IsNullOrEmpty(Text))
                {
                    hypTerms.Text = Text;
                }
                else
                {
                    hypTerms.Text = Localization.GetString("Terms", Localization.GetResourceFile(this, MyFileName));
                }
                hypTerms.NavigateUrl = Globals.NavigateURL(PortalSettings.ActiveTab.TabID, "Terms");

                hypTerms.Attributes["rel"] = "nofollow";
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="hypTerms">
          <declaration><![CDATA[protected HyperLink hypTerms;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="MyFileName">
          <declaration><![CDATA[private const string MyFileName = "Terms.ascx";]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="CssClass">
          <declaration><![CDATA[public string CssClass]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="43" sc="34" el="43" ec="38">admin\Skins\Terms.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="43" sc="39" el="43" ec="43">admin\Skins\Terms.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Text">
          <declaration><![CDATA[public string Text]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="41" sc="30" el="41" ec="34">admin\Skins\Terms.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="41" sc="35" el="41" ec="39">admin\Skins\Terms.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="Text">
      <declaration><![CDATA[public class Text : SkinObjectBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public Text()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="44" sc="9" el="79" ec="10">admin\Skins\Text.ascx.cs</location>
            <body hash="e2f6a7932d7484e63d1fbe53395dc753"><![CDATA[{
            base.OnLoad(e);
            string strText = ShowText;
			
			//load resources
            if (!String.IsNullOrEmpty(ResourceKey))
            {
				//localization
                string strFile = Path.GetFileName(Server.MapPath(PortalSettings.ActiveTab.SkinSrc));
                strFile = PortalSettings.ActiveTab.SkinPath + Localization.LocalResourceDirectory + "/" + strFile;
                string strLocalization = Localization.GetString(ResourceKey, strFile);
                if (!String.IsNullOrEmpty(strLocalization))
                {
                    strText = strLocalization;
                }
            }
			
            //If no value is found then use the value set the the Text attribute
            if (string.IsNullOrEmpty(strText))
            {
                strText = ShowText;
            }
			
			//token replace
            if (ReplaceTokens)
            {
                var tr = new TokenReplace();
                tr.AccessingUser = PortalSettings.UserInfo;
                strText = tr.ReplaceEnvironmentTokens(strText);
            }
            lblText.Text = strText;
            if (!String.IsNullOrEmpty(CssClass))
            {
                lblText.CssClass = CssClass;
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="lblText">
          <declaration><![CDATA[protected Label lblText;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="CssClass">
          <declaration><![CDATA[public string CssClass]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="37" sc="34" el="37" ec="38">admin\Skins\Text.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="37" sc="39" el="37" ec="43">admin\Skins\Text.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ReplaceTokens">
          <declaration><![CDATA[public bool ReplaceTokens]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="41" sc="37" el="41" ec="41">admin\Skins\Text.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="41" sc="42" el="41" ec="46">admin\Skins\Text.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ResourceKey">
          <declaration><![CDATA[public string ResourceKey]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="39" sc="37" el="39" ec="41">admin\Skins\Text.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="39" sc="42" el="39" ec="46">admin\Skins\Text.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ShowText">
          <declaration><![CDATA[public string ShowText]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="35" sc="34" el="35" ec="38">admin\Skins\Text.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="35" sc="39" el="35" ec="43">admin\Skins\Text.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="Toast">
      <declaration><![CDATA[public class Toast : SkinObjectBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public Toast()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="FindMessageTab">
          <declaration><![CDATA[private int FindMessageTab()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="76" sc="9" el="98" ec="10">admin\Skins\Toast.ascx.cs</location>
            <body hash="4f8cfde4a83e7a985dc05c4422d16715"><![CDATA[{
            //On brand new install the new Message Center Module is on the child page of User Profile Page 
            //On Upgrade to 6.2.0, the Message Center module is on the User Profile Page
            var profileTab = TabController.Instance.GetTab(PortalSettings.UserTabId, PortalSettings.PortalId, false);
            if (profileTab != null)
            {
                var childTabs = TabController.Instance.GetTabsByPortal(profileTab.PortalID).DescendentsOf(profileTab.TabID);
                foreach (TabInfo tab in childTabs)
                {
                    foreach (KeyValuePair<int, ModuleInfo> kvp in ModuleController.Instance.GetTabModules(tab.TabID))
                    {
                        var module = kvp.Value;
                        if (module.DesktopModule.FriendlyName == "Message Center")
                        {
                            return tab.TabID;                            
                        }
                    }
                }
            }

            //default to User Profile Page
            return PortalSettings.UserTabId;            
        }]]></body>
          </codeblock>
        </method>
        <method name="GetMessageLabel">
          <declaration><![CDATA[public string GetMessageLabel()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="47" sc="9" el="49" ec="10">admin\Skins\Toast.ascx.cs</location>
            <body hash="924018e3743ee355511a62153e19f36c"><![CDATA[{
            return Localization.GetString("SeeAllMessage", Localization.GetResourceFile(this, MyFileName));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetMessageLink">
          <declaration><![CDATA[public string GetMessageLink()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="42" sc="9" el="44" ec="10">admin\Skins\Toast.ascx.cs</location>
            <body hash="811b3a133b38f00a2864339fc1c601b7"><![CDATA[{
            return Globals.NavigateURL(GetMessageTab(), "", string.Format("userId={0}", PortalSettings.UserId));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetMessageTab">
          <declaration><![CDATA[private int GetMessageTab()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="58" sc="9" el="72" ec="10">admin\Skins\Toast.ascx.cs</location>
            <body hash="964f75126a8ba017a2eef49299c96d80"><![CDATA[{
            var cacheKey = string.Format("MessageCenterTab:{0}:{1}", PortalSettings.PortalId, PortalSettings.CultureCode);
            var messageTabId = DataCache.GetCache<int>(cacheKey);
            if (messageTabId > 0)
                return messageTabId;

            //Find the Message Tab
            messageTabId = FindMessageTab();

            //save in cache
            //NOTE - This cache is not being cleared. There is no easy way to clear this, except Tools->Clear Cache
            DataCache.SetCache(cacheKey, messageTabId, TimeSpan.FromMinutes(20));

            return messageTabId;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetNotificationLabel">
          <declaration><![CDATA[public string GetNotificationLabel()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="52" sc="9" el="54" ec="10">admin\Skins\Toast.ascx.cs</location>
            <body hash="b32ef0e9746a21ae27ad9e8d1fdca0d9"><![CDATA[{
            return Localization.GetString("SeeAllNotification", Localization.GetResourceFile(this, MyFileName));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetNotificationLink">
          <declaration><![CDATA[public string GetNotificationLink()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="37" sc="9" el="39" ec="10">admin\Skins\Toast.ascx.cs</location>
            <body hash="f862a9a1c55aee849fe5a5f65142a3f9"><![CDATA[{
            return GetMessageLink() + "?view=notifications&action=notifications";
        }]]></body>
          </codeblock>
        </method>
        <method name="IsOnline">
          <declaration><![CDATA[public bool IsOnline()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="31" sc="9" el="34" ec="10">admin\Skins\Toast.ascx.cs</location>
            <body hash="48b6b11f3d4f01ed49602f831ceb9bff"><![CDATA[{
             var userInfo = UserController.Instance.GetCurrentUserInfo();
             return userInfo.UserID != -1;
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="101" sc="9" el="109" ec="10">admin\Skins\Toast.ascx.cs</location>
            <body hash="c8e51cdabb1d2d1f5e0b404a58298e13"><![CDATA[{
            base.OnLoad(e);

			JavaScript.RequestRegistration(CommonJs.jQueryUI);

            ClientResourceManager.RegisterScript(Page, "~/Resources/Shared/components/Toast/jquery.toastmessage.js", DotNetNuke.Web.Client.FileOrder.Js.jQuery);
			ClientResourceManager.RegisterStyleSheet(Page, "~/Resources/Shared/components/Toast/jquery.toastmessage.css", DotNetNuke.Web.Client.FileOrder.Css.DefaultCss);

        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="MyFileName">
          <declaration><![CDATA[private const string MyFileName = "Toast.ascx";]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="TreeViewMenu">
      <declaration><![CDATA[public class TreeViewMenu : NavObjectBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private string _bodyCssClass = "";]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="50" sc="9" el="69" ec="40">admin\Skins\TreeViewMenu.ascx.cs</location>
            <body hash="0e0ce0940b07a134951fffe9ddea52f3"><![CDATA[private string _bodyCssClass = "";
        private string _cssClass = "";
        private string _headerCssClass = "";
        private string _headerText = "";
        private string _headerTextCssClass = "Head";
        private bool _includeHeader = true;
        private string _nodeChildCssClass = "Normal";
        private string _nodeClosedImage = "~/images/folderclosed.gif";
        private string _nodeCollapseImage = "~/images/min.gif";
        private string _nodeCssClass = "Normal";
        private string _nodeExpandImage = "~/images/max.gif";
        private string _nodeLeafImage = "~/images/file.gif";
        private string _nodeOpenImage = "~/images/folderopen.gif";
        private string _nodeOverCssClass = "Normal";
        private string _nodeSelectedCssClass = "Normal";
        private string _resourceKey = "";
        private string _treeCssClass = "";
        private string _treeGoUpImage = "~/images/folderup.gif";
        private int _treeIndentWidth = 10;
        private string _width = "100%";]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="BuildTree">
          <declaration><![CDATA[private void BuildTree(DNNNode objNode, bool blnPODRequest)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="333" sc="9" el="391" ec="10">admin\Skins\TreeViewMenu.ascx.cs</location>
            <body hash="305f5e9f962c771be920ff2ecc8cef13"><![CDATA[{
            bool blnAddUpNode = false;
            DNNNodeCollection objNodes;
            objNodes = GetNavigationNodes(objNode);

            if (blnPODRequest == false)
            {
                if (!string.IsNullOrEmpty(Level))
                {
                    switch (Level.ToLower())
                    {
                        case "root":
                            break;
                        case "child":
                            blnAddUpNode = true;
                            break;
                        default:
                            if (Level.ToLower() != "root" && PortalSettings.ActiveTab.BreadCrumbs.Count > 1)
                            {
                                blnAddUpNode = true;
                            }
                            break;
                    }
                }
            }
			
			//add goto Parent node
            if (blnAddUpNode)
            {
                var objParentNode = new DNNNode();
                objParentNode.ID = PortalSettings.ActiveTab.ParentId.ToString();
                objParentNode.Key = objParentNode.ID;
                objParentNode.Text = Localization.GetString("Parent", Localization.GetResourceFile(this, MyFileName));
                objParentNode.ToolTip = Localization.GetString("GoUp", Localization.GetResourceFile(this, MyFileName));
                objParentNode.CSSClass = NodeCssClass;
                objParentNode.Image = ResolveUrl(TreeGoUpImage);
                objParentNode.ClickAction = eClickAction.PostBack;
                objNodes.InsertBefore(0, objParentNode);
            }
            foreach (DNNNode objPNode in objNodes) //clean up to do in processnodes???
            {
                ProcessNodes(objPNode);
            }
            Bind(objNodes);

            //technically this should always be a dnntree.  If using dynamic controls Nav.ascx should be used.  just being safe.
            if (Control.NavigationControl is DnnTree)
            {
                var objTree = (DnnTree) Control.NavigationControl;
                if (objTree.SelectedTreeNodes.Count > 0)
                {
                    var objTNode = (TreeNode) objTree.SelectedTreeNodes[1];
                    if (objTNode.DNNNodes.Count > 0) //only expand it if nodes are not pending
                    {
                        objTNode.Expand();
                    }
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="DNNTree_NodeClick">
          <declaration><![CDATA[private void DNNTree_NodeClick(NavigationEventArgs args)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="571" sc="9" el="577" ec="10">admin\Skins\TreeViewMenu.ascx.cs</location>
            <body hash="811770a70b173fe505826f5ed7c63a6c"><![CDATA[{
            if (args.Node == null)
            {
                args.Node = Navigation.GetNavigationNode(args.ID, Control.ID);
            }
            Response.Redirect(Globals.ApplicationURL(int.Parse(args.Node.Key)), true);
        }]]></body>
          </codeblock>
        </method>
        <method name="DNNTree_PopulateOnDemand">
          <declaration><![CDATA[private void DNNTree_PopulateOnDemand(NavigationEventArgs args)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="580" sc="9" el="586" ec="10">admin\Skins\TreeViewMenu.ascx.cs</location>
            <body hash="700ea2e1c76ec020d554a1d48592e5fc"><![CDATA[{
            if (args.Node == null)
            {
                args.Node = Navigation.GetNavigationNode(args.ID, Control.ID);
            }
            BuildTree(args.Node, true);
        }]]></body>
          </codeblock>
        </method>
        <method name="InitializeComponent">
          <declaration><![CDATA[private void InitializeComponent()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="318" sc="9" el="319" ec="10">admin\Skins\TreeViewMenu.ascx.cs</location>
            <body hash="539fa760ca172337a931519768c64187"><![CDATA[{
        }]]></body>
          </codeblock>
        </method>
        <method name="InitializeTree">
          <declaration><![CDATA[private void InitializeTree()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="420" sc="9" el="469" ec="10">admin\Skins\TreeViewMenu.ascx.cs</location>
            <body hash="61e15467a2fa381e7108e61b67b4ee58"><![CDATA[{
            if (String.IsNullOrEmpty(PathImage))
            {
                PathImage = PortalSettings.HomeDirectory;
            }
            if (String.IsNullOrEmpty(PathSystemImage))
            {
                PathSystemImage = ResolveUrl("~/images/");
            }
            if (String.IsNullOrEmpty(IndicateChildImageRoot))
            {
                IndicateChildImageRoot = ResolveUrl(NodeExpandImage);
            }
            if (String.IsNullOrEmpty(IndicateChildImageSub))
            {
                IndicateChildImageSub = ResolveUrl(NodeExpandImage);
            }
            if (String.IsNullOrEmpty(IndicateChildImageExpandedRoot))
            {
                IndicateChildImageExpandedRoot = ResolveUrl(NodeCollapseImage);
            }
            if (String.IsNullOrEmpty(IndicateChildImageExpandedSub))
            {
                IndicateChildImageExpandedSub = ResolveUrl(NodeCollapseImage);
            }
            if (String.IsNullOrEmpty(CSSNode))
            {
                CSSNode = NodeChildCssClass;
            }
            if (String.IsNullOrEmpty(CSSNodeRoot))
            {
                CSSNodeRoot = NodeCssClass;
            }
            if (String.IsNullOrEmpty(CSSNodeHover))
            {
                CSSNodeHover = NodeOverCssClass;
            }
            if (String.IsNullOrEmpty(CSSNodeSelectedRoot))
            {
                CSSNodeSelectedRoot = NodeSelectedCssClass;
            }
            if (String.IsNullOrEmpty(CSSNodeSelectedSub))
            {
                CSSNodeSelectedSub = NodeSelectedCssClass;
            }
            if (String.IsNullOrEmpty(CSSControl))
            {
                CSSControl = TreeCssClass;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="589" sc="9" el="596" ec="10">admin\Skins\TreeViewMenu.ascx.cs</location>
            <body hash="1c9f0014a6bc34e39def778c25efc975"><![CDATA[{
            InitializeTree();
            InitializeNavControl(cellBody, "DNNTreeNavigationProvider");
            Control.NodeClick += DNNTree_NodeClick;
            Control.PopulateOnDemand += DNNTree_PopulateOnDemand;
            base.OnInit(e);
            InitializeComponent();
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="486" sc="9" el="559" ec="10">admin\Skins\TreeViewMenu.ascx.cs</location>
            <body hash="2854d04d63faeefec5bc6344e3c4dce7"><![CDATA[{
            base.OnLoad(e);
            try
            {
                if (Page.IsPostBack == false)
                {
                    BuildTree(null, false);
					
					//Main Table Properties
                    if (!String.IsNullOrEmpty(Width))
                    {
                        tblMain.Width = Width;
                    }
					
                    if (!String.IsNullOrEmpty(CssClass))
                    {
                        tblMain.Attributes.Add("class", CssClass);
                    }
					
					//Header Properties
                    if (!String.IsNullOrEmpty(HeaderCssClass))
                    {
                        cellHeader.Attributes.Add("class", HeaderCssClass);
                    }
					
                    if (!String.IsNullOrEmpty(HeaderTextCssClass))
                    {
                        lblHeader.CssClass = HeaderTextCssClass;
                    }
					
					//Header Text (if set)
                    if (!String.IsNullOrEmpty(HeaderText))
                    {
                        lblHeader.Text = HeaderText;
                    }
					
					//ResourceKey overrides if found
                    if (!String.IsNullOrEmpty(ResourceKey))
                    {
                        string strHeader = Localization.GetString(ResourceKey, Localization.GetResourceFile(this, MyFileName));
                        if (!String.IsNullOrEmpty(strHeader))
                        {
                            lblHeader.Text = Localization.GetString(ResourceKey, Localization.GetResourceFile(this, MyFileName));
                        }
                    }
					
					//If still not set get default key
                    if (String.IsNullOrEmpty(lblHeader.Text))
                    {
                        string strHeader = Localization.GetString("Title", Localization.GetResourceFile(this, MyFileName));
                        if (!String.IsNullOrEmpty(strHeader))
                        {
                            lblHeader.Text = Localization.GetString("Title", Localization.GetResourceFile(this, MyFileName));
                        }
                        else
                        {
                            lblHeader.Text = "Site Navigation";
                        }
                    }
                    tblHeader.Visible = IncludeHeader;
					
					//Main Panel Properties
                    if (!String.IsNullOrEmpty(BodyCssClass))
                    {
                        cellBody.Attributes.Add("class", BodyCssClass);
                    }
                    cellBody.NoWrap = NoWrap;
                }
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="ProcessNodes">
          <declaration><![CDATA[private void ProcessNodes(DNNNode objParent)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="394" sc="9" el="410" ec="10">admin\Skins\TreeViewMenu.ascx.cs</location>
            <body hash="1dcc131393cbeb2e55ed72896878a42f"><![CDATA[{
            if (!String.IsNullOrEmpty(objParent.Image))
            {
            }
            else if (objParent.HasNodes) //imagepath applied in provider...
            {
                objParent.Image = ResolveUrl(NodeClosedImage);
            }
            else
            {
                objParent.Image = ResolveUrl(NodeLeafImage);
            }
            foreach (DNNNode objNode in objParent.DNNNodes)
            {
                ProcessNodes(objNode);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_bodyCssClass">
          <declaration><![CDATA[private string _bodyCssClass = "";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_cssClass">
          <declaration><![CDATA[private string _cssClass = "";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_headerCssClass">
          <declaration><![CDATA[private string _headerCssClass = "";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_headerText">
          <declaration><![CDATA[private string _headerText = "";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_headerTextCssClass">
          <declaration><![CDATA[private string _headerTextCssClass = "Head";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_includeHeader">
          <declaration><![CDATA[private bool _includeHeader = true;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_nodeChildCssClass">
          <declaration><![CDATA[private string _nodeChildCssClass = "Normal";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_nodeClosedImage">
          <declaration><![CDATA[private string _nodeClosedImage = "~/images/folderclosed.gif";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_nodeCollapseImage">
          <declaration><![CDATA[private string _nodeCollapseImage = "~/images/min.gif";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_nodeCssClass">
          <declaration><![CDATA[private string _nodeCssClass = "Normal";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_nodeExpandImage">
          <declaration><![CDATA[private string _nodeExpandImage = "~/images/max.gif";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_nodeLeafImage">
          <declaration><![CDATA[private string _nodeLeafImage = "~/images/file.gif";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_nodeOpenImage">
          <declaration><![CDATA[private string _nodeOpenImage = "~/images/folderopen.gif";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_nodeOverCssClass">
          <declaration><![CDATA[private string _nodeOverCssClass = "Normal";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_nodeSelectedCssClass">
          <declaration><![CDATA[private string _nodeSelectedCssClass = "Normal";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_resourceKey">
          <declaration><![CDATA[private string _resourceKey = "";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_treeCssClass">
          <declaration><![CDATA[private string _treeCssClass = "";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_treeGoUpImage">
          <declaration><![CDATA[private string _treeGoUpImage = "~/images/folderup.gif";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_treeIndentWidth">
          <declaration><![CDATA[private int _treeIndentWidth = 10;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_width">
          <declaration><![CDATA[private string _width = "100%";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cellBody">
          <declaration><![CDATA[protected HtmlTableCell cellBody;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cellHeader">
          <declaration><![CDATA[protected HtmlTableCell cellHeader;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblHeader">
          <declaration><![CDATA[protected Label lblHeader;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="MyFileName">
          <declaration><![CDATA[private const string MyFileName = "TreeViewMenu.ascx";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="tblHeader">
          <declaration><![CDATA[protected HtmlTable tblHeader;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="tblMain">
          <declaration><![CDATA[protected HtmlTable tblMain;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="BodyCssClass">
          <declaration><![CDATA[public string BodyCssClass]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="78" sc="13" el="80" ec="14">admin\Skins\TreeViewMenu.ascx.cs</location>
            <body hash="fd3f687a86513b14ecb16bd43e1362bb"><![CDATA[{
                return _bodyCssClass;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="82" sc="13" el="84" ec="14">admin\Skins\TreeViewMenu.ascx.cs</location>
            <body hash="0dda86ec73e3fd07a7776a89ac36c73a"><![CDATA[{
                _bodyCssClass = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="CssClass">
          <declaration><![CDATA[public string CssClass]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="90" sc="13" el="92" ec="14">admin\Skins\TreeViewMenu.ascx.cs</location>
            <body hash="2d31fbdb57fd41c0fff007dbe70439e8"><![CDATA[{
                return _cssClass;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="94" sc="13" el="96" ec="14">admin\Skins\TreeViewMenu.ascx.cs</location>
            <body hash="433b3dc25c8ea04983a374e08c5dea86"><![CDATA[{
                _cssClass = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="HeaderCssClass">
          <declaration><![CDATA[public string HeaderCssClass]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="102" sc="13" el="104" ec="14">admin\Skins\TreeViewMenu.ascx.cs</location>
            <body hash="8e79f3874e46902eb2539cc70562ab6c"><![CDATA[{
                return _headerCssClass;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="106" sc="13" el="108" ec="14">admin\Skins\TreeViewMenu.ascx.cs</location>
            <body hash="ee7efb3c458f4bc7406ae22ae06bc57b"><![CDATA[{
                _headerCssClass = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="HeaderText">
          <declaration><![CDATA[public string HeaderText]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="126" sc="13" el="128" ec="14">admin\Skins\TreeViewMenu.ascx.cs</location>
            <body hash="4a715dbf4401dd198eefe6c1e0f6dfe1"><![CDATA[{
                return _headerText;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="130" sc="13" el="132" ec="14">admin\Skins\TreeViewMenu.ascx.cs</location>
            <body hash="8f448cc34e66281ed01a49ff87cb5c7a"><![CDATA[{
                _headerText = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="HeaderTextCssClass">
          <declaration><![CDATA[public string HeaderTextCssClass]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="114" sc="13" el="116" ec="14">admin\Skins\TreeViewMenu.ascx.cs</location>
            <body hash="e31a21624bcdcd49b84c66a4df1171f7"><![CDATA[{
                return _headerTextCssClass;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="118" sc="13" el="120" ec="14">admin\Skins\TreeViewMenu.ascx.cs</location>
            <body hash="f11ccb18c442aafe780612d5cd0edfee"><![CDATA[{
                _headerTextCssClass = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="IncludeHeader">
          <declaration><![CDATA[public bool IncludeHeader]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="138" sc="13" el="140" ec="14">admin\Skins\TreeViewMenu.ascx.cs</location>
            <body hash="c966150736286e05b5112a9b41ff342f"><![CDATA[{
                return _includeHeader;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="142" sc="13" el="144" ec="14">admin\Skins\TreeViewMenu.ascx.cs</location>
            <body hash="2e568da29c8e7ba50af80ed7315ec6c0"><![CDATA[{
                _includeHeader = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="NodeChildCssClass">
          <declaration><![CDATA[public string NodeChildCssClass]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="150" sc="13" el="152" ec="14">admin\Skins\TreeViewMenu.ascx.cs</location>
            <body hash="4fe07800cd3d08bbfd604833c6720fe7"><![CDATA[{
                return _nodeChildCssClass;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="154" sc="13" el="156" ec="14">admin\Skins\TreeViewMenu.ascx.cs</location>
            <body hash="ce63bbbceb591e36788f888b639664f7"><![CDATA[{
                _nodeChildCssClass = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="NodeClosedImage">
          <declaration><![CDATA[public string NodeClosedImage]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="162" sc="13" el="164" ec="14">admin\Skins\TreeViewMenu.ascx.cs</location>
            <body hash="75b305bdfc943600c6ee67b281e9a159"><![CDATA[{
                return _nodeClosedImage;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="166" sc="13" el="168" ec="14">admin\Skins\TreeViewMenu.ascx.cs</location>
            <body hash="9be8ae66d79e646b15436d0fa771e8df"><![CDATA[{
                _nodeClosedImage = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="NodeCollapseImage">
          <declaration><![CDATA[public string NodeCollapseImage]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="174" sc="13" el="176" ec="14">admin\Skins\TreeViewMenu.ascx.cs</location>
            <body hash="8da43e3b9bf8d5749242d537e37296f1"><![CDATA[{
                return _nodeCollapseImage;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="178" sc="13" el="180" ec="14">admin\Skins\TreeViewMenu.ascx.cs</location>
            <body hash="c01d130436033bf7e43f71d5f5393442"><![CDATA[{
                _nodeCollapseImage = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="NodeCssClass">
          <declaration><![CDATA[public string NodeCssClass]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="186" sc="13" el="188" ec="14">admin\Skins\TreeViewMenu.ascx.cs</location>
            <body hash="e57a7e6214d0232c18c99ab7979f2179"><![CDATA[{
                return _nodeCssClass;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="190" sc="13" el="192" ec="14">admin\Skins\TreeViewMenu.ascx.cs</location>
            <body hash="7840001d91b9f5d37431f3fbd043912c"><![CDATA[{
                _nodeCssClass = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="NodeExpandImage">
          <declaration><![CDATA[public string NodeExpandImage]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="198" sc="13" el="200" ec="14">admin\Skins\TreeViewMenu.ascx.cs</location>
            <body hash="fc795c8d9e2c331a621225e7cce16271"><![CDATA[{
                return _nodeExpandImage;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="202" sc="13" el="204" ec="14">admin\Skins\TreeViewMenu.ascx.cs</location>
            <body hash="9c017bcca3af7ee0b969158738f204c0"><![CDATA[{
                _nodeExpandImage = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="NodeLeafImage">
          <declaration><![CDATA[public string NodeLeafImage]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="210" sc="13" el="212" ec="14">admin\Skins\TreeViewMenu.ascx.cs</location>
            <body hash="f45d7de0cb619f4b42e823c6b63718c0"><![CDATA[{
                return _nodeLeafImage;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="214" sc="13" el="216" ec="14">admin\Skins\TreeViewMenu.ascx.cs</location>
            <body hash="68f7efb16da9fc2e1882e2e53333a4c8"><![CDATA[{
                _nodeLeafImage = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="NodeOpenImage">
          <declaration><![CDATA[public string NodeOpenImage]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="222" sc="13" el="224" ec="14">admin\Skins\TreeViewMenu.ascx.cs</location>
            <body hash="ab7f6b8a4de2115d6388b38ed18767a9"><![CDATA[{
                return _nodeOpenImage;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="226" sc="13" el="228" ec="14">admin\Skins\TreeViewMenu.ascx.cs</location>
            <body hash="c4e10e80064039f4ab3ca7dbf127b894"><![CDATA[{
                _nodeOpenImage = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="NodeOverCssClass">
          <declaration><![CDATA[public string NodeOverCssClass]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="234" sc="13" el="236" ec="14">admin\Skins\TreeViewMenu.ascx.cs</location>
            <body hash="c03608731752da73b42703cae98b9c60"><![CDATA[{
                return _nodeOverCssClass;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="238" sc="13" el="240" ec="14">admin\Skins\TreeViewMenu.ascx.cs</location>
            <body hash="101a9463d467ed5e7f25434c073bc4c6"><![CDATA[{
                _nodeOverCssClass = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="NodeSelectedCssClass">
          <declaration><![CDATA[public string NodeSelectedCssClass]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="246" sc="13" el="248" ec="14">admin\Skins\TreeViewMenu.ascx.cs</location>
            <body hash="eaad8472544671bdab3cc6a88bd28c50"><![CDATA[{
                return _nodeSelectedCssClass;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="250" sc="13" el="252" ec="14">admin\Skins\TreeViewMenu.ascx.cs</location>
            <body hash="e398d175a77a92adf163a96e2c040303"><![CDATA[{
                _nodeSelectedCssClass = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="NoWrap">
          <declaration><![CDATA[public bool NoWrap]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="255" sc="30" el="255" ec="34">admin\Skins\TreeViewMenu.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="255" sc="35" el="255" ec="39">admin\Skins\TreeViewMenu.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ResourceKey">
          <declaration><![CDATA[public string ResourceKey]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="260" sc="13" el="262" ec="14">admin\Skins\TreeViewMenu.ascx.cs</location>
            <body hash="dc67c1da5102cd1efce0eb06e5f36e47"><![CDATA[{
                return _resourceKey;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="264" sc="13" el="266" ec="14">admin\Skins\TreeViewMenu.ascx.cs</location>
            <body hash="3332ceb1ba3ef6a238b0e668e80c6ebf"><![CDATA[{
                _resourceKey = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="TreeCssClass">
          <declaration><![CDATA[public string TreeCssClass]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="272" sc="13" el="274" ec="14">admin\Skins\TreeViewMenu.ascx.cs</location>
            <body hash="41d5fcf781d9115471b39060dbf61cf0"><![CDATA[{
                return _treeCssClass;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="276" sc="13" el="278" ec="14">admin\Skins\TreeViewMenu.ascx.cs</location>
            <body hash="09496d5902224cb3352e5f35e857c407"><![CDATA[{
                _treeCssClass = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="TreeGoUpImage">
          <declaration><![CDATA[public string TreeGoUpImage]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="284" sc="13" el="286" ec="14">admin\Skins\TreeViewMenu.ascx.cs</location>
            <body hash="82f517decc35d6f8e7cac09a569b33f1"><![CDATA[{
                return _treeGoUpImage;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="288" sc="13" el="290" ec="14">admin\Skins\TreeViewMenu.ascx.cs</location>
            <body hash="ca123df76c5223eac05d28b6a5ade064"><![CDATA[{
                _treeGoUpImage = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="TreeIndentWidth">
          <declaration><![CDATA[public int TreeIndentWidth]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="296" sc="13" el="298" ec="14">admin\Skins\TreeViewMenu.ascx.cs</location>
            <body hash="7b0ac6a25ba27a5c0cb4a00b55c951e5"><![CDATA[{
                return _treeIndentWidth;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="300" sc="13" el="302" ec="14">admin\Skins\TreeViewMenu.ascx.cs</location>
            <body hash="4abeb3a8a466c5bc06fab5248b440fca"><![CDATA[{
                _treeIndentWidth = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="Width">
          <declaration><![CDATA[public string Width]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="308" sc="13" el="310" ec="14">admin\Skins\TreeViewMenu.ascx.cs</location>
            <body hash="9cf767f10e3c50ac2d3c077a396d6bd9"><![CDATA[{
                return _width;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="312" sc="13" el="314" ec="14">admin\Skins\TreeViewMenu.ascx.cs</location>
            <body hash="6cf259be10e7719ac538a88d98ba1a3f"><![CDATA[{
                _width = value;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="User">
      <declaration><![CDATA[public class User : SkinObjectBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public User()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="53" sc="9" el="58" ec="10">admin\Skins\User.ascx.cs</location>
            <body hash="b3edb9e0e81791657f68a9c10e3bcfb0"><![CDATA[public User()
        {
            ShowUnreadMessages = true;
            ShowAvatar = true;
            LegacyMode = true;
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="FindMessageTab">
          <declaration><![CDATA[private int FindMessageTab()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="229" sc="9" el="251" ec="10">admin\Skins\User.ascx.cs</location>
            <body hash="a020229ab223532f8dd48d2782218160"><![CDATA[{
            //On brand new install the new Message Center Module is on the child page of User Profile Page 
            //On Upgrade to 6.2.0, the Message Center module is on the User Profile Page
            var profileTab = TabController.Instance.GetTab(PortalSettings.UserTabId, PortalSettings.PortalId, false);
            if (profileTab != null)
            {
                var childTabs = TabController.Instance.GetTabsByPortal(profileTab.PortalID).DescendentsOf(profileTab.TabID);
                foreach (TabInfo tab in childTabs)
                {
                    foreach (KeyValuePair<int, ModuleInfo> kvp in ModuleController.Instance.GetTabModules(tab.TabID))
                    {
                        var module = kvp.Value;
                        if (module.DesktopModule.FriendlyName == "Message Center" && !module.IsDeleted)
                        {
                            return tab.TabID;                            
                        }
                    }
                }
            }

            //default to User Profile Page
            return PortalSettings.UserTabId;            
        }]]></body>
          </codeblock>
        </method>
        <method name="GetAvatarUrl">
          <declaration><![CDATA[private string GetAvatarUrl(UserInfo userInfo)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="207" sc="9" el="209" ec="10">admin\Skins\User.ascx.cs</location>
            <body hash="66237cb9ada73abedc9f646209956e59"><![CDATA[{
            return UserController.Instance.GetUserProfilePictureUrl(userInfo.UserID, 32, 32);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetMessageTab">
          <declaration><![CDATA[private int GetMessageTab()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="212" sc="9" el="226" ec="10">admin\Skins\User.ascx.cs</location>
            <body hash="964f75126a8ba017a2eef49299c96d80"><![CDATA[{
            var cacheKey = string.Format("MessageCenterTab:{0}:{1}", PortalSettings.PortalId, PortalSettings.CultureCode);
            var messageTabId = DataCache.GetCache<int>(cacheKey);
            if (messageTabId > 0)
                return messageTabId;

            //Find the Message Tab
            messageTabId = FindMessageTab();

            //save in cache
            //NOTE - This cache is not being cleared. There is no easy way to clear this, except Tools->Clear Cache
            DataCache.SetCache(cacheKey, messageTabId, TimeSpan.FromMinutes(20));

            return messageTabId;
        }]]></body>
          </codeblock>
        </method>
        <method name="HasSocialAuthenticationEnabled">
          <declaration><![CDATA[private bool HasSocialAuthenticationEnabled()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="254" sc="9" el="264" ec="10">admin\Skins\User.ascx.cs</location>
            <body hash="6f49b302711dcbf74c238bfbce5b8144"><![CDATA[{
            return (from a in AuthenticationController.GetEnabledAuthenticationServices()
                    let enabled = (a.AuthenticationType == "Facebook"
                                     || a.AuthenticationType == "Google"
                                     || a.AuthenticationType == "Live"
                                     || a.AuthenticationType == "Twitter")
                                  ? PortalController.GetPortalSettingAsBoolean(a.AuthenticationType + "_Enabled", PortalSettings.PortalId, false)
                                  : !string.IsNullOrEmpty(a.LoginControlSrc) && (LoadControl("~/" + a.LoginControlSrc) as AuthenticationLoginBase).Enabled
                    where a.AuthenticationType != "DNN" && enabled
                    select a).Any();
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="76" sc="9" el="204" ec="10">admin\Skins\User.ascx.cs</location>
            <body hash="60b640ec98f5e391d1a5fba1f7c1ea74"><![CDATA[{
            base.OnLoad(e);

            try
            {
                if (LegacyMode)
                    registerGroup.Visible = false;
                else
                    registerLink.Visible = false;

                if (!String.IsNullOrEmpty(CssClass))
                {
                    registerLink.CssClass = CssClass;
                    enhancedRegisterLink.CssClass = CssClass;
                }

                if (Request.IsAuthenticated == false)
                {
                    messageGroup.Visible = false;
                    notificationGroup.Visible = false;
                    avatarGroup.Visible = false;

                    if (PortalSettings.UserRegistration != (int) Globals.PortalRegistrationType.NoRegistration)
                    {
                        if (!String.IsNullOrEmpty(Text))
                        {
                            if (Text.IndexOf("src=") != -1)
                            {
                                Text = Text.Replace("src=\"", "src=\"" + PortalSettings.ActiveTab.SkinPath);
                            }
                            registerLink.Text = Text;
                            enhancedRegisterLink.Text = Text;
                        }
                        else
                        {
                            registerLink.Text = Localization.GetString("Register", Localization.GetResourceFile(this, MyFileName));
                            enhancedRegisterLink.Text = registerLink.Text;
                            registerLink.ToolTip = registerLink.Text;
                            enhancedRegisterLink.ToolTip = registerLink.Text;
                        }
                        if (PortalSettings.Users < PortalSettings.UserQuota || PortalSettings.UserQuota == 0)
                        {                            
                            if (LegacyMode) registerLink.Visible = true;
                            else  enhancedRegisterLink.Visible = true;
                        }
                        else
                        {
                            registerGroup.Visible = false;
                            registerLink.Visible = false;
                        }

                        registerLink.NavigateUrl = !String.IsNullOrEmpty(URL) 
                                            ? URL 
                                            : Globals.RegisterURL(HttpUtility.UrlEncode(Globals.NavigateURL()), Null.NullString);
                        enhancedRegisterLink.NavigateUrl = registerLink.NavigateUrl;

                        if (PortalSettings.EnablePopUps && PortalSettings.RegisterTabId == Null.NullInteger
                            && !HasSocialAuthenticationEnabled())
                        {
                            var clickEvent = "return " + UrlUtils.PopUpUrl(registerLink.NavigateUrl, this, PortalSettings, true, false, 600, 950);
                            registerLink.Attributes.Add("onclick", clickEvent);
                            enhancedRegisterLink.Attributes.Add("onclick", clickEvent);
                        }

                    }
                    else
                    {
                        registerGroup.Visible = false;
                        registerLink.Visible = false;
                    }
                }
                else
                {
                    var userInfo = UserController.Instance.GetCurrentUserInfo();
                    if (userInfo.UserID != -1)
                    {
                        registerLink.Text = userInfo.DisplayName;                                                
                        registerLink.NavigateUrl = Globals.UserProfileURL(userInfo.UserID);                        
                        registerLink.ToolTip = Localization.GetString("VisitMyProfile", Localization.GetResourceFile(this, MyFileName));

                        enhancedRegisterLink.Text = registerLink.Text;
                        enhancedRegisterLink.NavigateUrl = registerLink.NavigateUrl;
                        enhancedRegisterLink.ToolTip = registerLink.ToolTip;

                        if (ShowUnreadMessages)
                        {
                            var unreadMessages = InternalMessagingController.Instance.CountUnreadMessages(userInfo.UserID, PortalController.GetEffectivePortalId(userInfo.PortalID));
                            var unreadAlerts = NotificationsController.Instance.CountNotifications(userInfo.UserID, PortalController.GetEffectivePortalId(userInfo.PortalID));

                            messageLink.Text = unreadMessages > 0 ? string.Format(Localization.GetString("Messages", Localization.GetResourceFile(this, MyFileName)), unreadMessages) : Localization.GetString("NoMessages", Localization.GetResourceFile(this, MyFileName));
                            notificationLink.Text = unreadAlerts > 0 ? string.Format(Localization.GetString("Notifications", Localization.GetResourceFile(this, MyFileName)), unreadAlerts) : Localization.GetString("NoNotifications", Localization.GetResourceFile(this, MyFileName));

                            messageLink.NavigateUrl = Globals.NavigateURL(GetMessageTab(), "", string.Format("userId={0}", userInfo.UserID));
                            notificationLink.NavigateUrl = Globals.NavigateURL(GetMessageTab(), "", string.Format("userId={0}", userInfo.UserID),"view=notifications","action=notifications");
                            notificationLink.ToolTip = Localization.GetString("CheckNotifications", Localization.GetResourceFile(this, MyFileName));
                            messageLink.ToolTip = Localization.GetString("CheckMessages", Localization.GetResourceFile(this, MyFileName));
                            messageGroup.Visible = true;
                            notificationGroup.Visible = true;

                            if (LegacyMode && unreadMessages > 0)
                            {
                                registerLink.Text = registerLink.Text + string.Format(Localization.GetString("NewMessages", Localization.GetResourceFile(this, MyFileName)), unreadMessages);
                            }
                        }
                        else
                        {
                            messageGroup.Visible = false;
                            notificationGroup.Visible = false;
                        }

                        if (ShowAvatar)
                        {
                            avatar.ImageUrl = GetAvatarUrl(userInfo);
                            avatar.NavigateUrl = enhancedRegisterLink.NavigateUrl;
                            avatar.ToolTip = avatar.Text = Localization.GetString("ProfileAvatar", Localization.GetResourceFile(this, MyFileName));
                            avatarGroup.Visible = true;                            
                        }
                        else
                        {
                            avatarGroup.Visible = false;
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="avatar">
          <declaration><![CDATA[protected HyperLink avatar;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="avatarGroup">
          <declaration><![CDATA[protected HtmlGenericControl avatarGroup;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="enhancedRegisterLink">
          <declaration><![CDATA[protected HyperLink enhancedRegisterLink;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="messageGroup">
          <declaration><![CDATA[protected HtmlGenericControl messageGroup;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="messageLink">
          <declaration><![CDATA[protected HyperLink messageLink;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="MyFileName">
          <declaration><![CDATA[private const string MyFileName = "User.ascx";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="notificationGroup">
          <declaration><![CDATA[protected HtmlGenericControl notificationGroup;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="notificationLink">
          <declaration><![CDATA[protected HyperLink notificationLink;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="registerGroup">
          <declaration><![CDATA[protected HtmlGenericControl registerGroup;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="registerLink">
          <declaration><![CDATA[protected HyperLink registerLink;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="CssClass">
          <declaration><![CDATA[public string CssClass]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="60" sc="34" el="60" ec="38">admin\Skins\User.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="60" sc="39" el="60" ec="43">admin\Skins\User.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="LegacyMode">
          <declaration><![CDATA[public bool LegacyMode]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="69" sc="34" el="69" ec="38">admin\Skins\User.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="69" sc="39" el="69" ec="43">admin\Skins\User.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ShowAvatar">
          <declaration><![CDATA[public bool ShowAvatar]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="64" sc="34" el="64" ec="38">admin\Skins\User.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="64" sc="39" el="64" ec="43">admin\Skins\User.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ShowUnreadMessages">
          <declaration><![CDATA[public bool ShowUnreadMessages]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="62" sc="42" el="62" ec="46">admin\Skins\User.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="62" sc="47" el="62" ec="51">admin\Skins\User.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Text">
          <declaration><![CDATA[public string Text]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="71" sc="30" el="71" ec="34">admin\Skins\User.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="71" sc="35" el="71" ec="39">admin\Skins\User.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="URL">
          <declaration><![CDATA[public string URL]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="73" sc="29" el="73" ec="33">admin\Skins\User.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="73" sc="34" el="73" ec="38">admin\Skins\User.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="UserAndLogin">
      <declaration><![CDATA[public class UserAndLogin : SkinObjectBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public UserAndLogin()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="FindMessageTab">
          <declaration><![CDATA[private int FindMessageTab()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="216" sc="9" el="238" ec="10">admin\Skins\UserAndLogin.ascx.cs</location>
            <body hash="a020229ab223532f8dd48d2782218160"><![CDATA[{
            //On brand new install the new Message Center Module is on the child page of User Profile Page 
            //On Upgrade to 6.2.0, the Message Center module is on the User Profile Page
            var profileTab = TabController.Instance.GetTab(PortalSettings.UserTabId, PortalSettings.PortalId, false);
            if (profileTab != null)
            {
                var childTabs = TabController.Instance.GetTabsByPortal(profileTab.PortalID).DescendentsOf(profileTab.TabID);
                foreach (TabInfo tab in childTabs)
                {
                    foreach (KeyValuePair<int, ModuleInfo> kvp in ModuleController.Instance.GetTabModules(tab.TabID))
                    {
                        var module = kvp.Value;
                        if (module.DesktopModule.FriendlyName == "Message Center" && !module.IsDeleted)
                        {
                            return tab.TabID;                            
                        }
                    }
                }
            }

            //default to User Profile Page
            return PortalSettings.UserTabId;            
        }]]></body>
          </codeblock>
        </method>
        <method name="GetMessageTab">
          <declaration><![CDATA[private int GetMessageTab()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="199" sc="9" el="213" ec="10">admin\Skins\UserAndLogin.ascx.cs</location>
            <body hash="964f75126a8ba017a2eef49299c96d80"><![CDATA[{
            var cacheKey = string.Format("MessageCenterTab:{0}:{1}", PortalSettings.PortalId, PortalSettings.CultureCode);
            var messageTabId = DataCache.GetCache<int>(cacheKey);
            if (messageTabId > 0)
                return messageTabId;

            //Find the Message Tab
            messageTabId = FindMessageTab();

            //save in cache
            //NOTE - This cache is not being cleared. There is no easy way to clear this, except Tools->Clear Cache
            DataCache.SetCache(cacheKey, messageTabId, TimeSpan.FromMinutes(20));

            return messageTabId;
        }]]></body>
          </codeblock>
        </method>
        <method name="HasSocialAuthenticationEnabled">
          <declaration><![CDATA[private bool HasSocialAuthenticationEnabled()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="241" sc="9" el="251" ec="10">admin\Skins\UserAndLogin.ascx.cs</location>
            <body hash="6f49b302711dcbf74c238bfbce5b8144"><![CDATA[{
            return (from a in AuthenticationController.GetEnabledAuthenticationServices()
                    let enabled = (a.AuthenticationType == "Facebook"
                                     || a.AuthenticationType == "Google"
                                     || a.AuthenticationType == "Live"
                                     || a.AuthenticationType == "Twitter")
                                  ? PortalController.GetPortalSettingAsBoolean(a.AuthenticationType + "_Enabled", PortalSettings.PortalId, false)
                                  : !string.IsNullOrEmpty(a.LoginControlSrc) && (LoadControl("~/" + a.LoginControlSrc) as AuthenticationLoginBase).Enabled
                    where a.AuthenticationType != "DNN" && enabled
                    select a).Any();
        }]]></body>
          </codeblock>
        </method>
        <method name="LocalizeString">
          <declaration><![CDATA[protected string LocalizeString(string key)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="144" sc="9" el="146" ec="10">admin\Skins\UserAndLogin.ascx.cs</location>
            <body hash="9b02a731a9bd9bd99f97f8a9aa3851e5"><![CDATA[{
            return Localization.GetString(key, Localization.GetResourceFile(this, MyFileName)); 
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="149" sc="9" el="196" ec="10">admin\Skins\UserAndLogin.ascx.cs</location>
            <body hash="05f4b2259c34b84c14af3b09d55079b1"><![CDATA[{
            base.OnLoad(e);

            registerLink.NavigateUrl = RegisterUrl;
            loginLink.NavigateUrl = LoginUrl;

            if (PortalSettings.UserId > 0)
            {
                viewProfileLink.NavigateUrl = Globals.UserProfileURL(PortalSettings.UserId);
                viewProfileImageLink.NavigateUrl = Globals.UserProfileURL(PortalSettings.UserId);
                logoffLink.NavigateUrl = Globals.NavigateURL(PortalSettings.ActiveTab.TabID, "Logoff");
                editProfileLink.NavigateUrl = Globals.NavigateURL(PortalSettings.UserTabId, "Profile", "userId=" + PortalSettings.UserId, "pageno=2");
                accountLink.NavigateUrl = Globals.NavigateURL(PortalSettings.UserTabId, "Profile", "userId=" + PortalSettings.UserId, "pageno=1");
                messagesLink.NavigateUrl = Globals.NavigateURL(GetMessageTab(), "", string.Format("userId={0}", PortalSettings.UserId));
                notificationsLink.NavigateUrl = Globals.NavigateURL(GetMessageTab(), "", string.Format("userId={0}", PortalSettings.UserId), "view=notifications", "action=notifications");

                var unreadMessages = InternalMessagingController.Instance.CountUnreadMessages(PortalSettings.UserId, PortalSettings.PortalId);
                var unreadAlerts = NotificationsController.Instance.CountNotifications(PortalSettings.UserId, PortalSettings.PortalId);

                if (unreadMessages > 0)
                {
                    messageCount.Text = unreadMessages.ToString(CultureInfo.InvariantCulture);
                    messageCount.Visible = true;

                    messages.Text = unreadMessages.ToString(CultureInfo.InvariantCulture);
                    messages.ToolTip = unreadMessages == 1
                                        ? LocalizeString("OneMessage")
                                        : String.Format(LocalizeString("MessageCount"), unreadMessages);
                    messages.Visible = true;
                }

                if (unreadAlerts > 0)
                {
                    notificationCount.Text = unreadAlerts.ToString(CultureInfo.InvariantCulture);
                    notificationCount.Visible = true;
                }

                profilePicture.ImageUrl = AvatarImageUrl;
                profilePicture.AlternateText = Localization.GetString("ProfilePicture", Localization.GetResourceFile(this, MyFileName));
            }

            if (UsePopUp)
            {
                registerLink.Attributes.Add("onclick", RegisterUrlForClickEvent);
                loginLink.Attributes.Add("onclick", LoginUrlForClickEvent);
            }

        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="accountLink">
          <declaration><![CDATA[protected HyperLink accountLink;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="editProfileLink">
          <declaration><![CDATA[protected HyperLink editProfileLink;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="loginLink">
          <declaration><![CDATA[protected HyperLink loginLink;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="logoffLink">
          <declaration><![CDATA[protected HyperLink logoffLink;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="messageCount">
          <declaration><![CDATA[protected Label messageCount;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="messages">
          <declaration><![CDATA[protected Label messages;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="messagesLink">
          <declaration><![CDATA[protected HyperLink messagesLink;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="MyFileName">
          <declaration><![CDATA[private const string MyFileName = "UserAndLogin.ascx";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="notificationCount">
          <declaration><![CDATA[protected Label notificationCount;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="notificationsLink">
          <declaration><![CDATA[protected HyperLink notificationsLink;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="profilePicture">
          <declaration><![CDATA[protected Image profilePicture;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="registerLink">
          <declaration><![CDATA[protected HyperLink registerLink;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="viewProfileImageLink">
          <declaration><![CDATA[protected HyperLink viewProfileImageLink;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="viewProfileLink">
          <declaration><![CDATA[protected HyperLink viewProfileLink;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="AvatarImageUrl">
          <declaration><![CDATA[protected string AvatarImageUrl]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="47" sc="44" el="47" ec="123">admin\Skins\UserAndLogin.ascx.cs</location>
            <body hash="5c045a44744324052566dbe7fc541d17"><![CDATA[UserController.Instance.GetUserProfilePictureUrl(PortalSettings.UserId, 32, 32]]></body>
          </codeblock>
        </property>
        <property name="CanRegister">
          <declaration><![CDATA[protected bool CanRegister]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="52" sc="13" el="55" ec="14">admin\Skins\UserAndLogin.ascx.cs</location>
            <body hash="5ee8c5be643eff6901ffd122c131c857"><![CDATA[{
                return ((PortalSettings.UserRegistration != (int) Globals.PortalRegistrationType.NoRegistration)
                    && (PortalSettings.Users < PortalSettings.UserQuota || PortalSettings.UserQuota == 0));
            }]]></body>
          </codeblock>
        </property>
        <property name="DisplayName">
          <declaration><![CDATA[protected string DisplayName]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="61" sc="13" el="63" ec="14">admin\Skins\UserAndLogin.ascx.cs</location>
            <body hash="effed53ea1be89d90dc7d2eb53047897"><![CDATA[{
                return PortalSettings.UserInfo.DisplayName;
            }]]></body>
          </codeblock>
        </property>
        <property name="IsAuthenticated">
          <declaration><![CDATA[protected bool IsAuthenticated]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="69" sc="13" el="71" ec="14">admin\Skins\UserAndLogin.ascx.cs</location>
            <body hash="4b2ae5abb5bfa8e95bb82cee25b9d392"><![CDATA[{
                return Request.IsAuthenticated;
            }]]></body>
          </codeblock>
        </property>
        <property name="LoginUrl">
          <declaration><![CDATA[protected string LoginUrl]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="77" sc="13" el="86" ec="14">admin\Skins\UserAndLogin.ascx.cs</location>
            <body hash="31269edc3e7e1e8f34c22152e80a4cb0"><![CDATA[{
                string returnUrl = HttpContext.Current.Request.RawUrl;
                if (returnUrl.IndexOf("?returnurl=", StringComparison.Ordinal) != -1)
                {
                    returnUrl = returnUrl.Substring(0, returnUrl.IndexOf("?returnurl=", StringComparison.Ordinal));
                }
                returnUrl = HttpUtility.UrlEncode(returnUrl);

                return Globals.LoginURL(returnUrl, (Request.QueryString["override"] != null));
            }]]></body>
          </codeblock>
        </property>
        <property name="LoginUrlForClickEvent">
          <declaration><![CDATA[protected string LoginUrlForClickEvent]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="92" sc="4" el="101" ec="5">admin\Skins\UserAndLogin.ascx.cs</location>
            <body hash="e2f666bb98fee52f57ba25ec85533d15"><![CDATA[{
				var url = LoginUrl;

				if (UsePopUp)
				{
					return "return " + UrlUtils.PopUpUrl(HttpUtility.UrlDecode(LoginUrl), this, PortalSettings, true, false, 300, 650);
				}

				return string.Empty;
			}]]></body>
          </codeblock>
        </property>
        <property name="RegisterUrl">
          <declaration><![CDATA[protected string RegisterUrl]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="117" sc="13" el="119" ec="14">admin\Skins\UserAndLogin.ascx.cs</location>
            <body hash="9a00b01feae815be543050fc20df5808"><![CDATA[{
                return Globals.RegisterURL(HttpUtility.UrlEncode(Globals.NavigateURL()), Null.NullString);
            }]]></body>
          </codeblock>
        </property>
        <property name="RegisterUrlForClickEvent">
          <declaration><![CDATA[protected string RegisterUrlForClickEvent]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="125" sc="4" el="132" ec="5">admin\Skins\UserAndLogin.ascx.cs</location>
            <body hash="5ff4587a2ec418c523dc02506aee0935"><![CDATA[{
				if (UsePopUp)
				{
					return "return " + UrlUtils.PopUpUrl(HttpUtility.UrlDecode(RegisterUrl), this, PortalSettings, true, false, 600, 950);
				}

				return string.Empty;
			}]]></body>
          </codeblock>
        </property>
        <property name="UsePopUp">
          <declaration><![CDATA[protected bool UsePopUp]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="107" sc="13" el="111" ec="14">admin\Skins\UserAndLogin.ascx.cs</location>
            <body hash="4ac14a23e98eabbd3d38ac1936392c40"><![CDATA[{
                return PortalSettings.EnablePopUps 
                    && PortalSettings.LoginTabId == Null.NullInteger
                    && !HasSocialAuthenticationEnabled();
            }]]></body>
          </codeblock>
        </property>
        <property name="UserProfileUrl">
          <declaration><![CDATA[protected string UserProfileUrl]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="138" sc="13" el="140" ec="14">admin\Skins\UserAndLogin.ascx.cs</location>
            <body hash="978ebeb8742d1637a4ed9611f248f7bf"><![CDATA[{
                return Globals.UserProfileURL(PortalSettings.UserInfo.UserID); ;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
</root>