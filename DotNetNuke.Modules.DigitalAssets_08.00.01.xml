<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<root file="DotNetNuke.Modules.DigitalAssets.dll" version="08.00.01" generated="2017-06-19 22:57:30Z" generationTime="8.6107765">
  <namespace name="DotNetNuke.Modules.DigitalAssets">
    <class name="ClientDialog">
      <declaration><![CDATA[public static class ClientDialog]]></declaration>
      <documentation>
      </documentation>
      <constructors>
      </constructors>
      <methods>
        <method name="CloseClientDialog">
          <declaration><![CDATA[public static void CloseClientDialog(this Page page, bool refresh)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="30" sc="9" el="33" ec="10">ClientDialog.cs</location>
            <body hash="9b6a5aa682004177b8bf5434421d2c59"><![CDATA[{
            var script = "parent.window.dnnModule.digitalAssets.closeDialog(" + (refresh ? "true" : "false") + ");";
            page.ClientScript.RegisterClientScriptBlock(page.GetType(), "CloseDialogScript", script, true);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="EditFolderMapping">
      <declaration><![CDATA[public class EditFolderMapping : PortalModuleBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private readonly IFolderMappingController _folderMappingController = ComponentBase<IFolderMappingController, FolderMappingController>.Instance;]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="40" sc="9" el="41" ec="57">EditFolderMapping.ascx.cs</location>
            <body hash="75ba624dcc150197c35edda849e63ae7"><![CDATA[private readonly IFolderMappingController _folderMappingController = FolderMappingController.Instance;
        private int _folderMappingID = Null.NullInteger;]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="BindFolderMapping">
          <declaration><![CDATA[private void BindFolderMapping()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="228" sc="9" el="235" ec="10">EditFolderMapping.ascx.cs</location>
            <body hash="5383fd0ec77a3a5d7a669987355d1794"><![CDATA[{
            var folderMapping = _folderMappingController.GetFolderMapping(FolderMappingID);

            NameTextbox.Text = folderMapping.MappingName;

            FolderProvidersComboBox.SelectedValue = folderMapping.FolderProviderType;
            FolderProvidersComboBox.Enabled = false;
        }]]></body>
          </codeblock>
        </method>
        <method name="BindFolderMappingSettings">
          <declaration><![CDATA[private void BindFolderMappingSettings()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="238" sc="9" el="268" ec="10">EditFolderMapping.ascx.cs</location>
            <body hash="8e2d4144ce503dce8a89bb04ab88f309"><![CDATA[{
            string folderProviderType;

            if (FolderMappingID != Null.NullInteger)
            {
                var folderMapping = _folderMappingController.GetFolderMapping(FolderMappingID);
                folderProviderType = folderMapping.FolderProviderType;
            }
            else
            {
                folderProviderType = FolderProvidersComboBox.SelectedValue;
            }

            if (string.IsNullOrEmpty(folderProviderType)) return;
            
            var settingsControlVirtualPath = FolderProvider.Instance(folderProviderType).GetSettingsControlVirtualPath();
            if (String.IsNullOrEmpty(settingsControlVirtualPath)) return;

            var settingsControl = LoadControl(settingsControlVirtualPath);
            if (settingsControl == null || !(settingsControl is FolderMappingSettingsControlBase)) return;

            // This is important to allow settings control to be localizable
            var baseType = settingsControl.GetType().BaseType;
            if (baseType != null)
            {
                settingsControl.ID = baseType.Name;
            }

            ProviderSettingsPlaceHolder.Controls.Clear();
            ProviderSettingsPlaceHolder.Controls.Add(settingsControl);
        }]]></body>
          </codeblock>
        </method>
        <method name="BindFolderProviders">
          <declaration><![CDATA[private void BindFolderProviders()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="217" sc="9" el="225" ec="10">EditFolderMapping.ascx.cs</location>
            <body hash="ad7cb0f7698a0088f5c9dcf922f15cb5"><![CDATA[{
            var defaultProviders = DefaultFolderProviders.GetDefaultProviders();

            foreach (var provider in FolderProvider.GetProviderList().Keys.Where(provider => !defaultProviders.Contains(provider)).OrderBy(provider => provider))
            {
                FolderProvidersComboBox.AddItem(provider, provider);
            }
            FolderProvidersComboBox.InsertItem(0, "", "");
        }]]></body>
          </codeblock>
        </method>
        <method name="cboFolderProviders_SelectedIndexChanged">
          <declaration><![CDATA[protected void cboFolderProviders_SelectedIndexChanged(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="208" sc="9" el="210" ec="10">EditFolderMapping.ascx.cs</location>
            <body hash="1ca35e18d169697fbee86693f9c21602"><![CDATA[{
            BindFolderMappingSettings();
        }]]></body>
          </codeblock>
        </method>
        <method name="cmdUpdate_Click">
          <declaration><![CDATA[private void cmdUpdate_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="123" sc="9" el="205" ec="10">EditFolderMapping.ascx.cs</location>
            <body hash="a6e849e8a65de5bf840a08d488a96be1"><![CDATA[{
            Page.Validate("vgEditFolderMapping");
            
            if (!Page.IsValid) return;

            try
            {
                var folderMapping = new FolderMappingInfo();

                if (FolderMappingID != Null.NullInteger)
                {
                    folderMapping = _folderMappingController.GetFolderMapping(FolderMappingID) ?? new FolderMappingInfo();
                }

                folderMapping.FolderMappingID = FolderMappingID;
                folderMapping.MappingName = NameTextbox.Text;
                folderMapping.FolderProviderType = FolderProvidersComboBox.SelectedValue;
                folderMapping.PortalID = FolderPortalID;

                var originalSettings = folderMapping.FolderMappingSettings;

                try
                {
                    var folderMappingID = FolderMappingID;

                    if (folderMappingID == Null.NullInteger)
                    {
                        folderMappingID = _folderMappingController.AddFolderMapping(folderMapping);
                    }
                    else
                    {
                        _folderMappingController.UpdateFolderMapping(folderMapping);
                    }

                    if (ProviderSettingsPlaceHolder.Controls.Count > 0 && ProviderSettingsPlaceHolder.Controls[0] is FolderMappingSettingsControlBase)
                    {
                        var settingsControl = (FolderMappingSettingsControlBase)ProviderSettingsPlaceHolder.Controls[0];

                        try
                        {
                            settingsControl.UpdateSettings(folderMappingID);
                        }
                        catch
                        {
                            if (FolderMappingID == Null.NullInteger)
                            {
                                _folderMappingController.DeleteFolderMapping(FolderPortalID, folderMappingID);
                            }
                            return;
                        }
                    }

                    if (FolderMappingID != Null.NullInteger)
                    {
                        // Check if some setting has changed
                        var updatedSettings = _folderMappingController.GetFolderMappingSettings(FolderMappingID);

                        if (originalSettings.Keys.Cast<object>().Any(key => updatedSettings.ContainsKey(key) && !originalSettings[key].ToString().Equals(updatedSettings[key].ToString())))
                        {
                            // Re-synchronize folders using the existing mapping. It's important to synchronize them in descending order
                            var folders = FolderManager.Instance.GetFolders(FolderPortalID).Where(f => f.FolderMappingID == FolderMappingID).OrderByDescending(f => f.FolderPath);

                            foreach (var folder in folders)
                            {
                                FolderManager.Instance.Synchronize(FolderPortalID, folder.FolderPath, false, true);
                            }
                        }
                    }
                }
                catch
                {
                    UI.Skins.Skin.AddModuleMessage(this, Localization.GetString("DuplicateMappingName", LocalResourceFile), ModuleMessage.ModuleMessageType.RedError);
                    return;
                }

                if (!Response.IsRequestBeingRedirected) 
                    Response.Redirect(Globals.NavigateURL(TabId, "FolderMappings", "mid=" + ModuleId, "popUp=true"));
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="75" sc="9" el="87" ec="10">EditFolderMapping.ascx.cs</location>
            <body hash="d8406af36d54730e2465e8979bee9e96"><![CDATA[{
            base.OnInit(e);

            UpdateButton.Text = (FolderMappingID == Null.NullInteger) ? Localization.GetString("Add") : Localization.GetString("Update", LocalResourceFile);
            CancelHyperLink.NavigateUrl = EditUrl("FolderMappings");

            var controlTitle = Localization.GetString("ControlTitle", LocalResourceFile);
            var controlTitlePrefix = (FolderMappingID == Null.NullInteger) ? Localization.GetString("New") : Localization.GetString("Edit");

            SyncWarningPlaceHolder.Visible = (FolderMappingID != Null.NullInteger);

            ModuleConfiguration.ModuleControl.ControlTitle = string.Format(controlTitle, controlTitlePrefix);
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="90" sc="9" el="120" ec="10">EditFolderMapping.ascx.cs</location>
            <body hash="5bcf163080a44f348be5d48e5799c63f"><![CDATA[{
            base.OnLoad(e);

            UpdateButton.Click += cmdUpdate_Click;

            try
            {
                BindFolderMappingSettings();

                if (!IsPostBack)
                {
                    BindFolderProviders();

                    if (FolderMappingID != Null.NullInteger)
                    {
                        BindFolderMapping();

                        if (ProviderSettingsPlaceHolder.Controls.Count > 0 && ProviderSettingsPlaceHolder.Controls[0] is FolderMappingSettingsControlBase)
                        {
                            var folderMapping = _folderMappingController.GetFolderMapping(FolderMappingID);
                            var settingsControl = (FolderMappingSettingsControlBase)ProviderSettingsPlaceHolder.Controls[0];
                            settingsControl.LoadSettings(folderMapping.FolderMappingSettings);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_folderMappingController">
          <declaration><![CDATA[private readonly IFolderMappingController _folderMappingController = ComponentBase<IFolderMappingController, FolderMappingController>.Instance;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_folderMappingID">
          <declaration><![CDATA[private int _folderMappingID = Null.NullInteger;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="CancelHyperLink">
          <declaration><![CDATA[protected HyperLink CancelHyperLink;]]></declaration>
          <documentation>
            <summary>
 CancelHyperLink control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="DescriptionLabel">
          <declaration><![CDATA[protected Label DescriptionLabel;]]></declaration>
          <documentation>
            <summary>
 DescriptionLabel control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="FolderProviderLabel">
          <declaration><![CDATA[protected UserControl FolderProviderLabel;]]></declaration>
          <documentation>
            <summary>
 FolderProviderLabel control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="FolderProvidersComboBox">
          <declaration><![CDATA[protected DnnComboBox FolderProvidersComboBox;]]></declaration>
          <documentation>
            <summary>
 FolderProvidersComboBox control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="FolderProviderValidator">
          <declaration><![CDATA[protected RequiredFieldValidator FolderProviderValidator;]]></declaration>
          <documentation>
            <summary>
 FolderProviderValidator control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="NameLabel">
          <declaration><![CDATA[protected UserControl NameLabel;]]></declaration>
          <documentation>
            <summary>
 NameLabel control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="NameTextbox">
          <declaration><![CDATA[protected TextBox NameTextbox;]]></declaration>
          <documentation>
            <summary>
 NameTextbox control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="NameValidator">
          <declaration><![CDATA[protected RequiredFieldValidator NameValidator;]]></declaration>
          <documentation>
            <summary>
 NameValidator control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="ProviderSettingsPlaceHolder">
          <declaration><![CDATA[protected PlaceHolder ProviderSettingsPlaceHolder;]]></declaration>
          <documentation>
            <summary>
 ProviderSettingsPlaceHolder control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="SyncLabel">
          <declaration><![CDATA[protected Label SyncLabel;]]></declaration>
          <documentation>
            <summary>
 SyncLabel control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="SyncWarningPlaceHolder">
          <declaration><![CDATA[protected PlaceHolder SyncWarningPlaceHolder;]]></declaration>
          <documentation>
            <summary>
 SyncWarningPlaceHolder control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="UpdateButton">
          <declaration><![CDATA[protected LinkButton UpdateButton;]]></declaration>
          <documentation>
            <summary>
 UpdateButton control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
      </fields>
      <properties>
        <property name="FolderMappingID">
          <declaration><![CDATA[public int FolderMappingID]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="58" sc="13" el="67" ec="14">EditFolderMapping.ascx.cs</location>
            <body hash="4f92b25532e5a9acbbee642db3c04101"><![CDATA[{
                if (_folderMappingID == Null.NullInteger)
                {
                    if (!string.IsNullOrEmpty(Request.QueryString["ItemID"]))
                    {
                        int.TryParse(Request.QueryString["ItemID"], out _folderMappingID);
                    }
                }
                return _folderMappingID;
            }]]></body>
          </codeblock>
        </property>
        <property name="FolderPortalID">
          <declaration><![CDATA[public int FolderPortalID]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="50" sc="13" el="52" ec="14">EditFolderMapping.ascx.cs</location>
            <body hash="f9fe4563e259c67662058a67f01c17bd"><![CDATA[{
                return IsHostMenu ? Null.NullInteger : PortalId;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="FileFieldsControl">
      <declaration><![CDATA[public class FileFieldsControl : PortalModuleBase, IFieldsControl]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public FileFieldsControl()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="GetFileAttributesUpdated">
          <declaration><![CDATA[private FileAttributes GetFileAttributesUpdated(FileAttributes? attributes)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="54" sc="9" el="61" ec="10">FileFieldsControl.ascx.cs</location>
            <body hash="8e87d9342822125f7b15ab656b664b28"><![CDATA[{
            var result = FileAttributeArchiveCheckBox.Checked ? (attributes | FileAttributes.Archive) : (attributes & ~FileAttributes.Archive);
            result = FileAttributeHiddenCheckBox.Checked ? (result | FileAttributes.Hidden) : (result & ~FileAttributes.Hidden);
            result = FileAttributeReadonlyCheckBox.Checked ? (result | FileAttributes.ReadOnly) : (result & ~FileAttributes.ReadOnly);
            result = FileAttributeSystemCheckBox.Checked ? (result | FileAttributes.System) : (result & ~FileAttributes.System);

            return result.Value;
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="70" sc="9" el="74" ec="10">FileFieldsControl.ascx.cs</location>
            <body hash="a9f8590e740e969113bdea78ecbc34d0"><![CDATA[{
            base.OnInit(e);

            JavaScript.RequestRegistration(CommonJs.DnnPlugins);
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="77" sc="9" el="88" ec="10">FileFieldsControl.ascx.cs</location>
            <body hash="6631e9cc2cceeed36d43688fe71b3522"><![CDATA[{
            base.OnLoad(e);
            if (!Page.IsPostBack)
            {                
                PrepareProperties();
                FileAttributesContainer.Visible = File.SupportsFileAttributes;
                if (File.SupportsFileAttributes)
                {
                    PrepareFileAttributes();
                }                
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="PrepareFileAttributes">
          <declaration><![CDATA[private void PrepareFileAttributes()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="46" sc="9" el="51" ec="10">FileFieldsControl.ascx.cs</location>
            <body hash="548473c1662e74de7fae5ba4d3254ca0"><![CDATA[{
            FileAttributeArchiveCheckBox.Checked = (File.FileAttributes & FileAttributes.Archive) == FileAttributes.Archive;
            FileAttributeHiddenCheckBox.Checked = (File.FileAttributes & FileAttributes.Hidden) == FileAttributes.Hidden;
            FileAttributeReadonlyCheckBox.Checked = (File.FileAttributes & FileAttributes.ReadOnly) == FileAttributes.ReadOnly;
            FileAttributeSystemCheckBox.Checked = (File.FileAttributes & FileAttributes.System) == FileAttributes.System;
        }]]></body>
          </codeblock>
        </method>
        <method name="PrepareProperties">
          <declaration><![CDATA[public virtual void PrepareProperties()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="39" sc="9" el="43" ec="10">FileFieldsControl.ascx.cs</location>
            <body hash="dd4f054edc3e90e7c94dd0475233d6eb"><![CDATA[{
            FileNameInput.Text = Item.ItemName;
            FileNameInvalidCharactersValidator.ValidationExpression = "^([^" + Regex.Escape(Controller.GetInvalidChars()) + "]+)$";
            FileNameInvalidCharactersValidator.ErrorMessage = Controller.GetInvalidCharsErrorText();
        }]]></body>
          </codeblock>
        </method>
        <method name="SaveProperties">
          <declaration><![CDATA[public virtual object SaveProperties()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="126" sc="9" el="135" ec="10">FileFieldsControl.ascx.cs</location>
            <body hash="16f0670203e1b5b395b52fcdf1c3a80a"><![CDATA[{
            Controller.RenameFile(Item.ItemID, FileNameInput.Text);
            if (File.SupportsFileAttributes)
            {
                File = FileManager.Instance.GetFile(Item.ItemID, true);
                FileManager.Instance.SetAttributes(File, GetFileAttributesUpdated(File.FileAttributes));
            }

            return File;
        }]]></body>
          </codeblock>
        </method>
        <method name="SetController">
          <declaration><![CDATA[public void SetController(IDigitalAssetsController damController)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="91" sc="9" el="93" ec="10">FileFieldsControl.ascx.cs</location>
            <body hash="b9d629d7683da54b77ef423b1651fc59"><![CDATA[{
            this.Controller = damController;            
        }]]></body>
          </codeblock>
        </method>
        <method name="SetFileInfo">
          <declaration><![CDATA[public void SetFileInfo(IFileInfo fileInfo)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="121" sc="9" el="123" ec="10">FileFieldsControl.ascx.cs</location>
            <body hash="f756c04e2cfe349c5065fddde09267a5"><![CDATA[{
            File = fileInfo;
        }]]></body>
          </codeblock>
        </method>
        <method name="SetItemViewModel">
          <declaration><![CDATA[public void SetItemViewModel(ItemViewModel itemViewModel)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="101" sc="9" el="103" ec="10">FileFieldsControl.ascx.cs</location>
            <body hash="dc0db4068a3ee3139beee6b34e6053a5"><![CDATA[{
            this.Item = itemViewModel;
        }]]></body>
          </codeblock>
        </method>
        <method name="SetModuleConfiguration">
          <declaration><![CDATA[public void SetModuleConfiguration(ModuleInfo moduleConfiguration)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="96" sc="9" el="98" ec="10">FileFieldsControl.ascx.cs</location>
            <body hash="20aaa9c723096641406cfa2774959faa"><![CDATA[{
            this.ModuleConfiguration = moduleConfiguration;
        }]]></body>
          </codeblock>
        </method>
        <method name="SetPropertiesAvailability">
          <declaration><![CDATA[public virtual void SetPropertiesAvailability(bool availability)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="106" sc="9" el="112" ec="10">FileFieldsControl.ascx.cs</location>
            <body hash="61a4dfd4fd479602aaefd169aaec95c5"><![CDATA[{
            FileNameInput.Enabled = availability;
            FileAttributeArchiveCheckBox.Enabled = availability;
            FileAttributeHiddenCheckBox.Enabled = availability;
            FileAttributeReadonlyCheckBox.Enabled = availability;
            FileAttributeSystemCheckBox.Enabled = availability;
        }]]></body>
          </codeblock>
        </method>
        <method name="SetPropertiesVisibility">
          <declaration><![CDATA[public virtual void SetPropertiesVisibility(bool visibility)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="115" sc="9" el="118" ec="10">FileFieldsControl.ascx.cs</location>
            <body hash="068fd8722c085c34b4e3475494a45fd0"><![CDATA[{
            FileNameInput.Visible = visibility;
            FileAttributesContainer.Visible = visibility;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="FileAttributeArchiveCheckBox">
          <declaration><![CDATA[protected CheckBox FileAttributeArchiveCheckBox;]]></declaration>
          <documentation>
            <summary>
 FileAttributeArchiveCheckBox control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="FileAttributeHiddenCheckBox">
          <declaration><![CDATA[protected CheckBox FileAttributeHiddenCheckBox;]]></declaration>
          <documentation>
            <summary>
 FileAttributeHiddenCheckBox control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="FileAttributeReadonlyCheckBox">
          <declaration><![CDATA[protected CheckBox FileAttributeReadonlyCheckBox;]]></declaration>
          <documentation>
            <summary>
 FileAttributeReadonlyCheckBox control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="FileAttributesContainer">
          <declaration><![CDATA[protected Panel FileAttributesContainer;]]></declaration>
          <documentation>
            <summary>
 FileAttributesContainer control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="FileAttributesLabel">
          <declaration><![CDATA[protected UserControl FileAttributesLabel;]]></declaration>
          <documentation>
            <summary>
 FileAttributesLabel control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="FileAttributeSystemCheckBox">
          <declaration><![CDATA[protected CheckBox FileAttributeSystemCheckBox;]]></declaration>
          <documentation>
            <summary>
 FileAttributeSystemCheckBox control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="FileNameInput">
          <declaration><![CDATA[protected TextBox FileNameInput;]]></declaration>
          <documentation>
            <summary>
 FileNameInput control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="FileNameInvalidCharactersValidator">
          <declaration><![CDATA[protected RegularExpressionValidator FileNameInvalidCharactersValidator;]]></declaration>
          <documentation>
            <summary>
 FileNameInvalidCharactersValidator control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="FileNameLabel">
          <declaration><![CDATA[protected UserControl FileNameLabel;]]></declaration>
          <documentation>
            <summary>
 FileNameLabel control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="FileNameValidator">
          <declaration><![CDATA[protected RequiredFieldValidator FileNameValidator;]]></declaration>
          <documentation>
            <summary>
 FileNameValidator control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="ScopeWrapper">
          <declaration><![CDATA[protected Panel ScopeWrapper;]]></declaration>
          <documentation>
            <summary>
 ScopeWrapper control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
      </fields>
      <properties>
        <property name="Controller">
          <declaration><![CDATA[public IDigitalAssetsController Controller]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="63" sc="54" el="63" ec="58">FileFieldsControl.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="63" sc="59" el="63" ec="71">FileFieldsControl.ascx.cs</location>
            <body hash="5dbe2cc086ebbf5db6b03610487cca4c"><![CDATA[private set]]></body>
          </codeblock>
        </property>
        <property name="File">
          <declaration><![CDATA[protected IFileInfo File]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="67" sc="36" el="67" ec="40">FileFieldsControl.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="67" sc="41" el="67" ec="53">FileFieldsControl.ascx.cs</location>
            <body hash="5dbe2cc086ebbf5db6b03610487cca4c"><![CDATA[private set]]></body>
          </codeblock>
        </property>
        <property name="Item">
          <declaration><![CDATA[public ItemViewModel Item]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="65" sc="37" el="65" ec="41">FileFieldsControl.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="65" sc="42" el="65" ec="54">FileFieldsControl.ascx.cs</location>
            <body hash="5dbe2cc086ebbf5db6b03610487cca4c"><![CDATA[private set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="FileProperties">
      <declaration><![CDATA[public class FileProperties : PortalModuleBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private readonly IDigitalAssetsController controller = new Factory().DigitalAssetsController;]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="48" sc="9" el="48" ec="104">FileProperties.ascx.cs</location>
            <body hash="b9fdde460b6f9cef999180689b33107c"><![CDATA[private readonly IDigitalAssetsController controller = (new Factory()).DigitalAssetsController]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="OnCancelClick">
          <declaration><![CDATA[private void OnCancelClick(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="212" sc="9" el="214" ec="10">FileProperties.ascx.cs</location>
            <body hash="30b95211eda31dbe32815ff17777b1d0"><![CDATA[{
            Page.CloseClientDialog(false);
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="83" sc="9" el="145" ec="10">FileProperties.ascx.cs</location>
            <body hash="490cea04ff561387dc1ef13bb9a446f2"><![CDATA[{
            try
            {
                base.OnInit(e);

                JavaScript.RequestRegistration(CommonJs.DnnPlugins);

                var fileId = Convert.ToInt32(Request.Params["FileId"]);
                file = FileManager.Instance.GetFile(fileId, true);
                fileItem = controller.GetFile(fileId);
                folder = FolderManager.Instance.GetFolder(file.FolderId);

                SaveButton.Click += OnSaveClick;
                CancelButton.Click += OnCancelClick;

                if (FolderPermissionController.CanViewFolder((FolderInfo)folder))
                {
                    var mef = new ExtensionPointManager();
                    var preViewPanelExtension = mef.GetUserControlExtensionPointFirstByPriority("DigitalAssets", "PreviewInfoPanelExtensionPoint");
                    previewPanelControl = Page.LoadControl(preViewPanelExtension.UserControlSrc);
                    PreviewPanelContainer.Controls.Add(previewPanelControl);

                    var fileFieldsExtension = mef.GetUserControlExtensionPointFirstByPriority("DigitalAssets", "FileFieldsControlExtensionPoint");
                    fileFieldsControl = Page.LoadControl(fileFieldsExtension.UserControlSrc);
                    fileFieldsControl.ID = fileFieldsControl.GetType().BaseType.Name;
                    FileFieldsContainer.Controls.Add(fileFieldsControl);

                    PrepareFilePreviewInfoControl();
                    PrepareFileFieldsControl();

                    // Tab Extension Point
                    var tabContentControlsInstances = new List<PropertiesTabContentControl>();
                    foreach (var extension in mef.GetEditPageTabExtensionPoints("DigitalAssets", "FilePropertiesTab"))
                    {
                        if (FolderPermissionController.HasFolderPermission(folder.FolderPermissions, extension.Permission))
                        {
                            var liElement = new HtmlGenericControl("li") { InnerHtml = "<a href=\"#" + extension.EditPageTabId + "\">" + extension.Text + "</a>", };
                            liElement.Attributes.Add("class", extension.CssClass);
                            liElement.Attributes.Add("id", extension.EditPageTabId + "_tab");
                            Tabs.Controls.Add(liElement);

                            var container = new PanelTabExtensionControl { PanelId = extension.EditPageTabId };
                            var control = (PortalModuleBase)Page.LoadControl(extension.UserControlSrc);
                            control.ID = Path.GetFileNameWithoutExtension(extension.UserControlSrc);
                            control.ModuleConfiguration = ModuleConfiguration;
                            var contentControl = control as PropertiesTabContentControl;
                            if (contentControl != null)
                            {
                                contentControl.OnItemUpdated += OnItemUpdated;
                                tabContentControlsInstances.Add(contentControl);
                            }
                            container.Controls.Add(control);
                            TabsPanel.Controls.Add(container);
                        }
                    }
                    tabContentControls = tabContentControlsInstances.ToList();
                }
            }
            catch (Exception ex)
            {
                Exceptions.ProcessModuleLoadException(this, ex);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnItemUpdated">
          <declaration><![CDATA[private void OnItemUpdated()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="179" sc="9" el="185" ec="10">FileProperties.ascx.cs</location>
            <body hash="46ad443838885c8d7f765fefe3df5d96"><![CDATA[{
            SetFilePreviewInfo();
            foreach (var propertiesTabContentControl in tabContentControls)
            {
                propertiesTabContentControl.DataBindItem();
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="148" sc="9" el="176" ec="10">FileProperties.ascx.cs</location>
            <body hash="c5199ab8767d0b81ba80073416d6c19c"><![CDATA[{
            try
            {
                if (!Page.IsPostBack)
                {
                    SetPropertiesAvailability(CanManageFolder);
                }

                if (!FolderPermissionController.CanViewFolder((FolderInfo)folder))
                {
                    SaveButton.Visible = false;
                    SetPropertiesVisibility(false);
                    UI.Skins.Skin.AddModuleMessage(this, LocalizeString("UserCannotReadFileError"), ModuleMessage.ModuleMessageType.RedError);
                }
                else
                {
                    SetFilePreviewInfo();
                    SaveButton.Visible = FolderPermissionController.CanViewFolder((FolderInfo)folder) && FolderPermissionController.CanManageFolder((FolderInfo)folder);
                }
            }
            catch (DotNetNukeException dnnex)
            {
                UI.Skins.Skin.AddModuleMessage(this, dnnex.Message, ModuleMessage.ModuleMessageType.RedError);
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnSaveClick">
          <declaration><![CDATA[private void OnSaveClick(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="188" sc="9" el="209" ec="10">FileProperties.ascx.cs</location>
            <body hash="73aff9293b33a0d6f9fe344c39bfdc54"><![CDATA[{
            if (!Page.IsValid)
            {
                return;
            }

            try
            {
                SaveFileProperties();
                Page.CloseClientDialog(true);
            }
            catch (ThreadAbortException) { }
            catch (DotNetNukeException dnnex)
            {
                UI.Skins.Skin.AddModuleMessage(this, dnnex.Message, ModuleMessage.ModuleMessageType.RedError);
            }
            catch (Exception ex)
            {
                Exceptions.LogException(ex);
                UI.Skins.Skin.AddModuleMessage(this, ex.Message, ModuleMessage.ModuleMessageType.RedError);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="PrepareFileFieldsControl">
          <declaration><![CDATA[private void PrepareFileFieldsControl()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="245" sc="9" el="251" ec="10">FileProperties.ascx.cs</location>
            <body hash="6a24a6b228249cf02867a387f3c6ad37"><![CDATA[{
            var fileFieldsIntance = (FileFieldsControl)fileFieldsControl;
            fileFieldsIntance.SetController(controller);
            fileFieldsIntance.SetItemViewModel(fileItem);
            fileFieldsIntance.SetFileInfo(file);
            fileFieldsIntance.SetModuleConfiguration(ModuleConfiguration);
        }]]></body>
          </codeblock>
        </method>
        <method name="PrepareFilePreviewInfoControl">
          <declaration><![CDATA[private void PrepareFilePreviewInfoControl()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="238" sc="9" el="242" ec="10">FileProperties.ascx.cs</location>
            <body hash="ac7527deb53c5991949fe893ace6c14d"><![CDATA[{
            var previewPanelInstance = (PreviewPanelControl)previewPanelControl;
            previewPanelInstance.SetController(controller);
            previewPanelInstance.SetModuleConfiguration(ModuleConfiguration);
        }]]></body>
          </codeblock>
        </method>
        <method name="SaveFileProperties">
          <declaration><![CDATA[private void SaveFileProperties()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="217" sc="9" el="219" ec="10">FileProperties.ascx.cs</location>
            <body hash="3b1625046afbf9a459e918c1d7deff9c"><![CDATA[{
            file = (IFileInfo)((FileFieldsControl)fileFieldsControl).SaveProperties();
        }]]></body>
          </codeblock>
        </method>
        <method name="SetFilePreviewInfo">
          <declaration><![CDATA[private void SetFilePreviewInfo()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="232" sc="9" el="235" ec="10">FileProperties.ascx.cs</location>
            <body hash="400cafdf52915ab545ee8cee14695466"><![CDATA[{
            var previewPanelInstance = (PreviewPanelControl)previewPanelControl;
            previewPanelInstance.SetPreviewInfo(controller.GetFilePreviewInfo(file, fileItem));            
        }]]></body>
          </codeblock>
        </method>
        <method name="SetPropertiesAvailability">
          <declaration><![CDATA[private void SetPropertiesAvailability(bool availability)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="227" sc="9" el="229" ec="10">FileProperties.ascx.cs</location>
            <body hash="c83a9a0ef416607b06102e54b38a9ab4"><![CDATA[{
            ((FileFieldsControl)fileFieldsControl).SetPropertiesAvailability(availability);
        }]]></body>
          </codeblock>
        </method>
        <method name="SetPropertiesVisibility">
          <declaration><![CDATA[private void SetPropertiesVisibility(bool visibility)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="222" sc="9" el="224" ec="10">FileProperties.ascx.cs</location>
            <body hash="6639f1db420ffbeb2faedfd74a537659"><![CDATA[{
            ((FileFieldsControl)fileFieldsControl).SetPropertiesVisibility(visibility);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="CancelButton">
          <declaration><![CDATA[protected LinkButton CancelButton;]]></declaration>
          <documentation>
            <summary>
 CancelButton control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="controller">
          <declaration><![CDATA[private readonly IDigitalAssetsController controller = new Factory().DigitalAssetsController;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="file">
          <declaration><![CDATA[private IFileInfo file;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="FileFieldsContainer">
          <declaration><![CDATA[protected Panel FileFieldsContainer;]]></declaration>
          <documentation>
            <summary>
 FileFieldsContainer control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="fileFieldsControl">
          <declaration><![CDATA[private Control fileFieldsControl;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="fileItem">
          <declaration><![CDATA[private ItemViewModel fileItem;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="folder">
          <declaration><![CDATA[private IFolderInfo folder;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="FolderContentPanel">
          <declaration><![CDATA[protected Panel FolderContentPanel;]]></declaration>
          <documentation>
            <summary>
 FolderContentPanel control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="GeneralTabLink">
          <declaration><![CDATA[protected HyperLink GeneralTabLink;]]></declaration>
          <documentation>
            <summary>
 GeneralTabLink control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="PreviewPanelContainer">
          <declaration><![CDATA[protected Panel PreviewPanelContainer;]]></declaration>
          <documentation>
            <summary>
 PreviewPanelContainer control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="previewPanelControl">
          <declaration><![CDATA[private Control previewPanelControl;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="SaveButton">
          <declaration><![CDATA[protected LinkButton SaveButton;]]></declaration>
          <documentation>
            <summary>
 SaveButton control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="ScopeWrapper">
          <declaration><![CDATA[protected Panel ScopeWrapper;]]></declaration>
          <documentation>
            <summary>
 ScopeWrapper control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="tabContentControls">
          <declaration><![CDATA[private IEnumerable<PropertiesTabContentControl> tabContentControls;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Tabs">
          <declaration><![CDATA[protected HtmlGenericControl Tabs;]]></declaration>
          <documentation>
            <summary>
 Tabs control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="TabsPanel">
          <declaration><![CDATA[protected Panel TabsPanel;]]></declaration>
          <documentation>
            <summary>
 TabsPanel control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
      </fields>
      <properties>
        <property name="ActiveTab">
          <declaration><![CDATA[protected string ActiveTab]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="76" sc="13" el="78" ec="14">FileProperties.ascx.cs</location>
            <body hash="236202158c06312a2ac01f8306bccb25"><![CDATA[{
                return Request.QueryString["activeTab"];
            }]]></body>
          </codeblock>
        </property>
        <property name="CanManageFolder">
          <declaration><![CDATA[protected bool CanManageFolder]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="68" sc="13" el="70" ec="14">FileProperties.ascx.cs</location>
            <body hash="03b7a3b6104900c9ec41a1e4f4e42900"><![CDATA[{
                return UserInfo.IsSuperUser || FolderPermissionController.CanManageFolder((FolderInfo)folder);
            }]]></body>
          </codeblock>
        </property>
        <property name="DialogTitle">
          <declaration><![CDATA[protected string DialogTitle]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="60" sc="13" el="62" ec="14">FileProperties.ascx.cs</location>
            <body hash="06f648e3a28a246532d86512ed8bb315"><![CDATA[{
                return fileItem.ItemName;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="FolderMappings">
      <declaration><![CDATA[public class FolderMappings : PortalModuleBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private readonly IFolderMappingController _folderMappingController = ComponentBase<IFolderMappingController, FolderMappingController>.Instance;]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="43" sc="9" el="43" ec="111">FolderMappings.ascx.cs</location>
            <body hash="a97772e171e717d9bbceaf12375bf54b"><![CDATA[private readonly IFolderMappingController _folderMappingController = FolderMappingController.Instance]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="MappingsGrid_OnItemCommand">
          <declaration><![CDATA[protected void MappingsGrid_OnItemCommand(object source, GridCommandEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="110" sc="9" el="133" ec="10">FolderMappings.ascx.cs</location>
            <body hash="ff7d0494d37d313c57981c691561fe02"><![CDATA[{
            if (e.CommandName == "Edit")
            {
                Response.Redirect(Globals.NavigateURL(TabId, "EditFolderMapping", "mid=" + ModuleId, "popUp=true", "ItemID=" + e.CommandArgument.ToString()));
            }
            else
            {
                var folderMappingsList = FolderMappingsList;
                var folderMapping = folderMappingsList.Find(f => f.FolderMappingID == int.Parse(e.CommandArgument.ToString()));

                switch (e.CommandName)
                {
                    case "Delete":
                        _folderMappingController.DeleteFolderMapping(folderMapping.PortalID, folderMapping.FolderMappingID);
                        folderMappingsList.Remove(folderMapping);
                        break;
                    default:
                        break;
                }

                FolderMappingsList = folderMappingsList;
                MappingsGrid.Rebind();
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="MappingsGrid_OnItemDataBound">
          <declaration><![CDATA[protected void MappingsGrid_OnItemDataBound(object sender, GridItemEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="136" sc="9" el="155" ec="10">FolderMappings.ascx.cs</location>
            <body hash="6cc0e40fa95c88f9eac5f5b1791d5688"><![CDATA[{
            if (e.Item.ItemType != GridItemType.Item && e.Item.ItemType != GridItemType.AlternatingItem) return;

            var folderMapping = (e.Item.DataItem as FolderMappingInfo);
            if (folderMapping == null || !folderMapping.IsEditable)
            {
                return;
            }

            var cmdEditMapping = (e.Item.FindControl("EditMappingButton") as CommandButton);
            if (cmdEditMapping != null) cmdEditMapping.ToolTip = Localization.GetString("cmdEdit");

            var cmdDeleteMapping = (e.Item.FindControl("DeleteMappingButton") as CommandButton);
            if (cmdDeleteMapping == null) return;

            cmdDeleteMapping.ToolTip = Localization.GetString("cmdDelete");

            var deleteMessage = string.Format(Localization.GetString("DeleteConfirm", LocalResourceFile), folderMapping.MappingName);
            cmdDeleteMapping.OnClientClick = "return confirm(\"" + ClientAPI.GetSafeJSString(deleteMessage) + "\");";
        }]]></body>
          </codeblock>
        </method>
        <method name="MappingsGrid_OnNeedDataSource">
          <declaration><![CDATA[protected void MappingsGrid_OnNeedDataSource(object source, GridNeedDataSourceEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="158" sc="9" el="160" ec="10">FolderMappings.ascx.cs</location>
            <body hash="d35f1d580b34b735fcb2e3745533a2f7"><![CDATA[{
            MappingsGrid.DataSource = FolderMappingsList;
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="92" sc="9" el="107" ec="10">FolderMappings.ascx.cs</location>
            <body hash="b6e05a220a6785823885c78944bf2cbe"><![CDATA[{
            base.OnLoad(e);
            JavaScript.RegisterClientReference(Page, ClientAPI.ClientNamespaceReferences.dnn);
            CancelButton.NavigateUrl = Globals.NavigateURL();
            NewMappingButton.Click += OnNewMappingClick;

            if (!IsPostBack)
            {
                Session["FolderMappingsList"] = null;

                if (ModuleConfiguration.ModuleControl.SupportsPopUps)
                {
                    MappingsGrid.Rebind();
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnNewMappingClick">
          <declaration><![CDATA[protected void OnNewMappingClick(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="163" sc="9" el="172" ec="10">FolderMappings.ascx.cs</location>
            <body hash="32e0c94e7836e22b3ab315434c29cf0f"><![CDATA[{
            try
            {
                Response.Redirect(Globals.NavigateURL(TabId, "EditFolderMapping", "mid=" + ModuleId, "popUp=true"));
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateFolderMappings">
          <declaration><![CDATA[private void UpdateFolderMappings(IList<FolderMappingInfo> folderMappingsList)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="179" sc="9" el="185" ec="10">FolderMappings.ascx.cs</location>
            <body hash="c27a5284e5f0063567c0190d032cb008"><![CDATA[{
            for (var i = 3; i < folderMappingsList.Count; i++)
            {
                folderMappingsList[i].Priority = i + 1;
                _folderMappingController.UpdateFolderMapping(folderMappingsList[i]);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_folderMappingController">
          <declaration><![CDATA[private readonly IFolderMappingController _folderMappingController = ComponentBase<IFolderMappingController, FolderMappingController>.Instance;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="CancelButton">
          <declaration><![CDATA[protected HyperLink CancelButton;]]></declaration>
          <documentation>
            <summary>
 CancelButton control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="DescriptionLabel">
          <declaration><![CDATA[protected Label DescriptionLabel;]]></declaration>
          <documentation>
            <summary>
 DescriptionLabel control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="MappingsGrid">
          <declaration><![CDATA[protected DnnGrid MappingsGrid;]]></declaration>
          <documentation>
            <summary>
 MappingsGrid control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="NewMappingButton">
          <declaration><![CDATA[protected LinkButton NewMappingButton;]]></declaration>
          <documentation>
            <summary>
 NewMappingButton control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="TableHeaderLabel">
          <declaration><![CDATA[protected Label TableHeaderLabel;]]></declaration>
          <documentation>
            <summary>
 TableHeaderLabel control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
      </fields>
      <properties>
        <property name="FolderMappingsList">
          <declaration><![CDATA[protected List<FolderMappingInfo> FolderMappingsList]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="60" sc="13" el="83" ec="14">FolderMappings.ascx.cs</location>
            <body hash="8798bf9799ccdc797f03ef210efa105f"><![CDATA[{
                try
                {
                    var obj = Session["FolderMappingsList"];
                    if (obj == null)
                    {
                        obj = _folderMappingController.GetFolderMappings(FolderPortalID);
                        if (obj != null)
                        {
                            Session["FolderMappingsList"] = obj;
                        }
                        else
                        {
                            obj = new List<FolderMappingInfo>();
                        }
                    }
                    return (List<FolderMappingInfo>)obj;
                }
                catch
                {
                    Session["FolderMappingsList"] = null;
                }
                return new List<FolderMappingInfo>();
            }]]></body>
          </codeblock>
        </property>
        <property name="FolderPortalID">
          <declaration><![CDATA[public int FolderPortalID]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="52" sc="13" el="54" ec="14">FolderMappings.ascx.cs</location>
            <body hash="f9fe4563e259c67662058a67f01c17bd"><![CDATA[{
                return IsHostMenu ? Null.NullInteger : PortalId;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="FolderProperties">
      <declaration><![CDATA[public class FolderProperties : PortalModuleBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private readonly IDigitalAssetsController controller = new Factory().DigitalAssetsController;]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="46" sc="9" el="46" ec="104">FolderProperties.ascx.cs</location>
            <body hash="b9fdde460b6f9cef999180689b33107c"><![CDATA[private readonly IDigitalAssetsController controller = (new Factory()).DigitalAssetsController]]></body>
          </codeblock>
        </constructor>
        <constructor name=".cctor">
          <declaration><![CDATA[static FolderProperties()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="44" sc="9" el="44" ec="124">FolderProperties.ascx.cs</location>
            <body hash="1eba6b3ce449adc6738aa61b682b6b1a"><![CDATA[private static readonly DigitalAssetsSettingsRepository SettingsRepository = new DigitalAssetsSettingsRepository()]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="cmdCopyPerm_Click">
          <declaration><![CDATA[private void cmdCopyPerm_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="214" sc="9" el="225" ec="10">FolderProperties.ascx.cs</location>
            <body hash="798222b1e91745f14029139fb918da9a"><![CDATA[{
            try
            {
                FolderPermissionController.CopyPermissionsToSubfolders(Folder, PermissionsGrid.Permissions);
                UI.Skins.Skin.AddModuleMessage(this, LocalizeString("PermissionsCopied"), ModuleMessage.ModuleMessageType.GreenSuccess);
            }
            catch (Exception ex)
            {
                UI.Skins.Skin.AddModuleMessage(this, LocalizeString("PermissionCopyError"), ModuleMessage.ModuleMessageType.RedError);
                Exceptions.ProcessModuleLoadException(this, ex);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnCancelClick">
          <declaration><![CDATA[private void OnCancelClick(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="209" sc="9" el="211" ec="10">FolderProperties.ascx.cs</location>
            <body hash="30b95211eda31dbe32815ff17777b1d0"><![CDATA[{
            Page.CloseClientDialog(false);
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="80" sc="9" el="146" ec="10">FolderProperties.ascx.cs</location>
            <body hash="b7334e310a4bc1461df6d15b995be623"><![CDATA[{
            try
            {
                base.OnInit(e);

                JavaScript.RequestRegistration(CommonJs.DnnPlugins);

                var folderId = Convert.ToInt32(Request.Params["FolderId"]);
                Folder = FolderManager.Instance.GetFolder(folderId);
                HasFullControl = UserInfo.IsSuperUser || FolderPermissionController.HasFolderPermission(Folder.FolderPermissions, "FULLCONTROL");

                FolderViewModel rootFolder;
                switch (SettingsRepository.GetMode(ModuleId))
                {
                    case DigitalAssestsMode.Group:
                        var groupId = Convert.ToInt32(Request.Params["GroupId"]);
                        rootFolder = controller.GetGroupFolder(groupId, PortalSettings);
                        if (rootFolder == null)
                        {
                            throw new Exception("Invalid group folder");
                        }
                        break;

                    case DigitalAssestsMode.User:
                        rootFolder = controller.GetUserFolder(PortalSettings.UserInfo);
                        break;

                    default:
                        rootFolder = controller.GetRootFolder(ModuleId);
                        break;
                }

                isRootFolder = rootFolder.FolderID == folderId;
                folderViewModel = isRootFolder ? rootFolder : controller.GetFolder(folderId);
                
                // Setup controls
                CancelButton.Click += OnCancelClick;
                SaveButton.Click += OnSaveClick;
                PrepareFolderPreviewInfo();
                cmdCopyPerm.Click += cmdCopyPerm_Click;

                var mef = new ExtensionPointManager();
                var folderFieldsExtension = mef.GetUserControlExtensionPointFirstByPriority("DigitalAssets", "FolderFieldsControlExtensionPoint");
                if (folderFieldsExtension != null)
                {
                    folderFieldsControl = Page.LoadControl(folderFieldsExtension.UserControlSrc);
                    folderFieldsControl.ID = folderFieldsControl.GetType().BaseType.Name;
                    FolderDynamicFieldsContainer.Controls.Add(folderFieldsControl);
                    var fieldsControl = folderFieldsControl as IFieldsControl;
                    if (fieldsControl != null)
                    {
                        fieldsControl.SetController(controller);
                        fieldsControl.SetItemViewModel(new ItemViewModel
                        {
                            ItemID = folderViewModel.FolderID,
                            IsFolder = true,
                            PortalID = folderViewModel.PortalID,
                            ItemName = folderViewModel.FolderName
                        });
                    }
                }
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="228" sc="9" el="257" ec="10">FolderProperties.ascx.cs</location>
            <body hash="e8bb814d10fedff6062763ae72bf5773"><![CDATA[{
            try
            {
                if (!Page.IsPostBack)
                {
                    SetupPermissionGrid();
                    PrepareFolderProperties();
                    SetPropertiesAvailability(FolderPermissionController.CanManageFolder((FolderInfo)Folder));
                }

                if (!FolderPermissionController.CanViewFolder((FolderInfo)Folder))
                {
                    SaveButton.Visible = false;
                    SetPropertiesVisibility(false);
                    UI.Skins.Skin.AddModuleMessage(this, LocalizeString("UserCannotReadFolderError"), ModuleMessage.ModuleMessageType.RedError);
                }
                else
                {
                    SaveButton.Visible = FolderPermissionController.CanViewFolder((FolderInfo)Folder) && FolderPermissionController.CanManageFolder((FolderInfo)Folder);
                }
            }
            catch (DotNetNukeException dnnex)
            {
                UI.Skins.Skin.AddModuleMessage(this, dnnex.Message, ModuleMessage.ModuleMessageType.RedError);
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnSaveClick">
          <declaration><![CDATA[private void OnSaveClick(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="149" sc="9" el="174" ec="10">FolderProperties.ascx.cs</location>
            <body hash="484cc4ed207165f86f7f8c937e3d4ecc"><![CDATA[{
            try
            {
                if (!Page.IsValid)
                {
                    return;
                }

                SaveFolderProperties();

                SavePermissions();
                Page.CloseClientDialog(true);
            }
            catch (ThreadAbortException)
            {                
            }
            catch (DotNetNukeException dnnex)
            {
                UI.Skins.Skin.AddModuleMessage(this, dnnex.Message, ModuleMessage.ModuleMessageType.RedError);
            }
            catch (Exception ex)
            {
                Exceptions.LogException(ex);
                UI.Skins.Skin.AddModuleMessage(this, ex.Message, ModuleMessage.ModuleMessageType.RedError);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="PrepareFolderPreviewInfo">
          <declaration><![CDATA[private void PrepareFolderPreviewInfo()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="297" sc="9" el="303" ec="10">FolderProperties.ascx.cs</location>
            <body hash="461d5ab28ad9a7899133bb20fe55e780"><![CDATA[{
            var folderPreviewPanel = (PreviewPanelControl)FolderInfoPreviewPanel;
            if (folderPreviewPanel != null)
            {
                folderPreviewPanel.SetPreviewInfo(controller.GetFolderPreviewInfo(Folder));
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="PrepareFolderProperties">
          <declaration><![CDATA[private void PrepareFolderProperties()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="282" sc="9" el="294" ec="10">FolderProperties.ascx.cs</location>
            <body hash="5347c14c1ee53e5eab611dde622533b0"><![CDATA[{
            FolderNameInput.Text = folderViewModel.FolderName;
            FolderTypeLiteral.Text = FolderMappingController.Instance.GetFolderMapping(folderViewModel.FolderMappingID).MappingName;

            FolderNameInvalidCharactersValidator.ValidationExpression = "^([^" + Regex.Escape(controller.GetInvalidChars()) + "]+)$";
            FolderNameInvalidCharactersValidator.ErrorMessage = controller.GetInvalidCharsErrorText();

            var fieldsControl = folderFieldsControl as IFieldsControl;
            if (fieldsControl != null)
            {
                fieldsControl.PrepareProperties();
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="SaveFolderProperties">
          <declaration><![CDATA[private void SaveFolderProperties()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="177" sc="9" el="193" ec="10">FolderProperties.ascx.cs</location>
            <body hash="42179eb32e9431f28c74c883699d5420"><![CDATA[{
            if (!CanManageFolder)
            {
                throw new DotNetNukeException(LocalizeString("UserCannotEditFolderError"));
            }

            if (!isRootFolder)
            {
                controller.RenameFolder(folderViewModel.FolderID, FolderNameInput.Text);
            }

            var fieldsControl = folderFieldsControl as IFieldsControl;
            if (fieldsControl != null)
            {
                Folder = (IFolderInfo)fieldsControl.SaveProperties();
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="SavePermissions">
          <declaration><![CDATA[private void SavePermissions()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="196" sc="9" el="206" ec="10">FolderProperties.ascx.cs</location>
            <body hash="a02aefc4b7f48a802039965534e49939"><![CDATA[{
            if (!CanManageFolder)
            {
                throw new DotNetNukeException(LocalizeString("UserCannotChangePermissionsError"));
            }

            Folder = FolderManager.Instance.GetFolder(Folder.FolderID);
            Folder.FolderPermissions.Clear();
            Folder.FolderPermissions.AddRange(PermissionsGrid.Permissions);
            FolderPermissionController.SaveFolderPermissions(Folder);
        }]]></body>
          </codeblock>
        </method>
        <method name="SetPropertiesAvailability">
          <declaration><![CDATA[private void SetPropertiesAvailability(bool availability)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="260" sc="9" el="267" ec="10">FolderProperties.ascx.cs</location>
            <body hash="43be54b52f77ad6b980926cedafb255c"><![CDATA[{
            FolderNameInput.Enabled = (!isRootFolder) && availability;
            var fieldsControl = folderFieldsControl as IFieldsControl;
            if (fieldsControl != null)
            {
                fieldsControl.SetPropertiesAvailability(availability);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="SetPropertiesVisibility">
          <declaration><![CDATA[private void SetPropertiesVisibility(bool visibility)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="270" sc="9" el="279" ec="10">FolderProperties.ascx.cs</location>
            <body hash="12b7314d3da7bd0e714686cbdbb3b82c"><![CDATA[{
            FolderNameInput.Visible = visibility;
            FolderTypeLiteral.Visible = visibility;
            FolderInfoPreviewPanel.Visible = visibility;
            var fieldsControl = folderFieldsControl as IFieldsControl;
            if (fieldsControl != null)
            {
                fieldsControl.SetPropertiesVisibility(visibility);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="SetupPermissionGrid">
          <declaration><![CDATA[private void SetupPermissionGrid()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="306" sc="9" el="309" ec="10">FolderProperties.ascx.cs</location>
            <body hash="f1c67a1eb2931d32770e8d449163fd21"><![CDATA[{
            PermissionsGrid.FolderPath = Folder.FolderPath;
            PermissionsGrid.Visible = HasFullControl && !IsHostPortal;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="CancelButton">
          <declaration><![CDATA[protected LinkButton CancelButton;]]></declaration>
          <documentation>
            <summary>
 CancelButton control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="cmdCopyPerm">
          <declaration><![CDATA[protected LinkButton cmdCopyPerm;]]></declaration>
          <documentation>
            <summary>
 cmdCopyPerm control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="controller">
          <declaration><![CDATA[private readonly IDigitalAssetsController controller = new Factory().DigitalAssetsController;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="copyPermissionRow">
          <declaration><![CDATA[protected HtmlGenericControl copyPermissionRow;]]></declaration>
          <documentation>
            <summary>
 copyPermissionRow control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="FolderContentPanel">
          <declaration><![CDATA[protected Panel FolderContentPanel;]]></declaration>
          <documentation>
            <summary>
 FolderContentPanel control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="FolderDynamicFieldsContainer">
          <declaration><![CDATA[protected Panel FolderDynamicFieldsContainer;]]></declaration>
          <documentation>
            <summary>
 FolderDynamicFieldsContainer control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="folderFieldsControl">
          <declaration><![CDATA[private Control folderFieldsControl;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="FolderInfoPreviewPanel">
          <declaration><![CDATA[protected UserControl FolderInfoPreviewPanel;]]></declaration>
          <documentation>
            <summary>
 FolderInfoPreviewPanel control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="FolderNameInput">
          <declaration><![CDATA[protected TextBox FolderNameInput;]]></declaration>
          <documentation>
            <summary>
 FolderNameInput control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="FolderNameInvalidCharactersValidator">
          <declaration><![CDATA[protected RegularExpressionValidator FolderNameInvalidCharactersValidator;]]></declaration>
          <documentation>
            <summary>
 FolderNameInvalidCharactersValidator control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="FolderNameLabel">
          <declaration><![CDATA[protected UserControl FolderNameLabel;]]></declaration>
          <documentation>
            <summary>
 FolderNameLabel control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="FolderNameValidator">
          <declaration><![CDATA[protected RequiredFieldValidator FolderNameValidator;]]></declaration>
          <documentation>
            <summary>
 FolderNameValidator control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="FolderTypeLabel">
          <declaration><![CDATA[protected UserControl FolderTypeLabel;]]></declaration>
          <documentation>
            <summary>
 FolderTypeLabel control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="FolderTypeLiteral">
          <declaration><![CDATA[protected Label FolderTypeLiteral;]]></declaration>
          <documentation>
            <summary>
 FolderTypeLiteral control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="folderViewModel">
          <declaration><![CDATA[private FolderViewModel folderViewModel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="isRootFolder">
          <declaration><![CDATA[private bool isRootFolder;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblCopyPerm">
          <declaration><![CDATA[protected UserControl lblCopyPerm;]]></declaration>
          <documentation>
            <summary>
 lblCopyPerm control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="PermissionsGrid">
          <declaration><![CDATA[protected FolderPermissionsGrid PermissionsGrid;]]></declaration>
          <documentation>
            <summary>
 PermissionsGrid control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="SaveButton">
          <declaration><![CDATA[protected LinkButton SaveButton;]]></declaration>
          <documentation>
            <summary>
 SaveButton control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="ScopeWrapper">
          <declaration><![CDATA[protected Panel ScopeWrapper;]]></declaration>
          <documentation>
            <summary>
 ScopeWrapper control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="SettingsRepository">
          <declaration><![CDATA[private static readonly DigitalAssetsSettingsRepository SettingsRepository = new DigitalAssetsSettingsRepository();]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="CanManageFolder">
          <declaration><![CDATA[protected bool CanManageFolder]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="56" sc="13" el="58" ec="14">FolderProperties.ascx.cs</location>
            <body hash="12b8d6b9529f8f3970dbf7ac6bc57026"><![CDATA[{
                return UserInfo.IsSuperUser || FolderPermissionController.CanManageFolder((FolderInfo)Folder);
            }]]></body>
          </codeblock>
        </property>
        <property name="DialogTitle">
          <declaration><![CDATA[protected string DialogTitle]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="66" sc="13" el="68" ec="14">FolderProperties.ascx.cs</location>
            <body hash="a343c36078d1bd994e665bb0b01a0605"><![CDATA[{
                return string.Format(LocalizeString("DialogTitle"), folderViewModel.FolderName);
            }]]></body>
          </codeblock>
        </property>
        <property name="Folder">
          <declaration><![CDATA[protected IFolderInfo Folder]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="51" sc="40" el="51" ec="44">FolderProperties.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="51" sc="45" el="51" ec="57">FolderProperties.ascx.cs</location>
            <body hash="5dbe2cc086ebbf5db6b03610487cca4c"><![CDATA[private set]]></body>
          </codeblock>
        </property>
        <property name="HasFullControl">
          <declaration><![CDATA[protected bool HasFullControl]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="61" sc="41" el="61" ec="45">FolderProperties.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="61" sc="46" el="61" ec="58">FolderProperties.ascx.cs</location>
            <body hash="5dbe2cc086ebbf5db6b03610487cca4c"><![CDATA[private set]]></body>
          </codeblock>
        </property>
        <property name="IsHostPortal">
          <declaration><![CDATA[protected bool IsHostPortal]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="74" sc="13" el="76" ec="14">FolderProperties.ascx.cs</location>
            <body hash="b14d3dd2df05220bf26d24d5d4075f57"><![CDATA[{
                return IsHostMenu || controller.GetCurrentPortalId(ModuleId) == Null.NullInteger;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="PreviewFieldsControl">
      <declaration><![CDATA[public class PreviewFieldsControl : UserControl]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public PreviewFieldsControl()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="GenerateFieldsTable">
          <declaration><![CDATA[public void GenerateFieldsTable()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="33" sc="9" el="42" ec="10">PreviewFieldsControl.ascx.cs</location>
            <body hash="27cc713baa19fde8bf928e814ceaac96"><![CDATA[{
            FieldsTable.Rows.Clear();
            foreach (var field in Fields)
            {
                var cellLabel = new TableCell { Text = field.DisplayName + ":", CssClass = "dnnModuleDigitalAssetsPreviewInfoFieldLabel" };
                var cellValue = new TableCell { Text = field.StringValue, CssClass = "dnnModuleDigitalAssetsPreviewInfoFieldValue" };
                var rowField = new TableRow { Cells = { cellLabel, cellValue }, CssClass = "dnnModuleDigitalAssetsPreviewInfoFieldsRow" };
                FieldsTable.Rows.Add(rowField);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="FieldsTable">
          <declaration><![CDATA[protected Table FieldsTable;]]></declaration>
          <documentation>
            <summary>
 FieldsTable control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
      </fields>
      <properties>
        <property name="Fields">
          <declaration><![CDATA[public List<Field> Fields]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="44" sc="37" el="44" ec="41">PreviewFieldsControl.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="44" sc="42" el="44" ec="46">PreviewFieldsControl.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="PreviewPanelControl">
      <declaration><![CDATA[public class PreviewPanelControl : UserControl]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public PreviewPanelControl()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="SetController">
          <declaration><![CDATA[public void SetController(IDigitalAssetsController damController)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="67" sc="9" el="69" ec="10">PreviewPanelControl.ascx.cs</location>
            <body hash="80410fd125e1bfac9613c62fc9508699"><![CDATA[{
            Controller = damController;
        }]]></body>
          </codeblock>
        </method>
        <method name="SetModuleConfiguration">
          <declaration><![CDATA[public void SetModuleConfiguration(ModuleInfo moduleConfiguration)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="72" sc="9" el="74" ec="10">PreviewPanelControl.ascx.cs</location>
            <body hash="3138e1b3c75590e284bc6ca66baf922c"><![CDATA[{
            ModuleConfiguration = moduleConfiguration;
        }]]></body>
          </codeblock>
        </method>
        <method name="SetPreviewInfo">
          <declaration><![CDATA[public void SetPreviewInfo(PreviewInfoViewModel previewInfoViewModel)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="56" sc="9" el="64" ec="10">PreviewPanelControl.ascx.cs</location>
            <body hash="9a3dfce6ff025703641ae343b5434e87"><![CDATA[{
            PreviewInfo = previewInfoViewModel;
            if (FieldsControl != null && PreviewInfo != null)
            {
                var fieldsControl = ((PreviewFieldsControl)FieldsControl);
                fieldsControl.Fields = PreviewInfo.Fields;
                fieldsControl.GenerateFieldsTable();
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="FieldsControl">
          <declaration><![CDATA[protected UserControl FieldsControl;]]></declaration>
          <documentation>
            <summary>
 FieldsControl control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="ScopeWrapper">
          <declaration><![CDATA[protected Panel ScopeWrapper;]]></declaration>
          <documentation>
            <summary>
 ScopeWrapper control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
      </fields>
      <properties>
        <property name="Controller">
          <declaration><![CDATA[protected IDigitalAssetsController Controller]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="49" sc="57" el="49" ec="61">PreviewPanelControl.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="49" sc="62" el="49" ec="74">PreviewPanelControl.ascx.cs</location>
            <body hash="5dbe2cc086ebbf5db6b03610487cca4c"><![CDATA[private set]]></body>
          </codeblock>
        </property>
        <property name="ModuleConfiguration">
          <declaration><![CDATA[protected ModuleInfo ModuleConfiguration]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="51" sc="52" el="51" ec="56">PreviewPanelControl.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="51" sc="57" el="51" ec="69">PreviewPanelControl.ascx.cs</location>
            <body hash="5dbe2cc086ebbf5db6b03610487cca4c"><![CDATA[private set]]></body>
          </codeblock>
        </property>
        <property name="PreviewImageUrl">
          <declaration><![CDATA[protected string PreviewImageUrl]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="42" sc="13" el="44" ec="14">PreviewPanelControl.ascx.cs</location>
            <body hash="153d2a5d2c321b0cdb0402aa553496ad"><![CDATA[{
                return PreviewInfo.PreviewImageUrl;
            }]]></body>
          </codeblock>
        </property>
        <property name="PreviewInfo">
          <declaration><![CDATA[protected PreviewInfoViewModel PreviewInfo]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="47" sc="54" el="47" ec="58">PreviewPanelControl.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="47" sc="59" el="47" ec="71">PreviewPanelControl.ascx.cs</location>
            <body hash="5dbe2cc086ebbf5db6b03610487cca4c"><![CDATA[private set]]></body>
          </codeblock>
        </property>
        <property name="Title">
          <declaration><![CDATA[protected string Title]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="34" sc="13" el="36" ec="14">PreviewPanelControl.ascx.cs</location>
            <body hash="cd9ef8d1239aff687cef7c41143fa6a3"><![CDATA[{
                return PreviewInfo.Title;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="SearchBoxControl">
      <declaration><![CDATA[public class SearchBoxControl : PortalModuleBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public SearchBoxControl()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="33" sc="9" el="35" ec="10">SearchBoxControl.ascx.cs</location>
            <body hash="35dcd1ca9b5424bd063e0123a2554174"><![CDATA[{
            ClientResourceManager.RegisterScript(Page, "~/DesktopModules/DigitalAssets/ClientScripts/dnn.DigitalAssets.SearchBox.js", FileOrder.Js.DefaultPriority + 10);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="Settings">
      <declaration><![CDATA[public class Settings : ModuleSettingsBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public Settings()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
        <constructor name=".cctor">
          <declaration><![CDATA[static Settings()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="38" sc="9" el="38" ec="124">Settings.ascx.cs</location>
            <body hash="1eba6b3ce449adc6738aa61b682b6b1a"><![CDATA[private static readonly DigitalAssetsSettingsRepository SettingsRepository = new DigitalAssetsSettingsRepository()]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="LoadFilterViewSettings">
          <declaration><![CDATA[private void LoadFilterViewSettings()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="134" sc="9" el="150" ec="10">Settings.ascx.cs</location>
            <body hash="69a005aef0ab26953b6980aaa44a1ac2"><![CDATA[{
            //handle upgrades where FilterCondition didn't exist
            SettingsRepository.SetDefaultFilterCondition(ModuleId);

            FilterOptionsRadioButtonsList.SelectedValue = SettingsRepository.GetFilterCondition(ModuleId).ToString();
            SubfolderFilterRadioButtonList.SelectedValue = SettingsRepository.GetSubfolderFilter(ModuleId).ToString();
            
            if (FilterOptionsRadioButtonsList.SelectedValue == FilterCondition.FilterByFolder.ToString())
            {
                var folderId = SettingsRepository.GetRootFolderId(ModuleId);
                if (folderId.HasValue)
                {
                    var folder = FolderManager.Instance.GetFolder(folderId.Value);
                    FilterByFolderDropDownList.SelectedFolder = folder;
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="LoadSettings">
          <declaration><![CDATA[public override void LoadSettings()]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 LoadSettings loads the settings from the Database and displays them
 </summary>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="71" sc="9" el="96" ec="10">Settings.ascx.cs</location>
            <body hash="4bce36a4b6d1829a914d5fbc1b4d3474"><![CDATA[{
            if (Page.IsPostBack)
            {
                return;
            }

            try
            {
                DefaultFolderTypeComboBox.DataSource = FolderMappingController.Instance.GetFolderMappings(PortalId);
                DefaultFolderTypeComboBox.DataBind();

                var defaultFolderTypeId = new DigitalAssetsController().GetDefaultFolderTypeId(ModuleId);
                if (defaultFolderTypeId.HasValue)
                {
                    DefaultFolderTypeComboBox.SelectedValue = defaultFolderTypeId.ToString();
                }

                ModeComboBox.SelectedValue = SettingsRepository.GetMode(ModuleId).ToString();

                LoadFilterViewSettings();
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="61" sc="9" el="63" ec="10">Settings.ascx.cs</location>
            <body hash="bbc3642750c6a7b5b098b7bdd903322b"><![CDATA[{
            ClientResourceManager.RegisterScript(Page, "~/DesktopModules/DigitalAssets/ClientScripts/dnn.DigitalAssets.FilterViewSettings.js", FileOrder.Js.DefaultPriority);
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateFilterViewSettings">
          <declaration><![CDATA[private void UpdateFilterViewSettings()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="153" sc="9" el="170" ec="10">Settings.ascx.cs</location>
            <body hash="697a7b5167c56e7096ec02f5a055058b"><![CDATA[{
            var filterCondition = SelectedDigitalAssestsMode != DigitalAssestsMode.Normal ? FilterCondition.NotSet : SelectedFilterCondition;

            SettingsRepository.SaveFilterCondition(ModuleId, filterCondition);

            switch (filterCondition)
            {
                case FilterCondition.NotSet:
                    SettingsRepository.SaveExcludeSubfolders(ModuleId, SubfolderFilter.IncludeSubfoldersFolderStructure);
                    break;
                case FilterCondition.FilterByFolder:
                    SubfolderFilter subfolderFilter;
                    Enum.TryParse(SubfolderFilterRadioButtonList.SelectedValue, true, out subfolderFilter);
                    SettingsRepository.SaveExcludeSubfolders(ModuleId, subfolderFilter);
                    SettingsRepository.SaveRootFolderId(ModuleId, FilterByFolderDropDownList.SelectedFolder.FolderID);
                    break;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateSettings">
          <declaration><![CDATA[public override void UpdateSettings()]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 UpdateSettings saves the modified settings to the Database
 </summary>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="104" sc="9" el="120" ec="10">Settings.ascx.cs</location>
            <body hash="6c19964912e8b9fdea694e4eae593ee8"><![CDATA[{
            Page.Validate();
            if (!Page.IsValid) return;

            try
            {
                SettingsRepository.SaveDefaultFolderTypeId(ModuleId, Convert.ToInt32(DefaultFolderTypeComboBox.SelectedValue));
                
                SettingsRepository.SaveMode(ModuleId, SelectedDigitalAssestsMode);

                UpdateFilterViewSettings();
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="ValidateFolderIsSelected">
          <declaration><![CDATA[protected void ValidateFolderIsSelected(object source, ServerValidateEventArgs args)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="123" sc="9" el="131" ec="10">Settings.ascx.cs</location>
            <body hash="681fc02d1e5b41be06bbba389215cfaa"><![CDATA[{
            if (SelectedFilterCondition == FilterCondition.FilterByFolder && FilterByFolderDropDownList.SelectedFolder == null)
            {
                args.IsValid = false;
                return;
            }

            args.IsValid = true;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="DefaultFolderTypeComboBox">
          <declaration><![CDATA[protected DnnComboBox DefaultFolderTypeComboBox;]]></declaration>
          <documentation>
            <summary>
 DefaultFolderTypeComboBox control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="DefaultFolderTypeLabel">
          <declaration><![CDATA[protected UserControl DefaultFolderTypeLabel;]]></declaration>
          <documentation>
            <summary>
 DefaultFolderTypeLabel control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="FilterByFolderDropDownList">
          <declaration><![CDATA[protected DnnFolderDropDownList FilterByFolderDropDownList;]]></declaration>
          <documentation>
            <summary>
 FilterByFolderDropDownList control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="FilterOptionsRadioButtonsList">
          <declaration><![CDATA[protected RadioButtonList FilterOptionsRadioButtonsList;]]></declaration>
          <documentation>
            <summary>
 FilterOptionsRadioButtonsList control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="FolderMustBeSelected">
          <declaration><![CDATA[protected CustomValidator FolderMustBeSelected;]]></declaration>
          <documentation>
            <summary>
 FolderMustBeSelected control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="ModeComboBox">
          <declaration><![CDATA[protected DnnComboBox ModeComboBox;]]></declaration>
          <documentation>
            <summary>
 ModeComboBox control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="ModeLabel">
          <declaration><![CDATA[protected UserControl ModeLabel;]]></declaration>
          <documentation>
            <summary>
 ModeLabel control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="SettingsRepository">
          <declaration><![CDATA[private static readonly DigitalAssetsSettingsRepository SettingsRepository = new DigitalAssetsSettingsRepository();]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="SubfolderFilterRadioButtonList">
          <declaration><![CDATA[protected RadioButtonList SubfolderFilterRadioButtonList;]]></declaration>
          <documentation>
            <summary>
 SubfolderFilterRadioButtonList control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="ViewConditionItem">
          <declaration><![CDATA[protected HtmlGenericControl ViewConditionItem;]]></declaration>
          <documentation>
            <summary>
 ViewConditionItem control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="ViewConditionLabel">
          <declaration><![CDATA[protected UserControl ViewConditionLabel;]]></declaration>
          <documentation>
            <summary>
 ViewConditionLabel control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
      </fields>
      <properties>
        <property name="SelectedDigitalAssestsMode">
          <declaration><![CDATA[private DigitalAssestsMode SelectedDigitalAssestsMode]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="43" sc="13" el="47" ec="14">Settings.ascx.cs</location>
            <body hash="d523481918e9c60268d40a57ebe6eccb"><![CDATA[{
                DigitalAssestsMode mode;
                Enum.TryParse(ModeComboBox.SelectedValue, true, out mode);
                return mode;
            }]]></body>
          </codeblock>
        </property>
        <property name="SelectedFilterCondition">
          <declaration><![CDATA[private FilterCondition SelectedFilterCondition]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="53" sc="13" el="57" ec="14">Settings.ascx.cs</location>
            <body hash="58e2fd1d42d27ec4a629029dc7a56628"><![CDATA[{
                FilterCondition filterCondition;
                Enum.TryParse(FilterOptionsRadioButtonsList.SelectedValue, true, out filterCondition);
                return filterCondition;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="View">
      <declaration><![CDATA[public class View : PortalModuleBase, IActionable]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private readonly ExtensionPointManager epm = new ExtensionPointManager();]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="64" sc="9" el="70" ec="10">View.ascx.cs</location>
            <body hash="aeae000e26885b1ca12c461e2b683a4f"><![CDATA[private readonly ExtensionPointManager epm = new ExtensionPointManager();
        private NameValueCollection damState;

        public View()
        {
            controller = new Factory().DigitalAssetsController;
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".cctor">
          <declaration><![CDATA[static View()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="61" sc="9" el="61" ec="124">View.ascx.cs</location>
            <body hash="1eba6b3ce449adc6738aa61b682b6b1a"><![CDATA[private static readonly DigitalAssetsSettingsRepository SettingsRepository = new DigitalAssetsSettingsRepository()]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="CreateNodeFromFolder">
          <declaration><![CDATA[private DnnTreeNode CreateNodeFromFolder(FolderViewModel folder)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="294" sc="9" el="304" ec="10">View.ascx.cs</location>
            <body hash="5c07e6e7234c6a04bb30552172d63e87"><![CDATA[{
            var node = new DnnTreeNode
            {
                Text = folder.FolderName,
                ImageUrl = folder.IconUrl,
                Value = folder.FolderID.ToString(CultureInfo.InvariantCulture),
                Category = folder.FolderMappingID.ToString(CultureInfo.InvariantCulture),
            };
            this.SetExpandable(node, folder.HasChildren && HasViewPermissions(folder.Permissions));
            return node;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetNoControlCharsString">
          <declaration><![CDATA[private static string GetNoControlCharsString(string text)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="185" sc="9" el="193" ec="10">View.ascx.cs</location>
            <body hash="43931d447e434e2dd63d952866d0a309"><![CDATA[{
            var result = new StringBuilder();
            foreach (char c in text.Where(c => !char.IsControl(c)))
            {
                result.Append(c);
            }

            return result.ToString();
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPermissionsForRootFolder">
          <declaration><![CDATA[private IEnumerable<PermissionViewModel> GetPermissionsForRootFolder(IEnumerable<PermissionViewModel> rootPermissions)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="521" sc="9" el="534" ec="10">View.ascx.cs</location>
            <body hash="12a0080ee7fefb14c5a2af6ed14b28f9"><![CDATA[{
            var result = new List<PermissionViewModel>();

            var deniedPermissionsForRoot = new[] { "DELETE", "MANAGE", "COPY" };

            foreach (var permission in rootPermissions)
            {
                result.Add(deniedPermissionsForRoot.Contains(permission.Key)
                               ? new PermissionViewModel { Key = permission.Key, Value = false }
                               : permission);
            }

            return result;
        }]]></body>
          </codeblock>
        </method>
        <method name="GridOnItemCreated">
          <declaration><![CDATA[protected void GridOnItemCreated(object sender, GridItemEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="683" sc="9" el="706" ec="10">View.ascx.cs</location>
            <body hash="ada1ae6d3c09a3185bdddef8375f9ca0"><![CDATA[{
            if (!(e.Item is GridPagerItem)) return;

            var items = new[]
            {
                new RadComboBoxItem { Text = "10", Value = "10" },
                new RadComboBoxItem { Text = "25", Value = "25" },
                new RadComboBoxItem { Text = "50", Value = "50" },
                new RadComboBoxItem { Text = "100", Value = "100" },
                new RadComboBoxItem 
                    { 
                        Text = Localization.GetString("All", LocalResourceFile), 
                        Value = int.MaxValue.ToString(CultureInfo.InvariantCulture) 
                    }
            };

            var dropDown = (RadComboBox)e.Item.FindControl("PageSizeComboBox");
            dropDown.Items.Clear();
            foreach (var item in items)
            {
                item.Attributes.Add("ownerTableViewId", e.Item.OwnerTableView.ClientID);
                dropDown.Items.Add(item);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="HasViewPermissions">
          <declaration><![CDATA[private bool HasViewPermissions(IEnumerable<PermissionViewModel> permissions)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="516" sc="9" el="518" ec="10">View.ascx.cs</location>
            <body hash="eb8b1fc44f7afc1216bfaa20c1cd283a"><![CDATA[{
            return permissions.Where(permission => permission.Key == "BROWSE" || permission.Key == "READ").Any(permission => permission.Value);
        }]]></body>
          </codeblock>
        </method>
        <method name="InitializeEmptySpaceContextMenu">
          <declaration><![CDATA[private void InitializeEmptySpaceContextMenu()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="481" sc="9" el="513" ec="10">View.ascx.cs</location>
            <body hash="96bb9efae6c39d62dd5f72e1f06b98ed"><![CDATA[{
            EmptySpaceMenu.Items.AddRange(new[]
            {
                new DnnMenuItem
                    {
                        Text = Localization.GetString("CreateFolder", LocalResourceFile),
                        Value = "NewFolder",
                        CssClass = "permission_ADD disabledIfFiltered",
                        ImageUrl = IconController.IconURL("FolderCreate", "16x16", "Gray")
                    },    
                new DnnMenuItem
                    {
                        Text = Localization.GetString("RefreshFolder", LocalResourceFile),
                        Value = "RefreshFolder",
                        CssClass = "permission_READ permission_BROWSE",
                        ImageUrl = IconController.IconURL("FolderRefreshSync", "16x16", "Gray")
                    },    
                new DnnMenuItem
                    {
                        Text = Localization.GetString("UploadFiles.Title", LocalResourceFile),
                        Value = "UploadFiles",
                        CssClass = "permission_ADD",
                        ImageUrl = IconController.IconURL("UploadFiles", "16x16", "Gray")
                    },  
                new DnnMenuItem
                    {
                        Text = Localization.GetString("ViewFolderProperties", LocalResourceFile),
                        Value = "Properties",
                        CssClass = "permission_READ",
                        ImageUrl = IconController.IconURL("ViewProperties", "16x16", "CtxtMn")
                    },
            });
        }]]></body>
          </codeblock>
        </method>
        <method name="InitializeFolderType">
          <declaration><![CDATA[private void InitializeFolderType()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="196" sc="9" el="199" ec="10">View.ascx.cs</location>
            <body hash="03b4f24c3160ea46326138629824d36b"><![CDATA[{
            FolderTypeComboBox.DataSource = controller.GetFolderMappings(ModuleId);
            FolderTypeComboBox.DataBind();
        }]]></body>
          </codeblock>
        </method>
        <method name="InitializeGrid">
          <declaration><![CDATA[private void InitializeGrid()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="202" sc="9" el="226" ec="10">View.ascx.cs</location>
            <body hash="3ee371edf6daea38c5c56d61152dc12a"><![CDATA[{
            Grid.MasterTableView.PagerStyle.PrevPageToolTip = LocalizeString("PagerPreviousPage.ToolTip");
            Grid.MasterTableView.PagerStyle.NextPageToolTip = LocalizeString("PagerNextPage.ToolTip");
            Grid.MasterTableView.PagerStyle.FirstPageToolTip = LocalizeString("PagerFirstPage.ToolTip");
            Grid.MasterTableView.PagerStyle.LastPageToolTip = LocalizeString("PagerLastPage.ToolTip");
            Grid.MasterTableView.PagerStyle.PageSizeLabelText = LocalizeString("PagerPageSize.Text");

            foreach (var columnExtension in epm.GetGridColumnExtensionPoints("DigitalAssets", "GridColumns", Filter))
            {
                var column = new DnnGridBoundColumn
                                    {
                                        HeaderText = columnExtension.HeaderText,
                                        DataField = columnExtension.DataField,
                                        UniqueName = columnExtension.UniqueName,
                                        ReadOnly = columnExtension.ReadOnly,
                                        Reorderable = columnExtension.Reorderable,
                                        SortExpression = columnExtension.SortExpression,
                                        HeaderTooltip = columnExtension.HeaderText
                                    };
                column.HeaderStyle.Width = columnExtension.HeaderStyleWidth;

                var index = Math.Min(columnExtension.ColumnAt, Grid.Columns.Count - 1);
                Grid.Columns.AddAt(index, column);
            }            
        }]]></body>
          </codeblock>
        </method>
        <method name="InitializeGridContextMenu">
          <declaration><![CDATA[private void InitializeGridContextMenu()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="399" sc="9" el="478" ec="10">View.ascx.cs</location>
            <body hash="1b8b77b51ad51cefb5496852ea79c756"><![CDATA[{
            GridMenu.Items.AddRange(new[]
                {
                    new DnnMenuItem
                    {
                        Text = Localization.GetString("Download", LocalResourceFile),
                        Value = "Download",
                        CssClass = "permission_READ",
                        ImageUrl = IconController.IconURL("FileDownload", "16x16", "Black")
                    },    
                new DnnMenuItem
                    {
                        Text = Localization.GetString("Rename", LocalResourceFile),
                        Value = "Rename",
                        CssClass = "permission_MANAGE singleItem",
                        ImageUrl = IconController.IconURL("FileRename", "16x16", "Black")
                    },    
                new DnnMenuItem
                    {
                        Text = Localization.GetString("Copy", LocalResourceFile),
                        Value = "Copy",
                        CssClass = "permission_COPY onlyFiles",
                        ImageUrl = IconController.IconURL("FileCopy", "16x16", "Black")
                    },  
                new DnnMenuItem
                    {
                        Text = Localization.GetString("Move", LocalResourceFile),
                        Value = "Move",
                        CssClass = "permission_COPY disabledIfFiltered",
                        ImageUrl = IconController.IconURL("FileMove", "16x16", "Black")
                    }, 
                new DnnMenuItem
                    {
                        Text = Localization.GetString("Delete", LocalResourceFile),
                        Value = "Delete",
                        CssClass = "permission_DELETE",
                        ImageUrl = IconController.IconURL("FileDelete", "16x16", "Black")
                    }, 
                new DnnMenuItem
                    {
                        Text = Localization.GetString("Unlink", LocalResourceFile),
                        Value = "Unlink",
                        CssClass = "permission_DELETE singleItem onlyFolders",
                        ImageUrl = IconController.IconURL("UnLink", "16x16", "Black")
                    }, 
                new DnnMenuItem
                    {
                        Text = Localization.GetString("UnzipFile", LocalResourceFile),
                        Value = "UnzipFile",
                        CssClass = "permission_MANAGE singleItem onlyFiles",
                        ImageUrl = IconController.IconURL("Unzip", "16x16", "Gray")
                    },
                new DnnMenuItem
                    {
                        Text = Localization.GetString("ViewProperties", LocalResourceFile),
                        Value = "Properties",
                        CssClass = "permission_READ singleItem",
                        ImageUrl = IconController.IconURL("ViewProperties", "16x16", "CtxtMn")
                    }, 
                new DnnMenuItem
                    {
                        Text = Localization.GetString("GetUrl", LocalResourceFile),
                        Value = "GetUrl",
                        CssClass = "permission_READ singleItem onlyFiles",
                        ImageUrl = IconController.IconURL("FileLink", "16x16", "Black")
                    }
                });

            // Dnn Menu Item Extension Point
            foreach (var menuItem in epm.GetMenuItemExtensionPoints("DigitalAssets", "GridContextMenu", Filter))
            {
                GridMenu.Items.Add(new DnnMenuItem
                                       {
                                           Text = menuItem.Text,
                                           Value = menuItem.Value,
                                           CssClass = menuItem.CssClass,
                                           ImageUrl = menuItem.Icon
                                       });
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="InitializeSearchBox">
          <declaration><![CDATA[private void InitializeSearchBox()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="389" sc="9" el="396" ec="10">View.ascx.cs</location>
            <body hash="9553c5c7468aed7ca5f0df6d1d18db92"><![CDATA[{
            var extension = epm.GetUserControlExtensionPointFirstByPriority("DigitalAssets", "SearchBoxExtensionPoint");
            var searchControl = (PortalModuleBase)Page.LoadControl(extension.UserControlSrc);
            searchControl.ModuleConfiguration = ModuleConfiguration;

            searchControl.ID = searchControl.GetType().BaseType.Name;
            SearchBoxPanel.Controls.Add(searchControl);
        }]]></body>
          </codeblock>
        </method>
        <method name="InitializeTreeViewContextMenu">
          <declaration><![CDATA[private void InitializeTreeViewContextMenu()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="321" sc="9" el="386" ec="10">View.ascx.cs</location>
            <body hash="2fae67e8af9e3eabd87ac4a5facb327b"><![CDATA[{
            MainContextMenu.Items.AddRange(new[]
            {
                new DnnMenuItem
                    {
                        Text = Localization.GetString("CreateFolder", LocalResourceFile),
                        Value = "NewFolder",
                        CssClass = "permission_ADD disabledIfFiltered",
                        ImageUrl = IconController.IconURL("FolderCreate", "16x16", "Gray")
                    },    
                new DnnMenuItem
                    {
                        Text = Localization.GetString("RefreshFolder", LocalResourceFile),
                        Value = "RefreshFolder",
                        CssClass = "permission_BROWSE permission_READ",
                        ImageUrl = IconController.IconURL("FolderRefreshSync", "16x16", "Gray")
                    },    
                new DnnMenuItem
                    {
                        Text = Localization.GetString("RenameFolder", LocalResourceFile),
                        Value = "RenameFolder",
                        CssClass = "permission_MANAGE",
                        ImageUrl = IconController.IconURL("FileRename", "16x16", "Black")
                    },  
                new DnnMenuItem
                    {
                        Text = Localization.GetString("Move", LocalResourceFile),
                        Value = "Move",
                        CssClass = "permission_COPY",
                        ImageUrl = IconController.IconURL("FileMove", "16x16", "Black")
                    },
                new DnnMenuItem
                    {
                        Text = Localization.GetString("DeleteFolder", LocalResourceFile),
                        Value = "DeleteFolder",
                        CssClass = "permission_DELETE",
                        ImageUrl = IconController.IconURL("FileDelete", "16x16", "Black")
                    },
                new DnnMenuItem
                    {
                        Text = Localization.GetString("UnlinkFolder", LocalResourceFile),
                        Value = "UnlinkFolder",
                        CssClass = "permission_DELETE",
                        ImageUrl = IconController.IconURL("UnLink", "16x16", "Black")
                    },
                new DnnMenuItem
                    {
                        Text = Localization.GetString("ViewFolderProperties", LocalResourceFile),
                        Value = "Properties",
                        CssClass = "permission_READ",
                        ImageUrl = IconController.IconURL("ViewProperties", "16x16", "CtxtMn")
                    },
            });
            
            // Dnn Menu Item Extension Point
            foreach (var menuItem in epm.GetMenuItemExtensionPoints("DigitalAssets", "TreeViewContextMenu", Filter))
            {
                MainContextMenu.Items.Add(new DnnMenuItem
                {
                    Text = menuItem.Text,
                    Value = menuItem.Value,
                    CssClass = menuItem.CssClass,
                    ImageUrl = menuItem.Icon
                });
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="InitializeTreeViews">
          <declaration><![CDATA[private void InitializeTreeViews(string initialPath)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="251" sc="9" el="291" ec="10">View.ascx.cs</location>
            <body hash="a31cc334c9ec1a3aa75557ad98bdb1a1"><![CDATA[{
            var rootFolder = RootFolderViewModel;

            var rootNode = this.CreateNodeFromFolder(rootFolder);
            rootNode.Selected = true;
            rootNode.Expanded = true;

            var folderId = rootFolder.FolderID;
            var nextNode = rootNode;
            foreach (var folderName in initialPath.Split('/'))
            {
                LoadSubfolders(nextNode, folderId, folderName, out nextNode, out folderId);
                if (nextNode == null)
                {
                    // The requested folder does not exist or the user does not have permissions
                    break;
                }
            }

            if (nextNode != null)
            {
                nextNode.Expanded = false;
                nextNode.Selected = true;
                rootNode.Selected = false;
            }

            if (rootNode.Nodes.Count == 0)
            {
                this.SetExpandable(rootNode, false);                
            }
            
            SetupNodeAttributes(rootNode, GetPermissionsForRootFolder(rootFolder.Permissions), rootFolder);

			FolderTreeView.Nodes.Clear();
			DestinationTreeView.Nodes.Clear();

            FolderTreeView.Nodes.Add(rootNode);
            DestinationTreeView.Nodes.Add(rootNode.Clone());

            InitializeTreeViewContextMenu();
        }]]></body>
          </codeblock>
        </method>
        <method name="LoadSubfolders">
          <declaration><![CDATA[private void LoadSubfolders(DnnTreeNode node, int folderId, string nextFolderName, out DnnTreeNode nextNode, out int nextFolderId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="229" sc="9" el="248" ec="10">View.ascx.cs</location>
            <body hash="13cca4a0677924f689e268d8a0095459"><![CDATA[{
            nextNode = null;
            nextFolderId = 0;
            var folders = controller.GetFolders(ModuleId, folderId);
            foreach (var folder in folders)
            {
                var hasViewPermissions = HasViewPermissions(folder.Permissions);
                var newNode = this.CreateNodeFromFolder(folder);
                SetupNodeAttributes(newNode, folder.Permissions, folder);

                node.Nodes.Add(newNode);

                if (hasViewPermissions && folder.FolderName.Equals(nextFolderName, StringComparison.InvariantCultureIgnoreCase))
                {
                    newNode.Expanded = true;
                    nextNode = newNode;
                    nextFolderId = folder.FolderID;                    
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="621" sc="9" el="657" ec="10">View.ascx.cs</location>
            <body hash="acc545c060c47b6e655e9f3c3c978286"><![CDATA[{
            try
            {
                base.OnInit(e);

                fileUpload.ModuleId = ModuleId;
                fileUpload.Options.Parameters.Add("isHostPortal", IsHostPortal ? "true" : "false");

                ServicesFramework.Instance.RequestAjaxScriptSupport();
                ServicesFramework.Instance.RequestAjaxAntiForgerySupport();
                JavaScript.RequestRegistration(CommonJs.DnnPlugins);

                var popupFilePath = HttpContext.Current.IsDebuggingEnabled
                                   ? "~/js/Debug/dnn.modalpopup.js"
                                   : "~/js/dnn.modalpopup.js";
                ClientResourceManager.RegisterScript(Page, popupFilePath, FileOrder.Js.DnnModalPopup);
                ClientResourceManager.RegisterScript(Page, "~/DesktopModules/DigitalAssets/ClientScripts/dnn.DigitalAssetsController.js", FileOrder.Js.DefaultPriority);

                var i = 1;
                foreach (var script in epm.GetScriptItemExtensionPoints("DigitalAssets"))
                {
                    ClientResourceManager.RegisterScript(Page, script.ScriptName, FileOrder.Js.DefaultPriority + i++);
                }

                ClientResourceManager.RegisterScript(Page, "~/DesktopModules/DigitalAssets/ClientScripts/dnn.DigitalAssets.js", FileOrder.Js.DefaultPriority + i);

                InitializeGrid();
                FolderTypeComboBox.ItemDataBound += OnItemDataBoundFolderTypeComboBox;

                MainToolBar.ModuleContext = ModuleContext;
                SelectionToolBar.ModuleContext = ModuleContext;
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnItemDataBoundFolderTypeComboBox">
          <declaration><![CDATA[private void OnItemDataBoundFolderTypeComboBox(object sender, RadComboBoxItemEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="537" sc="9" el="540" ec="10">View.ascx.cs</location>
            <body hash="4bde87428e89e9210763d04ee2e48470"><![CDATA[{
            var dataSource = (FolderMappingViewModel)e.Item.DataItem;
            e.Item.Attributes["SupportsMappedPaths"] = FolderProvider.GetProviderList()[dataSource.FolderTypeName].SupportsMappedPaths.ToString().ToLowerInvariant();
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="546" sc="9" el="618" ec="10">View.ascx.cs</location>
            <body hash="8681dce4a6f9d17132559b200447adcc"><![CDATA[{
            try
            {
                base.OnLoad(e);

                //if (IsPostBack) return;

                switch (SettingsRepository.GetMode(ModuleId))
                {
                    case DigitalAssestsMode.Group:
                        int groupId;
                        if (string.IsNullOrEmpty(Request["groupId"]) || !int.TryParse(Request["groupId"], out groupId))
                        {
                            Skin.AddModuleMessage(this, Localization.GetString("InvalidGroup.Error", LocalResourceFile), ModuleMessage.ModuleMessageType.RedError);
                            return;
                        }

                        var groupFolder = controller.GetGroupFolder(groupId, PortalSettings);
                        if (groupFolder == null)
                        {
                            Skin.AddModuleMessage(this, Localization.GetString("InvalidGroup.Error", LocalResourceFile), ModuleMessage.ModuleMessageType.RedError);
                            return;
                        }

                        this.RootFolderViewModel = groupFolder;
                        break;

                    case DigitalAssestsMode.User:
                        if (PortalSettings.UserId == Null.NullInteger)
                        {
                            Skin.AddModuleMessage(this, Localization.GetString("InvalidUser.Error", LocalResourceFile), ModuleMessage.ModuleMessageType.RedError);
                            return;
                        }
                  
                        this.RootFolderViewModel = this.controller.GetUserFolder(this.PortalSettings.UserInfo);     
                        break;

                    default:
                        //handle upgrades where FilterCondition didn't exist
                        SettingsRepository.SetDefaultFilterCondition(ModuleId);
                        this.RootFolderViewModel = this.controller.GetRootFolder(ModuleId);
                        break;
                }
                
                var initialPath = "";
                int folderId;
                if (int.TryParse(Request["folderId"] ?? DAMState["folderId"], out folderId))
                {
                    var folder = FolderManager.Instance.GetFolder(folderId);
                    if (folder != null && folder.FolderPath.StartsWith(RootFolderViewModel.FolderPath))
                    {
                        initialPath = PathUtils.Instance.RemoveTrailingSlash(folder.FolderPath.Substring(RootFolderViewModel.FolderPath.Length));
                    }
                }

                PageSize = Request["pageSize"] ?? DAMState["pageSize"] ?? "10";
                ActiveView = Request["view"] ?? DAMState["view"] ?? "gridview";

                Page.DataBind();
                InitializeTreeViews(initialPath);
                InitializeSearchBox();
                InitializeFolderType();
                InitializeGridContextMenu();
                InitializeEmptySpaceContextMenu();

                FolderNameRegExValidator.ErrorMessage = controller.GetInvalidCharsErrorText();
                FolderNameRegExValidator.ValidationExpression = "^([^" + Regex.Escape(controller.GetInvalidChars()) + "]+)$";
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="SetExpandable">
          <declaration><![CDATA[private void SetExpandable(DnnTreeNode node, bool expandable)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="307" sc="9" el="309" ec="10">View.ascx.cs</location>
            <body hash="32326eb03a232f084327ab772f03acef"><![CDATA[{
            node.ExpandMode = expandable ? TreeNodeExpandMode.WebService : TreeNodeExpandMode.ClientSide;
        }]]></body>
          </codeblock>
        </method>
        <method name="SetupNodeAttributes">
          <declaration><![CDATA[private void SetupNodeAttributes(DnnTreeNode node, IEnumerable<PermissionViewModel> permissions, FolderViewModel folder)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="312" sc="9" el="318" ec="10">View.ascx.cs</location>
            <body hash="9daaa220c01d2147d6a642d55b9b8442"><![CDATA[{
            node.Attributes.Add("permissions", permissions.ToJson());
            foreach (var attribute in folder.Attributes)
            {
                node.Attributes.Add(attribute.Key, attribute.Value.ToJson());
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="controller">
          <declaration><![CDATA[private readonly IDigitalAssetsController controller;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="damState">
          <declaration><![CDATA[private NameValueCollection damState;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="DestinationTreeView">
          <declaration><![CDATA[protected DnnTreeView DestinationTreeView;]]></declaration>
          <documentation>
            <summary>
 DestinationTreeView control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="EmptySpaceMenu">
          <declaration><![CDATA[protected DnnContextMenu EmptySpaceMenu;]]></declaration>
          <documentation>
            <summary>
 EmptySpaceMenu control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="epm">
          <declaration><![CDATA[private readonly ExtensionPointManager epm = new ExtensionPointManager();]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="fileUpload">
          <declaration><![CDATA[protected DnnFileUpload fileUpload;]]></declaration>
          <documentation>
            <summary>
 fileUpload control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="FolderListView">
          <declaration><![CDATA[protected DnnListView FolderListView;]]></declaration>
          <documentation>
            <summary>
 FolderListView control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="FolderNameLabel">
          <declaration><![CDATA[protected UserControl FolderNameLabel;]]></declaration>
          <documentation>
            <summary>
 FolderNameLabel control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="FolderNameRegExValidator">
          <declaration><![CDATA[protected RegularExpressionValidator FolderNameRegExValidator;]]></declaration>
          <documentation>
            <summary>
 FolderNameRegExValidator control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="FolderNameRequiredValidator">
          <declaration><![CDATA[protected RequiredFieldValidator FolderNameRequiredValidator;]]></declaration>
          <documentation>
            <summary>
 FolderNameRequiredValidator control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="FolderNameTextBox">
          <declaration><![CDATA[protected TextBox FolderNameTextBox;]]></declaration>
          <documentation>
            <summary>
 FolderNameTextBox control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="FolderTreeView">
          <declaration><![CDATA[protected DnnTreeView FolderTreeView;]]></declaration>
          <documentation>
            <summary>
 FolderTreeView control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="FolderTypeComboBox">
          <declaration><![CDATA[protected DnnComboBox FolderTypeComboBox;]]></declaration>
          <documentation>
            <summary>
 FolderTypeComboBox control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="FolderTypeLabel">
          <declaration><![CDATA[protected UserControl FolderTypeLabel;]]></declaration>
          <documentation>
            <summary>
 FolderTypeLabel control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="Grid">
          <declaration><![CDATA[protected DnnGrid Grid;]]></declaration>
          <documentation>
            <summary>
 Grid control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="GridMenu">
          <declaration><![CDATA[protected DnnContextMenu GridMenu;]]></declaration>
          <documentation>
            <summary>
 GridMenu control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="LeftPaneContents">
          <declaration><![CDATA[protected Panel LeftPaneContents;]]></declaration>
          <documentation>
            <summary>
 LeftPaneContents control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="LeftPaneTabsControl">
          <declaration><![CDATA[protected HtmlGenericControl LeftPaneTabsControl;]]></declaration>
          <documentation>
            <summary>
 LeftPaneTabsControl control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="MainContextMenu">
          <declaration><![CDATA[protected DnnTreeViewContextMenu MainContextMenu;]]></declaration>
          <documentation>
            <summary>
 MainContextMenu control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="MainToolBar">
          <declaration><![CDATA[protected ToolBarButtonExtensionControl MainToolBar;]]></declaration>
          <documentation>
            <summary>
 MainToolBar control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="MappedPathLabel">
          <declaration><![CDATA[protected UserControl MappedPathLabel;]]></declaration>
          <documentation>
            <summary>
 MappedPathLabel control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="MappedPathRegExValidator">
          <declaration><![CDATA[protected RegularExpressionValidator MappedPathRegExValidator;]]></declaration>
          <documentation>
            <summary>
 MappedPathRegExValidator control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="MappedPathTextBox">
          <declaration><![CDATA[protected TextBox MappedPathTextBox;]]></declaration>
          <documentation>
            <summary>
 MappedPathTextBox control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="ParentFolderLabel">
          <declaration><![CDATA[protected UserControl ParentFolderLabel;]]></declaration>
          <documentation>
            <summary>
 ParentFolderLabel control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="ScopeWrapper">
          <declaration><![CDATA[protected Panel ScopeWrapper;]]></declaration>
          <documentation>
            <summary>
 ScopeWrapper control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="SearchBoxPanel">
          <declaration><![CDATA[protected Panel SearchBoxPanel;]]></declaration>
          <documentation>
            <summary>
 SearchBoxPanel control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="SelectionToolBar">
          <declaration><![CDATA[protected ToolBarButtonExtensionControl SelectionToolBar;]]></declaration>
          <documentation>
            <summary>
 SelectionToolBar control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="SettingsRepository">
          <declaration><![CDATA[private static readonly DigitalAssetsSettingsRepository SettingsRepository = new DigitalAssetsSettingsRepository();]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="ActiveView">
          <declaration><![CDATA[protected string ActiveView]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="179" sc="39" el="179" ec="43">View.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="179" sc="44" el="179" ec="56">View.ascx.cs</location>
            <body hash="5dbe2cc086ebbf5db6b03610487cca4c"><![CDATA[private set]]></body>
          </codeblock>
        </property>
        <property name="DAMState">
          <declaration><![CDATA[private NameValueCollection DAMState]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="85" sc="13" el="93" ec="14">View.ascx.cs</location>
            <body hash="db668e1db90d240ff555a324d88e8aca"><![CDATA[{
                if (damState == null)
                {
                    var stateCookie = Request.Cookies["damState-" + UserId];
                    damState = HttpUtility.ParseQueryString(Uri.UnescapeDataString(stateCookie != null ? stateCookie.Value : ""));
                }

                return damState;
            }]]></body>
          </codeblock>
        </property>
        <property name="DefaultFolderProviderValues">
          <declaration><![CDATA[protected IEnumerable<string> DefaultFolderProviderValues]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="155" sc="13" el="157" ec="14">View.ascx.cs</location>
            <body hash="3064156220bb05b319edeaa3a3d0ba26"><![CDATA[{
                return this.controller.GetDefaultFolderProviderValues(this.ModuleId).Select(f => f.FolderMappingID.ToString(CultureInfo.InvariantCulture)).ToList();
            }]]></body>
          </codeblock>
        </property>
        <property name="DefaultFolderTypeId">
          <declaration><![CDATA[protected string DefaultFolderTypeId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="163" sc="13" el="166" ec="14">View.ascx.cs</location>
            <body hash="f06e92f39d9f8374d6d4a544a3212cbd"><![CDATA[{
                var defaultFolderTypeId = controller.GetDefaultFolderTypeId(ModuleId);
                return defaultFolderTypeId.HasValue ? defaultFolderTypeId.ToString() : "";
            }]]></body>
          </codeblock>
        </property>
        <property name="Filter">
          <declaration><![CDATA[private IExtensionPointFilter Filter]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="75" sc="13" el="79" ec="14">View.ascx.cs</location>
            <body hash="0aa3f9a415cc73b698ee6cf320bdd441"><![CDATA[{
                return new CompositeFilter()
                    .And(new FilterByHostMenu(IsHostPortal))
                    .And(new FilterByUnauthenticated(HttpContext.Current.Request.IsAuthenticated));
            }]]></body>
          </codeblock>
        </property>
        <property name="FilteredContent">
          <declaration><![CDATA[protected bool FilteredContent]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="172" sc="13" el="174" ec="14">View.ascx.cs</location>
            <body hash="1d8fd4a6cd7e9a8323b76071760ef796"><![CDATA[{
                return SettingsRepository.GetSubfolderFilter(ModuleId) != SubfolderFilter.IncludeSubfoldersFolderStructure;
            }]]></body>
          </codeblock>
        </property>
        <property name="InitialTab">
          <declaration><![CDATA[protected int InitialTab]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="101" sc="13" el="103" ec="14">View.ascx.cs</location>
            <body hash="41828efee4e86a6324c5b914e0012dec"><![CDATA[{
                return controller.GetInitialTab(Request.Params, DAMState);
            }]]></body>
          </codeblock>
        </property>
        <property name="InvalidCharacters">
          <declaration><![CDATA[protected string InvalidCharacters]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="117" sc="13" el="119" ec="14">View.ascx.cs</location>
            <body hash="88b310410bc9079a19497da9ca5a2a57"><![CDATA[{
                return GetNoControlCharsString(controller.GetInvalidChars());
            }]]></body>
          </codeblock>
        </property>
        <property name="InvalidCharactersErrorText">
          <declaration><![CDATA[protected string InvalidCharactersErrorText]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="125" sc="13" el="127" ec="14">View.ascx.cs</location>
            <body hash="a651a4b63d7079c8d82c5631785700cf"><![CDATA[{
                return controller.GetInvalidCharsErrorText();
            }]]></body>
          </codeblock>
        </property>
        <property name="IsHostPortal">
          <declaration><![CDATA[protected bool IsHostPortal]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="109" sc="13" el="111" ec="14">View.ascx.cs</location>
            <body hash="b14d3dd2df05220bf26d24d5d4075f57"><![CDATA[{
                return IsHostMenu || controller.GetCurrentPortalId(ModuleId) == Null.NullInteger;
            }]]></body>
          </codeblock>
        </property>
        <property name="MaxUploadSize">
          <declaration><![CDATA[protected int MaxUploadSize]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="133" sc="13" el="135" ec="14">View.ascx.cs</location>
            <body hash="bcaf6aad77009b87a86ce5d6c1eb1133"><![CDATA[{
                return (int)Config.GetMaxUploadSize();
            }]]></body>
          </codeblock>
        </property>
        <property name="ModuleActions">
          <declaration><![CDATA[public ModuleActionCollection ModuleActions]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="662" sc="13" el="679" ec="14">View.ascx.cs</location>
            <body hash="a3d2e243d952e4a367ab09a1eefe4659"><![CDATA[{
                var actions = new ModuleActionCollection();
                if (ModulePermissionController.CanManageModule(ModuleConfiguration))
                {
                    actions.Add(GetNextActionID(), Localization.GetString("ManageFolderTypes", LocalResourceFile), "", "", "../DesktopModules/DigitalAssets/Images/manageFolderTypes.png", EditUrl("FolderMappings"), false, SecurityAccessLevel.Edit, true, false);

                    foreach (var item in epm.GetMenuItemExtensionPoints("DigitalAssets", "ModuleActions", Filter))
                    {
                        actions.Add(GetNextActionID(), item.Text, "", "", item.Icon, EditUrl(item.Value), false, SecurityAccessLevel.Edit, true, false);
                    }
                }
                else
                {
                    actions = new ModuleActionCollection();
                }

                return actions;
            }]]></body>
          </codeblock>
        </property>
        <property name="NavigateUrl">
          <declaration><![CDATA[protected string NavigateUrl]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="141" sc="13" el="149" ec="14">View.ascx.cs</location>
            <body hash="52c40ec5cd59707aded3500583343395"><![CDATA[{
                var url = Globals.NavigateURL(TabId, "ControlKey", "mid=" + ModuleId, "ReturnUrl=" + Server.UrlEncode(Globals.NavigateURL()));

                //append popUp parameter
                var delimiter = url.Contains("?") ? "&" : "?";
                url = string.Format("{0}{1}popUp=true", url, delimiter);

                return url;
            }]]></body>
          </codeblock>
        </property>
        <property name="PageSize">
          <declaration><![CDATA[protected string PageSize]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="177" sc="37" el="177" ec="41">View.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="177" sc="42" el="177" ec="54">View.ascx.cs</location>
            <body hash="5dbe2cc086ebbf5db6b03610487cca4c"><![CDATA[private set]]></body>
          </codeblock>
        </property>
        <property name="RootFolderViewModel">
          <declaration><![CDATA[protected FolderViewModel RootFolderViewModel]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="543" sc="57" el="543" ec="61">View.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="543" sc="62" el="543" ec="74">View.ascx.cs</location>
            <body hash="5dbe2cc086ebbf5db6b03610487cca4c"><![CDATA[private set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="DotNetNuke.Modules.DigitalAssets.Components.Controllers">
    <class name="DigitalAssestsMode">
      <declaration><![CDATA[public enum DigitalAssestsMode]]></declaration>
      <documentation>
      </documentation>
      <constructors>
      </constructors>
      <methods>
      </methods>
      <fields>
        <field name="Group">
          <declaration><![CDATA[public const DigitalAssestsMode Group = 1;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Normal">
          <declaration><![CDATA[public const DigitalAssestsMode Normal = 0;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="User">
          <declaration><![CDATA[public const DigitalAssestsMode User = 2;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DigitalAssetsController">
      <declaration><![CDATA[public class DigitalAssetsController : IDigitalAssetsController, IUpgradeable]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DigitalAssetsController()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
        <constructor name=".cctor">
          <declaration><![CDATA[static DigitalAssetsController()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="58" sc="9" el="59" ec="82">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="88c9c2092f3affbc63d90279f2efd704"><![CDATA[protected static readonly DigitalAssetsSettingsRepository SettingsRepository = new DigitalAssetsSettingsRepository();
        private static readonly Hashtable MappedPathsSupported = new Hashtable();]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="AreMappedPathsSupported">
          <declaration><![CDATA[private bool AreMappedPathsSupported(int folderMappingId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="215" sc="9" el="225" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="cbe8c66463534040470ed2b1bb64a9bf"><![CDATA[{
            if (MappedPathsSupported.ContainsKey(folderMappingId))
            {
                return (bool)MappedPathsSupported[folderMappingId];
            }
            var folderMapping = FolderMappingController.Instance.GetFolderMapping(folderMappingId);
            var folderProvider = FolderProvider.Instance(folderMapping.FolderProviderType);
            var result = folderProvider.SupportsMappedPaths;
            MappedPathsSupported[folderMappingId] = result;
            return result;
        }]]></body>
          </codeblock>
        </method>
        <method name="CopyFile">
          <declaration><![CDATA[public CopyMoveItemViewModel CopyFile(int fileId, int destinationFolderId, bool overwrite)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="516" sc="9" el="547" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="9c18af2d8ef41a200b17b180cce758ce"><![CDATA[{
            var file = FileManager.Instance.GetFile(fileId, true);
            var folder = FolderManager.Instance.GetFolder(destinationFolderId);
            var sourceFolder = FolderManager.Instance.GetFolder(file.FolderId);

            if (!HasPermission(sourceFolder, "COPY"))
            {
                throw new DotNetNukeException(LocalizationHelper.GetString("UserHasNoPermissionToCopyFolder.Error"));
            }

            if (file.FolderId == destinationFolderId)
            {
                var destFileName = Path.GetFileNameWithoutExtension(file.FileName) + "-Copy" + Path.GetExtension(file.FileName);
                var i = 1;
                while (FileManager.Instance.FileExists(folder, destFileName, true))
                {
                    destFileName = Path.GetFileNameWithoutExtension(file.FileName) + "-Copy(" + i + ")" + Path.GetExtension(file.FileName);
                    i++;
                }

                var renamedFile = FileManager.Instance.AddFile(folder, destFileName, FileManager.Instance.GetFileContent(file));
                return new CopyMoveItemViewModel { ItemName = renamedFile.FileName, AlreadyExists = false };
            }

            if (!overwrite && FileManager.Instance.FileExists(folder, file.FileName, true))
            {
                return new CopyMoveItemViewModel { ItemName = file.FileName, AlreadyExists = true };
            }

            var copy = FileManager.Instance.CopyFile(file, folder);
            return new CopyMoveItemViewModel { ItemName = copy.FileName, AlreadyExists = false };
        }]]></body>
          </codeblock>
        </method>
        <method name="CreateFolder">
          <declaration><![CDATA[public FolderViewModel CreateFolder(string folderName, int folderParentID, int folderMappingID, string mappedPath)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="432" sc="9" el="434" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="f0f046837568d977682f920fb4726020"><![CDATA[{
            return GetFolderViewModel(AssetManager.Instance.CreateFolder( folderName,folderParentID, folderMappingID, mappedPath));
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteItems">
          <declaration><![CDATA[public IEnumerable<ItemPathViewModel> DeleteItems(IEnumerable<DeleteItem> items)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="470" sc="9" el="487" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="44b077579a3f25583a6596a0ea979e70"><![CDATA[{
            var nonDeletedItems = new List<IFolderInfo>();

            foreach (var item in items)
            {
                if (item.IsFolder)
                {
                    var onlyUnlink = item.UnlinkAllowedStatus == "onlyUnlink";
                    AssetManager.Instance.DeleteFolder(item.ItemId, onlyUnlink, nonDeletedItems);
                }
                else
                {
                    AssetManager.Instance.DeleteFile(item.ItemId);
                }
            }

            return nonDeletedItems.Select(GetItemPathViewModel);
        }]]></body>
          </codeblock>
        </method>
        <method name="EnsureGroupFolder">
          <declaration><![CDATA[private IFolderInfo EnsureGroupFolder(int groupId, PortalSettings portalSettings)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="389" sc="9" el="422" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="36ac0bde80f9a79a989c8a2a5b3d828e"><![CDATA[{
            const int AllUsersRoleId = -1;
            var groupFolderPath = "Groups/" + groupId;

            if (!FolderManager.Instance.FolderExists(portalSettings.PortalId, groupFolderPath))
            {
                var pc = new PermissionController();
                var browsePermission = pc.GetPermissionByCodeAndKey("SYSTEM_FOLDER", "BROWSE").Cast<PermissionInfo>().FirstOrDefault();
                var readPermission = pc.GetPermissionByCodeAndKey("SYSTEM_FOLDER", "READ").Cast<PermissionInfo>().FirstOrDefault(); 
                var writePermission = pc.GetPermissionByCodeAndKey("SYSTEM_FOLDER", "WRITE").Cast<PermissionInfo>().FirstOrDefault();

                if (!FolderManager.Instance.FolderExists(portalSettings.PortalId, "Groups"))
                {
                    var folder = FolderManager.Instance.AddFolder(portalSettings.PortalId, "Groups");

                    folder.FolderPermissions.Remove(browsePermission.PermissionID, AllUsersRoleId, Null.NullInteger);
                    folder.FolderPermissions.Remove(readPermission.PermissionID, AllUsersRoleId, Null.NullInteger);
                    folder.IsProtected = true;
                    FolderManager.Instance.UpdateFolder(folder);
                }

                var groupFolder = FolderManager.Instance.AddFolder(portalSettings.PortalId, groupFolderPath);

                groupFolder.FolderPermissions.Add(new FolderPermissionInfo(browsePermission) { FolderPath = groupFolder.FolderPath, RoleID = groupId, AllowAccess = true });
                groupFolder.FolderPermissions.Add(new FolderPermissionInfo(readPermission) { FolderPath = groupFolder.FolderPath, RoleID = groupId, AllowAccess = true });
                groupFolder.FolderPermissions.Add(new FolderPermissionInfo(writePermission) { FolderPath = groupFolder.FolderPath, RoleID = groupId, AllowAccess = true });

                groupFolder.IsProtected = true;
                FolderManager.Instance.UpdateFolder(groupFolder);
                return groupFolder;
            }

            return FolderManager.Instance.GetFolder(portalSettings.PortalId, groupFolderPath);        
        }]]></body>
          </codeblock>
        </method>
        <method name="GetAuditFields">
          <declaration><![CDATA[private IEnumerable<Field> GetAuditFields(BaseEntityInfo item, int portalId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="178" sc="9" el="212" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="05571af53800b4b7eb0cc7a950373e2a"><![CDATA[{
            var createdByUser = item.CreatedByUser(portalId);
            var lastModifiedByUser = item.LastModifiedByUser(portalId);
            return new List<Field>
                {                    
                    new Field(DefaultMetadataNames.Created)
                    {
                        DisplayName = LocalizationHelper.GetString("Field" + DefaultMetadataNames.Created + ".DisplayName"), 
                        Type = typeof(DateTime), 
                        Value = item.CreatedOnDate,
                        StringValue = item.CreatedOnDate.ToString(CultureInfo.CurrentCulture)
                    },
                new Field(DefaultMetadataNames.CreatedBy)
                    {
                        DisplayName = LocalizationHelper.GetString("Field" + DefaultMetadataNames.CreatedBy + ".DisplayName"), 
                        Type = typeof(int), 
                        Value = item.CreatedByUserID,
                        StringValue = createdByUser != null ? createdByUser.DisplayName : ""
                    },
                new Field(DefaultMetadataNames.Modified)
                    {
                        DisplayName = LocalizationHelper.GetString("Field" + DefaultMetadataNames.Modified + ".DisplayName"), 
                        Type = typeof(DateTime), 
                        Value = item.LastModifiedOnDate,
                        StringValue = item.LastModifiedOnDate.ToString(CultureInfo.CurrentCulture)
                    },
                new Field(DefaultMetadataNames.ModifiedBy)
                    {
                        DisplayName = LocalizationHelper.GetString("Field" + DefaultMetadataNames.ModifiedBy + ".DisplayName"), 
                        Type = typeof(int), 
                        Value = item.LastModifiedByUserID,
                        StringValue = lastModifiedByUser != null ? lastModifiedByUser.DisplayName : ""
                    }
                };
        }]]></body>
          </codeblock>
        </method>
        <method name="GetCurrentPortalId">
          <declaration><![CDATA[public int GetCurrentPortalId(int moduleId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="273" sc="9" el="283" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="67e10f27678a0e34af12266a0b03f8a8"><![CDATA[{
            if (PortalSettings.Current.UserInfo.IsSuperUser)
            {
                if (SettingsRepository.GetMode(moduleId) == DigitalAssestsMode.User)
                {
                    return Null.NullInteger;
                }
            }

            return IsHostMenu ? Null.NullInteger : PortalSettings.Current.PortalId;            
        }]]></body>
          </codeblock>
        </method>
        <method name="GetDefaultFolderProviderValues">
          <declaration><![CDATA[public IEnumerable<FolderMappingInfo> GetDefaultFolderProviderValues(int moduleId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="245" sc="9" el="254" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="2125df4ad736428d35fe009f235645c8"><![CDATA[{
            var portalId = GetCurrentPortalId(moduleId);

            return new List<FolderMappingInfo>
                {                        
                    FolderMappingController.Instance.GetFolderMapping(portalId, "Standard"),
                    FolderMappingController.Instance.GetFolderMapping(portalId, "Secure"),
                    FolderMappingController.Instance.GetFolderMapping(portalId, "Database")
                };
        }]]></body>
          </codeblock>
        </method>
        <method name="GetDefaultFolderTypeId">
          <declaration><![CDATA[public int? GetDefaultFolderTypeId(int moduleId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="257" sc="9" el="269" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="c3b63d649c720de3593e114f1703ae4c"><![CDATA[{
            if (PortalSettings.Current.UserInfo.IsSuperUser && SettingsRepository.GetMode(moduleId) == DigitalAssestsMode.User)
            {
                return null;
            }

            var folderTypeId = SettingsRepository.GetDefaultFolderTypeId(moduleId);
            if (!folderTypeId.HasValue)
            {
                folderTypeId = FolderMappingController.Instance.GetDefaultFolderMapping(GetCurrentPortalId(moduleId)).FolderMappingID;
            }
            return folderTypeId;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetFile">
          <declaration><![CDATA[public ItemViewModel GetFile(int fileID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="437" sc="9" el="439" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="fce8abc5c50395889b9aeaba993b9c71"><![CDATA[{
            return GetItemViewModel(FileManager.Instance.GetFile(fileID, true));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetFileContent">
          <declaration><![CDATA[public Stream GetFileContent(int fileId, out string fileName, out string contentType)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="500" sc="9" el="513" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="73c96732897122ba0a0a9c982cd81019"><![CDATA[{
            var file = FileManager.Instance.GetFile(fileId, true);
            var folder = FolderManager.Instance.GetFolder(file.FolderId);

            if (!HasPermission(folder, "READ"))
            {
                throw new DotNetNukeException(LocalizationHelper.GetString("UserHasNoPermissionToDownload.Error"));
            }

            var content = FileManager.Instance.GetFileContent(file);
            fileName = file.FileName;
            contentType = file.ContentType;
            return content;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetFileIconUrl">
          <declaration><![CDATA[private static string GetFileIconUrl(string extension)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="70" sc="9" el="77" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="a04f274645ee635806c46deabc840342"><![CDATA[{
            if (!string.IsNullOrEmpty(extension) && File.Exists(HttpContext.Current.Server.MapPath(IconController.IconURL("Ext" + extension, "32x32", "Standard"))))
            {
                return IconController.IconURL("Ext" + extension, "32x32", "Standard");
            }

            return IconController.IconURL("ExtFile", "32x32", "Standard");
        }]]></body>
          </codeblock>
        </method>
        <method name="GetFileKindField">
          <declaration><![CDATA[private Field GetFileKindField(IFileInfo file)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="134" sc="9" el="142" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="b78c1965a7fb443d377fcae039624629"><![CDATA[{
            var field = new Field(DefaultMetadataNames.Type);
            field.DisplayName = LocalizationHelper.GetString("Field" + field.Name + ".DisplayName");
            field.Type = file.Extension.GetType();
            field.Value = file.Extension;
            field.StringValue = field.Value.ToString();

            return field;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetFilePreviewFields">
          <declaration><![CDATA[private List<Field> GetFilePreviewFields(IFileInfo file)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="167" sc="9" el="175" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="a5a9a0439e5e305a3427c34fe09508af"><![CDATA[{
            var fields = new List<Field>
                             {
                                 GetFileKindField(file),
                                 GetFileSizeField(file),
                             };
            fields.AddRange(GetAuditFields((FileInfo)file, file.PortalId));
            return fields;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetFilePreviewInfo">
          <declaration><![CDATA[public virtual PreviewInfoViewModel GetFilePreviewInfo(IFileInfo file, ItemViewModel item)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="635" sc="9" el="645" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="acee177891d821f43e7ade2853dccb92"><![CDATA[{
            var result = new PreviewInfoViewModel
            {
                Title = LocalizationHelper.GetString("PreviewPanelTitle.Text"),
                ItemId = file.FileId,
                IsFolder = false,
                PreviewImageUrl = item.IconUrl,
                Fields = GetFilePreviewFields(file)
            };
            return result;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetFileSizeField">
          <declaration><![CDATA[private Field GetFileSizeField(IFileInfo file)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="145" sc="9" el="153" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="328700cc666e51e548471dc3bc2dcd2e"><![CDATA[{
            var field = new Field(DefaultMetadataNames.Size);
            field.DisplayName = LocalizationHelper.GetString("Field" + field.Name + ".DisplayName");
            field.Type = file.Size.GetType();
            field.Value = file.Size;
            field.StringValue = string.Format(new FileSizeFormatProvider(), "{0:fs}", file.Size);

            return field;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetFolder">
          <declaration><![CDATA[public FolderViewModel GetFolder(int folderID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="348" sc="9" el="350" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="a8058c2f92d7d84aa8b37a20e9679dd5"><![CDATA[{
            return GetFolderViewModel(GetFolderInfo(folderID));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetFolderContent">
          <declaration><![CDATA[public PageViewModel GetFolderContent(int moduleId, int folderId, int startIndex, int numItems, string sortExpression)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="310" sc="9" el="319" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="137077a84c14246f64de3722439a9700"><![CDATA[{
            var subfolderFilter = SettingsRepository.GetSubfolderFilter(moduleId);
            var page = AssetManager.Instance.GetFolderContent(folderId, startIndex, numItems, sortExpression, subfolderFilter);
            return new PageViewModel
            {
                Folder = GetFolderViewModel(page.Folder),
                Items = page.Items.Select(GetItemViewModel).ToList(),
                TotalCount = page.TotalCount
            };
        }]]></body>
          </codeblock>
        </method>
        <method name="GetFolderIconUrl">
          <declaration><![CDATA[protected string GetFolderIconUrl(int portalId, int folderMappingID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="776" sc="9" el="786" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="37812482c1623754e60ebc7a4fc0b2f3"><![CDATA[{
            var imageUrl = IconController.IconURL("ExtClosedFolder", "32x32", "Standard");

            var folderMapping = FolderMappingController.Instance.GetFolderMapping(portalId, folderMappingID);
            if (folderMapping != null && File.Exists(HttpContext.Current.Server.MapPath(folderMapping.ImageUrl)))
            {
                imageUrl = folderMapping.ImageUrl;
            }

            return imageUrl;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetFolderInfo">
          <declaration><![CDATA[private IFolderInfo GetFolderInfo(int folderId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="83" sc="9" el="90" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="54cfac9d8b10cb2c987088f096bd37e3"><![CDATA[{
            var folder = FolderManager.Instance.GetFolder(folderId);
            if (folder == null)
            {
                throw new DotNetNukeException(LocalizationHelper.GetString("FolderDoesNotExists.Error"));
            }
            return folder;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetFolderMappings">
          <declaration><![CDATA[public IEnumerable<FolderMappingViewModel> GetFolderMappings(int moduleId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="286" sc="9" el="289" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="ace7c813938c7fb19a340f62314ea1b4"><![CDATA[{
            var portalId = this.GetCurrentPortalId(moduleId);
            return FolderMappingController.Instance.GetFolderMappings(portalId).Select(GetFolderMappingViewModel);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetFolderMappingViewModel">
          <declaration><![CDATA[private FolderMappingViewModel GetFolderMappingViewModel(FolderMappingInfo folderMapping)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="101" sc="9" el="108" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="93b82d48cc858443f5c0bdd9a9761ccf"><![CDATA[{
            return new FolderMappingViewModel
            {
                Id = folderMapping.FolderMappingID,
                FolderTypeName = folderMapping.FolderProviderType,
                Name = folderMapping.MappingName
            };
        }]]></body>
          </codeblock>
        </method>
        <method name="GetFolderPreviewFields">
          <declaration><![CDATA[private List<Field> GetFolderPreviewFields(IFolderInfo folder)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="156" sc="9" el="164" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="1a333e0054cd85622b15e693b65b9d5f"><![CDATA[{
            var fields = new List<Field>
                             {                                 
                                 GetFolderSizeField(folder), 
                                 GetTotalFilesField(folder)
                             };
            fields.AddRange(GetAuditFields((FolderInfo)folder, folder.PortalID));
            return fields;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetFolderPreviewInfo">
          <declaration><![CDATA[public virtual PreviewInfoViewModel GetFolderPreviewInfo(IFolderInfo folder)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="623" sc="9" el="632" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="2a2a3ad75cad9e9d98aaa0b63aeb4a18"><![CDATA[{
            return new PreviewInfoViewModel
            {
                Title = LocalizationHelper.GetString("PreviewPanelTitle.Text"),
                ItemId = folder.FolderID,
                IsFolder = true,
                PreviewImageUrl = GetFolderIconUrl(folder.PortalID, folder.FolderMappingID),
                Fields = GetFolderPreviewFields(folder)
            };
        }]]></body>
          </codeblock>
        </method>
        <method name="GetFolders">
          <declaration><![CDATA[public IEnumerable<FolderViewModel> GetFolders(int moduleId, int folderId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="292" sc="9" el="307" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="11d5c3066155589bdbd8fc032e41a041"><![CDATA[{
            var subfolderFilter = SettingsRepository.GetSubfolderFilter(moduleId);
            if (subfolderFilter != SubfolderFilter.IncludeSubfoldersFolderStructure)
            {
                return new List<FolderViewModel>();
            }

            var folder = GetFolderInfo(folderId);

            if (!FolderPermissionController.CanBrowseFolder((FolderInfo)folder))
            {
                //The user cannot access the content
                return new List<FolderViewModel>();
            }
            return AssetManager.Instance.GetFolders(folder, "FolderName", true).Select(GetFolderViewModel);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetFolderSizeField">
          <declaration><![CDATA[private Field GetFolderSizeField(IFolderInfo folder)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="122" sc="9" el="131" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="4051d97c4943eac6cf1e8c7ac44f97e4"><![CDATA[{
            var field = new Field(DefaultMetadataNames.Size);
            var size = FolderManager.Instance.GetFiles(folder, true, false).Sum(f => (long)f.Size);
            field.DisplayName = LocalizationHelper.GetString("Field" + field.Name + ".DisplayName");
            field.Type = size.GetType();
            field.Value = size;
            field.StringValue = string.Format(new FileSizeFormatProvider(), "{0:fs}", size);

            return field;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetFolderViewModel">
          <declaration><![CDATA[protected virtual FolderViewModel GetFolderViewModel(IFolderInfo folder)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="698" sc="9" el="717" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="2b1e5afee3b1bf0aff42d33b5b98ea9e"><![CDATA[{
            var folderName = string.IsNullOrEmpty(folder.FolderName)
                ? LocalizationHelper.GetString("RootFolder.Text")
                : folder.FolderName;

            var folderViewModel = new FolderViewModel
            {
                FolderID = folder.FolderID,
                FolderMappingID = folder.FolderMappingID,
                FolderName = folderName,
                FolderPath = folder.FolderPath,
                PortalID = folder.PortalID,
                LastModifiedOnDate = folder.LastModifiedOnDate.ToString("g"),
                IconUrl = GetFolderIconUrl(folder.PortalID, folder.FolderMappingID),
                Permissions = GetPermissionViewModelCollection(folder),
                HasChildren = folder.HasChildren
            };
            folderViewModel.Attributes.Add(new KeyValuePair<string, object>("UnlinkAllowedStatus", GetUnlinkAllowedStatus(folder)));
            return folderViewModel;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetGroupFolder">
          <declaration><![CDATA[public FolderViewModel GetGroupFolder(int groupId, PortalSettings portalSettings)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="370" sc="9" el="386" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="567a7c41ce2f50b9e0325e269546682f"><![CDATA[{
            var role = RoleController.Instance.GetRoleById(portalSettings.PortalId, groupId);
            if (role == null || role.SecurityMode == SecurityMode.SecurityRole)
            {
                return null;
            }

            if (!role.IsPublic && RoleController.Instance.GetUserRole(portalSettings.PortalId, portalSettings.UserId, role.RoleID) == null)
            {
                return null;
            }

            var groupFolder = EnsureGroupFolder(groupId, portalSettings);
            var folderViewModel = this.GetFolderViewModel(groupFolder);
            folderViewModel.FolderName = role.RoleName;
            return folderViewModel;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetInitialTab">
          <declaration><![CDATA[public virtual int GetInitialTab(NameValueCollection requestParams, NameValueCollection damState)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="657" sc="9" el="659" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="b76f4e28da7351a5f2f7708ead0dd640"><![CDATA[{
            return 0; //Always
        }]]></body>
          </codeblock>
        </method>
        <method name="GetInvalidChars">
          <declaration><![CDATA[public string GetInvalidChars()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="603" sc="9" el="615" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="9752622446b17f401367519062884a80"><![CDATA[{
            var invalidChars = new string(Path.GetInvalidFileNameChars());

            foreach (var ch in Path.GetInvalidPathChars())
            {
                if (invalidChars.IndexOf(ch) == -1) // The ch does not exists
                {
                    invalidChars += ch;
                }
            }

            return invalidChars;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetInvalidCharsErrorText">
          <declaration><![CDATA[public string GetInvalidCharsErrorText()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="618" sc="9" el="620" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="32b6a3acbb4bbc8bcb8d6073e179f11e"><![CDATA[{
            return string.Format(LocalizationHelper.GetString("FolderFileNameHasInvalidcharacters.Error"), "\\:/*?\"<>|");
        }]]></body>
          </codeblock>
        </method>
        <method name="GetItemPathViewModel">
          <declaration><![CDATA[protected ItemPathViewModel GetItemPathViewModel(IFolderInfo folder)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="676" sc="9" el="684" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="add5fe14f33e4fe96daea98602e73930"><![CDATA[{
            return new ItemPathViewModel
            {
                IsFolder = true,
                ItemID = folder.FolderID,
                DisplayPath = folder.DisplayPath,
                IconUrl = GetFolderIconUrl(folder.PortalID, folder.FolderMappingID)
            };
        }]]></body>
          </codeblock>
        </method>
        <method name="GetItemPathViewModel">
          <declaration><![CDATA[protected ItemPathViewModel GetItemPathViewModel(IFileInfo file)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="687" sc="9" el="695" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="9a4aec62469b72c3a39e4cf8c008229c"><![CDATA[{
            return new ItemPathViewModel
            {
                IsFolder = false,
                ItemID = file.FileId,
                DisplayPath = file.RelativePath,
                IconUrl = GetFileIconUrl(file.Extension)
            };
        }]]></body>
          </codeblock>
        </method>
        <method name="GetItemViewModel">
          <declaration><![CDATA[private ItemViewModel GetItemViewModel(object item)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="720" sc="9" el="726" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="97460004bb6467c898f0a1be92518b70"><![CDATA[{
            var folder = item as IFolderInfo;
            if (folder != null) return GetItemViewModel(folder);

            var file = item as IFileInfo;
            return GetItemViewModel(file);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetItemViewModel">
          <declaration><![CDATA[protected virtual ItemViewModel GetItemViewModel(IFolderInfo folder)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="729" sc="9" el="754" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="eb4a91536c3d9a9085d9ade6be1e3754"><![CDATA[{
            var parentFolderId = Null.NullInteger;
            var parentFolderPath = string.Empty;

            var parentFolder = FolderManager.Instance.GetFolder(folder.ParentID);
            if (parentFolder != null)
            {
                parentFolderId = parentFolder.FolderID;
                parentFolderPath = parentFolder.FolderPath;
            }

            return new ItemViewModel
            {
                IsFolder = true,
                ItemID = folder.FolderID,
                ItemName = folder.FolderName,
                LastModifiedOnDate = folder.LastModifiedOnDate.ToString("g"),
                PortalID = folder.PortalID,
                IconUrl = GetFolderIconUrl(folder.PortalID, folder.FolderMappingID),
                Permissions = GetPermissionViewModelCollection(folder),
                ParentFolderID = parentFolderId,
                ParentFolder = parentFolderPath,
                FolderMappingID = folder.FolderMappingID,
                UnlinkAllowedStatus = GetUnlinkAllowedStatus(folder)
            };
        }]]></body>
          </codeblock>
        </method>
        <method name="GetItemViewModel">
          <declaration><![CDATA[protected virtual ItemViewModel GetItemViewModel(IFileInfo file)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="757" sc="9" el="773" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="bb30a258434543a3d6e0f56dbb600538"><![CDATA[{
            var folder = FolderManager.Instance.GetFolder(file.FolderId);
            return new ItemViewModel
            {
                IsFolder = false,
                ItemID = file.FileId,
                ItemName = file.FileName,
                LastModifiedOnDate = file.LastModifiedOnDate.ToString("g"),
                PortalID = file.PortalId,
                IconUrl = GetFileIconUrl(file.Extension),
                Permissions = GetPermissionViewModelCollection(folder),
                ParentFolderID = folder.FolderID,
                ParentFolder = folder.FolderPath,
                Size = string.Format(new FileSizeFormatProvider(), "{0:fs}", file.Size),
                UnlinkAllowedStatus = "false"
            };
        }]]></body>
          </codeblock>
        </method>
        <method name="GetMappedSubFoldersCount">
          <declaration><![CDATA[public int GetMappedSubFoldersCount(IEnumerable<ItemBaseViewModel> items, int portalID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="453" sc="9" el="467" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="ab21424615b0033252cd9c933ee85fcd"><![CDATA[{
            var totalSubfoldersCount = 0;
            if (items.All(i => !i.IsFolder))
            {
                return totalSubfoldersCount;
            }
            var allFolders = FolderManager.Instance.GetFolders(portalID);
            foreach (var item in items.Where(i => i.IsFolder && HasPermission(FolderManager.Instance.GetFolder(i.ItemID), "VIEW")))
            {
                var folder = FolderManager.Instance.GetFolder(item.ItemID);
                var allSubFolders = allFolders.Where(f => f.FolderPath.StartsWith(folder.FolderPath));
                totalSubfoldersCount = totalSubfoldersCount + allSubFolders.Count(f => GetUnlinkAllowedStatus(f) == "onlyUnlink");
            }
            return totalSubfoldersCount;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPermissionViewModelCollection">
          <declaration><![CDATA[private IEnumerable<PermissionViewModel> GetPermissionViewModelCollection(IFolderInfo folder)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="93" sc="9" el="98" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="779c957c340489384a2ee82702fb4acf"><![CDATA[{
            // TODO Split permission between CE and PE packages
            string[] permissionKeys = { "ADD", "BROWSE", "COPY", "READ", "WRITE", "DELETE", "MANAGE", "VIEW", "FULLCONTROL" };

            return permissionKeys.Select(permissionKey => new PermissionViewModel { Key = permissionKey, Value = HasPermission(folder, permissionKey) }).ToList();
        }]]></body>
          </codeblock>
        </method>
        <method name="GetRootFolder">
          <declaration><![CDATA[public FolderViewModel GetRootFolder(int moduleId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="353" sc="9" el="367" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="b0347be522edb3b1113c80e73588d2af"><![CDATA[{
            if (SettingsRepository.GetMode(moduleId) != DigitalAssestsMode.Normal)
            {
                return null;
            }

            var rootFolderId = SettingsRepository.GetRootFolderId(moduleId);
            if (rootFolderId.HasValue && SettingsRepository.GetFilterCondition(moduleId) == FilterCondition.FilterByFolder)
            {
                return this.GetFolder(rootFolderId.Value);
            }

            var portalId = this.GetCurrentPortalId(moduleId);
            return this.GetFolderViewModel(FolderManager.Instance.GetFolder(portalId, ""));            
        }]]></body>
          </codeblock>
        </method>
        <method name="GetTotalFilesField">
          <declaration><![CDATA[private Field GetTotalFilesField(IFolderInfo folder)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="111" sc="9" el="119" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="3d9649fc6cd9e8aabd7690de21e81bed"><![CDATA[{
            var field = new Field(DefaultMetadataNames.TotalFiles);
            field.DisplayName = LocalizationHelper.GetString("Field" + field.Name + ".DisplayName");
            var totalFiles = Convert.ToInt32(FolderManager.Instance.GetFiles(folder, true, false).Count());
            field.Type = totalFiles.GetType();
            field.Value = totalFiles;
            field.StringValue = field.Value.ToString();
            return field;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetUnlinkAllowedStatus">
          <declaration><![CDATA[private string GetUnlinkAllowedStatus(IFolderInfo folder)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="228" sc="9" el="239" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="30f72133f56476b7b1ea36d321fa257d"><![CDATA[{
            if (AreMappedPathsSupported(folder.FolderMappingID) && folder.ParentID > 0 && GetFolder(folder.ParentID).FolderMappingID != folder.FolderMappingID)
            {
                return "onlyUnlink";
            }
            if (AreMappedPathsSupported(folder.FolderMappingID))
            {
                return "true";
            }
            return "false";

        }]]></body>
          </codeblock>
        </method>
        <method name="GetUrl">
          <declaration><![CDATA[public string GetUrl(int fileId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="589" sc="9" el="600" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="d1c8b58c9995564afaa8659bc2dab2db"><![CDATA[{
            var file = FileManager.Instance.GetFile(fileId, true);
            if (file != null)
            {
                var folder = FolderManager.Instance.GetFolder(file.FolderId);
                if (!HasPermission(folder, "READ"))
                {
                    throw new DotNetNukeException(LocalizationHelper.GetString("UserHasNoPermissionToDownload.Error"));
                }
            }
            return FileManager.Instance.GetUrl(file);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetUserFolder">
          <declaration><![CDATA[public FolderViewModel GetUserFolder(UserInfo userInfo)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="425" sc="9" el="429" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="ada5ffffe970fb4f3efb3a7b0141c500"><![CDATA[{
            var folder = GetFolderViewModel(FolderManager.Instance.GetUserFolder(userInfo));
            folder.FolderName = LocalizationHelper.GetString("MyFolder");
            return folder;
        }]]></body>
          </codeblock>
        </method>
        <method name="HasPermission">
          <declaration><![CDATA[public bool HasPermission(IFolderInfo folder, string permissionKey)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="664" sc="9" el="673" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="e3cbe9d1e72e11d918c0c77ca4066dad"><![CDATA[{
            var hasPermision = PortalSettings.Current.UserInfo.IsSuperUser;

            if (!hasPermision && folder != null)
            {
                hasPermision = FolderPermissionController.HasFolderPermission(folder.FolderPermissions, permissionKey);
            }

            return hasPermision;
        }]]></body>
          </codeblock>
        </method>
        <method name="MoveFile">
          <declaration><![CDATA[public CopyMoveItemViewModel MoveFile(int fileId, int destinationFolderId, bool overwrite)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="550" sc="9" el="572" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="d9516772506e9d18675f64f2d81689bc"><![CDATA[{
            var file = FileManager.Instance.GetFile(fileId, true);
            var folder = FolderManager.Instance.GetFolder(destinationFolderId);
            var sourceFolder = FolderManager.Instance.GetFolder(file.FolderId);
            if (!HasPermission(sourceFolder, "COPY"))
            {
                throw new DotNetNukeException(LocalizationHelper.GetString("UserHasNoPermissionToMoveFolder.Error"));
            }

            if (file.FolderId == destinationFolderId)
            {
                // User must not move files in the same folder                
                throw new DotNetNukeException(LocalizationHelper.GetString("DestinationFolderCannotMatchSourceFolder.Error"));
            }

            if (!overwrite && FileManager.Instance.FileExists(folder, file.FileName, true))
            {
                return new CopyMoveItemViewModel { ItemName = file.FileName, AlreadyExists = true };
            }

            var copy = FileManager.Instance.MoveFile(file, folder);
            return new CopyMoveItemViewModel { ItemName = copy.FileName, AlreadyExists = false };
        }]]></body>
          </codeblock>
        </method>
        <method name="MoveFolder">
          <declaration><![CDATA[public CopyMoveItemViewModel MoveFolder(int folderId, int destinationFolderId, bool overwrite)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="575" sc="9" el="586" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="04f5e0c87af216c771de9b0992519e0a"><![CDATA[{
            var folder = GetFolderInfo(folderId);
            if (!HasPermission(folder, "COPY"))
            {
                throw new DotNetNukeException(LocalizationHelper.GetString("UserHasNoPermissionToMoveFolder.Error"));
            }

            var destinationFolder = FolderManager.Instance.GetFolder(destinationFolderId);

            FolderManager.Instance.MoveFolder(folder, destinationFolder);
            return new CopyMoveItemViewModel { ItemName = folder.FolderName, AlreadyExists = false };
        }]]></body>
          </codeblock>
        </method>
        <method name="RenameFile">
          <declaration><![CDATA[public ItemViewModel RenameFile(int fileID, string newFileName)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="490" sc="9" el="492" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="c2cdfd99b336ac889623b6fee207bdf9"><![CDATA[{
            return GetItemViewModel(AssetManager.Instance.RenameFile(fileID, newFileName));
        }]]></body>
          </codeblock>
        </method>
        <method name="RenameFolder">
          <declaration><![CDATA[public FolderViewModel RenameFolder(int folderID, string newFolderName)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="495" sc="9" el="497" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="ee270cf66548c79a5986f37804d10449"><![CDATA[{
            return GetFolderViewModel(AssetManager.Instance.RenameFolder(folderID, newFolderName));
        }]]></body>
          </codeblock>
        </method>
        <method name="SearchFolderContent">
          <declaration><![CDATA[public PageViewModel SearchFolderContent(int moduleId, int folderId, string pattern, int startIndex, int numItems, string sortExpression)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="335" sc="9" el="345" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="e16ecf543823fd40b2ef18588a50e433"><![CDATA[{
            var subfolderFilter = SettingsRepository.GetSubfolderFilter(moduleId);
            var page = AssetManager.Instance.SearchFolderContent(folderId, pattern, startIndex, numItems, sortExpression, subfolderFilter);

            return new PageViewModel
            {
                Folder = GetFolderViewModel(page.Folder),
                Items = page.Items.Select(GetItemViewModel).ToList(),
                TotalCount = page.TotalCount
            };
        }]]></body>
          </codeblock>
        </method>
        <method name="SyncFolderContent">
          <declaration><![CDATA[public void SyncFolderContent(int folderId, bool recursive)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="322" sc="9" el="332" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="d0961c8a19ca1ec60a482ea00b6819c2"><![CDATA[{
            var folder = GetFolderInfo(folderId);

            if (!FolderPermissionController.CanBrowseFolder((FolderInfo)folder))
            {
                //The user cannot access the content               
                return;
            }

            FolderManager.Instance.Synchronize(folder.PortalID, folder.FolderPath, recursive, true);
        }]]></body>
          </codeblock>
        </method>
        <method name="UnlinkFolder">
          <declaration><![CDATA[public void UnlinkFolder(int folderID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="442" sc="9" el="450" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="faaf903edcd6967ff12be266eb23a587"><![CDATA[{
            var folder = FolderManager.Instance.GetFolder(folderID);
            // Check if user has appropiate permissions
            if (!HasPermission(folder, "DELETE"))
            {
                throw new DotNetNukeException(LocalizationHelper.GetString("UserHasNoPermissionToUnlinkFolder.Error"));
            }
            FolderManager.Instance.UnlinkFolder(folder);
        }]]></body>
          </codeblock>
        </method>
        <method name="UnzipFile">
          <declaration><![CDATA[public ZipExtractViewModel UnzipFile(int fileId, bool overwrite)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="648" sc="9" el="654" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="9a9aedb2e53b28b98c960a1e1fc7acf8"><![CDATA[{
            var file = FileManager.Instance.GetFile(fileId, true);
            var destinationFolder = FolderManager.Instance.GetFolder(file.FolderId);
            var invalidFiles = new List<string>();
            var filesCount = FileManager.Instance.UnzipFile(file, destinationFolder, invalidFiles);
            return new ZipExtractViewModel() { Ok = true, InvalidFiles = invalidFiles, TotalCount = filesCount};
        }]]></body>
          </codeblock>
        </method>
        <method name="UpgradeModule">
          <declaration><![CDATA[public string UpgradeModule(string version)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="791" sc="9" el="836" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="ec4c99f1e9ba7700eb7f7c9706c3a114"><![CDATA[{
            try
            {
                switch (version)
                {
                    case "07.01.00":
                        ModuleDefinitionInfo mDef = ModuleDefinitionController.GetModuleDefinitionByFriendlyName("Digital Asset Management");

                        //Add tab to Admin Menu
                        if (mDef != null)
                        {
                            var hostPage = Upgrade.AddHostPage("File Management",
                                                            "Manage assets.",
                                                            "~/Icons/Sigma/Files_16X16_Standard.png",
                                                            "~/Icons/Sigma/Files_32X32_Standard.png",
                                                            true);

                            //Add module to page
                            Upgrade.AddModuleToPage(hostPage, mDef.ModuleDefID, "File Management", "~/Icons/Sigma/Files_32X32_Standard.png", true);

                            Upgrade.AddAdminPages("File Management",
                                                 "Manage assets within the portal",
                                                 "~/Icons/Sigma/Files_16X16_Standard.png",
                                                 "~/Icons/Sigma/Files_32X32_Standard.png",
                                                 true,
                                                 mDef.ModuleDefID,
                                                 "File Management",
                                                 "~/Icons/Sigma/Files_16X16_Standard.png",
                                                 true);
                        }

                        //Remove Host File Manager page
                        Upgrade.RemoveHostPage("File Manager");

                        //Remove Admin File Manager Pages
                        Upgrade.RemoveAdminPages("//Admin//FileManager");

                        break;
                }
                return "Success";
            }
            catch (Exception)
            {
                return "Failed";
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="MappedPathsSupported">
          <declaration><![CDATA[private static readonly Hashtable MappedPathsSupported = new Hashtable();]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="SettingsRepository">
          <declaration><![CDATA[protected static readonly DigitalAssetsSettingsRepository SettingsRepository = new DigitalAssetsSettingsRepository();]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="IsHostMenu">
          <declaration><![CDATA[private static bool IsHostMenu]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="64" sc="13" el="66" ec="14">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="3fe28e1402f3846347d6bead34cd751e"><![CDATA[{
                return Globals.IsHostTab(PortalSettings.Current.ActiveTab.TabID);
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DigitalAssetsSettingsRepository">
      <declaration><![CDATA[public class DigitalAssetsSettingsRepository]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DigitalAssetsSettingsRepository()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="GetDefaultFolderTypeId">
          <declaration><![CDATA[public int? GetDefaultFolderTypeId(int moduleId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="41" sc="9" el="50" ec="10">Components\Controllers\DigitalAssetsSettingsRepository.cs</location>
            <body hash="a2fcdb63a90ae56342b2b2226976f318"><![CDATA[{
            var defaultFolderTypeId = this.GetSettingByKey(moduleId, DefaultFolderTypeIdSetting);

            if (string.IsNullOrEmpty(defaultFolderTypeId))
            {
                return null;
            }

            return Convert.ToInt32(defaultFolderTypeId);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetFilterCondition">
          <declaration><![CDATA[public FilterCondition GetFilterCondition(int moduleId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="89" sc="9" el="93" ec="10">Components\Controllers\DigitalAssetsSettingsRepository.cs</location>
            <body hash="4669c8f314e9accf4312f79061d8fe8a"><![CDATA[{
            var setting = this.GetSettingByKey(moduleId, FilterConditionSetting);
            FilterCondition filterCondition;
            return !Enum.TryParse(setting, true, out filterCondition) ? FilterCondition.NotSet : filterCondition;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetMode">
          <declaration><![CDATA[public DigitalAssestsMode GetMode(int moduleId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="65" sc="9" el="74" ec="10">Components\Controllers\DigitalAssetsSettingsRepository.cs</location>
            <body hash="c4452d6233fa4eaee34186b2c4585101"><![CDATA[{
            DigitalAssestsMode mode;

            if (!Enum.TryParse(GetSettingByKey(moduleId, ModeSetting), true, out mode))
            {
                return this.IsGroupMode(moduleId) ? DigitalAssestsMode.Group : DigitalAssestsMode.Normal;
            }

            return mode;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetRootFolderId">
          <declaration><![CDATA[public int? GetRootFolderId(int moduleId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="53" sc="9" el="62" ec="10">Components\Controllers\DigitalAssetsSettingsRepository.cs</location>
            <body hash="1bca1553cb65a35059ed6ecea71cca7a"><![CDATA[{
            var rootFolderId = this.GetSettingByKey(moduleId, RootFolderIdSetting);

            if (string.IsNullOrEmpty(rootFolderId))
            {
                return null;
            }

            return Convert.ToInt32(rootFolderId);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetSettingByKey">
          <declaration><![CDATA[private string GetSettingByKey(int moduleId, string key)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="128" sc="9" el="132" ec="10">Components\Controllers\DigitalAssetsSettingsRepository.cs</location>
            <body hash="1a1dca6618c16caaef8301cfa57abc5e"><![CDATA[{
            var module = ModuleController.Instance.GetModule(moduleId, Null.NullInteger, true);
            var moduleSettings = module.ModuleSettings; 
            return (string)moduleSettings[key];               
        }]]></body>
          </codeblock>
        </method>
        <method name="GetSubfolderFilter">
          <declaration><![CDATA[public SubfolderFilter GetSubfolderFilter(int moduleId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="96" sc="9" el="100" ec="10">Components\Controllers\DigitalAssetsSettingsRepository.cs</location>
            <body hash="5d8af6d8789b19fbb1e5eb38a5ae97bc"><![CDATA[{
            var setting = this.GetSettingByKey(moduleId, SubfolderFilterSetting);
            SubfolderFilter excludeSubfolders;
            return !Enum.TryParse(setting, true, out excludeSubfolders) ? SubfolderFilter.IncludeSubfoldersFolderStructure : excludeSubfolders;
        }]]></body>
          </codeblock>
        </method>
        <method name="IsGroupMode">
          <declaration><![CDATA[private bool IsGroupMode(int moduleId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="77" sc="9" el="86" ec="10">Components\Controllers\DigitalAssetsSettingsRepository.cs</location>
            <body hash="0468f0050f28a0eb60f5274709aa36ee"><![CDATA[{
            var groupMode = this.GetSettingByKey(moduleId, GroupModeSetting);

            if (string.IsNullOrEmpty(groupMode))
            {
                return false;
            }

            return Convert.ToBoolean(groupMode);
        }]]></body>
          </codeblock>
        </method>
        <method name="SaveDefaultFolderTypeId">
          <declaration><![CDATA[public void SaveDefaultFolderTypeId(int moduleId, int defaultFolderTypeId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="103" sc="9" el="105" ec="10">Components\Controllers\DigitalAssetsSettingsRepository.cs</location>
            <body hash="56ee0524ee5d8e202844e2ea109f56ce"><![CDATA[{
            ModuleController.Instance.UpdateModuleSetting(moduleId, DefaultFolderTypeIdSetting, defaultFolderTypeId.ToString(CultureInfo.InvariantCulture));            
        }]]></body>
          </codeblock>
        </method>
        <method name="SaveExcludeSubfolders">
          <declaration><![CDATA[public void SaveExcludeSubfolders(int moduleId, SubfolderFilter subfolderFilter)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="118" sc="9" el="120" ec="10">Components\Controllers\DigitalAssetsSettingsRepository.cs</location>
            <body hash="a49db6e8c294393d6379093d51c4f6f1"><![CDATA[{
            ModuleController.Instance.UpdateModuleSetting(moduleId, SubfolderFilterSetting, subfolderFilter.ToString());
        }]]></body>
          </codeblock>
        </method>
        <method name="SaveFilterCondition">
          <declaration><![CDATA[public void SaveFilterCondition(int moduleId, FilterCondition filterCondition)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="123" sc="9" el="125" ec="10">Components\Controllers\DigitalAssetsSettingsRepository.cs</location>
            <body hash="ef6ea7a1820c3d154c792a25ec661c8c"><![CDATA[{
            ModuleController.Instance.UpdateModuleSetting(moduleId, FilterConditionSetting, filterCondition.ToString());
        }]]></body>
          </codeblock>
        </method>
        <method name="SaveMode">
          <declaration><![CDATA[public void SaveMode(int moduleId, DigitalAssestsMode mode)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="108" sc="9" el="110" ec="10">Components\Controllers\DigitalAssetsSettingsRepository.cs</location>
            <body hash="a846e97be13ddbe6f29f72ccf0522ac5"><![CDATA[{
            ModuleController.Instance.UpdateModuleSetting(moduleId, ModeSetting, mode.ToString());
        }]]></body>
          </codeblock>
        </method>
        <method name="SaveRootFolderId">
          <declaration><![CDATA[public void SaveRootFolderId(int moduleId, int rootFolderId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="113" sc="9" el="115" ec="10">Components\Controllers\DigitalAssetsSettingsRepository.cs</location>
            <body hash="a2415cdcd95f7effa5a60a3d92a2021b"><![CDATA[{
            ModuleController.Instance.UpdateModuleSetting(moduleId, RootFolderIdSetting, rootFolderId.ToString(CultureInfo.InvariantCulture));
        }]]></body>
          </codeblock>
        </method>
        <method name="SetDefaultFilterCondition">
          <declaration><![CDATA[internal void SetDefaultFilterCondition(int moduleId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="140" sc="9" el="144" ec="10">Components\Controllers\DigitalAssetsSettingsRepository.cs</location>
            <body hash="1653d6b8ebc6ea5edc25156c5b01b7f9"><![CDATA[{
            //handle upgrades where FilterCondition didn't exist
            if (this.SettingExists(moduleId, "RootFolderId") && !this.SettingExists(moduleId, "FilterCondition"))
                this.SaveFilterCondition(moduleId, FilterCondition.FilterByFolder);
        }]]></body>
          </codeblock>
        </method>
        <method name="SettingExists">
          <declaration><![CDATA[internal bool SettingExists(int moduleId, string settingName)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="135" sc="9" el="137" ec="10">Components\Controllers\DigitalAssetsSettingsRepository.cs</location>
            <body hash="d9a99b52dd499534d232a7abd31e4fc0"><![CDATA[{
            return !String.IsNullOrEmpty(GetSettingByKey(moduleId, settingName));
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="DefaultFolderTypeIdSetting">
          <declaration><![CDATA[private const string DefaultFolderTypeIdSetting = "DefaultFolderTypeId";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="FilterConditionSetting">
          <declaration><![CDATA[private const string FilterConditionSetting = "FilterCondition";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="GroupModeSetting">
          <declaration><![CDATA[private const string GroupModeSetting = "GroupMode";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ModeSetting">
          <declaration><![CDATA[private const string ModeSetting = "Mode";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="RootFolderIdSetting">
          <declaration><![CDATA[private const string RootFolderIdSetting = "RootFolderId";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="SubfolderFilterSetting">
          <declaration><![CDATA[private const string SubfolderFilterSetting = "SubfolderFilter";]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="FilterCondition">
      <declaration><![CDATA[public enum FilterCondition]]></declaration>
      <documentation>
      </documentation>
      <constructors>
      </constructors>
      <methods>
      </methods>
      <fields>
        <field name="FilterByFolder">
          <declaration><![CDATA[public const FilterCondition FilterByFolder = 1;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="NotSet">
          <declaration><![CDATA[public const FilterCondition NotSet = 0;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="IDigitalAssetsController">
      <declaration><![CDATA[public interface IDigitalAssetsController]]></declaration>
      <documentation>
      </documentation>
      <constructors>
      </constructors>
      <methods>
        <method name="CopyFile">
          <declaration><![CDATA[CopyMoveItemViewModel CopyFile(int fileId, int destinationFolderId, bool overwrite);]]></declaration>
          <documentation>
            <summary>
 Copies a file to the destination folder
 </summary>
 <param name="fileId">File reference to the source file</param>
 <param name="destinationFolderId">Folder reference to the destination folder</param>
 <param name="overwrite">Overwrite destination if a file with the same name already exists</param>
 <returns>The response object with the result of the action</returns></documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="CreateFolder">
          <declaration><![CDATA[FolderViewModel CreateFolder(string folderName, int folderParentID, int folderMappingID, string mappedPath);]]></declaration>
          <documentation>
            <summary>
 Gets a newly created folder.
 </summary>
 <param name="folderName">folderName is the name of the new folder</param>
 <param name="folderParentID">The reference to the parent folder where the new folder will be create</param>
 <param name="folderMappingID">folderMappingID is the mapping related with the new folder</param>
 <param name="mappedPath">mappedPath used for the mapping to folder in remove provider</param>
 <returns>The newly folder created under the specified parent folder</returns></documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="DeleteItems">
          <declaration><![CDATA[IEnumerable<ItemPathViewModel> DeleteItems(IEnumerable<DeleteItem> items);]]></declaration>
          <documentation>
            <summary>
 Deletes a collection of items (folder and/or files)
 </summary>
 <param name="items">Items list</param>
 <remarks>all the items belong at the same Folder</remarks>
 <returns>The non deleted item list. The files / subfolders for which the user has no permissions to delete</returns></documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="GetCurrentPortalId">
          <declaration><![CDATA[int GetCurrentPortalId(int moduleId);]]></declaration>
          <documentation>
            <summary>
 Gets the current Portal Id. This id depends on the configuration of the module
 </summary>
 <param name="moduleId">The Id of the module</param>
 <returns>The id of the current portal</returns></documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="GetDefaultFolderProviderValues">
          <declaration><![CDATA[IEnumerable<FolderMappingInfo> GetDefaultFolderProviderValues(int moduleId);]]></declaration>
          <documentation>
            <summary>
 Get the list of the default FolderMappings, i.e.: Standard/Database/Secure, associated to the module instance.
 This depends on the configuration of the module.
 </summary>
 <param name="moduleId">The id of the Module</param>
 <returns>The list of default FolderMappingInfo associated</returns></documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="GetDefaultFolderTypeId">
          <declaration><![CDATA[int? GetDefaultFolderTypeId(int moduleId);]]></declaration>
          <documentation>
            <summary>
 Get the default FolderTypeId to use when creating new folders under the root folder.
 This depends on the module configuration
 </summary>
 <param name="moduleId">The Id of the module</param>
 <returns>The default FolderTypeId</returns></documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="GetFile">
          <declaration><![CDATA[ItemViewModel GetFile(int fileID);]]></declaration>
          <documentation>
            <summary>
 Gets a file entity by providing a file identifier.
 </summary>
 <param name="fileID">The identifier of the file.</param>
 <returns>The fileItem entity.</returns></documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="GetFileContent">
          <declaration><![CDATA[Stream GetFileContent(int fileId, out string fileName, out string contentType);]]></declaration>
          <documentation>
            <summary>
 Get the content of a file, ready to download
 </summary>
 <param name="fileId">File reference to the source file</param>
 <param name="fileName">Returns the name of the file</param>
 <param name="contentType">Returns the content type of the file</param>
 <returns>The file content</returns></documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="GetFilePreviewInfo">
          <declaration><![CDATA[PreviewInfoViewModel GetFilePreviewInfo(IFileInfo file, ItemViewModel item);]]></declaration>
          <documentation>
            <summary>
 Returns a fields set. These fields define the File preview info
 </summary>
 <param name="file">The file</param>
 <param name="item">The file model</param>
 <returns>The Preview info object</returns></documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="GetFolder">
          <declaration><![CDATA[FolderViewModel GetFolder(int folderID);]]></declaration>
          <documentation>
            <summary>
 Gets a folder entity by providing a folder identifier.
 </summary>
 <param name="folderID">The identifier of the folder.</param>
 <returns>The folderItem entity or null if the folder cannot be located.</returns></documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="GetFolderContent">
          <declaration><![CDATA[PageViewModel GetFolderContent(int moduleId, int folderId, int startIndex, int numItems, string sortExpression);]]></declaration>
          <documentation>
            <summary>
 Gets the files and folders contained in the specified folder.
 </summary>
 <param name="moduleId">The id of the Module</param>
 <param name="folderId">Folder Identifier</param>
 <param name="startIndex">Start index to retrieve items</param>
 <param name="numItems">Max Number of items</param>
 <param name="sortExpression">The sort expression in a SQL format, e.g. FileName ASC</param>
 <returns>The list of files and folders contained in the specified folder paginated</returns></documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="GetFolderMappings">
          <declaration><![CDATA[IEnumerable<FolderMappingViewModel> GetFolderMappings(int moduleId);]]></declaration>
          <documentation>
            <summary>
 Gets the list of the Folder Mappings. This list depends on the configuration of the module instanced
 </summary>
 <param name="moduleId">The Id of the module</param>
 <returns>The list of Folder Mappings</returns></documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="GetFolderPreviewInfo">
          <declaration><![CDATA[PreviewInfoViewModel GetFolderPreviewInfo(IFolderInfo folder);]]></declaration>
          <documentation>
            <summary>
 Returns a fields set. These fields define the Folder preview info
 </summary>
 <param name="folder">The folder model</param>
 <returns>The Preview info object</returns></documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="GetFolders">
          <declaration><![CDATA[IEnumerable<FolderViewModel> GetFolders(int moduleId, int parentFolderId);]]></declaration>
          <documentation>
            <summary>
 Gets the list of subfolders for the specified folder.
 </summary>
 <param name="moduleId">The Id of the module</param>
 <param name="parentFolderId">The folderItemId of the folder to get the list of subfolders.</param>
 <returns>The list of subfolders for the specified folder.</returns></documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="GetGroupFolder">
          <declaration><![CDATA[FolderViewModel GetGroupFolder(int groupId, PortalSettings portalSettings);]]></declaration>
          <documentation>
            <summary>
 Gets the group folder
 </summary>
 <param name="groupId">The identifier of the group.</param>
 <param name="portalSettings">The current portal settings.</param>
 <returns>The group folderItem entity.</returns></documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="GetInitialTab">
          <declaration><![CDATA[int GetInitialTab(NameValueCollection requestParams, NameValueCollection damState);]]></declaration>
          <documentation>
            <summary>
 Get the index of the inital tab to be shown when module is loaded
 </summary>
 <param name="requestParams">Request parameters collection</param>
 <param name="damState">Module State values collection</param>
 <returns>The index to the tab to be shown</returns></documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="GetInvalidChars">
          <declaration><![CDATA[string GetInvalidChars();]]></declaration>
          <documentation>
            <summary>
 Returns all invalid chars for folder and file names
 </summary>
 <returns>A string that includes all invalid chars</returns></documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="GetInvalidCharsErrorText">
          <declaration><![CDATA[string GetInvalidCharsErrorText();]]></declaration>
          <documentation>
            <summary>
 Returns the error text when a name contains an invalid character
 </summary>
 <returns>The error text to show when a name contains an invalid character</returns></documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="GetMappedSubFoldersCount">
          <declaration><![CDATA[int GetMappedSubFoldersCount(IEnumerable<ItemBaseViewModel> items, int portalID);]]></declaration>
          <documentation>
            <summary>
 Get the number of subfolders which support Mapped Path
 </summary>
 <param name="items">Items list</param>
 <param name="portalID">Portal ID</param></documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="GetRootFolder">
          <declaration><![CDATA[FolderViewModel GetRootFolder(int moduleId);]]></declaration>
          <documentation>
            <summary>
 Gets the root folder of the current Portal. This folder depends on the configuration of the module.
 </summary>
 <param name="moduleId">The Id of the module</param>
 <returns>The root folderItem entity.</returns></documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="GetUrl">
          <declaration><![CDATA[string GetUrl(int fileId);]]></declaration>
          <documentation>
            <summary>
 Get the URL of a file
 </summary>
 <param name="fileId">File reference to the source file</param>
 <returns>The URL of the file</returns></documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="GetUserFolder">
          <declaration><![CDATA[FolderViewModel GetUserFolder(UserInfo userInfo);]]></declaration>
          <documentation>
            <summary>
 Gets the user folder
 </summary>
 <param name="userInfo">The current user.</param>
 <returns>The user folderItem entity.</returns></documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="HasPermission">
          <declaration><![CDATA[bool HasPermission(IFolderInfo folder, string permissionKey);]]></declaration>
          <documentation>
            <summary>
 Check if the current user has the specified permission over the specified folder
 </summary>
 <param name="folder">The folder to check</param>
 <param name="permissionKey">The permission to check</param>
 <returns>Returns TRUE if the current user has the specified permission over the specified folder. FALSE otherwise</returns></documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="MoveFile">
          <declaration><![CDATA[CopyMoveItemViewModel MoveFile(int fileId, int destinationFolderId, bool overwrite);]]></declaration>
          <documentation>
            <summary>
 Moves a file to the destination folder
 </summary>
 <param name="fileId">File reference to the source file</param>
 <param name="destinationFolderId">Folder reference to the destination folder</param>
 <param name="overwrite">Overwrite destination if a file with the same name already exists</param>
 <returns>The response object with the result of the action</returns></documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="MoveFolder">
          <declaration><![CDATA[CopyMoveItemViewModel MoveFolder(int folderId, int destinationFolderId, bool overwrite);]]></declaration>
          <documentation>
            <summary>
 Moves a Folder to the destination folder
 </summary>
 <param name="folderId">Folder reference to the source file</param>
 <param name="destinationFolderId">Folder reference to the destination folder</param>
 <param name="overwrite">Overwrite destination if a file with the same name already exists</param>
 <returns>The response object with the result of the action</returns></documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="RenameFile">
          <declaration><![CDATA[ItemViewModel RenameFile(int fileID, string newFileName);]]></declaration>
          <documentation>
            <summary>
 Renames a existing file.
 </summary>
 <param name="fileID">File reference to rename</param>
 <param name="newFileName">The new name to set to the file</param>
 <returns>The final renamed file</returns></documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="RenameFolder">
          <declaration><![CDATA[FolderViewModel RenameFolder(int folderID, string newFolderName);]]></declaration>
          <documentation>
            <summary>
 Renames a existing folder.
 </summary>
 <param name="folderID">Folder reference to rename</param>
 <param name="newFolderName">The new name to set to the folder</param>
 <returns>The final moved folder</returns></documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="SearchFolderContent">
          <declaration><![CDATA[PageViewModel SearchFolderContent(int moduleId, int folderId, string pattern, int startIndex, int numItems, string sortExpression);]]></declaration>
          <documentation>
            <summary>
 Searches the files and folders contained in the specified folder.
 </summary>
 <param name="moduleId">The id of the Module</param>
 <param name="folderId">Folder Identifier</param>
 <param name="pattern">The pattern to search for</param>
 <param name="startIndex">Start index to retrieve items</param>
 <param name="numItems">Max Number of items</param>
 <param name="sortExpression">The sort expression in a SQL format, e.g. FileName ASC</param>
 <returns>The list of files and folders contained in the specified folder paginated</returns></documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="SyncFolderContent">
          <declaration><![CDATA[void SyncFolderContent(int folderId, bool recursive);]]></declaration>
          <documentation>
            <summary>
 Synchronize a folder within the File System
 </summary>
 <param name="folderId">Reference to the folder is going to be synchronized</param>
 <param name="recursive">Indicates if subfolders are going to be synchronized</param></documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="UnlinkFolder">
          <declaration><![CDATA[void UnlinkFolder(int folderID);]]></declaration>
          <documentation>
            <summary>
 Unlinks a specified folder
 </summary>
 <param name="folderID">The folder ID to be unlinked</param></documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="UnzipFile">
          <declaration><![CDATA[ZipExtractViewModel UnzipFile(int fileId, bool overwrite);]]></declaration>
          <documentation>
            <summary>
 Extracts the files and folders contained in the specified zip file to the specified folder.
 </summary>
 <param name="fileId">File reference to the source file</param>
 <param name="overwrite">Overwrite destination if a file with the same name already exists</param>
 <returns>The response object with the result of the action</returns></documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="IDigitalAssetsControllerData">
      <declaration><![CDATA[public interface IDigitalAssetsControllerData]]></declaration>
      <documentation>
      </documentation>
      <constructors>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="Edition">
          <declaration><![CDATA[string Edition]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="DotNetNuke.Modules.DigitalAssets.Components.Controllers.Models">
    <class name="CopyMoveItemViewModel">
      <declaration><![CDATA[public class CopyMoveItemViewModel]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public CopyMoveItemViewModel()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="AlreadyExists">
          <declaration><![CDATA[public bool AlreadyExists]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="26" sc="37" el="26" ec="41">Components\Controllers\Models\CopyMoveItemViewModel.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="26" sc="42" el="26" ec="46">Components\Controllers\Models\CopyMoveItemViewModel.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ItemName">
          <declaration><![CDATA[public string ItemName]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="28" sc="34" el="28" ec="38">Components\Controllers\Models\CopyMoveItemViewModel.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="28" sc="39" el="28" ec="43">Components\Controllers\Models\CopyMoveItemViewModel.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="ExtractedItemViewModel">
      <declaration><![CDATA[public class ExtractedItemViewModel]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public ExtractedItemViewModel()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="ErrorMessage">
          <declaration><![CDATA[public string ErrorMessage]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="30" sc="38" el="30" ec="42">Components\Controllers\Models\ExtractedItemViewModel.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="30" sc="43" el="30" ec="56">Components\Controllers\Models\ExtractedItemViewModel.cs</location>
            <body hash="547cefb3c0c83e070f9d7cd0975f10de"><![CDATA[internal set]]></body>
          </codeblock>
        </property>
        <property name="Name">
          <declaration><![CDATA[public string Name]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="28" sc="30" el="28" ec="34">Components\Controllers\Models\ExtractedItemViewModel.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="28" sc="35" el="28" ec="48">Components\Controllers\Models\ExtractedItemViewModel.cs</location>
            <body hash="547cefb3c0c83e070f9d7cd0975f10de"><![CDATA[internal set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="Field">
      <declaration><![CDATA[public class Field]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public Field(string name)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="28" sc="9" el="31" ec="10">Components\Controllers\Models\Field.cs</location>
            <body hash="d2829f9c1a6d1dbe35e1f485ceb3b09a"><![CDATA[public Field(string name)
        {
            Name = name;
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="DisplayName">
          <declaration><![CDATA[public string DisplayName]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="35" sc="37" el="35" ec="41">Components\Controllers\Models\Field.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="35" sc="42" el="35" ec="46">Components\Controllers\Models\Field.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Name">
          <declaration><![CDATA[public string Name]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="33" sc="30" el="33" ec="34">Components\Controllers\Models\Field.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="33" sc="35" el="33" ec="47">Components\Controllers\Models\Field.cs</location>
            <body hash="5dbe2cc086ebbf5db6b03610487cca4c"><![CDATA[private set]]></body>
          </codeblock>
        </property>
        <property name="StringValue">
          <declaration><![CDATA[public string StringValue]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="39" sc="37" el="39" ec="41">Components\Controllers\Models\Field.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="39" sc="42" el="39" ec="46">Components\Controllers\Models\Field.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Type">
          <declaration><![CDATA[public Type Type]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="41" sc="28" el="41" ec="32">Components\Controllers\Models\Field.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="41" sc="33" el="41" ec="37">Components\Controllers\Models\Field.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Value">
          <declaration><![CDATA[public object Value]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="37" sc="31" el="37" ec="35">Components\Controllers\Models\Field.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="37" sc="36" el="37" ec="40">Components\Controllers\Models\Field.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="FolderMappingViewModel">
      <declaration><![CDATA[public class FolderMappingViewModel]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public FolderMappingViewModel()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="FolderTypeName">
          <declaration><![CDATA[public string FolderTypeName]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="32" sc="40" el="32" ec="44">Components\Controllers\Models\FolderMappingViewModel.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="32" sc="45" el="32" ec="49">Components\Controllers\Models\FolderMappingViewModel.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Id">
          <declaration><![CDATA[public int Id]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="28" sc="25" el="28" ec="29">Components\Controllers\Models\FolderMappingViewModel.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="28" sc="30" el="28" ec="34">Components\Controllers\Models\FolderMappingViewModel.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Name">
          <declaration><![CDATA[public string Name]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="30" sc="30" el="30" ec="34">Components\Controllers\Models\FolderMappingViewModel.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="30" sc="35" el="30" ec="39">Components\Controllers\Models\FolderMappingViewModel.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="FolderViewModel">
      <declaration><![CDATA[public class FolderViewModel]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public FolderViewModel()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="28" sc="9" el="31" ec="10">Components\Controllers\Models\FolderViewModel.cs</location>
            <body hash="054b9d34628d033e2354fcd14f206a60"><![CDATA[public FolderViewModel()
        {
            Attributes = new List<KeyValuePair<string, object>>(); 
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="Attributes">
          <declaration><![CDATA[public IList<KeyValuePair<string, object>> Attributes]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="51" sc="65" el="51" ec="69">Components\Controllers\Models\FolderViewModel.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="51" sc="70" el="51" ec="74">Components\Controllers\Models\FolderViewModel.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="FolderID">
          <declaration><![CDATA[public int FolderID]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="33" sc="31" el="33" ec="35">Components\Controllers\Models\FolderViewModel.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="33" sc="36" el="33" ec="40">Components\Controllers\Models\FolderViewModel.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="FolderMappingID">
          <declaration><![CDATA[public int FolderMappingID]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="35" sc="38" el="35" ec="42">Components\Controllers\Models\FolderViewModel.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="35" sc="43" el="35" ec="47">Components\Controllers\Models\FolderViewModel.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="FolderName">
          <declaration><![CDATA[public string FolderName]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="37" sc="36" el="37" ec="40">Components\Controllers\Models\FolderViewModel.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="37" sc="41" el="37" ec="45">Components\Controllers\Models\FolderViewModel.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="FolderPath">
          <declaration><![CDATA[public string FolderPath]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="41" sc="36" el="41" ec="40">Components\Controllers\Models\FolderViewModel.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="41" sc="41" el="41" ec="45">Components\Controllers\Models\FolderViewModel.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="HasChildren">
          <declaration><![CDATA[public bool HasChildren]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="47" sc="35" el="47" ec="39">Components\Controllers\Models\FolderViewModel.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="47" sc="40" el="47" ec="44">Components\Controllers\Models\FolderViewModel.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="IconUrl">
          <declaration><![CDATA[public string IconUrl]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="39" sc="33" el="39" ec="37">Components\Controllers\Models\FolderViewModel.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="39" sc="38" el="39" ec="42">Components\Controllers\Models\FolderViewModel.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="LastModifiedOnDate">
          <declaration><![CDATA[public string LastModifiedOnDate]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="43" sc="44" el="43" ec="48">Components\Controllers\Models\FolderViewModel.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="43" sc="49" el="43" ec="53">Components\Controllers\Models\FolderViewModel.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Permissions">
          <declaration><![CDATA[public IEnumerable<PermissionViewModel> Permissions]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="49" sc="63" el="49" ec="67">Components\Controllers\Models\FolderViewModel.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="49" sc="68" el="49" ec="72">Components\Controllers\Models\FolderViewModel.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="PortalID">
          <declaration><![CDATA[public int PortalID]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="45" sc="31" el="45" ec="35">Components\Controllers\Models\FolderViewModel.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="45" sc="36" el="45" ec="40">Components\Controllers\Models\FolderViewModel.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="ItemBaseViewModel">
      <declaration><![CDATA[public class ItemBaseViewModel]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public ItemBaseViewModel()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="IsFolder">
          <declaration><![CDATA[public bool IsFolder]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="26" sc="32" el="26" ec="36">Components\Controllers\Models\ItemBaseViewModel.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="26" sc="37" el="26" ec="41">Components\Controllers\Models\ItemBaseViewModel.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ItemID">
          <declaration><![CDATA[public int ItemID]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="28" sc="29" el="28" ec="33">Components\Controllers\Models\ItemBaseViewModel.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="28" sc="34" el="28" ec="38">Components\Controllers\Models\ItemBaseViewModel.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="ItemPathViewModel">
      <declaration><![CDATA[public class ItemPathViewModel : ItemBaseViewModel]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public ItemPathViewModel()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="DisplayPath">
          <declaration><![CDATA[public string DisplayPath]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="28" sc="37" el="28" ec="41">Components\Controllers\Models\ItemPathViewModel.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="28" sc="42" el="28" ec="46">Components\Controllers\Models\ItemPathViewModel.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="IconUrl">
          <declaration><![CDATA[public string IconUrl]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="26" sc="33" el="26" ec="37">Components\Controllers\Models\ItemPathViewModel.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="26" sc="38" el="26" ec="42">Components\Controllers\Models\ItemPathViewModel.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="ItemViewModel">
      <declaration><![CDATA[public class ItemViewModel : ItemBaseViewModel]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public ItemViewModel()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="DisplayName">
          <declaration><![CDATA[public string DisplayName]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="33" sc="37" el="33" ec="41">Components\Controllers\Models\ItemViewModel.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="33" sc="42" el="33" ec="46">Components\Controllers\Models\ItemViewModel.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="FolderMappingID">
          <declaration><![CDATA[public int? FolderMappingID]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="47" sc="39" el="47" ec="43">Components\Controllers\Models\ItemViewModel.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="47" sc="44" el="47" ec="48">Components\Controllers\Models\ItemViewModel.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="IconUrl">
          <declaration><![CDATA[public string IconUrl]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="31" sc="33" el="31" ec="37">Components\Controllers\Models\ItemViewModel.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="31" sc="38" el="31" ec="42">Components\Controllers\Models\ItemViewModel.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ItemName">
          <declaration><![CDATA[public string ItemName]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="29" sc="34" el="29" ec="38">Components\Controllers\Models\ItemViewModel.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="29" sc="39" el="29" ec="43">Components\Controllers\Models\ItemViewModel.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="LastModifiedOnDate">
          <declaration><![CDATA[public string LastModifiedOnDate]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="35" sc="44" el="35" ec="48">Components\Controllers\Models\ItemViewModel.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="35" sc="49" el="35" ec="53">Components\Controllers\Models\ItemViewModel.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ParentFolder">
          <declaration><![CDATA[public string ParentFolder]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="41" sc="38" el="41" ec="42">Components\Controllers\Models\ItemViewModel.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="41" sc="43" el="41" ec="47">Components\Controllers\Models\ItemViewModel.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ParentFolderID">
          <declaration><![CDATA[public int ParentFolderID]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="43" sc="37" el="43" ec="41">Components\Controllers\Models\ItemViewModel.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="43" sc="42" el="43" ec="46">Components\Controllers\Models\ItemViewModel.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Permissions">
          <declaration><![CDATA[public IEnumerable<PermissionViewModel> Permissions]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="39" sc="63" el="39" ec="67">Components\Controllers\Models\ItemViewModel.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="39" sc="68" el="39" ec="72">Components\Controllers\Models\ItemViewModel.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="PortalID">
          <declaration><![CDATA[public int PortalID]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="37" sc="31" el="37" ec="35">Components\Controllers\Models\ItemViewModel.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="37" sc="36" el="37" ec="40">Components\Controllers\Models\ItemViewModel.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Size">
          <declaration><![CDATA[public string Size]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="45" sc="30" el="45" ec="34">Components\Controllers\Models\ItemViewModel.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="45" sc="35" el="45" ec="39">Components\Controllers\Models\ItemViewModel.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="UnlinkAllowedStatus">
          <declaration><![CDATA[public string UnlinkAllowedStatus]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="49" sc="45" el="49" ec="49">Components\Controllers\Models\ItemViewModel.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="49" sc="50" el="49" ec="54">Components\Controllers\Models\ItemViewModel.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="PageViewModel">
      <declaration><![CDATA[public class PageViewModel]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public PageViewModel()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="Folder">
          <declaration><![CDATA[public FolderViewModel Folder]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="28" sc="41" el="28" ec="45">Components\Controllers\Models\PageViewModel.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="28" sc="46" el="28" ec="50">Components\Controllers\Models\PageViewModel.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Items">
          <declaration><![CDATA[public ICollection<ItemViewModel> Items]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="30" sc="51" el="30" ec="55">Components\Controllers\Models\PageViewModel.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="30" sc="56" el="30" ec="60">Components\Controllers\Models\PageViewModel.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="TotalCount">
          <declaration><![CDATA[public int TotalCount]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="32" sc="33" el="32" ec="37">Components\Controllers\Models\PageViewModel.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="32" sc="38" el="32" ec="42">Components\Controllers\Models\PageViewModel.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="PermissionViewModel">
      <declaration><![CDATA[public class PermissionViewModel]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public PermissionViewModel()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="Key">
          <declaration><![CDATA[public string Key]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="28" sc="29" el="28" ec="33">Components\Controllers\Models\PermissionViewModel.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="28" sc="34" el="28" ec="38">Components\Controllers\Models\PermissionViewModel.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Value">
          <declaration><![CDATA[public bool Value]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="30" sc="29" el="30" ec="33">Components\Controllers\Models\PermissionViewModel.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="30" sc="34" el="30" ec="38">Components\Controllers\Models\PermissionViewModel.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="PreviewInfoViewModel">
      <declaration><![CDATA[public class PreviewInfoViewModel]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public PreviewInfoViewModel()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
        <field name="Fields">
          <declaration><![CDATA[public List<Field> Fields;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="IsFolder">
          <declaration><![CDATA[public bool IsFolder;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ItemId">
          <declaration><![CDATA[public int ItemId;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="PreviewImageUrl">
          <declaration><![CDATA[public string PreviewImageUrl;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Title">
          <declaration><![CDATA[public string Title;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="ZipExtractViewModel">
      <declaration><![CDATA[public class ZipExtractViewModel]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public ZipExtractViewModel()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="ErrorMessage">
          <declaration><![CDATA[public string ErrorMessage]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="31" sc="38" el="31" ec="42">Components\Controllers\Models\ZipExtractViewModel.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="31" sc="43" el="31" ec="56">Components\Controllers\Models\ZipExtractViewModel.cs</location>
            <body hash="547cefb3c0c83e070f9d7cd0975f10de"><![CDATA[internal set]]></body>
          </codeblock>
        </property>
        <property name="InvalidFiles">
          <declaration><![CDATA[public IList<string> InvalidFiles]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="35" sc="45" el="35" ec="49">Components\Controllers\Models\ZipExtractViewModel.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="35" sc="50" el="35" ec="54">Components\Controllers\Models\ZipExtractViewModel.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Items">
          <declaration><![CDATA[public ICollection<ExtractedItemViewModel> Items]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="33" sc="60" el="33" ec="64">Components\Controllers\Models\ZipExtractViewModel.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="33" sc="65" el="33" ec="78">Components\Controllers\Models\ZipExtractViewModel.cs</location>
            <body hash="547cefb3c0c83e070f9d7cd0975f10de"><![CDATA[internal set]]></body>
          </codeblock>
        </property>
        <property name="Ok">
          <declaration><![CDATA[public bool Ok]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="29" sc="26" el="29" ec="30">Components\Controllers\Models\ZipExtractViewModel.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="29" sc="31" el="29" ec="44">Components\Controllers\Models\ZipExtractViewModel.cs</location>
            <body hash="547cefb3c0c83e070f9d7cd0975f10de"><![CDATA[internal set]]></body>
          </codeblock>
        </property>
        <property name="TotalCount">
          <declaration><![CDATA[public int TotalCount]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="37" sc="33" el="37" ec="37">Components\Controllers\Models\ZipExtractViewModel.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="37" sc="38" el="37" ec="42">Components\Controllers\Models\ZipExtractViewModel.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="DotNetNuke.Modules.DigitalAssets.Components.ExtensionPoint">
    <class name="IFieldsControl">
      <declaration><![CDATA[public interface IFieldsControl]]></declaration>
      <documentation>
      </documentation>
      <constructors>
      </constructors>
      <methods>
        <method name="PrepareProperties">
          <declaration><![CDATA[void PrepareProperties();]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="SaveProperties">
          <declaration><![CDATA[object SaveProperties();]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="SetController">
          <declaration><![CDATA[void SetController(IDigitalAssetsController damController);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="SetItemViewModel">
          <declaration><![CDATA[void SetItemViewModel(ItemViewModel itemViewModel);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="SetPropertiesAvailability">
          <declaration><![CDATA[void SetPropertiesAvailability(bool availability);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="SetPropertiesVisibility">
          <declaration><![CDATA[void SetPropertiesVisibility(bool visibility);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="Controller">
          <declaration><![CDATA[IDigitalAssetsController Controller]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Item">
          <declaration><![CDATA[ItemViewModel Item]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="LocalizationHelper">
      <declaration><![CDATA[public class LocalizationHelper]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public LocalizationHelper()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="GetString">
          <declaration><![CDATA[public static string GetString(string key)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="33" sc="9" el="35" ec="10">Components\ExtensionPoint\LocalizationHelper.cs</location>
            <body hash="169ed4071b601b517a93f2777abe6bf2"><![CDATA[{
            return Localization.GetString(key, ResourceFile);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="ResourceFile">
          <declaration><![CDATA[private const string ResourceFile = "DesktopModules/DigitalAssets/App_LocalResources/SharedResources";]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="PropertiesTabContentControl">
      <declaration><![CDATA[public class PropertiesTabContentControl : PortalModuleBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public PropertiesTabContentControl()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="add_OnItemUpdated">
          <declaration><![CDATA[public void add_OnItemUpdated(PropertiesTabContentControl.ItemUpdatedHandler value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="DataBindItem">
          <declaration><![CDATA[public virtual void DataBindItem()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="43" sc="9" el="44" ec="10">Components\ExtensionPoint\PropertiesTabContentControl.cs</location>
            <body hash="5953526d08633a4e0fe5340a980f7d11"><![CDATA[{            
        }]]></body>
          </codeblock>
        </method>
        <method name="ItemUpdated">
          <declaration><![CDATA[public virtual void ItemUpdated()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="35" sc="9" el="40" ec="10">Components\ExtensionPoint\PropertiesTabContentControl.cs</location>
            <body hash="7c8afc3db41b69ff05f748eb960ba8f2"><![CDATA[{
            if (OnItemUpdated != null)
            {
                OnItemUpdated();
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="remove_OnItemUpdated">
          <declaration><![CDATA[public void remove_OnItemUpdated(PropertiesTabContentControl.ItemUpdatedHandler value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="OnItemUpdated">
          <declaration><![CDATA[private PropertiesTabContentControl.ItemUpdatedHandler OnItemUpdated;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
        <event name="OnItemUpdated">
          <declaration><![CDATA[public event PropertiesTabContentControl.ItemUpdatedHandler OnItemUpdated;]]></declaration>
          <documentation>
          </documentation>
        </event>
      </events>
    </class>
  </namespace>
  <namespace name="DotNetNuke.Modules.DigitalAssets.Components.ExtensionPoint.ToolBarButton">
    <class name="CopyToolBarButtonExtensionPoint">
      <declaration><![CDATA[public class CopyToolBarButtonExtensionPoint : IToolBarButtonExtensionPoint, IExtensionPoint]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public CopyToolBarButtonExtensionPoint()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="Action">
          <declaration><![CDATA[public string Action]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="AltText">
          <declaration><![CDATA[public string AltText]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ButtonId">
          <declaration><![CDATA[public string ButtonId]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="CssClass">
          <declaration><![CDATA[public string CssClass]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Enabled">
          <declaration><![CDATA[public bool Enabled]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Icon">
          <declaration><![CDATA[public string Icon]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ModuleContext">
          <declaration><![CDATA[public ModuleInstanceContext ModuleContext]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="88" sc="54" el="88" ec="58">Components\ExtensionPoint\ToolBarButton\CopyToolBarButtonExtensionPoint.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="88" sc="59" el="88" ec="63">Components\ExtensionPoint\ToolBarButton\CopyToolBarButtonExtensionPoint.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Order">
          <declaration><![CDATA[public int Order]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ShowIcon">
          <declaration><![CDATA[public bool ShowIcon]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ShowText">
          <declaration><![CDATA[public bool ShowText]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Text">
          <declaration><![CDATA[public string Text]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="CreateFolderToolBarButtonExtensionPoint">
      <declaration><![CDATA[public class CreateFolderToolBarButtonExtensionPoint : IToolBarButtonExtensionPoint, IExtensionPoint]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public CreateFolderToolBarButtonExtensionPoint()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="Action">
          <declaration><![CDATA[public string Action]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="AltText">
          <declaration><![CDATA[public string AltText]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ButtonId">
          <declaration><![CDATA[public string ButtonId]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="CssClass">
          <declaration><![CDATA[public string CssClass]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Enabled">
          <declaration><![CDATA[public bool Enabled]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Icon">
          <declaration><![CDATA[public string Icon]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ModuleContext">
          <declaration><![CDATA[public ModuleInstanceContext ModuleContext]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="89" sc="54" el="89" ec="58">Components\ExtensionPoint\ToolBarButton\CreateFolderToolBarButtonExtensionPoint.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="89" sc="59" el="89" ec="63">Components\ExtensionPoint\ToolBarButton\CreateFolderToolBarButtonExtensionPoint.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Order">
          <declaration><![CDATA[public int Order]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ShowIcon">
          <declaration><![CDATA[public bool ShowIcon]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ShowText">
          <declaration><![CDATA[public bool ShowText]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Text">
          <declaration><![CDATA[public string Text]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DefaultMenuButtonItem">
      <declaration><![CDATA[public class DefaultMenuButtonItem : IMenuButtonItemExtensionPoint, IExtensionPoint]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DefaultMenuButtonItem(string itemId, string itemType, string itemCssClass, string itemText, string itemAction, string itemIcon, int itemOrder, string itemAttributes)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="34" sc="9" el="44" ec="10">Components\ExtensionPoint\ToolBarButton\DefaultMenuButtonItem.cs</location>
            <body hash="e075466d385924768e209a2a823dcf6f"><![CDATA[public DefaultMenuButtonItem(string itemId, string itemType, string itemCssClass, string itemText, string itemAction, string itemIcon, int itemOrder, string itemAttributes)
        {
            ItemId = itemId;
            Attributes = itemAttributes;
            Type = itemType;
            Text = itemText;
            Icon = itemIcon;
            Order = itemOrder;
            CssClass = itemCssClass;
            Action = itemAction;
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="Action">
          <declaration><![CDATA[public string Action]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="58" sc="32" el="58" ec="36">Components\ExtensionPoint\ToolBarButton\DefaultMenuButtonItem.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="58" sc="37" el="58" ec="49">Components\ExtensionPoint\ToolBarButton\DefaultMenuButtonItem.cs</location>
            <body hash="5dbe2cc086ebbf5db6b03610487cca4c"><![CDATA[private set]]></body>
          </codeblock>
        </property>
        <property name="Attributes">
          <declaration><![CDATA[public string Attributes]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="48" sc="36" el="48" ec="40">Components\ExtensionPoint\ToolBarButton\DefaultMenuButtonItem.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="48" sc="41" el="48" ec="53">Components\ExtensionPoint\ToolBarButton\DefaultMenuButtonItem.cs</location>
            <body hash="5dbe2cc086ebbf5db6b03610487cca4c"><![CDATA[private set]]></body>
          </codeblock>
        </property>
        <property name="CssClass">
          <declaration><![CDATA[public string CssClass]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="60" sc="34" el="60" ec="38">Components\ExtensionPoint\ToolBarButton\DefaultMenuButtonItem.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="60" sc="39" el="60" ec="51">Components\ExtensionPoint\ToolBarButton\DefaultMenuButtonItem.cs</location>
            <body hash="5dbe2cc086ebbf5db6b03610487cca4c"><![CDATA[private set]]></body>
          </codeblock>
        </property>
        <property name="Icon">
          <declaration><![CDATA[public string Icon]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="54" sc="30" el="54" ec="34">Components\ExtensionPoint\ToolBarButton\DefaultMenuButtonItem.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="54" sc="35" el="54" ec="47">Components\ExtensionPoint\ToolBarButton\DefaultMenuButtonItem.cs</location>
            <body hash="5dbe2cc086ebbf5db6b03610487cca4c"><![CDATA[private set]]></body>
          </codeblock>
        </property>
        <property name="ItemId">
          <declaration><![CDATA[public string ItemId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="46" sc="32" el="46" ec="36">Components\ExtensionPoint\ToolBarButton\DefaultMenuButtonItem.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="46" sc="37" el="46" ec="49">Components\ExtensionPoint\ToolBarButton\DefaultMenuButtonItem.cs</location>
            <body hash="5dbe2cc086ebbf5db6b03610487cca4c"><![CDATA[private set]]></body>
          </codeblock>
        </property>
        <property name="ModuleContext">
          <declaration><![CDATA[public ModuleInstanceContext ModuleContext]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="67" sc="54" el="67" ec="58">Components\ExtensionPoint\ToolBarButton\DefaultMenuButtonItem.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="67" sc="59" el="67" ec="63">Components\ExtensionPoint\ToolBarButton\DefaultMenuButtonItem.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Order">
          <declaration><![CDATA[public int Order]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="56" sc="28" el="56" ec="32">Components\ExtensionPoint\ToolBarButton\DefaultMenuButtonItem.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="56" sc="33" el="56" ec="45">Components\ExtensionPoint\ToolBarButton\DefaultMenuButtonItem.cs</location>
            <body hash="5dbe2cc086ebbf5db6b03610487cca4c"><![CDATA[private set]]></body>
          </codeblock>
        </property>
        <property name="Text">
          <declaration><![CDATA[public string Text]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="52" sc="30" el="52" ec="34">Components\ExtensionPoint\ToolBarButton\DefaultMenuButtonItem.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="52" sc="35" el="52" ec="47">Components\ExtensionPoint\ToolBarButton\DefaultMenuButtonItem.cs</location>
            <body hash="5dbe2cc086ebbf5db6b03610487cca4c"><![CDATA[private set]]></body>
          </codeblock>
        </property>
        <property name="Type">
          <declaration><![CDATA[public string Type]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="50" sc="30" el="50" ec="34">Components\ExtensionPoint\ToolBarButton\DefaultMenuButtonItem.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="50" sc="35" el="50" ec="47">Components\ExtensionPoint\ToolBarButton\DefaultMenuButtonItem.cs</location>
            <body hash="5dbe2cc086ebbf5db6b03610487cca4c"><![CDATA[private set]]></body>
          </codeblock>
        </property>
        <property name="Visible">
          <declaration><![CDATA[public bool Visible]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DeleteToolBarButtonExtensionPoint">
      <declaration><![CDATA[public class DeleteToolBarButtonExtensionPoint : IToolBarButtonExtensionPoint, IExtensionPoint]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DeleteToolBarButtonExtensionPoint()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="Action">
          <declaration><![CDATA[public string Action]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="AltText">
          <declaration><![CDATA[public string AltText]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ButtonId">
          <declaration><![CDATA[public string ButtonId]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="CssClass">
          <declaration><![CDATA[public string CssClass]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Enabled">
          <declaration><![CDATA[public bool Enabled]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Icon">
          <declaration><![CDATA[public string Icon]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ModuleContext">
          <declaration><![CDATA[public ModuleInstanceContext ModuleContext]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="89" sc="54" el="89" ec="58">Components\ExtensionPoint\ToolBarButton\DeleteToolBarButtonExtensionPoint.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="89" sc="59" el="89" ec="63">Components\ExtensionPoint\ToolBarButton\DeleteToolBarButtonExtensionPoint.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Order">
          <declaration><![CDATA[public int Order]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ShowIcon">
          <declaration><![CDATA[public bool ShowIcon]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ShowText">
          <declaration><![CDATA[public bool ShowText]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Text">
          <declaration><![CDATA[public string Text]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DownloadToolBarButtonExtensionPoint">
      <declaration><![CDATA[public class DownloadToolBarButtonExtensionPoint : IToolBarButtonExtensionPoint, IExtensionPoint]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DownloadToolBarButtonExtensionPoint()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="Action">
          <declaration><![CDATA[public string Action]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="AltText">
          <declaration><![CDATA[public string AltText]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ButtonId">
          <declaration><![CDATA[public string ButtonId]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="CssClass">
          <declaration><![CDATA[public string CssClass]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Enabled">
          <declaration><![CDATA[public bool Enabled]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Icon">
          <declaration><![CDATA[public string Icon]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ModuleContext">
          <declaration><![CDATA[public ModuleInstanceContext ModuleContext]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="89" sc="54" el="89" ec="58">Components\ExtensionPoint\ToolBarButton\DownloadToolbarButtonExtensionPoint.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="89" sc="59" el="89" ec="63">Components\ExtensionPoint\ToolBarButton\DownloadToolbarButtonExtensionPoint.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Order">
          <declaration><![CDATA[public int Order]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ShowIcon">
          <declaration><![CDATA[public bool ShowIcon]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ShowText">
          <declaration><![CDATA[public bool ShowText]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Text">
          <declaration><![CDATA[public string Text]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="GetUrlToolBarButtonExtensionPoint">
      <declaration><![CDATA[public class GetUrlToolBarButtonExtensionPoint : IToolBarButtonExtensionPoint, IExtensionPoint]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public GetUrlToolBarButtonExtensionPoint()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="Action">
          <declaration><![CDATA[public string Action]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="AltText">
          <declaration><![CDATA[public string AltText]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ButtonId">
          <declaration><![CDATA[public string ButtonId]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="CssClass">
          <declaration><![CDATA[public string CssClass]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Enabled">
          <declaration><![CDATA[public bool Enabled]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Icon">
          <declaration><![CDATA[public string Icon]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ModuleContext">
          <declaration><![CDATA[public ModuleInstanceContext ModuleContext]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="88" sc="54" el="88" ec="58">Components\ExtensionPoint\ToolBarButton\GetUrlToolbarButtonExtensionPoint.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="88" sc="59" el="88" ec="63">Components\ExtensionPoint\ToolBarButton\GetUrlToolbarButtonExtensionPoint.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Order">
          <declaration><![CDATA[public int Order]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ShowIcon">
          <declaration><![CDATA[public bool ShowIcon]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ShowText">
          <declaration><![CDATA[public bool ShowText]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Text">
          <declaration><![CDATA[public string Text]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="GridViewToolBarButtonExtensionPoint">
      <declaration><![CDATA[public class GridViewToolBarButtonExtensionPoint : IToolBarButtonExtensionPoint, IExtensionPoint]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public GridViewToolBarButtonExtensionPoint()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="Action">
          <declaration><![CDATA[public string Action]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="AltText">
          <declaration><![CDATA[public string AltText]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ButtonId">
          <declaration><![CDATA[public string ButtonId]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="CssClass">
          <declaration><![CDATA[public string CssClass]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Enabled">
          <declaration><![CDATA[public bool Enabled]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Icon">
          <declaration><![CDATA[public string Icon]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ModuleContext">
          <declaration><![CDATA[public ModuleInstanceContext ModuleContext]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="88" sc="54" el="88" ec="58">Components\ExtensionPoint\ToolBarButton\GridViewToolBarButtonExtensionPoint.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="88" sc="59" el="88" ec="63">Components\ExtensionPoint\ToolBarButton\GridViewToolBarButtonExtensionPoint.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Order">
          <declaration><![CDATA[public int Order]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ShowIcon">
          <declaration><![CDATA[public bool ShowIcon]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ShowText">
          <declaration><![CDATA[public bool ShowText]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Text">
          <declaration><![CDATA[public string Text]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="ListViewToolBarButtonExtensionPoint">
      <declaration><![CDATA[public class ListViewToolBarButtonExtensionPoint : IToolBarButtonExtensionPoint, IExtensionPoint]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public ListViewToolBarButtonExtensionPoint()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="Action">
          <declaration><![CDATA[public string Action]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="AltText">
          <declaration><![CDATA[public string AltText]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ButtonId">
          <declaration><![CDATA[public string ButtonId]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="CssClass">
          <declaration><![CDATA[public string CssClass]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Enabled">
          <declaration><![CDATA[public bool Enabled]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Icon">
          <declaration><![CDATA[public string Icon]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ModuleContext">
          <declaration><![CDATA[public ModuleInstanceContext ModuleContext]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="88" sc="54" el="88" ec="58">Components\ExtensionPoint\ToolBarButton\ListViewToolBarButtonExtensionPoint.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="88" sc="59" el="88" ec="63">Components\ExtensionPoint\ToolBarButton\ListViewToolBarButtonExtensionPoint.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Order">
          <declaration><![CDATA[public int Order]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ShowIcon">
          <declaration><![CDATA[public bool ShowIcon]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ShowText">
          <declaration><![CDATA[public bool ShowText]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Text">
          <declaration><![CDATA[public string Text]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="ManageFolderTypesToolBarButtonExtensionPoint">
      <declaration><![CDATA[public class ManageFolderTypesToolBarButtonExtensionPoint : IToolBarButtonExtensionPoint, IExtensionPoint]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public ManageFolderTypesToolBarButtonExtensionPoint()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="Action">
          <declaration><![CDATA[public string Action]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="54" sc="13" el="68" ec="14">Components\ExtensionPoint\ToolBarButton\ManageFolderTypesToolBarButtonExtensionPoint.cs</location>
            <body hash="d7124267eeac4d454e1141ea3e45bf44"><![CDATA[{
                if (ModuleContext == null)
                {
                    return string.Empty;
                }

	            if (PortalSettings.Current.EnablePopUps)
	            {
		            return ModuleContext.EditUrl("FolderMappings");
	            }
	            else
	            {
		            return string.Format("location.href = '{0}';", ModuleContext.EditUrl("FolderMappings"));
	            }
            }]]></body>
          </codeblock>
        </property>
        <property name="AltText">
          <declaration><![CDATA[public string AltText]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ButtonId">
          <declaration><![CDATA[public string ButtonId]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="CssClass">
          <declaration><![CDATA[public string CssClass]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Enabled">
          <declaration><![CDATA[public bool Enabled]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="103" sc="17" el="104" ec="104">Components\ExtensionPoint\ToolBarButton\ManageFolderTypesToolBarButtonExtensionPoint.cs</location>
            <body hash="14a8145b0fc64b5035673efbaf8fdfd2"><![CDATA[{ return ModuleContext != null
                            && ModulePermissionController.CanManageModule(ModuleContext.Configuration);]]></body>
          </codeblock>
        </property>
        <property name="Icon">
          <declaration><![CDATA[public string Icon]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ModuleContext">
          <declaration><![CDATA[public ModuleInstanceContext ModuleContext]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="107" sc="54" el="107" ec="58">Components\ExtensionPoint\ToolBarButton\ManageFolderTypesToolBarButtonExtensionPoint.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="107" sc="59" el="107" ec="63">Components\ExtensionPoint\ToolBarButton\ManageFolderTypesToolBarButtonExtensionPoint.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Order">
          <declaration><![CDATA[public int Order]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ShowIcon">
          <declaration><![CDATA[public bool ShowIcon]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ShowText">
          <declaration><![CDATA[public bool ShowText]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Text">
          <declaration><![CDATA[public string Text]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="MoveToolBarButtonExtensionPoint">
      <declaration><![CDATA[public class MoveToolBarButtonExtensionPoint : IToolBarButtonExtensionPoint, IExtensionPoint]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public MoveToolBarButtonExtensionPoint()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="Action">
          <declaration><![CDATA[public string Action]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="AltText">
          <declaration><![CDATA[public string AltText]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ButtonId">
          <declaration><![CDATA[public string ButtonId]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="CssClass">
          <declaration><![CDATA[public string CssClass]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Enabled">
          <declaration><![CDATA[public bool Enabled]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Icon">
          <declaration><![CDATA[public string Icon]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ModuleContext">
          <declaration><![CDATA[public ModuleInstanceContext ModuleContext]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="88" sc="54" el="88" ec="58">Components\ExtensionPoint\ToolBarButton\MoveToolBarButtonExtensionPoint.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="88" sc="59" el="88" ec="63">Components\ExtensionPoint\ToolBarButton\MoveToolBarButtonExtensionPoint.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Order">
          <declaration><![CDATA[public int Order]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ShowIcon">
          <declaration><![CDATA[public bool ShowIcon]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ShowText">
          <declaration><![CDATA[public bool ShowText]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Text">
          <declaration><![CDATA[public string Text]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="RenameToolBarButtonExtensionPoint">
      <declaration><![CDATA[public class RenameToolBarButtonExtensionPoint : IToolBarButtonExtensionPoint, IExtensionPoint]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public RenameToolBarButtonExtensionPoint()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="Action">
          <declaration><![CDATA[public string Action]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="AltText">
          <declaration><![CDATA[public string AltText]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ButtonId">
          <declaration><![CDATA[public string ButtonId]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="CssClass">
          <declaration><![CDATA[public string CssClass]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Enabled">
          <declaration><![CDATA[public bool Enabled]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Icon">
          <declaration><![CDATA[public string Icon]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ModuleContext">
          <declaration><![CDATA[public ModuleInstanceContext ModuleContext]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="89" sc="54" el="89" ec="58">Components\ExtensionPoint\ToolBarButton\RenameToolbarButtonExtensionPoint.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="89" sc="59" el="89" ec="63">Components\ExtensionPoint\ToolBarButton\RenameToolbarButtonExtensionPoint.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Order">
          <declaration><![CDATA[public int Order]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ShowIcon">
          <declaration><![CDATA[public bool ShowIcon]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ShowText">
          <declaration><![CDATA[public bool ShowText]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Text">
          <declaration><![CDATA[public string Text]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="SyncToolBarButtonExtensionPoint">
      <declaration><![CDATA[public class SyncToolBarButtonExtensionPoint : IToolBarButtonExtensionPoint, IExtensionPoint]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public SyncToolBarButtonExtensionPoint()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="Action">
          <declaration><![CDATA[public string Action]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="AltText">
          <declaration><![CDATA[public string AltText]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ButtonId">
          <declaration><![CDATA[public string ButtonId]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="CssClass">
          <declaration><![CDATA[public string CssClass]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Enabled">
          <declaration><![CDATA[public bool Enabled]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Icon">
          <declaration><![CDATA[public string Icon]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ModuleContext">
          <declaration><![CDATA[public ModuleInstanceContext ModuleContext]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="89" sc="54" el="89" ec="58">Components\ExtensionPoint\ToolBarButton\SyncToolBarButtonExtensionPoint.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="89" sc="59" el="89" ec="63">Components\ExtensionPoint\ToolBarButton\SyncToolBarButtonExtensionPoint.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Order">
          <declaration><![CDATA[public int Order]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ShowIcon">
          <declaration><![CDATA[public bool ShowIcon]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ShowText">
          <declaration><![CDATA[public bool ShowText]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Text">
          <declaration><![CDATA[public string Text]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="SyncToolBarMenuButtonExtensionPoint">
      <declaration><![CDATA[public class SyncToolBarMenuButtonExtensionPoint : IToolBarMenuButtonExtensionPoint, IToolBarButtonExtensionPoint, IExtensionPoint]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public SyncToolBarMenuButtonExtensionPoint()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="Action">
          <declaration><![CDATA[public string Action]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="78" sc="13" el="80" ec="14">Components\ExtensionPoint\ToolBarButton\SyncToolBarMenuButtonExtensionPoint.cs</location>
            <body hash="a666d47702590803494c3dbdc3f5c9ca"><![CDATA[{
                return "dnnModule.digitalAssets.onOpeningRefreshMenu()";
            }]]></body>
          </codeblock>
        </property>
        <property name="AltText">
          <declaration><![CDATA[public string AltText]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="86" sc="13" el="88" ec="14">Components\ExtensionPoint\ToolBarButton\SyncToolBarMenuButtonExtensionPoint.cs</location>
            <body hash="5a1eeece76c1b303b1adb21fcb02f2b4"><![CDATA[{
                return LocalizationHelper.GetString("SyncToolBarMenuButtonExtensionPoint.AltText");
            }]]></body>
          </codeblock>
        </property>
        <property name="ButtonId">
          <declaration><![CDATA[public string ButtonId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="54" sc="13" el="56" ec="14">Components\ExtensionPoint\ToolBarButton\SyncToolBarMenuButtonExtensionPoint.cs</location>
            <body hash="112b8fdde2a8d3d1872febc1ee2c3c8e"><![CDATA[{
                return "DigitalAssetsSyncFolderMenuBtnId";
            }]]></body>
          </codeblock>
        </property>
        <property name="CssClass">
          <declaration><![CDATA[public string CssClass]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="62" sc="13" el="64" ec="14">Components\ExtensionPoint\ToolBarButton\SyncToolBarMenuButtonExtensionPoint.cs</location>
            <body hash="caecddf1b8c8229e792614f9bc8d6800"><![CDATA[{
                return "rightButton leftAligned permission_READ permission_BROWSE";
            }]]></body>
          </codeblock>
        </property>
        <property name="Enabled">
          <declaration><![CDATA[public bool Enabled]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Icon">
          <declaration><![CDATA[public string Icon]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="118" sc="13" el="120" ec="14">Components\ExtensionPoint\ToolBarButton\SyncToolBarMenuButtonExtensionPoint.cs</location>
            <body hash="f16f4e0ecd95d0f47430b9767210d344"><![CDATA[{
                return "/DesktopModules/DigitalAssets/Images/down.png";
            }]]></body>
          </codeblock>
        </property>
        <property name="Items">
          <declaration><![CDATA[public List<IMenuButtonItemExtensionPoint> Items]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="41" sc="13" el="48" ec="14">Components\ExtensionPoint\ToolBarButton\SyncToolBarMenuButtonExtensionPoint.cs</location>
            <body hash="cdd392f9665f3da2e5d66e4c4b1ded12"><![CDATA[{ 
                return new List<IMenuButtonItemExtensionPoint>
                {
                    new DefaultMenuButtonItem("Refresh", "", "first permission_READ permission_BROWSE", LocalizationHelper.GetString("RefreshMenuItemExtensionPoint.Text"), "dnnModule.digitalAssets.refresFolderFromMenu()", "", 0, ""), 
                    new DefaultMenuButtonItem("Sync", "", "medium permission_MANAGE permission_WRITE", LocalizationHelper.GetString("SyncMenuItemExtensionPoint.Text"), "dnnModule.digitalAssets.syncFromMenu(false)", "", 0, ""), 
                    new DefaultMenuButtonItem("SyncRecursively", "", "last permission_MANAGE permission_WRITE", LocalizationHelper.GetString("SyncRecursivelyMenuItemExtensionPoint.Text"), "dnnModule.digitalAssets.syncFromMenu(true)", "", 0, "")
                }; 
            }]]></body>
          </codeblock>
        </property>
        <property name="MenuCssClass">
          <declaration><![CDATA[public string MenuCssClass]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="70" sc="13" el="72" ec="14">Components\ExtensionPoint\ToolBarButton\SyncToolBarMenuButtonExtensionPoint.cs</location>
            <body hash="16df3b6a5672810f92bfb460d22097ea"><![CDATA[{
                return "DigitalAssetsMenuButton";
            }]]></body>
          </codeblock>
        </property>
        <property name="ModuleContext">
          <declaration><![CDATA[public ModuleInstanceContext ModuleContext]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="136" sc="54" el="136" ec="58">Components\ExtensionPoint\ToolBarButton\SyncToolBarMenuButtonExtensionPoint.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="136" sc="59" el="136" ec="63">Components\ExtensionPoint\ToolBarButton\SyncToolBarMenuButtonExtensionPoint.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Order">
          <declaration><![CDATA[public int Order]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="126" sc="13" el="128" ec="14">Components\ExtensionPoint\ToolBarButton\SyncToolBarMenuButtonExtensionPoint.cs</location>
            <body hash="2a1a2f25979902d910e060c5f22df56d"><![CDATA[{
                return 5; 
            }]]></body>
          </codeblock>
        </property>
        <property name="ShowIcon">
          <declaration><![CDATA[public bool ShowIcon]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="102" sc="13" el="104" ec="14">Components\ExtensionPoint\ToolBarButton\SyncToolBarMenuButtonExtensionPoint.cs</location>
            <body hash="f5368e81f663038061ec388beff126aa"><![CDATA[{
                return true;
            }]]></body>
          </codeblock>
        </property>
        <property name="ShowText">
          <declaration><![CDATA[public bool ShowText]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="94" sc="13" el="96" ec="14">Components\ExtensionPoint\ToolBarButton\SyncToolBarMenuButtonExtensionPoint.cs</location>
            <body hash="479cced518a49e9e626d5350fca9bbad"><![CDATA[{
                return false;
            }]]></body>
          </codeblock>
        </property>
        <property name="Text">
          <declaration><![CDATA[public string Text]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="110" sc="13" el="112" ec="14">Components\ExtensionPoint\ToolBarButton\SyncToolBarMenuButtonExtensionPoint.cs</location>
            <body hash="4f3bfa9d9e57f3a414d771a5137b7e18"><![CDATA[{
                return LocalizationHelper.GetString("SyncToolBarMenuButtonExtensionPoint.Text");
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="ToggleLeftPaneToolBarButtonExtensionPoint">
      <declaration><![CDATA[public class ToggleLeftPaneToolBarButtonExtensionPoint : IToolBarButtonExtensionPoint, IExtensionPoint]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public ToggleLeftPaneToolBarButtonExtensionPoint()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="Action">
          <declaration><![CDATA[public string Action]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="AltText">
          <declaration><![CDATA[public string AltText]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ButtonId">
          <declaration><![CDATA[public string ButtonId]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="CssClass">
          <declaration><![CDATA[public string CssClass]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Enabled">
          <declaration><![CDATA[public bool Enabled]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Icon">
          <declaration><![CDATA[public string Icon]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ModuleContext">
          <declaration><![CDATA[public ModuleInstanceContext ModuleContext]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="89" sc="54" el="89" ec="58">Components\ExtensionPoint\ToolBarButton\ToggleLeftPaneToolBarButtonExtensionPoint.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="89" sc="59" el="89" ec="63">Components\ExtensionPoint\ToolBarButton\ToggleLeftPaneToolBarButtonExtensionPoint.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Order">
          <declaration><![CDATA[public int Order]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ShowIcon">
          <declaration><![CDATA[public bool ShowIcon]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ShowText">
          <declaration><![CDATA[public bool ShowText]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Text">
          <declaration><![CDATA[public string Text]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="UnlinkToolBarButtonExtensionPoint">
      <declaration><![CDATA[public class UnlinkToolBarButtonExtensionPoint : IToolBarButtonExtensionPoint, IExtensionPoint]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public UnlinkToolBarButtonExtensionPoint()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="Action">
          <declaration><![CDATA[public string Action]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="AltText">
          <declaration><![CDATA[public string AltText]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ButtonId">
          <declaration><![CDATA[public string ButtonId]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="CssClass">
          <declaration><![CDATA[public string CssClass]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Enabled">
          <declaration><![CDATA[public bool Enabled]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Icon">
          <declaration><![CDATA[public string Icon]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ModuleContext">
          <declaration><![CDATA[public ModuleInstanceContext ModuleContext]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="88" sc="54" el="88" ec="58">Components\ExtensionPoint\ToolBarButton\UnlinkToolbarButtonExtensionPoint.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="88" sc="59" el="88" ec="63">Components\ExtensionPoint\ToolBarButton\UnlinkToolbarButtonExtensionPoint.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Order">
          <declaration><![CDATA[public int Order]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ShowIcon">
          <declaration><![CDATA[public bool ShowIcon]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ShowText">
          <declaration><![CDATA[public bool ShowText]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Text">
          <declaration><![CDATA[public string Text]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="UnzipFileToolBarButtonExtensionPoint">
      <declaration><![CDATA[public class UnzipFileToolBarButtonExtensionPoint : IToolBarButtonExtensionPoint, IExtensionPoint]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public UnzipFileToolBarButtonExtensionPoint()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="Action">
          <declaration><![CDATA[public string Action]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="AltText">
          <declaration><![CDATA[public string AltText]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ButtonId">
          <declaration><![CDATA[public string ButtonId]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="CssClass">
          <declaration><![CDATA[public string CssClass]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Enabled">
          <declaration><![CDATA[public bool Enabled]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Icon">
          <declaration><![CDATA[public string Icon]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="77" sc="13" el="79" ec="14">Components\ExtensionPoint\ToolBarButton\UnzipFileToolBarButtonExtensionPoint.cs</location>
            <body hash="b90ec653ea6b380c2d9ba663d5e3730e"><![CDATA[{
                return IconController.IconURL("Unzip", "16x16", "Gray"); 
            }]]></body>
          </codeblock>
        </property>
        <property name="ModuleContext">
          <declaration><![CDATA[public ModuleInstanceContext ModuleContext]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="92" sc="54" el="92" ec="58">Components\ExtensionPoint\ToolBarButton\UnzipFileToolBarButtonExtensionPoint.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="92" sc="59" el="92" ec="63">Components\ExtensionPoint\ToolBarButton\UnzipFileToolBarButtonExtensionPoint.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Order">
          <declaration><![CDATA[public int Order]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ShowIcon">
          <declaration><![CDATA[public bool ShowIcon]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ShowText">
          <declaration><![CDATA[public bool ShowText]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Text">
          <declaration><![CDATA[public string Text]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="UploadFilesToolBarButtonExtensionPoint">
      <declaration><![CDATA[public class UploadFilesToolBarButtonExtensionPoint : IToolBarButtonExtensionPoint, IExtensionPoint]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public UploadFilesToolBarButtonExtensionPoint()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="Action">
          <declaration><![CDATA[public string Action]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="AltText">
          <declaration><![CDATA[public string AltText]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ButtonId">
          <declaration><![CDATA[public string ButtonId]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="CssClass">
          <declaration><![CDATA[public string CssClass]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Enabled">
          <declaration><![CDATA[public bool Enabled]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Icon">
          <declaration><![CDATA[public string Icon]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ModuleContext">
          <declaration><![CDATA[public ModuleInstanceContext ModuleContext]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="88" sc="54" el="88" ec="58">Components\ExtensionPoint\ToolBarButton\UploadFilesToolbarButtonExtensionPoint.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="88" sc="59" el="88" ec="63">Components\ExtensionPoint\ToolBarButton\UploadFilesToolbarButtonExtensionPoint.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Order">
          <declaration><![CDATA[public int Order]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ShowIcon">
          <declaration><![CDATA[public bool ShowIcon]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ShowText">
          <declaration><![CDATA[public bool ShowText]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Text">
          <declaration><![CDATA[public string Text]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="ViewPropertiesSelectionToolBarButtonExtensionPoint">
      <declaration><![CDATA[public class ViewPropertiesSelectionToolBarButtonExtensionPoint : IToolBarButtonExtensionPoint, IExtensionPoint]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public ViewPropertiesSelectionToolBarButtonExtensionPoint()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="Action">
          <declaration><![CDATA[public string Action]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="AltText">
          <declaration><![CDATA[public string AltText]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ButtonId">
          <declaration><![CDATA[public string ButtonId]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="CssClass">
          <declaration><![CDATA[public string CssClass]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Enabled">
          <declaration><![CDATA[public bool Enabled]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Icon">
          <declaration><![CDATA[public string Icon]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="77" sc="13" el="79" ec="14">Components\ExtensionPoint\ToolBarButton\ViewPropertiesSelectionToolBarButtonExtensionPoint.cs</location>
            <body hash="668708b7b86125a25e40eaf25757de69"><![CDATA[{
                return IconController.IconURL("ViewProperties", "16x16", "ToolBar");
            }]]></body>
          </codeblock>
        </property>
        <property name="ModuleContext">
          <declaration><![CDATA[public ModuleInstanceContext ModuleContext]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="92" sc="54" el="92" ec="58">Components\ExtensionPoint\ToolBarButton\ViewPropertiesSelectionToolBarButtonExtensionPoint.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="92" sc="59" el="92" ec="63">Components\ExtensionPoint\ToolBarButton\ViewPropertiesSelectionToolBarButtonExtensionPoint.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Order">
          <declaration><![CDATA[public int Order]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ShowIcon">
          <declaration><![CDATA[public bool ShowIcon]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ShowText">
          <declaration><![CDATA[public bool ShowText]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Text">
          <declaration><![CDATA[public string Text]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="DotNetNuke.Modules.DigitalAssets.Components.ExtensionPoint.UserControls">
    <class name="FileFieldsControlExtensionPoint">
      <declaration><![CDATA[public class FileFieldsControlExtensionPoint : IUserControlExtensionPoint, IExtensionPoint]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public FileFieldsControlExtensionPoint()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="Icon">
          <declaration><![CDATA[public string Icon]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Order">
          <declaration><![CDATA[public int Order]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Text">
          <declaration><![CDATA[public string Text]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="UserControlSrc">
          <declaration><![CDATA[public string UserControlSrc]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Visible">
          <declaration><![CDATA[public bool Visible]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="PreviewInfoPanelExtensionPoint">
      <declaration><![CDATA[public class PreviewInfoPanelExtensionPoint : IUserControlExtensionPoint, IExtensionPoint]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public PreviewInfoPanelExtensionPoint()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="Icon">
          <declaration><![CDATA[public string Icon]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Order">
          <declaration><![CDATA[public int Order]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Text">
          <declaration><![CDATA[public string Text]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="UserControlSrc">
          <declaration><![CDATA[public string UserControlSrc]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Visible">
          <declaration><![CDATA[public bool Visible]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="SearchBoxExtensionPoint">
      <declaration><![CDATA[public class SearchBoxExtensionPoint : IUserControlExtensionPoint, IExtensionPoint]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public SearchBoxExtensionPoint()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="Icon">
          <declaration><![CDATA[public string Icon]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Order">
          <declaration><![CDATA[public int Order]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Text">
          <declaration><![CDATA[public string Text]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="UserControlSrc">
          <declaration><![CDATA[public string UserControlSrc]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Visible">
          <declaration><![CDATA[public bool Visible]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="DotNetNuke.Modules.DigitalAssets.Services">
    <class name="ContentServiceController">
      <declaration><![CDATA[public class ContentServiceController : DnnApiController]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public ContentServiceController()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="44" sc="9" el="48" ec="10">Services\ContentServiceController.cs</location>
            <body hash="cc443919b178f31e0fb93bb078733487"><![CDATA[public ContentServiceController()
        {
            var f = new Factory();
            DigitalAssetsController = f.DigitalAssetsController;
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".cctor">
          <declaration><![CDATA[static ContentServiceController()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="42" sc="9" el="42" ec="115">Services\ContentServiceController.cs</location>
            <body hash="89f4d6612ca8fbd62a5ee3bb0955b8f0"><![CDATA[protected static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof(ContentServiceController))]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="CopyFile">
          <declaration><![CDATA[public HttpResponseMessage CopyFile(CopyMoveItemRequest request)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="113" sc="9" el="116" ec="10">Services\ContentServiceController.cs</location>
            <body hash="66aac1891bac199e83e5da6fc89f03b3"><![CDATA[{
            var copyFileResponse = DigitalAssetsController.CopyFile(request.ItemId, request.DestinationFolderId, request.Overwrite);
            return Request.CreateResponse(HttpStatusCode.OK, copyFileResponse);
        }]]></body>
          </codeblock>
        </method>
        <method name="CreateNewFolder">
          <declaration><![CDATA[public HttpResponseMessage CreateNewFolder(CreateNewFolderRequest request)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="154" sc="9" el="158" ec="10">Services\ContentServiceController.cs</location>
            <body hash="084eb1bae1d48b538af3ac4c4ae1c81f"><![CDATA[{
            var folder = DigitalAssetsController.CreateFolder(request.FolderName, request.ParentFolderId,
                request.FolderMappingId, request.MappedName);
            return Request.CreateResponse(HttpStatusCode.OK, folder);
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteItems">
          <declaration><![CDATA[public HttpResponseMessage DeleteItems(DeleteItemsRequest request)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="73" sc="9" el="76" ec="10">Services\ContentServiceController.cs</location>
            <body hash="9b06e9efba148494a12fa41ec974b9e1"><![CDATA[{
            var notDeletedItems = DigitalAssetsController.DeleteItems(request.Items);
            return Request.CreateResponse(HttpStatusCode.OK, notDeletedItems);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetFolderContent">
          <declaration><![CDATA[public HttpResponseMessage GetFolderContent(GetFolderContentRequest r)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="55" sc="9" el="59" ec="10">Services\ContentServiceController.cs</location>
            <body hash="49b4f3d377fd511707ddf00802683978"><![CDATA[{
            var moduleId = Request.FindModuleId();
            var p = DigitalAssetsController.GetFolderContent(moduleId, r.FolderId, r.StartIndex, r.NumItems, r.SortExpression);
            return Request.CreateResponse(HttpStatusCode.OK, p);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetMappedSubfoldersCount">
          <declaration><![CDATA[public HttpResponseMessage GetMappedSubfoldersCount(MappedPathSubFoldersCountRequest request)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="89" sc="9" el="92" ec="10">Services\ContentServiceController.cs</location>
            <body hash="813caae4ba432ec062039a8220467915"><![CDATA[{
            var mappedSubfoldersCount = DigitalAssetsController.GetMappedSubFoldersCount(request.Items, PortalSettings.PortalId);
            return Request.CreateResponse(HttpStatusCode.OK, mappedSubfoldersCount);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetSubFolders">
          <declaration><![CDATA[public HttpResponseMessage GetSubFolders(GetSubFolderRequest request)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="137" sc="9" el="141" ec="10">Services\ContentServiceController.cs</location>
            <body hash="a68dc1c1730043c2899a2cb5ba25c51b"><![CDATA[{
            var moduleId = Request.FindModuleId();
            var subFolders = DigitalAssetsController.GetFolders(moduleId, request.FolderId).ToList();
            return Request.CreateResponse(HttpStatusCode.OK, subFolders);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetUrl">
          <declaration><![CDATA[public HttpResponseMessage GetUrl(GetUrlRequest request)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="179" sc="9" el="182" ec="10">Services\ContentServiceController.cs</location>
            <body hash="a89a89256d551de68f92561bda78a6e5"><![CDATA[{
            var url = DigitalAssetsController.GetUrl(request.FileId);
            return Request.CreateResponse(HttpStatusCode.OK, url);
        }]]></body>
          </codeblock>
        </method>
        <method name="MoveFile">
          <declaration><![CDATA[public HttpResponseMessage MoveFile(CopyMoveItemRequest request)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="121" sc="9" el="124" ec="10">Services\ContentServiceController.cs</location>
            <body hash="1b09e918811d1b93de68bc429d43f79e"><![CDATA[{
            var copyMoveFileResponse = DigitalAssetsController.MoveFile(request.ItemId, request.DestinationFolderId, request.Overwrite);
            return Request.CreateResponse(HttpStatusCode.OK, copyMoveFileResponse);
        }]]></body>
          </codeblock>
        </method>
        <method name="MoveFolder">
          <declaration><![CDATA[public HttpResponseMessage MoveFolder(CopyMoveItemRequest request)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="129" sc="9" el="132" ec="10">Services\ContentServiceController.cs</location>
            <body hash="646ec9fb506a75e35bf16466b0d8b018"><![CDATA[{
            var copyMoveFolderResponse = DigitalAssetsController.MoveFolder(request.ItemId, request.DestinationFolderId, request.Overwrite);
            return Request.CreateResponse(HttpStatusCode.OK, copyMoveFolderResponse);
        }]]></body>
          </codeblock>
        </method>
        <method name="RenameFile">
          <declaration><![CDATA[public HttpResponseMessage RenameFile(RenameFileRequest request)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="97" sc="9" el="108" ec="10">Services\ContentServiceController.cs</location>
            <body hash="395c76835cb5fb58a1de18c0186e1cdc"><![CDATA[{
	        try
	        {
		        var itemViewModel = DigitalAssetsController.RenameFile(request.FileId, request.NewFileName);
		        return Request.CreateResponse(HttpStatusCode.OK, itemViewModel);
	        }
	        catch (FileAlreadyExistsException ex)
	        {
				return Request.CreateResponse(HttpStatusCode.InternalServerError, ex);
	        }
            
        }]]></body>
          </codeblock>
        </method>
        <method name="RenameFolder">
          <declaration><![CDATA[public HttpResponseMessage RenameFolder(RenameFolderRequest request)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="146" sc="9" el="149" ec="10">Services\ContentServiceController.cs</location>
            <body hash="159cc5643470f5f2acb980a9904a76b0"><![CDATA[{
            DigitalAssetsController.RenameFolder(request.FolderId, request.NewFolderName);
            return Request.CreateResponse(HttpStatusCode.OK, "Success");
        }]]></body>
          </codeblock>
        </method>
        <method name="SearchFolderContent">
          <declaration><![CDATA[public HttpResponseMessage SearchFolderContent(SearchFolderContentRequest r)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="64" sc="9" el="68" ec="10">Services\ContentServiceController.cs</location>
            <body hash="3b183d96609f24afb09f4523a2f66f4a"><![CDATA[{
            var moduleId = Request.FindModuleId();
            var p = DigitalAssetsController.SearchFolderContent(moduleId, r.FolderId, r.Pattern, r.StartIndex, r.NumItems, r.SortExpression);
            return Request.CreateResponse(HttpStatusCode.OK, p);
        }]]></body>
          </codeblock>
        </method>
        <method name="SynchronizeFolder">
          <declaration><![CDATA[public HttpResponseMessage SynchronizeFolder(SynchronizeFolderRequest request)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="163" sc="9" el="166" ec="10">Services\ContentServiceController.cs</location>
            <body hash="ba268a2d99abbaeb561eb09c183ee26e"><![CDATA[{
            DigitalAssetsController.SyncFolderContent(request.FolderId, request.Recursive);
            return Request.CreateResponse(HttpStatusCode.OK, "Success");            
        }]]></body>
          </codeblock>
        </method>
        <method name="UnlinkFolder">
          <declaration><![CDATA[public HttpResponseMessage UnlinkFolder(UnlinkFolderRequest request)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="81" sc="9" el="84" ec="10">Services\ContentServiceController.cs</location>
            <body hash="bf83bafaa4802f4e2bcbe54415016b2f"><![CDATA[{
            DigitalAssetsController.UnlinkFolder(request.FolderId);
            return Request.CreateResponse(HttpStatusCode.OK);
        }]]></body>
          </codeblock>
        </method>
        <method name="UnzipFile">
          <declaration><![CDATA[public HttpResponseMessage UnzipFile(UnzipFileRequest request)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="171" sc="9" el="174" ec="10">Services\ContentServiceController.cs</location>
            <body hash="6db623446d14fb26f562115af01d3922"><![CDATA[{
            var model = DigitalAssetsController.UnzipFile(request.FileId, request.Overwrite);
            return Request.CreateResponse(HttpStatusCode.OK, model);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="Logger">
          <declaration><![CDATA[protected static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof(ContentServiceController));]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="DigitalAssetsController">
          <declaration><![CDATA[protected IDigitalAssetsController DigitalAssetsController]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="50" sc="70" el="50" ec="74">Services\ContentServiceController.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="50" sc="75" el="50" ec="87">Services\ContentServiceController.cs</location>
            <body hash="5dbe2cc086ebbf5db6b03610487cca4c"><![CDATA[private set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DamExceptionFilterAttribute">
      <declaration><![CDATA[public class DamExceptionFilterAttribute : ExceptionFilterAttribute]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DamExceptionFilterAttribute()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="OnException">
          <declaration><![CDATA[public override void OnException(HttpActionExecutedContext context)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="33" sc="9" el="39" ec="10">Services\DamExceptionFilterAttribute.cs</location>
            <body hash="ba02328ae8aaceafb5d047081535a39d"><![CDATA[{
            if (context.Exception != null)
            {
                Exceptions.LogException(context.Exception);
                context.Response = context.Request.CreateErrorResponse(HttpStatusCode.InternalServerError, context.Exception.Message, context.Exception);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DownloadServiceController">
      <declaration><![CDATA[public class DownloadServiceController : DnnApiController]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DownloadServiceController()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="42" sc="9" el="46" ec="10">Services\DownloadServiceController.cs</location>
            <body hash="63cd4db4e44d33d9b7168a84a6366481"><![CDATA[public DownloadServiceController()
        {
            var f = new Factory();
            DigitalAssetsController = f.DigitalAssetsController;
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".cctor">
          <declaration><![CDATA[static DownloadServiceController()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="40" sc="9" el="40" ec="115">Services\DownloadServiceController.cs</location>
            <body hash="89f4d6612ca8fbd62a5ee3bb0955b8f0"><![CDATA[protected static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof(ContentServiceController))]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="Download">
          <declaration><![CDATA[public HttpResponseMessage Download(int fileId, bool forceDownload)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="52" sc="9" el="62" ec="10">Services\DownloadServiceController.cs</location>
            <body hash="19dcc052b0b79423355bdacdd98f49d0"><![CDATA[{
            var result = new HttpResponseMessage(HttpStatusCode.OK);
            string fileName;
            string contentType;
            var streamContent = DigitalAssetsController.GetFileContent(fileId, out fileName, out contentType);
            result.Content = new StreamContent(streamContent);
            result.Content.Headers.ContentType = new MediaTypeHeaderValue(contentType);
            result.Content.Headers.ContentDisposition = new ContentDispositionHeaderValue(forceDownload ? "attachment" : "inline");
            result.Content.Headers.ContentDisposition.FileName = fileName;
            return result;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="Logger">
          <declaration><![CDATA[protected static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof(ContentServiceController));]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="DigitalAssetsController">
          <declaration><![CDATA[protected IDigitalAssetsController DigitalAssetsController]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="48" sc="70" el="48" ec="74">Services\DownloadServiceController.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="48" sc="75" el="48" ec="87">Services\DownloadServiceController.cs</location>
            <body hash="5dbe2cc086ebbf5db6b03610487cca4c"><![CDATA[private set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="Factory">
      <declaration><![CDATA[public class Factory]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public Factory()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="39" sc="9" el="42" ec="10">Services\Factory.cs</location>
            <body hash="4a69658f4aca6ccfb84233e1f51f1b70"><![CDATA[public Factory()
        {
            ExtensionPointManager.ComposeParts(this);   
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
        <field name="controllers">
          <declaration><![CDATA[private IEnumerable<Lazy<IDigitalAssetsController, IDigitalAssetsControllerData>> controllers;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="DigitalAssetsController">
          <declaration><![CDATA[public IDigitalAssetsController DigitalAssetsController]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="47" sc="13" el="50" ec="14">Services\Factory.cs</location>
            <body hash="e7e6968f00a9849a66178ba8e674633f"><![CDATA[{
                var dac = controllers.SingleOrDefault(c => c.Metadata.Edition == "PE");
                return dac != null ? dac.Value : controllers.Single(c => c.Metadata.Edition == "CE").Value;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="ServiceRouteMapper">
      <declaration><![CDATA[public class ServiceRouteMapper : IServiceRouteMapper]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public ServiceRouteMapper()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="RegisterRoutes">
          <declaration><![CDATA[public void RegisterRoutes(IMapRoute mapRouteManager)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="29" sc="9" el="31" ec="10">Services\ServiceRouteMapper.cs</location>
            <body hash="17c181cb610890d8df95c3768f32d255"><![CDATA[{
            mapRouteManager.MapHttpRoute("DigitalAssets", "default", "{controller}/{action}", new[] { "DotNetNuke.Modules.DigitalAssets.Services" });
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="DotNetNuke.Modules.DigitalAssets.Services.Models">
    <class name="CopyMoveItemRequest">
      <declaration><![CDATA[public class CopyMoveItemRequest]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public CopyMoveItemRequest()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="DestinationFolderId">
          <declaration><![CDATA[public int DestinationFolderId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="28" sc="42" el="28" ec="46">Services\Models\CopyMoveItemRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="28" sc="47" el="28" ec="51">Services\Models\CopyMoveItemRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ItemId">
          <declaration><![CDATA[public int ItemId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="26" sc="29" el="26" ec="33">Services\Models\CopyMoveItemRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="26" sc="34" el="26" ec="38">Services\Models\CopyMoveItemRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Overwrite">
          <declaration><![CDATA[public bool Overwrite]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="30" sc="33" el="30" ec="37">Services\Models\CopyMoveItemRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="30" sc="38" el="30" ec="42">Services\Models\CopyMoveItemRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="CreateNewFolderRequest">
      <declaration><![CDATA[public class CreateNewFolderRequest]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public CreateNewFolderRequest()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="FolderMappingId">
          <declaration><![CDATA[public int FolderMappingId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="30" sc="38" el="30" ec="42">Services\Models\CreateNewFolderRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="30" sc="43" el="30" ec="47">Services\Models\CreateNewFolderRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="FolderName">
          <declaration><![CDATA[public string FolderName]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="26" sc="36" el="26" ec="40">Services\Models\CreateNewFolderRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="26" sc="41" el="26" ec="45">Services\Models\CreateNewFolderRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="MappedName">
          <declaration><![CDATA[public string MappedName]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="32" sc="36" el="32" ec="40">Services\Models\CreateNewFolderRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="32" sc="41" el="32" ec="45">Services\Models\CreateNewFolderRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ParentFolderId">
          <declaration><![CDATA[public int ParentFolderId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="28" sc="37" el="28" ec="41">Services\Models\CreateNewFolderRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="28" sc="42" el="28" ec="46">Services\Models\CreateNewFolderRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DeleteItem">
      <declaration><![CDATA[public class DeleteItem]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DeleteItem()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="IsFolder">
          <declaration><![CDATA[public bool IsFolder]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="26" sc="32" el="26" ec="36">Services\Models\DeleteItem.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="26" sc="37" el="26" ec="41">Services\Models\DeleteItem.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ItemId">
          <declaration><![CDATA[public int ItemId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="28" sc="29" el="28" ec="33">Services\Models\DeleteItem.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="28" sc="34" el="28" ec="38">Services\Models\DeleteItem.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="UnlinkAllowedStatus">
          <declaration><![CDATA[public string UnlinkAllowedStatus]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="30" sc="45" el="30" ec="49">Services\Models\DeleteItem.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="30" sc="50" el="30" ec="54">Services\Models\DeleteItem.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DeleteItemsRequest">
      <declaration><![CDATA[public class DeleteItemsRequest]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DeleteItemsRequest()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="Items">
          <declaration><![CDATA[public IEnumerable<DeleteItem> Items]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="28" sc="48" el="28" ec="52">Services\Models\DeleteItemsRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="28" sc="53" el="28" ec="57">Services\Models\DeleteItemsRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="GetFolderContentRequest">
      <declaration><![CDATA[public class GetFolderContentRequest]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public GetFolderContentRequest()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="FolderId">
          <declaration><![CDATA[public int FolderId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="26" sc="31" el="26" ec="35">Services\Models\GetFolderContentRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="26" sc="36" el="26" ec="40">Services\Models\GetFolderContentRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="NumItems">
          <declaration><![CDATA[public int NumItems]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="30" sc="31" el="30" ec="35">Services\Models\GetFolderContentRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="30" sc="36" el="30" ec="40">Services\Models\GetFolderContentRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="SortExpression">
          <declaration><![CDATA[public string SortExpression]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="32" sc="40" el="32" ec="44">Services\Models\GetFolderContentRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="32" sc="45" el="32" ec="49">Services\Models\GetFolderContentRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="StartIndex">
          <declaration><![CDATA[public int StartIndex]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="28" sc="33" el="28" ec="37">Services\Models\GetFolderContentRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="28" sc="38" el="28" ec="42">Services\Models\GetFolderContentRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="GetSubFolderRequest">
      <declaration><![CDATA[public class GetSubFolderRequest]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public GetSubFolderRequest()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="FolderId">
          <declaration><![CDATA[public int FolderId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="26" sc="31" el="26" ec="35">Services\Models\GetSubFolderRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="26" sc="36" el="26" ec="40">Services\Models\GetSubFolderRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="GetUrlRequest">
      <declaration><![CDATA[public class GetUrlRequest]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public GetUrlRequest()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="FileId">
          <declaration><![CDATA[public int FileId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="26" sc="29" el="26" ec="33">Services\Models\GetUrlRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="26" sc="34" el="26" ec="38">Services\Models\GetUrlRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="MappedPathSubFoldersCountRequest">
      <declaration><![CDATA[public class MappedPathSubFoldersCountRequest]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public MappedPathSubFoldersCountRequest()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="Items">
          <declaration><![CDATA[public IEnumerable<ItemBaseViewModel> Items]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="29" sc="55" el="29" ec="59">Services\Models\MappedPathSubFoldersCountRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="29" sc="60" el="29" ec="64">Services\Models\MappedPathSubFoldersCountRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="RenameFileRequest">
      <declaration><![CDATA[public class RenameFileRequest]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public RenameFileRequest()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="FileId">
          <declaration><![CDATA[public int FileId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="26" sc="29" el="26" ec="33">Services\Models\RenameFileRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="26" sc="34" el="26" ec="38">Services\Models\RenameFileRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="NewFileName">
          <declaration><![CDATA[public string NewFileName]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="28" sc="37" el="28" ec="41">Services\Models\RenameFileRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="28" sc="42" el="28" ec="46">Services\Models\RenameFileRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="RenameFolderRequest">
      <declaration><![CDATA[public class RenameFolderRequest]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public RenameFolderRequest()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="FolderId">
          <declaration><![CDATA[public int FolderId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="26" sc="31" el="26" ec="35">Services\Models\RenameFolderRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="26" sc="36" el="26" ec="40">Services\Models\RenameFolderRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="NewFolderName">
          <declaration><![CDATA[public string NewFolderName]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="28" sc="39" el="28" ec="43">Services\Models\RenameFolderRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="28" sc="44" el="28" ec="48">Services\Models\RenameFolderRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="SearchFolderContentRequest">
      <declaration><![CDATA[public class SearchFolderContentRequest]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public SearchFolderContentRequest()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="FolderId">
          <declaration><![CDATA[public int FolderId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="26" sc="31" el="26" ec="35">Services\Models\SearchFolderContentRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="26" sc="36" el="26" ec="40">Services\Models\SearchFolderContentRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="NumItems">
          <declaration><![CDATA[public int NumItems]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="32" sc="31" el="32" ec="35">Services\Models\SearchFolderContentRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="32" sc="36" el="32" ec="40">Services\Models\SearchFolderContentRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Pattern">
          <declaration><![CDATA[public string Pattern]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="28" sc="33" el="28" ec="37">Services\Models\SearchFolderContentRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="28" sc="38" el="28" ec="42">Services\Models\SearchFolderContentRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="SortExpression">
          <declaration><![CDATA[public string SortExpression]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="34" sc="40" el="34" ec="44">Services\Models\SearchFolderContentRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="34" sc="45" el="34" ec="49">Services\Models\SearchFolderContentRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="StartIndex">
          <declaration><![CDATA[public int StartIndex]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="30" sc="33" el="30" ec="37">Services\Models\SearchFolderContentRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="30" sc="38" el="30" ec="42">Services\Models\SearchFolderContentRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="SynchronizeFolderRequest">
      <declaration><![CDATA[public class SynchronizeFolderRequest]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public SynchronizeFolderRequest()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="FolderId">
          <declaration><![CDATA[public int FolderId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="10" sc="31" el="10" ec="35">Services\Models\SynchronizeFolderRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="10" sc="36" el="10" ec="40">Services\Models\SynchronizeFolderRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Recursive">
          <declaration><![CDATA[public bool Recursive]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="12" sc="33" el="12" ec="37">Services\Models\SynchronizeFolderRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="12" sc="38" el="12" ec="42">Services\Models\SynchronizeFolderRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="UnlinkFolderRequest">
      <declaration><![CDATA[public class UnlinkFolderRequest]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public UnlinkFolderRequest()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="FolderId">
          <declaration><![CDATA[public int FolderId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="26" sc="31" el="26" ec="35">Services\Models\UnlinkFolderRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="26" sc="36" el="26" ec="40">Services\Models\UnlinkFolderRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="UnzipFileRequest">
      <declaration><![CDATA[public class UnzipFileRequest]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public UnzipFileRequest()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="FileId">
          <declaration><![CDATA[public int FileId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="26" sc="29" el="26" ec="33">Services\Models\UnzipFileRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="26" sc="34" el="26" ec="38">Services\Models\UnzipFileRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Overwrite">
          <declaration><![CDATA[public bool Overwrite]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="28" sc="33" el="28" ec="37">Services\Models\UnzipFileRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="28" sc="38" el="28" ec="42">Services\Models\UnzipFileRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
</root>