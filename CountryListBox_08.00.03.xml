<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<root file="CountryListBox.dll" version="08.00.03" generated="2017-06-19 23:25:42Z" generationTime="7.3698852">
  <namespace name="DotNetNuke.UI.WebControls">
    <class name="CountryListBox">
      <declaration><![CDATA[public class CountryListBox : DropDownList]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private bool _CacheGeoIPData = true;]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="46" sc="9" el="46" ec="45">CountryListBox.cs</location>
            <body hash="10983c0c79492bbd2b2be65a26f1c5d3"><![CDATA[private bool _CacheGeoIPData = true]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="OnDataBinding">
          <declaration><![CDATA[protected override void OnDataBinding(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="108" sc="9" el="206" ec="10">CountryListBox.cs</location>
            <body hash="97422367932612c1ef4df5af2d26f315"><![CDATA[{
            bool IsLocal = false;
            string IP;
            if (!Page.IsPostBack)
            {
				//If GeoIPFile is not provided, assume they put it in BIN.
                if (String.IsNullOrEmpty(_GeoIPFile))
                {
                    _GeoIPFile = "controls/CountryListBox/Data/GeoIP.dat";
                }
                EnsureChildControls();
				//Check to see if a TestIP is specified
                if (!String.IsNullOrEmpty(_TestIP))
                {
					//TestIP is specified, let's use it
                    IP = _TestIP;
                }
                else if (Page.Request.UserHostAddress == "127.0.0.1")
                {
					//The country cannot be detected because the user is local.
                    IsLocal = true;
					//Set the IP address in case they didn't specify LocalhostCountryCode
                    IP = Page.Request.UserHostAddress;
                }
                else
                {
					//Set the IP address so we can find the country
                    IP = Page.Request.UserHostAddress;
                }
				
				//Check to see if we need to generate the Cache for the GeoIPData file
                if (Context.Cache.Get("GeoIPData") == null && _CacheGeoIPData)
                {
					//Store it as	well as	setting	a dependency on	the	file
                    Context.Cache.Insert("GeoIPData", CountryLookup.FileToMemory(Context.Server.MapPath(_GeoIPFile)), new CacheDependency(Context.Server.MapPath(_GeoIPFile)));
                }
				
				//Check to see if the request is a localhost request
				//and see if the LocalhostCountryCode is specified
                if (IsLocal && !String.IsNullOrEmpty(_LocalhostCountryCode))
                {
					//Bing the data
                    base.OnDataBinding(e);
					//Pre-Select the value in the drop-down based
					//on the LocalhostCountryCode specified.
                    if (Items.FindByValue(_LocalhostCountryCode) != null)
                    {
                        Items.FindByValue(_LocalhostCountryCode).Selected = true;
                    }
                }
                else
                {
					//Either this is a remote request or it is a local
					//request with no LocalhostCountryCode specified
                    CountryLookup _CountryLookup;

					//Check to see if we are using the Cached
					//version of the GeoIPData file
                    if (_CacheGeoIPData)
                    {
						//Yes, get it from cache
                        _CountryLookup = new CountryLookup((MemoryStream) Context.Cache.Get("GeoIPData"));
                    }
                    else
                    {
						//No, get it from file
                        _CountryLookup = new CountryLookup(Context.Server.MapPath(_GeoIPFile));
                    }
					//Get the country code based on the IP address
                    string _UserCountryCode = _CountryLookup.LookupCountryCode(IP);

					//Bind the datasource
                    base.OnDataBinding(e);

					//Make sure the value returned is actually
					//in the drop-down list.
                    if (Items.FindByValue(_UserCountryCode) != null)
                    {
						//Yes, it's there, select it based on its value
                        Items.FindByValue(_UserCountryCode).Selected = true;
                    }
                    else
                    {
						//No it's not there.  Let's get the Country description
						//and add a new list item for the Country detected
                        string _UserCountry = _CountryLookup.LookupCountryName(IP);
                        if (_UserCountry != "N/A")
                        {
                            var newItem = new ListItem();
                            newItem.Value = _UserCountryCode;
                            newItem.Text = _UserCountry;
                            Items.Insert(0, newItem);
							//Now let's Pre-Select it
                            Items.FindByValue(_UserCountryCode).Selected = true;
                        }
                    }
                }
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_CacheGeoIPData">
          <declaration><![CDATA[private bool _CacheGeoIPData = true;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_GeoIPFile">
          <declaration><![CDATA[private string _GeoIPFile;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_LocalhostCountryCode">
          <declaration><![CDATA[private string _LocalhostCountryCode;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_TestIP">
          <declaration><![CDATA[private string _TestIP;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="CacheGeoIPData">
          <declaration><![CDATA[public bool CacheGeoIPData]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="55" sc="13" el="57" ec="14">CountryListBox.cs</location>
            <body hash="47bf18966a359f7d6fc342f9ca73c7c0"><![CDATA[{
                return _CacheGeoIPData;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="59" sc="13" el="65" ec="14">CountryListBox.cs</location>
            <body hash="50727fcb61d232651ed3ffc98ab0c102"><![CDATA[{
                _CacheGeoIPData = value;
                if (value == false)
                {
                    Context.Cache.Remove("GeoIPData");
                }
            }]]></body>
          </codeblock>
        </property>
        <property name="GeoIPFile">
          <declaration><![CDATA[public string GeoIPFile]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="72" sc="13" el="74" ec="14">CountryListBox.cs</location>
            <body hash="1f334826112ee36e1a4f37d5c163772a"><![CDATA[{
                return _GeoIPFile;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="76" sc="13" el="78" ec="14">CountryListBox.cs</location>
            <body hash="3cb4ffd21e593436440d37de422da042"><![CDATA[{
                _GeoIPFile = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="LocalhostCountryCode">
          <declaration><![CDATA[public string LocalhostCountryCode]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="98" sc="13" el="100" ec="14">CountryListBox.cs</location>
            <body hash="bc538bc75dec4d1a5f8aff0e8a3d8478"><![CDATA[{
                return _LocalhostCountryCode;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="102" sc="13" el="104" ec="14">CountryListBox.cs</location>
            <body hash="2c8ca88d55078b2f62315385570a0733"><![CDATA[{
                _LocalhostCountryCode = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="TestIP">
          <declaration><![CDATA[public string TestIP]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="85" sc="13" el="87" ec="14">CountryListBox.cs</location>
            <body hash="bea93da43c9ba5c458450df2db22397e"><![CDATA[{
                return _TestIP;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="89" sc="13" el="91" ec="14">CountryListBox.cs</location>
            <body hash="bd164423dbeced08b7b9843988200967"><![CDATA[{
                _TestIP = value;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="CountryLookup">
      <declaration><![CDATA[public class CountryLookup]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public CountryLookup(MemoryStream ms)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="92" sc="9" el="95" ec="10">CountryLookup.cs</location>
            <body hash="c8d02d953f7a8f1908cf06044a8c78a0"><![CDATA[public CountryLookup(MemoryStream ms)
        {
            m_MemoryStream = ms;
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[public CountryLookup(string FileLocation)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="97" sc="9" el="110" ec="10">CountryLookup.cs</location>
            <body hash="19b900daff4c6db833a7e53acc54127f"><![CDATA[public CountryLookup(string FileLocation)
        {
			//------------------------------------------------------------------------------------------------
            //Load the passed in GeoIP Data file to the memorystream
            //------------------------------------------------------------------------------------------------
            var _FileStream = new FileStream(FileLocation, FileMode.Open, FileAccess.Read);
            m_MemoryStream = new MemoryStream();
            var _Byte = new byte[256];
            while (_FileStream.Read(_Byte, 0, _Byte.Length) != 0)
            {
                m_MemoryStream.Write(_Byte, 0, _Byte.Length);
            }
            _FileStream.Close();
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".cctor">
          <declaration><![CDATA[static CountryLookup()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="40" sc="9" el="88" ec="62">CountryLookup.cs</location>
            <body hash="249a91f9d82b7dc9d12d00261ec48bf8"><![CDATA[private static long CountryBegin = 16776960;

        private static readonly string[] CountryName = new[]
                                                           {
                                                               "N/A", "Asia/Pacific Region", "Europe", "Andorra", "United Arab Emirates", "Afghanistan", "Antigua and Barbuda", "Anguilla", "Albania",
                                                               "Armenia", "Netherlands Antilles", "Angola", "Antarctica", "Argentina", "American Samoa", "Austria", "Australia", "Aruba", "Azerbaijan",
                                                               "Bosnia and Herzegovina", "Barbados", "Bangladesh", "Belgium", "Burkina Faso", "Bulgaria", "Bahrain", "Burundi", "Benin", "Bermuda",
                                                               "Brunei Darussalam", "Bolivia", "Brazil", "Bahamas", "Bhutan", "Bouvet Island", "Botswana", "Belarus", "Belize", "Canada",
                                                               "Cocos (Keeling) Islands", "Congo, The Democratic Republic of the", "Central African Republic", "Congo", "Switzerland", "Cote D'Ivoire",
                                                               "Cook Islands", "Chile", "Cameroon", "China", "Colombia", "Costa Rica", "Cuba", "Cape Verde", "Christmas Island", "Cyprus", "Czech Republic"
                                                               , "Germany", "Djibouti", "Denmark", "Dominica", "Dominican Republic", "Algeria", "Ecuador", "Estonia", "Egypt", "Western Sahara", "Eritrea",
                                                               "Spain", "Ethiopia", "Finland", "Fiji", "Falkland Islands (Malvinas)", "Micronesia, Federated States of", "Faroe Islands", "France",
                                                               "France, Metropolitan", "Gabon", "United Kingdom", "Grenada", "Georgia", "French Guiana", "Ghana", "Gibraltar", "Greenland", "Gambia",
                                                               "Guinea", "Guadeloupe", "Equatorial Guinea", "Greece", "South Georgia and the South Sandwich Islands", "Guatemala", "Guam", "Guinea-Bissau",
                                                               "Guyana", "Hong Kong", "Heard Island and McDonald Islands", "Honduras", "Croatia", "Haiti", "Hungary", "Indonesia", "Ireland", "Israel",
                                                               "India", "British Indian Ocean Territory", "Iraq", "Iran, Islamic Republic of", "Iceland", "Italy", "Jamaica", "Jordan", "Japan", "Kenya",
                                                               "Kyrgyzstan", "Cambodia", "Kiribati", "Comoros", "Saint Kitts and Nevis", "Korea, Democratic People's Republic of", "Korea, Republic of",
                                                               "Kuwait", "Cayman Islands", "Kazakstan", "Lao People's Democratic Republic", "Lebanon", "Saint Lucia", "Liechtenstein", "Sri Lanka",
                                                               "Liberia", "Lesotho", "Lithuania", "Luxembourg", "Latvia", "Libyan Arab Jamahiriya", "Morocco", "Monaco", "Moldova, Republic of",
                                                               "Madagascar", "Marshall Islands", "Macedonia, the Former Yugoslav Republic of", "Mali", "Myanmar", "Mongolia", "Macau",
                                                               "Northern Mariana Islands", "Martinique", "Mauritania", "Montserrat", "Malta", "Mauritius", "Maldives", "Malawi", "Mexico", "Malaysia",
                                                               "Mozambique", "Namibia", "New Caledonia", "Niger", "Norfolk Island", "Nigeria", "Nicaragua", "Netherlands", "Norway", "Nepal", "Nauru",
                                                               "Niue", "New Zealand", "Oman", "Panama", "Peru", "French Polynesia", "Papua New Guinea", "Philippines", "Pakistan", "Poland",
                                                               "Saint Pierre and Miquelon", "Pitcairn", "Puerto Rico", "Palestinian Territory, Occupied", "Portugal", "Palau", "Paraguay", "Qatar",
                                                               "Reunion", "Romania", "Russian Federation", "Rwanda", "Saudi Arabia", "Solomon Islands", "Seychelles", "Sudan", "Sweden", "Singapore",
                                                               "Saint Helena", "Slovenia", "Svalbard and Jan Mayen", "Slovakia", "Sierra Leone", "San Marino", "Senegal", "Somalia", "Suriname",
                                                               "Sao Tome and Principe", "El Salvador", "Syrian Arab Republic", "Swaziland", "Turks and Caicos Islands", "Chad",
                                                               "French Southern Territories", "Togo", "Thailand", "Tajikistan", "Tokelau", "Turkmenistan", "Tunisia", "Tonga", "East Timor", "Turkey",
                                                               "Trinidad and Tobago", "Tuvalu", "Taiwan, Province of China", "Tanzania, United Republic of", "Ukraine", "Uganda",
                                                               "United States Minor Outlying Islands", "United States", "Uruguay", "Uzbekistan", "Holy See (Vatican City State)",
                                                               "Saint Vincent and the Grenadines", "Venezuela", "Virgin Islands, British", "Virgin Islands, U.S.", "Vietnam", "Vanuatu",
                                                               "Wallis and Futuna", "Samoa", "Yemen", "Mayotte", "Yugoslavia", "South Africa", "Zambia", "Zaire", "Zimbabwe", "Anonymous Proxy",
                                                               "Satellite Provider"
                                                           };

        private static readonly string[] CountryCode = new[]
                                                           {
                                                               "--", "AP", "EU", "AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AZ", "BA", "BB", "BD", "BE",
                                                               "BF", "BG", "BH", "BI", "BJ", "BM", "BN", "BO", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK",
                                                               "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET",
                                                               "FI", "FJ", "FK", "FM", "FO", "FR", "FX", "GA", "GB", "GD", "GE", "GF", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU",
                                                               "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IN", "IO", "IQ", "IR", "IS", "IT", "JM", "JO", "JP", "KE", "KG", "KH",
                                                               "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "MG",
                                                               "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI",
                                                               "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE",
                                                               "RO", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "ST", "SV", "SY", "SZ", "TC",
                                                               "TD", "TF", "TG", "TH", "TJ", "TK", "TM", "TN", "TO", "TP", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC",
                                                               "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "YU", "ZA", "ZM", "ZR", "ZW", "A1", "A2"
                                                           };]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="ConvertIPAddressToNumber">
          <declaration><![CDATA[private long ConvertIPAddressToNumber(IPAddress _IPAddress)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="113" sc="9" el="124" ec="10">CountryLookup.cs</location>
            <body hash="ebae02fef21f9d3aa8e0d09a725322a1"><![CDATA[{
            //Convert an IP Address, (e.g. 127.0.0.1), to the numeric equivalent
            string[] _Address = _IPAddress.ToString().Split('.');
            if (_Address.Length == 4)
            {
                return Convert.ToInt64(16777216*Convert.ToDouble(_Address[0]) + 65536*Convert.ToDouble(_Address[1]) + 256*Convert.ToDouble(_Address[2]) + Convert.ToDouble(_Address[3]));
            }
            else
            {
                return 0;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="ConvertIPNumberToAddress">
          <declaration><![CDATA[private string ConvertIPNumberToAddress(long _IPNumber)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="127" sc="9" el="134" ec="10">CountryLookup.cs</location>
            <body hash="1be108a1dc503b58cac77037f325e328"><![CDATA[{
            //Convert an IP Number to the IP Address equivalent
            string _IPNumberPart1 = Convert.ToString(((int) (_IPNumber/16777216))%256);
            string _IPNumberPart2 = Convert.ToString(((int) (_IPNumber/65536))%256);
            string _IPNumberPart3 = Convert.ToString(((int) (_IPNumber/256))%256);
            string _IPNumberPart4 = Convert.ToString(((int) (_IPNumber))%256);
            return _IPNumberPart1 + "." + _IPNumberPart2 + "." + _IPNumberPart3 + "." + _IPNumberPart4;
        }]]></body>
          </codeblock>
        </method>
        <method name="FileToMemory">
          <declaration><![CDATA[public static MemoryStream FileToMemory(string FileLocation)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="137" sc="9" el="157" ec="10">CountryLookup.cs</location>
            <body hash="522b261ae2deffcbf4fd8104ad1d36b3"><![CDATA[{
            //Read a given file into a Memory Stream to return as the result
            FileStream _FileStream;
            var _MemStream = new MemoryStream();
            var _Byte = new byte[256];
            try
            {
                _FileStream = new FileStream(FileLocation, FileMode.Open, FileAccess.Read);
                while (_FileStream.Read(_Byte, 0, _Byte.Length) != 0)
                {
                    _MemStream.Write(_Byte, 0, _Byte.Length);
                }
                _FileStream.Close();
            }
            catch (FileNotFoundException exc)
            {
                throw new Exception(exc.Message +
                                    "  Please set the \"GeoIPFile\" Property to specify the location of this file.  The property value must be set to the virtual path to GeoIP.dat (i.e. \"/controls/CountryListBox/Data/GeoIP.dat\")");
            }
            return _MemStream;
        }]]></body>
          </codeblock>
        </method>
        <method name="LookupCountryCode">
          <declaration><![CDATA[public string LookupCountryCode(IPAddress _IPAddress)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="160" sc="9" el="163" ec="10">CountryLookup.cs</location>
            <body hash="ce3963f5b53eee5270267e474e7bebc5"><![CDATA[{
            //Look up the country code, e.g. US, for the passed in IP Address
            return CountryCode[Convert.ToInt32(SeekCountry(0, ConvertIPAddressToNumber(_IPAddress), 31))];
        }]]></body>
          </codeblock>
        </method>
        <method name="LookupCountryCode">
          <declaration><![CDATA[public string LookupCountryCode(string _IPAddress)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="166" sc="9" el="178" ec="10">CountryLookup.cs</location>
            <body hash="e6b1cf7b8e621d708296ec84cc607da8"><![CDATA[{
            //Look up the country code, e.g. US, for the passed in IP Address
            IPAddress _Address;
            try
            {
                _Address = IPAddress.Parse(_IPAddress);
            }
            catch (FormatException)
            {
                return "--";
            }
            return LookupCountryCode(_Address);
        }]]></body>
          </codeblock>
        </method>
        <method name="LookupCountryName">
          <declaration><![CDATA[public string LookupCountryName(IPAddress addr)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="181" sc="9" el="184" ec="10">CountryLookup.cs</location>
            <body hash="907f8122adb25de38e60b75633ed8a6a"><![CDATA[{
            //Look up the country name, e.g. United States, for the IP Address
            return CountryName[Convert.ToInt32(SeekCountry(0, ConvertIPAddressToNumber(addr), 31))];
        }]]></body>
          </codeblock>
        </method>
        <method name="LookupCountryName">
          <declaration><![CDATA[public string LookupCountryName(string _IPAddress)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="187" sc="9" el="199" ec="10">CountryLookup.cs</location>
            <body hash="ef5da08f44dbda02ca48163acaff6896"><![CDATA[{
            //Look up the country name, e.g. United States, for the IP Address
            IPAddress _Address;
            try
            {
                _Address = IPAddress.Parse(_IPAddress);
            }
            catch (FormatException)
            {
                return "N/A";
            }
            return LookupCountryName(_Address);
        }]]></body>
          </codeblock>
        </method>
        <method name="SeekCountry">
          <declaration><![CDATA[public int SeekCountry(int Offset, long Ipnum, short Depth)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="236" sc="9" el="284" ec="10">CountryLookup.cs</location>
            <body hash="51b688b5f0d1b7a2e5b22cb8dcb4e1a2"><![CDATA[{
            try
            {
                var Buffer = new byte[6];
                var X = new int[2];
                short I;
                short J;
                byte Y;
                if (Depth == 0)
                {
                    throw new Exception();
                }
                m_MemoryStream.Seek(6*Offset, 0);
                m_MemoryStream.Read(Buffer, 0, 6);
                for (I = 0; I <= 1; I++)
                {
                    X[I] = 0;
                    for (J = 0; J <= 2; J++)
                    {
                        Y = Buffer[I*3 + J];
                        if (Y < 0)
                        {
                            Y = Convert.ToByte(Y + 256);
                        }
                        X[I] = Convert.ToInt32(X[I] + vbShiftLeft(Y, J*8));
                    }
                }
                if ((Ipnum & vbShiftLeft(1, Depth)) > 0)
                {
                    if (X[1] >= CountryBegin)
                    {
                        return Convert.ToInt32(X[1] - CountryBegin);
                    }
                    return SeekCountry(X[1], Ipnum, Convert.ToInt16(Depth - 1));
                }
                else
                {
                    if (X[0] >= CountryBegin)
                    {
                        return Convert.ToInt32(X[0] - CountryBegin);
                    }
                    return SeekCountry(X[0], Ipnum, Convert.ToInt16(Depth - 1));
                }
            }
            catch (Exception exc)
            {
                throw new Exception("Error seeking country: " + exc.Message);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="vbShiftLeft">
          <declaration><![CDATA[private long vbShiftLeft(long value, int Count)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="202" sc="9" el="216" ec="10">CountryLookup.cs</location>
            <body hash="36f1318f24a5a5af692806b7281a244b"><![CDATA[{
			//------------------------------------------------------------------------------------------------
            // Replacement for Bitwise operators which are missing in VB.NET,
            // these functions are present in .NET 1.1, but for developers
            // using 1.0, replacement functions must be implemented
            //------------------------------------------------------------------------------------------------
            long returnValue = 0;
            int _Iterator;
            returnValue = value;
            for (_Iterator = 1; _Iterator <= Count; _Iterator++)
            {
                returnValue = returnValue*2;
            }
            return returnValue;
        }]]></body>
          </codeblock>
        </method>
        <method name="vbShiftRight">
          <declaration><![CDATA[private long vbShiftRight(long value, int Count)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="219" sc="9" el="233" ec="10">CountryLookup.cs</location>
            <body hash="9767a6735113c2ebbb4bb7b3b3da5f1d"><![CDATA[{
			//------------------------------------------------------------------------------------------------
            // Replacement for Bitwise operators which are missing in VB.NET,
            // these functions are present in .NET 1.1, but for developers
            // using 1.0, replacement functions must be implemented
            //------------------------------------------------------------------------------------------------
            long returnValue = 0;
            int _Iterator;
            returnValue = value;
            for (_Iterator = 1; _Iterator <= Count; _Iterator++)
            {
                returnValue = returnValue/2;
            }
            return returnValue;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="CountryBegin">
          <declaration><![CDATA[private static long CountryBegin = 16776960L;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="CountryCode">
          <declaration><![CDATA[private static readonly string[] CountryCode = new string[]]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="CountryName">
          <declaration><![CDATA[private static readonly string[] CountryName = new string[]]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="m_MemoryStream">
          <declaration><![CDATA[public MemoryStream m_MemoryStream;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
</root>