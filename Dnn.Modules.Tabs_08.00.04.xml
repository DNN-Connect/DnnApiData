<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<root file="Dnn.Modules.Tabs.dll" version="08.00.04" generated="2017-06-19 23:39:56Z" generationTime="9.2188633">
  <namespace name="">
    <class name="&lt;PrivateImplementationDetails&gt;">
      <declaration><![CDATA[internal sealed class <PrivateImplementationDetails>]]></declaration>
      <documentation>
      </documentation>
      <constructors>
      </constructors>
      <methods>
        <method name="ComputeStringHash">
          <declaration><![CDATA[internal static uint ComputeStringHash(string s)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="Dnn.Modules.Tabs">
    <class name="ManageTabs">
      <declaration><![CDATA[public class ManageTabs : PortalModuleBase]]></declaration>
      <documentation>
        <summary>
   The ManageTabs PortalModuleBase is used to manage a Tab/Page
 </summary>
 <remarks>
 </remarks></documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private string _strAction = "";]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="73" sc="9" el="73" ec="40">ManageTabs.ascx.cs</location>
            <body hash="a2db76ac076d79e5cd4f967ac2376742"><![CDATA[private string _strAction = ""]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="AddMissing_Click">
          <declaration><![CDATA[protected void AddMissing_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1996" sc="9" el="2000" ec="10">ManageTabs.ascx.cs</location>
            <body hash="731be5f15f4707374d5bd0b49d686133"><![CDATA[{
            TabController.Instance.AddMissingLanguages(PortalId, _tab.TabID);

            BindCLControl();
        }]]></body>
          </codeblock>
        </method>
        <method name="AddTranslationSubmittedNotification">
          <declaration><![CDATA[private void AddTranslationSubmittedNotification(TabInfo tabInfo, UserInfo translator)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="145" sc="9" el="159" ec="10">ManageTabs.ascx.cs</location>
            <body hash="767bc8a0d7644f52723ea56f8dbf1138"><![CDATA[{
            var notificationType = NotificationsController.Instance.GetNotificationType("TranslationSubmitted");

            var subject = Localization.GetString("NewContentMessage.Subject", LocalResourceFile);
            var body = string.Format(Localization.GetString("NewContentMessage.Body", LocalResourceFile),
                tabInfo.TabName,
                Globals.NavigateURL(tabInfo.TabID, false, PortalSettings, Null.NullString, tabInfo.CultureCode),
                txtTranslationComment.Text);

            var sender = UserController.GetUserById(PortalSettings.PortalId, PortalSettings.AdministratorId);

            var notification = new Notification { NotificationTypeID = notificationType.NotificationTypeId, Subject = subject, Body = body, IncludeDismissAction = true, SenderUserID = sender.UserID };

            NotificationsController.Instance.SendNotification(notification, PortalSettings.PortalId, null, new List<UserInfo> { translator });
        }]]></body>
          </codeblock>
        </method>
        <method name="BindBeforeAfterTabControls">
          <declaration><![CDATA[private void BindBeforeAfterTabControls()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="162" sc="9" el="221" ec="10">ManageTabs.ascx.cs</location>
            <body hash="1b05843d561afd6122ffbd4398a8565a"><![CDATA[{
            List<TabInfo> listTabs;
            TabInfo parentTab = null;

            if (cboParentTab.SelectedItem != null)
            {
                var parentTabID = cboParentTab.SelectedItemValueAsInt;
                parentTab = TabController.Instance.GetTab(parentTabID, -1, false);
            }

            if (parentTab != null)
            {
                var parentTabCulture = parentTab.CultureCode;
                if (string.IsNullOrEmpty(parentTabCulture))
                {
                    parentTabCulture = PortalController.GetActivePortalLanguage(PortalId);
                }
                listTabs = TabController.Instance.GetTabsByPortal(parentTab.PortalID).WithCulture(parentTabCulture, true).WithParentId(parentTab.TabID);
            }
            else
            {
                listTabs = TabController.Instance.GetTabsByPortal(PortalId).WithCulture(PortalController.GetActivePortalLanguage(PortalId), true).WithParentId(Null.NullInteger);
            }
            listTabs = TabController.GetPortalTabs(listTabs, Null.NullInteger, false, Null.NullString, false, false, false, false, true);
            cboPositionTab.DataSource = listTabs;
            cboPositionTab.SelectedIndex = Null.NullInteger;
            cboPositionTab.DataBind();

            if (parentTab != null && parentTab.IsSuperTab)
            {
                ShowPermissions(false);
            }
            else
            {
                ShowPermissions(true);
            }

            if (parentTab != null && PortalSettings.ContentLocalizationEnabled)
            {
                var defaultCultureCode = LocaleController.Instance.GetDefaultLocale(PortalId).Code;
                if (!parentTab.IsNeutralCulture
                    && (
                            (!parentTab.CultureCode.Equals(defaultCultureCode, StringComparison.InvariantCultureIgnoreCase)
                                && parentTab.DefaultLanguageTab == null)
                             || (parentTab.CultureCode.Equals(defaultCultureCode, StringComparison.InvariantCultureIgnoreCase)
                                    && parentTab.LocalizedTabs.Count == 0)
                       ))
                {
                    cultureTypeList.Items[0].Enabled = cultureTypeList.Items[2].Enabled = false;
                    cultureTypeList.Items[1].Enabled = true;
                    cultureTypeList.SelectedValue = "Culture";
                }
                else
                {
                    cultureTypeList.Items[0].Enabled = 
                        cultureTypeList.Items[1].Enabled = cultureTypeList.Items[2].Enabled = true;
                    cultureTypeList.SelectedValue = PortalController.GetPortalSetting("CreateNewPageCultureType", PortalId, "Localized");
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="BindCLControl">
          <declaration><![CDATA[protected void BindCLControl()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="274" sc="9" el="305" ec="10">ManageTabs.ascx.cs</location>
            <body hash="84c19196c03dd7db141ca3ec1a2eaab4"><![CDATA[{
            if (!localizationPanel.Visible)
            {
                return;
            }

            MakeTranslatable.Visible = false;
            MakeNeutral.Visible = false;
            cmdUpdateLocalization.Visible = false;
            AddMissing.Visible = false;
            if (String.IsNullOrEmpty(_tab.CultureCode))
            {
                contentLocalizationControl.Visible = false;
                if (!(string.IsNullOrEmpty(_strAction) || _strAction == "add" || _strAction == "copy"))
                {
                    MakeTranslatable.Visible = true;
                }
            }
            else
            {
                contentLocalizationControl.Visible = true;
                contentLocalizationControl.enablePageEdit = true;
                contentLocalizationControl.BindAll(_tab.TabID);
                cmdUpdateLocalization.Visible = true;

                // only show "Convert to neutral" if page has no child pages
                MakeNeutral.Visible = (TabController.Instance.GetTabsByPortal(PortalId).WithParentId(_tab.TabID).Count == 0);

                // only show "add missing languages" if not all languages are available
                AddMissing.Visible = TabController.Instance.HasMissingLanguages(PortalId, _tab.TabID);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="BindLocalization">
          <declaration><![CDATA[private void BindLocalization()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="224" sc="9" el="257" ec="10">ManageTabs.ascx.cs</location>
            <body hash="cb457a1cb285932881d5659591cfaa9e"><![CDATA[{
            cultureLanguageLabel.Language = Tab.CultureCode;
            cultureRow.Visible = false;

            if (Tab.IsNeutralCulture)
            {
                cultureRow.Visible = true;
                readyForTranslationButton.Visible = false;
                defaultCultureMessageLabel.Visible = false;
                defaultCultureMessage.Visible = false;
                if (string.IsNullOrEmpty(_strAction) || _strAction == "add" || _strAction == "copy")
                {
                    cultureRow.Visible = false;
                    cultureTypeRow.Visible = true;
                }
            }
            else if (Tab.DefaultLanguageTab != null)
            {
                defaultCultureMessageLabel.Visible = false;
                defaultCultureMessage.Visible = false;


            }
            else
            {
                defaultCultureMessageLabel.Visible = true;
                defaultCultureMessage.Visible = true;
            }
            if (!Page.IsPostBack)
            {
                BindCLControl();
            }

        }]]></body>
          </codeblock>
        </method>
        <method name="BindPageDetails">
          <declaration><![CDATA[private void BindPageDetails()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="308" sc="9" el="351" ec="10">ManageTabs.ascx.cs</location>
            <body hash="ac6d63a6b91584f4f75fe0f35a2217bd"><![CDATA[{
            txtTitle.Text = Tab.Title;
            txtDescription.Text = Tab.Description;
            txtKeyWords.Text = Tab.KeyWords;

            pageUrlPanel.Visible = !Tab.IsSuperTab && (Config.GetFriendlyUrlProvider() == "advanced");
            doNotRedirectPanel.Visible = (Config.GetFriendlyUrlProvider() == "advanced");

            if (_strAction != "copy")
            {
                txtTabName.Text = Tab.TabName;
                if (Tab.TabUrls.Count > 0)
                {
                    var tabUrl = Tab.TabUrls.SingleOrDefault(t => t.IsSystem && t.HttpStatus == "200" && t.SeqNum == 0);

                    if (tabUrl != null)
                    {
                        urlTextBox.Text = tabUrl.Url;
                    }
                }

                var friendlyUrlSettings = new FriendlyUrlSettings(PortalId);
                if (String.IsNullOrEmpty(urlTextBox.Text) && Tab.TabID > -1 && !Tab.IsSuperTab)
                {
                    var baseUrl = Globals.AddHTTP(PortalAlias.HTTPAlias) + "/Default.aspx?TabId=" + Tab.TabID;
                    var path = AdvancedFriendlyUrlProvider.ImprovedFriendlyUrl(Tab,
                                                                                baseUrl,
                                                                                Globals.glbDefaultPage,
                                                                                PortalAlias.HTTPAlias,
                                                                                false, //dnndev-27493 :we want any custom Urls that apply
                                                                                friendlyUrlSettings,
                                                                                Guid.Empty);

                    urlTextBox.Text = path.Replace(Globals.AddHTTP(PortalAlias.HTTPAlias), "");
                }
                string tabPath = (Tab.TabPath.Replace("//", "/") + ";").ToLower();
                if (friendlyUrlSettings.UseBaseFriendlyUrls.ToLower().Contains(tabPath))
                {
                    doNotRedirectCheckBox.Enabled = false;
                }

                doNotRedirectCheckBox.Checked = Tab.DoNotRedirect;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="BindSkins">
          <declaration><![CDATA[private void BindSkins()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="354" sc="9" el="368" ec="10">ManageTabs.ascx.cs</location>
            <body hash="cd997ea3d7fff3992ea65c171fd90c6a"><![CDATA[{
            pageSkinCombo.PortalId = Tab.PortalID;
            pageSkinCombo.RootPath = SkinController.RootSkin;
            pageSkinCombo.Scope = SkinScope.All;
            pageSkinCombo.IncludeNoneSpecificItem = true;
            pageSkinCombo.NoneSpecificText = "<" + Localization.GetString("None_Specified") + ">";
            pageSkinCombo.SelectedValue =Tab.SkinSrc;

            pageContainerCombo.PortalId = Tab.PortalID;
            pageContainerCombo.RootPath = SkinController.RootContainer;
            pageContainerCombo.Scope = SkinScope.All;
            pageContainerCombo.IncludeNoneSpecificItem = true;
            pageContainerCombo.NoneSpecificText = "<" + Localization.GetString("None_Specified") + ">";
            pageContainerCombo.SelectedValue = Tab.ContainerSrc;
        }]]></body>
          </codeblock>
        </method>
        <method name="BindTab">
          <declaration><![CDATA[private void BindTab()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="371" sc="9" el="461" ec="10">ManageTabs.ascx.cs</location>
            <body hash="3e1d883ae7eae65eb99d2f8089ebb341"><![CDATA[{
            //Load TabControls
            BindTabControls(Tab);

            if (Tab != null)
            {
                BindPageDetails();
                PageDetailsExtensionControl.BindAction(PortalId, Tab.TabID, ModuleId);

                ctlURL.Url = Tab.Url;
                bool newWindow;
                if (Tab.TabSettings["LinkNewWindow"] != null && Boolean.TryParse((string)Tab.TabSettings["LinkNewWindow"], out newWindow) && newWindow)
                {
                    ctlURL.NewWindow = true;
                }

                ctlIcon.Url = Tab.IconFileRaw;
                ctlIconLarge.Url = Tab.IconFileLargeRaw;
                chkMenu.Checked = Tab.IsVisible;

                chkDisableLink.Checked = Tab.DisableLink;
                if (TabId == PortalSettings.AdminTabId || TabId == PortalSettings.SplashTabId || TabId == PortalSettings.HomeTabId || TabId == PortalSettings.LoginTabId ||
                    TabId == PortalSettings.UserTabId || TabId == PortalSettings.SuperTabId)
                {
                    chkDisableLink.Enabled = false;
                }

                BindSkins();

                if (PortalSettings.SSLEnabled)
                {
                    chkSecure.Enabled = true;
                    chkSecure.Checked = Tab.IsSecure;
                }
                else
                {
                    chkSecure.Enabled = false;
                    chkSecure.Checked = Tab.IsSecure;
                }
                bool allowIndex;
                chkAllowIndex.Checked = !Tab.TabSettings.ContainsKey("AllowIndex") || !bool.TryParse(Tab.TabSettings["AllowIndex"].ToString(), out allowIndex) || allowIndex;
                txtPriority.Text = Tab.SiteMapPriority.ToString("F1");

                startDatePicker.SkipMinMaxDateValidationOnServer =
                    endDatePicker.SkipMinMaxDateValidationOnServer = true;

                if (!Null.IsNull(Tab.StartDate))
                {
                    startDatePicker.SelectedDate = Tab.StartDate;
                }
                if (!Null.IsNull(Tab.EndDate))
                {
                    endDatePicker.SelectedDate = Tab.EndDate;
                }

                endDatePicker.MinDate = DateTime.Now;

                if (Tab.RefreshInterval != Null.NullInteger)
                {
                    txtRefreshInterval.Text = Tab.RefreshInterval.ToString();
                }

                txtPageHeadText.Text = Tab.PageHeadText;
                chkPermanentRedirect.Checked = Tab.PermanentRedirect;

                ShowPermissions(!Tab.IsSuperTab && TabPermissionController.CanAdminPage());

                termsSelector.PortalId = Tab.PortalID;
                termsSelector.Terms = Tab.Terms;
                termsSelector.DataBind();

                txtCustomStylesheet.Text = Tab.TabSettings.ContainsKey("CustomStylesheet") ? Tab.TabSettings["CustomStylesheet"].ToString() : string.Empty;
            }

            if (string.IsNullOrEmpty(_strAction) || _strAction == "add" || _strAction == "copy")
            {
                InitializeTab();
            }

            // copy page options
            modulesRow.Visible = false;
            switch (_strAction)
            {
                case "copy":
                    var tabs = GetTabs(true, false, false, true);
                    var tab = tabs.SingleOrDefault(t => t.TabID == TabId);
                    if (tab != null) cboCopyPage.SelectedPage = tab;
                    DisplayTabModules();
                    break;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="BindTabControls">
          <declaration><![CDATA[private void BindTabControls(TabInfo tab)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="464" sc="9" el="516" ec="10">ManageTabs.ascx.cs</location>
            <body hash="6ddd3ce7026691f64e3e1ff75efc3c52"><![CDATA[{
            // only superusers and administrators can manage parent pages
            if ((string.IsNullOrEmpty(_strAction) || _strAction == "copy" || _strAction == "add")
                    && !UserInfo.IsSuperUser && !UserInfo.IsInRole(PortalSettings.AdministratorRoleName))
            {
                var tabList = GetTabs(true, true, false, true);
                var selectedParentTab = tabList.SingleOrDefault(t => t.TabID == PortalSettings.ActiveTab.TabID);
                if (selectedParentTab != null &&  (selectedParentTab.TabPath.StartsWith("//Admin") == false && selectedParentTab.TabPath.StartsWith("//Host") == false))
                {
                    cboParentTab.SelectedPage = selectedParentTab;
                }  
            }
            else
            {
                var tabList = GetTabs(true, true, true, true);
                var selectedParentTab = tabList.SingleOrDefault(t => t.TabID == PortalSettings.ActiveTab.ParentId);
                cboParentTab.SelectedPage = selectedParentTab;            
            }

            if (string.IsNullOrEmpty(_strAction) || _strAction == "add" || _strAction == "copy")
            {
                BindBeforeAfterTabControls();
                insertPositionRow.Visible = cboPositionTab.Items.Count > 0;
                cboParentTab.AutoPostBack = true;
                cultureTypeList.SelectedValue = PortalController.GetPortalSetting("CreateNewPageCultureType", PortalId, "Localized");

            }
            else
            {
                DisablePositionDropDown();
            }

            cboCacheProvider.DataSource = OutputCachingProvider.GetProviderList();
            cboCacheProvider.DataBind();
            cboCacheProvider.InsertItem(0, Localization.GetString("None_Specified"), "");
            if (tab == null)
            {
                cboCacheProvider.ClearSelection();
                cboCacheProvider.Items[0].Selected = true;
                rblCacheIncludeExclude.ClearSelection();
                rblCacheIncludeExclude.Items[0].Selected = true;
            }

            var tabSettings = TabController.Instance.GetTabSettings(TabId);
            SetValue(cboCacheProvider, tabSettings, "CacheProvider");
            SetValue(txtCacheDuration, tabSettings, "CacheDuration");
            SetValue(rblCacheIncludeExclude, tabSettings, "CacheIncludeExclude");
            SetValue(txtIncludeVaryBy, tabSettings, "IncludeVaryBy");
            SetValue(txtExcludeVaryBy, tabSettings, "ExcludeVaryBy");
            SetValue(txtMaxVaryByCount, tabSettings, "MaxVaryByCount");

            ShowCacheRows();
        }]]></body>
          </codeblock>
        </method>
        <method name="cancelTranslation_Click">
          <declaration><![CDATA[protected void cancelTranslation_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1936" sc="9" el="1939" ec="10">ManageTabs.ascx.cs</location>
            <body hash="3172d03ef91c3bb265ac953f06bd5ae4"><![CDATA[{
            txtTranslationComment.Text = "";
            sendTranslationMessageRow.Visible = false;
        }]]></body>
          </codeblock>
        </method>
        <method name="cboCacheProvider_Change">
          <declaration><![CDATA[private void cboCacheProvider_Change(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1711" sc="9" el="1713" ec="10">ManageTabs.ascx.cs</location>
            <body hash="bc47e203c9d72cff366e8aaed4ad12f3"><![CDATA[{
            ShowCacheRows();
        }]]></body>
          </codeblock>
        </method>
        <method name="cboCopyPage_SelectedIndexChanged">
          <declaration><![CDATA[private void cboCopyPage_SelectedIndexChanged(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1716" sc="9" el="1718" ec="10">ManageTabs.ascx.cs</location>
            <body hash="2cc8062320d42eaf79113bdbae1f937d"><![CDATA[{
            DisplayTabModules();
        }]]></body>
          </codeblock>
        </method>
        <method name="cboFolders_SelectedIndexChanged">
          <declaration><![CDATA[private void cboFolders_SelectedIndexChanged(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1721" sc="9" el="1723" ec="10">ManageTabs.ascx.cs</location>
            <body hash="70ffc6209ba4b37676c20c9e932a86b5"><![CDATA[{
            LoadTemplates();
        }]]></body>
          </codeblock>
        </method>
        <method name="cboParentTab_SelectedIndexChanged">
          <declaration><![CDATA[private void cboParentTab_SelectedIndexChanged(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1726" sc="9" el="1730" ec="10">ManageTabs.ascx.cs</location>
            <body hash="9cc3a05549f8bb1e6ac46b7bd8fcd7c6"><![CDATA[{
            BindBeforeAfterTabControls();

            insertPositionRow.Visible = cboPositionTab.Items.Count > 0;
        }]]></body>
          </codeblock>
        </method>
        <method name="CheckLocalizationVisibility">
          <declaration><![CDATA[private void CheckLocalizationVisibility()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="525" sc="9" el="540" ec="10">ManageTabs.ascx.cs</location>
            <body hash="dcee58c60ad483fd9e06d67dd27490f1"><![CDATA[{
            if (PortalSettings.ContentLocalizationEnabled 
                && LocaleController.Instance.GetLocales(PortalId).Count > 1
                && _tab.TabID != PortalSettings.AdminTabId
                && _tab.ParentId != PortalSettings.AdminTabId
                && contentLocalizationControl != null)
            {
                localizationTab.Visible = true;
                localizationPanel.Visible = true;
            }
            else
            {
                localizationTab.Visible = false;
                localizationPanel.Visible = false;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="CheckQuota">
          <declaration><![CDATA[private void CheckQuota()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="543" sc="9" el="553" ec="10">ManageTabs.ascx.cs</location>
            <body hash="2ea5e50a66a6d255fb1089e38d4db66b"><![CDATA[{
            if (PortalSettings.Pages < PortalSettings.PageQuota || UserInfo.IsSuperUser || PortalSettings.PageQuota == 0)
            {
                cmdUpdate.Enabled = true;
            }
            else
            {
                cmdUpdate.Enabled = false;
                Skin.AddModuleMessage(this, Localization.GetString("ExceededQuota", LocalResourceFile), ModuleMessage.ModuleMessageType.YellowWarning);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="cmdClearAllPageCache_Click">
          <declaration><![CDATA[private void cmdClearAllPageCache_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1733" sc="9" el="1736" ec="10">ManageTabs.ascx.cs</location>
            <body hash="2db086df400a7848bac247f9fd179a10"><![CDATA[{
            OutputCachingProvider.Instance(cboCacheProvider.SelectedValue).PurgeCache(PortalId);
            ShowCacheRows();
        }]]></body>
          </codeblock>
        </method>
        <method name="cmdClearPageCache_Click">
          <declaration><![CDATA[private void cmdClearPageCache_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1739" sc="9" el="1742" ec="10">ManageTabs.ascx.cs</location>
            <body hash="ac4f9c904affc616aef1bb6a29b7a453"><![CDATA[{
            OutputCachingProvider.Instance(cboCacheProvider.SelectedValue).Remove(TabId);
            ShowCacheRows();
        }]]></body>
          </codeblock>
        </method>
        <method name="cmdCopyPerm_Click">
          <declaration><![CDATA[private void cmdCopyPerm_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1745" sc="9" el="1756" ec="10">ManageTabs.ascx.cs</location>
            <body hash="e914327b5dd4d7ff0c1abd143832f594"><![CDATA[{
            try
            {
                TabController.CopyPermissionsToChildren(TabController.Instance.GetTab(TabId, PortalId, false), dgPermissions.Permissions);
                Skin.AddModuleMessage(this, Localization.GetString("PermissionsCopied", LocalResourceFile), ModuleMessage.ModuleMessageType.GreenSuccess);
            }
            catch (Exception ex)
            {
                Skin.AddModuleMessage(this, Localization.GetString("PermissionCopyError", LocalResourceFile), ModuleMessage.ModuleMessageType.RedError);
                Exceptions.ProcessModuleLoadException(this, ex);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="cmdCopySkin_Click">
          <declaration><![CDATA[private void cmdCopySkin_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1759" sc="9" el="1770" ec="10">ManageTabs.ascx.cs</location>
            <body hash="f749bd879aaf8f0fa6025a90dcbf4ecc"><![CDATA[{
            try
            {
                TabController.CopyDesignToChildren(TabController.Instance.GetTab(TabId, PortalId, false), pageSkinCombo.SelectedValue, pageContainerCombo.SelectedValue);
                Skin.AddModuleMessage(this, Localization.GetString("DesignCopied", LocalResourceFile), ModuleMessage.ModuleMessageType.GreenSuccess);
            }
            catch (Exception ex)
            {
                Skin.AddModuleMessage(this, Localization.GetString("DesignCopyError", LocalResourceFile), ModuleMessage.ModuleMessageType.RedError);
                Exceptions.ProcessModuleLoadException(this, ex);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="cmdDelete_Click">
          <declaration><![CDATA[private void cmdDelete_Click(object Sender, EventArgs e)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   cmdDelete_Click runs when the Delete Button is clicked
 </summary>
 <remarks>
 </remarks>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="1780" sc="9" el="1801" ec="10">ManageTabs.ascx.cs</location>
            <body hash="e2ede42635adeba909efbff08cdfb978"><![CDATA[{
            try
            {
                if (DeleteTab(TabId) && TabPermissionController.CanDeletePage())
                {
                    string strURL = Globals.GetPortalDomainName(PortalAlias.HTTPAlias, Request, true);

                    if ((Request.QueryString["returntabid"] != null))
                    {
                        // return to admin tab
                        strURL = Globals.NavigateURL(Convert.ToInt32(Request.QueryString["returntabid"]));
                    }

                    Response.Redirect(strURL, true);
                }
                //Module failed to load
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="cmdUpdate_Click">
          <declaration><![CDATA[private void cmdUpdate_Click(object Sender, EventArgs e)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   cmdUpdate_Click runs when the Update Button is clicked
 </summary>
 <remarks>
 </remarks></documentation>
          <codeblock>
            <location sl="1858" sc="9" el="1907" ec="10">ManageTabs.ascx.cs</location>
            <body hash="5ea111d27fedf449c1b7d51204cba27d"><![CDATA[{
            try
            {
                if (Page.IsValid && TabPermissionController.HasTabPermission("ADD,EDIT,COPY,MANAGE") && IsPageUrlValid())
                {
                    int tabId = SaveTabData(_strAction);

                    if (tabId != Null.NullInteger)
                    {
                        var newCookie = new HttpCookie("LastPageId", string.Format("{0}:{1}", PortalSettings.PortalId, tabId))
                        {
                            Path = (!string.IsNullOrEmpty(Globals.ApplicationPath) ? Globals.ApplicationPath : "/")
                        };
                        Response.Cookies.Add(newCookie);

                        if (PortalSettings.UserMode != PortalSettings.Mode.Edit)
                        {
                            Personalization.SetProfile("Usability", "UserMode" + PortalSettings.PortalId, "EDIT");
                        }

                        var redirectUrl = Globals.NavigateURL(tabId);

                        if ((Request.QueryString["returntabid"] != null))
                        {
                            // return to admin tab
                            redirectUrl = Globals.NavigateURL(Convert.ToInt32(Request.QueryString["returntabid"]));
                        }
                        else if (!string.IsNullOrEmpty(UrlUtils.ValidReturnUrl(Request.QueryString["returnurl"])))
                        {
                            redirectUrl = Request.QueryString["returnurl"];
                        }
                        else
                        {
                            if (!string.IsNullOrEmpty(ctlURL.Url) || chkDisableLink.Checked)
                            {
                                // redirect to current tab if URL was specified ( add or copy )
                                redirectUrl = Globals.NavigateURL(TabId);
                            }
                        }

                        Response.Redirect(redirectUrl, true);
                    }
                }
                //Module failed to load
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="cmdUpdateLocalization_Click">
          <declaration><![CDATA[protected void cmdUpdateLocalization_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2012" sc="9" el="2034" ec="10">ManageTabs.ascx.cs</location>
            <body hash="314851e6ad938ee37d7731bcc901297d"><![CDATA[{
            if (contentLocalizationControl != null)
            {
                contentLocalizationControl.SaveData();
            }

            var returnPath = Globals.NavigateURL();

            if (Request.QueryString["returntabid"] != null)
            {
                // return to admin tab
                var navigateUrl = Globals.NavigateURL(Convert.ToInt32(Request.QueryString["returntabid"]));
                // add location hash to let it select in admin tab intially
                var hash = "#" + (Tab.PortalID == Null.NullInteger ? "H" : "P") + "&" + Tab.TabID;
                returnPath = navigateUrl + hash;
            }
            else if (!string.IsNullOrEmpty(UrlUtils.ValidReturnUrl(Request.QueryString["returnurl"])))
            {
                returnPath = Request.QueryString["returnurl"];
            }
            Response.Redirect(returnPath);
         
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteTab">
          <declaration><![CDATA[private bool DeleteTab(int deleteTabId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="556" sc="9" el="572" ec="10">ManageTabs.ascx.cs</location>
            <body hash="68744692b03f97870dcfd0ccb2bb9f0d"><![CDATA[{
            var bDeleted = Null.NullBoolean;
            if (TabPermissionController.CanDeletePage())
            {
                bDeleted = TabController.Instance.SoftDeleteTab(deleteTabId, PortalSettings);
                if (!bDeleted)
                {
                    Skin.AddModuleMessage(this, Localization.GetString("DeleteSpecialPage", LocalResourceFile), ModuleMessage.ModuleMessageType.RedError);
                }
            }
            else
            {
                Skin.AddModuleMessage(this, Localization.GetString("DeletePermissionError", LocalResourceFile), ModuleMessage.ModuleMessageType.RedError);
            }

            return bDeleted;
        }]]></body>
          </codeblock>
        </method>
        <method name="DisableHostAdminFunctions">
          <declaration><![CDATA[private void DisableHostAdminFunctions()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1496" sc="9" el="1503" ec="10">ManageTabs.ascx.cs</location>
            <body hash="bcea538ae85def7b02a1bbd1dfb30bed"><![CDATA[{
            var children = TabController.GetTabsByParent(PortalSettings.ActiveTab.TabID, PortalSettings.ActiveTab.PortalID);

            if (children == null || children.Count < 1)
            {
                cmdCopySkin.Enabled = false;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="DisablePositionDropDown">
          <declaration><![CDATA[private void DisablePositionDropDown()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="519" sc="9" el="522" ec="10">ManageTabs.ascx.cs</location>
            <body hash="23bc059f759af081d17bfe965ea04a1f"><![CDATA[{
            insertPositionRow.Visible = false;
            cboParentTab.AutoPostBack = false;
        }]]></body>
          </codeblock>
        </method>
        <method name="DisplayTabModules">
          <declaration><![CDATA[private void DisplayTabModules()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="575" sc="9" el="616" ec="10">ManageTabs.ascx.cs</location>
            <body hash="9966abf2bbb655b5051fa87654c391ec"><![CDATA[{
            switch (cboCopyPage.SelectedItem.Value)
            {
                case "":
                    modulesRow.Visible = false;
                    break;
                default:
                    // selected tab
                    if (TabPermissionController.CanAddContentToPage())
                    {
                        int tabId;
                        int.TryParse(cboCopyPage.SelectedItem.Value, out tabId);
                        var dataSource = LoadTabModules(tabId);
                        if (dataSource.Any())
                        {
                            grdModules.DataSource = dataSource;
                            grdModules.DataBind();

                            modulesRow.Visible = true;
                            //find out how many pages has the copy name to avoid duplicate page name
                            var parentId = cboParentTab.SelectedItemValueAsInt;
                            var copyName = string.Format("{0} - Copy", cboCopyPage.SelectedItem.Text.Replace("...", string.Empty));
                            var existsNum =
                                TabController.GetTabsByParent(parentId, PortalSettings.PortalId).Count(t => t.TabName.StartsWith(copyName));
                            if (existsNum > 0)
                            {
                                copyName = string.Format("{0}({1})", copyName, existsNum + 1);
                            }
                            txtTabName.Text = copyName;
                        }
                        else
                        {
                            modulesRow.Visible = false;
                        }
                    }
                    else
                    {
                        modulesRow.Visible = false;
                    }
                    break;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetHostTabs">
          <declaration><![CDATA[private void GetHostTabs(List<TabInfo> tabs)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="619" sc="9" el="624" ec="10">ManageTabs.ascx.cs</location>
            <body hash="a8ddb44bf00bdd7309c348071bbd51d5"><![CDATA[{
            foreach (var kvp in TabController.Instance.GetTabsByPortal(Null.NullInteger))
            {
                tabs.Add(kvp.Value);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetSelectedCultureCode">
          <declaration><![CDATA[private string GetSelectedCultureCode()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1410" sc="6" el="1430" ec="7">ManageTabs.ascx.cs</location>
            <body hash="4a940e41493b64b4f5318d13955cc345"><![CDATA[{
		    var cultureCode = Null.NullString;
		    if (PortalSettings.ContentLocalizationEnabled)
		    {
			    switch (cultureTypeList.SelectedValue)
			    {
				    case "Localized":
					    var defaultLocale = LocaleController.Instance.GetDefaultLocale(PortalId);
					    cultureCode = defaultLocale.Code;
					    break;
				    case "Culture":
					    cultureCode = PortalSettings.CultureCode;
					    break;
				    default:
					    cultureCode = Null.NullString;
					    break;
			    }
		    }

		    return cultureCode;
	    }]]></body>
          </codeblock>
        </method>
        <method name="GetTabs">
          <declaration><![CDATA[private IEnumerable<TabInfo> GetTabs(bool includeCurrent, bool includeURL, bool includeParent, bool includeDescendants)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="627" sc="9" el="664" ec="10">ManageTabs.ascx.cs</location>
            <body hash="6e5c7366f82b0876f275d4dfb8f07a7c"><![CDATA[{
            var tabs = new List<TabInfo>();

            var excludeTabId = Null.NullInteger;
            if (!includeCurrent)
            {
                excludeTabId = PortalSettings.ActiveTab.TabID;
            }

            if (PortalSettings.ActiveTab.IsSuperTab)
            {
                GetHostTabs(tabs);
            }
            else
            {
                tabs = TabController.GetPortalTabs(PortalId, excludeTabId, false, string.Empty, true, false, includeURL, false, true);

                var parentTab = (from tab in tabs where tab.TabID == PortalSettings.ActiveTab.ParentId select tab).FirstOrDefault();

                //Need to include the Parent Tab if its not already in the list of tabs
                if (includeParent && PortalSettings.ActiveTab.ParentId != Null.NullInteger && parentTab == null)
                {
                    tabs.Add(TabController.Instance.GetTab(PortalSettings.ActiveTab.ParentId, PortalId, false));
                }

                if (UserInfo.IsSuperUser && TabId == Null.NullInteger)
                {
                    GetHostTabs(tabs);
                }

                if (!includeDescendants)
                {
                    tabs = (from t in tabs where !t.TabPath.StartsWith(PortalSettings.ActiveTab.TabPath) && !t.TabPath.Equals(PortalSettings.ActiveTab.TabPath) select t).ToList();
                }
            }

            return tabs;
        }]]></body>
          </codeblock>
        </method>
        <method name="grdModules_OnItemDataBound">
          <declaration><![CDATA[protected void grdModules_OnItemDataBound(object sender, DataGridItemEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2037" sc="9" el="2058" ec="10">ManageTabs.ascx.cs</location>
            <body hash="f69573b52294cffa9f04c343a6f6b2a7"><![CDATA[{
            var optNew = (RadioButton) e.Item.FindControl("optNew");
            var optCopy = (RadioButton) e.Item.FindControl("optCopy");
            var optReference = (RadioButton) e.Item.FindControl("optReference");

            var moduleInfo = e.Item.DataItem as ModuleInfo;
            if (optNew != null && moduleInfo != null)
            {
                optCopy.Enabled = moduleInfo.DesktopModule.IsPortable;
                optReference.Enabled = moduleInfo.ModuleID > Null.NullInteger 
                    && ModulePermissionController.HasModuleAccess(SecurityAccessLevel.Edit, "CONTENT", moduleInfo);

                if (optCopy.Enabled)
                {
                    optCopy.Checked = true;
                }
                else
                {
                    optNew.Checked = true;
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="InitializeTab">
          <declaration><![CDATA[private void InitializeTab()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="667" sc="9" el="682" ec="10">ManageTabs.ascx.cs</location>
            <body hash="946067ea68a9cdfcbb7905d56b6c374b"><![CDATA[{
            if ((cboPositionTab.FindItemByValue(TabId.ToString()) != null))
            {
                cboPositionTab.ClearSelection();
                cboPositionTab.FindItemByValue(TabId.ToString()).Selected = true;
            }
            cboFolders.Services.Parameters.Add("permission", "ADD");
            var user = UserController.Instance.GetCurrentUserInfo();
            var folders = FolderManager.Instance.GetFolders(user, "BROWSE, ADD");
            var templateFolder = folders.SingleOrDefault(f => f.DisplayPath == "Templates/");
            if (templateFolder != null)
            {
                cboFolders.SelectedFolder = templateFolder;
                LoadTemplates();
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="InitializeWorkflow">
          <declaration><![CDATA[private void InitializeWorkflow(ContentItem contentItem)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="140" sc="9" el="142" ec="10">ManageTabs.ascx.cs</location>
            <body hash="577a625e4f4c999676fef8c4cea2212e"><![CDATA[{
            contentItem.StateID = Null.NullInteger;
        }]]></body>
          </codeblock>
        </method>
        <method name="IsCircularReference">
          <declaration><![CDATA[private bool IsCircularReference(int tabId, int portalId)]]></declaration>
          <documentation>
            <summary>
   Checks if parent tab will cause a circular reference
 </summary>
 <param name="tabId">Tab id.</param>
 <param name="portalId">portal id.</param>
 <returns></returns>
 <remarks>
 </remarks></documentation>
          <codeblock>
            <location sl="693" sc="9" el="705" ec="10">ManageTabs.ascx.cs</location>
            <body hash="3b5a8a077a11fe6f7f809ae04b4a72ce"><![CDATA[{
            if (tabId != -1)
            {
                var tabInfo = TabController.Instance.GetTab(tabId, portalId, false);

                if (tabInfo.Level == 0)
                {
                    return false;
                }
                return TabId == tabInfo.ParentId || IsCircularReference(tabInfo.ParentId, portalId);
            }
            return false;
        }]]></body>
          </codeblock>
        </method>
        <method name="IsLanguageModuleInstalled">
          <declaration><![CDATA[private bool IsLanguageModuleInstalled()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="269" sc="9" el="271" ec="10">ManageTabs.ascx.cs</location>
            <body hash="c1c1f8b254417ae646135c6c885d1e6a"><![CDATA[{
            return DesktopModuleController.GetDesktopModuleByFriendlyName("Languages") != null;
        }]]></body>
          </codeblock>
        </method>
        <method name="IsPageUrlValid">
          <declaration><![CDATA[private bool IsPageUrlValid()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1804" sc="9" el="1849" ec="10">ManageTabs.ascx.cs</location>
            <body hash="cb6a38101843abb62fcb1ab3f0150d34"><![CDATA[{
            var url = urlTextBox.Text;

            if (string.IsNullOrEmpty(url))
            {
                return true;
            }

            var urlPath = url.TrimStart('/');
            bool modified;

	        var friendlyUrlSettings = new FriendlyUrlSettings(PortalSettings.PortalId);
	        urlPath = UrlRewriterUtils.CleanExtension(urlPath, friendlyUrlSettings, string.Empty);

            //Clean Url
			var options = UrlRewriterUtils.ExtendOptionsForCustomURLs(UrlRewriterUtils.GetOptionsFromSettings(friendlyUrlSettings));
            urlPath = FriendlyUrlController.CleanNameForUrl(urlPath, options, out modified);
            if (modified)
            {
                ShowWarningMessage(Localization.GetString("UrlPathCleaned.Error", LocalResourceFile));
                urlTextBox.Text = '/' + urlPath;
                urlTextBox.CssClass += " um-page-url-modified";
                return false;
            }

            //Validate for uniqueness
            int tabIdToValidate = -1;
            if (_strAction == "edit")
            {
                tabIdToValidate = Tab.TabID;
            }
            urlPath = FriendlyUrlController.ValidateUrl(urlPath, tabIdToValidate, PortalSettings, out modified);
            if (modified)
            {
                ShowWarningMessage(Localization.GetString("UrlPathNotUnique.Error", LocalResourceFile));
                urlTextBox.Text = '/' + urlPath;
                urlTextBox.CssClass += " um-page-url-modified";
                return false;
            }

            //update the text field with update value, because space char may replaced but the modified flag will not change to true.
            //in this case we should update the value back so that it can create tab with new path.
            urlTextBox.Text = '/' + urlPath;
            urlTextBox.CssClass = urlTextBox.CssClass.Replace(" um-page-url-modified", string.Empty);
            return true;
        }]]></body>
          </codeblock>
        </method>
        <method name="IsValidTabPath">
          <declaration><![CDATA[private bool IsValidTabPath(TabInfo tab, string newTabPath)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1355" sc="9" el="1382" ec="10">ManageTabs.ascx.cs</location>
            <body hash="126f665a8d800981c011770c99b119be"><![CDATA[{
            var valid = true;

            //get default culture if the tab's culture is null
            var cultureCode = _strAction != "edit" ? GetSelectedCultureCode() : tab.CultureCode;

            //Validate Tab Path
            var tabID = TabController.GetTabByTabPath(tab.PortalID, newTabPath, cultureCode);
            if (tabID != Null.NullInteger && tabID != tab.TabID)
            {
                var existingTab = TabController.Instance.GetTab(tabID, tab.PortalID, false);
                if (existingTab != null && existingTab.IsDeleted)
                    ShowWarningMessage(Localization.GetString("TabRecycled", LocalResourceFile));
                else
                    ShowErrorMessage(Localization.GetString("TabExists", LocalResourceFile));

                valid = false;
            }

            //check whether have conflict between tab path and portal alias.
            if (TabController.IsDuplicateWithPortalAlias(tab.PortalID, newTabPath))
            {
                ShowWarningMessage(Localization.GetString("PathDuplicateWithAlias", LocalResourceFile));
                valid = false;
            }

            return valid;
        }]]></body>
          </codeblock>
        </method>
        <method name="languageTranslatedCheckbox_CheckChanged">
          <declaration><![CDATA[protected void languageTranslatedCheckbox_CheckChanged(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1910" sc="9" el="1927" ec="10">ManageTabs.ascx.cs</location>
            <body hash="f0c384bee74d7c008bf088ff9b6bb02f"><![CDATA[{
            try
            {
                var box = sender as DnnCheckBox;
                if (box != null)
                {
                    var translatedCheckbox = box;
                    int tabId;
                    int.TryParse(translatedCheckbox.CommandArgument, out tabId);
                    TabInfo localizedTab = TabController.Instance.GetTab(tabId, PortalId, false);
                    TabController.Instance.UpdateTranslationStatus(localizedTab, translatedCheckbox.Checked);
                }
            }
            catch (Exception ex)
            {
                Exceptions.ProcessModuleLoadException(this, ex);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="LoadContentLocalizationControl">
          <declaration><![CDATA[private void LoadContentLocalizationControl()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="260" sc="9" el="266" ec="10">ManageTabs.ascx.cs</location>
            <body hash="3d7726690162690dfcbb924abd079236"><![CDATA[{
            if (IsLanguageModuleInstalled())
            {
                contentLocalizationControl = LoadControl(ContentLocalizationControlPath);
                localizationControlRow.Controls.Add(contentLocalizationControl);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="LoadTabModules">
          <declaration><![CDATA[private List<ModuleInfo> LoadTabModules(int tabId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="708" sc="9" el="720" ec="10">ManageTabs.ascx.cs</location>
            <body hash="02ac97a5745e11aff925278cded7d7d9"><![CDATA[{
            var moduleList = new List<ModuleInfo>();

            foreach (var m in ModuleController.Instance.GetTabModules(tabId).Values)
            {
                if (TabPermissionController.CanAddContentToPage() && !m.IsDeleted && !m.AllTabs)
                {
                    moduleList.Add(m);
                }
            }

            return moduleList;
        }]]></body>
          </codeblock>
        </method>
        <method name="LoadTemplates">
          <declaration><![CDATA[private void LoadTemplates()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="723" sc="9" el="755" ec="10">ManageTabs.ascx.cs</location>
            <body hash="7f83d3abd7eecd13b6be0912fc79c62b"><![CDATA[{
            cboTemplate.Items.Clear();
            if (cboFolders.SelectedItem != null)
            {
                var folder = FolderManager.Instance.GetFolder(cboFolders.SelectedItemValueAsInt);
                if (folder != null)
                {
                    var files = Globals.GetFileList(PortalId, "page.template", false, folder.FolderPath);
                    foreach (FileItem file in files)
                    {
                        cboTemplate.AddItem(file.Text.Replace(".page.template", ""), file.Value);
                    }

                    cboTemplate.InsertItem(0, Localization.GetString("None_Specified"), "");

					if (!Page.IsPostBack)
					{
						cboTemplate.ClearSelection();
						var defaultItem = cboTemplate.FindItemByText("Default");
						if (defaultItem != null)
						{
							defaultItem.Selected = true;
						}
					}

                    if (cboTemplate.SelectedIndex == -1)
                    {
                        cboTemplate.SelectedIndex = 0;
                    }
                }

            }
        }]]></body>
          </codeblock>
        </method>
        <method name="MakeNeutral_Click">
          <declaration><![CDATA[protected void MakeNeutral_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1984" sc="9" el="1993" ec="10">ManageTabs.ascx.cs</location>
            <body hash="4007be2958a487b8e99622a1d089b4d2"><![CDATA[{
            if (TabController.Instance.GetTabsByPortal(PortalId).WithParentId(_tab.TabID).Count == 0)
            {
                var defaultLocale = LocaleController.Instance.GetDefaultLocale(PortalId);

                TabController.Instance.ConvertTabToNeutralLanguage(PortalId, _tab.TabID, defaultLocale.Code, true);

                Response.Redirect(Request.RawUrl, false);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="MakeTranslatable_Click">
          <declaration><![CDATA[protected void MakeTranslatable_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2003" sc="9" el="2009" ec="10">ManageTabs.ascx.cs</location>
            <body hash="d80833e48dd3bc6a1ec3c87852942ca0"><![CDATA[{
            var defaultLocale = LocaleController.Instance.GetDefaultLocale(PortalId);
            TabController.Instance.LocalizeTab(_tab, defaultLocale);
            TabController.Instance.AddMissingLanguages(PortalId, _tab.TabID);
            TabController.Instance.ClearCache(PortalId);
            Response.Redirect(Request.RawUrl, false);
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1437" sc="9" el="1493" ec="10">ManageTabs.ascx.cs</location>
            <body hash="2c776be0dc7119d9adc3bd3a579cad3f"><![CDATA[{
            base.OnInit(e);

			JavaScript.RequestRegistration(CommonJs.DnnPlugins);

            ClientResourceManager.RegisterScript(Page, "~/Resources/Shared/Scripts/dnn.extensions.js", FileOrder.Js.DefaultPriority);
            ClientResourceManager.RegisterScript(Page, "~/Resources/Shared/scripts/dnn.jquery.extensions.js", FileOrder.Js.DefaultPriority + 1);
            ClientResourceManager.RegisterScript(Page, "~/DesktopModules/Admin/Tabs/ClientScripts/dnn.PageUrl.js", FileOrder.Js.DefaultPriority + 2);
            ServicesFramework.Instance.RequestAjaxAntiForgerySupport();

            cboCacheProvider.SelectedIndexChanged += cboCacheProvider_Change;
            cboCopyPage.SelectionChanged += cboCopyPage_SelectedIndexChanged;
            cboFolders.SelectionChanged += cboFolders_SelectedIndexChanged;
            cboParentTab.SelectionChanged += cboParentTab_SelectedIndexChanged;
            cmdClearAllPageCache.Click += cmdClearAllPageCache_Click;
            cmdClearPageCache.Click += cmdClearPageCache_Click;
            cmdCopyPerm.Click += cmdCopyPerm_Click;
            cmdCopySkin.Click += cmdCopySkin_Click;
            cmdDelete.Click += cmdDelete_Click;
            cmdUpdate.Click += cmdUpdate_Click;
            rblCacheIncludeExclude.SelectedIndexChanged += rblCacheIncludeExclude_Change;
            readyForTranslationButton.Click += readyForTranslationButton_Click;
            cmdSubmitTranslation.Click += submitTranslation_Click;
            cmdCancelTranslation.Click += cancelTranslation_Click;
            // Verify that the current user has access to edit this module
            if (!TabPermissionController.HasTabPermission("ADD,EDIT,COPY,DELETE,MANAGE"))
            {
                Response.Redirect(Globals.AccessDeniedURL(), true);
            }
            if ((Request.QueryString["action"] != null))
            {
                _strAction = Request.QueryString["action"].ToLower();
            }

            if (Tab.ContentItemId == Null.NullInteger && Tab.TabID != Null.NullInteger)
            {
                //This tab does not have a valid ContentItem
                TabController.Instance.CreateContentItem(Tab);
                TabController.Instance.UpdateTab(Tab);
            }

            DisableHostAdminFunctions();

            if (PortalSettings.ActiveTab.IsSuperTab || PortalSecurity.IsInRole("Administrators") || PortalSettings.ActiveTab.ParentId == Null.NullInteger)
            {
                // Add Non Specified if user is Admin or if current tab is already on the top level
                cboParentTab.UndefinedItem = new ListItem(DynamicSharedConstants.Unspecified, string.Empty);
            }

            cboCopyPage.UndefinedItem = new ListItem(DynamicSharedConstants.Unspecified, string.Empty);

            PortalAliasCaption.Text = PortalAlias.HTTPAlias;
            PortalAliasCaption.ToolTip = PortalAlias.HTTPAlias;
            UrlContainer.Attributes.Add(HtmlTextWriterAttribute.Class.ToString(), "um-page-url-container");

            LoadContentLocalizationControl();
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1506" sc="9" el="1658" ec="10">ManageTabs.ascx.cs</location>
            <body hash="9f25765ebf57cb4cb6861f3da6324d41"><![CDATA[{
            base.OnLoad(e);

            try
            {

                if (Page.IsPostBack == false)
                {
                    // load the list of files found in the upload directory
                    ctlIcon.ShowFiles = true;
                    ctlIcon.ShowImages = true;
                    ctlIcon.ShowTabs = false;
                    ctlIcon.ShowUrls = false;
                    ctlIcon.Required = false;

                    ctlIcon.ShowLog = false;
                    ctlIcon.ShowNewWindow = false;
                    ctlIcon.ShowTrack = false;
                    ctlIcon.FileFilter = Globals.glbImageFileTypes;
                    ctlIcon.Width = "275px";

                    ctlIconLarge.ShowFiles = ctlIcon.ShowFiles;
                    ctlIconLarge.ShowImages = ctlIcon.ShowImages;
                    ctlIconLarge.ShowTabs = ctlIcon.ShowTabs;
                    ctlIconLarge.ShowUrls = ctlIcon.ShowUrls;
                    ctlIconLarge.Required = ctlIcon.Required;

                    ctlIconLarge.ShowLog = ctlIcon.ShowLog;
                    ctlIconLarge.ShowNewWindow = ctlIcon.ShowNewWindow;
                    ctlIconLarge.ShowTrack = ctlIcon.ShowTrack;
                    ctlIconLarge.FileFilter = ctlIcon.FileFilter;
                    ctlIconLarge.Width = ctlIcon.Width;

                    // tab administrators can only manage their own tab
                    if (!UserInfo.IsSuperUser && !UserInfo.IsInRole(PortalSettings.AdministratorRoleName))
                    {
                        cboParentTab.Enabled = false;
                    }

                    ctlURL.Width = "275px";

                    rowCopySkin.Visible = false;
                    copyPermissionRow.Visible = false;
                    cmdUpdate.Visible = TabPermissionController.HasTabPermission("ADD,EDIT,COPY,MANAGE");
                    cmdUpdate.Text = Localization.GetString(_strAction == "edit" ? "Update" : "Add", LocalResourceFile);

                    bool usingDefaultLocale = LocaleController.Instance.IsDefaultLanguage(LocaleController.Instance.GetCurrentLocale(PortalId).Code);
                    switch (_strAction)
                    {
                        case "":
                        case "add":
                            // add
                            CheckQuota();
                            templateRow1.Visible = true;
                            templateRow2.Visible = true;
                            copyPanel.Visible = TabPermissionController.CanCopyPage() && usingDefaultLocale;
                            cmdDelete.Visible = false;
                            ctlURL.IncludeActiveTab = true;
                            ctlAudit.Visible = false;
                            AdvancedSettingExtensionControl.Visible = false;
                            break;
                        case "edit":
                            copyPermissionRow.Visible = (TabPermissionController.CanAdminPage() && TabController.Instance.GetTabsByPortal(PortalId).DescendentsOf(TabId).Count > 0);
                            rowCopySkin.Visible = true;
                            copyPanel.Visible = false;
                            cmdDelete.Visible = TabPermissionController.CanDeletePage() && !TabController.IsSpecialTab(TabId, PortalSettings);
                            ctlURL.IncludeActiveTab = false;
                            ctlAudit.Visible = true;
                            AdvancedSettingExtensionControl.Visible = (Config.GetFriendlyUrlProvider() == "advanced");
                            break;
                        case "copy":
                            CheckQuota();
                            copyPanel.Visible = TabPermissionController.CanCopyPage() && usingDefaultLocale;
                            cmdDelete.Visible = false;
                            ctlURL.IncludeActiveTab = true;
                            ctlAudit.Visible = false;
                            AdvancedSettingExtensionControl.Visible = false;
                            break;
                        case "delete":
                            if (DeleteTab(TabId))
                            {
                                Response.Redirect(Globals.AddHTTP(PortalAlias.HTTPAlias), true);
                            }
                            else
                            {
                                _strAction = "edit";
                                copyPanel.Visible = false;
                                cmdDelete.Visible = TabPermissionController.CanDeletePage();
                            }
                            ctlURL.IncludeActiveTab = false;
                            ctlAudit.Visible = true;
                            AdvancedSettingExtensionControl.Visible = false;
                            break;
                    }
                    copyTab.Visible = copyPanel.Visible;

                    BindTab();

                    //Set the tab id of the permissions grid to the TabId (Note If in add mode
                    //this means that the default permissions inherit from the parent)
                    if (_strAction == "edit" || _strAction == "delete" || _strAction == "copy" || !TabPermissionController.CanAdminPage())
                    {
                        dgPermissions.TabID = TabId;
                    }
                    else
                    {
                        var parentTabId = (cboParentTab.SelectedItem != null) ? cboParentTab.SelectedItemValueAsInt : Null.NullInteger;
                        dgPermissions.TabID = parentTabId;
                    }
                }

                CheckLocalizationVisibility();
                //DNN-5882 if parent page is a superTab - hide localization options
                if (PortalSettings.ActiveTab.IsSuperTab && PortalSettings.ActiveTab.ParentId != -1)
                {
                    localizationTab.Visible = false;
                    cmdUpdateLocalization.Visible = false;
                    MakeTranslatable.Visible = false;
                    MakeNeutral.Visible = false;
                    AddMissing.Visible = false;
                    readyForTranslationButton.Visible = false;
                }
                else
                {
                    BindLocalization();
                }
                

                cancelHyperLink.NavigateUrl = Globals.NavigateURL();

                if (Request.QueryString["returntabid"] != null)
                {
                    // return to admin tab
                    var navigateUrl = Globals.NavigateURL(Convert.ToInt32(Request.QueryString["returntabid"]));
                    // add localtion hash to let it select in admin tab intially
                    var hash = "#" + (Tab.PortalID == Null.NullInteger ? "H" : "P") + "&" + Tab.TabID;
                    cancelHyperLink.NavigateUrl = navigateUrl + hash;
                }
                else if (!string.IsNullOrEmpty(UrlUtils.ValidReturnUrl(Request.QueryString["returnurl"])))
                {
                    cancelHyperLink.NavigateUrl = Request.QueryString["returnurl"];
                }

                if (ctlAudit.Visible)
                {
                    ctlAudit.Entity = Tab;
                }
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnPreRender">
          <declaration><![CDATA[protected override void OnPreRender(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1661" sc="9" el="1703" ec="10">ManageTabs.ascx.cs</location>
            <body hash="ff5e2d7d65d2d80062e5003f3568e53e"><![CDATA[{
            base.OnPreRender(e);

            redirectRow.Visible = ctlURL.UrlType != "N";

            //var locales = LocaleController.Instance.GetLocales(PortalId);
            //var urlLocale = locales.Values.FirstOrDefault(local => local.Code == PortalAlias.CultureCode);

            //if (_strAction == "edit")
            //{
            //    var options = new PageUrlOptions
            //    {
            //        PageUrlInputId = urlTextBox.ClientID,
            //        UpdateUrlButtonTooltip = LocalizeString("UpdateUrlButton.Tooltip"),
            //        UpdateUrlButtonCaption = LocalizeString("UpdateUrlButton.Caption"),
            //        PageUrlContainerId = UrlContainer.ClientID,
            //        UpdateUrlDto = new SaveUrlDto
            //                                {
            //                                    LocaleKey = (urlLocale != null) ? urlLocale.KeyID : -1,
            //                                    SiteAliasKey = -1,
            //                                    SiteAliasUsage = (int)PortalAliasUsageType.Default,
            //                                    StatusCodeKey = 200,
            //                                    Id = 0,
            //                                    IsSystem = false,
            //                                    QueryString = String.Empty,
            //                                    Path = string.Empty
            //                                }
            //    };

            //    var optionsAsJsonString = Json.Serialize(options);

            //    var script = string.Format("dnn.createPageUrl({0});", optionsAsJsonString);
            //    if (ScriptManager.GetCurrent(Page) != null)
            //    {
            //        // respect MS AJAX
            //        ScriptManager.RegisterStartupScript(Page, GetType(), "PageUrl", script, true);
            //    }
            //    else
            //    {
            //        Page.ClientScript.RegisterStartupScript(GetType(), "PageUrl", script, true);
            //    }
            //}
        }]]></body>
          </codeblock>
        </method>
        <method name="rblCacheIncludeExclude_Change">
          <declaration><![CDATA[private void rblCacheIncludeExclude_Change(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1931" sc="9" el="1933" ec="10">ManageTabs.ascx.cs</location>
            <body hash="eb29efa025748e3d7e8b1344189ceea8"><![CDATA[{
            ShowCacheIncludeExcludeRows();
        }]]></body>
          </codeblock>
        </method>
        <method name="readyForTranslationButton_Click">
          <declaration><![CDATA[protected void readyForTranslationButton_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1942" sc="9" el="1946" ec="10">ManageTabs.ascx.cs</location>
            <body hash="329abfc86c33903b85a7674123eee8c5"><![CDATA[{
            sendTranslationMessageRow.Visible = true;
            sendTranslationMessageConfirm.Visible = false;

        }]]></body>
          </codeblock>
        </method>
        <method name="SaveTabData">
          <declaration><![CDATA[private int SaveTabData(string strAction)]]></declaration>
          <documentation>
            <summary>
   SaveTabData saves the Tab to the Database
 </summary>
 <remarks>
 </remarks>
 <param name="strAction">The action to perform "edit" or "add"</param></documentation>
          <codeblock>
            <location sl="764" sc="9" el="1255" ec="10">ManageTabs.ascx.cs</location>
            <body hash="775d56e2614b33a11aadce52d1a80d5f"><![CDATA[{
            string strIcon = ctlIcon.Url;
            string strIconLarge = ctlIconLarge.Url;

            Tab.TabName = txtTabName.Text;
            Tab.Title = txtTitle.Text;
            Tab.Description = txtDescription.Text;
            Tab.KeyWords = txtKeyWords.Text;
            Tab.IsVisible = chkMenu.Checked;
            Tab.DisableLink = chkDisableLink.Checked;

            TabInfo parentTab = null;
            if (cboParentTab.SelectedItem != null)
            {
                var parentTabId = cboParentTab.SelectedItemValueAsInt;
                parentTab = TabController.Instance.GetTab(parentTabId, -1, false);
            }

            if (parentTab != null)
            {
                Tab.PortalID = parentTab.PortalID;
                Tab.ParentId = parentTab.TabID;
            }
            else
            {
                Tab.ParentId = Null.NullInteger;
            }
            Tab.IconFile = strIcon;
            Tab.IconFileLarge = strIconLarge;
            Tab.IsDeleted = false;
            Tab.Url = ctlURL.Url;

            Tab.TabPermissions.Clear();
            if (Tab.PortalID != Null.NullInteger)
            {
                Tab.TabPermissions.AddRange(dgPermissions.Permissions);
            }

            Tab.Terms.Clear();
            Tab.Terms.AddRange(termsSelector.Terms);

            Tab.SkinSrc = pageSkinCombo.SelectedValue;
            Tab.ContainerSrc = pageContainerCombo.SelectedValue;
            Tab.TabPath = Globals.GenerateTabPath(Tab.ParentId, Tab.TabName);

            //Check for invalid
            string invalidType;
            if (!TabController.IsValidTabName(Tab.TabName, out invalidType))
            {
                ShowWarningMessage(string.Format(Localization.GetString(invalidType, LocalResourceFile), Tab.TabName));
                return Null.NullInteger;
            }

            //Validate Tab Path
            if (!IsValidTabPath(Tab, Tab.TabPath))
            {
                return Null.NullInteger;
            }

            //Set Tab's position
            var positionTabId = Null.NullInteger;
            if (!string.IsNullOrEmpty(cboPositionTab.SelectedValue) && cboPositionTab.Items.Count > 0)
            {
                if (!int.TryParse(cboPositionTab.SelectedValue, out positionTabId))
                {
                    positionTabId = Null.NullInteger;
                }
            }

            //Set Culture Code
            if (strAction != "edit")
            {
	            Tab.CultureCode = GetSelectedCultureCode();
                if (PortalSettings.ContentLocalizationEnabled)
                {
                    if (PortalController.GetPortalSetting("CreateNewPageCultureType", PortalId, "Localized") != cultureTypeList.SelectedValue)
                    {
                        PortalController.UpdatePortalSetting(PortalId, "CreateNewPageCultureType", cultureTypeList.SelectedValue, true);
                    }

                    var tabLocale = LocaleController.Instance.GetLocale(Tab.CultureCode) ?? LocaleController.Instance.GetDefaultLocale(PortalId);

                    //Fix parent 
                    if (Tab.ParentId > Null.NullInteger)
                    {
                        parentTab = TabController.Instance.GetTab(Tab.ParentId, PortalId, false);
                        if (parentTab.CultureCode != Tab.CultureCode)
                        {
                            parentTab = TabController.Instance.GetTabByCulture(Tab.ParentId, PortalId, tabLocale);
                        }
                        if (parentTab != null)
                        {
                            Tab.ParentId = parentTab.TabID;
                        }
                    }

                    //Fix position TabId
                    if (positionTabId > Null.NullInteger)
                    {
                        var positionTab = TabController.Instance.GetTab(positionTabId, PortalId, false);
                        if (positionTab.CultureCode != Tab.CultureCode)
                        {
                            positionTab = TabController.Instance.GetTabByCulture(positionTabId, PortalId, tabLocale);
                        }
                        if (positionTab != null)
                        {
                            positionTabId = positionTab.TabID;
                        }
                    }
                }
            }

            //Validate Tab Path
            if (string.IsNullOrEmpty(strAction))
            {
                var tabID = TabController.GetTabByTabPath(Tab.PortalID, Tab.TabPath, Tab.CultureCode);

                if (tabID != Null.NullInteger)
                {
                    var existingTab = TabController.Instance.GetTab(tabID, PortalId, false);
                    if (existingTab != null && existingTab.IsDeleted)
                    {
                        Skin.AddModuleMessage(this, Localization.GetString("TabRecycled", LocalResourceFile), ModuleMessage.ModuleMessageType.YellowWarning);
                    }
                    else
                    {
                        Skin.AddModuleMessage(this, Localization.GetString("TabExists", LocalResourceFile), ModuleMessage.ModuleMessageType.RedError);
                    }
                    return Null.NullInteger;
                }
            }

            Tab.StartDate = startDatePicker.SelectedDate != null ? startDatePicker.SelectedDate.Value : Null.NullDate;
            Tab.EndDate = endDatePicker.SelectedDate != null ? endDatePicker.SelectedDate.Value : Null.NullDate;

            if (Tab.StartDate > Null.NullDate && Tab.EndDate > Null.NullDate && Tab.StartDate >= Tab.EndDate)
            {
                Skin.AddModuleMessage(this, Localization.GetString("InvalidTabDates", LocalResourceFile), ModuleMessage.ModuleMessageType.RedError);
                return Null.NullInteger;
            }

            if (!valRefreshInterval.IsValid)
            {
                return Null.NullInteger;
            }
            Tab.RefreshInterval = txtRefreshInterval.Text == "" ? Null.NullInteger : Convert.ToInt32(txtRefreshInterval.Text);

            if (!valPriorityRequired.IsValid || !valPriority.IsValid)
            {
                return Null.NullInteger;
            }

            float pri;
            if (float.TryParse(txtPriority.Text, out pri))
            {
                Tab.SiteMapPriority = (float)Math.Round(pri, 1);
            }

            Tab.PageHeadText = txtPageHeadText.Text;
            Tab.IsSecure = chkSecure.Checked;
            Tab.PermanentRedirect = chkPermanentRedirect.Checked;

            UpdateTabSettings(Tab);
            if (strAction == "edit")
            {
                // trap circular tab reference
                if (cboParentTab.SelectedItem != null && Tab.TabID != cboParentTab.SelectedItemValueAsInt && !IsCircularReference(cboParentTab.SelectedItemValueAsInt, Tab.PortalID))
                {
                    TabController.Instance.UpdateTab(Tab);
                    if (IsHostMenu && Tab.PortalID != Null.NullInteger)
                    {
                        //Host Tab moved to Portal so clear Host cache
                        TabController.Instance.ClearCache(Null.NullInteger);
                    }
                    if (!IsHostMenu && Tab.PortalID == Null.NullInteger)
                    {
                        //Portal Tab moved to Host so clear portal cache
                        TabController.Instance.ClearCache(PortalId);
                    }
                }
            }
            else
            {
                if (positionTabId == Null.NullInteger)
                {
                    Tab.TabID = TabController.Instance.AddTab(Tab);
                }
                else
                {
                    if (rbInsertPosition.SelectedValue == "After" && positionTabId > Null.NullInteger)
                    {
                        Tab.TabID = TabController.Instance.AddTabAfter(Tab, positionTabId);
                    }
                    else if (rbInsertPosition.SelectedValue == "Before" && positionTabId > Null.NullInteger)
                    {
                        Tab.TabID = TabController.Instance.AddTabBefore(Tab, positionTabId);
                    }
                    else
                    {
                        Tab.TabID = TabController.Instance.AddTab(Tab);
                    }
                }

                //Create Localized versions
                if (PortalSettings.ContentLocalizationEnabled && cultureTypeList.SelectedValue == "Localized" && Tab.PortalID != -1)
                {
                    TabController.Instance.CreateLocalizedCopies(Tab);
                    //Refresh tab
                    _tab = TabController.Instance.GetTab(Tab.TabID, Tab.PortalID, true);

                    //change the localized pages order to match original order.
                    if (positionTabId > Null.NullInteger && _tab.LocalizedTabs.Count > 1)
                    {
                        var positionTab = TabController.Instance.GetTab(positionTabId, _tab.PortalID);
		                if (positionTab != null)
		                {
			                foreach (var localizedTab in _tab.LocalizedTabs.Values)
			                {
				                var cultureCode = localizedTab.CultureCode;
								if (positionTab.LocalizedTabs.ContainsKey(cultureCode))
				                {
									var localizedPositionTab = positionTab.LocalizedTabs[cultureCode];

									if (rbInsertPosition.SelectedValue == "After")
									{
										TabController.Instance.MoveTabAfter(localizedTab, localizedPositionTab.TabID);
									}
									else if (rbInsertPosition.SelectedValue == "Before")
									{
										TabController.Instance.MoveTabBefore(localizedTab, localizedPositionTab.TabID);
									}
				                }
			                }
		                }
	                }
                }

                var copyTabId = cboCopyPage.Visible && cboCopyPage.SelectedItem != null ? cboCopyPage.SelectedItemValueAsInt : Null.NullInteger;

                if (copyTabId != Null.NullInteger)
                {
                    foreach (DataGridItem objDataGridItem in grdModules.Items)
                    {
                        var chkModule = (CheckBox)objDataGridItem.FindControl("chkModule");
                        if (chkModule.Checked)
                        {
                            var intModuleID = Convert.ToInt32(grdModules.DataKeys[objDataGridItem.ItemIndex]);
                            var optCopy = (RadioButton)objDataGridItem.FindControl("optCopy");
                            var optReference = (RadioButton)objDataGridItem.FindControl("optReference");
                            var txtCopyTitle = (TextBox)objDataGridItem.FindControl("txtCopyTitle");

                            var objModule = ModuleController.Instance.GetModule(intModuleID, copyTabId, false);
                            ModuleInfo newModule = null;
                            if ((objModule != null))
                            {
                                //Clone module as it exists in the cache and changes we make will update the cached object
                                newModule = objModule.Clone();

                                newModule.TabID = Tab.TabID;
                                newModule.DefaultLanguageGuid = Null.NullGuid;
                                newModule.CultureCode = Tab.CultureCode;
                                newModule.ModuleTitle = txtCopyTitle.Text;

                                if (!optReference.Checked)
                                {
                                    newModule.ModuleID = Null.NullInteger;
                                    ModuleController.Instance.InitialModulePermission(newModule, newModule.TabID, 0);
                                    newModule.InheritViewPermissions = objModule.InheritViewPermissions;
                                }

                                newModule.ModuleID = ModuleController.Instance.AddModule(newModule);

                                //copy permissions from source module
                                foreach (ModulePermissionInfo permission in objModule.ModulePermissions)
                                {
                                    newModule.ModulePermissions.Add(new ModulePermissionInfo
                                    {
                                        ModuleID = newModule.ModuleID,
                                        PermissionID = permission.PermissionID,
                                        RoleID = permission.RoleID,
                                        UserID = permission.UserID,
                                        PermissionKey = permission.PermissionKey,
                                        AllowAccess = permission.AllowAccess
                                    }, true);
                                }

                                ModulePermissionController.SaveModulePermissions(newModule);

                                if (optCopy.Checked)
                                {
                                    if (!string.IsNullOrEmpty(newModule.DesktopModule.BusinessControllerClass))
                                    {
                                        var objObject = Reflection.CreateObject(newModule.DesktopModule.BusinessControllerClass, newModule.DesktopModule.BusinessControllerClass);
                                        var o = objObject as IPortable;
                                        if (o != null)
                                        {
                                            var content = Convert.ToString(o.ExportModule(intModuleID));
                                            if (!string.IsNullOrEmpty(content))
                                            {
                                                o.ImportModule(newModule.ModuleID, content, newModule.DesktopModule.Version, UserInfo.UserID);
                                            }
                                        }
                                    }
                                }
                            }

                            if (optReference.Checked)
                            {
                                //Make reference copies on secondary language
                                foreach (var m in objModule.LocalizedModules.Values)
                                {
                                    var newLocalizedModule = m.Clone();
                                    var localizedTab = Tab.LocalizedTabs[m.CultureCode];
                                    newLocalizedModule.TabID = localizedTab.TabID;
                                    newLocalizedModule.CultureCode = localizedTab.CultureCode;
                                    newLocalizedModule.ModuleTitle = txtCopyTitle.Text;
                                    newLocalizedModule.DefaultLanguageGuid = newModule.UniqueId;
                                    newLocalizedModule.ModuleID = ModuleController.Instance.AddModule(newLocalizedModule);
                                }
                            }
                        }
                    }
                }
                else
                {
                    // create the page from a template
                    if (!string.IsNullOrEmpty(cboTemplate.SelectedValue))
                    {
                        var xmlDoc = new XmlDocument();
                        try
                        {
                            // open the XML file
                            var fileId = Convert.ToInt32(cboTemplate.SelectedValue);
							var templateFile = FileManager.Instance.GetFile(fileId);
							xmlDoc.Load(FileManager.Instance.GetFileContent(templateFile));
                        }
                        catch (Exception ex)
                        {
                            Exceptions.LogException(ex);

                            Skin.AddModuleMessage(this, Localization.GetString("BadTemplate", LocalResourceFile), ModuleMessage.ModuleMessageType.RedError);
                            return Null.NullInteger;
                        }
                        TabController.DeserializePanes(xmlDoc.SelectSingleNode("//portal/tabs/tab/panes"), Tab.PortalID, Tab.TabID, PortalTemplateModuleAction.Ignore, new Hashtable());
                        //save tab permissions
                        RibbonBarManager.DeserializeTabPermissions(xmlDoc.SelectNodes("//portal/tabs/tab/tabpermissions/permission"), Tab);

                        var tabIndex = 0;
                        var exceptions = string.Empty;
                        foreach (XmlNode tabNode in xmlDoc.SelectSingleNode("//portal/tabs").ChildNodes)
                        {
                            //Create second tab onward tabs. Note first tab is already created above.
                            if (tabIndex > 0)
                            {
                                try
                                {
                                    TabController.DeserializeTab(tabNode, null, PortalId, PortalTemplateModuleAction.Replace);
                                }
                                catch (Exception ex)
                                {
                                    Exceptions.LogException(ex);
                                    exceptions += string.Format("Template Tab # {0}. Error {1}<br/>", tabIndex + 1, ex.Message);
                                }
                            }
                            else
                            {
                                if (string.IsNullOrEmpty(Tab.SkinSrc) && !String.IsNullOrEmpty(XmlUtils.GetNodeValue(tabNode, "skinsrc", "")))
                                {
                                    Tab.SkinSrc = XmlUtils.GetNodeValue(tabNode, "skinsrc", "");
                                }
                                if (string.IsNullOrEmpty(Tab.ContainerSrc) && !String.IsNullOrEmpty(XmlUtils.GetNodeValue(tabNode, "containersrc", "")))
                                {
                                    Tab.ContainerSrc = XmlUtils.GetNodeValue(tabNode, "containersrc", "");
                                }
                                TabController.Instance.UpdateTab(Tab);
                            }
                            tabIndex++;
                        }

                        if (!string.IsNullOrEmpty(exceptions))
                        {
                            Skin.AddModuleMessage(this, exceptions, ModuleMessage.ModuleMessageType.RedError);
                            return Null.NullInteger;
                        }
                    }
                }
            }

            PageDetailsExtensionControl.SaveAction(PortalId, Tab.TabID, ModuleId);

            // url tracking
            var objUrls = new UrlController();
            objUrls.UpdateUrl(PortalId, ctlURL.Url, ctlURL.UrlType, 0, Null.NullDate, Null.NullDate, ctlURL.Log, ctlURL.Track, Null.NullInteger, ctlURL.NewWindow);

            //Clear the Tab's Cached modules
            DataCache.ClearModuleCache(TabId);

            //Update Cached Tabs as TabPath may be needed before cache is cleared
            TabInfo tempTab;
            if (TabController.Instance.GetTabsByPortal(PortalId).TryGetValue(Tab.TabID, out tempTab))
            {
                tempTab.TabPath = Tab.TabPath;
            }

            //Update Custom Url
            if (!Tab.IsSuperTab)
            {
                var tabUrl = Tab.TabUrls.SingleOrDefault(t => t.IsSystem
                                                                && t.HttpStatus == "200"
                                                                && t.SeqNum == 0);
                var url = urlTextBox.Text;


                if (!String.IsNullOrEmpty(url))
                {
                    if (!url.StartsWith("/"))
                    {
                        url = "/" + url;
                    }

                    string currentUrl = String.Empty;
                    var friendlyUrlSettings = new FriendlyUrlSettings(PortalId);
                    if (Tab.TabID > -1 && !Tab.IsSuperTab)
                    {
                        var baseUrl = Globals.AddHTTP(PortalAlias.HTTPAlias) + "/Default.aspx?TabId=" + Tab.TabID;
                        var path = AdvancedFriendlyUrlProvider.ImprovedFriendlyUrl(Tab,
                                                                                    baseUrl,
                                                                                    Globals.glbDefaultPage,
                                                                                    PortalAlias.HTTPAlias,
                                                                                    false,
                                                                                    friendlyUrlSettings,
                                                                                    Guid.Empty);

                        currentUrl = path.Replace(Globals.AddHTTP(PortalAlias.HTTPAlias), "");
                    }

                    if (url != currentUrl)
                    {
                        if (tabUrl == null)
                        {
                            //Add new custom url
                            tabUrl = new TabUrlInfo()
                                            {
                                                TabId = Tab.TabID,
                                                SeqNum = 0,
                                                PortalAliasId = -1,
                                                PortalAliasUsage = PortalAliasUsageType.Default,
                                                QueryString = String.Empty,
                                                Url = url,
                                                HttpStatus = "200",
                                                CultureCode = String.Empty,
                                                IsSystem = true
                                            };
                            //Save url
                            TabController.Instance.SaveTabUrl(tabUrl, PortalId, true);
                        }
                        else
                        {
                            //Change the original 200 url to a redirect
                            tabUrl.HttpStatus = "301";
                            tabUrl.SeqNum = Tab.TabUrls.Max(t => t.SeqNum) + 1;
                            TabController.Instance.SaveTabUrl(tabUrl, PortalId, true);

                            //Add new custom url
                            tabUrl.Url = url;
                            tabUrl.HttpStatus = "200";
                            tabUrl.SeqNum = 0;
                            TabController.Instance.SaveTabUrl(tabUrl, PortalId, true);
                        }


                        //Delete any redirects to the same url
                        foreach (var redirecturl in TabController.Instance.GetTabUrls(Tab.TabID, Tab.PortalID))
                        {
                            if (redirecturl.Url == url && redirecturl.HttpStatus != "200")
                            {
                                TabController.Instance.DeleteTabUrl(redirecturl, Tab.PortalID, true);
                            }
                        }
                    }
                }
                else
                {
                    if (tabUrl != null)
                    {
                        TabController.Instance.DeleteTabUrl(tabUrl, PortalId, true);
                    }
                }
            }

            return Tab.TabID;
        }]]></body>
          </codeblock>
        </method>
        <method name="SetValue">
          <declaration><![CDATA[private static void SetValue(Control control, Hashtable tabSettings, string tabSettingsKey)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1258" sc="9" el="1291" ec="10">ManageTabs.ascx.cs</location>
            <body hash="f179904ac761ef6dc859c201420574e4"><![CDATA[{
            if (ReferenceEquals(control.GetType(), typeof(TextBox)))
            {
                ((TextBox)control).Text = string.IsNullOrEmpty(Convert.ToString(tabSettings[tabSettingsKey])) ? "" : tabSettings[tabSettingsKey].ToString();
            }
            else if (ReferenceEquals(control.GetType(), typeof(DnnComboBox)))
            {
                var dnnComboBox = (DnnComboBox)control;
                if (!string.IsNullOrEmpty(Convert.ToString(tabSettings[tabSettingsKey])))
                {
                    dnnComboBox.ClearSelection();
                    dnnComboBox.FindItemByValue(tabSettings[tabSettingsKey].ToString()).Selected = true;
                }
                else
                {
                    dnnComboBox.ClearSelection();
                    dnnComboBox.FindItemByValue("").Selected = true;

                }
            }
            else if (ReferenceEquals(control.GetType(), typeof(RadioButtonList)))
            {
                var dnnRadioList = (RadioButtonList)control;
                if (!string.IsNullOrEmpty(Convert.ToString(tabSettings[tabSettingsKey])))
                {
                    dnnRadioList.ClearSelection();
                    dnnRadioList.Items.FindByValue(tabSettings[tabSettingsKey].ToString()).Selected = true;
                }
                else
                {
                    dnnRadioList.ClearSelection();
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="ShowCacheIncludeExcludeRows">
          <declaration><![CDATA[private void ShowCacheIncludeExcludeRows()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1329" sc="9" el="1346" ec="10">ManageTabs.ascx.cs</location>
            <body hash="18e045aafe2f0a0ae88a9891b5695a53"><![CDATA[{
            if (rblCacheIncludeExclude.SelectedItem == null)
            {
                rblCacheIncludeExclude.Items[0].Selected = true;
            }
            if (rblCacheIncludeExclude.SelectedValue == "0")
            {
                ExcludeVaryByRow.Visible = false;
                txtExcludeVaryBy.Text = string.Empty;
                IncludeVaryByRow.Visible = true;
            }
            else
            {
                ExcludeVaryByRow.Visible = true;
                IncludeVaryByRow.Visible = false;
                txtIncludeVaryBy.Text = string.Empty;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="ShowCacheRows">
          <declaration><![CDATA[private void ShowCacheRows()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1294" sc="9" el="1326" ec="10">ManageTabs.ascx.cs</location>
            <body hash="880f06f0d449141fd00773cc701000fd"><![CDATA[{
            if (!string.IsNullOrEmpty(cboCacheProvider.SelectedValue))
            {
                CacheDurationRow.Visible = true;
                CacheIncludeExcludeRow.Visible = true;
                MaxVaryByCountRow.Visible = true;
                cmdClearAllPageCache.Visible = true;
                cmdClearPageCache.Visible = true;
                ShowCacheIncludeExcludeRows();
                CacheStatusRow.Visible = true;
                var cachedItemCount = OutputCachingProvider.Instance(cboCacheProvider.SelectedValue).GetItemCount(TabId);
                if (cachedItemCount == 0)
                {
                    cmdClearAllPageCache.Enabled = false;
                    cmdClearPageCache.Enabled = false;
                }
                else
                {
                    cmdClearAllPageCache.Enabled = true;
                    cmdClearPageCache.Enabled = true;
                }
                lblCachedItemCount.Text = string.Format(Localization.GetString("lblCachedItemCount.Text", LocalResourceFile), cachedItemCount);
            }
            else
            {
                CacheStatusRow.Visible = false;
                CacheDurationRow.Visible = false;
                CacheIncludeExcludeRow.Visible = false;
                MaxVaryByCountRow.Visible = false;
                ExcludeVaryByRow.Visible = false;
                IncludeVaryByRow.Visible = false;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="ShowErrorMessage">
          <declaration><![CDATA[private void ShowErrorMessage(string message)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1390" sc="9" el="1392" ec="10">ManageTabs.ascx.cs</location>
            <body hash="9669b2996ba88af8fe698c8e476bd306"><![CDATA[{
            Skin.AddModuleMessage(this, message, ModuleMessage.ModuleMessageType.RedError);
        }]]></body>
          </codeblock>
        </method>
        <method name="ShowPermissions">
          <declaration><![CDATA[private void ShowPermissions(bool show)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1349" sc="9" el="1352" ec="10">ManageTabs.ascx.cs</location>
            <body hash="8cb4c02215457fa394452d19f8c17da9"><![CDATA[{
            permissionsTab.Visible = show;
            permissionRow.Visible = show;
        }]]></body>
          </codeblock>
        </method>
        <method name="ShowWarningMessage">
          <declaration><![CDATA[private void ShowWarningMessage(string message)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1385" sc="9" el="1387" ec="10">ManageTabs.ascx.cs</location>
            <body hash="c069b72493d9272ecb5cc61254fccffd"><![CDATA[{
            Skin.AddModuleMessage(this, message, ModuleMessage.ModuleMessageType.YellowWarning);
        }]]></body>
          </codeblock>
        </method>
        <method name="submitTranslation_Click">
          <declaration><![CDATA[protected void submitTranslation_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1949" sc="9" el="1981" ec="10">ManageTabs.ascx.cs</location>
            <body hash="b4d0da9f9db6798e4433fa1bf35402ba"><![CDATA[{
            sendTranslationMessageConfirm.Visible = true;
            try
            {
                // loop through all localized version of this page
                foreach (TabInfo localizedTab in Tab.LocalizedTabs.Values)
                {
                    var users = new Dictionary<int, UserInfo>();

                    //Give default translators for this language and administrators permissions
                    TabController.Instance.GiveTranslatorRoleEditRights(localizedTab, users);

                    //Send Messages to all the translators of new content
                    foreach (var translator in users.Values.Where(user => user.UserID != PortalSettings.AdministratorId))
                    {
                        AddTranslationSubmittedNotification(localizedTab, translator);
                    }
                }
                txtTranslationComment.Text = "";
                sendTranslationMessageRow.Visible = false;
                sendTranslationMessageConfirm.Attributes.Remove("class");
                sendTranslationMessageConfirm.Attributes.Add("class", "dnnFormMessage dnnFormSuccess");

                sendTranslationMessageConfirmMessage.Text = LocalizeString("TranslationMessageConfirmMessage.Text");
            }
            catch (Exception)
            {
                sendTranslationMessageConfirm.Attributes.Remove("class");
                sendTranslationMessageConfirm.Attributes.Add("class", "dnnFormMessage dnnFormError");
                sendTranslationMessageConfirmMessage.Text = LocalizeString("TranslationMessageConfirmMessage.Error");
                throw;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateTabSettings">
          <declaration><![CDATA[private void UpdateTabSettings(TabInfo tab)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1395" sc="9" el="1407" ec="10">ManageTabs.ascx.cs</location>
            <body hash="b6f4d32679b5b31ed948a5029fbc1760"><![CDATA[{
            tab.TabSettings["CacheProvider"] = cboCacheProvider.SelectedValue;
            tab.TabSettings["CacheDuration"] = txtCacheDuration.Text;
            tab.TabSettings["CacheIncludeExclude"] = rblCacheIncludeExclude.SelectedValue;
            tab.TabSettings["IncludeVaryBy"] = txtIncludeVaryBy.Text;
            tab.TabSettings["ExcludeVaryBy"] = txtExcludeVaryBy.Text;
            tab.TabSettings["MaxVaryByCount"] = txtMaxVaryByCount.Text;
            tab.TabSettings["LinkNewWindow"] = ctlURL.NewWindow.ToString();
            tab.TabSettings["AllowIndex"] = chkAllowIndex.Checked.ToString();
            tab.TabSettings["CustomStylesheet"] = txtCustomStylesheet.Text;
            tab.TabSettings["DoNotRedirect"] = doNotRedirectCheckBox.Checked.ToString();

        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_strAction">
          <declaration><![CDATA[private string _strAction = "";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_tab">
          <declaration><![CDATA[private TabInfo _tab;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="AddMissing">
          <declaration><![CDATA[protected LinkButton AddMissing;]]></declaration>
          <documentation>
            <summary>
 AddMissing control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="AdvancedSettingExtensionControl">
          <declaration><![CDATA[protected EditPagePanelExtensionControl AdvancedSettingExtensionControl;]]></declaration>
          <documentation>
            <summary>
 AdvancedSettingExtensionControl control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="advancedTab">
          <declaration><![CDATA[protected HtmlGenericControl advancedTab;]]></declaration>
          <documentation>
            <summary>
 advancedTab control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="CacheDurationRow">
          <declaration><![CDATA[protected HtmlGenericControl CacheDurationRow;]]></declaration>
          <documentation>
            <summary>
 CacheDurationRow control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="CacheIncludeExcludeRow">
          <declaration><![CDATA[protected HtmlGenericControl CacheIncludeExcludeRow;]]></declaration>
          <documentation>
            <summary>
 CacheIncludeExcludeRow control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="CacheStatusRow">
          <declaration><![CDATA[protected HtmlGenericControl CacheStatusRow;]]></declaration>
          <documentation>
            <summary>
 CacheStatusRow control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="cancelHyperLink">
          <declaration><![CDATA[protected HyperLink cancelHyperLink;]]></declaration>
          <documentation>
            <summary>
 cancelHyperLink control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="cboCacheProvider">
          <declaration><![CDATA[protected DnnComboBox cboCacheProvider;]]></declaration>
          <documentation>
            <summary>
 cboCacheProvider control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="cboCopyPage">
          <declaration><![CDATA[protected DnnPageDropDownList cboCopyPage;]]></declaration>
          <documentation>
            <summary>
 cboCopyPage control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="cboFolders">
          <declaration><![CDATA[protected DnnFolderDropDownList cboFolders;]]></declaration>
          <documentation>
            <summary>
 cboFolders control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="cboParentTab">
          <declaration><![CDATA[protected DnnPageDropDownList cboParentTab;]]></declaration>
          <documentation>
            <summary>
 cboParentTab control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="cboPositionTab">
          <declaration><![CDATA[protected DnnComboBox cboPositionTab;]]></declaration>
          <documentation>
            <summary>
 cboPositionTab control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="cboTemplate">
          <declaration><![CDATA[protected DnnComboBox cboTemplate;]]></declaration>
          <documentation>
            <summary>
 cboTemplate control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="chkAllowIndex">
          <declaration><![CDATA[protected CheckBox chkAllowIndex;]]></declaration>
          <documentation>
            <summary>
 chkAllowIndex control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="chkDisableLink">
          <declaration><![CDATA[protected CheckBox chkDisableLink;]]></declaration>
          <documentation>
            <summary>
 chkDisableLink control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="chkMenu">
          <declaration><![CDATA[protected CheckBox chkMenu;]]></declaration>
          <documentation>
            <summary>
 chkMenu control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="chkPermanentRedirect">
          <declaration><![CDATA[protected CheckBox chkPermanentRedirect;]]></declaration>
          <documentation>
            <summary>
 chkPermanentRedirect control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="chkSecure">
          <declaration><![CDATA[protected CheckBox chkSecure;]]></declaration>
          <documentation>
            <summary>
 chkSecure control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="cmdCancelTranslation">
          <declaration><![CDATA[protected LinkButton cmdCancelTranslation;]]></declaration>
          <documentation>
            <summary>
 cmdCancelTranslation control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="cmdClearAllPageCache">
          <declaration><![CDATA[protected LinkButton cmdClearAllPageCache;]]></declaration>
          <documentation>
            <summary>
 cmdClearAllPageCache control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="cmdClearPageCache">
          <declaration><![CDATA[protected LinkButton cmdClearPageCache;]]></declaration>
          <documentation>
            <summary>
 cmdClearPageCache control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="cmdCopyPerm">
          <declaration><![CDATA[protected LinkButton cmdCopyPerm;]]></declaration>
          <documentation>
            <summary>
 cmdCopyPerm control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="cmdCopySkin">
          <declaration><![CDATA[protected LinkButton cmdCopySkin;]]></declaration>
          <documentation>
            <summary>
 cmdCopySkin control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="cmdDelete">
          <declaration><![CDATA[protected LinkButton cmdDelete;]]></declaration>
          <documentation>
            <summary>
 cmdDelete control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="cmdSubmitTranslation">
          <declaration><![CDATA[protected LinkButton cmdSubmitTranslation;]]></declaration>
          <documentation>
            <summary>
 cmdSubmitTranslation control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="cmdUpdate">
          <declaration><![CDATA[protected LinkButton cmdUpdate;]]></declaration>
          <documentation>
            <summary>
 cmdUpdate control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="cmdUpdateLocalization">
          <declaration><![CDATA[protected LinkButton cmdUpdateLocalization;]]></declaration>
          <documentation>
            <summary>
 cmdUpdateLocalization control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="contentLocalizationControl">
          <declaration><![CDATA[private dynamic contentLocalizationControl;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ContentLocalizationControlPath">
          <declaration><![CDATA[private const string ContentLocalizationControlPath = "~/DesktopModules/Admin/Languages/CLControl.ascx";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="copyPanel">
          <declaration><![CDATA[protected HtmlGenericControl copyPanel;]]></declaration>
          <documentation>
            <summary>
 copyPanel control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="copyPermissionRow">
          <declaration><![CDATA[protected HtmlGenericControl copyPermissionRow;]]></declaration>
          <documentation>
            <summary>
 copyPermissionRow control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="copyTab">
          <declaration><![CDATA[protected HtmlGenericControl copyTab;]]></declaration>
          <documentation>
            <summary>
 copyTab control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="ctlAudit">
          <declaration><![CDATA[protected ModuleAuditControl ctlAudit;]]></declaration>
          <documentation>
            <summary>
 ctlAudit control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="ctlIcon">
          <declaration><![CDATA[protected DnnUrlControl ctlIcon;]]></declaration>
          <documentation>
            <summary>
 ctlIcon control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="ctlIconLarge">
          <declaration><![CDATA[protected DnnUrlControl ctlIconLarge;]]></declaration>
          <documentation>
            <summary>
 ctlIconLarge control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="ctlURL">
          <declaration><![CDATA[protected DnnUrlControl ctlURL;]]></declaration>
          <documentation>
            <summary>
 ctlURL control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="cultureLabel">
          <declaration><![CDATA[protected UserControl cultureLabel;]]></declaration>
          <documentation>
            <summary>
 cultureLabel control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="cultureLanguageLabel">
          <declaration><![CDATA[protected DnnLanguageLabel cultureLanguageLabel;]]></declaration>
          <documentation>
            <summary>
 cultureLanguageLabel control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="cultureRow">
          <declaration><![CDATA[protected HtmlGenericControl cultureRow;]]></declaration>
          <documentation>
            <summary>
 cultureRow control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="cultureTypeLabel">
          <declaration><![CDATA[protected UserControl cultureTypeLabel;]]></declaration>
          <documentation>
            <summary>
 cultureTypeLabel control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="cultureTypeList">
          <declaration><![CDATA[protected RadioButtonList cultureTypeList;]]></declaration>
          <documentation>
            <summary>
 cultureTypeList control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="cultureTypeRow">
          <declaration><![CDATA[protected HtmlGenericControl cultureTypeRow;]]></declaration>
          <documentation>
            <summary>
 cultureTypeRow control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="CustomValidator1">
          <declaration><![CDATA[protected CustomValidator CustomValidator1;]]></declaration>
          <documentation>
            <summary>
 CustomValidator1 control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="defaultCultureMessage">
          <declaration><![CDATA[protected Label defaultCultureMessage;]]></declaration>
          <documentation>
            <summary>
 defaultCultureMessage control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="defaultCultureMessageLabel">
          <declaration><![CDATA[protected Label defaultCultureMessageLabel;]]></declaration>
          <documentation>
            <summary>
 defaultCultureMessageLabel control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="dgPermissions">
          <declaration><![CDATA[protected TabPermissionsGrid dgPermissions;]]></declaration>
          <documentation>
            <summary>
 dgPermissions control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="doNotRedirectCheckBox">
          <declaration><![CDATA[protected CheckBox doNotRedirectCheckBox;]]></declaration>
          <documentation>
            <summary>
 doNotRedirectCheckBox control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="doNotRedirectLabel">
          <declaration><![CDATA[protected UserControl doNotRedirectLabel;]]></declaration>
          <documentation>
            <summary>
 doNotRedirectLabel control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="doNotRedirectPanel">
          <declaration><![CDATA[protected Panel doNotRedirectPanel;]]></declaration>
          <documentation>
            <summary>
 doNotRedirectPanel control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="endDatePicker">
          <declaration><![CDATA[protected DnnDateTimePicker endDatePicker;]]></declaration>
          <documentation>
            <summary>
 endDatePicker control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="ExcludeVaryByRow">
          <declaration><![CDATA[protected HtmlGenericControl ExcludeVaryByRow;]]></declaration>
          <documentation>
            <summary>
 ExcludeVaryByRow control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="grdModules">
          <declaration><![CDATA[protected DataGrid grdModules;]]></declaration>
          <documentation>
            <summary>
 grdModules control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="IncludeVaryByRow">
          <declaration><![CDATA[protected HtmlGenericControl IncludeVaryByRow;]]></declaration>
          <documentation>
            <summary>
 IncludeVaryByRow control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="insertPositionRow">
          <declaration><![CDATA[protected HtmlGenericControl insertPositionRow;]]></declaration>
          <documentation>
            <summary>
 insertPositionRow control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="lblCachedItemCount">
          <declaration><![CDATA[protected Label lblCachedItemCount;]]></declaration>
          <documentation>
            <summary>
 lblCachedItemCount control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="lblCacheDuration">
          <declaration><![CDATA[protected UserControl lblCacheDuration;]]></declaration>
          <documentation>
            <summary>
 lblCacheDuration control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="lblCacheDurationInfo">
          <declaration><![CDATA[protected Label lblCacheDurationInfo;]]></declaration>
          <documentation>
            <summary>
 lblCacheDurationInfo control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="lblCacheIncludeExclude">
          <declaration><![CDATA[protected UserControl lblCacheIncludeExclude;]]></declaration>
          <documentation>
            <summary>
 lblCacheIncludeExclude control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="lblCacheProvider">
          <declaration><![CDATA[protected UserControl lblCacheProvider;]]></declaration>
          <documentation>
            <summary>
 lblCacheProvider control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="lblCacheStatus">
          <declaration><![CDATA[protected UserControl lblCacheStatus;]]></declaration>
          <documentation>
            <summary>
 lblCacheStatus control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="lblExcludeVaryBy">
          <declaration><![CDATA[protected UserControl lblExcludeVaryBy;]]></declaration>
          <documentation>
            <summary>
 lblExcludeVaryBy control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="lblIncludeVaryBy">
          <declaration><![CDATA[protected UserControl lblIncludeVaryBy;]]></declaration>
          <documentation>
            <summary>
 lblIncludeVaryBy control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="lblMaxVaryByCount">
          <declaration><![CDATA[protected UserControl lblMaxVaryByCount;]]></declaration>
          <documentation>
            <summary>
 lblMaxVaryByCount control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="localizationControlRow">
          <declaration><![CDATA[protected HtmlGenericControl localizationControlRow;]]></declaration>
          <documentation>
            <summary>
 localizationControlRow control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="localizationPanel">
          <declaration><![CDATA[protected HtmlGenericControl localizationPanel;]]></declaration>
          <documentation>
            <summary>
 localizationPanel control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="localizationTab">
          <declaration><![CDATA[protected HtmlGenericControl localizationTab;]]></declaration>
          <documentation>
            <summary>
 localizationTab control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="MakeNeutral">
          <declaration><![CDATA[protected LinkButton MakeNeutral;]]></declaration>
          <documentation>
            <summary>
 MakeNeutral control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="MakeTranslatable">
          <declaration><![CDATA[protected LinkButton MakeTranslatable;]]></declaration>
          <documentation>
            <summary>
 MakeTranslatable control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="MaxVaryByCountRow">
          <declaration><![CDATA[protected HtmlGenericControl MaxVaryByCountRow;]]></declaration>
          <documentation>
            <summary>
 MaxVaryByCountRow control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="modulesRow">
          <declaration><![CDATA[protected HtmlGenericControl modulesRow;]]></declaration>
          <documentation>
            <summary>
 modulesRow control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="pageContainerCombo">
          <declaration><![CDATA[protected DnnSkinComboBox pageContainerCombo;]]></declaration>
          <documentation>
            <summary>
 pageContainerCombo control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="PageDetailsExtensionControl">
          <declaration><![CDATA[protected UserControlExtensionControl PageDetailsExtensionControl;]]></declaration>
          <documentation>
            <summary>
 PageDetailsExtensionControl control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="pageSkinCombo">
          <declaration><![CDATA[protected DnnSkinComboBox pageSkinCombo;]]></declaration>
          <documentation>
            <summary>
 pageSkinCombo control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="pageUrlPanel">
          <declaration><![CDATA[protected Panel pageUrlPanel;]]></declaration>
          <documentation>
            <summary>
 pageUrlPanel control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="permissionRow">
          <declaration><![CDATA[protected HtmlGenericControl permissionRow;]]></declaration>
          <documentation>
            <summary>
 permissionRow control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="permissionsTab">
          <declaration><![CDATA[protected HtmlGenericControl permissionsTab;]]></declaration>
          <documentation>
            <summary>
 permissionsTab control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="plAllowIndex">
          <declaration><![CDATA[protected UserControl plAllowIndex;]]></declaration>
          <documentation>
            <summary>
 plAllowIndex control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="plContainer">
          <declaration><![CDATA[protected UserControl plContainer;]]></declaration>
          <documentation>
            <summary>
 plContainer control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="plCopyPage">
          <declaration><![CDATA[protected UserControl plCopyPage;]]></declaration>
          <documentation>
            <summary>
 plCopyPage control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="plCopyPerm">
          <declaration><![CDATA[protected UserControl plCopyPerm;]]></declaration>
          <documentation>
            <summary>
 plCopyPerm control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="plCopySkin">
          <declaration><![CDATA[protected UserControl plCopySkin;]]></declaration>
          <documentation>
            <summary>
 plCopySkin control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="plCustomStylesheet">
          <declaration><![CDATA[protected UserControl plCustomStylesheet;]]></declaration>
          <documentation>
            <summary>
 plCustomStylesheet control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="plDescription">
          <declaration><![CDATA[protected UserControl plDescription;]]></declaration>
          <documentation>
            <summary>
 plDescription control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="plDisable">
          <declaration><![CDATA[protected UserControl plDisable;]]></declaration>
          <documentation>
            <summary>
 plDisable control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="plEndDate">
          <declaration><![CDATA[protected UserControl plEndDate;]]></declaration>
          <documentation>
            <summary>
 plEndDate control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="plFolder">
          <declaration><![CDATA[protected UserControl plFolder;]]></declaration>
          <documentation>
            <summary>
 plFolder control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="plIcon">
          <declaration><![CDATA[protected UserControl plIcon;]]></declaration>
          <documentation>
            <summary>
 plIcon control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="plIconLarge">
          <declaration><![CDATA[protected UserControl plIconLarge;]]></declaration>
          <documentation>
            <summary>
 plIconLarge control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="plInsertPosition">
          <declaration><![CDATA[protected UserControl plInsertPosition;]]></declaration>
          <documentation>
            <summary>
 plInsertPosition control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="plKeywords">
          <declaration><![CDATA[protected UserControl plKeywords;]]></declaration>
          <documentation>
            <summary>
 plKeywords control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="plMenu">
          <declaration><![CDATA[protected UserControl plMenu;]]></declaration>
          <documentation>
            <summary>
 plMenu control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="plModules">
          <declaration><![CDATA[protected UserControl plModules;]]></declaration>
          <documentation>
            <summary>
 plModules control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="plPageHeadText">
          <declaration><![CDATA[protected UserControl plPageHeadText;]]></declaration>
          <documentation>
            <summary>
 plPageHeadText control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="plParentTab">
          <declaration><![CDATA[protected UserControl plParentTab;]]></declaration>
          <documentation>
            <summary>
 plParentTab control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="plPermanentRedirect">
          <declaration><![CDATA[protected UserControl plPermanentRedirect;]]></declaration>
          <documentation>
            <summary>
 plPermanentRedirect control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="plPriority">
          <declaration><![CDATA[protected UserControl plPriority;]]></declaration>
          <documentation>
            <summary>
 plPriority control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="plRefreshInterval">
          <declaration><![CDATA[protected UserControl plRefreshInterval;]]></declaration>
          <documentation>
            <summary>
 plRefreshInterval control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="plSecure">
          <declaration><![CDATA[protected UserControl plSecure;]]></declaration>
          <documentation>
            <summary>
 plSecure control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="plSkin">
          <declaration><![CDATA[protected UserControl plSkin;]]></declaration>
          <documentation>
            <summary>
 plSkin control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="plStartDate">
          <declaration><![CDATA[protected UserControl plStartDate;]]></declaration>
          <documentation>
            <summary>
 plStartDate control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="plTabName">
          <declaration><![CDATA[protected UserControl plTabName;]]></declaration>
          <documentation>
            <summary>
 plTabName control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="plTags">
          <declaration><![CDATA[protected UserControl plTags;]]></declaration>
          <documentation>
            <summary>
 plTags control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="plTemplate">
          <declaration><![CDATA[protected UserControl plTemplate;]]></declaration>
          <documentation>
            <summary>
 plTemplate control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="plTitle">
          <declaration><![CDATA[protected UserControl plTitle;]]></declaration>
          <documentation>
            <summary>
 plTitle control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="plURL">
          <declaration><![CDATA[protected UserControl plURL;]]></declaration>
          <documentation>
            <summary>
 plURL control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="PortalAliasCaption">
          <declaration><![CDATA[protected TextBox PortalAliasCaption;]]></declaration>
          <documentation>
            <summary>
 PortalAliasCaption control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="rbInsertPosition">
          <declaration><![CDATA[protected RadioButtonList rbInsertPosition;]]></declaration>
          <documentation>
            <summary>
 rbInsertPosition control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="rblCacheIncludeExclude">
          <declaration><![CDATA[protected RadioButtonList rblCacheIncludeExclude;]]></declaration>
          <documentation>
            <summary>
 rblCacheIncludeExclude control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="readyForTranslationButton">
          <declaration><![CDATA[protected LinkButton readyForTranslationButton;]]></declaration>
          <documentation>
            <summary>
 readyForTranslationButton control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="redirectRow">
          <declaration><![CDATA[protected HtmlGenericControl redirectRow;]]></declaration>
          <documentation>
            <summary>
 redirectRow control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="rowCopySkin">
          <declaration><![CDATA[protected HtmlGenericControl rowCopySkin;]]></declaration>
          <documentation>
            <summary>
 rowCopySkin control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="sendTranslationMessageConfirm">
          <declaration><![CDATA[protected HtmlGenericControl sendTranslationMessageConfirm;]]></declaration>
          <documentation>
            <summary>
 sendTranslationMessageConfirm control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="sendTranslationMessageConfirmMessage">
          <declaration><![CDATA[protected Label sendTranslationMessageConfirmMessage;]]></declaration>
          <documentation>
            <summary>
 sendTranslationMessageConfirmMessage control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="sendTranslationMessageRow">
          <declaration><![CDATA[protected HtmlGenericControl sendTranslationMessageRow;]]></declaration>
          <documentation>
            <summary>
 sendTranslationMessageRow control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="settingTab">
          <declaration><![CDATA[protected HtmlGenericControl settingTab;]]></declaration>
          <documentation>
            <summary>
 settingTab control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="startDatePicker">
          <declaration><![CDATA[protected DnnDateTimePicker startDatePicker;]]></declaration>
          <documentation>
            <summary>
 startDatePicker control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="templateRow1">
          <declaration><![CDATA[protected HtmlGenericControl templateRow1;]]></declaration>
          <documentation>
            <summary>
 templateRow1 control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="templateRow2">
          <declaration><![CDATA[protected HtmlGenericControl templateRow2;]]></declaration>
          <documentation>
            <summary>
 templateRow2 control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="termsSelector">
          <declaration><![CDATA[protected TermsSelector termsSelector;]]></declaration>
          <documentation>
            <summary>
 termsSelector control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="TranslationCommentLabel">
          <declaration><![CDATA[protected Label TranslationCommentLabel;]]></declaration>
          <documentation>
            <summary>
 TranslationCommentLabel control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="txtCacheDuration">
          <declaration><![CDATA[protected TextBox txtCacheDuration;]]></declaration>
          <documentation>
            <summary>
 txtCacheDuration control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="txtCustomStylesheet">
          <declaration><![CDATA[protected TextBox txtCustomStylesheet;]]></declaration>
          <documentation>
            <summary>
 txtCustomStylesheet control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="txtDescription">
          <declaration><![CDATA[protected TextBox txtDescription;]]></declaration>
          <documentation>
            <summary>
 txtDescription control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="txtExcludeVaryBy">
          <declaration><![CDATA[protected TextBox txtExcludeVaryBy;]]></declaration>
          <documentation>
            <summary>
 txtExcludeVaryBy control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="txtIncludeVaryBy">
          <declaration><![CDATA[protected TextBox txtIncludeVaryBy;]]></declaration>
          <documentation>
            <summary>
 txtIncludeVaryBy control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="txtKeyWords">
          <declaration><![CDATA[protected TextBox txtKeyWords;]]></declaration>
          <documentation>
            <summary>
 txtKeyWords control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="txtMaxVaryByCount">
          <declaration><![CDATA[protected TextBox txtMaxVaryByCount;]]></declaration>
          <documentation>
            <summary>
 txtMaxVaryByCount control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="txtPageHeadText">
          <declaration><![CDATA[protected TextBox txtPageHeadText;]]></declaration>
          <documentation>
            <summary>
 txtPageHeadText control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="txtPriority">
          <declaration><![CDATA[protected TextBox txtPriority;]]></declaration>
          <documentation>
            <summary>
 txtPriority control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="txtRefreshInterval">
          <declaration><![CDATA[protected TextBox txtRefreshInterval;]]></declaration>
          <documentation>
            <summary>
 txtRefreshInterval control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="txtTabName">
          <declaration><![CDATA[protected TextBox txtTabName;]]></declaration>
          <documentation>
            <summary>
 txtTabName control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="txtTitle">
          <declaration><![CDATA[protected TextBox txtTitle;]]></declaration>
          <documentation>
            <summary>
 txtTitle control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="txtTranslationComment">
          <declaration><![CDATA[protected TextBox txtTranslationComment;]]></declaration>
          <documentation>
            <summary>
 txtTranslationComment control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="UrlContainer">
          <declaration><![CDATA[protected HtmlGenericControl UrlContainer;]]></declaration>
          <documentation>
            <summary>
 UrlContainer control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="urlLabel">
          <declaration><![CDATA[protected UserControl urlLabel;]]></declaration>
          <documentation>
            <summary>
 urlLabel control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="urlTextBox">
          <declaration><![CDATA[protected TextBox urlTextBox;]]></declaration>
          <documentation>
            <summary>
 urlTextBox control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="valCacheTime">
          <declaration><![CDATA[protected CompareValidator valCacheTime;]]></declaration>
          <documentation>
            <summary>
 valCacheTime control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="valMaxVaryByCount">
          <declaration><![CDATA[protected CompareValidator valMaxVaryByCount;]]></declaration>
          <documentation>
            <summary>
 valMaxVaryByCount control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="valPriority">
          <declaration><![CDATA[protected CompareValidator valPriority;]]></declaration>
          <documentation>
            <summary>
 valPriority control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="valPriorityRequired">
          <declaration><![CDATA[protected RequiredFieldValidator valPriorityRequired;]]></declaration>
          <documentation>
            <summary>
 valPriorityRequired control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="valRefreshInterval">
          <declaration><![CDATA[protected RegularExpressionValidator valRefreshInterval;]]></declaration>
          <documentation>
            <summary>
 valRefreshInterval control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="valTabName">
          <declaration><![CDATA[protected RequiredFieldValidator valTabName;]]></declaration>
          <documentation>
            <summary>
 valTabName control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
      </fields>
      <properties>
        <property name="ActiveDnnTab">
          <declaration><![CDATA[protected string ActiveDnnTab]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="121" sc="13" el="133" ec="14">ManageTabs.ascx.cs</location>
            <body hash="fc82c0d568c709786e94d01e7722bd27"><![CDATA[{
                var activeTab = Request.QueryString["activeTab"];
                if (!string.IsNullOrEmpty(activeTab))
                {
                    var tabControl = FindControl(activeTab);
                    if (tabControl != null)
                    {
                        return tabControl.ClientID;
                    }
                }

                return string.Empty;
            }]]></body>
          </codeblock>
        </property>
        <property name="Tab">
          <declaration><![CDATA[protected TabInfo Tab]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="83" sc="13" el="115" ec="14">ManageTabs.ascx.cs</location>
            <body hash="3fa97e4da47004265b1cc38ebc6580ac"><![CDATA[{
                if (_tab == null)
                {
                    switch (_strAction)
                    {
                        case "":
                        case "add":
                            _tab = new TabInfo { TabID = Null.NullInteger, PortalID = PortalId };
                            break;
                        case "copy":
                            var originalTab = TabController.Instance.GetTab(TabId, PortalId, false);
                            _tab = originalTab.Clone();
                            InitializeWorkflow(_tab);
                            _tab.TabID = Null.NullInteger;
                            _tab.VersionGuid = Guid.NewGuid();
                            _tab.LocalizedVersionGuid = Guid.NewGuid();
                            _tab.UniqueId = Guid.NewGuid();
                            _tab.TabPath = Null.NullString;
                            _tab.DefaultLanguageGuid = Null.NullGuid;
                            _tab.CultureCode = Null.NullString;
                            foreach (var key in originalTab.TabSettings.Keys)
                            {
                                _tab.TabSettings[key] = originalTab.TabSettings[key];
                            }

                            break;
                        default:
                            _tab = TabController.Instance.GetTab(TabId, PortalId, false);
                            break;
                    }
                }
                return _tab;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="PageUrlOptions">
      <declaration><![CDATA[public class PageUrlOptions]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public PageUrlOptions()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
        <field name="PageUrlContainerId">
          <declaration><![CDATA[public string PageUrlContainerId;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="PageUrlInputId">
          <declaration><![CDATA[public string PageUrlInputId;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="UpdateUrlButtonCaption">
          <declaration><![CDATA[public string UpdateUrlButtonCaption;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="UpdateUrlButtonTooltip">
          <declaration><![CDATA[public string UpdateUrlButtonTooltip;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="UpdateUrlDto">
          <declaration><![CDATA[public SaveUrlDto UpdateUrlDto;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="Position">
      <declaration><![CDATA[public enum Position]]></declaration>
      <documentation>
      </documentation>
      <constructors>
      </constructors>
      <methods>
      </methods>
      <fields>
        <field name="Above">
          <declaration><![CDATA[public const Position Above = 2;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Below">
          <declaration><![CDATA[public const Position Below = 1;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Child">
          <declaration><![CDATA[public const Position Child = 0;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="TabLocalization">
      <declaration><![CDATA[public class TabLocalization : PortalModuleBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public TabLocalization()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="46" sc="9" el="54" ec="10">TabLocalization.ascx.cs</location>
            <body hash="52927d9dfabbdf8e366db68c368f1c52"><![CDATA[public TabLocalization()
        {
            ShowViewColumn = true;
            ShowLanguageColumn = true;
            ShowFooter = true;
            ShowEditColumn = true;
            IsSelf = Null.NullBoolean;
            ToLocalizeTabId = Null.NullInteger;
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="add_TabLocalizationChanged">
          <declaration><![CDATA[public void add_TabLocalizationChanged(EventHandler<EventArgs> value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="CanEdit">
          <declaration><![CDATA[protected bool CanEdit(int editTabId, string cultureCode)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="136" sc="9" el="139" ec="10">TabLocalization.ascx.cs</location>
            <body hash="da87d97cd785615a3a9f954605a8ea58"><![CDATA[{
            Locale locale = LocaleController.Instance.GetLocale(cultureCode);
            return TabPermissionController.CanManagePage(TabController.Instance.GetTabByCulture(editTabId, PortalSettings.PortalId, locale));
        }]]></body>
          </codeblock>
        </method>
        <method name="CanView">
          <declaration><![CDATA[protected bool CanView(int viewTabId, string cultureCode)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="142" sc="9" el="146" ec="10">TabLocalization.ascx.cs</location>
            <body hash="ab97ebaa856895380040eff31b8120ec"><![CDATA[{
            Locale locale = LocaleController.Instance.GetLocale(cultureCode);
            TabInfo viewTab = TabController.Instance.GetTabByCulture(viewTabId, PortalSettings.PortalId, locale);
            return CanEdit(viewTabId, cultureCode) || (!viewTab.DisableLink && TabPermissionController.CanViewPage(TabController.Instance.GetTabByCulture(viewTabId, PortalSettings.PortalId, locale)));
        }]]></body>
          </codeblock>
        </method>
        <method name="DataBind">
          <declaration><![CDATA[public override void DataBind()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="200" sc="9" el="215" ec="10">TabLocalization.ascx.cs</location>
            <body hash="93bd776556bbe7b1787d6009444351a2"><![CDATA[{
            if (ToLocalizeTabId != Null.NullInteger)
            {
                if (IsSelf)
                {
                    var tabs = new List<TabInfo>();
                    tabs.Add(Tab);
                    localizedTabsGrid.DataSource = tabs;
                }
                else
                {
                    localizedTabsGrid.DataSource = Tab.LocalizedTabs.Values;
                }
            }
            localizedTabsGrid.DataBind();
        }]]></body>
          </codeblock>
        </method>
        <method name="GetChildModules">
          <declaration><![CDATA[private List<ModuleInfo> GetChildModules(int tabId, string cultureCode)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="106" sc="9" el="114" ec="10">TabLocalization.ascx.cs</location>
            <body hash="b4a591d2a437a2c64b2ff99a329dd10f"><![CDATA[{
            var modules = new List<ModuleInfo>();
            Locale locale = LocaleController.Instance.GetLocale(cultureCode);
            if (locale != null)
            {
                modules = (from kvp in TabController.Instance.GetTabByCulture(tabId, PortalSettings.PortalId, locale).ChildModules where !kvp.Value.IsDeleted select kvp.Value).ToList();
            }
            return modules;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetLocalizedModules">
          <declaration><![CDATA[protected string GetLocalizedModules(int tabId, string cultureCode)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="149" sc="9" el="151" ec="10">TabLocalization.ascx.cs</location>
            <body hash="8638a5b9fbee53e51a1f69e1f7db8fda"><![CDATA[{
            return GetLocalizedModulesList(tabId, cultureCode).Count.ToString();
        }]]></body>
          </codeblock>
        </method>
        <method name="GetLocalizedModulesList">
          <declaration><![CDATA[private List<ModuleInfo> GetLocalizedModulesList(int tabId, string cultureCode)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="117" sc="9" el="119" ec="10">TabLocalization.ascx.cs</location>
            <body hash="54b46f66a2f5c59edbbaafbec742684a"><![CDATA[{
            return (from m in GetChildModules(tabId, cultureCode) where m.CultureCode == cultureCode && m.IsLocalized select m).ToList();
        }]]></body>
          </codeblock>
        </method>
        <method name="GetLocalizedStatus">
          <declaration><![CDATA[protected string GetLocalizedStatus(int tabId, string cultureCode)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="154" sc="9" el="161" ec="10">TabLocalization.ascx.cs</location>
            <body hash="cdb5a13aa6a5a6b1caa46d7426e23b2b"><![CDATA[{
            float localizedStatus = 0;
            if (GetSharedModulesList(tabId, cultureCode).Count > 0)
            {
                localizedStatus = GetLocalizedModulesList(tabId, cultureCode).Count/GetSharedModulesList(tabId, cultureCode).Count;
            }
            return string.Format("{0:#0%}", localizedStatus);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetSharedModules">
          <declaration><![CDATA[protected string GetSharedModules(int tabId, string cultureCode)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="164" sc="9" el="166" ec="10">TabLocalization.ascx.cs</location>
            <body hash="c8100e768a97e2e61c6765f90bb02eb1"><![CDATA[{
            return GetSharedModulesList(tabId, cultureCode).Count.ToString();
        }]]></body>
          </codeblock>
        </method>
        <method name="GetSharedModulesList">
          <declaration><![CDATA[private List<ModuleInfo> GetSharedModulesList(int tabId, string cultureCode)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="122" sc="9" el="124" ec="10">TabLocalization.ascx.cs</location>
            <body hash="c14e160d82d0644d1d76c2c0317fb19c"><![CDATA[{
            return (from m in GetChildModules(tabId, cultureCode) where m.CultureCode == cultureCode select m).ToList();
        }]]></body>
          </codeblock>
        </method>
        <method name="GetTotalModules">
          <declaration><![CDATA[protected string GetTotalModules(int tabId, string cultureCode)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="169" sc="9" el="171" ec="10">TabLocalization.ascx.cs</location>
            <body hash="831685d6c8efd2dbfca4a66cb82a4816"><![CDATA[{
            return GetChildModules(tabId, cultureCode).Count.ToString();
        }]]></body>
          </codeblock>
        </method>
        <method name="GetTranslatedModules">
          <declaration><![CDATA[protected string GetTranslatedModules(int tabId, string cultureCode)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="174" sc="9" el="176" ec="10">TabLocalization.ascx.cs</location>
            <body hash="865149d784bf29acefcc3cbd62733a77"><![CDATA[{
            return GetTranslatedModulesList(tabId, cultureCode).Count.ToString();
        }]]></body>
          </codeblock>
        </method>
        <method name="GetTranslatedModulesList">
          <declaration><![CDATA[private List<ModuleInfo> GetTranslatedModulesList(int tabId, string cultureCode)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="127" sc="9" el="129" ec="10">TabLocalization.ascx.cs</location>
            <body hash="b34e32bd92d589f00cda57a33260aada"><![CDATA[{
            return (from m in GetChildModules(tabId, cultureCode) where m.CultureCode == cultureCode && m.IsTranslated select m).ToList();
        }]]></body>
          </codeblock>
        </method>
        <method name="GetTranslatedStatus">
          <declaration><![CDATA[protected string GetTranslatedStatus(int tabId, string cultureCode)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="179" sc="9" el="186" ec="10">TabLocalization.ascx.cs</location>
            <body hash="8f5df3fb4c5d4c9c47fd31bd43d826cd"><![CDATA[{
            float translatedStatus = 0;
            if (GetLocalizedModulesList(tabId, cultureCode).Count > 0)
            {
                translatedStatus = GetTranslatedModulesList(tabId, cultureCode).Count/GetLocalizedModulesList(tabId, cultureCode).Count;
            }
            return string.Format("{0:#0%}", translatedStatus);
        }]]></body>
          </codeblock>
        </method>
        <method name="localizedTabsGrid_PreRender">
          <declaration><![CDATA[protected void localizedTabsGrid_PreRender(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="250" sc="9" el="269" ec="10">TabLocalization.ascx.cs</location>
            <body hash="9f2424c6db688b5dc6578b36f8265f44"><![CDATA[{
            foreach (GridColumn column in localizedTabsGrid.Columns)
            {
                if ((column.UniqueName == "Edit"))
                {
                    column.Visible = ShowEditColumn;
                }
                if ((column.UniqueName == "Language"))
                {
                    column.Visible = ShowLanguageColumn;
                }
                if ((column.UniqueName == "View"))
                {
                    column.Visible = ShowViewColumn;
                }
            }
            localizedTabsGrid.Rebind();

            footerPlaceHolder.Visible = ShowFooter;
        }]]></body>
          </codeblock>
        </method>
        <method name="markTabTranslatedButton_Click">
          <declaration><![CDATA[protected void markTabTranslatedButton_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="272" sc="9" el="274" ec="10">TabLocalization.ascx.cs</location>
            <body hash="ac26059b79c3d2ebdc806cead3722ca5"><![CDATA[{
            MarkTranslatedSelectedItems(true);
        }]]></body>
          </codeblock>
        </method>
        <method name="markTabUnTranslatedButton_Click">
          <declaration><![CDATA[protected void markTabUnTranslatedButton_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="277" sc="9" el="279" ec="10">TabLocalization.ascx.cs</location>
            <body hash="b364d42bb3e279c45a809e0f85f24582"><![CDATA[{
            MarkTranslatedSelectedItems(false);
        }]]></body>
          </codeblock>
        </method>
        <method name="MarkTranslatedSelectedItems">
          <declaration><![CDATA[public void MarkTranslatedSelectedItems(bool translated)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="218" sc="9" el="234" ec="10">TabLocalization.ascx.cs</location>
            <body hash="fdbb9360e2532c5eef9ee1a6c9d3b1df"><![CDATA[{
            foreach (GridDataItem row in localizedTabsGrid.SelectedItems)
            {
                var language = (string) row.OwnerTableView.DataKeyValues[row.ItemIndex]["CultureCode"];
                TabInfo localizedTab = null;
                if (Tab.LocalizedTabs.TryGetValue(language, out localizedTab))
                {
                    TabController.Instance.UpdateTranslationStatus(localizedTab, translated);
                }
            }

            //Raise Changed event
            OnTabLocalizationChanged(EventArgs.Empty);

            //Rebind localized Tabs
            DataBind();
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="241" sc="9" el="247" ec="10">TabLocalization.ascx.cs</location>
            <body hash="7f8cf021aa1f458363e16d598fcc19f0"><![CDATA[{
            base.OnInit(e);

            localizedTabsGrid.PreRender += localizedTabsGrid_PreRender;
            markTabTranslatedButton.Click += markTabTranslatedButton_Click;
            markTabUnTranslatedButton.Click += markTabUnTranslatedButton_Click;
        }]]></body>
          </codeblock>
        </method>
        <method name="OnTabLocalizationChanged">
          <declaration><![CDATA[protected void OnTabLocalizationChanged(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="189" sc="9" el="194" ec="10">TabLocalization.ascx.cs</location>
            <body hash="7c47d3c68c68478f197b43db2a714f2f"><![CDATA[{
            if (TabLocalizationChanged != null)
            {
                TabLocalizationChanged(this, e);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="remove_TabLocalizationChanged">
          <declaration><![CDATA[public void remove_TabLocalizationChanged(EventHandler<EventArgs> value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_Tab">
          <declaration><![CDATA[private TabInfo _Tab;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="footerPlaceHolder">
          <declaration><![CDATA[protected PlaceHolder footerPlaceHolder;]]></declaration>
          <documentation>
            <summary>
 footerPlaceHolder control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="localizedTabsGrid">
          <declaration><![CDATA[protected DnnGrid localizedTabsGrid;]]></declaration>
          <documentation>
            <summary>
 localizedTabsGrid control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="markTabTranslatedButton">
          <declaration><![CDATA[protected LinkButton markTabTranslatedButton;]]></declaration>
          <documentation>
            <summary>
 markTabTranslatedButton control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="markTabUnTranslatedButton">
          <declaration><![CDATA[protected LinkButton markTabUnTranslatedButton;]]></declaration>
          <documentation>
            <summary>
 markTabUnTranslatedButton control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="TabLocalizationChanged">
          <declaration><![CDATA[private EventHandler<EventArgs> TabLocalizationChanged;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="IsSelf">
          <declaration><![CDATA[public bool IsSelf]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="79" sc="30" el="79" ec="34">TabLocalization.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="79" sc="35" el="79" ec="39">TabLocalization.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ShowEditColumn">
          <declaration><![CDATA[public bool ShowEditColumn]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="81" sc="38" el="81" ec="42">TabLocalization.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="81" sc="43" el="81" ec="47">TabLocalization.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ShowFooter">
          <declaration><![CDATA[public bool ShowFooter]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="83" sc="34" el="83" ec="38">TabLocalization.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="83" sc="39" el="83" ec="43">TabLocalization.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ShowLanguageColumn">
          <declaration><![CDATA[public bool ShowLanguageColumn]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="85" sc="42" el="85" ec="46">TabLocalization.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="85" sc="47" el="85" ec="51">TabLocalization.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ShowViewColumn">
          <declaration><![CDATA[public bool ShowViewColumn]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="87" sc="38" el="87" ec="42">TabLocalization.ascx.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="87" sc="43" el="87" ec="47">TabLocalization.ascx.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Tab">
          <declaration><![CDATA[protected TabInfo Tab]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="66" sc="13" el="72" ec="14">TabLocalization.ascx.cs</location>
            <body hash="467fba7e2c042d0bc9c89ee1855715d1"><![CDATA[{
                if (_Tab == null)
                {
                    _Tab = TabController.Instance.GetTab(ToLocalizeTabId, PortalSettings.PortalId, false);
                }
                return _Tab;
            }]]></body>
          </codeblock>
        </property>
        <property name="ToLocalizeTabId">
          <declaration><![CDATA[public int ToLocalizeTabId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="92" sc="13" el="94" ec="14">TabLocalization.ascx.cs</location>
            <body hash="9045db2835479d4d1f91f83a7b1a0ebb"><![CDATA[{
                return (int) ViewState["TabId"];
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="96" sc="13" el="98" ec="14">TabLocalization.ascx.cs</location>
            <body hash="ed13bdefe3d8f14249e918562adbcacc"><![CDATA[{
                ViewState["TabId"] = value;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
        <event name="TabLocalizationChanged">
          <declaration><![CDATA[public event EventHandler<EventArgs> TabLocalizationChanged;]]></declaration>
          <documentation>
          </documentation>
        </event>
      </events>
    </class>
    <class name="View">
      <declaration><![CDATA[public class View : PortalModuleBase]]></declaration>
      <documentation>
        <summary>
 The Tabs PortalModuleBase is used to manage the Tabs/Pages for a
 portal.
 </summary>
 <remarks>
 </remarks></documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public View()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
        <constructor name=".cctor">
          <declaration><![CDATA[static View()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="72" sc="9" el="72" ec="97">Tabs.ascx.cs</location>
            <body hash="1793bcad89e5122140100c0fcf9e8d80"><![CDATA[private static readonly Regex TabNameRegex = new Regex(">*(.*)", RegexOptions.Compiled)]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="AddAttributes">
          <declaration><![CDATA[private void AddAttributes(ref RadTreeNode node, TabInfo tab)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="706" sc="9" el="793" ec="10">Tabs.ascx.cs</location>
            <body hash="264eb2c8ab48b02e60fc05265a05b8e3"><![CDATA[{
            var canView = true;
            bool canEdit;
            bool canAdd;
            bool canDelete;
            bool canHide;
            bool canMakeVisible;
            bool canEnable;
            bool canDisable;
            bool canMakeHome;

            if (node.Attributes["isPortalRoot"] != null && Boolean.Parse(node.Attributes["isPortalRoot"]))
            {
                canAdd = PortalSecurity.IsInRole(PortalSettings.AdministratorRoleName);
                canView = false;
                canEdit = false;
                canDelete = false;
                canHide = false;
                canMakeVisible = false;
                canEnable = false;
                canDisable = false;
                canMakeHome = false;
            }
            else if (tab == null)
            {
                canView = false;
                canEdit = false;
                canAdd = false;
                canDelete = false;
                canHide = false;
                canMakeVisible = false;
                canEnable = false;
                canDisable = false;
                canMakeHome = false;
            }
            else
            {
                canAdd = TabPermissionController.CanAddPage(tab);
                canDelete = TabPermissionController.CanDeletePage(tab);
                canMakeVisible = canHide = canDisable = canEnable = canEdit = TabPermissionController.CanManagePage(tab);
                canMakeHome = PortalSecurity.IsInRole(PortalSettings.AdministratorRoleName) && !tab.DisableLink;

                if (TabController.IsSpecialTab(tab.TabID, PortalSettings.PortalId))
                {
                    canDelete = false;
                    canMakeHome = false;
                }

                if (rblMode.SelectedValue == "H")
                {
                    canMakeHome = false;
                }

                if (tab.IsVisible)
                {
                    canMakeVisible = false;
                }
                else
                {
                    canHide = false;
                }

				if (tab.DisableLink 
					|| (tab.TabID == PortalSettings.AdminTabId || tab.TabID == PortalSettings.SplashTabId ||
							tab.TabID == PortalSettings.HomeTabId || tab.TabID == PortalSettings.LoginTabId ||
							tab.TabID == PortalSettings.UserTabId || tab.TabID == PortalSettings.SuperTabId))
                {
                    canDisable = false;
                }
				
				if (!tab.DisableLink)
                {
                    canEnable = false;
                }
            }

            node.Attributes.Add("CanView", canView.ToString(CultureInfo.InvariantCulture));
            node.Attributes.Add("CanEdit", canEdit.ToString(CultureInfo.InvariantCulture));
            node.Attributes.Add("CanAdd", canAdd.ToString(CultureInfo.InvariantCulture));
            node.Attributes.Add("CanDelete", canDelete.ToString(CultureInfo.InvariantCulture));
            node.Attributes.Add("CanHide", canHide.ToString(CultureInfo.InvariantCulture));
            node.Attributes.Add("CanMakeVisible", canMakeVisible.ToString(CultureInfo.InvariantCulture));
            node.Attributes.Add("CanEnable", canEnable.ToString(CultureInfo.InvariantCulture));
            node.Attributes.Add("CanDisable", canDisable.ToString(CultureInfo.InvariantCulture));
            node.Attributes.Add("CanMakeHome", canMakeHome.ToString(CultureInfo.InvariantCulture));

            node.AllowEdit = canEdit;
        }]]></body>
          </codeblock>
        </method>
        <method name="AddChildNodes">
          <declaration><![CDATA[private void AddChildNodes(RadTreeNode parentNode)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="796" sc="9" el="823" ec="10">Tabs.ascx.cs</location>
            <body hash="6e3a53d60f751478dc45bd4659dc6e08"><![CDATA[{
            parentNode.Nodes.Clear();

            var parentId = int.Parse(parentNode.Value);

            foreach (var objTab in Tabs)
            {
                if (objTab.ParentId == parentId)
                {
                    var node = new RadTreeNode
                    {
                        Text = string.Format("{0} {1}", objTab.TabName, GetNodeStatusIcon(objTab)),
                        Value = objTab.TabID.ToString(CultureInfo.InvariantCulture),
                        AllowEdit = true,
                        ImageUrl = GetNodeIcon(objTab),
                        AllowDrag = CanDrag(objTab),
                        AllowDrop = CanDrop(objTab)
                    };
                    AddAttributes(ref node, objTab);
                    //If objTab.HasChildren Then
                    //    node.ExpandMode = TreeNodeExpandMode.ServerSide
                    //End If

                    AddChildNodes(node);
                    parentNode.Nodes.Add(node);
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="ApplyDefaultTabTemplate">
          <declaration><![CDATA[private void ApplyDefaultTabTemplate(TabInfo tab)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1357" sc="9" el="1373" ec="10">Tabs.ascx.cs</location>
            <body hash="6e1f52620a9d199b513a83a878205ef9"><![CDATA[{
            var templateFile = Path.Combine(PortalSettings.HomeDirectoryMapPath, "Templates\\" + DefaultPageTemplate);
            if (File.Exists(templateFile))
            {
                var xmlDoc = new XmlDocument();
                try
                {
                    xmlDoc.Load(templateFile);
                    TabController.DeserializePanes(xmlDoc.SelectSingleNode("//portal/tabs/tab/panes"), tab.PortalID, tab.TabID, PortalTemplateModuleAction.Ignore, new Hashtable());
                }
                catch (Exception ex)
                {
                    Exceptions.LogException(ex);
                    throw new DotNetNukeException("Unable to process page template.", ex, DotNetNukeErrorCode.DeserializePanesFailed);
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="BindSkinsAndContainers">
          <declaration><![CDATA[private void BindSkinsAndContainers()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="826" sc="9" el="838" ec="10">Tabs.ascx.cs</location>
            <body hash="e2c63d4e239598f708a1af9680c847f3"><![CDATA[{
            drpSkin.PortalId = PortalId;
            drpSkin.RootPath = SkinController.RootSkin;
            drpSkin.Scope = SkinScope.All;
            drpSkin.IncludeNoneSpecificItem = true;
            drpSkin.NoneSpecificText = Localization.GetString("DefaultSkin", LocalResourceFile);

            drpContainer.PortalId = PortalId;
            drpContainer.RootPath = SkinController.RootContainer;
            drpContainer.Scope = SkinScope.All;
            drpContainer.IncludeNoneSpecificItem = true;
            drpContainer.NoneSpecificText = Localization.GetString("DefaultContainer", LocalResourceFile);
        }]]></body>
          </codeblock>
        </method>
        <method name="BindTab">
          <declaration><![CDATA[private void BindTab(int tabId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="841" sc="9" el="942" ec="10">Tabs.ascx.cs</location>
            <body hash="a84623ec555b87d8da46ebd49362be8f"><![CDATA[{
            pnlBulk.Visible = false;

            var tab = TabController.Instance.GetTab(tabId, PortalId, true);
            
            if (tab != null)
            {
                //check for manage permissions
                if (!TabPermissionController.CanManagePage(tab))
                {
                    pnlDetails.Visible = false;
                    return;
                }

                pnlDetails.Visible = true;

                SelectedNode = tabId.ToString(CultureInfo.InvariantCulture);

                //Bind TabPermissionsGrid to TabId 
                dgPermissions.TabID = tab.TabID;
                dgPermissions.DataBind();

                var returnUrl = Globals.NavigateURL(TabId, string.Empty, "edittabid=" + tabId, "isHost=" + (rblMode.SelectedValue == "H"));
                cmdMore.NavigateUrl = ModuleContext.NavigateUrl(tabId, "", false, "ctl=Tab", "action=edit", "returnurl=" + returnUrl);

                txtTitle.Text = tab.Title;
                txtName.Text = tab.TabName;
                chkVisible.Checked = tab.IsVisible;

                txtSitemapPriority.Text = tab.SiteMapPriority.ToString(CultureInfo.InvariantCulture);
                txtDescription.Text = tab.Description;
                txtKeywords.Text = tab.KeyWords;
                txtMeta.Text = tab.PageHeadText;                
                if (tab.RefreshInterval != Null.NullInteger)
                {
                    txtRefresh.Text = tab.RefreshInterval.ToString(CultureInfo.InvariantCulture); 
                }

                drpSkin.SelectedValue = tab.SkinSrc;
                drpContainer.SelectedValue = tab.ContainerSrc;

                ctlURL.Url = tab.Url;
                if (string.IsNullOrEmpty(tab.Url))
                {
                    ctlURL.UrlType = "N";
                }
                bool newWindow;
                if (tab.TabSettings["LinkNewWindow"] != null && Boolean.TryParse((string)tab.TabSettings["LinkNewWindow"], out newWindow) && newWindow)
                {
                    ctlURL.NewWindow = newWindow;
                }

                chkPermanentRedirect.Checked = tab.PermanentRedirect;
                txtKeywords.Text = tab.KeyWords;
                txtDescription.Text = tab.Description;

                chkDisabled.Checked = tab.DisableLink;
                if (tab.TabID == PortalSettings.AdminTabId || tab.TabID == PortalSettings.SplashTabId ||
                    tab.TabID == PortalSettings.HomeTabId || tab.TabID == PortalSettings.LoginTabId ||
                    tab.TabID == PortalSettings.UserTabId || tab.TabID == PortalSettings.SuperTabId)
                {
                    chkDisabled.Enabled = false;
                }
                else
                {
					chkDisabled.Enabled = true;
                }

                if (PortalSettings.SSLEnabled)
                {
                    chkSecure.Enabled = true;
                    chkSecure.Checked = tab.IsSecure;
                }
                else
                {
                    chkSecure.Enabled = false;
                    chkSecure.Checked = tab.IsSecure;
                }
                var allowIndex = false;
                chkAllowIndex.Checked = !tab.TabSettings.ContainsKey("AllowIndex") || !bool.TryParse(tab.TabSettings["AllowIndex"].ToString(), out allowIndex) || allowIndex;

                ctlIcon.Url = tab.IconFileRaw;
                if (string.IsNullOrEmpty(tab.IconFileRaw))
                {
                    ctlIcon.UrlType = "F";
                }

                ctlIconLarge.Url = tab.IconFileLargeRaw;
                if (string.IsNullOrEmpty(tab.IconFileLargeRaw))
                {
                    ctlIconLarge.UrlType = "F";
                }

                ShowPermissions(!tab.IsSuperTab && TabPermissionController.CanAdminPage(tab));

                termsSelector.PortalId = tab.PortalID;
                termsSelector.Terms = tab.Terms;
                termsSelector.DataBind();

                grdModules.Rebind();
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="BindTree">
          <declaration><![CDATA[private void BindTree()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="945" sc="9" el="1051" ec="10">Tabs.ascx.cs</location>
            <body hash="65945b80e5b5c208f13c37bd80c2bb0d"><![CDATA[{
            ctlPages.Nodes.Clear();

            var rootNode = new RadTreeNode();
            var strParent = "-1";

            if (Settings["ParentPageFilter"] != null)
            {
                strParent = Convert.ToString(Settings["ParentPageFilter"]);
            }

            if (strParent == "-1")
            {
                rootNode.Text = PortalSettings.PortalName;
                rootNode.ImageUrl = IconPortal;
                rootNode.Value = Null.NullInteger.ToString(CultureInfo.InvariantCulture);
                rootNode.Expanded = true;
                rootNode.AllowEdit = false;
                rootNode.EnableContextMenu = true;
                rootNode.Attributes.Add("isPortalRoot", "True");
                rootNode.AllowDrag = false;
                rootNode.AllowDrop = PortalSecurity.IsInRole(PortalSettings.AdministratorRoleName);
                AddAttributes(ref rootNode, null);
            }
            else
            {
                var parent = TabController.Instance.GetTab(Convert.ToInt32(strParent), -1, false);
                if (parent != null)
                {
                    rootNode.Text = parent.TabName;
                    rootNode.ImageUrl = IconPortal;
                    rootNode.Value = parent.TabID.ToString(CultureInfo.InvariantCulture);
                    rootNode.Expanded = true;
                    rootNode.EnableContextMenu = true;
                    rootNode.PostBack = false;
                    rootNode.AllowDrag = false;
                }
            }


            foreach (var tab in Tabs)
            {
                if (TabPermissionController.CanViewPage(tab))
                {
                    if (strParent != "-1")
                    {
                        if (tab.ParentId == Convert.ToInt32(strParent))
                        {
                            var node = new RadTreeNode
                            {
                                Text = string.Format("{0} {1}", tab.TabName, GetNodeStatusIcon(tab)),
                                Value = tab.TabID.ToString(CultureInfo.InvariantCulture),
                                AllowEdit = true,
                                ImageUrl = GetNodeIcon(tab),
                                AllowDrag = CanDrag(tab),
                                AllowDrop = CanDrop(tab)
                            };
                            AddAttributes(ref node, tab);

                            AddChildNodes(node);
                            rootNode.Nodes.Add(node);
                        }
                    }
                    else
                    {
                        if (tab.Level == 0)
                        {
                            var node = new RadTreeNode
                            {
                                Text = string.Format("{0} {1}", tab.TabName, GetNodeStatusIcon(tab)),
                                Value = tab.TabID.ToString(CultureInfo.InvariantCulture),
                                AllowEdit = true,
                                ImageUrl = GetNodeIcon(tab),
                                AllowDrag = CanDrag(tab),
                                AllowDrop = CanDrop(tab)
                            };
                            AddAttributes(ref node, tab);

                            AddChildNodes(node);
                            rootNode.Nodes.Add(node);
                        }
                    }
                }
            }

            ctlPages.Nodes.Add(rootNode);
            //AttachContextMenu(ctlPages)

            if (SelectedNode != null)
            {
                if (!Page.IsPostBack)
                {
                    try
                    {
                        ctlPages.FindNodeByValue(SelectedNode).Selected = true;
                        ctlPages.FindNodeByValue(SelectedNode).ExpandParentNodes();
                        var tabid = Convert.ToInt32(SelectedNode);
                        BindTab(tabid);
                        pnlBulk.Visible = false;
                    }
                    catch (Exception exc)
                    {
                        Exceptions.ProcessModuleLoadException(this, exc);
                    }
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="BindTreeAndShowTab">
          <declaration><![CDATA[private void BindTreeAndShowTab(int tabId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1054" sc="9" el="1065" ec="10">Tabs.ascx.cs</location>
            <body hash="616539b630b690953a163c6713dbcc5e"><![CDATA[{
            BindTree();
            var node = ctlPages.FindNodeByValue(tabId.ToString(CultureInfo.InvariantCulture));
            //rare cases it is null (e.g. when a page is created when page local is not default locale)
            if (node != null)
            {
                node.Selected = true;
                node.ExpandParentNodes();
            }

            BindTab(tabId);
        }]]></body>
          </codeblock>
        </method>
        <method name="CanDrag">
          <declaration><![CDATA[private bool CanDrag(TabInfo tab)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1303" sc="9" el="1317" ec="10">Tabs.ascx.cs</location>
            <body hash="af95f0ce8ae526e2c68f8f305fc9d561"><![CDATA[{
            if (PortalSecurity.IsInRole(PortalSettings.AdministratorRoleName))
            {
                return true;
            }

            if (tab == null || tab.ParentId == Null.NullInteger || !TabPermissionController.CanManagePage(tab))
            {
                return false;
            }

            //only allow drag the node when its parent have manage permission.
            var parentTab = TabController.Instance.GetTab(tab.ParentId, PortalId, false);
            return parentTab != null && TabPermissionController.CanManagePage(parentTab);
        }]]></body>
          </codeblock>
        </method>
        <method name="CanDrop">
          <declaration><![CDATA[private bool CanDrop(TabInfo tab)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1320" sc="9" el="1327" ec="10">Tabs.ascx.cs</location>
            <body hash="362084be9dc03e2565fc1b37b53f2dee"><![CDATA[{
            if (PortalSecurity.IsInRole(PortalSettings.AdministratorRoleName))
            {
                return true;
            }

            return tab != null && TabPermissionController.CanManagePage(tab);
        }]]></body>
          </codeblock>
        </method>
        <method name="CanDropWithNode">
          <declaration><![CDATA[private bool CanDropWithNode(RadTreeNode destNode, RadTreeViewDropPosition position)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1290" sc="9" el="1300" ec="10">Tabs.ascx.cs</location>
            <body hash="049ce1097d6596f6a3be6ee3bf7ab98a"><![CDATA[{
            var targetTab = TabController.Instance.GetTab(int.Parse(destNode.Value), PortalId, false);

            if (position == RadTreeViewDropPosition.Over)
            {
                return CanDrop(targetTab);
            }

            //when drag the node before/after target, the target node should able to drag as well.
            return CanDrag(targetTab);
        }]]></body>
          </codeblock>
        </method>
        <method name="CheckSecurity">
          <declaration><![CDATA[private void CheckSecurity()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1068" sc="9" el="1074" ec="10">Tabs.ascx.cs</location>
            <body hash="1af896b791db991492dc7570bcef1f9d"><![CDATA[{
            if (TabPermissionController.HasTabPermission("CONTENT") ||
                ModulePermissionController.HasModulePermission(ModuleConfiguration.ModulePermissions, "CONTENT, EDIT")
            ) return;

            Response.Redirect(Globals.NavigateURL("Access Denied"), true);
        }]]></body>
          </codeblock>
        </method>
        <method name="CmdCopySkinClick">
          <declaration><![CDATA[protected void CmdCopySkinClick(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="306" sc="9" el="317" ec="10">Tabs.ascx.cs</location>
            <body hash="0cd626bc48929613929fe7c53b467594"><![CDATA[{
            try
            {
                TabController.CopyDesignToChildren(TabController.Instance.GetTab(Convert.ToInt32(ctlPages.SelectedNode.Value), PortalId, false), drpSkin.SelectedValue, drpContainer.SelectedValue);
                ShowSuccessMessage(Localization.GetString("DesignCopied", LocalResourceFile));
            }
            catch (Exception ex)
            {
                ShowErrorMessage(Localization.GetString("DesignCopyError", LocalResourceFile));
                Exceptions.ProcessModuleLoadException(this, ex);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="CmdDeleteModuleClick">
          <declaration><![CDATA[protected void CmdDeleteModuleClick(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="612" sc="9" el="620" ec="10">Tabs.ascx.cs</location>
            <body hash="e4110231d5113f324076e500ce3c946e"><![CDATA[{
            var moduleId = Convert.ToInt32(((ImageButton)sender).CommandArgument);
            var tabId = Convert.ToInt32(ctlPages.SelectedNode.Value);

            ModuleController.Instance.DeleteTabModule(tabId, moduleId, true);
            ModuleController.Instance.ClearCache(tabId);

            grdModules.Rebind();
        }]]></body>
          </codeblock>
        </method>
        <method name="CmdUpdateClick">
          <declaration><![CDATA[protected void CmdUpdateClick(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="623" sc="9" el="699" ec="10">Tabs.ascx.cs</location>
            <body hash="c8abc81c7f71a6c3cd567c303dbc8b23"><![CDATA[{
            //Often times grid stays but node is not selected (e.g. when node is deleted or update page is clicked)
            if (ctlPages.SelectedNode == null)
                return;

            var intTab = Convert.ToInt32(ctlPages.SelectedNode.Value);
            var tab = TabController.Instance.GetTab(intTab, PortalId, true);
            Page.Validate("Page");
            if (!Page.IsValid) 
                return;
            if (tab != null && TabPermissionController.CanManagePage(tab))
            {
                tab.TabName = txtName.Text;
                tab.Title = txtTitle.Text;
                tab.Description = txtDescription.Text;
                tab.KeyWords = txtKeywords.Text;
                tab.IsVisible = chkVisible.Checked;
                tab.DisableLink = chkDisabled.Checked;

                tab.IsDeleted = false;
                tab.Url = ctlURL.Url;
                TabController.Instance.UpdateTabSetting(tab.TabID, "LinkNewWindow", ctlURL.NewWindow.ToString());
                TabController.Instance.UpdateTabSetting(tab.TabID, "AllowIndex", chkAllowIndex.Checked.ToString());

                tab.SkinSrc = drpSkin.SelectedValue;
                tab.ContainerSrc = drpContainer.SelectedValue;
                tab.TabPath = Globals.GenerateTabPath(tab.ParentId, tab.TabName);

                tab.TabPermissions.Clear();
                if (tab.PortalID != Null.NullInteger)
                {
                    tab.TabPermissions.AddRange(dgPermissions.Permissions);
                }

                //All validations have been done in the Page.Validate()

                //Check for invalid
                string invalidType;
                if (!TabController.IsValidTabName(tab.TabName, out invalidType))
                {
                    ShowErrorMessage(string.Format(Localization.GetString(invalidType, LocalResourceFile), tab.TabName));
                    return;
                }

                //Validate Tab Path
                if (!IsValidTabPath(tab, tab.TabPath))
                {
                    return;
                }

                tab.RefreshInterval = txtRefresh.Text == "" ? Null.NullInteger : Convert.ToInt32(txtRefresh.Text);

                tab.SiteMapPriority = float.Parse(txtSitemapPriority.Text, NumberFormatInfo.InvariantInfo);
                tab.PageHeadText = txtMeta.Text;
                tab.IsSecure = chkSecure.Checked;
                tab.PermanentRedirect = chkPermanentRedirect.Checked;

                var iconFile = ctlIcon.Url;
                var iconFileLarge = ctlIconLarge.Url;

                tab.IconFile = iconFile;
                tab.IconFileLarge = iconFileLarge;

                tab.Terms.Clear();
                tab.Terms.AddRange(termsSelector.Terms);

                TabController.Instance.UpdateTab(tab);
                ShowSuccessMessage(string.Format(Localization.GetString("TabUpdated", LocalResourceFile), tab.TabName));

                BindTree();

                //keep the tab selected
                SelectedNode = intTab.ToString(CultureInfo.InvariantCulture);
                ctlPages.FindNodeByValue(SelectedNode).Selected = true;
                ctlPages.FindNodeByValue(SelectedNode).ExpandParentNodes();
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="CreateTabFromParent">
          <declaration><![CDATA[private int CreateTabFromParent(TabInfo objRoot, string tabName, int parentId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1376" sc="9" el="1491" ec="10">Tabs.ascx.cs</location>
            <body hash="8d34398863aee8667ac8598f6dd3d7a0"><![CDATA[{
            var tab = new TabInfo
            {
                PortalID = PortalId,
                TabName = tabName,
                ParentId = parentId,
                Title = "",
                Description = "",
                KeyWords = "",
                IsVisible = true,
                DisableLink = false,
                IconFile = "",
                IconFileLarge = "",
                IsDeleted = false,
                Url = "",
                SkinSrc = "",
                ContainerSrc = "",
                CultureCode = Null.NullString
            };

            if (objRoot != null)
            {
                tab.IsVisible = objRoot.IsVisible;
                tab.DisableLink = objRoot.DisableLink;
                tab.SkinSrc = objRoot.SkinSrc;
                tab.ContainerSrc = objRoot.ContainerSrc;
            }

            var portalSettings = PortalController.Instance.GetCurrentPortalSettings();
            if (portalSettings.ContentLocalizationEnabled)
            {
                tab.CultureCode = LocaleController.Instance.GetDefaultLocale(tab.PortalID).Code;
            }

            var parentTab = TabController.Instance.GetTab(parentId, -1, false);

            if (parentTab != null)
            {
                tab.PortalID = parentTab.PortalID;
                tab.ParentId = parentTab.TabID;
                if (parentTab.IsSuperTab)
                    ShowPermissions(false);
            }
            else
            {
                //return Null.NullInteger;
                tab.PortalID = PortalId;
                tab.ParentId = Null.NullInteger;
            }

            tab.TabPath = Globals.GenerateTabPath(tab.ParentId, tab.TabName);

            //Check for invalid
            string invalidType;
            if (!TabController.IsValidTabName(tab.TabName, out invalidType))
            {
                ShowErrorMessage(string.Format(Localization.GetString(invalidType, LocalResourceFile), tab.TabName));
                return Null.NullInteger;
            }

            //Validate Tab Path
            if (!IsValidTabPath(tab, tab.TabPath))
            {
                return Null.NullInteger;
            }

            //Inherit permissions from parent
            tab.TabPermissions.Clear();
            if (tab.PortalID != Null.NullInteger && objRoot != null)
            {
                tab.TabPermissions.AddRange(objRoot.TabPermissions);
            }
            else if (tab.PortalID != Null.NullInteger)
            {
                //Give admin full permission
                ArrayList permissions = PermissionController.GetPermissionsByTab();

                foreach (PermissionInfo permission in permissions)
                {
                    var newTabPermission = new TabPermissionInfo
                    {
                        PermissionID = permission.PermissionID,
                        PermissionKey = permission.PermissionKey,
                        PermissionName = permission.PermissionName,
                        AllowAccess = true,
                        RoleID = PortalSettings.Current.AdministratorRoleId
                    };
                    tab.TabPermissions.Add(newTabPermission);
                }
            }

            //Inherit other information from Parent
            if (objRoot != null)
            {
                tab.Terms.Clear();
                tab.StartDate = objRoot.StartDate;
                tab.EndDate = objRoot.EndDate;
                tab.RefreshInterval = objRoot.RefreshInterval;
                tab.SiteMapPriority = objRoot.SiteMapPriority;
                tab.PageHeadText = objRoot.PageHeadText;
                tab.IsSecure = objRoot.IsSecure;
                tab.PermanentRedirect = objRoot.PermanentRedirect;
            }

            tab.TabID = TabController.Instance.AddTab(tab);
            ApplyDefaultTabTemplate(tab);

            //create localized tabs if content localization is enabled
            if (portalSettings.ContentLocalizationEnabled)
            {
                TabController.Instance.CreateLocalizedCopies(tab);
            }

            ShowSuccessMessage(string.Format(Localization.GetString("TabCreated", LocalResourceFile), tab.TabName));
            return tab.TabID;
        }]]></body>
          </codeblock>
        </method>
        <method name="CtlPagesContextMenuItemClick">
          <declaration><![CDATA[protected void CtlPagesContextMenuItemClick(object sender, RadTreeViewContextMenuEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="339" sc="9" el="447" ec="10">Tabs.ascx.cs</location>
            <body hash="c976f519c2644f01d89557a5b3290137"><![CDATA[{
            SelectedNode = e.Node.Value;

            var portalId = rblMode.SelectedValue == "H" ? Null.NullInteger : PortalId;
            var objTab = TabController.Instance.GetTab(int.Parse(e.Node.Value), portalId, false);

            switch (e.MenuItem.Value.ToLower())
            {
                case "makehome":
                    if (PortalSecurity.IsInRole(PortalSettings.AdministratorRoleName))
                    {
                        var portalInfo = PortalController.Instance.GetPortal(PortalId);
                        portalInfo.HomeTabId = objTab.TabID;
                        PortalSettings.HomeTabId = objTab.TabID;
                        PortalController.Instance.UpdatePortalInfo(portalInfo);                        
                        DataCache.ClearPortalCache(PortalId, false);
                        BindTreeAndShowTab(objTab.TabID);
                        ShowSuccessMessage(string.Format(Localization.GetString("TabMadeHome", LocalResourceFile), objTab.TabName));
                    }
                    break;
                case "view":
                    Response.Redirect(objTab.FullUrl);
                    break;
                case "edit":
                    if (TabPermissionController.CanManagePage(objTab))
                    {
                        var editUrl = Globals.NavigateURL(objTab.TabID, "Tab", "action=edit", "returntabid=" + TabId);
                        // Prevent PageSettings of the current page in a popup if SSL is enabled and enforced, which causes redirection/javascript broswer security issues.                        
                        if (PortalSettings.EnablePopUps && !(objTab.TabID == TabId && (PortalSettings.SSLEnabled && PortalSettings.SSLEnforced)))
                        {
                            editUrl = UrlUtils.PopUpUrl(editUrl, this, PortalSettings, true, false);
                            var script = string.Format("<script type=\"text/javascript\">{0}</script>", editUrl);
                            ClientAPI.RegisterStartUpScript(Page, "EditInPopup", script);
                        }
                        else
                        {
                            Response.Redirect(editUrl, true);
                        }
                    }
                    break;
                case "delete":
                    if (TabPermissionController.CanDeletePage(objTab))
                    {
                        TabController.Instance.SoftDeleteTab(objTab.TabID, PortalSettings);
                        BindTree();
                        //keep the parent tab selected
                        if (objTab.ParentId != Null.NullInteger)
                        {
                            SelectedNode = objTab.ParentId.ToString(CultureInfo.InvariantCulture);
                            ctlPages.FindNodeByValue(SelectedNode).Selected = true;
                            ctlPages.FindNodeByValue(SelectedNode).ExpandParentNodes();
                            BindTab(objTab.ParentId);
                        }
                        else
                        {
                            pnlDetails.Visible = false;
                        }
                        ShowSuccessMessage(string.Format(Localization.GetString("TabDeleted", LocalResourceFile), objTab.TabName));
                    }
                    break;
                case "add":
                    if ((objTab!= null && TabPermissionController.CanAddPage(objTab)) || (PortalSecurity.IsInRole(PortalSettings.AdministratorRoleName)))
                    {
                        pnlBulk.Visible = true;
                        btnBulkCreate.CommandArgument = e.Node.Value;
                        ctlPages.FindNodeByValue(e.Node.Value).Selected = true;
                        txtBulk.Focus();
                        pnlDetails.Visible = false;
                        //Response.Redirect(NavigateURL(objTab.TabID, "Tab", "action=add", "returntabid=" & TabId.ToString), True)
                    }
                    break;
                case "hide":
                    if (TabPermissionController.CanManagePage(objTab))
                    {
                        objTab.IsVisible = false;
                        TabController.Instance.UpdateTab(objTab);
                        BindTreeAndShowTab(objTab.TabID);
                        ShowSuccessMessage(string.Format(Localization.GetString("TabHidden", LocalResourceFile), objTab.TabName));
                    }
                    break;
                case "show":
                    if (TabPermissionController.CanManagePage(objTab))
                    {
                        objTab.IsVisible = true;
                        TabController.Instance.UpdateTab(objTab);
                        BindTreeAndShowTab(objTab.TabID);
                        ShowSuccessMessage(string.Format(Localization.GetString("TabShown", LocalResourceFile), objTab.TabName));
                    }
                    break;
                case "disable":
                    if (TabPermissionController.CanManagePage(objTab))
                    {
                        objTab.DisableLink = true;
                        TabController.Instance.UpdateTab(objTab);
                        BindTreeAndShowTab(objTab.TabID);
                        ShowSuccessMessage(string.Format(Localization.GetString("TabDisabled", LocalResourceFile), objTab.TabName));
                    }
                    break;
                case "enable":
                    if (TabPermissionController.CanManagePage(objTab))
                    {
                        objTab.DisableLink = false;
                        TabController.Instance.UpdateTab(objTab);
                        BindTreeAndShowTab(objTab.TabID);
                        ShowSuccessMessage(string.Format(Localization.GetString("TabEnabled", LocalResourceFile), objTab.TabName));
                    }
                    break;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="CtlPagesNodeClick">
          <declaration><![CDATA[protected void CtlPagesNodeClick(object sender, RadTreeNodeEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="325" sc="9" el="336" ec="10">Tabs.ascx.cs</location>
            <body hash="2ce56b2139af2b8bb6465e6123ac8630"><![CDATA[{
            if (e.Node.Attributes["isPortalRoot"] != null && Boolean.Parse(e.Node.Attributes["isPortalRoot"]))
            {
                pnlDetails.Visible = false;
                pnlBulk.Visible = false;
            }
            else
            {
                var tabid = Convert.ToInt32(e.Node.Value);
                BindTab(tabid);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="CtlPagesNodeDrop">
          <declaration><![CDATA[protected void CtlPagesNodeDrop(object sender, RadTreeNodeDragDropEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="450" sc="9" el="475" ec="10">Tabs.ascx.cs</location>
            <body hash="8a9fce8901112e6a648faa748416ed74"><![CDATA[{
            var sourceNode = e.SourceDragNode;
            var destNode = e.DestDragNode;
            var dropPosition = e.DropPosition;
            if (destNode != null && CanDropWithNode(destNode, dropPosition))
            {
                if (sourceNode.TreeView.SelectedNodes.Count <= 1)
                {
                    PerformDragAndDrop(dropPosition, sourceNode, destNode);
                }
                else if (sourceNode.TreeView.SelectedNodes.Count > 1)
                {
                    foreach (var node in sourceNode.TreeView.SelectedNodes)
                    {
                        PerformDragAndDrop(dropPosition, node, destNode);
                    }
                }

                destNode.Expanded = true;

                foreach (var node in ctlPages.GetAllNodes())
                {
                    node.Selected = node.Value == e.SourceDragNode.Value;
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="CtlPagesNodeEdit">
          <declaration><![CDATA[protected void CtlPagesNodeEdit(object sender, RadTreeNodeEditEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="478" sc="9" el="503" ec="10">Tabs.ascx.cs</location>
            <body hash="540a5cf32ed215c16a8655c1f624c566"><![CDATA[{            
            var objTab = TabController.Instance.GetTab(int.Parse(e.Node.Value), PortalId, false);
            if (objTab != null && TabPermissionController.CanManagePage(objTab))
            {
                //Check for invalid
                string invalidType;
                if (!TabController.IsValidTabName(e.Text, out invalidType))
                {
                    ShowErrorMessage(string.Format(Localization.GetString(invalidType, LocalResourceFile), e.Text));
                    e.Node.Text = objTab.TabName;
                    e.Text = objTab.TabName;
                }
                else if (!IsValidTabPath(objTab, Globals.GenerateTabPath(objTab.ParentId, e.Text)))
                {
                    e.Node.Text = objTab.TabName;
                    e.Text = objTab.TabName;
                }
                else
                {
                    objTab.TabName = e.Text;
                    TabController.Instance.UpdateTab(objTab);
                }

                BindTreeAndShowTab(objTab.TabID);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="CtlPagesNodeExpand">
          <declaration><![CDATA[protected void CtlPagesNodeExpand(object sender, RadTreeNodeEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="539" sc="9" el="541" ec="10">Tabs.ascx.cs</location>
            <body hash="0e50173d128cd7acbb791d26783b92ca"><![CDATA[{
            AddChildNodes(e.Node);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetConfirmString">
          <declaration><![CDATA[public string GetConfirmString()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1334" sc="9" el="1336" ec="10">Tabs.ascx.cs</location>
            <body hash="852c3b7dc1856ba0233ba26c16615b61"><![CDATA[{
            return ClientAPI.GetSafeJSString(Localization.GetString("ConfirmDelete", LocalResourceFile));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetNodeIcon">
          <declaration><![CDATA[private string GetNodeIcon(TabInfo tab)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1077" sc="9" el="1099" ec="10">Tabs.ascx.cs</location>
            <body hash="8d30e237dff04d806b4b2db0a4cffd6c"><![CDATA[{
            if (PortalSettings.HomeTabId == tab.TabID)
            {
                return IconHome;
            }

            if (IsSecuredTab(tab))
            {
                if (IsAdminTab(tab))
                {
                    return AdminOnlyIcon;
                }

                if (IsRegisteredUserTab(tab))
                {
                    return RegisteredUsersIcon;
                }

                return SecuredIcon;
            }

            return AllUsersIcon;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetNodeStatusIcon">
          <declaration><![CDATA[private string GetNodeStatusIcon(TabInfo tab)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1102" sc="9" el="1117" ec="10">Tabs.ascx.cs</location>
            <body hash="1d0d2f26a9d77d91545740e9a60437ae"><![CDATA[{
            var s = string.Empty;
            if (tab.DisableLink)
            {
                s = s + string.Format("<img src=\"{0}\" alt=\"\" title=\"{1}\" class=\"statusicon\" />", IconPageDisabled, LocalizeString("lblDisabled"));
            }
            if (tab.IsVisible == false)
            {
                s = s + string.Format("<img src=\"{0}\" alt=\"\" title=\"{1}\" class=\"statusicon\" />", IconPageHidden, LocalizeString("lblHidden"));
            }
            if (tab.Url != string.Empty)
            {
                s = s + string.Format("<img src=\"{0}\" alt=\"\" title=\"{1}\" class=\"statusicon\" />", IconRedirect, LocalizeString("lblRedirect"));
            }
            return s;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetParentTabId">
          <declaration><![CDATA[private static int GetParentTabId(List<TabInfo> lstTabs, int currentIndex, int parentLevel)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1494" sc="9" el="1510" ec="10">Tabs.ascx.cs</location>
            <body hash="9765ea9ed0b2aacbf58948e4658aa467"><![CDATA[{
            var oParent = lstTabs[0];

            for (var i = 0; i < lstTabs.Count; i++)
            {
                if (i == currentIndex)
                {
                    return oParent.TabID;
                }
                if (lstTabs[i].Level == parentLevel)
                {
                    oParent = lstTabs[i];
                }
            }

            return Null.NullInteger;
        }]]></body>
          </codeblock>
        </method>
        <method name="GrdModulesNeedDataSource">
          <declaration><![CDATA[protected void GrdModulesNeedDataSource(object source, GridNeedDataSourceEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="524" sc="9" el="536" ec="10">Tabs.ascx.cs</location>
            <body hash="800557e595d08796e70e9b4e0aab03b6"><![CDATA[{
            var lst = new List<ModuleInfo>();

            if (ctlPages.SelectedNode != null)
            {
                var tabid = Convert.ToInt32(ctlPages.SelectedNode.Value);
                var dic = ModuleController.Instance.GetTabModules(tabid);

                lst.AddRange(dic.Values.Where(objModule => objModule.IsDeleted == false));
            }

            grdModules.DataSource = lst;
        }]]></body>
          </codeblock>
        </method>
        <method name="IsAdminTab">
          <declaration><![CDATA[private bool IsAdminTab(TabInfo tab)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1120" sc="9" el="1123" ec="10">Tabs.ascx.cs</location>
            <body hash="f23159c09c9bfd7e0e16321064a20b0e"><![CDATA[{
            var perms = tab.TabPermissions;
            return perms.Cast<TabPermissionInfo>().All(perm => perm.RoleName == PortalSettings.AdministratorRoleName || !perm.AllowAccess);
        }]]></body>
          </codeblock>
        </method>
        <method name="IsNumeric">
          <declaration><![CDATA[private static bool IsNumeric(object expression)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1126" sc="9" el="1137" ec="10">Tabs.ascx.cs</location>
            <body hash="57ad55d7611cb17d55f986a93cb78002"><![CDATA[{
            if (expression == null)
                return false;

            double testDouble;
            if (double.TryParse(expression.ToString(), out testDouble))
                return true;

            //VB's 'IsNumeric' returns true for any boolean value:
            bool testBool;
            return bool.TryParse(expression.ToString(), out testBool);
        }]]></body>
          </codeblock>
        </method>
        <method name="IsRegisteredUserTab">
          <declaration><![CDATA[private bool IsRegisteredUserTab(TabInfo tab)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1140" sc="9" el="1143" ec="10">Tabs.ascx.cs</location>
            <body hash="9851e2b8008aa69df6cde7887726a0c0"><![CDATA[{
            var perms = tab.TabPermissions;
            return perms.Cast<TabPermissionInfo>().Any(perm => perm.RoleName == PortalSettings.RegisteredRoleName && perm.AllowAccess);
        }]]></body>
          </codeblock>
        </method>
        <method name="IsSecuredTab">
          <declaration><![CDATA[private static bool IsSecuredTab(TabInfo tab)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1146" sc="9" el="1149" ec="10">Tabs.ascx.cs</location>
            <body hash="9e0795f8962416810baa39b8f9e9768b"><![CDATA[{
            var perms = tab.TabPermissions;
            return perms.Cast<TabPermissionInfo>().All(perm => perm.RoleName != Globals.glbRoleAllUsersName || !perm.AllowAccess);
        }]]></body>
          </codeblock>
        </method>
        <method name="IsValidTabPath">
          <declaration><![CDATA[private bool IsValidTabPath(TabInfo tab, string newTabPath)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1513" sc="9" el="1544" ec="10">Tabs.ascx.cs</location>
            <body hash="b882f2e2afa77c16a11aab0f31447450"><![CDATA[{
            var valid = true;

            //get default culture if the tab's culture is null
            var cultureCode = tab.CultureCode;
            if (string.IsNullOrEmpty(cultureCode))
            {
                cultureCode = PortalSettings.DefaultLanguage;
            }

            //Validate Tab Path
            var tabId = TabController.GetTabByTabPath(tab.PortalID, newTabPath, cultureCode);
            if (tabId != Null.NullInteger && tabId != tab.TabID)
            {
                var existingTab = TabController.Instance.GetTab(tabId, tab.PortalID, false);
                if (existingTab != null && existingTab.IsDeleted)
                    ShowErrorMessage(Localization.GetString("TabRecycled", LocalResourceFile));
                else
                    ShowErrorMessage(Localization.GetString("TabExists", LocalResourceFile));

                valid = false;
            }

            //check whether have conflict between tab path and portal alias.
            if (TabController.IsDuplicateWithPortalAlias(tab.PortalID, newTabPath))
            {
                ShowErrorMessage(Localization.GetString("PathDuplicateWithAlias", LocalResourceFile));
                valid = false;
            }

            return valid;
        }]]></body>
          </codeblock>
        </method>
        <method name="LocalizeControl">
          <declaration><![CDATA[private void LocalizeControl()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1152" sc="9" el="1212" ec="10">Tabs.ascx.cs</location>
            <body hash="311f48fd491b7450b0461424a5488b31"><![CDATA[{
            ctlIcon.ShowFiles = true;
            ctlIcon.ShowImages = true;
            ctlIcon.ShowTabs = false;
            ctlIcon.ShowUrls = false;
            ctlIcon.Required = false;

            ctlIcon.ShowLog = false;
            ctlIcon.ShowNewWindow = false;
            ctlIcon.ShowTrack = false;
            ctlIcon.FileFilter = Globals.glbImageFileTypes;
            ctlIcon.Width = "275px";

            ctlIconLarge.ShowFiles = ctlIcon.ShowFiles;
            ctlIconLarge.ShowImages = ctlIcon.ShowImages;
            ctlIconLarge.ShowTabs = ctlIcon.ShowTabs;
            ctlIconLarge.ShowUrls = ctlIcon.ShowUrls;
            ctlIconLarge.Required = ctlIcon.Required;

            ctlIconLarge.ShowLog = ctlIcon.ShowLog;
            ctlIconLarge.ShowNewWindow = ctlIcon.ShowNewWindow;
            ctlIconLarge.ShowTrack = ctlIcon.ShowTrack;
            ctlIconLarge.FileFilter = ctlIcon.FileFilter;
            ctlIconLarge.Width = ctlIcon.Width;

            ctlPages.ContextMenus[0].Items[0].Text = LocalizeString("ViewPage");
            ctlPages.ContextMenus[0].Items[1].Text = LocalizeString("EditPage");
            ctlPages.ContextMenus[0].Items[2].Text = LocalizeString("DeletePage");
            ctlPages.ContextMenus[0].Items[3].Text = LocalizeString("AddPage");
            ctlPages.ContextMenus[0].Items[4].Text = LocalizeString("HidePage");
            ctlPages.ContextMenus[0].Items[5].Text = LocalizeString("ShowPage");
            ctlPages.ContextMenus[0].Items[6].Text = LocalizeString("EnablePage");
            ctlPages.ContextMenus[0].Items[7].Text = LocalizeString("DisablePage");
            ctlPages.ContextMenus[0].Items[8].Text = LocalizeString("MakeHome");

            lblBulkIntro.Text = LocalizeString("BulkCreateIntro");
            btnBulkCreate.Text = LocalizeString("btnBulkCreate");

            ctlPages.ContextMenus[0].Items[0].ImageUrl = IconView;
            ctlPages.ContextMenus[0].Items[1].ImageUrl = IconEdit;
            ctlPages.ContextMenus[0].Items[2].ImageUrl = IconDelete;
            ctlPages.ContextMenus[0].Items[3].ImageUrl = IconAdd;
            ctlPages.ContextMenus[0].Items[4].ImageUrl = IconPageHidden;
            ctlPages.ContextMenus[0].Items[5].ImageUrl = IconPageHidden;
            ctlPages.ContextMenus[0].Items[6].ImageUrl = IconPageDisabled;
            ctlPages.ContextMenus[0].Items[7].ImageUrl = IconPageDisabled;
            ctlPages.ContextMenus[0].Items[8].ImageUrl = IconHome;

            rblMode.Items[0].Text = LocalizeString("ShowPortalTabs");
            rblMode.Items[1].Text = LocalizeString("ShowHostTabs");

            cmdExpandTree.Text = LocalizeString("ExpandAll");
            lblDisabled.Text = LocalizeString("lblDisabled");
            lblHidden.Text = LocalizeString("lblHidden");
            lblRedirect.Text = LocalizeString("lblRedirect");
            lblHome.Text = LocalizeString("lblHome");
            lblSecure.Text = LocalizeString("lblSecure");
            lblEveryone.Text = LocalizeString("lblEveryone");
            lblRegistered.Text = LocalizeString("lblRegistered");
            lblAdminOnly.Text = LocalizeString("lblAdminOnly");
        }]]></body>
          </codeblock>
        </method>
        <method name="ModuleEditUrl">
          <declaration><![CDATA[public string ModuleEditUrl(int moduleId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1339" sc="9" el="1350" ec="10">Tabs.ascx.cs</location>
            <body hash="d1bbc7864d835671a58b7247ebc65517"><![CDATA[{
            if (IsNumeric(moduleId))
            {
                var module = ModuleController.Instance.GetModule(moduleId, Null.NullInteger, true);
                if (module != null)
                {
                    return ModuleContext.NavigateUrl(module.TabID, "", false, "ctl=Module", "ModuleId=" + moduleId);
                }
            }

            return "#";
        }]]></body>
          </codeblock>
        </method>
        <method name="MoveTab">
          <declaration><![CDATA[private bool MoveTab(TabInfo tab, TabInfo targetTab, Position position)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1215" sc="9" el="1234" ec="10">Tabs.ascx.cs</location>
            <body hash="43547b0aaecb1ee8f85f7c8577c4ac17"><![CDATA[{
            //Validate Tab Path
            if (targetTab == null || !IsValidTabPath(tab, Globals.GenerateTabPath(targetTab.ParentId, tab.TabName)))
            {
                return false;
            }

            switch (position)
            {
                case Position.Above:
                    TabController.Instance.MoveTabBefore(tab, targetTab.TabID);
                    break;
                case Position.Below:
                    TabController.Instance.MoveTabAfter(tab, targetTab.TabID);
                    break;
            }

            ShowSuccessMessage(string.Format(Localization.GetString("TabMoved", LocalResourceFile), tab.TabName));
            return true;
        }]]></body>
          </codeblock>
        </method>
        <method name="MoveTabToParent">
          <declaration><![CDATA[private bool MoveTabToParent(TabInfo tab, TabInfo targetTab)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1237" sc="9" el="1248" ec="10">Tabs.ascx.cs</location>
            <body hash="59be7157b9d863fdf9a177c554c9bd21"><![CDATA[{
            //Validate Tab Path
            if (!IsValidTabPath(tab, Globals.GenerateTabPath((targetTab == null) ? Null.NullInteger : targetTab.TabID, tab.TabName)))
            {
                return false;
            }

            TabController.Instance.MoveTabToParent(tab, (targetTab == null) ? Null.NullInteger : targetTab.TabID);

            ShowSuccessMessage(string.Format(Localization.GetString("TabMoved", LocalResourceFile), tab.TabName));
            return true;
        }]]></body>
          </codeblock>
        </method>
        <method name="OnCreatePagesClick">
          <declaration><![CDATA[protected void OnCreatePagesClick(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="544" sc="9" el="609" ec="10">Tabs.ascx.cs</location>
            <body hash="98c696b790b417bb0d8022b6ae748233"><![CDATA[{
            var parentId = Convert.ToInt32(((LinkButton)sender).CommandArgument);
            var rootTab = TabController.Instance.GetTab(parentId, PortalId, true);
            if (!PortalSecurity.IsInRole(PortalSettings.AdministratorRoleName) && !TabPermissionController.CanAddPage(rootTab))
                return;

            var strValue = txtBulk.Text;
            strValue = strValue.Replace("\r", "\n");
            strValue = strValue.Replace(Environment.NewLine, "\n");
            strValue = strValue.Replace("\n" + "\n", "\n").Trim();

            string invalidType;
            if (!TabController.IsValidTabName(strValue, out invalidType))
            {
                ShowErrorMessage(string.Format(Localization.GetString(invalidType, LocalResourceFile), strValue));
                return;
            }

            var pages = strValue.Split(char.Parse("\n"));
            var tabs = new List<TabInfo>();

            foreach (var strLine in pages)
            {
                tabs.Add(new TabInfo
                            {
                                TabName = TabNameRegex.Replace(strLine, "${1}"),
                                Level = strLine.LastIndexOf(">", StringComparison.Ordinal) + 1
                            });
            }

            var currentIndex = -1;
            foreach (var oTab in tabs)
            {
                currentIndex += 1;

                try
                {
                    if (oTab.Level == 0)
                    {
                        oTab.TabID = CreateTabFromParent(rootTab, oTab.TabName, parentId);
                    }
                    else
                    {
                        var parentTabId = GetParentTabId(tabs, currentIndex, oTab.Level - 1);
                        if (parentTabId != Null.NullInteger)
                        {
                            oTab.TabID = CreateTabFromParent(rootTab, oTab.TabName, parentTabId);
                        }
                    }
                }
                catch (Exception ex)
                {
                    ShowErrorMessage(ex.ToString());
                    //Instrumentation.Logger.Error(ex); --this code shows unexpected results.
                }
            }

            var tabId = Convert.ToInt32(tabs[0].TabID);
            if (tabId == Null.NullInteger)
            {
                tabId = parentId;
            }

            txtBulk.Text = string.Empty;
            BindTreeAndShowTab(tabId);
        }]]></body>
          </codeblock>
        </method>
        <method name="OnExpandTreeClick">
          <declaration><![CDATA[protected void OnExpandTreeClick(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="506" sc="9" el="521" ec="10">Tabs.ascx.cs</location>
            <body hash="5127f00badeb9d4338d2ef1e864a393d"><![CDATA[{
            var btn = (LinkButton)sender;
            if (btn.CommandName.ToLower() == "expand")
            {
                ctlPages.ExpandAllNodes();
                btn.CommandName = "Collapse";
                cmdExpandTree.Text = LocalizeString("CollapseAll");
            }
            else
            {
                ctlPages.CollapseAllNodes();
                ctlPages.Nodes[0].Expanded = true;
                btn.CommandName = "Expand";
                cmdExpandTree.Text = LocalizeString("ExpandAll");
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="229" sc="9" el="251" ec="10">Tabs.ascx.cs</location>
            <body hash="0cba8790876d89d98c39a6b10266587a"><![CDATA[{
            base.OnInit(e);

            cmdCopySkin.Click += CmdCopySkinClick;
            rblMode.SelectedIndexChanged += RblModeSelectedIndexChanged;
            ctlPages.NodeClick += CtlPagesNodeClick;
            ctlPages.ContextMenuItemClick += CtlPagesContextMenuItemClick;
            ctlPages.NodeEdit += CtlPagesNodeEdit;
            ctlPages.EnableDragAndDrop = true;
            ctlPages.EnableDragAndDropBetweenNodes = true;
            ctlPages.NodeDrop += CtlPagesNodeDrop;                
            cmdExpandTree.Click += OnExpandTreeClick;
            grdModules.NeedDataSource += GrdModulesNeedDataSource;
            ctlPages.NodeExpand += CtlPagesNodeExpand;
            btnBulkCreate.Click += OnCreatePagesClick;
            cmdUpdate.Click += CmdUpdateClick;

			JavaScript.RequestRegistration(CommonJs.DnnPlugins);

            JavaScript.RegisterClientReference(Page, ClientAPI.ClientNamespaceReferences.dnn_dom);
            ClientResourceManager.RegisterScript(Page, ClientAPI.ScriptPath + "dnn.controls.js", 14);
            dgPermissions.RegisterScriptsForAjaxPanel();
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="254" sc="9" el="303" ec="10">Tabs.ascx.cs</location>
            <body hash="c15f4c5e9012f2960f07120a02c20703"><![CDATA[{
            base.OnLoad(e);

            try
            {
                if (PortalSettings.Pages < PortalSettings.PageQuota || UserController.Instance.GetCurrentUserInfo().IsSuperUser || PortalSettings.PageQuota == 0)
                {
                    btnBulkCreate.Enabled = true;
                }
                else
                {
                    btnBulkCreate.Enabled = false;
                    btnBulkCreate.ToolTip = Localization.GetString("ExceededQuota", LocalResourceFile);
                }
                CheckSecurity();
                pnlHost.Visible = UserInfo.IsSuperUser;

                // If this is the first visit to the page, bind the tab data to the page listbox
                if (Page.IsPostBack == false)
                {
                    LocalizeControl();
                    BindSkinsAndContainers();

                    if (!(string.IsNullOrEmpty(Request.QueryString["isHost"])))
                    {
                        if (bool.Parse(Request.QueryString["isHost"]))
                        {
                            rblMode.SelectedValue = "H";
                        }
                    }
                    BindTree();

                    if(!string.IsNullOrEmpty(Request.QueryString["edittabid"]))
                    {
                        var tabId = Request.QueryString["edittabid"];
                        var node = ctlPages.FindNodeByValue(tabId);
                        if(node != null)
                        {
                            node.Selected = true;
                            node.ExpandParentNodes();
                            CtlPagesNodeClick(ctlPages, new RadTreeNodeEventArgs(node));
                        }
                    }
                }
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="PerformDragAndDrop">
          <declaration><![CDATA[private void PerformDragAndDrop(RadTreeViewDropPosition dropPosition, RadTreeNode sourceNode, RadTreeNode destNode)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1251" sc="9" el="1282" ec="10">Tabs.ascx.cs</location>
            <body hash="69bd24e9d25c62e285b259fb73c46cdb"><![CDATA[{
            var sourceTab = TabController.Instance.GetTab(int.Parse(sourceNode.Value), PortalId, false);
            var targetTab = TabController.Instance.GetTab(int.Parse(destNode.Value), PortalId, false);

            switch (dropPosition)
            {
                case RadTreeViewDropPosition.Over:
                    if (!(sourceNode.IsAncestorOf(destNode)))
                    {
                        if (MoveTabToParent(sourceTab, targetTab))
                        {
                            sourceNode.Owner.Nodes.Remove(sourceNode);
                            destNode.Nodes.Add(sourceNode);
                        }
                    }
                    break;
                case RadTreeViewDropPosition.Above:
                    if (MoveTab(sourceTab, targetTab, Position.Above))
                    {
                        sourceNode.Owner.Nodes.Remove(sourceNode);
                        destNode.InsertBefore(sourceNode);
                    }
                    break;
                case RadTreeViewDropPosition.Below:
                    if (MoveTab(sourceTab, targetTab, Position.Below))
                    {
                        sourceNode.Owner.Nodes.Remove(sourceNode);
                        destNode.InsertAfter(sourceNode);
                    }
                    break;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="RblModeSelectedIndexChanged">
          <declaration><![CDATA[protected void RblModeSelectedIndexChanged(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="320" sc="9" el="322" ec="10">Tabs.ascx.cs</location>
            <body hash="913904872525d6d124a6ffc47fa8c0cf"><![CDATA[{
            BindTree();
        }]]></body>
          </codeblock>
        </method>
        <method name="ShowErrorMessage">
          <declaration><![CDATA[private void ShowErrorMessage(string message)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1547" sc="9" el="1549" ec="10">Tabs.ascx.cs</location>
            <body hash="9669b2996ba88af8fe698c8e476bd306"><![CDATA[{
            Skin.AddModuleMessage(this, message, ModuleMessage.ModuleMessageType.RedError);
        }]]></body>
          </codeblock>
        </method>
        <method name="ShowPermissions">
          <declaration><![CDATA[private void ShowPermissions(bool show)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1285" sc="9" el="1287" ec="10">Tabs.ascx.cs</location>
            <body hash="2b3e4854a15e042a940eaa7b98db7928"><![CDATA[{
            PermissionsSection.Visible = show;
        }]]></body>
          </codeblock>
        </method>
        <method name="ShowSuccessMessage">
          <declaration><![CDATA[private void ShowSuccessMessage(string message)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1552" sc="9" el="1554" ec="10">Tabs.ascx.cs</location>
            <body hash="5590e5024ba258da32f5f167633bf507"><![CDATA[{
            Skin.AddModuleMessage(this, message, ModuleMessage.ModuleMessageType.GreenSuccess);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="btnBulkCreate">
          <declaration><![CDATA[protected LinkButton btnBulkCreate;]]></declaration>
          <documentation>
            <summary>
 btnBulkCreate control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="bulkPagesLabel">
          <declaration><![CDATA[protected UserControl bulkPagesLabel;]]></declaration>
          <documentation>
            <summary>
 bulkPagesLabel control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="chkAllowIndex">
          <declaration><![CDATA[protected CheckBox chkAllowIndex;]]></declaration>
          <documentation>
            <summary>
 chkAllowIndex control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="chkDisabled">
          <declaration><![CDATA[protected CheckBox chkDisabled;]]></declaration>
          <documentation>
            <summary>
 chkDisabled control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="chkPermanentRedirect">
          <declaration><![CDATA[protected CheckBox chkPermanentRedirect;]]></declaration>
          <documentation>
            <summary>
 chkPermanentRedirect control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="chkSecure">
          <declaration><![CDATA[protected CheckBox chkSecure;]]></declaration>
          <documentation>
            <summary>
 chkSecure control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="chkVisible">
          <declaration><![CDATA[protected CheckBox chkVisible;]]></declaration>
          <documentation>
            <summary>
 chkVisible control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="cmdCopySkin">
          <declaration><![CDATA[protected LinkButton cmdCopySkin;]]></declaration>
          <documentation>
            <summary>
 cmdCopySkin control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="cmdExpandTree">
          <declaration><![CDATA[protected LinkButton cmdExpandTree;]]></declaration>
          <documentation>
            <summary>
 cmdExpandTree control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="cmdMore">
          <declaration><![CDATA[protected HyperLink cmdMore;]]></declaration>
          <documentation>
            <summary>
 cmdMore control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="cmdUpdate">
          <declaration><![CDATA[protected LinkButton cmdUpdate;]]></declaration>
          <documentation>
            <summary>
 cmdUpdate control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="ctlContext">
          <declaration><![CDATA[protected DnnTreeViewContextMenu ctlContext;]]></declaration>
          <documentation>
            <summary>
 ctlContext control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="ctlIcon">
          <declaration><![CDATA[protected DnnUrlControl ctlIcon;]]></declaration>
          <documentation>
            <summary>
 ctlIcon control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="ctlIconLarge">
          <declaration><![CDATA[protected DnnUrlControl ctlIconLarge;]]></declaration>
          <documentation>
            <summary>
 ctlIconLarge control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="ctlPages">
          <declaration><![CDATA[protected DnnTreeView ctlPages;]]></declaration>
          <documentation>
            <summary>
 ctlPages control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="ctlURL">
          <declaration><![CDATA[protected DnnUrlControl ctlURL;]]></declaration>
          <documentation>
            <summary>
 ctlURL control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="DefaultPageTemplate">
          <declaration><![CDATA[private const string DefaultPageTemplate = "Default.page.template";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="dgPermissions">
          <declaration><![CDATA[protected TabPermissionsGrid dgPermissions;]]></declaration>
          <documentation>
            <summary>
 dgPermissions control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="drpContainer">
          <declaration><![CDATA[protected DnnSkinComboBox drpContainer;]]></declaration>
          <documentation>
            <summary>
 drpContainer control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="drpSkin">
          <declaration><![CDATA[protected DnnSkinComboBox drpSkin;]]></declaration>
          <documentation>
            <summary>
 drpSkin control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="grdModules">
          <declaration><![CDATA[protected DnnGrid grdModules;]]></declaration>
          <documentation>
            <summary>
 grdModules control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="lblAdminOnly">
          <declaration><![CDATA[protected Literal lblAdminOnly;]]></declaration>
          <documentation>
            <summary>
 lblAdminOnly control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="lblAllowIndex">
          <declaration><![CDATA[protected UserControl lblAllowIndex;]]></declaration>
          <documentation>
            <summary>
 lblAllowIndex control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="lblBulkIntro">
          <declaration><![CDATA[protected Literal lblBulkIntro;]]></declaration>
          <documentation>
            <summary>
 lblBulkIntro control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="lblContainer">
          <declaration><![CDATA[protected UserControl lblContainer;]]></declaration>
          <documentation>
            <summary>
 lblContainer control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="lblDescription">
          <declaration><![CDATA[protected UserControl lblDescription;]]></declaration>
          <documentation>
            <summary>
 lblDescription control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="lblDisabled">
          <declaration><![CDATA[protected Literal lblDisabled;]]></declaration>
          <documentation>
            <summary>
 lblDisabled control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="lblDisabledPage">
          <declaration><![CDATA[protected UserControl lblDisabledPage;]]></declaration>
          <documentation>
            <summary>
 lblDisabledPage control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="lblEveryone">
          <declaration><![CDATA[protected Literal lblEveryone;]]></declaration>
          <documentation>
            <summary>
 lblEveryone control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="lblHidden">
          <declaration><![CDATA[protected Literal lblHidden;]]></declaration>
          <documentation>
            <summary>
 lblHidden control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="lblHome">
          <declaration><![CDATA[protected Literal lblHome;]]></declaration>
          <documentation>
            <summary>
 lblHome control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="lblHostOnly">
          <declaration><![CDATA[protected Label lblHostOnly;]]></declaration>
          <documentation>
            <summary>
 lblHostOnly control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="lblIconLarge">
          <declaration><![CDATA[protected UserControl lblIconLarge;]]></declaration>
          <documentation>
            <summary>
 lblIconLarge control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="lblIconSmall">
          <declaration><![CDATA[protected UserControl lblIconSmall;]]></declaration>
          <documentation>
            <summary>
 lblIconSmall control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="lblKeywords">
          <declaration><![CDATA[protected UserControl lblKeywords;]]></declaration>
          <documentation>
            <summary>
 lblKeywords control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="lblLegend">
          <declaration><![CDATA[protected Label lblLegend;]]></declaration>
          <documentation>
            <summary>
 lblLegend control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="lblMetaHead">
          <declaration><![CDATA[protected UserControl lblMetaHead;]]></declaration>
          <documentation>
            <summary>
 lblMetaHead control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="lblMetaRefresh">
          <declaration><![CDATA[protected UserControl lblMetaRefresh;]]></declaration>
          <documentation>
            <summary>
 lblMetaRefresh control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="lblName">
          <declaration><![CDATA[protected UserControl lblName;]]></declaration>
          <documentation>
            <summary>
 lblName control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="lblPageSSL">
          <declaration><![CDATA[protected UserControl lblPageSSL;]]></declaration>
          <documentation>
            <summary>
 lblPageSSL control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="lblPermanentRedirect">
          <declaration><![CDATA[protected UserControl lblPermanentRedirect;]]></declaration>
          <documentation>
            <summary>
 lblPermanentRedirect control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="lblRedirect">
          <declaration><![CDATA[protected Literal lblRedirect;]]></declaration>
          <documentation>
            <summary>
 lblRedirect control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="lblRegistered">
          <declaration><![CDATA[protected Literal lblRegistered;]]></declaration>
          <documentation>
            <summary>
 lblRegistered control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="lblSecure">
          <declaration><![CDATA[protected Literal lblSecure;]]></declaration>
          <documentation>
            <summary>
 lblSecure control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="lblSitemapPriority">
          <declaration><![CDATA[protected UserControl lblSitemapPriority;]]></declaration>
          <documentation>
            <summary>
 lblSitemapPriority control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="lblSkin">
          <declaration><![CDATA[protected UserControl lblSkin;]]></declaration>
          <documentation>
            <summary>
 lblSkin control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="lblTags">
          <declaration><![CDATA[protected UserControl lblTags;]]></declaration>
          <documentation>
            <summary>
 lblTags control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="lblTitle">
          <declaration><![CDATA[protected UserControl lblTitle;]]></declaration>
          <documentation>
            <summary>
 lblTitle control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="lblUrl">
          <declaration><![CDATA[protected UserControl lblUrl;]]></declaration>
          <documentation>
            <summary>
 lblUrl control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="lblVisible">
          <declaration><![CDATA[protected UserControl lblVisible;]]></declaration>
          <documentation>
            <summary>
 lblVisible control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="PermissionsSection">
          <declaration><![CDATA[protected HtmlGenericControl PermissionsSection;]]></declaration>
          <documentation>
            <summary>
 PermissionsSection control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="pnlBulk">
          <declaration><![CDATA[protected HtmlGenericControl pnlBulk;]]></declaration>
          <documentation>
            <summary>
 pnlBulk control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="pnlDetails">
          <declaration><![CDATA[protected HtmlGenericControl pnlDetails;]]></declaration>
          <documentation>
            <summary>
 pnlDetails control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="pnlHost">
          <declaration><![CDATA[protected Panel pnlHost;]]></declaration>
          <documentation>
            <summary>
 pnlHost control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="RadScriptBlock1">
          <declaration><![CDATA[protected DnnScriptBlock RadScriptBlock1;]]></declaration>
          <documentation>
            <summary>
 RadScriptBlock1 control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="rblMode">
          <declaration><![CDATA[protected RadioButtonList rblMode;]]></declaration>
          <documentation>
            <summary>
 rblMode control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="TabNameRegex">
          <declaration><![CDATA[private static readonly Regex TabNameRegex = new Regex(">*(.*)", RegexOptions.Compiled);]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="termsSelector">
          <declaration><![CDATA[protected TermsSelector termsSelector;]]></declaration>
          <documentation>
            <summary>
 termsSelector control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="txtBulk">
          <declaration><![CDATA[protected TextBox txtBulk;]]></declaration>
          <documentation>
            <summary>
 txtBulk control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="txtDescription">
          <declaration><![CDATA[protected TextBox txtDescription;]]></declaration>
          <documentation>
            <summary>
 txtDescription control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="txtKeywords">
          <declaration><![CDATA[protected TextBox txtKeywords;]]></declaration>
          <documentation>
            <summary>
 txtKeywords control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="txtMeta">
          <declaration><![CDATA[protected TextBox txtMeta;]]></declaration>
          <documentation>
            <summary>
 txtMeta control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="txtName">
          <declaration><![CDATA[protected TextBox txtName;]]></declaration>
          <documentation>
            <summary>
 txtName control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="txtRefresh">
          <declaration><![CDATA[protected TextBox txtRefresh;]]></declaration>
          <documentation>
            <summary>
 txtRefresh control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="txtSitemapPriority">
          <declaration><![CDATA[protected TextBox txtSitemapPriority;]]></declaration>
          <documentation>
            <summary>
 txtSitemapPriority control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="txtTitle">
          <declaration><![CDATA[protected TextBox txtTitle;]]></declaration>
          <documentation>
            <summary>
 txtTitle control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="val2">
          <declaration><![CDATA[protected RequiredFieldValidator val2;]]></declaration>
          <documentation>
            <summary>
 val2 control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="valName">
          <declaration><![CDATA[protected RequiredFieldValidator valName;]]></declaration>
          <documentation>
            <summary>
 valName control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="valRefresh">
          <declaration><![CDATA[protected RegularExpressionValidator valRefresh;]]></declaration>
          <documentation>
            <summary>
 valRefresh control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
      </fields>
      <properties>
        <property name="AdminOnlyIcon">
          <declaration><![CDATA[private string AdminOnlyIcon]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="93" sc="13" el="95" ec="14">Tabs.ascx.cs</location>
            <body hash="87c979b3b0680353b7c29bca369f54a7"><![CDATA[{
                return TemplateSourceDirectory + "/images/Icon_UserAdmin.png";
            }]]></body>
          </codeblock>
        </property>
        <property name="AllUsersIcon">
          <declaration><![CDATA[private string AllUsersIcon]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="85" sc="13" el="87" ec="14">Tabs.ascx.cs</location>
            <body hash="8d43ae8cfcbc635413e0e53876890f11"><![CDATA[{
                return TemplateSourceDirectory + "/images/Icon_Everyone.png";
            }]]></body>
          </codeblock>
        </property>
        <property name="IconAdd">
          <declaration><![CDATA[private string IconAdd]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="101" sc="13" el="103" ec="14">Tabs.ascx.cs</location>
            <body hash="3ed7ff6a9e7fe25258093b5b22eb724f"><![CDATA[{
                return TemplateSourceDirectory + "/images/Icon_Add.png";
            }]]></body>
          </codeblock>
        </property>
        <property name="IconDelete">
          <declaration><![CDATA[private string IconDelete]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="109" sc="13" el="111" ec="14">Tabs.ascx.cs</location>
            <body hash="1ddd1a6a959692cd379f9c90b6279f48"><![CDATA[{
                return TemplateSourceDirectory + "/images/Icon_Delete.png";
            }]]></body>
          </codeblock>
        </property>
        <property name="IconDown">
          <declaration><![CDATA[private string IconDown]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="117" sc="13" el="119" ec="14">Tabs.ascx.cs</location>
            <body hash="68b6a36bef062bc0654076c84fecd30f"><![CDATA[{
                return TemplateSourceDirectory + "/images/Icon_Down.png";
            }]]></body>
          </codeblock>
        </property>
        <property name="IconEdit">
          <declaration><![CDATA[private string IconEdit]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="125" sc="13" el="127" ec="14">Tabs.ascx.cs</location>
            <body hash="892f42b5a84b18aa06480c73de1fd109"><![CDATA[{
                return TemplateSourceDirectory + "/images/Icon_Edit.png";
            }]]></body>
          </codeblock>
        </property>
        <property name="IconHome">
          <declaration><![CDATA[private string IconHome]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="133" sc="13" el="135" ec="14">Tabs.ascx.cs</location>
            <body hash="cedc5127522fe08f371aa50731c99260"><![CDATA[{
                return TemplateSourceDirectory + "/images/Icon_Home.png";
            }]]></body>
          </codeblock>
        </property>
        <property name="IconPageDisabled">
          <declaration><![CDATA[private string IconPageDisabled]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="141" sc="13" el="143" ec="14">Tabs.ascx.cs</location>
            <body hash="2b91cba980dfbb03ca4e1b02d9037a4e"><![CDATA[{
                return TemplateSourceDirectory + "/images/Icon_Disabled.png";
            }]]></body>
          </codeblock>
        </property>
        <property name="IconPageHidden">
          <declaration><![CDATA[private string IconPageHidden]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="149" sc="13" el="151" ec="14">Tabs.ascx.cs</location>
            <body hash="e251197c7232383a9a9d60c1b39a807e"><![CDATA[{
                return TemplateSourceDirectory + "/images/Icon_Hidden.png";
            }]]></body>
          </codeblock>
        </property>
        <property name="IconPortal">
          <declaration><![CDATA[private string IconPortal]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="157" sc="13" el="159" ec="14">Tabs.ascx.cs</location>
            <body hash="6e8278acbbf4b115daba36e243fd8514"><![CDATA[{
                return TemplateSourceDirectory + "/images/Icon_Portal.png";
            }]]></body>
          </codeblock>
        </property>
        <property name="IconRedirect">
          <declaration><![CDATA[private string IconRedirect]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="197" sc="13" el="199" ec="14">Tabs.ascx.cs</location>
            <body hash="21ea37cb00a7384b5a55c9901cd49254"><![CDATA[{
                return ResolveUrl("~/DesktopModules/Admin/Tabs/images/Icon_Redirect.png");
            }]]></body>
          </codeblock>
        </property>
        <property name="IconUp">
          <declaration><![CDATA[private string IconUp]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="165" sc="13" el="167" ec="14">Tabs.ascx.cs</location>
            <body hash="5f1d41aa470a4c5214faf65618ba341d"><![CDATA[{
                return TemplateSourceDirectory + "/images/Icon_Up.png";
            }]]></body>
          </codeblock>
        </property>
        <property name="IconView">
          <declaration><![CDATA[private string IconView]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="173" sc="13" el="175" ec="14">Tabs.ascx.cs</location>
            <body hash="c81d9c94fe07993b4c3fb8065e9622f4"><![CDATA[{
                return TemplateSourceDirectory + "/images/Icon_View.png";
            }]]></body>
          </codeblock>
        </property>
        <property name="RegisteredUsersIcon">
          <declaration><![CDATA[private string RegisteredUsersIcon]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="181" sc="13" el="183" ec="14">Tabs.ascx.cs</location>
            <body hash="d7c020e8070cda6c7b6fae14c21b6813"><![CDATA[{
                return TemplateSourceDirectory + "/images/Icon_User.png";
            }]]></body>
          </codeblock>
        </property>
        <property name="SecuredIcon">
          <declaration><![CDATA[private string SecuredIcon]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="189" sc="13" el="191" ec="14">Tabs.ascx.cs</location>
            <body hash="15e6d31d249b7ba3cdca995f3db838b4"><![CDATA[{
                return TemplateSourceDirectory + "/images/Icon_UserSecure.png";
            }]]></body>
          </codeblock>
        </property>
        <property name="SelectedNode">
          <declaration><![CDATA[private string SelectedNode]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="205" sc="13" el="207" ec="14">Tabs.ascx.cs</location>
            <body hash="998b4ca7a37e46d6c54a62c8c4077b1f"><![CDATA[{
                return (string)ViewState["SelectedNode"];
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="209" sc="13" el="211" ec="14">Tabs.ascx.cs</location>
            <body hash="7caf0b2e7be40df1472fb1997543eec8"><![CDATA[{
                ViewState["SelectedNode"] = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="Tabs">
          <declaration><![CDATA[protected List<TabInfo> Tabs]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="217" sc="13" el="221" ec="14">Tabs.ascx.cs</location>
            <body hash="38afbfb6faeb8e525c5e8a5d203e5c0a"><![CDATA[{
                var portalId = rblMode.SelectedValue == "H" ? Null.NullInteger : PortalId;
                return TabController.GetPortalTabs(portalId, Null.NullInteger, false, true, false, true)
                    .Where(tab => !tab.IsSystem).ToList();
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="Dnn.Modules.Tabs.Components">
    <class name="TabsController">
      <declaration><![CDATA[public class TabsController : IUpgradeable]]></declaration>
      <documentation>
        <summary>

 </summary>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public TabsController()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="UpgradeModule">
          <declaration><![CDATA[public string UpgradeModule(string version)]]></declaration>
          <documentation>
            <summary>

 </summary>
 <param name="version"></param>
 <returns></returns></documentation>
          <codeblock>
            <location sl="40" sc="9" el="60" ec="10">Components\TabsController.cs</location>
            <body hash="20996aaa60a793e069668f9789a2c6a1"><![CDATA[{
            try
            {
                switch (version)
                {
                    case "08.00.00":
                        var moduleDefinition = ModuleDefinitionController.GetModuleDefinitionByFriendlyName("Tabs");
                        if (moduleDefinition != null)
                        {
                            new ModuleDefinitionController().DeleteModuleDefinition(moduleDefinition.ModuleDefID);
                        }

                        break;
                }
                return "Success";
            }
            catch (Exception)
            {
                return "Failed";
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
</root>