<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<root file="DotNetNuke.Modules.CoreMessaging.dll" version="06.02.06" generated="2017-06-18 22:36:13Z" generationTime="1.8035659">
  <namespace name="DotNetNuke.Modules.CoreMessaging">
    <class name="View">
      <declaration><![CDATA[public class View : PortalModuleBase]]></declaration>
      <documentation>-----------------------------------------------------------------------------
 <summary>
 The View class displays the content
 </summary>
 -----------------------------------------------------------------------------</documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public View()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="AddIe7StyleSheet">
          <declaration><![CDATA[private void AddIe7StyleSheet()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="111" sc="9" el="118" ec="10">View.ascx.cs</location>
            <body hash="c30c4061e5e913e8822c126dad54b385"><![CDATA[{
            var browser = Request.Browser;
            if (browser.Type == "IE" || browser.MajorVersion < 8)
            {
                const string cssLink = "<link href=\"/ie-messages.css\" rel=\"stylesheet\" type=\"text/css\" />";
                Page.Header.Controls.Add(new LiteralControl(cssLink));
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="79" sc="9" el="104" ec="10">View.ascx.cs</location>
            <body hash="9da77afb3d9288ff55fc0889d0dc7f6a"><![CDATA[{
            if (!Request.IsAuthenticated)
            {
                // Do not redirect but hide the content of the module and display a message.
                CoreMessagingContainer.Visible = false;
                UI.Skins.Skin.AddModuleMessage(this, Localization.GetString("ContentNotAvailable", LocalResourceFile), ModuleMessage.ModuleMessageType.YellowWarning);
                return;
            }
            if (UserId != ProfileUserId && (PortalSettings.ActiveTab.ParentId == PortalSettings.UserTabId || TabId == PortalSettings.UserTabId))
            {
                Response.Redirect(Globals.NavigateURL(ModuleContext.PortalSettings.ActiveTab.TabID, "", "UserId=" + ModuleContext.PortalSettings.UserId.ToString(CultureInfo.InvariantCulture)));
            }
            
            if (IsEditable && PermissionsNotProperlySet())
            {
                UI.Skins.Skin.AddModuleMessage(this, Localization.GetString("PermissionsNotProperlySet", LocalResourceFile), ModuleMessage.ModuleMessageType.YellowWarning);
            }

            ServicesFramework.Instance.RequestAjaxScriptSupport();
            ServicesFramework.Instance.RequestAjaxAntiForgerySupport();
            jQuery.RequestDnnPluginsRegistration();
            ClientResourceManager.RegisterScript(Page, "~/DesktopModules/CoreMessaging/Scripts/CoreMessaging.js");
            jQuery.RequestDnnPluginsRegistration();
            AddIe7StyleSheet();
            base.OnInit(e);
        }]]></body>
          </codeblock>
        </method>
        <method name="PermissionPredicate">
          <declaration><![CDATA[private static bool PermissionPredicate(PermissionInfoBase p)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="138" sc="9" el="140" ec="10">View.ascx.cs</location>
            <body hash="bcc5123f2e95cd9dc4453be8693fb844"><![CDATA[{
            return p.PermissionKey == "VIEW" && p.AllowAccess && (p.RoleName == Globals.glbRoleAllUsersName || p.RoleName == Globals.glbRoleUnauthUserName);
        }]]></body>
          </codeblock>
        </method>
        <method name="PermissionsNotProperlySet">
          <declaration><![CDATA[private bool PermissionsNotProperlySet()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="121" sc="9" el="135" ec="10">View.ascx.cs</location>
            <body hash="811a83c483f13a23f8301f3549d04e48"><![CDATA[{
            List<PermissionInfoBase> permissions;

            if (ModuleConfiguration.InheritViewPermissions)
            {
                var tabPermissionCollection = TabPermissionController.GetTabPermissions(TabId, PortalId);
                permissions = tabPermissionCollection.ToList();
            }
            else
            {
                permissions = ModuleConfiguration.ModulePermissions.ToList();
            }

            return permissions.Find(PermissionPredicate) != null;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="coreMessaging">
          <declaration><![CDATA[protected HtmlGenericControl coreMessaging;]]></declaration>
          <documentation>
            <summary>
 coreMessaging control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="CoreMessagingContainer">
          <declaration><![CDATA[protected Panel CoreMessagingContainer;]]></declaration>
          <documentation>
            <summary>
 CoreMessagingContainer control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="DnnCssInclude1">
          <declaration><![CDATA[protected DnnCssInclude DnnCssInclude1;]]></declaration>
          <documentation>
            <summary>
 DnnCssInclude1 control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="DnnCssInclude2">
          <declaration><![CDATA[protected DnnCssInclude DnnCssInclude2;]]></declaration>
          <documentation>
            <summary>
 DnnCssInclude2 control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="DnnCssInclude3">
          <declaration><![CDATA[protected DnnCssInclude DnnCssInclude3;]]></declaration>
          <documentation>
            <summary>
 DnnCssInclude3 control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="DnnJsInclude1">
          <declaration><![CDATA[protected DnnJsInclude DnnJsInclude1;]]></declaration>
          <documentation>
            <summary>
 DnnJsInclude1 control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="DnnJsInclude2">
          <declaration><![CDATA[protected DnnJsInclude DnnJsInclude2;]]></declaration>
          <documentation>
            <summary>
 DnnJsInclude2 control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="DnnJsInclude3">
          <declaration><![CDATA[protected DnnJsInclude DnnJsInclude3;]]></declaration>
          <documentation>
            <summary>
 DnnJsInclude3 control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="DnnJsInclude4">
          <declaration><![CDATA[protected DnnJsInclude DnnJsInclude4;]]></declaration>
          <documentation>
            <summary>
 DnnJsInclude4 control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="DnnJsInclude5">
          <declaration><![CDATA[protected DnnJsInclude DnnJsInclude5;]]></declaration>
          <documentation>
            <summary>
 DnnJsInclude5 control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
      </fields>
      <properties>
        <property name="ProfileUserId">
          <declaration><![CDATA[public int ProfileUserId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="55" sc="13" el="62" ec="14">View.ascx.cs</location>
            <body hash="b54f995526c72617c67516af9667b32c"><![CDATA[{
                var userId = Null.NullInteger;
                if (!string.IsNullOrEmpty(Request.Params["UserId"]))
                {
                    userId = Int32.Parse(Request.Params["UserId"]);
                }
                return userId;
            }]]></body>
          </codeblock>
        </property>
        <property name="ShowAttachments">
          <declaration><![CDATA[public string ShowAttachments]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="68" sc="13" el="71" ec="14">View.ascx.cs</location>
            <body hash="a7d4ca3223aa4bdc8b710bf4688f7263"><![CDATA[{
                var allowAttachments = PortalController.GetPortalSetting("MessagingAllowAttachments", PortalId, "NO");
                return allowAttachments == "NO" ? "false" : "true";
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="DotNetNuke.Modules.CoreMessaging.Components">
    <class name="CoreMessagingBusinessController">
      <declaration><![CDATA[public class CoreMessagingBusinessController : IUpgradeable]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public CoreMessagingBusinessController()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="UpgradeModule">
          <declaration><![CDATA[public string UpgradeModule(string Version)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="42" sc="9" el="91" ec="10">Components\CoreMessagingBusinessController.cs</location>
            <body hash="e761e6f6dd8a729e85ec7917f7eed92d"><![CDATA[{
            try
            {
                switch (Version)
                {
                    case "06.02.00":
                        var portalController = new PortalController();
                        var moduleController = new ModuleController();
                        var tabController = new TabController();

                        var moduleDefinition = ModuleDefinitionController.GetModuleDefinitionByFriendlyName("Message Center");
                        if (moduleDefinition != null)
                        {
                            var portals = portalController.GetPortals();
                            foreach (PortalInfo portal in portals)
                            {
                                if (portal.UserTabId > Null.NullInteger)
                                {
                                    //Find TabInfo
                                    var tab = tabController.GetTab(portal.UserTabId, portal.PortalID, true);
                                    if (tab != null)
                                    {
                                        foreach (var module in moduleController.GetTabModules(portal.UserTabId).Values)
                                        {
                                            if (module.DesktopModule.FriendlyName == "Messaging")
                                            {
                                                //Delete the Module from the Modules list
                                                moduleController.DeleteTabModule(module.TabID, module.ModuleID, false);

                                                //Add new module to the page
                                                Upgrade.AddModuleToPage(tab, moduleDefinition.ModuleDefID, "Message Center", "", true);

                                                break;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        break;
                }
                return "Success";
            }
            catch (Exception exc)
            {
                DnnLog.Error(exc);

                return "Failed";
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="DotNetNuke.Modules.CoreMessaging.Services">
    <class name="CoreMessagingRouteMapper">
      <declaration><![CDATA[public sealed class CoreMessagingRouteMapper : IServiceRouteMapper]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public CoreMessagingRouteMapper()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="RegisterRoutes">
          <declaration><![CDATA[public void RegisterRoutes(IMapRoute mapRouteManager)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="37" sc="9" el="40" ec="10">Services\CoreMessagingRouteMapper.cs</location>
            <body hash="c5f9da67e251b0529c3019561e9bc7c2"><![CDATA[{
            mapRouteManager.MapRoute("CoreMessaging", "{controller}.ashx/{action}",
                                     new[] { "DotNetNuke.Modules.CoreMessaging.Services" });
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="MessagingServiceController">
      <declaration><![CDATA[public class MessagingServiceController : DnnController]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public MessagingServiceController()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="Archived">
          <declaration><![CDATA[public ActionResult Archived(int afterMessageId, int numberOfRecords)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="88" sc="9" el="103" ec="10">Services\MessagingServiceController.cs</location>
            <body hash="e0aa3213ac1eee5dbc91a4017676f9bd"><![CDATA[{
            try
            {
                var messageBoxView = InternalMessagingController.Instance.GetArchivedMessages(UserInfo.UserID, afterMessageId, numberOfRecords);
                var portalId = PortalController.GetEffectivePortalId(UserController.GetCurrentUserInfo().PortalID);
                messageBoxView.TotalNewThreads = InternalMessagingController.Instance.CountUnreadMessages(UserInfo.UserID, portalId);
                messageBoxView.TotalConversations = InternalMessagingController.Instance.CountArchivedMessages(UserInfo.UserID, portalId);

                return Json(messageBoxView, JsonRequestBehavior.AllowGet);
            }
            catch (Exception exc)
            {
                DnnLog.Error(exc);
                return Json(null, JsonRequestBehavior.AllowGet);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="CountNotifications">
          <declaration><![CDATA[public ActionResult CountNotifications()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="279" sc="9" el="291" ec="10">Services\MessagingServiceController.cs</location>
            <body hash="a061e4c335f234b8942521d772b85a50"><![CDATA[{
            try
            {
                var portalId = PortalController.GetEffectivePortalId(UserController.GetCurrentUserInfo().PortalID);
                var notifications = NotificationsController.Instance.CountNotifications(UserInfo.UserID, portalId);
                return Json(notifications, JsonRequestBehavior.AllowGet);
            }
            catch (Exception exc)
            {
                DnnLog.Error(exc);
                return Json(null, JsonRequestBehavior.AllowGet);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="CountUnreadMessages">
          <declaration><![CDATA[public ActionResult CountUnreadMessages()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="294" sc="9" el="306" ec="10">Services\MessagingServiceController.cs</location>
            <body hash="e5e8809d42795750c4a9bcb567f1bebc"><![CDATA[{
            try
            {
                var portalId = PortalController.GetEffectivePortalId(UserController.GetCurrentUserInfo().PortalID);
                var unreadMessages = InternalMessagingController.Instance.CountUnreadMessages(UserInfo.UserID, portalId);
                return Json(unreadMessages, JsonRequestBehavior.AllowGet);
            }
            catch (Exception exc)
            {
                DnnLog.Error(exc);
                return Json(null, JsonRequestBehavior.AllowGet);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetTotals">
          <declaration><![CDATA[public ActionResult GetTotals()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="309" sc="9" el="326" ec="10">Services\MessagingServiceController.cs</location>
            <body hash="35535413c76589fc286fae8e538935c0"><![CDATA[{
            try
            {
                var portalId = PortalController.GetEffectivePortalId(UserController.GetCurrentUserInfo().PortalID);
                var totalsViewModel = new TotalsViewModel
                {
                    TotalUnreadMessages = InternalMessagingController.Instance.CountUnreadMessages(UserInfo.UserID, portalId),
                    TotalNotifications = NotificationsController.Instance.CountNotifications(UserInfo.UserID, portalId)
                };

                return Json(totalsViewModel, JsonRequestBehavior.AllowGet);
            }
            catch (Exception exc)
            {
                DnnLog.Error(exc);
                return Json(null, JsonRequestBehavior.AllowGet);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="Inbox">
          <declaration><![CDATA[public ActionResult Inbox(int afterMessageId, int numberOfRecords)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="51" sc="9" el="67" ec="10">Services\MessagingServiceController.cs</location>
            <body hash="60563123dfc250ee13a056a5938dffde"><![CDATA[{
            try
            {
                var messageBoxView = InternalMessagingController.Instance.GetRecentInbox(UserInfo.UserID, afterMessageId, numberOfRecords);
                var portalId = PortalController.GetEffectivePortalId(UserController.GetCurrentUserInfo().PortalID);

                messageBoxView.TotalNewThreads = InternalMessagingController.Instance.CountUnreadMessages(UserInfo.UserID, portalId);
                messageBoxView.TotalConversations = InternalMessagingController.Instance.CountConversations(UserInfo.UserID, portalId);

                return Json(messageBoxView, JsonRequestBehavior.AllowGet);
            }
            catch (Exception exc)
            {
                DnnLog.Error(exc);
                return Json(null, JsonRequestBehavior.AllowGet);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="LocalizeActionString">
          <declaration><![CDATA[private string LocalizeActionString(string key, int desktopModuleId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="333" sc="9" el="355" ec="10">Services\MessagingServiceController.cs</location>
            <body hash="8494e791d8c31bd5cbe655f4f6259639"><![CDATA[{
            if (string.IsNullOrEmpty(key)) return "";

            string actionString;

            if (desktopModuleId > 0)
            {
                var desktopModule = DesktopModuleController.GetDesktopModule(desktopModuleId, PortalSettings.PortalId);

                var resourceFile = string.Format("~/DesktopModules/{0}/{1}/{2}",
                    desktopModule.FolderName.Replace("\\", "/"),
                    Localization.LocalResourceDirectory,
                    Localization.LocalSharedResourceFile);

                actionString = Localization.GetString(key, resourceFile);
            }
            else
            {
                actionString = Localization.GetString(key);
            }

            return string.IsNullOrEmpty(actionString) ? key : actionString;
        }]]></body>
          </codeblock>
        </method>
        <method name="MarkArchived">
          <declaration><![CDATA[public ActionResult MarkArchived(int conversationId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="151" sc="9" el="162" ec="10">Services\MessagingServiceController.cs</location>
            <body hash="04147b67392624633b56a20eb3d7a68f"><![CDATA[{
            try
            {
                InternalMessagingController.Instance.MarkArchived(conversationId, UserInfo.UserID);
                return Json(new { Result = "success" });
            }
            catch (Exception exc)
            {
                DnnLog.Error(exc);
                return Json(new { Result = "error" });
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="MarkRead">
          <declaration><![CDATA[public ActionResult MarkRead(int conversationId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="183" sc="9" el="194" ec="10">Services\MessagingServiceController.cs</location>
            <body hash="dc9948a46d8e91e0404d9b5948cac2d9"><![CDATA[{
            try
            {
                InternalMessagingController.Instance.MarkRead(conversationId, UserInfo.UserID);
                return Json(new { Result = "success" });
            }
            catch (Exception exc)
            {
                DnnLog.Error(exc);
                return Json(new { Result = "error" });
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="MarkUnArchived">
          <declaration><![CDATA[public ActionResult MarkUnArchived(int conversationId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="167" sc="9" el="178" ec="10">Services\MessagingServiceController.cs</location>
            <body hash="cb79b5b48ac0cb97c83bc67bdd253033"><![CDATA[{
            try
            {
                InternalMessagingController.Instance.MarkUnArchived(conversationId, UserInfo.UserID);
                return Json(new { Result = "success" });
            }
            catch (Exception exc)
            {
                DnnLog.Error(exc);
                return Json(new { Result = "error" });
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="MarkUnRead">
          <declaration><![CDATA[public ActionResult MarkUnRead(int conversationId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="199" sc="9" el="210" ec="10">Services\MessagingServiceController.cs</location>
            <body hash="47ef57358fc3e0588c99f7d801e57366"><![CDATA[{
            try
            {
                InternalMessagingController.Instance.MarkUnRead(conversationId, UserInfo.UserID);
                return Json(new { Result = "success" });
            }
            catch (Exception exc)
            {
                DnnLog.Error(exc);
                return Json(new { Result = "error" });
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="Notifications">
          <declaration><![CDATA[public ActionResult Notifications(int afterNotificationId, int numberOfRecords)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="213" sc="9" el="276" ec="10">Services\MessagingServiceController.cs</location>
            <body hash="2aa68b6e830a4bc1b5a809f516771a45"><![CDATA[{
            try
            {
                var portalId = PortalController.GetEffectivePortalId(UserController.GetCurrentUserInfo().PortalID);
                var notificationsDomainModel = NotificationsController.Instance.GetNotifications(UserInfo.UserID, portalId, afterNotificationId, numberOfRecords);

                var notificationsViewModel = new NotificationsViewModel
                {
                    TotalNotifications = NotificationsController.Instance.CountNotifications(UserInfo.UserID, portalId),
                    Notifications = new List<NotificationViewModel>(notificationsDomainModel.Count)
                };

                foreach (var notification in notificationsDomainModel)
                {
                    var notificationViewModel = new NotificationViewModel
                    {
                        NotificationId = notification.NotificationID,
                        Subject = notification.Subject,
                        From = notification.From,
                        Body = notification.Body,
                        DisplayDate = Common.Utilities.DateUtils.CalculateDateForDisplay(notification.CreatedOnDate),
                        SenderAvatar = string.Format(Globals.UserProfilePicFormattedUrl(), notification.SenderUserID, 32, 32),
                        SenderProfileUrl = Globals.UserProfileURL(notification.SenderUserID),
                        Actions = new List<NotificationActionViewModel>()
                    };

                    var notificationType = NotificationsController.Instance.GetNotificationType(notification.NotificationTypeID);
                    var notificationTypeActions = NotificationsController.Instance.GetNotificationTypeActions(notification.NotificationTypeID);

                    foreach (var notificationTypeAction in notificationTypeActions)
                    {
                        var notificationActionViewModel = new NotificationActionViewModel
                        {
                            Name = LocalizeActionString(notificationTypeAction.NameResourceKey, notificationType.DesktopModuleId),
                            Description = LocalizeActionString(notificationTypeAction.DescriptionResourceKey, notificationType.DesktopModuleId),
                            Confirm = LocalizeActionString(notificationTypeAction.ConfirmResourceKey, notificationType.DesktopModuleId),
                            APICall = notificationTypeAction.APICall
                        };

                        notificationViewModel.Actions.Add(notificationActionViewModel);
                    }

                    if (notification.IncludeDismissAction)
                    {
                        notificationViewModel.Actions.Add(new NotificationActionViewModel
                        {
                            Name = Localization.GetString("Dismiss.Text"),
                            Description = Localization.GetString("DismissNotification.Text"),
                            Confirm = "",
                            APICall = "DesktopModules/InternalServices/API/NotificationsService.ashx/Dismiss"
                        });
                    }

                    notificationsViewModel.Notifications.Add(notificationViewModel);
                }

                return Json(notificationsViewModel, JsonRequestBehavior.AllowGet);
            }
            catch (Exception exc)
            {
                DnnLog.Error(exc);
                return Json(null, JsonRequestBehavior.AllowGet);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="Reply">
          <declaration><![CDATA[public ActionResult Reply(int conversationId, string body, IList<int> fileIds)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="128" sc="9" el="146" ec="10">Services\MessagingServiceController.cs</location>
            <body hash="af5d14d1895566041aa9f9a619a12958"><![CDATA[{
            try
            {
                body = HttpUtility.UrlDecode(body);
                var messageId = InternalMessagingController.Instance.ReplyMessage(conversationId, body, fileIds);
                var message = InternalMessagingController.Instance.GetMessage(messageId);
                var portalId = PortalController.GetEffectivePortalId(UserController.GetCurrentUserInfo().PortalID);
                var totalNewThreads = InternalMessagingController.Instance.CountUnreadMessages(UserInfo.UserID, portalId);
                var totalThreads = InternalMessagingController.Instance.CountMessagesByConversation(conversationId);
                var totalArchivedThreads = InternalMessagingController.Instance.CountArchivedMessagesByConversation(conversationId);

                return Json(new { Conversation = message, TotalNewThreads = totalNewThreads, TotalThreads = totalThreads, TotalArchivedThreads = totalArchivedThreads });
            }
            catch (Exception exc)
            {
                DnnLog.Error(exc);
                return Json(new {Result = "Error", Message = exc.Message});
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="Sentbox">
          <declaration><![CDATA[public ActionResult Sentbox(int afterMessageId, int numberOfRecords)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="70" sc="9" el="85" ec="10">Services\MessagingServiceController.cs</location>
            <body hash="0b8c80a9974d1bd72596ec24b3683abe"><![CDATA[{
            try
            {
                var messageBoxView = InternalMessagingController.Instance.GetRecentSentbox(UserInfo.UserID, afterMessageId, numberOfRecords);
                var portalId = PortalController.GetEffectivePortalId(UserController.GetCurrentUserInfo().PortalID);
                messageBoxView.TotalNewThreads = InternalMessagingController.Instance.CountUnreadMessages(UserInfo.UserID, portalId);
                messageBoxView.TotalConversations = InternalMessagingController.Instance.CountSentMessages(UserInfo.UserID, portalId);

                return Json(messageBoxView, JsonRequestBehavior.AllowGet);
            }
            catch (Exception exc)
            {
                DnnLog.Error(exc);
                return Json(null, JsonRequestBehavior.AllowGet);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="Thread">
          <declaration><![CDATA[public ActionResult Thread(int conversationId, int afterMessageId, int numberOfRecords)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="106" sc="9" el="123" ec="10">Services\MessagingServiceController.cs</location>
            <body hash="cda9dda73356518b6795cf7a11016ed0"><![CDATA[{
            try
            {
                var totalRecords = 0;
                var messageThreadsView = InternalMessagingController.Instance.GetMessageThread(conversationId, UserInfo.UserID, afterMessageId, numberOfRecords, ref totalRecords);
                var portalId = PortalController.GetEffectivePortalId(UserController.GetCurrentUserInfo().PortalID);
                messageThreadsView.TotalNewThreads = InternalMessagingController.Instance.CountUnreadMessages(UserInfo.UserID, portalId);
                messageThreadsView.TotalThreads = InternalMessagingController.Instance.CountMessagesByConversation(conversationId);
                messageThreadsView.TotalArchivedThreads = InternalMessagingController.Instance.CountArchivedMessagesByConversation(conversationId);

                return Json(messageThreadsView, JsonRequestBehavior.AllowGet);
            }
            catch (Exception exc)
            {
                DnnLog.Error(exc);
                return Json(null, JsonRequestBehavior.AllowGet);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="DotNetNuke.Modules.CoreMessaging.ViewModels">
    <class name="NotificationActionViewModel">
      <declaration><![CDATA[public class NotificationActionViewModel]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public NotificationActionViewModel()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="APICall">
          <declaration><![CDATA[public string APICall]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Confirm">
          <declaration><![CDATA[public string Confirm]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Description">
          <declaration><![CDATA[public string Description]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Name">
          <declaration><![CDATA[public string Name]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="NotificationsViewModel">
      <declaration><![CDATA[public class NotificationsViewModel]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public NotificationsViewModel()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="Notifications">
          <declaration><![CDATA[public IList<NotificationViewModel> Notifications]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="TotalNotifications">
          <declaration><![CDATA[public int TotalNotifications]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="NotificationViewModel">
      <declaration><![CDATA[public class NotificationViewModel]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public NotificationViewModel()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="Actions">
          <declaration><![CDATA[public IList<NotificationActionViewModel> Actions]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Body">
          <declaration><![CDATA[public string Body]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="DisplayDate">
          <declaration><![CDATA[public string DisplayDate]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="From">
          <declaration><![CDATA[public string From]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="NotificationId">
          <declaration><![CDATA[public int NotificationId]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="SenderAvatar">
          <declaration><![CDATA[public string SenderAvatar]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="SenderProfileUrl">
          <declaration><![CDATA[public string SenderProfileUrl]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Subject">
          <declaration><![CDATA[public string Subject]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="TotalsViewModel">
      <declaration><![CDATA[public class TotalsViewModel]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public TotalsViewModel()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="TotalNotifications">
          <declaration><![CDATA[public int TotalNotifications]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="TotalUnreadMessages">
          <declaration><![CDATA[public int TotalUnreadMessages]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
</root>