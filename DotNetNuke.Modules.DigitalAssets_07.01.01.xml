<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<root file="DotNetNuke.Modules.DigitalAssets.dll" version="07.01.01" generated="2017-06-19 09:05:46Z" generationTime="4.6218478">
  <namespace name="DotNetNuke.Modules.DigitalAssets">
    <class name="EditFolder">
      <declaration><![CDATA[public class EditFolder : PortalModuleBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private readonly IDigitalAssetsController controller = new Factory().DigitalAssetsController;]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="44" sc="9" el="44" ec="104">EditFolder.ascx.cs</location>
            <body hash="b9fdde460b6f9cef999180689b33107c"><![CDATA[private readonly IDigitalAssetsController controller = (new Factory()).DigitalAssetsController]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="CloseClientDialog">
          <declaration><![CDATA[private void CloseClientDialog(bool refresh)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="128" sc="9" el="131" ec="10">EditFolder.ascx.cs</location>
            <body hash="08e5df3454f899d36392a73ee32b6f5c"><![CDATA[{
            var script = "parent.window.dnnModule.digitalAssets.closeDialog(" + (refresh ? "true" : "false") + ");";
            Page.ClientScript.RegisterClientScriptBlock(GetType(), "CloseDialogScript", script, true);
        }]]></body>
          </codeblock>
        </method>
        <method name="OnCancelClick">
          <declaration><![CDATA[private void OnCancelClick(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="192" sc="9" el="194" ec="10">EditFolder.ascx.cs</location>
            <body hash="3369c6441bc35d7da7fe4227be696f08"><![CDATA[{
            CloseClientDialog(false);
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="76" sc="9" el="125" ec="10">EditFolder.ascx.cs</location>
            <body hash="f8be1850f055a062558c17a442c80792"><![CDATA[{
            try
            {
                base.OnInit(e);

                jQuery.RequestDnnPluginsRegistration();

                var folderId = Convert.ToInt32(Request.Params["FolderId"]);
                Folder = FolderManager.Instance.GetFolder(folderId);
                if (string.IsNullOrEmpty(Folder.FolderPath))
                {
                    folderViewModel = controller.GetRootFolder();
                    isRootFolder = true;
                }
                else
                {
                    folderViewModel = controller.GetFolder(folderId);
                }

                // Setup controls
                CancelButton.Click += OnCancelClick;
                SaveButton.Click += OnSaveClick;
                PrepareFolderPreviewInfo();

                var mef = new ExtensionPointManager();
                var folderFieldsExtension = mef.GetUserControlExtensionPointFirstByPriority("DigitalAssets", "FolderFieldsControlExtensionPoint");
                if (folderFieldsExtension != null)
                {
                    folderFieldsControl = Page.LoadControl(folderFieldsExtension.UserControlSrc);
                    folderFieldsControl.ID = folderFieldsControl.GetType().BaseType.Name;
                    FolderDynamicFieldsContainer.Controls.Add(folderFieldsControl);
                    var fieldsControl = folderFieldsControl as IFieldsControl;
                    if (fieldsControl != null)
                    {
                        fieldsControl.SetController(controller);
                        fieldsControl.SetItemViewModel(new ItemViewModel()
                        {
                            ItemID = folderViewModel.FolderID,
                            IsFolder = true,
                            PortalID = folderViewModel.PortalID,
                            ItemName = folderViewModel.FolderName
                        });
                    }
                }
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="197" sc="9" el="226" ec="10">EditFolder.ascx.cs</location>
            <body hash="e8bb814d10fedff6062763ae72bf5773"><![CDATA[{
            try
            {
                if (!Page.IsPostBack)
                {
                    SetupPermissionGrid();
                    PrepareFolderProperties();
                    SetPropertiesAvailability(FolderPermissionController.CanManageFolder((FolderInfo)Folder));
                }

                if (!FolderPermissionController.CanViewFolder((FolderInfo)Folder))
                {
                    SaveButton.Visible = false;
                    SetPropertiesVisibility(false);
                    UI.Skins.Skin.AddModuleMessage(this, LocalizeString("UserCannotReadFolderError"), ModuleMessage.ModuleMessageType.RedError);
                }
                else
                {
                    SaveButton.Visible = FolderPermissionController.CanViewFolder((FolderInfo)Folder) && FolderPermissionController.CanManageFolder((FolderInfo)Folder);
                }
            }
            catch (DotNetNukeException dnnex)
            {
                UI.Skins.Skin.AddModuleMessage(this, dnnex.Message, ModuleMessage.ModuleMessageType.RedError);
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnSaveClick">
          <declaration><![CDATA[private void OnSaveClick(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="134" sc="9" el="158" ec="10">EditFolder.ascx.cs</location>
            <body hash="3b6e0605a54f07ad90fd833c3be0f1d0"><![CDATA[{
            try
            {
                if (!Page.IsValid)
                {
                    return;
                }
                SaveFolderProperties();

                SavePermissions();
                CloseClientDialog(true);
            }
            catch (ThreadAbortException)
            {                
            }
            catch (DotNetNukeException dnnex)
            {
                UI.Skins.Skin.AddModuleMessage(this, dnnex.Message, ModuleMessage.ModuleMessageType.RedError);
            }
            catch (Exception ex)
            {
                Exceptions.LogException(ex);
                UI.Skins.Skin.AddModuleMessage(this, ex.Message, ModuleMessage.ModuleMessageType.RedError);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="PrepareFolderPreviewInfo">
          <declaration><![CDATA[private void PrepareFolderPreviewInfo()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="266" sc="9" el="272" ec="10">EditFolder.ascx.cs</location>
            <body hash="461d5ab28ad9a7899133bb20fe55e780"><![CDATA[{
            var folderPreviewPanel = (PreviewPanelControl)FolderInfoPreviewPanel;
            if (folderPreviewPanel != null)
            {
                folderPreviewPanel.SetPreviewInfo(controller.GetFolderPreviewInfo(Folder));
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="PrepareFolderProperties">
          <declaration><![CDATA[private void PrepareFolderProperties()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="251" sc="9" el="263" ec="10">EditFolder.ascx.cs</location>
            <body hash="5347c14c1ee53e5eab611dde622533b0"><![CDATA[{
            FolderNameInput.Text = folderViewModel.FolderName;
            FolderTypeLiteral.Text = FolderMappingController.Instance.GetFolderMapping(folderViewModel.FolderMappingID).MappingName;

            FolderNameInvalidCharactersValidator.ValidationExpression = "^([^" + Regex.Escape(controller.GetInvalidChars()) + "]+)$";
            FolderNameInvalidCharactersValidator.ErrorMessage = controller.GetInvalidCharsErrorText();

            var fieldsControl = folderFieldsControl as IFieldsControl;
            if (fieldsControl != null)
            {
                fieldsControl.PrepareProperties();
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="SaveFolderProperties">
          <declaration><![CDATA[private void SaveFolderProperties()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="161" sc="9" el="176" ec="10">EditFolder.ascx.cs</location>
            <body hash="15bdec58b67b9778bd879b497dcf41bb"><![CDATA[{
            if (!CanManageFolder)
            {
                throw new DotNetNukeException(LocalizeString("UserCannotEditFolderError"));
            }

            if (!isRootFolder)
            {
                controller.RenameFolder(folderViewModel.FolderID, FolderNameInput.Text);
            }
            var fieldsControl = folderFieldsControl as IFieldsControl;
            if (fieldsControl != null)
            {
                Folder = (IFolderInfo)fieldsControl.SaveProperties();
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="SavePermissions">
          <declaration><![CDATA[private void SavePermissions()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="179" sc="9" el="189" ec="10">EditFolder.ascx.cs</location>
            <body hash="7710c2fc3176538b1b1dfbc0ee844a8b"><![CDATA[{
            if (!CanManageFolder)
            {
                throw new DotNetNukeException(LocalizeString("UserCannotChangePermissionsError"));
            }

            Folder = (FolderInfo)FolderManager.Instance.GetFolder(Folder.FolderID);
            Folder.FolderPermissions.Clear();
            Folder.FolderPermissions.AddRange(PermissionsGrid.Permissions);
            FolderPermissionController.SaveFolderPermissions(Folder);
        }]]></body>
          </codeblock>
        </method>
        <method name="SetPropertiesAvailability">
          <declaration><![CDATA[private void SetPropertiesAvailability(bool availability)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="229" sc="9" el="236" ec="10">EditFolder.ascx.cs</location>
            <body hash="43be54b52f77ad6b980926cedafb255c"><![CDATA[{
            FolderNameInput.Enabled = (!isRootFolder) && availability;
            var fieldsControl = folderFieldsControl as IFieldsControl;
            if (fieldsControl != null)
            {
                fieldsControl.SetPropertiesAvailability(availability);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="SetPropertiesVisibility">
          <declaration><![CDATA[private void SetPropertiesVisibility(bool visibility)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="239" sc="9" el="248" ec="10">EditFolder.ascx.cs</location>
            <body hash="12b7314d3da7bd0e714686cbdbb3b82c"><![CDATA[{
            FolderNameInput.Visible = visibility;
            FolderTypeLiteral.Visible = visibility;
            FolderInfoPreviewPanel.Visible = visibility;
            var fieldsControl = folderFieldsControl as IFieldsControl;
            if (fieldsControl != null)
            {
                fieldsControl.SetPropertiesVisibility(visibility);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="SetupPermissionGrid">
          <declaration><![CDATA[private void SetupPermissionGrid()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="275" sc="9" el="278" ec="10">EditFolder.ascx.cs</location>
            <body hash="3c06f8d5dc24790770c47f5c9318969d"><![CDATA[{
            PermissionsGrid.FolderPath = Folder.FolderPath;
            PermissionsGrid.Visible = HasFullControl;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="CancelButton">
          <declaration><![CDATA[protected System.Web.UI.WebControls.LinkButton CancelButton;]]></declaration>
          <documentation>
            <summary>
 CancelButton control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="controller">
          <declaration><![CDATA[private readonly IDigitalAssetsController controller = new Factory().DigitalAssetsController;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="FolderContentPanel">
          <declaration><![CDATA[protected System.Web.UI.WebControls.Panel FolderContentPanel;]]></declaration>
          <documentation>
            <summary>
 FolderContentPanel control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="FolderDynamicFieldsContainer">
          <declaration><![CDATA[protected System.Web.UI.WebControls.Panel FolderDynamicFieldsContainer;]]></declaration>
          <documentation>
            <summary>
 FolderDynamicFieldsContainer control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="folderFieldsControl">
          <declaration><![CDATA[private System.Web.UI.Control folderFieldsControl;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="FolderInfoPreviewPanel">
          <declaration><![CDATA[protected System.Web.UI.UserControl FolderInfoPreviewPanel;]]></declaration>
          <documentation>
            <summary>
 FolderInfoPreviewPanel control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="FolderNameInput">
          <declaration><![CDATA[protected System.Web.UI.WebControls.TextBox FolderNameInput;]]></declaration>
          <documentation>
            <summary>
 FolderNameInput control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="FolderNameInvalidCharactersValidator">
          <declaration><![CDATA[protected System.Web.UI.WebControls.RegularExpressionValidator FolderNameInvalidCharactersValidator;]]></declaration>
          <documentation>
            <summary>
 FolderNameInvalidCharactersValidator control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="FolderNameLabel">
          <declaration><![CDATA[protected System.Web.UI.UserControl FolderNameLabel;]]></declaration>
          <documentation>
            <summary>
 FolderNameLabel control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="FolderNameValidator">
          <declaration><![CDATA[protected System.Web.UI.WebControls.RequiredFieldValidator FolderNameValidator;]]></declaration>
          <documentation>
            <summary>
 FolderNameValidator control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="FolderTypeLabel">
          <declaration><![CDATA[protected System.Web.UI.UserControl FolderTypeLabel;]]></declaration>
          <documentation>
            <summary>
 FolderTypeLabel control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="FolderTypeLiteral">
          <declaration><![CDATA[protected System.Web.UI.WebControls.Label FolderTypeLiteral;]]></declaration>
          <documentation>
            <summary>
 FolderTypeLiteral control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="folderViewModel">
          <declaration><![CDATA[private FolderViewModel folderViewModel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="isRootFolder">
          <declaration><![CDATA[private bool isRootFolder;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="PermissionsGrid">
          <declaration><![CDATA[protected FolderPermissionsGrid PermissionsGrid;]]></declaration>
          <documentation>
            <summary>
 PermissionsGrid control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="SaveButton">
          <declaration><![CDATA[protected System.Web.UI.WebControls.LinkButton SaveButton;]]></declaration>
          <documentation>
            <summary>
 SaveButton control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="ScopeWrapper">
          <declaration><![CDATA[protected System.Web.UI.WebControls.Panel ScopeWrapper;]]></declaration>
          <documentation>
            <summary>
 ScopeWrapper control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
      </fields>
      <properties>
        <property name="CanManageFolder">
          <declaration><![CDATA[protected bool CanManageFolder]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="54" sc="13" el="56" ec="14">EditFolder.ascx.cs</location>
            <body hash="12b8d6b9529f8f3970dbf7ac6bc57026"><![CDATA[{
                return UserInfo.IsSuperUser || FolderPermissionController.CanManageFolder((FolderInfo)Folder);
            }]]></body>
          </codeblock>
        </property>
        <property name="DialogTitle">
          <declaration><![CDATA[protected string DialogTitle]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="70" sc="13" el="72" ec="14">EditFolder.ascx.cs</location>
            <body hash="a343c36078d1bd994e665bb0b01a0605"><![CDATA[{
                return string.Format(LocalizeString("DialogTitle"), folderViewModel.FolderName);
            }]]></body>
          </codeblock>
        </property>
        <property name="Folder">
          <declaration><![CDATA[protected IFolderInfo Folder]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="HasFullControl">
          <declaration><![CDATA[protected bool HasFullControl]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="62" sc="13" el="64" ec="14">EditFolder.ascx.cs</location>
            <body hash="b29758a09d503e21295d0fe4fc9ef63a"><![CDATA[{
                return UserInfo.IsSuperUser || FolderPermissionController.HasFolderPermission(Folder.FolderPermissions, "FULLCONTROL");
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="EditFolderMapping">
      <declaration><![CDATA[public class EditFolderMapping : PortalModuleBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private readonly IFolderMappingController _folderMappingController = ComponentBase<IFolderMappingController, FolderMappingController>.Instance;]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="40" sc="9" el="41" ec="57">EditFolderMapping.ascx.cs</location>
            <body hash="75ba624dcc150197c35edda849e63ae7"><![CDATA[private readonly IFolderMappingController _folderMappingController = FolderMappingController.Instance;
        private int _folderMappingID = Null.NullInteger;]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="BindFolderMapping">
          <declaration><![CDATA[private void BindFolderMapping()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="227" sc="9" el="234" ec="10">EditFolderMapping.ascx.cs</location>
            <body hash="5383fd0ec77a3a5d7a669987355d1794"><![CDATA[{
            var folderMapping = _folderMappingController.GetFolderMapping(FolderMappingID);

            NameTextbox.Text = folderMapping.MappingName;

            FolderProvidersComboBox.SelectedValue = folderMapping.FolderProviderType;
            FolderProvidersComboBox.Enabled = false;
        }]]></body>
          </codeblock>
        </method>
        <method name="BindFolderMappingSettings">
          <declaration><![CDATA[private void BindFolderMappingSettings()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="237" sc="9" el="267" ec="10">EditFolderMapping.ascx.cs</location>
            <body hash="8e2d4144ce503dce8a89bb04ab88f309"><![CDATA[{
            string folderProviderType;

            if (FolderMappingID != Null.NullInteger)
            {
                var folderMapping = _folderMappingController.GetFolderMapping(FolderMappingID);
                folderProviderType = folderMapping.FolderProviderType;
            }
            else
            {
                folderProviderType = FolderProvidersComboBox.SelectedValue;
            }

            if (string.IsNullOrEmpty(folderProviderType)) return;
            
            var settingsControlVirtualPath = FolderProvider.Instance(folderProviderType).GetSettingsControlVirtualPath();
            if (String.IsNullOrEmpty(settingsControlVirtualPath)) return;

            var settingsControl = LoadControl(settingsControlVirtualPath);
            if (settingsControl == null || !(settingsControl is FolderMappingSettingsControlBase)) return;

            // This is important to allow settings control to be localizable
            var baseType = settingsControl.GetType().BaseType;
            if (baseType != null)
            {
                settingsControl.ID = baseType.Name;
            }

            ProviderSettingsPlaceHolder.Controls.Clear();
            ProviderSettingsPlaceHolder.Controls.Add(settingsControl);
        }]]></body>
          </codeblock>
        </method>
        <method name="BindFolderProviders">
          <declaration><![CDATA[private void BindFolderProviders()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="216" sc="9" el="224" ec="10">EditFolderMapping.ascx.cs</location>
            <body hash="ad7cb0f7698a0088f5c9dcf922f15cb5"><![CDATA[{
            var defaultProviders = DefaultFolderProviders.GetDefaultProviders();

            foreach (var provider in FolderProvider.GetProviderList().Keys.Where(provider => !defaultProviders.Contains(provider)).OrderBy(provider => provider))
            {
                FolderProvidersComboBox.AddItem(provider, provider);
            }
            FolderProvidersComboBox.InsertItem(0, "", "");
        }]]></body>
          </codeblock>
        </method>
        <method name="cboFolderProviders_SelectedIndexChanged">
          <declaration><![CDATA[protected void cboFolderProviders_SelectedIndexChanged(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="207" sc="9" el="209" ec="10">EditFolderMapping.ascx.cs</location>
            <body hash="1ca35e18d169697fbee86693f9c21602"><![CDATA[{
            BindFolderMappingSettings();
        }]]></body>
          </codeblock>
        </method>
        <method name="cmdUpdate_Click">
          <declaration><![CDATA[private void cmdUpdate_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="123" sc="9" el="204" ec="10">EditFolderMapping.ascx.cs</location>
            <body hash="50c203d5fc512ee03dc5d91eca3369e4"><![CDATA[{
            Page.Validate("vgEditFolderMapping");
            
            if (!Page.IsValid) return;

            try
            {
                var folderMapping = new FolderMappingInfo();

                if (FolderMappingID != Null.NullInteger)
                {
                    folderMapping = _folderMappingController.GetFolderMapping(FolderMappingID) ?? new FolderMappingInfo();
                }

                folderMapping.FolderMappingID = FolderMappingID;
                folderMapping.MappingName = NameTextbox.Text;
                folderMapping.FolderProviderType = FolderProvidersComboBox.SelectedValue;
                folderMapping.PortalID = FolderPortalID;

                var originalSettings = folderMapping.FolderMappingSettings;

                try
                {
                    var folderMappingID = FolderMappingID;

                    if (folderMappingID == Null.NullInteger)
                    {
                        folderMappingID = _folderMappingController.AddFolderMapping(folderMapping);
                    }
                    else
                    {
                        _folderMappingController.UpdateFolderMapping(folderMapping);
                    }

                    if (ProviderSettingsPlaceHolder.Controls.Count > 0 && ProviderSettingsPlaceHolder.Controls[0] is FolderMappingSettingsControlBase)
                    {
                        var settingsControl = (FolderMappingSettingsControlBase)ProviderSettingsPlaceHolder.Controls[0];

                        try
                        {
                            settingsControl.UpdateSettings(folderMappingID);
                        }
                        catch
                        {
                            if (FolderMappingID == Null.NullInteger)
                            {
                                _folderMappingController.DeleteFolderMapping(FolderPortalID, folderMappingID);
                            }
                            return;
                        }
                    }

                    if (FolderMappingID != Null.NullInteger)
                    {
                        // Check if some setting has changed
                        var updatedSettings = _folderMappingController.GetFolderMappingSettings(FolderMappingID);

                        if (originalSettings.Keys.Cast<object>().Any(key => updatedSettings.ContainsKey(key) && !originalSettings[key].ToString().Equals(updatedSettings[key].ToString())))
                        {
                            // Re-synchronize folders using the existing mapping. It's important to synchronize them in descending order
                            var folders = FolderManager.Instance.GetFolders(FolderPortalID).Where(f => f.FolderMappingID == FolderMappingID).OrderByDescending(f => f.FolderPath);

                            foreach (var folder in folders)
                            {
                                FolderManager.Instance.Synchronize(FolderPortalID, folder.FolderPath, false, true);
                            }
                        }
                    }
                }
                catch
                {
                    UI.Skins.Skin.AddModuleMessage(this, Localization.GetString("DuplicateMappingName", LocalResourceFile), ModuleMessage.ModuleMessageType.RedError);
                    return;
                }

                Response.Redirect(Globals.NavigateURL(TabId, "FolderMappings", "mid=" + ModuleId, "popUp=true"));
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="75" sc="9" el="87" ec="10">EditFolderMapping.ascx.cs</location>
            <body hash="d8406af36d54730e2465e8979bee9e96"><![CDATA[{
            base.OnInit(e);

            UpdateButton.Text = (FolderMappingID == Null.NullInteger) ? Localization.GetString("Add") : Localization.GetString("Update", LocalResourceFile);
            CancelHyperLink.NavigateUrl = EditUrl("FolderMappings");

            var controlTitle = Localization.GetString("ControlTitle", LocalResourceFile);
            var controlTitlePrefix = (FolderMappingID == Null.NullInteger) ? Localization.GetString("New") : Localization.GetString("Edit");

            SyncWarningPlaceHolder.Visible = (FolderMappingID != Null.NullInteger);

            ModuleConfiguration.ModuleControl.ControlTitle = string.Format(controlTitle, controlTitlePrefix);
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="90" sc="9" el="120" ec="10">EditFolderMapping.ascx.cs</location>
            <body hash="5bcf163080a44f348be5d48e5799c63f"><![CDATA[{
            base.OnLoad(e);

            UpdateButton.Click += cmdUpdate_Click;

            try
            {
                BindFolderMappingSettings();

                if (!IsPostBack)
                {
                    BindFolderProviders();

                    if (FolderMappingID != Null.NullInteger)
                    {
                        BindFolderMapping();

                        if (ProviderSettingsPlaceHolder.Controls.Count > 0 && ProviderSettingsPlaceHolder.Controls[0] is FolderMappingSettingsControlBase)
                        {
                            var folderMapping = _folderMappingController.GetFolderMapping(FolderMappingID);
                            var settingsControl = (FolderMappingSettingsControlBase)ProviderSettingsPlaceHolder.Controls[0];
                            settingsControl.LoadSettings(folderMapping.FolderMappingSettings);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_folderMappingController">
          <declaration><![CDATA[private readonly IFolderMappingController _folderMappingController = ComponentBase<IFolderMappingController, FolderMappingController>.Instance;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_folderMappingID">
          <declaration><![CDATA[private int _folderMappingID = Null.NullInteger;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="CancelHyperLink">
          <declaration><![CDATA[protected System.Web.UI.WebControls.HyperLink CancelHyperLink;]]></declaration>
          <documentation>
            <summary>
 CancelHyperLink control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="DescriptionLabel">
          <declaration><![CDATA[protected System.Web.UI.WebControls.Label DescriptionLabel;]]></declaration>
          <documentation>
            <summary>
 DescriptionLabel control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="FolderProviderLabel">
          <declaration><![CDATA[protected System.Web.UI.UserControl FolderProviderLabel;]]></declaration>
          <documentation>
            <summary>
 FolderProviderLabel control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="FolderProvidersComboBox">
          <declaration><![CDATA[protected DnnComboBox FolderProvidersComboBox;]]></declaration>
          <documentation>
            <summary>
 FolderProvidersComboBox control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="FolderProviderValidator">
          <declaration><![CDATA[protected System.Web.UI.WebControls.RequiredFieldValidator FolderProviderValidator;]]></declaration>
          <documentation>
            <summary>
 FolderProviderValidator control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="NameLabel">
          <declaration><![CDATA[protected System.Web.UI.UserControl NameLabel;]]></declaration>
          <documentation>
            <summary>
 NameLabel control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="NameTextbox">
          <declaration><![CDATA[protected System.Web.UI.WebControls.TextBox NameTextbox;]]></declaration>
          <documentation>
            <summary>
 NameTextbox control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="NameValidator">
          <declaration><![CDATA[protected System.Web.UI.WebControls.RequiredFieldValidator NameValidator;]]></declaration>
          <documentation>
            <summary>
 NameValidator control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="ProviderSettingsPlaceHolder">
          <declaration><![CDATA[protected System.Web.UI.WebControls.PlaceHolder ProviderSettingsPlaceHolder;]]></declaration>
          <documentation>
            <summary>
 ProviderSettingsPlaceHolder control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="SyncLabel">
          <declaration><![CDATA[protected System.Web.UI.WebControls.Label SyncLabel;]]></declaration>
          <documentation>
            <summary>
 SyncLabel control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="SyncWarningPlaceHolder">
          <declaration><![CDATA[protected System.Web.UI.WebControls.PlaceHolder SyncWarningPlaceHolder;]]></declaration>
          <documentation>
            <summary>
 SyncWarningPlaceHolder control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="UpdateButton">
          <declaration><![CDATA[protected System.Web.UI.WebControls.LinkButton UpdateButton;]]></declaration>
          <documentation>
            <summary>
 UpdateButton control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
      </fields>
      <properties>
        <property name="FolderMappingID">
          <declaration><![CDATA[public int FolderMappingID]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="58" sc="13" el="67" ec="14">EditFolderMapping.ascx.cs</location>
            <body hash="4f92b25532e5a9acbbee642db3c04101"><![CDATA[{
                if (_folderMappingID == Null.NullInteger)
                {
                    if (!string.IsNullOrEmpty(Request.QueryString["ItemID"]))
                    {
                        int.TryParse(Request.QueryString["ItemID"], out _folderMappingID);
                    }
                }
                return _folderMappingID;
            }]]></body>
          </codeblock>
        </property>
        <property name="FolderPortalID">
          <declaration><![CDATA[public int FolderPortalID]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="50" sc="13" el="52" ec="14">EditFolderMapping.ascx.cs</location>
            <body hash="f9fe4563e259c67662058a67f01c17bd"><![CDATA[{
                return IsHostMenu ? Null.NullInteger : PortalId;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="FileFieldsControl">
      <declaration><![CDATA[public class FileFieldsControl : PortalModuleBase, IFieldsControl]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public FileFieldsControl()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="GetFileAttributesUpdated">
          <declaration><![CDATA[private FileAttributes GetFileAttributesUpdated(FileAttributes? attributes)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="59" sc="9" el="66" ec="10">FileFieldsControl.ascx.cs</location>
            <body hash="58e5fc748758d1139c65eab76e83e1e9"><![CDATA[{
            var result = (FileAttributeArchiveCheckBox.Checked) ? (attributes | FileAttributes.Archive) : (attributes & ~FileAttributes.Archive);
            result = (FileAttributeHiddenCheckBox.Checked) ? (result | FileAttributes.Hidden) : (result & ~FileAttributes.Hidden);
            result = (FileAttributeReadonlyCheckBox.Checked) ? (result | FileAttributes.ReadOnly) : (result & ~FileAttributes.ReadOnly);
            result = (FileAttributeSystemCheckBox.Checked) ? (result | FileAttributes.System) : (result & ~FileAttributes.System);

            return result.Value;
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="75" sc="9" el="79" ec="10">FileFieldsControl.ascx.cs</location>
            <body hash="934643110a1bc2d1cc2118074ef8252a"><![CDATA[{
            base.OnInit(e);

            jQuery.RequestDnnPluginsRegistration();
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="82" sc="9" el="93" ec="10">FileFieldsControl.ascx.cs</location>
            <body hash="6631e9cc2cceeed36d43688fe71b3522"><![CDATA[{
            base.OnLoad(e);
            if (!Page.IsPostBack)
            {                
                PrepareProperties();
                FileAttributesContainer.Visible = File.SupportsFileAttributes;
                if (File.SupportsFileAttributes)
                {
                    PrepareFileAttributes();
                }                
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="PrepareFileAttributes">
          <declaration><![CDATA[private void PrepareFileAttributes()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="51" sc="9" el="56" ec="10">FileFieldsControl.ascx.cs</location>
            <body hash="548473c1662e74de7fae5ba4d3254ca0"><![CDATA[{
            FileAttributeArchiveCheckBox.Checked = (File.FileAttributes & FileAttributes.Archive) == FileAttributes.Archive;
            FileAttributeHiddenCheckBox.Checked = (File.FileAttributes & FileAttributes.Hidden) == FileAttributes.Hidden;
            FileAttributeReadonlyCheckBox.Checked = (File.FileAttributes & FileAttributes.ReadOnly) == FileAttributes.ReadOnly;
            FileAttributeSystemCheckBox.Checked = (File.FileAttributes & FileAttributes.System) == FileAttributes.System;
        }]]></body>
          </codeblock>
        </method>
        <method name="PrepareProperties">
          <declaration><![CDATA[public virtual void PrepareProperties()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="44" sc="9" el="48" ec="10">FileFieldsControl.ascx.cs</location>
            <body hash="dd4f054edc3e90e7c94dd0475233d6eb"><![CDATA[{
            FileNameInput.Text = Item.ItemName;
            FileNameInvalidCharactersValidator.ValidationExpression = "^([^" + Regex.Escape(Controller.GetInvalidChars()) + "]+)$";
            FileNameInvalidCharactersValidator.ErrorMessage = Controller.GetInvalidCharsErrorText();
        }]]></body>
          </codeblock>
        </method>
        <method name="SaveProperties">
          <declaration><![CDATA[public virtual object SaveProperties()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="131" sc="9" el="140" ec="10">FileFieldsControl.ascx.cs</location>
            <body hash="16f0670203e1b5b395b52fcdf1c3a80a"><![CDATA[{
            Controller.RenameFile(Item.ItemID, FileNameInput.Text);
            if (File.SupportsFileAttributes)
            {
                File = FileManager.Instance.GetFile(Item.ItemID, true);
                FileManager.Instance.SetAttributes(File, GetFileAttributesUpdated(File.FileAttributes));
            }

            return File;
        }]]></body>
          </codeblock>
        </method>
        <method name="SetController">
          <declaration><![CDATA[public void SetController(IDigitalAssetsController damController)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="96" sc="9" el="98" ec="10">FileFieldsControl.ascx.cs</location>
            <body hash="b9d629d7683da54b77ef423b1651fc59"><![CDATA[{
            this.Controller = damController;            
        }]]></body>
          </codeblock>
        </method>
        <method name="SetFileInfo">
          <declaration><![CDATA[public void SetFileInfo(IFileInfo fileInfo)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="126" sc="9" el="128" ec="10">FileFieldsControl.ascx.cs</location>
            <body hash="f756c04e2cfe349c5065fddde09267a5"><![CDATA[{
            File = fileInfo;
        }]]></body>
          </codeblock>
        </method>
        <method name="SetItemViewModel">
          <declaration><![CDATA[public void SetItemViewModel(ItemViewModel itemViewModel)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="106" sc="9" el="108" ec="10">FileFieldsControl.ascx.cs</location>
            <body hash="dc0db4068a3ee3139beee6b34e6053a5"><![CDATA[{
            this.Item = itemViewModel;
        }]]></body>
          </codeblock>
        </method>
        <method name="SetModuleConfiguration">
          <declaration><![CDATA[public void SetModuleConfiguration(ModuleInfo moduleConfiguration)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="101" sc="9" el="103" ec="10">FileFieldsControl.ascx.cs</location>
            <body hash="20aaa9c723096641406cfa2774959faa"><![CDATA[{
            this.ModuleConfiguration = moduleConfiguration;
        }]]></body>
          </codeblock>
        </method>
        <method name="SetPropertiesAvailability">
          <declaration><![CDATA[public virtual void SetPropertiesAvailability(bool availability)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="111" sc="9" el="117" ec="10">FileFieldsControl.ascx.cs</location>
            <body hash="61a4dfd4fd479602aaefd169aaec95c5"><![CDATA[{
            FileNameInput.Enabled = availability;
            FileAttributeArchiveCheckBox.Enabled = availability;
            FileAttributeHiddenCheckBox.Enabled = availability;
            FileAttributeReadonlyCheckBox.Enabled = availability;
            FileAttributeSystemCheckBox.Enabled = availability;
        }]]></body>
          </codeblock>
        </method>
        <method name="SetPropertiesVisibility">
          <declaration><![CDATA[public virtual void SetPropertiesVisibility(bool visibility)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="120" sc="9" el="123" ec="10">FileFieldsControl.ascx.cs</location>
            <body hash="068fd8722c085c34b4e3475494a45fd0"><![CDATA[{
            FileNameInput.Visible = visibility;
            FileAttributesContainer.Visible = visibility;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="FileAttributeArchiveCheckBox">
          <declaration><![CDATA[protected System.Web.UI.WebControls.CheckBox FileAttributeArchiveCheckBox;]]></declaration>
          <documentation>
            <summary>
 FileAttributeArchiveCheckBox control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="FileAttributeHiddenCheckBox">
          <declaration><![CDATA[protected System.Web.UI.WebControls.CheckBox FileAttributeHiddenCheckBox;]]></declaration>
          <documentation>
            <summary>
 FileAttributeHiddenCheckBox control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="FileAttributeReadonlyCheckBox">
          <declaration><![CDATA[protected System.Web.UI.WebControls.CheckBox FileAttributeReadonlyCheckBox;]]></declaration>
          <documentation>
            <summary>
 FileAttributeReadonlyCheckBox control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="FileAttributesContainer">
          <declaration><![CDATA[protected System.Web.UI.WebControls.Panel FileAttributesContainer;]]></declaration>
          <documentation>
            <summary>
 FileAttributesContainer control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="FileAttributesLabel">
          <declaration><![CDATA[protected System.Web.UI.UserControl FileAttributesLabel;]]></declaration>
          <documentation>
            <summary>
 FileAttributesLabel control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="FileAttributeSystemCheckBox">
          <declaration><![CDATA[protected System.Web.UI.WebControls.CheckBox FileAttributeSystemCheckBox;]]></declaration>
          <documentation>
            <summary>
 FileAttributeSystemCheckBox control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="FileNameInput">
          <declaration><![CDATA[protected System.Web.UI.WebControls.TextBox FileNameInput;]]></declaration>
          <documentation>
            <summary>
 FileNameInput control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="FileNameInvalidCharactersValidator">
          <declaration><![CDATA[protected System.Web.UI.WebControls.RegularExpressionValidator FileNameInvalidCharactersValidator;]]></declaration>
          <documentation>
            <summary>
 FileNameInvalidCharactersValidator control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="FileNameLabel">
          <declaration><![CDATA[protected System.Web.UI.UserControl FileNameLabel;]]></declaration>
          <documentation>
            <summary>
 FileNameLabel control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="FileNameValidator">
          <declaration><![CDATA[protected System.Web.UI.WebControls.RequiredFieldValidator FileNameValidator;]]></declaration>
          <documentation>
            <summary>
 FileNameValidator control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="ScopeWrapper">
          <declaration><![CDATA[protected System.Web.UI.WebControls.Panel ScopeWrapper;]]></declaration>
          <documentation>
            <summary>
 ScopeWrapper control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
      </fields>
      <properties>
        <property name="Controller">
          <declaration><![CDATA[public IDigitalAssetsController Controller]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="File">
          <declaration><![CDATA[protected IFileInfo File]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Item">
          <declaration><![CDATA[public ItemViewModel Item]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="FileProperties">
      <declaration><![CDATA[public class FileProperties : PortalModuleBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private readonly IDigitalAssetsController controller = new Factory().DigitalAssetsController;]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="47" sc="9" el="47" ec="104">FileProperties.ascx.cs</location>
            <body hash="b9fdde460b6f9cef999180689b33107c"><![CDATA[private readonly IDigitalAssetsController controller = (new Factory()).DigitalAssetsController]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="CloseClientDialog">
          <declaration><![CDATA[private void CloseClientDialog(bool refresh)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="169" sc="9" el="172" ec="10">FileProperties.ascx.cs</location>
            <body hash="08e5df3454f899d36392a73ee32b6f5c"><![CDATA[{
            var script = "parent.window.dnnModule.digitalAssets.closeDialog(" + (refresh ? "true" : "false") + ");";
            Page.ClientScript.RegisterClientScriptBlock(GetType(), "CloseDialogScript", script, true);
        }]]></body>
          </codeblock>
        </method>
        <method name="OnCancelClick">
          <declaration><![CDATA[private void OnCancelClick(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="208" sc="9" el="210" ec="10">FileProperties.ascx.cs</location>
            <body hash="3369c6441bc35d7da7fe4227be696f08"><![CDATA[{
            CloseClientDialog(false);
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="73" sc="9" el="135" ec="10">FileProperties.ascx.cs</location>
            <body hash="d567c20accbcf9a72a4407e493bf2c2d"><![CDATA[{
            try
            {
                base.OnInit(e);

                jQuery.RequestDnnPluginsRegistration();

                var fileId = Convert.ToInt32(Request.Params["FileId"]);
                file = FileManager.Instance.GetFile(fileId, true);
                fileItem = controller.GetFile(fileId);
                folder = FolderManager.Instance.GetFolder(file.FolderId);

                SaveButton.Click += OnSaveClick;
                CancelButton.Click += OnCancelClick;

                if (FolderPermissionController.CanViewFolder((FolderInfo)folder))
                {
                    var mef = new ExtensionPointManager();
                    var preViewPanelExtension = mef.GetUserControlExtensionPointFirstByPriority("DigitalAssets", "PreviewInfoPanelExtensionPoint");
                    previewPanelControl = Page.LoadControl(preViewPanelExtension.UserControlSrc);
                    PreviewPanelContainer.Controls.Add(previewPanelControl);

                    var fileFieldsExtension = mef.GetUserControlExtensionPointFirstByPriority("DigitalAssets", "FileFieldsControlExtensionPoint");
                    fileFieldsControl = Page.LoadControl(fileFieldsExtension.UserControlSrc);
                    fileFieldsControl.ID = fileFieldsControl.GetType().BaseType.Name;
                    FileFieldsContainer.Controls.Add(fileFieldsControl);

                    PrepareFilePreviewInfoControl();
                    PrepareFileFieldsControl();

                    // Tab Extension Point
                    var tabContentControlsInstances = new List<PropertiesTabContentControl>();
                    foreach (var extension in mef.GetEditPageTabExtensionPoints("DigitalAssets", "FilePropertiesTab"))
                    {
                        if (FolderPermissionController.HasFolderPermission(folder.FolderPermissions, extension.Permission))
                        {
                            var liElement = new HtmlGenericControl("li") { InnerHtml = "<a href=\"#" + extension.EditPageTabId + "\">" + extension.Text + "</a>", };
                            liElement.Attributes.Add("class", extension.CssClass);
                            liElement.Attributes.Add("id", extension.EditPageTabId + "_tab");
                            Tabs.Controls.Add(liElement);

                            var container = new PanelTabExtensionControl { PanelId = extension.EditPageTabId };
                            var control = (PortalModuleBase)Page.LoadControl(extension.UserControlSrc);
                            control.ID = Path.GetFileNameWithoutExtension(extension.UserControlSrc);
                            control.ModuleConfiguration = ModuleConfiguration;
                            var contentControl = control as PropertiesTabContentControl;
                            if (contentControl != null)
                            {
                                contentControl.OnItemUpdated += OnItemUpdated;
                                tabContentControlsInstances.Add(contentControl);
                            }
                            container.Controls.Add(control);
                            TabsPanel.Controls.Add(container);
                        }
                    }
                    tabContentControls = tabContentControlsInstances.ToList();
                }
            }
            catch (Exception ex)
            {
                Exceptions.ProcessModuleLoadException(this, ex);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnItemUpdated">
          <declaration><![CDATA[private void OnItemUpdated()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="175" sc="9" el="181" ec="10">FileProperties.ascx.cs</location>
            <body hash="46ad443838885c8d7f765fefe3df5d96"><![CDATA[{
            SetFilePreviewInfo();
            foreach (var propertiesTabContentControl in tabContentControls)
            {
                propertiesTabContentControl.DataBindItem();
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="138" sc="9" el="166" ec="10">FileProperties.ascx.cs</location>
            <body hash="c5199ab8767d0b81ba80073416d6c19c"><![CDATA[{
            try
            {
                if (!Page.IsPostBack)
                {
                    SetPropertiesAvailability(CanManageFolder);
                }

                if (!FolderPermissionController.CanViewFolder((FolderInfo)folder))
                {
                    SaveButton.Visible = false;
                    SetPropertiesVisibility(false);
                    UI.Skins.Skin.AddModuleMessage(this, LocalizeString("UserCannotReadFileError"), ModuleMessage.ModuleMessageType.RedError);
                }
                else
                {
                    SetFilePreviewInfo();
                    SaveButton.Visible = FolderPermissionController.CanViewFolder((FolderInfo)folder) && FolderPermissionController.CanManageFolder((FolderInfo)folder);
                }
            }
            catch (DotNetNukeException dnnex)
            {
                UI.Skins.Skin.AddModuleMessage(this, dnnex.Message, ModuleMessage.ModuleMessageType.RedError);
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnSaveClick">
          <declaration><![CDATA[private void OnSaveClick(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="184" sc="9" el="205" ec="10">FileProperties.ascx.cs</location>
            <body hash="d999f6ca4cb080cc985d12c05f3dcf19"><![CDATA[{
            if (!Page.IsValid)
            {
                return;
            }

            try
            {
                SaveFileProperties();
                CloseClientDialog(true);
            }
            catch (ThreadAbortException) { }
            catch (DotNetNukeException dnnex)
            {
                UI.Skins.Skin.AddModuleMessage(this, dnnex.Message, ModuleMessage.ModuleMessageType.RedError);
            }
            catch (Exception ex)
            {
                Exceptions.LogException(ex);
                UI.Skins.Skin.AddModuleMessage(this, ex.Message, ModuleMessage.ModuleMessageType.RedError);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="PrepareFileFieldsControl">
          <declaration><![CDATA[private void PrepareFileFieldsControl()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="241" sc="9" el="247" ec="10">FileProperties.ascx.cs</location>
            <body hash="6a24a6b228249cf02867a387f3c6ad37"><![CDATA[{
            var fileFieldsIntance = (FileFieldsControl)fileFieldsControl;
            fileFieldsIntance.SetController(controller);
            fileFieldsIntance.SetItemViewModel(fileItem);
            fileFieldsIntance.SetFileInfo(file);
            fileFieldsIntance.SetModuleConfiguration(ModuleConfiguration);
        }]]></body>
          </codeblock>
        </method>
        <method name="PrepareFilePreviewInfoControl">
          <declaration><![CDATA[private void PrepareFilePreviewInfoControl()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="234" sc="9" el="238" ec="10">FileProperties.ascx.cs</location>
            <body hash="ac7527deb53c5991949fe893ace6c14d"><![CDATA[{
            var previewPanelInstance = (PreviewPanelControl)previewPanelControl;
            previewPanelInstance.SetController(controller);
            previewPanelInstance.SetModuleConfiguration(ModuleConfiguration);
        }]]></body>
          </codeblock>
        </method>
        <method name="SaveFileProperties">
          <declaration><![CDATA[private void SaveFileProperties()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="213" sc="9" el="215" ec="10">FileProperties.ascx.cs</location>
            <body hash="3b1625046afbf9a459e918c1d7deff9c"><![CDATA[{
            file = (IFileInfo)((FileFieldsControl)fileFieldsControl).SaveProperties();
        }]]></body>
          </codeblock>
        </method>
        <method name="SetFilePreviewInfo">
          <declaration><![CDATA[private void SetFilePreviewInfo()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="228" sc="9" el="231" ec="10">FileProperties.ascx.cs</location>
            <body hash="400cafdf52915ab545ee8cee14695466"><![CDATA[{
            var previewPanelInstance = (PreviewPanelControl)previewPanelControl;
            previewPanelInstance.SetPreviewInfo(controller.GetFilePreviewInfo(file, fileItem));            
        }]]></body>
          </codeblock>
        </method>
        <method name="SetPropertiesAvailability">
          <declaration><![CDATA[private void SetPropertiesAvailability(bool availability)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="223" sc="9" el="225" ec="10">FileProperties.ascx.cs</location>
            <body hash="c83a9a0ef416607b06102e54b38a9ab4"><![CDATA[{
            ((FileFieldsControl)fileFieldsControl).SetPropertiesAvailability(availability);
        }]]></body>
          </codeblock>
        </method>
        <method name="SetPropertiesVisibility">
          <declaration><![CDATA[private void SetPropertiesVisibility(bool visibility)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="218" sc="9" el="220" ec="10">FileProperties.ascx.cs</location>
            <body hash="6639f1db420ffbeb2faedfd74a537659"><![CDATA[{
            ((FileFieldsControl)fileFieldsControl).SetPropertiesVisibility(visibility);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="CancelButton">
          <declaration><![CDATA[protected System.Web.UI.WebControls.LinkButton CancelButton;]]></declaration>
          <documentation>
            <summary>
 CancelButton control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="controller">
          <declaration><![CDATA[private readonly IDigitalAssetsController controller = new Factory().DigitalAssetsController;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="file">
          <declaration><![CDATA[private IFileInfo file;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="FileFieldsContainer">
          <declaration><![CDATA[protected System.Web.UI.WebControls.Panel FileFieldsContainer;]]></declaration>
          <documentation>
            <summary>
 FileFieldsContainer control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="fileFieldsControl">
          <declaration><![CDATA[private System.Web.UI.Control fileFieldsControl;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="fileItem">
          <declaration><![CDATA[private ItemViewModel fileItem;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="folder">
          <declaration><![CDATA[private IFolderInfo folder;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="FolderContentPanel">
          <declaration><![CDATA[protected System.Web.UI.WebControls.Panel FolderContentPanel;]]></declaration>
          <documentation>
            <summary>
 FolderContentPanel control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="GeneralTabLink">
          <declaration><![CDATA[protected System.Web.UI.WebControls.HyperLink GeneralTabLink;]]></declaration>
          <documentation>
            <summary>
 GeneralTabLink control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="PreviewPanelContainer">
          <declaration><![CDATA[protected System.Web.UI.WebControls.Panel PreviewPanelContainer;]]></declaration>
          <documentation>
            <summary>
 PreviewPanelContainer control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="previewPanelControl">
          <declaration><![CDATA[private System.Web.UI.Control previewPanelControl;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="SaveButton">
          <declaration><![CDATA[protected System.Web.UI.WebControls.LinkButton SaveButton;]]></declaration>
          <documentation>
            <summary>
 SaveButton control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="ScopeWrapper">
          <declaration><![CDATA[protected System.Web.UI.WebControls.Panel ScopeWrapper;]]></declaration>
          <documentation>
            <summary>
 ScopeWrapper control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="tabContentControls">
          <declaration><![CDATA[private IEnumerable<PropertiesTabContentControl> tabContentControls;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Tabs">
          <declaration><![CDATA[protected System.Web.UI.HtmlControls.HtmlGenericControl Tabs;]]></declaration>
          <documentation>
            <summary>
 Tabs control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="TabsPanel">
          <declaration><![CDATA[protected System.Web.UI.WebControls.Panel TabsPanel;]]></declaration>
          <documentation>
            <summary>
 TabsPanel control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
      </fields>
      <properties>
        <property name="CanManageFolder">
          <declaration><![CDATA[protected bool CanManageFolder]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="67" sc="13" el="69" ec="14">FileProperties.ascx.cs</location>
            <body hash="03b7a3b6104900c9ec41a1e4f4e42900"><![CDATA[{
                return UserInfo.IsSuperUser || FolderPermissionController.CanManageFolder((FolderInfo)folder);
            }]]></body>
          </codeblock>
        </property>
        <property name="DialogTitle">
          <declaration><![CDATA[protected string DialogTitle]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="59" sc="13" el="61" ec="14">FileProperties.ascx.cs</location>
            <body hash="06f648e3a28a246532d86512ed8bb315"><![CDATA[{
                return fileItem.ItemName;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="FolderMappings">
      <declaration><![CDATA[public class FolderMappings : PortalModuleBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private readonly IFolderMappingController _folderMappingController = ComponentBase<IFolderMappingController, FolderMappingController>.Instance;]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="40" sc="9" el="40" ec="111">FolderMappings.ascx.cs</location>
            <body hash="a97772e171e717d9bbceaf12375bf54b"><![CDATA[private readonly IFolderMappingController _folderMappingController = FolderMappingController.Instance]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="MappingsGrid_OnItemCommand">
          <declaration><![CDATA[protected void MappingsGrid_OnItemCommand(object source, GridCommandEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="107" sc="9" el="130" ec="10">FolderMappings.ascx.cs</location>
            <body hash="a7cfffb9ea9032375cd57f8fb7c96490"><![CDATA[{
            if (e.CommandName == "Edit")
            {                
                Response.Redirect(Globals.NavigateURL(TabId, "EditFolderMapping", "mid=" + ModuleId, "popUp=true", "ItemID=" + e.CommandArgument.ToString()));
            }
            else
            {
                var folderMappingsList = FolderMappingsList;
                var folderMapping = folderMappingsList.Find(f => f.FolderMappingID == int.Parse(e.CommandArgument.ToString()));

                switch (e.CommandName)
                {
                    case "Delete":
                        _folderMappingController.DeleteFolderMapping(folderMapping.PortalID, folderMapping.FolderMappingID);
                        folderMappingsList.Remove(folderMapping);
                        break;
                    default:
                        break;
                }

                FolderMappingsList = folderMappingsList;
                MappingsGrid.Rebind();
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="MappingsGrid_OnItemDataBound">
          <declaration><![CDATA[protected void MappingsGrid_OnItemDataBound(object sender, GridItemEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="133" sc="9" el="152" ec="10">FolderMappings.ascx.cs</location>
            <body hash="6cc0e40fa95c88f9eac5f5b1791d5688"><![CDATA[{
            if (e.Item.ItemType != GridItemType.Item && e.Item.ItemType != GridItemType.AlternatingItem) return;

            var folderMapping = (e.Item.DataItem as FolderMappingInfo);
            if (folderMapping == null || !folderMapping.IsEditable)
            {
                return;
            }

            var cmdEditMapping = (e.Item.FindControl("EditMappingButton") as CommandButton);
            if (cmdEditMapping != null) cmdEditMapping.ToolTip = Localization.GetString("cmdEdit");

            var cmdDeleteMapping = (e.Item.FindControl("DeleteMappingButton") as CommandButton);
            if (cmdDeleteMapping == null) return;

            cmdDeleteMapping.ToolTip = Localization.GetString("cmdDelete");

            var deleteMessage = string.Format(Localization.GetString("DeleteConfirm", LocalResourceFile), folderMapping.MappingName);
            cmdDeleteMapping.OnClientClick = "return confirm(\"" + ClientAPI.GetSafeJSString(deleteMessage) + "\");";
        }]]></body>
          </codeblock>
        </method>
        <method name="MappingsGrid_OnNeedDataSource">
          <declaration><![CDATA[protected void MappingsGrid_OnNeedDataSource(object source, GridNeedDataSourceEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="155" sc="9" el="157" ec="10">FolderMappings.ascx.cs</location>
            <body hash="d35f1d580b34b735fcb2e3745533a2f7"><![CDATA[{
            MappingsGrid.DataSource = FolderMappingsList;
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="89" sc="9" el="104" ec="10">FolderMappings.ascx.cs</location>
            <body hash="5089d8c16791a1276d8aedcca809a4e2"><![CDATA[{
            base.OnLoad(e);
            ClientAPI.RegisterClientReference(Page, ClientAPI.ClientNamespaceReferences.dnn);
            CancelButton.NavigateUrl = Globals.NavigateURL();
            NewMappingButton.Click += OnNewMappingClick;

            if (!IsPostBack)
            {
                Session["FolderMappingsList"] = null;

                if (ModuleConfiguration.ModuleControl.SupportsPopUps)
                {
                    MappingsGrid.Rebind();
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnNewMappingClick">
          <declaration><![CDATA[protected void OnNewMappingClick(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="160" sc="9" el="169" ec="10">FolderMappings.ascx.cs</location>
            <body hash="32e0c94e7836e22b3ab315434c29cf0f"><![CDATA[{
            try
            {
                Response.Redirect(Globals.NavigateURL(TabId, "EditFolderMapping", "mid=" + ModuleId, "popUp=true"));
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateFolderMappings">
          <declaration><![CDATA[private void UpdateFolderMappings(IList<FolderMappingInfo> folderMappingsList)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="176" sc="9" el="182" ec="10">FolderMappings.ascx.cs</location>
            <body hash="c27a5284e5f0063567c0190d032cb008"><![CDATA[{
            for (var i = 3; i < folderMappingsList.Count; i++)
            {
                folderMappingsList[i].Priority = i + 1;
                _folderMappingController.UpdateFolderMapping(folderMappingsList[i]);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_folderMappingController">
          <declaration><![CDATA[private readonly IFolderMappingController _folderMappingController = ComponentBase<IFolderMappingController, FolderMappingController>.Instance;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="CancelButton">
          <declaration><![CDATA[protected System.Web.UI.WebControls.HyperLink CancelButton;]]></declaration>
          <documentation>
            <summary>
 CancelButton control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="DescriptionLabel">
          <declaration><![CDATA[protected System.Web.UI.WebControls.Label DescriptionLabel;]]></declaration>
          <documentation>
            <summary>
 DescriptionLabel control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="MappingsGrid">
          <declaration><![CDATA[protected DnnGrid MappingsGrid;]]></declaration>
          <documentation>
            <summary>
 MappingsGrid control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="NewMappingButton">
          <declaration><![CDATA[protected System.Web.UI.WebControls.LinkButton NewMappingButton;]]></declaration>
          <documentation>
            <summary>
 NewMappingButton control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="TableHeaderLabel">
          <declaration><![CDATA[protected System.Web.UI.WebControls.Label TableHeaderLabel;]]></declaration>
          <documentation>
            <summary>
 TableHeaderLabel control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
      </fields>
      <properties>
        <property name="FolderMappingsList">
          <declaration><![CDATA[protected List<FolderMappingInfo> FolderMappingsList]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="57" sc="13" el="80" ec="14">FolderMappings.ascx.cs</location>
            <body hash="8798bf9799ccdc797f03ef210efa105f"><![CDATA[{
                try
                {
                    var obj = Session["FolderMappingsList"];
                    if (obj == null)
                    {
                        obj = _folderMappingController.GetFolderMappings(FolderPortalID);
                        if (obj != null)
                        {
                            Session["FolderMappingsList"] = obj;
                        }
                        else
                        {
                            obj = new List<FolderMappingInfo>();
                        }
                    }
                    return (List<FolderMappingInfo>)obj;
                }
                catch
                {
                    Session["FolderMappingsList"] = null;
                }
                return new List<FolderMappingInfo>();
            }]]></body>
          </codeblock>
        </property>
        <property name="FolderPortalID">
          <declaration><![CDATA[public int FolderPortalID]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="49" sc="13" el="51" ec="14">FolderMappings.ascx.cs</location>
            <body hash="f9fe4563e259c67662058a67f01c17bd"><![CDATA[{
                return IsHostMenu ? Null.NullInteger : PortalId;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="PreviewFieldsControl">
      <declaration><![CDATA[public class PreviewFieldsControl : System.Web.UI.UserControl]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public PreviewFieldsControl()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="GenerateFieldsTable">
          <declaration><![CDATA[public void GenerateFieldsTable()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="33" sc="9" el="42" ec="10">PreviewFieldsControl.ascx.cs</location>
            <body hash="27cc713baa19fde8bf928e814ceaac96"><![CDATA[{
            FieldsTable.Rows.Clear();
            foreach (var field in Fields)
            {
                var cellLabel = new TableCell { Text = field.DisplayName + ":", CssClass = "dnnModuleDigitalAssetsPreviewInfoFieldLabel" };
                var cellValue = new TableCell { Text = field.StringValue, CssClass = "dnnModuleDigitalAssetsPreviewInfoFieldValue" };
                var rowField = new TableRow { Cells = { cellLabel, cellValue }, CssClass = "dnnModuleDigitalAssetsPreviewInfoFieldsRow" };
                FieldsTable.Rows.Add(rowField);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="FieldsTable">
          <declaration><![CDATA[protected System.Web.UI.WebControls.Table FieldsTable;]]></declaration>
          <documentation>
            <summary>
 FieldsTable control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
      </fields>
      <properties>
        <property name="Fields">
          <declaration><![CDATA[public List<Field> Fields]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="PreviewPanelControl">
      <declaration><![CDATA[public class PreviewPanelControl : System.Web.UI.UserControl]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public PreviewPanelControl()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="SetController">
          <declaration><![CDATA[public void SetController(IDigitalAssetsController damController)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="73" sc="9" el="75" ec="10">PreviewPanelControl.ascx.cs</location>
            <body hash="80410fd125e1bfac9613c62fc9508699"><![CDATA[{
            Controller = damController;
        }]]></body>
          </codeblock>
        </method>
        <method name="SetModuleConfiguration">
          <declaration><![CDATA[public void SetModuleConfiguration(ModuleInfo moduleConfiguration)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="78" sc="9" el="80" ec="10">PreviewPanelControl.ascx.cs</location>
            <body hash="3138e1b3c75590e284bc6ca66baf922c"><![CDATA[{
            ModuleConfiguration = moduleConfiguration;
        }]]></body>
          </codeblock>
        </method>
        <method name="SetPreviewInfo">
          <declaration><![CDATA[public void SetPreviewInfo(PreviewInfoViewModel previewInfoViewModel)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="62" sc="9" el="70" ec="10">PreviewPanelControl.ascx.cs</location>
            <body hash="9a3dfce6ff025703641ae343b5434e87"><![CDATA[{
            PreviewInfo = previewInfoViewModel;
            if (FieldsControl != null && PreviewInfo != null)
            {
                var fieldsControl = ((PreviewFieldsControl)FieldsControl);
                fieldsControl.Fields = PreviewInfo.Fields;
                fieldsControl.GenerateFieldsTable();
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="FieldsControl">
          <declaration><![CDATA[protected System.Web.UI.UserControl FieldsControl;]]></declaration>
          <documentation>
            <summary>
 FieldsControl control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="ScopeWrapper">
          <declaration><![CDATA[protected System.Web.UI.WebControls.Panel ScopeWrapper;]]></declaration>
          <documentation>
            <summary>
 ScopeWrapper control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
      </fields>
      <properties>
        <property name="Controller">
          <declaration><![CDATA[protected IDigitalAssetsController Controller]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ModuleConfiguration">
          <declaration><![CDATA[protected ModuleInfo ModuleConfiguration]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="PreviewImageUrl">
          <declaration><![CDATA[protected string PreviewImageUrl]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="44" sc="13" el="46" ec="14">PreviewPanelControl.ascx.cs</location>
            <body hash="153d2a5d2c321b0cdb0402aa553496ad"><![CDATA[{
                return PreviewInfo.PreviewImageUrl;
            }]]></body>
          </codeblock>
        </property>
        <property name="PreviewInfo">
          <declaration><![CDATA[protected PreviewInfoViewModel PreviewInfo]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Title">
          <declaration><![CDATA[protected string Title]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="36" sc="13" el="38" ec="14">PreviewPanelControl.ascx.cs</location>
            <body hash="cd9ef8d1239aff687cef7c41143fa6a3"><![CDATA[{
                return PreviewInfo.Title;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="Settings">
      <declaration><![CDATA[public class Settings : ModuleSettingsBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public Settings()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="LoadSettings">
          <declaration><![CDATA[public override void LoadSettings()]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 LoadSettings loads the settings from the Database and displays them
 </summary>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="42" sc="9" el="68" ec="10">Settings.ascx.cs</location>
            <body hash="a6bfc60540d75a6ae88e8a545102f268"><![CDATA[{
            if (Page.IsPostBack)
            {
                return;
            }

            try
            {
                DefaultFolderTypeComboBox.DataSource = new List<FolderMappingInfo>
                    {
                        FolderMappingController.Instance.GetFolderMapping(PortalId, "Standard"),
                        FolderMappingController.Instance.GetFolderMapping(PortalId, "Secure"),
                        FolderMappingController.Instance.GetFolderMapping(PortalId, "Database")
                    };

                DefaultFolderTypeComboBox.DataBind();

                if (Settings.Contains(DefaultFolderTypeIdSetting))
                {
                    DefaultFolderTypeComboBox.SelectedValue = Settings[DefaultFolderTypeIdSetting].ToString();
                }
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateSettings">
          <declaration><![CDATA[public override void UpdateSettings()]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 UpdateSettings saves the modified settings to the Database
 </summary>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="76" sc="9" el="87" ec="10">Settings.ascx.cs</location>
            <body hash="63ed767c875168f805f6442dd12ffa2f"><![CDATA[{
            try
            {
                var modules = new ModuleController();

                modules.UpdateModuleSetting(ModuleId, DefaultFolderTypeIdSetting, DefaultFolderTypeComboBox.SelectedValue);
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="DefaultFolderTypeComboBox">
          <declaration><![CDATA[protected DnnComboBox DefaultFolderTypeComboBox;]]></declaration>
          <documentation>
            <summary>
 DefaultFolderTypeComboBox control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="DefaultFolderTypeIdSetting">
          <declaration><![CDATA[private const string DefaultFolderTypeIdSetting = "DefaultFolderTypeId";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="DefaultFolderTypeLabel">
          <declaration><![CDATA[protected System.Web.UI.UserControl DefaultFolderTypeLabel;]]></declaration>
          <documentation>
            <summary>
 DefaultFolderTypeLabel control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="View">
      <declaration><![CDATA[public class View : PortalModuleBase, IActionable]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private readonly IDigitalAssetsController controller = new DigitalAssetsController();]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="54" sc="9" el="55" ec="82">View.ascx.cs</location>
            <body hash="88f0690ff1545e5452a76d3b10d09a8e"><![CDATA[private readonly IDigitalAssetsController controller = new DigitalAssetsController();
        private readonly ExtensionPointManager epm = new ExtensionPointManager();]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="GetNoControlCharsString">
          <declaration><![CDATA[private static string GetNoControlCharsString(string text)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="115" sc="9" el="123" ec="10">View.ascx.cs</location>
            <body hash="43931d447e434e2dd63d952866d0a309"><![CDATA[{
            var result = new StringBuilder();
            foreach (char c in text.Where(c => !char.IsControl(c)))
            {
                result.Append(c);
            }

            return result.ToString();
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPermissionsForRootFolder">
          <declaration><![CDATA[private IEnumerable<PermissionViewModel> GetPermissionsForRootFolder(IEnumerable<PermissionViewModel> rootPermissions)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="391" sc="9" el="404" ec="10">View.ascx.cs</location>
            <body hash="12a0080ee7fefb14c5a2af6ed14b28f9"><![CDATA[{
            var result = new List<PermissionViewModel>();

            var deniedPermissionsForRoot = new[] { "DELETE", "MANAGE", "COPY" };

            foreach (var permission in rootPermissions)
            {
                result.Add(deniedPermissionsForRoot.Contains(permission.Key)
                               ? new PermissionViewModel { Key = permission.Key, Value = false }
                               : permission);
            }

            return result;
        }]]></body>
          </codeblock>
        </method>
        <method name="GridOnItemCreated">
          <declaration><![CDATA[protected void GridOnItemCreated(object sender, GridItemEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="520" sc="9" el="544" ec="10">View.ascx.cs</location>
            <body hash="bab8ff9d90ec93a2c93fcd7ce1a97e76"><![CDATA[{
            if (e.Item is GridPagerItem)
            {
                var items = new[]
                    {
                        new RadComboBoxItem { Text = "10", Value = "10" },
                        new RadComboBoxItem { Text = "25", Value = "25" },
                        new RadComboBoxItem { Text = "50", Value = "50" },
                        new RadComboBoxItem { Text = "100", Value = "100" },
                        new RadComboBoxItem 
                        { 
                            Text = Localization.GetString("All", LocalResourceFile), 
                            Value = int.MaxValue.ToString(CultureInfo.InvariantCulture) 
                        }
                    };

                var dropDown = (RadComboBox)e.Item.FindControl("PageSizeComboBox");
                dropDown.Items.Clear();
                foreach (var item in items)
                {
                    item.Attributes.Add("ownerTableViewId", e.Item.OwnerTableView.ClientID);
                    dropDown.Items.Add(item);
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="HasViewPermissions">
          <declaration><![CDATA[private bool HasViewPermissions(IEnumerable<PermissionViewModel> permissions)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="386" sc="9" el="388" ec="10">View.ascx.cs</location>
            <body hash="eb8b1fc44f7afc1216bfaa20c1cd283a"><![CDATA[{
            return permissions.Where(permission => permission.Key == "BROWSE" || permission.Key == "READ").Any(permission => permission.Value);
        }]]></body>
          </codeblock>
        </method>
        <method name="InitializeEmptySpaceContextMenu">
          <declaration><![CDATA[private void InitializeEmptySpaceContextMenu()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="351" sc="9" el="383" ec="10">View.ascx.cs</location>
            <body hash="4d6e296aac67c3bbffbc36d5c33c259e"><![CDATA[{
            EmptySpaceMenu.Items.AddRange(new[]
            {
                new DnnMenuItem
                    {
                        Text = Localization.GetString("CreateFolder", LocalResourceFile),
                        Value = "NewFolder",
                        CssClass = "permission_ADD",
                        ImageUrl = IconController.IconURL("FolderCreate", "16x16", "Gray")
                    },    
                new DnnMenuItem
                    {
                        Text = Localization.GetString("RefreshFolder", LocalResourceFile),
                        Value = "RefreshFolder",
                        CssClass = "permission_READ permission_BROWSE",
                        ImageUrl = IconController.IconURL("FolderRefreshSync", "16x16", "Gray")
                    },    
                new DnnMenuItem
                    {
                        Text = Localization.GetString("UploadFiles.Title", LocalResourceFile),
                        Value = "UploadFiles",
                        CssClass = "permission_ADD",
                        ImageUrl = IconController.IconURL("UploadFiles", "16x16", "Gray")
                    },  
                new DnnMenuItem
                    {
                        Text = Localization.GetString("ViewFolderProperties", LocalResourceFile),
                        Value = "Properties",
                        CssClass = "permission_READ permission_BROWSE",
                        ImageUrl = IconController.IconURL("ViewProperties", "16x16", "CtxtMn")
                    },
            });
        }]]></body>
          </codeblock>
        </method>
        <method name="InitializeFolderType">
          <declaration><![CDATA[private void InitializeFolderType()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="126" sc="9" el="129" ec="10">View.ascx.cs</location>
            <body hash="dc9016ad8a370f25dfe9a5cbf5b7a52a"><![CDATA[{
            FolderTypeComboBox.DataSource = controller.GetFolderMappings();
            FolderTypeComboBox.DataBind();
        }]]></body>
          </codeblock>
        </method>
        <method name="InitializeGrid">
          <declaration><![CDATA[private void InitializeGrid()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="132" sc="9" el="154" ec="10">View.ascx.cs</location>
            <body hash="26c4e1862603431f301196129fb8b988"><![CDATA[{
            Grid.MasterTableView.PagerStyle.PrevPageToolTip = LocalizeString("PagerPreviousPage.ToolTip");
            Grid.MasterTableView.PagerStyle.NextPageToolTip = LocalizeString("PagerNextPage.ToolTip");
            Grid.MasterTableView.PagerStyle.FirstPageToolTip = LocalizeString("PagerFirstPage.ToolTip");
            Grid.MasterTableView.PagerStyle.LastPageToolTip = LocalizeString("PagerLastPage.ToolTip");
            Grid.MasterTableView.PagerStyle.PageSizeLabelText = LocalizeString("PagerPageSize.Text");

            foreach (var columnExtension in epm.GetGridColumnExtensionPoints("DigitalAssets", "GridColumns"))
            {
                var column = new DnnGridBoundColumn
                                 {
                                     HeaderText = columnExtension.HeaderText,
                                     DataField = columnExtension.DataField,
                                     UniqueName = columnExtension.UniqueName,
                                     ReadOnly = columnExtension.ReadOnly,
                                     Reorderable = columnExtension.Reorderable,
                                     SortExpression = columnExtension.SortExpression
                                 };
                column.HeaderStyle.Width = columnExtension.HeaderStyleWidth;

                Grid.Columns.AddAt(columnExtension.ColumnAt, column);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="InitializeGridContextMenu">
          <declaration><![CDATA[private void InitializeGridContextMenu()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="276" sc="9" el="348" ec="10">View.ascx.cs</location>
            <body hash="97465b3be7dfb1f6427dfb87df3944a1"><![CDATA[{
            GridMenu.Items.AddRange(new[]
                {
                    new DnnMenuItem
                    {
                        Text = Localization.GetString("Download", LocalResourceFile),
                        Value = "Download",
                        CssClass = "permission_READ permission_BROWSE onlyFiles",
                        ImageUrl = IconController.IconURL("FileDownload", "16x16", "Black")
                    },    
                new DnnMenuItem
                    {
                        Text = Localization.GetString("Rename", LocalResourceFile),
                        Value = "Rename",
                        CssClass = "permission_MANAGE singleItem",
                        ImageUrl = IconController.IconURL("FileRename", "16x16", "Black")
                    },    
                new DnnMenuItem
                    {
                        Text = Localization.GetString("Copy", LocalResourceFile),
                        Value = "Copy",
                        CssClass = "permission_COPY onlyFiles",
                        ImageUrl = IconController.IconURL("FileCopy", "16x16", "Black")
                    },  
                new DnnMenuItem
                    {
                        Text = Localization.GetString("Move", LocalResourceFile),
                        Value = "Move",
                        CssClass = "permission_COPY",
                        ImageUrl = IconController.IconURL("FileMove", "16x16", "Black")
                    }, 
                new DnnMenuItem
                    {
                        Text = Localization.GetString("Delete", LocalResourceFile),
                        Value = "Delete",
                        CssClass = "permission_DELETE",
                        ImageUrl = IconController.IconURL("FileDelete", "16x16", "Black")
                    }, 
                new DnnMenuItem
                    {
                        Text = Localization.GetString("GetUrl", LocalResourceFile),
                        Value = "GetUrl",
                        CssClass = "permission_READ permission_BROWSE singleItem onlyFiles",
                        ImageUrl = IconController.IconURL("FileLink", "16x16", "Black")
                    }, 
                new DnnMenuItem
                    {
                        Text = Localization.GetString("UnzipFile", LocalResourceFile),
                        Value = "UnzipFile",
                        CssClass = "permission_READ permission_BROWSE singleItem onlyFiles",
                        ImageUrl = IconController.IconURL("Unzip", "16x16", "Gray")
                    },
                new DnnMenuItem
                    {
                        Text = Localization.GetString("ViewProperties", LocalResourceFile),
                        Value = "Properties",
                        CssClass = "permission_READ permission_BROWSE singleItem",
                        ImageUrl = IconController.IconURL("ViewProperties", "16x16", "CtxtMn")
                    },                        
                });

            // Dnn Menu Item Extension Point
            foreach (var menuItem in epm.GetMenuItemExtensionPoints("DigitalAssets", "GridContextMenu"))
            {
                GridMenu.Items.Add(new DnnMenuItem
                                       {
                                           Text = menuItem.Text,
                                           Value = menuItem.Value,
                                           CssClass = menuItem.CssClass,
                                           ImageUrl = menuItem.Icon
                                       });
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="InitializeTreeViewContextMenu">
          <declaration><![CDATA[private void InitializeTreeViewContextMenu()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="227" sc="9" el="273" ec="10">View.ascx.cs</location>
            <body hash="772654fa3af3b5ef3dc58227124dadef"><![CDATA[{
            MainContextMenu.Items.AddRange(new[]
            {
                new DnnMenuItem
                    {
                        Text = Localization.GetString("CreateFolder", LocalResourceFile),
                        Value = "NewFolder",
                        CssClass = "permission_ADD",
                        ImageUrl = IconController.IconURL("FolderCreate", "16x16", "Gray")
                    },    
                new DnnMenuItem
                    {
                        Text = Localization.GetString("RefreshFolder", LocalResourceFile),
                        Value = "RefreshFolder",
                        CssClass = "permission_READ permission_BROWSE",
                        ImageUrl = IconController.IconURL("FolderRefreshSync", "16x16", "Gray")
                    },    
                new DnnMenuItem
                    {
                        Text = Localization.GetString("RenameFolder", LocalResourceFile),
                        Value = "RenameFolder",
                        CssClass = "permission_MANAGE",
                        ImageUrl = IconController.IconURL("FileRename", "16x16", "Black")
                    },  
                new DnnMenuItem
                    {
                        Text = Localization.GetString("Move", LocalResourceFile),
                        Value = "Move",
                        CssClass = "permission_COPY",
                        ImageUrl = IconController.IconURL("FileMove", "16x16", "Black")
                    },
                new DnnMenuItem
                    {
                        Text = Localization.GetString("DeleteFolder", LocalResourceFile),
                        Value = "DeleteFolder",
                        CssClass = "permission_DELETE",
                        ImageUrl = IconController.IconURL("FileDelete", "16x16", "Black")
                    }, 
                new DnnMenuItem
                    {
                        Text = Localization.GetString("ViewFolderProperties", LocalResourceFile),
                        Value = "Properties",
                        CssClass = "permission_READ permission_BROWSE",
                        ImageUrl = IconController.IconURL("ViewProperties", "16x16", "CtxtMn")
                    },
            });
        }]]></body>
          </codeblock>
        </method>
        <method name="InitializeTreeViews">
          <declaration><![CDATA[private void InitializeTreeViews()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="186" sc="9" el="224" ec="10">View.ascx.cs</location>
            <body hash="d35439d415a3e4dbf5cb8b15a4b68e15"><![CDATA[{
            var rootFolder = RootFolderViewModel;
            var rootNode = new DnnTreeNode
            {
                ExpandMode = HasViewPermissions(rootFolder.Permissions) ? TreeNodeExpandMode.WebService : TreeNodeExpandMode.ClientSide,
                Text = rootFolder.FolderName,
                ImageUrl = rootFolder.IconUrl,
                Value = rootFolder.FolderID.ToString(CultureInfo.InvariantCulture),
                Category = rootFolder.FolderMappingID.ToString(CultureInfo.InvariantCulture),
                Selected = true,
                Expanded = true
            };      

            var folderId = rootFolder.FolderID;
            var nextNode = rootNode;
            foreach (var folderName in Path.Split('/'))
            {
                LoadSubfolders(nextNode, folderId, folderName, out nextNode, out folderId);
                if (nextNode == null)
                {
                    // The requested folder does not exist or the user does not have permissions
                    break;
                }
            }

            if (nextNode != null)
            {
                nextNode.Expanded = false;
                nextNode.Selected = true;
                rootNode.ExpandMode = TreeNodeExpandMode.ClientSide;
                rootNode.Selected = false;                    
            }

            rootNode.Attributes.Add("permissions", GetPermissionsForRootFolder(rootFolder.Permissions).ToJson());
            FolderTreeView.Nodes.Add(rootNode);
            DestinationTreeView.Nodes.Add(rootNode.Clone());

            InitializeTreeViewContextMenu();
        }]]></body>
          </codeblock>
        </method>
        <method name="LoadSubfolders">
          <declaration><![CDATA[private void LoadSubfolders(DnnTreeNode node, int folderId, string nextFolderName, out DnnTreeNode nextNode, out int nextFolderId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="157" sc="9" el="183" ec="10">View.ascx.cs</location>
            <body hash="4171a1d4fbbd720772152485de3e5cd3"><![CDATA[{
            nextNode = null;
            nextFolderId = 0;
            var folders = controller.GetFolders(folderId);
            foreach (var folder in folders)
            {
                var hasViewPermissions = HasViewPermissions(folder.Permissions);
                var newNode = new DnnTreeNode
                {
                    ExpandMode = folder.HasChildren && hasViewPermissions ? TreeNodeExpandMode.WebService : TreeNodeExpandMode.ClientSide,
                    Text = folder.FolderName,
                    ImageUrl = folder.IconUrl,
                    Value = folder.FolderID.ToString(CultureInfo.InvariantCulture),
                    Category = folder.FolderMappingID.ToString(CultureInfo.InvariantCulture),                    
                };

                newNode.Attributes.Add("permissions", folder.Permissions.ToJson());
                node.Nodes.Add(newNode);

                if (hasViewPermissions && folder.FolderName.Equals(nextFolderName, StringComparison.InvariantCultureIgnoreCase))
                {
                    newNode.Expanded = true;
                    nextNode = newNode;
                    nextFolderId = folder.FolderID;                    
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="463" sc="9" el="491" ec="10">View.ascx.cs</location>
            <body hash="a1095e071fa45776d7a8a175f9038580"><![CDATA[{
            try
            {
                base.OnInit(e);

                ServicesFramework.Instance.RequestAjaxScriptSupport();
                ServicesFramework.Instance.RequestAjaxAntiForgerySupport();
                jQuery.RequestDnnPluginsRegistration();
                jQuery.RegisterFileUpload(Page);

                ClientResourceManager.RegisterScript(Page, "~/js/dnn.modalpopup.js", FileOrder.Js.DnnModalPopup);
                ClientResourceManager.RegisterScript(Page, "~/DesktopModules/DigitalAssets/ClientScripts/dnn.DigitalAssetsController.js", FileOrder.Js.DefaultPriority);

                int i = 1;
                foreach (var script in epm.GetScriptItemExtensionPoints("DigitalAssets"))
                {
                    ClientResourceManager.RegisterScript(Page, script.ScriptName, FileOrder.Js.DefaultPriority + i++);
                }

                ClientResourceManager.RegisterScript(Page, "~/DesktopModules/DigitalAssets/ClientScripts/dnn.DigitalAssets.js", FileOrder.Js.DefaultPriority + i);

                InitializeGrid();
                FolderTypeComboBox.ItemDataBound += OnItemDataBoundFolderTypeComboBox;
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnItemDataBoundFolderTypeComboBox">
          <declaration><![CDATA[private void OnItemDataBoundFolderTypeComboBox(object sender, RadComboBoxItemEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="407" sc="9" el="410" ec="10">View.ascx.cs</location>
            <body hash="4bde87428e89e9210763d04ee2e48470"><![CDATA[{
            var dataSource = (FolderMappingViewModel)e.Item.DataItem;
            e.Item.Attributes["SupportsMappedPaths"] = FolderProvider.GetProviderList()[dataSource.FolderTypeName].SupportsMappedPaths.ToString().ToLowerInvariant();
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="422" sc="9" el="460" ec="10">View.ascx.cs</location>
            <body hash="28dddd0a0b36beae090d66f73e003c26"><![CDATA[{
            try
            {
                base.OnLoad(e);

                if (IsPostBack) return;

                var stateCookie = Request.Cookies["damState-" + UserId];
                var state = HttpUtility.ParseQueryString(Uri.UnescapeDataString(stateCookie != null ? stateCookie.Value : ""));
                
                int folderId;
                if (int.TryParse(Request["folderId"] ?? state["folderId"], out folderId))
                {
                    var folder = FolderManager.Instance.GetFolder(folderId);
                    Path = folder != null ? PathUtils.Instance.RemoveTrailingSlash(folder.FolderPath) : "";
                }
                else
                {
                    Path = "";
                }

                PageSize = Request["pageSize"] ?? state["pageSize"] ?? "10";
                ActiveView = Request["view"] ?? state["view"] ?? "gridview";

                InitializeTreeViews();
                InitializeFolderType();

                InitializeGridContextMenu();

                InitializeEmptySpaceContextMenu();

                FolderNameRegExValidator.ErrorMessage = controller.GetInvalidCharsErrorText();
                FolderNameRegExValidator.ValidationExpression = "^([^" + Regex.Escape(controller.GetInvalidChars()) + "]+)$";
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="controller">
          <declaration><![CDATA[private readonly IDigitalAssetsController controller = new DigitalAssetsController();]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="DestinationTreeView">
          <declaration><![CDATA[protected DnnTreeView DestinationTreeView;]]></declaration>
          <documentation>
            <summary>
 DestinationTreeView control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="EmptySpaceMenu">
          <declaration><![CDATA[protected DnnContextMenu EmptySpaceMenu;]]></declaration>
          <documentation>
            <summary>
 EmptySpaceMenu control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="epm">
          <declaration><![CDATA[private readonly ExtensionPointManager epm = new ExtensionPointManager();]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="FolderListView">
          <declaration><![CDATA[protected DnnListView FolderListView;]]></declaration>
          <documentation>
            <summary>
 FolderListView control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="FolderNameLabel">
          <declaration><![CDATA[protected System.Web.UI.UserControl FolderNameLabel;]]></declaration>
          <documentation>
            <summary>
 FolderNameLabel control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="FolderNameRegExValidator">
          <declaration><![CDATA[protected System.Web.UI.WebControls.RegularExpressionValidator FolderNameRegExValidator;]]></declaration>
          <documentation>
            <summary>
 FolderNameRegExValidator control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="FolderNameRequiredValidator">
          <declaration><![CDATA[protected System.Web.UI.WebControls.RequiredFieldValidator FolderNameRequiredValidator;]]></declaration>
          <documentation>
            <summary>
 FolderNameRequiredValidator control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="FolderNameTextBox">
          <declaration><![CDATA[protected System.Web.UI.WebControls.TextBox FolderNameTextBox;]]></declaration>
          <documentation>
            <summary>
 FolderNameTextBox control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="FolderTreeView">
          <declaration><![CDATA[protected DnnTreeView FolderTreeView;]]></declaration>
          <documentation>
            <summary>
 FolderTreeView control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="FolderTypeComboBox">
          <declaration><![CDATA[protected DnnComboBox FolderTypeComboBox;]]></declaration>
          <documentation>
            <summary>
 FolderTypeComboBox control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="FolderTypeLabel">
          <declaration><![CDATA[protected System.Web.UI.UserControl FolderTypeLabel;]]></declaration>
          <documentation>
            <summary>
 FolderTypeLabel control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="Grid">
          <declaration><![CDATA[protected DnnGrid Grid;]]></declaration>
          <documentation>
            <summary>
 Grid control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="GridMenu">
          <declaration><![CDATA[protected DnnContextMenu GridMenu;]]></declaration>
          <documentation>
            <summary>
 GridMenu control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="LeftPaneContents">
          <declaration><![CDATA[protected System.Web.UI.WebControls.Panel LeftPaneContents;]]></declaration>
          <documentation>
            <summary>
 LeftPaneContents control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="LeftPaneTabsControl">
          <declaration><![CDATA[protected System.Web.UI.HtmlControls.HtmlGenericControl LeftPaneTabsControl;]]></declaration>
          <documentation>
            <summary>
 LeftPaneTabsControl control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="LeftPaneTabsFilesLink">
          <declaration><![CDATA[protected System.Web.UI.WebControls.HyperLink LeftPaneTabsFilesLink;]]></declaration>
          <documentation>
            <summary>
 LeftPaneTabsFilesLink control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="MainContextMenu">
          <declaration><![CDATA[protected DnnTreeViewContextMenu MainContextMenu;]]></declaration>
          <documentation>
            <summary>
 MainContextMenu control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="MainToolBar">
          <declaration><![CDATA[protected ToolBarButtonExtensionControl MainToolBar;]]></declaration>
          <documentation>
            <summary>
 MainToolBar control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="MappedPathLabel">
          <declaration><![CDATA[protected System.Web.UI.UserControl MappedPathLabel;]]></declaration>
          <documentation>
            <summary>
 MappedPathLabel control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="MappedPathRegExValidator">
          <declaration><![CDATA[protected System.Web.UI.WebControls.RegularExpressionValidator MappedPathRegExValidator;]]></declaration>
          <documentation>
            <summary>
 MappedPathRegExValidator control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="MappedPathTextBox">
          <declaration><![CDATA[protected System.Web.UI.WebControls.TextBox MappedPathTextBox;]]></declaration>
          <documentation>
            <summary>
 MappedPathTextBox control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="ParentFolderLabel">
          <declaration><![CDATA[protected System.Web.UI.UserControl ParentFolderLabel;]]></declaration>
          <documentation>
            <summary>
 ParentFolderLabel control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="rootFolderViewModel">
          <declaration><![CDATA[private FolderViewModel rootFolderViewModel;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ScopeWrapper">
          <declaration><![CDATA[protected System.Web.UI.WebControls.Panel ScopeWrapper;]]></declaration>
          <documentation>
            <summary>
 ScopeWrapper control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="SelectionToolBar">
          <declaration><![CDATA[protected ToolBarButtonExtensionControl SelectionToolBar;]]></declaration>
          <documentation>
            <summary>
 SelectionToolBar control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
      </fields>
      <properties>
        <property name="ActiveView">
          <declaration><![CDATA[protected string ActiveView]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="DefaultFolderProviderValues">
          <declaration><![CDATA[protected IEnumerable<string> DefaultFolderProviderValues]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="95" sc="13" el="102" ec="14">View.ascx.cs</location>
            <body hash="57c312ea7980e70e2b8a9a647de948d5"><![CDATA[{
                return new List<string>
                    {
                        FolderMappingController.Instance.GetFolderMapping(controller.CurrentPortalId, "Standard").FolderMappingID.ToString(CultureInfo.InvariantCulture),
                        FolderMappingController.Instance.GetFolderMapping(controller.CurrentPortalId, "Secure").FolderMappingID.ToString(CultureInfo.InvariantCulture),
                        FolderMappingController.Instance.GetFolderMapping(controller.CurrentPortalId, "Database").FolderMappingID.ToString(CultureInfo.InvariantCulture)
                    };
            }]]></body>
          </codeblock>
        </property>
        <property name="InvalidCharacters">
          <declaration><![CDATA[protected string InvalidCharacters]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="63" sc="13" el="65" ec="14">View.ascx.cs</location>
            <body hash="88b310410bc9079a19497da9ca5a2a57"><![CDATA[{
                return GetNoControlCharsString(controller.GetInvalidChars());
            }]]></body>
          </codeblock>
        </property>
        <property name="InvalidCharactersErrorText">
          <declaration><![CDATA[protected string InvalidCharactersErrorText]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="71" sc="13" el="73" ec="14">View.ascx.cs</location>
            <body hash="a651a4b63d7079c8d82c5631785700cf"><![CDATA[{
                return controller.GetInvalidCharsErrorText();
            }]]></body>
          </codeblock>
        </property>
        <property name="MaxUploadSize">
          <declaration><![CDATA[protected int MaxUploadSize]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="79" sc="13" el="81" ec="14">View.ascx.cs</location>
            <body hash="bcaf6aad77009b87a86ce5d6c1eb1133"><![CDATA[{
                return (int)Config.GetMaxUploadSize();
            }]]></body>
          </codeblock>
        </property>
        <property name="ModuleActions">
          <declaration><![CDATA[public ModuleActionCollection ModuleActions]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="496" sc="13" el="516" ec="14">View.ascx.cs</location>
            <body hash="f21bb3ad06e91ad6426606d3202ec6df"><![CDATA[{
                var actions = new ModuleActionCollection();
                if (ModulePermissionController.CanManageModule(ModuleConfiguration))
                {
                    actions.Add(GetNextActionID(), Localization.GetString("ManageFolderTypes", LocalResourceFile), "", "", "../DesktopModules/DigitalAssets/Images/manageFolderTypes.png", EditUrl("FolderMappings"), false, SecurityAccessLevel.Edit, true, false);

                    foreach (var item in epm.GetMenuItemExtensionPoints("DigitalAssets", "ModuleActions"))
                    {
                        if (!IsHostMenu || item.EnabledOnHost)
                        {
                            actions.Add(GetNextActionID(), item.Text, "", "", item.Icon, EditUrl(item.Value), false, SecurityAccessLevel.Edit, true, false);
                        }
                    }
                }
                else
                {
                    actions = new ModuleActionCollection();
                }

                return actions;
            }]]></body>
          </codeblock>
        </property>
        <property name="NavigateUrl">
          <declaration><![CDATA[protected string NavigateUrl]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="87" sc="13" el="89" ec="14">View.ascx.cs</location>
            <body hash="0ffb3a77520cddcf052a8f2ff5932e4e"><![CDATA[{
                return Globals.NavigateURL(TabId, "ControlKey", "mid=" + ModuleId, "popUp=true", "ReturnUrl=" + Server.UrlEncode(Globals.NavigateURL()));
            }]]></body>
          </codeblock>
        </property>
        <property name="PageSize">
          <declaration><![CDATA[protected string PageSize]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Path">
          <declaration><![CDATA[protected string Path]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="RootFolderViewModel">
          <declaration><![CDATA[protected FolderViewModel RootFolderViewModel]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="416" sc="13" el="418" ec="14">View.ascx.cs</location>
            <body hash="a58a2b051f2f931751bb0774e6bb4a64"><![CDATA[{
                return rootFolderViewModel ?? (rootFolderViewModel = controller.GetRootFolder());
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="DotNetNuke.Modules.DigitalAssets.Components.Controllers">
    <class name="DigitalAssetsController">
      <declaration><![CDATA[public class DigitalAssetsController : IDigitalAssetsController, IUpgradeable]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DigitalAssetsController()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="ApplyOrder">
          <declaration><![CDATA[protected static IOrderedQueryable<T> ApplyOrder<T>(IQueryable<T> source, string propertyName, bool asc)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="85" sc="9" el="108" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="5123964e96933c72397dc88308154c3b"><![CDATA[{
            var methodName = asc ? "OrderBy" : "OrderByDescending";
            var arg = Expression.Parameter(typeof(T), "x");

            // Use reflection to mirror LINQ
            var property = typeof(T).GetProperty(propertyName);

            // If property is undefined returns the original source
            if (property == null) return (IOrderedQueryable<T>)source;

            Expression expr = Expression.Property(arg, property);

            var delegateType = typeof(Func<,>).MakeGenericType(typeof(T), property.PropertyType);
            var lambda = Expression.Lambda(delegateType, expr, arg);

            var result = typeof(Queryable).GetMethods().Single(
                    method => method.Name == methodName
                            && method.IsGenericMethodDefinition
                            && method.GetGenericArguments().Length == 2
                            && method.GetParameters().Length == 2)
                    .MakeGenericMethod(typeof(T), property.PropertyType)
                    .Invoke(null, new object[] { source, lambda });
            return (IOrderedQueryable<T>)result;
        }]]></body>
          </codeblock>
        </method>
        <method name="CleanDotsAtTheEndOfTheName">
          <declaration><![CDATA[private static string CleanDotsAtTheEndOfTheName(string name)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="121" sc="9" el="123" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="4301e335a7ffe4c519cbc45f04d02ad7"><![CDATA[{
            return name.Trim().TrimEnd(new[] { '.', ' ' });
        }]]></body>
          </codeblock>
        </method>
        <method name="CopyFile">
          <declaration><![CDATA[public CopyMoveItemViewModel CopyFile(int fileId, int destinationFolderId, bool overwrite)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="731" sc="9" el="762" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="9c18af2d8ef41a200b17b180cce758ce"><![CDATA[{
            var file = FileManager.Instance.GetFile(fileId, true);
            var folder = FolderManager.Instance.GetFolder(destinationFolderId);
            var sourceFolder = FolderManager.Instance.GetFolder(file.FolderId);

            if (!HasPermission(sourceFolder, "COPY"))
            {
                throw new DotNetNukeException(LocalizationHelper.GetString("UserHasNoPermissionToCopyFolder.Error"));
            }

            if (file.FolderId == destinationFolderId)
            {
                var destFileName = Path.GetFileNameWithoutExtension(file.FileName) + "-Copy" + Path.GetExtension(file.FileName);
                var i = 1;
                while (FileManager.Instance.FileExists(folder, destFileName, true))
                {
                    destFileName = Path.GetFileNameWithoutExtension(file.FileName) + "-Copy(" + i + ")" + Path.GetExtension(file.FileName);
                    i++;
                }

                var renamedFile = FileManager.Instance.AddFile(folder, destFileName, FileManager.Instance.GetFileContent(file));
                return new CopyMoveItemViewModel { ItemName = renamedFile.FileName, AlreadyExists = false };
            }

            if (!overwrite && FileManager.Instance.FileExists(folder, file.FileName, true))
            {
                return new CopyMoveItemViewModel { ItemName = file.FileName, AlreadyExists = true };
            }

            var copy = FileManager.Instance.CopyFile(file, folder);
            return new CopyMoveItemViewModel { ItemName = copy.FileName, AlreadyExists = false };
        }]]></body>
          </codeblock>
        </method>
        <method name="CreateFolder">
          <declaration><![CDATA[public FolderViewModel CreateFolder(string folderName, int folderParentID, int folderMappingID, string mappedPath)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="530" sc="9" el="575" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="c904afbccb605b37e1c40ef9d3f180bb"><![CDATA[{
            Requires.NotNullOrEmpty("folderName", folderName);

            var folderMapping = FolderMappingController.Instance.GetFolderMapping(CurrentPortalId, folderMappingID);

            var filterFolderName = CleanDotsAtTheEndOfTheName(folderName);

            if (IsInvalidName(filterFolderName))
            {
                throw new DotNetNukeException(GetInvalidCharsErrorText());
            }

            // Check if the new name is a reserved name
            if (IsReservedName(filterFolderName))
            {
                throw new DotNetNukeException(LocalizationHelper.GetString("FolderFileNameIsReserved.Error"));
            }

            var parentFolder = GetFolderInfo(folderParentID);

            if (!HasPermission(parentFolder, "ADD"))
            {
                throw new DotNetNukeException(LocalizationHelper.GetString("UserHasNoPermissionToAdd.Error"));
            }

            var folderPath = PathUtils.Instance.FormatFolderPath(
                PathUtils.Instance.FormatFolderPath(
                PathUtils.Instance.StripFolderPath(parentFolder.FolderPath).Replace("\\", "/")) + filterFolderName);

            mappedPath = PathUtils.Instance.FormatFolderPath(mappedPath);

            if (!Regex.IsMatch(mappedPath, @"^(?!\s*[\\/]).*$"))
            {
                throw new DotNetNukeException(LocalizationHelper.GetString("InvalidMappedPath.Error"));
            }

            try
            {
                var folder = FolderManager.Instance.AddFolder(folderMapping, folderPath, mappedPath);
                return GetFolderViewModel(folder);
            }
            catch (FolderAlreadyExistsException)
            {
                throw new DotNetNukeException(LocalizationHelper.GetString("FolderAlreadyExists.Error"));
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteFolder">
          <declaration><![CDATA[private bool DeleteFolder(IFolderInfo folder, ICollection<ItemPathViewModel> notDeletedItems)]]></declaration>
          <documentation>
            <summary>
 This method deletes a folder and his content (sub folder and files) in a recursive way.
 </summary>
 <param name="folder">Folder to delete</param>
 <param name="notDeletedItems">The not deleted items list. The subfiles / subfolders for which the user has no permissions to delete</param>
 <retur>True if the Folder has been deleted, otherwise returns false</retur></documentation>
          <codeblock>
            <location sl="181" sc="9" el="217" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="d72da4f6e7a1f86d450b855812d26082"><![CDATA[{
            if (folder == null) return true;

            if (HasPermission(folder, "DELETE"))
            {
                var folderManager = FolderManager.Instance;

                var subfolders = folderManager.GetFolders(folder);

                var allSubFoldersHasBeenDeleted = true;

                foreach (var subfolder in subfolders)
                {
                    if (!DeleteFolder(subfolder, notDeletedItems))
                    {
                        allSubFoldersHasBeenDeleted = false;
                    }
                }

                var files = folderManager.GetFiles(folder, false, true);

                var fileManager = FileManager.Instance;
                foreach (var file in files)
                {
                    fileManager.DeleteFile(file);
                }

                if (allSubFoldersHasBeenDeleted)
                {
                    folderManager.DeleteFolder(folder.FolderID);
                    return true;
                }
            }

            notDeletedItems.Add(GetItemPathViewModel(folder));
            return false;
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteItems">
          <declaration><![CDATA[public IEnumerable<ItemPathViewModel> DeleteItems(IEnumerable<ItemBaseViewModel> items)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="583" sc="9" el="621" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="766729066fadbb7f709ac910be29304c"><![CDATA[{
            var notDeletedItems = new List<ItemPathViewModel>();

            foreach (var item in items)
            {
                if (item.IsFolder)
                {
                    var folder = FolderManager.Instance.GetFolder(item.ItemID);
                    if (folder == null) continue;

                    if (!HasPermission(folder, "DELETE"))
                    {
                        notDeletedItems.Add(GetItemPathViewModel(folder));
                    }
                    else
                    {
                        DeleteFolder(folder, notDeletedItems);
                    }
                }
                else
                {
                    var fileInfo = FileManager.Instance.GetFile(item.ItemID, true);
                    if (fileInfo == null) continue;

                    var folder = FolderManager.Instance.GetFolder(fileInfo.FolderId);

                    if (!HasPermission(folder, "DELETE"))
                    {
                        notDeletedItems.Add(GetItemPathViewModel(fileInfo));
                    }
                    else
                    {
                        FileManager.Instance.DeleteFile(fileInfo);
                    }
                }
            }

            return notDeletedItems;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetAuditFields">
          <declaration><![CDATA[private IEnumerable<Field> GetAuditFields(BaseEntityInfo item)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="350" sc="9" el="384" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="f019adea46b92e871cbea60f567dd071"><![CDATA[{
            var createdByUser = item.CreatedByUser(CurrentPortalId);
            var lastModifiedByUser = item.LastModifiedByUser(CurrentPortalId);
            return new List<Field>
                {                    
                    new Field(DefaultMetadataNames.Created)
                    {
                        DisplayName = LocalizationHelper.GetString("Field" + DefaultMetadataNames.Created + ".DisplayName"), 
                        Type = typeof(DateTime), 
                        Value = item.CreatedOnDate,
                        StringValue = item.CreatedOnDate.ToString()
                    },
                new Field(DefaultMetadataNames.CreatedBy)
                    {
                        DisplayName = LocalizationHelper.GetString("Field" + DefaultMetadataNames.CreatedBy + ".DisplayName"), 
                        Type = typeof(int), 
                        Value = item.CreatedByUserID,
                        StringValue = createdByUser != null ? createdByUser.DisplayName : ""
                    },
                new Field(DefaultMetadataNames.Modified)
                    {
                        DisplayName = LocalizationHelper.GetString("Field" + DefaultMetadataNames.Modified + ".DisplayName"), 
                        Type = typeof(DateTime), 
                        Value = item.LastModifiedOnDate,
                        StringValue = item.LastModifiedOnDate.ToString()
                    },
                new Field(DefaultMetadataNames.ModifiedBy)
                    {
                        DisplayName = LocalizationHelper.GetString("Field" + DefaultMetadataNames.ModifiedBy + ".DisplayName"), 
                        Type = typeof(int), 
                        Value = item.LastModifiedByUserID,
                        StringValue = lastModifiedByUser != null ? lastModifiedByUser.DisplayName : ""
                    }
                };
        }]]></body>
          </codeblock>
        </method>
        <method name="GetDateTimeString">
          <declaration><![CDATA[private static string GetDateTimeString(DateTime datetime)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="126" sc="9" el="128" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="767a8c71a6c69fe53178df8309cb1ec9"><![CDATA[{
            return datetime.ToString("MMM d, yyyy h:mm") + datetime.ToString("tt").ToLower();
        }]]></body>
          </codeblock>
        </method>
        <method name="GetFile">
          <declaration><![CDATA[public ItemViewModel GetFile(int fileID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="578" sc="9" el="580" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="fce8abc5c50395889b9aeaba993b9c71"><![CDATA[{
            return GetItemViewModel(FileManager.Instance.GetFile(fileID, true));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetFileContent">
          <declaration><![CDATA[public Stream GetFileContent(int fileId, out string fileName, out string contentType)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="715" sc="9" el="728" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="73c96732897122ba0a0a9c982cd81019"><![CDATA[{
            var file = FileManager.Instance.GetFile(fileId, true);
            var folder = FolderManager.Instance.GetFolder(file.FolderId);

            if (!HasPermission(folder, "READ"))
            {
                throw new DotNetNukeException(LocalizationHelper.GetString("UserHasNoPermissionToDownload.Error"));
            }

            var content = FileManager.Instance.GetFileContent(file);
            fileName = file.FileName;
            contentType = file.ContentType;
            return content;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetFileIconUrl">
          <declaration><![CDATA[private static string GetFileIconUrl(string extension)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="111" sc="9" el="118" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="a04f274645ee635806c46deabc840342"><![CDATA[{
            if (!string.IsNullOrEmpty(extension) && File.Exists(HttpContext.Current.Server.MapPath(IconController.IconURL("Ext" + extension, "32x32", "Standard"))))
            {
                return IconController.IconURL("Ext" + extension, "32x32", "Standard");
            }

            return IconController.IconURL("ExtFile", "32x32", "Standard");
        }]]></body>
          </codeblock>
        </method>
        <method name="GetFileKindField">
          <declaration><![CDATA[private Field GetFileKindField(IFileInfo file)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="293" sc="9" el="301" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="b78c1965a7fb443d377fcae039624629"><![CDATA[{
            var field = new Field(DefaultMetadataNames.Type);
            field.DisplayName = LocalizationHelper.GetString("Field" + field.Name + ".DisplayName");
            field.Type = file.Extension.GetType();
            field.Value = file.Extension;
            field.StringValue = field.Value.ToString();

            return field;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetFilePreviewFields">
          <declaration><![CDATA[private List<Field> GetFilePreviewFields(IFileInfo file)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="339" sc="9" el="347" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="7e26af3af9fbe39379714b59c2cf439c"><![CDATA[{
            var fields = new List<Field>
                             {
                                 GetFileKindField(file),
                                 GetFileSizeField(file),
                             };
            fields.AddRange(GetAuditFields((FileInfo)file));
            return fields;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetFilePreviewInfo">
          <declaration><![CDATA[public virtual PreviewInfoViewModel GetFilePreviewInfo(IFileInfo file, ItemViewModel item)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="842" sc="9" el="852" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="acee177891d821f43e7ade2853dccb92"><![CDATA[{
            var result = new PreviewInfoViewModel
            {
                Title = LocalizationHelper.GetString("PreviewPanelTitle.Text"),
                ItemId = file.FileId,
                IsFolder = false,
                PreviewImageUrl = item.IconUrl,
                Fields = GetFilePreviewFields(file)
            };
            return result;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetFiles">
          <declaration><![CDATA[private IEnumerable<ItemViewModel> GetFiles(IFolderInfo folder, string orderingField, bool asc)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="158" sc="9" el="172" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="ac90eeaed58f466970771084b2b7572e"><![CDATA[{
            Requires.NotNull("folder", folder);

            if (Host.EnableFileAutoSync)
            {
                FolderManager.Instance.Synchronize(folder.PortalID, folder.FolderPath, false, true);
            }

            // Set default sorting values
            var field = string.IsNullOrEmpty(orderingField) ? "FileName" : orderingField;

            var result = ApplyOrder(FolderManager.Instance.GetFiles(folder, false, true).AsQueryable(), field, asc);

            return result.Select(GetItemViewModel);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetFileSizeField">
          <declaration><![CDATA[private Field GetFileSizeField(IFileInfo file)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="304" sc="9" el="312" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="328700cc666e51e548471dc3bc2dcd2e"><![CDATA[{
            var field = new Field(DefaultMetadataNames.Size);
            field.DisplayName = LocalizationHelper.GetString("Field" + field.Name + ".DisplayName");
            field.Type = file.Size.GetType();
            field.Value = file.Size;
            field.StringValue = string.Format(new FileSizeFormatProvider(), "{0:fs}", file.Size);

            return field;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetFolder">
          <declaration><![CDATA[public FolderViewModel GetFolder(int folderID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="517" sc="9" el="519" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="a8058c2f92d7d84aa8b37a20e9679dd5"><![CDATA[{
            return GetFolderViewModel(GetFolderInfo(folderID));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetFolderContent">
          <declaration><![CDATA[public PageViewModel GetFolderContent(int folderId, int startIndex, int numItems, string sortExpression)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="461" sc="9" el="484" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="d23cd0fd6e93d0ed8b7ca3f5060136d2"><![CDATA[{
            var folder = GetFolderInfo(folderId);

            if (!(HasPermission(folder, "BROWSE") || HasPermission(folder, "READ")))
            {
                //The user cannot access the content               
                return new PageViewModel
                {
                    Folder = GetFolderViewModel(folder),
                    Items = new List<ItemViewModel>(),
                    TotalCount = 0
                };
            }

            var sortProperties = GetSortProperties(sortExpression);
            var content = GetFolders(folder, sortProperties.Column == "ItemName" ? "FolderName" : sortProperties.Column, sortProperties.Ascending).Select(GetItemViewModel).ToList();
            content.AddRange(GetFiles(folder, sortProperties.Column == "ItemName" ? "FileName" : sortProperties.Column, sortProperties.Ascending));
            return new PageViewModel
                {
                    Folder = GetFolderViewModel(folder),
                    Items = content.Skip(startIndex).Take(numItems).ToList(),
                    TotalCount = content.Count()
                };
        }]]></body>
          </codeblock>
        </method>
        <method name="GetFolderIconUrl">
          <declaration><![CDATA[protected string GetFolderIconUrl(int portalId, int folderMappingID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="957" sc="9" el="966" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="7ab880c1c2972efa242ca8e80b358193"><![CDATA[{
            var imageUrl = FolderMappingController.Instance.GetFolderMapping(portalId, folderMappingID).ImageUrl;

            if (File.Exists(HttpContext.Current.Server.MapPath(imageUrl)))
            {
                return imageUrl;
            }

            return IconController.IconURL("ExtClosedFolder", "32x32", "Standard");
        }]]></body>
          </codeblock>
        </method>
        <method name="GetFolderInfo">
          <declaration><![CDATA[private IFolderInfo GetFolderInfo(int folderId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="133" sc="9" el="140" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="54cfac9d8b10cb2c987088f096bd37e3"><![CDATA[{
            var folder = FolderManager.Instance.GetFolder(folderId);
            if (folder == null)
            {
                throw new DotNetNukeException(LocalizationHelper.GetString("FolderDoesNotExists.Error"));
            }
            return folder;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetFolderMappings">
          <declaration><![CDATA[public IEnumerable<FolderMappingViewModel> GetFolderMappings()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="444" sc="9" el="446" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="10dab507a3c4407527bf9a95c6a596df"><![CDATA[{
            return FolderMappingController.Instance.GetFolderMappings(CurrentPortalId).Select(GetFolderMappingViewModel);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetFolderMappingViewModel">
          <declaration><![CDATA[private FolderMappingViewModel GetFolderMappingViewModel(FolderMappingInfo folderMapping)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="260" sc="9" el="267" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="93b82d48cc858443f5c0bdd9a9761ccf"><![CDATA[{
            return new FolderMappingViewModel
            {
                Id = folderMapping.FolderMappingID,
                FolderTypeName = folderMapping.FolderProviderType,
                Name = folderMapping.MappingName
            };
        }]]></body>
          </codeblock>
        </method>
        <method name="GetFolderPreviewFields">
          <declaration><![CDATA[private List<Field> GetFolderPreviewFields(IFolderInfo folder)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="328" sc="9" el="336" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="7eb845cc9d6a401a81193531095986a8"><![CDATA[{
            var fields = new List<Field>
                             {                                 
                                 GetFolderSizeField(folder), 
                                 GetTotalFilesField(folder)
                             };
            fields.AddRange(GetAuditFields((FolderInfo)folder));
            return fields;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetFolderPreviewInfo">
          <declaration><![CDATA[public virtual PreviewInfoViewModel GetFolderPreviewInfo(IFolderInfo folder)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="830" sc="9" el="839" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="2a2a3ad75cad9e9d98aaa0b63aeb4a18"><![CDATA[{
            return new PreviewInfoViewModel
            {
                Title = LocalizationHelper.GetString("PreviewPanelTitle.Text"),
                ItemId = folder.FolderID,
                IsFolder = true,
                PreviewImageUrl = GetFolderIconUrl(folder.PortalID, folder.FolderMappingID),
                Fields = GetFolderPreviewFields(folder)
            };
        }]]></body>
          </codeblock>
        </method>
        <method name="GetFolders">
          <declaration><![CDATA[private IEnumerable<FolderViewModel> GetFolders(IFolderInfo parentFolder, string orderingField, bool asc)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="143" sc="9" el="155" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="8425a0f9ba4d591d794d64e850945e27"><![CDATA[{
            Requires.NotNull("parentFolder", parentFolder);

            var folders = FolderManager.Instance.GetFolders(parentFolder);

            // Set default sorting values
            var field = string.IsNullOrEmpty(orderingField) ? "FolderName" : orderingField;

            // Check if the current user can see the subfolder
            var result = ApplyOrder(folders.Where(folder => (HasPermission(folder, "BROWSE") || HasPermission(folder, "READ"))).AsQueryable(), field, asc);

            return result.Select(GetFolderViewModel);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetFolders">
          <declaration><![CDATA[public IEnumerable<FolderViewModel> GetFolders(int folderId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="449" sc="9" el="458" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="fcdb3e2295597ca2f6919ffa16e56097"><![CDATA[{
            var folder = GetFolderInfo(folderId);

            if (!(HasPermission(folder, "BROWSE") || HasPermission(folder, "READ")))
            {
                //The user cannot access the content
                return new List<FolderViewModel>();
            }
            return GetFolders(folder, "FolderName", true);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetFolderSizeField">
          <declaration><![CDATA[private Field GetFolderSizeField(IFolderInfo folder)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="281" sc="9" el="290" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="e9baec9c28acb5885f36693d45e022fe"><![CDATA[{
            var field = new Field(DefaultMetadataNames.Size);
            var size = FolderManager.Instance.GetFiles(folder, true, false).Sum(f => f.Size);
            field.DisplayName = LocalizationHelper.GetString("Field" + field.Name + ".DisplayName");
            field.Type = size.GetType();
            field.Value = size;
            field.StringValue = string.Format(new FileSizeFormatProvider(), "{0:fs}", size);

            return field;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetFolderViewModel">
          <declaration><![CDATA[private FolderViewModel GetFolderViewModel(IFolderInfo folder)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="244" sc="9" el="257" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="e7c82adaecd183999d073b569dd7bcd0"><![CDATA[{
            return new FolderViewModel
            {
                FolderID = folder.FolderID,
                FolderMappingID = folder.FolderMappingID,
                FolderName = folder.FolderName,
                FolderPath = folder.FolderPath,
                PortalID = folder.PortalID,
                LastModifiedOnDate = GetDateTimeString(folder.LastModifiedOnDate),
                IconUrl = GetFolderIconUrl(folder.PortalID, folder.FolderMappingID),
                Permissions = GetPermissionViewModelCollection(folder),
                HasChildren = folder.HasChildren
            };
        }]]></body>
          </codeblock>
        </method>
        <method name="GetInvalidChars">
          <declaration><![CDATA[public string GetInvalidChars()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="810" sc="9" el="822" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="9752622446b17f401367519062884a80"><![CDATA[{
            var invalidChars = new string(Path.GetInvalidFileNameChars());

            foreach (var ch in Path.GetInvalidPathChars())
            {
                if (invalidChars.IndexOf(ch) == -1) // The ch does not exists
                {
                    invalidChars += ch;
                }
            }

            return invalidChars;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetInvalidCharsErrorText">
          <declaration><![CDATA[public string GetInvalidCharsErrorText()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="825" sc="9" el="827" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="32b6a3acbb4bbc8bcb8d6073e179f11e"><![CDATA[{
            return string.Format(LocalizationHelper.GetString("FolderFileNameHasInvalidcharacters.Error"), "\\:/*?\"<>|");
        }]]></body>
          </codeblock>
        </method>
        <method name="GetItemPathViewModel">
          <declaration><![CDATA[protected ItemPathViewModel GetItemPathViewModel(IFolderInfo folder)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="893" sc="9" el="901" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="add5fe14f33e4fe96daea98602e73930"><![CDATA[{
            return new ItemPathViewModel
            {
                IsFolder = true,
                ItemID = folder.FolderID,
                DisplayPath = folder.DisplayPath,
                IconUrl = GetFolderIconUrl(folder.PortalID, folder.FolderMappingID)
            };
        }]]></body>
          </codeblock>
        </method>
        <method name="GetItemPathViewModel">
          <declaration><![CDATA[protected ItemPathViewModel GetItemPathViewModel(IFileInfo file)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="904" sc="9" el="912" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="9a4aec62469b72c3a39e4cf8c008229c"><![CDATA[{
            return new ItemPathViewModel
            {
                IsFolder = false,
                ItemID = file.FileId,
                DisplayPath = file.RelativePath,
                IconUrl = GetFileIconUrl(file.Extension)
            };
        }]]></body>
          </codeblock>
        </method>
        <method name="GetItemSearchViewModel">
          <declaration><![CDATA[protected virtual ItemViewModel GetItemSearchViewModel(IFileInfo file)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="932" sc="9" el="936" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="c00cdd940acc053a6e567b6cde072e76"><![CDATA[{
            var itemViewModel = GetItemViewModel(file);
            itemViewModel.ParentFolder = file.Folder;
            return itemViewModel;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetItemViewModel">
          <declaration><![CDATA[protected virtual ItemViewModel GetItemViewModel(IFolderInfo folder)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="876" sc="9" el="890" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="79e4b0dbbf9449a316c5e325d549dfae"><![CDATA[{
            return new ItemViewModel
            {
                IsFolder = true,
                ItemID = folder.FolderID,
                ItemName = folder.FolderName,
                LastModifiedOnDate = GetDateTimeString(folder.LastModifiedOnDate),
                PortalID = folder.PortalID,
                IconUrl = GetFolderIconUrl(folder.PortalID, folder.FolderMappingID),
                Permissions = GetPermissionViewModelCollection(folder),
                // TODO: retrieve this data from IFolderInfo
                ParentFolderID = FolderManager.Instance.GetFolder(folder.PortalID, GetParentFolderPath(folder.FolderPath)).FolderID,
                FolderMappingID = folder.FolderMappingID
            };
        }]]></body>
          </codeblock>
        </method>
        <method name="GetItemViewModel">
          <declaration><![CDATA[protected virtual ItemViewModel GetItemViewModel(IFileInfo file)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="915" sc="9" el="929" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="3cf36e0d7f5420d26cbab9cdb48eb453"><![CDATA[{
            var folder = FolderManager.Instance.GetFolder(file.FolderId);
            return new ItemViewModel
            {
                IsFolder = false,
                ItemID = file.FileId,
                ItemName = file.FileName,
                LastModifiedOnDate = GetDateTimeString(file.LastModifiedOnDate),
                PortalID = file.PortalId,
                IconUrl = GetFileIconUrl(file.Extension),
                Permissions = GetPermissionViewModelCollection(folder),
                ParentFolderID = folder.FolderID,
                Size = string.Format(new FileSizeFormatProvider(), "{0:fs}", file.Size)
            };
        }]]></body>
          </codeblock>
        </method>
        <method name="GetItemViewModel">
          <declaration><![CDATA[protected virtual ItemViewModel GetItemViewModel(FolderViewModel folder)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="939" sc="9" el="954" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="eeb6de59acf05a80985fd4a016b6fc58"><![CDATA[{
            return new ItemViewModel
            {
                IsFolder = true,
                ItemID = folder.FolderID,
                ItemName = folder.FolderName,
                LastModifiedOnDate = folder.LastModifiedOnDate,
                PortalID = folder.PortalID,
                IconUrl = folder.IconUrl,
                Permissions = folder.Permissions,
                // TODO: retrieve this data from IFolderInfo
                ParentFolderID = FolderManager.Instance.GetFolder(folder.PortalID, GetParentFolderPath(folder.FolderPath)).FolderID,
                Size = "",
                FolderMappingID = folder.FolderMappingID
            };
        }]]></body>
          </codeblock>
        </method>
        <method name="GetNewFolderPath">
          <declaration><![CDATA[private string GetNewFolderPath(string newFolderName, IFolderInfo folder)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="228" sc="9" el="241" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="071616b2c342f64c3810d4f57eec1029"><![CDATA[{
            if (folder.FolderName.ToLowerInvariant() == newFolderName.ToLowerInvariant())
            {
                return folder.FolderPath;
            }

            var oldFolderPath = folder.FolderPath;
            if (oldFolderPath.Length > 0)
            {
                oldFolderPath = oldFolderPath.Substring(0, oldFolderPath.LastIndexOf(folder.FolderName, StringComparison.Ordinal));
            }

            return PathUtils.Instance.FormatFolderPath(oldFolderPath + newFolderName);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetParentFolderPath">
          <declaration><![CDATA[private string GetParentFolderPath(string folderPath)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="408" sc="9" el="412" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="f3a9168fdef01e12143f658e72847707"><![CDATA[{
            folderPath = PathUtils.Instance.RemoveTrailingSlash(folderPath);

            return folderPath.Substring(0, folderPath.LastIndexOf('/') + 1);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPermissionViewModelCollection">
          <declaration><![CDATA[private IEnumerable<PermissionViewModel> GetPermissionViewModelCollection(IFolderInfo folder)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="220" sc="9" el="225" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="779c957c340489384a2ee82702fb4acf"><![CDATA[{
            // TODO Split permission between CE and PE packages
            string[] permissionKeys = { "ADD", "BROWSE", "COPY", "READ", "WRITE", "DELETE", "MANAGE", "VIEW", "FULLCONTROL" };

            return permissionKeys.Select(permissionKey => new PermissionViewModel { Key = permissionKey, Value = HasPermission(folder, permissionKey) }).ToList();
        }]]></body>
          </codeblock>
        </method>
        <method name="GetRootFolder">
          <declaration><![CDATA[public FolderViewModel GetRootFolder()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="522" sc="9" el="527" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="f8f48946603dc4e3a1b94534f4e1593a"><![CDATA[{
            var folder = GetFolderViewModel(FolderManager.Instance.GetFolder(CurrentPortalId, ""));
            folder.FolderName = LocalizationHelper.GetString("RootFolder.Text");
            folder.FolderPath = RootFolderPath;
            return folder;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetSortProperties">
          <declaration><![CDATA[protected SortProperties GetSortProperties(string sortExpression)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="387" sc="9" el="404" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="66d1e4d4ebee5b78bc922fa9c50956d1"><![CDATA[{
            var sortProperties = new SortProperties()
                {
                    Column = "ItemName",
                    Ascending = true
                };
            if (!string.IsNullOrEmpty(sortExpression))
            {
                var se = sortExpression.Split(' ');
                if (se.Length == 2)
                {
                    sortProperties.Column = se[0];
                    sortProperties.Ascending = se[1] == "ASC";
                }
            }

            return sortProperties;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetTotalFilesField">
          <declaration><![CDATA[private Field GetTotalFilesField(IFolderInfo folder)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="270" sc="9" el="278" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="3d9649fc6cd9e8aabd7690de21e81bed"><![CDATA[{
            var field = new Field(DefaultMetadataNames.TotalFiles);
            field.DisplayName = LocalizationHelper.GetString("Field" + field.Name + ".DisplayName");
            var totalFiles = Convert.ToInt32(FolderManager.Instance.GetFiles(folder, true, false).Count());
            field.Type = totalFiles.GetType();
            field.Value = totalFiles;
            field.StringValue = field.Value.ToString();
            return field;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetUrl">
          <declaration><![CDATA[public string GetUrl(int fileId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="804" sc="9" el="807" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="e2610d0f2aaf4e52a1c764cbb211b891"><![CDATA[{
            var file = FileManager.Instance.GetFile(fileId, true);
            return FileManager.Instance.GetUrl(file);
        }]]></body>
          </codeblock>
        </method>
        <method name="HasPermission">
          <declaration><![CDATA[protected bool HasPermission(IFolderInfo folder, string permissionKey)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="864" sc="9" el="873" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="e3cbe9d1e72e11d918c0c77ca4066dad"><![CDATA[{
            var hasPermision = PortalSettings.Current.UserInfo.IsSuperUser;

            if (!hasPermision && folder != null)
            {
                hasPermision = FolderPermissionController.HasFolderPermission(folder.FolderPermissions, permissionKey);
            }

            return hasPermision;
        }]]></body>
          </codeblock>
        </method>
        <method name="IsInvalidName">
          <declaration><![CDATA[private bool IsInvalidName(string itemName)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="315" sc="9" el="319" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="f5eac0fb4d51b6c276645b0dbeadd06a"><![CDATA[{
            var invalidFilenameChars = new Regex("[" + Regex.Escape(GetInvalidChars()) + "]");

            return invalidFilenameChars.IsMatch(itemName);
        }]]></body>
          </codeblock>
        </method>
        <method name="IsReservedName">
          <declaration><![CDATA[private bool IsReservedName(string name)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="322" sc="9" el="325" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="4acfc9775dce6c6a47fc3b49815564ab"><![CDATA[{
            var reservedNames = new string[] { "CON", "PRN", "AUX", "NUL", "COM1", "COM2", "COM3", "COM4", "COM5", "COM6", "COM7", "COM8", "COM9", "LPT1", "LPT2", "LPT3", "LPT4", "LPT5", "LPT6", "LPT7", "LPT8", "LPT9", "CLOCK$" };
            return reservedNames.Contains(Path.GetFileNameWithoutExtension(name.ToUpperInvariant()));
        }]]></body>
          </codeblock>
        </method>
        <method name="MaskPath">
          <declaration><![CDATA[private static string MaskPath(string strOrigPath)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="80" sc="9" el="82" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="4f9d1c33fc257d60331763b0b447041c"><![CDATA[{
            return strOrigPath.Replace(PathUtils.Instance.RemoveTrailingSlash(CurrentRootFolderPath), "0").Replace("/", "\\");
        }]]></body>
          </codeblock>
        </method>
        <method name="MoveFile">
          <declaration><![CDATA[public CopyMoveItemViewModel MoveFile(int fileId, int destinationFolderId, bool overwrite)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="765" sc="9" el="787" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="d9516772506e9d18675f64f2d81689bc"><![CDATA[{
            var file = FileManager.Instance.GetFile(fileId, true);
            var folder = FolderManager.Instance.GetFolder(destinationFolderId);
            var sourceFolder = FolderManager.Instance.GetFolder(file.FolderId);
            if (!HasPermission(sourceFolder, "COPY"))
            {
                throw new DotNetNukeException(LocalizationHelper.GetString("UserHasNoPermissionToMoveFolder.Error"));
            }

            if (file.FolderId == destinationFolderId)
            {
                // User must not move files in the same folder                
                throw new DotNetNukeException(LocalizationHelper.GetString("DestinationFolderCannotMatchSourceFolder.Error"));
            }

            if (!overwrite && FileManager.Instance.FileExists(folder, file.FileName, true))
            {
                return new CopyMoveItemViewModel { ItemName = file.FileName, AlreadyExists = true };
            }

            var copy = FileManager.Instance.MoveFile(file, folder);
            return new CopyMoveItemViewModel { ItemName = copy.FileName, AlreadyExists = false };
        }]]></body>
          </codeblock>
        </method>
        <method name="MoveFolder">
          <declaration><![CDATA[public CopyMoveItemViewModel MoveFolder(int folderId, int destinationFolderId, bool overwrite)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="790" sc="9" el="801" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="04f5e0c87af216c771de9b0992519e0a"><![CDATA[{
            var folder = GetFolderInfo(folderId);
            if (!HasPermission(folder, "COPY"))
            {
                throw new DotNetNukeException(LocalizationHelper.GetString("UserHasNoPermissionToMoveFolder.Error"));
            }

            var destinationFolder = FolderManager.Instance.GetFolder(destinationFolderId);

            FolderManager.Instance.MoveFolder(folder, destinationFolder);
            return new CopyMoveItemViewModel { ItemName = folder.FolderName, AlreadyExists = false };
        }]]></body>
          </codeblock>
        </method>
        <method name="RenameFile">
          <declaration><![CDATA[public ItemViewModel RenameFile(int fileID, string newFileName)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="624" sc="9" el="664" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="fdfa40edb14ee01e02472ae8c8da8361"><![CDATA[{
            Requires.NotNullOrEmpty("newFileName", newFileName);

            var filteredName = CleanDotsAtTheEndOfTheName(newFileName);

            if (string.IsNullOrEmpty(filteredName))
            {
                throw new DotNetNukeException(string.Format(LocalizationHelper.GetString("FolderFileNameHasInvalidcharacters.Error"), newFileName));
            }

            // Chech if the new name has invalid chars
            if (IsInvalidName(filteredName))
            {
                throw new DotNetNukeException(GetInvalidCharsErrorText());
            }

            // Check if the new name is a reserved name
            if (IsReservedName(filteredName))
            {
                throw new DotNetNukeException(LocalizationHelper.GetString("FolderFileNameIsReserved.Error"));
            }

            var file = FileManager.Instance.GetFile(fileID, true);

            // Check if the name has not changed
            if (file.FileName == newFileName)
            {
                return GetItemViewModel(file);
            }

            // Check if user has appropiate permissions
            var folder = FolderManager.Instance.GetFolder(file.FolderId);
            if (!HasPermission(folder, "MANAGE"))
            {
                throw new DotNetNukeException(LocalizationHelper.GetString("UserHasNoPermissionToEditFile.Error"));
            }

            var renamedFile = FileManager.Instance.RenameFile(file, newFileName);

            return GetItemViewModel(renamedFile);
        }]]></body>
          </codeblock>
        </method>
        <method name="RenameFolder">
          <declaration><![CDATA[public FolderViewModel RenameFolder(int folderID, string newFolderName)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="667" sc="9" el="712" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="5a45244cb31fbf6847b740828775a415"><![CDATA[{
            Requires.NotNullOrEmpty("newFolderName", newFolderName);

            newFolderName = CleanDotsAtTheEndOfTheName(newFolderName);

            // Check if the new name has invalid chars
            if (IsInvalidName(newFolderName))
            {
                throw new DotNetNukeException(GetInvalidCharsErrorText());
            }

            // Check if the name is reserved
            if (IsReservedName(newFolderName))
            {
                throw new DotNetNukeException(LocalizationHelper.GetString("FolderFileNameIsReserved.Error"));
            }

            var folder = GetFolderInfo(folderID);

            // Check if user has appropiate permissions
            if (!HasPermission(folder, "MANAGE"))
            {
                throw new DotNetNukeException(LocalizationHelper.GetString("UserHasNoPermissionToEditFolder.Error"));
            }

            // check if the name has not changed
            if (folder.FolderName == newFolderName)
            {
                return GetFolderViewModel(folder);
            }
            if (folder.FolderName.ToLowerInvariant() == newFolderName.ToLowerInvariant())
            {
                folder.FolderPath = ReplaceFolderName(folder.FolderPath, folder.FolderName, newFolderName);
                return GetFolderViewModel(FolderManager.Instance.UpdateFolder(folder));
            }

            var newFolderPath = GetNewFolderPath(newFolderName, folder);
            // Check if the new folder already exists
            if (FolderManager.Instance.FolderExists(CurrentPortalId, newFolderPath))
            {
                throw new DotNetNukeException(LocalizationHelper.GetString("FolderAlreadyExists.Error"));
            }

            FolderManager.Instance.RenameFolder(folder, newFolderName);
            return GetFolderViewModel(folder);
        }]]></body>
          </codeblock>
        </method>
        <method name="ReplaceFolderName">
          <declaration><![CDATA[private string ReplaceFolderName(string path, string folderName, string newFolderName)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="415" sc="9" el="429" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="9ba250639c87a3f5baf7a49390b15953"><![CDATA[{
            string newPath = PathUtils.Instance.RemoveTrailingSlash(path);
            if (string.IsNullOrEmpty(newPath))
            {
                return path;
            }
            var nameIndex = newPath.LastIndexOf(folderName, StringComparison.Ordinal);
            if (nameIndex == -1)
            {
                return path;
            }

            var result = newPath.Substring(0, nameIndex) + newPath.Substring(nameIndex).Replace(folderName, newFolderName);
            return result;
        }]]></body>
          </codeblock>
        </method>
        <method name="SearchFolderContent">
          <declaration><![CDATA[public PageViewModel SearchFolderContent(int folderId, string pattern, int startIndex, int numItems, string sortExpression)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="500" sc="9" el="514" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="1c6447dce24376f7896a4b60b2b9bbeb"><![CDATA[{
            var folder = GetFolderInfo(folderId);

            var results = FolderManager.Instance.SearchFiles(folder, pattern, true).Select(GetItemSearchViewModel);

            var sortProperties = GetSortProperties(sortExpression);
            results = ApplyOrder(results.AsQueryable(), sortProperties.Column, sortProperties.Ascending);

            return new PageViewModel
                {
                    Folder = GetFolderViewModel(folder),
                    Items = results.Skip(startIndex).Take(numItems).ToList(),
                    TotalCount = results.Count()
                };
        }]]></body>
          </codeblock>
        </method>
        <method name="SyncFolderContent">
          <declaration><![CDATA[public void SyncFolderContent(int folderId, bool recursive)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="487" sc="9" el="497" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="9c7981cc9174e60154bd6bb59f638f00"><![CDATA[{
            var folder = GetFolderInfo(folderId);

            if (!(HasPermission(folder, "BROWSE") || HasPermission(folder, "READ")))
            {
                //The user cannot access the content               
                return;
            }

            FolderManager.Instance.Synchronize(folder.PortalID, folder.FolderPath, recursive, true);
        }]]></body>
          </codeblock>
        </method>
        <method name="UnzipFile">
          <declaration><![CDATA[public ZipExtractViewModel UnzipFile(int fileId, bool overwrite)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="855" sc="9" el="859" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="e57d30079fc8981f838bc03654203c0b"><![CDATA[{
            var file = FileManager.Instance.GetFile(fileId, true);
            FileManager.Instance.UnzipFile(file);
            return null;
        }]]></body>
          </codeblock>
        </method>
        <method name="UpgradeModule">
          <declaration><![CDATA[public string UpgradeModule(string version)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="970" sc="9" el="1015" ec="10">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="ec4c99f1e9ba7700eb7f7c9706c3a114"><![CDATA[{
            try
            {
                switch (version)
                {
                    case "07.01.00":
                        ModuleDefinitionInfo mDef = ModuleDefinitionController.GetModuleDefinitionByFriendlyName("Digital Asset Management");

                        //Add tab to Admin Menu
                        if (mDef != null)
                        {
                            var hostPage = Upgrade.AddHostPage("File Management",
                                                            "Manage assets.",
                                                            "~/Icons/Sigma/Files_16X16_Standard.png",
                                                            "~/Icons/Sigma/Files_32X32_Standard.png",
                                                            true);

                            //Add module to page
                            Upgrade.AddModuleToPage(hostPage, mDef.ModuleDefID, "File Management", "~/Icons/Sigma/Files_32X32_Standard.png", true);

                            Upgrade.AddAdminPages("File Management",
                                                 "Manage assets within the portal",
                                                 "~/Icons/Sigma/Files_16X16_Standard.png",
                                                 "~/Icons/Sigma/Files_32X32_Standard.png",
                                                 true,
                                                 mDef.ModuleDefID,
                                                 "File Management",
                                                 "~/Icons/Sigma/Files_16X16_Standard.png",
                                                 true);
                        }

                        //Remove Host File Manager page
                        Upgrade.RemoveHostPage("File Manager");

                        //Remove Admin File Manager Pages
                        Upgrade.RemoveAdminPages("//Admin//FileManager");

                        break;
                }
                return "Success";
            }
            catch (Exception)
            {
                return "Failed";
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="CurrentPortalId">
          <declaration><![CDATA[public int CurrentPortalId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="436" sc="13" el="438" ec="14">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="280d67236fe0cdac15657bb6e25e25e9"><![CDATA[{
                return IsHostMenu ? Null.NullInteger : PortalSettings.Current.PortalId;
            }]]></body>
          </codeblock>
        </property>
        <property name="CurrentRootFolderPath">
          <declaration><![CDATA[private static string CurrentRootFolderPath]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="66" sc="13" el="68" ec="14">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="b964ae2d596d77f90a687cc5c2bffa02"><![CDATA[{
                return IsHostMenu ? Globals.HostMapPath : PortalSettings.Current.HomeDirectoryMapPath;
            }]]></body>
          </codeblock>
        </property>
        <property name="IsHostMenu">
          <declaration><![CDATA[private static bool IsHostMenu]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="58" sc="13" el="60" ec="14">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="3fe28e1402f3846347d6bead34cd751e"><![CDATA[{
                return Globals.IsHostTab(PortalSettings.Current.ActiveTab.TabID);
            }]]></body>
          </codeblock>
        </property>
        <property name="RootFolderPath">
          <declaration><![CDATA[private static string RootFolderPath]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="74" sc="13" el="76" ec="14">Components\Controllers\DigitalAssetsController.cs</location>
            <body hash="40f5b53adc1dca5c05a5cf5ecb1d42db"><![CDATA[{
                return MaskPath(CurrentRootFolderPath);
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="FileSizeFormatProvider">
      <declaration><![CDATA[public class FileSizeFormatProvider : IFormatProvider, ICustomFormatter]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public FileSizeFormatProvider()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
        <constructor name=".cctor">
          <declaration><![CDATA[static FileSizeFormatProvider()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="31" sc="31" el="33" ec="64">Components\Controllers\FileSizeFormatProvider.cs</location>
            <body hash="2fad33b8898ab4bc3840d507538949d2"><![CDATA[OneKiloByte = 1024;
        private const decimal OneMegaByte = OneKiloByte * 1024;
        private const decimal OneGigaByte = OneMegaByte * 1024;]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="DefaultFormat">
          <declaration><![CDATA[private static string DefaultFormat(string format, object arg, IFormatProvider formatProvider)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="88" sc="9" el="96" ec="10">Components\Controllers\FileSizeFormatProvider.cs</location>
            <body hash="2d10991f574976783f25a770174073f5"><![CDATA[{
            var formattableArg = arg as IFormattable;
            if (formattableArg != null)
            {
                return formattableArg.ToString(format, formatProvider);
            }

            return arg.ToString();
        }]]></body>
          </codeblock>
        </method>
        <method name="Format">
          <declaration><![CDATA[public string Format(string format, object arg, IFormatProvider formatProvider)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="41" sc="9" el="85" ec="10">Components\Controllers\FileSizeFormatProvider.cs</location>
            <body hash="31fb279a143d4aeb3a03d74a3104c47f"><![CDATA[{
            if (format == null || !format.StartsWith(FileSizeFormat))
            {
                return DefaultFormat(format, arg, formatProvider);
            }

            if (arg is string)
            {
                return DefaultFormat(format, arg, formatProvider);
            }

            decimal size;

            try
            {
                size = Convert.ToDecimal(arg);
            }
            catch (InvalidCastException)
            {
                return DefaultFormat(format, arg, formatProvider);
            }

            string suffix;
            if (size >= OneGigaByte)
            {
                size /= OneGigaByte;
                suffix = LocalizationHelper.GetString("SizeGb"); 
            }
            else if (size >= OneMegaByte)
            {
                size /= OneMegaByte;
                suffix = LocalizationHelper.GetString("SizeMb");
            }
            else if (size >= OneKiloByte)
            {
                size /= OneKiloByte;
                suffix = LocalizationHelper.GetString("SizeKb");
            }
            else
            {
                suffix = LocalizationHelper.GetString("SizeB");
            }
            
            return string.Format("{0:N1} {1}", size, suffix);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetFormat">
          <declaration><![CDATA[public object GetFormat(Type formatType)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="36" sc="9" el="38" ec="10">Components\Controllers\FileSizeFormatProvider.cs</location>
            <body hash="48628b7eca5979613ae78c598a11f6c0"><![CDATA[{
            return formatType == typeof(ICustomFormatter) ? this : null;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="FileSizeFormat">
          <declaration><![CDATA[private const string FileSizeFormat = "fs";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="OneGigaByte">
          <declaration><![CDATA[private const decimal OneGigaByte = 1073741824m;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="OneKiloByte">
          <declaration><![CDATA[private const decimal OneKiloByte = 1024m;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="OneMegaByte">
          <declaration><![CDATA[private const decimal OneMegaByte = 1048576m;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="IDigitalAssetsController">
      <declaration><![CDATA[public interface IDigitalAssetsController]]></declaration>
      <documentation>
      </documentation>
      <constructors>
      </constructors>
      <methods>
        <method name="CopyFile">
          <declaration><![CDATA[CopyMoveItemViewModel CopyFile(int fileId, int destinationFolderId, bool overwrite);]]></declaration>
          <documentation>
            <summary>
 Copies a file to the destination folder
 </summary>
 <param name="fileId">File reference to the source file</param>
 <param name="destinationFolderId">Folder reference to the destination folder</param>
 <param name="overwrite">Overwrite destination if a file with the same name already exists</param>
 <returns>The response object with the result of the action</returns></documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="CreateFolder">
          <declaration><![CDATA[FolderViewModel CreateFolder(string folderName, int folderParentID, int folderMappingID, string mappedPath);]]></declaration>
          <documentation>
            <summary>
 Gets a newly created folder.
 </summary>
 <param name="folderName">folderName is the name of the new folder</param>
 <param name="folderParentID">The reference to the parent folder where the new folder will be create</param>
 <param name="folderMappingID">folderMappingID is the mapping related with the new folder</param>
 <param name="mappedPath">mappedPath used for the mapping to folder in remove provider</param>
 <returns>The newly folder created under the specified parent folder</returns></documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="DeleteItems">
          <declaration><![CDATA[IEnumerable<ItemPathViewModel> DeleteItems(IEnumerable<ItemBaseViewModel> items);]]></declaration>
          <documentation>
            <summary>
 Deletes a collection of items (folder and/or files)
 </summary>
 <param name="items">Items list</param>
 <remarks>all the items belong at the same Folder</remarks>
 <returns>The not deleted items list. The subfiles / subfolders for which the user has no permissions to delete</returns></documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="GetFile">
          <declaration><![CDATA[ItemViewModel GetFile(int fileID);]]></declaration>
          <documentation>
            <summary>
 Gets a file entity by providing a file identifier.
 </summary>
 <param name="fileID">The identifier of the file.</param>
 <returns>The fileItem entity.</returns></documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="GetFileContent">
          <declaration><![CDATA[Stream GetFileContent(int fileId, out string fileName, out string contentType);]]></declaration>
          <documentation>
            <summary>
 Get the content of a file, ready to download
 </summary>
 <param name="fileId">File reference to the source file</param>
 <param name="fileName">Returns the name of the file</param>
 <param name="contentType">Returns the content type of the file</param>
 <returns>The file content</returns></documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="GetFilePreviewInfo">
          <declaration><![CDATA[PreviewInfoViewModel GetFilePreviewInfo(IFileInfo file, ItemViewModel item);]]></declaration>
          <documentation>
            <summary>
 Returns a fields set. These fields define the File preview info
 </summary>
 <param name="file">The file</param>
 <param name="item">The file model</param>
 <returns>The Preview info object</returns></documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="GetFolder">
          <declaration><![CDATA[FolderViewModel GetFolder(int folderID);]]></declaration>
          <documentation>
            <summary>
 Gets a folder entity by providing a folder identifier.
 </summary>
 <param name="folderID">The identifier of the folder.</param>
 <returns>The folderItem entity or null if the folder cannot be located.</returns></documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="GetFolderContent">
          <declaration><![CDATA[PageViewModel GetFolderContent(int folderId, int startIndex, int numItems, string sortExpression);]]></declaration>
          <documentation>
            <summary>
 Gets the files and folders contained in the specified folder.
 </summary>
 <param name="folderId">Folder Identifier</param>
 <param name="startIndex">Start index to retrieve items</param>
 <param name="numItems">Max Number of items</param>
 <param name="sortExpression">The sort expression in a SQL format, e.g. FileName ASC</param>
 <returns>The list of files and folders contained in the specified folder paginated</returns></documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="GetFolderMappings">
          <declaration><![CDATA[IEnumerable<FolderMappingViewModel> GetFolderMappings();]]></declaration>
          <documentation>
            <summary>
 Gets the list of the Folder Mappings
 </summary>
 <returns>The list of Folder Mappings</returns></documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="GetFolderPreviewInfo">
          <declaration><![CDATA[PreviewInfoViewModel GetFolderPreviewInfo(IFolderInfo folder);]]></declaration>
          <documentation>
            <summary>
 Returns a fields set. These fields define the Folder preview info
 </summary>
 <param name="folder">The folder model</param>
 <returns>The Preview info object</returns></documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="GetFolders">
          <declaration><![CDATA[IEnumerable<FolderViewModel> GetFolders(int parentFolderId);]]></declaration>
          <documentation>
            <summary>
 Gets the list of subfolders for the specified folder.
 </summary>
 <param name="parentFolderId">The folderItemId of the folder to get the list of subfolders.</param>
 <returns>The list of subfolders for the specified folder.</returns></documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="GetInvalidChars">
          <declaration><![CDATA[string GetInvalidChars();]]></declaration>
          <documentation>
            <summary>
 Returns all invalid chars for folder and file names
 </summary>
 <returns>A string that includes all invalid chars</returns></documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="GetInvalidCharsErrorText">
          <declaration><![CDATA[string GetInvalidCharsErrorText();]]></declaration>
          <documentation>
            <summary>
 Returns the error text when a name contains an invalid character
 </summary>
 <returns>The error text to show when a name contains an invalid character</returns></documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="GetRootFolder">
          <declaration><![CDATA[FolderViewModel GetRootFolder();]]></declaration>
          <documentation>
            <summary>
 Gets the root folder of the current Portal.
 </summary>
 <returns>The root folderItem entity.</returns></documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="GetUrl">
          <declaration><![CDATA[string GetUrl(int fileId);]]></declaration>
          <documentation>
            <summary>
 Get the URL of a file
 </summary>
 <param name="fileId">File reference to the source file</param>
 <returns>The URL of the file</returns></documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="MoveFile">
          <declaration><![CDATA[CopyMoveItemViewModel MoveFile(int fileId, int destinationFolderId, bool overwrite);]]></declaration>
          <documentation>
            <summary>
 Moves a file to the destination folder
 </summary>
 <param name="fileId">File reference to the source file</param>
 <param name="destinationFolderId">Folder reference to the destination folder</param>
 <param name="overwrite">Overwrite destination if a file with the same name already exists</param>
 <returns>The response object with the result of the action</returns></documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="MoveFolder">
          <declaration><![CDATA[CopyMoveItemViewModel MoveFolder(int folderId, int destinationFolderId, bool overwrite);]]></declaration>
          <documentation>
            <summary>
 Moves a Folder to the destination folder
 </summary>
 <param name="folderId">Folder reference to the source file</param>
 <param name="destinationFolderId">Folder reference to the destination folder</param>
 <param name="overwrite">Overwrite destination if a file with the same name already exists</param>
 <returns>The response object with the result of the action</returns></documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="RenameFile">
          <declaration><![CDATA[ItemViewModel RenameFile(int fileID, string newFileName);]]></declaration>
          <documentation>
            <summary>
 Renames a existing file.
 </summary>
 <param name="fileID">File reference to rename</param>
 <param name="newFileName">The new name to set to the file</param>
 <returns>The final renamed file</returns></documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="RenameFolder">
          <declaration><![CDATA[FolderViewModel RenameFolder(int folderID, string newFolderName);]]></declaration>
          <documentation>
            <summary>
 Renames a existing folder.
 </summary>
 <param name="folderID">Folder reference to rename</param>
 <param name="newFolderName">The new name to set to the folder</param>
 <returns>The final moved folder</returns></documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="SearchFolderContent">
          <declaration><![CDATA[PageViewModel SearchFolderContent(int folderId, string pattern, int startIndex, int numItems, string sortExpression);]]></declaration>
          <documentation>
            <summary>
 Searches the files and folders contained in the specified folder.
 </summary>
 <param name="folderId">Folder Identifier</param>
 <param name="pattern">The pattern to search for</param>
 <param name="startIndex">Start index to retrieve items</param>
 <param name="numItems">Max Number of items</param>
 <param name="sortExpression">The sort expression in a SQL format, e.g. FileName ASC</param>
 <returns>The list of files and folders contained in the specified folder paginated</returns></documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="SyncFolderContent">
          <declaration><![CDATA[void SyncFolderContent(int folderId, bool recursive);]]></declaration>
          <documentation>
            <summary>
 Synchronize a folder within the File System
 </summary>
 <param name="folderId">Reference to the folder is going to be synchronized</param>
 <param name="recursive">Indicates if subfolders are going to be synchronized</param></documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="UnzipFile">
          <declaration><![CDATA[ZipExtractViewModel UnzipFile(int fileId, bool overwrite);]]></declaration>
          <documentation>
            <summary>
 Extracts the files and folders contained in the specified zip file to the specified folder.
 </summary>
 <param name="fileId">File reference to the source file</param>
 <param name="overwrite">Overwrite destination if a file with the same name already exists</param>
 <returns>The response object with the result of the action</returns></documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="CurrentPortalId">
          <declaration><![CDATA[int CurrentPortalId]]></declaration>
          <documentation>
            <summary>
 Gets the current Portal Id
 </summary>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="IDigitalAssetsControllerData">
      <declaration><![CDATA[public interface IDigitalAssetsControllerData]]></declaration>
      <documentation>
      </documentation>
      <constructors>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="Edition">
          <declaration><![CDATA[string Edition]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="DotNetNuke.Modules.DigitalAssets.Components.Controllers.Models">
    <class name="CopyMoveItemViewModel">
      <declaration><![CDATA[public class CopyMoveItemViewModel]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public CopyMoveItemViewModel()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="AlreadyExists">
          <declaration><![CDATA[public bool AlreadyExists]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ItemName">
          <declaration><![CDATA[public string ItemName]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="ExtractedItemViewModel">
      <declaration><![CDATA[public class ExtractedItemViewModel]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public ExtractedItemViewModel()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="ErrorMessage">
          <declaration><![CDATA[public string ErrorMessage]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Name">
          <declaration><![CDATA[public string Name]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="Field">
      <declaration><![CDATA[public class Field]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public Field(string name)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="28" sc="9" el="31" ec="10">Components\Controllers\Models\Field.cs</location>
            <body hash="d2829f9c1a6d1dbe35e1f485ceb3b09a"><![CDATA[public Field(string name)
        {
            Name = name;
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="DisplayName">
          <declaration><![CDATA[public string DisplayName]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Name">
          <declaration><![CDATA[public string Name]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="StringValue">
          <declaration><![CDATA[public string StringValue]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Type">
          <declaration><![CDATA[public Type Type]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Value">
          <declaration><![CDATA[public object Value]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="FolderMappingViewModel">
      <declaration><![CDATA[public class FolderMappingViewModel]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public FolderMappingViewModel()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="FolderTypeName">
          <declaration><![CDATA[public string FolderTypeName]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Id">
          <declaration><![CDATA[public int Id]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Name">
          <declaration><![CDATA[public string Name]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="FolderViewModel">
      <declaration><![CDATA[public class FolderViewModel]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public FolderViewModel()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="FolderID">
          <declaration><![CDATA[public int FolderID]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="FolderMappingID">
          <declaration><![CDATA[public int FolderMappingID]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="FolderName">
          <declaration><![CDATA[public string FolderName]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="FolderPath">
          <declaration><![CDATA[public string FolderPath]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="HasChildren">
          <declaration><![CDATA[public bool HasChildren]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="IconUrl">
          <declaration><![CDATA[public string IconUrl]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="LastModifiedOnDate">
          <declaration><![CDATA[public string LastModifiedOnDate]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Permissions">
          <declaration><![CDATA[public IEnumerable<PermissionViewModel> Permissions]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="PortalID">
          <declaration><![CDATA[public int PortalID]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="ItemBaseViewModel">
      <declaration><![CDATA[public class ItemBaseViewModel]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public ItemBaseViewModel()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="IsFolder">
          <declaration><![CDATA[public bool IsFolder]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ItemID">
          <declaration><![CDATA[public int ItemID]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="ItemPathViewModel">
      <declaration><![CDATA[public class ItemPathViewModel : ItemBaseViewModel]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public ItemPathViewModel()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="DisplayPath">
          <declaration><![CDATA[public string DisplayPath]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="IconUrl">
          <declaration><![CDATA[public string IconUrl]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="ItemViewModel">
      <declaration><![CDATA[public class ItemViewModel : ItemBaseViewModel]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public ItemViewModel()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="DisplayName">
          <declaration><![CDATA[public string DisplayName]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="FolderMappingID">
          <declaration><![CDATA[public int? FolderMappingID]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="IconUrl">
          <declaration><![CDATA[public string IconUrl]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ItemName">
          <declaration><![CDATA[public string ItemName]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="LastModifiedOnDate">
          <declaration><![CDATA[public string LastModifiedOnDate]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ParentFolder">
          <declaration><![CDATA[public string ParentFolder]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ParentFolderID">
          <declaration><![CDATA[public int ParentFolderID]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Permissions">
          <declaration><![CDATA[public IEnumerable<PermissionViewModel> Permissions]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="PortalID">
          <declaration><![CDATA[public int PortalID]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Size">
          <declaration><![CDATA[public string Size]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="PageViewModel">
      <declaration><![CDATA[public class PageViewModel]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public PageViewModel()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="Folder">
          <declaration><![CDATA[public FolderViewModel Folder]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Items">
          <declaration><![CDATA[public ICollection<ItemViewModel> Items]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="TotalCount">
          <declaration><![CDATA[public int TotalCount]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="PermissionViewModel">
      <declaration><![CDATA[public class PermissionViewModel]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public PermissionViewModel()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="Key">
          <declaration><![CDATA[public string Key]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Value">
          <declaration><![CDATA[public bool Value]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="PreviewInfoViewModel">
      <declaration><![CDATA[public class PreviewInfoViewModel]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public PreviewInfoViewModel()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
        <field name="Fields">
          <declaration><![CDATA[public List<Field> Fields;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="IsFolder">
          <declaration><![CDATA[public bool IsFolder;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ItemId">
          <declaration><![CDATA[public int ItemId;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="PreviewImageUrl">
          <declaration><![CDATA[public string PreviewImageUrl;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Title">
          <declaration><![CDATA[public string Title;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="SortProperties">
      <declaration><![CDATA[public class SortProperties]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public SortProperties()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="Ascending">
          <declaration><![CDATA[public bool Ascending]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Column">
          <declaration><![CDATA[public string Column]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="ZipExtractViewModel">
      <declaration><![CDATA[public class ZipExtractViewModel]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public ZipExtractViewModel()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="ErrorMessage">
          <declaration><![CDATA[public string ErrorMessage]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Items">
          <declaration><![CDATA[public ICollection<ExtractedItemViewModel> Items]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Ok">
          <declaration><![CDATA[public bool Ok]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="DotNetNuke.Modules.DigitalAssets.Components.ExtensionPoint">
    <class name="IFieldsControl">
      <declaration><![CDATA[public interface IFieldsControl]]></declaration>
      <documentation>
      </documentation>
      <constructors>
      </constructors>
      <methods>
        <method name="PrepareProperties">
          <declaration><![CDATA[void PrepareProperties();]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="SaveProperties">
          <declaration><![CDATA[object SaveProperties();]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="SetController">
          <declaration><![CDATA[void SetController(IDigitalAssetsController damController);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="SetItemViewModel">
          <declaration><![CDATA[void SetItemViewModel(ItemViewModel itemViewModel);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="SetPropertiesAvailability">
          <declaration><![CDATA[void SetPropertiesAvailability(bool availability);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="SetPropertiesVisibility">
          <declaration><![CDATA[void SetPropertiesVisibility(bool visibility);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="Controller">
          <declaration><![CDATA[IDigitalAssetsController Controller]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Item">
          <declaration><![CDATA[ItemViewModel Item]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="LocalizationHelper">
      <declaration><![CDATA[public class LocalizationHelper]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public LocalizationHelper()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="GetString">
          <declaration><![CDATA[public static string GetString(string key)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="33" sc="9" el="35" ec="10">Components\ExtensionPoint\LocalizationHelper.cs</location>
            <body hash="169ed4071b601b517a93f2777abe6bf2"><![CDATA[{
            return Localization.GetString(key, ResourceFile);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="ResourceFile">
          <declaration><![CDATA[private const string ResourceFile = "DesktopModules/DigitalAssets/App_LocalResources/SharedResources";]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="PropertiesTabContentControl">
      <declaration><![CDATA[public class PropertiesTabContentControl : PortalModuleBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public PropertiesTabContentControl()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="add_OnItemUpdated">
          <declaration><![CDATA[public void add_OnItemUpdated(PropertiesTabContentControl.ItemUpdatedHandler value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="DataBindItem">
          <declaration><![CDATA[public virtual void DataBindItem()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="40" sc="9" el="41" ec="10">Components\ExtensionPoint\PropertiesTabContentControl.cs</location>
            <body hash="5953526d08633a4e0fe5340a980f7d11"><![CDATA[{            
        }]]></body>
          </codeblock>
        </method>
        <method name="ItemUpdated">
          <declaration><![CDATA[public virtual void ItemUpdated()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="35" sc="9" el="37" ec="10">Components\ExtensionPoint\PropertiesTabContentControl.cs</location>
            <body hash="a44a9bf3db45db0408a1f7e3d19bcc1c"><![CDATA[{
            OnItemUpdated();
        }]]></body>
          </codeblock>
        </method>
        <method name="remove_OnItemUpdated">
          <declaration><![CDATA[public void remove_OnItemUpdated(PropertiesTabContentControl.ItemUpdatedHandler value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="OnItemUpdated">
          <declaration><![CDATA[private PropertiesTabContentControl.ItemUpdatedHandler OnItemUpdated;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
        <event name="OnItemUpdated">
          <declaration><![CDATA[public event PropertiesTabContentControl.ItemUpdatedHandler OnItemUpdated;]]></declaration>
          <documentation>
          </documentation>
        </event>
      </events>
    </class>
  </namespace>
  <namespace name="DotNetNuke.Modules.DigitalAssets.Components.ExtensionPoint.ToolBarButton">
    <class name="CopyToolBarButtonExtensionPoint">
      <declaration><![CDATA[public class CopyToolBarButtonExtensionPoint : IToolBarButtonExtensionPoint, IExtensionPoint]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public CopyToolBarButtonExtensionPoint()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="Action">
          <declaration><![CDATA[public string Action]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="AltText">
          <declaration><![CDATA[public string AltText]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ButtonId">
          <declaration><![CDATA[public string ButtonId]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="CssClass">
          <declaration><![CDATA[public string CssClass]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Icon">
          <declaration><![CDATA[public string Icon]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Order">
          <declaration><![CDATA[public int Order]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ShowIcon">
          <declaration><![CDATA[public bool ShowIcon]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ShowText">
          <declaration><![CDATA[public bool ShowText]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Text">
          <declaration><![CDATA[public string Text]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="CreateFolderToolBarButtonExtensionPoint">
      <declaration><![CDATA[public class CreateFolderToolBarButtonExtensionPoint : IToolBarButtonExtensionPoint, IExtensionPoint]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public CreateFolderToolBarButtonExtensionPoint()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="Action">
          <declaration><![CDATA[public string Action]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="AltText">
          <declaration><![CDATA[public string AltText]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ButtonId">
          <declaration><![CDATA[public string ButtonId]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="CssClass">
          <declaration><![CDATA[public string CssClass]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Icon">
          <declaration><![CDATA[public string Icon]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Order">
          <declaration><![CDATA[public int Order]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ShowIcon">
          <declaration><![CDATA[public bool ShowIcon]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ShowText">
          <declaration><![CDATA[public bool ShowText]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Text">
          <declaration><![CDATA[public string Text]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DefaultMenuButtonItem">
      <declaration><![CDATA[public class DefaultMenuButtonItem : IMenuButtonItemExtensionPoint, IExtensionPoint]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DefaultMenuButtonItem(string itemId, string itemType, string itemCssClass, string itemText, string itemAction, string itemIcon, int itemOrder, string itemAttributes)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="33" sc="9" el="43" ec="10">Components\ExtensionPoint\ToolBarButton\DefaultMenuButtonItem.cs</location>
            <body hash="e075466d385924768e209a2a823dcf6f"><![CDATA[public DefaultMenuButtonItem(string itemId, string itemType, string itemCssClass, string itemText, string itemAction, string itemIcon, int itemOrder, string itemAttributes)
        {
            ItemId = itemId;
            Attributes = itemAttributes;
            Type = itemType;
            Text = itemText;
            Icon = itemIcon;
            Order = itemOrder;
            CssClass = itemCssClass;
            Action = itemAction;
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="Action">
          <declaration><![CDATA[public string Action]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Attributes">
          <declaration><![CDATA[public string Attributes]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="CssClass">
          <declaration><![CDATA[public string CssClass]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Icon">
          <declaration><![CDATA[public string Icon]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ItemId">
          <declaration><![CDATA[public string ItemId]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Order">
          <declaration><![CDATA[public int Order]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Text">
          <declaration><![CDATA[public string Text]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Type">
          <declaration><![CDATA[public string Type]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DeleteToolBarButtonExtensionPoint">
      <declaration><![CDATA[public class DeleteToolBarButtonExtensionPoint : IToolBarButtonExtensionPoint, IExtensionPoint]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DeleteToolBarButtonExtensionPoint()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="Action">
          <declaration><![CDATA[public string Action]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="AltText">
          <declaration><![CDATA[public string AltText]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ButtonId">
          <declaration><![CDATA[public string ButtonId]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="CssClass">
          <declaration><![CDATA[public string CssClass]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Icon">
          <declaration><![CDATA[public string Icon]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Order">
          <declaration><![CDATA[public int Order]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ShowIcon">
          <declaration><![CDATA[public bool ShowIcon]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ShowText">
          <declaration><![CDATA[public bool ShowText]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Text">
          <declaration><![CDATA[public string Text]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DownloadToolBarButtonExtensionPoint">
      <declaration><![CDATA[public class DownloadToolBarButtonExtensionPoint : IToolBarButtonExtensionPoint, IExtensionPoint]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DownloadToolBarButtonExtensionPoint()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="Action">
          <declaration><![CDATA[public string Action]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="AltText">
          <declaration><![CDATA[public string AltText]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ButtonId">
          <declaration><![CDATA[public string ButtonId]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="CssClass">
          <declaration><![CDATA[public string CssClass]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Icon">
          <declaration><![CDATA[public string Icon]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Order">
          <declaration><![CDATA[public int Order]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ShowIcon">
          <declaration><![CDATA[public bool ShowIcon]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ShowText">
          <declaration><![CDATA[public bool ShowText]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Text">
          <declaration><![CDATA[public string Text]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="GetUrlToolBarButtonExtensionPoint">
      <declaration><![CDATA[public class GetUrlToolBarButtonExtensionPoint : IToolBarButtonExtensionPoint, IExtensionPoint]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public GetUrlToolBarButtonExtensionPoint()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="Action">
          <declaration><![CDATA[public string Action]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="AltText">
          <declaration><![CDATA[public string AltText]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ButtonId">
          <declaration><![CDATA[public string ButtonId]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="CssClass">
          <declaration><![CDATA[public string CssClass]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Icon">
          <declaration><![CDATA[public string Icon]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Order">
          <declaration><![CDATA[public int Order]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ShowIcon">
          <declaration><![CDATA[public bool ShowIcon]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ShowText">
          <declaration><![CDATA[public bool ShowText]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Text">
          <declaration><![CDATA[public string Text]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="GridViewToolBarButtonExtensionPoint">
      <declaration><![CDATA[public class GridViewToolBarButtonExtensionPoint : IToolBarButtonExtensionPoint, IExtensionPoint]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public GridViewToolBarButtonExtensionPoint()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="Action">
          <declaration><![CDATA[public string Action]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="AltText">
          <declaration><![CDATA[public string AltText]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ButtonId">
          <declaration><![CDATA[public string ButtonId]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="CssClass">
          <declaration><![CDATA[public string CssClass]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Icon">
          <declaration><![CDATA[public string Icon]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Order">
          <declaration><![CDATA[public int Order]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ShowIcon">
          <declaration><![CDATA[public bool ShowIcon]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ShowText">
          <declaration><![CDATA[public bool ShowText]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Text">
          <declaration><![CDATA[public string Text]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="ListViewToolBarButtonExtensionPoint">
      <declaration><![CDATA[public class ListViewToolBarButtonExtensionPoint : IToolBarButtonExtensionPoint, IExtensionPoint]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public ListViewToolBarButtonExtensionPoint()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="Action">
          <declaration><![CDATA[public string Action]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="AltText">
          <declaration><![CDATA[public string AltText]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ButtonId">
          <declaration><![CDATA[public string ButtonId]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="CssClass">
          <declaration><![CDATA[public string CssClass]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Icon">
          <declaration><![CDATA[public string Icon]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Order">
          <declaration><![CDATA[public int Order]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ShowIcon">
          <declaration><![CDATA[public bool ShowIcon]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ShowText">
          <declaration><![CDATA[public bool ShowText]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Text">
          <declaration><![CDATA[public string Text]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="MoveToolBarButtonExtensionPoint">
      <declaration><![CDATA[public class MoveToolBarButtonExtensionPoint : IToolBarButtonExtensionPoint, IExtensionPoint]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public MoveToolBarButtonExtensionPoint()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="Action">
          <declaration><![CDATA[public string Action]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="AltText">
          <declaration><![CDATA[public string AltText]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ButtonId">
          <declaration><![CDATA[public string ButtonId]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="CssClass">
          <declaration><![CDATA[public string CssClass]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Icon">
          <declaration><![CDATA[public string Icon]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Order">
          <declaration><![CDATA[public int Order]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ShowIcon">
          <declaration><![CDATA[public bool ShowIcon]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ShowText">
          <declaration><![CDATA[public bool ShowText]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Text">
          <declaration><![CDATA[public string Text]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="RenameToolBarButtonExtensionPoint">
      <declaration><![CDATA[public class RenameToolBarButtonExtensionPoint : IToolBarButtonExtensionPoint, IExtensionPoint]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public RenameToolBarButtonExtensionPoint()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="Action">
          <declaration><![CDATA[public string Action]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="AltText">
          <declaration><![CDATA[public string AltText]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ButtonId">
          <declaration><![CDATA[public string ButtonId]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="CssClass">
          <declaration><![CDATA[public string CssClass]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Icon">
          <declaration><![CDATA[public string Icon]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Order">
          <declaration><![CDATA[public int Order]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ShowIcon">
          <declaration><![CDATA[public bool ShowIcon]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ShowText">
          <declaration><![CDATA[public bool ShowText]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Text">
          <declaration><![CDATA[public string Text]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="SyncToolBarButtonExtensionPoint">
      <declaration><![CDATA[public class SyncToolBarButtonExtensionPoint : IToolBarButtonExtensionPoint, IExtensionPoint]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public SyncToolBarButtonExtensionPoint()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="Action">
          <declaration><![CDATA[public string Action]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="AltText">
          <declaration><![CDATA[public string AltText]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ButtonId">
          <declaration><![CDATA[public string ButtonId]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="CssClass">
          <declaration><![CDATA[public string CssClass]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Icon">
          <declaration><![CDATA[public string Icon]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Order">
          <declaration><![CDATA[public int Order]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ShowIcon">
          <declaration><![CDATA[public bool ShowIcon]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ShowText">
          <declaration><![CDATA[public bool ShowText]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Text">
          <declaration><![CDATA[public string Text]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="SyncToolBarMenuButtonExtensionPoint">
      <declaration><![CDATA[public class SyncToolBarMenuButtonExtensionPoint : IToolBarMenuButtonExtensionPoint, IToolBarButtonExtensionPoint, IExtensionPoint]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public SyncToolBarMenuButtonExtensionPoint()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="Action">
          <declaration><![CDATA[public string Action]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="77" sc="13" el="79" ec="14">Components\ExtensionPoint\ToolBarButton\SyncToolBarMenuButtonExtensionPoint.cs</location>
            <body hash="a666d47702590803494c3dbdc3f5c9ca"><![CDATA[{
                return "dnnModule.digitalAssets.onOpeningRefreshMenu()";
            }]]></body>
          </codeblock>
        </property>
        <property name="AltText">
          <declaration><![CDATA[public string AltText]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="85" sc="13" el="87" ec="14">Components\ExtensionPoint\ToolBarButton\SyncToolBarMenuButtonExtensionPoint.cs</location>
            <body hash="5a1eeece76c1b303b1adb21fcb02f2b4"><![CDATA[{
                return LocalizationHelper.GetString("SyncToolBarMenuButtonExtensionPoint.AltText");
            }]]></body>
          </codeblock>
        </property>
        <property name="ButtonId">
          <declaration><![CDATA[public string ButtonId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="53" sc="13" el="55" ec="14">Components\ExtensionPoint\ToolBarButton\SyncToolBarMenuButtonExtensionPoint.cs</location>
            <body hash="112b8fdde2a8d3d1872febc1ee2c3c8e"><![CDATA[{
                return "DigitalAssetsSyncFolderMenuBtnId";
            }]]></body>
          </codeblock>
        </property>
        <property name="CssClass">
          <declaration><![CDATA[public string CssClass]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="61" sc="13" el="63" ec="14">Components\ExtensionPoint\ToolBarButton\SyncToolBarMenuButtonExtensionPoint.cs</location>
            <body hash="64c90fec78cdcd93ac88bb0e734f3cc7"><![CDATA[{
                return "rightButton rightAligned permission_READ";
            }]]></body>
          </codeblock>
        </property>
        <property name="Icon">
          <declaration><![CDATA[public string Icon]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="117" sc="13" el="119" ec="14">Components\ExtensionPoint\ToolBarButton\SyncToolBarMenuButtonExtensionPoint.cs</location>
            <body hash="f16f4e0ecd95d0f47430b9767210d344"><![CDATA[{
                return "/DesktopModules/DigitalAssets/Images/down.png";
            }]]></body>
          </codeblock>
        </property>
        <property name="Items">
          <declaration><![CDATA[public List<IMenuButtonItemExtensionPoint> Items]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="40" sc="13" el="47" ec="14">Components\ExtensionPoint\ToolBarButton\SyncToolBarMenuButtonExtensionPoint.cs</location>
            <body hash="cdd392f9665f3da2e5d66e4c4b1ded12"><![CDATA[{ 
                return new List<IMenuButtonItemExtensionPoint>
                {
                    new DefaultMenuButtonItem("Refresh", "", "first permission_READ permission_BROWSE", LocalizationHelper.GetString("RefreshMenuItemExtensionPoint.Text"), "dnnModule.digitalAssets.refresFolderFromMenu()", "", 0, ""), 
                    new DefaultMenuButtonItem("Sync", "", "medium permission_MANAGE permission_WRITE", LocalizationHelper.GetString("SyncMenuItemExtensionPoint.Text"), "dnnModule.digitalAssets.syncFromMenu(false)", "", 0, ""), 
                    new DefaultMenuButtonItem("SyncRecursively", "", "last permission_MANAGE permission_WRITE", LocalizationHelper.GetString("SyncRecursivelyMenuItemExtensionPoint.Text"), "dnnModule.digitalAssets.syncFromMenu(true)", "", 0, "")
                }; 
            }]]></body>
          </codeblock>
        </property>
        <property name="MenuCssClass">
          <declaration><![CDATA[public string MenuCssClass]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="69" sc="13" el="71" ec="14">Components\ExtensionPoint\ToolBarButton\SyncToolBarMenuButtonExtensionPoint.cs</location>
            <body hash="16df3b6a5672810f92bfb460d22097ea"><![CDATA[{
                return "DigitalAssetsMenuButton";
            }]]></body>
          </codeblock>
        </property>
        <property name="Order">
          <declaration><![CDATA[public int Order]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="125" sc="13" el="127" ec="14">Components\ExtensionPoint\ToolBarButton\SyncToolBarMenuButtonExtensionPoint.cs</location>
            <body hash="eac28d7747cb4568ff5b29d3b2172bb6"><![CDATA[{
                return 9; 
            }]]></body>
          </codeblock>
        </property>
        <property name="ShowIcon">
          <declaration><![CDATA[public bool ShowIcon]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="101" sc="13" el="103" ec="14">Components\ExtensionPoint\ToolBarButton\SyncToolBarMenuButtonExtensionPoint.cs</location>
            <body hash="f5368e81f663038061ec388beff126aa"><![CDATA[{
                return true;
            }]]></body>
          </codeblock>
        </property>
        <property name="ShowText">
          <declaration><![CDATA[public bool ShowText]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="93" sc="13" el="95" ec="14">Components\ExtensionPoint\ToolBarButton\SyncToolBarMenuButtonExtensionPoint.cs</location>
            <body hash="479cced518a49e9e626d5350fca9bbad"><![CDATA[{
                return false;
            }]]></body>
          </codeblock>
        </property>
        <property name="Text">
          <declaration><![CDATA[public string Text]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="109" sc="13" el="111" ec="14">Components\ExtensionPoint\ToolBarButton\SyncToolBarMenuButtonExtensionPoint.cs</location>
            <body hash="4f3bfa9d9e57f3a414d771a5137b7e18"><![CDATA[{
                return LocalizationHelper.GetString("SyncToolBarMenuButtonExtensionPoint.Text");
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="ToggleLeftPaneToolBarButtonExtensionPoint">
      <declaration><![CDATA[public class ToggleLeftPaneToolBarButtonExtensionPoint : IToolBarButtonExtensionPoint, IExtensionPoint]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public ToggleLeftPaneToolBarButtonExtensionPoint()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="Action">
          <declaration><![CDATA[public string Action]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="AltText">
          <declaration><![CDATA[public string AltText]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ButtonId">
          <declaration><![CDATA[public string ButtonId]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="CssClass">
          <declaration><![CDATA[public string CssClass]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Icon">
          <declaration><![CDATA[public string Icon]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Order">
          <declaration><![CDATA[public int Order]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ShowIcon">
          <declaration><![CDATA[public bool ShowIcon]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ShowText">
          <declaration><![CDATA[public bool ShowText]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Text">
          <declaration><![CDATA[public string Text]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="UnzipFileToolBarButtonExtensionPoint">
      <declaration><![CDATA[public class UnzipFileToolBarButtonExtensionPoint : IToolBarButtonExtensionPoint, IExtensionPoint]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public UnzipFileToolBarButtonExtensionPoint()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="Action">
          <declaration><![CDATA[public string Action]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="AltText">
          <declaration><![CDATA[public string AltText]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ButtonId">
          <declaration><![CDATA[public string ButtonId]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="CssClass">
          <declaration><![CDATA[public string CssClass]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Icon">
          <declaration><![CDATA[public string Icon]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="76" sc="13" el="78" ec="14">Components\ExtensionPoint\ToolBarButton\UnzipFileToolBarButtonExtensionPoint.cs</location>
            <body hash="b90ec653ea6b380c2d9ba663d5e3730e"><![CDATA[{
                return IconController.IconURL("Unzip", "16x16", "Gray"); 
            }]]></body>
          </codeblock>
        </property>
        <property name="Order">
          <declaration><![CDATA[public int Order]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ShowIcon">
          <declaration><![CDATA[public bool ShowIcon]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ShowText">
          <declaration><![CDATA[public bool ShowText]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Text">
          <declaration><![CDATA[public string Text]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="UploadFilesToolBarButtonExtensionPoint">
      <declaration><![CDATA[public class UploadFilesToolBarButtonExtensionPoint : IToolBarButtonExtensionPoint, IExtensionPoint]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public UploadFilesToolBarButtonExtensionPoint()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="Action">
          <declaration><![CDATA[public string Action]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="AltText">
          <declaration><![CDATA[public string AltText]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ButtonId">
          <declaration><![CDATA[public string ButtonId]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="CssClass">
          <declaration><![CDATA[public string CssClass]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Icon">
          <declaration><![CDATA[public string Icon]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Order">
          <declaration><![CDATA[public int Order]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ShowIcon">
          <declaration><![CDATA[public bool ShowIcon]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ShowText">
          <declaration><![CDATA[public bool ShowText]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Text">
          <declaration><![CDATA[public string Text]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="ViewPropertiesSelectionToolBarButtonExtensionPoint">
      <declaration><![CDATA[public class ViewPropertiesSelectionToolBarButtonExtensionPoint : IToolBarButtonExtensionPoint, IExtensionPoint]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public ViewPropertiesSelectionToolBarButtonExtensionPoint()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="Action">
          <declaration><![CDATA[public string Action]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="AltText">
          <declaration><![CDATA[public string AltText]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ButtonId">
          <declaration><![CDATA[public string ButtonId]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="CssClass">
          <declaration><![CDATA[public string CssClass]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Icon">
          <declaration><![CDATA[public string Icon]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="76" sc="13" el="78" ec="14">Components\ExtensionPoint\ToolBarButton\ViewPropertiesSelectionToolBarButtonExtensionPoint.cs</location>
            <body hash="668708b7b86125a25e40eaf25757de69"><![CDATA[{
                return IconController.IconURL("ViewProperties", "16x16", "ToolBar");
            }]]></body>
          </codeblock>
        </property>
        <property name="Order">
          <declaration><![CDATA[public int Order]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ShowIcon">
          <declaration><![CDATA[public bool ShowIcon]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ShowText">
          <declaration><![CDATA[public bool ShowText]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Text">
          <declaration><![CDATA[public string Text]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="DotNetNuke.Modules.DigitalAssets.Components.ExtensionPoint.UserControls">
    <class name="FileFieldsControlExtensionPoint">
      <declaration><![CDATA[public class FileFieldsControlExtensionPoint : IUserControlExtensionPoint, IExtensionPoint]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public FileFieldsControlExtensionPoint()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="Icon">
          <declaration><![CDATA[public string Icon]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Order">
          <declaration><![CDATA[public int Order]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Text">
          <declaration><![CDATA[public string Text]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="UserControlSrc">
          <declaration><![CDATA[public string UserControlSrc]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Visible">
          <declaration><![CDATA[public bool Visible]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="PreviewInfoPanelExtensionPoint">
      <declaration><![CDATA[public class PreviewInfoPanelExtensionPoint : IUserControlExtensionPoint, IExtensionPoint]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public PreviewInfoPanelExtensionPoint()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="Icon">
          <declaration><![CDATA[public string Icon]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Order">
          <declaration><![CDATA[public int Order]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Text">
          <declaration><![CDATA[public string Text]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="UserControlSrc">
          <declaration><![CDATA[public string UserControlSrc]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Visible">
          <declaration><![CDATA[public bool Visible]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="DotNetNuke.Modules.DigitalAssets.Services">
    <class name="ContentServiceController">
      <declaration><![CDATA[public class ContentServiceController : DnnApiController]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public ContentServiceController()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="46" sc="9" el="50" ec="10">Services\ContentServiceController.cs</location>
            <body hash="cc443919b178f31e0fb93bb078733487"><![CDATA[public ContentServiceController()
        {
            var f = new Factory();
            DigitalAssetsController = f.DigitalAssetsController;
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".cctor">
          <declaration><![CDATA[static ContentServiceController()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="44" sc="9" el="44" ec="115">Services\ContentServiceController.cs</location>
            <body hash="89f4d6612ca8fbd62a5ee3bb0955b8f0"><![CDATA[protected static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof(ContentServiceController))]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="CopyFile">
          <declaration><![CDATA[public HttpResponseMessage CopyFile(CopyMoveItemRequest request)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="88" sc="9" el="91" ec="10">Services\ContentServiceController.cs</location>
            <body hash="66aac1891bac199e83e5da6fc89f03b3"><![CDATA[{
            var copyFileResponse = DigitalAssetsController.CopyFile(request.ItemId, request.DestinationFolderId, request.Overwrite);
            return Request.CreateResponse(HttpStatusCode.OK, copyFileResponse);
        }]]></body>
          </codeblock>
        </method>
        <method name="CreateNewFolder">
          <declaration><![CDATA[public HttpResponseMessage CreateNewFolder(CreateNewFolderRequest request)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="128" sc="9" el="131" ec="10">Services\ContentServiceController.cs</location>
            <body hash="73a4e4d65b23c2bf3fb27fdd4a5ed02c"><![CDATA[{
            var folder = DigitalAssetsController.CreateFolder(request.FolderName, request.ParentFolderId, request.FolderMappingId, request.MappedName);
            return Request.CreateResponse(HttpStatusCode.OK, folder);
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteItems">
          <declaration><![CDATA[public HttpResponseMessage DeleteItems(DeleteItemsRequest request)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="72" sc="9" el="75" ec="10">Services\ContentServiceController.cs</location>
            <body hash="316603cded017c72d75f5f187089dd4b"><![CDATA[{
            var notDeletedItems = DigitalAssetsController.DeleteItems(from i in request.Items select new ItemBaseViewModel { ItemID = i.ItemId, IsFolder = i.IsFolder });
            return Request.CreateResponse(HttpStatusCode.OK, notDeletedItems);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetFolderContent">
          <declaration><![CDATA[public HttpResponseMessage GetFolderContent(GetFolderContentRequest r)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="56" sc="9" el="59" ec="10">Services\ContentServiceController.cs</location>
            <body hash="3060bbb0384ae6091633e877df18e601"><![CDATA[{
            var p = DigitalAssetsController.GetFolderContent(r.FolderId, r.StartIndex, r.NumItems, r.SortExpression);
            return Request.CreateResponse(HttpStatusCode.OK, p);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetSubFolders">
          <declaration><![CDATA[public HttpResponseMessage GetSubFolders(GetSubFolderRequest request)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="112" sc="9" el="115" ec="10">Services\ContentServiceController.cs</location>
            <body hash="dd58d14de68db16ce3c3e6b673c5f667"><![CDATA[{
            var subFolders = DigitalAssetsController.GetFolders(request.FolderId);
            return Request.CreateResponse(HttpStatusCode.OK, subFolders);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetUrl">
          <declaration><![CDATA[public HttpResponseMessage GetUrl(GetUrlRequest request)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="152" sc="9" el="155" ec="10">Services\ContentServiceController.cs</location>
            <body hash="a89a89256d551de68f92561bda78a6e5"><![CDATA[{
            var url = DigitalAssetsController.GetUrl(request.FileId);
            return Request.CreateResponse(HttpStatusCode.OK, url);
        }]]></body>
          </codeblock>
        </method>
        <method name="MoveFile">
          <declaration><![CDATA[public HttpResponseMessage MoveFile(CopyMoveItemRequest request)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="96" sc="9" el="99" ec="10">Services\ContentServiceController.cs</location>
            <body hash="1b09e918811d1b93de68bc429d43f79e"><![CDATA[{
            var copyMoveFileResponse = DigitalAssetsController.MoveFile(request.ItemId, request.DestinationFolderId, request.Overwrite);
            return Request.CreateResponse(HttpStatusCode.OK, copyMoveFileResponse);
        }]]></body>
          </codeblock>
        </method>
        <method name="MoveFolder">
          <declaration><![CDATA[public HttpResponseMessage MoveFolder(CopyMoveItemRequest request)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="104" sc="9" el="107" ec="10">Services\ContentServiceController.cs</location>
            <body hash="646ec9fb506a75e35bf16466b0d8b018"><![CDATA[{
            var copyMoveFolderResponse = DigitalAssetsController.MoveFolder(request.ItemId, request.DestinationFolderId, request.Overwrite);
            return Request.CreateResponse(HttpStatusCode.OK, copyMoveFolderResponse);
        }]]></body>
          </codeblock>
        </method>
        <method name="RenameFile">
          <declaration><![CDATA[public HttpResponseMessage RenameFile(RenameFileRequest request)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="80" sc="9" el="83" ec="10">Services\ContentServiceController.cs</location>
            <body hash="fa9b8fd61f4d9a538d772f17fd734ff1"><![CDATA[{
            var itemViewModel = DigitalAssetsController.RenameFile(request.FileId, request.NewFileName);
            return Request.CreateResponse(HttpStatusCode.OK, itemViewModel);
        }]]></body>
          </codeblock>
        </method>
        <method name="RenameFolder">
          <declaration><![CDATA[public HttpResponseMessage RenameFolder(RenameFolderRequest request)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="120" sc="9" el="123" ec="10">Services\ContentServiceController.cs</location>
            <body hash="159cc5643470f5f2acb980a9904a76b0"><![CDATA[{
            DigitalAssetsController.RenameFolder(request.FolderId, request.NewFolderName);
            return Request.CreateResponse(HttpStatusCode.OK, "Success");
        }]]></body>
          </codeblock>
        </method>
        <method name="SearchFolderContent">
          <declaration><![CDATA[public HttpResponseMessage SearchFolderContent(SearchFolderContentRequest r)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="64" sc="9" el="67" ec="10">Services\ContentServiceController.cs</location>
            <body hash="924368340b86fac620dfb5ef555c740b"><![CDATA[{
            var p = DigitalAssetsController.SearchFolderContent(r.FolderId, r.Pattern, r.StartIndex, r.NumItems, r.SortExpression);
            return Request.CreateResponse(HttpStatusCode.OK, p);
        }]]></body>
          </codeblock>
        </method>
        <method name="SynchronizeFolder">
          <declaration><![CDATA[public HttpResponseMessage SynchronizeFolder(SynchronizeFolderRequest request)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="136" sc="9" el="139" ec="10">Services\ContentServiceController.cs</location>
            <body hash="ba268a2d99abbaeb561eb09c183ee26e"><![CDATA[{
            DigitalAssetsController.SyncFolderContent(request.FolderId, request.Recursive);
            return Request.CreateResponse(HttpStatusCode.OK, "Success");            
        }]]></body>
          </codeblock>
        </method>
        <method name="UnzipFile">
          <declaration><![CDATA[public HttpResponseMessage UnzipFile(UnzipFileRequest request)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="144" sc="9" el="147" ec="10">Services\ContentServiceController.cs</location>
            <body hash="0c8da334c0e6919f675032f843b256e9"><![CDATA[{
            DigitalAssetsController.UnzipFile(request.FileId, request.Overwrite);
            return Request.CreateResponse(HttpStatusCode.OK, "Success");
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="Logger">
          <declaration><![CDATA[protected static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof(ContentServiceController));]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="DigitalAssetsController">
          <declaration><![CDATA[protected IDigitalAssetsController DigitalAssetsController]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DamExceptionFilterAttribute">
      <declaration><![CDATA[public class DamExceptionFilterAttribute : ExceptionFilterAttribute]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DamExceptionFilterAttribute()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
        <constructor name=".cctor">
          <declaration><![CDATA[static DamExceptionFilterAttribute()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="32" sc="9" el="32" ec="115">Services\DamExceptionFilterAttribute.cs</location>
            <body hash="89f4d6612ca8fbd62a5ee3bb0955b8f0"><![CDATA[protected static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof(ContentServiceController))]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="OnException">
          <declaration><![CDATA[public override void OnException(HttpActionExecutedContext context)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="35" sc="9" el="41" ec="10">Services\DamExceptionFilterAttribute.cs</location>
            <body hash="1f782169fe1b51cc24801726ad58f38b"><![CDATA[{
            if (context.Exception != null)
            {
                Logger.Error(context.Exception);                
                context.Response = context.Request.CreateErrorResponse(HttpStatusCode.InternalServerError, context.Exception);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="Logger">
          <declaration><![CDATA[protected static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof(ContentServiceController));]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DownloadServiceController">
      <declaration><![CDATA[public class DownloadServiceController : DnnApiController]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DownloadServiceController()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="42" sc="9" el="46" ec="10">Services\DownloadServiceController.cs</location>
            <body hash="63cd4db4e44d33d9b7168a84a6366481"><![CDATA[public DownloadServiceController()
        {
            var f = new Factory();
            DigitalAssetsController = f.DigitalAssetsController;
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".cctor">
          <declaration><![CDATA[static DownloadServiceController()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="40" sc="9" el="40" ec="115">Services\DownloadServiceController.cs</location>
            <body hash="89f4d6612ca8fbd62a5ee3bb0955b8f0"><![CDATA[protected static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof(ContentServiceController))]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="Download">
          <declaration><![CDATA[public HttpResponseMessage Download(int fileId, bool forceDownload)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="52" sc="9" el="62" ec="10">Services\DownloadServiceController.cs</location>
            <body hash="19dcc052b0b79423355bdacdd98f49d0"><![CDATA[{
            var result = new HttpResponseMessage(HttpStatusCode.OK);
            string fileName;
            string contentType;
            var streamContent = DigitalAssetsController.GetFileContent(fileId, out fileName, out contentType);
            result.Content = new StreamContent(streamContent);
            result.Content.Headers.ContentType = new MediaTypeHeaderValue(contentType);
            result.Content.Headers.ContentDisposition = new ContentDispositionHeaderValue(forceDownload ? "attachment" : "inline");
            result.Content.Headers.ContentDisposition.FileName = fileName;
            return result;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="Logger">
          <declaration><![CDATA[protected static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof(ContentServiceController));]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="DigitalAssetsController">
          <declaration><![CDATA[protected IDigitalAssetsController DigitalAssetsController]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="Factory">
      <declaration><![CDATA[public class Factory]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public Factory()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="39" sc="9" el="42" ec="10">Services\Factory.cs</location>
            <body hash="4a69658f4aca6ccfb84233e1f51f1b70"><![CDATA[public Factory()
        {
            ExtensionPointManager.ComposeParts(this);   
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
        <field name="controllers">
          <declaration><![CDATA[private IEnumerable<Lazy<IDigitalAssetsController, IDigitalAssetsControllerData>> controllers;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="DigitalAssetsController">
          <declaration><![CDATA[public IDigitalAssetsController DigitalAssetsController]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="47" sc="13" el="50" ec="14">Services\Factory.cs</location>
            <body hash="e7e6968f00a9849a66178ba8e674633f"><![CDATA[{
                var dac = controllers.SingleOrDefault(c => c.Metadata.Edition == "PE");
                return dac != null ? dac.Value : controllers.Single(c => c.Metadata.Edition == "CE").Value;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="ServiceRouteMapper">
      <declaration><![CDATA[public class ServiceRouteMapper : IServiceRouteMapper]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public ServiceRouteMapper()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="RegisterRoutes">
          <declaration><![CDATA[public void RegisterRoutes(IMapRoute mapRouteManager)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="29" sc="9" el="31" ec="10">Services\ServiceRouteMapper.cs</location>
            <body hash="17c181cb610890d8df95c3768f32d255"><![CDATA[{
            mapRouteManager.MapHttpRoute("DigitalAssets", "default", "{controller}/{action}", new[] { "DotNetNuke.Modules.DigitalAssets.Services" });
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="DotNetNuke.Modules.DigitalAssets.Services.Models">
    <class name="CopyMoveItemRequest">
      <declaration><![CDATA[public class CopyMoveItemRequest]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public CopyMoveItemRequest()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="DestinationFolderId">
          <declaration><![CDATA[public int DestinationFolderId]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ItemId">
          <declaration><![CDATA[public int ItemId]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Overwrite">
          <declaration><![CDATA[public bool Overwrite]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="CreateNewFolderRequest">
      <declaration><![CDATA[public class CreateNewFolderRequest]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public CreateNewFolderRequest()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="FolderMappingId">
          <declaration><![CDATA[public int FolderMappingId]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="FolderName">
          <declaration><![CDATA[public string FolderName]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="MappedName">
          <declaration><![CDATA[public string MappedName]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ParentFolderId">
          <declaration><![CDATA[public int ParentFolderId]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DeleteItem">
      <declaration><![CDATA[public class DeleteItem]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DeleteItem()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="IsFolder">
          <declaration><![CDATA[public bool IsFolder]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ItemId">
          <declaration><![CDATA[public int ItemId]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DeleteItemsRequest">
      <declaration><![CDATA[public class DeleteItemsRequest]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DeleteItemsRequest()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="Items">
          <declaration><![CDATA[public IEnumerable<DeleteItem> Items]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="GetFolderContentRequest">
      <declaration><![CDATA[public class GetFolderContentRequest]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public GetFolderContentRequest()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="FolderId">
          <declaration><![CDATA[public int FolderId]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="NumItems">
          <declaration><![CDATA[public int NumItems]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="SortExpression">
          <declaration><![CDATA[public string SortExpression]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="StartIndex">
          <declaration><![CDATA[public int StartIndex]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="GetSubFolderRequest">
      <declaration><![CDATA[public class GetSubFolderRequest]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public GetSubFolderRequest()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="FolderId">
          <declaration><![CDATA[public int FolderId]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="GetUrlRequest">
      <declaration><![CDATA[public class GetUrlRequest]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public GetUrlRequest()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="FileId">
          <declaration><![CDATA[public int FileId]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="RenameFileRequest">
      <declaration><![CDATA[public class RenameFileRequest]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public RenameFileRequest()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="FileId">
          <declaration><![CDATA[public int FileId]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="NewFileName">
          <declaration><![CDATA[public string NewFileName]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="RenameFolderRequest">
      <declaration><![CDATA[public class RenameFolderRequest]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public RenameFolderRequest()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="FolderId">
          <declaration><![CDATA[public int FolderId]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="NewFolderName">
          <declaration><![CDATA[public string NewFolderName]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="SearchFolderContentRequest">
      <declaration><![CDATA[public class SearchFolderContentRequest]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public SearchFolderContentRequest()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="FolderId">
          <declaration><![CDATA[public int FolderId]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="NumItems">
          <declaration><![CDATA[public int NumItems]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Pattern">
          <declaration><![CDATA[public string Pattern]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="SortExpression">
          <declaration><![CDATA[public string SortExpression]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="StartIndex">
          <declaration><![CDATA[public int StartIndex]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="SynchronizeFolderRequest">
      <declaration><![CDATA[public class SynchronizeFolderRequest]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public SynchronizeFolderRequest()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="FolderId">
          <declaration><![CDATA[public int FolderId]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Recursive">
          <declaration><![CDATA[public bool Recursive]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="UnzipFileRequest">
      <declaration><![CDATA[public class UnzipFileRequest]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public UnzipFileRequest()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="FileId">
          <declaration><![CDATA[public int FileId]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Overwrite">
          <declaration><![CDATA[public bool Overwrite]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
</root>