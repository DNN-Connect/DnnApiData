<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<root file="DotNetNuke.Provider.AspNetProvider.dll" version="06.02.00" generated="2017-06-18 21:57:07Z" generationTime="1.9148516">
  <namespace name="DotNetNuke.Security.Membership">
    <class name="AspNetMembershipProvider">
      <declaration><![CDATA[public class AspNetMembershipProvider : MembershipProvider]]></declaration>
      <documentation>-----------------------------------------------------------------------------
 Project:    DotNetNuke
 Namespace:  DotNetNuke.Provider.AspNetProvider
 Class:      AspNetMembershipProvider
 -----------------------------------------------------------------------------
 <summary>
 The AspNetMembershipProvider overrides the default MembershipProvider to provide
 an AspNet Membership Component (MemberRole) implementation
 </summary>
 <remarks>
 </remarks>
 -----------------------------------------------------------------------------</documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public AspNetMembershipProvider()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="67" sc="9" el="86" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="7fe94838accdc425c822374793858fe4"><![CDATA[public AspNetMembershipProvider()
        {
            _dataProvider = DataProvider.Instance();
            if (_dataProvider == null)
            {
				//get the provider configuration based on the type
                var defaultprovider = DotNetNuke.Data.DataProvider.Instance().DefaultProviderName;
                const string dataProviderNamespace = "DotNetNuke.Security.Membership.Data";
                if (defaultprovider == "SqlDataProvider")
                {
                    _dataProvider = new SqlDataProvider();
                }
                else
                {
                    var providerType = dataProviderNamespace + "." + defaultprovider;
                    _dataProvider = (DataProvider) Reflection.CreateObject(providerType, providerType, true);
                }
                ComponentFactory.RegisterComponentInstance<DataProvider>(_dataProvider);
            }
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="AutoUnlockUser">
          <declaration><![CDATA[private static bool AutoUnlockUser(MembershipUser aspNetUser)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="233" sc="9" el="246" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="1198f5bd99b0e873981b64268e214a4a"><![CDATA[{
            if (Host.AutoAccountUnlockDuration != 0)
            {
                if (aspNetUser.LastLockoutDate < DateTime.Now.AddMinutes(-1*Host.AutoAccountUnlockDuration))
                {
					//Unlock user in Data Store
                    if (aspNetUser.UnlockUser())
                    {
                        return true;
                    }
                }
            }
            return false;
        }]]></body>
          </codeblock>
        </method>
        <method name="ChangePassword">
          <declaration><![CDATA[public override bool ChangePassword(UserInfo user, string oldPassword, string newPassword)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 ChangePassword attempts to change the users password
 </summary>
 <remarks>
 </remarks>
 <param name="user">The user to update.</param>
 <param name="oldPassword">The old password.</param>
 <param name="newPassword">The new password.</param>
 <returns>A Boolean indicating success or failure.</returns>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="680" sc="9" el="701" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="b373bd76cd59fc56fdb7f8ac0347cde5"><![CDATA[{
            MembershipUser aspnetUser = GetMembershipUser(user);
            if (string.IsNullOrEmpty(oldPassword))
            {
                aspnetUser.UnlockUser();
                oldPassword = aspnetUser.GetPassword();
            }
            bool retValue = aspnetUser.ChangePassword(oldPassword, newPassword);
            if (retValue && PasswordRetrievalEnabled && !RequiresQuestionAndAnswer)
            {
                string confirmPassword = aspnetUser.GetPassword();
                if (confirmPassword == newPassword)
                {
                    user.Membership.Password = confirmPassword;
                }
                else
                {
                    retValue = false;
                }
            }
            return retValue;
        }]]></body>
          </codeblock>
        </method>
        <method name="ChangePasswordQuestionAndAnswer">
          <declaration><![CDATA[public override bool ChangePasswordQuestionAndAnswer(UserInfo user, string password, string passwordQuestion, string passwordAnswer)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 ChangePasswordQuestionAndAnswer attempts to change the users password Question
 and PasswordAnswer
 </summary>
 <remarks>
 </remarks>
 <param name="user">The user to update.</param>
 <param name="password">The password.</param>
 <param name="passwordQuestion">The new password question.</param>
 <param name="passwordAnswer">The new password answer.</param>
 <returns>A Boolean indicating success or failure.</returns>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="717" sc="9" el="724" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="ebc5ff7a298a5aa29d57b3fc25864883"><![CDATA[{
            MembershipUser aspnetUser = GetMembershipUser(user);
            if (password == Null.NullString)
            {
                password = aspnetUser.GetPassword();
            }
            return aspnetUser.ChangePasswordQuestionAndAnswer(password, passwordQuestion, passwordAnswer);
        }]]></body>
          </codeblock>
        </method>
        <method name="CreateDNNUser">
          <declaration><![CDATA[private UserCreateStatus CreateDNNUser(ref UserInfo user)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="249" sc="9" el="282" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="258e39566a9b181d2bb7cc4e62ecb264"><![CDATA[{
            var objSecurity = new PortalSecurity();
            string userName = objSecurity.InputFilter(user.Username, PortalSecurity.FilterFlag.NoScripting | PortalSecurity.FilterFlag.NoAngleBrackets | PortalSecurity.FilterFlag.NoMarkup);
            string email = objSecurity.InputFilter(user.Email, PortalSecurity.FilterFlag.NoScripting | PortalSecurity.FilterFlag.NoAngleBrackets | PortalSecurity.FilterFlag.NoMarkup);
            string lastName = objSecurity.InputFilter(user.LastName, PortalSecurity.FilterFlag.NoScripting | PortalSecurity.FilterFlag.NoAngleBrackets | PortalSecurity.FilterFlag.NoMarkup);
            string firstName = objSecurity.InputFilter(user.FirstName, PortalSecurity.FilterFlag.NoScripting | PortalSecurity.FilterFlag.NoAngleBrackets | PortalSecurity.FilterFlag.NoMarkup);
            UserCreateStatus createStatus = UserCreateStatus.Success;
            string displayName = objSecurity.InputFilter(user.DisplayName, PortalSecurity.FilterFlag.NoScripting | PortalSecurity.FilterFlag.NoAngleBrackets | PortalSecurity.FilterFlag.NoMarkup);
            bool updatePassword = user.Membership.UpdatePassword;
            bool isApproved = user.Membership.Approved;
            try
            {
                user.UserID =
                    Convert.ToInt32(_dataProvider.AddUser(user.PortalID,
                                                         userName,
                                                         firstName,
                                                         lastName,
                                                         user.AffiliateID,
                                                         user.IsSuperUser,
                                                         email,
                                                         displayName,
                                                         updatePassword,
                                                         isApproved,
                                                         UserController.GetCurrentUserInfo().UserID));
            }
            catch (Exception ex)
            {
				//Clear User (duplicate User information)
                Exceptions.LogException(ex);
                user = null;
                createStatus = UserCreateStatus.ProviderError;
            }
            return createStatus;
        }]]></body>
          </codeblock>
        </method>
        <method name="CreateMemberhipUser">
          <declaration><![CDATA[private static UserCreateStatus CreateMemberhipUser(UserInfo user)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="285" sc="9" el="348" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="b85e342d80c83ae01162cd9aaeeb1a02"><![CDATA[{
            var portalSecurity = new PortalSecurity();
            string userName = portalSecurity.InputFilter(user.Username, PortalSecurity.FilterFlag.NoScripting | PortalSecurity.FilterFlag.NoAngleBrackets | PortalSecurity.FilterFlag.NoMarkup);
            string email = portalSecurity.InputFilter(user.Email, PortalSecurity.FilterFlag.NoScripting | PortalSecurity.FilterFlag.NoAngleBrackets | PortalSecurity.FilterFlag.NoMarkup);
            MembershipCreateStatus status;
            if (MembershipProviderConfig.RequiresQuestionAndAnswer)
            {
                System.Web.Security.Membership.CreateUser(userName,
                                        user.Membership.Password,
                                        email,
                                        user.Membership.PasswordQuestion,
                                        user.Membership.PasswordAnswer,
                                        true,
                                        out status);
            }
            else
            {
                System.Web.Security.Membership.CreateUser(userName, 
                                        user.Membership.Password, 
                                        email, 
                                        null, 
                                        null, 
                                        true, 
                                        out status);
}
            UserCreateStatus createStatus = UserCreateStatus.Success;
            switch (status)
            {
                case MembershipCreateStatus.DuplicateEmail:
                    createStatus = UserCreateStatus.DuplicateEmail;
                    break;
                case MembershipCreateStatus.DuplicateProviderUserKey:
                    createStatus = UserCreateStatus.DuplicateProviderUserKey;
                    break;
                case MembershipCreateStatus.DuplicateUserName:
                    createStatus = UserCreateStatus.DuplicateUserName;
                    break;
                case MembershipCreateStatus.InvalidAnswer:
                    createStatus = UserCreateStatus.InvalidAnswer;
                    break;
                case MembershipCreateStatus.InvalidEmail:
                    createStatus = UserCreateStatus.InvalidEmail;
                    break;
                case MembershipCreateStatus.InvalidPassword:
                    createStatus = UserCreateStatus.InvalidPassword;
                    break;
                case MembershipCreateStatus.InvalidProviderUserKey:
                    createStatus = UserCreateStatus.InvalidProviderUserKey;
                    break;
                case MembershipCreateStatus.InvalidQuestion:
                    createStatus = UserCreateStatus.InvalidQuestion;
                    break;
                case MembershipCreateStatus.InvalidUserName:
                    createStatus = UserCreateStatus.InvalidUserName;
                    break;
                case MembershipCreateStatus.ProviderError:
                    createStatus = UserCreateStatus.ProviderError;
                    break;
                case MembershipCreateStatus.UserRejected:
                    createStatus = UserCreateStatus.UserRejected;
                    break;
            }
            return createStatus;
        }]]></body>
          </codeblock>
        </method>
        <method name="CreateUser">
          <declaration><![CDATA[public override UserCreateStatus CreateUser(ref UserInfo user)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 CreateUser persists a User to the Data Store
 </summary>
 <remarks>
 </remarks>
 <param name="user">The user to persist to the Data Store.</param>
 <returns>A UserCreateStatus enumeration indicating success or reason for failure.</returns>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="777" sc="9" el="855" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="323a2649e307c8b76cdfcfec6c49a01f"><![CDATA[{
            UserCreateStatus createStatus = ValidateForProfanity(user);

            if (createStatus == UserCreateStatus.AddUser)
            {
                ValidateForDuplicateDisplayName(user, ref createStatus);
            }

            if (createStatus == UserCreateStatus.AddUser)
            {
                try
                {
                    //check if username exists in database for any portal
                    UserInfo objVerifyUser = GetUserByUserName(Null.NullInteger, user.Username);
                    if (objVerifyUser != null)
                    {
                        //the username exists so we should now verify the password
                        if (ValidateUser(user.Username, user.Membership.Password))
                        {
                            //check if user exists for the portal specified
                            objVerifyUser = GetUserByUserName(user.PortalID, user.Username);
                            if (objVerifyUser != null)
                            {
                                if (objVerifyUser.PortalID == user.PortalID && !user.IsSuperUser)
                                {
                                    createStatus = UserCreateStatus.UserAlreadyRegistered;
                                }
                                else
                                {
                                    //SuperUser who is not part of portal
                                    createStatus = UserCreateStatus.AddUserToPortal;
                                }
                            }
                            else
                            {
                                createStatus = UserCreateStatus.AddUserToPortal;
                            }
                        }
                        else
                        {
                            //not the same person - prevent registration
                            createStatus = UserCreateStatus.UsernameAlreadyExists;
                        }
                    }
                    else
                    {
                        //the user does not exist
                        createStatus = UserCreateStatus.AddUser;
                    }

                    //If new user - add to aspnet membership
                    if (createStatus == UserCreateStatus.AddUser)
                    {
                        createStatus = CreateMemberhipUser(user);
                    }

                    //If asp user has been successfully created or we are adding a existing user
                    //to a new portal 
                    if (createStatus == UserCreateStatus.Success || createStatus == UserCreateStatus.AddUserToPortal)
                    {
                        //Create the DNN User Record
                        createStatus = CreateDNNUser(ref user);
                        if (createStatus == UserCreateStatus.Success)
                        {
                            //Persist the Profile to the Data Store
                            ProfileController.UpdateUserProfile(user);
                        }
                    }

                }
                catch (Exception exc) //an unexpected error occurred
                {
                    Exceptions.LogException(exc);
                    createStatus = UserCreateStatus.UnexpectedError;
                }                    
            }
 
            return createStatus;
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteMembershipUser">
          <declaration><![CDATA[private static void DeleteMembershipUser(UserInfo user)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="351" sc="9" el="360" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="10a90366181ea2d36c725d8c7579a455"><![CDATA[{
            try
            {
                System.Web.Security.Membership.DeleteUser(user.Username, true);
            }
            catch (Exception exc)
            {
                DnnLog.Error(exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteUser">
          <declaration><![CDATA[public override bool DeleteUser(UserInfo user)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 DeleteUser deletes a single User from the Data Store
 </summary>
 <remarks>
 </remarks>
 <param name="user">The user to delete from the Data Store.</param>
 <returns>A Boolean indicating success or failure.</returns>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="867" sc="9" el="879" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="581e5df6850df34a9486b0ee78bef970"><![CDATA[{
            var retValue = true;
            try
            {
                _dataProvider.DeleteUserPortal(user.UserID, user.PortalID);
            }
            catch (Exception ex)
            {
                Exceptions.LogException(ex);
                retValue = false;
            }
            return retValue;
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteUsersOnline">
          <declaration><![CDATA[public override void DeleteUsersOnline(int timeWindow)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 Deletes all UserOnline inof from the database that has activity outside of the
 time window
 </summary>
 <remarks>
 </remarks>
 <param name="timeWindow">Time Window in Minutes</param>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="891" sc="9" el="893" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="a967af12f5937ad5d0204c61e3eb9da4"><![CDATA[{
            _dataProvider.DeleteUsersOnline(timeWindow);
        }]]></body>
          </codeblock>
        </method>
        <method name="FillUserAndProfile">
          <declaration><![CDATA[private static UserInfo FillUserAndProfile(int portalId, IDataReader dr)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="422" sc="9" el="491" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="c4a816cf11fc8f7645d8a63a90c802a6"><![CDATA[{
            UserInfo user = null;
            bool bContinue = (String.Equals(dr.GetName(0), "UserID", StringComparison.InvariantCultureIgnoreCase));

            //Ensure the data reader returned is valid
            if (bContinue)
            {
                user = new UserInfo
                            {
                                PortalID = Null.SetNullInteger(dr["PortalID"]),
                                IsSuperUser = Null.SetNullBoolean(dr["IsSuperUser"]),
                                IsDeleted = Null.SetNullBoolean(dr["IsDeleted"]),
                                UserID = Null.SetNullInteger(dr["UserID"]),
                                DisplayName = Null.SetNullString(dr["DisplayName"]),
                                Username = Null.SetNullString(dr["Username"]),
                                Email = Null.SetNullString(dr["Email"]),
                                AffiliateID = Null.SetNullInteger(dr["AffiliateID"])
                            };
                user.AffiliateID = Null.SetNullInteger(Null.SetNull(dr["AffiliateID"], user.AffiliateID));

                UserController.GetUserMembership(user);
                user.Membership.UpdatePassword = Null.SetNullBoolean(dr["UpdatePassword"]);
                if (!user.IsSuperUser)
                {
                    user.Membership.Approved = Null.SetNullBoolean(dr["Authorised"]);
                }
                if (user.PortalID == Null.NullInteger)
                {
                    user.PortalID = portalId;
                }

                var userProfile = new UserProfile(user);
                userProfile.InitialiseProfile(portalId);

                for(int i = 0; i < dr.FieldCount; i++)
                {
                    switch(dr.GetName(i))
                    {
                        case "PortalID":
                        case "IsSuperUser":
                        case "IsDeleted":
                        case "UserID":
                        case "DisplayName":
                        case "Username":
                        case "Email":
                        case "AffiliateID":
                        case "UpdatePassword":
                        case "Authorised":
                        case "CreateDate":
                        case "LastActivityDate":
                        case "LastLockoutDate":
                        case "LastLoginDate":
                        case "LastPasswordChangedDate":
                        case "IsLockedOut":
                        case "PasswordQuestion":
                        case "IsApproved":
                            break;
                        default:
                            //Probably a profile property
                            string name = dr.GetName(i);
                            userProfile.SetProfileProperty(name, Null.SetNullString(dr[name]));
                            break;
                    }
                }

                user.Profile = userProfile;

            }
            return user;          
        }]]></body>
          </codeblock>
        </method>
        <method name="FillUserCollection">
          <declaration><![CDATA[private static ArrayList FillUserCollection(int portalId, IDataReader dr, ref int totalRecords)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="363" sc="9" el="393" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="d893eceeb502ba711c4d58ee99a9ea63"><![CDATA[{
            //Note:  the DataReader returned from this method should contain 2 result sets.  The first set
            //       contains the TotalRecords, that satisfy the filter, the second contains the page
            //       of data
            var arrUsers = new ArrayList();
            try
            {
                while (dr.Read())
                {
                    //fill business object
                    UserInfo user = FillUserInfo(portalId, dr, false);
                    //add to collection
                    arrUsers.Add(user);
                }
                //Get the next result (containing the total)
                dr.NextResult();

                //Get the total no of records from the second result
                totalRecords = Globals.GetTotalRecords(ref dr);
            }
            catch (Exception exc)
            {
                Exceptions.LogException(exc);
            }
            finally
            {
                //close datareader
                CBO.CloseDataReader(dr, true);
            }
            return arrUsers;
        }]]></body>
          </codeblock>
        </method>
        <method name="FillUserCollection">
          <declaration><![CDATA[public static ArrayList FillUserCollection(int portalId, IDataReader dr)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1542" sc="9" el="1567" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="0ecd46535519990d080092649e01bf54"><![CDATA[{
            //Note:  the DataReader returned from this method should contain 2 result sets.  The first set
            //       contains the TotalRecords, that satisfy the filter, the second contains the page
            //       of data
            var arrUsers = new ArrayList();
            try
            {
                while (dr.Read())
                {
                    //fill business object
                    UserInfo user = FillUserInfo(portalId, dr, false);
                    //add to collection
                    arrUsers.Add(user);
                }
            }
            catch (Exception exc)
            {
                Exceptions.LogException(exc);
            }
            finally
            {
                //close datareader
                CBO.CloseDataReader(dr, true);
            }
            return arrUsers;
        }]]></body>
          </codeblock>
        </method>
        <method name="FillUserInfo">
          <declaration><![CDATA[private static UserInfo FillUserInfo(int portalId, IDataReader dr, bool closeDataReader)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="494" sc="9" el="545" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="fc7dcbb47a16094fb0f30aa3724483ed"><![CDATA[{
            UserInfo user = null;
            try
            {
                //read datareader
                var bContinue = true;
                if (closeDataReader)
                {
                    bContinue = false;
                    if (dr.Read())
                    {
                        //Ensure the data reader returned is valid
                        if (string.Equals(dr.GetName(0), "UserID", StringComparison.InvariantCultureIgnoreCase))
                        {
                            bContinue = true;
                        }
                    }
                }
                if (bContinue)
                {
                    user = new UserInfo
                    {
                        PortalID = Null.SetNullInteger(dr["PortalID"]),
                        IsSuperUser = Null.SetNullBoolean(dr["IsSuperUser"]),
                        IsDeleted = Null.SetNullBoolean(dr["IsDeleted"]),
                        UserID = Null.SetNullInteger(dr["UserID"]),
                        FirstName = Null.SetNullString(dr["FirstName"]),
                        LastName = Null.SetNullString(dr["LastName"]),
                        DisplayName = Null.SetNullString(dr["DisplayName"])
                    };
                    user.AffiliateID = Null.SetNullInteger(Null.SetNull(dr["AffiliateID"], user.AffiliateID));
                    user.Username = Null.SetNullString(dr["Username"]);
                    UserController.GetUserMembership(user);
                    user.Email = Null.SetNullString(dr["Email"]);
                    user.Membership.UpdatePassword = Null.SetNullBoolean(dr["UpdatePassword"]);
                    if (!user.IsSuperUser)
                    {
                        user.Membership.Approved = Null.SetNullBoolean(dr["Authorised"]);
                    }
                    if (user.PortalID == Null.NullInteger)
                    {
                        user.PortalID = portalId;
                    }

                }
            }
            finally
            {
                CBO.CloseDataReader(dr, closeDataReader);
            }
            return user;
        }]]></body>
          </codeblock>
        </method>
        <method name="FillUserList">
          <declaration><![CDATA[private static IList<UserInfo> FillUserList(int portalId, IDataReader dr)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="396" sc="9" el="419" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="4a52acb962ba57ddbe88166086d7f89a"><![CDATA[{
          
            var users = new List<UserInfo>();
            try
            {
                while (dr.Read())
                {
                    //fill business object
                    UserInfo user = FillUserAndProfile(portalId, dr);
                    //add to collection
                    users.Add(user);
                }
            }
            catch (Exception exc)
            {
                Exceptions.LogException(exc);
            }
            finally
            {
                //close datareader
                CBO.CloseDataReader(dr, true);
            }
            return users;
        }]]></body>
          </codeblock>
        </method>
        <method name="FillUserMembership">
          <declaration><![CDATA[private static void FillUserMembership(MembershipUser aspNetUser, UserInfo user)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="548" sc="9" el="571" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="4ae3815dcf2bb7135c7c59bbb0df0732"><![CDATA[{
			//Fill Membership Property
            if (aspNetUser != null)
            {
                if (user.Membership == null)
                {
                    user.Membership = new UserMembership(user);
                }
                user.Membership.CreatedDate = aspNetUser.CreationDate;
                user.Membership.LastActivityDate = aspNetUser.LastActivityDate;
                user.Membership.LastLockoutDate = aspNetUser.LastLockoutDate;
                user.Membership.LastLoginDate = aspNetUser.LastLoginDate;
                user.Membership.LastPasswordChangeDate = aspNetUser.LastPasswordChangedDate;
                user.Membership.LockedOut = aspNetUser.IsLockedOut;
                user.Membership.PasswordQuestion = aspNetUser.PasswordQuestion;
                user.Membership.IsDeleted = user.IsDeleted;

                if (user.IsSuperUser)
                {
					//For superusers the Approved info is stored in aspnet membership
                    user.Membership.Approved = aspNetUser.IsApproved;
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GeneratePassword">
          <declaration><![CDATA[public override string GeneratePassword()]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 Generates a new random password (Length = Minimum Length + 4)
 </summary>
 <returns>A String</returns>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="902" sc="9" el="904" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="e2b12e74e1174c0d66358e3faf1cd1e3"><![CDATA[{
            return GeneratePassword(MinPasswordLength + 4);
        }]]></body>
          </codeblock>
        </method>
        <method name="GeneratePassword">
          <declaration><![CDATA[public override string GeneratePassword(int length)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 Generates a new random password
 </summary>
 <param name="length">The length of password to generate.</param>
 <returns>A String</returns>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="914" sc="9" el="916" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="72b8e2bff4da81ad9de71e8ca92b8225"><![CDATA[{
            return System.Web.Security.Membership.GeneratePassword(length, MinNonAlphanumericCharacters);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetCacheKey">
          <declaration><![CDATA[private static string GetCacheKey(string userName)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="584" sc="9" el="586" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="d82b8d2ba3eaa80fc8bc2a87b93890d7"><![CDATA[{
            return String.Format("MembershipUser_{0}", userName);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetDeletedUsers">
          <declaration><![CDATA[public override ArrayList GetDeletedUsers(int portalId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="919" sc="9" el="921" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="9c6a3981b177b8c31e05aefd7f167aa8"><![CDATA[{
            return FillUserCollection(portalId, _dataProvider.GetDeletedUsers(portalId));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetMembershipUser">
          <declaration><![CDATA[private static MembershipUser GetMembershipUser(UserInfo user)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="574" sc="9" el="576" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="098e7ea2cfdda0c80483a283967262e3"><![CDATA[{
            return GetMembershipUser(user.Username);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetMembershipUser">
          <declaration><![CDATA[private static MembershipUser GetMembershipUser(string userName)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="579" sc="9" el="581" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="cc2f3bf717f4fe5993b2d461ed7476f7"><![CDATA[{
            return CBO.GetCachedObject<MembershipUser>(new CacheItemArgs(GetCacheKey(userName), DataCache.UserCacheTimeOut, DataCache.UserCachePriority, userName), GetMembershipUserCallBack);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetMembershipUserCallBack">
          <declaration><![CDATA[private static object GetMembershipUserCallBack(CacheItemArgs cacheItemArgs)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="589" sc="9" el="593" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="92d0f5c6e59ed3827d9f720460713789"><![CDATA[{
            string userName = cacheItemArgs.ParamList[0].ToString();

            return System.Web.Security.Membership.GetUser(userName);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetOnlineUsers">
          <declaration><![CDATA[public override ArrayList GetOnlineUsers(int portalId)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 Gets a collection of Online Users
 </summary>
 <param name="portalId">The Id of the Portal</param>
 <returns>An ArrayList of UserInfo objects</returns>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="931" sc="9" el="934" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="c54baf474c8dae9e8d1a6c2a2e7a4242"><![CDATA[{
            int totalRecords = 0;
            return FillUserCollection(portalId, _dataProvider.GetOnlineUsers(portalId), ref totalRecords);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPassword">
          <declaration><![CDATA[public override string GetPassword(UserInfo user, string passwordAnswer)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 Gets the Current Password Information for the User
 </summary>
 <remarks>
 </remarks>
 <param name="user">The user to delete from the Data Store.</param>
 <param name="passwordAnswer">The answer to the Password Question, ues to confirm the user
 has the right to obtain the password.</param>
 <returns>A String</returns>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="948" sc="9" el="955" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="d9c37a816348149d06375c2a389da5e2"><![CDATA[{
            MembershipUser aspnetUser = GetMembershipUser(user);
            if (aspnetUser.IsLockedOut)
            {
                AutoUnlockUser(aspnetUser);
            }
            return RequiresQuestionAndAnswer ? aspnetUser.GetPassword(passwordAnswer) : aspnetUser.GetPassword();
        }]]></body>
          </codeblock>
        </method>
        <method name="GetUnAuthorizedUsers">
          <declaration><![CDATA[public override ArrayList GetUnAuthorizedUsers(int portalId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="958" sc="9" el="960" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="c5e6119070495707ad583d73759cb83b"><![CDATA[{
            return GetUnAuthorizedUsers(portalId, false, false);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetUnAuthorizedUsers">
          <declaration><![CDATA[public override ArrayList GetUnAuthorizedUsers(int portalId, bool includeDeleted, bool superUsersOnly)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="963" sc="9" el="965" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="0cbd53d0c5eec1ca9a56071d4bdf2b72"><![CDATA[{
            return FillUserCollection(portalId, _dataProvider.GetUnAuthorizedUsers(portalId, includeDeleted, superUsersOnly));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetUnAuthorizedUsers">
          <deprecation>Deprecated in 5.1 as Ishydrated is no longer supported</deprecation>
          <declaration><![CDATA[public override ArrayList GetUnAuthorizedUsers(int portalId, bool isHydrated)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1573" sc="9" el="1575" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="31de372f523301100c67dfb818ae8b3d"><![CDATA[{
            return GetUnAuthorizedUsers(portalId);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetUser">
          <declaration><![CDATA[public override UserInfo GetUser(int portalId, int userId)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 GetUserByUserName retrieves a User from the DataStore
 </summary>
 <remarks>
 </remarks>
 <param name="portalId">The Id of the Portal</param>
 <param name="userId">The id of the user being retrieved from the Data Store.</param>
 <returns>The User as a UserInfo object</returns>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="978" sc="9" el="982" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="b4014ecc696d8abdfba8d62c3b46d2e8"><![CDATA[{
            IDataReader dr = _dataProvider.GetUser(portalId, userId);
            UserInfo objUserInfo = FillUserInfo(portalId, dr, true);
            return objUserInfo;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetUser">
          <deprecation>Deprecated in 5.1 as Ishydrated is no longer supported</deprecation>
          <declaration><![CDATA[public override UserInfo GetUser(int portalId, int userId, bool isHydrated)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1579" sc="9" el="1581" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="1e8e22f98f0d15e356f8aaeb364ebdb3"><![CDATA[{
            return GetUser(portalId, userId);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetUserByAuthToken">
          <declaration><![CDATA[private UserInfo GetUserByAuthToken(int portalId, string userToken, string authType)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="596" sc="9" el="600" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="8abbabd0c067b40b473348d21698955a"><![CDATA[{
            IDataReader dr = _dataProvider.GetUserByAuthToken(portalId, userToken, authType);
            UserInfo objUserInfo = FillUserInfo(portalId, dr, true);
            return objUserInfo;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetUserByDisplayName">
          <declaration><![CDATA[public override UserInfo GetUserByDisplayName(int portalId, string displayName)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 GetUserByDisplayName retrieves a User from the DataStore
 </summary>
 <remarks>
 </remarks>
 <param name="portalId">The Id of the Portal</param>
 <param name="displayName">The displayName of the user being retrieved from the Data Store.</param>
 <returns>The User as a UserInfo object</returns>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="995" sc="9" el="999" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="3efc22e854e88cf2fc1a480f89717f93"><![CDATA[{
            IDataReader dr = _dataProvider.GetUserByDisplayName(portalId, displayName);
            UserInfo objUserInfo = FillUserInfo(portalId, dr, true);
            return objUserInfo;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetUserByUserName">
          <declaration><![CDATA[public override UserInfo GetUserByUserName(int portalId, string username)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 GetUserByUserName retrieves a User from the DataStore
 </summary>
 <remarks>
 </remarks>
 <param name="portalId">The Id of the Portal</param>
 <param name="username">The username of the user being retrieved from the Data Store.</param>
 <returns>The User as a UserInfo object</returns>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="1012" sc="9" el="1016" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="23c54093c99fab301d45dfacb40d20d3"><![CDATA[{
            IDataReader dr = _dataProvider.GetUserByUsername(portalId, username);
            UserInfo objUserInfo = FillUserInfo(portalId, dr, true);
            return objUserInfo;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetUserByUserName">
          <deprecation>Deprecated in 5.1 as Ishydrated is no longer supported</deprecation>
          <declaration><![CDATA[public override UserInfo GetUserByUserName(int portalId, string username, bool isHydrated)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1585" sc="9" el="1587" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="05e1e31c8316b3d783770293a38e9e1c"><![CDATA[{
            return GetUserByUserName(portalId, username);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetUserCountByPortal">
          <declaration><![CDATA[public override int GetUserCountByPortal(int portalId)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 GetUserCountByPortal gets the number of users in the portal
 </summary>
 <remarks>
 </remarks>
 <param name="portalId">The Id of the Portal</param>
 <returns>The no of users</returns>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="1028" sc="9" el="1030" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="f8fb54ae221691f10d50bd5a18998ee4"><![CDATA[{
            return _dataProvider.GetUserCountByPortal(portalId);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetUserMembership">
          <declaration><![CDATA[public override void GetUserMembership(ref UserInfo user)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 GetUserMembership retrieves the UserMembership information from the Data Store
 </summary>
 <remarks>
 </remarks>
 <param name="user">The user whose Membership information we are retrieving.</param>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="1041" sc="9" el="1050" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="61dae6d79de6ca41ca0a9be69a21bf1a"><![CDATA[{
            //Get AspNet MembershipUser
            MembershipUser aspnetUser = GetMembershipUser(user);

            //Fill Membership Property
            FillUserMembership(aspnetUser, user);

            //Get Online Status
            user.Membership.IsOnLine = IsUserOnline(user);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetUsers">
          <declaration><![CDATA[public override ArrayList GetUsers(int portalId, int pageIndex, int pageSize, ref int totalRecords)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 GetUsers gets all the users of the portal
 </summary>
 <remarks>If all records are required, (ie no paging) set pageSize = -1</remarks>
 <param name="portalId">The Id of the Portal</param>
 <param name="pageIndex">The page of records to return.</param>
 <param name="pageSize">The size of the page</param>
 <param name="totalRecords">The total no of records that satisfy the criteria.</param>
 <returns>An ArrayList of UserInfo objects.</returns>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="1064" sc="9" el="1066" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="fafe5efef0483479ec7f78dad9c4ab02"><![CDATA[{
            return GetUsers(portalId, pageIndex, pageSize, ref totalRecords, false, false);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetUsers">
          <declaration><![CDATA[public override ArrayList GetUsers(int portalId, int pageIndex, int pageSize, ref int totalRecords, bool includeDeleted, bool superUsersOnly)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 GetUsers gets all the users of the portal
 </summary>
 <remarks>If all records are required, (ie no paging) set pageSize = -1</remarks>
 <param name="portalId">The Id of the Portal</param>
 <param name="pageIndex">The page of records to return.</param>
 <param name="pageSize">The size of the page</param>
 <param name="totalRecords">The total no of records that satisfy the criteria.</param>
 <param name="includeDeleted">Include deleted users.</param>
 <param name="superUsersOnly">Only select super users.</param>
 <returns>An ArrayList of UserInfo objects.</returns>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="1082" sc="9" el="1090" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="1fa089ea0be8bce51fc55f59348d0640"><![CDATA[{
            if (pageIndex == -1)
            {
                pageIndex = 0;
                pageSize = int.MaxValue;
            }

            return FillUserCollection(portalId, _dataProvider.GetAllUsers(portalId, pageIndex, pageSize, includeDeleted, superUsersOnly), ref totalRecords);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetUsers">
          <deprecation>Deprecated in 5.1 as Ishydrated is no longer supported</deprecation>
          <declaration><![CDATA[public override ArrayList GetUsers(int portalId, bool isHydrated, int pageIndex, int pageSize, ref int totalRecords)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1591" sc="9" el="1593" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="baf0be1dd9219c51ee642d98f2cf7e76"><![CDATA[{
            return GetUsers(portalId, pageIndex, pageSize, ref totalRecords);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetUsersAdvancedSearch">
          <declaration><![CDATA[public override IList<UserInfo> GetUsersAdvancedSearch(int portalId, int userId, int filterUserId, int filterRoleId, int relationshipTypeId, bool isAdmin, int pageIndex, int pageSize, string sortColumn, bool sortAscending, string propertyNames, string propertyValues)]]></declaration>
          <documentation>
            <summary>

 </summary>
 <param name="portalId"></param>
 <param name="userId"></param>
 <param name="filterUserId"></param>
 <param name="filterRoleId"></param>
 <param name="isAdmin"></param>
 <param name="pageSize"></param>
 <param name="pageIndex"></param>
 <param name="sortColumn"></param>
 <param name="sortAscending"></param>
 <param name="propertyNames"></param>
 <param name="propertyValues"></param>
 <returns></returns></documentation>
          <codeblock>
            <location sl="1110" sc="9" el="1114" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="b06eb9212d4d22b60fd8b9bce6f1a821"><![CDATA[{
            return FillUserList(portalId, _dataProvider.GetUsersAdvancedSearch(portalId, userId, filterUserId, filterRoleId,
                                                                           relationshipTypeId, isAdmin, pageIndex, pageSize, 
                                                                           sortColumn, sortAscending, propertyNames, propertyValues));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetUsersBasicSearch">
          <declaration><![CDATA[public override IList<UserInfo> GetUsersBasicSearch(int portalId, int pageIndex, int pageSize, string sortColumn, bool sortAscending, string propertyName, string propertyValue)]]></declaration>
          <documentation>
            <summary>

 </summary>
 <param name="portalId"></param>
 <param name="pageIndex"></param>
 <param name="pageSize"></param>
 <param name="sortColumn"></param>
 <param name="sortAscending"></param>
 <param name="propertyName"></param>
 <param name="propertyValue"></param>
 <returns></returns></documentation>
          <codeblock>
            <location sl="1129" sc="9" el="1132" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="ec16240b51ff700e3e5229f332e92d80"><![CDATA[{
            return FillUserList(portalId, _dataProvider.GetUsersBasicSearch(portalId, pageIndex, pageSize,
                                                                           sortColumn, sortAscending, propertyName, propertyValue));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetUsersByEmail">
          <declaration><![CDATA[public override ArrayList GetUsersByEmail(int portalId, string emailToMatch, int pageIndex, int pageSize, ref int totalRecords)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 GetUsersByEmail gets all the users of the portal whose email matches a provided
 filter expression
 </summary>
 <remarks>If all records are required, (ie no paging) set pageSize = -1</remarks>
 <param name="portalId">The Id of the Portal</param>
 <param name="emailToMatch">The email address to use to find a match.</param>
 <param name="pageIndex">The page of records to return.</param>
 <param name="pageSize">The size of the page</param>
 <param name="totalRecords">The total no of records that satisfy the criteria.</param>
 <returns>An ArrayList of UserInfo objects.</returns>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="1148" sc="9" el="1150" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="12d221842f249502c6e2b9335d41c06d"><![CDATA[{
            return GetUsersByEmail(portalId, emailToMatch, pageIndex, pageSize, ref totalRecords, false, false);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetUsersByEmail">
          <declaration><![CDATA[public override ArrayList GetUsersByEmail(int portalId, string emailToMatch, int pageIndex, int pageSize, ref int totalRecords, bool includeDeleted, bool superUsersOnly)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 GetUsersByEmail gets all the users of the portal whose email matches a provided
 filter expression
 </summary>
 <remarks>If all records are required, (ie no paging) set pageSize = -1</remarks>
 <param name="portalId">The Id of the Portal</param>
 <param name="emailToMatch">The email address to use to find a match.</param>
 <param name="pageIndex">The page of records to return.</param>
 <param name="pageSize">The size of the page</param>
 <param name="totalRecords">The total no of records that satisfy the criteria.</param>
 <param name="includeDeleted">Include deleted users.</param>
 <param name="superUsersOnly">Only select super users.</param>
 <returns>An ArrayList of UserInfo objects.</returns>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="1168" sc="9" el="1176" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="0eb407e2275660dd54997a9c403e5a4a"><![CDATA[{
            if (pageIndex == -1)
            {
                pageIndex = 0;
                pageSize = int.MaxValue;
            }

            return FillUserCollection(portalId, _dataProvider.GetUsersByEmail(portalId, emailToMatch, pageIndex, pageSize, includeDeleted, superUsersOnly), ref totalRecords);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetUsersByEmail">
          <deprecation>Deprecated in 5.1 as Ishydrated is no longer supported</deprecation>
          <declaration><![CDATA[public override ArrayList GetUsersByEmail(int portalId, bool isHydrated, string emailToMatch, int pageIndex, int pageSize, ref int totalRecords)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1597" sc="9" el="1599" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="b5e62c440cdb64c77a78431471180bb4"><![CDATA[{
            return GetUsersByEmail(portalId, emailToMatch, pageIndex, pageSize, ref totalRecords);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetUsersByProfileProperty">
          <declaration><![CDATA[public override ArrayList GetUsersByProfileProperty(int portalId, string propertyName, string propertyValue, int pageIndex, int pageSize, ref int totalRecords)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 GetUsersByProfileProperty gets all the users of the portal whose profile matches
 the profile property pased as a parameter
 </summary>
 <remarks>
 </remarks>
 <param name="portalId">The Id of the Portal</param>
 <param name="propertyName">The name of the property being matched.</param>
 <param name="propertyValue">The value of the property being matched.</param>
 <param name="pageIndex">The page of records to return.</param>
 <param name="pageSize">The size of the page</param>
 <param name="totalRecords">The total no of records that satisfy the criteria.</param>
 <returns>An ArrayList of UserInfo objects.</returns>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="1238" sc="9" el="1240" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="c2477b8f7c59ea8de8f7d031ffb0a840"><![CDATA[{
            return GetUsersByProfileProperty(portalId, propertyName, propertyValue, pageIndex, pageSize, ref totalRecords, false, false);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetUsersByProfileProperty">
          <declaration><![CDATA[public override ArrayList GetUsersByProfileProperty(int portalId, string propertyName, string propertyValue, int pageIndex, int pageSize, ref int totalRecords, bool includeDeleted, bool superUsersOnly)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 GetUsersByProfileProperty gets all the users of the portal whose profile matches
 the profile property pased as a parameter
 </summary>
 <remarks>
 </remarks>
 <param name="portalId">The Id of the Portal</param>
 <param name="propertyName">The name of the property being matched.</param>
 <param name="propertyValue">The value of the property being matched.</param>
 <param name="pageIndex">The page of records to return.</param>
 <param name="pageSize">The size of the page</param>
 <param name="totalRecords">The total no of records that satisfy the criteria.</param>
 <param name="includeDeleted">Include deleted users.</param>
 <param name="superUsersOnly">Only select super users.</param>
 <returns>An ArrayList of UserInfo objects.</returns>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="1260" sc="9" el="1268" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="5a6d0eeddf773891e89cfe9cc62507bd"><![CDATA[{
            if (pageIndex == -1)
            {
                pageIndex = 0;
                pageSize = int.MaxValue;
            }

            return FillUserCollection(portalId, _dataProvider.GetUsersByProfileProperty(portalId, propertyName, propertyValue, pageIndex, pageSize, includeDeleted, superUsersOnly), ref totalRecords);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetUsersByProfileProperty">
          <deprecation>Deprecated in 5.1 as Ishydrated is no longer supported</deprecation>
          <declaration><![CDATA[public override ArrayList GetUsersByProfileProperty(int portalId, bool isHydrated, string propertyName, string propertyValue, int pageIndex, int pageSize, ref int totalRecords)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1609" sc="9" el="1611" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="dcbcd29df25747d2c138f34217cac4b4"><![CDATA[{
            return GetUsersByProfileProperty(portalId, propertyName, propertyValue, pageIndex, pageSize, ref totalRecords);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetUsersByUserName">
          <declaration><![CDATA[public override ArrayList GetUsersByUserName(int portalId, string userNameToMatch, int pageIndex, int pageSize, ref int totalRecords)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 GetUsersByUserName gets all the users of the portal whose username matches a provided
 filter expression
 </summary>
 <remarks>If all records are required, (ie no paging) set pageSize = -1</remarks>
 <param name="portalId">The Id of the Portal</param>
 <param name="userNameToMatch">The username to use to find a match.</param>
 <param name="pageIndex">The page of records to return.</param>
 <param name="pageSize">The size of the page</param>
 <param name="totalRecords">The total no of records that satisfy the criteria.</param>
 <returns>An ArrayList of UserInfo objects.</returns>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="1192" sc="9" el="1194" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="c7fcac6e5f9007bb8cfe05be78b014c4"><![CDATA[{
            return GetUsersByUserName(portalId, userNameToMatch, pageIndex, pageSize, ref totalRecords, false, false);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetUsersByUserName">
          <declaration><![CDATA[public override ArrayList GetUsersByUserName(int portalId, string userNameToMatch, int pageIndex, int pageSize, ref int totalRecords, bool includeDeleted, bool superUsersOnly)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 GetUsersByUserName gets all the users of the portal whose username matches a provided
 filter expression
 </summary>
 <remarks>If all records are required, (ie no paging) set pageSize = -1</remarks>
 <param name="portalId">The Id of the Portal</param>
 <param name="userNameToMatch">The username to use to find a match.</param>
 <param name="pageIndex">The page of records to return.</param>
 <param name="pageSize">The size of the page</param>
 <param name="totalRecords">The total no of records that satisfy the criteria.</param>
 <param name="includeDeleted">Include deleted users.</param>
 <param name="superUsersOnly">Only select super users.</param>
 <returns>An ArrayList of UserInfo objects.</returns>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="1212" sc="9" el="1220" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="d5b1ea7a1354232c6e802d8b7b7fc050"><![CDATA[{
            if (pageIndex == -1)
            {
                pageIndex = 0;
                pageSize = int.MaxValue;
            }

            return FillUserCollection(portalId, _dataProvider.GetUsersByUsername(portalId, userNameToMatch, pageIndex, pageSize, includeDeleted, superUsersOnly), ref totalRecords);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetUsersByUserName">
          <deprecation>Deprecated in 5.1 as Ishydrated is no longer supported</deprecation>
          <declaration><![CDATA[public override ArrayList GetUsersByUserName(int portalId, bool isHydrated, string userNameToMatch, int pageIndex, int pageSize, ref int totalRecords)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1603" sc="9" el="1605" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="4b5edcfc6868582541d2a52d9d0b5fd3"><![CDATA[{
            return GetUsersByUserName(portalId, userNameToMatch, pageIndex, pageSize, ref totalRecords);
        }]]></body>
          </codeblock>
        </method>
        <method name="IsUserOnline">
          <declaration><![CDATA[public override bool IsUserOnline(UserInfo user)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 Gets whether the user in question is online
 </summary>
 <remarks>
 </remarks>
 <param name="user">The user.</param>
 <returns>A Boolean indicating whether the user is online.</returns>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="1280" sc="9" el="1302" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="93037fed131a1d860b3e7aa08e67abd5"><![CDATA[{
            bool isOnline = false;
            var objUsersOnline = new UserOnlineController();
            if (objUsersOnline.IsEnabled())
            {
                Hashtable userList = objUsersOnline.GetUserList();
                var onlineUser = (OnlineUserInfo) userList[user.UserID.ToString()];
                if (onlineUser != null)
                {
                    isOnline = true;
                }
                else
                {
					//Next try the Database
                    onlineUser = (OnlineUserInfo) CBO.FillObject(_dataProvider.GetOnlineUser(user.UserID), typeof (OnlineUserInfo));
                    if (onlineUser != null)
                    {
                        isOnline = true;
                    }
                }
            }
            return isOnline;
        }]]></body>
          </codeblock>
        </method>
        <method name="RemoveUser">
          <declaration><![CDATA[public override bool RemoveUser(UserInfo user)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1305" sc="9" el="1325" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="186f33635871cc4c833384f6e1b8ab25"><![CDATA[{
            bool retValue = true;

            try
            {
                _dataProvider.RemoveUser(user.UserID, user.PortalID);
                //Prior to removing membership, ensure user is not present in any other portal
                UserInfo otherUser = GetUserByUserName(Null.NullInteger, user.Username);
                if (otherUser == null)
                {
                    DeleteMembershipUser(user);
                }
            }
            catch (Exception ex)
            {
                Exceptions.LogException(ex);
                retValue = false;
            }

            return retValue;
        }]]></body>
          </codeblock>
        </method>
        <method name="ResetPassword">
          <declaration><![CDATA[public override string ResetPassword(UserInfo user, string passwordAnswer)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 ResetPassword resets a user's password and returns the newly created password
 </summary>
 <remarks>
 </remarks>
 <param name="user">The user to update.</param>
 <param name="passwordAnswer">The answer to the user's password Question.</param>
 <returns>The new Password.</returns>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="1338" sc="9" el="1343" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="11e95d0d696525dd4fac09cd4a2c74b7"><![CDATA[{
            //Get AspNet MembershipUser
            MembershipUser aspnetUser = GetMembershipUser(user);

            return RequiresQuestionAndAnswer ? aspnetUser.ResetPassword(passwordAnswer) : aspnetUser.ResetPassword();
        }]]></body>
          </codeblock>
        </method>
        <method name="RestoreUser">
          <declaration><![CDATA[public override bool RestoreUser(UserInfo user)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1346" sc="9" el="1361" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="93ef2fd9d2bd5df04184f7978750b516"><![CDATA[{
            var retValue = true;

            try
            {
                _dataProvider.RestoreUser(user.UserID, user.PortalID);
            }
            catch (Exception ex)
            {

                Exceptions.LogException(ex);
                retValue = false;
            }

            return retValue;
        }]]></body>
          </codeblock>
        </method>
        <method name="UnLockUser">
          <declaration><![CDATA[public override bool UnLockUser(UserInfo user)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 Unlocks the User's Account
 </summary>
 <remarks>
 </remarks>
 <param name="user">The user whose account is being Unlocked.</param>
 <returns>True if successful, False if unsuccessful.</returns>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="1373" sc="9" el="1382" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="c0129f7dddd8cc3069d4016d4c474dce"><![CDATA[{
            MembershipUser membershipUser = System.Web.Security.Membership.GetUser(user.Username);
            bool retValue = false;
            if (membershipUser != null)
            {
                retValue = membershipUser.UnlockUser();
            }
            DataCache.RemoveCache(GetCacheKey(user.Username));
            return retValue;
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateUser">
          <declaration><![CDATA[public override void UpdateUser(UserInfo user)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 UpdateUser persists a user to the Data Store
 </summary>
 <remarks>
 </remarks>
 <param name="user">The user to persist to the Data Store.</param>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="1393" sc="9" el="1426" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="82a18a1ceae874a463961c46c7cd70c1"><![CDATA[{
            var objSecurity = new PortalSecurity();
            string firstName = objSecurity.InputFilter(user.FirstName, PortalSecurity.FilterFlag.NoScripting | PortalSecurity.FilterFlag.NoAngleBrackets | PortalSecurity.FilterFlag.NoMarkup);
            string lastName = objSecurity.InputFilter(user.LastName, PortalSecurity.FilterFlag.NoScripting | PortalSecurity.FilterFlag.NoAngleBrackets | PortalSecurity.FilterFlag.NoMarkup);
            string email = objSecurity.InputFilter(user.Email, PortalSecurity.FilterFlag.NoScripting | PortalSecurity.FilterFlag.NoAngleBrackets | PortalSecurity.FilterFlag.NoMarkup);
            string displayName = objSecurity.InputFilter(user.DisplayName, PortalSecurity.FilterFlag.NoScripting | PortalSecurity.FilterFlag.NoAngleBrackets | PortalSecurity.FilterFlag.NoMarkup);
            bool updatePassword = user.Membership.UpdatePassword;
            bool isApproved = user.Membership.Approved;
            if (String.IsNullOrEmpty(displayName))
            {
                displayName = firstName + " " + lastName;
            }
			
            //Persist the Membership to the Data Store
            UpdateUserMembership(user);
			
			//Persist the DNN User to the Database
            _dataProvider.UpdateUser(user.UserID,
                                    user.PortalID,
                                    firstName,
                                    lastName,
                                    user.IsSuperUser,
                                    email,
                                    displayName,
                                    updatePassword,
                                    isApproved,
                                    false,
                                    user.LastIPAddress,
                                    user.IsDeleted,
                                    UserController.GetCurrentUserInfo().UserID);
            
			//Persist the Profile to the Data Store
			ProfileController.UpdateUserProfile(user);
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateUserMembership">
          <declaration><![CDATA[private static void UpdateUserMembership(UserInfo user)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="603" sc="9" el="617" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="fc6f9a59e9736daebc5f8f894cb52f79"><![CDATA[{
            var portalSecurity = new PortalSecurity();
            string email = portalSecurity.InputFilter(user.Email, PortalSecurity.FilterFlag.NoScripting | PortalSecurity.FilterFlag.NoAngleBrackets | PortalSecurity.FilterFlag.NoMarkup);

            //Persist the Membership Properties to the AspNet Data Store
            MembershipUser membershipUser = System.Web.Security.Membership.GetUser(user.Username);
            membershipUser.Email = email;
            membershipUser.LastActivityDate = DateTime.Now;
            if (user.IsSuperUser)
            {
                membershipUser.IsApproved = user.Membership.Approved;
            }
            System.Web.Security.Membership.UpdateUser(membershipUser);
			DataCache.RemoveCache(GetCacheKey(user.Username));
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateUsersOnline">
          <declaration><![CDATA[public override void UpdateUsersOnline(Hashtable userList)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 Updates UserOnline info
 time window
 </summary>
 <param name="userList">List of users to update</param>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="1436" sc="9" el="1438" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="aa2c11a028d7b925215b8cdb790d7ba7"><![CDATA[{
            _dataProvider.UpdateUsersOnline(userList);
        }]]></body>
          </codeblock>
        </method>
        <method name="UserLogin">
          <declaration><![CDATA[public override UserInfo UserLogin(int portalId, string username, string password, string verificationCode, ref UserLoginStatus loginStatus)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 UserLogin attempts to log the user in, and returns the User if successful
 </summary>
 <remarks>
 </remarks>
 <param name="portalId">The Id of the Portal the user belongs to</param>
 <param name="username">The user name of the User attempting to log in</param>
 <param name="password">The password of the User attempting to log in</param>
 <param name="verificationCode">The verification code of the User attempting to log in</param>
 <param name="loginStatus">An enumerated value indicating the login status.</param>
 <returns>The User as a UserInfo object</returns>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="1454" sc="9" el="1456" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="2778f950ec9b8d79bcceb31bbd30d9c7"><![CDATA[{
            return UserLogin(portalId, username, password, "DNN", verificationCode, ref loginStatus);
        }]]></body>
          </codeblock>
        </method>
        <method name="UserLogin">
          <declaration><![CDATA[public override UserInfo UserLogin(int portalId, string username, string password, string authType, string verificationCode, ref UserLoginStatus loginStatus)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 UserLogin attempts to log the user in, and returns the User if successful
 </summary>
 <remarks>
 </remarks>
 <param name="portalId">The Id of the Portal the user belongs to</param>
 <param name="username">The user name of the User attempting to log in</param>
 <param name="password">The password of the User attempting to log in (may not be used by all Auth types)</param>
 <param name="authType">The type of Authentication Used</param>
 <param name="verificationCode">The verification code of the User attempting to log in</param>
 <param name="loginStatus">An enumerated value indicating the login status.</param>
 <returns>The User as a UserInfo object</returns>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="1473" sc="9" el="1537" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="27ad15e858fef118c81e161aa01ca15e"><![CDATA[{
            //For now, we are going to ignore the possibility that the User may exist in the 
            //Global Data Store but not in the Local DataStore ie. A shared Global Data Store

            //Initialise Login Status to Failure
            loginStatus = UserLoginStatus.LOGIN_FAILURE;

            DataCache.ClearUserCache(portalId, username);
            DataCache.ClearCache(GetCacheKey(username));

            //Get a light-weight (unhydrated) DNN User from the Database, we will hydrate it later if neccessary
            var user = (authType == "DNN") ? GetUserByUserName(portalId, username) : GetUserByAuthToken(portalId, username, authType);
            if (user != null && !user.IsDeleted)
            {
                //Get AspNet MembershipUser
                MembershipUser aspnetUser = GetMembershipUser(user);

                //Fill Membership Property from AspNet MembershipUser
                FillUserMembership(aspnetUser, user);

                //Check if the User is Locked Out (and unlock if AutoUnlock has expired)
                if (aspnetUser.IsLockedOut)
                {
                    if (AutoUnlockUser(aspnetUser))
                    {
						//Unlock User
                        user.Membership.LockedOut = false;
                    }
                    else
                    {
                        loginStatus = UserLoginStatus.LOGIN_USERLOCKEDOUT;
                    }
                }
				
                //Check in a verified situation whether the user is Approved
                if (user.Membership.Approved == false && user.IsSuperUser == false)
                {
					//Check Verification code
                    var ps = new PortalSecurity();
                    if (verificationCode == ps.EncryptString(portalId + "-" + user.UserID, Config.GetDecryptionkey()))
                    {
                        UserController.ApproveUser(user);
                    }
                    else
                    {
                        loginStatus = UserLoginStatus.LOGIN_USERNOTAPPROVED;
                    }
                }
				
                //Verify User Credentials
                bool bValid = false;
                loginStatus = ValidateLogin(username, authType, user, loginStatus, password, ref bValid, portalId);
                if (!bValid)
                {
					//Clear the user object
                    user = null;
                }
            }
            else
            {
				//Clear the user object
                user = null;
            }
            return user;
        }]]></body>
          </codeblock>
        </method>
        <method name="ValidateForDuplicateDisplayName">
          <declaration><![CDATA[private void ValidateForDuplicateDisplayName(UserInfo user, ref UserCreateStatus createStatus)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="753" sc="9" el="765" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="c70ef50deccbb631eb8c40ba54b4b874"><![CDATA[{
            Hashtable settings = UserController.GetUserSettings(user.PortalID);
            bool requireUniqueDisplayName = Convert.ToBoolean(settings["Registration_RequireUniqueDisplayName"]);

            if (requireUniqueDisplayName)
            {
                UserInfo duplicateUser = GetUserByDisplayName(Null.NullInteger, user.DisplayName);
                if (duplicateUser != null)
                {
                    createStatus = UserCreateStatus.DuplicateDisplayName;
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="ValidateForProfanity">
          <declaration><![CDATA[private UserCreateStatus ValidateForProfanity(UserInfo user)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="727" sc="9" el="750" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="2c3e5f9e7f51a9fa3818a4a7c5cd82b3"><![CDATA[{
            var portalSecurity = new PortalSecurity();
            UserCreateStatus createStatus = UserCreateStatus.AddUser;

            Hashtable settings = UserController.GetUserSettings(user.PortalID);
            bool useProfanityFilter = Convert.ToBoolean(settings["Registration_UseProfanityFilter"]);

            //Validate Profanity
            if (useProfanityFilter)
            {
                if (!portalSecurity.ValidateInput(user.Username, PortalSecurity.FilterFlag.NoProfanity))
                {
                    createStatus = UserCreateStatus.InvalidUserName;
                }
                if (!String.IsNullOrEmpty(user.DisplayName))
                {
                    if (!portalSecurity.ValidateInput(user.DisplayName, PortalSecurity.FilterFlag.NoProfanity))
                    {
                        createStatus = UserCreateStatus.InvalidDisplayName;
                    }
                }
            }
            return createStatus;
        }]]></body>
          </codeblock>
        </method>
        <method name="ValidateLogin">
          <declaration><![CDATA[private static UserLoginStatus ValidateLogin(string username, string authType, UserInfo user, UserLoginStatus loginStatus, string password, ref bool bValid, int portalId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="620" sc="9" el="657" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="673f737e8716c961b8f59ed5f3e06769"><![CDATA[{
            if (loginStatus != UserLoginStatus.LOGIN_USERLOCKEDOUT && (loginStatus != UserLoginStatus.LOGIN_USERNOTAPPROVED || user.IsInRole("Unverified Users")))
            {
                if (authType == "DNN")
                {
                    if (user.IsSuperUser)
                    {
                        if (ValidateUser(username, password))
                        {
                            loginStatus = UserLoginStatus.LOGIN_SUPERUSER;
                            bValid = true;
                        }
                    }
                    else
                    {
                        if (ValidateUser(username, password))
                        {
                            loginStatus = UserLoginStatus.LOGIN_SUCCESS;
                            bValid = true;
                        }
                    }
                }
                else
                {
                    if (user.IsSuperUser)
                    {
                        loginStatus = UserLoginStatus.LOGIN_SUPERUSER;
                        bValid = true;
                    }
                    else
                    {
                        loginStatus = UserLoginStatus.LOGIN_SUCCESS;
                        bValid = true;
                    }
                }
            }
            return loginStatus;
        }]]></body>
          </codeblock>
        </method>
        <method name="ValidateUser">
          <declaration><![CDATA[private static bool ValidateUser(string username, string password)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="660" sc="9" el="662" ec="10">AspNetMembershipProvider.cs</location>
            <body hash="4fdc7757845612fd0b19d4a204bb404b"><![CDATA[{
            return System.Web.Security.Membership.ValidateUser(username, password);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_dataProvider">
          <declaration><![CDATA[private readonly DotNetNuke.Security.Membership.Data.DataProvider _dataProvider;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="CanEditProviderProperties">
          <declaration><![CDATA[public override bool CanEditProviderProperties]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="95" sc="13" el="97" ec="14">AspNetMembershipProvider.cs</location>
            <body hash="479cced518a49e9e626d5350fca9bbad"><![CDATA[{
                return false;
            }]]></body>
          </codeblock>
        </property>
        <property name="MaxInvalidPasswordAttempts">
          <declaration><![CDATA[public override int MaxInvalidPasswordAttempts]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="103" sc="13" el="105" ec="14">AspNetMembershipProvider.cs</location>
            <body hash="e3431dbcfd66fd7f229364cc7a75388d"><![CDATA[{
                return System.Web.Security.Membership.MaxInvalidPasswordAttempts;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="107" sc="13" el="108" ec="127">AspNetMembershipProvider.cs</location>
            <body hash="e34a0151f6ff7a9c932085e433cf8e63"><![CDATA[{
                throw new NotSupportedException("Provider properties for AspNetMembershipProvider must be set in web.config");]]></body>
          </codeblock>
        </property>
        <property name="MinNonAlphanumericCharacters">
          <declaration><![CDATA[public override int MinNonAlphanumericCharacters]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="115" sc="13" el="117" ec="14">AspNetMembershipProvider.cs</location>
            <body hash="5b4905b9428575a54ea806922363f9a5"><![CDATA[{
                return System.Web.Security.Membership.MinRequiredNonAlphanumericCharacters;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="119" sc="13" el="120" ec="127">AspNetMembershipProvider.cs</location>
            <body hash="e34a0151f6ff7a9c932085e433cf8e63"><![CDATA[{
                throw new NotSupportedException("Provider properties for AspNetMembershipProvider must be set in web.config");]]></body>
          </codeblock>
        </property>
        <property name="MinPasswordLength">
          <declaration><![CDATA[public override int MinPasswordLength]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="127" sc="13" el="129" ec="14">AspNetMembershipProvider.cs</location>
            <body hash="9988477858c5bd99cb8a95536b65656f"><![CDATA[{
                return System.Web.Security.Membership.MinRequiredPasswordLength;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="131" sc="13" el="132" ec="127">AspNetMembershipProvider.cs</location>
            <body hash="e34a0151f6ff7a9c932085e433cf8e63"><![CDATA[{
                throw new NotSupportedException("Provider properties for AspNetMembershipProvider must be set in web.config");]]></body>
          </codeblock>
        </property>
        <property name="PasswordAttemptWindow">
          <declaration><![CDATA[public override int PasswordAttemptWindow]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="139" sc="13" el="141" ec="14">AspNetMembershipProvider.cs</location>
            <body hash="6fa0d3ce182f10e6f2fe7aa028909e9e"><![CDATA[{
                return System.Web.Security.Membership.PasswordAttemptWindow;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="143" sc="13" el="144" ec="127">AspNetMembershipProvider.cs</location>
            <body hash="e34a0151f6ff7a9c932085e433cf8e63"><![CDATA[{
                throw new NotSupportedException("Provider properties for AspNetMembershipProvider must be set in web.config");]]></body>
          </codeblock>
        </property>
        <property name="PasswordFormat">
          <declaration><![CDATA[public override PasswordFormat PasswordFormat]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="151" sc="13" el="161" ec="14">AspNetMembershipProvider.cs</location>
            <body hash="197a5919638e7ae3cc2e164536960512"><![CDATA[{
                switch (System.Web.Security.Membership.Provider.PasswordFormat)
                {
                    case MembershipPasswordFormat.Encrypted:
                        return PasswordFormat.Encrypted;
                    case MembershipPasswordFormat.Hashed:
                        return PasswordFormat.Hashed;
                    default:
                        return PasswordFormat.Clear;
                }
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="163" sc="13" el="164" ec="127">AspNetMembershipProvider.cs</location>
            <body hash="e34a0151f6ff7a9c932085e433cf8e63"><![CDATA[{
                throw new NotSupportedException("Provider properties for AspNetMembershipProvider must be set in web.config");]]></body>
          </codeblock>
        </property>
        <property name="PasswordResetEnabled">
          <declaration><![CDATA[public override bool PasswordResetEnabled]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="171" sc="13" el="173" ec="14">AspNetMembershipProvider.cs</location>
            <body hash="4c816cc0c4e30d521acd0cd6153a0d68"><![CDATA[{
                return System.Web.Security.Membership.EnablePasswordReset;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="175" sc="13" el="176" ec="127">AspNetMembershipProvider.cs</location>
            <body hash="e34a0151f6ff7a9c932085e433cf8e63"><![CDATA[{
                throw new NotSupportedException("Provider properties for AspNetMembershipProvider must be set in web.config");]]></body>
          </codeblock>
        </property>
        <property name="PasswordRetrievalEnabled">
          <declaration><![CDATA[public override bool PasswordRetrievalEnabled]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="183" sc="13" el="185" ec="14">AspNetMembershipProvider.cs</location>
            <body hash="80394f128860adc77147af98996ac06f"><![CDATA[{
                return System.Web.Security.Membership.EnablePasswordRetrieval;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="187" sc="13" el="188" ec="127">AspNetMembershipProvider.cs</location>
            <body hash="e34a0151f6ff7a9c932085e433cf8e63"><![CDATA[{
                throw new NotSupportedException("Provider properties for AspNetMembershipProvider must be set in web.config");]]></body>
          </codeblock>
        </property>
        <property name="PasswordStrengthRegularExpression">
          <declaration><![CDATA[public override string PasswordStrengthRegularExpression]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="195" sc="13" el="197" ec="14">AspNetMembershipProvider.cs</location>
            <body hash="23ab89dde896acf81129095bca5f6a00"><![CDATA[{
                return System.Web.Security.Membership.PasswordStrengthRegularExpression;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="199" sc="13" el="200" ec="127">AspNetMembershipProvider.cs</location>
            <body hash="e34a0151f6ff7a9c932085e433cf8e63"><![CDATA[{
                throw new NotSupportedException("Provider properties for AspNetMembershipProvider must be set in web.config");]]></body>
          </codeblock>
        </property>
        <property name="RequiresQuestionAndAnswer">
          <declaration><![CDATA[public override bool RequiresQuestionAndAnswer]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="207" sc="13" el="209" ec="14">AspNetMembershipProvider.cs</location>
            <body hash="4fcaef82aa4476a007bb75f7036d374b"><![CDATA[{
                return System.Web.Security.Membership.RequiresQuestionAndAnswer;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="211" sc="13" el="212" ec="127">AspNetMembershipProvider.cs</location>
            <body hash="e34a0151f6ff7a9c932085e433cf8e63"><![CDATA[{
                throw new NotSupportedException("Provider properties for AspNetMembershipProvider must be set in web.config");]]></body>
          </codeblock>
        </property>
        <property name="RequiresUniqueEmail">
          <declaration><![CDATA[public override bool RequiresUniqueEmail]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="219" sc="13" el="221" ec="14">AspNetMembershipProvider.cs</location>
            <body hash="bd7908565370533d2ce264e5c7f6961b"><![CDATA[{
                return System.Web.Security.Membership.Provider.RequiresUniqueEmail;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="223" sc="13" el="224" ec="127">AspNetMembershipProvider.cs</location>
            <body hash="e34a0151f6ff7a9c932085e433cf8e63"><![CDATA[{
                throw new NotSupportedException("Provider properties for AspNetMembershipProvider must be set in web.config");]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
</root>