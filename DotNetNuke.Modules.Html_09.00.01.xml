<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<root file="DotNetNuke.Modules.Html.dll" version="09.00.01" generated="2017-06-19 20:39:23Z" generationTime="4.2497846">
  <namespace name="DotNetNuke.Modules.Html">
    <class name="EditHtml">
      <declaration><![CDATA[public class EditHtml : HtmlModuleBase]]></declaration>
      <documentation>
        <summary>
   The EditHtml PortalModuleBase is used to manage Html
 </summary>
 <remarks>
 </remarks></documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private readonly HtmlTextController _htmlTextController = new HtmlTextController();]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="57" sc="9" el="59" ec="107">EditHtml.ascx.cs</location>
            <body hash="bdcb994ab5abc8fb3bdd3ac65108ce67"><![CDATA[private readonly HtmlTextController _htmlTextController = new HtmlTextController();
        private readonly HtmlTextLogController _htmlTextLogController = new HtmlTextLogController();
        private readonly WorkflowStateController _workflowStateController = new WorkflowStateController();]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="BindRenderItems">
          <declaration><![CDATA[private void BindRenderItems()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="786" sc="9" el="793" ec="10">EditHtml.ascx.cs</location>
            <body hash="57a8662be88a0aa50ceb2bc462348303"><![CDATA[{
            if (txtContent.IsRichEditorAvailable)
            {
                ddlRender.Items.Add(new ListItem(LocalizeString("liRichText"), "RICH"));
            }

            ddlRender.Items.Add(new ListItem(LocalizeString("liBasicText"), "BASIC"));
        }]]></body>
          </codeblock>
        </method>
        <method name="DisplayContent">
          <declaration><![CDATA[private void DisplayContent(HtmlTextInfo htmlContent)]]></declaration>
          <documentation>
            <summary>
   Displays the html content in the preview section.
 </summary>
 <param name="htmlContent">Content of the HTML.</param></documentation>
          <codeblock>
            <location sl="216" sc="9" el="230" ec="10">EditHtml.ascx.cs</location>
            <body hash="eb5c796099dc25f829633b81e41af048"><![CDATA[{
            lblCurrentWorkflowInUse.Text = GetLocalizedString(htmlContent.WorkflowName);
            lblCurrentWorkflowState.Text = GetLocalizedString(htmlContent.StateName);
            lblCurrentVersion.Text = htmlContent.Version.ToString();
            txtContent.Text = FormatContent(htmlContent.Content);
            phEdit.Visible = true;
            phPreview.Visible = false;
            phHistory.Visible = false;
            cmdEdit.Enabled = false;
            cmdPreview.Enabled = true;
            cmdHistory.Enabled = true;
            //DisplayMasterLanguageContent();
            DisplayMasterContentButton();
            ddlRender.Visible = true;
        }]]></body>
          </codeblock>
        </method>
        <method name="DisplayEdit">
          <declaration><![CDATA[private void DisplayEdit(string htmlContent)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="292" sc="9" el="303" ec="10">EditHtml.ascx.cs</location>
            <body hash="4d296fc067263dafd6eab867e649eacc"><![CDATA[{
            txtContent.Text = htmlContent;
            phEdit.Visible = true;
            phPreview.Visible = false;
            phHistory.Visible = false;
            cmdEdit.Enabled = false;
            cmdPreview.Enabled = true;
            cmdHistory.Enabled = true;
            DisplayMasterContentButton();
            ddlRender.Visible = true;
                
        }]]></body>
          </codeblock>
        </method>
        <method name="DisplayHistory">
          <declaration><![CDATA[private void DisplayHistory(HtmlTextInfo htmlContent)]]></declaration>
          <documentation>
            <summary>
   Displays the history of an html content item in a grid in the preview section.
 </summary>
 <param name="htmlContent">Content of the HTML.</param></documentation>
          <codeblock>
            <location sl="154" sc="9" el="168" ec="10">EditHtml.ascx.cs</location>
            <body hash="3340c9e99de4c7032d02589dc187f591"><![CDATA[{
            dnnSitePanelEditHTMLHistory.Visible = CurrentWorkflowType != WorkflowType.DirectPublish;
            fsEditHtmlHistory.Visible = CurrentWorkflowType != WorkflowType.DirectPublish;

            if (((CurrentWorkflowType == WorkflowType.DirectPublish)))
            {
                return;
            }
            var htmlLogging = _htmlTextLogController.GetHtmlTextLog(htmlContent.ItemID);
            dgHistory.DataSource = htmlLogging;
            dgHistory.DataBind();

            dnnSitePanelEditHTMLHistory.Visible = htmlLogging.Count != 0;
            fsEditHtmlHistory.Visible = htmlLogging.Count != 0;
        }]]></body>
          </codeblock>
        </method>
        <method name="DisplayInitialContent">
          <declaration><![CDATA[private void DisplayInitialContent(WorkflowStateInfo firstState)]]></declaration>
          <documentation>
            <summary>
   Displays the initial content when a module is first added to the page.
 </summary>
 <param name="firstState">The first state.</param></documentation>
          <codeblock>
            <location sl="344" sc="9" el="361" ec="10">EditHtml.ascx.cs</location>
            <body hash="e5d1c2a16f4b519d5a9fab871f477e4f"><![CDATA[{
            cmdHistory.Enabled = false;

            txtContent.Text = GetLocalizedString("AddContent");
            litPreview.Text = GetLocalizedString("AddContent");
            lblCurrentWorkflowInUse.Text = firstState.WorkflowName;
            lblPreviewWorkflowInUse.Text = firstState.WorkflowName;
            divPreviewVersion.Visible = false;

            dnnSitePanelEditHTMLHistory.Visible = false;
            fsEditHtmlHistory.Visible = false;

            divCurrentWorkflowState.Visible = false;
            phCurrentVersion.Visible = false;
            divPreviewWorkflowState.Visible = false;

            lblPreviewWorkflowState.Text = firstState.StateName;
        }]]></body>
          </codeblock>
        </method>
        <method name="DisplayLockedContent">
          <declaration><![CDATA[private void DisplayLockedContent(HtmlTextInfo htmlContent, HtmlTextInfo lastPublishedContent)]]></declaration>
          <documentation>
            <summary>
   Displays the content but hide the editor if editing is locked from the current user
 </summary>
 <param name="htmlContent">Content of the HTML.</param>
 <param name="lastPublishedContent">Last content of the published.</param></documentation>
          <codeblock>
            <location sl="311" sc="9" el="337" ec="10">EditHtml.ascx.cs</location>
            <body hash="533b77ee92e1a871320a7d9a901c680e"><![CDATA[{
            txtContent.Visible = false;
            cmdSave.Visible = false;
            //cmdPreview.Enabled = false;
            divPublish.Visible = false;

            divSubmittedContent.Visible = true;

            lblCurrentWorkflowInUse.Text = GetLocalizedString(htmlContent.WorkflowName);
            lblCurrentWorkflowState.Text = GetLocalizedString(htmlContent.StateName);

            litCurrentContentPreview.Text = HtmlTextController.FormatHtmlText(ModuleId, htmlContent.Content, Settings, PortalSettings, Page);
            lblCurrentVersion.Text = htmlContent.Version.ToString();
            DisplayVersions();

            if ((lastPublishedContent != null))
            {
                DisplayPreview(lastPublishedContent);
                //DisplayHistory(lastPublishedContent);
            }
            else
            {
                dnnSitePanelEditHTMLHistory.Visible = false;
                fsEditHtmlHistory.Visible = false;
                DisplayPreview(htmlContent.Content);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="DisplayMasterContentButton">
          <declaration><![CDATA[private void DisplayMasterContentButton()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="233" sc="9" el="245" ec="10">EditHtml.ascx.cs</location>
            <body hash="9e8ade8ed36ff6e3c01b658562466e36"><![CDATA[{
            var objModule = ModuleController.Instance.GetModule(ModuleId, TabId, false);
            if (objModule.DefaultLanguageModule != null)
            {
                cmdMasterContent.Visible = true;
                cmdMasterContent.Text = Localization.GetString("cmdShowMasterContent", LocalResourceFile);
            
                cmdMasterContent.Text = phMasterContent.Visible ?
                    Localization.GetString("cmdHideMasterContent", LocalResourceFile) :
                    Localization.GetString("cmdShowMasterContent", LocalResourceFile);
            
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="DisplayMasterLanguageContent">
          <declaration><![CDATA[private void DisplayMasterLanguageContent()]]></declaration>
          <documentation>
            <summary>
   Displays the content of the master language if localized content is enabled.
 </summary>
          </documentation>
          <codeblock>
            <location sl="198" sc="9" el="209" ec="10">EditHtml.ascx.cs</location>
            <body hash="ae22722bc6535a08ea38bfbce7908656"><![CDATA[{
            //Get master language
            var objModule = ModuleController.Instance.GetModule(ModuleId, TabId, false);
            if (objModule.DefaultLanguageModule != null)
            {
                var masterContent = _htmlTextController.GetTopHtmlText(objModule.DefaultLanguageModule.ModuleID, false, WorkflowID);
                if (masterContent != null)
                {
                    placeMasterContent.Controls.Add(new LiteralControl(HtmlTextController.FormatHtmlText(objModule.DefaultLanguageModule.ModuleID, FormatContent(masterContent.Content), Settings, PortalSettings, Page)));
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="DisplayPreview">
          <declaration><![CDATA[private void DisplayPreview(HtmlTextInfo htmlContent)]]></declaration>
          <documentation>
            <summary>
   Displays the content preview in the preview section
 </summary>
 <param name="htmlContent">Content of the HTML.</param></documentation>
          <codeblock>
            <location sl="252" sc="9" el="266" ec="10">EditHtml.ascx.cs</location>
            <body hash="b11421f3187423371472ddc67e9e8df5"><![CDATA[{
            lblPreviewVersion.Text = htmlContent.Version.ToString();
            lblPreviewWorkflowInUse.Text = GetLocalizedString(htmlContent.WorkflowName);
            lblPreviewWorkflowState.Text = GetLocalizedString(htmlContent.StateName);
            litPreview.Text = HtmlTextController.FormatHtmlText(ModuleId, htmlContent.Content, Settings, PortalSettings, Page);
            phEdit.Visible = false;
            phPreview.Visible = true;
            phHistory.Visible = false;
            cmdEdit.Enabled = true;
            cmdPreview.Enabled = false;
            cmdHistory.Enabled = true;
            DisplayHistory(htmlContent);
            cmdMasterContent.Visible = false;
            ddlRender.Visible = false;
        }]]></body>
          </codeblock>
        </method>
        <method name="DisplayPreview">
          <declaration><![CDATA[private void DisplayPreview(string htmlContent)]]></declaration>
          <documentation>
            <summary>
   Displays the preview in the preview section
 </summary>
 <param name="htmlContent">Content of the HTML.</param></documentation>
          <codeblock>
            <location sl="273" sc="9" el="289" ec="10">EditHtml.ascx.cs</location>
            <body hash="bba29d8b253b4dbe4523f4eddd2eaa04"><![CDATA[{
            litPreview.Text = HtmlTextController.FormatHtmlText(ModuleId, htmlContent, Settings, PortalSettings, Page);
            divPreviewVersion.Visible = false;
            divPreviewWorlflow.Visible = false;

            divPreviewWorkflowState.Visible = true;
            lblPreviewWorkflowState.Text = GetLocalizedString("EditPreviewState");

            phEdit.Visible = false;
            phPreview.Visible = true;
            phHistory.Visible = false;
            cmdEdit.Enabled = true;
            cmdPreview.Enabled = false;
            cmdHistory.Enabled = true;
            cmdMasterContent.Visible = false;
            ddlRender.Visible = false;
        }]]></body>
          </codeblock>
        </method>
        <method name="DisplayVersions">
          <declaration><![CDATA[private void DisplayVersions()]]></declaration>
          <documentation>
            <summary>
   Displays the versions of the html content in the versions section
 </summary>
          </documentation>
          <codeblock>
            <location sl="174" sc="9" el="192" ec="10">EditHtml.ascx.cs</location>
            <body hash="2ef4d6c694ce4cb790930759f9f812dc"><![CDATA[{
            var versions = _htmlTextController.GetAllHtmlText(ModuleId);

            foreach (var item in versions)
            {
                item.StateName = GetLocalizedString(item.StateName);
            }
            dgVersions.DataSource = versions;
            dgVersions.DataBind();

            phEdit.Visible = false;
            phPreview.Visible = false;
            phHistory.Visible = true;
            cmdEdit.Enabled = true;
            cmdPreview.Enabled = true;
            cmdHistory.Enabled = false;
            cmdMasterContent.Visible = false;
            ddlRender.Visible = false;
        }]]></body>
          </codeblock>
        </method>
        <method name="FormatContent">
          <declaration><![CDATA[private string FormatContent(string htmlContent)]]></declaration>
          <documentation>
            <summary>
   Formats the content to make it html safe.
 </summary>
 <param name="htmlContent">Content of the HTML.</param>
 <returns></returns></documentation>
          <codeblock>
            <location sl="373" sc="9" el="378" ec="10">EditHtml.ascx.cs</location>
            <body hash="82cba7451dbf01b98c555d1cb25be575"><![CDATA[{
            var strContent = HttpUtility.HtmlDecode(htmlContent);
            strContent = HtmlTextController.ManageRelativePaths(strContent, PortalSettings.HomeDirectory, "src", PortalId);
            strContent = HtmlTextController.ManageRelativePaths(strContent, PortalSettings.HomeDirectory, "background", PortalId);
            return HttpUtility.HtmlEncode(strContent);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetHTMLContent">
          <declaration><![CDATA[private HtmlTextInfo GetHTMLContent(GridCommandEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="712" sc="9" el="714" ec="10">EditHtml.ascx.cs</location>
            <body hash="f192ec24e0d6969a49fb2c6e4f6b5c96"><![CDATA[{
            return _htmlTextController.GetHtmlText(ModuleId, int.Parse(e.CommandArgument.ToString()));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetLastPublishedVersion">
          <declaration><![CDATA[private HtmlTextInfo GetLastPublishedVersion(int publishedStateID)]]></declaration>
          <documentation>
            <summary>
   Gets the last published version of this module
 </summary>
 <param name="publishedStateID">The published state ID.</param>
 <returns></returns></documentation>
          <codeblock>
            <location sl="426" sc="9" el="428" ec="10">EditHtml.ascx.cs</location>
            <body hash="c4f7b72c3c5f3cdb41e1a78894ba9df6"><![CDATA[{
            return (from version in _htmlTextController.GetAllHtmlText(ModuleId) where version.StateID == publishedStateID orderby version.Version descending select version).ToList()[0];
        }]]></body>
          </codeblock>
        </method>
        <method name="GetLatestHTMLContent">
          <declaration><![CDATA[private HtmlTextInfo GetLatestHTMLContent()]]></declaration>
          <documentation>
            <summary>
   Gets the latest html content of the module
 </summary>
 <returns></returns></documentation>
          <codeblock>
            <location sl="396" sc="9" el="408" ec="10">EditHtml.ascx.cs</location>
            <body hash="5f79ae915cecadfd656a4727294d00c2"><![CDATA[{
            var htmlContent = _htmlTextController.GetTopHtmlText(ModuleId, false, WorkflowID);
            if (htmlContent == null)
            {
                htmlContent = new HtmlTextInfo();
                htmlContent.ItemID = -1;
                htmlContent.StateID = _workflowStateController.GetFirstWorkflowStateID(WorkflowID);
                htmlContent.WorkflowID = WorkflowID;
                htmlContent.ModuleID = ModuleId;
            }

            return htmlContent;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetLocalizedString">
          <declaration><![CDATA[private string GetLocalizedString(string str)]]></declaration>
          <documentation>
            <summary>
   Gets the localized string from a resource file if it exists.
 </summary>
 <param name="str">The STR.</param>
 <returns></returns></documentation>
          <codeblock>
            <location sl="386" sc="9" el="389" ec="10">EditHtml.ascx.cs</location>
            <body hash="00fe3631fd7fa3a65269ddb389569131"><![CDATA[{
            var localizedString = Localization.GetString(str, LocalResourceFile);
            return (string.IsNullOrEmpty(localizedString) ? str : localizedString);
        }]]></body>
          </codeblock>
        </method>
        <method name="OnEditClick">
          <declaration><![CDATA[protected void OnEditClick(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="590" sc="9" el="602" ec="10">EditHtml.ascx.cs</location>
            <body hash="f73db0878c303ab27af78e1f2437f711"><![CDATA[{
            try
            {
                DisplayEdit(hfEditor.Value);

                if (phMasterContent.Visible)
                    DisplayMasterLanguageContent();
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnHistoryClick">
          <declaration><![CDATA[private void OnHistoryClick(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="617" sc="9" el="628" ec="10">EditHtml.ascx.cs</location>
            <body hash="2796554f214d74f95dda9d0959571590"><![CDATA[{
            try
            {
                if (phEdit.Visible)
                    hfEditor.Value = txtContent.Text;
                DisplayVersions();
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnHistoryGridItemDataBound">
          <declaration><![CDATA[protected void OnHistoryGridItemDataBound(object sender, GridItemEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="650" sc="9" el="659" ec="10">EditHtml.ascx.cs</location>
            <body hash="b443d466d842c696dc6fec6ff46f5e71"><![CDATA[{
            var item = e.Item;

            if (item.ItemType == GridItemType.Item || item.ItemType == GridItemType.AlternatingItem || item.ItemType == GridItemType.SelectedItem)
            {
                //Localize columns
                item.Cells[2].Text = Localization.GetString(item.Cells[2].Text, LocalResourceFile);
                item.Cells[3].Text = Localization.GetString(item.Cells[3].Text, LocalResourceFile);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="435" sc="9" el="450" ec="10">EditHtml.ascx.cs</location>
            <body hash="8c1a9a22718c117e10436b7808e32770"><![CDATA[{
            base.OnInit(e);
            
            hlCancel.NavigateUrl = Globals.NavigateURL();

            cmdEdit.Click += OnEditClick;
            cmdPreview.Click += OnPreviewClick;
            cmdHistory.Click += OnHistoryClick;
            cmdMasterContent.Click += OnMasterContentClick;
            ddlRender.SelectedIndexChanged += OnRenderSelectedIndexChanged;
            cmdSave.Click += OnSaveClick;
            dgHistory.ItemDataBound += OnHistoryGridItemDataBound;
            dgVersions.ItemCommand += OnVersionsGridItemCommand;
            dgVersions.ItemDataBound += OnVersionsGridItemDataBound;
            dgVersions.PageIndexChanged += OnVersionsGridPageIndexChanged;
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="457" sc="9" el="514" ec="10">EditHtml.ascx.cs</location>
            <body hash="7ae594b9d3d40e23e01180b7581c8104"><![CDATA[{
            base.OnLoad(e);

            try
            {                
                var htmlContentItemID = -1;
                var htmlContent = _htmlTextController.GetTopHtmlText(ModuleId, false, WorkflowID);

                if ((htmlContent != null))
                {
                    htmlContentItemID = htmlContent.ItemID;
                }

                if (!Page.IsPostBack)
                {
                    var workflowStates = _workflowStateController.GetWorkflowStates(WorkflowID);
                    var maxVersions = _htmlTextController.GetMaximumVersionHistory(PortalId);
                    var userCanEdit = UserInfo.IsSuperUser || PortalSecurity.IsInRole(PortalSettings.AdministratorRoleName);

                    lblMaxVersions.Text = maxVersions.ToString();
                    dgVersions.PageSize = Math.Min(Math.Max(maxVersions, 5), 10); //min 5, max 10

                    switch (workflowStates.Count)
                    {
                        case 1:
                            CurrentWorkflowType = WorkflowType.DirectPublish;
                            break;
                        case 2:
                            CurrentWorkflowType = WorkflowType.ContentStaging;
                            break;
                    }

                    if (htmlContentItemID != -1)
                    {
                        DisplayContent(htmlContent);
                        //DisplayPreview(htmlContent);
                        DisplayHistory(htmlContent);
                    }
                    else
                    {
                        DisplayInitialContent(workflowStates[0] as WorkflowStateInfo);
                    }

                    divPublish.Visible = CurrentWorkflowType != WorkflowType.DirectPublish;
                    phCurrentVersion.Visible = CurrentWorkflowType != WorkflowType.DirectPublish;
                    phPreviewVersion.Visible = CurrentWorkflowType != WorkflowType.DirectPublish;
                    //DisplayVersions();

                    BindRenderItems();
                    ddlRender.SelectedValue = txtContent.Mode;
                }
                
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnMasterContentClick">
          <declaration><![CDATA[private void OnMasterContentClick(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="632" sc="9" el="647" ec="10">EditHtml.ascx.cs</location>
            <body hash="5428cddb64f09a5b353636db046bad8b"><![CDATA[{
            try
            {
                phMasterContent.Visible = !phMasterContent.Visible;
                cmdMasterContent.Text = phMasterContent.Visible ?
                    Localization.GetString("cmdHideMasterContent", LocalResourceFile) :
                    Localization.GetString("cmdShowMasterContent", LocalResourceFile);
                
                if (phMasterContent.Visible)
                    DisplayMasterLanguageContent();
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnPreviewClick">
          <declaration><![CDATA[protected void OnPreviewClick(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="604" sc="9" el="615" ec="10">EditHtml.ascx.cs</location>
            <body hash="01bfc2494086ac37b20a6cac9900207d"><![CDATA[{
            try
            {
                if (phEdit.Visible)
                    hfEditor.Value = txtContent.Text;
                DisplayPreview(phEdit.Visible ? txtContent.Text : hfEditor.Value);
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnRenderSelectedIndexChanged">
          <declaration><![CDATA[private void OnRenderSelectedIndexChanged(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="453" sc="9" el="455" ec="10">EditHtml.ascx.cs</location>
            <body hash="033a0e19003355be3b1d689a88b75c26"><![CDATA[{
            txtContent.ChangeMode(ddlRender.SelectedValue);
        }]]></body>
          </codeblock>
        </method>
        <method name="OnSaveClick">
          <declaration><![CDATA[protected void OnSaveClick(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="517" sc="9" el="588" ec="10">EditHtml.ascx.cs</location>
            <body hash="5b4b3b96b2302c190a90010d81284083"><![CDATA[{
            const bool redirect = true;

            try
            {
                // get content
                var htmlContent = GetLatestHTMLContent();

                var aliases = from PortalAliasInfo pa in PortalAliasController.Instance.GetPortalAliasesByPortalId(PortalSettings.PortalId) 
                              select pa.HTTPAlias;
                string content;
                if (phEdit.Visible)
                    content = txtContent.Text;
                else
                    content = hfEditor.Value;


                if (Request.QueryString["nuru"] == null)
                {
                    content = HtmlUtils.AbsoluteToRelativeUrls(content, aliases);
                }
                htmlContent.Content = content;

                var draftStateID = _workflowStateController.GetFirstWorkflowStateID(WorkflowID);
                var publishedStateID = _workflowStateController.GetLastWorkflowStateID(WorkflowID);

                switch (CurrentWorkflowType)
                {
                    case WorkflowType.DirectPublish:
                        _htmlTextController.UpdateHtmlText(htmlContent, _htmlTextController.GetMaximumVersionHistory(PortalId));

                        break;
                    case WorkflowType.ContentStaging:
                        if (chkPublish.Checked)
                        {
                            //if it's already published set it to draft
                            if (htmlContent.StateID == publishedStateID)
                            {
                                htmlContent.StateID = draftStateID;
                            }
                            else
                            {
                                htmlContent.StateID = publishedStateID;
                                //here it's in published mode
                            }
                        }
                        else
                        {
                            //if it's already published set it back to draft
                            if ((htmlContent.StateID != draftStateID))
                            {
                                htmlContent.StateID = draftStateID;
                            }
                        }

                        _htmlTextController.UpdateHtmlText(htmlContent, _htmlTextController.GetMaximumVersionHistory(PortalId));
                        break;
                }
            }
            catch (Exception exc)
            {
                Exceptions.LogException(exc);
                UI.Skins.Skin.AddModuleMessage(Page, "Error occurred: ", exc.Message, ModuleMessage.ModuleMessageType.RedError);
                return;
            }

            // redirect back to portal
            if (redirect)
            {
                Response.Redirect(Globals.NavigateURL(), true);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnVersionsGridItemCommand">
          <declaration><![CDATA[protected void OnVersionsGridItemCommand(object source, GridCommandEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="662" sc="9" el="709" ec="10">EditHtml.ascx.cs</location>
            <body hash="67f8726ea9b337de58da5bc0743be75e"><![CDATA[{
            try
            {
                HtmlTextInfo htmlContent;

                //disable delete button if user doesn't have delete rights???
                switch (e.CommandName.ToLower())
                {
                    case "remove":
                        htmlContent = GetHTMLContent(e);
                        _htmlTextController.DeleteHtmlText(ModuleId, htmlContent.ItemID);
                        break;
                    case "rollback":
                        htmlContent = GetHTMLContent(e);
                        htmlContent.ItemID = -1;
                        htmlContent.ModuleID = ModuleId;
                        htmlContent.WorkflowID = WorkflowID;
                        htmlContent.StateID = _workflowStateController.GetFirstWorkflowStateID(WorkflowID);
                        _htmlTextController.UpdateHtmlText(htmlContent, _htmlTextController.GetMaximumVersionHistory(PortalId));
                        break;
                    case "preview":
                        htmlContent = GetHTMLContent(e);
                        DisplayPreview(htmlContent);
                        break;
                }

                if ((e.CommandName.ToLower() != "preview"))
                {
                    var latestContent = _htmlTextController.GetTopHtmlText(ModuleId, false, WorkflowID);
                    if (latestContent == null)
                    {
                        DisplayInitialContent(_workflowStateController.GetWorkflowStates(WorkflowID)[0] as WorkflowStateInfo);
                    }
                    else
                    {
                        DisplayContent(latestContent);
                        //DisplayPreview(latestContent);
                        //DisplayVersions();
                    }
                }

                //Module failed to load
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnVersionsGridItemDataBound">
          <declaration><![CDATA[protected void OnVersionsGridItemDataBound(object sender, GridItemEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="717" sc="9" el="778" ec="10">EditHtml.ascx.cs</location>
            <body hash="39562b4a6802f50ef8cdb49ae444c5da"><![CDATA[{
            if ((e.Item.ItemType == GridItemType.Item || e.Item.ItemType == GridItemType.AlternatingItem || e.Item.ItemType == GridItemType.SelectedItem))
            {
                var item = e.Item as GridDataItem;
                var htmlContent = item.DataItem as HtmlTextInfo;
                var createdBy = "Default";

                if ((htmlContent.CreatedByUserID != -1))
                {
                    var createdByByUser = UserController.GetUserById(PortalId, htmlContent.CreatedByUserID);
                    if (createdByByUser != null)
                    {
                        createdBy = createdByByUser.DisplayName;
                    }                    
                }

                foreach (TableCell cell in item.Cells)
                {
                    foreach (Control cellControl in cell.Controls)
                    {
                        if (cellControl is ImageButton)
                        {
                            var imageButton = cellControl as ImageButton;
                            imageButton.CommandArgument = htmlContent.ItemID.ToString();
                            switch (imageButton.CommandName.ToLower())
                            {
                                case "rollback":
                                    //hide rollback for the first item
                                    if (dgVersions.CurrentPageIndex == 0)
                                    {
                                        if ((item.ItemIndex == 0))
                                        {
                                            imageButton.Visible = false;
                                            break;
                                        }
                                    }

                                    imageButton.Visible = true;

                                    break;
                                case "remove":
                                    var msg = GetLocalizedString("DeleteVersion.Confirm");
                                    msg =
                                        msg.Replace("[VERSION]", htmlContent.Version.ToString()).Replace("[STATE]", htmlContent.StateName).Replace("[DATECREATED]", htmlContent.CreatedOnDate.ToString())
                                            .Replace("[USERNAME]", createdBy);
                                    imageButton.OnClientClick = "return confirm(\"" + msg + "\");";
                                    //hide the delete button
                                    var showDelete = UserInfo.IsSuperUser || PortalSecurity.IsInRole(PortalSettings.AdministratorRoleName);

                                    if (!showDelete)
                                    {
                                        showDelete = htmlContent.IsPublished == false;
                                    }

                                    imageButton.Visible = showDelete;
                                    break;
                            }
                        }
                    }
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnVersionsGridPageIndexChanged">
          <declaration><![CDATA[protected void OnVersionsGridPageIndexChanged(object source, GridPageChangedEventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="781" sc="9" el="783" ec="10">EditHtml.ascx.cs</location>
            <body hash="b0a6174351d2f482c86d6cf30e3f09d4"><![CDATA[{
            DisplayVersions();
        }]]></body>
          </codeblock>
        </method>
        <method name="UserCanReview">
          <declaration><![CDATA[private bool UserCanReview(HtmlTextInfo htmlContent)]]></declaration>
          <documentation>
            <summary>
   Returns whether or not the user has review permissions to this module
 </summary>
 <param name="htmlContent">Content of the HTML.</param>
 <returns></returns></documentation>
          <codeblock>
            <location sl="416" sc="9" el="418" ec="10">EditHtml.ascx.cs</location>
            <body hash="e39f332f006fdef33570007fb8376d15"><![CDATA[{
            return (htmlContent != null) && WorkflowStatePermissionController.HasWorkflowStatePermission(WorkflowStatePermissionController.GetWorkflowStatePermissions(htmlContent.StateID), "REVIEW");
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_htmlTextController">
          <declaration><![CDATA[private readonly HtmlTextController _htmlTextController = new HtmlTextController();]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_htmlTextLogController">
          <declaration><![CDATA[private readonly HtmlTextLogController _htmlTextLogController = new HtmlTextLogController();]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_workflowStateController">
          <declaration><![CDATA[private readonly WorkflowStateController _workflowStateController = new WorkflowStateController();]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="chkPublish">
          <declaration><![CDATA[protected CheckBox chkPublish;]]></declaration>
          <documentation>
            <summary>
 chkPublish control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="cmdEdit">
          <declaration><![CDATA[protected LinkButton cmdEdit;]]></declaration>
          <documentation>
            <summary>
 cmdEdit control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="cmdHistory">
          <declaration><![CDATA[protected LinkButton cmdHistory;]]></declaration>
          <documentation>
            <summary>
 cmdHistory control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="cmdMasterContent">
          <declaration><![CDATA[protected LinkButton cmdMasterContent;]]></declaration>
          <documentation>
            <summary>
 cmdMasterContent control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="cmdPreview">
          <declaration><![CDATA[protected LinkButton cmdPreview;]]></declaration>
          <documentation>
            <summary>
 cmdPreview control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="cmdSave">
          <declaration><![CDATA[protected LinkButton cmdSave;]]></declaration>
          <documentation>
            <summary>
 cmdSave control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="customJS">
          <declaration><![CDATA[protected DnnCssInclude customJS;]]></declaration>
          <documentation>
            <summary>
 customJS control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="ddlRender">
          <declaration><![CDATA[protected DropDownList ddlRender;]]></declaration>
          <documentation>
            <summary>
 ddlRender control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="dgHistory">
          <declaration><![CDATA[protected DnnGrid dgHistory;]]></declaration>
          <documentation>
            <summary>
 dgHistory control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="dgVersions">
          <declaration><![CDATA[protected DnnGrid dgVersions;]]></declaration>
          <documentation>
            <summary>
 dgVersions control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="Div1">
          <declaration><![CDATA[protected HtmlGenericControl Div1;]]></declaration>
          <documentation>
            <summary>
 Div1 control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="Div3">
          <declaration><![CDATA[protected HtmlGenericControl Div3;]]></declaration>
          <documentation>
            <summary>
 Div3 control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="divCurrentWorkflowState">
          <declaration><![CDATA[protected HtmlGenericControl divCurrentWorkflowState;]]></declaration>
          <documentation>
            <summary>
 divCurrentWorkflowState control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="divPreviewVersion">
          <declaration><![CDATA[protected HtmlGenericControl divPreviewVersion;]]></declaration>
          <documentation>
            <summary>
 divPreviewVersion control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="divPreviewWorkflowState">
          <declaration><![CDATA[protected HtmlGenericControl divPreviewWorkflowState;]]></declaration>
          <documentation>
            <summary>
 divPreviewWorkflowState control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="divPreviewWorlflow">
          <declaration><![CDATA[protected HtmlGenericControl divPreviewWorlflow;]]></declaration>
          <documentation>
            <summary>
 divPreviewWorlflow control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="divPublish">
          <declaration><![CDATA[protected HtmlGenericControl divPublish;]]></declaration>
          <documentation>
            <summary>
 divPublish control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="divSubmittedContent">
          <declaration><![CDATA[protected HtmlGenericControl divSubmittedContent;]]></declaration>
          <documentation>
            <summary>
 divSubmittedContent control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="dnnSitePanelEditHTMLHistory">
          <declaration><![CDATA[protected HtmlGenericControl dnnSitePanelEditHTMLHistory;]]></declaration>
          <documentation>
            <summary>
 dnnSitePanelEditHTMLHistory control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="ehmContent">
          <declaration><![CDATA[protected HtmlGenericControl ehmContent;]]></declaration>
          <documentation>
            <summary>
 ehmContent control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="fsEditHtmlHistory">
          <declaration><![CDATA[protected HtmlGenericControl fsEditHtmlHistory;]]></declaration>
          <documentation>
            <summary>
 fsEditHtmlHistory control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="hfEditor">
          <declaration><![CDATA[protected HiddenField hfEditor;]]></declaration>
          <documentation>
            <summary>
 hfEditor control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="hlCancel">
          <declaration><![CDATA[protected HyperLink hlCancel;]]></declaration>
          <documentation>
            <summary>
 hlCancel control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="lblCurrentVersion">
          <declaration><![CDATA[protected Label lblCurrentVersion;]]></declaration>
          <documentation>
            <summary>
 lblCurrentVersion control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="lblCurrentWorkflowInUse">
          <declaration><![CDATA[protected Label lblCurrentWorkflowInUse;]]></declaration>
          <documentation>
            <summary>
 lblCurrentWorkflowInUse control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="lblCurrentWorkflowState">
          <declaration><![CDATA[protected Label lblCurrentWorkflowState;]]></declaration>
          <documentation>
            <summary>
 lblCurrentWorkflowState control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="lblMaxVersions">
          <declaration><![CDATA[protected Label lblMaxVersions;]]></declaration>
          <documentation>
            <summary>
 lblMaxVersions control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="lblPreviewVersion">
          <declaration><![CDATA[protected Label lblPreviewVersion;]]></declaration>
          <documentation>
            <summary>
 lblPreviewVersion control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="lblPreviewWorkflowInUse">
          <declaration><![CDATA[protected Label lblPreviewWorkflowInUse;]]></declaration>
          <documentation>
            <summary>
 lblPreviewWorkflowInUse control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="lblPreviewWorkflowState">
          <declaration><![CDATA[protected Label lblPreviewWorkflowState;]]></declaration>
          <documentation>
            <summary>
 lblPreviewWorkflowState control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="litCurrentContentPreview">
          <declaration><![CDATA[protected Literal litCurrentContentPreview;]]></declaration>
          <documentation>
            <summary>
 litCurrentContentPreview control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="litPreview">
          <declaration><![CDATA[protected Literal litPreview;]]></declaration>
          <documentation>
            <summary>
 litPreview control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="phCurrentVersion">
          <declaration><![CDATA[protected PlaceHolder phCurrentVersion;]]></declaration>
          <documentation>
            <summary>
 phCurrentVersion control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="phEdit">
          <declaration><![CDATA[protected PlaceHolder phEdit;]]></declaration>
          <documentation>
            <summary>
 phEdit control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="phHistory">
          <declaration><![CDATA[protected PlaceHolder phHistory;]]></declaration>
          <documentation>
            <summary>
 phHistory control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="phMasterContent">
          <declaration><![CDATA[protected PlaceHolder phMasterContent;]]></declaration>
          <documentation>
            <summary>
 phMasterContent control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="phPreview">
          <declaration><![CDATA[protected PlaceHolder phPreview;]]></declaration>
          <documentation>
            <summary>
 phPreview control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="phPreviewVersion">
          <declaration><![CDATA[protected PlaceHolder phPreviewVersion;]]></declaration>
          <documentation>
            <summary>
 phPreviewVersion control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="placeMasterContent">
          <declaration><![CDATA[protected PlaceHolder placeMasterContent;]]></declaration>
          <documentation>
            <summary>
 placeMasterContent control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="plActionOnSave">
          <declaration><![CDATA[protected UserControl plActionOnSave;]]></declaration>
          <documentation>
            <summary>
 plActionOnSave control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="plCurrentWorkflowState">
          <declaration><![CDATA[protected UserControl plCurrentWorkflowState;]]></declaration>
          <documentation>
            <summary>
 plCurrentWorkflowState control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="plCurrentWorkVersion">
          <declaration><![CDATA[protected Label plCurrentWorkVersion;]]></declaration>
          <documentation>
            <summary>
 plCurrentWorkVersion control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="plMaxVersions">
          <declaration><![CDATA[protected UserControl plMaxVersions;]]></declaration>
          <documentation>
            <summary>
 plMaxVersions control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="plPreviewVersion">
          <declaration><![CDATA[protected UserControl plPreviewVersion;]]></declaration>
          <documentation>
            <summary>
 plPreviewVersion control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="plPreviewWorkflowInUse">
          <declaration><![CDATA[protected UserControl plPreviewWorkflowInUse;]]></declaration>
          <documentation>
            <summary>
 plPreviewWorkflowInUse control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="plPreviewWorkflowState">
          <declaration><![CDATA[protected UserControl plPreviewWorkflowState;]]></declaration>
          <documentation>
            <summary>
 plPreviewWorkflowState control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="txtContent">
          <declaration><![CDATA[protected TextEditor txtContent;]]></declaration>
          <documentation>
            <summary>
 txtContent control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
      </fields>
      <properties>
        <property name="CurrentView">
          <declaration><![CDATA[protected string CurrentView]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="133" sc="13" el="142" ec="14">EditHtml.ascx.cs</location>
            <body hash="786d2cfa0460584e56a08bfaf9f997ab"><![CDATA[{
                if (phEdit.Visible)
                    return "EditView";
                else if (phPreview.Visible)
                    return "PreviewView";
                if (phHistory.Visible)
                    return "HistoryView";
                else
                    return "";
            }]]></body>
          </codeblock>
        </property>
        <property name="CurrentWorkflowType">
          <declaration><![CDATA[private EditHtml.WorkflowType CurrentWorkflowType]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="115" sc="13" el="123" ec="14">EditHtml.ascx.cs</location>
            <body hash="dd5bff3f4680d452cd2176b0656e2391"><![CDATA[{
                var currentWorkflowType = default(WorkflowType);
                if (ViewState["_currentWorkflowType"] != null)
                {
                    currentWorkflowType = (WorkflowType) Enum.Parse(typeof (WorkflowType), ViewState["_currentWorkflowType"].ToString());
                }

                return currentWorkflowType;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="125" sc="13" el="127" ec="14">EditHtml.ascx.cs</location>
            <body hash="e89395c678b38c370ee1cc9cf18fa79e"><![CDATA[{
                ViewState["_currentWorkflowType"] = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="TempContent">
          <declaration><![CDATA[private string TempContent]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="98" sc="13" el="105" ec="14">EditHtml.ascx.cs</location>
            <body hash="2df1c8923561fd489590a6305ace04d9"><![CDATA[{
                var content = "";
                if ((ViewState["TempContent"] != null))
                {
                    content = ViewState["TempContent"].ToString();
                }
                return content;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="107" sc="13" el="109" ec="14">EditHtml.ascx.cs</location>
            <body hash="7da4d770660cd53e8d995e3eb1e292e6"><![CDATA[{
                ViewState["TempContent"] = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="WorkflowID">
          <declaration><![CDATA[private int WorkflowID]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="78" sc="13" el="92" ec="14">EditHtml.ascx.cs</location>
            <body hash="d349e3071cb19ba6ed03dbd9cbf57458"><![CDATA[{
                int workflowID;

                if (ViewState["WorkflowID"] == null)
                {
                    workflowID = _htmlTextController.GetWorkflow(ModuleId, TabId, PortalId).Value;
                    ViewState.Add("WorkflowID", workflowID);
                }
                else
                {
                    workflowID = int.Parse(ViewState["WorkflowID"].ToString());
                }

                return workflowID;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="HtmlModule">
      <declaration><![CDATA[public class HtmlModule : HtmlModuleBase, IActionable]]></declaration>
      <documentation>-----------------------------------------------------------------------------
 <summary>
   The HtmlModule Class provides the UI for displaying the Html
 </summary>
 <remarks>
 </remarks>
 -----------------------------------------------------------------------------</documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public HtmlModule()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="lblContent_UpdateLabel">
          <declaration><![CDATA[private void lblContent_UpdateLabel(object source, DNNLabelEditEventArgs e)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   lblContent_UpdateLabel allows for inline editing of content
 </summary>
 <remarks>
 </remarks>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="188" sc="9" el="226" ec="10">HtmlModule.ascx.cs</location>
            <body hash="e9cefbe68843a5c1f5bf116d65ee97a1"><![CDATA[{
            try
            {
                // verify security 
                if ((!new PortalSecurity().InputFilter(e.Text, PortalSecurity.FilterFlag.NoScripting).Equals(e.Text)))
                {
                    throw new SecurityException();
                }
                else if (EditorEnabled && IsEditable && PortalSettings.UserMode == PortalSettings.Mode.Edit)
                {
                    // get content
                    var objHTML = new HtmlTextController();
                    var objWorkflow = new WorkflowStateController();
                    HtmlTextInfo objContent = objHTML.GetTopHtmlText(ModuleId, false, WorkflowID);
                    if (objContent == null)
                    {
                        objContent = new HtmlTextInfo();
                        objContent.ItemID = -1;
                    }

                    // set content attributes
                    objContent.ModuleID = ModuleId;
                    objContent.Content = Server.HtmlEncode(e.Text);
                    objContent.WorkflowID = WorkflowID;
                    objContent.StateID = objWorkflow.GetFirstWorkflowStateID(WorkflowID);

                    // save the content
                    objHTML.UpdateHtmlText(objContent, objHTML.GetMaximumVersionHistory(PortalId));
                }
                else
                {
                    throw new SecurityException();
                }
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="ModuleAction_Click">
          <declaration><![CDATA[private void ModuleAction_Click(object sender, ActionEventArgs e)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   ModuleAction_Click handles all ModuleAction events raised from the action menu
 </summary>
 <remarks>
 </remarks>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="236" sc="9" el="267" ec="10">HtmlModule.ascx.cs</location>
            <body hash="79b8859780a0e40b335d467523dc8247"><![CDATA[{
            try
            {
                if (e.Action.CommandArgument == "publish")
                {
                    // verify security 
                    if (IsEditable && PortalSettings.UserMode == PortalSettings.Mode.Edit)
                    {
                        // get content
                        var objHTML = new HtmlTextController();
                        HtmlTextInfo objContent = objHTML.GetTopHtmlText(ModuleId, false, WorkflowID);

                        var objWorkflow = new WorkflowStateController();
                        if (objContent.StateID == objWorkflow.GetFirstWorkflowStateID(WorkflowID))
                        {
                            // publish content
                            objContent.StateID = objWorkflow.GetNextWorkflowStateID(objContent.WorkflowID, objContent.StateID);

                            // save the content
                            objHTML.UpdateHtmlText(objContent, objHTML.GetMaximumVersionHistory(PortalId));

                            // refresh page
                            Response.Redirect(Globals.NavigateURL(), true);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   Page_Init runs when the control is initialized
 </summary>
 <remarks>
 </remarks>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="68" sc="9" el="83" ec="10">HtmlModule.ascx.cs</location>
            <body hash="8b8033521d8db1ce817d655b6cd0667a"><![CDATA[{
            base.OnInit(e);
            lblContent.UpdateLabel += lblContent_UpdateLabel;
            EditorEnabled = PortalSettings.InlineEditorEnabled;
            try
            {
                WorkflowID = new HtmlTextController().GetWorkflow(ModuleId, TabId, PortalId).Value;

                //Add an Action Event Handler to the Skin
                AddActionHandler(ModuleAction_Click);
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   Page_Load runs when the control is loaded
 </summary>
 <remarks>
 </remarks>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="93" sc="9" el="178" ec="10">HtmlModule.ascx.cs</location>
            <body hash="061223fc551c01a00befc6d76917b292"><![CDATA[{
            base.OnLoad(e);
            try
            {
                var objHTML = new HtmlTextController();

                // edit in place
                if (EditorEnabled && IsEditable && PortalSettings.UserMode == PortalSettings.Mode.Edit)
                {
                    EditorEnabled = true;
                }
                else
                {
                    EditorEnabled = false;
                }

                // get content
                HtmlTextInfo htmlTextInfo = null;
                string contentString = "";

                htmlTextInfo = objHTML.GetTopHtmlText(ModuleId, !IsEditable, WorkflowID);

                if ((htmlTextInfo != null))
                {
                    //don't decode yet (this is done in FormatHtmlText)
                    contentString = htmlTextInfo.Content;
                }
                else
                {
                    // get default content from resource file
                    if (!IsPostBack)
                    {
                        if (PortalSettings.UserMode == PortalSettings.Mode.Edit)
                        {
                            if (EditorEnabled)
                            {
                                contentString = Localization.GetString("AddContentFromToolBar.Text", LocalResourceFile);
                            }
                            else
                            {
                                contentString = Localization.GetString("AddContentFromActionMenu.Text", LocalResourceFile);
                            }
                        }
                        else
                        {
                            // hide the module if no content and in view mode
                            ContainerControl.Visible = false;
                        }
                    }
                }

                // token replace
                EditorEnabled = EditorEnabled && !Settings.ReplaceTokens;

                // localize toolbar
                if (!IsPostBack)
                {
                    if (EditorEnabled)
                    {
                        foreach (DNNToolBarButton button in editorDnnToobar.Buttons)
                        {
                            button.ToolTip = Localization.GetString(button.ToolTip + ".ToolTip", LocalResourceFile);
                        }
                    }
                    else
                    {
                        editorDnnToobar.Visible = false;
                    }
                }

                lblContent.EditEnabled = EditorEnabled;

                // add content to module
                lblContent.Controls.Add(new LiteralControl(HtmlTextController.FormatHtmlText(ModuleId, contentString, Settings, PortalSettings, Page)));

                //set normalCheckBox on the content wrapper to prevent form decoration if its disabled.
                if (!Settings.UseDecorate)
                {
                    lblContent.CssClass = string.Format("{0} normalCheckBox", lblContent.CssClass);
                }
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="editorDnnToobar">
          <declaration><![CDATA[protected DNNToolBar editorDnnToobar;]]></declaration>
          <documentation>
            <summary>
 editorDnnToobar control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="EditorEnabled">
          <declaration><![CDATA[private bool EditorEnabled;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="lblContent">
          <declaration><![CDATA[protected DNNLabelEdit lblContent;]]></declaration>
          <documentation>
            <summary>
 lblContent control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="tbBold">
          <declaration><![CDATA[protected DNNToolBarButton tbBold;]]></declaration>
          <documentation>
            <summary>
 tbBold control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="tbCancel">
          <declaration><![CDATA[protected DNNToolBarButton tbCancel;]]></declaration>
          <documentation>
            <summary>
 tbCancel control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="tbCreateLink">
          <declaration><![CDATA[protected DNNToolBarButton tbCreateLink;]]></declaration>
          <documentation>
            <summary>
 tbCreateLink control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="tbEdit">
          <declaration><![CDATA[protected DNNToolBarButton tbEdit;]]></declaration>
          <documentation>
            <summary>
 tbEdit control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="tbIndent">
          <declaration><![CDATA[protected DNNToolBarButton tbIndent;]]></declaration>
          <documentation>
            <summary>
 tbIndent control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="tbItalic">
          <declaration><![CDATA[protected DNNToolBarButton tbItalic;]]></declaration>
          <documentation>
            <summary>
 tbItalic control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="tbJustifyCenter">
          <declaration><![CDATA[protected DNNToolBarButton tbJustifyCenter;]]></declaration>
          <documentation>
            <summary>
 tbJustifyCenter control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="tbJustifyLeft">
          <declaration><![CDATA[protected DNNToolBarButton tbJustifyLeft;]]></declaration>
          <documentation>
            <summary>
 tbJustifyLeft control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="tbJustifyRight">
          <declaration><![CDATA[protected DNNToolBarButton tbJustifyRight;]]></declaration>
          <documentation>
            <summary>
 tbJustifyRight control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="tbOrderedList">
          <declaration><![CDATA[protected DNNToolBarButton tbOrderedList;]]></declaration>
          <documentation>
            <summary>
 tbOrderedList control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="tbOutdent">
          <declaration><![CDATA[protected DNNToolBarButton tbOutdent;]]></declaration>
          <documentation>
            <summary>
 tbOutdent control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="tbSave">
          <declaration><![CDATA[protected DNNToolBarButton tbSave;]]></declaration>
          <documentation>
            <summary>
 tbSave control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="tbUnderline">
          <declaration><![CDATA[protected DNNToolBarButton tbUnderline;]]></declaration>
          <documentation>
            <summary>
 tbUnderline control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="tbUnorderedList">
          <declaration><![CDATA[protected DNNToolBarButton tbUnorderedList;]]></declaration>
          <documentation>
            <summary>
 tbUnorderedList control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="WorkflowID">
          <declaration><![CDATA[private int WorkflowID;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="ModuleActions">
          <declaration><![CDATA[public ModuleActionCollection ModuleActions]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   ModuleActions is an interface property that returns the module actions collection for the module
 </summary>
 <remarks>
 </remarks>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="283" sc="13" el="371" ec="14">HtmlModule.ascx.cs</location>
            <body hash="6aa97f149364539045a2f22546801659"><![CDATA[{
                // add the Edit Text action
                var Actions = new ModuleActionCollection();
                Actions.Add(GetNextActionID(),
                            Localization.GetString(ModuleActionType.AddContent, LocalResourceFile),
                            ModuleActionType.AddContent,
                            "",
                            "",
                            EditUrl(),
                            false,
                            SecurityAccessLevel.Edit,
                            true,
                            false);

                // get the content
                var objHTML = new HtmlTextController();
                var objWorkflow = new WorkflowStateController();
                WorkflowID = objHTML.GetWorkflow(ModuleId, TabId, PortalId).Value;

                HtmlTextInfo objContent = objHTML.GetTopHtmlText(ModuleId, false, WorkflowID);
                if ((objContent != null))
                {
                    // if content is in the first state
                    if (objContent.StateID == objWorkflow.GetFirstWorkflowStateID(WorkflowID))
                    {
                        // if not direct publish workflow
                        if (objWorkflow.GetWorkflowStates(WorkflowID).Count > 1)
                        {
                            // add publish action
                            Actions.Add(GetNextActionID(),
                                        Localization.GetString("PublishContent.Action", LocalResourceFile),
                                        ModuleActionType.AddContent,
                                        "publish",
                                        "grant.gif",
                                        "",
                                        true,
                                        SecurityAccessLevel.Edit,
                                        true,
                                        false);
                        }
                    }
                    else
                    {
                        // if the content is not in the last state of the workflow then review is required
                        if (objContent.StateID != objWorkflow.GetLastWorkflowStateID(WorkflowID))
                        {
                            // if the user has permissions to review the content
                            if (WorkflowStatePermissionController.HasWorkflowStatePermission(WorkflowStatePermissionController.GetWorkflowStatePermissions(objContent.StateID), "REVIEW"))
                            {
                                // add approve and reject actions
                                Actions.Add(GetNextActionID(),
                                            Localization.GetString("ApproveContent.Action", LocalResourceFile),
                                            ModuleActionType.AddContent,
                                            "",
                                            "grant.gif",
                                            EditUrl("action", "approve", "Review"),
                                            false,
                                            SecurityAccessLevel.Edit,
                                            true,
                                            false);
                                Actions.Add(GetNextActionID(),
                                            Localization.GetString("RejectContent.Action", LocalResourceFile),
                                            ModuleActionType.AddContent,
                                            "",
                                            "deny.gif",
                                            EditUrl("action", "reject", "Review"),
                                            false,
                                            SecurityAccessLevel.Edit,
                                            true,
                                            false);
                            }
                        }
                    }
                }

                // add mywork to action menu
                Actions.Add(GetNextActionID(),
                            Localization.GetString("MyWork.Action", LocalResourceFile),
                            "MyWork.Action",
                            "",
                            "view.gif",
                            EditUrl("MyWork"),
                            false,
                            SecurityAccessLevel.Edit,
                            true,
                            false);

                return Actions;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="HtmlTextController">
      <declaration><![CDATA[public class HtmlTextController : ModuleSearchBase, IPortable, IUpgradeable]]></declaration>
      <documentation>-----------------------------------------------------------------------------
 Namespace:  DotNetNuke.Modules.Html
 Project:    DotNetNuke
 Class:      HtmlTextController
 -----------------------------------------------------------------------------
 <summary>
   The HtmlTextController is the Controller class for managing HtmlText information the HtmlText module
 </summary>
 <remarks>
 </remarks></documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public HtmlTextController()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="AddHtmlNotification">
          <declaration><![CDATA[private static void AddHtmlNotification(string subject, string body, UserInfo user)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="68" sc="9" el="75" ec="10">Components\HtmlTextController.cs</location>
            <body hash="43be01b342495e86158b9aabc5f24442"><![CDATA[{
            var notificationType = NotificationsController.Instance.GetNotificationType("HtmlNotification");
            var portalSettings = PortalController.Instance.GetCurrentPortalSettings();
            var sender = UserController.GetUserById(portalSettings.PortalId, portalSettings.AdministratorId);

            var notification = new Notification {NotificationTypeID = notificationType.NotificationTypeId, Subject = subject, Body = body, IncludeDismissAction = true, SenderUserID = sender.UserID};
            NotificationsController.Instance.SendNotification(notification, portalSettings.PortalId, null, new List<UserInfo> { user });
        }]]></body>
          </codeblock>
        </method>
        <method name="AddNotificationTypes">
          <declaration><![CDATA[private void AddNotificationTypes()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="873" sc="9" el="879" ec="10">Components\HtmlTextController.cs</location>
            <body hash="a96390611f5d737b6906ed578df2c427"><![CDATA[{
            var type = new NotificationType { Name = "HtmlNotification", Description = "Html Module Notification" };
            if (NotificationsController.Instance.GetNotificationType(type.Name) == null)
            {
                NotificationsController.Instance.CreateNotificationType(type);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="ClearModuleSettings">
          <declaration><![CDATA[private void ClearModuleSettings(ModuleInfo objModule)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="78" sc="9" el="83" ec="10">Components\HtmlTextController.cs</location>
            <body hash="21cbda3f75a3947bd32ec4a6bfc01e2f"><![CDATA[{
            if (objModule.ModuleDefinition.FriendlyName == "Text/HTML")
            {
                ModuleController.Instance.DeleteModuleSetting(objModule.ModuleID, "WorkFlowID");
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="CollectHierarchicalTags">
          <declaration><![CDATA[private static List<string> CollectHierarchicalTags(List<Term> terms)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="823" sc="9" el="839" ec="10">Components\HtmlTextController.cs</location>
            <body hash="a91bec067754f4513de4240748aa5174"><![CDATA[{
            Func<List<Term>, List<string>, List<string>> collectTagsFunc = null;
            collectTagsFunc = (ts, tags) =>
            {
                if (ts != null && ts.Count > 0)
                {
                    foreach (var t in ts)
                    {
                        tags.Add(t.Name);
                        tags.AddRange(collectTagsFunc(t.ChildTerms, new List<string>()));
                    }
                }
                return tags;
            };

            return collectTagsFunc(terms, new List<string>());
        }]]></body>
          </codeblock>
        </method>
        <method name="CreateUserNotifications">
          <declaration><![CDATA[private void CreateUserNotifications(HtmlTextInfo objHtmlText)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   CreateUserNotifications creates HtmlTextUser records and optionally sends email notifications to participants in a Workflow
 </summary>
 <remarks>
 </remarks>
 <param name="objHtmlText">An HtmlTextInfo object</param></documentation>
          <codeblock>
            <location sl="93" sc="9" el="210" ec="10">Components\HtmlTextController.cs</location>
            <body hash="4044681a24044d237897a76ca50aa47b"><![CDATA[{
            var _htmlTextUserController = new HtmlTextUserController();
            HtmlTextUserInfo _htmlTextUser = null;
            UserInfo _user = null;

            // clean up old user notification records
            _htmlTextUserController.DeleteHtmlTextUsers();

            // ensure we have latest htmltext object loaded
            objHtmlText = GetHtmlText(objHtmlText.ModuleID, objHtmlText.ItemID);

            // build collection of users to notify
            var objWorkflow = new WorkflowStateController();
            var arrUsers = new ArrayList();

            // if not published
            if (objHtmlText.IsPublished == false)
            {
                arrUsers.Add(objHtmlText.CreatedByUserID); // include content owner 
            }

            // if not draft and not published
            if (objHtmlText.StateID != objWorkflow.GetFirstWorkflowStateID(objHtmlText.WorkflowID) && objHtmlText.IsPublished == false)
            {
                // get users from permissions for state
                foreach (WorkflowStatePermissionInfo permission in WorkflowStatePermissionController.GetWorkflowStatePermissions(objHtmlText.StateID))
                {
                    if (permission.AllowAccess)
                    {
                        if (Null.IsNull(permission.UserID))
                        {
                            int roleId = permission.RoleID;
                            RoleInfo objRole = RoleController.Instance.GetRole(objHtmlText.PortalID, r => r.RoleID == roleId);
                            if ((objRole != null))
                            {
                                foreach (UserRoleInfo objUserRole in RoleController.Instance.GetUserRoles(objHtmlText.PortalID, null, objRole.RoleName))
                                {
                                    if (!arrUsers.Contains(objUserRole.UserID))
                                    {
                                        arrUsers.Add(objUserRole.UserID);
                                    }
                                }
                            }
                        }
                        else
                        {
                            if (!arrUsers.Contains(permission.UserID))
                            {
                                arrUsers.Add(permission.UserID);
                            }
                        }
                    }
                }
            }

            // process notifications
            if (arrUsers.Count > 0 || (objHtmlText.IsPublished && objHtmlText.Notify))
            {
                // get tabid from module 
                ModuleInfo objModule = ModuleController.Instance.GetModule(objHtmlText.ModuleID, Null.NullInteger, true);

                PortalSettings objPortalSettings = PortalController.Instance.GetCurrentPortalSettings();
                if (objPortalSettings != null)
                {
                    string strResourceFile = string.Format("{0}/DesktopModules/{1}/{2}/{3}",
                                                           Globals.ApplicationPath,
                                                           objModule.DesktopModule.FolderName,
                                                           Localization.LocalResourceDirectory,
                                                           Localization.LocalSharedResourceFile);
                    string strSubject = Localization.GetString("NotificationSubject", strResourceFile);
                    string strBody = Localization.GetString("NotificationBody", strResourceFile);
                    strBody = strBody.Replace("[URL]", Globals.NavigateURL(objModule.TabID));
                    strBody = strBody.Replace("[STATE]", objHtmlText.StateName);

                    // process user notification collection

                    foreach (int intUserID in arrUsers)
                    {
                        // create user notification record 
                        _htmlTextUser = new HtmlTextUserInfo();
                        _htmlTextUser.ItemID = objHtmlText.ItemID;
                        _htmlTextUser.StateID = objHtmlText.StateID;
                        _htmlTextUser.ModuleID = objHtmlText.ModuleID;
                        _htmlTextUser.TabID = objModule.TabID;
                        _htmlTextUser.UserID = intUserID;
                        _htmlTextUserController.AddHtmlTextUser(_htmlTextUser);

                        // send an email notification to a user if the state indicates to do so
                        if (objHtmlText.Notify)
                        {
                            _user = UserController.GetUserById(objHtmlText.PortalID, intUserID);
                            if (_user != null)
                            {
                                AddHtmlNotification(strSubject, strBody, _user);
                            }
                        }
                    }

                    // if published and the published state specifies to notify members of the workflow
                    if (objHtmlText.IsPublished && objHtmlText.Notify)
                    {
                        // send email notification to the author
                        _user = UserController.GetUserById(objHtmlText.PortalID, objHtmlText.CreatedByUserID);
                        if (_user != null)
                        {
                            try
                            {
                                Services.Mail.Mail.SendEmail(objPortalSettings.Email, objPortalSettings.Email, strSubject, strBody);
                            }
                            catch (Exception exc)
                            {
                                Exceptions.LogException(exc);
                            }
                        }
                    }
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteHtmlText">
          <declaration><![CDATA[public void DeleteHtmlText(int ModuleID, int ItemID)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   DeleteHtmlText deletes an HtmlTextInfo object for the Module and Item
 </summary>
 <remarks>
 </remarks>
 <param name="ModuleID">The ID of the Module</param>
 <param name="ItemID">The ID of the Item</param></documentation>
          <codeblock>
            <location sl="292" sc="9" el="297" ec="10">Components\HtmlTextController.cs</location>
            <body hash="5f8d6332e38bb8d67f11274200809f2f"><![CDATA[{
            DataProvider.Instance().DeleteHtmlText(ModuleID, ItemID);

            // refresh output cache
            ModuleController.SynchronizeModule(ModuleID);
        }]]></body>
          </codeblock>
        </method>
        <method name="DeTokeniseLinks">
          <declaration><![CDATA[private string DeTokeniseLinks(string content, int portalId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="213" sc="9" el="227" ec="10">Components\HtmlTextController.cs</location>
            <body hash="aeb8cf48bdc5c7f746bc3c6039af8698"><![CDATA[{
            var portal = PortalController.Instance.GetPortal(portalId);
            var portalRoot = UrlUtils.Combine(Globals.ApplicationPath, portal.HomeDirectory);
            if (!portalRoot.StartsWith("/"))
            {
                portalRoot = "/" + portalRoot;
            }
            if (!portalRoot.EndsWith("/"))
            {
                portalRoot = portalRoot + "/";
            }
            content = Regex.Replace(content, PortalRootToken + "\\/{0,1}", portalRoot, RegexOptions.IgnoreCase);

            return content;
        }]]></body>
          </codeblock>
        </method>
        <method name="ExportModule">
          <declaration><![CDATA[public string ExportModule(int moduleId)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   ExportModule implements the IPortable ExportModule Interface
 </summary>
 <remarks>
 </remarks>
 <param name="moduleId">The Id of the module to be exported</param></documentation>
          <codeblock>
            <location sl="726" sc="9" el="741" ec="10">Components\HtmlTextController.cs</location>
            <body hash="febfcb48d7c4343538d9912c8ecc318e"><![CDATA[{
            string xml = "";

            ModuleInfo module = ModuleController.Instance.GetModule(moduleId, Null.NullInteger, true);
            int workflowID = GetWorkflow(moduleId, module.TabID, module.PortalID).Value;

            HtmlTextInfo content = GetTopHtmlText(moduleId, true, workflowID);
            if ((content != null))
            {
                xml += "<htmltext>";
                xml += "<content>" + XmlUtils.XMLEncode(TokeniseLinks(content.Content, module.PortalID)) + "</content>";
                xml += "</htmltext>";
            }

            return xml;
        }]]></body>
          </codeblock>
        </method>
        <method name="FormatHtmlText">
          <declaration><![CDATA[public static string FormatHtmlText(int moduleId, string content, HtmlModuleSettings settings, PortalSettings portalSettings, Page page)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   FormatHtmlText formats HtmlText content for display in the browser
 </summary>
 <remarks>
 </remarks>
 <param name="moduleId">The ModuleID</param>
 <param name="content">The HtmlText Content</param>
 <param name="settings">Module Settings</param>
 <param name="portalSettings">The Portal Settings.</param>
 <param name="page">The Page Instance.</param></documentation>
          <codeblock>
            <location sl="311" sc="3" el="334" ec="4">Components\HtmlTextController.cs</location>
            <body hash="d8370f716b08b8c42c32358d801c30ba"><![CDATA[{
			// token replace

			if (settings.ReplaceTokens)
			{
			    var tr = new HtmlTokenReplace(page)
			    {
			        AccessingUser = UserController.Instance.GetCurrentUserInfo(),
			        DebugMessages = portalSettings.UserMode != PortalSettings.Mode.View,
			        ModuleId = moduleId,
			        PortalSettings = portalSettings
			    };
			    content = tr.ReplaceEnvironmentTokens(content);
			}

			// Html decode content
			content = HttpUtility.HtmlDecode(content);

			// manage relative paths
			content = ManageRelativePaths(content, portalSettings.HomeDirectory, "src", portalSettings.PortalId);
			content = ManageRelativePaths(content, portalSettings.HomeDirectory, "background", portalSettings.PortalId);

			return content;
		}]]></body>
          </codeblock>
        </method>
        <method name="GetAllHtmlText">
          <declaration><![CDATA[public List<HtmlTextInfo> GetAllHtmlText(int ModuleID)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   GetAllHtmlText gets a collection of HtmlTextInfo objects for the Module and Workflow
 </summary>
 <remarks>
 </remarks>
 <param name="ModuleID">The ID of the Module</param></documentation>
          <codeblock>
            <location sl="344" sc="9" el="346" ec="10">Components\HtmlTextController.cs</location>
            <body hash="933ee12d353bbac5cbb927847a3b21a2"><![CDATA[{
            return CBO.FillCollection<HtmlTextInfo>(DataProvider.Instance().GetAllHtmlText(ModuleID));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetHtmlText">
          <declaration><![CDATA[public HtmlTextInfo GetHtmlText(int ModuleID, int ItemID)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   GetHtmlText gets the HtmlTextInfo object for the Module, Item, and Workflow
 </summary>
 <remarks>
 </remarks>
 <param name="ModuleID">The ID of the Module</param>
 <param name="ItemID">The ID of the Item</param></documentation>
          <codeblock>
            <location sl="357" sc="9" el="359" ec="10">Components\HtmlTextController.cs</location>
            <body hash="bc46524f140270152d5289d0db5e5b26"><![CDATA[{
            return CBO.FillObject<HtmlTextInfo>(DataProvider.Instance().GetHtmlText(ModuleID, ItemID));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetMaximumVersionHistory">
          <declaration><![CDATA[public int GetMaximumVersionHistory(int PortalID)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   GetMaximumVersionHistory retrieves the maximum number of versions to store for a module
 </summary>
 <remarks>
 </remarks>
 <param name="PortalID">The ID of the Portal</param></documentation>
          <codeblock>
            <location sl="670" sc="9" el="685" ec="10">Components\HtmlTextController.cs</location>
            <body hash="508e2ba73fef11a14ba71ff1507dc89d"><![CDATA[{
            int intMaximumVersionHistory = -1;

            // get from portal settings
            intMaximumVersionHistory = int.Parse(PortalController.GetPortalSetting("MaximumVersionHistory", PortalID, "-1"));

            // if undefined at portal level, set portal default
            if (intMaximumVersionHistory == -1)
            {
                intMaximumVersionHistory = 5;
                // default
                PortalController.UpdatePortalSetting(PortalID, "MaximumVersionHistory", intMaximumVersionHistory.ToString());
            }

            return intMaximumVersionHistory;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetModifiedSearchDocuments">
          <declaration><![CDATA[public override IList<SearchDocument> GetModifiedSearchDocuments(ModuleInfo modInfo, DateTime beginDateUtc)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="785" sc="9" el="820" ec="10">Components\HtmlTextController.cs</location>
            <body hash="e446a9f45c941ef3514c82f6a3640e6c"><![CDATA[{
            var workflowId = GetWorkflow(modInfo.ModuleID, modInfo.TabID, modInfo.PortalID).Value;
            var searchDocuments = new List<SearchDocument>();
            var htmlTextInfo = GetTopHtmlText(modInfo.ModuleID, true, workflowId);
            var repo = new HtmlModuleSettingsRepository();
            var settings = repo.GetSettings(modInfo);

            if (htmlTextInfo != null &&
                (htmlTextInfo.LastModifiedOnDate.ToUniversalTime() > beginDateUtc &&
                 htmlTextInfo.LastModifiedOnDate.ToUniversalTime() < DateTime.UtcNow))
            {
                var strContent = HtmlUtils.Clean(htmlTextInfo.Content, false);

                // Get the description string
                var description = strContent.Length <= settings.SearchDescLength ? strContent : HtmlUtils.Shorten(strContent, settings.SearchDescLength, "...");

                var searchDoc = new SearchDocument
                {
                    UniqueKey = modInfo.ModuleID.ToString(),
                    PortalId = modInfo.PortalID,
                    Title = modInfo.ModuleTitle,
                    Description = description,
                    Body = strContent,
                    ModifiedTimeUtc = htmlTextInfo.LastModifiedOnDate.ToUniversalTime()
                };

                if (modInfo.Terms != null && modInfo.Terms.Count > 0)
                {
                    searchDoc.Tags = CollectHierarchicalTags(modInfo.Terms);
                }

                searchDocuments.Add(searchDoc);
            }

            return searchDocuments;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetTopHtmlText">
          <declaration><![CDATA[public HtmlTextInfo GetTopHtmlText(int moduleId, bool isPublished, int workflowId)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   GetTopHtmlText gets the most recent HtmlTextInfo object for the Module, Workflow, and State
 </summary>
 <remarks>
 </remarks>
 <param name="moduleId">The ID of the Module</param>
 <param name="isPublished">Whether the content has been published or not</param>
 <param name="workflowId">The Workflow ID</param></documentation>
          <codeblock>
            <location sl="371" sc="9" el="394" ec="10">Components\HtmlTextController.cs</location>
            <body hash="d64069f9545ed73e1ba9f1ec83a128e8"><![CDATA[{
            var htmlText = CBO.FillObject<HtmlTextInfo>(DataProvider.Instance().GetTopHtmlText(moduleId, isPublished));
            if (htmlText != null)
            {
                // check if workflow has changed
                if (isPublished == false && htmlText.WorkflowID != workflowId)
                {
                    // get proper state for workflow
                    htmlText.WorkflowID = workflowId;
                    htmlText.WorkflowName = "[REPAIR_WORKFLOW]";

                    var workflowStateController = new WorkflowStateController();
                    htmlText.StateID = htmlText.IsPublished 
                                        ? workflowStateController.GetLastWorkflowStateID(workflowId) 
                                        : workflowStateController.GetFirstWorkflowStateID(workflowId);
                    // update object
                    UpdateHtmlText(htmlText, GetMaximumVersionHistory(htmlText.PortalID));

                    // get object again
                    htmlText = CBO.FillObject<HtmlTextInfo>(DataProvider.Instance().GetTopHtmlText(moduleId, false));
                }
            }
            return htmlText;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetWorkflow">
          <declaration><![CDATA[public KeyValuePair<string, int> GetWorkflow(int ModuleId, int TabId, int PortalId)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   GetWorkFlow retrieves the currently active Workflow for the Portal
 </summary>
 <remarks>
 </remarks>
 <param name="ModuleId">The ID of the Module</param>
 <param name="TabId">The Tab ID</param>
 <param name="PortalId">The ID of the Portal</param></documentation>
          <codeblock>
            <location sl="406" sc="9" el="463" ec="10">Components\HtmlTextController.cs</location>
            <body hash="8fc620cf75733cf76b35fdc105b6f3e0"><![CDATA[{
            int workFlowId = Null.NullInteger;
            string workFlowType = Null.NullString;

            // get module settings
            HtmlModuleSettings settings;
            if (ModuleId > -1)
            {
                var module = ModuleController.Instance.GetModule(ModuleId, TabId, false);
                var repo = new HtmlModuleSettingsRepository();
                settings = repo.GetSettings(module);
            }
            else
            {
                settings = new HtmlModuleSettings();
            }

            if (settings.WorkFlowID != Null.NullInteger)
            {
                workFlowId = settings.WorkFlowID;
                workFlowType = "Module";
            }
            if (workFlowId == Null.NullInteger)
            {
                // if undefined at module level, get from tab settings
                var tabSettings = TabController.Instance.GetTabSettings(TabId);
                if (tabSettings["WorkflowID"] != null)
                {
                    workFlowId = Convert.ToInt32(tabSettings["WorkflowID"]);
                    workFlowType = "Page";
                }
            }

            if (workFlowId == Null.NullInteger)
            {
                // if undefined at tab level, get from portal settings
                workFlowId = int.Parse(PortalController.GetPortalSetting("WorkflowID", PortalId, "-1"));
                workFlowType = "Site";
            }

            // if undefined at portal level, set portal default
            if (workFlowId == Null.NullInteger)
            {
                var objWorkflow = new WorkflowStateController();
                ArrayList arrWorkflows = objWorkflow.GetWorkflows(PortalId);
                foreach (WorkflowStateInfo objState in arrWorkflows)
                {
                    // use direct publish as default
                    if (Null.IsNull(objState.PortalID) && objState.WorkflowName == "Direct Publish")
                    {
                        workFlowId = objState.WorkflowID;
                        workFlowType = "Module";
                    }
                }
            }

            return new KeyValuePair<string, int>(workFlowType, workFlowId);
        }]]></body>
          </codeblock>
        </method>
        <method name="ImportModule">
          <declaration><![CDATA[public void ImportModule(int ModuleID, string Content, string Version, int UserId)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   ImportModule implements the IPortable ImportModule Interface
 </summary>
 <remarks>
 </remarks>
 <param name="ModuleID">The ID of the Module being imported</param>
 <param name="Content">The Content being imported</param>
 <param name="Version">The Version of the Module Content being imported</param>
 <param name="UserId">The UserID of the User importing the Content</param></documentation>
          <codeblock>
            <location sl="754" sc="9" el="778" ec="10">Components\HtmlTextController.cs</location>
            <body hash="6f1dd1cc77da029bcab3cfb8affe235c"><![CDATA[{
            ModuleInfo module = ModuleController.Instance.GetModule(ModuleID, Null.NullInteger, true);
            var workflowStateController = new WorkflowStateController();
            int workflowID = GetWorkflow(ModuleID, module.TabID, module.PortalID).Value;
            XmlNode xml = Globals.GetContent(Content, "htmltext");

            var htmlContent = new HtmlTextInfo();
            htmlContent.ModuleID = ModuleID;
            // convert Version to System.Version
            var objVersion = new Version(Version);
            if (objVersion >= new Version(5, 1, 0))
            {
                // current module content
                htmlContent.Content = DeTokeniseLinks(xml.SelectSingleNode("content").InnerText, module.PortalID);
            }
            else
            {
                // legacy module content
                htmlContent.Content = DeTokeniseLinks(xml.SelectSingleNode("desktophtml").InnerText, module.PortalID);
            }
            htmlContent.WorkflowID = workflowID;
            htmlContent.StateID = workflowStateController.GetFirstWorkflowStateID(workflowID);
            // import
            UpdateHtmlText(htmlContent, GetMaximumVersionHistory(module.PortalID));
        }]]></body>
          </codeblock>
        </method>
        <method name="ManageRelativePaths">
          <declaration><![CDATA[public static string ManageRelativePaths(string strHTML, string strUploadDirectory, string strToken, int intPortalID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="466" sc="9" el="537" ec="10">Components\HtmlTextController.cs</location>
            <body hash="811ef3a3cf1f247f58f927d26da9d275"><![CDATA[{
            int P = 0;
            int R = 0;
            int S = 0;
            int tLen = 0;
            string strURL = null;
            var sbBuff = new StringBuilder("");

            if (!string.IsNullOrEmpty(strHTML))
            {
                tLen = strToken.Length + 2;
                string uploadDirectory = strUploadDirectory.ToLower();

                //find position of first occurrance:
                P = strHTML.IndexOf(strToken + "=\"", StringComparison.InvariantCultureIgnoreCase);
                while (P != -1)
                {
                    sbBuff.Append(strHTML.Substring(S, P - S + tLen));
                    //keep charactes left of URL
                    S = P + tLen;
                    //save startpos of URL
                    R = strHTML.IndexOf("\"", S);
                    //end of URL
                    if (R >= 0)
                    {
                        strURL = strHTML.Substring(S, R - S).ToLower();
                    }
                    else
                    {
                        strURL = strHTML.Substring(S).ToLower();
                    }

                    if (strHTML.Substring(P + tLen, 10).Equals("data:image", StringComparison.InvariantCultureIgnoreCase))
                    {
                        P = strHTML.IndexOf(strToken + "=\"", S + strURL.Length + 2, StringComparison.InvariantCultureIgnoreCase);
                        continue;
                    }

                    // if we are linking internally
                    if (!strURL.Contains("://"))
                    {
                        // remove the leading portion of the path if the URL contains the upload directory structure
                        string strDirectory = uploadDirectory;
                        if (!strDirectory.EndsWith("/"))
                        {
                            strDirectory += "/";
                        }
                        if (strURL.IndexOf(strDirectory) != -1)
                        {
                            S = S + strURL.IndexOf(strDirectory) + strDirectory.Length;
                            strURL = strURL.Substring(strURL.IndexOf(strDirectory) + strDirectory.Length);
                        }
                        // add upload directory
                        if (!strURL.StartsWith("/") 
                            && !String.IsNullOrEmpty(strURL.Trim())) //We don't write the UploadDirectory if the token/attribute has not value. Therefore we will avoid an unnecessary request
                        {
                            sbBuff.Append(uploadDirectory);
                        }
                    }
                    //find position of next occurrance
                    P = strHTML.IndexOf(strToken + "=\"", S + strURL.Length + 2, StringComparison.InvariantCultureIgnoreCase);
                }

                if (S > -1)
                {
                    sbBuff.Append(strHTML.Substring(S));
                }
                //append characters of last URL and behind
            }

            return sbBuff.ToString();
        }]]></body>
          </codeblock>
        </method>
        <method name="ReplaceWithRootToken">
          <declaration><![CDATA[public string ReplaceWithRootToken(Match m)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="256" sc="9" el="277" ec="10">Components\HtmlTextController.cs</location>
            <body hash="c1e10a1ee40f97b7086e01d6794e391f"><![CDATA[{
            var domain = m.Groups["domain"].Value;

            // Relative url
            if (string.IsNullOrEmpty(domain))
            {
                return PortalRootToken;
            }

            var aliases = PortalAliasController.Instance.GetPortalAliases();
            if (!aliases.Contains(domain))
            {
                // this is no not a portal url so even if it contains /portals/.. 
                // we do not need to replace it with a token
                return m.ToString();
            }

            // full qualified portal url that needs to be tokenized
            var result = domain + PortalRootToken;
            var protocol = m.Groups["protocol"].Value;
            return string.IsNullOrEmpty(protocol) ? result : protocol + result;
        }]]></body>
          </codeblock>
        </method>
        <method name="TokeniseLinks">
          <declaration><![CDATA[private string TokeniseLinks(string content, int portalId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="230" sc="9" el="253" ec="10">Components\HtmlTextController.cs</location>
            <body hash="6a08370141c82d1ddb36af3c8a27fecd"><![CDATA[{
            //Replace any relative portal root reference by a token "{{PortalRoot}}"
            var portal = PortalController.Instance.GetPortal(portalId);
            var portalRoot = UrlUtils.Combine(Globals.ApplicationPath, portal.HomeDirectory);
            if (!portalRoot.StartsWith("/"))
            {
                portalRoot = "/" + portalRoot;
            }
            if (!portalRoot.EndsWith("/"))
            {
                portalRoot = portalRoot + "/";
            }

            // Portal Root regular expression
            var regex = @"(?<url>
                        (?<host>
                        (?<protocol>[A-Za-z]{3,9}:(?:\/\/)?)
                        (?<domain>(?:[\-;:&=\+\$,\w]+@)?[A-Za-z0-9\.\-]+|(?:www\.|[\-;:&=\+\$,\w]+@)[A-Za-z0-9\.\-]+))?
                        (?<portalRoot>" + portalRoot + "))";

            var matchEvaluator = new MatchEvaluator(ReplaceWithRootToken);
            var exp = RegexUtils.GetCachedRegex(regex, RegexOptions.IgnoreCase | RegexOptions.IgnorePatternWhitespace);
            return exp.Replace(content, matchEvaluator);
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateHtmlText">
          <declaration><![CDATA[public void UpdateHtmlText(HtmlTextInfo htmlContent, int MaximumVersionHistory)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   UpdateHtmlText creates a new HtmlTextInfo object or updates an existing HtmlTextInfo object
 </summary>
 <remarks>
 </remarks>
 <param name="htmlContent">An HtmlTextInfo object</param>
 <param name="MaximumVersionHistory">The maximum number of versions to retain</param></documentation>
          <codeblock>
            <location sl="548" sc="9" el="613" ec="10">Components\HtmlTextController.cs</location>
            <body hash="7aafb580d48888c9420594e8de082ae3"><![CDATA[{
            var _workflowStateController = new WorkflowStateController();
            bool blnCreateNewVersion = false;

            // determine if we are creating a new version of content or updating an existing version
            if (htmlContent.ItemID != -1)
            {
                if (htmlContent.WorkflowName != "[REPAIR_WORKFLOW]")
                {
                    HtmlTextInfo objContent = GetTopHtmlText(htmlContent.ModuleID, false, htmlContent.WorkflowID);
                    if (objContent != null)
                    {
                        if (objContent.StateID == _workflowStateController.GetLastWorkflowStateID(htmlContent.WorkflowID))
                        {
                            blnCreateNewVersion = true;
                        }
                    }
                }
            }
            else
            {
                blnCreateNewVersion = true;
            }

            // determine if content is published
            if (htmlContent.StateID == _workflowStateController.GetLastWorkflowStateID(htmlContent.WorkflowID))
            {
                htmlContent.IsPublished = true;
            }
            else
            {
                htmlContent.IsPublished = false;
            }

            if (blnCreateNewVersion)
            {
                // add content
                htmlContent.ItemID = DataProvider.Instance().AddHtmlText(htmlContent.ModuleID,
                                                                         htmlContent.Content,
																		 htmlContent.Summary,
                                                                         htmlContent.StateID,
                                                                         htmlContent.IsPublished,
                                                                         UserController.Instance.GetCurrentUserInfo().UserID,
                                                                         MaximumVersionHistory);
            }
            else
            {
                // update content
				DataProvider.Instance().UpdateHtmlText(htmlContent.ItemID, htmlContent.Content, htmlContent.Summary, htmlContent.StateID, htmlContent.IsPublished, UserController.Instance.GetCurrentUserInfo().UserID);
            }

            // add log history
            var logInfo = new HtmlTextLogInfo();
            logInfo.ItemID = htmlContent.ItemID;
            logInfo.StateID = htmlContent.StateID;
            logInfo.Approved = htmlContent.Approved;
            logInfo.Comment = htmlContent.Comment;
            var objLogs = new HtmlTextLogController();
            objLogs.AddHtmlTextLog(logInfo);

            // create user notifications
            CreateUserNotifications(htmlContent);

            // refresh output cache
            ModuleController.SynchronizeModule(htmlContent.ModuleID);
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateMaximumVersionHistory">
          <declaration><![CDATA[public void UpdateMaximumVersionHistory(int PortalID, int MaximumVersionHistory)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   UpdateWorkFlowID updates the currently active WorkflowID for the Portal
 </summary>
 <remarks>
 </remarks>
 <param name="PortalID">The ID of the Portal</param>
 <param name="MaximumVersionHistory">The MaximumVersionHistory</param></documentation>
          <codeblock>
            <location sl="696" sc="9" el="710" ec="10">Components\HtmlTextController.cs</location>
            <body hash="bb524b1947789de54574eadb954a9b81"><![CDATA[{
            // data integrity check
            if (MaximumVersionHistory < 0)
            {
                MaximumVersionHistory = 5;
                // default
            }

            // save portal setting
            PortalSettings objPortalSettings = PortalController.Instance.GetCurrentPortalSettings();
            if (PortalSecurity.IsInRole(objPortalSettings.AdministratorRoleName))
            {
                PortalController.UpdatePortalSetting(PortalID, "MaximumVersionHistory", MaximumVersionHistory.ToString());
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateWorkflow">
          <declaration><![CDATA[public void UpdateWorkflow(int ObjectID, string WorkFlowType, int WorkflowID, bool ReplaceExistingSettings)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   UpdateWorkFlow updates the currently active Workflow
 </summary>
 <remarks>
 </remarks>
 <param name="WorkFlowType">The type of workflow (Module | Page | Site)</param>
 <param name="WorkflowID">The ID of the Workflow</param>
 <param name="ObjectID">The ID of the object to apply the update to (depends on WorkFlowType)</param>
 <param name="ReplaceExistingSettings">Should existing settings be overwritten?</param></documentation>
          <codeblock>
            <location sl="626" sc="9" el="660" ec="10">Components\HtmlTextController.cs</location>
            <body hash="353600021855cca33a636436d6dda9e7"><![CDATA[{
            switch (WorkFlowType)
            {
                case "Module":
                    ModuleController.Instance.UpdateModuleSetting(ObjectID, "WorkflowID", WorkflowID.ToString());
                    break;
                case "Page":
                    TabController.Instance.UpdateTabSetting(ObjectID, "WorkflowID", WorkflowID.ToString());
                    if (ReplaceExistingSettings)
                    {
                        //Get All Modules on the current Tab
                        foreach (var kvp in ModuleController.Instance.GetTabModules(ObjectID))
                        {
                            ClearModuleSettings(kvp.Value);
                        }
                    }
                    break;
                case "Site":
                    PortalController.UpdatePortalSetting(ObjectID, "WorkflowID", WorkflowID.ToString());
                    if (ReplaceExistingSettings)
                    {
                        //Get All Tabs aon the Site
                        foreach (var kvp in TabController.Instance.GetTabsByPortal(ObjectID))
                        {
                            TabController.Instance.DeleteTabSetting(kvp.Value.TabID, "WorkFlowID");
                        }
                        //Get All Modules in the current Site
                        foreach (ModuleInfo objModule in ModuleController.Instance.GetModules(ObjectID))
                        {
                            ClearModuleSettings(objModule);
                        }
                    }
                    break;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="UpgradeModule">
          <declaration><![CDATA[public string UpgradeModule(string Version)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="846" sc="9" el="870" ec="10">Components\HtmlTextController.cs</location>
            <body hash="b2a532f154c6bc503199a740aabe0fa2"><![CDATA[{
            switch (Version)
            {
                case "05.01.02":
                    //remove the Code SubDirectory
                    Config.RemoveCodeSubDirectory("HTML");

                    //Once the web.config entry is done we can safely remove the HTML folder
                    var arrPaths = new string[1];
                    arrPaths[0] = "App_Code\\HTML\\";
                    FileSystemUtils.DeleteFiles(arrPaths);
                    break;
                case "06.00.00":
                    DesktopModuleInfo desktopModule = DesktopModuleController.GetDesktopModuleByModuleName("DNN_HTML", Null.NullInteger);
                    desktopModule.Category = "Common";
                    DesktopModuleController.SaveDesktopModule(desktopModule, false, false);
                    break;

                case "06.02.00":
                    AddNotificationTypes();
                    break;
            }

           return string.Empty;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="MAX_DESCRIPTION_LENGTH">
          <declaration><![CDATA[public const int MAX_DESCRIPTION_LENGTH = 100;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="PortalRootToken">
          <declaration><![CDATA[private const string PortalRootToken = "{{PortalRoot}}";]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="HtmlTextInfo">
      <declaration><![CDATA[public class HtmlTextInfo : BaseEntityInfo]]></declaration>
      <documentation>-----------------------------------------------------------------------------
 Namespace:  DotNetNuke.Modules.Html
 Project:    DotNetNuke
 Class:      HtmlTextInfo
 -----------------------------------------------------------------------------
 <summary>
   Defines an instance of an HtmlText object
 </summary>
 <remarks>
 </remarks></documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private bool _Approved = true;]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="41" sc="9" el="44" ec="34">Components\HtmlTextInfo.cs</location>
            <body hash="17aea03bfde9953dc5389e915849db0c"><![CDATA[private bool _Approved = true;
        private string _Comment = "";
        private bool _IsActive = true;
        private int _ItemID = -1;]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
        <field name="_Approved">
          <declaration><![CDATA[private bool _Approved = true;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_Comment">
          <declaration><![CDATA[private string _Comment = "";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_IsActive">
          <declaration><![CDATA[private bool _IsActive = true;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_ItemID">
          <declaration><![CDATA[private int _ItemID = -1;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="Approved">
          <declaration><![CDATA[public bool Approved]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="108" sc="13" el="110" ec="14">Components\HtmlTextInfo.cs</location>
            <body hash="a5dfbbe126baa57e67d605418561915d"><![CDATA[{
                return _Approved;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="112" sc="13" el="114" ec="14">Components\HtmlTextInfo.cs</location>
            <body hash="c3cd54135ef1c7b08d8b9d68f0fb9f7c"><![CDATA[{
                _Approved = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="Comment">
          <declaration><![CDATA[public string Comment]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="96" sc="13" el="98" ec="14">Components\HtmlTextInfo.cs</location>
            <body hash="68c6d7ed65c020790ddc0e9f0d0acf04"><![CDATA[{
                return _Comment;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="100" sc="13" el="102" ec="14">Components\HtmlTextInfo.cs</location>
            <body hash="a84aa8abb3e3c7b4a9ffa587cd24ea0b"><![CDATA[{
                _Comment = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="Content">
          <declaration><![CDATA[public string Content]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="63" sc="33" el="63" ec="37">Components\HtmlTextInfo.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="63" sc="38" el="63" ec="42">Components\HtmlTextInfo.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="DisplayName">
          <declaration><![CDATA[public string DisplayName]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="117" sc="37" el="117" ec="41">Components\HtmlTextInfo.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="117" sc="42" el="117" ec="46">Components\HtmlTextInfo.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="IsActive">
          <declaration><![CDATA[public bool IsActive]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="84" sc="13" el="86" ec="14">Components\HtmlTextInfo.cs</location>
            <body hash="60f443debbab1fe5681665da174a9ff5"><![CDATA[{
                return _IsActive;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="88" sc="13" el="90" ec="14">Components\HtmlTextInfo.cs</location>
            <body hash="fded552691aefe5866629a86ed982c6a"><![CDATA[{
                _IsActive = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="IsPublished">
          <declaration><![CDATA[public bool IsPublished]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="75" sc="35" el="75" ec="39">Components\HtmlTextInfo.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="75" sc="40" el="75" ec="44">Components\HtmlTextInfo.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ItemID">
          <declaration><![CDATA[public int ItemID]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="52" sc="13" el="54" ec="14">Components\HtmlTextInfo.cs</location>
            <body hash="c6034f3e8811cdf87e58f445aad9a669"><![CDATA[{
                return _ItemID;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="56" sc="13" el="58" ec="14">Components\HtmlTextInfo.cs</location>
            <body hash="fd11cb96334cc4380e3cdbf6e1c7ee88"><![CDATA[{
                _ItemID = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="ModuleID">
          <declaration><![CDATA[public int ModuleID]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="61" sc="31" el="61" ec="35">Components\HtmlTextInfo.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="61" sc="36" el="61" ec="40">Components\HtmlTextInfo.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Notify">
          <declaration><![CDATA[public bool Notify]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="79" sc="30" el="79" ec="34">Components\HtmlTextInfo.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="79" sc="35" el="79" ec="39">Components\HtmlTextInfo.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="PortalID">
          <declaration><![CDATA[public int PortalID]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="77" sc="31" el="77" ec="35">Components\HtmlTextInfo.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="77" sc="36" el="77" ec="40">Components\HtmlTextInfo.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="StateID">
          <declaration><![CDATA[public int StateID]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="71" sc="30" el="71" ec="34">Components\HtmlTextInfo.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="71" sc="35" el="71" ec="39">Components\HtmlTextInfo.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="StateName">
          <declaration><![CDATA[public string StateName]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="73" sc="35" el="73" ec="39">Components\HtmlTextInfo.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="73" sc="40" el="73" ec="44">Components\HtmlTextInfo.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Summary">
          <declaration><![CDATA[public string Summary]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="119" sc="27" el="119" ec="31">Components\HtmlTextInfo.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="119" sc="32" el="119" ec="36">Components\HtmlTextInfo.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Version">
          <declaration><![CDATA[public int Version]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="65" sc="30" el="65" ec="34">Components\HtmlTextInfo.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="65" sc="35" el="65" ec="39">Components\HtmlTextInfo.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="WorkflowID">
          <declaration><![CDATA[public int WorkflowID]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="67" sc="33" el="67" ec="37">Components\HtmlTextInfo.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="67" sc="38" el="67" ec="42">Components\HtmlTextInfo.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="WorkflowName">
          <declaration><![CDATA[public string WorkflowName]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="69" sc="38" el="69" ec="42">Components\HtmlTextInfo.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="69" sc="43" el="69" ec="47">Components\HtmlTextInfo.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="HtmlTextLogController">
      <declaration><![CDATA[public class HtmlTextLogController]]></declaration>
      <documentation>-----------------------------------------------------------------------------
 Namespace:  DotNetNuke.Modules.Html
 Project:    DotNetNuke
 Class:      HtmlTextLogController
 -----------------------------------------------------------------------------
 <summary>
   The HtmlTextLogController is the Controller class for managing Log History information the HtmlText module
 </summary>
 <remarks>
 </remarks>
 -----------------------------------------------------------------------------</documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public HtmlTextLogController()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="AddHtmlTextLog">
          <declaration><![CDATA[public void AddHtmlTextLog(HtmlTextLogInfo objHtmlTextLog)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   AddHtmlTextLog creates a new HtmlTextLog for an Item
 </summary>
 <remarks>
 </remarks>
 <param name="objHtmlTextLog">An HtmlTextLogInfo object</param>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="67" sc="9" el="69" ec="10">Components\HtmlTextLogController.cs</location>
            <body hash="d06d73522d7d0e28ae25e35e2b3870e4"><![CDATA[{
            DataProvider.Instance().AddHtmlTextLog(objHtmlTextLog.ItemID, objHtmlTextLog.StateID, objHtmlTextLog.Comment, objHtmlTextLog.Approved, UserController.Instance.GetCurrentUserInfo().UserID);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetHtmlTextLog">
          <declaration><![CDATA[public ArrayList GetHtmlTextLog(int ItemID)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   GetHtmlTextLog retrieves a collection of HtmlTextLogInfo objects for an Item
 </summary>
 <remarks>
 </remarks>
 <param name="ItemID">The Id of the Item</param>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="54" sc="9" el="56" ec="10">Components\HtmlTextLogController.cs</location>
            <body hash="a75d43e660f4b9548d65d1df96668f04"><![CDATA[{
            return CBO.FillCollection(DataProvider.Instance().GetHtmlTextLog(ItemID), typeof (HtmlTextLogInfo));
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="HtmlTextLogInfo">
      <declaration><![CDATA[public class HtmlTextLogInfo]]></declaration>
      <documentation>-----------------------------------------------------------------------------
 Namespace:  DotNetNuke.Modules.Html
 Project:    DotNetNuke
 Class:      HtmlTextLogInfo
 -----------------------------------------------------------------------------
 <summary>
   Defines an instance of an HtmlTextLog object
 </summary>
 <remarks>
 </remarks>
 -----------------------------------------------------------------------------</documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public HtmlTextLogInfo()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="Approved">
          <declaration><![CDATA[public bool Approved]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="52" sc="32" el="52" ec="36">Components\HtmlTextLogInfo.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="52" sc="37" el="52" ec="41">Components\HtmlTextLogInfo.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Comment">
          <declaration><![CDATA[public string Comment]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="50" sc="33" el="50" ec="37">Components\HtmlTextLogInfo.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="50" sc="38" el="50" ec="42">Components\HtmlTextLogInfo.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="CreatedByUserID">
          <declaration><![CDATA[public int CreatedByUserID]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="54" sc="38" el="54" ec="42">Components\HtmlTextLogInfo.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="54" sc="43" el="54" ec="47">Components\HtmlTextLogInfo.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="CreatedOnDate">
          <declaration><![CDATA[public DateTime CreatedOnDate]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="58" sc="41" el="58" ec="45">Components\HtmlTextLogInfo.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="58" sc="46" el="58" ec="50">Components\HtmlTextLogInfo.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="DisplayName">
          <declaration><![CDATA[public string DisplayName]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="56" sc="37" el="56" ec="41">Components\HtmlTextLogInfo.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="56" sc="42" el="56" ec="46">Components\HtmlTextLogInfo.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ItemID">
          <declaration><![CDATA[public int ItemID]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="44" sc="29" el="44" ec="33">Components\HtmlTextLogInfo.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="44" sc="34" el="44" ec="38">Components\HtmlTextLogInfo.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="StateID">
          <declaration><![CDATA[public int StateID]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="46" sc="30" el="46" ec="34">Components\HtmlTextLogInfo.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="46" sc="35" el="46" ec="39">Components\HtmlTextLogInfo.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="StateName">
          <declaration><![CDATA[public string StateName]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="48" sc="35" el="48" ec="39">Components\HtmlTextLogInfo.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="48" sc="40" el="48" ec="44">Components\HtmlTextLogInfo.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="HtmlTextUserController">
      <declaration><![CDATA[public class HtmlTextUserController]]></declaration>
      <documentation>-----------------------------------------------------------------------------
 Namespace:  DotNetNuke.Modules.Html
 Project:    DotNetNuke
 Class:      HtmlTextUserController
 -----------------------------------------------------------------------------
 <summary>
   The HtmlTextUserController is the Controller class for managing User information the HtmlText module
 </summary>
 <remarks>
 </remarks>
 -----------------------------------------------------------------------------</documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public HtmlTextUserController()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="AddHtmlTextUser">
          <declaration><![CDATA[public void AddHtmlTextUser(HtmlTextUserInfo objHtmlTextUser)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   AddHtmlTextUser creates a new HtmlTextUser for an Item
 </summary>
 <remarks>
 </remarks>
 <param name="objHtmlTextUser">An HtmlTextUserInfo object</param>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="66" sc="9" el="68" ec="10">Components\HtmlTextUserController.cs</location>
            <body hash="e54a519286ac2ad1a92bc659ea4e4e48"><![CDATA[{
            DataProvider.Instance().AddHtmlTextUser(objHtmlTextUser.ItemID, objHtmlTextUser.StateID, objHtmlTextUser.ModuleID, objHtmlTextUser.TabID, objHtmlTextUser.UserID);
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteHtmlTextUsers">
          <declaration><![CDATA[public void DeleteHtmlTextUsers()]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   DeleteHtmlTextUsers cleans up old HtmlTextUser records
 </summary>
 <remarks>
 </remarks>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="78" sc="9" el="80" ec="10">Components\HtmlTextUserController.cs</location>
            <body hash="30a6c42d312c286eb7c05472401a0764"><![CDATA[{
            DataProvider.Instance().DeleteHtmlTextUsers();
        }]]></body>
          </codeblock>
        </method>
        <method name="GetHtmlTextUser">
          <declaration><![CDATA[public ArrayList GetHtmlTextUser(int UserID)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   GetHtmlTextUser retrieves a collection of HtmlTextUserInfo objects for an Item
 </summary>
 <remarks>
 </remarks>
 <param name="UserID">The Id of the User</param>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="53" sc="9" el="55" ec="10">Components\HtmlTextUserController.cs</location>
            <body hash="09b855726da1bb669bc05c14452215fe"><![CDATA[{
            return CBO.FillCollection(DataProvider.Instance().GetHtmlTextUser(UserID), typeof (HtmlTextUserInfo));
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="HtmlTextUserInfo">
      <declaration><![CDATA[public class HtmlTextUserInfo]]></declaration>
      <documentation>-----------------------------------------------------------------------------
 Namespace:  DotNetNuke.Modules.Html
 Project:    DotNetNuke
 Class:      HtmlTextUserInfo
 -----------------------------------------------------------------------------
 <summary>
   Defines an instance of an HtmlTextUser object
 </summary>
 <remarks>
 </remarks>
 -----------------------------------------------------------------------------</documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public HtmlTextUserInfo()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
        <field name="_Module">
          <declaration><![CDATA[private ModuleInfo _Module;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="CreatedOnDate">
          <declaration><![CDATA[public DateTime CreatedOnDate]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="87" sc="41" el="87" ec="45">Components\HtmlTextUserInfo.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="87" sc="46" el="87" ec="50">Components\HtmlTextUserInfo.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ItemID">
          <declaration><![CDATA[public int ItemID]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="49" sc="29" el="49" ec="33">Components\HtmlTextUserInfo.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="49" sc="34" el="49" ec="38">Components\HtmlTextUserInfo.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Module">
          <declaration><![CDATA[public ModuleInfo Module]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="73" sc="13" el="79" ec="14">Components\HtmlTextUserInfo.cs</location>
            <body hash="5dc9f68d62c62f0b19692035f9d18c38"><![CDATA[{
                if (_Module == null)
                {
                    _Module = ModuleController.Instance.GetModule(ModuleID, TabID, false);
                }
                return _Module;
            }]]></body>
          </codeblock>
        </property>
        <property name="ModuleID">
          <declaration><![CDATA[public int ModuleID]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="55" sc="31" el="55" ec="35">Components\HtmlTextUserInfo.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="55" sc="36" el="55" ec="40">Components\HtmlTextUserInfo.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ModuleTitle">
          <declaration><![CDATA[public string ModuleTitle]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="60" sc="13" el="67" ec="14">Components\HtmlTextUserInfo.cs</location>
            <body hash="a690fe359889a757b6e1c2a4d05236e7"><![CDATA[{
                string _ModuleTitle = Null.NullString;
                if (Module != null)
                {
                    _ModuleTitle = Module.ModuleTitle;
                }
                return _ModuleTitle;
            }]]></body>
          </codeblock>
        </property>
        <property name="StateID">
          <declaration><![CDATA[public int StateID]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="51" sc="30" el="51" ec="34">Components\HtmlTextUserInfo.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="51" sc="35" el="51" ec="39">Components\HtmlTextUserInfo.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="StateName">
          <declaration><![CDATA[public string StateName]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="53" sc="35" el="53" ec="39">Components\HtmlTextUserInfo.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="53" sc="40" el="53" ec="44">Components\HtmlTextUserInfo.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="TabID">
          <declaration><![CDATA[public int TabID]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="83" sc="28" el="83" ec="32">Components\HtmlTextUserInfo.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="83" sc="33" el="83" ec="37">Components\HtmlTextUserInfo.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="UserID">
          <declaration><![CDATA[public int UserID]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="85" sc="29" el="85" ec="33">Components\HtmlTextUserInfo.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="85" sc="34" el="85" ec="38">Components\HtmlTextUserInfo.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="MyWork">
      <declaration><![CDATA[public class MyWork : PortalModuleBase]]></declaration>
      <documentation>
        <summary>
   MyWork allows a user to view any outstanding workflow items
 </summary>
 <remarks>
 </remarks></documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public MyWork()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="FormatURL">
          <declaration><![CDATA[public string FormatURL(object dataItem)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="44" sc="9" el="47" ec="10">MyWork.ascx.cs</location>
            <body hash="e79ab10ecdfbfda9354e222eeeb7701c"><![CDATA[{
            var objHtmlTextUser = (HtmlTextUserInfo) dataItem;
            return "<a href=\"" + Globals.NavigateURL(objHtmlTextUser.TabID) + "#" + objHtmlTextUser.ModuleID + "\">" + objHtmlTextUser.ModuleTitle + " ( " + objHtmlTextUser.StateName + " )</a>";
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
            <summary>
   Page_Load runs when the control is loaded
 </summary>
 <remarks>
 </remarks></documentation>
          <codeblock>
            <location sl="59" sc="9" el="76" ec="10">MyWork.ascx.cs</location>
            <body hash="b812dcce8b188ea1c8701e43831eddcb"><![CDATA[{
            base.OnLoad(e);
            hlCancel.NavigateUrl = Globals.NavigateURL();

            try
            {
                if (!Page.IsPostBack)
                {
                    var objHtmlTextUsers = new HtmlTextUserController();
                    dgTabs.DataSource = objHtmlTextUsers.GetHtmlTextUser(UserInfo.UserID);
                    dgTabs.DataBind();
                }
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="customJS">
          <declaration><![CDATA[protected DnnCssInclude customJS;]]></declaration>
          <documentation>
            <summary>
 customJS control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="dgTabs">
          <declaration><![CDATA[protected DnnGrid dgTabs;]]></declaration>
          <documentation>
            <summary>
 dgTabs control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="hlCancel">
          <declaration><![CDATA[protected HyperLink hlCancel;]]></declaration>
          <documentation>
            <summary>
 hlCancel control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="Settings">
      <declaration><![CDATA[public class Settings : ModuleSettingsBase]]></declaration>
      <documentation>
        <summary>
   The Settings ModuleSettingsBase is used to manage the
   settings for the HTML Module
 </summary>
 <remarks>
 </remarks></documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public Settings()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="DisplayWorkflowDetails">
          <declaration><![CDATA[private void DisplayWorkflowDetails()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="71" sc="9" el="87" ec="10">Settings.ascx.cs</location>
            <body hash="8c481a949991d0b0a2d5ad946af85d46"><![CDATA[{
            if ((cboWorkflow.SelectedValue != null))
            {
                var objWorkflow = new WorkflowStateController();
                var strDescription = "";
                var arrStates = objWorkflow.GetWorkflowStates(int.Parse(cboWorkflow.SelectedValue));
                if (arrStates.Count > 0)
                {
                    foreach (WorkflowStateInfo objState in arrStates)
                    {
                        strDescription = strDescription + " >> " + "<strong>" + objState.StateName + "</strong>";
                    }
                    strDescription = strDescription + "<br />" + ((WorkflowStateInfo)arrStates[0]).Description;
                }
                lblDescription.Text = strDescription;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="LoadSettings">
          <declaration><![CDATA[public override void LoadSettings()]]></declaration>
          <documentation>
            <summary>
   LoadSettings loads the settings from the Database and displays them
 </summary>
 <remarks>
 </remarks></documentation>
          <codeblock>
            <location sl="99" sc="9" el="142" ec="10">Settings.ascx.cs</location>
            <body hash="2eee6fc511488424dfaee4eba02369be"><![CDATA[{
            try
            {
                if (!Page.IsPostBack)
                {
                    var htmlTextController = new HtmlTextController();
                    var workflowStateController = new WorkflowStateController();

                    chkReplaceTokens.Checked = ModuleSettings.ReplaceTokens;
                    cbDecorate.Checked = ModuleSettings.UseDecorate;

                    // get workflow/version settings
                    var workflows = new ArrayList();
                    foreach (WorkflowStateInfo state in workflowStateController.GetWorkflows(PortalId))
                    {
                        if (!state.IsDeleted)
                        {
                            workflows.Add(state);
                        }
                    }
                    cboWorkflow.DataSource = workflows;
                    cboWorkflow.DataBind();
                    var workflow = htmlTextController.GetWorkflow(ModuleId, TabId, PortalId);
                    if ((cboWorkflow.FindItemByValue(workflow.Value.ToString()) != null))
                    {
                        cboWorkflow.FindItemByValue(workflow.Value.ToString()).Selected = true;
                    }
                    DisplayWorkflowDetails();


                    if (rblApplyTo.Items.FindByValue(workflow.Key) != null)
                    {
                        rblApplyTo.Items.FindByValue(workflow.Key).Selected = true;
                    }

                    txtSearchDescLength.Text = ModuleSettings.SearchDescLength.ToString();
                }
                //Module failed to load
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="OnLoad">
          <declaration><![CDATA[protected override void OnLoad(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="56" sc="9" el="59" ec="10">Settings.ascx.cs</location>
            <body hash="6a084d4ccde33f5d7c4839b12a425a58"><![CDATA[{
            base.OnLoad(e);
            cboWorkflow.SelectedIndexChanged += OnWorkflowSelectedIndexChanged;
        }]]></body>
          </codeblock>
        </method>
        <method name="OnWorkflowSelectedIndexChanged">
          <declaration><![CDATA[protected void OnWorkflowSelectedIndexChanged(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="62" sc="9" el="64" ec="10">Settings.ascx.cs</location>
            <body hash="0d86aeee851bfebb038179b97c15bc63"><![CDATA[{
            DisplayWorkflowDetails();
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateSettings">
          <declaration><![CDATA[public override void UpdateSettings()]]></declaration>
          <documentation>
            <summary>
   UpdateSettings saves the modified settings to the Database
 </summary>
          </documentation>
          <codeblock>
            <location sl="148" sc="9" el="191" ec="10">Settings.ascx.cs</location>
            <body hash="baa450216a154a87e67e384ffdf97f16"><![CDATA[{
            try
            {
                var htmlTextController = new HtmlTextController();

                // update replace token setting
                ModuleSettings.ReplaceTokens = chkReplaceTokens.Checked;
                ModuleSettings.UseDecorate = cbDecorate.Checked;
                ModuleSettings.SearchDescLength = int.Parse(txtSearchDescLength.Text);
                var repo = new HtmlModuleSettingsRepository();
                repo.SaveSettings(this.ModuleConfiguration, ModuleSettings);

                // disable module caching if token replace is enabled
                if (chkReplaceTokens.Checked)
                {
                    ModuleInfo module = ModuleController.Instance.GetModule(ModuleId, TabId, false);
                    if (module.CacheTime > 0)
                    {
                        module.CacheTime = 0;
                        ModuleController.Instance.UpdateModule(module);
                    }
                }

                // update workflow/version settings
                switch (rblApplyTo.SelectedValue)
                {
                    case "Module":
                        htmlTextController.UpdateWorkflow(ModuleId, rblApplyTo.SelectedValue, Int32.Parse(cboWorkflow.SelectedValue), chkReplace.Checked);
                        break;
                    case "Page":
                        htmlTextController.UpdateWorkflow(TabId, rblApplyTo.SelectedValue, Int32.Parse(cboWorkflow.SelectedValue), chkReplace.Checked);
                        break;
                    case "Site":
                        htmlTextController.UpdateWorkflow(PortalId, rblApplyTo.SelectedValue, Int32.Parse(cboWorkflow.SelectedValue), chkReplace.Checked);
                        break;
                }

                //Module failed to load
            }
            catch (Exception exc)
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_moduleSettings">
          <declaration><![CDATA[private HtmlModuleSettings _moduleSettings;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="cbDecorate">
          <declaration><![CDATA[protected CheckBox cbDecorate;]]></declaration>
          <documentation>
            <summary>
 cbDecorate control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="cboWorkflow">
          <declaration><![CDATA[protected DnnComboBox cboWorkflow;]]></declaration>
          <documentation>
            <summary>
 cboWorkflow control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="chkReplace">
          <declaration><![CDATA[protected CheckBox chkReplace;]]></declaration>
          <documentation>
            <summary>
 chkReplace control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="chkReplaceTokens">
          <declaration><![CDATA[protected CheckBox chkReplaceTokens;]]></declaration>
          <documentation>
            <summary>
 chkReplaceTokens control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="customJS">
          <declaration><![CDATA[protected DnnCssInclude customJS;]]></declaration>
          <documentation>
            <summary>
 customJS control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="divApplyTo">
          <declaration><![CDATA[protected HtmlGenericControl divApplyTo;]]></declaration>
          <documentation>
            <summary>
 divApplyTo control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="lblDescription">
          <declaration><![CDATA[protected Label lblDescription;]]></declaration>
          <documentation>
            <summary>
 lblDescription control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="plApplyTo">
          <declaration><![CDATA[protected UserControl plApplyTo;]]></declaration>
          <documentation>
            <summary>
 plApplyTo control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="plDecorate">
          <declaration><![CDATA[protected UserControl plDecorate;]]></declaration>
          <documentation>
            <summary>
 plDecorate control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="plReplaceTokens">
          <declaration><![CDATA[protected UserControl plReplaceTokens;]]></declaration>
          <documentation>
            <summary>
 plReplaceTokens control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="plSearchDescLength">
          <declaration><![CDATA[protected UserControl plSearchDescLength;]]></declaration>
          <documentation>
            <summary>
 plSearchDescLength control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="plWorkflow">
          <declaration><![CDATA[protected UserControl plWorkflow;]]></declaration>
          <documentation>
            <summary>
 plWorkflow control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="rblApplyTo">
          <declaration><![CDATA[protected RadioButtonList rblApplyTo;]]></declaration>
          <documentation>
            <summary>
 rblApplyTo control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="RegularExpressionValidator1">
          <declaration><![CDATA[protected RegularExpressionValidator RegularExpressionValidator1;]]></declaration>
          <documentation>
            <summary>
 RegularExpressionValidator1 control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="txtSearchDescLength">
          <declaration><![CDATA[protected TextBox txtSearchDescLength;]]></declaration>
          <documentation>
            <summary>
 txtSearchDescLength control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
      </fields>
      <properties>
        <property name="ModuleSettings">
          <declaration><![CDATA[private new HtmlModuleSettings ModuleSettings]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="47" sc="13" el="49" ec="14">Settings.ascx.cs</location>
            <body hash="bf1d9ba4214317fc196299d5a3ebbea2"><![CDATA[{
                return _moduleSettings ?? (_moduleSettings = new HtmlModuleSettingsRepository().GetSettings(this.ModuleConfiguration));
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="WorkflowStateController">
      <declaration><![CDATA[public class WorkflowStateController]]></declaration>
      <documentation>-----------------------------------------------------------------------------
 Namespace:  DotNetNuke.Modules.Html
 Project:    DotNetNuke
 Class:      WorkflowStateController
 -----------------------------------------------------------------------------
 <summary>
   The WorkflowStateController is the Controller class for managing workflows and states for the HtmlText module
 </summary>
 <remarks>
 </remarks>
 -----------------------------------------------------------------------------</documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public WorkflowStateController()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="GetFirstWorkflowStateID">
          <declaration><![CDATA[public int GetFirstWorkflowStateID(int WorkflowID)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   GetFirstWorkFlowStateID retrieves the first StateID for the Workflow
 </summary>
 <remarks>
 </remarks>
 <param name="WorkflowID">The ID of the Workflow</param>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="100" sc="9" el="108" ec="10">Components\WorkflowStateController.cs</location>
            <body hash="f34b21e94b7d7a289bcb5a3f5a18b515"><![CDATA[{
            int intStateID = -1;
            ArrayList arrWorkflowStates = GetWorkflowStates(WorkflowID);
            if (arrWorkflowStates.Count > 0)
            {
                intStateID = ((WorkflowStateInfo) (arrWorkflowStates[0])).StateID;
            }
            return intStateID;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetLastWorkflowStateID">
          <declaration><![CDATA[public int GetLastWorkflowStateID(int WorkflowID)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   GetLastWorkFlowStateID retrieves the last StateID for the Workflow
 </summary>
 <remarks>
 </remarks>
 <param name="WorkflowID">The ID of the Workflow</param>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="217" sc="9" el="225" ec="10">Components\WorkflowStateController.cs</location>
            <body hash="92f62cfee74c049aba92ed1a02200244"><![CDATA[{
            int intStateID = -1;
            ArrayList arrWorkflowStates = GetWorkflowStates(WorkflowID);
            if (arrWorkflowStates.Count > 0)
            {
                intStateID = ((WorkflowStateInfo) (arrWorkflowStates[arrWorkflowStates.Count - 1])).StateID;
            }
            return intStateID;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetNextWorkflowStateID">
          <declaration><![CDATA[public int GetNextWorkflowStateID(int WorkflowID, int StateID)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   GetNextWorkFlowStateID retrieves the next StateID for the Workflow and State specified
 </summary>
 <remarks>
 </remarks>
 <param name="WorkflowID">The ID of the Workflow</param>
 <param name="StateID">The ID of the State</param>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="169" sc="9" el="206" ec="10">Components\WorkflowStateController.cs</location>
            <body hash="f3e66391f4a46452971068b107315911"><![CDATA[{
            int intNextStateID = -1;
            ArrayList arrWorkflowStates = GetWorkflowStates(WorkflowID);
            int intItem = 0;

            // locate the current state
            for (intItem = 0; intItem < arrWorkflowStates.Count; intItem++)
            {
                if (((WorkflowStateInfo) (arrWorkflowStates[intItem])).StateID == StateID)
                {
                    intNextStateID = StateID;
                    break;
                }
            }

            // get next active state
            if (intNextStateID == StateID)
            {
                intItem = intItem + 1;
                while (intItem < arrWorkflowStates.Count)
                {
                    if (((WorkflowStateInfo) (arrWorkflowStates[intItem])).IsActive)
                    {
                        intNextStateID = ((WorkflowStateInfo) (arrWorkflowStates[intItem])).StateID;
                        break;
                    }
                    intItem = intItem + 1;
                }
            }

            // if none found then reset to first state
            if (intNextStateID == -1)
            {
                intNextStateID = GetFirstWorkflowStateID(WorkflowID);
            }

            return intNextStateID;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPreviousWorkflowStateID">
          <declaration><![CDATA[public int GetPreviousWorkflowStateID(int WorkflowID, int StateID)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   GetPreviousWorkFlowStateID retrieves the previous StateID for the Workflow and State specified
 </summary>
 <remarks>
 </remarks>
 <param name="WorkflowID">The ID of the Workflow</param>
 <param name="StateID">The ID of the State</param>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="120" sc="9" el="157" ec="10">Components\WorkflowStateController.cs</location>
            <body hash="7fbb9123a5ecef173a438fb0d2adc6bd"><![CDATA[{
            int intPreviousStateID = -1;
            ArrayList arrWorkflowStates = GetWorkflowStates(WorkflowID);
            int intItem = 0;

            // locate the current state
            for (intItem = 0; intItem < arrWorkflowStates.Count; intItem++)
            {
                if (((WorkflowStateInfo) (arrWorkflowStates[intItem])).StateID == StateID)
                {
                    intPreviousStateID = StateID;
                    break;
                }
            }

            // get previous active state
            if (intPreviousStateID == StateID)
            {
                intItem = intItem - 1;
                while (intItem >= 0)
                {
                    if (((WorkflowStateInfo) (arrWorkflowStates[intItem])).IsActive)
                    {
                        intPreviousStateID = ((WorkflowStateInfo) (arrWorkflowStates[intItem])).StateID;
                        break;
                    }
                    intItem = intItem - 1;
                }
            }

            // if none found then reset to first state
            if (intPreviousStateID == -1)
            {
                intPreviousStateID = GetFirstWorkflowStateID(WorkflowID);
            }

            return intPreviousStateID;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetWorkflows">
          <declaration><![CDATA[public ArrayList GetWorkflows(int PortalID)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   GetWorkFlows retrieves a collection of workflows for the portal
 </summary>
 <remarks>
 </remarks>
 <param name="PortalID">The ID of the Portal</param>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="59" sc="9" el="61" ec="10">Components\WorkflowStateController.cs</location>
            <body hash="d40441d30665108e61064a417fdd7bd8"><![CDATA[{
            return CBO.FillCollection(DataProvider.Instance().GetWorkflows(PortalID), typeof (WorkflowStateInfo));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetWorkflowStates">
          <declaration><![CDATA[public ArrayList GetWorkflowStates(int WorkflowID)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   GetWorkFlowStates retrieves a collection of WorkflowStateInfo objects for the Workflow from the cache
 </summary>
 <remarks>
 </remarks>
 <param name="WorkflowID">The ID of the Workflow</param>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="72" sc="9" el="75" ec="10">Components\WorkflowStateController.cs</location>
            <body hash="5be40d0fde183c0467fcabf1e55c55b0"><![CDATA[{
            string cacheKey = string.Format(WORKFLOW_CACHE_KEY, WorkflowID);
            return CBO.GetCachedObject<ArrayList>(new CacheItemArgs(cacheKey, WORKFLOW_CACHE_TIMEOUT, WORKFLOW_CACHE_PRIORITY, WorkflowID), GetWorkflowStatesCallBack);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetWorkflowStatesCallBack">
          <declaration><![CDATA[public object GetWorkflowStatesCallBack(CacheItemArgs cacheItemArgs)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   GetWorkFlowStatesCallback retrieves a collection of WorkflowStateInfo objects for the Workflow from the database
 </summary>
 <remarks>
 </remarks>
 <param name="cacheItemArgs">Arguments passed by the GetWorkflowStates method</param>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="86" sc="9" el="89" ec="10">Components\WorkflowStateController.cs</location>
            <body hash="d362ee79691a93d8c4094e1dc3463560"><![CDATA[{
            var WorkflowID = (int) (cacheItemArgs.ParamList[0]);
            return CBO.FillCollection(DataProvider.Instance().GetWorkflowStates(WorkflowID), typeof (WorkflowStateInfo));
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="WORKFLOW_CACHE_KEY">
          <declaration><![CDATA[private const string WORKFLOW_CACHE_KEY = "Workflow{0}";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="WORKFLOW_CACHE_PRIORITY">
          <declaration><![CDATA[private const CacheItemPriority WORKFLOW_CACHE_PRIORITY = CacheItemPriority.Normal;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="WORKFLOW_CACHE_TIMEOUT">
          <declaration><![CDATA[private const int WORKFLOW_CACHE_TIMEOUT = 20;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="WorkflowStateInfo">
      <declaration><![CDATA[public class WorkflowStateInfo]]></declaration>
      <documentation>-----------------------------------------------------------------------------
 Namespace:  DotNetNuke.Modules.Html
 Project:    DotNetNuke
 Class:      WorkflowStateInfo
 -----------------------------------------------------------------------------
 <summary>
   Defines an instance of a WorkflowState object
 </summary>
 <remarks>
 </remarks>
 -----------------------------------------------------------------------------</documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private bool _IsActive = true;]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="42" sc="9" el="42" ec="39">Components\WorkflowStateInfo.cs</location>
            <body hash="3763b1c20779786dd2afe309ced4f35b"><![CDATA[private bool _IsActive = true]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
        <field name="_IsActive">
          <declaration><![CDATA[private bool _IsActive = true;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="Description">
          <declaration><![CDATA[public string Description]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="51" sc="37" el="51" ec="41">Components\WorkflowStateInfo.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="51" sc="42" el="51" ec="46">Components\WorkflowStateInfo.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="IsActive">
          <declaration><![CDATA[public bool IsActive]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="66" sc="13" el="68" ec="14">Components\WorkflowStateInfo.cs</location>
            <body hash="60f443debbab1fe5681665da174a9ff5"><![CDATA[{
                return _IsActive;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="70" sc="13" el="72" ec="14">Components\WorkflowStateInfo.cs</location>
            <body hash="fded552691aefe5866629a86ed982c6a"><![CDATA[{
                _IsActive = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="IsDeleted">
          <declaration><![CDATA[public bool IsDeleted]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="53" sc="33" el="53" ec="37">Components\WorkflowStateInfo.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="53" sc="38" el="53" ec="42">Components\WorkflowStateInfo.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Notify">
          <declaration><![CDATA[public bool Notify]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="61" sc="30" el="61" ec="34">Components\WorkflowStateInfo.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="61" sc="35" el="61" ec="39">Components\WorkflowStateInfo.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Order">
          <declaration><![CDATA[public int Order]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="59" sc="28" el="59" ec="32">Components\WorkflowStateInfo.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="59" sc="33" el="59" ec="37">Components\WorkflowStateInfo.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="PortalID">
          <declaration><![CDATA[public int PortalID]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="45" sc="31" el="45" ec="35">Components\WorkflowStateInfo.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="45" sc="36" el="45" ec="40">Components\WorkflowStateInfo.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="StateID">
          <declaration><![CDATA[public int StateID]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="55" sc="30" el="55" ec="34">Components\WorkflowStateInfo.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="55" sc="35" el="55" ec="39">Components\WorkflowStateInfo.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="StateName">
          <declaration><![CDATA[public string StateName]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="57" sc="35" el="57" ec="39">Components\WorkflowStateInfo.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="57" sc="40" el="57" ec="44">Components\WorkflowStateInfo.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="WorkflowID">
          <declaration><![CDATA[public int WorkflowID]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="47" sc="33" el="47" ec="37">Components\WorkflowStateInfo.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="47" sc="38" el="47" ec="42">Components\WorkflowStateInfo.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="WorkflowName">
          <declaration><![CDATA[public string WorkflowName]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="49" sc="38" el="49" ec="42">Components\WorkflowStateInfo.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="49" sc="43" el="49" ec="47">Components\WorkflowStateInfo.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="DotNetNuke.Modules.Html.Components">
    <class name="DataProvider">
      <declaration><![CDATA[public class DataProvider]]></declaration>
      <documentation>-----------------------------------------------------------------------------
 <summary>
   The DataProvider is an abstract class that provides the Data Access Layer for the HtmlText module
 </summary>
 <remarks>
 </remarks></documentation>
      <constructors>
        <constructor name=".cctor">
          <declaration><![CDATA[static DataProvider()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="43" sc="9" el="45" ec="10">Components\DataProvider.cs</location>
            <body hash="fbdbec69c02f972904053ef19f57ca49"><![CDATA[{
            provider = new DataProvider();
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[public DataProvider()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="AddHtmlText">
          <declaration><![CDATA[public virtual int AddHtmlText(int ModuleID, string Content, string Summary, int StateID, bool IsPublished, int CreatedByUserID, int History)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="73" sc="9" el="75" ec="10">Components\DataProvider.cs</location>
            <body hash="eb8d0e3852a562e5e391d97ff12e1793"><![CDATA[{
            return DotNetNuke.Data.DataProvider.Instance().ExecuteScalar<int>("AddHtmlText", ModuleID, Content, Summary, StateID, IsPublished, CreatedByUserID, History);
        }]]></body>
          </codeblock>
        </method>
        <method name="AddHtmlTextLog">
          <declaration><![CDATA[public virtual void AddHtmlTextLog(int ItemID, int StateID, string Comment, bool Approved, int CreatedByUserID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="93" sc="9" el="95" ec="10">Components\DataProvider.cs</location>
            <body hash="e0cf2584242b2813cfa41921c97381ba"><![CDATA[{
            DotNetNuke.Data.DataProvider.Instance().ExecuteNonQuery("AddHtmlTextLog", ItemID, StateID, Comment, Approved, CreatedByUserID);
        }]]></body>
          </codeblock>
        </method>
        <method name="AddHtmlTextUser">
          <declaration><![CDATA[public virtual void AddHtmlTextUser(int ItemID, int StateID, int ModuleID, int TabID, int UserID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="103" sc="9" el="105" ec="10">Components\DataProvider.cs</location>
            <body hash="0bdab0ba03d4dda52398b59355ca771a"><![CDATA[{
            DotNetNuke.Data.DataProvider.Instance().ExecuteNonQuery("AddHtmlTextUser", ItemID, StateID, ModuleID, TabID, UserID);
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteHtmlText">
          <declaration><![CDATA[public virtual void DeleteHtmlText(int ModuleID, int ItemID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="83" sc="9" el="85" ec="10">Components\DataProvider.cs</location>
            <body hash="c6db93db4ae050484ed45b4d3d00ba04"><![CDATA[{
            DotNetNuke.Data.DataProvider.Instance().ExecuteNonQuery("DeleteHtmlText", ModuleID, ItemID);
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteHtmlTextUsers">
          <declaration><![CDATA[public virtual void DeleteHtmlTextUsers()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="108" sc="9" el="110" ec="10">Components\DataProvider.cs</location>
            <body hash="986ba49e946e27c95c0a269e02e7a859"><![CDATA[{
            DotNetNuke.Data.DataProvider.Instance().ExecuteNonQuery("DeleteHtmlTextUsers");
        }]]></body>
          </codeblock>
        </method>
        <method name="GetAllHtmlText">
          <declaration><![CDATA[public virtual IDataReader GetAllHtmlText(int ModuleID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="68" sc="9" el="70" ec="10">Components\DataProvider.cs</location>
            <body hash="22ed8bc56c0ac02e490d77a21bddb522"><![CDATA[{
            return (DotNetNuke.Data.DataProvider.Instance().ExecuteReader("GetAllHtmlText", ModuleID));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetHtmlText">
          <declaration><![CDATA[public virtual IDataReader GetHtmlText(int ModuleID, int ItemID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="58" sc="9" el="60" ec="10">Components\DataProvider.cs</location>
            <body hash="107e7b8066ffcbabba7977fb46122580"><![CDATA[{
            return (DotNetNuke.Data.DataProvider.Instance().ExecuteReader("GetHtmlText", ModuleID, ItemID));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetHtmlTextLog">
          <declaration><![CDATA[public virtual IDataReader GetHtmlTextLog(int ItemID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="88" sc="9" el="90" ec="10">Components\DataProvider.cs</location>
            <body hash="3401f969287eb7900b4490cbccaa683b"><![CDATA[{
            return (DotNetNuke.Data.DataProvider.Instance().ExecuteReader("GetHtmlTextLog", ItemID));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetHtmlTextUser">
          <declaration><![CDATA[public virtual IDataReader GetHtmlTextUser(int UserID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="98" sc="9" el="100" ec="10">Components\DataProvider.cs</location>
            <body hash="0e2eb42a8572cc1df48b5675c1ff2ec0"><![CDATA[{
            return (DotNetNuke.Data.DataProvider.Instance().ExecuteReader("GetHtmlTextUser", UserID));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetTopHtmlText">
          <declaration><![CDATA[public virtual IDataReader GetTopHtmlText(int ModuleID, bool IsPublished)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="63" sc="9" el="65" ec="10">Components\DataProvider.cs</location>
            <body hash="e341fe59015e8a411d3aba7be7922cfe"><![CDATA[{
            return (DotNetNuke.Data.DataProvider.Instance().ExecuteReader("GetTopHtmlText", ModuleID, IsPublished));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetWorkflows">
          <declaration><![CDATA[public virtual IDataReader GetWorkflows(int PortalID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="113" sc="9" el="115" ec="10">Components\DataProvider.cs</location>
            <body hash="be9620248ba878973c43488c8b9fe198"><![CDATA[{
            return (DotNetNuke.Data.DataProvider.Instance().ExecuteReader("GetWorkflows", PortalID));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetWorkflowStatePermissions">
          <declaration><![CDATA[public virtual IDataReader GetWorkflowStatePermissions()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="123" sc="9" el="125" ec="10">Components\DataProvider.cs</location>
            <body hash="3118fa8fc2dbc968fe8c428a36610926"><![CDATA[{
            return (DotNetNuke.Data.DataProvider.Instance().ExecuteReader("GetWorkflowStatePermissions"));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetWorkflowStatePermissionsByStateID">
          <declaration><![CDATA[public virtual IDataReader GetWorkflowStatePermissionsByStateID(int StateID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="128" sc="9" el="130" ec="10">Components\DataProvider.cs</location>
            <body hash="c268d8f87030916e7d952ea3f6cf94dc"><![CDATA[{
            return (DotNetNuke.Data.DataProvider.Instance().ExecuteReader("GetWorkflowStatePermissionsByStateID", StateID));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetWorkflowStates">
          <declaration><![CDATA[public virtual IDataReader GetWorkflowStates(int WorkflowID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="118" sc="9" el="120" ec="10">Components\DataProvider.cs</location>
            <body hash="216b245870ad00c64c64ad16b645549c"><![CDATA[{
            return (DotNetNuke.Data.DataProvider.Instance().ExecuteReader("GetWorkflowStates", WorkflowID));
        }]]></body>
          </codeblock>
        </method>
        <method name="Instance">
          <declaration><![CDATA[public static DataProvider Instance()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="49" sc="9" el="51" ec="10">Components\DataProvider.cs</location>
            <body hash="49eb547b1ee3cf3c0afc6283e47b3688"><![CDATA[{
            return provider;
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateHtmlText">
          <declaration><![CDATA[public virtual void UpdateHtmlText(int ItemID, string Content, string Summary, int StateID, bool IsPublished, int LastModifiedByUserID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="78" sc="9" el="80" ec="10">Components\DataProvider.cs</location>
            <body hash="29907a31ce2f5e3684de42e3b3ba8618"><![CDATA[{
            DotNetNuke.Data.DataProvider.Instance().ExecuteNonQuery("UpdateHtmlText", ItemID, Content, Summary, StateID, IsPublished, LastModifiedByUserID);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="provider">
          <declaration><![CDATA[private static readonly DataProvider provider;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="HtmlModuleBase">
      <declaration><![CDATA[public class HtmlModuleBase : PortalModuleBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public HtmlModuleBase()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
        <field name="_settings">
          <declaration><![CDATA[private HtmlModuleSettings _settings;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="Settings">
          <declaration><![CDATA[public new HtmlModuleSettings Settings]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="15" sc="13" el="22" ec="14">Components\HtmlModuleBase.cs</location>
            <body hash="e3eeb024e68f3f1e70aaa315127ebec6"><![CDATA[{
                if (_settings == null)
                {
                    var repo = new HtmlModuleSettingsRepository();
                    _settings = repo.GetSettings(this.ModuleConfiguration);
                }
                return _settings;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="HtmlModuleSettings">
      <declaration><![CDATA[public class HtmlModuleSettings]]></declaration>
      <documentation>
        <summary>
 An example implementation of the <see cref="T:DotNetNuke.Entities.Modules.Settings.ModuleSettingAttribute" />
 </summary>
 <remarks>
 HtmlModuleSettings provides a strongly typed list of properties used by
 the HTML module.  Settings will automatically be serialized and deserialized
 for storage in the underlying settings table.
 </remarks></documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private bool <ReplaceTokens>k__BackingField = false;]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="20" sc="51" el="29" ec="49">Components\HtmlModuleSettings.cs</location>
            <body hash="dd0fabdc05ad19265e368aee71b0d315"><![CDATA[false;

        [ModuleSetting(Prefix = "HtmlText_")]
        public bool UseDecorate { get; set; } = true;

        [ModuleSetting(Prefix = "HtmlText_")]
        public int SearchDescLength { get; set; } = 100;

        [ModuleSetting()]
        public int WorkFlowID { get; set; } = -1]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="ReplaceTokens">
          <declaration><![CDATA[public bool ReplaceTokens]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="20" sc="37" el="20" ec="41">Components\HtmlModuleSettings.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="20" sc="42" el="20" ec="46">Components\HtmlModuleSettings.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="SearchDescLength">
          <declaration><![CDATA[public int SearchDescLength]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="26" sc="39" el="26" ec="43">Components\HtmlModuleSettings.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="26" sc="44" el="26" ec="48">Components\HtmlModuleSettings.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="UseDecorate">
          <declaration><![CDATA[public bool UseDecorate]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="23" sc="35" el="23" ec="39">Components\HtmlModuleSettings.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="23" sc="40" el="23" ec="44">Components\HtmlModuleSettings.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="WorkFlowID">
          <declaration><![CDATA[public int WorkFlowID]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="29" sc="33" el="29" ec="37">Components\HtmlModuleSettings.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="29" sc="38" el="29" ec="42">Components\HtmlModuleSettings.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="HtmlModuleSettingsRepository">
      <declaration><![CDATA[public class HtmlModuleSettingsRepository : SettingsRepository<HtmlModuleSettings>]]></declaration>
      <documentation>
        <summary>
 The <see cref="T:DotNetNuke.Entities.Modules.Settings.SettingsRepository`1" /> used for storing and retrieving <see cref="T:DotNetNuke.Modules.Html.Components.HtmlModuleSettings" />
 </summary>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public HtmlModuleSettingsRepository()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="DotNetNuke.Security.Permissions">
    <class name="CompareWorkflowStatePermissions">
      <declaration><![CDATA[internal class CompareWorkflowStatePermissions : IComparer]]></declaration>
      <documentation>-----------------------------------------------------------------------------
 Project	 : DotNetNuke
 Namespace: DotNetNuke.Security.Permissions
 Class	 : CompareWorkflowStatePermissions
 -----------------------------------------------------------------------------
 <summary>
   CompareWorkflowStatePermissions provides the a custom IComparer implementation for
   WorkflowStatePermissionInfo objects
 </summary></documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public CompareWorkflowStatePermissions()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="Compare">
          <declaration><![CDATA[public int Compare(object x, object y)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="40" sc="9" el="42" ec="10">Components\CompareWorkflowStatePermissions.cs</location>
            <body hash="3656a664d90970863a096be37cde2777"><![CDATA[{
            return ((WorkflowStatePermissionInfo) x).WorkflowStatePermissionID.CompareTo(((WorkflowStatePermissionInfo) y).WorkflowStatePermissionID);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="WorkflowStatePermissionCollection">
      <declaration><![CDATA[public class WorkflowStatePermissionCollection : CollectionBase]]></declaration>
      <documentation>-----------------------------------------------------------------------------
 Project	 : DotNetNuke
 Namespace: DotNetNuke.Security.Permissions
 Class	 : WorkflowStatePermissionCollection
 -----------------------------------------------------------------------------
 <summary>
   DesktopModulePermissionCollection provides the a custom collection for WorkflowStatePermissionInfo
   objects
 </summary>
 -----------------------------------------------------------------------------</documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public WorkflowStatePermissionCollection()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="44" sc="9" el="46" ec="10">Components\WorkflowStatePermissionCollection.cs</location>
            <body hash="bf55235ef03e7a42100532cb6f5f597d"><![CDATA[public WorkflowStatePermissionCollection()
        {
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[public WorkflowStatePermissionCollection(ArrayList WorkflowStatePermissions)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="48" sc="9" el="51" ec="10">Components\WorkflowStatePermissionCollection.cs</location>
            <body hash="e5587059b5cdbe602388dceae1f7f9da"><![CDATA[public WorkflowStatePermissionCollection(ArrayList WorkflowStatePermissions)
        {
            AddRange(WorkflowStatePermissions);
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[public WorkflowStatePermissionCollection(WorkflowStatePermissionCollection WorkflowStatePermissions)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="53" sc="9" el="56" ec="10">Components\WorkflowStatePermissionCollection.cs</location>
            <body hash="a88cd7ae1df881d1d607f80bc2114720"><![CDATA[public WorkflowStatePermissionCollection(WorkflowStatePermissionCollection WorkflowStatePermissions)
        {
            AddRange(WorkflowStatePermissions);
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[public WorkflowStatePermissionCollection(ArrayList WorkflowStatePermissions, int WorkflowStatePermissionID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="58" sc="9" el="67" ec="10">Components\WorkflowStatePermissionCollection.cs</location>
            <body hash="a390e04fac22ba3aad17f08d1caf7b6b"><![CDATA[public WorkflowStatePermissionCollection(ArrayList WorkflowStatePermissions, int WorkflowStatePermissionID)
        {
            foreach (WorkflowStatePermissionInfo permission in WorkflowStatePermissions)
            {
                if (permission.WorkflowStatePermissionID == WorkflowStatePermissionID)
                {
                    Add(permission);
                }
            }
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="Add">
          <declaration><![CDATA[public int Add(WorkflowStatePermissionInfo value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="90" sc="9" el="92" ec="10">Components\WorkflowStatePermissionCollection.cs</location>
            <body hash="159c8b2f05fc30858504bc9b38381129"><![CDATA[{
            return List.Add(value);
        }]]></body>
          </codeblock>
        </method>
        <method name="Add">
          <declaration><![CDATA[public int Add(WorkflowStatePermissionInfo value, bool checkForDuplicates)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="95" sc="9" el="118" ec="10">Components\WorkflowStatePermissionCollection.cs</location>
            <body hash="e44db56248178c57c5d8eaeb05bd12ab"><![CDATA[{
            int id = Null.NullInteger;
            if (!checkForDuplicates)
            {
                id = Add(value);
            }
            else
            {
                bool isMatch = false;
                foreach (PermissionInfoBase permission in List)
                {
                    if (permission.PermissionID == value.PermissionID && permission.UserID == value.UserID && permission.RoleID == value.RoleID)
                    {
                        isMatch = true;
                        break;
                    }
                }
                if (!isMatch)
                {
                    id = Add(value);
                }
            }
            return id;
        }]]></body>
          </codeblock>
        </method>
        <method name="AddRange">
          <declaration><![CDATA[public void AddRange(ArrayList WorkflowStatePermissions)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="121" sc="9" el="126" ec="10">Components\WorkflowStatePermissionCollection.cs</location>
            <body hash="ee077787cf14d85f7a00714ba694f688"><![CDATA[{
            foreach (WorkflowStatePermissionInfo permission in WorkflowStatePermissions)
            {
                Add(permission);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="AddRange">
          <declaration><![CDATA[public void AddRange(WorkflowStatePermissionCollection WorkflowStatePermissions)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="129" sc="9" el="134" ec="10">Components\WorkflowStatePermissionCollection.cs</location>
            <body hash="ee077787cf14d85f7a00714ba694f688"><![CDATA[{
            foreach (WorkflowStatePermissionInfo permission in WorkflowStatePermissions)
            {
                Add(permission);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="CompareTo">
          <declaration><![CDATA[public bool CompareTo(WorkflowStatePermissionCollection objWorkflowStatePermissionCollection)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="137" sc="9" el="154" ec="10">Components\WorkflowStatePermissionCollection.cs</location>
            <body hash="fde0c218be6bdd3849f5006b19b31e08"><![CDATA[{
            if (objWorkflowStatePermissionCollection.Count != Count)
            {
                return false;
            }
            InnerList.Sort(new CompareWorkflowStatePermissions());
            objWorkflowStatePermissionCollection.InnerList.Sort(new CompareWorkflowStatePermissions());

            for (int i = 0; i < Count; i++)
            {
                if (objWorkflowStatePermissionCollection[i].WorkflowStatePermissionID != this[i].WorkflowStatePermissionID || objWorkflowStatePermissionCollection[i].AllowAccess != this[i].AllowAccess)
                {
                    return false;
                }
            }

            return true;
        }]]></body>
          </codeblock>
        </method>
        <method name="Contains">
          <declaration><![CDATA[public bool Contains(WorkflowStatePermissionInfo value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="157" sc="9" el="159" ec="10">Components\WorkflowStatePermissionCollection.cs</location>
            <body hash="d20c32a5e63365068d301ea922657cde"><![CDATA[{
            return List.Contains(value);
        }]]></body>
          </codeblock>
        </method>
        <method name="IndexOf">
          <declaration><![CDATA[public int IndexOf(WorkflowStatePermissionInfo value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="162" sc="9" el="164" ec="10">Components\WorkflowStatePermissionCollection.cs</location>
            <body hash="f4423ee35eb0ad36d01cb102b34e7dd2"><![CDATA[{
            return List.IndexOf(value);
        }]]></body>
          </codeblock>
        </method>
        <method name="Insert">
          <declaration><![CDATA[public void Insert(int index, WorkflowStatePermissionInfo value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="167" sc="9" el="169" ec="10">Components\WorkflowStatePermissionCollection.cs</location>
            <body hash="29d857179ece5d364c408e998bc9afb6"><![CDATA[{
            List.Insert(index, value);
        }]]></body>
          </codeblock>
        </method>
        <method name="Remove">
          <declaration><![CDATA[public void Remove(WorkflowStatePermissionInfo value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="172" sc="9" el="174" ec="10">Components\WorkflowStatePermissionCollection.cs</location>
            <body hash="5f06fe14d0312ed42ccd87d3bd3fa13e"><![CDATA[{
            List.Remove(value);
        }]]></body>
          </codeblock>
        </method>
        <method name="Remove">
          <declaration><![CDATA[public void Remove(int permissionID, int roleID, int userID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="177" sc="9" el="186" ec="10">Components\WorkflowStatePermissionCollection.cs</location>
            <body hash="0611b6026c1ba1269ab2b145f133106c"><![CDATA[{
            foreach (PermissionInfoBase permission in List)
            {
                if (permission.PermissionID == permissionID && permission.UserID == userID && permission.RoleID == roleID)
                {
                    List.Remove(permission);
                    break;
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="ToList">
          <declaration><![CDATA[public List<PermissionInfoBase> ToList()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="189" sc="9" el="197" ec="10">Components\WorkflowStatePermissionCollection.cs</location>
            <body hash="6f9af7e281edac0a6ee0097e19bbc1b5"><![CDATA[{
            var list = new List<PermissionInfoBase>();

            foreach (PermissionInfoBase permission in List)
            {
                list.Add(permission);
            }
            return list;
        }]]></body>
          </codeblock>
        </method>
        <method name="ToString">
          <declaration><![CDATA[public string ToString(string key)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="200" sc="9" el="202" ec="10">Components\WorkflowStatePermissionCollection.cs</location>
            <body hash="81743b9ae3a34e7185c2147ca253bb45"><![CDATA[{
            return PermissionController.BuildPermissions(List, key);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="Item">
          <declaration><![CDATA[public WorkflowStatePermissionInfo this[int index]]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="76" sc="13" el="78" ec="14">Components\WorkflowStatePermissionCollection.cs</location>
            <body hash="28bf04c2701e3b894b1332c443c692fe"><![CDATA[{
                return (WorkflowStatePermissionInfo) (List[index]);
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="80" sc="13" el="82" ec="14">Components\WorkflowStatePermissionCollection.cs</location>
            <body hash="317ffc941817052353a1a004fbfa9af4"><![CDATA[{
                List[index] = value;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="WorkflowStatePermissionController">
      <declaration><![CDATA[public class WorkflowStatePermissionController]]></declaration>
      <documentation>-----------------------------------------------------------------------------
 Project	 : DotNetNuke
 Namespace: DotNetNuke.Security.Permissions
 Class	 : WorkflowStatePermissionController
 -----------------------------------------------------------------------------
 <summary>
   WorkflowStatePermissionController provides the Business Layer for DesktopModule Permissions
 </summary>
 -----------------------------------------------------------------------------</documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public WorkflowStatePermissionController()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
        <constructor name=".cctor">
          <declaration><![CDATA[static WorkflowStatePermissionController()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="50" sc="9" el="50" ec="81">Components\WorkflowStatePermissionController.cs</location>
            <body hash="acfa69d31e522d2ba9a1dcc5f95a9195"><![CDATA[private static readonly DataProvider provider = DataProvider.Instance()]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="FillWorkflowStatePermissionDictionary">
          <declaration><![CDATA[private static Dictionary<int, WorkflowStatePermissionCollection> FillWorkflowStatePermissionDictionary(IDataReader dr)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   FillWorkflowStatePermissionDictionary fills a Dictionary of WorkflowStatePermissions from a
   dataReader
 </summary>
 <param name="dr">The IDataReader</param>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="86" sc="9" el="128" ec="10">Components\WorkflowStatePermissionController.cs</location>
            <body hash="3e68f8a7799c737fffb03b86ad50cd0c"><![CDATA[{
            var dic = new Dictionary<int, WorkflowStatePermissionCollection>();
            try
            {
                WorkflowStatePermissionInfo obj = null;
                while (dr.Read())
                {
                    // fill business object
                    obj = CBO.FillObject<WorkflowStatePermissionInfo>(dr, false);

                    // add WorkflowState Permission to dictionary
                    if (dic.ContainsKey(obj.StateID))
                    {
                        //Add WorkflowStatePermission to WorkflowStatePermission Collection already in dictionary for StateId
                        dic[obj.StateID].Add(obj);
                    }
                    else
                    {
                        //Create new WorkflowStatePermission Collection for WorkflowStatePermissionID
                        var collection = new WorkflowStatePermissionCollection();

                        //Add Permission to Collection
                        collection.Add(obj);

                        //Add Collection to Dictionary
                        dic.Add(obj.StateID, collection);
                    }
                }
            }
            catch (Exception exc)
            {
                Exceptions.LogException(exc);
            }
            finally
            {
                // close datareader
                if (dr != null)
                {
                    dr.Close();
                }
            }
            return dic;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetWorkflowStatePermissions">
          <declaration><![CDATA[private static Dictionary<int, WorkflowStatePermissionCollection> GetWorkflowStatePermissions()]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   GetWorkflowStatePermissions gets a Dictionary of WorkflowStatePermissionCollections by
   WorkflowState.
 </summary>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="61" sc="9" el="64" ec="10">Components\WorkflowStatePermissionController.cs</location>
            <body hash="81b1389bc33c2a42760db79e218352c9"><![CDATA[{
            return CBO.GetCachedObject<Dictionary<int, WorkflowStatePermissionCollection>>(new CacheItemArgs(WorkflowStatePermissionCacheKey, WorkflowStatePermissionCachePriority),
                                                                                           GetWorkflowStatePermissionsCallBack);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetWorkflowStatePermissions">
          <declaration><![CDATA[public static WorkflowStatePermissionCollection GetWorkflowStatePermissions(int StateID)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   GetWorkflowStatePermissions gets a WorkflowStatePermissionCollection
 </summary>
 <param name="StateID">The ID of the State</param>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="141" sc="9" el="159" ec="10">Components\WorkflowStatePermissionController.cs</location>
            <body hash="207938dd2e5a628fd3e27be5c5d649c1"><![CDATA[{
            bool bFound = false;

            //Get the WorkflowStatePermission Dictionary
            Dictionary<int, WorkflowStatePermissionCollection> dicWorkflowStatePermissions = GetWorkflowStatePermissions();

            //Get the Collection from the Dictionary
            WorkflowStatePermissionCollection WorkflowStatePermissions = null;
            bFound = dicWorkflowStatePermissions.TryGetValue(StateID, out WorkflowStatePermissions);

            if (!bFound)
            {
                //try the database
                WorkflowStatePermissions = new WorkflowStatePermissionCollection(CBO.FillCollection(provider.GetWorkflowStatePermissionsByStateID(StateID), typeof (WorkflowStatePermissionInfo)),
                                                                                 StateID);
            }

            return WorkflowStatePermissions;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetWorkflowStatePermissionsCallBack">
          <declaration><![CDATA[private static object GetWorkflowStatePermissionsCallBack(CacheItemArgs cacheItemArgs)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   GetWorkflowStatePermissionsCallBack gets a Dictionary of WorkflowStatePermissionCollections by
   WorkflowState from the the Database.
 </summary>
 <param name="cacheItemArgs">The CacheItemArgs object that contains the parameters needed for the database call</param>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="74" sc="9" el="76" ec="10">Components\WorkflowStatePermissionController.cs</location>
            <body hash="b62957d0ca77b2560b2432a3be6a2617"><![CDATA[{
            return FillWorkflowStatePermissionDictionary(provider.GetWorkflowStatePermissions());
        }]]></body>
          </codeblock>
        </method>
        <method name="HasWorkflowStatePermission">
          <declaration><![CDATA[public static bool HasWorkflowStatePermission(WorkflowStatePermissionCollection objWorkflowStatePermissions, string permissionKey)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   HasWorkflowStatePermission checks whether the current user has a specific WorkflowState Permission
 </summary>
 <param name="objWorkflowStatePermissions">The Permissions for the WorkflowState</param>
 <param name="permissionKey">The Permission to check</param>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="170" sc="9" el="172" ec="10">Components\WorkflowStatePermissionController.cs</location>
            <body hash="66ce25789e30cdc8e5f4b90966dbeecf"><![CDATA[{
            return PortalSecurity.IsInRoles(objWorkflowStatePermissions.ToString(permissionKey));
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="provider">
          <declaration><![CDATA[private static readonly DataProvider provider = DataProvider.Instance();]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="WorkflowStatePermissionCacheKey">
          <declaration><![CDATA[public const string WorkflowStatePermissionCacheKey = "WorkflowStatePermissions";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="WorkflowStatePermissionCachePriority">
          <declaration><![CDATA[public const CacheItemPriority WorkflowStatePermissionCachePriority = CacheItemPriority.Normal;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="WorkflowStatePermissionCacheTimeOut">
          <declaration><![CDATA[public const int WorkflowStatePermissionCacheTimeOut = 20;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="WorkflowStatePermissionInfo">
      <declaration><![CDATA[public class WorkflowStatePermissionInfo : PermissionInfoBase, IHydratable]]></declaration>
      <documentation>-----------------------------------------------------------------------------
 Project	 : DotNetNuke
 Namespace: DotNetNuke.Security.Permissions
 Class	 : DesktopModulePermissionInfo
 -----------------------------------------------------------------------------
 <summary>
   DesktopModulePermissionInfo provides the Entity Layer for DesktopModulePermissionInfo
   Permissions
 </summary>
 -----------------------------------------------------------------------------</documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public WorkflowStatePermissionInfo()]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   Constructs a new WorkflowStatePermissionInfo
 </summary>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="55" sc="9" el="59" ec="10">Components\WorkflowStatePermissionInfo.cs</location>
            <body hash="15fd864eaf70e882388aa2458748213d"><![CDATA[public WorkflowStatePermissionInfo()
        {
            _WorkflowStatePermissionID = Null.NullInteger;
            _StateID = Null.NullInteger;
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[public WorkflowStatePermissionInfo(PermissionInfo permission) : this()]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   Constructs a new WorkflowStatePermissionInfo
 </summary>
 <param name="permission">A PermissionInfo object</param>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="69" sc="73" el="76" ec="10">Components\WorkflowStatePermissionInfo.cs</location>
            <body hash="8174ec3e4cdc7ddb85089fa889db1d07"><![CDATA[this()
        {
            ModuleDefID = permission.ModuleDefID;
            PermissionCode = permission.PermissionCode;
            PermissionID = permission.PermissionID;
            PermissionKey = permission.PermissionKey;
            PermissionName = permission.PermissionName;
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="Equals">
          <declaration><![CDATA[public override bool Equals(object obj)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   Compares if two WorkflowStatePermissionInfo objects are equivalent/equal
 </summary>
 <param name="obj">a WorkflowStatePermissionObject</param>
 <returns>true if the permissions being passed represents the same permission
   in the current object
 </returns>
 <remarks>
   This function is needed to prevent adding duplicates to the WorkflowStatePermissionCollection.
   WorkflowStatePermissionCollection.Contains will use this method to check if a given permission
   is already included in the collection.
 </remarks>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="137" sc="9" el="151" ec="10">Components\WorkflowStatePermissionInfo.cs</location>
            <body hash="52ab6cb2f550a13bd23b05bcb414d412"><![CDATA[{
            if (ReferenceEquals(null, obj))
            {
                return false;
            }
            if (ReferenceEquals(this, obj))
            {
                return true;
            }
            if (obj.GetType() != typeof(WorkflowStatePermissionInfo))
            {
                return false;
            }
            return Equals((WorkflowStatePermissionInfo)obj);
        }]]></body>
          </codeblock>
        </method>
        <method name="Equals">
          <declaration><![CDATA[public bool Equals(WorkflowStatePermissionInfo other)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="154" sc="9" el="164" ec="10">Components\WorkflowStatePermissionInfo.cs</location>
            <body hash="4f816df2e338840769f4eb38d8cbe2d8"><![CDATA[{
            if (ReferenceEquals(null, other))
            {
                return false;
            }
            if (ReferenceEquals(this, other))
            {
                return true;
            }
            return (AllowAccess == other.AllowAccess) && (StateID == other.StateID) && (RoleID == other.RoleID) && (PermissionID == other.PermissionID);
        }]]></body>
          </codeblock>
        </method>
        <method name="Fill">
          <declaration><![CDATA[public void Fill(IDataReader dr)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   Fills a WorkflowStatePermissionInfo from a Data Reader
 </summary>
 <param name="dr">The Data Reader to use</param>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="185" sc="9" el="191" ec="10">Components\WorkflowStatePermissionInfo.cs</location>
            <body hash="e7146d8488e29e60c785eca33a4f1ab6"><![CDATA[{
            //Call the base classes fill method to populate base class proeprties
            base.FillInternal(dr);

            WorkflowStatePermissionID = Null.SetNullInteger(dr["WorkflowStatePermissionID"]);
            StateID = Null.SetNullInteger(dr["StateID"]);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetHashCode">
          <declaration><![CDATA[public override int GetHashCode()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="167" sc="9" el="172" ec="10">Components\WorkflowStatePermissionInfo.cs</location>
            <body hash="275efac0851edb5253739b3ce6e8810a"><![CDATA[{
            unchecked
            {
                return (_StateID*397) ^ _WorkflowStatePermissionID;
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_StateID">
          <declaration><![CDATA[private int _StateID;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_WorkflowStatePermissionID">
          <declaration><![CDATA[private int _WorkflowStatePermissionID;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="KeyID">
          <declaration><![CDATA[public int KeyID]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   Gets and sets the Key ID
 </summary>
 <returns>An Integer</returns>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="202" sc="13" el="204" ec="14">Components\WorkflowStatePermissionInfo.cs</location>
            <body hash="03675010a4d701e15d8c5b042ab215ac"><![CDATA[{
                return WorkflowStatePermissionID;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="206" sc="13" el="208" ec="14">Components\WorkflowStatePermissionInfo.cs</location>
            <body hash="de6731b9ea946cce8507900309937bae"><![CDATA[{
                WorkflowStatePermissionID = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="StateID">
          <declaration><![CDATA[public int StateID]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   Gets and sets the State ID
 </summary>
 <returns>An Integer</returns>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="109" sc="13" el="111" ec="14">Components\WorkflowStatePermissionInfo.cs</location>
            <body hash="41f78aa7db30176e88943e4c1bf651f4"><![CDATA[{
                return _StateID;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="113" sc="13" el="115" ec="14">Components\WorkflowStatePermissionInfo.cs</location>
            <body hash="0f145ede9bf61a369c0a4a6f1282970e"><![CDATA[{
                _StateID = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="WorkflowStatePermissionID">
          <declaration><![CDATA[public int WorkflowStatePermissionID]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
   Gets and sets the WorkflowState Permission ID
 </summary>
 <returns>An Integer</returns>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="91" sc="13" el="93" ec="14">Components\WorkflowStatePermissionInfo.cs</location>
            <body hash="ab0bfcdff604c0f8ac0b4cc744a5a492"><![CDATA[{
                return _WorkflowStatePermissionID;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="95" sc="13" el="97" ec="14">Components\WorkflowStatePermissionInfo.cs</location>
            <body hash="8f0bae79ca5108aa119d1352099e46ca"><![CDATA[{
                _WorkflowStatePermissionID = value;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
</root>