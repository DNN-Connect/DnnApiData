<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<root file="DotNetNuke.Modules.Groups.dll" version="06.02.09" generated="2017-06-18 22:57:50Z" generationTime="2.7317855">
  <namespace name="DotNetNuke.Entities.Groups">
    <class name="Content">
      <declaration><![CDATA[public class Content]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public Content()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="CreateContentItem">
          <declaration><![CDATA[internal ContentItem CreateContentItem(RoleInfo objItem, int tabId)]]></declaration>
          <documentation>
            <summary>
 This should only run after the Post exists in the data store.
 </summary>
 <returns>The newly created ContentItemID from the data store.</returns>
 <remarks>This is for the first question in the thread. Not for replies or items with ParentID &gt; 0.</remarks></documentation>
          <codeblock>
            <location sl="17" sc="77" el="49" ec="10">Components\Content.cs</location>
            <body hash="cc216ac85af5e7c6d7eaa5f35a86da46"><![CDATA[{
            var typeController = new ContentTypeController();
            string contentTypeName = "DNNCorp_SocialGroup";
            if (objItem.RoleID > 0) {
                contentTypeName = "DNNCorp_SocialGroup";
            }
            var colContentTypes = (from t in typeController.GetContentTypes() where t.ContentType == contentTypeName select t);
            int contentTypeID;

            if (colContentTypes.Count() > 0) {
                var contentType = colContentTypes.Single();
                contentTypeID = contentType == null ? CreateContentType(contentTypeName) : contentType.ContentTypeId;
            } else {
                contentTypeID = CreateContentType(contentTypeName);
            }

            var objContent = new ContentItem {
                Content = objItem.RoleName,
                ContentTypeId = contentTypeID,
                Indexed = false,
                ContentKey = "GroupId=" + objItem.RoleID,
                ModuleID = -1,
                TabID = tabId
            };

            objContent.ContentItemId = Util.GetContentController().AddContentItem(objContent);

            // Add Terms
            //var cntTerm = new Terms();
            //cntTerm.ManageQuestionTerms(objPost, objContent);

            return objContent;
        }]]></body>
          </codeblock>
        </method>
        <method name="CreateContentType">
          <declaration><![CDATA[private static int CreateContentType(string ContentTypeName)]]></declaration>
          <documentation>
            <summary>
 Creates a Content Type (for taxonomy) in the data store.
 </summary>
 <returns>The primary key value of the new ContentType.</returns></documentation>
          <codeblock>
            <location sl="110" sc="70" el="115" ec="10">Components\Content.cs</location>
            <body hash="26492ed356887ac1a2398673aec99a7a"><![CDATA[{
            var typeController = new ContentTypeController();
            var objContentType = new ContentType { ContentType = ContentTypeName };

            return typeController.AddContentType(objContentType);
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteContentItem">
          <declaration><![CDATA[internal void DeleteContentItem(int contentItemID)]]></declaration>
          <documentation>
            <summary>
 This removes a content item associated with a question/thread from the data store. Should run every time an entire thread is deleted.
 </summary>
 <param name="contentItemID"></param></documentation>
          <codeblock>
            <location sl="73" sc="60" el="83" ec="10">Components\Content.cs</location>
            <body hash="cba57c866fc66acaf46dbb9dc6bb2cfc"><![CDATA[{
            if (contentItemID <= Null.NullInteger) return;
            var objContent = Util.GetContentController().GetContentItem(contentItemID);
            if (objContent == null) return;

            // remove any metadata/terms associated first (perhaps we should just rely on ContentItem cascade delete here?)
            //var cntTerms = new Terms();
            //cntTerms.RemoveQuestionTerms(objContent);

            Util.GetContentController().DeleteContentItem(objContent);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetContentTypeID">
          <declaration><![CDATA[internal static int GetContentTypeID(string ContentTypeName)]]></declaration>
          <documentation>
            <summary>
 This is used to determine the ContentTypeID (part of the Core API) based on this module's content type. If the content type doesn't exist yet for the module, it is created.
 </summary>
 <returns>The primary key value (ContentTypeID) from the core API's Content Types table.</returns></documentation>
          <codeblock>
            <location sl="89" sc="70" el="102" ec="10">Components\Content.cs</location>
            <body hash="660e361283c3e0a888414d170d84a26e"><![CDATA[{
            var typeController = new ContentTypeController();
            var colContentTypes = (from t in typeController.GetContentTypes() where t.ContentType == ContentTypeName select t);
            int contentTypeId;

            if (colContentTypes.Count() > 0) {
                var contentType = colContentTypes.Single();
                contentTypeId = contentType == null ? CreateContentType(ContentTypeName) : contentType.ContentTypeId;
            } else {
                contentTypeId = CreateContentType(ContentTypeName);
            }

            return contentTypeId;
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateContentItem">
          <declaration><![CDATA[internal void UpdateContentItem(RoleInfo objItem, int tabId)]]></declaration>
          <documentation>
            <summary>
 This is used to update the content in the ContentItems table. Should be called when a question is updated.
 </summary>
          </documentation>
          <codeblock>
            <location sl="54" sc="70" el="67" ec="10">Components\Content.cs</location>
            <body hash="4e6e1e580f4b46cc2fe2f07532f17607"><![CDATA[{
            ContentItem objContent = null; //Util.GetContentController().;

            if (objContent == null) return;
            objContent.Content = objItem.RoleName;
            objContent.TabID = tabId;
            objContent.ContentKey = "GroupId=" + objItem.RoleID; // we reset this just in case the page changed.

            Util.GetContentController().UpdateContentItem(objContent);

            // Update Terms
            //var cntTerm = new Terms();
            //cntTerm.ManageQuestionTerms(objPost, objContent);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="GroupInfo">
      <declaration><![CDATA[public class GroupInfo : RoleInfo, IPropertyAccess]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public GroupInfo()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="41" sc="9" el="43" ec="10">Components\GroupInfo.cs</location>
            <body hash="8c9da6582f090dd8080dbf0453d86e99"><![CDATA[public GroupInfo() {
        
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[public GroupInfo(RoleInfo roleInfo)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="44" sc="9" el="57" ec="10">Components\GroupInfo.cs</location>
            <body hash="12d454a6e34096838c9fbc77c35f04af"><![CDATA[public GroupInfo(RoleInfo roleInfo) {
            RoleID = roleInfo.RoleID;
            RoleName = roleInfo.RoleName;
            Description = roleInfo.Description;
            PortalID = roleInfo.PortalID;
            SecurityMode = roleInfo.SecurityMode;
            ServiceFee = roleInfo.ServiceFee;
            RSVPCode = roleInfo.RSVPCode;

          



        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="GetString">
          <declaration><![CDATA[private string GetString(string keyName, string defaultValue)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="141" sc="71" el="150" ec="10">Components\GroupInfo.cs</location>
            <body hash="72a5de6c2788ba85bc025e47eb3e38fd"><![CDATA[{
            if (Settings == null) {
                return defaultValue;
            }
            if (Settings.ContainsKey(keyName)) {
                return Settings[keyName];
            } else {
                return defaultValue;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="SetString">
          <declaration><![CDATA[private void SetString(string keyName, string value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="151" sc="62" el="157" ec="10">Components\GroupInfo.cs</location>
            <body hash="2d9578af27b4c982bb4cd99ced17c4d1"><![CDATA[{
            if (Settings.ContainsKey(keyName)) {
                Settings[keyName] = value;
            } else {
                Settings.Add(keyName, value);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="City">
          <declaration><![CDATA[public string City]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="84" sc="17" el="86" ec="14">Components\GroupInfo.cs</location>
            <body hash="7f64bf0630921cd4dcf90b84b6724356"><![CDATA[{
                return GetString("City", string.Empty);
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="87" sc="17" el="89" ec="14">Components\GroupInfo.cs</location>
            <body hash="1d04ccca2f67b48cf3dd79bc1d7d8600"><![CDATA[{
                SetString("City", value);
            }]]></body>
          </codeblock>
        </property>
        <property name="Country">
          <declaration><![CDATA[public string Country]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="102" sc="17" el="104" ec="14">Components\GroupInfo.cs</location>
            <body hash="9efa6fba5eaebe114ab3598745cc8c40"><![CDATA[{
                return GetString("Country", string.Empty);
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="105" sc="17" el="107" ec="14">Components\GroupInfo.cs</location>
            <body hash="f67d43f9ed8a88c51c83088a4310d2af"><![CDATA[{
                SetString("Country",value);
            }]]></body>
          </codeblock>
        </property>
        <property name="Featured">
          <declaration><![CDATA[public bool Featured]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="130" sc="17" el="132" ec="14">Components\GroupInfo.cs</location>
            <body hash="adf30e7ee511c3616367af864cc9d2fc"><![CDATA[{
                return Convert.ToBoolean(GetString("Featured","false"));
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="133" sc="17" el="135" ec="14">Components\GroupInfo.cs</location>
            <body hash="ab75c8405feab7df0b554ac10f078bdc"><![CDATA[{
                SetString("Featured", value.ToString());
            }]]></body>
          </codeblock>
        </property>
        <property name="PostalCode">
          <declaration><![CDATA[public string PostalCode]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="111" sc="17" el="113" ec="14">Components\GroupInfo.cs</location>
            <body hash="0bc89f7e2b5451a4b61c78d32edb59c2"><![CDATA[{
                return GetString("PostalCode", string.Empty);
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="114" sc="17" el="116" ec="14">Components\GroupInfo.cs</location>
            <body hash="4b66eb00a70db10839630da62c63884c"><![CDATA[{
                SetString("PostalCode",value);
            }]]></body>
          </codeblock>
        </property>
        <property name="Region">
          <declaration><![CDATA[public string Region]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="93" sc="17" el="95" ec="14">Components\GroupInfo.cs</location>
            <body hash="57dece14a2812cfe9bcbc8e1bb0ae271"><![CDATA[{
                return GetString("Region", string.Empty);
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="96" sc="17" el="98" ec="14">Components\GroupInfo.cs</location>
            <body hash="3d9e8cfdf6796bed1a46230d675d7645"><![CDATA[{
                SetString("Region",value);
            }]]></body>
          </codeblock>
        </property>
        <property name="Street">
          <declaration><![CDATA[public string Street]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="76" sc="17" el="78" ec="14">Components\GroupInfo.cs</location>
            <body hash="a0067b04ab9529468ecc51a5007f2338"><![CDATA[{
                return GetString("Street", string.Empty);
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="79" sc="17" el="81" ec="14">Components\GroupInfo.cs</location>
            <body hash="1f9a2e88060785675ccef9863ff83167"><![CDATA[{
                SetString("Street",value);
            }]]></body>
          </codeblock>
        </property>
        <property name="Website">
          <declaration><![CDATA[public string Website]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="120" sc="17" el="122" ec="14">Components\GroupInfo.cs</location>
            <body hash="69df8ec519bffdcb61b4d6abaf9d54c0"><![CDATA[{
                return GetString("Website", string.Empty);
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="123" sc="17" el="125" ec="14">Components\GroupInfo.cs</location>
            <body hash="b3e3fa162797c771787142eb301832a1"><![CDATA[{
                SetString("Website",value);
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="DotNetNuke.Modules.Groups">
    <class name="Create">
      <declaration><![CDATA[public class Create : GroupsModuleBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public Create()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="Cancel_Click">
          <declaration><![CDATA[private void Cancel_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="45" sc="9" el="47" ec="10">Create.ascx.cs</location>
            <body hash="5c56ce19f7dfcf8f43c08ab1b99dfb6b"><![CDATA[{
            Response.Redirect(ModuleContext.NavigateUrl(TabId, string.Empty, false, null));
        }]]></body>
          </codeblock>
        </method>
        <method name="Create_Click">
          <declaration><![CDATA[private void Create_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="49" sc="9" el="144" ec="10">Create.ascx.cs</location>
            <body hash="da4bc62cb92c986a19ae7025e5b11fbf"><![CDATA[{
            RoleController roleController = new RoleController();
            Security.PortalSecurity ps = new Security.PortalSecurity();
            txtGroupName.Text = ps.InputFilter(txtGroupName.Text, Security.PortalSecurity.FilterFlag.NoScripting);
            txtGroupName.Text = ps.InputFilter(txtGroupName.Text, Security.PortalSecurity.FilterFlag.NoMarkup);

            txtDescription.Text = ps.InputFilter(txtDescription.Text, Security.PortalSecurity.FilterFlag.NoScripting);
            txtDescription.Text = ps.InputFilter(txtDescription.Text, Security.PortalSecurity.FilterFlag.NoMarkup);
            if (roleController.GetRoleByName(PortalId, txtGroupName.Text) != null)
            {
                reqGroupName.Visible = true;
                return;
            }
            List<RoleInfo> modRoles = new List<RoleInfo>();
            foreach (ModulePermissionInfo modulePermissionInfo in ModulePermissionController.GetModulePermissions(ModuleId, TabId))
            {
                if (modulePermissionInfo.PermissionKey == "MODGROUP" && modulePermissionInfo.AllowAccess)
                {
                    modRoles.Add(roleController.GetRole(modulePermissionInfo.RoleID, PortalId));
                }
            }
            RoleInfo roleInfo = new RoleInfo()
            {
                PortalID = PortalId,
                RoleName = txtGroupName.Text,
                Description = txtDescription.Text,
                SecurityMode = SecurityMode.SocialGroup,
                Status = RoleStatus.Approved,
                IsPublic = rdAccessTypePublic.Checked
            };
            var userRoleStatus = RoleStatus.Pending;
            if (GroupModerationEnabled)
            {
                roleInfo.Status = RoleStatus.Pending;
                userRoleStatus = RoleStatus.Pending;
            }
            else
            {
                userRoleStatus = RoleStatus.Approved;
            }

            var objModulePermissions = new ModulePermissionCollection(CBO.FillCollection(DataProvider.Instance().GetModulePermissionsByModuleID(ModuleId, -1), typeof(ModulePermissionInfo)));
            if (ModulePermissionController.HasModulePermission(objModulePermissions, "MODGROUP"))
            {
                roleInfo.Status = RoleStatus.Approved;
                userRoleStatus = RoleStatus.Approved;
            }
            roleInfo.RoleGroupID = DefaultRoleGroupId;

            roleInfo.RoleID = roleController.AddRole(roleInfo);
            roleInfo = roleController.GetRole(roleInfo.RoleID, PortalId);
            roleInfo.Settings.Add("URL", Globals.NavigateURL(GroupViewTabId, "", new String[] { "groupid=" + roleInfo.RoleID.ToString() }));
            roleInfo.Settings.Add("GroupCreatorName", UserInfo.DisplayName);
            roleInfo.Settings.Add("ReviewMembers", chkMemberApproved.Checked.ToString());

            TestableRoleController.Instance.UpdateRoleSettings(roleInfo, true);
            if (inpFile.PostedFile.ContentLength > 0)
            {
                IFileManager _fileManager = FileManager.Instance;
                IFolderManager _folderManager = FolderManager.Instance;
                var rootFolderPath = PathUtils.Instance.FormatFolderPath(PortalSettings.HomeDirectory);

                IFolderInfo groupFolder = _folderManager.GetFolder(PortalSettings.PortalId, "Groups/" + roleInfo.RoleID);
                if (groupFolder == null)
                {
                    groupFolder = _folderManager.AddFolder(PortalSettings.PortalId, "Groups/" + roleInfo.RoleID);
                }
                if (groupFolder != null)
                {
                    var fileName = Path.GetFileName(inpFile.PostedFile.FileName);
                    var fileInfo = _fileManager.AddFile(groupFolder, fileName, inpFile.PostedFile.InputStream, true);
                    roleInfo.IconFile = "FileID=" + fileInfo.FileId;
                    roleController.UpdateRole(roleInfo);
                }
            }

            Components.Notifications notifications = new Components.Notifications();


            roleController.AddUserRole(PortalId, UserId, roleInfo.RoleID, userRoleStatus, true, Null.NullDate, Null.NullDate);
            if (roleInfo.Status == RoleStatus.Pending)
            {
                //Send notification to Group Moderators to approve/reject group.
                notifications.AddGroupNotification(Constants.GroupPendingNotification, GroupViewTabId, ModuleId, roleInfo, UserInfo, modRoles);
            }
            else
            {
                //Send notification to Group Moderators informing of new group.
                notifications.AddGroupNotification(Constants.GroupCreatedNotification, GroupViewTabId, ModuleId, roleInfo, UserInfo, modRoles);

                //Add entry to journal.
                GroupUtilities.CreateJournalEntry(roleInfo, UserInfo);
            }

            Response.Redirect(Globals.NavigateURL(GroupViewTabId, "", new String[] { "groupid=" + roleInfo.RoleID.ToString() }));
        }]]></body>
          </codeblock>
        </method>
        <method name="InitializeComponent">
          <declaration><![CDATA[private void InitializeComponent()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="33" sc="9" el="37" ec="10">Create.ascx.cs</location>
            <body hash="388f7abf98a815b2bbe1287320e9c3b2"><![CDATA[{
            Load += Page_Load;
            btnCreate.Click += Create_Click;
            btnCancel.Click += Cancel_Click;
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="27" sc="9" el="30" ec="10">Create.ascx.cs</location>
            <body hash="e6e53dfb76749bfeaf496967e2ea1d91"><![CDATA[{
            InitializeComponent();
            base.OnInit(e);
        }]]></body>
          </codeblock>
        </method>
        <method name="Page_Load">
          <declaration><![CDATA[protected void Page_Load(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="41" sc="9" el="43" ec="10">Create.ascx.cs</location>
            <body hash="2f4103673a7b2b0e32bbdd9997603914"><![CDATA[{

        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="btnCancel">
          <declaration><![CDATA[protected LinkButton btnCancel;]]></declaration>
          <documentation>
            <summary>
 btnCancel control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="btnCreate">
          <declaration><![CDATA[protected LinkButton btnCreate;]]></declaration>
          <documentation>
            <summary>
 btnCreate control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="chkMemberApproved">
          <declaration><![CDATA[protected CheckBox chkMemberApproved;]]></declaration>
          <documentation>
            <summary>
 chkMemberApproved control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="inpFile">
          <declaration><![CDATA[protected FileUpload inpFile;]]></declaration>
          <documentation>
            <summary>
 inpFile control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="rdAccessTypePrivate">
          <declaration><![CDATA[protected RadioButton rdAccessTypePrivate;]]></declaration>
          <documentation>
            <summary>
 rdAccessTypePrivate control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="rdAccessTypePublic">
          <declaration><![CDATA[protected RadioButton rdAccessTypePublic;]]></declaration>
          <documentation>
            <summary>
 rdAccessTypePublic control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="reqGroupName">
          <declaration><![CDATA[protected Label reqGroupName;]]></declaration>
          <documentation>
            <summary>
 reqGroupName control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="RequiredFieldValidator1">
          <declaration><![CDATA[protected RequiredFieldValidator RequiredFieldValidator1;]]></declaration>
          <documentation>
            <summary>
 RequiredFieldValidator1 control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="txtDescription">
          <declaration><![CDATA[protected TextBox txtDescription;]]></declaration>
          <documentation>
            <summary>
 txtDescription control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="txtGroupName">
          <declaration><![CDATA[protected TextBox txtGroupName;]]></declaration>
          <documentation>
            <summary>
 txtGroupName control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="GroupEdit">
      <declaration><![CDATA[public class GroupEdit : GroupsModuleBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public GroupEdit()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="Cancel_Click">
          <declaration><![CDATA[private void Cancel_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="69" sc="9" el="71" ec="10">GroupEdit.ascx.cs</location>
            <body hash="c59cb00cc9523dceee7a4156903e2e87"><![CDATA[{
            Response.Redirect(ModuleContext.NavigateUrl(TabId, "", false, new String[] { "groupid=" + GroupId.ToString() }));
        }]]></body>
          </codeblock>
        </method>
        <method name="InitializeComponent">
          <declaration><![CDATA[private void InitializeComponent()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="25" sc="9" el="29" ec="10">GroupEdit.ascx.cs</location>
            <body hash="a09b2a1c2d0582ab9273f506b4118667"><![CDATA[{
            Load += Page_Load;
            btnSave.Click += Save_Click;
            btnCancel.Click += Cancel_Click;
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="19" sc="9" el="22" ec="10">GroupEdit.ascx.cs</location>
            <body hash="e6e53dfb76749bfeaf496967e2ea1d91"><![CDATA[{
            InitializeComponent();
            base.OnInit(e);
        }]]></body>
          </codeblock>
        </method>
        <method name="Page_Load">
          <declaration><![CDATA[protected void Page_Load(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="33" sc="9" el="67" ec="10">GroupEdit.ascx.cs</location>
            <body hash="ad7fb6950a9db56c6c26d0e988f0f727"><![CDATA[{
            imgGroup.Src = Page.ResolveUrl("~/DesktopModules/SocialGroups/Images/") + "sample-group-profile.jpg";
            if (!Page.IsPostBack && GroupId > 0)
            {
                RoleController roleController = new RoleController();
                var roleInfo = roleController.GetRole(GroupId, PortalId);

                if (roleInfo != null)
                {
                    if (!UserInfo.IsInRole(PortalSettings.AdministratorRoleName))
                    {
                        if (roleInfo.CreatedByUserID != UserInfo.UserID)
                        {
                            Response.Redirect(ModuleContext.NavigateUrl(TabId, "", false, new String[] { "groupid=" + GroupId.ToString() }));
                        }
                    }
                    
                    litGroupName.Text = roleInfo.RoleName;
                    txtDescription.Text = roleInfo.Description;
                    if (roleInfo.IsPublic)
                    {
                        rdAccessTypePublic.Checked = true;
                    } else
                    {
                        rdAccessTypePrivate.Checked = true;
                    }
                    if (roleInfo.Settings.ContainsKey("ReviewMembers"))
                    {
                        chkMemberApproved.Checked = Convert.ToBoolean(roleInfo.Settings["ReviewMembers"].ToString());
                    }
                    imgGroup.Src = roleInfo.PhotoURL;
                }
                
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="Save_Click">
          <declaration><![CDATA[private void Save_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="74" sc="9" el="126" ec="10">GroupEdit.ascx.cs</location>
            <body hash="d6a049d302c1fbedabd46508c926d8b7"><![CDATA[{
            if (GroupId > 0)
            {
                RoleController roleController = new RoleController();
                Security.PortalSecurity ps = new Security.PortalSecurity();
                txtDescription.Text = ps.InputFilter(txtDescription.Text, Security.PortalSecurity.FilterFlag.NoScripting);
                txtDescription.Text = ps.InputFilter(txtDescription.Text, Security.PortalSecurity.FilterFlag.NoMarkup);
                var roleInfo = roleController.GetRole(GroupId, PortalId);
                if (roleInfo != null)
                {
                    roleInfo.Description = txtDescription.Text;
                    roleInfo.IsPublic = rdAccessTypePublic.Checked;
                    if (roleInfo.Settings.ContainsKey("URL"))
                    {
                        roleInfo.Settings["URL"] = Globals.NavigateURL(TabId, "", new String[] { "groupid=" + roleInfo.RoleID.ToString() });
                    } else
                    {
                        roleInfo.Settings.Add("URL", Globals.NavigateURL(TabId, "", new String[] { "groupid=" + roleInfo.RoleID.ToString() }));
                    }
                    if (roleInfo.Settings.ContainsKey("ReviewMembers"))
                    {
                        roleInfo.Settings["ReviewMembers"] = chkMemberApproved.Checked.ToString();
                    } else
                    {
                        roleInfo.Settings.Add("ReviewMembers", chkMemberApproved.Checked.ToString());
                    }
                    TestableRoleController.Instance.UpdateRoleSettings(roleInfo, true);
                    roleController.UpdateRole(roleInfo);

                    if (inpFile.PostedFile.ContentLength > 0)
                    {
                        IFileManager _fileManager = FileManager.Instance;
                        IFolderManager _folderManager = FolderManager.Instance;
                        var rootFolderPath = PathUtils.Instance.FormatFolderPath(PortalSettings.HomeDirectory);

                        IFolderInfo groupFolder = _folderManager.GetFolder(PortalSettings.PortalId, "Groups/" + roleInfo.RoleID);
                        if (groupFolder == null)
                        {
                            groupFolder = _folderManager.AddFolder(PortalSettings.PortalId, "Groups/" + roleInfo.RoleID);
                        }
                        if (groupFolder != null)
                        {
                            var fileName = Path.GetFileName(inpFile.PostedFile.FileName);
                            var fileInfo = _fileManager.AddFile(groupFolder, fileName, inpFile.PostedFile.InputStream, true);
                            roleInfo.IconFile = "FileID=" + fileInfo.FileId;
                            roleController.UpdateRole(roleInfo);
                        }
                    }

                }
                Response.Redirect(Globals.NavigateURL(TabId, "", new String[] { "groupid=" + GroupId.ToString() }));
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="btnCancel">
          <declaration><![CDATA[protected LinkButton btnCancel;]]></declaration>
          <documentation>
            <summary>
 btnCancel control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="btnSave">
          <declaration><![CDATA[protected LinkButton btnSave;]]></declaration>
          <documentation>
            <summary>
 btnSave control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="chkMemberApproved">
          <declaration><![CDATA[protected CheckBox chkMemberApproved;]]></declaration>
          <documentation>
            <summary>
 chkMemberApproved control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="imgGroup">
          <declaration><![CDATA[protected HtmlImage imgGroup;]]></declaration>
          <documentation>
            <summary>
 imgGroup control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="inpFile">
          <declaration><![CDATA[protected FileUpload inpFile;]]></declaration>
          <documentation>
            <summary>
 inpFile control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="litGroupName">
          <declaration><![CDATA[protected Literal litGroupName;]]></declaration>
          <documentation>
            <summary>
 litGroupName control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="rdAccessTypePrivate">
          <declaration><![CDATA[protected RadioButton rdAccessTypePrivate;]]></declaration>
          <documentation>
            <summary>
 rdAccessTypePrivate control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="rdAccessTypePublic">
          <declaration><![CDATA[protected RadioButton rdAccessTypePublic;]]></declaration>
          <documentation>
            <summary>
 rdAccessTypePublic control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="txtDescription">
          <declaration><![CDATA[protected TextBox txtDescription;]]></declaration>
          <documentation>
            <summary>
 txtDescription control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="GroupsModuleBase">
      <declaration><![CDATA[public class GroupsModuleBase : PortalModuleBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public GroupsModuleBase()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="GetCreateUrl">
          <declaration><![CDATA[public string GetCreateUrl()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="156" sc="38" el="158" ec="10">GroupsModuleBase.cs</location>
            <body hash="bce0344d72d3e8e037cd4c72313af4f8"><![CDATA[{
            return ModuleContext.EditUrl("Create"); //.NavigateUrl(GroupCreateTabId,"",true,null);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetEditUrl">
          <declaration><![CDATA[public string GetEditUrl()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="160" sc="9" el="162" ec="10">GroupsModuleBase.cs</location>
            <body hash="fb3ad7ea82b2d5aeb3c2529be4f73adb"><![CDATA[{
            return ModuleContext.EditUrl("GroupId", GroupId.ToString(), "Edit");
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="CanCreate">
          <declaration><![CDATA[public bool CanCreate]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="141" sc="13" el="150" ec="14">GroupsModuleBase.cs</location>
            <body hash="bac228a28cc412e490900471cde915af"><![CDATA[{
                if (Request.IsAuthenticated)
                {
                    if (UserInfo.IsSuperUser) {
                        return true;
                    }
                    return ModulePermissionController.HasModulePermission(this.ModuleConfiguration.ModulePermissions, "CREATEGROUP");
                }
                return false;
            }]]></body>
          </codeblock>
        </property>
        <property name="DefaultGroupMode">
          <declaration><![CDATA[public string DefaultGroupMode]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="123" sc="13" el="128" ec="14">GroupsModuleBase.cs</location>
            <body hash="474b34749f42814ee56547604da3d927"><![CDATA[{
                if (Settings.ContainsKey(Constants.DefautlGroupViewMode)) {
                    return Settings[Constants.DefautlGroupViewMode].ToString();
                }
                return "";
            }]]></body>
          </codeblock>
        </property>
        <property name="DefaultRoleGroupId">
          <declaration><![CDATA[public int DefaultRoleGroupId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="74" sc="13" el="79" ec="14">GroupsModuleBase.cs</location>
            <body hash="0eca4550d1e3d0575b67f9778f8883c1"><![CDATA[{
                if (Settings.ContainsKey(Constants.DefaultRoleGroupSetting)) {
                    return Convert.ToInt32(Settings[Constants.DefaultRoleGroupSetting].ToString());
                }
                return -1;
            }]]></body>
          </codeblock>
        </property>
        <property name="GroupId">
          <declaration><![CDATA[public int GroupId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="61" sc="17" el="70" ec="14">GroupsModuleBase.cs</location>
            <body hash="2068691a0ec25162bfed1220004b9102"><![CDATA[{
                int groupId = -1;
                if (string.IsNullOrEmpty(Request.QueryString["GroupId"])) {
                    return groupId;
                }
                if (int.TryParse(Request.QueryString["GroupId"], out groupId)) {
                    return groupId;
                }
                return -1;
            }]]></body>
          </codeblock>
        </property>
        <property name="GroupListTabId">
          <declaration><![CDATA[public int GroupListTabId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="83" sc="13" el="88" ec="14">GroupsModuleBase.cs</location>
            <body hash="0dbc14a654113b9a53e81be3c82ba275"><![CDATA[{
                if (Settings.ContainsKey(Constants.GroupListPage)) {
                    return Convert.ToInt32(Settings[Constants.GroupListPage].ToString());
                }
                return TabId;
            }]]></body>
          </codeblock>
        </property>
        <property name="GroupListTemplate">
          <declaration><![CDATA[public string GroupListTemplate]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="111" sc="17" el="119" ec="14">GroupsModuleBase.cs</location>
            <body hash="a7975ff58d852bba1164f7db4d1c354b"><![CDATA[{
                string template = LocalizeString("GroupListTemplate.Text");
                if (Settings.ContainsKey(Constants.GroupListTemplate)) {
                    if (!string.IsNullOrEmpty(Settings[Constants.GroupListTemplate].ToString())) {
                        template = Settings[Constants.GroupListTemplate].ToString();
                    }
                }
                return template;
            }]]></body>
          </codeblock>
        </property>
        <property name="GroupModerationEnabled">
          <declaration><![CDATA[public bool GroupModerationEnabled]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="132" sc="13" el="137" ec="14">GroupsModuleBase.cs</location>
            <body hash="c69cc33553c67e8d125c6448ee3c4dc3"><![CDATA[{
                if (Settings.ContainsKey(Constants.GroupModerationEnabled)) {
                    return Convert.ToBoolean(Settings[Constants.GroupModerationEnabled].ToString());
                }
                return false;
            }]]></body>
          </codeblock>
        </property>
        <property name="GroupViewTabId">
          <declaration><![CDATA[public int GroupViewTabId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="92" sc="13" el="97" ec="14">GroupsModuleBase.cs</location>
            <body hash="36f4bf23db09185c60af482404fbcf76"><![CDATA[{
                if (Settings.ContainsKey(Constants.GroupViewPage)) {
                    return Convert.ToInt32(Settings[Constants.GroupViewPage].ToString());
                }
                return TabId;
            }]]></body>
          </codeblock>
        </property>
        <property name="GroupViewTemplate">
          <declaration><![CDATA[public string GroupViewTemplate]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="100" sc="17" el="108" ec="14">GroupsModuleBase.cs</location>
            <body hash="83235e695821d8caf2088372ac19a07c"><![CDATA[{
                string template = LocalizeString("GroupViewTemplate.Text");
                if (Settings.ContainsKey(Constants.GroupViewTemplate)) {
                    if (!string.IsNullOrEmpty(Settings[Constants.GroupViewTemplate].ToString())) {
                        template = Settings[Constants.GroupViewTemplate].ToString();
                    }
                }
                return template;
            }]]></body>
          </codeblock>
        </property>
        <property name="LoadView">
          <declaration><![CDATA[public GroupsModuleBase.GroupMode LoadView]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="44" sc="13" el="58" ec="14">GroupsModuleBase.cs</location>
            <body hash="0214517b4268b96e7c3ff127ae177f78"><![CDATA[{
                if (Settings.ContainsKey(Constants.GroupLoadView)) 
                {
                     switch (Settings[Constants.GroupLoadView].ToString()) 
                     {
                         case "List":
                             return GroupMode.List;
                         case "View":
                             return GroupMode.View;
                         default:
                             return GroupMode.Setup;
                     }
             }
                return GroupMode.Setup;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="GroupsSettingsBase">
      <declaration><![CDATA[public class GroupsSettingsBase : ModuleSettingsBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public GroupsSettingsBase()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="GroupView">
      <declaration><![CDATA[public class GroupView : GroupsModuleBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public GroupView()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="Page_Load">
          <declaration><![CDATA[protected void Page_Load(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="19" sc="62" el="56" ec="10">GroupView.ascx.cs</location>
            <body hash="5cdac6b7be826ade39e593626f4f300f"><![CDATA[{

            RoleInfo role = TestableRoleController.Instance.GetRole(PortalId, r => r.SecurityMode != SecurityMode.SecurityRole && r.RoleID == GroupId);
            if (role == null && GroupId > 0) {
                UI.Skins.Skin.AddModuleMessage(this, Localization.GetString("GroupIdNotFound", Constants.SharedResourcesPath), ModuleMessage.ModuleMessageType.YellowWarning);
            }

            if (role == null && (UserInfo.IsInRole(PortalSettings.AdministratorRoleName) || UserInfo.IsSuperUser)) {
                role = new RoleInfo();
                role.RoleID = -1;
                role.RoleName = Localization.GetString("Sample_RoleName", LocalResourceFile);
                role.Description = Localization.GetString("Sample_RoleDescription", LocalResourceFile);

            }
            if (role == null) {
                litOutput.Text = string.Empty;
            } else {
                var resxPath = Constants.SharedResourcesPath;
                var template = GroupViewTemplate;
                template = template.Replace("{resx:posts}", Localization.GetString("posts", resxPath));
                template = template.Replace("{resx:members}", Localization.GetString("members", resxPath));
                template = template.Replace("{resx:photos}", Localization.GetString("photos", resxPath));
                template = template.Replace("{resx:documents}", Localization.GetString("documents", resxPath));

                template = template.Replace("{resx:Join}", Localization.GetString("Join", resxPath));
                template = template.Replace("{resx:JoinGroup}", Localization.GetString("JoinGroup", resxPath));
                template = template.Replace("{resx:Pending}", Localization.GetString("Pending", resxPath));
                template = template.Replace("{resx:LeaveGroup}", Localization.GetString("LeaveGroup", resxPath));
                template = template.Replace("{resx:EditGroup}", Localization.GetString("EditGroup", resxPath));
                var groupParser = new Components.GroupViewParser(PortalSettings, role, UserInfo, template, TabId);
                groupParser.GroupEditUrl = GetEditUrl();
                litOutput.Text = groupParser.ParseView();
                
            }
            

            
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="litOutput">
          <declaration><![CDATA[protected Literal litOutput;]]></declaration>
          <documentation>
            <summary>
 litOutput control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="List">
      <declaration><![CDATA[public class List : GroupsModuleBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public List()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="Page_Load">
          <declaration><![CDATA[protected void Page_Load(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="13" sc="62" el="23" ec="10">List.ascx.cs</location>
            <body hash="0c0192f5982faf2c7a380c57cf4db8c3"><![CDATA[{
            ServicesFramework.Instance.RequestAjaxAntiForgerySupport();
            ctlGroupList.GroupViewTabId = GroupViewTabId;
            ctlGroupList.RoleGroupId = DefaultRoleGroupId;
            ctlGroupList.PageSize = 20;
            ctlGroupList.TabId = TabId;
            if (!String.IsNullOrEmpty(GroupListTemplate)) {
                ctlGroupList.ItemTemplate = GroupListTemplate;
            }
           
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="ctlGroupList">
          <declaration><![CDATA[protected GroupListControl ctlGroupList;]]></declaration>
          <documentation>
            <summary>
 ctlGroupList control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="ListSettings">
      <declaration><![CDATA[public class ListSettings : GroupsSettingsBase]]></declaration>
      <documentation>-----------------------------------------------------------------------------
 <summary>
 The Settings class manages Module Settings
 </summary>
 -----------------------------------------------------------------------------</documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public ListSettings()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="BindGroups">
          <declaration><![CDATA[private void BindGroups()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="118" sc="35" el="126" ec="10">ListSettings.ascx.cs</location>
            <body hash="7c0869db12dc259df43446b04c0ce0f7"><![CDATA[{
            var arrGroups = RoleController.GetRoleGroups(PortalId);

            drpRoleGroup.Items.Add(new ListItem(Localization.GetString("GlobalRoles"), "-1"));

            foreach (RoleGroupInfo roleGroup in arrGroups) {
                drpRoleGroup.Items.Add(new ListItem(roleGroup.RoleGroupName, roleGroup.RoleGroupID.ToString()));
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="BindPages">
          <declaration><![CDATA[private void BindPages()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="127" sc="34" el="156" ec="14">ListSettings.ascx.cs</location>
            <body hash="6995fa956746352ed15414e38631542d"><![CDATA[{
            ModuleController mc = new ModuleController();
            TabController tc = new TabController();
            TabInfo tabInfo;
            foreach (ModuleInfo moduleInfo in mc.GetModules(PortalId)) {

                if (moduleInfo.DesktopModule.ModuleName.Contains("Social Groups") && moduleInfo.IsDeleted == false) {
                    tabInfo = tc.GetTab(moduleInfo.TabID, PortalId, false);
                    if (tabInfo != null) {
                        if (tabInfo.IsDeleted == false) {

                            foreach (KeyValuePair<string, ModuleDefinitionInfo> def in moduleInfo.DesktopModule.ModuleDefinitions) {
                                if (moduleInfo.ModuleDefinition.FriendlyName == def.Key) {
                                    
                                        if (drpGroupViewPage.Items.FindByValue(tabInfo.TabID.ToString()) == null) {
                                            drpGroupViewPage.Items.Add(new ListItem(tabInfo.TabName + " - " + def.Key, tabInfo.TabID.ToString()));
                                        }
                                                             

                                    }

                                }
                            }



                        }
                    }
                }
            }]]></body>
          </codeblock>
        </method>
        <method name="LoadSettings">
          <declaration><![CDATA[public override void LoadSettings()]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 LoadSettings loads the settings from the Database and displays them
 </summary>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="59" sc="9" el="92" ec="10">ListSettings.ascx.cs</location>
            <body hash="9b819511ddd79faa8b81412ec624c220"><![CDATA[{
            try
            {
                if (Page.IsPostBack == false)
                {
                    BindGroups();
                    BindPages();
                    if (Settings.ContainsKey(Constants.DefaultRoleGroupSetting)) {
                        drpRoleGroup.SelectedIndex = drpRoleGroup.Items.IndexOf(drpRoleGroup.Items.FindByValue(Settings[Constants.DefaultRoleGroupSetting].ToString()));
                    }
                    if (Settings.ContainsKey(Constants.GroupViewPage)) {
                        drpGroupViewPage.SelectedIndex = drpGroupViewPage.Items.IndexOf(drpGroupViewPage.Items.FindByValue(Settings[Constants.GroupViewPage].ToString()));
                    }
                    if (Settings.ContainsKey(Constants.GroupListTemplate)) {
                        txtListTemplate.Text = Settings[Constants.GroupListTemplate].ToString();
                    }
                    if (Settings.ContainsKey(Constants.GroupViewTemplate))
                    {
                        txtViewTemplate.Text = Settings[Constants.GroupViewTemplate].ToString();
                    }
                    if (Settings.ContainsKey(Constants.GroupModerationEnabled)) {
                        chkGroupModeration.Checked = Convert.ToBoolean(Settings[Constants.GroupModerationEnabled].ToString());
                    }
                    if (Settings.ContainsKey(Constants.GroupLoadView)) {
                        drpViewMode.SelectedIndex = drpViewMode.Items.IndexOf(drpViewMode.Items.FindByValue(Settings[Constants.GroupLoadView].ToString()));
                    }
                    
                }
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateSettings">
          <declaration><![CDATA[public override void UpdateSettings()]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 UpdateSettings saves the modified settings to the Database
 </summary>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="100" sc="9" el="115" ec="10">ListSettings.ascx.cs</location>
            <body hash="9062faed51954e16afe511050201831c"><![CDATA[{
            try
            {
                var modules = new ModuleController();
                modules.UpdateTabModuleSetting(this.TabModuleId, Constants.DefaultRoleGroupSetting, drpRoleGroup.SelectedItem.Value);
                modules.UpdateTabModuleSetting(this.TabModuleId, Constants.GroupViewPage, drpGroupViewPage.SelectedItem.Value);
                modules.UpdateTabModuleSetting(this.TabModuleId, Constants.GroupListTemplate, txtListTemplate.Text);
                modules.UpdateTabModuleSetting(this.TabModuleId, Constants.GroupViewTemplate, txtViewTemplate.Text);
                modules.UpdateTabModuleSetting(this.TabModuleId, Constants.GroupModerationEnabled, chkGroupModeration.Checked.ToString());
                modules.UpdateTabModuleSetting(this.TabModuleId, Constants.GroupLoadView, drpViewMode.SelectedItem.Value);
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="chkGroupModeration">
          <declaration><![CDATA[protected CheckBox chkGroupModeration;]]></declaration>
          <documentation>
            <summary>
 chkGroupModeration control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="drpGroupViewPage">
          <declaration><![CDATA[protected DropDownList drpGroupViewPage;]]></declaration>
          <documentation>
            <summary>
 drpGroupViewPage control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="drpRoleGroup">
          <declaration><![CDATA[protected DropDownList drpRoleGroup;]]></declaration>
          <documentation>
            <summary>
 drpRoleGroup control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="drpViewMode">
          <declaration><![CDATA[protected DropDownList drpViewMode;]]></declaration>
          <documentation>
            <summary>
 drpViewMode control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="txtListTemplate">
          <declaration><![CDATA[protected TextBox txtListTemplate;]]></declaration>
          <documentation>
            <summary>
 txtListTemplate control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
        <field name="txtViewTemplate">
          <declaration><![CDATA[protected TextBox txtViewTemplate;]]></declaration>
          <documentation>
            <summary>
 txtViewTemplate control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="Loader">
      <declaration><![CDATA[public class Loader : GroupsModuleBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public Loader()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="Page_Load">
          <declaration><![CDATA[protected void Page_Load(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="11" sc="62" el="28" ec="10">Loader.ascx.cs</location>
            <body hash="9e7753eb10ed6a6070f55e405c515c37"><![CDATA[{
            string path = Constants.ModulePath;
            switch (LoadView) {
                case GroupMode.Setup:
                    path += "Setup.ascx";
                    break;
                case GroupMode.List:
                    path += "List.ascx";
                    break;
                case GroupMode.View:
                    path += "GroupView.ascx";
                    break;
            }
            GroupsModuleBase ctl = new GroupsModuleBase();
            ctl = (GroupsModuleBase)LoadControl(path);
            ctl.ModuleConfiguration = this.ModuleConfiguration;
            plhContent.Controls.Add(ctl);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="plhContent">
          <declaration><![CDATA[protected PlaceHolder plhContent;]]></declaration>
          <documentation>
            <summary>
 plhContent control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="ModerationServiceController">
      <declaration><![CDATA[public class ModerationServiceController : DnnController]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public ModerationServiceController()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="ApproveGroup">
          <declaration><![CDATA[public ActionResult ApproveGroup(int notificationId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="54" sc="9" el="90" ec="10">GroupServices.cs</location>
            <body hash="49c8f1aafe2b5c571ee3b00496f9abc4"><![CDATA[{
            try
            {
                var recipient = InternalMessagingController.Instance.GetMessageRecipient(notificationId, UserInfo.UserID);
                if (recipient == null) return Json(new { Result = "error" });

                var notification = NotificationsController.Instance.GetNotification(notificationId);
                ParseKey(notification.Context);
                if (roleInfo == null)
                {
                    return Json(new { Result = "error" });
                }
                if (!IsMod())
                {
                    return Json(new { Result = "access denied" });
                }
                var roleController = new RoleController();
                roleInfo.Status = RoleStatus.Approved;
                roleController.UpdateRole(roleInfo);
                var roleCreator = UserController.GetUserById(PortalSettings.PortalId, roleInfo.CreatedByUserID);
                //Update the original creator's role
                roleController.UpdateUserRole(PortalSettings.PortalId, roleCreator.UserID, roleInfo.RoleID, RoleStatus.Approved, true, false);
                GroupUtilities.CreateJournalEntry(roleInfo, roleCreator);

                var notifications = new Notifications();
                var siteAdmin = UserController.GetUserById(PortalSettings.PortalId, PortalSettings.AdministratorId);
                notifications.AddGroupNotification(Constants.GroupApprovedNotification, TabId, ModuleId, roleInfo, siteAdmin, new List<RoleInfo> { roleInfo });
                NotificationsController.Instance.DeleteAllNotificationRecipients(notificationId);

                return Json(new { Result = "success" });
            }
            catch (Exception exc)
            {
                DnnLog.Error(exc);
                return Json(new { Result = "error" });
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="ApproveMember">
          <declaration><![CDATA[public ActionResult ApproveMember(int notificationId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="205" sc="9" el="241" ec="10">GroupServices.cs</location>
            <body hash="2dd3135d89d5e642b54a42bce53052ec"><![CDATA[{
            try
            {
                var recipient = InternalMessagingController.Instance.GetMessageRecipient(notificationId, UserInfo.UserID);
                if (recipient == null) return Json(new { Result = "error" });

                var notification = NotificationsController.Instance.GetNotification(notificationId);
                ParseKey(notification.Context);
                if (MemberId <= 0) return Json(new { Result = "error" });

                if (roleInfo == null) return Json(new { Result = "error" });

                var member = UserController.GetUserById(PortalSettings.PortalId, MemberId);

                

                if (member != null)
                {
                    var roleController = new RoleController();
                    var memberRoleInfo = roleController.GetUserRole(PortalSettings.PortalId, MemberId, roleInfo.RoleID);
                    memberRoleInfo.Status = RoleStatus.Approved;
                    roleController.UpdateUserRole(PortalSettings.PortalId, MemberId, roleInfo.RoleID, RoleStatus.Approved, false, false);
                    
                    var notifications = new Notifications();
                    var groupOwner = UserController.GetUserById(PortalSettings.PortalId, roleInfo.CreatedByUserID);
                    notifications.AddMemberNotification(Constants.MemberApprovedNotification, TabId, ModuleId, roleInfo, groupOwner, member);
                    NotificationsController.Instance.DeleteAllNotificationRecipients(notificationId);

                    return Json(new { Result = "success" });
                }
            } catch (Exception exc)
            {
                DnnLog.Error(exc);
            }

            return Json(new { Result = "error" });
        }]]></body>
          </codeblock>
        </method>
        <method name="IsMod">
          <declaration><![CDATA[public bool IsMod()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="305" sc="9" el="308" ec="10">GroupServices.cs</location>
            <body hash="4c270446c0ceaf3b5ca5e6100e565d8d"><![CDATA[{
            var objModulePermissions = new ModulePermissionCollection(CBO.FillCollection(DataProvider.Instance().GetModulePermissionsByModuleID(ModuleId, -1), typeof(ModulePermissionInfo)));
            return ModulePermissionController.HasModulePermission(objModulePermissions, "MODGROUP");
        }]]></body>
          </codeblock>
        </method>
        <method name="JoinGroup">
          <declaration><![CDATA[public ActionResult JoinGroup(int roleId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="133" sc="9" el="167" ec="10">GroupServices.cs</location>
            <body hash="a4ee175657e27c70ad78fb7ba50959b8"><![CDATA[{
            try
            {
                if (UserInfo.UserID >= 0 && roleId > 0)
                {
                    var roleController = new RoleController();
                    roleInfo = roleController.GetRole(roleId, PortalSettings.PortalId);
                    if (roleInfo != null)
                    {
                        var requireApproval = Convert.ToBoolean(roleInfo.Settings["ReviewMembers"].ToString());
                        if (roleInfo.IsPublic && !requireApproval)
                        {
                            roleController.AddUserRole(PortalSettings.PortalId, UserInfo.UserID, roleInfo.RoleID, Null.NullDate);
                            roleController.UpdateRole(roleInfo);
                            return Json(new { Result = "success", URL = roleInfo.Settings["URL"] });
                        }
                        if (roleInfo.IsPublic && requireApproval)
                        {
                            roleController.AddUserRole(PortalSettings.PortalId, UserInfo.UserID, roleInfo.RoleID, RoleStatus.Pending, false, Null.NullDate, Null.NullDate);
                            Components.Notifications notifications = new Components.Notifications();
                            notifications.AddGroupOwnerNotification(Constants.MemberPendingNotification, TabId, ModuleId, roleInfo, UserInfo);
                            return Json(new { Result = "success", URL = string.Empty });
                        }

                        
                    }
                }
            }
            catch (Exception exc)
            {
                DnnLog.Error(exc);
            }

            return Json(new { Result = "error" });
        }]]></body>
          </codeblock>
        </method>
        <method name="LeaveGroup">
          <declaration><![CDATA[public ActionResult LeaveGroup(int roleId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="174" sc="9" el="200" ec="10">GroupServices.cs</location>
            <body hash="2566b5a86d336c847ced9507d3088ed2"><![CDATA[{
            var success = false;

            try
            {
                if (UserInfo.UserID >= 0 && roleId > 0)
                {
                    var roleController = new RoleController();
                    roleInfo = roleController.GetRole(roleId, PortalSettings.PortalId);

                    if (roleInfo != null)
                    {
                        if (UserInfo.IsInRole(roleInfo.RoleName))
                        {
                            RoleController.DeleteUserRole(UserInfo, roleInfo, PortalSettings, false);
                        }
                        success = true;
                    }
                }
            }
            catch (Exception exc)
            {
                DnnLog.Error(exc);
            }

            return Json(new { Result = success ? "success" : "error" });
        }]]></body>
          </codeblock>
        </method>
        <method name="ParseKey">
          <declaration><![CDATA[public void ParseKey(string key)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="280" sc="9" el="302" ec="10">GroupServices.cs</location>
            <body hash="c227638862b3dfd09ed411cc2e816776"><![CDATA[{
            TabId = -1;
            ModuleId = -1;
            RoleId = -1;
            MemberId = -1;
            roleInfo = null;
            if (!String.IsNullOrEmpty(key))
            {
                string[] keys = key.Split(':');
                TabId = Convert.ToInt32(keys[0]);
                ModuleId = Convert.ToInt32(keys[1]);
                RoleId = Convert.ToInt32(keys[2]);
                if (keys.Length > 3)
                {
                    MemberId = Convert.ToInt32(keys[3]);
                }
            }
            if (RoleId > 0)
            {
                var roleController = new RoleController();
                roleInfo = roleController.GetRole(RoleId, PortalSettings.PortalId);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="RejectGroup">
          <declaration><![CDATA[public ActionResult RejectGroup(int notificationId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="95" sc="9" el="126" ec="10">GroupServices.cs</location>
            <body hash="b12883178e66837f1e583a3c0ecca4ee"><![CDATA[{
            try
            {
                var recipient = InternalMessagingController.Instance.GetMessageRecipient(notificationId, UserInfo.UserID);
                if (recipient == null) return Json(new { Result = "error" });

                var notification = NotificationsController.Instance.GetNotification(notificationId);
                ParseKey(notification.Context);
                if (roleInfo == null)
                {
                    return Json(new { Result = "error" });
                }
                if (!IsMod())
                {
                    return Json(new { Result = "access denied" });
                }
                var notifications = new Notifications();
                var roleCreator = UserController.GetUserById(PortalSettings.PortalId, roleInfo.CreatedByUserID);
                var siteAdmin = UserController.GetUserById(PortalSettings.PortalId, PortalSettings.AdministratorId);
                notifications.AddGroupNotification(Constants.GroupRejectedNotification, TabId, ModuleId, roleInfo, siteAdmin, new List<RoleInfo> { roleInfo }, roleCreator);

                var roleController = new RoleController();
                roleController.DeleteRole(RoleId, PortalSettings.PortalId);
                NotificationsController.Instance.DeleteAllNotificationRecipients(notificationId);
                return Json(new { Result = "success" });
            }
            catch (Exception exc)
            {
                DnnLog.Error(exc);
                return Json(new { Result = "error" });
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="RejectMember">
          <declaration><![CDATA[public ActionResult RejectMember(int notificationId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="245" sc="9" el="278" ec="10">GroupServices.cs</location>
            <body hash="d1e6f94f9994a602e5cbc14fb25f30eb"><![CDATA[{
            try
            {
                var recipient = InternalMessagingController.Instance.GetMessageRecipient(notificationId, UserInfo.UserID);
                if (recipient == null) return Json(new { Result = "error" });

                var notification = NotificationsController.Instance.GetNotification(notificationId);
                ParseKey(notification.Context);
                if (MemberId <= 0) return Json(new { Result = "error" });

                if (roleInfo == null) return Json(new { Result = "error" });

                var member = UserController.GetUserById(PortalSettings.PortalId, MemberId);



                if (member != null)
                {
                    var roleController = new RoleController();
                    roleController.DeleteUserRole(PortalSettings.PortalId, MemberId, roleInfo.RoleID);
                    var notifications = new Notifications();
                    var groupOwner = UserController.GetUserById(PortalSettings.PortalId, roleInfo.CreatedByUserID);
                    notifications.AddMemberNotification(Constants.MemberRejectedNotification, TabId, ModuleId, roleInfo, groupOwner, member);
                    NotificationsController.Instance.DeleteAllNotificationRecipients(notificationId);

                    return Json(new { Result = "success" });
                }
            } catch (Exception exc)
            {
                DnnLog.Error(exc);
            }

            return Json(new { Result = "error" });
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="MemberId">
          <declaration><![CDATA[internal int MemberId]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ModuleId">
          <declaration><![CDATA[internal int ModuleId]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="RoleId">
          <declaration><![CDATA[internal int RoleId]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="roleInfo">
          <declaration><![CDATA[internal RoleInfo roleInfo]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="TabId">
          <declaration><![CDATA[internal int TabId]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="ServiceRouteMapper">
      <declaration><![CDATA[public class ServiceRouteMapper : IServiceRouteMapper]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public ServiceRouteMapper()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="RegisterRoutes">
          <declaration><![CDATA[public void RegisterRoutes(IMapRoute mapRouteManager)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="9" sc="9" el="11" ec="10">Components\GroupsRouteMapper.cs</location>
            <body hash="f5260d86315a8b0064eb74f41106f886"><![CDATA[{
            mapRouteManager.MapRoute("SocialGroups", "{controller}.ashx/{action}", new[] { "DotNetNuke.Modules.Groups" });
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="Setup">
      <declaration><![CDATA[public class Setup : GroupsModuleBase]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public Setup()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="AddModule">
          <declaration><![CDATA[private int AddModule(TabInfo tab, int portalId, string moduleName, string pane)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="118" sc="9" el="155" ec="10">Setup.ascx.cs</location>
            <body hash="9fcc3faa6fdfd07cefbd9a27e772e25c"><![CDATA[{
            int id = -1;
            var mc = new ModuleController();            
            int desktopModuleId = GetDesktopModuleId(portalId, moduleName);
            int moduleId = -1;
            if (desktopModuleId > -1)
            {
                if (moduleId <= 0)
                {
                    moduleId = AddNewModule(tab, string.Empty, desktopModuleId, pane, 0, string.Empty);
                }
                id = moduleId;
                ModuleInfo mi = mc.GetModule(moduleId, tab.TabID);
                if (moduleName == "Social Groups")
                {
                    mc.UpdateTabModuleSetting(mi.TabModuleID, Constants.GroupLoadView, GroupMode.View.ToString());
                    mc.UpdateTabModuleSetting(mi.TabModuleID, Constants.GroupListPage, tab.TabID.ToString(CultureInfo.InvariantCulture));
                }
                if (moduleName == "Console")
                {
                    mc.UpdateTabModuleSetting(mi.TabModuleID, "AllowSizeChange", "False");
                    mc.UpdateTabModuleSetting(mi.TabModuleID, "AllowViewChange", "False");
                    mc.UpdateTabModuleSetting(mi.TabModuleID, "IncludeParent", "True");
                    mc.UpdateTabModuleSetting(mi.TabModuleID, "Mode", "Group");
                    mc.UpdateTabModuleSetting(mi.TabModuleID, "DefaultSize", "IconNone");
                    mc.UpdateTabModuleSetting(mi.TabModuleID, "ParentTabID", tab.TabID.ToString(CultureInfo.InvariantCulture));
                }
                if (moduleName == "DotNetNuke.Modules.MemberDirectory")
                {
                    mc.UpdateModuleSetting(mi.ModuleID, "FilterBy", "Group");
                    mc.UpdateModuleSetting(mi.ModuleID, "FilterPropertyValue", "");
                    mc.UpdateModuleSetting(mi.ModuleID, "FilterValue", "-1");
                    mc.UpdateTabModuleSetting(mi.TabModuleID, "DisplaySearch", "False");
                }
            }

            return id;
        }]]></body>
          </codeblock>
        </method>
        <method name="AddModulePermission">
          <declaration><![CDATA[private ModulePermissionInfo AddModulePermission(ModuleInfo objModule, PermissionInfo permission, int roleId, int userId, bool allowAccess)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="245" sc="9" el="265" ec="10">Setup.ascx.cs</location>
            <body hash="8adeb34dfad84ee1cafe60598f34efd9"><![CDATA[{
            var objModulePermission = new ModulePermissionInfo();
            objModulePermission.ModuleID = objModule.ModuleID;
            objModulePermission.PermissionID = permission.PermissionID;
            objModulePermission.RoleID = roleId;
            objModulePermission.UserID = userId;
            objModulePermission.PermissionKey = permission.PermissionKey;
            objModulePermission.AllowAccess = allowAccess;

            // add the permission to the collection
            if (objModule.ModulePermissions == null)
            {
                objModule.ModulePermissions = new ModulePermissionCollection();
            }
            if (!objModule.ModulePermissions.Contains(objModulePermission))
            {
                objModule.ModulePermissions.Add(objModulePermission);
            }

            return objModulePermission;
        }]]></body>
          </codeblock>
        </method>
        <method name="AddNewModule">
          <declaration><![CDATA[private int AddNewModule(TabInfo tab, string title, int desktopModuleId, string paneName, int permissionType, string align)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="164" sc="9" el="242" ec="10">Setup.ascx.cs</location>
            <body hash="9874c78e18057375db46dd83b8ba9e53"><![CDATA[{
            TabPermissionCollection objTabPermissions = tab.TabPermissions;
            var objPermissionController = new PermissionController();
            var objModules = new ModuleController();
            int j;
            var mdc = new ModuleDefinitionController();

            foreach (ModuleDefinitionInfo objModuleDefinition in mdc.GetModuleDefinitions(desktopModuleId))
            {
                var objModule = new ModuleInfo();
                objModule.Initialize(tab.PortalID);

                objModule.PortalID = tab.PortalID;
                objModule.TabID = tab.TabID;
                if (string.IsNullOrEmpty(title))
                {
                    objModule.ModuleTitle = objModuleDefinition.FriendlyName;
                }
                else
                {
                    objModule.ModuleTitle = title;
                }
                objModule.PaneName = paneName;
                objModule.ModuleDefID = objModuleDefinition.ModuleDefID;
                objModule.CacheTime = 0;
                objModule.InheritViewPermissions = true;
                objModule.DisplayTitle = false;

                // get the default module view permissions
                ArrayList arrSystemModuleViewPermissions = objPermissionController.GetPermissionByCodeAndKey("SYSTEM_MODULE_DEFINITION", "VIEW");

                // get the permissions from the page
                foreach (TabPermissionInfo objTabPermission in objTabPermissions)
                {
                    if (objTabPermission.PermissionKey == "VIEW" && permissionType == 0)
                    {
                        //Don't need to explicitly add View permisisons if "Same As Page"
                        continue;
                    }

                    // get the system module permissions for the permissionkey
                    ArrayList arrSystemModulePermissions = objPermissionController.GetPermissionByCodeAndKey("SYSTEM_MODULE_DEFINITION", objTabPermission.PermissionKey);
                    // loop through the system module permissions
                    for (j = 0; j <= arrSystemModulePermissions.Count - 1; j++)
                    {
                        // create the module permission
                        PermissionInfo objSystemModulePermission = default(PermissionInfo);
                        objSystemModulePermission = (PermissionInfo) arrSystemModulePermissions[j];
                        if (objSystemModulePermission.PermissionKey == "VIEW" && permissionType == 1 && objTabPermission.PermissionKey != "EDIT")
                        {
                            //Only Page Editors get View permissions if "Page Editors Only"
                            continue;
                        }

                        ModulePermissionInfo objModulePermission = AddModulePermission(objModule,
                                                                                       objSystemModulePermission,
                                                                                       objTabPermission.RoleID,
                                                                                       objTabPermission.UserID,
                                                                                       objTabPermission.AllowAccess);

                        // ensure that every EDIT permission which allows access also provides VIEW permission
                        if (objModulePermission.PermissionKey == "EDIT" & objModulePermission.AllowAccess)
                        {
                            ModulePermissionInfo objModuleViewperm = AddModulePermission(objModule,
                                                                                         (PermissionInfo) arrSystemModuleViewPermissions[0],
                                                                                         objModulePermission.RoleID,
                                                                                         objModulePermission.UserID,
                                                                                         true);
                        }
                    }
                }

                objModule.AllTabs = false;
                objModule.Alignment = align;

                return objModules.AddModule(objModule);
            }
            return -1;
        }]]></body>
          </codeblock>
        </method>
        <method name="btGo_Click">
          <declaration><![CDATA[public void btGo_Click(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="49" sc="9" el="74" ec="10">Setup.ascx.cs</location>
            <body hash="fe43204a1064dc45d16698b50d351fc4"><![CDATA[{
            //Setup Child Page - Main View/Activity
            TabInfo tab = CreatePage(PortalSettings.ActiveTab, PortalId, TabId, "Group Activity", false);
            //Add Module to Child Page
            int groupViewModuleId = AddModule(tab, PortalId, "Social Groups", "ContentPaneProfile");
            int journalModuleId = AddModule(tab, PortalId, "Journal", "ContentPaneProfile");
            int consoleId = AddModule(tab, PortalId, "Console", "RightPaneProfile");

            var mc = new ModuleController();

            ModuleInfo groupConsoleModule = mc.GetModule(consoleId, tab.TabID);
            TabInfo memberTab = CreatePage(PortalSettings.ActiveTab, PortalId, tab.TabID, "Members", false);
            mc.CopyModule(groupConsoleModule, memberTab, "RightPaneProfile", true);

            ModuleInfo groupViewModule = mc.GetModule(groupViewModuleId, tab.TabID);
            mc.CopyModule(groupViewModule, memberTab, "ContentPaneProfile", true);
            AddModule(memberTab, PortalId, "DotNetNuke.Modules.MemberDirectory", "ContentPaneProfile");


            //List Settings
            var modules = new ModuleController();
            modules.UpdateTabModuleSetting(TabModuleId, Constants.GroupLoadView, GroupMode.List.ToString());
            modules.UpdateTabModuleSetting(TabModuleId, Constants.GroupViewPage, tab.TabID.ToString(CultureInfo.InvariantCulture));

            Response.Redirect(Request.RawUrl);
        }]]></body>
          </codeblock>
        </method>
        <method name="CreatePage">
          <declaration><![CDATA[private TabInfo CreatePage(TabInfo tab, int portalId, int parentTabId, string tabName, bool includeInMenu)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="77" sc="9" el="115" ec="10">Setup.ascx.cs</location>
            <body hash="93b4c1fbbba8c6bd949329050c562a32"><![CDATA[{
            int id = -1;
            var tc = new TabController();
            var tPermissions = new TabPermissionCollection();
            var newTab = new TabInfo();
            if ((tab != null))
            {
                foreach (TabPermissionInfo t in tab.TabPermissions)
                {
                    var tNew = new TabPermissionInfo
                                   {
                                       AllowAccess = t.AllowAccess,
                                       DisplayName = t.DisplayName,
                                       ModuleDefID = t.ModuleDefID,
                                       PermissionCode = t.PermissionCode,
                                       PermissionID = t.PermissionID,
                                       PermissionKey = t.PermissionKey,
                                       PermissionName = t.PermissionName,
                                       RoleID = t.RoleID,
                                       RoleName = t.RoleName,
                                       TabID = -1,
                                       TabPermissionID = -1,
                                       UserID = t.UserID,
                                       Username = t.Username
                                   };
                    newTab.TabPermissions.Add(t);
                }
            }
            newTab.ParentId = parentTabId;
            newTab.PortalID = portalId;
            newTab.TabName = tabName;
            newTab.Title = tabName;
            newTab.IsVisible = includeInMenu;
            newTab.SkinSrc = "[G]Skins/DarkKnight/2-Column-Right-SocialProfile-Mega-Menu.ascx";
            id = tc.AddTab(newTab);
            tab = tc.GetTab(id, portalId, true);

            return tab;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetDesktopModuleId">
          <declaration><![CDATA[private int GetDesktopModuleId(int portalId, string moduleName)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="158" sc="9" el="161" ec="10">Setup.ascx.cs</location>
            <body hash="bca3e5061993a663db270f34a54852ea"><![CDATA[{
            DesktopModuleInfo info = DesktopModuleController.GetDesktopModuleByModuleName(moduleName, portalId);
            return info == null ? -1 : info.DesktopModuleID;
        }]]></body>
          </codeblock>
        </method>
        <method name="Page_Load">
          <declaration><![CDATA[protected void Page_Load(object sender, EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="44" sc="9" el="46" ec="10">Setup.ascx.cs</location>
            <body hash="23b757aa236eb7030000f4ef58088867"><![CDATA[{
            btnGo.Click += btGo_Click;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="btnGo">
          <declaration><![CDATA[protected LinkButton btnGo;]]></declaration>
          <documentation>
            <summary>
 btnGo control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="Utilities">
      <declaration><![CDATA[public class Utilities]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public Utilities()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="AddParams">
          <declaration><![CDATA[public static string[] AddParams(string param, string[] currParams)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="29" sc="9" el="36" ec="10">Components\Utilities.cs</location>
            <body hash="b280749ac2307c149deeb60a35718db0"><![CDATA[{
            string[] tmpParams = new string[] { param };
            int intLength = tmpParams.Length;
            int currLength = currParams.Length;
            Array.Resize(ref tmpParams, (intLength + currLength));
            currParams.CopyTo(tmpParams, intLength);
            return tmpParams;
        }]]></body>
          </codeblock>
        </method>
        <method name="NavigateUrl">
          <declaration><![CDATA[public static string NavigateUrl(int TabId, string[] @params)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="25" sc="9" el="27" ec="10">Components\Utilities.cs</location>
            <body hash="6a21ac65a3f4510602b4b102e2b94c51"><![CDATA[{
            return DotNetNuke.Common.Globals.NavigateURL(TabId, "", @params);
        }]]></body>
          </codeblock>
        </method>
        <method name="ParseTokenWrapper">
          <declaration><![CDATA[internal static string ParseTokenWrapper(string Template, string Token, bool Condition)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="9" sc="97" el="23" ec="10">Components\Utilities.cs</location>
            <body hash="ce3c22bcc0e78e92798deb442dcd584a"><![CDATA[{

            string pattern = "(\\[" + Token + "\\](.*?)\\[\\/" + Token + "\\])";
            Regex regExp = new Regex(pattern, RegexOptions.Singleline | RegexOptions.IgnoreCase | RegexOptions.Multiline);
            MatchCollection matches = default(MatchCollection);
            matches = regExp.Matches(Template);
            foreach (Match match in matches) {
                if (Condition) {
                    Template = Template.Replace(match.Value, match.Groups[2].Value);
                } else {
                    Template = Template.Replace(match.Value, string.Empty);
                }
            }
            return Template;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="View">
      <declaration><![CDATA[public class View : GroupsModuleBase]]></declaration>
      <documentation>-----------------------------------------------------------------------------
 <summary>
 The ViewSocialGroups class displays the content
 </summary>
 -----------------------------------------------------------------------------</documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public View()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="InitializeComponent">
          <declaration><![CDATA[private void InitializeComponent()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="56" sc="9" el="58" ec="10">View.ascx.cs</location>
            <body hash="c1e37ab25fd7ea77c2add14715dccac9"><![CDATA[{
            Load += Page_Load;
        }]]></body>
          </codeblock>
        </method>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="50" sc="9" el="53" ec="10">View.ascx.cs</location>
            <body hash="e6e53dfb76749bfeaf496967e2ea1d91"><![CDATA[{
            InitializeComponent();
            base.OnInit(e);
        }]]></body>
          </codeblock>
        </method>
        <method name="Page_Load">
          <declaration><![CDATA[private void Page_Load(object sender, EventArgs e)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 Page_Load runs when the control is loaded
 </summary>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="67" sc="9" el="85" ec="10">View.ascx.cs</location>
            <body hash="2897cae3bbf9a21c702fb37d36003aae"><![CDATA[{
            try
            {
                if (GroupId < 0) {
                    if (TabId != GroupListTabId && !UserInfo.IsInRole(PortalSettings.AdministratorRoleName)) {
                       Response.Redirect(Globals.NavigateURL(GroupListTabId));
                    }
                }
                GroupsModuleBase ctl = (GroupsModuleBase)LoadControl(ControlPath);
                ctl.ModuleConfiguration = this.ModuleConfiguration;
                plhContent.Controls.Clear();
                plhContent.Controls.Add(ctl);
                
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="plhContent">
          <declaration><![CDATA[protected PlaceHolder plhContent;]]></declaration>
          <documentation>
            <summary>
 plhContent control.
 </summary>
 <remarks>
 Auto-generated field.
 To modify move field declaration from designer file to code-behind file.
 </remarks></documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="DotNetNuke.Modules.Groups.Components">
    <class name="Constants">
      <declaration><![CDATA[public class Constants]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public Constants()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
        <field name="DefaultRoleGroupSetting">
          <declaration><![CDATA[internal const string DefaultRoleGroupSetting = "DefaultRoleGroup_Setting";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="DefautlGroupViewMode">
          <declaration><![CDATA[internal const string DefautlGroupViewMode = "DefaultGroupViewMode_Setting";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="GroupApprovedNotification">
          <declaration><![CDATA[internal const string GroupApprovedNotification = "GroupApprovedNotification";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="GroupCreatedNotification">
          <declaration><![CDATA[internal const string GroupCreatedNotification = "GroupCreatedNotification";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="GroupListPage">
          <declaration><![CDATA[internal const string GroupListPage = "GroupListPage_Setting";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="GroupListTemplate">
          <declaration><![CDATA[internal const string GroupListTemplate = "GroupListTemplate_Setting";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="GroupLoadView">
          <declaration><![CDATA[internal const string GroupLoadView = "GroupLoadView_Setting";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="GroupModerationEnabled">
          <declaration><![CDATA[internal const string GroupModerationEnabled = "GroupModerationEnabled_Setting";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="GroupPendingNotification">
          <declaration><![CDATA[internal const string GroupPendingNotification = "GroupPendingNotification";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="GroupRejectedNotification">
          <declaration><![CDATA[internal const string GroupRejectedNotification = "GroupRejectedNotification";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="GroupViewPage">
          <declaration><![CDATA[internal const string GroupViewPage = "GroupViewPage_Setting";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="GroupViewTemplate">
          <declaration><![CDATA[internal const string GroupViewTemplate = "GroupViewTemplate_Setting";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="MemberApprovedNotification">
          <declaration><![CDATA[internal const string MemberApprovedNotification = "GroupMemberApprovedNotification";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="MemberJoinedNotification">
          <declaration><![CDATA[internal const string MemberJoinedNotification = "MemberJoinedNotification";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="MemberPendingNotification">
          <declaration><![CDATA[internal const string MemberPendingNotification = "GroupMemberPendingNotification";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="MemberRejectedNotification">
          <declaration><![CDATA[internal const string MemberRejectedNotification = "GroupMemberRejectedNotification";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ModulePath">
          <declaration><![CDATA[internal const string ModulePath = "~/DesktopModules/SocialGroups/";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="SharedResourcesPath">
          <declaration><![CDATA[internal const string SharedResourcesPath = "~/DesktopModules/SocialGroups/App_LocalResources/SharedResources.resx";]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="GroupItemTokenReplace">
      <declaration><![CDATA[public class GroupItemTokenReplace : BaseCustomTokenReplace]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public GroupItemTokenReplace(RoleInfo groupInfo)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="13" sc="9" el="16" ec="10">Components\GroupItemPropertyAccess.cs</location>
            <body hash="01d05429daf2c790e1f06d6ee9ec37f6"><![CDATA[public GroupItemTokenReplace(RoleInfo groupInfo)
        {
            PropertySource["groupitem"] = groupInfo;
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="ReplaceGroupItemTokens">
          <declaration><![CDATA[public string ReplaceGroupItemTokens(string source)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="17" sc="61" el="19" ec="10">Components\GroupItemPropertyAccess.cs</location>
            <body hash="6951f83825d6c653ee078f7324eb0b3f"><![CDATA[{
            return base.ReplaceTokens(source);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="GroupMemberType">
      <declaration><![CDATA[internal class GroupMemberType]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public GroupMemberType()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="GroupMemberTypeId">
          <declaration><![CDATA[public int GroupMemberTypeId]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="GroupMemberTypeName">
          <declaration><![CDATA[public string GroupMemberTypeName]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="GroupsBusinessController">
      <declaration><![CDATA[public class GroupsBusinessController : IUpgradeable]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public GroupsBusinessController()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="AddNotificationTypes">
          <declaration><![CDATA[private void AddNotificationTypes()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="63" sc="9" el="154" ec="10">Components\GroupsBusinessController.cs</location>
            <body hash="848d68649cf94cbc3c3dbef533381b61"><![CDATA[{
            var actions = new List<NotificationTypeAction>();
            
            //DesktopModule should not be null
            var deskModuleId = DesktopModuleController.GetDesktopModuleByFriendlyName("Social Groups").DesktopModuleID;

            //GroupPendingNotification
            var type = new NotificationType { Name = "GroupPendingNotification", Description = "Group Pending Notification", DesktopModuleId = deskModuleId};
            if (NotificationsController.Instance.GetNotificationType(type.Name) == null)
            {
                actions.Add(new NotificationTypeAction
                                {
                                    NameResourceKey = "Approve",
                                    DescriptionResourceKey = "ApproveGroup",
                                    APICall = "DesktopModules/SocialGroups/API/ModerationService.ashx/ApproveGroup"
                                });
                actions.Add(new NotificationTypeAction
                                {
                                    NameResourceKey = "RejectGroup",
                                    DescriptionResourceKey = "RejectGroup",
                                    APICall = "DesktopModules/SocialGroups/API/ModerationService.ashx/RejectGroup"
                                });
                NotificationsController.Instance.CreateNotificationType(type);
                NotificationsController.Instance.SetNotificationTypeActions(actions, type.NotificationTypeId);
            }

            //GroupApprovedNotification
            type = new NotificationType { Name = "GroupApprovedNotification", Description = "Group Approved Notification", DesktopModuleId = deskModuleId };
            if (NotificationsController.Instance.GetNotificationType(type.Name) == null)
            {
                NotificationsController.Instance.CreateNotificationType(type);
            }

            //GroupCreatedNotification
            type = new NotificationType { Name = "GroupCreatedNotification", Description = "Group Created Notification", DesktopModuleId = deskModuleId };
            if (NotificationsController.Instance.GetNotificationType(type.Name) == null)
            {
                actions.Clear();
                actions.Add(new NotificationTypeAction
                                {
                                    NameResourceKey = "RejectGroup",
                                    DescriptionResourceKey = "RejectGroup",
                                    ConfirmResourceKey = "DeleteItem",
                                    APICall = "DesktopModules/SocialGroups/API/ModerationService.ashx/RejectGroup"
                                });
                NotificationsController.Instance.CreateNotificationType(type);
                NotificationsController.Instance.SetNotificationTypeActions(actions, type.NotificationTypeId);
            }

            //GroupRejectedNotification
            type = new NotificationType { Name = "GroupRejectedNotification", Description = "Group Rejected Notification", DesktopModuleId = deskModuleId };
            if (NotificationsController.Instance.GetNotificationType(type.Name) == null)
            {
                NotificationsController.Instance.CreateNotificationType(type);
            }

            //GroupMemberPendingNotification
            type = new NotificationType { Name = "GroupMemberPendingNotification", Description = "Group Member Pending Notification", DesktopModuleId = deskModuleId };
            if (NotificationsController.Instance.GetNotificationType(type.Name) == null)
            {
                actions.Clear();
                actions.Add(new NotificationTypeAction
                                {
                                    NameResourceKey = "Approve",
                                    DescriptionResourceKey = "ApproveGroupMember",
                                    ConfirmResourceKey = "",
                                    APICall = "DesktopModules/SocialGroups/API/ModerationService.ashx/ApproveMember"
                                });
                actions.Add(new NotificationTypeAction
                                {
                                    NameResourceKey = "RejectMember",
                                    DescriptionResourceKey = "RejectGroupMember",
                                    APICall = "DesktopModules/SocialGroups/API/ModerationService.ashx/RejectMember"
                                });
                NotificationsController.Instance.CreateNotificationType(type);
                NotificationsController.Instance.SetNotificationTypeActions(actions, type.NotificationTypeId);
            }

            //GroupMemberApprovedNotification
            type = new NotificationType { Name = "GroupMemberApprovedNotification", Description = "Group Member Notification", DesktopModuleId = deskModuleId };
            if (NotificationsController.Instance.GetNotificationType(type.Name) == null)
            {
                NotificationsController.Instance.CreateNotificationType(type);
            }

            //GroupMemberRejectedNotification
            type = new NotificationType { Name = "GroupMemberRejectedNotification", Description = "Group Rejected Notification", DesktopModuleId = deskModuleId };
            if (NotificationsController.Instance.GetNotificationType(type.Name) == null)
            {
                NotificationsController.Instance.CreateNotificationType(type);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="RemoveRejectActionForCreatedNotification">
          <declaration><![CDATA[private void RemoveRejectActionForCreatedNotification()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="47" sc="9" el="60" ec="10">Components\GroupsBusinessController.cs</location>
            <body hash="e427d9395ad157568bc9fb4f26d584a3"><![CDATA[{
            var notificationType = NotificationsController.Instance.GetNotificationType(Constants.GroupCreatedNotification);
            if(notificationType == null)
            {
                return;
            }

            var action = NotificationsController.Instance.GetNotificationTypeAction(notificationType.NotificationTypeId, "RejectGroup");
            if(action == null)
            {
                return;
            }
            NotificationsController.Instance.DeleteNotificationTypeAction(action.NotificationTypeActionId);
        }]]></body>
          </codeblock>
        </method>
        <method name="UpgradeModule">
          <declaration><![CDATA[public string UpgradeModule(string version)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="32" sc="9" el="44" ec="10">Components\GroupsBusinessController.cs</location>
            <body hash="0fd3cded6aaef1b88fe6bd74630f6743"><![CDATA[{
            switch (version)
            {
                case "06.02.00":
                    AddNotificationTypes();
                    break;
                case "06.02.04":
                    RemoveRejectActionForCreatedNotification();
                    break;
            }

            return string.Empty;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="GroupUtilities">
      <declaration><![CDATA[public class GroupUtilities]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public GroupUtilities()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="CreateJournalEntry">
          <declaration><![CDATA[public static void CreateJournalEntry(RoleInfo roleInfo, UserInfo createdBy)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="40" sc="9" el="68" ec="10">Components\GroupUtilities.cs</location>
            <body hash="52f272b33d7428e3ac34cad48dabf62d"><![CDATA[{
            var journalController = JournalController.Instance;
            var journalItem = new JournalItem();
            string url = "";
            if (roleInfo.Settings.ContainsKey("URL"))
            {
                url = roleInfo.Settings["URL"];
            }
            journalItem.PortalId = roleInfo.PortalID;
            journalItem.ProfileId = createdBy.UserID;
            journalItem.UserId = createdBy.UserID;
            journalItem.Title = roleInfo.RoleName;
            journalItem.ItemData = new ItemData {Url = url};
            journalItem.SocialGroupId = roleInfo.RoleID;
            journalItem.Summary = roleInfo.Description;
            journalItem.Body = null;
            journalItem.JournalTypeId = journalController.GetJournalType("groupcreate").JournalTypeId;
            journalItem.ObjectKey = string.Format("groupcreate:{0}:{1}", roleInfo.RoleID.ToString(CultureInfo.InvariantCulture), createdBy.UserID.ToString(CultureInfo.InvariantCulture));
            if ((journalController.GetJournalItemByKey(roleInfo.PortalID, journalItem.ObjectKey) != null))
            {
                journalController.DeleteJournalItemByKey(roleInfo.PortalID, journalItem.ObjectKey);
            }
            journalItem.SecuritySet = string.Empty;
            if (roleInfo.IsPublic)
            {
                journalItem.SecuritySet += "E,";
            }
            journalController.SaveJournalItem(journalItem, -1);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="GroupViewParser">
      <declaration><![CDATA[public class GroupViewParser]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private string resxPath = "~/DesktopModules/SocialGroups/App_LocalResources/SharedResources.resx";]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="22" sc="9" el="31" ec="10">Components\GroupViewParser.cs</location>
            <body hash="76c4ad053d4d2da33929bb01555f21ed"><![CDATA[string resxPath = "~/DesktopModules/SocialGroups/App_LocalResources/SharedResources.resx";

        public GroupViewParser(PortalSettings portalSettings, RoleInfo roleInfo, UserInfo currentUser, string template, int groupViewTabId)
        {
            PortalSettings = portalSettings;
            RoleInfo = roleInfo;
            CurrentUser = currentUser;
            Template = template;
            GroupViewTabId = groupViewTabId;
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="ParseView">
          <declaration><![CDATA[public string ParseView()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="33" sc="9" el="98" ec="10">Components\GroupViewParser.cs</location>
            <body hash="3187cff6a59926d6028d926b80bedaac"><![CDATA[{
            bool membershipPending = false;
            bool isOwner = false;
            UserRoleInfo userRoleInfo = null;
            if (HttpContext.Current.Request.IsAuthenticated)
            {
                userRoleInfo = CurrentUser.Social.Roles.Where(r => r.RoleID == RoleInfo.RoleID).FirstOrDefault();
                
                if (userRoleInfo != null)
                {
                    isOwner = userRoleInfo.IsOwner;
                    if (userRoleInfo.Status == RoleStatus.Pending)
                    {
                        membershipPending = true;
                    }
                }
                if (RoleInfo.CreatedByUserID == CurrentUser.UserID)
                {
                    isOwner = true;
                }
                
            }
            var editUrl = Localization.GetString("GroupEditUrl", resxPath);

            if (isOwner)
            {

                Template = Template.Replace("[GROUPEDITBUTTON]", String.Format(editUrl, GroupEditUrl));
                Template = Utilities.ParseTokenWrapper(Template, "IsNotOwner", false);
                Template = Utilities.ParseTokenWrapper(Template, "IsOwner", true);
            } else if (!isOwner && CurrentUser.IsInRole(RoleInfo.RoleName))
            {
                Template = Utilities.ParseTokenWrapper(Template, "IsNotOwner", true);
                Template = Utilities.ParseTokenWrapper(Template, "IsOwner", false);
            }
            Template = Utilities.ParseTokenWrapper(Template, "IsNotOwner", false);
            Template = Utilities.ParseTokenWrapper(Template, "IsOwner", false);

            if (CurrentUser.IsInRole(RoleInfo.RoleName) || !HttpContext.Current.Request.IsAuthenticated || membershipPending)
            {
                Template = Utilities.ParseTokenWrapper(Template, "IsNotMember", false);
            } else
            {
                Template = Utilities.ParseTokenWrapper(Template, "IsNotMember", true);
            }

            if (CurrentUser.IsInRole(RoleInfo.RoleName))
            {
                Template = Utilities.ParseTokenWrapper(Template, "IsMember", true);
                Template = Utilities.ParseTokenWrapper(Template, "IsPendingMember", false);
            } else
            {
                Template = Utilities.ParseTokenWrapper(Template, "IsMember", false);
            }

            Template = Template.Replace("[GROUPEDITBUTTON]", String.Empty);

            string url = string.Empty;
            url = Globals.NavigateURL(GroupViewTabId, "", new String[] { "groupid=" + RoleInfo.RoleID.ToString() });
            
            Template = Utilities.ParseTokenWrapper(Template, "IsPendingMember", membershipPending);
            Template = Template.Replace("[groupviewurl]", url);
            Components.GroupItemTokenReplace tokenReplace = new Components.GroupItemTokenReplace(RoleInfo);
            Template = tokenReplace.ReplaceGroupItemTokens(Template);
            return Template;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="resxPath">
          <declaration><![CDATA[private string resxPath = "~/DesktopModules/SocialGroups/App_LocalResources/SharedResources.resx";]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="CurrentUser">
          <declaration><![CDATA[private UserInfo CurrentUser]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="GroupEditUrl">
          <declaration><![CDATA[public string GroupEditUrl]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="GroupViewTabId">
          <declaration><![CDATA[public int GroupViewTabId]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="PortalSettings">
          <declaration><![CDATA[private PortalSettings PortalSettings]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="RoleInfo">
          <declaration><![CDATA[private RoleInfo RoleInfo]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="Template">
          <declaration><![CDATA[public string Template]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="Notifications">
      <declaration><![CDATA[public class Notifications]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public Notifications()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="AddGroupNotification">
          <declaration><![CDATA[internal virtual Notification AddGroupNotification(string notificationTypeName, int tabId, int moduleId, RoleInfo group, UserInfo initiatingUser, IList<RoleInfo> moderators)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="13" sc="9" el="15" ec="10">Components\Notifications.cs</location>
            <body hash="3bc35d48e89cea68775ca4a14aa2b3ad"><![CDATA[{
            return AddGroupNotification(notificationTypeName, tabId, moduleId, group, initiatingUser, moderators, null);
        }]]></body>
          </codeblock>
        </method>
        <method name="AddGroupNotification">
          <declaration><![CDATA[internal virtual Notification AddGroupNotification(string notificationTypeName, int tabId, int moduleId, RoleInfo group, UserInfo initiatingUser, IList<RoleInfo> moderators, UserInfo recipient)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="16" sc="203" el="44" ec="10">Components\Notifications.cs</location>
            <body hash="33bdf37943fd13522ecc4031d0f7a6a0"><![CDATA[{
            var notificationType = NotificationsController.Instance.GetNotificationType(notificationTypeName);
            var tokenReplace = new GroupItemTokenReplace(group);

            var subject = Localization.GetString(notificationTypeName + ".Subject", Constants.SharedResourcesPath);
            subject = tokenReplace.ReplaceGroupItemTokens(subject);

            var body = Localization.GetString(notificationTypeName + ".Body", Constants.SharedResourcesPath);
            
            body = tokenReplace.ReplaceGroupItemTokens(body);
            body = body.Replace("Public.Text", Localization.GetString("Public.Text", Constants.SharedResourcesPath));
            body = body.Replace("Private.Text", Localization.GetString("Private.Text", Constants.SharedResourcesPath));

            bool dismiss = notificationTypeName != Constants.GroupPendingNotification;
            var notification = new Notification
                                   {
                                       NotificationTypeID = notificationType.NotificationTypeId,
                                       Subject = subject,
                                       Body = body,
                                       IncludeDismissAction = dismiss,
                                       SenderUserID = initiatingUser.UserID,
                                       Context = String.Format("{0}:{1}:{2}", tabId, moduleId, group.RoleID)
                                   };
            NotificationsController.Instance.SendNotification(notification, initiatingUser.PortalID, moderators, recipient == null ? null : new List<UserInfo>{recipient} );
            
            

            return notification;
        }]]></body>
          </codeblock>
        </method>
        <method name="AddGroupOwnerNotification">
          <declaration><![CDATA[internal virtual Notification AddGroupOwnerNotification(string notificationTypeName, int tabId, int moduleId, RoleInfo group, UserInfo initiatingUser)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="46" sc="9" el="88" ec="10">Components\Notifications.cs</location>
            <body hash="25c9050cb347d79121eb6d7ba8fda750"><![CDATA[{
            var notificationType = NotificationsController.Instance.GetNotificationType(notificationTypeName);

            var tokenReplace = new GroupItemTokenReplace(group);
            
            var subject = Localization.GetString(notificationTypeName + ".Subject", Constants.SharedResourcesPath);
            var body = Localization.GetString(notificationTypeName + ".Body", Constants.SharedResourcesPath);
            subject = subject.Replace("[DisplayName]", initiatingUser.DisplayName);
            subject = subject.Replace("[ProfileUrl]", Globals.UserProfileURL(initiatingUser.UserID));
            subject = tokenReplace.ReplaceGroupItemTokens(subject);
            body = body.Replace("[DisplayName]", initiatingUser.DisplayName);
            body = body.Replace("[ProfileUrl]", Globals.UserProfileURL(initiatingUser.UserID));
            body = tokenReplace.ReplaceGroupItemTokens(body);
            var roleCreator = UserController.GetUserById(group.PortalID, group.CreatedByUserID);

            var roleOwners = new List<UserInfo>();

            var rc = new RoleController();
            foreach (UserInfo userInfo in rc.GetUsersByRoleName(group.PortalID, group.RoleName)) {
                var userRoleInfo = rc.GetUserRole(group.PortalID, userInfo.UserID, group.RoleID);
                if (userRoleInfo.IsOwner && userRoleInfo.UserID != group.CreatedByUserID)
                {
                    roleOwners.Add(UserController.GetUserById(group.PortalID, userRoleInfo.UserID));
                }
            }
            roleOwners.Add(roleCreator);
            


            //Need to add from sender details
            var notification = new Notification
            {
                NotificationTypeID = notificationType.NotificationTypeId,
                Subject = subject,
                Body = body,
                IncludeDismissAction = true,
                SenderUserID = initiatingUser.UserID,
                Context = String.Format("{0}:{1}:{2}:{3}", tabId, moduleId, group.RoleID, initiatingUser.UserID)
            };
            NotificationsController.Instance.SendNotification(notification, initiatingUser.PortalID, null, roleOwners);

            return notification;
        }]]></body>
          </codeblock>
        </method>
        <method name="AddMemberNotification">
          <declaration><![CDATA[internal virtual Notification AddMemberNotification(string notificationTypeName, int tabId, int moduleId, RoleInfo group, UserInfo sender, UserInfo recipient)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="89" sc="168" el="116" ec="10">Components\Notifications.cs</location>
            <body hash="2e3a42655cdd665511c49522ec7ef331"><![CDATA[{
            var notificationType = NotificationsController.Instance.GetNotificationType(notificationTypeName);

            var subject = Localization.GetString(notificationTypeName + ".Subject", Constants.SharedResourcesPath);

            var body = Localization.GetString(notificationTypeName + ".Body", Constants.SharedResourcesPath);
            var tokenReplace = new GroupItemTokenReplace(group);
            subject = subject.Replace("[DisplayName]", recipient.DisplayName);
            subject = subject.Replace("[ProfileUrl]", Globals.UserProfileURL(recipient.UserID));
            subject = tokenReplace.ReplaceGroupItemTokens(subject);
            body = body.Replace("[DisplayName]", recipient.DisplayName);
            body = body.Replace("[ProfileUrl]", Globals.UserProfileURL(recipient.UserID));
            body = tokenReplace.ReplaceGroupItemTokens(body);

            //Need to add from sender details
            var notification = new Notification
            {
                NotificationTypeID = notificationType.NotificationTypeId,
                Subject = subject,
                Body = body,
                IncludeDismissAction = true,
                SenderUserID = sender.UserID,
                Context = String.Format("{0}:{1}:{2}", tabId, moduleId, group.RoleID)
            };
            NotificationsController.Instance.SendNotification(notification, recipient.PortalID, null, new List<UserInfo> { recipient });

            return notification;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="DotNetNuke.Modules.Groups.Controls">
    <class name="GroupListControl">
      <declaration><![CDATA[public class GroupListControl : WebControl]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public GroupListControl()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="OnInit">
          <declaration><![CDATA[protected override void OnInit(EventArgs e)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="57" sc="53" el="61" ec="10">GroupListControl.cs</location>
            <body hash="40d30e93f51a3041bf3b37502eae6f54"><![CDATA[{
            base.OnInit(e);
            currentUser = UserController.GetCurrentUserInfo();

        }]]></body>
          </codeblock>
        </method>
        <method name="Render">
          <declaration><![CDATA[protected override void Render(HtmlTextWriter output)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="64" sc="63" el="172" ec="10">GroupListControl.cs</location>
            <body hash="4596f7550a3e2759322a33e6cc0ec148"><![CDATA[{


            RoleController rc = new RoleController();
            IList<RoleInfo> roles = TestableRoleController.Instance.GetRoles(PortalSettings.PortalId, 
                                                (grp) => grp.SecurityMode != SecurityMode.SecurityRole 
                                                            && grp.RoleGroupID == RoleGroupId 
                                                            && grp.Status == RoleStatus.Approved
                                                            && (grp.IsPublic || currentUser.IsInRole(grp.RoleName))
                                        );

            decimal pages = (decimal)roles.Count / (decimal)PageSize;

            output.Write(HeaderTemplate);
            string resxPath = "~/desktopmodules/SocialGroups/App_LocalResources/SharedResources.resx";
            ItemTemplate = ItemTemplate.Replace("{resx:posts}", Localization.GetString("posts", resxPath));
            ItemTemplate = ItemTemplate.Replace("{resx:members}", Localization.GetString("members", resxPath));
            ItemTemplate = ItemTemplate.Replace("{resx:photos}", Localization.GetString("photos", resxPath));
            ItemTemplate = ItemTemplate.Replace("{resx:documents}", Localization.GetString("documents", resxPath));
           
            ItemTemplate = ItemTemplate.Replace("{resx:Join}", Localization.GetString("Join", resxPath));
            ItemTemplate = ItemTemplate.Replace("{resx:Pending}", Localization.GetString("Pending", resxPath));
            ItemTemplate = ItemTemplate.Replace("{resx:LeaveGroup}", Localization.GetString("LeaveGroup", resxPath));

            if (roles.Count == 0) {
                output.Write(String.Format("<div class=\"dnnFormMessage dnnFormInfo\"><span>{0}</span></div>", Localization.GetString("NoGroupsFound", resxPath)));
        
            }
            int rowItem = 0;
            if (!String.IsNullOrEmpty(HttpContext.Current.Request.QueryString["page"]))
            {
                CurrentIndex = Convert.ToInt32(HttpContext.Current.Request.QueryString["page"].ToString());
                CurrentIndex = CurrentIndex - 1;
            }
            int recordStart = (CurrentIndex * PageSize);
            if (CurrentIndex == 0)
            {
                recordStart = 0;
            }
            for (int x = recordStart; x < (recordStart + PageSize); x++)
            {
                if (x > roles.Count-1)
                {
                    break;
                }
                var role = roles[x];
                string rowTemplate = ItemTemplate;
                if (rowItem == 0)
                {
                    output.Write(RowHeaderTemplate);
                }
                var groupParser = new Components.GroupViewParser(PortalSettings, role, currentUser, rowTemplate, GroupViewTabId);
                output.Write(groupParser.ParseView());

                rowItem += 1;
                if (rowItem == ItemsPerRow)
                {
                    output.Write(RowFooterTemplate);
                    rowItem = 0;
                }
            }
           
            if (rowItem > 0) {
                output.Write(RowFooterTemplate);
            }

            output.Write(FooterTemplate);
            int TotalPages = Convert.ToInt32(System.Math.Ceiling(pages));
       
       
            if (TotalPages == 0)
            {
                TotalPages = 1;
            }
            string sUrlFormat = "<a href=\"{0}\" class=\"{1}\">{2}</a>";
            string[] currParams = new string[] { };

            StringBuilder sb = new StringBuilder();
            if (TotalPages > 1)
            {
              
                for (int x = 1; x <= TotalPages; x++)
                {
                    string[] @params = new string[] { };
                    if (currParams.Length > 0 & x > 1)
                    {
                        @params = Utilities.AddParams("page=" + x.ToString(), currParams);
                    } else if (currParams.Length > 0 & x == 1)
                    {
                        @params = currParams;
                    } else if (x > 1)
                    {
                        @params = new string[] { "page=" + x.ToString() };
                    }
                    string sUrl = Utilities.NavigateUrl(TabId, @params);
                    string cssClass = "pagerItem";
                    if (x-1 == CurrentIndex)
                    {
                        cssClass = "pagerItemSelected";
                    }
                    sb.AppendFormat(sUrlFormat, sUrl, cssClass, x.ToString());
                }
                
            }
            output.Write("<div class=\"dnnClear groupPager\">");
            output.Write(sb.ToString());
            output.Write("</div>");

        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="currentUser">
          <declaration><![CDATA[public UserInfo currentUser;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="CurrentIndex">
          <declaration><![CDATA[public int CurrentIndex]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="FooterTemplate">
          <declaration><![CDATA[public string FooterTemplate]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="GroupViewTabId">
          <declaration><![CDATA[public int GroupViewTabId]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="HeaderTemplate">
          <declaration><![CDATA[public string HeaderTemplate]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ItemsPerRow">
          <declaration><![CDATA[public int ItemsPerRow]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="ItemTemplate">
          <declaration><![CDATA[public string ItemTemplate]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="PageSize">
          <declaration><![CDATA[public int PageSize]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="PortalSettings">
          <declaration><![CDATA[public PortalSettings PortalSettings]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="41" sc="17" el="43" ec="14">GroupListControl.cs</location>
            <body hash="dd2e106762367af17314815faca0cf19"><![CDATA[{
                return PortalController.GetCurrentPortalSettings();
            }]]></body>
          </codeblock>
        </property>
        <property name="RoleGroupId">
          <declaration><![CDATA[public int RoleGroupId]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="RowFooterTemplate">
          <declaration><![CDATA[public string RowFooterTemplate]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="RowHeaderTemplate">
          <declaration><![CDATA[public string RowHeaderTemplate]]></declaration>
          <documentation>
          </documentation>
        </property>
        <property name="TabId">
          <declaration><![CDATA[public int TabId]]></declaration>
          <documentation>
          </documentation>
        </property>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
</root>