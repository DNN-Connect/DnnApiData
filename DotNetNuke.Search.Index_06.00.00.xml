<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<root file="DotNetNuke.Search.Index.dll" version="06.00.00" generated="2017-06-18 19:44:26Z" generationTime="1.4297011">
  <namespace name="DotNetNuke.Services.Search">
    <class name="ModuleIndexer">
      <declaration><![CDATA[public class ModuleIndexer : IndexingProvider]]></declaration>
      <documentation>-----------------------------------------------------------------------------
 Namespace:  DotNetNuke.Services.Search
 Project:    DotNetNuke.Search.Index
 Class:      ModuleIndexer
 -----------------------------------------------------------------------------
 <summary>
 The ModuleIndexer is an implementation of the abstract IndexingProvider
 class
 </summary>
 <remarks>
 </remarks>
 <history>
 	[cnurse]	11/15/2004	documented
 </history>
 -----------------------------------------------------------------------------</documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public ModuleIndexer()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="GetModuleList">
          <declaration><![CDATA[protected SearchContentModuleInfoCollection GetModuleList(int PortalID)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 GetModuleList gets a collection of SearchContentModuleInfo Items for the Portal
 </summary>
 <remarks>
 Parses the Modules of the Portal, determining whetehr they are searchable.
 </remarks>
 <param name="PortalID">The Id of the Portal</param>
 <history>
 	[cnurse]	11/15/2004	documented
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="106" sc="9" el="167" ec="10">ModuleIndexer.cs</location>
            <body hash="ab5c96bf6fe0e0729d89d704298c06c8"><![CDATA[{
            var Results = new SearchContentModuleInfoCollection();
            var objModules = new ModuleController();
            ArrayList arrModules = objModules.GetSearchModules(PortalID);
            var businessControllers = new Hashtable();
            var htModules = new Hashtable();
            foreach (ModuleInfo objModule in arrModules)
            {
                if (!htModules.ContainsKey(objModule.ModuleID))
                {
                    try
                    {
                        //Check if the business controller is in the Hashtable
                        object objController = businessControllers[objModule.DesktopModule.BusinessControllerClass];
                        if (!String.IsNullOrEmpty(objModule.DesktopModule.BusinessControllerClass))
                        {
							//If nothing create a new instance
                            if (objController == null)
                            {
                                objController = Reflection.CreateObject(objModule.DesktopModule.BusinessControllerClass, objModule.DesktopModule.BusinessControllerClass);
                                
								//Add to hashtable
								businessControllers.Add(objModule.DesktopModule.BusinessControllerClass, objController);
                            }
                            
							//Double-Check that module supports ISearchable
							if (objController is ISearchable)
                            {
                                var ContentInfo = new SearchContentModuleInfo();
                                ContentInfo.ModControllerType = (ISearchable) objController;
                                ContentInfo.ModInfo = objModule;
                                Results.Add(ContentInfo);
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        Instrumentation.DnnLog.Error(ex);

                        try
                        {
                            string strMessage = string.Format("Error Creating BusinessControllerClass '{0}' of module({1}) id=({2}) in tab({3}) and portal({4}) ",
                                                              objModule.DesktopModule.BusinessControllerClass,
                                                              objModule.DesktopModule.ModuleName,
                                                              objModule.ModuleID,
                                                              objModule.TabID,
                                                              objModule.PortalID);
                            throw new Exception(strMessage, ex);
                        }
                        catch (Exception ex1)
                        {
                            Exceptions.Exceptions.LogException(ex1);
                        }
                    }
                    finally
                    {
                        htModules.Add(objModule.ModuleID, objModule.ModuleID);
                    }
                }
            }
            return Results;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetSearchIndexItems">
          <declaration><![CDATA[public override SearchItemInfoCollection GetSearchIndexItems(int PortalID)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 GetSearchIndexItems gets the SearchInfo Items for the Portal
 </summary>
 <remarks>
 </remarks>
 <param name="PortalID">The Id of the Portal</param>
 <history>
 	[cnurse]	11/15/2004	documented
     [vnguyen]   09/07/2010  Modified: Included logic to add TabId to searchItems
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="66" sc="9" el="91" ec="10">ModuleIndexer.cs</location>
            <body hash="af6df1228c718a99dc00d4905b797657"><![CDATA[{
            var SearchItems = new SearchItemInfoCollection();
            SearchContentModuleInfoCollection SearchCollection = GetModuleList(PortalID);
            foreach (SearchContentModuleInfo ScModInfo in SearchCollection)
            {
                try
                {
                    SearchItemInfoCollection myCollection;
                    myCollection = ScModInfo.ModControllerType.GetSearchItems(ScModInfo.ModInfo);
                    if (myCollection != null)
                    {
                        foreach (SearchItemInfo searchItem in myCollection)
                        {
                            searchItem.TabId = ScModInfo.ModInfo.TabID;
                        }

                        SearchItems.AddRange(myCollection);
                    }
                }
                catch (Exception ex)
                {
                    Exceptions.Exceptions.LogException(ex);
                }
            }
            return SearchItems;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="SearchContentModuleInfo">
      <declaration><![CDATA[public class SearchContentModuleInfo]]></declaration>
      <documentation>-----------------------------------------------------------------------------
 Namespace:  DotNetNuke.Services.Search
 Project:    DotNetNuke.Search.Index
 Class:      SearchContentModuleInfo
 -----------------------------------------------------------------------------
 <summary>
 The SearchContentModuleInfo class represents an extendension (by containment)
 of ModuleInfo to add a parametere that determines whether a module is Searchable
 </summary>
 <remarks>
 </remarks>
 <history>
 	[cnurse]	11/15/2004	documented
 </history>
 -----------------------------------------------------------------------------</documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public SearchContentModuleInfo()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
        <field name="m_ModControllerType">
          <declaration><![CDATA[protected ISearchable m_ModControllerType;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="m_ModInfo">
          <declaration><![CDATA[protected ModuleInfo m_ModInfo;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="ModControllerType">
          <declaration><![CDATA[public ISearchable ModControllerType]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="55" sc="13" el="57" ec="14">SearchContentModuleInfo.cs</location>
            <body hash="7e10a7c065e412d6e48d35054b357711"><![CDATA[{
                return m_ModControllerType;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="59" sc="13" el="61" ec="14">SearchContentModuleInfo.cs</location>
            <body hash="4e57c7e717615878611f31268fc37a7c"><![CDATA[{
                m_ModControllerType = value;
            }]]></body>
          </codeblock>
        </property>
        <property name="ModInfo">
          <declaration><![CDATA[public ModuleInfo ModInfo]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="67" sc="13" el="69" ec="14">SearchContentModuleInfo.cs</location>
            <body hash="07bd46a2307ca815a16e30f075ff26f1"><![CDATA[{
                return m_ModInfo;
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="71" sc="13" el="73" ec="14">SearchContentModuleInfo.cs</location>
            <body hash="967338fab14f9606b3484f470940e8a6"><![CDATA[{
                m_ModInfo = value;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="SearchContentModuleInfoCollection">
      <declaration><![CDATA[public class SearchContentModuleInfoCollection : CollectionBase]]></declaration>
      <documentation>-----------------------------------------------------------------------------
 Namespace:  DotNetNuke.Services.Search
 Project:    DotNetNuke.Search.Index
 Class:      SearchContentModuleInfoCollection
 -----------------------------------------------------------------------------
 <summary>
 Represents a collection of <see cref="T:DotNetNuke.Services.Search.SearchContentModuleInfo">SearchContentModuleInfo</see> objects.
 </summary>
 <remarks>
 </remarks>
 <history>
 	[cnurse]	11/15/2004	documented
 </history>
 -----------------------------------------------------------------------------</documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public SearchContentModuleInfoCollection()]]></declaration>
          <documentation>
            <summary>
 Initializes a new instance of the <see cref="T:DotNetNuke.Services.Search.SearchContentModuleInfoCollection">SearchContentModuleInfoCollection</see> class.
 </summary>
          </documentation>
          <codeblock>
            <location sl="53" sc="9" el="55" ec="10">SearchContentModuleInfoCollection.cs</location>
            <body hash="cbf4f0f3accaeabe20c179c97cbb3431"><![CDATA[public SearchContentModuleInfoCollection()
        {
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[public SearchContentModuleInfoCollection(SearchContentModuleInfoCollection value)]]></declaration>
          <documentation>
            <summary>
 Initializes a new instance of the <see cref="T:DotNetNuke.Services.Search.SearchContentModuleInfoCollection">SearchContentModuleInfoCollection</see> class containing the elements of the specified source collection.
 </summary>
 <param name="value">A <see cref="T:DotNetNuke.Services.Search.SearchContentModuleInfoCollection">SearchContentModuleInfoCollection</see> with which to initialize the collection.</param></documentation>
          <codeblock>
            <location sl="61" sc="9" el="64" ec="10">SearchContentModuleInfoCollection.cs</location>
            <body hash="9d072a00646b6e461789b8fa3fd367c4"><![CDATA[public SearchContentModuleInfoCollection(SearchContentModuleInfoCollection value)
        {
            AddRange(value);
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[public SearchContentModuleInfoCollection(SearchContentModuleInfo[] value)]]></declaration>
          <documentation>
            <summary>
 Initializes a new instance of the <see cref="T:DotNetNuke.Services.Search.SearchContentModuleInfoCollection">SearchContentModuleInfoCollection</see> class containing the specified array of <see cref="T:DotNetNuke.Services.Search.SearchContentModuleInfo">SearchContentModuleInfo</see> objects.
 </summary>
 <param name="value">An array of <see cref="T:DotNetNuke.Services.Search.SearchContentModuleInfo">SearchContentModuleInfo</see> objects with which to initialize the collection. </param></documentation>
          <codeblock>
            <location sl="70" sc="9" el="73" ec="10">SearchContentModuleInfoCollection.cs</location>
            <body hash="5ef0bb102ee1ddd13af5fc8031bb23f8"><![CDATA[public SearchContentModuleInfoCollection(SearchContentModuleInfo[] value)
        {
            AddRange(value);
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="Add">
          <declaration><![CDATA[public int Add(SearchContentModuleInfo value)]]></declaration>
          <documentation>
            <summary>
 Add an element of the specified <see cref="T:DotNetNuke.Services.Search.SearchContentModuleInfo">SearchContentModuleInfo</see> to the end of the collection.
 </summary>
 <param name="value">An object of type <see cref="T:DotNetNuke.Services.Search.SearchContentModuleInfo">SearchContentModuleInfo</see> to add to the collection.</param></documentation>
          <codeblock>
            <location sl="106" sc="9" el="108" ec="10">SearchContentModuleInfoCollection.cs</location>
            <body hash="159c8b2f05fc30858504bc9b38381129"><![CDATA[{
            return List.Add(value);
        }]]></body>
          </codeblock>
        </method>
        <method name="AddRange">
          <declaration><![CDATA[public void AddRange(SearchContentModuleInfo[] value)]]></declaration>
          <documentation>
            <summary>
 Copies the elements of the specified <see cref="T:DotNetNuke.Services.Search.SearchContentModuleInfo">SearchContentModuleInfo</see> array to the end of the collection.
 </summary>
 <param name="value">An array of type <see cref="T:DotNetNuke.Services.Search.SearchContentModuleInfo">SearchContentModuleInfo</see> containing the objects to add to the collection.</param></documentation>
          <codeblock>
            <location sl="155" sc="9" el="160" ec="10">SearchContentModuleInfoCollection.cs</location>
            <body hash="04f605741ccc1b21932801fc54fb4c9d"><![CDATA[{
            for (int i = 0; i <= value.Length - 1; i++)
            {
                Add(value[i]);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="AddRange">
          <declaration><![CDATA[public void AddRange(SearchContentModuleInfoCollection value)]]></declaration>
          <documentation>
            <summary>
 Adds the contents of another <see cref="T:DotNetNuke.Services.Search.SearchContentModuleInfoCollection">SearchContentModuleInfoCollection</see> to the end of the collection.
 </summary>
 <param name="value">A <see cref="T:DotNetNuke.Services.Search.SearchContentModuleInfoCollection">SearchContentModuleInfoCollection</see> containing the objects to add to the collection. </param></documentation>
          <codeblock>
            <location sl="167" sc="9" el="172" ec="10">SearchContentModuleInfoCollection.cs</location>
            <body hash="31b6f3690140acf45664e9507982adda"><![CDATA[{
            for (int i = 0; i <= value.Count - 1; i++)
            {
                Add((SearchContentModuleInfo) value.List[i]);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="Contains">
          <declaration><![CDATA[public bool Contains(SearchContentModuleInfo value)]]></declaration>
          <documentation>
            <summary>
 Gets a value indicating whether the collection contains the specified <see cref="T:DotNetNuke.Services.Search.SearchContentModuleInfoCollection">SearchContentModuleInfoCollection</see>.
 </summary>
 <param name="value">The <see cref="T:DotNetNuke.Services.Search.SearchContentModuleInfoCollection">SearchContentModuleInfoCollection</see> to search for in the collection.</param>
 <returns><b>true</b> if the collection contains the specified object; otherwise, <b>false</b>.</returns></documentation>
          <codeblock>
            <location sl="145" sc="9" el="148" ec="10">SearchContentModuleInfoCollection.cs</location>
            <body hash="a711f1b1e932ae476fb0640a27c33f3c"><![CDATA[{
			//If value is not of type SearchContentModuleInfo, this will return false.
            return List.Contains(value);
        }]]></body>
          </codeblock>
        </method>
        <method name="CopyTo">
          <declaration><![CDATA[public void CopyTo(SearchContentModuleInfo[] array, int index)]]></declaration>
          <documentation>
            <summary>
 Copies the collection objects to a one-dimensional <see cref="T:System.Array">Array</see> instance beginning at the specified index.
 </summary>
 <param name="array">The one-dimensional <see cref="T:System.Array">Array</see> that is the destination of the values copied from the collection.</param>
 <param name="index">The index of the array at which to begin inserting.</param></documentation>
          <codeblock>
            <location sl="180" sc="9" el="182" ec="10">SearchContentModuleInfoCollection.cs</location>
            <body hash="3e3aa19131b5327903c6596b619020b4"><![CDATA[{
            List.CopyTo(array, index);
        }]]></body>
          </codeblock>
        </method>
        <method name="IndexOf">
          <declaration><![CDATA[public int IndexOf(SearchContentModuleInfo value)]]></declaration>
          <documentation>
            <summary>
 Gets the index in the collection of the specified <see cref="T:DotNetNuke.Services.Search.SearchContentModuleInfoCollection">SearchContentModuleInfoCollection</see>, if it exists in the collection.
 </summary>
 <param name="value">The <see cref="T:DotNetNuke.Services.Search.SearchContentModuleInfoCollection">SearchContentModuleInfoCollection</see> to locate in the collection.</param>
 <returns>The index in the collection of the specified object, if found; otherwise, -1.</returns></documentation>
          <codeblock>
            <location sl="116" sc="9" el="118" ec="10">SearchContentModuleInfoCollection.cs</location>
            <body hash="f4423ee35eb0ad36d01cb102b34e7dd2"><![CDATA[{
            return List.IndexOf(value);
        }]]></body>
          </codeblock>
        </method>
        <method name="Insert">
          <declaration><![CDATA[public void Insert(int index, SearchContentModuleInfo value)]]></declaration>
          <documentation>
            <summary>
 Add an element of the specified <see cref="T:DotNetNuke.Services.Search.SearchContentModuleInfo">SearchContentModuleInfo</see> to the collection at the designated index.
 </summary>
 <param name="index">An <see cref="T:System.Int32">Integer</see> to indicate the location to add the object to the collection.</param>
 <param name="value">An object of type <see cref="T:DotNetNuke.Services.Search.SearchContentModuleInfo">SearchContentModuleInfo</see> to add to the collection.</param></documentation>
          <codeblock>
            <location sl="126" sc="9" el="128" ec="10">SearchContentModuleInfoCollection.cs</location>
            <body hash="29d857179ece5d364c408e998bc9afb6"><![CDATA[{
            List.Insert(index, value);
        }]]></body>
          </codeblock>
        </method>
        <method name="Remove">
          <declaration><![CDATA[public void Remove(SearchContentModuleInfo value)]]></declaration>
          <documentation>
            <summary>
 Remove the specified object of type <see cref="T:DotNetNuke.Services.Search.SearchContentModuleInfo">SearchContentModuleInfo</see> from the collection.
 </summary>
 <param name="value">An object of type <see cref="T:DotNetNuke.Services.Search.SearchContentModuleInfo">SearchContentModuleInfo</see> to remove to the collection.</param></documentation>
          <codeblock>
            <location sl="135" sc="9" el="137" ec="10">SearchContentModuleInfoCollection.cs</location>
            <body hash="5f06fe14d0312ed42ccd87d3bd3fa13e"><![CDATA[{
            List.Remove(value);
        }]]></body>
          </codeblock>
        </method>
        <method name="ToArray">
          <declaration><![CDATA[public SearchContentModuleInfo[] ToArray()]]></declaration>
          <documentation>
            <summary>
 Creates a one-dimensional <see cref="T:System.Array">Array</see> instance containing the collection items.
 </summary>
 <returns>Array of type SearchContentModuleInfo</returns></documentation>
          <codeblock>
            <location sl="189" sc="9" el="193" ec="10">SearchContentModuleInfoCollection.cs</location>
            <body hash="500a84cb907f814ace07e5f5b167a0a9"><![CDATA[{
            var arr = new SearchContentModuleInfo[Count];
            CopyTo(arr, 0);
            return arr;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="Item">
          <declaration><![CDATA[public SearchContentModuleInfo this[int index]]]></declaration>
          <documentation>
            <summary>
 Gets the <see cref="T:DotNetNuke.Services.Search.SearchContentModuleInfoCollection">SearchContentModuleInfoCollection</see> at the specified index in the collection.
 <para>
 In VB.Net, this property is the indexer for the <see cref="T:DotNetNuke.Services.Search.SearchContentModuleInfoCollection">SearchContentModuleInfoCollection</see> class.
 </para>
 </summary>
          </documentation>
          <codeblock>
            <location sl="88" sc="13" el="90" ec="14">SearchContentModuleInfoCollection.cs</location>
            <body hash="3f63b53c34e59ebe384105391e740a87"><![CDATA[{
                return (SearchContentModuleInfo) List[index];
            }]]></body>
          </codeblock>
          <codeblock>
            <location sl="92" sc="13" el="94" ec="14">SearchContentModuleInfoCollection.cs</location>
            <body hash="317ffc941817052353a1a004fbfa9af4"><![CDATA[{
                List[index] = value;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
</root>