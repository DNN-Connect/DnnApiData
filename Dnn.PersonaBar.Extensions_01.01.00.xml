<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<root file="Dnn.PersonaBar.Extensions.dll" version="01.01.00" generated="2017-08-10 12:34:25Z" generationTime="10.5145295">
  <namespace name="">
    <class name="&lt;PrivateImplementationDetails&gt;">
      <declaration><![CDATA[internal sealed class <PrivateImplementationDetails>]]></declaration>
      <documentation>
      </documentation>
      <constructors>
      </constructors>
      <methods>
        <method name="ComputeStringHash">
          <declaration><![CDATA[internal static uint ComputeStringHash(string s)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="Dnn.PersonaBar.Extensions.Components">
    <class name="Constants">
      <declaration><![CDATA[public class Constants]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public Constants()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
        <field name="DefaultAuthenicationImage">
          <declaration><![CDATA[internal const string DefaultAuthenicationImage = "icon_authentication.png";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="DefaultContainerImage">
          <declaration><![CDATA[internal const string DefaultContainerImage = "icon_container.gif";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="DefaultDashboardImage">
          <declaration><![CDATA[internal const string DefaultDashboardImage = "icon_dashboard.png";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="DefaultExtensionImage">
          <declaration><![CDATA[internal const string DefaultExtensionImage = "icon_extensions_32px.png";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="DefaultLanguageImage">
          <declaration><![CDATA[internal const string DefaultLanguageImage = "icon_languagePack.gif";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="DefaultLibraryImage">
          <declaration><![CDATA[internal const string DefaultLibraryImage = "icon_library.png";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="DefaultProviderImage">
          <declaration><![CDATA[internal const string DefaultProviderImage = "icon_provider.gif";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="DefaultSkinImage">
          <declaration><![CDATA[internal const string DefaultSkinImage = "icon_skin.gif";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="DefaultWidgetImage">
          <declaration><![CDATA[internal const string DefaultWidgetImage = "icon_widget.png";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="DnnAuthTypeName">
          <declaration><![CDATA[internal const string DnnAuthTypeName = "DNN";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="SharedResources">
          <declaration><![CDATA[internal const string SharedResources = "~/DesktopModules/admin/Dnn.PersonaBar//Modules/Dnn.Extensions/App_LocalResources/Extensions.resx";]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="CreateModuleController">
      <declaration><![CDATA[public class CreateModuleController : ServiceLocator<ICreateModuleController, CreateModuleController>, ICreateModuleController]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public CreateModuleController()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="CreateControl">
          <declaration><![CDATA[private string CreateControl(CreateModuleDto createModuleDto)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="330" sc="9" el="351" ec="10">Components\CreateModuleController.cs</location>
            <body hash="29ca087ae9331a75708c23d41924884d"><![CDATA[{
            var folder = PathUtils.Instance.RemoveTrailingSlash(GetSourceFolder(createModuleDto));
            var className = GetClassName(createModuleDto);
            var moduleControlPath = Path.Combine(Globals.ApplicationMapPath, "DesktopModules/" + folder + "/" + createModuleDto.FileName);
            var message = Null.NullString;

            var source = string.Format(LoadControlTemplate(), createModuleDto.Language, className);

            //reset attributes
            if (File.Exists(moduleControlPath))
            {
                message = "FileExists";
            }
            else
            {
                using (var stream = File.CreateText(moduleControlPath))
                {
                    stream.WriteLine(source);
                }
            }
            return message;
        }]]></body>
          </codeblock>
        </method>
        <method name="CreateModule">
          <declaration><![CDATA[public int CreateModule(CreateModuleDto createModuleDto, out string newPageUrl, out string errorMessage)]]></declaration>
          <documentation>
            <summary>
 create new module.
 </summary>
 <param name="createModuleDto"></param>
 <param name="newPageUrl"></param>
 <param name="errorMessage"></param>
 <returns>return the new package id.</returns></documentation>
          <codeblock>
            <location sl="35" sc="9" el="53" ec="10">Components\CreateModuleController.cs</location>
            <body hash="a86f36705f0b278f2d1747aabca484ce"><![CDATA[{
            errorMessage = string.Empty;
            newPageUrl = string.Empty;
            var packageId = Null.NullInteger;
            switch (createModuleDto.Type)
            {
                case CreateModuleType.New:
                    packageId = CreateNewModule(createModuleDto, out newPageUrl, out errorMessage);
                    break;
                case CreateModuleType.Control:
                    packageId = CreateModuleFromControl(createModuleDto, out newPageUrl, out errorMessage);
                    break;
                case CreateModuleType.Manifest:
                    packageId = CreateModuleFromManifest(createModuleDto, out newPageUrl, out errorMessage);
                    break;
            }

            return packageId;
        }]]></body>
          </codeblock>
        </method>
        <method name="CreateModuleFromControl">
          <declaration><![CDATA[private int CreateModuleFromControl(CreateModuleDto createModuleDto, out string newPageUrl, out string errorMessage)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="123" sc="9" el="222" ec="10">Components\CreateModuleController.cs</location>
            <body hash="8f13175b8eb2afea892b08b88ad12b32"><![CDATA[{
            newPageUrl = string.Empty;
            errorMessage = string.Empty;
            if (string.IsNullOrEmpty(createModuleDto.FileName))
            {
                errorMessage = "NoControl";
                return Null.NullInteger;
            }

            try
            {
                var folder = PathUtils.Instance.RemoveTrailingSlash(GetSourceFolder(createModuleDto));
                var friendlyName = createModuleDto.ModuleName;
                var name = createModuleDto.ModuleName;
                var moduleControl = "DesktopModules/" + folder + "/" + createModuleDto.FileName;

                var packageInfo = PackageController.Instance.GetExtensionPackage(Null.NullInteger, p =>
                                    p.Name.Equals(createModuleDto.ModuleName, StringComparison.InvariantCultureIgnoreCase)
                                     || p.FriendlyName.Equals(createModuleDto.ModuleName, StringComparison.InvariantCultureIgnoreCase));
                if (packageInfo != null)
                {
                    errorMessage = "NonuniqueName";
                    return Null.NullInteger;
                }

                var package = new PackageInfo
                {
                    Name = name,
                    FriendlyName = friendlyName,
                    Description = createModuleDto.Description,
                    Version = new Version(1, 0, 0),
                    PackageType = "Module",
                    License = Util.PACKAGE_NoLicense
                };

                //Save Package
                PackageController.Instance.SaveExtensionPackage(package);

                var objDesktopModule = new DesktopModuleInfo
                {
                    DesktopModuleID = Null.NullInteger,
                    ModuleName = name,
                    FolderName = folder,
                    FriendlyName = friendlyName,
                    Description = createModuleDto.Description,
                    IsPremium = false,
                    IsAdmin = false,
                    Version = "01.00.00",
                    BusinessControllerClass = "",
                    CompatibleVersions = "",
                    Dependencies = "",
                    Permissions = "",
                    PackageID = package.PackageID
                };

                objDesktopModule.DesktopModuleID = DesktopModuleController.SaveDesktopModule(objDesktopModule, false, true);

                //Add module to all portals
                DesktopModuleController.AddDesktopModuleToPortals(objDesktopModule.DesktopModuleID);

                //Save module definition
                var moduleDefinition = new ModuleDefinitionInfo();

                moduleDefinition.ModuleDefID = Null.NullInteger;
                moduleDefinition.DesktopModuleID = objDesktopModule.DesktopModuleID;
                moduleDefinition.FriendlyName = friendlyName;
                moduleDefinition.DefaultCacheTime = 0;

                moduleDefinition.ModuleDefID = ModuleDefinitionController.SaveModuleDefinition(moduleDefinition, false, true);

                //Save module control
                var objModuleControl = new ModuleControlInfo();

                objModuleControl.ModuleControlID = Null.NullInteger;
                objModuleControl.ModuleDefID = moduleDefinition.ModuleDefID;
                objModuleControl.ControlKey = "";
                objModuleControl.ControlSrc = moduleControl;
                objModuleControl.ControlTitle = "";
                objModuleControl.ControlType = SecurityAccessLevel.View;
                objModuleControl.HelpURL = "";
                objModuleControl.IconFile = "";
                objModuleControl.ViewOrder = 0;
                objModuleControl.SupportsPartialRendering = false;

                ModuleControlController.AddModuleControl(objModuleControl);

                if (createModuleDto.AddPage)
                {
                    newPageUrl = CreateNewPage(moduleDefinition);
                }

                return package.PackageID;
            }
            catch (Exception ex)
            {
                Exceptions.LogException(ex);
                errorMessage = "CreateModuleFailed";
                return Null.NullInteger;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="CreateModuleFromManifest">
          <declaration><![CDATA[private int CreateModuleFromManifest(CreateModuleDto createModuleDto, out string newPageUrl, out string errorMessage)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="225" sc="9" el="283" ec="10">Components\CreateModuleController.cs</location>
            <body hash="fa01e07e3c377ec55b8ea846455f85f3"><![CDATA[{
            newPageUrl = string.Empty;
            errorMessage = string.Empty;
            if (string.IsNullOrEmpty(createModuleDto.Manifest))
            {
                errorMessage = "MissingManifest";
                return Null.NullInteger;
            }

            try
            {
                var folder = PathUtils.Instance.RemoveTrailingSlash(GetSourceFolder(createModuleDto));
                var manifest = Path.Combine(Globals.ApplicationMapPath, "~/DesktopModules/" + folder + "/" + createModuleDto.Manifest);
                var installer = new Installer(manifest, Globals.ApplicationMapPath, true);

                if (installer.IsValid)
                {
                    installer.InstallerInfo.Log.Logs.Clear();
                    installer.Install();

                    if (installer.IsValid)
                    {
                        if (createModuleDto.AddPage)
                        {
                            var desktopModule =
                                DesktopModuleController.GetDesktopModuleByPackageID(installer.InstallerInfo.PackageID);
                            if (desktopModule != null && desktopModule.ModuleDefinitions.Count > 0)
                            {
                                foreach (var kvp in desktopModule.ModuleDefinitions)
                                {
                                    var moduleDefinition = kvp.Value;

                                    newPageUrl = CreateNewPage(moduleDefinition);
                                    break;
                                }
                            }
                        }

                        return installer.InstallerInfo.PackageID;
                    }
                    else
                    {
                        errorMessage = "InstallError";
                        return Null.NullInteger;
                    }
                }
                else
                {
                    errorMessage = "InstallError";
                    return Null.NullInteger;
                }
            }
            catch (Exception ex)
            {
                Exceptions.LogException(ex);
                errorMessage = "CreateModuleFailed";
                return Null.NullInteger;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="CreateNewModule">
          <declaration><![CDATA[private int CreateNewModule(CreateModuleDto createModuleDto, out string newPageUrl, out string errorMessage)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="56" sc="9" el="120" ec="10">Components\CreateModuleController.cs</location>
            <body hash="c1739102621ffc4c35c35aee7c76cd91"><![CDATA[{
            newPageUrl = string.Empty;
            errorMessage = string.Empty;
            if (string.IsNullOrEmpty(createModuleDto.ModuleFolder))
            {
                errorMessage = "NoModuleFolder";
                return Null.NullInteger;
            }

            if (string.IsNullOrEmpty(createModuleDto.Language))
            {
                errorMessage = "LanguageError";
                return Null.NullInteger;
            }

            //remove spaces so file is created correctly
            var controlSrc = createModuleDto.FileName.Replace(" ", "");
            if (InvalidFilename(controlSrc))
            {
                errorMessage = "InvalidFilename";
                return Null.NullInteger;
            }

            if (String.IsNullOrEmpty(controlSrc))
            {
                errorMessage = "MissingControl";
                return Null.NullInteger;
            }
            if (String.IsNullOrEmpty(createModuleDto.ModuleName))
            {
                errorMessage = "MissingFriendlyname";
                return Null.NullInteger;
            }
            if (!controlSrc.EndsWith(".ascx"))
            {
                controlSrc += ".ascx";
            }

            var uniqueName = true;
            foreach (var package in PackageController.Instance.GetExtensionPackages(Null.NullInteger))
            {
                if (package.Name.Equals(createModuleDto.ModuleName, StringComparison.InvariantCultureIgnoreCase) 
                    || package.FriendlyName.Equals(createModuleDto.ModuleName, StringComparison.InvariantCultureIgnoreCase))
                {
                    uniqueName = false;
                    break;
                }
            }

            if (!uniqueName)
            {
                errorMessage = "NonuniqueName";
                return Null.NullInteger;
            }
            //First create the control
            createModuleDto.FileName = controlSrc;
            var message = CreateControl(createModuleDto);
            if (string.IsNullOrEmpty(message))
            {
                //Next import the control
                return CreateModuleFromControl(createModuleDto, out newPageUrl, out errorMessage);
            }

            return Null.NullInteger;
        }]]></body>
          </codeblock>
        </method>
        <method name="CreateNewPage">
          <declaration><![CDATA[private string CreateNewPage(ModuleDefinitionInfo moduleDefinition)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="286" sc="9" el="321" ec="10">Components\CreateModuleController.cs</location>
            <body hash="280237e4a4b38734a6b48a63892fd933"><![CDATA[{
            if (PortalSettings.Current == null)
            {
                return string.Empty;
            }

            var portalId = PortalSettings.Current.PortalId;
            var tabName = "Test " + moduleDefinition.FriendlyName + " Page";
            var tabPath = Globals.GenerateTabPath(Null.NullInteger, tabName);
            var tabId = TabController.GetTabByTabPath(portalId, tabPath, Null.NullString);
            if (tabId == Null.NullInteger)
            {
                //Create a new page
                var newTab = new TabInfo();
                newTab.TabName = tabName;
                newTab.ParentId = Null.NullInteger;
                newTab.PortalID = portalId;
                newTab.IsVisible = true;
                newTab.TabID = TabController.Instance.AddTabBefore(newTab, PortalSettings.Current.AdminTabId);
                var objModule = new ModuleInfo();
                objModule.Initialize(portalId);
                objModule.PortalID = portalId;
                objModule.TabID = newTab.TabID;
                objModule.ModuleOrder = Null.NullInteger;
                objModule.ModuleTitle = moduleDefinition.FriendlyName;
                objModule.PaneName = Globals.glbDefaultPane;
                objModule.ModuleDefID = moduleDefinition.ModuleDefID;
                objModule.InheritViewPermissions = true;
                objModule.AllTabs = false;
                ModuleController.Instance.AddModule(objModule);

                return Globals.NavigateURL(newTab.TabID);
            }

            return string.Empty;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetClassName">
          <declaration><![CDATA[private string GetClassName(CreateModuleDto createModuleDto)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="375" sc="9" el="387" ec="10">Components\CreateModuleController.cs</location>
            <body hash="9336cd8ba06cdf892fe80c416447d15a"><![CDATA[{
            var className = Null.NullString;
            if (!String.IsNullOrEmpty(createModuleDto.OwnerFolder))
            {
                className += createModuleDto.OwnerFolder + ".";
            }
            if (!String.IsNullOrEmpty(createModuleDto.ModuleFolder))
            {
                className += createModuleDto.ModuleFolder;
            }
            //return class and remove any spaces that might appear in folder structure
            return className.Replace(" ", "");
        }]]></body>
          </codeblock>
        </method>
        <method name="GetFactory">
          <declaration><![CDATA[protected override Func<ICreateModuleController> GetFactory()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="23" sc="9" el="25" ec="10">Components\CreateModuleController.cs</location>
            <body hash="76e987ae6bd0c0029d5839cbf5cbd4f6"><![CDATA[{
            return () => new CreateModuleController();
        }]]></body>
          </codeblock>
        </method>
        <method name="GetSourceFolder">
          <declaration><![CDATA[private string GetSourceFolder(CreateModuleDto createModuleDto)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="361" sc="9" el="372" ec="10">Components\CreateModuleController.cs</location>
            <body hash="17af18aae930580866bbd16e69f6cff8"><![CDATA[{
            var folder = Null.NullString;
            if (!string.IsNullOrEmpty(createModuleDto.OwnerFolder))
            {
                folder += createModuleDto.OwnerFolder + "/";
            }
            if (!string.IsNullOrEmpty(createModuleDto.ModuleFolder))
            {
                folder += createModuleDto.ModuleFolder + "/";
            }
            return folder;
        }]]></body>
          </codeblock>
        </method>
        <method name="InvalidFilename">
          <declaration><![CDATA[private static bool InvalidFilename(string fileName)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="324" sc="9" el="327" ec="10">Components\CreateModuleController.cs</location>
            <body hash="233493f6a87759dfd164c70370735811"><![CDATA[{
            var invalidFilenameChars = RegexUtils.GetCachedRegex("[" + Regex.Escape(new string(Path.GetInvalidFileNameChars())) + "]");
            return invalidFilenameChars.IsMatch(fileName);
        }]]></body>
          </codeblock>
        </method>
        <method name="LoadControlTemplate">
          <declaration><![CDATA[private string LoadControlTemplate()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="354" sc="9" el="358" ec="10">Components\CreateModuleController.cs</location>
            <body hash="785378af5042863043f94f38567f1033"><![CDATA[{
            var personaBarFolder = Library.Constants.PersonaBarRelativePath.Replace("~/", "");
            var filePath = Path.Combine(Globals.ApplicationMapPath, personaBarFolder, "Modules/Dnn.Extensions/data/ModuleControlTemplate.resources");
            return File.ReadAllText(filePath, Encoding.UTF8);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="CreateModuleType">
      <declaration><![CDATA[public enum CreateModuleType]]></declaration>
      <documentation>
      </documentation>
      <constructors>
      </constructors>
      <methods>
      </methods>
      <fields>
        <field name="Control">
          <declaration><![CDATA[public const CreateModuleType Control = 1;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Manifest">
          <declaration><![CDATA[public const CreateModuleType Manifest = 2;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="New">
          <declaration><![CDATA[public const CreateModuleType New = 0;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="ExtensionsController">
      <declaration><![CDATA[public class ExtensionsController]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public ExtensionsController()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="AddChildTabsToList">
          <declaration><![CDATA[private static void AddChildTabsToList(TabInfo currentTab, ref TabCollection allPortalTabs, ref IDictionary<int, TabInfo> tabsWithModule, ref IDictionary<int, TabInfo> tabsInOrder)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="388" sc="9" el="399" ec="10">Components\ExtensionsController.cs</location>
            <body hash="05facd522e27caae59dac4a817c9c235"><![CDATA[{
            if ((tabsWithModule.ContainsKey(currentTab.TabID) && !tabsInOrder.ContainsKey(currentTab.TabID)))
            {
                //add current tab
                tabsInOrder.Add(currentTab.TabID, currentTab);
                //add children of current tab
                foreach (TabInfo tab in allPortalTabs.WithParentId(currentTab.TabID))
                {
                    AddChildTabsToList(tab, ref allPortalTabs, ref tabsWithModule, ref tabsInOrder);
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="AddModulesToList">
          <declaration><![CDATA[private static void AddModulesToList(int portalId, List<PackageInfo> packages)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="286" sc="9" el="293" ec="10">Components\ExtensionsController.cs</location>
            <body hash="0c62d46ba91c18628280af7d8e0de478"><![CDATA[{
            Dictionary<int, PortalDesktopModuleInfo> portalModules = DesktopModuleController.GetPortalDesktopModulesByPortalID(portalId);
            packages.AddRange(from modulePackage in PackageController.Instance.GetExtensionPackages(Null.NullInteger, p => p.PackageType == "Module")
                              let desktopModule = DesktopModuleController.GetDesktopModuleByPackageID(modulePackage.PackageID)
                              from portalModule in portalModules.Values
                              where desktopModule != null && portalModule.DesktopModuleID == desktopModule.DesktopModuleID
                              select modulePackage);
        }]]></body>
          </codeblock>
        </method>
        <method name="BuildData">
          <declaration><![CDATA[private static IDictionary<int, TabInfo> BuildData(int portalId, int packageId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="374" sc="9" el="385" ec="10">Components\ExtensionsController.cs</location>
            <body hash="fb117dac36f483d5c4e4fbad4e5b1728"><![CDATA[{
            IDictionary<int, TabInfo> tabsWithModule = TabController.Instance.GetTabsByPackageID(portalId, packageId, false);
            TabCollection allPortalTabs = TabController.Instance.GetTabsByPortal(portalId);
            IDictionary<int, TabInfo> tabsInOrder = new Dictionary<int, TabInfo>();

            //must get each tab, they parent may not exist
            foreach (TabInfo tab in allPortalTabs.Values)
            {
                AddChildTabsToList(tab, ref allPortalTabs, ref tabsWithModule, ref tabsInOrder);
            }
            return tabsInOrder;
        }]]></body>
          </codeblock>
        </method>
        <method name="FixIconUrl">
          <declaration><![CDATA[private static string FixIconUrl(string url)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="362" sc="9" el="366" ec="10">Components\ExtensionsController.cs</location>
            <body hash="634d956d141e0437bc48ce14f0971f7b"><![CDATA[{
            return !string.IsNullOrEmpty(Globals.ApplicationPath)
                ? $"{Globals.ApplicationPath}/{url.TrimStart('~').TrimStart('/')}"
                : url;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetAvaialableLanguagePacks">
          <declaration><![CDATA[private void GetAvaialableLanguagePacks(IDictionary<string, PackageInfo> validPackages)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="166" sc="9" el="238" ec="10">Components\ExtensionsController.cs</location>
            <body hash="4307fc02a5c81ea2e01903243e01717e"><![CDATA[{
            try
            {
                StreamReader myResponseReader = UpdateService.GetLanguageList();
                var xmlDoc = new XmlDocument();
                xmlDoc.Load(myResponseReader);
                XmlNodeList languages = xmlDoc.SelectNodes("available/language");

                if (languages != null)
                {
                    var installedPackages = PackageController.Instance.GetExtensionPackages(Null.NullInteger, p => p.PackageType == "CoreLanguagePack");
                    var installedLanguages = installedPackages.Select(package => LanguagePackController.GetLanguagePackByPackage(package.PackageID)).ToList();
                    foreach (XmlNode language in languages)
                    {
                        string cultureCode = "";
                        string version = "";
                        foreach (XmlNode child in language.ChildNodes)
                        {
                            if (child.Name == "culturecode")
                            {
                                cultureCode = child.InnerText;
                            }

                            if (child.Name == "version")
                            {
                                version = child.InnerText;
                            }
                        }
                        if (!string.IsNullOrEmpty(cultureCode) && !string.IsNullOrEmpty(version) && version.Length == 6)
                        {
                            var myCIintl = new CultureInfo(cultureCode, true);
                            version = version.Insert(4, ".").Insert(2, ".");
                            var package = new PackageInfo { Owner = OwnerUpdateService, Name = "LanguagePack-" + myCIintl.Name, FriendlyName = myCIintl.NativeName };
                            package.Name = myCIintl.NativeName;
                            package.PackageType = "CoreLanguagePack";
                            package.Description = cultureCode;
                            Version ver = null;
                            Version.TryParse(version, out ver);
                            package.Version = ver;

                            if (
                                installedLanguages.Any(
                                    l =>
                                    LocaleController.Instance.GetLocale(l.LanguageID).Code.ToLowerInvariant().Equals(cultureCode.ToLowerInvariant())
                                    && installedPackages.First(p => p.PackageID == l.PackageID).Version >= ver))
                            {
                                continue;
                            }

                            if (validPackages.Values.Any(p => p.Name == package.Name))
                            {
                                var existPackage = validPackages.Values.First(p => p.Name == package.Name);
                                if (package.Version > existPackage.Version)
                                {
                                    validPackages.Values.Remove(existPackage);
                                    validPackages.Add(cultureCode, package);
                                }
                            }
                            else
                            {
                                validPackages.Add(cultureCode, package);
                            }
                        }
                    }
                }
            }
            catch (Exception)
            {
                //suppress for now - need to decide what to do when webservice is unreachable
                //throw;
                //same problem happens in InstallWizard.aspx.cs in BindLanguageList method
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetAvailablePackages">
          <declaration><![CDATA[public List<AvailablePackagesDto> GetAvailablePackages(string packageType)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="134" sc="9" el="163" ec="10">Components\ExtensionsController.cs</location>
            <body hash="43138cee5155805a1d3ebfe1c0189f95"><![CDATA[{
            var packages = new List<AvailablePackagesDto>();
            string packagePath;
            if (HasAvailablePackage(packageType, out packagePath))
            {
                var validpackages = new Dictionary<string, PackageInfo>();
                var invalidPackages = new List<string>();

                foreach (string file in Directory.GetFiles(packagePath))
                {
                    if (file.ToLower().EndsWith(".zip") || file.ToLower().EndsWith(".resources"))
                    {
                        PackageController.ParsePackage(file, packagePath, validpackages, invalidPackages);
                    }
                }

                if (packageType.ToLowerInvariant() == "corelanguagepack")
                {
                    GetAvaialableLanguagePacks(validpackages);
                }

                packages.Add(new AvailablePackagesDto()
                {
                    PackageType = packageType,
                    ValidPackages = validpackages.Values.Select(p => new PackageInfoSlimDto(Null.NullInteger, p)).ToList(),
                    InvalidPackages = invalidPackages
                });
            }
            return packages;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetFormattedTabLink">
          <declaration><![CDATA[public string GetFormattedTabLink(int portalId, TabInfo tab)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="251" sc="9" el="281" ec="10">Components\ExtensionsController.cs</location>
            <body hash="eeea5b2928dbc5d0f6926588dffd75e3"><![CDATA[{
            var returnValue = new StringBuilder();

            int index = 0;
            TabController.Instance.PopulateBreadCrumbs(ref tab);
            foreach (TabInfo t in tab.BreadCrumbs)
            {
                if (index > 0)
                {
                    returnValue.Append(" &gt; ");
                }
                if (index < tab.BreadCrumbs.Count - 1)
                {
                    returnValue.AppendFormat("{0}", t.LocalizedTabName);
                }
                else
                {
                    //use the current portal alias for host tabs
                    var alias = t.PortalID == Null.NullInteger || t.PortalID == portalId
                                    ? PortalSettings.Current.PortalAlias
                                    : PortalAliasController.Instance.GetPortalAliasesByPortalId(t.PortalID)
                                                            .OrderBy(pa => pa.IsPrimary ? 0 : 1)
                                                            .First();
                    var url = Globals.NavigateURL(t.TabID, new PortalSettings(t.PortalID, alias), string.Empty);
                    returnValue.AppendFormat("<a href=\"{0}\">{1}</a>", url, t.LocalizedTabName);
                }
                index = index + 1;
            }

            return returnValue.ToString();
        }]]></body>
          </codeblock>
        </method>
        <method name="GetInstalledPackages">
          <declaration><![CDATA[public IList<PackageInfoSlimDto> GetInstalledPackages(int portalId, string packageType)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="105" sc="9" el="131" ec="10">Components\ExtensionsController.cs</location>
            <body hash="5fc34bb645cbb60389eaaa45bb599062"><![CDATA[{
            var typePackages = new List<PackageInfo>();
            switch (packageType.ToLowerInvariant())
            {
                case "module":
                    if (portalId == Null.NullInteger)
                    {
                        typePackages = PackageController.Instance.GetExtensionPackages(
                            Null.NullInteger, p => "Module".Equals(p.PackageType, StringComparison.InvariantCultureIgnoreCase)).ToList();
                    }
                    else
                    {
                        AddModulesToList(portalId, typePackages);
                    }
                    break;
                case "skin":
                case "container":
                    typePackages = PackageController.Instance.GetExtensionPackages(portalId, p => p.PackageType == packageType).ToList();
                    break;
                default:
                    typePackages = PackageController.Instance.GetExtensionPackages(Null.NullInteger, p => p.PackageType == packageType).ToList();
                    break;
            }

            var typePackageDtos = typePackages.Select(p => new PackageInfoSlimDto(portalId, p));
            return typePackageDtos.ToList();
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPackageIcon">
          <declaration><![CDATA[internal static string GetPackageIcon(PackageInfo package)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="332" sc="9" el="359" ec="10">Components\ExtensionsController.cs</location>
            <body hash="cd5db767a55a4f0ff9fdef4e87421d18"><![CDATA[{
            switch (package.PackageType.ToLowerInvariant())
            {
                case "module":
                    return IconExists(package.IconFile) ? FixIconUrl(package.IconFile) : Globals.ImagePath + Constants.DefaultExtensionImage;
                case "container":
                    return IconExists(package.IconFile) ? FixIconUrl(package.IconFile) : Globals.ImagePath + Constants.DefaultContainerImage;
                case "skin":
                case "skinobject":
                    return IconExists(package.IconFile) ? FixIconUrl(package.IconFile) : Globals.ImagePath + Constants.DefaultSkinImage;
                case "authenticationsystem":
                case "auth_system":
                    return IconExists(package.IconFile) ? FixIconUrl(package.IconFile) : Globals.ImagePath + Constants.DefaultAuthenicationImage;
                case "corelanguagepack":
                case "extensionlanguagepack":
                    return package.IconFile != "N\\A"  && IconExists(package.IconFile) ? FixIconUrl(package.IconFile) : Globals.ImagePath + Constants.DefaultLanguageImage;
                case "provider":
                    return IconExists(package.IconFile) ? FixIconUrl(package.IconFile) : Globals.ImagePath + Constants.DefaultProviderImage;
                case "widget":
                    return IconExists(package.IconFile) ? FixIconUrl(package.IconFile) : Globals.ImagePath + Constants.DefaultWidgetImage;
                case "dashboardcontrol":
                    return IconExists(package.IconFile) ? FixIconUrl(package.IconFile) : Globals.ImagePath + Constants.DefaultDashboardImage;
                case "library":
                    return IconExists(package.IconFile) ? FixIconUrl(package.IconFile) : Globals.ImagePath + Constants.DefaultLibraryImage;
                default:
                    return IconExists(package.IconFile) ? FixIconUrl(package.IconFile) : Globals.ImagePath + Constants.DefaultExtensionImage;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPackagesInUse">
          <declaration><![CDATA[internal static IDictionary<int, PackageInfo> GetPackagesInUse(bool forHost)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="369" sc="9" el="371" ec="10">Components\ExtensionsController.cs</location>
            <body hash="34db5c1d6c21e322a4363a017b7e7b23"><![CDATA[{
            return PackageController.GetModulePackagesInUse(PortalController.Instance.GetCurrentPortalSettings().PortalId, forHost);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPackageTypes">
          <declaration><![CDATA[public IDictionary<string, PackageType> GetPackageTypes()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="52" sc="9" el="59" ec="10">Components\ExtensionsController.cs</location>
            <body hash="52621810a10d33b1c168ea3786d0a963"><![CDATA[{
            IDictionary<string, PackageType> installedPackageTypes = new Dictionary<string, PackageType>();
            foreach (var packageType in PackageController.Instance.GetExtensionPackageTypes())
            {
                installedPackageTypes[packageType.PackageType] = packageType;
            }
            return installedPackageTypes;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPackageUsage">
          <declaration><![CDATA[public List<TabInfo> GetPackageUsage(int portalId, int packageId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="241" sc="9" el="248" ec="10">Components\ExtensionsController.cs</location>
            <body hash="9defa7b857df4afcf662f4ebbd3009c1"><![CDATA[{
            IDictionary<int, TabInfo> tabs = BuildData(portalId, packageId);
            if (tabs != null && tabs.Count > 0)
            {
                return tabs.Values.ToList();
            }
            return null;
        }]]></body>
          </codeblock>
        </method>
        <method name="HasAvailablePackage">
          <declaration><![CDATA[public bool HasAvailablePackage(string packageType, out string rootPath)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="62" sc="9" el="102" ec="10">Components\ExtensionsController.cs</location>
            <body hash="2c5e1fc22590f0afa2342a0fcd5c4a4c"><![CDATA[{
            var type = packageType;
            switch (packageType.ToLowerInvariant())
            {
                case "authsystem":
                case "auth_system":
                    type = PackageTypes.AuthSystem.ToString();
                    rootPath = Globals.ApplicationMapPath + "\\Install\\AuthSystem";
                    break;
                case "javascriptlibrary":
                case "javascript_library":
                    rootPath = Globals.ApplicationMapPath + "\\Install\\JavaScriptLibrary";
                    break;
                case "extensionlanguagepack":
                    type = PackageTypes.Language.ToString();
                    rootPath = Globals.ApplicationMapPath + "\\Install\\Language";
                    break;
                case "corelanguagepack":
                    rootPath = Globals.ApplicationMapPath + "\\Install\\Language";
                    return true; //core languages should always marked as have available packages.
                case "module":
                case "skin":
                case "container":
                case "provider":
                case "library":
                    rootPath = Globals.ApplicationMapPath + "\\Install\\" + packageType;
                    break;
                default:
                    type = string.Empty;
                    rootPath = string.Empty;
                    break;
            }
            if (!string.IsNullOrEmpty(type) && Directory.Exists(rootPath) &&
                (Directory.GetFiles(rootPath, "*.zip").Length > 0 ||
                    Directory.GetFiles(rootPath, "*.resources").Length > 0))
            {
                return true;
            }

            return false;
        }]]></body>
          </codeblock>
        </method>
        <method name="IconExists">
          <declaration><![CDATA[private static bool IconExists(string imagePath)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="402" sc="9" el="418" ec="10">Components\ExtensionsController.cs</location>
            <body hash="360b1df5852bc52c4f9aa35dbb029a8d"><![CDATA[{
            if (string.IsNullOrWhiteSpace(imagePath) || HttpContext.Current == null)
            {
                return false;
            }

            try
            {
                var path = HttpContext.Current.Server.MapPath(imagePath);
                return File.Exists(path);
            }
            catch (HttpException)
            {
                return false;
            }

        }]]></body>
          </codeblock>
        </method>
        <method name="IsPackageInUse">
          <declaration><![CDATA[internal static string IsPackageInUse(PackageInfo packageInfo, int portalId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="296" sc="9" el="314" ec="10">Components\ExtensionsController.cs</location>
            <body hash="435833ec6abe94680e1a6068a2ca64ca"><![CDATA[{
            if (packageInfo.PackageID == Null.NullInteger)
            {
                return string.Empty;
            }

            if ((packageInfo.PackageType.ToUpper() == "MODULE"))
            {
                if (portalId == Null.NullInteger)
                {
                    return GetPackagesInUse(true).ContainsKey(packageInfo.PackageID) ? "Yes" : "No";
                }
                else
                {
                    return GetPackagesInUse(false).ContainsKey(packageInfo.PackageID) ? "Yes" : "No";
                }
            }
            return string.Empty;
        }]]></body>
          </codeblock>
        </method>
        <method name="UpgradeIndicator">
          <declaration><![CDATA[internal static string UpgradeIndicator(Version version, string packageType, string packageName)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="322" sc="9" el="329" ec="10">Components\ExtensionsController.cs</location>
            <body hash="f09284a6de9e57f8a750f8297ab621e2"><![CDATA[{
            var url = Upgrade.UpgradeIndicator(version, packageType, packageName, "", false, false); // last 2 params are unused
            if (string.IsNullOrEmpty(url))
            {
                url = Globals.ApplicationPath + "/images/spacer.gif";
            }
            return url;
        }]]></body>
          </codeblock>
        </method>
        <method name="UpgradeRedirect">
          <declaration><![CDATA[internal static string UpgradeRedirect(Version version, string packageType, string packageName)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="317" sc="9" el="319" ec="10">Components\ExtensionsController.cs</location>
            <body hash="51f6a27604cbd02d4e42a0621bf5403a"><![CDATA[{
            return Upgrade.UpgradeRedirect(version, packageType, packageName, "");
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="OwnerUpdateService">
          <declaration><![CDATA[private const string OwnerUpdateService = "DotNetNuke Update Service";]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="FileType">
      <declaration><![CDATA[public enum FileType]]></declaration>
      <documentation>
      </documentation>
      <constructors>
      </constructors>
      <methods>
      </methods>
      <fields>
        <field name="Control">
          <declaration><![CDATA[public const FileType Control = 0;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Manifest">
          <declaration><![CDATA[public const FileType Manifest = 2;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Template">
          <declaration><![CDATA[public const FileType Template = 1;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="ICreateModuleController">
      <declaration><![CDATA[public interface ICreateModuleController]]></declaration>
      <documentation>
      </documentation>
      <constructors>
      </constructors>
      <methods>
        <method name="CreateModule">
          <declaration><![CDATA[int CreateModule(CreateModuleDto createModuleDto, out string newPageUrl, out string errorMessage);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="IInstallController">
      <declaration><![CDATA[public interface IInstallController]]></declaration>
      <documentation>
      </documentation>
      <constructors>
      </constructors>
      <methods>
        <method name="InstallPackage">
          <declaration><![CDATA[InstallResultDto InstallPackage(PortalSettings portalSettings, UserInfo user, string legacySkin, string fileName, Stream stream);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="ParsePackage">
          <declaration><![CDATA[ParseResultDto ParsePackage(PortalSettings portalSettings, UserInfo user, string fileName, Stream stream);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="InstallController">
      <declaration><![CDATA[public class InstallController : ServiceLocator<IInstallController, InstallController>, IInstallController]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public InstallController()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
        <constructor name=".cctor">
          <declaration><![CDATA[static InstallController()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="21" sc="9" el="21" ec="106">Components\InstallController.cs</location>
            <body hash="d651211630366736cd3c346af4c01222"><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof(InstallController))]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="AzureCompact">
          <declaration><![CDATA[private static bool? AzureCompact(Installer installer)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="235" sc="9" el="274" ec="10">Components\InstallController.cs</location>
            <body hash="10995b3bfaff6ad85ea1189d20e73a90"><![CDATA[{
            bool? compact = null;
            string manifestFile = null;
            if (installer.InstallerInfo.ManifestFile != null)
            {
                manifestFile = installer.InstallerInfo.ManifestFile.TempFileName;
            }
            if (installer.Packages.Count > 0)
            {
                if (installer.Packages[0].Package.PackageType.Equals("CoreLanguagePack", StringComparison.InvariantCultureIgnoreCase)
                        || installer.Packages[0].Package.PackageType.Equals("ExtensionLanguagePack", StringComparison.InvariantCultureIgnoreCase))
                {
                    compact = true;
                }
            }
            if (!IsAzureDatabase())
            {
                compact = true;
            }
            else if (manifestFile != null && File.Exists(manifestFile))
            {
                try
                {
                    var document = new XmlDocument();
                    document.Load(manifestFile);
                    var compactNode = document.SelectSingleNode("/dotnetnuke/packages/package/azureCompatible");
                    if (compactNode != null && !string.IsNullOrEmpty(compactNode.InnerText))
                    {
                        compact = compactNode.InnerText.ToLowerInvariant() == "true";
                    }
                }
                catch (Exception ex)
                {
                    Logger.Error(ex);
                }

            }

            return compact;
        }]]></body>
          </codeblock>
        </method>
        <method name="CheckIfSkinAlreadyInstalled">
          <declaration><![CDATA[private static bool CheckIfSkinAlreadyInstalled(string fileName, Installer installer, string legacySkin)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="190" sc="9" el="200" ec="10">Components\InstallController.cs</location>
            <body hash="adba437a7ee220d9dd9e753f11a12ed0"><![CDATA[{
            // this whole thing is to check for if already installed
            var manifestFile = CreateManifest(installer, fileName, legacySkin);
            var installer2 = new Installer(installer.TempInstallFolder, manifestFile, Globals.ApplicationMapPath, false);
            installer2.InstallerInfo.PortalID = installer.InstallerInfo.PortalID;
            if (installer2.InstallerInfo.ManifestFile != null)
            {
                installer2.ReadManifest(true);
            }
            return installer2.IsValid && installer2.InstallerInfo.Installed;
        }]]></body>
          </codeblock>
        </method>
        <method name="CreateManifest">
          <declaration><![CDATA[private static string CreateManifest(Installer installer, string fileName, string legacySkin)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="179" sc="9" el="187" ec="10">Components\InstallController.cs</location>
            <body hash="9ee757c8f2238151fa891bcc1610be11"><![CDATA[{
            var manifestFile = Path.Combine(installer.TempInstallFolder, Path.GetFileNameWithoutExtension(fileName) + ".dnn");
            using (var manifestWriter = new StreamWriter(manifestFile))
            {
                manifestWriter.Write(LegacyUtil.CreateSkinManifest(fileName, legacySkin ?? "Skin", installer.TempInstallFolder));
                manifestWriter.Close();
            }
            return manifestFile;
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteInstallFile">
          <declaration><![CDATA[private static void DeleteInstallFile(string installerFile)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="219" sc="9" el="232" ec="10">Components\InstallController.cs</location>
            <body hash="5d269435cd956628a328871b55f71327"><![CDATA[{
            try
            {
                if (File.Exists(installerFile))
                {
                        File.SetAttributes(installerFile, FileAttributes.Normal);
                        File.Delete(installerFile);
                }
            }
            catch (Exception ex)
            {
                Logger.Error(ex);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteTempInstallFiles">
          <declaration><![CDATA[private static void DeleteTempInstallFiles(Installer installer)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="203" sc="9" el="216" ec="10">Components\InstallController.cs</location>
            <body hash="9e20326a7d24c950406a3a3123f81826"><![CDATA[{
            try
            {
                var tempFolder = installer.TempInstallFolder;
                if (!string.IsNullOrEmpty(tempFolder) && Directory.Exists(tempFolder))
                {
                    Globals.DeleteFolderRecursive(tempFolder);
                }
            }
            catch (Exception ex)
            {
                Logger.Error(ex);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetFactory">
          <declaration><![CDATA[protected override Func<IInstallController> GetFactory()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="24" sc="9" el="26" ec="10">Components\InstallController.cs</location>
            <body hash="c6eaf08b7fdf1d970e00ae2137985c65"><![CDATA[{
            return () => new InstallController();
        }]]></body>
          </codeblock>
        </method>
        <method name="GetInstaller">
          <declaration><![CDATA[private static Installer GetInstaller(Stream stream, string fileName, int portalId, string legacySkin = null)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="157" sc="9" el="176" ec="10">Components\InstallController.cs</location>
            <body hash="431766aea2a5bece2389d526204ab3a9"><![CDATA[{
            var installer = new Installer(stream, Globals.ApplicationMapPath, false, false);
            if (string.IsNullOrEmpty(installer.InstallerInfo.ManifestFile?.TempFileName) && !string.IsNullOrEmpty(legacySkin))
            {
                var manifestFile = CreateManifest(installer, fileName, legacySkin);
                //Re-evaluate the package after creating a temporary manifest
                installer = new Installer(installer.TempInstallFolder, manifestFile, Globals.ApplicationMapPath, false);
            }

            // We always assume we are installing from //Host/Extensions (in the previous releases)
            // This will not work when we try to install a skin/container under a specific portal.
            installer.InstallerInfo.PortalID = Null.NullInteger;

            //Read the manifest
            if (installer.InstallerInfo.ManifestFile != null)
            {
                installer.ReadManifest(true);
            }
            return installer;
        }]]></body>
          </codeblock>
        </method>
        <method name="InstallPackage">
          <declaration><![CDATA[public InstallResultDto InstallPackage(PortalSettings portalSettings, UserInfo user, string legacySkin, string filePath, Stream stream)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="92" sc="9" el="154" ec="10">Components\InstallController.cs</location>
            <body hash="40787e35cccdbeb0a55d3119bff0fd1b"><![CDATA[{
            var installResult = new InstallResultDto();
            var fileName = Path.GetFileName(filePath);
            var extension = Path.GetExtension(fileName ?? "").ToLowerInvariant();

            if (extension != ".zip" && extension != ".resources")
            {
                installResult.Failed("InvalidExt");
            }
            else
            {
                try
                {
                    var installer = GetInstaller(stream, fileName, portalSettings.PortalId, legacySkin);

                    try
                    {
                        if (installer.IsValid)
                        {
                            //Reset Log
                            installer.InstallerInfo.Log.Logs.Clear();

                            //Set the IgnnoreWhiteList flag
                            installer.InstallerInfo.IgnoreWhiteList = true;

                            //Set the Repair flag
                            installer.InstallerInfo.RepairInstall = true;

                            //Install
                            installer.Install();

                            installResult.AddLogs(installer.InstallerInfo.Log.Logs);
                            if (!installer.IsValid)
                            {
                                installResult.Failed("InstallError");
                            }
                            else
                            {
                                installResult.NewPackageId = installer.Packages.Count == 0
                                    ? Null.NullInteger
                                    : installer.Packages.First().Value.Package.PackageID;
                                installResult.Succeed();
                                DeleteInstallFile(filePath);
                            }
                        }
                        else
                        {
                            installResult.Failed("InstallError");
                        }
                    }
                    finally
                    {
                        DeleteTempInstallFiles(installer);
                    }
                }
                catch (ICSharpCode.SharpZipLib.ZipException)
                {
                    installResult.Failed("ZipCriticalError");
                }
            }

            return installResult;
        }]]></body>
          </codeblock>
        </method>
        <method name="IsAzureDatabase">
          <declaration><![CDATA[private static bool IsAzureDatabase()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="277" sc="9" el="279" ec="10">Components\InstallController.cs</location>
            <body hash="f24e7a109a3a286db9b9acee845ada31"><![CDATA[{
            return PetaPocoHelper.ExecuteScalar<int>(DataProvider.Instance().ConnectionString, CommandType.Text, "SELECT CAST(ServerProperty('EngineEdition') as INT)") == 5;
        }]]></body>
          </codeblock>
        </method>
        <method name="ParsePackage">
          <declaration><![CDATA[public ParseResultDto ParsePackage(PortalSettings portalSettings, UserInfo user, string filePath, Stream stream)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="29" sc="9" el="89" ec="10">Components\InstallController.cs</location>
            <body hash="698549283d09372f40b2a0f53ebec3a2"><![CDATA[{
            var parseResult = new ParseResultDto();
            var fileName = Path.GetFileName(filePath);
            var extension = Path.GetExtension(fileName ?? "").ToLowerInvariant();

            if (extension != ".zip" && extension != ".resources")
            {
                parseResult.Failed("InvalidExt");
            }
            else
            {
                try
                {
                    var installer = GetInstaller(stream, fileName, portalSettings.PortalId);

                    try
                    {
                        if (installer.IsValid)
                        {
                            if (installer.Packages.Count > 0)
                            {
                                parseResult = new ParseResultDto(installer.Packages[0].Package);
                            }

                            parseResult.AzureCompact = AzureCompact(installer).GetValueOrDefault(false);
                            parseResult.NoManifest = string.IsNullOrEmpty(installer.InstallerInfo.ManifestFile.TempFileName);
                            parseResult.LegacyError = installer.InstallerInfo.LegacyError;
                            parseResult.HasInvalidFiles = !installer.InstallerInfo.HasValidFiles;
                            parseResult.AlreadyInstalled = installer.InstallerInfo.Installed;
                            parseResult.AddLogs(installer.InstallerInfo.Log.Logs);
                        }
                        else
                        {
                            if (installer.InstallerInfo.ManifestFile == null)
                            {
                                parseResult.LegacySkinInstalled = CheckIfSkinAlreadyInstalled(fileName, installer, "Skin");
                                parseResult.LegacyContainerInstalled = CheckIfSkinAlreadyInstalled(fileName, installer, "Container");
                            }

                            parseResult.Failed("InvalidFile", installer.InstallerInfo.Log.Logs);
                            parseResult.NoManifest = string.IsNullOrEmpty(installer.InstallerInfo.ManifestFile?.TempFileName);
                            if (parseResult.NoManifest)
                            {
                                // we still can install when the manifest is missing
                                parseResult.Success = true;
                            }
                        }
                    }
                    finally
                    {
                        DeleteTempInstallFiles(installer);
                    }
                }
                catch (ICSharpCode.SharpZipLib.ZipException)
                {
                    parseResult.Failed("ZipCriticalError");
                }
            }

            return parseResult;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="Logger">
          <declaration><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof(InstallController));]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="PackageTypes">
      <declaration><![CDATA[public enum PackageTypes]]></declaration>
      <documentation>
      </documentation>
      <constructors>
      </constructors>
      <methods>
      </methods>
      <fields>
        <field name="Auth_System">
          <declaration><![CDATA[public const PackageTypes Auth_System = 1;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="AuthenticationSystem">
          <declaration><![CDATA[public const PackageTypes AuthenticationSystem = 1;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="AuthSystem">
          <declaration><![CDATA[public const PackageTypes AuthSystem = 1;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Container">
          <declaration><![CDATA[public const PackageTypes Container = 2;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="CoreLanguagePack">
          <declaration><![CDATA[public const PackageTypes CoreLanguagePack = 3;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="DashboardControl">
          <declaration><![CDATA[public const PackageTypes DashboardControl = 4;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="EvoqConnector">
          <declaration><![CDATA[public const PackageTypes EvoqConnector = 6;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="ExtensionLanguagePack">
          <declaration><![CDATA[public const PackageTypes ExtensionLanguagePack = 5;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Generic">
          <declaration><![CDATA[public const PackageTypes Generic = 0;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Javascript_Library">
          <declaration><![CDATA[public const PackageTypes Javascript_Library = 7;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="JavascriptLibrary">
          <declaration><![CDATA[public const PackageTypes JavascriptLibrary = 7;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Language">
          <declaration><![CDATA[public const PackageTypes Language = 8;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Library">
          <declaration><![CDATA[public const PackageTypes Library = 9;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Module">
          <declaration><![CDATA[public const PackageTypes Module = 10;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="PersonaBar">
          <declaration><![CDATA[public const PackageTypes PersonaBar = 11;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Provider">
          <declaration><![CDATA[public const PackageTypes Provider = 12;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Skin">
          <declaration><![CDATA[public const PackageTypes Skin = 13;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="SkinObject">
          <declaration><![CDATA[public const PackageTypes SkinObject = 14;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Widget">
          <declaration><![CDATA[public const PackageTypes Widget = 15;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="Utility">
      <declaration><![CDATA[public static class Utility]]></declaration>
      <documentation>
      </documentation>
      <constructors>
      </constructors>
      <methods>
        <method name="GetAllLanguagesList">
          <declaration><![CDATA[public static IEnumerable<ListItemDto> GetAllLanguagesList()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="14" sc="9" el="17" ec="10">Components\Utility.cs</location>
            <body hash="75715140f2c6153cff2c375636f18c85"><![CDATA[{
            var locales = LocaleController.Instance.GetLocales(Null.NullInteger).Values;
            return locales.Select(l => new ListItemDto {Id = l.LanguageId, Name = l.EnglishName});
        }]]></body>
          </codeblock>
        </method>
        <method name="GetAllPackagesListExceptLangPacks">
          <declaration><![CDATA[public static IEnumerable<ListItemDto> GetAllPackagesListExceptLangPacks()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="20" sc="9" el="30" ec="10">Components\Utility.cs</location>
            <body hash="29d242a2cd26ba334f739b043644efb5"><![CDATA[{
            var packages = new List<ListItemDto>();
            foreach (var p in PackageController.Instance.GetExtensionPackages(Null.NullInteger))
            {
                if (p.PackageType != "CoreLanguagePack" && p.PackageType != "ExtensionLanguagePack")
                {
                    packages.Add(new ListItemDto { Id = p.PackageID, Name = p.Name });
                }
            }
            return packages.OrderBy(p => p.Name);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="Dnn.PersonaBar.Extensions.Components.Dto">
    <class name="AvailablePackagesDto">
      <declaration><![CDATA[public class AvailablePackagesDto]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public AvailablePackagesDto()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="InvalidPackages">
          <declaration><![CDATA[public List<string> InvalidPackages]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="35" sc="47" el="35" ec="51">Components\Dto\AvailablePackagesDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="35" sc="52" el="35" ec="56">Components\Dto\AvailablePackagesDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="PackageType">
          <declaration><![CDATA[public string PackageType]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="31" sc="37" el="31" ec="41">Components\Dto\AvailablePackagesDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="31" sc="42" el="31" ec="46">Components\Dto\AvailablePackagesDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ValidPackages">
          <declaration><![CDATA[public List<PackageInfoSlimDto> ValidPackages]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="33" sc="57" el="33" ec="61">Components\Dto\AvailablePackagesDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="33" sc="62" el="33" ec="66">Components\Dto\AvailablePackagesDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="CreateModuleDto">
      <declaration><![CDATA[public class CreateModuleDto]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public CreateModuleDto()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="AddPage">
          <declaration><![CDATA[public bool AddPage]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="57" sc="31" el="57" ec="35">Components\Dto\CreateModuleDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="57" sc="36" el="57" ec="40">Components\Dto\CreateModuleDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Description">
          <declaration><![CDATA[public string Description]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="51" sc="37" el="51" ec="41">Components\Dto\CreateModuleDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="51" sc="42" el="51" ec="46">Components\Dto\CreateModuleDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="FileName">
          <declaration><![CDATA[public string FileName]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="45" sc="34" el="45" ec="38">Components\Dto\CreateModuleDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="45" sc="39" el="45" ec="43">Components\Dto\CreateModuleDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Language">
          <declaration><![CDATA[public string Language]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="42" sc="34" el="42" ec="38">Components\Dto\CreateModuleDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="42" sc="39" el="42" ec="43">Components\Dto\CreateModuleDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Manifest">
          <declaration><![CDATA[public string Manifest]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="54" sc="34" el="54" ec="38">Components\Dto\CreateModuleDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="54" sc="39" el="54" ec="43">Components\Dto\CreateModuleDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ModuleFolder">
          <declaration><![CDATA[public string ModuleFolder]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="39" sc="38" el="39" ec="42">Components\Dto\CreateModuleDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="39" sc="43" el="39" ec="47">Components\Dto\CreateModuleDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ModuleName">
          <declaration><![CDATA[public string ModuleName]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="48" sc="36" el="48" ec="40">Components\Dto\CreateModuleDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="48" sc="41" el="48" ec="45">Components\Dto\CreateModuleDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="OwnerFolder">
          <declaration><![CDATA[public string OwnerFolder]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="36" sc="37" el="36" ec="41">Components\Dto\CreateModuleDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="36" sc="42" el="36" ec="46">Components\Dto\CreateModuleDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Type">
          <declaration><![CDATA[public CreateModuleType Type]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="33" sc="40" el="33" ec="44">Components\Dto\CreateModuleDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="33" sc="45" el="33" ec="49">Components\Dto\CreateModuleDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="CreatePackageDto">
      <declaration><![CDATA[public class CreatePackageDto : PackageInfoDto]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public CreatePackageDto()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="DeletePackageDto">
      <declaration><![CDATA[public class DeletePackageDto]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DeletePackageDto()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="DeleteFiles">
          <declaration><![CDATA[public bool DeleteFiles]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="36" sc="35" el="36" ec="39">Components\Dto\DeletePackageDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="36" sc="40" el="36" ec="44">Components\Dto\DeletePackageDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Id">
          <declaration><![CDATA[public int Id]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="33" sc="25" el="33" ec="29">Components\Dto\DeletePackageDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="33" sc="30" el="33" ec="34">Components\Dto\DeletePackageDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="DownloadPackageDto">
      <declaration><![CDATA[public class DownloadPackageDto]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public DownloadPackageDto()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="FileName">
          <declaration><![CDATA[public string FileName]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="30" sc="34" el="30" ec="38">Components\Dto\DownloadPackageDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="30" sc="39" el="30" ec="43">Components\Dto\DownloadPackageDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="PackageType">
          <declaration><![CDATA[public string PackageType]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="29" sc="37" el="29" ec="41">Components\Dto\DownloadPackageDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="29" sc="42" el="29" ec="46">Components\Dto\DownloadPackageDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="InstallerLogEntry">
      <declaration><![CDATA[public class InstallerLogEntry]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public InstallerLogEntry()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="Description">
          <declaration><![CDATA[public string Description]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="10" sc="37" el="10" ec="41">Components\Dto\InstallerLogEntry.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="10" sc="42" el="10" ec="46">Components\Dto\InstallerLogEntry.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Type">
          <declaration><![CDATA[public string Type]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="9" sc="30" el="9" ec="34">Components\Dto\InstallerLogEntry.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="9" sc="35" el="9" ec="39">Components\Dto\InstallerLogEntry.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="InstallResultDto">
      <declaration><![CDATA[public class InstallResultDto]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private bool <Success>k__BackingField = true;]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="39" sc="45" el="45" ec="91">Components\Dto\InstallResultDto.cs</location>
            <body hash="c7d4acf3cd6a23f4162e35757577e12b"><![CDATA[true;

        [JsonProperty("message")]
        public string Message { get; set; }

        [JsonProperty("logs")]
        public IList<InstallerLogEntry> Logs { get; set; } = new List<InstallerLogEntry>()]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="AddLogs">
          <declaration><![CDATA[public void AddLogs(IEnumerable<LogEntry> logs)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="60" sc="9" el="67" ec="10">Components\Dto\InstallResultDto.cs</location>
            <body hash="0de779f8cd87c4406a4e295b5a4788f0"><![CDATA[{
            Logs = logs?.Select(
                l => new InstallerLogEntry
                {
                    Type = l.Type.ToString(),
                    Description = l.Description
                }).ToList() ?? new List<InstallerLogEntry>();
        }]]></body>
          </codeblock>
        </method>
        <method name="Failed">
          <declaration><![CDATA[public void Failed(string message)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="48" sc="9" el="51" ec="10">Components\Dto\InstallResultDto.cs</location>
            <body hash="42d5246a1a31039b4229c3b1127b2317"><![CDATA[{
            Success = false;
            Message = message;
        }]]></body>
          </codeblock>
        </method>
        <method name="Succeed">
          <declaration><![CDATA[public void Succeed()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="54" sc="9" el="57" ec="10">Components\Dto\InstallResultDto.cs</location>
            <body hash="cb0d5bee60c510c39b939899131e7348"><![CDATA[{
            Success = true;
            Message = string.Empty;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="Logs">
          <declaration><![CDATA[public IList<InstallerLogEntry> Logs]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="45" sc="48" el="45" ec="52">Components\Dto\InstallResultDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="45" sc="53" el="45" ec="57">Components\Dto\InstallResultDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Message">
          <declaration><![CDATA[public string Message]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="42" sc="33" el="42" ec="37">Components\Dto\InstallResultDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="42" sc="38" el="42" ec="42">Components\Dto\InstallResultDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="NewPackageId">
          <declaration><![CDATA[public int NewPackageId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="36" sc="35" el="36" ec="39">Components\Dto\InstallResultDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="36" sc="40" el="36" ec="44">Components\Dto\InstallResultDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Success">
          <declaration><![CDATA[public bool Success]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="39" sc="31" el="39" ec="35">Components\Dto\InstallResultDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="39" sc="36" el="39" ec="40">Components\Dto\InstallResultDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="ModuleFolderDto">
      <declaration><![CDATA[public class ModuleFolderDto]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public ModuleFolderDto()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="IsSpecial">
          <declaration><![CDATA[public bool IsSpecial]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="36" sc="33" el="36" ec="37">Components\Dto\ModuleFolderDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="36" sc="38" el="36" ec="42">Components\Dto\ModuleFolderDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Path">
          <declaration><![CDATA[public string Path]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="33" sc="30" el="33" ec="34">Components\Dto\ModuleFolderDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="33" sc="35" el="33" ec="39">Components\Dto\ModuleFolderDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="SpecialType">
          <declaration><![CDATA[public string SpecialType]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="39" sc="37" el="39" ec="41">Components\Dto\ModuleFolderDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="39" sc="42" el="39" ec="46">Components\Dto\ModuleFolderDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="PackageFilesQueryDto">
      <declaration><![CDATA[public class PackageFilesQueryDto : PackageInfoDto]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public PackageFilesQueryDto()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="IncludeAppCode">
          <declaration><![CDATA[public bool IncludeAppCode]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="15" sc="38" el="15" ec="42">Components\Dto\PackageFilesQueryDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="15" sc="43" el="15" ec="47">Components\Dto\PackageFilesQueryDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="IncludeSource">
          <declaration><![CDATA[public bool IncludeSource]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="12" sc="37" el="12" ec="41">Components\Dto\PackageFilesQueryDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="12" sc="42" el="12" ec="46">Components\Dto\PackageFilesQueryDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="PackageFolder">
          <declaration><![CDATA[public string PackageFolder]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="9" sc="39" el="9" ec="43">Components\Dto\PackageFilesQueryDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="9" sc="44" el="9" ec="48">Components\Dto\PackageFilesQueryDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="PackageInfoDto">
      <declaration><![CDATA[public class PackageInfoDto]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public PackageInfoDto()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="98" sc="9" el="101" ec="10">Components\Dto\PackageInfoDto.cs</location>
            <body hash="ff16313d6dd548cfc0853998755e8f49"><![CDATA[public PackageInfoDto()
        {
            
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[public PackageInfoDto(int portalId, PackageInfo package)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="103" sc="9" el="142" ec="10">Components\Dto\PackageInfoDto.cs</location>
            <body hash="f0a93978c5140d6d4153aa132626eb55"><![CDATA[public PackageInfoDto(int portalId, PackageInfo package)
        {
            PackageType = package.PackageType;
            FriendlyName = package.FriendlyName;
            Name = package.Name;
            PackageId = package.PackageID;
            Description = package.Description;
            IsInUse = ExtensionsController.IsPackageInUse(package, portalId);
            Version = package.Version.ToString(3);
            UpgradeUrl = ExtensionsController.UpgradeRedirect(package.Version, package.PackageType, package.Name);
            UpgradeIndicator = ExtensionsController.UpgradeIndicator(package.Version, package.PackageType, package.Name);
            PackageIcon = ExtensionsController.GetPackageIcon(package);
            License = package.License;
            ReleaseNotes = package.ReleaseNotes;
            Owner = package.Owner;
            Organization = package.Organization;
            Url = package.Url;
            Email = package.Email;
            CanDelete = !package.IsSystemPackage &&
                package.PackageID > 0 &&
                PackageController.CanDeletePackage(package, PortalSettings.Current);

            var authService = AuthenticationController.GetAuthenticationServiceByPackageID(PackageId);
            ReadOnly = authService != null && authService.AuthenticationType == Constants.DnnAuthTypeName;

            var locale = LocaleController.Instance.GetLocale(PortalController.Instance.GetCurrentPortalSettings().DefaultLanguage);
            var tabId = TabController.GetTabByTabPath(portalId, "//Admin//Extensions", locale.Culture.Name);
            var tabInfo = TabController.Instance.GetTab(tabId, portalId);
            var module = tabInfo.Modules.OfType<ModuleInfo>().First();
            SiteSettingsLink = (module == null)
                ? ""
                : Globals.NavigateURL(tabId, "Edit",
                    new[]
                    {
                        $"mid={module.ModuleID}",
                        $"packageid={PackageId}",
                        "Display=editor",
                        "popUp=true",
                    });
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="ToPackageInfo">
          <declaration><![CDATA[public PackageInfo ToPackageInfo()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="145" sc="9" el="165" ec="10">Components\Dto\PackageInfoDto.cs</location>
            <body hash="d16993f0390a387d87df0e2a64b7bd1e"><![CDATA[{
            System.Version ver;
            System.Version.TryParse(Version, out ver);

            return new PackageInfo
            {
                PackageType = PackageType,
                FriendlyName = FriendlyName,
                Name = Name,
                PackageID = PackageId,
                Description = Description,
                Version = ver,
                License = License,
                ReleaseNotes = ReleaseNotes,
                Owner = Owner,
                Organization = Organization,
                Url = Url,
                Email = Email,
                IconFile = PackageIcon,
            };
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="CanDelete">
          <declaration><![CDATA[public bool CanDelete]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="90" sc="33" el="90" ec="37">Components\Dto\PackageInfoDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="90" sc="38" el="90" ec="42">Components\Dto\PackageInfoDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Description">
          <declaration><![CDATA[public string Description]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="54" sc="37" el="54" ec="41">Components\Dto\PackageInfoDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="54" sc="42" el="54" ec="46">Components\Dto\PackageInfoDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Email">
          <declaration><![CDATA[public string Email]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="87" sc="31" el="87" ec="35">Components\Dto\PackageInfoDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="87" sc="36" el="87" ec="40">Components\Dto\PackageInfoDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="FriendlyName">
          <declaration><![CDATA[public string FriendlyName]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="51" sc="38" el="51" ec="42">Components\Dto\PackageInfoDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="51" sc="43" el="51" ec="47">Components\Dto\PackageInfoDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="IsInUse">
          <declaration><![CDATA[public string IsInUse]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="60" sc="33" el="60" ec="37">Components\Dto\PackageInfoDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="60" sc="38" el="60" ec="42">Components\Dto\PackageInfoDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="License">
          <declaration><![CDATA[public string License]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="72" sc="33" el="72" ec="37">Components\Dto\PackageInfoDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="72" sc="38" el="72" ec="42">Components\Dto\PackageInfoDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Name">
          <declaration><![CDATA[public string Name]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="48" sc="30" el="48" ec="34">Components\Dto\PackageInfoDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="48" sc="35" el="48" ec="39">Components\Dto\PackageInfoDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Organization">
          <declaration><![CDATA[public string Organization]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="81" sc="38" el="81" ec="42">Components\Dto\PackageInfoDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="81" sc="43" el="81" ec="47">Components\Dto\PackageInfoDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Owner">
          <declaration><![CDATA[public string Owner]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="78" sc="31" el="78" ec="35">Components\Dto\PackageInfoDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="78" sc="36" el="78" ec="40">Components\Dto\PackageInfoDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="PackageIcon">
          <declaration><![CDATA[public string PackageIcon]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="69" sc="37" el="69" ec="41">Components\Dto\PackageInfoDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="69" sc="42" el="69" ec="46">Components\Dto\PackageInfoDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="PackageId">
          <declaration><![CDATA[public int PackageId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="42" sc="32" el="42" ec="36">Components\Dto\PackageInfoDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="42" sc="37" el="42" ec="41">Components\Dto\PackageInfoDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="PackageType">
          <declaration><![CDATA[public string PackageType]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="45" sc="37" el="45" ec="41">Components\Dto\PackageInfoDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="45" sc="42" el="45" ec="46">Components\Dto\PackageInfoDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ReadOnly">
          <declaration><![CDATA[public bool ReadOnly]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="93" sc="32" el="93" ec="36">Components\Dto\PackageInfoDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="93" sc="37" el="93" ec="41">Components\Dto\PackageInfoDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ReleaseNotes">
          <declaration><![CDATA[public string ReleaseNotes]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="75" sc="38" el="75" ec="42">Components\Dto\PackageInfoDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="75" sc="43" el="75" ec="47">Components\Dto\PackageInfoDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="SiteSettingsLink">
          <declaration><![CDATA[public string SiteSettingsLink]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="96" sc="42" el="96" ec="46">Components\Dto\PackageInfoDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="96" sc="47" el="96" ec="51">Components\Dto\PackageInfoDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="UpgradeIndicator">
          <declaration><![CDATA[public string UpgradeIndicator]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="66" sc="42" el="66" ec="46">Components\Dto\PackageInfoDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="66" sc="47" el="66" ec="51">Components\Dto\PackageInfoDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="UpgradeUrl">
          <declaration><![CDATA[public string UpgradeUrl]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="63" sc="36" el="63" ec="40">Components\Dto\PackageInfoDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="63" sc="41" el="63" ec="45">Components\Dto\PackageInfoDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Url">
          <declaration><![CDATA[public string Url]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="84" sc="29" el="84" ec="33">Components\Dto\PackageInfoDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="84" sc="34" el="84" ec="38">Components\Dto\PackageInfoDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Version">
          <declaration><![CDATA[public string Version]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="57" sc="33" el="57" ec="37">Components\Dto\PackageInfoDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="57" sc="38" el="57" ec="42">Components\Dto\PackageInfoDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="PackageInfoSlimDto">
      <declaration><![CDATA[public class PackageInfoSlimDto]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public PackageInfoSlimDto()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="72" sc="9" el="75" ec="10">Components\Dto\PackageInfoSlimDto.cs</location>
            <body hash="d50347875d16a39fdbdca2b574966f86"><![CDATA[public PackageInfoSlimDto()
        {

        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[public PackageInfoSlimDto(int portalId, PackageInfo package)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="77" sc="9" el="96" ec="10">Components\Dto\PackageInfoSlimDto.cs</location>
            <body hash="b7d7cc759e3693f28f7ab80bd71a3039"><![CDATA[public PackageInfoSlimDto(int portalId, PackageInfo package)
        {
            PackageId = package.PackageID;
            FriendlyName = package.FriendlyName;
            Name = package.Name;
            FileName = package.FileName;
            Description = package.Description;
            Version = package.Version.ToString(3);
            IsInUse = ExtensionsController.IsPackageInUse(package, portalId);
            UpgradeUrl = ExtensionsController.UpgradeRedirect(package.Version, package.PackageType, package.Name);
            UpgradeIndicator = ExtensionsController.UpgradeIndicator(package.Version, package.PackageType, package.Name);
            PackageIcon = ExtensionsController.GetPackageIcon(package);
            CanDelete = package.PackageID != Null.NullInteger && !package.IsSystemPackage && PackageController.CanDeletePackage(package, PortalSettings.Current);

            if (package.PackageID != Null.NullInteger)
            {
                var authService = AuthenticationController.GetAuthenticationServiceByPackageID(PackageId);
                ReadOnly = authService != null && authService.AuthenticationType == Constants.DnnAuthTypeName;
            }
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="CanDelete">
          <declaration><![CDATA[public bool CanDelete]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="67" sc="33" el="67" ec="37">Components\Dto\PackageInfoSlimDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="67" sc="38" el="67" ec="42">Components\Dto\PackageInfoSlimDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Description">
          <declaration><![CDATA[public string Description]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="49" sc="37" el="49" ec="41">Components\Dto\PackageInfoSlimDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="49" sc="42" el="49" ec="46">Components\Dto\PackageInfoSlimDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="FileName">
          <declaration><![CDATA[public string FileName]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="46" sc="34" el="46" ec="38">Components\Dto\PackageInfoSlimDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="46" sc="39" el="46" ec="43">Components\Dto\PackageInfoSlimDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="FriendlyName">
          <declaration><![CDATA[public string FriendlyName]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="40" sc="38" el="40" ec="42">Components\Dto\PackageInfoSlimDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="40" sc="43" el="40" ec="47">Components\Dto\PackageInfoSlimDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="IsInUse">
          <declaration><![CDATA[public string IsInUse]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="55" sc="33" el="55" ec="37">Components\Dto\PackageInfoSlimDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="55" sc="38" el="55" ec="42">Components\Dto\PackageInfoSlimDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Name">
          <declaration><![CDATA[public string Name]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="43" sc="30" el="43" ec="34">Components\Dto\PackageInfoSlimDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="43" sc="35" el="43" ec="39">Components\Dto\PackageInfoSlimDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="PackageIcon">
          <declaration><![CDATA[public string PackageIcon]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="64" sc="37" el="64" ec="41">Components\Dto\PackageInfoSlimDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="64" sc="42" el="64" ec="46">Components\Dto\PackageInfoSlimDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="PackageId">
          <declaration><![CDATA[public int PackageId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="37" sc="32" el="37" ec="36">Components\Dto\PackageInfoSlimDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="37" sc="37" el="37" ec="41">Components\Dto\PackageInfoSlimDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ReadOnly">
          <declaration><![CDATA[public bool ReadOnly]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="70" sc="32" el="70" ec="36">Components\Dto\PackageInfoSlimDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="70" sc="37" el="70" ec="41">Components\Dto\PackageInfoSlimDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="UpgradeIndicator">
          <declaration><![CDATA[public string UpgradeIndicator]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="61" sc="42" el="61" ec="46">Components\Dto\PackageInfoSlimDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="61" sc="47" el="61" ec="51">Components\Dto\PackageInfoSlimDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="UpgradeUrl">
          <declaration><![CDATA[public string UpgradeUrl]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="58" sc="36" el="58" ec="40">Components\Dto\PackageInfoSlimDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="58" sc="41" el="58" ec="45">Components\Dto\PackageInfoSlimDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Version">
          <declaration><![CDATA[public string Version]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="52" sc="33" el="52" ec="37">Components\Dto\PackageInfoSlimDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="52" sc="38" el="52" ec="42">Components\Dto\PackageInfoSlimDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="PackageManifestDto">
      <declaration><![CDATA[public class PackageManifestDto : PackageInfoDto]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private IDictionary<string, string> <Manifests>k__BackingField = new Dictionary<string, string>();]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="20" sc="71" el="31" ec="10">Components\Dto\PackageManifestDto.cs</location>
            <body hash="2dd9aff414ce99884de79a036dd1e30d"><![CDATA[new Dictionary<string, string>();

        [JsonProperty("assemblies")]
        public IList<string> Assemblies { get; set; } = new List<string>();

        [JsonProperty("files")]
        public IList<string> Files { get; set; } = new List<string>();

        public PackageManifestDto()
        {
            
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[private IDictionary<string, string> <Manifests>k__BackingField = new Dictionary<string, string>();]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="20" sc="71" el="36" ec="10">Components\Dto\PackageManifestDto.cs</location>
            <body hash="3a7667098c1474e83a8493ba8c252817"><![CDATA[new Dictionary<string, string>();

        [JsonProperty("assemblies")]
        public IList<string> Assemblies { get; set; } = new List<string>();

        [JsonProperty("files")]
        public IList<string> Files { get; set; } = new List<string>();

        public PackageManifestDto()
        {
            
        }

        public PackageManifestDto(int portalId, PackageInfo package) : base(portalId, package)
        {
            
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="ArchiveName">
          <declaration><![CDATA[public string ArchiveName]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="11" sc="37" el="11" ec="41">Components\Dto\PackageManifestDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="11" sc="42" el="11" ec="46">Components\Dto\PackageManifestDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Assemblies">
          <declaration><![CDATA[public IList<string> Assemblies]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="23" sc="43" el="23" ec="47">Components\Dto\PackageManifestDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="23" sc="48" el="23" ec="52">Components\Dto\PackageManifestDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="BasePath">
          <declaration><![CDATA[public string BasePath]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="17" sc="34" el="17" ec="38">Components\Dto\PackageManifestDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="17" sc="39" el="17" ec="43">Components\Dto\PackageManifestDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Files">
          <declaration><![CDATA[public IList<string> Files]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="26" sc="38" el="26" ec="42">Components\Dto\PackageManifestDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="26" sc="43" el="26" ec="47">Components\Dto\PackageManifestDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ManifestName">
          <declaration><![CDATA[public string ManifestName]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="14" sc="38" el="14" ec="42">Components\Dto\PackageManifestDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="14" sc="43" el="14" ec="47">Components\Dto\PackageManifestDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Manifests">
          <declaration><![CDATA[public IDictionary<string, string> Manifests]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="20" sc="57" el="20" ec="61">Components\Dto\PackageManifestDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="20" sc="62" el="20" ec="66">Components\Dto\PackageManifestDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="PackageSettingsDto">
      <declaration><![CDATA[public class PackageSettingsDto]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private IDictionary<string, string> <Settings>k__BackingField = new Dictionary<string, string>();]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="40" sc="69" el="43" ec="106">Components\Dto\PackageSettingsDto.cs</location>
            <body hash="dfb792dc9400c20ae5f58bcd409ad3fc"><![CDATA[new Dictionary<string, string>();

        [JsonProperty("editorActions")]
        public IDictionary<string, string> EditorActions { get; set; } = new Dictionary<string, string>()]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="EditorActions">
          <declaration><![CDATA[public IDictionary<string, string> EditorActions]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="43" sc="60" el="43" ec="64">Components\Dto\PackageSettingsDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="43" sc="65" el="43" ec="69">Components\Dto\PackageSettingsDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="PackageId">
          <declaration><![CDATA[public int PackageId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="34" sc="32" el="34" ec="36">Components\Dto\PackageSettingsDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="34" sc="37" el="34" ec="41">Components\Dto\PackageSettingsDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="PortalId">
          <declaration><![CDATA[public int PortalId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="37" sc="31" el="37" ec="35">Components\Dto\PackageSettingsDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="37" sc="36" el="37" ec="40">Components\Dto\PackageSettingsDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Settings">
          <declaration><![CDATA[public IDictionary<string, string> Settings]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="40" sc="55" el="40" ec="59">Components\Dto\PackageSettingsDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="40" sc="60" el="40" ec="64">Components\Dto\PackageSettingsDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="ParseResultDto">
      <declaration><![CDATA[public class ParseResultDto : PackageInfoDto]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private bool <Success>k__BackingField = true;]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="40" sc="45" el="72" ec="10">Components\Dto\ParseResultDto.cs</location>
            <body hash="e030a79211ef4452676ae08f4e24ceb1"><![CDATA[true;

        [JsonProperty("azureCompact")]
        public bool AzureCompact { get; set; }

        [JsonProperty("noManifest")]
        public bool NoManifest { get; set; }

        [JsonProperty("legacyError")]
        public string LegacyError { get; set; }

        [JsonProperty("hasInvalidFiles")]
        public bool HasInvalidFiles { get; set; }

        [JsonProperty("alreadyInstalled")]
        public bool AlreadyInstalled { get; set; }

        [JsonProperty("legacySkinInstalled")]
        public bool LegacySkinInstalled { get; set; }

        [JsonProperty("legacyContainerInstalled")]
        public bool LegacyContainerInstalled { get; set; }

        [JsonProperty("message")]
        public string Message { get; set; }

        [JsonProperty("logs")]
        public IList<InstallerLogEntry> Logs { get; set; }

        public ParseResultDto()
        {

        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[private bool <Success>k__BackingField = true;]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="40" sc="45" el="77" ec="10">Components\Dto\ParseResultDto.cs</location>
            <body hash="2a37af78c780392f96c83a27f5725026"><![CDATA[true;

        [JsonProperty("azureCompact")]
        public bool AzureCompact { get; set; }

        [JsonProperty("noManifest")]
        public bool NoManifest { get; set; }

        [JsonProperty("legacyError")]
        public string LegacyError { get; set; }

        [JsonProperty("hasInvalidFiles")]
        public bool HasInvalidFiles { get; set; }

        [JsonProperty("alreadyInstalled")]
        public bool AlreadyInstalled { get; set; }

        [JsonProperty("legacySkinInstalled")]
        public bool LegacySkinInstalled { get; set; }

        [JsonProperty("legacyContainerInstalled")]
        public bool LegacyContainerInstalled { get; set; }

        [JsonProperty("message")]
        public string Message { get; set; }

        [JsonProperty("logs")]
        public IList<InstallerLogEntry> Logs { get; set; }

        public ParseResultDto()
        {

        }

        public ParseResultDto(PackageInfo package) : base(Null.NullInteger, package)
        {

        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="AddLogs">
          <declaration><![CDATA[public void AddLogs(IEnumerable<LogEntry> logs)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="114" sc="9" el="119" ec="10">Components\Dto\ParseResultDto.cs</location>
            <body hash="849369b9646d0880358103ea1ff4176f"><![CDATA[{
            if (logs == null)
                Logs = new List<InstallerLogEntry>();
            else
                Logs = logs.Select(l => new InstallerLogEntry { Type = l.Type.ToString(), Description = l.Description }).ToList();
        }]]></body>
          </codeblock>
        </method>
        <method name="Failed">
          <declaration><![CDATA[public void Failed(string message, IList<LogEntry> logs = null)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="80" sc="9" el="104" ec="10">Components\Dto\ParseResultDto.cs</location>
            <body hash="ca9689c9d0cfdf15382ead63f2bc9740"><![CDATA[{
            Success = false;
            Message = Localization.GetString(message, Constants.SharedResources) ?? message;
            AddLogs(logs);
            // UI devs asked for these to be non-null empty for moving to next step
            Description = Description ?? "";
            Email = Email ?? "";
            FriendlyName = FriendlyName ?? "";
            IsInUse = IsInUse ?? "";
            License = License ?? "";
            Name = Name ?? "";
            Organization = Organization ?? "";
            Owner = Owner ?? "";
            PackageIcon = PackageIcon ?? "";
            PackageType = PackageType ?? "";
            ReleaseNotes = ReleaseNotes ?? "";
            SiteSettingsLink = SiteSettingsLink ?? "";
            UpgradeIndicator = UpgradeIndicator ?? "";
            UpgradeUrl = UpgradeUrl ?? "";
            Url = Url ?? "";
            Version = Version ?? "";

            LegacyError = LegacyError ?? "";
            Message = Message ?? "";
        }]]></body>
          </codeblock>
        </method>
        <method name="Succeed">
          <declaration><![CDATA[public void Succeed(IList<LogEntry> logs)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="107" sc="9" el="111" ec="10">Components\Dto\ParseResultDto.cs</location>
            <body hash="af7866769605c5b4e4173e7120ab0263"><![CDATA[{
            Success = true;
            Message = string.Empty;
            AddLogs(logs);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="AlreadyInstalled">
          <declaration><![CDATA[public bool AlreadyInstalled]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="55" sc="40" el="55" ec="44">Components\Dto\ParseResultDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="55" sc="45" el="55" ec="49">Components\Dto\ParseResultDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="AzureCompact">
          <declaration><![CDATA[public bool AzureCompact]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="43" sc="36" el="43" ec="40">Components\Dto\ParseResultDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="43" sc="41" el="43" ec="45">Components\Dto\ParseResultDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="HasInvalidFiles">
          <declaration><![CDATA[public bool HasInvalidFiles]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="52" sc="39" el="52" ec="43">Components\Dto\ParseResultDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="52" sc="44" el="52" ec="48">Components\Dto\ParseResultDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="LegacyContainerInstalled">
          <declaration><![CDATA[public bool LegacyContainerInstalled]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="61" sc="48" el="61" ec="52">Components\Dto\ParseResultDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="61" sc="53" el="61" ec="57">Components\Dto\ParseResultDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="LegacyError">
          <declaration><![CDATA[public string LegacyError]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="49" sc="37" el="49" ec="41">Components\Dto\ParseResultDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="49" sc="42" el="49" ec="46">Components\Dto\ParseResultDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="LegacySkinInstalled">
          <declaration><![CDATA[public bool LegacySkinInstalled]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="58" sc="43" el="58" ec="47">Components\Dto\ParseResultDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="58" sc="48" el="58" ec="52">Components\Dto\ParseResultDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Logs">
          <declaration><![CDATA[public IList<InstallerLogEntry> Logs]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="67" sc="48" el="67" ec="52">Components\Dto\ParseResultDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="67" sc="53" el="67" ec="57">Components\Dto\ParseResultDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Message">
          <declaration><![CDATA[public string Message]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="64" sc="33" el="64" ec="37">Components\Dto\ParseResultDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="64" sc="38" el="64" ec="42">Components\Dto\ParseResultDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="NoManifest">
          <declaration><![CDATA[public bool NoManifest]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="46" sc="34" el="46" ec="38">Components\Dto\ParseResultDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="46" sc="39" el="46" ec="43">Components\Dto\ParseResultDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Success">
          <declaration><![CDATA[public bool Success]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="40" sc="31" el="40" ec="35">Components\Dto\ParseResultDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="40" sc="36" el="40" ec="40">Components\Dto\ParseResultDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="Dnn.PersonaBar.Extensions.Components.Dto.Editors">
    <class name="AuthSystemPackageDetailDto">
      <declaration><![CDATA[public class AuthSystemPackageDetailDto : PackageInfoDto]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public AuthSystemPackageDetailDto()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="37" sc="9" el="39" ec="10">Components\Dto\Editors\AuthSystemPackageDetailDto.cs</location>
            <body hash="fcb5d144fe3b4d26cefa3cd5c50aba40"><![CDATA[public AuthSystemPackageDetailDto()
        {
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[public AuthSystemPackageDetailDto(int portalId, PackageInfo package) : base(portalId, package)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="41" sc="80" el="44" ec="10">Components\Dto\Editors\AuthSystemPackageDetailDto.cs</location>
            <body hash="4b94a2f5aa3f9f6a3592a86eb86cf14c"><![CDATA[base(portalId, package)
        {

        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="AppEnabled">
          <declaration><![CDATA[public bool AppEnabled]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="35" sc="34" el="35" ec="38">Components\Dto\Editors\AuthSystemPackageDetailDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="35" sc="39" el="35" ec="43">Components\Dto\Editors\AuthSystemPackageDetailDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="AppId">
          <declaration><![CDATA[public string AppId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="29" sc="31" el="29" ec="35">Components\Dto\Editors\AuthSystemPackageDetailDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="29" sc="36" el="29" ec="40">Components\Dto\Editors\AuthSystemPackageDetailDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="AppSecret">
          <declaration><![CDATA[public string AppSecret]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="32" sc="35" el="32" ec="39">Components\Dto\Editors\AuthSystemPackageDetailDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="32" sc="40" el="32" ec="44">Components\Dto\Editors\AuthSystemPackageDetailDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="AuthenticationType">
          <declaration><![CDATA[public string AuthenticationType]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="10" sc="44" el="10" ec="48">Components\Dto\Editors\AuthSystemPackageDetailDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="10" sc="49" el="10" ec="53">Components\Dto\Editors\AuthSystemPackageDetailDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Enabled">
          <declaration><![CDATA[public bool Enabled]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="25" sc="31" el="25" ec="35">Components\Dto\Editors\AuthSystemPackageDetailDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="25" sc="36" el="25" ec="40">Components\Dto\Editors\AuthSystemPackageDetailDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="LoginControlSource">
          <declaration><![CDATA[public string LoginControlSource]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="16" sc="44" el="16" ec="48">Components\Dto\Editors\AuthSystemPackageDetailDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="16" sc="49" el="16" ec="53">Components\Dto\Editors\AuthSystemPackageDetailDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="LogoffControlSource">
          <declaration><![CDATA[public string LogoffControlSource]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="19" sc="45" el="19" ec="49">Components\Dto\Editors\AuthSystemPackageDetailDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="19" sc="50" el="19" ec="54">Components\Dto\Editors\AuthSystemPackageDetailDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="SettingsControlSource">
          <declaration><![CDATA[public string SettingsControlSource]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="22" sc="47" el="22" ec="51">Components\Dto\Editors\AuthSystemPackageDetailDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="22" sc="52" el="22" ec="56">Components\Dto\Editors\AuthSystemPackageDetailDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="SettingUrl">
          <declaration><![CDATA[public string SettingUrl]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="13" sc="36" el="13" ec="40">Components\Dto\Editors\AuthSystemPackageDetailDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="13" sc="41" el="13" ec="45">Components\Dto\Editors\AuthSystemPackageDetailDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="CoreLanguagePackageDetailDto">
      <declaration><![CDATA[public class CoreLanguagePackageDetailDto : PackageInfoDto]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public CoreLanguagePackageDetailDto()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="22" sc="9" el="25" ec="10">Components\Dto\Editors\CoreLanguagePackageDetailDto.cs</location>
            <body hash="2af9451fce1e95298aaf7d57e5e03ced"><![CDATA[public CoreLanguagePackageDetailDto()
        {

        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[public CoreLanguagePackageDetailDto(int portalId, PackageInfo package) : base(portalId, package)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="27" sc="82" el="30" ec="10">Components\Dto\Editors\CoreLanguagePackageDetailDto.cs</location>
            <body hash="4b94a2f5aa3f9f6a3592a86eb86cf14c"><![CDATA[base(portalId, package)
        {

        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="EditUrlFormat">
          <declaration><![CDATA[public string EditUrlFormat]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="17" sc="39" el="17" ec="43">Components\Dto\Editors\CoreLanguagePackageDetailDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="17" sc="44" el="17" ec="48">Components\Dto\Editors\CoreLanguagePackageDetailDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="LanguageId">
          <declaration><![CDATA[public int LanguageId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="14" sc="33" el="14" ec="37">Components\Dto\Editors\CoreLanguagePackageDetailDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="14" sc="38" el="14" ec="42">Components\Dto\Editors\CoreLanguagePackageDetailDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Locales">
          <declaration><![CDATA[public IEnumerable<ListItemDto> Locales]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="11" sc="51" el="11" ec="55">Components\Dto\Editors\CoreLanguagePackageDetailDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="11" sc="56" el="11" ec="60">Components\Dto\Editors\CoreLanguagePackageDetailDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Packages">
          <declaration><![CDATA[public IEnumerable<ListItemDto> Packages]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="20" sc="52" el="20" ec="56">Components\Dto\Editors\CoreLanguagePackageDetailDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="20" sc="57" el="20" ec="61">Components\Dto\Editors\CoreLanguagePackageDetailDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="ExtensionLanguagePackageDetailDto">
      <declaration><![CDATA[public class ExtensionLanguagePackageDetailDto : CoreLanguagePackageDetailDto]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public ExtensionLanguagePackageDetailDto()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="13" sc="9" el="16" ec="10">Components\Dto\Editors\ExtensionLanguagePackageDetailDto.cs</location>
            <body hash="193a4821be685f7d035379bed2ae3997"><![CDATA[public ExtensionLanguagePackageDetailDto()
        {

        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[public ExtensionLanguagePackageDetailDto(int portalId, PackageInfo package) : base(portalId, package)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="18" sc="87" el="21" ec="10">Components\Dto\Editors\ExtensionLanguagePackageDetailDto.cs</location>
            <body hash="4b94a2f5aa3f9f6a3592a86eb86cf14c"><![CDATA[base(portalId, package)
        {

        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="DependentPackageId">
          <declaration><![CDATA[public int DependentPackageId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="11" sc="41" el="11" ec="45">Components\Dto\Editors\ExtensionLanguagePackageDetailDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="11" sc="46" el="11" ec="50">Components\Dto\Editors\ExtensionLanguagePackageDetailDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="JsLibraryPackageDetailDto">
      <declaration><![CDATA[public class JsLibraryPackageDetailDto : PackageInfoDto]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public JsLibraryPackageDetailDto()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="31" sc="9" el="34" ec="10">Components\Dto\Editors\JsLibraryPackageDetailDto.cs</location>
            <body hash="f23d7ff1d45e6cb81c3adb728bf951d6"><![CDATA[public JsLibraryPackageDetailDto()
        {

        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[public JsLibraryPackageDetailDto(int portalId, PackageInfo package) : base(portalId, package)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="36" sc="79" el="39" ec="10">Components\Dto\Editors\JsLibraryPackageDetailDto.cs</location>
            <body hash="4b94a2f5aa3f9f6a3592a86eb86cf14c"><![CDATA[base(portalId, package)
        {

        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="CustomCdn">
          <declaration><![CDATA[public string CustomCdn]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="23" sc="35" el="23" ec="39">Components\Dto\Editors\JsLibraryPackageDetailDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="23" sc="40" el="23" ec="44">Components\Dto\Editors\JsLibraryPackageDetailDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="DefaultCdn">
          <declaration><![CDATA[public string DefaultCdn]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="14" sc="36" el="14" ec="40">Components\Dto\Editors\JsLibraryPackageDetailDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="14" sc="41" el="14" ec="45">Components\Dto\Editors\JsLibraryPackageDetailDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Dependencies">
          <declaration><![CDATA[public IEnumerable<UsedByPackage> Dependencies]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="26" sc="58" el="26" ec="62">Components\Dto\Editors\JsLibraryPackageDetailDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="26" sc="63" el="26" ec="67">Components\Dto\Editors\JsLibraryPackageDetailDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="FileName">
          <declaration><![CDATA[public string FileName]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="17" sc="34" el="17" ec="38">Components\Dto\Editors\JsLibraryPackageDetailDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="17" sc="39" el="17" ec="43">Components\Dto\Editors\JsLibraryPackageDetailDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Location">
          <declaration><![CDATA[public string Location]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="20" sc="34" el="20" ec="38">Components\Dto\Editors\JsLibraryPackageDetailDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="20" sc="39" el="20" ec="43">Components\Dto\Editors\JsLibraryPackageDetailDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ObjectName">
          <declaration><![CDATA[public string ObjectName]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="11" sc="36" el="11" ec="40">Components\Dto\Editors\JsLibraryPackageDetailDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="11" sc="41" el="11" ec="45">Components\Dto\Editors\JsLibraryPackageDetailDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="UsedBy">
          <declaration><![CDATA[public IEnumerable<UsedByPackage> UsedBy]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="29" sc="52" el="29" ec="56">Components\Dto\Editors\JsLibraryPackageDetailDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="29" sc="57" el="29" ec="61">Components\Dto\Editors\JsLibraryPackageDetailDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="ListItemDto">
      <declaration><![CDATA[public class ListItemDto]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public ListItemDto()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="Id">
          <declaration><![CDATA[public int Id]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="30" sc="25" el="30" ec="29">Components\Dto\Editors\ListItemDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="30" sc="30" el="30" ec="34">Components\Dto\Editors\ListItemDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Name">
          <declaration><![CDATA[public string Name]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="33" sc="30" el="33" ec="34">Components\Dto\Editors\ListItemDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="33" sc="35" el="33" ec="39">Components\Dto\Editors\ListItemDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="ModuleControlDto">
      <declaration><![CDATA[public class ModuleControlDto]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public ModuleControlDto()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="68" sc="9" el="71" ec="10">Components\Dto\Editors\ModuleControlDto.cs</location>
            <body hash="26cebf75525ce904fc9e9acc48346db7"><![CDATA[public ModuleControlDto()
        {
            
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[public ModuleControlDto(ModuleControlInfo moduleControl)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="73" sc="9" el="86" ec="10">Components\Dto\Editors\ModuleControlDto.cs</location>
            <body hash="753cd12a6e2bb2a1690cc922574124ad"><![CDATA[public ModuleControlDto(ModuleControlInfo moduleControl)
        {
            Id = moduleControl.ModuleControlID;
            DefinitionId = moduleControl.ModuleDefID;
            Key = moduleControl.ControlKey;
            Title = moduleControl.ControlTitle;
            Source = moduleControl.ControlSrc;
            Type = moduleControl.ControlType;
            Order = moduleControl.ViewOrder;
            Icon = moduleControl.IconFile;
            HelpUrl = moduleControl.HelpURL;
            SupportPopups = moduleControl.SupportsPopUps;
            SupportPartialRendering = moduleControl.SupportsPartialRendering;
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="ToModuleControlInfo">
          <declaration><![CDATA[public ModuleControlInfo ToModuleControlInfo()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="89" sc="9" el="104" ec="10">Components\Dto\Editors\ModuleControlDto.cs</location>
            <body hash="35436aaa9fcdb2df2d5f0961d3db6b30"><![CDATA[{
            return new ModuleControlInfo
            {
                ModuleControlID = Id,
                ModuleDefID = DefinitionId,
                ControlKey = Key,
                ControlTitle = Title,
                ControlSrc = Source,
                ControlType = Type,
                ViewOrder = Order,
                IconFile = Icon,
                HelpURL = HelpUrl,
                SupportsPartialRendering = SupportPartialRendering,
                SupportsPopUps = SupportPopups
            };
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="DefinitionId">
          <declaration><![CDATA[public int DefinitionId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="38" sc="35" el="38" ec="39">Components\Dto\Editors\ModuleControlDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="38" sc="40" el="38" ec="44">Components\Dto\Editors\ModuleControlDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="HelpUrl">
          <declaration><![CDATA[public string HelpUrl]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="60" sc="33" el="60" ec="37">Components\Dto\Editors\ModuleControlDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="60" sc="38" el="60" ec="42">Components\Dto\Editors\ModuleControlDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Icon">
          <declaration><![CDATA[public string Icon]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="57" sc="30" el="57" ec="34">Components\Dto\Editors\ModuleControlDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="57" sc="35" el="57" ec="39">Components\Dto\Editors\ModuleControlDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Id">
          <declaration><![CDATA[public int Id]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="35" sc="25" el="35" ec="29">Components\Dto\Editors\ModuleControlDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="35" sc="30" el="35" ec="34">Components\Dto\Editors\ModuleControlDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Key">
          <declaration><![CDATA[public string Key]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="41" sc="29" el="41" ec="33">Components\Dto\Editors\ModuleControlDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="41" sc="34" el="41" ec="38">Components\Dto\Editors\ModuleControlDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Order">
          <declaration><![CDATA[public int Order]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="54" sc="28" el="54" ec="32">Components\Dto\Editors\ModuleControlDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="54" sc="33" el="54" ec="37">Components\Dto\Editors\ModuleControlDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Source">
          <declaration><![CDATA[public string Source]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="47" sc="32" el="47" ec="36">Components\Dto\Editors\ModuleControlDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="47" sc="37" el="47" ec="41">Components\Dto\Editors\ModuleControlDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="SupportPartialRendering">
          <declaration><![CDATA[public bool SupportPartialRendering]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="66" sc="47" el="66" ec="51">Components\Dto\Editors\ModuleControlDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="66" sc="52" el="66" ec="56">Components\Dto\Editors\ModuleControlDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="SupportPopups">
          <declaration><![CDATA[public bool SupportPopups]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="63" sc="37" el="63" ec="41">Components\Dto\Editors\ModuleControlDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="63" sc="42" el="63" ec="46">Components\Dto\Editors\ModuleControlDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Title">
          <declaration><![CDATA[public string Title]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="44" sc="31" el="44" ec="35">Components\Dto\Editors\ModuleControlDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="44" sc="36" el="44" ec="40">Components\Dto\Editors\ModuleControlDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Type">
          <declaration><![CDATA[public SecurityAccessLevel Type]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="51" sc="43" el="51" ec="47">Components\Dto\Editors\ModuleControlDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="51" sc="48" el="51" ec="52">Components\Dto\Editors\ModuleControlDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="ModuleDefinitionDto">
      <declaration><![CDATA[public class ModuleDefinitionDto]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private IList<ModuleControlDto> <Controls>k__BackingField = new List<ModuleControlDto>();]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="50" sc="65" el="55" ec="10">Components\Dto\Editors\ModuleDefinitionDto.cs</location>
            <body hash="69e5380a1bf8bcaf9ac6d7b6d57b6f14"><![CDATA[new List<ModuleControlDto>();

        public ModuleDefinitionDto()
        {
            
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[private IList<ModuleControlDto> <Controls>k__BackingField = new List<ModuleControlDto>();]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="50" sc="65" el="69" ec="10">Components\Dto\Editors\ModuleDefinitionDto.cs</location>
            <body hash="31d454aff5a7b486bfea72fff964a574"><![CDATA[new List<ModuleControlDto>();

        public ModuleDefinitionDto()
        {
            
        }

        public ModuleDefinitionDto(ModuleDefinitionInfo definition)
        {
            Id = definition.ModuleDefID;
            DesktopModuleId = definition.DesktopModuleID;
            Name = definition.DefinitionName;
            FriendlyName = definition.FriendlyName;
            CacheTime = definition.DefaultCacheTime;

            foreach (var moduleControlInfo in definition.ModuleControls.Values)
            {
                Controls.Add(new ModuleControlDto(moduleControlInfo));
            }
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="ToModuleDefinitionInfo">
          <declaration><![CDATA[public ModuleDefinitionInfo ToModuleDefinitionInfo()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="72" sc="9" el="81" ec="10">Components\Dto\Editors\ModuleDefinitionDto.cs</location>
            <body hash="088fb37fb385eb709ef052b2fe678247"><![CDATA[{
            return new ModuleDefinitionInfo
            {
                ModuleDefID = Id,
                DesktopModuleID = DesktopModuleId,
                DefinitionName = Name,
                FriendlyName = FriendlyName,
                DefaultCacheTime = CacheTime
            };
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="CacheTime">
          <declaration><![CDATA[public int CacheTime]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="47" sc="32" el="47" ec="36">Components\Dto\Editors\ModuleDefinitionDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="47" sc="37" el="47" ec="41">Components\Dto\Editors\ModuleDefinitionDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Controls">
          <declaration><![CDATA[public IList<ModuleControlDto> Controls]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="50" sc="51" el="50" ec="55">Components\Dto\Editors\ModuleDefinitionDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="50" sc="56" el="50" ec="60">Components\Dto\Editors\ModuleDefinitionDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="DesktopModuleId">
          <declaration><![CDATA[public int DesktopModuleId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="38" sc="38" el="38" ec="42">Components\Dto\Editors\ModuleDefinitionDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="38" sc="43" el="38" ec="47">Components\Dto\Editors\ModuleDefinitionDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="FriendlyName">
          <declaration><![CDATA[public string FriendlyName]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="44" sc="38" el="44" ec="42">Components\Dto\Editors\ModuleDefinitionDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="44" sc="43" el="44" ec="47">Components\Dto\Editors\ModuleDefinitionDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Id">
          <declaration><![CDATA[public int Id]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="35" sc="25" el="35" ec="29">Components\Dto\Editors\ModuleDefinitionDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="35" sc="30" el="35" ec="34">Components\Dto\Editors\ModuleDefinitionDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Name">
          <declaration><![CDATA[public string Name]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="41" sc="30" el="41" ec="34">Components\Dto\Editors\ModuleDefinitionDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="41" sc="35" el="41" ec="39">Components\Dto\Editors\ModuleDefinitionDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="ModulePackageDetailDto">
      <declaration><![CDATA[public class ModulePackageDetailDto : ModulePackagePermissionsDto]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private IList<ListItemDto> <AssignedPortals>k__BackingField = new List<ListItemDto>();]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="73" sc="67" el="84" ec="10">Components\Dto\Editors\ModulePackageDetailDto.cs</location>
            <body hash="e72b4dcd5db72e714979ac564231ce53"><![CDATA[new List<ListItemDto>();

        [JsonProperty("unassignedPortals")]
        public IList<ListItemDto> UnassignedPortals { get; set; } = new List<ListItemDto>();

        [JsonProperty("moduleDefinitions")]
        public IList<ModuleDefinitionDto> ModuleDefinitions { get; set; }  = new List<ModuleDefinitionDto>();

        public ModulePackageDetailDto()
        {
            
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[private IList<ListItemDto> <AssignedPortals>k__BackingField = new List<ListItemDto>();]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="73" sc="67" el="124" ec="10">Components\Dto\Editors\ModulePackageDetailDto.cs</location>
            <body hash="421e7aeca1ebc00a5c107c068bd60093"><![CDATA[new List<ListItemDto>();

        [JsonProperty("unassignedPortals")]
        public IList<ListItemDto> UnassignedPortals { get; set; } = new List<ListItemDto>();

        [JsonProperty("moduleDefinitions")]
        public IList<ModuleDefinitionDto> ModuleDefinitions { get; set; }  = new List<ModuleDefinitionDto>();

        public ModulePackageDetailDto()
        {
            
        }

        public ModulePackageDetailDto(int portalId, PackageInfo package, DesktopModuleInfo desktopModule) : base(portalId, package)
        {
            DesktopModuleId = desktopModule.DesktopModuleID;
            ModuleName = desktopModule.ModuleName;
            FolderName = desktopModule.FolderName;
            BusinessController = desktopModule.BusinessControllerClass;
            Category = desktopModule.Category;
            Dependencies = desktopModule.Dependencies;
            HostPermissions = desktopModule.Permissions;
            Portable = desktopModule.IsPortable;
            Searchable = desktopModule.IsSearchable;
            Upgradeable = desktopModule.IsUpgradeable;
            PremiumModule = desktopModule.IsPremium;
            Shareable = desktopModule.Shareable;

            if (!desktopModule.IsAdmin)
            {
                var portalDesktopModules =
                    DesktopModuleController.GetPortalDesktopModulesByDesktopModuleID(desktopModule.DesktopModuleID);
                foreach (var portalDesktopModuleInfo in portalDesktopModules)
                {
                    var value = portalDesktopModuleInfo.Value;
                    AssignedPortals.Add(new ListItemDto { Id = value.PortalID, Name = value.PortalName });
                }

                var assignedIds = AssignedPortals.Select(p => p.Id).ToArray();
                var allPortals = PortalController.Instance.GetPortals().OfType<PortalInfo>().Where(p => !assignedIds.Contains(p.PortalID));

                foreach (var portalInfo in allPortals)
                {
                    UnassignedPortals.Add(new ListItemDto { Id = portalInfo.PortalID, Name = portalInfo.PortalName });
                }
            }

            foreach (var moduleDefinition in desktopModule.ModuleDefinitions.Values)
            {
                ModuleDefinitions.Add(new ModuleDefinitionDto(moduleDefinition));
            }
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="AssignedPortals">
          <declaration><![CDATA[public IList<ListItemDto> AssignedPortals]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="73" sc="53" el="73" ec="57">Components\Dto\Editors\ModulePackageDetailDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="73" sc="58" el="73" ec="62">Components\Dto\Editors\ModulePackageDetailDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="BusinessController">
          <declaration><![CDATA[public string BusinessController]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="49" sc="44" el="49" ec="48">Components\Dto\Editors\ModulePackageDetailDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="49" sc="49" el="49" ec="53">Components\Dto\Editors\ModulePackageDetailDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Category">
          <declaration><![CDATA[public string Category]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="46" sc="34" el="46" ec="38">Components\Dto\Editors\ModulePackageDetailDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="46" sc="39" el="46" ec="43">Components\Dto\Editors\ModulePackageDetailDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Dependencies">
          <declaration><![CDATA[public string Dependencies]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="52" sc="38" el="52" ec="42">Components\Dto\Editors\ModulePackageDetailDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="52" sc="43" el="52" ec="47">Components\Dto\Editors\ModulePackageDetailDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="FolderName">
          <declaration><![CDATA[public string FolderName]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="43" sc="36" el="43" ec="40">Components\Dto\Editors\ModulePackageDetailDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="43" sc="41" el="43" ec="45">Components\Dto\Editors\ModulePackageDetailDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="HostPermissions">
          <declaration><![CDATA[public string HostPermissions]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="55" sc="41" el="55" ec="45">Components\Dto\Editors\ModulePackageDetailDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="55" sc="46" el="55" ec="50">Components\Dto\Editors\ModulePackageDetailDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ModuleDefinitions">
          <declaration><![CDATA[public IList<ModuleDefinitionDto> ModuleDefinitions]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="79" sc="63" el="79" ec="67">Components\Dto\Editors\ModulePackageDetailDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="79" sc="68" el="79" ec="72">Components\Dto\Editors\ModulePackageDetailDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ModuleName">
          <declaration><![CDATA[public string ModuleName]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="40" sc="36" el="40" ec="40">Components\Dto\Editors\ModulePackageDetailDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="40" sc="41" el="40" ec="45">Components\Dto\Editors\ModulePackageDetailDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Portable">
          <declaration><![CDATA[public bool Portable]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="58" sc="32" el="58" ec="36">Components\Dto\Editors\ModulePackageDetailDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="58" sc="37" el="58" ec="41">Components\Dto\Editors\ModulePackageDetailDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="PremiumModule">
          <declaration><![CDATA[public bool PremiumModule]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="70" sc="37" el="70" ec="41">Components\Dto\Editors\ModulePackageDetailDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="70" sc="42" el="70" ec="46">Components\Dto\Editors\ModulePackageDetailDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Searchable">
          <declaration><![CDATA[public bool Searchable]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="61" sc="34" el="61" ec="38">Components\Dto\Editors\ModulePackageDetailDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="61" sc="39" el="61" ec="43">Components\Dto\Editors\ModulePackageDetailDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Shareable">
          <declaration><![CDATA[public ModuleSharing Shareable]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="67" sc="42" el="67" ec="46">Components\Dto\Editors\ModulePackageDetailDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="67" sc="47" el="67" ec="51">Components\Dto\Editors\ModulePackageDetailDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="UnassignedPortals">
          <declaration><![CDATA[public IList<ListItemDto> UnassignedPortals]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="76" sc="55" el="76" ec="59">Components\Dto\Editors\ModulePackageDetailDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="76" sc="60" el="76" ec="64">Components\Dto\Editors\ModulePackageDetailDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Upgradeable">
          <declaration><![CDATA[public bool Upgradeable]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="64" sc="35" el="64" ec="39">Components\Dto\Editors\ModulePackageDetailDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="64" sc="40" el="64" ec="44">Components\Dto\Editors\ModulePackageDetailDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="ModulePackagePermissionsDto">
      <declaration><![CDATA[public class ModulePackagePermissionsDto : PackageInfoDto]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public ModulePackagePermissionsDto()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="42" sc="9" el="45" ec="10">Components\Dto\Editors\ModulePackagePermissionsDto.cs</location>
            <body hash="731fff53d5de21759a61aa554bbfbcd5"><![CDATA[public ModulePackagePermissionsDto()
        {
            
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[public ModulePackagePermissionsDto(int portalId, PackageInfo package) : base(portalId, package)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="47" sc="81" el="50" ec="10">Components\Dto\Editors\ModulePackagePermissionsDto.cs</location>
            <body hash="e51a046c3e6912da3d0e12a5a3b37ecb"><![CDATA[base(portalId, package)
        {
            
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="DesktopModuleId">
          <declaration><![CDATA[public int DesktopModuleId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="36" sc="38" el="36" ec="42">Components\Dto\Editors\ModulePackagePermissionsDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="36" sc="43" el="36" ec="47">Components\Dto\Editors\ModulePackagePermissionsDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Permissions">
          <declaration><![CDATA[public PermissionsDto Permissions]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="40" sc="45" el="40" ec="49">Components\Dto\Editors\ModulePackagePermissionsDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="40" sc="50" el="40" ec="54">Components\Dto\Editors\ModulePackagePermissionsDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="PermissionsDto">
      <declaration><![CDATA[public class PermissionsDto : Permissions]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public PermissionsDto(bool needDefinitions) : base(needDefinitions)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="19" sc="55" el="25" ec="10">Components\Dto\Editors\PermissionsDto.cs</location>
            <body hash="9a177de36741a799e25cc9458ccb4e94"><![CDATA[base(needDefinitions)
        {
            foreach (var role in PermissionProvider.Instance().ImplicitRolesForPages(PortalSettings.Current.PortalId))
            {
                this.EnsureRole(role, true, true);
            }
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="LoadPermissionDefinitions">
          <declaration><![CDATA[protected override void LoadPermissionDefinitions()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="31" sc="9" el="42" ec="10">Components\Dto\Editors\PermissionsDto.cs</location>
            <body hash="9466d46f53033e5f412cd7d915d73853"><![CDATA[{
            foreach (PermissionInfo permission in PermissionController.GetPermissionsByPortalDesktopModule())
            {
                PermissionDefinitions.Add(new Permission()
                {
                    PermissionId = permission.PermissionID,
                    PermissionName = permission.PermissionName,
                    FullControl = PermissionHelper.IsFullControl(permission),
                    View = PermissionHelper.IsViewPermisison(permission)
                });
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="DesktopModuleId">
          <declaration><![CDATA[public int DesktopModuleId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="28" sc="38" el="28" ec="42">Components\Dto\Editors\PermissionsDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="28" sc="43" el="28" ec="47">Components\Dto\Editors\PermissionsDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="SkinObjectPackageDetailDto">
      <declaration><![CDATA[public class SkinObjectPackageDetailDto : PackageInfoDto]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public SkinObjectPackageDetailDto()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="18" sc="9" el="21" ec="10">Components\Dto\Editors\SkinObjectPackageDetailDto.cs</location>
            <body hash="e8b9b0577e218d2565c41099055a774e"><![CDATA[public SkinObjectPackageDetailDto()
        {

        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[public SkinObjectPackageDetailDto(int portalId, PackageInfo package) : base(portalId, package)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="23" sc="80" el="26" ec="10">Components\Dto\Editors\SkinObjectPackageDetailDto.cs</location>
            <body hash="4b94a2f5aa3f9f6a3592a86eb86cf14c"><![CDATA[base(portalId, package)
        {

        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="ControlKey">
          <declaration><![CDATA[public string ControlKey]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="10" sc="36" el="10" ec="40">Components\Dto\Editors\SkinObjectPackageDetailDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="10" sc="41" el="10" ec="45">Components\Dto\Editors\SkinObjectPackageDetailDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ControlSrc">
          <declaration><![CDATA[public string ControlSrc]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="13" sc="36" el="13" ec="40">Components\Dto\Editors\SkinObjectPackageDetailDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="13" sc="41" el="13" ec="45">Components\Dto\Editors\SkinObjectPackageDetailDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="SupportsPartialRendering">
          <declaration><![CDATA[public bool SupportsPartialRendering]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="16" sc="48" el="16" ec="52">Components\Dto\Editors\SkinObjectPackageDetailDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="16" sc="53" el="16" ec="57">Components\Dto\Editors\SkinObjectPackageDetailDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="SkinPackageDetailDto">
      <declaration><![CDATA[public class SkinPackageDetailDto : PackageInfoDto]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public SkinPackageDetailDto()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="12" sc="9" el="15" ec="10">Components\Dto\Editors\SkinPackageDetailDto.cs</location>
            <body hash="20df8814d720f2c499beaa83016a21ab"><![CDATA[public SkinPackageDetailDto()
        {

        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[public SkinPackageDetailDto(int portalId, PackageInfo package) : base(portalId, package)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="17" sc="74" el="20" ec="10">Components\Dto\Editors\SkinPackageDetailDto.cs</location>
            <body hash="4b94a2f5aa3f9f6a3592a86eb86cf14c"><![CDATA[base(portalId, package)
        {

        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="ThemePackageName">
          <declaration><![CDATA[public string ThemePackageName]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="10" sc="42" el="10" ec="46">Components\Dto\Editors\SkinPackageDetailDto.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="10" sc="47" el="10" ec="51">Components\Dto\Editors\SkinPackageDetailDto.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="UsedByPackage">
      <declaration><![CDATA[public class UsedByPackage]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public UsedByPackage()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="Id">
          <declaration><![CDATA[public int Id]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="9" sc="25" el="9" ec="29">Components\Dto\Editors\UsedByPackage.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="9" sc="30" el="9" ec="34">Components\Dto\Editors\UsedByPackage.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Name">
          <declaration><![CDATA[public string Name]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="12" sc="30" el="12" ec="34">Components\Dto\Editors\UsedByPackage.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="12" sc="35" el="12" ec="39">Components\Dto\Editors\UsedByPackage.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Version">
          <declaration><![CDATA[public string Version]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="15" sc="33" el="15" ec="37">Components\Dto\Editors\UsedByPackage.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="15" sc="38" el="15" ec="42">Components\Dto\Editors\UsedByPackage.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="Dnn.PersonaBar.Extensions.Components.Editors">
    <class name="AuthSystemPackageEditor">
      <declaration><![CDATA[public class AuthSystemPackageEditor : IPackageEditor]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public AuthSystemPackageEditor()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
        <constructor name=".cctor">
          <declaration><![CDATA[static AuthSystemPackageEditor()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="20" sc="9" el="20" ec="112">Components\Editors\AuthSystemPackageEditor.cs</location>
            <body hash="4e3c8011e0e48b0d62564bd7a919b435"><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof(AuthSystemPackageEditor))]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="GetPackageDetail">
          <declaration><![CDATA[public PackageInfoDto GetPackageDetail(int portalId, PackageInfo package)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="25" sc="9" el="44" ec="10">Components\Editors\AuthSystemPackageEditor.cs</location>
            <body hash="5cd7fa6a18616f1f38a48a49b6096270"><![CDATA[{
            var authSystem = AuthenticationController.GetAuthenticationServiceByPackageID(package.PackageID);
            var detail = new AuthSystemPackageDetailDto(portalId, package)
            {
                AuthenticationType = authSystem.AuthenticationType,
            };

            var isHostUser = UserController.Instance.GetCurrentUserInfo().IsSuperUser;
            if (isHostUser)
            {
                detail.ReadOnly |= authSystem.AuthenticationType == "DNN";
                detail.LoginControlSource = authSystem.LoginControlSrc;
                detail.LogoffControlSource = authSystem.LogoffControlSrc;
                detail.SettingsControlSource = authSystem.SettingsControlSrc;
                detail.Enabled = authSystem.IsEnabled;
            }

            LoadCustomSettings(portalId, package, authSystem, detail);
            return detail;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetSettingUrl">
          <declaration><![CDATA[private static string GetSettingUrl(int portalId, int authSystemPackageId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="101" sc="9" el="121" ec="10">Components\Editors\AuthSystemPackageEditor.cs</location>
            <body hash="c07049b9624ebd24cf1cd99b25c88ca0"><![CDATA[{
            var module = ModuleController.Instance.GetModulesByDefinition(portalId, "Extensions")
                .Cast<ModuleInfo>().FirstOrDefault();
            if (module == null)
            {
                return string.Empty;
            }

            var tabId = TabController.Instance.GetTabsByModuleID(module.ModuleID).Keys.FirstOrDefault();
            if (tabId <= 0)
            {
                return string.Empty;
            }

            // Ex.: /Admin/Extensions/ctl/Edit/mid/##/packageid/##/mode/settings?popUp=true
            return Globals.NavigateURL(tabId, PortalSettings.Current, "Edit",
                "mid=" + module.ModuleID,
                "packageid=" + authSystemPackageId,
                "popUp=true",
                "mode=settings");
        }]]></body>
          </codeblock>
        </method>
        <method name="LoadCustomSettings">
          <declaration><![CDATA[private static void LoadCustomSettings(int portalId, PackageInfo package, AuthenticationInfo authSystem, AuthSystemPackageDetailDto detail)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="124" sc="9" el="147" ec="10">Components\Editors\AuthSystemPackageEditor.cs</location>
            <body hash="ea9931a277d37d156fe38d735131f470"><![CDATA[{
            var hasCustomSettings = !string.IsNullOrEmpty(authSystem.SettingsControlSrc);
            if (hasCustomSettings)
            {
                detail.SettingUrl = GetSettingUrl(portalId, package.PackageID);
            }

            // special case for DNN provided external authentication systems
            switch (detail.AuthenticationType.ToLowerInvariant())
            {
                case "facebook":
                case "google":
                case "live":
                case "twitter":
                    var config = OAuthConfigBase.GetConfig(detail.AuthenticationType, portalId);
                    if (config != null)
                    {
                        detail.AppId = config.APIKey;
                        detail.AppSecret = config.APISecret;
                        detail.AppEnabled = config.Enabled;
                    }
                    break;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="SaveCustomSettings">
          <declaration><![CDATA[private static void SaveCustomSettings(PackageSettingsDto packageSettings)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="150" sc="9" el="190" ec="10">Components\Editors\AuthSystemPackageEditor.cs</location>
            <body hash="00c13c76884646af7a7aadaa982d5436"><![CDATA[{
            // special case for specific DNN provided external authentication systems
            string authType;
            if (packageSettings.EditorActions.TryGetValue("authenticationType", out authType))
            {
                switch (authType.ToLowerInvariant())
                {
                    case "facebook":
                    case "google":
                    case "live":
                    case "twitter":
                        var dirty = false;
                        string value;
                        var config = OAuthConfigBase.GetConfig(authType, packageSettings.PortalId);

                        if (packageSettings.EditorActions.TryGetValue("appId", out value)
                            && config.APIKey != value)
                        {
                            config.APIKey = value;
                            dirty = true;
                        }

                        if (packageSettings.EditorActions.TryGetValue("appSecret", out value)
                            && config.APISecret != value)
                        {
                            config.APISecret = value;
                            dirty = true;
                        }

                        if (packageSettings.EditorActions.TryGetValue("appEnabled", out value)
                            && config.Enabled.ToString().ToUpperInvariant() != value.ToUpperInvariant())
                        {
                            config.Enabled = "TRUE".Equals(value, StringComparison.InvariantCultureIgnoreCase);
                            dirty = true;
                        }

                        if (dirty) OAuthConfigBase.UpdateConfig(config);
                        break;
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="SavePackageSettings">
          <declaration><![CDATA[public bool SavePackageSettings(PackageSettingsDto packageSettings, out string errorMessage)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="47" sc="9" el="94" ec="10">Components\Editors\AuthSystemPackageEditor.cs</location>
            <body hash="13764d68565416a3ba74a3403ce39abf"><![CDATA[{
            errorMessage = string.Empty;

            try
            {
                var isHostUser = UserController.Instance.GetCurrentUserInfo().IsSuperUser;

                if (isHostUser)
                {
                    string value;
                    var authSystem = AuthenticationController.GetAuthenticationServiceByPackageID(packageSettings.PackageId);

                    if (packageSettings.EditorActions.TryGetValue("loginControlSource", out value)
                        && !string.IsNullOrEmpty(value))
                    {
                        authSystem.LoginControlSrc = value;
                    }
                    if (packageSettings.EditorActions.TryGetValue("logoffControlSource", out value)
                        && !string.IsNullOrEmpty(value))
                    {
                        authSystem.LogoffControlSrc = value;
                    }
                    if (packageSettings.EditorActions.TryGetValue("settingsControlSource", out value)
                        && !string.IsNullOrEmpty(value))
                    {
                        authSystem.SettingsControlSrc = value;
                    }
                    if (packageSettings.EditorActions.TryGetValue("enabled", out value)
                        && !string.IsNullOrEmpty(value))
                    {
                        bool b;
                        bool.TryParse(value, out b);
                        authSystem.IsEnabled = b;
                    }

                    AuthenticationController.UpdateAuthentication(authSystem);
                    SaveCustomSettings(packageSettings);
                }

                return true;
            }
            catch (Exception ex)
            {
                Logger.Error(ex);
                errorMessage = ex.Message;
                return false;
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="Logger">
          <declaration><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof(AuthSystemPackageEditor));]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="CoreLanguagePackageEditor">
      <declaration><![CDATA[public class CoreLanguagePackageEditor : IPackageEditor]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public CoreLanguagePackageEditor()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
        <constructor name=".cctor">
          <declaration><![CDATA[static CoreLanguagePackageEditor()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="15" sc="9" el="15" ec="111">Components\Editors\CoreLanguagePackageEditor.cs</location>
            <body hash="baa3099cc5cb1d26f5858285712b76f7"><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof(JsLibraryPackageEditor))]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="GetPackageDetail">
          <declaration><![CDATA[public PackageInfoDto GetPackageDetail(int portalId, PackageInfo package)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="18" sc="9" el="36" ec="10">Components\Editors\CoreLanguagePackageEditor.cs</location>
            <body hash="fd833883660bdc8c5a6c4c8323f10b44"><![CDATA[{
            var languagePack = LanguagePackController.GetLanguagePackByPackage(package.PackageID);
            var languagesTab = TabController.GetTabByTabPath(portalId, "//Admin//Languages", Null.NullString);

            var detail = new CoreLanguagePackageDetailDto(portalId, package)
            {
                Locales = Utility.GetAllLanguagesList(),
                LanguageId = languagePack.LanguageID,
                EditUrlFormat = Globals.NavigateURL(languagesTab, "", "Locale={0}")
            };

            if (languagePack.PackageType == LanguagePackType.Extension)
            {
                //Get all the packages but only bind to combo if not a language package
                detail.Packages = Utility.GetAllPackagesListExceptLangPacks();
            }

            return detail;
        }]]></body>
          </codeblock>
        </method>
        <method name="SavePackageSettings">
          <declaration><![CDATA[public bool SavePackageSettings(PackageSettingsDto packageSettings, out string errorMessage)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="39" sc="9" el="63" ec="10">Components\Editors\CoreLanguagePackageEditor.cs</location>
            <body hash="6345594d651d231f3f773a472c7af4fd"><![CDATA[{
            errorMessage = string.Empty;

            try
            {
                string value;
                var changed = false;
                var languagePack = LanguagePackController.GetLanguagePackByPackage(packageSettings.PackageId);
                if (packageSettings.EditorActions.TryGetValue("languageId", out value)
                    && !string.IsNullOrEmpty(value) && value != languagePack.LanguageID.ToString())
                {
                    languagePack.LanguageID = Convert.ToInt32(value);
                    changed = true;
                }

                if (changed) LanguagePackController.SaveLanguagePack(languagePack);
                return true;
            }
            catch (Exception ex)
            {
                Logger.Error(ex);
                errorMessage = ex.Message;
                return false;
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="Logger">
          <declaration><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof(JsLibraryPackageEditor));]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="ExtensionLanguagePackageEditor">
      <declaration><![CDATA[public class ExtensionLanguagePackageEditor : IPackageEditor]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public ExtensionLanguagePackageEditor()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
        <constructor name=".cctor">
          <declaration><![CDATA[static ExtensionLanguagePackageEditor()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="15" sc="9" el="15" ec="111">Components\Editors\ExtensionLanguagePackageEditor.cs</location>
            <body hash="baa3099cc5cb1d26f5858285712b76f7"><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof(JsLibraryPackageEditor))]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="GetPackageDetail">
          <declaration><![CDATA[public PackageInfoDto GetPackageDetail(int portalId, PackageInfo package)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="18" sc="9" el="37" ec="10">Components\Editors\ExtensionLanguagePackageEditor.cs</location>
            <body hash="8a941f22d7edd5308e623f683df44b27"><![CDATA[{
            var languagePack = LanguagePackController.GetLanguagePackByPackage(package.PackageID);
            var languagesTab = TabController.GetTabByTabPath(portalId, "//Admin//Languages", Null.NullString);

            var detail = new ExtensionLanguagePackageDetailDto(portalId, package)
            {
                Locales = Utility.GetAllLanguagesList(),
                LanguageId = languagePack.LanguageID,
                DependentPackageId = languagePack.DependentPackageID,
                EditUrlFormat = Globals.NavigateURL(languagesTab, "", "Locale={0}")
            };

            if (languagePack.PackageType == LanguagePackType.Extension)
            {
                //Get all the packages but only bind to combo if not a language package
                detail.Packages = Utility.GetAllPackagesListExceptLangPacks();
            }

            return detail;
        }]]></body>
          </codeblock>
        </method>
        <method name="SavePackageSettings">
          <declaration><![CDATA[public bool SavePackageSettings(PackageSettingsDto packageSettings, out string errorMessage)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="40" sc="9" el="71" ec="10">Components\Editors\ExtensionLanguagePackageEditor.cs</location>
            <body hash="b3d966e895500d5832396353a9c1cae6"><![CDATA[{
            errorMessage = string.Empty;

            try
            {
                string value;
                var changed = false;
                var languagePack = LanguagePackController.GetLanguagePackByPackage(packageSettings.PackageId);
                if (packageSettings.EditorActions.TryGetValue("languageId", out value)
                    && !string.IsNullOrEmpty(value) && value != languagePack.LanguageID.ToString())
                {
                    languagePack.LanguageID = Convert.ToInt32(value);
                    changed = true;
                }

                if (packageSettings.EditorActions.TryGetValue("dependentPackageId", out value)
                    && !string.IsNullOrEmpty(value) && value != languagePack.DependentPackageID.ToString())
                {
                    languagePack.DependentPackageID = Convert.ToInt32(value);
                    changed = true;
                }

                if (changed) LanguagePackController.SaveLanguagePack(languagePack);
                return true;
            }
            catch (Exception ex)
            {
                Logger.Error(ex);
                errorMessage = ex.Message;
                return false;
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="Logger">
          <declaration><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof(JsLibraryPackageEditor));]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="IPackageEditor">
      <declaration><![CDATA[public interface IPackageEditor]]></declaration>
      <documentation>
      </documentation>
      <constructors>
      </constructors>
      <methods>
        <method name="GetPackageDetail">
          <declaration><![CDATA[PackageInfoDto GetPackageDetail(int portalId, PackageInfo package);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
        <method name="SavePackageSettings">
          <declaration><![CDATA[bool SavePackageSettings(PackageSettingsDto packageSettings, out string errorMessage);]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="JsLibraryPackageEditor">
      <declaration><![CDATA[public class JsLibraryPackageEditor : IPackageEditor]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public JsLibraryPackageEditor()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
        <constructor name=".cctor">
          <declaration><![CDATA[static JsLibraryPackageEditor()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="14" sc="9" el="14" ec="111">Components\Editors\JsLibraryPackageEditor.cs</location>
            <body hash="baa3099cc5cb1d26f5858285712b76f7"><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof(JsLibraryPackageEditor))]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="GetPackageDetail">
          <declaration><![CDATA[public PackageInfoDto GetPackageDetail(int portalId, PackageInfo package)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="19" sc="9" el="47" ec="10">Components\Editors\JsLibraryPackageEditor.cs</location>
            <body hash="8f4a92368953e1539051fda83d62f534"><![CDATA[{
            var usedBy = PackageController.Instance.GetPackageDependencies(d => 
                            d.PackageName == package.Name && d.Version <= package.Version).Select(d => d.PackageId);

            var usedByPackages = from p in PackageController.Instance.GetExtensionPackages(portalId)
                                 where usedBy.Contains(p.PackageID)
                                 select new UsedByPackage { Id = p.PackageID, Name = p.Name, Version = p.Version.ToString() };

            var library = JavaScriptLibraryController.Instance.GetLibrary(l => l.PackageID == package.PackageID);
            var detail = new JsLibraryPackageDetailDto(portalId, package)
            {
                Name = library.LibraryName,
                Version = library.Version.ToString(),
                ObjectName = library.ObjectName,
                DefaultCdn = library.CDNPath,
                FileName = library.FileName,
                Location = library.PreferredScriptLocation.ToString(),
                CustomCdn = HostController.Instance.GetString("CustomCDN_" + library.LibraryName),
                Dependencies = package.Dependencies.Select(d => new UsedByPackage
                {
                    Id = d.PackageId,
                    Name = d.PackageName,
                    Version = d.Version.ToString()
                }),
                UsedBy = usedByPackages
            };

            return detail;
        }]]></body>
          </codeblock>
        </method>
        <method name="SavePackageSettings">
          <declaration><![CDATA[public bool SavePackageSettings(PackageSettingsDto packageSettings, out string errorMessage)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="50" sc="9" el="71" ec="10">Components\Editors\JsLibraryPackageEditor.cs</location>
            <body hash="6da293ac8290e10c993a6d5b79abac64"><![CDATA[{
            errorMessage = string.Empty;

            try
            {
                string value;
                if (packageSettings.EditorActions.TryGetValue("customCdn", out value)
                    && !string.IsNullOrEmpty(value))
                {
                    var library = JavaScriptLibraryController.Instance.GetLibrary(l => l.PackageID == packageSettings.PackageId);
                    HostController.Instance.Update("CustomCDN_" + library.LibraryName, value);
                }

                return true;
            }
            catch (Exception ex)
            {
                Logger.Error(ex);
                errorMessage = ex.Message;
                return false;
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="Logger">
          <declaration><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof(JsLibraryPackageEditor));]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="ModulePackageEditor">
      <declaration><![CDATA[public class ModulePackageEditor : IPackageEditor]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public ModulePackageEditor()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
        <constructor name=".cctor">
          <declaration><![CDATA[static ModulePackageEditor()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="22" sc="9" el="22" ec="108">Components\Editors\ModulePackageEditor.cs</location>
            <body hash="c3dd8177d796160fa3a61b74fa5f1a84"><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof(ModulePackageEditor))]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="AssignPortals">
          <declaration><![CDATA[private static void AssignPortals(DesktopModuleInfo desktopModule, IList<ListItemDto> portals)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="268" sc="9" el="273" ec="10">Components\Editors\ModulePackageEditor.cs</location>
            <body hash="003b4ea39ed402337af0d5ebece66e9a"><![CDATA[{
            foreach(var portal in portals)
            {
                DesktopModuleController.AddDesktopModuleToPortal(portal.Id, desktopModule.DesktopModuleID, true, true);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteModuleControl">
          <declaration><![CDATA[private static void DeleteModuleControl(int controlId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="293" sc="9" el="295" ec="10">Components\Editors\ModulePackageEditor.cs</location>
            <body hash="83f1237f53259a4789b3c07879123276"><![CDATA[{
            ModuleControlController.DeleteModuleControl(controlId);
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteModuleDefinition">
          <declaration><![CDATA[private static void DeleteModuleDefinition(int defId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="282" sc="9" el="284" ec="10">Components\Editors\ModulePackageEditor.cs</location>
            <body hash="100a4206e30684f00234c582c0eaaaa9"><![CDATA[{
            new ModuleDefinitionController().DeleteModuleDefinition(defId);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPackageDetail">
          <declaration><![CDATA[public PackageInfoDto GetPackageDetail(int portalId, PackageInfo package)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="27" sc="9" el="44" ec="10">Components\Editors\ModulePackageEditor.cs</location>
            <body hash="dc166827ee86709ba4eab4bacaaa003b"><![CDATA[{
            var desktopModule = DesktopModuleController.GetDesktopModuleByPackageID(package.PackageID);

            if(desktopModule == null)
            {
                return new PackageInfoDto(portalId, package);
            }
        
            var isHostUser = UserController.Instance.GetCurrentUserInfo().IsSuperUser;

            var detail = isHostUser ? new ModulePackageDetailDto(portalId, package, desktopModule)
                                        : new ModulePackagePermissionsDto(portalId, package);

            detail.DesktopModuleId = desktopModule.DesktopModuleID;
            detail.Permissions = GetPermissionsData(portalId, desktopModule.DesktopModuleID);

            return detail;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPermissionsData">
          <declaration><![CDATA[private PermissionsDto GetPermissionsData(int portalId, int desktopModuleId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="132" sc="9" el="164" ec="10">Components\Editors\ModulePackageEditor.cs</location>
            <body hash="ee56bf8ec0a568401f6610dbb0c1f5e5"><![CDATA[{
            var permissions = new PermissionsDto(true);
            if (desktopModuleId > 0)
            {
                var portalModule = DesktopModuleController.GetPortalDesktopModule(portalId, desktopModuleId);
                if (portalModule != null)
                {
                    permissions.DesktopModuleId = desktopModuleId;

                    var modulePermissions = DesktopModulePermissionController.GetDesktopModulePermissions(portalModule.PortalDesktopModuleID);
                    foreach (DesktopModulePermissionInfo permission in modulePermissions)
                    {
                        if (permission.UserID != Null.NullInteger)
                        {
                            permissions.AddUserPermission(permission);
                        }
                        else
                        {
                            permissions.AddRolePermission(permission);
                        }
                    }

                    permissions.RolePermissions =
                        permissions.RolePermissions.OrderByDescending(p => p.Locked)
                            .ThenByDescending(p => p.IsDefault)
                            .ThenBy(p => p.RoleName)
                            .ToList();
                    permissions.UserPermissions = permissions.UserPermissions.OrderBy(p => p.DisplayName).ToList();
                }
            }

            return permissions;
        }]]></body>
          </codeblock>
        </method>
        <method name="SaveModuleControl">
          <declaration><![CDATA[private static void SaveModuleControl(ModuleControlDto moduleControlDto)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="287" sc="9" el="290" ec="10">Components\Editors\ModulePackageEditor.cs</location>
            <body hash="2a0870f91944fdb838ddcf11e527a3dc"><![CDATA[{
            var moduleControl = moduleControlDto.ToModuleControlInfo();
            ModuleControlController.SaveModuleControl(moduleControl, true);
        }]]></body>
          </codeblock>
        </method>
        <method name="SaveModuleDefinition">
          <declaration><![CDATA[private static void SaveModuleDefinition(ModuleDefinitionDto definitionDto)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="276" sc="9" el="279" ec="10">Components\Editors\ModulePackageEditor.cs</location>
            <body hash="944f311a8e4441e67139fd406e496f21"><![CDATA[{
            var moduleDefinition = definitionDto.ToModuleDefinitionInfo();
            ModuleDefinitionController.SaveModuleDefinition(moduleDefinition, false, true);
        }]]></body>
          </codeblock>
        </method>
        <method name="SavePackageSettings">
          <declaration><![CDATA[public bool SavePackageSettings(PackageSettingsDto packageSettings, out string errorMessage)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="47" sc="9" el="125" ec="10">Components\Editors\ModulePackageEditor.cs</location>
            <body hash="0a614e807d0ad598452ebb0c2a228c5e"><![CDATA[{
            errorMessage = string.Empty;

            try
            {
                var desktopModule = DesktopModuleController.GetDesktopModuleByPackageID(packageSettings.PackageId);

                if (desktopModule == null)
                {
                    return false;
                }

                var isHostUser = UserController.Instance.GetCurrentUserInfo().IsSuperUser;

                UpdatePermissions(desktopModule, packageSettings);

                if(isHostUser)
                {
                    foreach (var settingName in packageSettings.EditorActions.Keys)
                    {
                        var settingValue = packageSettings.EditorActions[settingName];

                        switch (settingName.ToLowerInvariant())
                        {
                            case "foldername":
                                desktopModule.FolderName = settingValue;
                                break;
                            case "category":
                                desktopModule.Category = settingValue;
                                break;
                            case "businesscontroller":
                                desktopModule.BusinessControllerClass = settingValue;
                                break;
                            case "dependencies":
                                desktopModule.Dependencies = settingValue;
                                break;
                            case "hostpermissions":
                                desktopModule.Permissions = settingValue;
                                break;
                            case "premiummodule":
                                desktopModule.IsPremium = Convert.ToBoolean(settingValue);
                                break;
                            case "shareable":
                                desktopModule.Shareable = (ModuleSharing) Convert.ToInt32(settingValue);
                                break;
                            case "assignportal":
                                AssignPortals(desktopModule, JsonConvert.DeserializeObject<IList<ListItemDto>>(settingValue));
                                break;
                            case "unassignportal":
                                UnassignPortals(desktopModule, JsonConvert.DeserializeObject<IList<ListItemDto>>(settingValue));
                                break;
                            case "savedefinition":
                                var definition = JsonConvert.DeserializeObject<ModuleDefinitionDto>(settingValue);
                                SaveModuleDefinition(definition);
                                break;
                            case "deletedefinition":
                                DeleteModuleDefinition(Convert.ToInt32(settingValue));
                                break;
                            case "savemodulecontrol":
                                var moduleControl = JsonConvert.DeserializeObject<ModuleControlDto>(settingValue);
                                SaveModuleControl(moduleControl);
                                break;
                            case "deletemodulecontrol":
                                DeleteModuleControl(Convert.ToInt32(settingValue));
                                break;
                        }
                    }

                    DesktopModuleController.SaveDesktopModule(desktopModule, false, true);
                }
                return true;
            }
            catch (Exception ex)
            {
                Logger.Error(ex);
                errorMessage = ex.Message;
                return false;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="UnassignPortals">
          <declaration><![CDATA[private static void UnassignPortals(DesktopModuleInfo desktopModule, IList<ListItemDto> portals)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="260" sc="9" el="265" ec="10">Components\Editors\ModulePackageEditor.cs</location>
            <body hash="83c404edfcd2181aae9b059c193dcb8b"><![CDATA[{
            foreach (var portal in portals)
            {
                DesktopModuleController.RemoveDesktopModuleFromPortal(portal.Id, desktopModule.DesktopModuleID, true);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdatePermissions">
          <declaration><![CDATA[private void UpdatePermissions(DesktopModuleInfo desktopModule, PackageSettingsDto packageSettings)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="167" sc="9" el="257" ec="10">Components\Editors\ModulePackageEditor.cs</location>
            <body hash="a5d46175bcaba3d94a22fe35a06d007d"><![CDATA[{
            if (!packageSettings.EditorActions.ContainsKey("permissions") || string.IsNullOrEmpty(packageSettings.EditorActions["permissions"]))
            {
                return;
            }

            var portalModule = DesktopModuleController.GetPortalDesktopModule(packageSettings.PortalId, desktopModule.DesktopModuleID);
            if (portalModule == null)
            {
                return;
            }

            var portalSettings = new PortalSettings(packageSettings.PortalId);
            var permissions = JsonConvert.DeserializeObject<PermissionsDto>(packageSettings.EditorActions["permissions"]);
            var hasAdmin = permissions.RolePermissions == null ? false : permissions.RolePermissions.Any(permission => permission.RoleId == portalSettings.AdministratorRoleId);

            var desktopModulePermissions = new DesktopModulePermissionCollection();
            //add default permissions for administrators
            if (!hasAdmin || (permissions.RolePermissions.Count == 0 && permissions.UserPermissions.Count == 0))
            {
                //add default permissions
                var permissionController = new PermissionController();
                var permissionsList = permissionController.GetPermissionByCodeAndKey("SYSTEM_DESKTOPMODULE", "DEPLOY");
                foreach (PermissionInfo permissionInfo in permissionsList)
                {
                    var permission = new DesktopModulePermissionInfo(permissionInfo)
                    {
                        RoleID = portalSettings.AdministratorRoleId,
                        UserID = Null.NullInteger,
                        PortalDesktopModuleID = portalModule.PortalDesktopModuleID,
                        AllowAccess = true,
                        RoleName = portalSettings.AdministratorRoleName
                    };
                    desktopModulePermissions.Add(permission);

                }
            }

            //add role permissions
            if (permissions.RolePermissions != null)
            {
                foreach (var rolePermission in permissions.RolePermissions)
                {
                    foreach (var permission in rolePermission.Permissions)
                    {
                        desktopModulePermissions.Add(new DesktopModulePermissionInfo()
                        {
                            PermissionID = permission.PermissionId,
                            RoleID = rolePermission.RoleId,
                            UserID = Null.NullInteger,
                            PortalDesktopModuleID = portalModule.PortalDesktopModuleID,
                            AllowAccess = permission.AllowAccess
                        });
                    }
                }
            }


            //add user permissions
            if (permissions.UserPermissions != null)
            {
                foreach (var userPermission in permissions.UserPermissions)
                {
                    foreach (var permission in userPermission.Permissions)
                    {
                        int roleId;
                        int.TryParse(Globals.glbRoleNothing, out roleId);
                        desktopModulePermissions.Add(new DesktopModulePermissionInfo()
                        {
                            PermissionID = permission.PermissionId,
                            RoleID = roleId,
                            UserID = userPermission.UserId,
                            PortalDesktopModuleID = portalModule.PortalDesktopModuleID,
                            AllowAccess = permission.AllowAccess
                        });
                    }
                }
            }

            //Update DesktopModule Permissions
            var currentPermissions = DesktopModulePermissionController.GetDesktopModulePermissions(portalModule.PortalDesktopModuleID);
            if (!currentPermissions.CompareTo(desktopModulePermissions))
            {
                DesktopModulePermissionController.DeleteDesktopModulePermissionsByPortalDesktopModuleID(portalModule.PortalDesktopModuleID);
                foreach (DesktopModulePermissionInfo objPermission in desktopModulePermissions)
                {
                    DesktopModulePermissionController.AddDesktopModulePermission(objPermission);
                }
            }
            DataCache.RemoveCache(string.Format(DataCache.PortalDesktopModuleCacheKey, portalSettings.PortalId));
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="Logger">
          <declaration><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof(ModulePackageEditor));]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="PackageEditorFactory">
      <declaration><![CDATA[public sealed class PackageEditorFactory]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public PackageEditorFactory()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="GetPackageEditor">
          <declaration><![CDATA[public static IPackageEditor GetPackageEditor(string packageType)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="8" sc="9" el="31" ec="10">Components\Editors\PackageEditorFactory.cs</location>
            <body hash="9db46b78eb494fbcb39b63d4edebf5e9"><![CDATA[{
            PackageTypes pkgType;
            Enum.TryParse(packageType, true, out pkgType);

            switch (pkgType)
            {
                case PackageTypes.Module:
                    return new ModulePackageEditor();
                case PackageTypes.AuthSystem:
                    return new AuthSystemPackageEditor();
                case PackageTypes.JavascriptLibrary:
                    return new JsLibraryPackageEditor();
                case PackageTypes.CoreLanguagePack:
                    return new CoreLanguagePackageEditor();
                case PackageTypes.ExtensionLanguagePack:
                    return new ExtensionLanguagePackageEditor();
                case PackageTypes.Container:
                case PackageTypes.Skin:
                    return new SkinPackageEditor();
                case PackageTypes.SkinObject:
                    return new SkinObjectPackageEditor();
            }
            return null;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="SkinObjectPackageEditor">
      <declaration><![CDATA[public class SkinObjectPackageEditor : IPackageEditor]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public SkinObjectPackageEditor()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
        <constructor name=".cctor">
          <declaration><![CDATA[static SkinObjectPackageEditor()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="13" sc="9" el="13" ec="112">Components\Editors\SkinObjectPackageEditor.cs</location>
            <body hash="6f27280bcd8e93d02c6f924ad2f4962d"><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof(SkinObjectPackageEditor))]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="GetPackageDetail">
          <declaration><![CDATA[public PackageInfoDto GetPackageDetail(int portalId, PackageInfo package)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="18" sc="9" el="29" ec="10">Components\Editors\SkinObjectPackageEditor.cs</location>
            <body hash="8b614d77fde888e19eed36fb8a7cca23"><![CDATA[{
            var skinControl = SkinControlController.GetSkinControlByPackageID(package.PackageID);
            var detail = new SkinObjectPackageDetailDto(portalId, package);
            var isHostUser = UserController.Instance.GetCurrentUserInfo().IsSuperUser;

            detail.ControlKey = skinControl.ControlKey;
            detail.ControlSrc = skinControl.ControlSrc;
            detail.SupportsPartialRendering = skinControl.SupportsPartialRendering;
            detail.ReadOnly |= !isHostUser;
            
            return detail;
        }]]></body>
          </codeblock>
        </method>
        <method name="SavePackageSettings">
          <declaration><![CDATA[public bool SavePackageSettings(PackageSettingsDto packageSettings, out string errorMessage)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="32" sc="9" el="67" ec="10">Components\Editors\SkinObjectPackageEditor.cs</location>
            <body hash="7404eb668ab083bcbd48487998623856"><![CDATA[{
            errorMessage = string.Empty;

            try
            {
                string value;
                var skinControl = SkinControlController.GetSkinControlByPackageID(packageSettings.PackageId);

                if (packageSettings.EditorActions.TryGetValue("controlKey", out value)
                    && !string.IsNullOrEmpty(value))
                {
                    skinControl.ControlKey = value;
                }
                if (packageSettings.EditorActions.TryGetValue("controlSrc", out value)
                    && !string.IsNullOrEmpty(value))
                {
                    skinControl.ControlSrc = value;
                }
                if (packageSettings.EditorActions.TryGetValue("supportsPartialRendering", out value)
                    && !string.IsNullOrEmpty(value))
                {
                    bool b;
                    bool.TryParse(value, out b);
                    skinControl.SupportsPartialRendering = b;
                }

                SkinControlController.SaveSkinControl(skinControl);
                return true;
            }
            catch (Exception ex)
            {
                Logger.Error(ex);
                errorMessage = ex.Message;
                return false;
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="Logger">
          <declaration><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof(SkinObjectPackageEditor));]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="SkinPackageEditor">
      <declaration><![CDATA[public class SkinPackageEditor : IPackageEditor]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public SkinPackageEditor()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
        <constructor name=".cctor">
          <declaration><![CDATA[static SkinPackageEditor()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="13" sc="9" el="13" ec="106">Components\Editors\SkinPackageEditor.cs</location>
            <body hash="2714df1d8148ebf60f7c35b09f242cce"><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof(SkinPackageEditor))]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="GetPackageDetail">
          <declaration><![CDATA[public PackageInfoDto GetPackageDetail(int portalId, PackageInfo package)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="18" sc="9" el="28" ec="10">Components\Editors\SkinPackageEditor.cs</location>
            <body hash="fa60e919759254cf50e4676de85a4ca3"><![CDATA[{
            var isHostUser = UserController.Instance.GetCurrentUserInfo().IsSuperUser;
            var skin = SkinController.GetSkinByPackageID(package.PackageID);
            var detail = new SkinPackageDetailDto(portalId, package)
            {
                ThemePackageName = skin.SkinName,
                ReadOnly = !isHostUser,
            };

            return detail;
        }]]></body>
          </codeblock>
        </method>
        <method name="SavePackageSettings">
          <declaration><![CDATA[public bool SavePackageSettings(PackageSettingsDto packageSettings, out string errorMessage)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="31" sc="9" el="59" ec="10">Components\Editors\SkinPackageEditor.cs</location>
            <body hash="e7ea3f021c37c1488541a16e739e3f4e"><![CDATA[{
            errorMessage = string.Empty;

            try
            {
                var isHostUser = UserController.Instance.GetCurrentUserInfo().IsSuperUser;

                if (isHostUser)
                {
                    string value;
                    var skin = SkinController.GetSkinByPackageID(packageSettings.PackageId);

                    if (packageSettings.EditorActions.TryGetValue("themePackageName", out value)
                        && !string.IsNullOrEmpty(value))
                    {
                        skin.SkinName = value;
                        SkinController.UpdateSkinPackage(skin);
                    }
                }

                return true;
            }
            catch (Exception ex)
            {
                Logger.Error(ex);
                errorMessage = ex.Message;
                return false;
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="Logger">
          <declaration><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof(SkinPackageEditor));]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="Dnn.PersonaBar.Extensions.MenuControllers">
    <class name="ExtensionMenuController">
      <declaration><![CDATA[public class ExtensionMenuController : IMenuItemController]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public ExtensionMenuController()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="GetSettings">
          <declaration><![CDATA[public IDictionary<string, object> GetSettings(MenuItem menuItem)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="23" sc="9" el="29" ec="10">MenuControllers\ExtensionMenuController.cs</location>
            <body hash="bf98b0702b6f4da1d2427153c965ef22"><![CDATA[{
            var settings = new Dictionary<string, object>();
            settings.Add("isHost", UserController.Instance.GetCurrentUserInfo().IsSuperUser);
            settings.Add("portalId", PortalSettings.Current.PortalId);
            settings.Add("installUrl", Globals.NavigateURL(PortalSettings.Current.ActiveTab.TabID, PortalSettings.Current, "Install", "popUp=true"));
            return settings;
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateParameters">
          <declaration><![CDATA[public void UpdateParameters(MenuItem menuItem)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="13" sc="9" el="14" ec="10">MenuControllers\ExtensionMenuController.cs</location>
            <body hash="539fa760ca172337a931519768c64187"><![CDATA[{
        }]]></body>
          </codeblock>
        </method>
        <method name="Visible">
          <declaration><![CDATA[public bool Visible(MenuItem menuItem)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="17" sc="9" el="20" ec="10">MenuControllers\ExtensionMenuController.cs</location>
            <body hash="d4c78a0d5351d270343f678a4a02cf22"><![CDATA[{
            var user = UserController.Instance.GetCurrentUserInfo();
            return user.IsSuperUser || user.IsInRole(PortalSettings.Current?.AdministratorRoleName);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="Dnn.PersonaBar.Extensions.Services">
    <class name="ExtensionsController">
      <declaration><![CDATA[public class ExtensionsController : PersonaBarApiController]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private readonly ExtensionsController _controller = new ExtensionsController();]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="51" sc="9" el="51" ec="110">Services\ExtensionsController.cs</location>
            <body hash="5a64ee8cdb1398174a1aae5444e71ec2"><![CDATA[private readonly Components.ExtensionsController _controller = new Components.ExtensionsController()]]></body>
          </codeblock>
        </constructor>
        <constructor name=".cctor">
          <declaration><![CDATA[static ExtensionsController()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="50" sc="9" el="52" ec="79">Services\ExtensionsController.cs</location>
            <body hash="f20ab0332b4b23ac9e4f63a442e64724"><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof(ExtensionsController));
        private readonly Components.ExtensionsController _controller = new Components.ExtensionsController();
        private static readonly string[] SpecialModuleFolders = new[] {"mvc"};]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="AddFiles">
          <declaration><![CDATA[private static void AddFiles(ICollection<KeyValuePair<string, string>> collection, string path, string root, string filter)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="259" sc="9" el="267" ec="10">Services\ExtensionsController.cs</location>
            <body hash="c5936b79e931df3530a411ed61099167"><![CDATA[{
            var files = Directory.GetFiles(path, filter);
            foreach (var strFile in files)
            {
                var file = root.Replace('\\', '/') + "/" + Path.GetFileName(strFile);
                var item = new KeyValuePair<string, string>(file.ToLower(), file);
                collection.Add(item);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="CreateExtension">
          <declaration><![CDATA[public HttpResponseMessage CreateExtension(PackageSettingsDto packageSettings)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="672" sc="9" el="792" ec="10">Services\ExtensionsController.cs</location>
            <body hash="22150533338ce125e91f709eae9f6bed"><![CDATA[{
            try
            {
                var package = new PackageInfo {PortalID = packageSettings.PortalId};
                var type = package.GetType();
                foreach (var kvp in packageSettings.Settings.Where(kpv => kpv.Value != null))
                {
                    var property = type.GetProperty(kvp.Key, BindingFlags.Instance | BindingFlags.GetProperty | BindingFlags.Public);
                    if (property != null && property.CanWrite)
                    {
                        var value = kvp.Value;
                        var propValue = property.GetValue(package);
                        if (propValue == null || propValue.ToString() != value)
                        {
                            var nativeValue = property.PropertyType == typeof(Version)
                                ? new Version(value) : Convert.ChangeType(value, property.PropertyType);
                            property.SetValue(package, nativeValue);
                        }
                    }
                }

                var tmpPackage = PackageController.Instance.GetExtensionPackage(Null.NullInteger, p => p.Name == package.Name);
                if (tmpPackage != null)
                {
                    return Request.CreateResponse(HttpStatusCode.BadRequest, new { Success = false, Error = "DuplicateName" });
                }

                PackageController.Instance.SaveExtensionPackage(package);
                packageSettings.PackageId = package.PackageID;

                Locale locale;
                LanguagePackInfo languagePack;
                PackageTypes pkgType;
                Enum.TryParse(package.PackageType, true, out pkgType);

                switch (pkgType)
                {
                    case PackageTypes.AuthSystem:
                        //Create a new Auth System
                        var authSystem = new AuthenticationInfo
                        {
                            AuthenticationType = package.Name,
                            IsEnabled = Null.NullBoolean,
                            PackageID = package.PackageID
                        };
                        AuthenticationController.AddAuthentication(authSystem);
                        break;
                    case PackageTypes.Container:
                    case PackageTypes.Skin:
                        var skinPackage = new SkinPackageInfo
                        {
                            SkinName = package.Name,
                            PackageID = package.PackageID,
                            SkinType = package.PackageType
                        };
                        SkinController.AddSkinPackage(skinPackage);
                        break;
                    case PackageTypes.CoreLanguagePack:
                        locale = LocaleController.Instance.GetLocale(PortalController.Instance.GetCurrentPortalSettings().DefaultLanguage);
                        languagePack = new LanguagePackInfo
                        {
                            PackageID = package.PackageID,
                            LanguageID = locale.LanguageId,
                            DependentPackageID = -2
                        };
                        LanguagePackController.SaveLanguagePack(languagePack);
                        break;
                    case PackageTypes.ExtensionLanguagePack:
                        locale = LocaleController.Instance.GetLocale(PortalController.Instance.GetCurrentPortalSettings().DefaultLanguage);
                        languagePack = new LanguagePackInfo
                        {
                            PackageID = package.PackageID,
                            LanguageID = locale.LanguageId,
                            DependentPackageID = Null.NullInteger
                        };
                        LanguagePackController.SaveLanguagePack(languagePack);
                        break;
                    case PackageTypes.Module:
                        //Create a new DesktopModule
                        var desktopModule = new DesktopModuleInfo
                        {
                            PackageID = package.PackageID,
                            ModuleName = package.Name,
                            FriendlyName = package.FriendlyName,
                            FolderName = package.Name,
                            Description = package.Description,
                            Version = package.Version.ToString(3),
                            SupportedFeatures = 0
                        };
                        var desktopModuleId = DesktopModuleController.SaveDesktopModule(desktopModule, false, true);
                        if (desktopModuleId > Null.NullInteger)
                        {
                            DesktopModuleController.AddDesktopModuleToPortals(desktopModuleId);
                        }
                        break;
                    case PackageTypes.SkinObject:
                        var skinControl = new SkinControlInfo {PackageID = package.PackageID, ControlKey = package.Name};
                        SkinControlController.SaveSkinControl(skinControl);
                        break;
                }

                var packageEditor = PackageEditorFactory.GetPackageEditor(package.PackageType);
                if (packageEditor != null)
                {
                    string error;
                    packageEditor.SavePackageSettings(packageSettings, out error);

                    if (!string.IsNullOrEmpty(error))
                    {
                        return Request.CreateResponse(HttpStatusCode.BadRequest, new { Success = false, Error = error });
                    }
                }

                return Request.CreateResponse(HttpStatusCode.OK, new {Success = true, PackageId = package.PackageID});
            }
            catch (Exception ex)
            {
                Logger.Error(ex);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, ex.Message);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="CreateFolder">
          <declaration><![CDATA[public HttpResponseMessage CreateFolder([FromUri] string ownerFolder, [FromUri] string moduleFolder)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="897" sc="9" el="935" ec="10">Services\ExtensionsController.cs</location>
            <body hash="8704c7205676c4037c7399c551275c54"><![CDATA[{
            if ((!string.IsNullOrEmpty(ownerFolder) && (ownerFolder.Replace("\\", "/").Contains("/") || ownerFolder.StartsWith(".")))
                || (!string.IsNullOrEmpty(moduleFolder) && (moduleFolder.Replace("\\", "/").Contains("/") || moduleFolder.StartsWith("."))))
            {
                return Request.CreateErrorResponse(HttpStatusCode.BadRequest, "InvalidFolder");
            }

            try
            {
                var parentFolderPath = Globals.ApplicationMapPath + "\\DesktopModules";
                if (!string.IsNullOrEmpty(ownerFolder))
                {
                    parentFolderPath += "\\" + ownerFolder;

                    if (!Directory.Exists(parentFolderPath))
                    {
                        Directory.CreateDirectory(parentFolderPath);
                    }
                }

                if (!string.IsNullOrEmpty(moduleFolder))
                {
                    parentFolderPath += "\\" + moduleFolder;

                    if (!Directory.Exists(parentFolderPath))
                    {
                        Directory.CreateDirectory(parentFolderPath);
                    }
                }

                return Request.CreateResponse(HttpStatusCode.OK, new {Success = true});
            }
            catch (Exception ex)
            {
                Logger.Error(ex);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, ex.Message);
            }

        }]]></body>
          </codeblock>
        </method>
        <method name="CreateManifest">
          <declaration><![CDATA[public HttpResponseMessage CreateManifest(PackageManifestDto packageManifestDto)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1079" sc="9" el="1096" ec="10">Services\ExtensionsController.cs</location>
            <body hash="658bda5f79ff01ba7a330a34538a1483"><![CDATA[{
            try
            {
                var package = PackageController.Instance.GetExtensionPackage(
                    Null.NullInteger, p => p.PackageID == packageManifestDto.PackageId);
                if (package == null)
                {
                    return Request.CreateErrorResponse(HttpStatusCode.NotFound, "PackageNotFound");
                }

                return CreateManifestInternal(package, packageManifestDto);
            }
            catch (Exception ex)
            {
                Logger.Error(ex);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, ex.Message);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="CreateManifestInternal">
          <declaration><![CDATA[private HttpResponseMessage CreateManifestInternal(PackageInfo package, PackageManifestDto packageManifestDto)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1116" sc="9" el="1149" ec="10">Services\ExtensionsController.cs</location>
            <body hash="d59c49b866adfdad187077d2814f211a"><![CDATA[{
            var writer = PackageWriterFactory.GetWriter(package);

            foreach (var fileName in packageManifestDto.Files)
            {
                var name = fileName.Trim();
                if (!string.IsNullOrEmpty(name))
                {
                    writer.AddFile(new InstallFile(name));
                }
            }

            foreach (var fileName in packageManifestDto.Assemblies)
            {
                var name = fileName.Trim();
                if (!string.IsNullOrEmpty(name))
                {
                    writer.AddFile(new InstallFile(name));
                }
            }

            string manifestContent;
            if (!string.IsNullOrEmpty(packageManifestDto.ManifestName))
            {
                writer.WriteManifest(packageManifestDto.ManifestName, package.Manifest);
                manifestContent = package.Manifest;
            }
            else
            {
                manifestContent = writer.WriteManifest(false);
            }

            return Request.CreateResponse(HttpStatusCode.OK, new { Content = manifestContent });
        }]]></body>
          </codeblock>
        </method>
        <method name="CreateModule">
          <declaration><![CDATA[public HttpResponseMessage CreateModule(CreateModuleDto createModuleDto)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="941" sc="9" el="967" ec="10">Services\ExtensionsController.cs</location>
            <body hash="050f0fb91803f0070c184adc37505a8a"><![CDATA[{
            try
            {
                string errorMessage;
                string newPageUrl;

                var packageId = CreateModuleController.Instance.CreateModule(createModuleDto, out newPageUrl, out errorMessage);
                var newPackage = packageId > Null.NullInteger
                    ? PackageController.Instance.GetExtensionPackage(Null.NullInteger, p => p.PackageID == packageId)
                    : null;

                var result = new
                {
                    Success = packageId > Null.NullInteger,
                    PackageInfo = newPackage != null ? new PackageInfoDto(Null.NullInteger, newPackage) : null,
                    NewPageUrl = newPageUrl,
                    Error = errorMessage
                };

                return Request.CreateResponse(result.Success ? HttpStatusCode.OK : HttpStatusCode.BadRequest, result);
            }
            catch (Exception ex)
            {
                Logger.Error(ex);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, ex.Message);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="CreateNewManifest">
          <declaration><![CDATA[public HttpResponseMessage CreateNewManifest(PackageManifestDto packageManifestDto)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1102" sc="9" el="1113" ec="10">Services\ExtensionsController.cs</location>
            <body hash="2e1786e44d5c01f8673420acb4cbf6ee"><![CDATA[{
            try
            {
                var package = packageManifestDto.ToPackageInfo();
                return CreateManifestInternal(package, packageManifestDto);
            }
            catch (Exception ex)
            {
                Logger.Error(ex);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, ex.Message);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="CreatePackage">
          <declaration><![CDATA[public HttpResponseMessage CreatePackage(PackageManifestDto packageManifestDto)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1155" sc="9" el="1222" ec="10">Services\ExtensionsController.cs</location>
            <body hash="e4338e3f611bf460252734383773c48a"><![CDATA[{
            try
            {
                var package = PackageController.Instance.GetExtensionPackage(Null.NullInteger, p => p.PackageID == packageManifestDto.PackageId);
                if (package == null)
                {
                    return Request.CreateErrorResponse(HttpStatusCode.NotFound, "PackageNotFound");
                }

                var writer = PackageWriterFactory.GetWriter(package);

                var manifestName = packageManifestDto.ManifestName;
                if (string.IsNullOrEmpty(manifestName))
                {
                    manifestName = packageManifestDto.ArchiveName.ToLowerInvariant().Replace("zip", "dnn");
                }
                //Use the installer to parse the manifest and load the files that need to be packaged
                var installer = new Installer(package, Globals.ApplicationMapPath);
                foreach (var file in installer.InstallerInfo.Files.Values)
                {
                    writer.AddFile(file);
                }
                string basePath;
                switch (package.PackageType.ToLowerInvariant())
                {
                    case "auth_system":
                        basePath = Globals.InstallMapPath + "AuthSystem";
                        break;
                    case "container":
                        basePath = Globals.InstallMapPath + "Container";
                        break;
                    case "corelanguagepack":
                    case "extensionlanguagepack":
                        basePath = Globals.InstallMapPath + "Language";
                        break;
                    case "module":
                        basePath = Globals.InstallMapPath + "Module";
                        break;
                    case "provider":
                        basePath = Globals.InstallMapPath + "Provider";
                        break;
                    case "skin":
                        basePath = Globals.InstallMapPath + "Skin";
                        break;
                    default:
                        basePath = Globals.HostMapPath;
                        break;
                }
                if (!manifestName.EndsWith(".dnn"))
                {
                    manifestName += ".dnn";
                }
                if (!packageManifestDto.ArchiveName.EndsWith(".zip"))
                {
                    packageManifestDto.ArchiveName += ".zip";
                }
                writer.CreatePackage(Path.Combine(basePath, packageManifestDto.ArchiveName), manifestName, package.Manifest, true);

                var logs = writer.Log.Logs.Select(l => l.ToString()).ToList();

                return Request.CreateResponse(HttpStatusCode.OK, new {Success = true, Logs = logs});
            }
            catch (Exception ex)
            {
                Logger.Error(ex);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, ex.Message);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="DeletePackage">
          <declaration><![CDATA[public HttpResponseMessage DeletePackage(DeletePackageDto deletePackage)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="460" sc="9" el="479" ec="10">Services\ExtensionsController.cs</location>
            <body hash="cff513f3da5fc6a6977bc9fabfa9f34a"><![CDATA[{
            try
            {
                var package = PackageController.Instance.GetExtensionPackage(Null.NullInteger, p => p.PackageID == deletePackage.Id);
                if (package == null)
                {
                    return Request.CreateErrorResponse(HttpStatusCode.NotFound, string.Empty);
                }

                var installer = new Installer(package, Globals.ApplicationMapPath);
                installer.UnInstall(deletePackage.DeleteFiles);

                return Request.CreateResponse(HttpStatusCode.OK, new {Success = true});
            }
            catch (Exception ex)
            {
                Logger.Error(ex);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, ex.Message);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="DownLoadFile">
          <declaration><![CDATA[private HttpResponseMessage DownLoadFile(string packagePath)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1456" sc="9" el="1470" ec="10">Services\ExtensionsController.cs</location>
            <body hash="48cb2396379abe4b806b0d844f1a3093"><![CDATA[{
            if (!File.Exists(packagePath))
            {
                return Request.CreateErrorResponse(HttpStatusCode.NotFound, "FileNotFound");
            }

            var stream = FileWrapper.Instance.OpenRead(packagePath);
            var fileName = Path.GetFileNameWithoutExtension(packagePath) + ".zip";

            var result = new HttpResponseMessage(HttpStatusCode.OK) {Content = new StreamContent(stream)};
            result.Content.Headers.ContentType = new MediaTypeHeaderValue("application/octet-stream");
            result.Content.Headers.ContentDisposition = new ContentDispositionHeaderValue("attachment");
            result.Content.Headers.ContentDisposition.FileName = fileName;
            return result;
        }]]></body>
          </codeblock>
        </method>
        <method name="DownloadLanguagePackage">
          <declaration><![CDATA[public HttpResponseMessage DownloadLanguagePackage([FromUri] string cultureCode)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="645" sc="9" el="662" ec="10">Services\ExtensionsController.cs</location>
            <body hash="f9a88faa65a4638d144615edda7d2aa0"><![CDATA[{
            try
            {
                const string packageFileName = "installlanguage.resources";
                var packagePath = Path.Combine(Globals.ApplicationMapPath, "Install/Language/" + packageFileName);

                if (!File.Exists(packagePath))
                {
                    DotNetNuke.Services.Upgrade.Internals.InstallController.Instance.IsAvailableLanguagePack(cultureCode);
                }
                return DownLoadFile(packagePath);
            }
            catch (Exception ex)
            {
                Logger.Error(ex);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, ex.Message);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="DownloadPackage">
          <declaration><![CDATA[public HttpResponseMessage DownloadPackage(string packageType, string fileName)]]></declaration>
          <documentation>
            <summary>
 Download install package.
 </summary>
 <returns></returns></documentation>
          <codeblock>
            <location sl="607" sc="9" el="640" ec="10">Services\ExtensionsController.cs</location>
            <body hash="af176c18610d6a5b8437210b5106660b"><![CDATA[{
            try
            {
                var installFolder = GetPackageInstallFolder(packageType);
                if (string.IsNullOrEmpty(installFolder) || string.IsNullOrEmpty(fileName))
                {
                    return Request.CreateErrorResponse(HttpStatusCode.BadRequest, "InvalidPackage");
                }

                var packagePath = Path.Combine(Globals.ApplicationMapPath, "Install", installFolder, fileName);
                if (!File.Exists(packagePath))
                {
                    return Request.CreateResponse(HttpStatusCode.NotFound);
                }

                if (fileName.EndsWith(".resources"))
                {
                    fileName = fileName.Replace(".resources", ".zip");
                }

                var response = Request.CreateResponse(HttpStatusCode.OK);
                var stream = new FileStream(packagePath, FileMode.Open);
                response.Content = new StreamContent(stream);
                response.Content.Headers.ContentLength = stream.Length;
                response.Content.Headers.ContentType = new MediaTypeHeaderValue("application/octet-stream");
                response.Content.Headers.ContentDisposition = new ContentDispositionHeaderValue("attachment") { FileName = fileName };
                return response;
            }
            catch (Exception ex)
            {
                Logger.Error(ex);
                return Request.CreateResponse(HttpStatusCode.InternalServerError, new { Error = ex.Message });
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetAllPackagesListExceptLangPacks">
          <declaration><![CDATA[public HttpResponseMessage GetAllPackagesListExceptLangPacks()]]></declaration>
          <documentation>GET: api/Extensions/GetAllPackagesListExceptLangPacks
 <summary>
 Get installed packages list except language packs.
 </summary>
 <returns>List of [Id,Name] pairs of all system packages</returns></documentation>
          <codeblock>
            <location sl="101" sc="9" el="112" ec="10">Services\ExtensionsController.cs</location>
            <body hash="338edef549dd717d61bb2adda8c84b2a"><![CDATA[{
            try
            {
                var packages = Utility.GetAllPackagesListExceptLangPacks();
                return Request.CreateResponse(HttpStatusCode.OK, packages);
            }
            catch (Exception ex)
            {
                Logger.Error(ex);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, ex.Message);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetAvailableControls">
          <declaration><![CDATA[public HttpResponseMessage GetAvailableControls(int packageId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="432" sc="9" el="454" ec="10">Services\ExtensionsController.cs</location>
            <body hash="2dac9418992b2806983a807c26c17ab0"><![CDATA[{
            var package = PackageController.Instance.GetExtensionPackage(Null.NullInteger, p => p.PackageID == packageId);
            if (package == null)
            {
                return Request.CreateErrorResponse(HttpStatusCode.NotFound, string.Empty);
            }

            try
            {
                var desktopModule = DesktopModuleController.GetDesktopModuleByPackageID(packageId);
                var rootFolder = Path.Combine(Globals.ApplicationMapPath, "DesktopModules", desktopModule.FolderName);
                var controls = Directory.GetFiles(rootFolder, "*.ascx", SearchOption.AllDirectories)
                    .Select(f => f.Replace(Globals.ApplicationMapPath, "~").Replace("\\", "/"))
                    .ToList();

                return Request.CreateResponse(HttpStatusCode.OK, controls);
            }
            catch (Exception ex)
            {
                Logger.Error(ex);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, ex.Message);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetAvailablePackages">
          <declaration><![CDATA[public HttpResponseMessage GetAvailablePackages(string packageType)]]></declaration>
          <documentation>GET: api/Extensions/GetAvailablePackages
 <summary>
 Gets available packages
 </summary>
 <param name="packageType"></param>
 <returns>List of available packages</returns></documentation>
          <codeblock>
            <location sl="150" sc="9" el="167" ec="10">Services\ExtensionsController.cs</location>
            <body hash="27c83ec77141be5cd03b2a6866cfcbc5"><![CDATA[{
            try
            {
                var packages = _controller.GetAvailablePackages(packageType);
                var response = new
                {
                    Success = true,
                    Results = packages,
                    TotalResults = packages.Count
                };
                return Request.CreateResponse(HttpStatusCode.OK, response);
            }
            catch (Exception ex)
            {
                Logger.Error(ex);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, ex.Message);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetFileContent">
          <declaration><![CDATA[private string GetFileContent(string basePath, string fileName)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1473" sc="9" el="1479" ec="10">Services\ExtensionsController.cs</location>
            <body hash="70c7efa577b3e325f9c0edca861df446"><![CDATA[{
            var filename = Path.Combine(Globals.ApplicationMapPath, basePath, fileName);
            using (var objStreamReader = File.OpenText(filename))
            {
                return objStreamReader.ReadToEnd();
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetFiles">
          <declaration><![CDATA[private IList<string> GetFiles(string rootFolder, string extension)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1401" sc="9" el="1403" ec="10">Services\ExtensionsController.cs</location>
            <body hash="1131a5641ca3224fa58e2ec7665cf001"><![CDATA[{
            return Directory.GetFiles(rootFolder, extension).Select(Path.GetFileName).ToList();
        }]]></body>
          </codeblock>
        </method>
        <method name="GetFolderPath">
          <declaration><![CDATA[private string GetFolderPath(ModuleFolderDto folder)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1340" sc="9" el="1348" ec="10">Services\ExtensionsController.cs</location>
            <body hash="4221d4a5a8601bf7d7355d870c646533"><![CDATA[{
            var path = folder.Path.Replace(Path.GetDirectoryName(folder.Path) + "\\", "");
            if (folder.IsSpecial)
            {
                path = folder.SpecialType + "\\" + path;
            }

            return path;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetInstalledPackages">
          <declaration><![CDATA[public HttpResponseMessage GetInstalledPackages(string packageType)]]></declaration>
          <documentation>GET: api/Extensions/GetInstalledPackages
 <summary>
 Gets installed packages
 </summary>
 <param name="packageType"></param>
 <returns>List of installed packages</returns></documentation>
          <codeblock>
            <location sl="122" sc="9" el="139" ec="10">Services\ExtensionsController.cs</location>
            <body hash="ea2bf958a38ee9a5b8599079515bbead"><![CDATA[{
            try
            {
                var packages = _controller.GetInstalledPackages(UserInfo.IsSuperUser ? -1 : PortalSettings.PortalId, packageType);
                var response = new
                {
                    Success = true,
                    Results = packages,
                    TotalResults = packages.Count
                };
                return Request.CreateResponse(HttpStatusCode.OK, response);
            }
            catch (Exception ex)
            {
                Logger.Error(ex);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, ex.Message);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetLanguagesList">
          <declaration><![CDATA[public HttpResponseMessage GetLanguagesList()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="313" sc="9" el="315" ec="10">Services\ExtensionsController.cs</location>
            <body hash="30de474f7b832b21820650341996f45b"><![CDATA[{
            return Request.CreateResponse(HttpStatusCode.OK, Utility.GetAllLanguagesList());
        }]]></body>
          </codeblock>
        </method>
        <method name="GetModuleCategories">
          <declaration><![CDATA[public HttpResponseMessage GetModuleCategories()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="324" sc="9" el="329" ec="10">Services\ExtensionsController.cs</location>
            <body hash="d942db719668adafab92a693e28763a5"><![CDATA[{
            var termController = Util.GetTermController();
            var categories = termController.GetTermsByVocabulary("Module_Categories").OrderBy(t => t.Weight).Select(t => t.Name);

            return Request.CreateResponse(HttpStatusCode.OK, categories);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetModuleFiles">
          <declaration><![CDATA[public HttpResponseMessage GetModuleFiles(string ownerFolder, string moduleFolder, FileType type)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="858" sc="9" el="891" ec="10">Services\ExtensionsController.cs</location>
            <body hash="7ce45c3855d6870113376c6672254278"><![CDATA[{
            if ((!string.IsNullOrEmpty(ownerFolder) && (ownerFolder.Replace("\\", "/").Contains("/") || ownerFolder.StartsWith("."))) || string.IsNullOrEmpty(moduleFolder) || moduleFolder.Replace("\\", "/").Contains("/") || moduleFolder.StartsWith("."))
            {
                return Request.CreateErrorResponse(HttpStatusCode.BadRequest, "InvalidFolder");
            }

            try
            {
                var files = new List<string>();
                var folder = Path.Combine(Globals.ApplicationMapPath, "DesktopModules", ownerFolder ?? string.Empty, moduleFolder);
                switch (type)
                {
                    case FileType.Control:
                        files.AddRange(GetFiles(folder, "*.ascx"));
                        files.AddRange(GetFiles(folder, "*.cshtml"));
                        files.AddRange(GetFiles(folder, "*.vbhtml"));
                        break;
                    case FileType.Template:
                        files.AddRange(GetFiles(Globals.HostMapPath + "Templates\\", ".module.template"));
                        break;
                    case FileType.Manifest:
                        files.AddRange(GetFiles(folder, "*.dnn"));
                        files.AddRange(GetFiles(folder, "*.dnn5"));
                        break;
                }

                return Request.CreateResponse(HttpStatusCode.OK, files);
            }
            catch (Exception ex)
            {
                Logger.Error(ex);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, ex.Message);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetModuleFolders">
          <declaration><![CDATA[public HttpResponseMessage GetModuleFolders(string ownerFolder)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="828" sc="9" el="853" ec="10">Services\ExtensionsController.cs</location>
            <body hash="f320bb86183933668e0122446c33af8c"><![CDATA[{
            if (!string.IsNullOrEmpty(ownerFolder) &&
                (ownerFolder.Replace("\\", "/").Contains("/")
                 || ownerFolder.StartsWith(".")))
            {
                return Request.CreateErrorResponse(HttpStatusCode.BadRequest, "InvalidFolder");
            }

            try
            {
                var folders = new List<string>();
                foreach (var moduleFolder in GetModulesFolders(ownerFolder))
                {
                    var path = GetFolderPath(moduleFolder);
                    folders.Add(path);
                }

                return Request.CreateResponse(HttpStatusCode.OK, folders);
            }
            catch (Exception ex)
            {
                Logger.Error(ex);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, ex.Message);
            }

        }]]></body>
          </codeblock>
        </method>
        <method name="GetModulesFolders">
          <declaration><![CDATA[private IList<ModuleFolderDto> GetModulesFolders(string ownerFolder)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1389" sc="9" el="1398" ec="10">Services\ExtensionsController.cs</location>
            <body hash="46fd5941cafeaace9d774ca7b94c0340"><![CDATA[{
            if (!string.IsNullOrEmpty(ownerFolder))
            {
                return Directory.GetDirectories(Globals.ApplicationMapPath + "\\DesktopModules\\" + ownerFolder)
                    .Select(folder => new ModuleFolderDto {Path = folder, IsSpecial = false})
                    .ToList();
            }

            return GetRootModuleDefinitionFolders();
        }]]></body>
          </codeblock>
        </method>
        <method name="GetOwnerFolders">
          <declaration><![CDATA[public HttpResponseMessage GetOwnerFolders()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="801" sc="9" el="823" ec="10">Services\ExtensionsController.cs</location>
            <body hash="511e729dc5b771043d7d023a841df95c"><![CDATA[{
            try
            {
                var folders = new List<string>();
                foreach (var folder in GetRootModuleDefinitionFolders())
                {
                    var files = Directory.GetFiles(folder.Path, "*.ascx");
                    //exclude module folders
                    if (files.Length == 0 || folder.Path.ToLowerInvariant() == "admin")
                    {
                        var path = GetFolderPath(folder);
                        folders.Add(path);
                    }
                }

                return Request.CreateResponse(HttpStatusCode.OK, folders);
            }
            catch (Exception ex)
            {
                Logger.Error(ex);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, ex.Message);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPackageInstallFolder">
          <declaration><![CDATA[private string GetPackageInstallFolder(string packageType)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1432" sc="9" el="1453" ec="10">Services\ExtensionsController.cs</location>
            <body hash="b3db6ee5c48b8f1504baf2128b621cc9"><![CDATA[{
            switch ((packageType ?? "").ToLowerInvariant())
            {
                case "authsystem":
                case "auth_system":
                    return "AuthSystem";
                case "corelanguagepack":
                case "extensionlanguagepack":
                    return "Language";
                case "javascriptlibrary":
                case "javascript_library":
                    return "JavaScriptLibrary";
                case "module":
                case "skin":
                case "container":
                case "provider":
                case "library":
                    return packageType;
                default:
                    return string.Empty;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPackageManifest">
          <declaration><![CDATA[public HttpResponseMessage GetPackageManifest(int packageId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="976" sc="9" el="1073" ec="10">Services\ExtensionsController.cs</location>
            <body hash="d31a986310a8b86c173a49be2ea6c62e"><![CDATA[{
            try
            {
                var package = PackageController.Instance.GetExtensionPackage(Null.NullInteger, p => p.PackageID == packageId);
                if (package == null)
                {
                    return Request.CreateErrorResponse(HttpStatusCode.NotFound, "PackageNotFound");
                }


                switch (package.PackageType.ToLowerInvariant())
                {
                    case "corelanguagepack":
                        package.IconFile = "N\\A";
                        break;
                    default:
                        package.IconFile = DotNetNuke.Services.Installer.Util.ParsePackageIconFileName(package);
                        break;
                }

                var packageManifestDto = new PackageManifestDto(Null.NullInteger, package);

                var writer = PackageWriterFactory.GetWriter(package);

                packageManifestDto.BasePath = writer.BasePath;

                //Load Manifests
                if (!string.IsNullOrEmpty(package.Manifest))
                {
                    //Use Database
                    var sb = new StringBuilder();
                    var settings = new XmlWriterSettings();
                    settings.ConformanceLevel = ConformanceLevel.Fragment;
                    settings.OmitXmlDeclaration = true;
                    settings.Indent = true;

                    writer.WriteManifest(XmlWriter.Create(sb, settings), package.Manifest);

                    packageManifestDto.Manifests.Add("Database version", sb.ToString());
                }
                var filePath = Path.Combine(Globals.ApplicationMapPath, writer.BasePath);
                if (!string.IsNullOrEmpty(filePath))
                {
                    if (Directory.Exists(filePath))
                    {
                        foreach (var file in Directory.GetFiles(filePath, "*.dnn"))
                        {
                            var fileName = file.Replace(filePath + "\\", "");
                            packageManifestDto.Manifests.Add(fileName, GetFileContent(writer.BasePath, fileName));
                        }
                        foreach (var file in Directory.GetFiles(filePath, "*.dnn.resources"))
                        {
                            var fileName = file.Replace(filePath + "\\", "");
                            packageManifestDto.Manifests.Add(fileName, GetFileContent(writer.BasePath, fileName));
                        }
                    }
                }

                //get assemblies
                foreach (var file in writer.Assemblies.Values)
                {
                    packageManifestDto.Assemblies.Add(file.FullName);
                }

                //get files
                writer.GetFiles(true);

                //Display App Code files
                foreach (var file in writer.AppCodeFiles.Values)
                {
                    packageManifestDto.Files.Add("[app_code]" + file.FullName);
                }

                //Display Script files
                foreach (var file in writer.Scripts.Values)
                {
                    packageManifestDto.Files.Add(file.FullName);
                }

                //Display regular files
                foreach (var file in writer.Files.Values)
                {
                    if (file.Path.StartsWith(".git"))
                        continue;
                    if (!file.Name.StartsWith(".git"))
                    {
                        packageManifestDto.Files.Add(file.FullName);
                    }
                }

                return Request.CreateResponse(HttpStatusCode.OK, packageManifestDto);
            }
            catch (Exception ex)
            {
                Logger.Error(ex);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, ex.Message);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPackageSettings">
          <declaration><![CDATA[public HttpResponseMessage GetPackageSettings(int siteId, int packageId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="333" sc="9" el="357" ec="10">Services\ExtensionsController.cs</location>
            <body hash="06df60b8a97d9c676980f676dc2b0ce5"><![CDATA[{
            var portalId = siteId;
            if (portalId == Null.NullInteger && !UserInfo.IsSuperUser)
            {
                return Request.CreateResponse(HttpStatusCode.Unauthorized);
            }

            var package = PackageController.Instance.GetExtensionPackage(Null.NullInteger, p => p.PackageID == packageId);
            if (package == null)
            {
                return Request.CreateErrorResponse(HttpStatusCode.NotFound, string.Empty);
            }

            try
            {
                var packageEditor = PackageEditorFactory.GetPackageEditor(package.PackageType);
                var packageDetail = packageEditor?.GetPackageDetail(portalId, package) ?? new PackageInfoDto(portalId, package);
                return Request.CreateResponse(HttpStatusCode.OK, packageDetail);
            }
            catch (Exception ex)
            {
                Logger.Error(ex);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, ex.Message);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPackageTypes">
          <declaration><![CDATA[public HttpResponseMessage GetPackageTypes()]]></declaration>
          <documentation>GET: api/Extensions/GetPackageTypes
 <summary>
 Get installed package types.
 </summary>
 <returns>List of package types</returns></documentation>
          <codeblock>
            <location sl="63" sc="9" el="92" ec="10">Services\ExtensionsController.cs</location>
            <body hash="4ee46189d2870252f1340528f55f0fa3"><![CDATA[{
            try
            {
                var packageTypes = _controller.GetPackageTypes()
                    .OrderBy(t => t.Value.PackageType != "Module")
                    .Select(t =>
                    {
                        var packageType = t.Value.PackageType;
                        string rootPath;
                        return new
                        {
                            Type = packageType,
                            HasAvailablePackages = _controller.HasAvailablePackage(packageType, out rootPath),
                            DisplayName = Localization.GetString(packageType + ".Type", Constants.SharedResources),
                        };
                    });
                var response = new
                {
                    Success = true,
                    Results = packageTypes
                };

                return Request.CreateResponse(HttpStatusCode.OK, response);
            }
            catch (Exception ex)
            {
                Logger.Error(ex);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, ex.Message);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetRootModuleDefinitionFolders">
          <declaration><![CDATA[private IList<ModuleFolderDto> GetRootModuleDefinitionFolders()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1351" sc="9" el="1381" ec="10">Services\ExtensionsController.cs</location>
            <body hash="db3a3141d6e72ccdb7df7192cdceae61"><![CDATA[{
            var moduleFolders = new List<ModuleFolderDto>();
            var rootFolders = Directory.GetDirectories(Globals.ApplicationMapPath + "\\DesktopModules\\").ToList();

            foreach (var folderPath in rootFolders)
            {
                var folderName = folderPath.Replace(Path.GetDirectoryName(folderPath) + "\\", "");
                if (IsSpecialFolder(folderName))
                {
                    Directory.GetDirectories(folderPath).ToList()
                        .ForEach(specialFolderChild =>
                            moduleFolders.Add(new ModuleFolderDto
                            {
                                Path = specialFolderChild,
                                IsSpecial = true,
                                SpecialType = folderName
                            })
                        );
                }
                else
                {
                    moduleFolders.Add(new ModuleFolderDto
                    {
                        Path = folderPath,
                        IsSpecial = false
                    });
                }
            }

            return moduleFolders;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetSourceFiles">
          <declaration><![CDATA[public HttpResponseMessage GetSourceFiles(string root)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="237" sc="9" el="256" ec="10">Services\ExtensionsController.cs</location>
            <body hash="93332e1e3f2384e3dd78455bd5a842a0"><![CDATA[{
            var response = new List<KeyValuePair<string, string>>
            {
                new KeyValuePair<string, string>("", "<" + Localization.GetString("None_Specified") + ">")
            };

            if (!string.IsNullOrEmpty(root))
            {
                var path = Path.Combine(Globals.ApplicationMapPath, root.Replace('/', '\\'));
                if (Directory.Exists(path))
                {
                    AddFiles(response, path, root, "*.ascx");
                    AddFiles(response, path, root, "*.cshtml");
                    AddFiles(response, path, root, "*.vbhtml");
                    AddFiles(response, path, root, "*.html");
                }
            }

            return Request.CreateResponse(HttpStatusCode.OK, response);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetSourceFolders">
          <declaration><![CDATA[public HttpResponseMessage GetSourceFolders()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="204" sc="9" el="232" ec="10">Services\ExtensionsController.cs</location>
            <body hash="dce784528f23a7bd3c44a4755262929c"><![CDATA[{
            var path = Path.Combine(Globals.ApplicationMapPath, "DesktopModules");
            var controlfolders = (
                from subdirectory in Directory.GetDirectories(path, "*", SearchOption.AllDirectories)
                select subdirectory).ToList();

            controlfolders.Insert(0, Path.Combine(Globals.ApplicationMapPath, "Admin\\Skins"));

            //var moduleControl = ModuleControlController.GetModuleControl(moduleControlId);
            //var currentControlFolder = moduleControl == null ? "" :
            //    (Path.GetDirectoryName(moduleControl.ControlSrc.ToLower()) ?? "").Replace('\\', '/');

            var response = new List<KeyValuePair<string, string>>();
            var appPathLen = Globals.ApplicationMapPath.Length + 1;
            foreach (var folder in controlfolders)
            {
                var moduleControls = Directory.EnumerateFiles(folder, "*.*", SearchOption.TopDirectoryOnly)
                    .Count(s => s.EndsWith(".ascx") || s.EndsWith(".cshtml") ||
                                s.EndsWith(".vbhtml") || s.EndsWith(".html") || s.EndsWith(".htm"));
                if (moduleControls > 0)
                {
                    var shortFolder = folder.Substring(appPathLen).Replace('\\', '/');
                    var item = new KeyValuePair<string, string>(shortFolder.ToLower(), shortFolder);
                    response.Add(item);
                }
            }

            return Request.CreateResponse(HttpStatusCode.OK, response);
        }]]></body>
          </codeblock>
        </method>
        <method name="InstallAvailablePackage">
          <declaration><![CDATA[public HttpResponseMessage InstallAvailablePackage(DownloadPackageDto package)]]></declaration>
          <documentation>
            <summary>
 Inatall a package that is already included under one of the installation folders.
 </summary>
 <returns></returns></documentation>
          <codeblock>
            <location sl="575" sc="9" el="598" ec="10">Services\ExtensionsController.cs</location>
            <body hash="917d6c8d3dfe64ff710b9cbcab86c7f4"><![CDATA[{
            try
            {
                var installFolder = GetPackageInstallFolder(package.PackageType);
                if (string.IsNullOrEmpty(installFolder) || string.IsNullOrEmpty(package.FileName))
                {
                    return Request.CreateErrorResponse(HttpStatusCode.BadRequest, "InvalidPackage");
                }

                var packagePath = Path.Combine(Globals.ApplicationMapPath, "Install", installFolder, package.FileName);
                if (!File.Exists(packagePath))
                {
                    return Request.CreateResponse(HttpStatusCode.NotFound);
                }

                var installResult = InstallPackageFile(packagePath);
                return Request.CreateResponse(installResult.Success ? HttpStatusCode.OK : HttpStatusCode.BadRequest, installResult);
            }
            catch (Exception ex)
            {
                Logger.Error(ex);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, ex.Message);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="InstallPackage">
          <declaration><![CDATA[public Task<HttpResponseMessage> InstallPackage([FromUri] string legacySkin = null)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="489" sc="9" el="501" ec="10">Services\ExtensionsController.cs</location>
            <body hash="ce0ca70912effd0c4f9216ef5fc0c0ce"><![CDATA[{
            try
            {
                return
                    UploadFileAction((portalSettings, userInfo, filePath, stream) =>
                        InstallController.Instance.InstallPackage(portalSettings, userInfo, legacySkin, filePath, stream));
            }
            catch (Exception ex)
            {
                Logger.Error(ex);
                return Task.FromResult(Request.CreateErrorResponse(HttpStatusCode.InternalServerError, ex.Message));
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="InstallPackageFile">
          <declaration><![CDATA[private InstallResultDto InstallPackageFile(string filePath)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1419" sc="9" el="1429" ec="10">Services\ExtensionsController.cs</location>
            <body hash="b0d01c5c6c9420220a488e2f7a86eb30"><![CDATA[{
            if (!File.Exists(filePath))
            {
                return new InstallResultDto() {Success = false, Message = "FileNotFound"};
            }

            using (var stream = new FileStream(filePath, FileMode.Open))
            {
                return InstallController.Instance.InstallPackage(PortalSettings, UserInfo, null, filePath, stream);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="IsSpecialFolder">
          <declaration><![CDATA[private bool IsSpecialFolder(string folderName)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1384" sc="9" el="1386" ec="10">Services\ExtensionsController.cs</location>
            <body hash="72ac8406e8228dba3f58ec3e4883b331"><![CDATA[{
            return SpecialModuleFolders.Any(specialFolder => specialFolder.ToLower().Equals(folderName.ToLower()));
        }]]></body>
          </codeblock>
        </method>
        <method name="LoadIcons">
          <declaration><![CDATA[public HttpResponseMessage LoadIcons(string controlPath)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="272" sc="9" el="309" ec="10">Services\ExtensionsController.cs</location>
            <body hash="4b91bdb453f375f6395db40d51aac0e7"><![CDATA[{
            var response = new List<KeyValuePair<string, string>>
            {
                new KeyValuePair<string, string>("", "<" + Localization.GetString("None_Specified") + ">")
            };

            if (!string.IsNullOrEmpty(controlPath))
            {
                var idx = controlPath.LastIndexOf("/", StringComparison.Ordinal);
                var root = controlPath.Substring(0, Math.Max(0, idx));
                var path = Path.Combine(Globals.ApplicationMapPath, root.Replace('/', '\\'));
                if (Directory.Exists(path))
                {
                    var files = Directory.GetFiles(path);
                    if (files.Length > 0)
                    {
                        var extensions = Globals.glbImageFileTypes.ToLowerInvariant().Split(",".ToCharArray(), StringSplitOptions.RemoveEmptyEntries);
                        foreach (var file in files)
                        {
                            var ext = Path.GetExtension(file) ?? "";
                            var extension = ext.Length <= 1 ? "" : ext.Substring(1).ToLowerInvariant();
                            if (extensions.Contains(extension))
                            {
                                path = Path.GetFileName(file);
                                if (path != null)
                                {
                                    var item = new KeyValuePair<string, string>(path.ToLower(), Path.GetFileName(file));
                                    response.Add(item);
                                }
                            }
                        }

                    }
                }
            }

            return Request.CreateResponse(HttpStatusCode.OK, response);
        }]]></body>
          </codeblock>
        </method>
        <method name="ParseLanguagePackage">
          <declaration><![CDATA[public HttpResponseMessage ParseLanguagePackage([FromUri] string cultureCode)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="552" sc="9" el="566" ec="10">Services\ExtensionsController.cs</location>
            <body hash="95b813160a2361d49384a39a0684f727"><![CDATA[{
            try
            {
                DotNetNuke.Services.Upgrade.Internals.InstallController.Instance.IsAvailableLanguagePack(cultureCode);
                const string packageFileName = "installlanguage.resources";
                var packagePath = Path.Combine(Globals.ApplicationMapPath, "Install/Language/" + packageFileName);
                var result = ParsePackageFile(packagePath);
                return Request.CreateResponse(result.Success ? HttpStatusCode.OK : HttpStatusCode.BadRequest, result);
            }
            catch (Exception ex)
            {
                Logger.Error(ex);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, ex.Message);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="ParsePackage">
          <declaration><![CDATA[public Task<HttpResponseMessage> ParsePackage()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="507" sc="9" el="519" ec="10">Services\ExtensionsController.cs</location>
            <body hash="ed9634761a7be06b285ef1682111224d"><![CDATA[{
            try
            {
                return
                    UploadFileAction((portalSettings, userInfo, filePath, stream) =>
                        InstallController.Instance.ParsePackage(portalSettings, userInfo, filePath, stream));
            }
            catch (Exception ex)
            {
                Logger.Error(ex);
                return Task.FromResult(Request.CreateErrorResponse(HttpStatusCode.InternalServerError, ex.Message));
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="ParsePackageFile">
          <declaration><![CDATA[public HttpResponseMessage ParsePackageFile(DownloadPackageDto package)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="524" sc="9" el="547" ec="10">Services\ExtensionsController.cs</location>
            <body hash="4b638a71ee3d9b28a46a614c96a83db2"><![CDATA[{
            try
            {
                var installFolder = GetPackageInstallFolder(package.PackageType);
                if (string.IsNullOrEmpty(installFolder) || string.IsNullOrEmpty(package.FileName))
                {
                    return Request.CreateErrorResponse(HttpStatusCode.BadRequest, "InvalidPackage");
                }

                var packagePath = Path.Combine(Globals.ApplicationMapPath, "Install", installFolder, package.FileName);
                if (!File.Exists(packagePath))
                {
                    return Request.CreateResponse(HttpStatusCode.NotFound);
                }

                var result = ParsePackageFile(packagePath);
                return Request.CreateResponse(result.Success ? HttpStatusCode.OK : HttpStatusCode.BadRequest, result);
            }
            catch (Exception ex)
            {
                Logger.Error(ex);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, ex.Message);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="ParsePackageFile">
          <declaration><![CDATA[private ParseResultDto ParsePackageFile(string filePath)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1406" sc="9" el="1416" ec="10">Services\ExtensionsController.cs</location>
            <body hash="127fb45716869b6778646bb57003d9d7"><![CDATA[{
            if (!File.Exists(filePath))
            {
                return new ParseResultDto() {Success = false, Message = "FileNotFound"};
            }

            using (var stream = new FileStream(filePath, FileMode.Open))
            {
                return InstallController.Instance.ParsePackage(PortalSettings, UserInfo, filePath, stream);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="RefreshPackageFiles">
          <declaration><![CDATA[public HttpResponseMessage RefreshPackageFiles(PackageFilesQueryDto packageData)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1228" sc="9" el="1263" ec="10">Services\ExtensionsController.cs</location>
            <body hash="2f5864ec8ddd13ed4bebc2cbdf9f4df5"><![CDATA[{
            var baseFolder = Path.Combine(Globals.ApplicationMapPath, packageData.PackageFolder.Replace('/', '\\'));
            if (!Directory.Exists(baseFolder))
            {
                return Request.CreateErrorResponse(HttpStatusCode.BadRequest, "InvalidFolder");
            }

            try
            {
                var package = packageData.ToPackageInfo();
                var writer = PackageWriterFactory.GetWriter(package);
                writer.BasePath = packageData.PackageFolder;
                writer.GetFiles(packageData.IncludeSource);

                var files = new List<string>();
                if (packageData.IncludeAppCode)
                {
                    // add app-code files
                    files.AddRange(writer.AppCodeFiles.Values.Select(file => "[app_code]" + file.FullName));
                }

                // add script files
                files.AddRange(writer.Scripts.Values.Select(f => f.FullName));

                // add code files
                files.AddRange(writer.Files.Values.Where(
                    f => !f.Path.StartsWith(".") && !f.Name.StartsWith(".")).Select(file => file.FullName));

                return Request.CreateResponse(HttpStatusCode.OK, files);
            }
            catch (Exception ex)
            {
                Logger.Error(ex);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, ex.Message);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="SavePackageSettings">
          <declaration><![CDATA[public HttpResponseMessage SavePackageSettings(PackageSettingsDto packageSettings)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="362" sc="9" el="427" ec="10">Services\ExtensionsController.cs</location>
            <body hash="023d14535bd97d69ab04326ea37493ab"><![CDATA[{
            try
            {
                var package = PackageController.Instance.GetExtensionPackage(Null.NullInteger, p => p.PackageID == packageSettings.PackageId);
                if (package == null)
                {
                    return Request.CreateErrorResponse(HttpStatusCode.InternalServerError,
                        Localization.GetString("SavePackageSettings.PackageNotFound", Constants.SharedResources));
                }

                if (UserInfo.IsSuperUser)
                {
                    var authService = AuthenticationController.GetAuthenticationServiceByPackageID(package.PackageID);
                    var isReadOnly = authService != null && authService.AuthenticationType == Constants.DnnAuthTypeName;
                    if (isReadOnly)
                    {
                        return Request.CreateErrorResponse(HttpStatusCode.BadRequest,
                            Localization.GetString("ReadOnlyPackage.SaveErrorMessage", Constants.SharedResources));
                    }

                    var type = package.GetType();
                    var needUpdate = false;
                    foreach (var kvp in packageSettings.Settings)
                    {
                        var property = type.GetProperty(kvp.Key, BindingFlags.Instance | BindingFlags.GetProperty | BindingFlags.Public);
                        if (property != null && property.CanWrite)
                        {
                            var value = kvp.Value;
                            var propValue = property.GetValue(package);
                            if (propValue == null || propValue.ToString() != value)
                            {
                                var nativeValue = property.PropertyType == typeof(Version)
                                    ? new Version(value) : Convert.ChangeType(value, property.PropertyType);
                                property.SetValue(package, nativeValue);
                                needUpdate = true;
                            }
                        }
                    }

                    if (needUpdate)
                    {
                        PackageController.Instance.SaveExtensionPackage(package);
                    }
                }

                var packageEditor = PackageEditorFactory.GetPackageEditor(package.PackageType);
                if (packageEditor != null)
                {
                    string error;
                    packageEditor.SavePackageSettings(packageSettings, out error);

                    if (!string.IsNullOrEmpty(error))
                    {
                        return Request.CreateResponse(HttpStatusCode.BadRequest, new {Success = false, Error = error});
                    }
                }

                var packageDetail = packageEditor?.GetPackageDetail(packageSettings.PortalId, package) ?? new PackageInfoDto(packageSettings.PortalId, package);
                return Request.CreateResponse(HttpStatusCode.OK, new {Success = true, PackageDetail = packageDetail});
            }
            catch (Exception ex)
            {
                Logger.Error(ex);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, ex.Message);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="UploadFileAction">
          <declaration><![CDATA[private Task<HttpResponseMessage> UploadFileAction(Func<PortalSettings, UserInfo, string, Stream, object> action)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1270" sc="9" el="1337" ec="10">Services\ExtensionsController.cs</location>
            <body hash="cb9b7610f9cc0cf2aa317b7f68681623"><![CDATA[{
            var request = Request;
            if (!request.Content.IsMimeMultipartContent())
            {
                throw new HttpResponseException(HttpStatusCode.UnsupportedMediaType);
            }

            var provider = new MultipartMemoryStreamProvider();

            // local references for use in closure
            var portalSettings = PortalSettings;
            var currentSynchronizationContext = SynchronizationContext.Current;
            var userInfo = UserInfo;

            var task = request.Content.ReadAsMultipartAsync(provider)
                .ContinueWith(o =>
                {
                    object result = null;

                    var fileName = string.Empty;
                    Stream stream = null;

                    foreach (var item in provider.Contents)
                    {
                        var name = item.Headers.ContentDisposition.Name;
                        switch (name.ToUpper())
                        {
                            case "\"POSTFILE\"":
                                fileName = item.Headers.ContentDisposition.FileName.Replace("\"", "");
                                if (fileName.IndexOf("\\", StringComparison.Ordinal) != -1)
                                {
                                    fileName = Path.GetFileName(fileName);
                                }
                                if (Globals.FileEscapingRegex.Match(fileName).Success == false)
                                {
                                    stream = item.ReadAsStreamAsync().Result;
                                }
                                break;
                        }
                    }

                    if (!string.IsNullOrEmpty(fileName) && stream != null)
                    {
                        // The SynchronizationContext keeps the main thread context. Send method is synchronous
                        currentSynchronizationContext.Send(
                            delegate
                            {
                                result = action(portalSettings, userInfo, fileName, stream);
                            },
                            null
                            );
                    }

                    var mediaTypeFormatter = new JsonMediaTypeFormatter();
                    mediaTypeFormatter.SupportedMediaTypes.Add(new MediaTypeHeaderValue("text/plain"));

                    // Response Content Type cannot be application/json
                    // because IE9 with iframe-transport manages the response
                    // as a file download
                    return Request.CreateResponse(
                        HttpStatusCode.OK,
                        result,
                        mediaTypeFormatter,
                        "text/plain");
                });

            return task;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_controller">
          <declaration><![CDATA[private readonly ExtensionsController _controller = new ExtensionsController();]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Logger">
          <declaration><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof(ExtensionsController));]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="SpecialModuleFolders">
          <declaration><![CDATA[private static readonly string[] SpecialModuleFolders = new string[]]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
</root>