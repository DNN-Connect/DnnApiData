<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<root file="Dnn.PersonaBar.Seo.dll" version="01.03.00" generated="2017-08-10 13:09:19Z" generationTime="2.674055">
  <namespace name="Dnn.PersonaBar.Seo.Components">
    <class name="ExtensionMenuController">
      <declaration><![CDATA[public class ExtensionMenuController : IMenuItemController]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public ExtensionMenuController()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="GetSettings">
          <declaration><![CDATA[public IDictionary<string, object> GetSettings(MenuItem menuItem)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="20" sc="9" el="24" ec="10">Components\ExtensionMenuController.cs</location>
            <body hash="5ed46893a78362d630a49113ef535d5c"><![CDATA[{
            var settings = new Dictionary<string, object>();
            settings.Add("isHost", UserController.Instance.GetCurrentUserInfo().IsSuperUser);
            return settings;
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateParameters">
          <declaration><![CDATA[public void UpdateParameters(MenuItem menuItem)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="11" sc="9" el="12" ec="10">Components\ExtensionMenuController.cs</location>
            <body hash="539fa760ca172337a931519768c64187"><![CDATA[{
        }]]></body>
          </codeblock>
        </method>
        <method name="Visible">
          <declaration><![CDATA[public bool Visible(MenuItem menuItem)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="15" sc="9" el="17" ec="10">Components\ExtensionMenuController.cs</location>
            <body hash="f882ca7e6e289653f91b0768029d8a89"><![CDATA[{
            return true;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="SeoController">
      <declaration><![CDATA[public class SeoController]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public SeoController()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="41" sc="9" el="44" ec="10">Components\SeoController.cs</location>
            <body hash="1cf4ffbf00af65f4cbd71029fb2f375e"><![CDATA[public SeoController()
        {
            _portalSettings = PortalController.Instance.GetCurrentPortalSettings();
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="CreateVerification">
          <declaration><![CDATA[public void CreateVerification(string verification)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="99" sc="9" el="116" ec="10">Components\SeoController.cs</location>
            <body hash="2db24e9b36ac2a786296d0df5c9198e8"><![CDATA[{
            if (!string.IsNullOrEmpty(verification) && verification.EndsWith(".html"))
            {
                if (!File.Exists(Globals.ApplicationMapPath + "\\" + verification))
                {
                    string portalAlias = !String.IsNullOrEmpty(_portalSettings.DefaultPortalAlias)
                                        ? _portalSettings.DefaultPortalAlias
                                        : _portalSettings.PortalAlias.HTTPAlias;

                    //write SiteMap verification file
                    var objStream = File.CreateText(Globals.ApplicationMapPath + "\\" + verification);
                    objStream.WriteLine("Google SiteMap Verification File");
                    objStream.WriteLine(" - " + Globals.AddHTTP(portalAlias) + @"/SiteMap.aspx");
                    objStream.WriteLine(" - " + UserController.Instance.GetCurrentUserInfo().DisplayName);
                    objStream.Close();
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetSearchEngineSubmissionUrl">
          <declaration><![CDATA[public string GetSearchEngineSubmissionUrl(string searchEngine)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="66" sc="9" el="96" ec="10">Components\SeoController.cs</location>
            <body hash="1bb0b48e220b0c1c1f9b7ddcbb1956d0"><![CDATA[{
            var strURL = string.Empty;

            switch (searchEngine.ToLower().Trim())
            {
                case "google":
                    strURL += "http://www.google.com/addurl?q=" + Globals.HTTPPOSTEncode(Globals.AddHTTP(Globals.GetDomainName(HttpContext.Current.Request)));
                    strURL += "&dq=";
                    if (!string.IsNullOrEmpty(_portalSettings.PortalName))
                    {
                        strURL += Globals.HTTPPOSTEncode(_portalSettings.PortalName);
                    }
                    if (!string.IsNullOrEmpty(_portalSettings.Description))
                    {
                        strURL += Globals.HTTPPOSTEncode(_portalSettings.Description);
                    }
                    if (!string.IsNullOrEmpty(_portalSettings.KeyWords))
                    {
                        strURL += Globals.HTTPPOSTEncode(_portalSettings.KeyWords);
                    }
                    strURL += "&submit=Add+URL";
                    break;
                case "yahoo!":
                    strURL = "http://siteexplorer.search.yahoo.com/submit";
                    break;
                case "bing":
                    strURL = "http://www.bing.com/webmaster";
                    break;
            }
            return strURL;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetSitemapProviders">
          <declaration><![CDATA[public IEnumerable<SitemapProvider> GetSitemapProviders()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="47" sc="9" el="50" ec="10">Components\SeoController.cs</location>
            <body hash="9c4591fdd21d004568674269439fc5a9"><![CDATA[{
            var builder = new SitemapBuilder(_portalSettings);
            return builder.Providers;
        }]]></body>
          </codeblock>
        </method>
        <method name="ResetCache">
          <declaration><![CDATA[public void ResetCache()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="53" sc="9" el="63" ec="10">Components\SeoController.cs</location>
            <body hash="6442501e6b2bcf78962b2923614e8da0"><![CDATA[{
            var cacheFolder = new DirectoryInfo(_portalSettings.HomeSystemDirectoryMapPath + "sitemap\\");

            if (cacheFolder.Exists)
            {
                foreach (FileInfo file in cacheFolder.GetFiles("sitemap*.xml"))
                {
                    file.Delete();
                }
            }
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_portalSettings">
          <declaration><![CDATA[private PortalSettings _portalSettings;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
    <class name="UrlRewritingResult">
      <declaration><![CDATA[public class UrlRewritingResult]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public UrlRewritingResult()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="37" sc="9" el="45" ec="10">Components\UrlRewritingResult.cs</location>
            <body hash="7cb350fbb4e1a0625769dc3cad85d0c5"><![CDATA[public UrlRewritingResult()
        {
            var noneText = Localization.GetString("None", Localization.GlobalResourceFile);
            RewritingResult = noneText;
            Culture = noneText;
            IdentifiedPage = noneText;
            RedirectionResult = noneText;
            OperationMessages = noneText;
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="Culture">
          <declaration><![CDATA[public string Culture]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="20" sc="33" el="20" ec="37">Components\UrlRewritingResult.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="20" sc="38" el="20" ec="42">Components\UrlRewritingResult.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="IdentifiedPage">
          <declaration><![CDATA[public string IdentifiedPage]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="23" sc="40" el="23" ec="44">Components\UrlRewritingResult.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="23" sc="45" el="23" ec="49">Components\UrlRewritingResult.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="OperationMessages">
          <declaration><![CDATA[public string OperationMessages]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="32" sc="43" el="32" ec="47">Components\UrlRewritingResult.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="32" sc="48" el="32" ec="52">Components\UrlRewritingResult.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="RedirectionReason">
          <declaration><![CDATA[public string RedirectionReason]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="26" sc="43" el="26" ec="47">Components\UrlRewritingResult.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="26" sc="48" el="26" ec="52">Components\UrlRewritingResult.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="RedirectionResult">
          <declaration><![CDATA[public string RedirectionResult]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="29" sc="43" el="29" ec="47">Components\UrlRewritingResult.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="29" sc="48" el="29" ec="52">Components\UrlRewritingResult.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="RewritingResult">
          <declaration><![CDATA[public string RewritingResult]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="17" sc="41" el="17" ec="45">Components\UrlRewritingResult.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="17" sc="46" el="17" ec="50">Components\UrlRewritingResult.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Status">
          <declaration><![CDATA[public int Status]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="35" sc="29" el="35" ec="33">Components\UrlRewritingResult.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="35" sc="34" el="35" ec="38">Components\UrlRewritingResult.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="Dnn.PersonaBar.Seo.Services">
    <class name="SeoController">
      <declaration><![CDATA[public class SeoController : PersonaBarApiController]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[private readonly SeoController _controller = new SeoController();]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="42" sc="9" el="42" ec="96">Services\SeoController.cs</location>
            <body hash="d170006e6b5f4f47bcf8307ff8f9cbb8"><![CDATA[private readonly Components.SeoController _controller = new Components.SeoController()]]></body>
          </codeblock>
        </constructor>
        <constructor name=".cctor">
          <declaration><![CDATA[static SeoController()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="41" sc="9" el="43" ec="159">Services\SeoController.cs</location>
            <body hash="ac875995a1fb0464e1b44e8da9f8e5b3"><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof(SeoController));
        private readonly Components.SeoController _controller = new Components.SeoController();
        private static readonly string LocalResourcesFile = Path.Combine("~/DesktopModules/admin/Dnn.PersonaBar/Modules/Dnn.Seo/App_LocalResources/Seo.resx");]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="CreateVerification">
          <declaration><![CDATA[public HttpResponseMessage CreateVerification(string verification)]]></declaration>
          <documentation>POST: api/SEO/CreateVerification
 <summary>
 Creates a verification file for specific search engine
 </summary>
 <param name="verification">Name of verification</param>
 <returns></returns></documentation>
          <codeblock>
            <location sl="351" sc="9" el="362" ec="10">Services\SeoController.cs</location>
            <body hash="73a35e02d238814db31bb876187fde40"><![CDATA[{
            try
            {
                _controller.CreateVerification(verification);
                return Request.CreateResponse(HttpStatusCode.OK, new { Success = true });
            }
            catch (Exception exc)
            {
                Logger.Error(exc);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetExtensionUrlProviders">
          <declaration><![CDATA[public HttpResponseMessage GetExtensionUrlProviders()]]></declaration>
          <documentation>GET: api/SEO/GetExtensionUrlProviders
 <summary>
 Gets list of extension url providers
 </summary>
 <param></param>
 <returns>extension url providers</returns></documentation>
          <codeblock>
            <location sl="505" sc="9" el="528" ec="10">Services\SeoController.cs</location>
            <body hash="3dbf5494556f53261cd74f84a7f1ad70"><![CDATA[{
            try
            {
                var providers = ExtensionUrlProviderController.GetProviders(PortalId).Select(p => new
                {
                    p.ExtensionUrlProviderId,
                    p.ProviderName,
                    p.IsActive,
                    SettingUrl = Globals.NavigateURL(PortalSettings.AdminTabId, "UrlProviderSettings", "Display=settings&popUp=true&ProviderId=" + p.ExtensionUrlProviderId)
                }).ToList();

                var response = new
                {
                    Success = true,
                    Providers = providers
                };
                return Request.CreateResponse(HttpStatusCode.OK, response);
            }
            catch (Exception exc)
            {
                Logger.Error(exc);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetGeneralSettings">
          <declaration><![CDATA[public HttpResponseMessage GetGeneralSettings()]]></declaration>
          <documentation>GET: api/SEO/GetGeneralSettings
 <summary>
 Gets general SEO settings
 </summary>
 <returns>General SEO settings</returns></documentation>
          <codeblock>
            <location sl="52" sc="9" el="90" ec="10">Services\SeoController.cs</location>
            <body hash="cc2a4c56a693f1b267e583044cc2e0f4"><![CDATA[{
            try
            {
                var urlSettings = new FriendlyUrlSettings(PortalId);

                var replacementCharacterList = new List<KeyValuePair<string, string>>();
                replacementCharacterList.Add(new KeyValuePair<string, string>(Localization.GetString("minusCharacter", LocalResourcesFile), "-"));
                replacementCharacterList.Add(new KeyValuePair<string, string>(Localization.GetString("underscoreCharacter", LocalResourcesFile), "_"));

                var deletedPageHandlingTypes = new List<KeyValuePair<string, string>>();
                deletedPageHandlingTypes.Add(new KeyValuePair<string, string>(Localization.GetString("Do404Error", LocalResourcesFile), "Do404Error"));
                deletedPageHandlingTypes.Add(new KeyValuePair<string, string>(Localization.GetString("Do301RedirectToPortalHome", LocalResourcesFile), "Do301RedirectToPortalHome"));

                var response = new
                {
                    Success = true,
                    Settings = new
                    {
                        EnableSystemGeneratedUrls = urlSettings.ReplaceSpaceWith != FriendlyUrlSettings.ReplaceSpaceWithNothing,
                        urlSettings.ReplaceSpaceWith,
                        urlSettings.ForceLowerCase,
                        urlSettings.AutoAsciiConvert,
                        urlSettings.ForcePortalDefaultLanguage,
                        DeletedTabHandlingType = urlSettings.DeletedTabHandlingType.ToString(),
                        urlSettings.RedirectUnfriendly,
                        urlSettings.RedirectWrongCase
                    },
                    ReplacementCharacterList = replacementCharacterList,
                    DeletedPageHandlingTypes = deletedPageHandlingTypes
                };

                return Request.CreateResponse(HttpStatusCode.OK, response);
            }
            catch (Exception exc)
            {
                Logger.Error(exc);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetRegexSettings">
          <declaration><![CDATA[public HttpResponseMessage GetRegexSettings()]]></declaration>
          <documentation>GET: api/SEO/GetRegexSettings
 <summary>
 Gets SEO regex settings
 </summary>
 <returns>General SEO regex settings</returns></documentation>
          <codeblock>
            <location sl="137" sc="9" el="167" ec="10">Services\SeoController.cs</location>
            <body hash="11526080106270965163c26a6296da74"><![CDATA[{
            try
            {
                var urlSettings = new FriendlyUrlSettings(PortalId);

                var response = new
                {
                    Success = true,
                    Settings = new
                    {
                        urlSettings.IgnoreRegex,
                        urlSettings.DoNotRewriteRegex,
                        urlSettings.UseSiteUrlsRegex,
                        urlSettings.DoNotRedirectRegex,
                        urlSettings.DoNotRedirectSecureRegex,
                        urlSettings.ForceLowerCaseRegex,
                        urlSettings.NoFriendlyUrlRegex,
                        urlSettings.DoNotIncludeInPathRegex,
                        urlSettings.ValidExtensionlessUrlsRegex,
                        urlSettings.RegexMatch
                    }
                };

                return Request.CreateResponse(HttpStatusCode.OK, response);
            }
            catch (Exception exc)
            {
                Logger.Error(exc);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetSitemapProviders">
          <declaration><![CDATA[public HttpResponseMessage GetSitemapProviders()]]></declaration>
          <documentation>GET: api/SEO/GetSitemapProviders
 <summary>
 Gets list of sitemap providers
 </summary>
 <param></param>
 <returns>Web Server information</returns></documentation>
          <codeblock>
            <location sl="437" sc="9" el="460" ec="10">Services\SeoController.cs</location>
            <body hash="a109f61140b37a4c82bfce54da2b4908"><![CDATA[{
            try
            {
                var providers = _controller.GetSitemapProviders().Select(p => new
                {
                    p.Name,
                    p.Enabled,
                    p.Priority,
                    p.OverridePriority
                }).ToList();

                var response = new
                {
                    Success = true,
                    Providers = providers
                };
                return Request.CreateResponse(HttpStatusCode.OK, response);
            }
            catch (Exception exc)
            {
                Logger.Error(exc);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetSitemapSettings">
          <declaration><![CDATA[public HttpResponseMessage GetSitemapSettings()]]></declaration>
          <documentation>GET: api/SEO/GetSitemapSettings
 <summary>
 Gets sitemap settings
 </summary>
 <param></param>
 <returns>Data of sitemap settings</returns></documentation>
          <codeblock>
            <location sl="289" sc="9" el="340" ec="10">Services\SeoController.cs</location>
            <body hash="1cf201b7ca38b613f79f8dd01afec3cd"><![CDATA[{
            try
            {
                var portalAlias = !string.IsNullOrEmpty(PortalSettings.DefaultPortalAlias)
                                ? PortalSettings.DefaultPortalAlias
                                : PortalSettings.PortalAlias.HTTPAlias;

                var str = PortalController.GetPortalSetting("SitemapMinPriority", PortalId, "0.1");
                float sitemapMinPriority;
                if (!float.TryParse(str, out sitemapMinPriority))
                {
                    sitemapMinPriority = 0.1f;
                }

                str = PortalController.GetPortalSetting("SitemapExcludePriority", PortalId, "0.1");
                float sitemapExcludePriority;
                if (!float.TryParse(str, out sitemapExcludePriority))
                {
                    sitemapExcludePriority = 0.1f;
                }


                var settings = new
                {
                    SitemapUrl = Globals.AddHTTP(portalAlias) + @"/SiteMap.aspx",
                    SitemapLevelMode = PortalController.GetPortalSettingAsBoolean("SitemapLevelMode", PortalId, false),
                    SitemapMinPriority = sitemapMinPriority,
                    SitemapIncludeHidden = PortalController.GetPortalSettingAsBoolean("SitemapIncludeHidden", PortalId, false),
                    SitemapExcludePriority = sitemapExcludePriority,
                    SitemapCacheDays = PortalController.GetPortalSettingAsInteger("SitemapCacheDays", PortalId, 1)
                };

                var searchEngineUrls = new List<KeyValuePair<string, string>>
                {
                    new KeyValuePair<string, string>("Google", _controller.GetSearchEngineSubmissionUrl("google")),
                    new KeyValuePair<string, string>("Bing", _controller.GetSearchEngineSubmissionUrl("bing")),
                    new KeyValuePair<string, string>("Yahoo!", _controller.GetSearchEngineSubmissionUrl("yahoo!"))
                };

                return Request.CreateResponse(HttpStatusCode.OK, new
                {
                    Success = true,
                    Settings = settings,
                    SearchEngineUrls = searchEngineUrls
                });
            }
            catch (Exception exc)
            {
                Logger.Error(exc);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="ResetCache">
          <declaration><![CDATA[public HttpResponseMessage ResetCache()]]></declaration>
          <documentation>POST: api/SEO/ResetCache
 <summary>
 Resets cache
 </summary>
 <param></param>
 <returns></returns></documentation>
          <codeblock>
            <location sl="416" sc="9" el="427" ec="10">Services\SeoController.cs</location>
            <body hash="bb7bed98c85da94fd9bbb2a2792980e5"><![CDATA[{
            try
            {
                _controller.ResetCache();
                return Request.CreateResponse(HttpStatusCode.OK, new { Success = true });
            }
            catch (Exception exc)
            {
                Logger.Error(exc);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="TestUrl">
          <declaration><![CDATA[public HttpResponseMessage TestUrl(int pageId, string queryString, string customPageName)]]></declaration>
          <documentation>
            <summary>
 Tests the internal URL
 </summary>
 <returns>Various forms of the URL and any messages when they exist</returns>
 <example>
 GET /API/PersonaBar/SEO/TestUrl?pageId=53&amp;queryString=ab%3Dcd&amp;customPageName=test-page
 </example></documentation>
          <codeblock>
            <location sl="568" sc="9" el="583" ec="10">Services\SeoController.cs</location>
            <body hash="28bae9a459d61c1d7f72a1f1d5f03f33"><![CDATA[{
            try
            {
                var response = new
                {
                    Success = true,
                    Urls = TestUrlInternal(pageId, queryString, customPageName)
                };
                return Request.CreateResponse(HttpStatusCode.OK, response);
            }
            catch (Exception exc)
            {
                Logger.Error(exc);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="TestUrlInternal">
          <declaration><![CDATA[private IEnumerable<string> TestUrlInternal(int pageId, string queryString, string customPageName)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="586" sc="9" el="593" ec="10">Services\SeoController.cs</location>
            <body hash="731fa7061904ee824aab30bfdc456ac6"><![CDATA[{
            var provider = new DNNFriendlyUrlProvider();
            var tab = TabController.Instance.GetTab(pageId, PortalId, false);
            var pageName = string.IsNullOrEmpty(customPageName) ? Globals.glbDefaultPage : customPageName;
            return PortalAliasController.Instance.GetPortalAliasesByPortalId(PortalId).
                Select(alias => provider.FriendlyUrl(
                    tab, "~/Default.aspx?tabId=" + pageId + "&" + queryString, pageName, alias.HTTPAlias));
        }]]></body>
          </codeblock>
        </method>
        <method name="TestUrlRewrite">
          <declaration><![CDATA[public HttpResponseMessage TestUrlRewrite(string uri)]]></declaration>
          <documentation>GET: api/SEO/TestUrlRewrite
 <summary>
 Tests the rewritten URL
 </summary>
 <returns>Rewitten URL and few other information about the URL ( language, redirection result and reason, messages)</returns>
 <example>
 GET /API/PersonaBar/SEO/TestUrlRewrite?uri=http%3A%2F%2Fmysite.com%2Ftest-page
 </example></documentation>
          <codeblock>
            <location sl="605" sc="9" el="620" ec="10">Services\SeoController.cs</location>
            <body hash="705448ac65d464db7fc62b5422010e8b"><![CDATA[{
            try
            {
                var response = new
                {
                    Success = true,
                    RewritingResult = TestUrlRewritingInternal(uri)
                };
                return Request.CreateResponse(HttpStatusCode.OK, response);
            }
            catch (Exception exc)
            {
                Logger.Error(exc);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="TestUrlRewritingInternal">
          <declaration><![CDATA[private UrlRewritingResult TestUrlRewritingInternal(string uriString)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="623" sc="9" el="654" ec="10">Services\SeoController.cs</location>
            <body hash="d716338ba3879d1902279cef25d4df74"><![CDATA[{
            var rewritingResult = new UrlRewritingResult();
            try
            {
                var noneText = Localization.GetString("None", Localization.GlobalResourceFile);
                var uri = new Uri(uriString);
                var provider = new AdvancedUrlRewriter();
                var result = new UrlAction(uri.Scheme, uriString, Globals.ApplicationMapPath)
                {
                    RawUrl = uriString
                };
                var httpContext = new HttpContext(HttpContext.Current.Request, new HttpResponse(new StringWriter()));
                provider.ProcessTestRequestWithContext(httpContext, uri, true, result, new FriendlyUrlSettings(PortalId));
                rewritingResult.RewritingResult = string.IsNullOrEmpty(result.RewritePath) ? noneText : result.RewritePath;
                rewritingResult.Culture = string.IsNullOrEmpty(result.CultureCode) ? noneText : result.CultureCode;
                var tab = TabController.Instance.GetTab(result.TabId, result.PortalId, false);
                rewritingResult.IdentifiedPage = (tab != null ? tab.TabName : noneText);
                rewritingResult.RedirectionReason = Localization.GetString(result.Reason.ToString());
                rewritingResult.RedirectionResult = result.FinalUrl;
                var messages = new StringBuilder();
                foreach (var message in result.DebugMessages)
                {
                    messages.AppendLine(message);
                }
                rewritingResult.OperationMessages = messages.ToString();
            }
            catch (Exception ex)
            {
                rewritingResult.OperationMessages = ex.Message;
            }
            return rewritingResult;
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateExtensionUrlProviderStatus">
          <declaration><![CDATA[public HttpResponseMessage UpdateExtensionUrlProviderStatus(UpdateExtensionUrlProviderStatusRequest request)]]></declaration>
          <documentation>POST: api/SEO/UpdateExtensionUrlProviderStatus
 <summary>
 Enable or disable extension url provider
 </summary>
 <param name="request">Data of extension url provider</param>
 <returns></returns></documentation>
          <codeblock>
            <location sl="539" sc="9" el="557" ec="10">Services\SeoController.cs</location>
            <body hash="13d84f39d01239dc77f89c63289b0eed"><![CDATA[{
            try
            {
                if (request.IsActive)
                {
                    ExtensionUrlProviderController.EnableProvider(request.ProviderId, PortalId);
                }
                else
                {
                    ExtensionUrlProviderController.DisableProvider(request.ProviderId, PortalId);
                }
                return Request.CreateResponse(HttpStatusCode.OK, new { Success = true });
            }
            catch (Exception exc)
            {
                Logger.Error(exc);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateGeneralSettings">
          <declaration><![CDATA[public HttpResponseMessage UpdateGeneralSettings(UpdateGeneralSettingsRequest request)]]></declaration>
          <documentation>POST: api/SEO/UpdateGeneralSettings
 <summary>
 Updates SEO general settings
 </summary>
 <param name="request"></param>
 <returns></returns></documentation>
          <codeblock>
            <location sl="101" sc="9" el="127" ec="10">Services\SeoController.cs</location>
            <body hash="7c13b689f34154a165d5d512fbd0c2b1"><![CDATA[{
            try
            {
                string characterSub = FriendlyUrlSettings.ReplaceSpaceWithNothing;
                if (request.EnableSystemGeneratedUrls)
                {
                    characterSub = request.ReplaceSpaceWith;
                }
                PortalController.UpdatePortalSetting(PortalId, FriendlyUrlSettings.ReplaceSpaceWithSetting, characterSub, false);
                PortalController.UpdatePortalSetting(PortalId, FriendlyUrlSettings.DeletedTabHandlingTypeSetting, request.DeletedTabHandlingType, false);
                PortalController.UpdatePortalSetting(PortalId, FriendlyUrlSettings.ForceLowerCaseSetting, request.ForceLowerCase ? "Y" : "N", false);
                PortalController.UpdatePortalSetting(PortalId, FriendlyUrlSettings.RedirectUnfriendlySetting, request.RedirectUnfriendly ? "Y" : "N", false);
                PortalController.UpdatePortalSetting(PortalId, FriendlyUrlSettings.RedirectMixedCaseSetting, request.RedirectWrongCase.ToString(), false);
                PortalController.UpdatePortalSetting(PortalId, FriendlyUrlSettings.UsePortalDefaultLanguageSetting, request.ForcePortalDefaultLanguage.ToString(), false);
                PortalController.UpdatePortalSetting(PortalId, FriendlyUrlSettings.AutoAsciiConvertSetting, request.AutoAsciiConvert.ToString(), false);

                DataCache.ClearPortalCache(PortalId, false);
                DataCache.ClearTabsCache(PortalId);

                return Request.CreateResponse(HttpStatusCode.OK, new { Success = true });
            }
            catch (Exception exc)
            {
                Logger.Error(exc);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateRegexSettings">
          <declaration><![CDATA[public HttpResponseMessage UpdateRegexSettings(UpdateRegexSettingsRequest request)]]></declaration>
          <documentation>POST: api/SEO/UpdateRegexSettings
 <summary>
 Updates SEO regex settings
 </summary>
 <param name="request"></param>
 <returns></returns></documentation>
          <codeblock>
            <location sl="179" sc="9" el="262" ec="10">Services\SeoController.cs</location>
            <body hash="f81e863c1559949b3bcecc04a127a714"><![CDATA[{
            try
            {
                List<KeyValuePair<string, string>> validationErrors = new List<KeyValuePair<string, string>>();
                if (!ValidateRegex(request.IgnoreRegex))
                {
                    validationErrors.Add(new KeyValuePair<string, string>("IgnoreRegex", Localization.GetString("ignoreRegExInvalidPattern", LocalResourcesFile)));
                }
                if (!ValidateRegex(request.DoNotRewriteRegex))
                {
                    validationErrors.Add(new KeyValuePair<string, string>("DoNotRewriteRegex", Localization.GetString("doNotRewriteRegExInvalidPattern", LocalResourcesFile)));
                }
                if (!ValidateRegex(request.UseSiteUrlsRegex))
                {
                    validationErrors.Add(new KeyValuePair<string, string>("UseSiteUrlsRegex", Localization.GetString("siteUrlsOnlyRegExInvalidPattern", LocalResourcesFile)));
                }
                if (!ValidateRegex(request.DoNotRedirectRegex))
                {
                    validationErrors.Add(new KeyValuePair<string, string>("DoNotRedirectRegex", Localization.GetString("doNotRedirectUrlRegExInvalidPattern", LocalResourcesFile)));
                }
                if (!ValidateRegex(request.DoNotRedirectSecureRegex))
                {
                    validationErrors.Add(new KeyValuePair<string, string>("DoNotRedirectSecureRegex", Localization.GetString("doNotRedirectHttpsUrlRegExInvalidPattern", LocalResourcesFile)));
                }
                if (!ValidateRegex(request.ForceLowerCaseRegex))
                {
                    validationErrors.Add(new KeyValuePair<string, string>("ForceLowerCaseRegex", Localization.GetString("preventLowerCaseUrlRegExInvalidPattern", LocalResourcesFile)));
                }
                if (!ValidateRegex(request.NoFriendlyUrlRegex))
                {
                    validationErrors.Add(new KeyValuePair<string, string>("NoFriendlyUrlRegex", Localization.GetString("doNotUseFriendlyUrlsRegExInvalidPattern", LocalResourcesFile)));
                }
                if (!ValidateRegex(request.DoNotIncludeInPathRegex))
                {
                    validationErrors.Add(new KeyValuePair<string, string>("DoNotIncludeInPathRegex", Localization.GetString("keepInQueryStringRegExInvalidPattern", LocalResourcesFile)));
                }
                if (!ValidateRegex(request.ValidExtensionlessUrlsRegex))
                {
                    validationErrors.Add(new KeyValuePair<string, string>("ValidExtensionlessUrlsRegex", Localization.GetString("urlsWithNoExtensionRegExInvalidPattern", LocalResourcesFile)));
                }
                if (!ValidateRegex(request.RegexMatch))
                {
                    validationErrors.Add(new KeyValuePair<string, string>("RegexMatch", Localization.GetString("validFriendlyUrlRegExInvalidPattern", LocalResourcesFile)));
                }

                if (validationErrors.Count > 0)
                {
                    return Request.CreateResponse(HttpStatusCode.BadRequest, new { Success = false, Errors = validationErrors });
                }
                else
                {
                    HostController.Instance.Update(FriendlyUrlSettings.IgnoreRegexSetting, request.IgnoreRegex, false);
                    HostController.Instance.Update(FriendlyUrlSettings.DoNotRewriteRegExSetting,
                        request.DoNotRewriteRegex, false);
                    HostController.Instance.Update(FriendlyUrlSettings.SiteUrlsOnlyRegexSetting,
                        request.UseSiteUrlsRegex, false);
                    HostController.Instance.Update(FriendlyUrlSettings.DoNotRedirectUrlRegexSetting,
                        request.DoNotRedirectRegex, false);
                    HostController.Instance.Update(FriendlyUrlSettings.DoNotRedirectHttpsUrlRegexSetting,
                        request.DoNotRedirectSecureRegex, false);
                    HostController.Instance.Update(FriendlyUrlSettings.PreventLowerCaseUrlRegexSetting,
                        request.ForceLowerCaseRegex, false);
                    HostController.Instance.Update(FriendlyUrlSettings.DoNotUseFriendlyUrlRegexSetting,
                        request.NoFriendlyUrlRegex, false);
                    HostController.Instance.Update(FriendlyUrlSettings.KeepInQueryStringRegexSetting,
                        request.DoNotIncludeInPathRegex, false);
                    HostController.Instance.Update(FriendlyUrlSettings.UrlsWithNoExtensionRegexSetting,
                        request.ValidExtensionlessUrlsRegex, false);
                    HostController.Instance.Update(FriendlyUrlSettings.ValidFriendlyUrlRegexSetting, request.RegexMatch,
                        false);

                    DataCache.ClearHostCache(false);
                    CacheController.FlushPageIndexFromCache();
                    CacheController.FlushFriendlyUrlSettingsFromCache();

                    return Request.CreateResponse(HttpStatusCode.OK, new { Success = true });
                }
            }
            catch (Exception exc)
            {
                Logger.Error(exc);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateSitemapProvider">
          <declaration><![CDATA[public HttpResponseMessage UpdateSitemapProvider(UpdateSitemapProviderRequest request)]]></declaration>
          <documentation>POST: api/SEO/UpdateSitemapProvider
 <summary>
 Updates settings of a sitemap provider
 </summary>
 <param name="request">Data of sitemap provider</param>
 <returns></returns></documentation>
          <codeblock>
            <location sl="471" sc="9" el="495" ec="10">Services\SeoController.cs</location>
            <body hash="0aad22f1fbaa7d0aa18f8170be9f192f"><![CDATA[{
            try
            {
                SitemapProvider editedProvider =
                    _controller.GetSitemapProviders()
                        .FirstOrDefault(p => p.Name.Equals(request.Name, StringComparison.InvariantCultureIgnoreCase));

                if (editedProvider != null)
                {
                    editedProvider.Enabled = request.Enabled;
                    editedProvider.OverridePriority = request.Priority > -1;
                    if (editedProvider.OverridePriority)
                    {
                        editedProvider.Priority = request.Priority;
                    }
                }

                return Request.CreateResponse(HttpStatusCode.OK, new { Success = true });
            }
            catch (Exception exc)
            {
                Logger.Error(exc);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateSitemapSettings">
          <declaration><![CDATA[public HttpResponseMessage UpdateSitemapSettings(SitemapSettingsRequest request)]]></declaration>
          <documentation>POST: api/SEO/UpdateSitemapSettings
 <summary>
 Updates sitemap settings
 </summary>
 <param name="request">Data of sitemap settings</param>
 <returns></returns></documentation>
          <codeblock>
            <location sl="373" sc="9" el="405" ec="10">Services\SeoController.cs</location>
            <body hash="a2bfa81621e4d16323f84f716d789824"><![CDATA[{
            try
            {
                PortalController.UpdatePortalSetting(PortalId, "SitemapLevelMode", request.SitemapLevelMode.ToString());

                if (request.SitemapMinPriority < 0)
                {
                    request.SitemapMinPriority = 0;
                }
                PortalController.UpdatePortalSetting(PortalId, "SitemapMinPriority", request.SitemapMinPriority.ToString(NumberFormatInfo.InvariantInfo));

                PortalController.UpdatePortalSetting(PortalId, "SitemapIncludeHidden", request.SitemapIncludeHidden.ToString());

                if (request.SitemapExcludePriority < 0)
                {
                    request.SitemapExcludePriority = 0;
                }
                PortalController.UpdatePortalSetting(PortalId, "SitemapExcludePriority", request.SitemapExcludePriority.ToString(NumberFormatInfo.InvariantInfo));

                if (request.SitemapCacheDays == 0)
                {
                    _controller.ResetCache();
                }

                PortalController.UpdatePortalSetting(PortalId, "SitemapCacheDays", request.SitemapCacheDays.ToString());
                return Request.CreateResponse(HttpStatusCode.OK, new { Success = true });
            }
            catch (Exception exc)
            {
                Logger.Error(exc);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, exc);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="ValidateRegex">
          <declaration><![CDATA[private static bool ValidateRegex(string regexPattern)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="265" sc="9" el="279" ec="10">Services\SeoController.cs</location>
            <body hash="648b6e2f9461ea834d139da54fa02e85"><![CDATA[{
            try
            {
                if (Regex.IsMatch("", regexPattern))
                {
                }

                return true;
            }
            catch
            {
                //ignore
            }
            return false;
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_controller">
          <declaration><![CDATA[private readonly SeoController _controller = new SeoController();]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="LocalResourcesFile">
          <declaration><![CDATA[private static readonly string LocalResourcesFile = Path.Combine(new string[]]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="Logger">
          <declaration><![CDATA[private static readonly ILog Logger = LoggerSource.Instance.GetLogger(typeof(SeoController));]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
  <namespace name="Dnn.PersonaBar.Seo.Services.Dto">
    <class name="SitemapSettingsRequest">
      <declaration><![CDATA[public class SitemapSettingsRequest]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public SitemapSettingsRequest()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="SitemapCacheDays">
          <declaration><![CDATA[public int SitemapCacheDays]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="45" sc="39" el="45" ec="43">Services\Seo\UpdateSitemapSettingsRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="45" sc="44" el="45" ec="48">Services\Seo\UpdateSitemapSettingsRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="SitemapExcludePriority">
          <declaration><![CDATA[public float SitemapExcludePriority]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="43" sc="47" el="43" ec="51">Services\Seo\UpdateSitemapSettingsRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="43" sc="52" el="43" ec="56">Services\Seo\UpdateSitemapSettingsRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="SitemapIncludeHidden">
          <declaration><![CDATA[public bool SitemapIncludeHidden]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="41" sc="44" el="41" ec="48">Services\Seo\UpdateSitemapSettingsRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="41" sc="49" el="41" ec="53">Services\Seo\UpdateSitemapSettingsRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="SitemapLevelMode">
          <declaration><![CDATA[public bool SitemapLevelMode]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="37" sc="40" el="37" ec="44">Services\Seo\UpdateSitemapSettingsRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="37" sc="45" el="37" ec="49">Services\Seo\UpdateSitemapSettingsRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="SitemapMinPriority">
          <declaration><![CDATA[public float SitemapMinPriority]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="39" sc="43" el="39" ec="47">Services\Seo\UpdateSitemapSettingsRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="39" sc="48" el="39" ec="52">Services\Seo\UpdateSitemapSettingsRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="SitemapUrl">
          <declaration><![CDATA[public string SitemapUrl]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="35" sc="36" el="35" ec="40">Services\Seo\UpdateSitemapSettingsRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="35" sc="41" el="35" ec="45">Services\Seo\UpdateSitemapSettingsRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="UpdateExtensionUrlProviderStatusRequest">
      <declaration><![CDATA[public class UpdateExtensionUrlProviderStatusRequest]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public UpdateExtensionUrlProviderStatusRequest()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="IsActive">
          <declaration><![CDATA[public bool IsActive]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="37" sc="32" el="37" ec="36">Services\Seo\UpdateExtensionUrlProviderStatusRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="37" sc="37" el="37" ec="41">Services\Seo\UpdateExtensionUrlProviderStatusRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ProviderId">
          <declaration><![CDATA[public int ProviderId]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="35" sc="33" el="35" ec="37">Services\Seo\UpdateExtensionUrlProviderStatusRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="35" sc="38" el="35" ec="42">Services\Seo\UpdateExtensionUrlProviderStatusRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="UpdateGeneralSettingsRequest">
      <declaration><![CDATA[public class UpdateGeneralSettingsRequest]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public UpdateGeneralSettingsRequest()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="AutoAsciiConvert">
          <declaration><![CDATA[public bool AutoAsciiConvert]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="43" sc="40" el="43" ec="44">Services\Seo\UpdateGeneralSettingsRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="43" sc="45" el="43" ec="49">Services\Seo\UpdateGeneralSettingsRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="DeletedTabHandlingType">
          <declaration><![CDATA[public string DeletedTabHandlingType]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="45" sc="48" el="45" ec="52">Services\Seo\UpdateGeneralSettingsRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="45" sc="53" el="45" ec="57">Services\Seo\UpdateGeneralSettingsRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="EnableSystemGeneratedUrls">
          <declaration><![CDATA[public bool EnableSystemGeneratedUrls]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="37" sc="49" el="37" ec="53">Services\Seo\UpdateGeneralSettingsRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="37" sc="54" el="37" ec="58">Services\Seo\UpdateGeneralSettingsRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ForceLowerCase">
          <declaration><![CDATA[public bool ForceLowerCase]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="41" sc="38" el="41" ec="42">Services\Seo\UpdateGeneralSettingsRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="41" sc="43" el="41" ec="47">Services\Seo\UpdateGeneralSettingsRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ForcePortalDefaultLanguage">
          <declaration><![CDATA[public bool ForcePortalDefaultLanguage]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="51" sc="50" el="51" ec="54">Services\Seo\UpdateGeneralSettingsRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="51" sc="55" el="51" ec="59">Services\Seo\UpdateGeneralSettingsRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="RedirectUnfriendly">
          <declaration><![CDATA[public bool RedirectUnfriendly]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="47" sc="42" el="47" ec="46">Services\Seo\UpdateGeneralSettingsRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="47" sc="47" el="47" ec="51">Services\Seo\UpdateGeneralSettingsRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="RedirectWrongCase">
          <declaration><![CDATA[public bool RedirectWrongCase]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="49" sc="41" el="49" ec="45">Services\Seo\UpdateGeneralSettingsRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="49" sc="46" el="49" ec="50">Services\Seo\UpdateGeneralSettingsRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ReplaceSpaceWith">
          <declaration><![CDATA[public string ReplaceSpaceWith]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="39" sc="42" el="39" ec="46">Services\Seo\UpdateGeneralSettingsRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="39" sc="47" el="39" ec="51">Services\Seo\UpdateGeneralSettingsRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="UpdateRegexSettingsRequest">
      <declaration><![CDATA[public class UpdateRegexSettingsRequest]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public UpdateRegexSettingsRequest()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="DoNotIncludeInPathRegex">
          <declaration><![CDATA[public string DoNotIncludeInPathRegex]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="51" sc="49" el="51" ec="53">Services\Seo\UpdateRegexSettingsRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="51" sc="54" el="51" ec="58">Services\Seo\UpdateRegexSettingsRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="DoNotRedirectRegex">
          <declaration><![CDATA[public string DoNotRedirectRegex]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="43" sc="44" el="43" ec="48">Services\Seo\UpdateRegexSettingsRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="43" sc="49" el="43" ec="53">Services\Seo\UpdateRegexSettingsRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="DoNotRedirectSecureRegex">
          <declaration><![CDATA[public string DoNotRedirectSecureRegex]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="45" sc="50" el="45" ec="54">Services\Seo\UpdateRegexSettingsRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="45" sc="55" el="45" ec="59">Services\Seo\UpdateRegexSettingsRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="DoNotRewriteRegex">
          <declaration><![CDATA[public string DoNotRewriteRegex]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="39" sc="43" el="39" ec="47">Services\Seo\UpdateRegexSettingsRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="39" sc="48" el="39" ec="52">Services\Seo\UpdateRegexSettingsRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ForceLowerCaseRegex">
          <declaration><![CDATA[public string ForceLowerCaseRegex]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="47" sc="45" el="47" ec="49">Services\Seo\UpdateRegexSettingsRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="47" sc="50" el="47" ec="54">Services\Seo\UpdateRegexSettingsRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="IgnoreRegex">
          <declaration><![CDATA[public string IgnoreRegex]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="37" sc="37" el="37" ec="41">Services\Seo\UpdateRegexSettingsRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="37" sc="42" el="37" ec="46">Services\Seo\UpdateRegexSettingsRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="NoFriendlyUrlRegex">
          <declaration><![CDATA[public string NoFriendlyUrlRegex]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="49" sc="44" el="49" ec="48">Services\Seo\UpdateRegexSettingsRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="49" sc="49" el="49" ec="53">Services\Seo\UpdateRegexSettingsRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="RegexMatch">
          <declaration><![CDATA[public string RegexMatch]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="55" sc="36" el="55" ec="40">Services\Seo\UpdateRegexSettingsRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="55" sc="41" el="55" ec="45">Services\Seo\UpdateRegexSettingsRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="UseSiteUrlsRegex">
          <declaration><![CDATA[public string UseSiteUrlsRegex]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="41" sc="42" el="41" ec="46">Services\Seo\UpdateRegexSettingsRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="41" sc="47" el="41" ec="51">Services\Seo\UpdateRegexSettingsRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="ValidExtensionlessUrlsRegex">
          <declaration><![CDATA[public string ValidExtensionlessUrlsRegex]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="53" sc="53" el="53" ec="57">Services\Seo\UpdateRegexSettingsRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="53" sc="58" el="53" ec="62">Services\Seo\UpdateRegexSettingsRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
    <class name="UpdateSitemapProviderRequest">
      <declaration><![CDATA[public class UpdateSitemapProviderRequest]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public UpdateSitemapProviderRequest()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2147483647" sc="0" el="0" ec="0">
            </location>
            <body hash="d41d8cd98f00b204e9800998ecf8427e"><![CDATA[]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
      </methods>
      <fields>
      </fields>
      <properties>
        <property name="Enabled">
          <declaration><![CDATA[public bool Enabled]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="37" sc="31" el="37" ec="35">Services\Seo\UpdateSitemapProviderRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="37" sc="36" el="37" ec="40">Services\Seo\UpdateSitemapProviderRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Name">
          <declaration><![CDATA[public string Name]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="35" sc="30" el="35" ec="34">Services\Seo\UpdateSitemapProviderRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="35" sc="35" el="35" ec="39">Services\Seo\UpdateSitemapProviderRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="OverridePriority">
          <declaration><![CDATA[public bool OverridePriority]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="41" sc="40" el="41" ec="44">Services\Seo\UpdateSitemapProviderRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="41" sc="45" el="41" ec="49">Services\Seo\UpdateSitemapProviderRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
        <property name="Priority">
          <declaration><![CDATA[public float Priority]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="39" sc="33" el="39" ec="37">Services\Seo\UpdateSitemapProviderRequest.cs</location>
            <body hash="b5eda0a74558a342cf659187f06f746f"><![CDATA[get]]></body>
          </codeblock>
          <codeblock>
            <location sl="39" sc="38" el="39" ec="42">Services\Seo\UpdateSitemapProviderRequest.cs</location>
            <body hash="cdaeeeba9b4a4c5ebf042c0215a7bb0e"><![CDATA[set]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
</root>